
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f600  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a7cc  0801f800  0801f800  0002f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039fcc  08039fcc  000506ec  2**0
                  CONTENTS
  4 .ARM          00000008  08039fcc  08039fcc  00049fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039fd4  08039fd4  000506ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039fd4  08039fd4  00049fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039fd8  08039fd8  00049fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006ec  20000000  08039fdc  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00034d90  200006f0  0803a6c8  000506f0  2**3
                  ALLOC
 10 ._user_heap_stack 00048000  20035480  0803a6c8  00055480  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000506ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00094e09  00000000  00000000  0005071a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00011355  00000000  00000000  000e5523  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00034c14  00000000  00000000  000f6878  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000031b0  00000000  00000000  0012b490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006138  00000000  00000000  0012e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004593d  00000000  00000000  00134778  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00053ece  00000000  00000000  0017a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00130055  00000000  00000000  001cdf83  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002fdfd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b638  00000000  00000000  002fe054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f0 	.word	0x200006f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f7e8 	.word	0x0801f7e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006f4 	.word	0x200006f4
 800023c:	0801f7e8 	.word	0x0801f7e8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <ADC_MultiModeDMAError>:
 * @brief  DMA error callback
 * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
 *                the configuration information for the specified DMA module.
 * @retval None
 */
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000610:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000612:	2340      	movs	r3, #64	; 0x40
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000614:	6b84      	ldr	r4, [r0, #56]	; 0x38
	/* Set ADC error code to DMA error */
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;

	printf("Multi-mode DMA Error\n");
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <ADC_MultiModeDMAError+0x20>)
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000618:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800061a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000622:	f01d f869 	bl	801d6f8 <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000626:	4620      	mov	r0, r4
}
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800062c:	f004 bb22 	b.w	8004c74 <HAL_ADC_ErrorCallback>
 8000630:	0801fa68 	.word	0x0801fa68

08000634 <HAL_ADCEx_MultiModeStart_DBDMA>:
 * @param  pData:   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
 * @param  Length:  The length of data to be transferred from ADC peripheral to memory.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DBDMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t *pData2,
		uint32_t Length) {
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	4604      	mov	r4, r0
 8000638:	4616      	mov	r6, r2
 800063a:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 800063c:	2000      	movs	r0, #0

	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800063e:	69a2      	ldr	r2, [r4, #24]
		uint32_t Length) {
 8000640:	460d      	mov	r5, r1
 8000642:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 8000644:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000646:	2a01      	cmp	r2, #1
 8000648:	d903      	bls.n	8000652 <HAL_ADCEx_MultiModeStart_DBDMA+0x1e>
 800064a:	2192      	movs	r1, #146	; 0x92
 800064c:	4844      	ldr	r0, [pc, #272]	; (8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 800064e:	f001 ff13 	bl	8002478 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000654:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8000658:	d17c      	bne.n	8000754 <HAL_ADCEx_MultiModeStart_DBDMA+0x120>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800065a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800065e:	2b01      	cmp	r3, #1
 8000660:	d903      	bls.n	800066a <HAL_ADCEx_MultiModeStart_DBDMA+0x36>
 8000662:	2194      	movs	r1, #148	; 0x94
 8000664:	483e      	ldr	r0, [pc, #248]	; (8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000666:	f001 ff07 	bl	8002478 <assert_failed>

	/* Process locked */
	__HAL_LOCK(hadc);
 800066a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800066e:	2b01      	cmp	r3, #1
 8000670:	d06d      	beq.n	800074e <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>

	/* Check if ADC peripheral is disabled in order to enable it and wait during
	 Tstab time the ADC's stabilization */
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000672:	6822      	ldr	r2, [r4, #0]
	__HAL_LOCK(hadc);
 8000674:	2101      	movs	r1, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000676:	6893      	ldr	r3, [r2, #8]
	__HAL_LOCK(hadc);
 8000678:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800067c:	07d8      	lsls	r0, r3, #31
 800067e:	d414      	bmi.n	80006aa <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
		/* Enable the Peripheral */
		__HAL_ADC_ENABLE(hadc);

		/* Delay for temperature sensor stabilization time */
		/* Compute number of CPU cycles to wait for */
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000680:	4b38      	ldr	r3, [pc, #224]	; (8000764 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000682:	4839      	ldr	r0, [pc, #228]	; (8000768 <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000684:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 8000686:	6891      	ldr	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000688:	fba0 0303 	umull	r0, r3, r0, r3
		__HAL_ADC_ENABLE(hadc);
 800068c:	f041 0101 	orr.w	r1, r1, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000690:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000692:	6091      	str	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000698:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 800069a:	9b03      	ldr	r3, [sp, #12]
 800069c:	b12b      	cbz	r3, 80006aa <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
			counter--;
 800069e:	9b03      	ldr	r3, [sp, #12]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80006a4:	9b03      	ldr	r3, [sp, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1f9      	bne.n	800069e <HAL_ADCEx_MultiModeStart_DBDMA+0x6a>
		}
	}

	/* Start conversion if ADC is effectively enabled */
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80006aa:	6893      	ldr	r3, [r2, #8]
 80006ac:	07d9      	lsls	r1, r3, #31
 80006ae:	d545      	bpl.n	800073c <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		/* Set ADC state                                                          */
		/* - Clear state bitfield related to regular group conversion results     */
		/* - Set state bitfield related to regular group operation                */
		ADC_STATE_CLR_SET(hadc->State,
 80006b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6423      	str	r3, [r4, #64]	; 0x40
				HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
				HAL_ADC_STATE_REG_BUSY);

		/* If conversions on group regular are also triggering group injected,    */
		/* update ADC state.                                                      */
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80006bc:	6853      	ldr	r3, [r2, #4]
 80006be:	055b      	lsls	r3, r3, #21
 80006c0:	d505      	bpl.n	80006ce <HAL_ADCEx_MultiModeStart_DBDMA+0x9a>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006cc:	6423      	str	r3, [r4, #64]	; 0x40
		}

		/* State machine update: Check if an injected conversion is ongoing */
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80006ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006d0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80006d4:	d039      	beq.n	800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x116>
			/* Reset ADC error code fields related to conversions on group regular */
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80006d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006d8:	f023 0306 	bic.w	r3, r3, #6
 80006dc:	6463      	str	r3, [r4, #68]	; 0x44
		/* Unlock before starting ADC conversions: in case of potential           */
		/* interruption, to let the process to ADC IRQ Handler.                   */
		__HAL_UNLOCK(hadc);

		/* Set the DMA transfer complete callback */
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80006de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80006e0:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80006e2:	f8df c098 	ldr.w	ip, [pc, #152]	; 800077c <HAL_ADCEx_MultiModeStart_DBDMA+0x148>
		/* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
		/* start (in case of SW start):                                           */

		/* Clear regular group conversion flag and overrun flag */
		/* (To ensure of no unknown state from potential previous ADC operations) */
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80006e6:	f06f 0102 	mvn.w	r1, #2
		__HAL_UNLOCK(hadc);
 80006ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80006ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80006f0:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80006f6:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000780 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80006fa:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80006fc:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000700:	6011      	str	r1, [r2, #0]

		/* Enable ADC overrun interrupt */
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000702:	6853      	ldr	r3, [r2, #4]

		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 8000704:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800070c:	6053      	str	r3, [r2, #4]
			/* Enable the selected ADC DMA request after last transfer */
			ADC->CCR |= ADC_CCR_DDS;
 800070e:	4a19      	ldr	r2, [pc, #100]	; (8000774 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
 8000710:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 8000712:	b1b1      	cbz	r1, 8000742 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000718:	6053      	str	r3, [r2, #4]
			ADC->CCR &= ~ADC_CCR_DDS;
		}

		/* Enable the DMA Stream */
		//HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800071a:	4633      	mov	r3, r6
 800071c:	9700      	str	r7, [sp, #0]
 800071e:	462a      	mov	r2, r5
 8000720:	4915      	ldr	r1, [pc, #84]	; (8000778 <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 8000722:	f005 fae3 	bl	8005cec <HAL_DMAEx_MultiBufferStart_IT>
				Length);
		/* if no external trigger present enable software conversion of regular channels */
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	6898      	ldr	r0, [r3, #8]
 800072a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800072e:	d105      	bne.n	800073c <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			/* Enable the selected ADC software conversion for regular group */
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000736:	609a      	str	r2, [r3, #8]
		}
	}

	/* Return function status */
	return HAL_OK;
}
 8000738:	b005      	add	sp, #20
 800073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return HAL_OK;
 800073c:	2000      	movs	r0, #0
}
 800073e:	b005      	add	sp, #20
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000746:	6053      	str	r3, [r2, #4]
 8000748:	e7e7      	b.n	800071a <HAL_ADCEx_MultiModeStart_DBDMA+0xe6>
			ADC_CLEAR_ERRORCODE(hadc);
 800074a:	6463      	str	r3, [r4, #68]	; 0x44
 800074c:	e7c7      	b.n	80006de <HAL_ADCEx_MultiModeStart_DBDMA+0xaa>
	__HAL_LOCK(hadc);
 800074e:	2002      	movs	r0, #2
}
 8000750:	b005      	add	sp, #20
 8000752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000754:	2193      	movs	r1, #147	; 0x93
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000758:	f001 fe8e 	bl	8002478 <assert_failed>
 800075c:	e77d      	b.n	800065a <HAL_ADCEx_MultiModeStart_DBDMA+0x26>
 800075e:	bf00      	nop
 8000760:	0801fa80 	.word	0x0801fa80
 8000764:	200002b8 	.word	0x200002b8
 8000768:	431bde83 	.word	0x431bde83
 800076c:	fffff8fe 	.word	0xfffff8fe
 8000770:	08000611 	.word	0x08000611
 8000774:	40012300 	.word	0x40012300
 8000778:	40012308 	.word	0x40012308
 800077c:	080009dd 	.word	0x080009dd
 8000780:	080009ed 	.word	0x080009ed

08000784 <HAL_ADC_ConvCpltCallback>:
// rolling window size, could be 32, 64, 128 etc
#define WINSHIFT 5
#define WINSIZE (1<<WINSHIFT)

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{
 8000784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int32_t wdacc = 0;	// window difference accumulator
	static int32_t wmeanacc = 0;	// window mean accumulator
	volatile static uint16_t lastmeanwindiff = 0;

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	timestamp = TIM2->CNT;			// real time
 8000788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 800078c:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800078e:	2400      	movs	r4, #0
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11 /*PB11*/);		// debug pin
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000796:	4876      	ldr	r0, [pc, #472]	; (8000970 <HAL_ADC_ConvCpltCallback+0x1ec>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000798:	9403      	str	r4, [sp, #12]
	timestamp = TIM2->CNT;			// real time
 800079a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
 800079c:	f006 ffcc 	bl	8007738 <HAL_GPIO_WritePin>

	if (dmabufno == 1) {		// second buffer is ready
 80007a0:	4b74      	ldr	r3, [pc, #464]	; (8000974 <HAL_ADC_ConvCpltCallback+0x1f0>)
	}

	adcbuf16 = &((uint16_t*) *buf)[8];
	(*buf)[3] = timestamp;		// this may not get set until now
//	(*buf)[0] = UDP seq and packet flags	// set in udpstream.c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007a2:	4d75      	ldr	r5, [pc, #468]	; (8000978 <HAL_ADC_ConvCpltCallback+0x1f4>)
	if (dmabufno == 1) {		// second buffer is ready
 80007a4:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007a6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
	if (dmabufno == 1) {		// second buffer is ready
 80007aa:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80007ac:	4b73      	ldr	r3, [pc, #460]	; (800097c <HAL_ADC_ConvCpltCallback+0x1f8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007ae:	4a74      	ldr	r2, [pc, #464]	; (8000980 <HAL_ADC_ConvCpltCallback+0x1fc>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80007b0:	681f      	ldr	r7, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007b2:	4b74      	ldr	r3, [pc, #464]	; (8000984 <HAL_ADC_ConvCpltCallback+0x200>)
 80007b4:	4874      	ldr	r0, [pc, #464]	; (8000988 <HAL_ADC_ConvCpltCallback+0x204>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80007b6:	bf08      	it	eq
 80007b8:	f507 67b8 	addeq.w	r7, r7, #1472	; 0x5c0
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007bc:	781b      	ldrb	r3, [r3, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;

	if (sigsend) {		// oops overrun
 80007be:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80009cc <HAL_ADC_ConvCpltCallback+0x248>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	021b      	lsls	r3, r3, #8
	(*buf)[3] = timestamp;		// this may not get set until now
 80007c6:	60fc      	str	r4, [r7, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007cc:	7811      	ldrb	r1, [r2, #0]
 80007ce:	7802      	ldrb	r2, [r0, #0]
 80007d0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80007d4:	f002 0103 	and.w	r1, r2, #3
 80007d8:	3201      	adds	r2, #1
 80007da:	430b      	orrs	r3, r1
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80007dc:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80007e0:	f8db 6000 	ldr.w	r6, [fp]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80007e4:	7002      	strb	r2, [r0, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80007e6:	e9c7 3101 	strd	r3, r1, [r7, #4]
	if (sigsend) {		// oops overrun
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	f040 8090 	bne.w	8000910 <HAL_ADC_ConvCpltCallback+0x18c>
		lastmeanwindiff = meanwindiff;

		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
		windiff[j] = meanwindiff;	// store latest window mean of differences

		trigthresh = (logampmode > 0) ? 37 : 10;	// SPLAT Logamp in operation?
 80007f0:	4b66      	ldr	r3, [pc, #408]	; (800098c <HAL_ADC_ConvCpltCallback+0x208>)
 80007f2:	370e      	adds	r7, #14
 80007f4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80009d0 <HAL_ADC_ConvCpltCallback+0x24c>
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80009d4 <HAL_ADC_ConvCpltCallback+0x250>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	4b63      	ldr	r3, [pc, #396]	; (8000990 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000802:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80009d8 <HAL_ADC_ConvCpltCallback+0x254>
 8000806:	f8d3 c000 	ldr.w	ip, [r3]
 800080a:	bf18      	it	ne
 800080c:	f04f 0a25 	movne.w	sl, #37	; 0x25
 8000810:	4b60      	ldr	r3, [pc, #384]	; (8000994 <HAL_ADC_ConvCpltCallback+0x210>)
 8000812:	bf08      	it	eq
 8000814:	f04f 0a0a 	moveq.w	sl, #10
 8000818:	681c      	ldr	r4, [r3, #0]
 800081a:	4b5f      	ldr	r3, [pc, #380]	; (8000998 <HAL_ADC_ConvCpltCallback+0x214>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <HAL_ADC_ConvCpltCallback+0x218>)
 8000820:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000824:	460d      	mov	r5, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000826:	f006 001f 	and.w	r0, r6, #31
		thissamp = (*adcbuf16)[i];
 800082a:	f837 3f02 	ldrh.w	r3, [r7, #2]!
		lastmeanwindiff = meanwindiff;
 800082e:	b2ad      	uxth	r5, r5
 8000830:	3601      	adds	r6, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000832:	f839 1010 	ldrh.w	r1, [r9, r0, lsl #1]
 8000836:	441c      	add	r4, r3
		lastmeanwindiff = meanwindiff;
 8000838:	f8ae 5000 	strh.w	r5, [lr]
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800083c:	449c      	add	ip, r3
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800083e:	1a64      	subs	r4, r4, r1
		lastsamp[j] = thissamp;			// save last samples
 8000840:	f829 3010 	strh.w	r3, [r9, r0, lsl #1]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000844:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000848:	f344 154f 	sbfx	r5, r4, #5, #16
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800084c:	1a52      	subs	r2, r2, r1
		if (abs(meanwindiff) > (abs(lastmeanwindiff) + trigthresh)) { // if new mean diff > last mean diff +1
 800084e:	f8be 1000 	ldrh.w	r1, [lr]
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000852:	1b5b      	subs	r3, r3, r5
		if (abs(meanwindiff) > (abs(lastmeanwindiff) + trigthresh)) { // if new mean diff > last mean diff +1
 8000854:	4451      	add	r1, sl
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000856:	2b00      	cmp	r3, #0
 8000858:	bfb8      	it	lt
 800085a:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800085c:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 800085e:	f342 154f 	sbfx	r5, r2, #5, #16
		if (abs(meanwindiff) > (abs(lastmeanwindiff) + trigthresh)) { // if new mean diff > last mean diff +1
 8000862:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 8000866:	f848 5020 	str.w	r5, [r8, r0, lsl #2]
		if (abs(meanwindiff) > (abs(lastmeanwindiff) + trigthresh)) { // if new mean diff > last mean diff +1
 800086a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 800086e:	428b      	cmp	r3, r1
 8000870:	dd02      	ble.n	8000878 <HAL_ADC_ConvCpltCallback+0xf4>
			sigsend = 1;	// trigger greater than running mean
 8000872:	2301      	movs	r3, #1
 8000874:	f8cb 3000 	str.w	r3, [fp]
	for (i = 0; i < (ADCBUFSIZE / 2); i++) {	// 2 // scan the buffer content
 8000878:	f5b6 7f36 	cmp.w	r6, #728	; 0x2d8
 800087c:	d1d3      	bne.n	8000826 <HAL_ADC_ConvCpltCallback+0xa2>
 800087e:	4629      	mov	r1, r5
 8000880:	4d44      	ldr	r5, [pc, #272]	; (8000994 <HAL_ADC_ConvCpltCallback+0x210>)
 8000882:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000884:	602c      	str	r4, [r5, #0]
 8000886:	4d44      	ldr	r5, [pc, #272]	; (8000998 <HAL_ADC_ConvCpltCallback+0x214>)
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <HAL_ADC_ConvCpltCallback+0x21c>)
 800088a:	f8c0 c000 	str.w	ip, [r0]
 800088e:	602a      	str	r2, [r5, #0]
 8000890:	4844      	ldr	r0, [pc, #272]	; (80009a4 <HAL_ADC_ConvCpltCallback+0x220>)
 8000892:	4a42      	ldr	r2, [pc, #264]	; (800099c <HAL_ADC_ConvCpltCallback+0x218>)
		}
	} // end for i

//sigsend = ((samplecnt & 0x1ff) == 0) ? 1 : 0;			// for testing create continual spaced triggers
	if (sigsend) {
 8000894:	f8db 4000 	ldr.w	r4, [fp]
 8000898:	f8a3 a000 	strh.w	sl, [r3]
 800089c:	8011      	strh	r1, [r2, #0]
 800089e:	6803      	ldr	r3, [r0, #0]
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d02e      	beq.n	8000902 <HAL_ADC_ConvCpltCallback+0x17e>
#ifndef SPLAT1
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);	// blue led
#endif
		if (sigprev == 0)		// no trigger last time, so this is a new event
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d03c      	beq.n	8000922 <HAL_ADC_ConvCpltCallback+0x19e>
			adcbatchid++;		// start a new adc batch number
		sigprev = 1;	// remember this trigger for next packet
		ledhang = 100;		// 100 x 10ms in Idle proc
		statuspkt.trigcount++;	//  no of triggered packets detected
 80008a8:	4c33      	ldr	r4, [pc, #204]	; (8000978 <HAL_ADC_ConvCpltCallback+0x1f4>)
		sigprev = 1;	// remember this trigger for next packet
 80008aa:	2101      	movs	r1, #1
		ledhang = 100;		// 100 x 10ms in Idle proc
 80008ac:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <HAL_ADC_ConvCpltCallback+0x224>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80008ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80008b0:	6001      	str	r1, [r0, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80008b2:	440b      	add	r3, r1
		ledhang = 100;		// 100 x 10ms in Idle proc
 80008b4:	2164      	movs	r1, #100	; 0x64
		statuspkt.trigcount++;	//  no of triggered packets detected
 80008b6:	67e3      	str	r3, [r4, #124]	; 0x7c
		ledhang = 100;		// 100 x 10ms in Idle proc
 80008b8:	6011      	str	r1, [r2, #0]
		statuspkt.adctrigoff = TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase));

		if (statuspkt.adctrigoff > 4095)
			statuspkt.adctrigoff = 4095;
#endif
	samplecnt++;
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <HAL_ADC_ConvCpltCallback+0x228>)
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	3301      	adds	r3, #1

	if (samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80008c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	samplecnt++;
 80008c4:	6013      	str	r3, [r2, #0]
	if (samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80008c6:	d031      	beq.n	800092c <HAL_ADC_ConvCpltCallback+0x1a8>
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x22c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
		adcbgbaseacc = 0;
		samplecnt = 0;
	}

	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <HAL_ADC_ConvCpltCallback+0x230>)
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 80008ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
 80008d2:	4829      	ldr	r0, [pc, #164]	; (8000978 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80008d4:	6812      	ldr	r2, [r2, #0]

	if (xTaskToNotify == NULL) {
 80008d6:	4938      	ldr	r1, [pc, #224]	; (80009b8 <HAL_ADC_ConvCpltCallback+0x234>)
	statuspkt.adcnoise = (globaladcnoise & 0xfff);	// agc
 80008d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80008dc:	f8a0 2072 	strh.w	r2, [r0, #114]	; 0x72
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 80008e0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	if (xTaskToNotify == NULL) {
 80008e4:	680b      	ldr	r3, [r1, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d03d      	beq.n	8000966 <HAL_ADC_ConvCpltCallback+0x1e2>
		printf("Notify task null\n");
	} else if (sigsend) {
 80008ea:	f8db 3000 	ldr.w	r3, [fp]
 80008ee:	bb53      	cbnz	r3, 8000946 <HAL_ADC_ConvCpltCallback+0x1c2>
		 should be performed to ensure the interrupt returns directly to the highest
		 priority task.  The macro used for this purpose is dependent on the port in
		 use and may be called portEND_SWITCHING_ISR(). */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	481e      	ldr	r0, [pc, #120]	; (8000970 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80008f8:	f006 ff1e 	bl	8007738 <HAL_GPIO_WritePin>
}
 80008fc:	b005      	add	sp, #20
 80008fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000902:	b113      	cbz	r3, 800090a <HAL_ADC_ConvCpltCallback+0x186>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <HAL_ADC_ConvCpltCallback+0x238>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
		sigprev = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	6003      	str	r3, [r0, #0]
 800090e:	e7d4      	b.n	80008ba <HAL_ADC_ConvCpltCallback+0x136>
		statuspkt.adcudpover++;		// debug adc overrun udp
 8000910:	6fab      	ldr	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 8000912:	2200      	movs	r2, #0
		statuspkt.adcudpover++;		// debug adc overrun udp
 8000914:	3301      	adds	r3, #1
 8000916:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 8000918:	f8cb 2000 	str.w	r2, [fp]
}
 800091c:	b005      	add	sp, #20
 800091e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adcbatchid++;		// start a new adc batch number
 8000922:	9b01      	ldr	r3, [sp, #4]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_ADC_ConvCpltCallback+0x200>)
 8000926:	3301      	adds	r3, #1
 8000928:	7013      	strb	r3, [r2, #0]
 800092a:	e7bd      	b.n	80008a8 <HAL_ADC_ConvCpltCallback+0x124>
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 800092c:	4c18      	ldr	r4, [pc, #96]	; (8000990 <HAL_ADC_ConvCpltCallback+0x20c>)
		adcbgbaseacc = 0;
 800092e:	2100      	movs	r1, #0
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 8000930:	4823      	ldr	r0, [pc, #140]	; (80009c0 <HAL_ADC_ConvCpltCallback+0x23c>)
 8000932:	6823      	ldr	r3, [r4, #0]
		samplecnt = 0;
 8000934:	6011      	str	r1, [r2, #0]
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 8000936:	08db      	lsrs	r3, r3, #3
		adcbgbaseacc = 0;
 8000938:	6021      	str	r1, [r4, #0]
		globaladcavg = adcbgbaseacc / (ADCBUFSIZE / 2) >> 11;
 800093a:	fba0 2303 	umull	r2, r3, r0, r3
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x22c>)
 8000940:	0b9b      	lsrs	r3, r3, #14
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e7c2      	b.n	80008cc <HAL_ADC_ConvCpltCallback+0x148>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000946:	6808      	ldr	r0, [r1, #0]
 8000948:	a903      	add	r1, sp, #12
 800094a:	f010 fc71 	bl	8011230 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800094e:	9b03      	ldr	r3, [sp, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0cd      	beq.n	80008f0 <HAL_ADC_ConvCpltCallback+0x16c>
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_ADC_ConvCpltCallback+0x240>)
 8000956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	e7c4      	b.n	80008f0 <HAL_ADC_ConvCpltCallback+0x16c>
		printf("Notify task null\n");
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_ADC_ConvCpltCallback+0x244>)
 8000968:	f01c fec6 	bl	801d6f8 <puts>
 800096c:	e7c0      	b.n	80008f0 <HAL_ADC_ConvCpltCallback+0x16c>
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400
 8000974:	20000718 	.word	0x20000718
 8000978:	200217f0 	.word	0x200217f0
 800097c:	20021898 	.word	0x20021898
 8000980:	20000773 	.word	0x20000773
 8000984:	2000070c 	.word	0x2000070c
 8000988:	20000714 	.word	0x20000714
 800098c:	200008a0 	.word	0x200008a0
 8000990:	20000710 	.word	0x20000710
 8000994:	20000808 	.word	0x20000808
 8000998:	20000784 	.word	0x20000784
 800099c:	20000770 	.word	0x20000770
 80009a0:	20000000 	.word	0x20000000
 80009a4:	2000077c 	.word	0x2000077c
 80009a8:	2000076c 	.word	0x2000076c
 80009ac:	20000774 	.word	0x20000774
 80009b0:	2000071c 	.word	0x2000071c
 80009b4:	20000720 	.word	0x20000720
 80009b8:	2000080c 	.word	0x2000080c
 80009bc:	20000778 	.word	0x20000778
 80009c0:	16816817 	.word	0x16816817
 80009c4:	e000ed04 	.word	0xe000ed04
 80009c8:	0801fa98 	.word	0x0801fa98
 80009cc:	20000780 	.word	0x20000780
 80009d0:	2000072c 	.word	0x2000072c
 80009d4:	20000788 	.word	0x20000788
 80009d8:	20000728 	.word	0x20000728

080009dc <ADC_MultiModeDMAConvM0Cplt>:

void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <ADC_MultiModeDMAConvM0Cplt+0xc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConvCpltCallback(hadc);
 80009e2:	f7ff becf 	b.w	8000784 <HAL_ADC_ConvCpltCallback>
 80009e6:	bf00      	nop
 80009e8:	20000718 	.word	0x20000718

080009ec <ADC_MultiModeDMAConvM1Cplt>:
}

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 1;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <ADC_MultiModeDMAConvM1Cplt+0xc>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConvCpltCallback(hadc);
 80009f2:	f7ff bec7 	b.w	8000784 <HAL_ADC_ConvCpltCallback>
 80009f6:	bf00      	nop
 80009f8:	20000718 	.word	0x20000718

080009fc <startadc>:
}

void startadc() {
 80009fc:	b538      	push	{r3, r4, r5, lr}
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 107000000;
	statuspkt.adcpktssent = 0;
 80009fe:	2200      	movs	r2, #0
	statuspkt.clktrim = 107000000;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <startadc+0xb4>)
 8000a02:	492c      	ldr	r1, [pc, #176]	; (8000ab4 <startadc+0xb8>)

	printf("Starting ADC DMA\n");
 8000a04:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <startadc+0xbc>)
	statuspkt.clktrim = 107000000;
 8000a06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(1000);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000a08:	4c2c      	ldr	r4, [pc, #176]	; (8000abc <startadc+0xc0>)
	statuspkt.adcpktssent = 0;
 8000a0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000a0e:	f01c fe73 	bl	801d6f8 <puts>
	osDelay(1000);
 8000a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a16:	f00e ffef 	bl	800f9f8 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000a1a:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000a1e:	f011 f861 	bl	8011ae4 <pvPortMalloc>
 8000a22:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d03f      	beq.n	8000aa8 <startadc+0xac>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000a28:	0783      	lsls	r3, r0, #30
 8000a2a:	d003      	beq.n	8000a34 <startadc+0x38>
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <startadc+0xc4>)
 8000a2e:	f01c fe63 	bl	801d6f8 <puts>
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	1f03      	subs	r3, r0, #4
 8000a36:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000a3a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000a3e:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d1fb      	bne.n	8000a3e <startadc+0x42>
 8000a46:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000a4a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000a4e:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000a52:	4299      	cmp	r1, r3
 8000a54:	d1fb      	bne.n	8000a4e <startadc+0x52>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000a56:	f100 0210 	add.w	r2, r0, #16
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000a5a:	f500 64ba 	add.w	r4, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000a5e:	4819      	ldr	r0, [pc, #100]	; (8000ac4 <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000a60:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000a64:	4d18      	ldr	r5, [pc, #96]	; (8000ac8 <startadc+0xcc>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000a66:	4611      	mov	r1, r2
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000a68:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000a6a:	4622      	mov	r2, r4
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000a6e:	602c      	str	r4, [r5, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000a70:	f7ff fde0 	bl	8000634 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <startadc+0xd4>)
 8000a76:	7018      	strb	r0, [r3, #0]

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000a78:	4816      	ldr	r0, [pc, #88]	; (8000ad4 <startadc+0xd8>)
 8000a7a:	f004 f85f 	bl	8004b3c <HAL_ADC_Start>
 8000a7e:	b110      	cbz	r0, 8000a86 <startadc+0x8a>
		printf("ADC3 failed start\r\n");
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <startadc+0xdc>)
 8000a82:	f01c fe39 	bl	801d6f8 <puts>
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <startadc+0xe0>)
 8000a88:	f004 f858 	bl	8004b3c <HAL_ADC_Start>
 8000a8c:	b110      	cbz	r0, 8000a94 <startadc+0x98>
		printf("ADC2 failed start\r\n");
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <startadc+0xe4>)
 8000a90:	f01c fe32 	bl	801d6f8 <puts>
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <startadc+0xd0>)
 8000a96:	f004 f851 	bl	8004b3c <HAL_ADC_Start>
 8000a9a:	b900      	cbnz	r0, 8000a9e <startadc+0xa2>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
		printf("ADC1 failed start\r\n");
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <startadc+0xe8>)
}
 8000aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000aa4:	f01c be28 	b.w	801d6f8 <puts>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <startadc+0xec>)
 8000aaa:	f01c fe25 	bl	801d6f8 <puts>
 8000aae:	e7fe      	b.n	8000aae <startadc+0xb2>
 8000ab0:	200217f0 	.word	0x200217f0
 8000ab4:	0660b0c0 	.word	0x0660b0c0
 8000ab8:	0801faac 	.word	0x0801faac
 8000abc:	20021898 	.word	0x20021898
 8000ac0:	0801fae8 	.word	0x0801fae8
 8000ac4:	2002189c 	.word	0x2002189c
 8000ac8:	20021890 	.word	0x20021890
 8000acc:	20021e00 	.word	0x20021e00
 8000ad0:	200218a0 	.word	0x200218a0
 8000ad4:	20021e48 	.word	0x20021e48
 8000ad8:	0801fb20 	.word	0x0801fb20
 8000adc:	20021afc 	.word	0x20021afc
 8000ae0:	0801fb34 	.word	0x0801fb34
 8000ae4:	0801fb48 	.word	0x0801fb48
 8000ae8:	0801fac0 	.word	0x0801fac0

08000aec <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <vApplicationMallocFailedHook>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	7483      	strb	r3, [r0, #18]

	return (ERR_OK);
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	4770      	bx	lr

08000b00 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000b00:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000b08:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	460e      	mov	r6, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000b10:	4617      	mov	r7, r2
 8000b12:	b102      	cbz	r2, 8000b16 <hc_recv+0x16>
 8000b14:	bb9b      	cbnz	r3, 8000b7e <hc_recv+0x7e>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000b16:	bb47      	cbnz	r7, 8000b6a <hc_recv+0x6a>
 8000b18:	b33b      	cbz	r3, 8000b6a <hc_recv+0x6a>
		for (i = 0; i < state->Len; i++) {
 8000b1a:	8a23      	ldrh	r3, [r4, #16]
 8000b1c:	6967      	ldr	r7, [r4, #20]
 8000b1e:	f894 8000 	ldrb.w	r8, [r4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8095 	beq.w	8000c52 <hc_recv+0x152>
 8000b28:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8000b2c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000b2e:	2504      	movs	r5, #4
			if (errormsg == GEN_ERROR) {
 8000b30:	2d04      	cmp	r5, #4
 8000b32:	f819 0002 	ldrb.w	r0, [r9, r2]
 8000b36:	f102 0101 	add.w	r1, r2, #1
 8000b3a:	d052      	beq.n	8000be2 <hc_recv+0xe2>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000b3c:	280d      	cmp	r0, #13
 8000b3e:	d018      	beq.n	8000b72 <hc_recv+0x72>
 8000b40:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000b42:	4293      	cmp	r3, r2
 8000b44:	dcf4      	bgt.n	8000b30 <hc_recv+0x30>
	char *page = NULL;
 8000b46:	f04f 0a00 	mov.w	sl, #0
		if (errormsg == OK) {
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d163      	bne.n	8000c16 <hc_recv+0x116>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000b4e:	4652      	mov	r2, sl
 8000b50:	4629      	mov	r1, r5
 8000b52:	4640      	mov	r0, r8
 8000b54:	47b8      	blx	r7
	if (pcb != NULL) {
 8000b56:	b116      	cbz	r6, 8000b5e <hc_recv+0x5e>
		tcp_close(pcb);
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f015 f991 	bl	8015e80 <tcp_close>
		free(state->RecvData);
 8000b5e:	68e0      	ldr	r0, [r4, #12]
 8000b60:	f01c f9dc 	bl	801cf1c <free>
		free(state);
 8000b64:	4620      	mov	r0, r4
 8000b66:	f01c f9d9 	bl	801cf1c <free>
}
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	b003      	add	sp, #12
 8000b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000b72:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000b76:	280a      	cmp	r0, #10
 8000b78:	d045      	beq.n	8000c06 <hc_recv+0x106>
 8000b7a:	1c4a      	adds	r2, r1, #1
 8000b7c:	e7e1      	b.n	8000b42 <hc_recv+0x42>
		tcp_recved(pcb, p->tot_len);
 8000b7e:	4608      	mov	r0, r1
 8000b80:	8911      	ldrh	r1, [r2, #8]
 8000b82:	f014 fc7b 	bl	801547c <tcp_recved>
 8000b86:	463d      	mov	r5, r7
 8000b88:	8a21      	ldrh	r1, [r4, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000b8a:	2600      	movs	r6, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000b8c:	896b      	ldrh	r3, [r5, #10]
 8000b8e:	68e0      	ldr	r0, [r4, #12]
 8000b90:	4419      	add	r1, r3
 8000b92:	3101      	adds	r1, #1
 8000b94:	f01c fdec 	bl	801d770 <realloc>
 8000b98:	60e0      	str	r0, [r4, #12]
			if (state->RecvData == NULL) {
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d04a      	beq.n	8000c34 <hc_recv+0x134>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000b9e:	8a23      	ldrh	r3, [r4, #16]
 8000ba0:	896a      	ldrh	r2, [r5, #10]
 8000ba2:	6869      	ldr	r1, [r5, #4]
 8000ba4:	4418      	add	r0, r3
 8000ba6:	f01c fef9 	bl	801d99c <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000baa:	8969      	ldrh	r1, [r5, #10]
 8000bac:	68e3      	ldr	r3, [r4, #12]
 8000bae:	8a22      	ldrh	r2, [r4, #16]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	549e      	strb	r6, [r3, r2]
			state->Len += temp_p->len;
 8000bb4:	896b      	ldrh	r3, [r5, #10]
 8000bb6:	8a21      	ldrh	r1, [r4, #16]
			temp_p = temp_p->next;
 8000bb8:	682d      	ldr	r5, [r5, #0]
			state->Len += temp_p->len;
 8000bba:	4419      	add	r1, r3
 8000bbc:	b289      	uxth	r1, r1
 8000bbe:	8221      	strh	r1, [r4, #16]
		while (temp_p != NULL) {
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1e3      	bne.n	8000b8c <hc_recv+0x8c>
			temp_p = p->next;
 8000bc4:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	f011 f97a 	bl	8011ec0 <pbuf_free_callback>
		while (p != NULL) {
 8000bcc:	4627      	mov	r7, r4
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d0cb      	beq.n	8000b6a <hc_recv+0x6a>
			temp_p = p->next;
 8000bd2:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000bd4:	4638      	mov	r0, r7
 8000bd6:	f011 f973 	bl	8011ec0 <pbuf_free_callback>
		while (p != NULL) {
 8000bda:	4627      	mov	r7, r4
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d1f1      	bne.n	8000bc4 <hc_recv+0xc4>
 8000be0:	e7c3      	b.n	8000b6a <hc_recv+0x6a>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000be2:	2832      	cmp	r0, #50	; 0x32
 8000be4:	d009      	beq.n	8000bfa <hc_recv+0xfa>
				if (*(state->RecvData + i) == '\n')
 8000be6:	280a      	cmp	r0, #10
 8000be8:	d1aa      	bne.n	8000b40 <hc_recv+0x40>
		for (i = 0; i < state->Len; i++) {
 8000bea:	428b      	cmp	r3, r1
 8000bec:	dd12      	ble.n	8000c14 <hc_recv+0x114>
 8000bee:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000bf2:	460a      	mov	r2, r1
					errormsg = NOT_FOUND;
 8000bf4:	2503      	movs	r5, #3
		for (i = 0; i < state->Len; i++) {
 8000bf6:	3101      	adds	r1, #1
 8000bf8:	e7a0      	b.n	8000b3c <hc_recv+0x3c>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000bfa:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000bfe:	2830      	cmp	r0, #48	; 0x30
 8000c00:	d00f      	beq.n	8000c22 <hc_recv+0x122>
 8000c02:	1c91      	adds	r1, r2, #2
 8000c04:	e7ef      	b.n	8000be6 <hc_recv+0xe6>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c06:	eb09 0102 	add.w	r1, r9, r2
 8000c0a:	7888      	ldrb	r0, [r1, #2]
 8000c0c:	280d      	cmp	r0, #13
 8000c0e:	d01b      	beq.n	8000c48 <hc_recv+0x148>
 8000c10:	3203      	adds	r2, #3
 8000c12:	e796      	b.n	8000b42 <hc_recv+0x42>
					errormsg = NOT_FOUND;
 8000c14:	2503      	movs	r5, #3
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000c16:	2300      	movs	r3, #0
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4640      	mov	r0, r8
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	47b8      	blx	r7
 8000c20:	e799      	b.n	8000b56 <hc_recv+0x56>
						&& (*(state->RecvData + ++i) == '0'))
 8000c22:	eb09 0002 	add.w	r0, r9, r2
 8000c26:	1cd1      	adds	r1, r2, #3
 8000c28:	7880      	ldrb	r0, [r0, #2]
 8000c2a:	2830      	cmp	r0, #48	; 0x30
 8000c2c:	d1db      	bne.n	8000be6 <hc_recv+0xe6>
 8000c2e:	460a      	mov	r2, r1
					errormsg = OK;
 8000c30:	2500      	movs	r5, #0
 8000c32:	e786      	b.n	8000b42 <hc_recv+0x42>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000c34:	4603      	mov	r3, r0
 8000c36:	6965      	ldr	r5, [r4, #20]
 8000c38:	7820      	ldrb	r0, [r4, #0]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	47a8      	blx	r5
}
 8000c40:	2000      	movs	r0, #0
 8000c42:	b003      	add	sp, #12
 8000c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c48:	78c9      	ldrb	r1, [r1, #3]
 8000c4a:	290a      	cmp	r1, #10
 8000c4c:	d003      	beq.n	8000c56 <hc_recv+0x156>
 8000c4e:	3204      	adds	r2, #4
 8000c50:	e777      	b.n	8000b42 <hc_recv+0x42>
	hc_errormsg errormsg = GEN_ERROR;
 8000c52:	2504      	movs	r5, #4
 8000c54:	e7df      	b.n	8000c16 <hc_recv+0x116>
					i++;
 8000c56:	3204      	adds	r2, #4
 8000c58:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000c5a:	4491      	add	r9, r2
 8000c5c:	4648      	mov	r0, r9
 8000c5e:	f7ff faf9 	bl	8000254 <strlen>
 8000c62:	4683      	mov	fp, r0
 8000c64:	f01c f952 	bl	801cf0c <malloc>
					strcpy(page, state->RecvData + i);
 8000c68:	4649      	mov	r1, r9
 8000c6a:	f10b 0201 	add.w	r2, fp, #1
					page = malloc(strlen(state->RecvData + i));
 8000c6e:	4682      	mov	sl, r0
					strcpy(page, state->RecvData + i);
 8000c70:	f01c f96b 	bl	801cf4a <memcpy>
					break;
 8000c74:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f43f af69 	beq.w	8000b4e <hc_recv+0x4e>
 8000c7c:	e7cb      	b.n	8000c16 <hc_recv+0x116>
 8000c7e:	bf00      	nop

08000c80 <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000c80:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000c82:	b570      	push	{r4, r5, r6, lr}
 8000c84:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000c86:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000c88:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000c8a:	6946      	ldr	r6, [r0, #20]
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	7800      	ldrb	r0, [r0, #0]
 8000c90:	47b0      	blx	r6
	free(state->RecvData);
 8000c92:	68e0      	ldr	r0, [r4, #12]
 8000c94:	f01c f942 	bl	801cf1c <free>
	free(state->PostVars);
 8000c98:	68a0      	ldr	r0, [r4, #8]
 8000c9a:	f01c f93f 	bl	801cf1c <free>
	free(state->Page);
 8000c9e:	6860      	ldr	r0, [r4, #4]
 8000ca0:	f01c f93c 	bl	801cf1c <free>
	free(state);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f01c f939 	bl	801cf1c <free>
	printf("hc_error: err=%d\n", err);
 8000caa:	4629      	mov	r1, r5
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <hc_error+0x38>)
}
 8000cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000cb2:	f01c bc99 	b.w	801d5e8 <iprintf>
 8000cb6:	bf00      	nop
 8000cb8:	0801fbd8 	.word	0x0801fbd8

08000cbc <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000cbc:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000cbe:	7c83      	ldrb	r3, [r0, #18]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000cc4:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000cc6:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000cc8:	d909      	bls.n	8000cde <hc_poll+0x22>
 8000cca:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000ccc:	4608      	mov	r0, r1
 8000cce:	f015 fa19 	bl	8016104 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6965      	ldr	r5, [r4, #20]
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	7820      	ldrb	r0, [r4, #0]
 8000cdc:	47a8      	blx	r5
}
 8000cde:	2000      	movs	r0, #0
 8000ce0:	bd38      	pop	{r3, r4, r5, pc}
 8000ce2:	bf00      	nop

08000ce4 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	b083      	sub	sp, #12
 8000cec:	460d      	mov	r5, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000cee:	b19a      	cbz	r2, 8000d18 <hc_connected+0x34>
	if (pcb != NULL) {
 8000cf0:	b111      	cbz	r1, 8000cf8 <hc_connected+0x14>
		tcp_close(pcb);
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	f015 f8c4 	bl	8015e80 <tcp_close>
		hc_clearpcb(pcb);

		// Call return function
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	7820      	ldrb	r0, [r4, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	6965      	ldr	r5, [r4, #20]
 8000d02:	47a8      	blx	r5

		// Free wc state
		free(state->RecvData);
 8000d04:	68e0      	ldr	r0, [r4, #12]
 8000d06:	f01c f909 	bl	801cf1c <free>
		free(state);
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f01c f906 	bl	801cf1c <free>
	free(headers);
	free(state->PostVars);			// postvars are send, so we don't need them anymore
	free(state->Page);		    	        // page is requested, so we don't need it anymore

	return (ERR_OK);
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	b003      	add	sp, #12
 8000d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->PostVars == NULL) {
 8000d18:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8000d1c:	4640      	mov	r0, r8
 8000d1e:	f7ff fa99 	bl	8000254 <strlen>
 8000d22:	4606      	mov	r6, r0
 8000d24:	2f00      	cmp	r7, #0
 8000d26:	d039      	beq.n	8000d9c <hc_connected+0xb8>
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f7ff fa93 	bl	8000254 <strlen>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	f106 0065 	add.w	r0, r6, #101	; 0x65
 8000d34:	4448      	add	r0, r9
 8000d36:	f01c f8e9 	bl	801cf0c <malloc>
		sprintf(headers,
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	9700      	str	r7, [sp, #0]
 8000d3e:	4642      	mov	r2, r8
 8000d40:	491b      	ldr	r1, [pc, #108]	; (8000db0 <hc_connected+0xcc>)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000d42:	4606      	mov	r6, r0
		sprintf(headers,
 8000d44:	f01c fd74 	bl	801d830 <siprintf>
	tcp_recv(pcb, hc_recv);
 8000d48:	491a      	ldr	r1, [pc, #104]	; (8000db4 <hc_connected+0xd0>)
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f014 fcb0 	bl	80156b0 <tcp_recv>
	tcp_err(pcb, hc_error);
 8000d50:	4919      	ldr	r1, [pc, #100]	; (8000db8 <hc_connected+0xd4>)
 8000d52:	4628      	mov	r0, r5
 8000d54:	f014 fce2 	bl	801571c <tcp_err>
	tcp_poll(pcb, hc_poll, 10);
 8000d58:	220a      	movs	r2, #10
 8000d5a:	4918      	ldr	r1, [pc, #96]	; (8000dbc <hc_connected+0xd8>)
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f014 fcff 	bl	8015760 <tcp_poll>
	tcp_sent(pcb, hc_sent);
 8000d62:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <hc_connected+0xdc>)
 8000d64:	4628      	mov	r0, r5
 8000d66:	f014 fcbf 	bl	80156e8 <tcp_sent>
	tcp_write(pcb, headers, strlen(headers), 1);
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f7ff fa72 	bl	8000254 <strlen>
 8000d70:	2301      	movs	r3, #1
 8000d72:	4602      	mov	r2, r0
 8000d74:	4631      	mov	r1, r6
 8000d76:	4628      	mov	r0, r5
 8000d78:	f017 f876 	bl	8017e68 <tcp_write>
	tcp_output(pcb);
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f017 fcbf 	bl	8018700 <tcp_output>
	free(headers);
 8000d82:	4630      	mov	r0, r6
 8000d84:	f01c f8ca 	bl	801cf1c <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000d88:	68a0      	ldr	r0, [r4, #8]
 8000d8a:	f01c f8c7 	bl	801cf1c <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000d8e:	6860      	ldr	r0, [r4, #4]
 8000d90:	f01c f8c4 	bl	801cf1c <free>
}
 8000d94:	2000      	movs	r0, #0
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		headers = malloc(19 + strlen(state->Page));
 8000d9c:	3013      	adds	r0, #19
 8000d9e:	f01c f8b5 	bl	801cf0c <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000da2:	4642      	mov	r2, r8
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <hc_connected+0xe0>)
		headers = malloc(19 + strlen(state->Page));
 8000da6:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000da8:	f01c fd42 	bl	801d830 <siprintf>
 8000dac:	e7cc      	b.n	8000d48 <hc_connected+0x64>
 8000dae:	bf00      	nop
 8000db0:	0801fb74 	.word	0x0801fb74
 8000db4:	08000b01 	.word	0x08000b01
 8000db8:	08000c81 	.word	0x08000c81
 8000dbc:	08000cbd 	.word	0x08000cbd
 8000dc0:	08000af9 	.word	0x08000af9
 8000dc4:	0801fb5c 	.word	0x0801fb5c

08000dc8 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	460f      	mov	r7, r1
 8000dd0:	4616      	mov	r6, r2
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000dd6:	2018      	movs	r0, #24
 8000dd8:	f01c f898 	bl	801cf0c <malloc>
 8000ddc:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000dde:	f015 fa93 	bl	8016308 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d074      	beq.n	8000ed0 <hc_open+0x108>
 8000de6:	fab4 f184 	clz	r1, r4
 8000dea:	0949      	lsrs	r1, r1, #5
 8000dec:	2900      	cmp	r1, #0
 8000dee:	d16f      	bne.n	8000ed0 <hc_open+0x108>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000df0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000ef8 <hc_open+0x130>
 8000df4:	4605      	mov	r5, r0
	state->Num = num;
	state->RecvData = NULL;
 8000df6:	60e1      	str	r1, [r4, #12]
	num++;
 8000df8:	f898 2000 	ldrb.w	r2, [r8]
	state->ConnectionTimeout = 0;
 8000dfc:	74a1      	strb	r1, [r4, #18]
	num++;
 8000dfe:	3201      	adds	r2, #1
	state->Len = 0;
 8000e00:	8221      	strh	r1, [r4, #16]
	state->ReturnPage = returnpage;
 8000e02:	f8c4 9014 	str.w	r9, [r4, #20]
	num++;
 8000e06:	b2d3      	uxtb	r3, r2
 8000e08:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000e0c:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d05b      	beq.n	8000eca <hc_open+0x102>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000e12:	4630      	mov	r0, r6
 8000e14:	f7ff fa1e 	bl	8000254 <strlen>
 8000e18:	3001      	adds	r0, #1
 8000e1a:	f01c f877 	bl	801cf0c <malloc>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000e22:	4638      	mov	r0, r7
 8000e24:	f7ff fa16 	bl	8000254 <strlen>
 8000e28:	f100 0a01 	add.w	sl, r0, #1
 8000e2c:	4650      	mov	r0, sl
 8000e2e:	f01c f86d 	bl	801cf0c <malloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d037      	beq.n	8000eaa <hc_open+0xe2>
 8000e3a:	f1b9 0f00 	cmp.w	r9, #0
 8000e3e:	d032      	beq.n	8000ea6 <hc_open+0xde>
		free(state);
		tcp_close(pcb);
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000e40:	4652      	mov	r2, sl
 8000e42:	4639      	mov	r1, r7
 8000e44:	f01c f881 	bl	801cf4a <memcpy>
	if (PostVars != NULL)
 8000e48:	b356      	cbz	r6, 8000ea0 <hc_open+0xd8>
		strcpy(state->PostVars, PostVars);
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	4648      	mov	r0, r9
 8000e4e:	f01c fd8b 	bl	801d968 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000e52:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000e56:	4f24      	ldr	r7, [pc, #144]	; (8000ee8 <hc_open+0x120>)
 8000e58:	e000      	b.n	8000e5c <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000e5a:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000e5c:	4632      	mov	r2, r6
 8000e5e:	4639      	mov	r1, r7
 8000e60:	4628      	mov	r0, r5
		port++;
 8000e62:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000e64:	f014 fa1e 	bl	80152a4 <tcp_bind>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d1f6      	bne.n	8000e5a <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000e6c:	4621      	mov	r1, r4
 8000e6e:	4628      	mov	r0, r5
 8000e70:	f014 fc1a 	bl	80156a8 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <hc_open+0x124>)
 8000e76:	4628      	mov	r0, r5
 8000e78:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000e7c:	a901      	add	r1, sp, #4
 8000e7e:	f014 fb41 	bl	8015504 <tcp_connect>
 8000e82:	b240      	sxtb	r0, r0
 8000e84:	f88d 000f 	strb.w	r0, [sp, #15]

	if (err != ERR_OK) {
 8000e88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000e8c:	bb23      	cbnz	r3, 8000ed8 <hc_open+0x110>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000e8e:	f898 0000 	ldrb.w	r0, [r8]
}
 8000e92:	b004      	add	sp, #16
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strcpy(state->Page, Page);
 8000e98:	4652      	mov	r2, sl
 8000e9a:	4639      	mov	r1, r7
 8000e9c:	f01c f855 	bl	801cf4a <memcpy>
		state->PostVars = NULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60a3      	str	r3, [r4, #8]
 8000ea4:	e7d5      	b.n	8000e52 <hc_open+0x8a>
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d0f6      	beq.n	8000e98 <hc_open+0xd0>
		free(state->Page);
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f01c f836 	bl	801cf1c <free>
		free(state->PostVars);
 8000eb0:	4648      	mov	r0, r9
 8000eb2:	f01c f833 	bl	801cf1c <free>
		free(state);
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f01c f830 	bl	801cf1c <free>
		tcp_close(pcb);
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	f014 ffdf 	bl	8015e80 <tcp_close>
		return 0;
 8000ec2:	2000      	movs	r0, #0
}
 8000ec4:	b004      	add	sp, #16
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8000ece:	e7a8      	b.n	8000e22 <hc_open+0x5a>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <hc_open+0x128>)
 8000ed2:	f01c fc11 	bl	801d6f8 <puts>
 8000ed6:	e7fe      	b.n	8000ed6 <hc_open+0x10e>
		printf("hc_open failed with %d\n", err);
 8000ed8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <hc_open+0x12c>)
 8000ede:	b249      	sxtb	r1, r1
 8000ee0:	f01c fb82 	bl	801d5e8 <iprintf>
 8000ee4:	e7d3      	b.n	8000e8e <hc_open+0xc6>
 8000ee6:	bf00      	nop
 8000ee8:	08039ac4 	.word	0x08039ac4
 8000eec:	08000ce5 	.word	0x08000ce5
 8000ef0:	0801fbec 	.word	0x0801fbec
 8000ef4:	0801fc18 	.word	0x0801fc18
 8000ef8:	20000810 	.word	0x20000810

08000efc <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8000efc:	4801      	ldr	r0, [pc, #4]	; (8000f04 <netif_status_callbk_fn+0x8>)
 8000efe:	f01c bbfb 	b.w	801d6f8 <puts>
 8000f02:	bf00      	nop
 8000f04:	08020190 	.word	0x08020190

08000f08 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <Callback01+0x8>)
 8000f0a:	f01c bbf5 	b.w	801d6f8 <puts>
 8000f0e:	bf00      	nop
 8000f10:	0801fc30 	.word	0x0801fc30

08000f14 <_write>:
int _write(int file, char *ptr, int len) {
 8000f14:	b570      	push	{r4, r5, r6, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f16:	1e16      	subs	r6, r2, #0
 8000f18:	dd07      	ble.n	8000f2a <_write+0x16>
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	198d      	adds	r5, r1, r6
		__io_putchar(*ptr++);
 8000f1e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f22:	f001 faab 	bl	800247c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f26:	42a5      	cmp	r5, r4
 8000f28:	d1f9      	bne.n	8000f1e <_write+0xa>
}
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	bd70      	pop	{r4, r5, r6, pc}
 8000f2e:	bf00      	nop

08000f30 <rebootme>:
void rebootme() {
 8000f30:	b508      	push	{r3, lr}
		osDelay(2000);
 8000f32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f36:	f00e fd5f 	bl	800f9f8 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f3e:	4905      	ldr	r1, [pc, #20]	; (8000f54 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f42:	68ca      	ldr	r2, [r1, #12]
 8000f44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60cb      	str	r3, [r1, #12]
 8000f4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <rebootme+0x20>
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	05fa0004 	.word	0x05fa0004

08000f5c <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8000f5c:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 8000f60:	074a      	lsls	r2, r1, #29
 8000f62:	d409      	bmi.n	8000f78 <netif_link_callbk_fn+0x1c>
void netif_link_callbk_fn(struct netif *netif) {
 8000f64:	b510      	push	{r4, lr}
 8000f66:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <netif_link_callbk_fn+0x2c>)
 8000f6a:	f01c fb3d 	bl	801d5e8 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8000f6e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8000f72:	075b      	lsls	r3, r3, #29
 8000f74:	d503      	bpl.n	8000f7e <netif_link_callbk_fn+0x22>
}
 8000f76:	bd10      	pop	{r4, pc}
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <netif_link_callbk_fn+0x30>)
 8000f7a:	f01c bb35 	b.w	801d5e8 <iprintf>
			printf("LAN interface appears disconnected, rebooting...\n");
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <netif_link_callbk_fn+0x34>)
 8000f80:	f01c fbba 	bl	801d6f8 <puts>
			rebootme();
 8000f84:	f7ff ffd4 	bl	8000f30 <rebootme>
 8000f88:	0802013c 	.word	0x0802013c
 8000f8c:	0802011c 	.word	0x0802011c
 8000f90:	0802015c 	.word	0x0802015c

08000f94 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8000f94:	2100      	movs	r1, #0
 8000f96:	f004 ba4d 	b.w	8005434 <HAL_DAC_Stop_DMA>
 8000f9a:	bf00      	nop

08000f9c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000fa6:	f006 fbe1 	bl	800776c <HAL_GPIO_TogglePin>
	if (htim->Instance == TIM2) {
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb0:	d007      	beq.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0x26>
	if (htim->Instance == TIM4) {
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d02a      	beq.n	800100e <HAL_TIM_IC_CaptureCallback+0x72>
	lastcap = t2cap[0];
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000fba:	4c1a      	ldr	r4, [pc, #104]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6023      	str	r3, [r4, #0]
}
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 8000fc2:	4e19      	ldr	r6, [pc, #100]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x8c>)
	uint32_t sum = 0;
 8000fc4:	2100      	movs	r1, #0
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fc8:	7bb5      	ldrb	r5, [r6, #14]
 8000fca:	4f19      	ldr	r7, [pc, #100]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000fcc:	3501      	adds	r5, #1
		diff = lastcap;
 8000fce:	4c15      	ldr	r4, [pc, #84]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x88>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 8000fd0:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001038 <HAL_TIM_IC_CaptureCallback+0x9c>
 8000fd4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000fd8:	fba2 3205 	umull	r3, r2, r2, r5
		diff = lastcap;
 8000fdc:	f8d4 c000 	ldr.w	ip, [r4]
 8000fe0:	463b      	mov	r3, r7
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60;// assume we get here before serial comms updates gps seconds field
 8000fe2:	0952      	lsrs	r2, r2, #5
 8000fe4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000fe8:	eba5 0282 	sub.w	r2, r5, r2, lsl #2
 8000fec:	f88e 2000 	strb.w	r2, [lr]
		data[i] = data[i + 1];		// old data is low index
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8000ff6:	4298      	cmp	r0, r3
		sum += data[i];
 8000ff8:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8000ffa:	d1f9      	bne.n	8000ff0 <HAL_TIM_IC_CaptureCallback+0x54>
	sum += new;
 8000ffc:	4461      	add	r1, ip
	lastcap = t2cap[0];
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x84>)
	data[15] = new;		// new data at the end
 8001000:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
	return (sum >> 4);
 8001004:	0909      	lsrs	r1, r1, #4
	lastcap = t2cap[0];
 8001006:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8001008:	65b1      	str	r1, [r6, #88]	; 0x58
	lastcap = t2cap[0];
 800100a:	6023      	str	r3, [r4, #0]
}
 800100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Timer4 callback\n");
 800100e:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001010:	f01c fb72 	bl	801d6f8 <puts>
 8001014:	e7d0      	b.n	8000fb8 <HAL_TIM_IC_CaptureCallback+0x1c>
 8001016:	bf00      	nop
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40000800 	.word	0x40000800
 8001020:	20021894 	.word	0x20021894
 8001024:	20000854 	.word	0x20000854
 8001028:	200217f0 	.word	0x200217f0
 800102c:	88888889 	.word	0x88888889
 8001030:	20000814 	.word	0x20000814
 8001034:	0801fc54 	.word	0x0801fc54
 8001038:	20000773 	.word	0x20000773

0800103c <calcagc>:
void calcagc() {
 800103c:	b538      	push	{r3, r4, r5, lr}
	noiseacc += globaladcnoise;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <calcagc+0x4c>)
	samples++;
 8001040:	4d12      	ldr	r5, [pc, #72]	; (800108c <calcagc+0x50>)
	noiseacc += globaladcnoise;
 8001042:	4c13      	ldr	r4, [pc, #76]	; (8001090 <calcagc+0x54>)
 8001044:	6819      	ldr	r1, [r3, #0]
	samples++;
 8001046:	682b      	ldr	r3, [r5, #0]
	noiseacc += globaladcnoise;
 8001048:	6822      	ldr	r2, [r4, #0]
	samples++;
 800104a:	3301      	adds	r3, #1
	noiseacc += globaladcnoise;
 800104c:	440a      	add	r2, r1
	if (samples > GAININT) {
 800104e:	2b14      	cmp	r3, #20
	samples++;
 8001050:	602b      	str	r3, [r5, #0]
	noiseacc += globaladcnoise;
 8001052:	6022      	str	r2, [r4, #0]
	if (samples > GAININT) {
 8001054:	dd0a      	ble.n	800106c <calcagc+0x30>
		newgain = (pgagain & 0x07);
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <calcagc+0x58>)
		if (noiseacc > (40 * GAININT))	// too noisy
 8001058:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
		newgain = (pgagain & 0x07);
 800105c:	8818      	ldrh	r0, [r3, #0]
 800105e:	f000 0007 	and.w	r0, r0, #7
		if (noiseacc > (40 * GAININT))	// too noisy
 8001062:	d904      	bls.n	800106e <calcagc+0x32>
			if (newgain > 0) {
 8001064:	b958      	cbnz	r0, 800107e <calcagc+0x42>
		samples = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	602b      	str	r3, [r5, #0]
		noiseacc = 0;
 800106a:	6023      	str	r3, [r4, #0]
}
 800106c:	bd38      	pop	{r3, r4, r5, pc}
			if (newgain < 7) {
 800106e:	2a3b      	cmp	r2, #59	; 0x3b
 8001070:	d8f9      	bhi.n	8001066 <calcagc+0x2a>
 8001072:	2807      	cmp	r0, #7
 8001074:	d0f7      	beq.n	8001066 <calcagc+0x2a>
				setpgagain(newgain);
 8001076:	3001      	adds	r0, #1
 8001078:	f001 fbe8 	bl	800284c <setpgagain>
 800107c:	e7f3      	b.n	8001066 <calcagc+0x2a>
				newgain--;			// decrease the gain
 800107e:	3801      	subs	r0, #1
				setpgagain(newgain);
 8001080:	b280      	uxth	r0, r0
 8001082:	f001 fbe3 	bl	800284c <setpgagain>
 8001086:	e7ee      	b.n	8001066 <calcagc+0x2a>
 8001088:	20000720 	.word	0x20000720
 800108c:	20000864 	.word	0x20000864
 8001090:	20000860 	.word	0x20000860
 8001094:	200002b2 	.word	0x200002b2

08001098 <StarLPTask>:
void StarLPTask(void const *argument) {
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (main_init_done == 0)	// wait from main to complete the initilisation
 800109c:	4cad      	ldr	r4, [pc, #692]	; (8001354 <StarLPTask+0x2bc>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 800109e:	2300      	movs	r3, #0
 80010a0:	4dad      	ldr	r5, [pc, #692]	; (8001358 <StarLPTask+0x2c0>)
void StarLPTask(void const *argument) {
 80010a2:	b087      	sub	sp, #28
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80010a4:	6822      	ldr	r2, [r4, #0]
	statuspkt.adcudpover = 0;		// debug use count overruns
 80010a6:	67ab      	str	r3, [r5, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80010a8:	67eb      	str	r3, [r5, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80010aa:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80010ae:	b92a      	cbnz	r2, 80010bc <StarLPTask+0x24>
		osDelay(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f00e fca1 	bl	800f9f8 <osDelay>
	while (main_init_done == 0)	// wait from main to complete the initilisation
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f9      	beq.n	80010b0 <StarLPTask+0x18>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion,
 80010bc:	f8b5 e05c 	ldrh.w	lr, [r5, #92]	; 0x5c
	uint16_t onesectimer = 0;
 80010c0:	f04f 0800 	mov.w	r8, #0
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion,
 80010c4:	f895 c070 	ldrb.w	ip, [r5, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80010c8:	48a4      	ldr	r0, [pc, #656]	; (800135c <StarLPTask+0x2c4>)
	uint16_t tenmstimer = 0;
 80010ca:	4644      	mov	r4, r8
			statuspkt.minorversion, udp_target, udp_ips);
 80010cc:	f895 7071 	ldrb.w	r7, [r5, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80010d0:	49a3      	ldr	r1, [pc, #652]	; (8001360 <StarLPTask+0x2c8>)
 80010d2:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <StarLPTask+0x2cc>)
 80010d4:	4aa4      	ldr	r2, [pc, #656]	; (8001368 <StarLPTask+0x2d0>)
 80010d6:	4ea5      	ldr	r6, [pc, #660]	; (800136c <StarLPTask+0x2d4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	9703      	str	r7, [sp, #12]
 80010de:	f8df b33c 	ldr.w	fp, [pc, #828]	; 800141c <StarLPTask+0x384>
 80010e2:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8001420 <StarLPTask+0x388>
 80010e6:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8001424 <StarLPTask+0x38c>
 80010ea:	e9cd ec01 	strd	lr, ip, [sp, #4]
 80010ee:	e9cd 0604 	strd	r0, r6, [sp, #16]
 80010f2:	6808      	ldr	r0, [r1, #0]
 80010f4:	499e      	ldr	r1, [pc, #632]	; (8001370 <StarLPTask+0x2d8>)
 80010f6:	9000      	str	r0, [sp, #0]
 80010f8:	489e      	ldr	r0, [pc, #632]	; (8001374 <StarLPTask+0x2dc>)
 80010fa:	f01c fb99 	bl	801d830 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80010fe:	489e      	ldr	r0, [pc, #632]	; (8001378 <StarLPTask+0x2e0>)
 8001100:	f009 fe12 	bl	800ad28 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8001104:	4b9d      	ldr	r3, [pc, #628]	; (800137c <StarLPTask+0x2e4>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 800110a:	489d      	ldr	r0, [pc, #628]	; (8001380 <StarLPTask+0x2e8>)
		tenmstimer++;
 800110c:	3401      	adds	r4, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 800110e:	f007 f80b 	bl	8008128 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8001112:	200a      	movs	r0, #10
 8001114:	f00e fc70 	bl	800f9f8 <osDelay>
		if (ledhang) {	// trigger led
 8001118:	f8db 2000 	ldr.w	r2, [fp]
		tenmstimer++;
 800111c:	b2a4      	uxth	r4, r4
		if (ledhang) {	// trigger led
 800111e:	2a00      	cmp	r2, #0
 8001120:	f000 80ac 	beq.w	800127c <StarLPTask+0x1e4>
			ledhang--;
 8001124:	1e53      	subs	r3, r2, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	2201      	movs	r2, #1
 800112c:	4895      	ldr	r0, [pc, #596]	; (8001384 <StarLPTask+0x2ec>)
			ledhang--;
 800112e:	f8cb 3000 	str.w	r3, [fp]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8001132:	f006 fb01 	bl	8007738 <HAL_GPIO_WritePin>
		globaladcnoise = meanwindiff;
 8001136:	4b94      	ldr	r3, [pc, #592]	; (8001388 <StarLPTask+0x2f0>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	f8ca 3000 	str.w	r3, [sl]
		if (globaladcnoise == 0)
 8001140:	b91b      	cbnz	r3, 800114a <StarLPTask+0xb2>
			globaladcnoise = statuspkt.adcbase;		// dont allow zero peaks
 8001142:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8001146:	f8ca 3000 	str.w	r3, [sl]
		if (statuspkt.trigcount > (360 + trigs)) { // spamming: 3600 packets sent in 2 Sec (out of approx 7.2K packets)
 800114a:	f8d9 3000 	ldr.w	r3, [r9]
 800114e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001150:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001154:	4291      	cmp	r1, r2
 8001156:	d95d      	bls.n	8001214 <StarLPTask+0x17c>
			statuspkt.jabcnt++;
 8001158:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
			jabber = 200;		// 2 seconds pause
 800115c:	21c8      	movs	r1, #200	; 0xc8
 800115e:	488b      	ldr	r0, [pc, #556]	; (800138c <StarLPTask+0x2f4>)
			statuspkt.jabcnt++;
 8001160:	3201      	adds	r2, #1
			jabber = 200;		// 2 seconds pause
 8001162:	6001      	str	r1, [r0, #0]
			statuspkt.jabcnt++;
 8001164:	b292      	uxth	r2, r2
 8001166:	f8a5 2086 	strh.w	r2, [r5, #134]	; 0x86
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800116a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800116c:	4293      	cmp	r3, r2
 800116e:	d15a      	bne.n	8001226 <StarLPTask+0x18e>
			if (tenmstimer % 100 == 0) {		// every second
 8001170:	4b87      	ldr	r3, [pc, #540]	; (8001390 <StarLPTask+0x2f8>)
 8001172:	fba3 2304 	umull	r2, r3, r3, r4
 8001176:	2264      	movs	r2, #100	; 0x64
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	fb02 4313 	mls	r3, r2, r3, r4
 800117e:	b29b      	uxth	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8085 	beq.w	8001290 <StarLPTask+0x1f8>
		if (tenmstimer > 3000) {		// reset timer after 30 seconds
 8001186:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800118a:	429c      	cmp	r4, r3
 800118c:	d935      	bls.n	80011fa <StarLPTask+0x162>
			if (gpsgood == 0) {	// gps is not talking to us
 800118e:	4c81      	ldr	r4, [pc, #516]	; (8001394 <StarLPTask+0x2fc>)
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d078      	beq.n	8001288 <StarLPTask+0x1f0>
			if (psensor == MPL115A2) {
 8001196:	4b80      	ldr	r3, [pc, #512]	; (8001398 <StarLPTask+0x300>)
			gpsgood = 0;			// reset the good flag
 8001198:	2200      	movs	r2, #0
			if (psensor == MPL115A2) {
 800119a:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 800119c:	6022      	str	r2, [r4, #0]
			if (psensor == MPL115A2) {
 800119e:	2b02      	cmp	r3, #2
 80011a0:	f000 80cf 	beq.w	8001342 <StarLPTask+0x2aa>
			} else if (psensor == MPL3115A2) {
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f000 813f 	beq.w	8001428 <StarLPTask+0x390>
			printf("SN:%d/%lu %d:%d:%d:%d ", MY_UID, statuspkt.uid, myip & 0xFF, (myip & 0xFF00) >> 8,
 80011aa:	4b7c      	ldr	r3, [pc, #496]	; (800139c <StarLPTask+0x304>)
 80011ac:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80011b0:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
			tenmstimer = 0;
 80011b4:	2400      	movs	r4, #0
			printf("SN:%d/%lu %d:%d:%d:%d ", MY_UID, statuspkt.uid, myip & 0xFF, (myip & 0xFF00) >> 8,
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80011bc:	0e1f      	lsrs	r7, r3, #24
 80011be:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	9000      	str	r0, [sp, #0]
 80011c6:	4876      	ldr	r0, [pc, #472]	; (80013a0 <StarLPTask+0x308>)
 80011c8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80011cc:	f01c fa0c 	bl	801d5e8 <iprintf>
			printf("triggers:%04d, pressure:%03d.%d, temp:%02d.%d, time:%s\n", trigs, pressure, pressfrac, temperature,
 80011d0:	4a74      	ldr	r2, [pc, #464]	; (80013a4 <StarLPTask+0x30c>)
 80011d2:	4875      	ldr	r0, [pc, #468]	; (80013a8 <StarLPTask+0x310>)
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	4b75      	ldr	r3, [pc, #468]	; (80013ac <StarLPTask+0x314>)
 80011d8:	fba0 0101 	umull	r0, r1, r0, r1
 80011dc:	4874      	ldr	r0, [pc, #464]	; (80013b0 <StarLPTask+0x318>)
 80011de:	4a75      	ldr	r2, [pc, #468]	; (80013b4 <StarLPTask+0x31c>)
 80011e0:	6800      	ldr	r0, [r0, #0]
 80011e2:	0989      	lsrs	r1, r1, #6
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	9000      	str	r0, [sp, #0]
 80011ea:	4873      	ldr	r0, [pc, #460]	; (80013b8 <StarLPTask+0x320>)
 80011ec:	9101      	str	r1, [sp, #4]
 80011ee:	9002      	str	r0, [sp, #8]
 80011f0:	f8d9 1000 	ldr.w	r1, [r9]
 80011f4:	4871      	ldr	r0, [pc, #452]	; (80013bc <StarLPTask+0x324>)
 80011f6:	f01c f9f7 	bl	801d5e8 <iprintf>
		if (onesectimer > 900) {			// 15 mins
 80011fa:	f5b8 7f61 	cmp.w	r8, #900	; 0x384
 80011fe:	d984      	bls.n	800110a <StarLPTask+0x72>
			if (locateudp() != uip)		// periodic check
 8001200:	f002 fee4 	bl	8003fcc <locateudp>
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <StarLPTask+0x328>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4298      	cmp	r0, r3
 800120a:	f040 8116 	bne.w	800143a <StarLPTask+0x3a2>
			onesectimer = 0;
 800120e:	f04f 0800 	mov.w	r8, #0
 8001212:	e77a      	b.n	800110a <StarLPTask+0x72>
			if (jabber)
 8001214:	495d      	ldr	r1, [pc, #372]	; (800138c <StarLPTask+0x2f4>)
 8001216:	680a      	ldr	r2, [r1, #0]
 8001218:	2a00      	cmp	r2, #0
 800121a:	d0a6      	beq.n	800116a <StarLPTask+0xd2>
				jabber--;		// de-arm count
 800121c:	3a01      	subs	r2, #1
 800121e:	600a      	str	r2, [r1, #0]
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001220:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001222:	4293      	cmp	r3, r2
 8001224:	d0a4      	beq.n	8001170 <StarLPTask+0xd8>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8001226:	2108      	movs	r1, #8
			trigs = statuspkt.trigcount;
 8001228:	6fee      	ldr	r6, [r5, #124]	; 0x7c
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 800122a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800122e:	4a65      	ldr	r2, [pc, #404]	; (80013c4 <StarLPTask+0x32c>)
 8001230:	9100      	str	r1, [sp, #0]
 8001232:	2100      	movs	r1, #0
 8001234:	4864      	ldr	r0, [pc, #400]	; (80013c8 <StarLPTask+0x330>)
			trigs = statuspkt.trigcount;
 8001236:	f8c9 6000 	str.w	r6, [r9]
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 800123a:	f004 f873 	bl	8005324 <HAL_DAC_Start_DMA>
 800123e:	4e63      	ldr	r6, [pc, #396]	; (80013cc <StarLPTask+0x334>)
				printf("sem wait 1a\n");
 8001240:	4f63      	ldr	r7, [pc, #396]	; (80013d0 <StarLPTask+0x338>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001242:	e002      	b.n	800124a <StarLPTask+0x1b2>
				printf("sem wait 1a\n");
 8001244:	4638      	mov	r0, r7
 8001246:	f01c fa57 	bl	801d6f8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800124a:	2101      	movs	r1, #1
 800124c:	6830      	ldr	r0, [r6, #0]
 800124e:	f00f f8c5 	bl	80103dc <xQueueSemaphoreTake>
 8001252:	2801      	cmp	r0, #1
 8001254:	d1f6      	bne.n	8001244 <StarLPTask+0x1ac>
			sprintf(trigtimestr, "%u", epochtime);
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <StarLPTask+0x33c>)
 8001258:	495f      	ldr	r1, [pc, #380]	; (80013d8 <StarLPTask+0x340>)
 800125a:	4860      	ldr	r0, [pc, #384]	; (80013dc <StarLPTask+0x344>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f01c fae6 	bl	801d830 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001264:	2300      	movs	r3, #0
 8001266:	6830      	ldr	r0, [r6, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4619      	mov	r1, r3
 800126c:	f00e fe46 	bl	800fefc <xQueueGenericSend>
 8001270:	2801      	cmp	r0, #1
 8001272:	d088      	beq.n	8001186 <StarLPTask+0xee>
				printf("semaphore 1a release failed\n");
 8001274:	485a      	ldr	r0, [pc, #360]	; (80013e0 <StarLPTask+0x348>)
 8001276:	f01c fa3f 	bl	801d6f8 <puts>
 800127a:	e784      	b.n	8001186 <StarLPTask+0xee>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 800127c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001280:	4840      	ldr	r0, [pc, #256]	; (8001384 <StarLPTask+0x2ec>)
 8001282:	f006 fa59 	bl	8007738 <HAL_GPIO_WritePin>
 8001286:	e756      	b.n	8001136 <StarLPTask+0x9e>
				printf("GPS serial comms problem?\n");
 8001288:	4856      	ldr	r0, [pc, #344]	; (80013e4 <StarLPTask+0x34c>)
 800128a:	f01c fa35 	bl	801d6f8 <puts>
 800128e:	e782      	b.n	8001196 <StarLPTask+0xfe>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	483b      	ldr	r0, [pc, #236]	; (8001384 <StarLPTask+0x2ec>)
 8001296:	f006 fa69 	bl	800776c <HAL_GPIO_TogglePin>
				if (agc) {
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <StarLPTask+0x350>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 80dc 	bne.w	800145c <StarLPTask+0x3c4>
				onesectimer++;
 80012a4:	f108 0801 	add.w	r8, r8, #1
 80012a8:	4e48      	ldr	r6, [pc, #288]	; (80013cc <StarLPTask+0x334>)
					printf("sem wait 1\n");
 80012aa:	4f50      	ldr	r7, [pc, #320]	; (80013ec <StarLPTask+0x354>)
				onesectimer++;
 80012ac:	fa1f f888 	uxth.w	r8, r8
				while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80012b0:	e002      	b.n	80012b8 <StarLPTask+0x220>
					printf("sem wait 1\n");
 80012b2:	4638      	mov	r0, r7
 80012b4:	f01c fa20 	bl	801d6f8 <puts>
				while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80012b8:	2119      	movs	r1, #25
 80012ba:	6830      	ldr	r0, [r6, #0]
 80012bc:	f00f f88e 	bl	80103dc <xQueueSemaphoreTake>
 80012c0:	2801      	cmp	r0, #1
 80012c2:	d1f6      	bne.n	80012b2 <StarLPTask+0x21a>
				sprintf(nowtimestr, "\"%u\"", epochtime);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <StarLPTask+0x33c>)
 80012c6:	494a      	ldr	r1, [pc, #296]	; (80013f0 <StarLPTask+0x358>)
 80012c8:	483b      	ldr	r0, [pc, #236]	; (80013b8 <StarLPTask+0x320>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f01c faaf 	bl	801d830 <siprintf>
				sprintf(tempstr, "%d.%d", temperature, tempfrac);
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <StarLPTask+0x30c>)
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <StarLPTask+0x318>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	4946      	ldr	r1, [pc, #280]	; (80013f4 <StarLPTask+0x35c>)
 80012dc:	4846      	ldr	r0, [pc, #280]	; (80013f8 <StarLPTask+0x360>)
 80012de:	f01c faa7 	bl	801d830 <siprintf>
				sprintf(pressstr, "%d.%d", pressure, pressfrac);
 80012e2:	4b32      	ldr	r3, [pc, #200]	; (80013ac <StarLPTask+0x314>)
 80012e4:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <StarLPTask+0x31c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	4942      	ldr	r1, [pc, #264]	; (80013f4 <StarLPTask+0x35c>)
 80012ec:	4843      	ldr	r0, [pc, #268]	; (80013fc <StarLPTask+0x364>)
 80012ee:	f01c fa9f 	bl	801d830 <siprintf>
				sprintf(statstr,
 80012f2:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80012f4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
						statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, statuspkt.adcnoise, statuspkt.adcbase);
 80012f6:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
 80012fa:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
				sprintf(statstr,
 80012fe:	e9cd 0100 	strd	r0, r1, [sp]
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	493e      	ldr	r1, [pc, #248]	; (8001400 <StarLPTask+0x368>)
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <StarLPTask+0x344>)
 8001308:	483e      	ldr	r0, [pc, #248]	; (8001404 <StarLPTask+0x36c>)
 800130a:	f01c fa91 	bl	801d830 <siprintf>
				if (gpslocked) {
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <StarLPTask+0x370>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8093 	beq.w	800143e <StarLPTask+0x3a6>
					sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8001318:	7eea      	ldrb	r2, [r5, #27]
 800131a:	69eb      	ldr	r3, [r5, #28]
 800131c:	6a28      	ldr	r0, [r5, #32]
 800131e:	493b      	ldr	r1, [pc, #236]	; (800140c <StarLPTask+0x374>)
 8001320:	9000      	str	r0, [sp, #0]
 8001322:	483b      	ldr	r0, [pc, #236]	; (8001410 <StarLPTask+0x378>)
 8001324:	f01c fa84 	bl	801d830 <siprintf>
				if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8001328:	2300      	movs	r3, #0
 800132a:	6830      	ldr	r0, [r6, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4619      	mov	r1, r3
 8001330:	f00e fde4 	bl	800fefc <xQueueGenericSend>
 8001334:	2801      	cmp	r0, #1
 8001336:	f43f af26 	beq.w	8001186 <StarLPTask+0xee>
					printf("semaphore release failed\n");
 800133a:	4836      	ldr	r0, [pc, #216]	; (8001414 <StarLPTask+0x37c>)
 800133c:	f01c f9dc 	bl	801d6f8 <puts>
 8001340:	e721      	b.n	8001186 <StarLPTask+0xee>
				if (getpressure115() != HAL_OK) {
 8001342:	f001 fb3d 	bl	80029c0 <getpressure115>
 8001346:	2800      	cmp	r0, #0
 8001348:	f43f af2f 	beq.w	80011aa <StarLPTask+0x112>
					printf("MPL115A2 error\n\r");
 800134c:	4832      	ldr	r0, [pc, #200]	; (8001418 <StarLPTask+0x380>)
 800134e:	f01c f94b 	bl	801d5e8 <iprintf>
 8001352:	e72a      	b.n	80011aa <StarLPTask+0x112>
 8001354:	2000085c 	.word	0x2000085c
 8001358:	200217f0 	.word	0x200217f0
 800135c:	2002236c 	.word	0x2002236c
 8001360:	1ff0f428 	.word	0x1ff0f428
 8001364:	1ff0f424 	.word	0x1ff0f424
 8001368:	1ff0f420 	.word	0x1ff0f420
 800136c:	20022358 	.word	0x20022358
 8001370:	0801fccc 	.word	0x0801fccc
 8001374:	200000d0 	.word	0x200000d0
 8001378:	200221d8 	.word	0x200221d8
 800137c:	20000858 	.word	0x20000858
 8001380:	20021b94 	.word	0x20021b94
 8001384:	40020c00 	.word	0x40020c00
 8001388:	20000770 	.word	0x20000770
 800138c:	20000724 	.word	0x20000724
 8001390:	51eb851f 	.word	0x51eb851f
 8001394:	20000874 	.word	0x20000874
 8001398:	200008a4 	.word	0x200008a4
 800139c:	20021c18 	.word	0x20021c18
 80013a0:	0801fe98 	.word	0x0801fe98
 80013a4:	20022308 	.word	0x20022308
 80013a8:	10624dd3 	.word	0x10624dd3
 80013ac:	20022314 	.word	0x20022314
 80013b0:	2002230c 	.word	0x2002230c
 80013b4:	20022310 	.word	0x20022310
 80013b8:	20000084 	.word	0x20000084
 80013bc:	0801feb0 	.word	0x0801feb0
 80013c0:	20021c14 	.word	0x20021c14
 80013c4:	080201a8 	.word	0x080201a8
 80013c8:	20021ea0 	.word	0x20021ea0
 80013cc:	20021f7c 	.word	0x20021f7c
 80013d0:	0801fd14 	.word	0x0801fd14
 80013d4:	200222a0 	.word	0x200222a0
 80013d8:	0801fd20 	.word	0x0801fd20
 80013dc:	20000224 	.word	0x20000224
 80013e0:	0801fd24 	.word	0x0801fd24
 80013e4:	0801fe54 	.word	0x0801fe54
 80013e8:	20000002 	.word	0x20000002
 80013ec:	0801fd40 	.word	0x0801fd40
 80013f0:	0801fd4c 	.word	0x0801fd4c
 80013f4:	0801fd54 	.word	0x0801fd54
 80013f8:	2000021c 	.word	0x2000021c
 80013fc:	200000c4 	.word	0x200000c4
 8001400:	0801fd5c 	.word	0x0801fd5c
 8001404:	20000170 	.word	0x20000170
 8001408:	200008b5 	.word	0x200008b5
 800140c:	0801fde8 	.word	0x0801fde8
 8001410:	20000004 	.word	0x20000004
 8001414:	0801fe38 	.word	0x0801fe38
 8001418:	0801fe70 	.word	0x0801fe70
 800141c:	2000076c 	.word	0x2000076c
 8001420:	20000720 	.word	0x20000720
 8001424:	2000086c 	.word	0x2000086c
				if (getpressure3115() != HAL_OK) {
 8001428:	f001 fc82 	bl	8002d30 <getpressure3115>
 800142c:	2800      	cmp	r0, #0
 800142e:	f43f aebc 	beq.w	80011aa <StarLPTask+0x112>
					printf("MPL3115A2 error\n\r");
 8001432:	480c      	ldr	r0, [pc, #48]	; (8001464 <StarLPTask+0x3cc>)
 8001434:	f01c f8d8 	bl	801d5e8 <iprintf>
 8001438:	e6b7      	b.n	80011aa <StarLPTask+0x112>
				rebootme();	// target udp host has changed or network has gone away
 800143a:	f7ff fd79 	bl	8000f30 <rebootme>
					strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 800143e:	f8df c02c 	ldr.w	ip, [pc, #44]	; 800146c <StarLPTask+0x3d4>
 8001442:	4f09      	ldr	r7, [pc, #36]	; (8001468 <StarLPTask+0x3d0>)
 8001444:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001448:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800144a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800144e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001450:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001454:	f847 0b04 	str.w	r0, [r7], #4
 8001458:	8039      	strh	r1, [r7, #0]
 800145a:	e765      	b.n	8001328 <StarLPTask+0x290>
					calcagc();		// try to set the gain automatically
 800145c:	f7ff fdee 	bl	800103c <calcagc>
 8001460:	e720      	b.n	80012a4 <StarLPTask+0x20c>
 8001462:	bf00      	nop
 8001464:	0801fe84 	.word	0x0801fe84
 8001468:	20000004 	.word	0x20000004
 800146c:	0801fe10 	.word	0x0801fe10

08001470 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001470:	6803      	ldr	r3, [r0, #0]
 8001472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001476:	d030      	beq.n	80014da <HAL_TIM_PeriodElapsedCallback+0x6a>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d034      	beq.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x78>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d005      	beq.n	8001490 <HAL_TIM_PeriodElapsedCallback+0x20>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01a      	beq.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0x50>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 800148a:	481c      	ldr	r0, [pc, #112]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800148c:	f01c b934 	b.w	801d6f8 <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001490:	b510      	push	{r4, lr}
		t1sec++;
 8001492:	491b      	ldr	r1, [pc, #108]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x90>)
		statuspkt.sysuptime++;
 8001494:	4c1b      	ldr	r4, [pc, #108]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x94>)
		t1sec++;
 8001496:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001498:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 800149a:	481b      	ldr	r0, [pc, #108]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x98>)
		t1sec++;
 800149c:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800149e:	3301      	adds	r3, #1
		if (netup)
 80014a0:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 80014a2:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 80014a4:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 80014a6:	b110      	cbz	r0, 80014ae <HAL_TIM_PeriodElapsedCallback+0x3e>
			statuspkt.netuptime++;
 80014a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80014aa:	3301      	adds	r3, #1
 80014ac:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b93b      	cbnz	r3, 80014c4 <HAL_TIM_PeriodElapsedCallback+0x54>
			epochvalid = 0;
 80014b4:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xa0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 80014b6:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 80014b8:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 80014ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 80014be:	bd10      	pop	{r4, pc}
		HAL_IncTick();
 80014c0:	f003 b990 	b.w	80047e4 <HAL_IncTick>
			statuspkt.gpsuptime++;
 80014c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80014c6:	3301      	adds	r3, #1
 80014c8:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch();
 80014ca:	f000 fff5 	bl	80024b8 <calcepoch>
				epochvalid = 1;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014d0:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();
 80014d2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 80014d6:	701a      	strb	r2, [r3, #0]
}
 80014d8:	bd10      	pop	{r4, pc}
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80014de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014e4:	f01c b880 	b.w	801d5e8 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014ea:	f01c b905 	b.w	801d6f8 <puts>
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40001000 	.word	0x40001000
 80014f8:	40001800 	.word	0x40001800
 80014fc:	0801fca4 	.word	0x0801fca4
 8001500:	20000868 	.word	0x20000868
 8001504:	200217f0 	.word	0x200217f0
 8001508:	20000772 	.word	0x20000772
 800150c:	200008b5 	.word	0x200008b5
 8001510:	200008b4 	.word	0x200008b4
 8001514:	20021894 	.word	0x20021894
 8001518:	0801fc64 	.word	0x0801fc64
 800151c:	0801fc88 	.word	0x0801fc88

08001520 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8001520:	4c02      	ldr	r4, [pc, #8]	; (800152c <Error_Handler+0xc>)
void Error_Handler(void) {
 8001522:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8001524:	4620      	mov	r0, r4
 8001526:	f01c f8e7 	bl	801d6f8 <puts>
 800152a:	e7fb      	b.n	8001524 <Error_Handler+0x4>
 800152c:	0801fc3c 	.word	0x0801fc3c

08001530 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b0b9      	sub	sp, #228	; 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001534:	2234      	movs	r2, #52	; 0x34
 8001536:	2100      	movs	r1, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800153c:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001540:	f01b fd0e 	bl	801cf60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001544:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001546:	2290      	movs	r2, #144	; 0x90
 8001548:	a814      	add	r0, sp, #80	; 0x50
 800154a:	4619      	mov	r1, r3
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800154c:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800154e:	2709      	movs	r7, #9
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001550:	2501      	movs	r5, #1
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001556:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800155a:	f01b fd01 	bl	801cf60 <memset>
	HAL_PWR_EnableBkUpAccess();
 800155e:	f007 fc6d 	bl	8008e3c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4a2c      	ldr	r2, [pc, #176]	; (8001614 <SystemClock_Config+0xe4>)
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <SystemClock_Config+0xe8>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001566:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 8001568:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800156a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800156e:	6411      	str	r1, [r2, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001570:	2104      	movs	r1, #4
	__HAL_RCC_PWR_CLK_ENABLE();
 8001572:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001574:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001582:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001584:	22d8      	movs	r2, #216	; 0xd8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001586:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	9608      	str	r6, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001592:	9707      	str	r7, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001594:	950c      	str	r5, [sp, #48]	; 0x30
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.PLL.PLLQ = 6;
 800159a:	2306      	movs	r3, #6
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 216;
 80015a0:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80015a2:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 4;
 80015a4:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015a8:	f007 fc8c 	bl	8008ec4 <HAL_RCC_OscConfig>
 80015ac:	bb78      	cbnz	r0, 800160e <SystemClock_Config+0xde>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80015ae:	f007 fc4d 	bl	8008e4c <HAL_PWREx_EnableOverDrive>
 80015b2:	4603      	mov	r3, r0
 80015b4:	bb58      	cbnz	r0, 800160e <SystemClock_Config+0xde>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015b6:	210f      	movs	r1, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015c2:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80015c4:	a802      	add	r0, sp, #8
 80015c6:	2107      	movs	r1, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80015ce:	f007 ff1f 	bl	8009410 <HAL_RCC_ClockConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b9d8      	cbnz	r0, 800160e <SystemClock_Config+0xde>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 80015d6:	4f11      	ldr	r7, [pc, #68]	; (800161c <SystemClock_Config+0xec>)
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015d8:	26c0      	movs	r6, #192	; 0xc0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80015da:	2103      	movs	r1, #3
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80015dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80015e0:	a814      	add	r0, sp, #80	; 0x50
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015e2:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015e4:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015e6:	9330      	str	r3, [sp, #192]	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 80015e8:	9714      	str	r7, [sp, #80]	; 0x50
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015ea:	9619      	str	r6, [sp, #100]	; 0x64
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80015ec:	911c      	str	r1, [sp, #112]	; 0x70
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80015ee:	9233      	str	r2, [sp, #204]	; 0xcc
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015f0:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015f4:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015f8:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015fc:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001600:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001604:	f008 f86a 	bl	80096dc <HAL_RCCEx_PeriphCLKConfig>
 8001608:	b908      	cbnz	r0, 800160e <SystemClock_Config+0xde>
}
 800160a:	b039      	add	sp, #228	; 0xe4
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 800160e:	f7ff ff87 	bl	8001520 <Error_Handler>
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000
 800161c:	0022df80 	.word	0x0022df80

08001620 <main>:
int main(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b0d4      	sub	sp, #336	; 0x150
 8001624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001628:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162c:	4bb4      	ldr	r3, [pc, #720]	; (8001900 <main+0x2e0>)
 800162e:	2400      	movs	r4, #0
 8001630:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001642:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001648:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800164c:	4dad      	ldr	r5, [pc, #692]	; (8001904 <main+0x2e4>)
	HAL_Init();
 800164e:	f003 f8b7 	bl	80047c0 <HAL_Init>
	SystemClock_Config();
 8001652:	f7ff ff6d 	bl	8001530 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001656:	944d      	str	r4, [sp, #308]	; 0x134
 8001658:	944e      	str	r4, [sp, #312]	; 0x138
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800165e:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001660:	4622      	mov	r2, r4
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001662:	9450      	str	r4, [sp, #320]	; 0x140
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2601      	movs	r6, #1
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001666:	9451      	str	r4, [sp, #324]	; 0x144
	GPIO_InitStruct.Pin = probe1_Pin;
 8001668:	4689      	mov	r9, r1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800166a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	f04f 0802 	mov.w	r8, #2
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001670:	48a5      	ldr	r0, [pc, #660]	; (8001908 <main+0x2e8>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2703      	movs	r7, #3
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001674:	f043 0310 	orr.w	r3, r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001678:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8001930 <main+0x310>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	632b      	str	r3, [r5, #48]	; 0x30
 800167e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	632b      	str	r3, [r5, #48]	; 0x30
 8001690:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	9303      	str	r3, [sp, #12]
 8001698:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800169a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	632b      	str	r3, [r5, #48]	; 0x30
 80016a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	9304      	str	r3, [sp, #16]
 80016aa:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	632b      	str	r3, [r5, #48]	; 0x30
 80016b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	9305      	str	r3, [sp, #20]
 80016bc:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	632b      	str	r3, [r5, #48]	; 0x30
 80016c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	9306      	str	r3, [sp, #24]
 80016ce:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	632b      	str	r3, [r5, #48]	; 0x30
 80016d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	9307      	str	r3, [sp, #28]
 80016e0:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80016e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	632b      	str	r3, [r5, #48]	; 0x30
 80016ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f0:	9308      	str	r3, [sp, #32]
 80016f2:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	632b      	str	r3, [r5, #48]	; 0x30
 80016fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	9309      	str	r3, [sp, #36]	; 0x24
 8001704:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001706:	f006 f817 	bl	8007738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800170a:	4622      	mov	r2, r4
 800170c:	f644 0181 	movw	r1, #18561	; 0x4881
 8001710:	487e      	ldr	r0, [pc, #504]	; (800190c <main+0x2ec>)
 8001712:	f006 f811 	bl	8007738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,
 8001716:	4622      	mov	r2, r4
 8001718:	f24c 4101 	movw	r1, #50177	; 0xc401
 800171c:	487c      	ldr	r0, [pc, #496]	; (8001910 <main+0x2f0>)
 800171e:	f006 f80b 	bl	8007738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 8001722:	4632      	mov	r2, r6
 8001724:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001728:	487a      	ldr	r0, [pc, #488]	; (8001914 <main+0x2f4>)
 800172a:	f006 f805 	bl	8007738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800172e:	4622      	mov	r2, r4
 8001730:	2144      	movs	r1, #68	; 0x44
 8001732:	4879      	ldr	r0, [pc, #484]	; (8001918 <main+0x2f8>)
 8001734:	f006 f800 	bl	8007738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8001738:	4622      	mov	r2, r4
 800173a:	4641      	mov	r1, r8
 800173c:	4875      	ldr	r0, [pc, #468]	; (8001914 <main+0x2f4>)
 800173e:	f005 fffb 	bl	8007738 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_1;
 8001742:	f643 138a 	movw	r3, #14730	; 0x398a
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001746:	a94d      	add	r1, sp, #308	; 0x134
 8001748:	4871      	ldr	r0, [pc, #452]	; (8001910 <main+0x2f0>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_1;
 800174a:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	974e      	str	r7, [sp, #312]	; 0x138
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f005 fe3c 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001758:	a94d      	add	r1, sp, #308	; 0x134
 800175a:	4870      	ldr	r0, [pc, #448]	; (800191c <main+0x2fc>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800175c:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001760:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001764:	f005 fe32 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8001768:	f643 433c 	movw	r3, #15420	; 0x3c3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176c:	a94d      	add	r1, sp, #308	; 0x134
 800176e:	4866      	ldr	r0, [pc, #408]	; (8001908 <main+0x2e8>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8001770:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001776:	f005 fe29 	bl	80073cc <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 800177a:	a94d      	add	r1, sp, #308	; 0x134
 800177c:	4862      	ldr	r0, [pc, #392]	; (8001908 <main+0x2e8>)
	GPIO_InitStruct.Pin = probe1_Pin;
 800177e:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	964f      	str	r6, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001786:	f8cd 8140 	str.w	r8, [sp, #320]	; 0x140
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 800178a:	f005 fe1f 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 800178e:	f240 3301 	movw	r3, #769	; 0x301
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	a94d      	add	r1, sp, #308	; 0x134
 8001794:	4861      	ldr	r0, [pc, #388]	; (800191c <main+0x2fc>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 8001796:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001798:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f005 fe16 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80017a0:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	a94d      	add	r1, sp, #308	; 0x134
 80017a6:	4859      	ldr	r0, [pc, #356]	; (800190c <main+0x2ec>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80017a8:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f005 fe0c 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80017b4:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	a94d      	add	r1, sp, #308	; 0x134
 80017b8:	4854      	ldr	r0, [pc, #336]	; (800190c <main+0x2ec>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80017ba:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017bc:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f005 fe04 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin =
 80017c4:	f24d 433b 	movw	r3, #54331	; 0xd43b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c8:	a94d      	add	r1, sp, #308	; 0x134
 80017ca:	4853      	ldr	r0, [pc, #332]	; (8001918 <main+0x2f8>)
	GPIO_InitStruct.Pin =
 80017cc:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d2:	f005 fdfb 	bl	80073cc <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d6:	a94d      	add	r1, sp, #308	; 0x134
 80017d8:	484d      	ldr	r0, [pc, #308]	; (8001910 <main+0x2f0>)
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017da:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017de:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e4:	f005 fdf2 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin =
 80017e8:	f24c 4301 	movw	r3, #50177	; 0xc401
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ec:	a94d      	add	r1, sp, #308	; 0x134
 80017ee:	4848      	ldr	r0, [pc, #288]	; (8001910 <main+0x2f0>)
	GPIO_InitStruct.Pin =
 80017f0:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f005 fde8 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 80017fc:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001800:	a94d      	add	r1, sp, #308	; 0x134
 8001802:	4844      	ldr	r0, [pc, #272]	; (8001914 <main+0x2f4>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8001804:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	974e      	str	r7, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	f005 fddf 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 800180e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	a94d      	add	r1, sp, #308	; 0x134
 8001814:	483f      	ldr	r0, [pc, #252]	; (8001914 <main+0x2f4>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8001816:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f005 fdd5 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8001822:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001824:	a94d      	add	r1, sp, #308	; 0x134
 8001826:	483c      	ldr	r0, [pc, #240]	; (8001918 <main+0x2f8>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8001828:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	944f      	str	r4, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	9450      	str	r4, [sp, #320]	; 0x140
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001830:	f005 fdcc 	bl	80073cc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001834:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001836:	a94d      	add	r1, sp, #308	; 0x134
 8001838:	4837      	ldr	r0, [pc, #220]	; (8001918 <main+0x2f8>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800183a:	934d      	str	r3, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	944e      	str	r4, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	944f      	str	r4, [sp, #316]	; 0x13c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001840:	f005 fdc4 	bl	80073cc <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8001844:	a94d      	add	r1, sp, #308	; 0x134
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <main+0x2f4>)
	GPIO_InitStruct.Pin = probe2_Pin;
 8001848:	f8cd 8134 	str.w	r8, [sp, #308]	; 0x134
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	964e      	str	r6, [sp, #312]	; 0x138
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184e:	964f      	str	r6, [sp, #316]	; 0x13c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	f8cd 8140 	str.w	r8, [sp, #320]	; 0x140
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8001854:	f005 fdba 	bl	80073cc <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001858:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800185a:	4622      	mov	r2, r4
 800185c:	2105      	movs	r1, #5
 800185e:	200c      	movs	r0, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001864:	632b      	str	r3, [r5, #48]	; 0x30
 8001866:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001870:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001876:	632b      	str	r3, [r5, #48]	; 0x30
 8001878:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001882:	f003 fc0f 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001886:	200c      	movs	r0, #12
 8001888:	f003 fc52 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 800188c:	4622      	mov	r2, r4
 800188e:	2106      	movs	r1, #6
 8001890:	2010      	movs	r0, #16
 8001892:	f003 fc07 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001896:	2010      	movs	r0, #16
 8001898:	f003 fc4a 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800189c:	4622      	mov	r2, r4
 800189e:	2106      	movs	r1, #6
 80018a0:	2039      	movs	r0, #57	; 0x39
 80018a2:	f003 fbff 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018a6:	2039      	movs	r0, #57	; 0x39
 80018a8:	f003 fc42 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80018ac:	4622      	mov	r2, r4
 80018ae:	2105      	movs	r1, #5
 80018b0:	203c      	movs	r0, #60	; 0x3c
 80018b2:	f003 fbf7 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80018b6:	203c      	movs	r0, #60	; 0x3c
 80018b8:	f003 fc3a 	bl	8005130 <HAL_NVIC_EnableIRQ>
	hmdios.Instance = MDIOS;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <main+0x300>)
 80018be:	4a19      	ldr	r2, [pc, #100]	; (8001924 <main+0x304>)
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 80018c0:	4618      	mov	r0, r3
	hmdios.Instance = MDIOS;
 80018c2:	601a      	str	r2, [r3, #0]
	hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 80018c4:	e9c3 4401 	strd	r4, r4, [r3, #4]
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 80018c8:	f006 fc34 	bl	8008134 <HAL_MDIOS_Init>
 80018cc:	2800      	cmp	r0, #0
 80018ce:	f040 844b 	bne.w	8002168 <main+0xb48>
 80018d2:	4603      	mov	r3, r0
	huart2.Instance = USART2;
 80018d4:	4c14      	ldr	r4, [pc, #80]	; (8001928 <main+0x308>)
	huart2.Init.BaudRate = 115200;
 80018d6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart2.Instance = USART2;
 80018da:	4914      	ldr	r1, [pc, #80]	; (800192c <main+0x30c>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018dc:	250c      	movs	r5, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	60a0      	str	r0, [r4, #8]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80018e0:	4620      	mov	r0, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018e2:	6165      	str	r5, [r4, #20]
	huart2.Init.BaudRate = 115200;
 80018e4:	e9c4 1200 	strd	r1, r2, [r4]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80018e8:	461a      	mov	r2, r3
 80018ea:	4619      	mov	r1, r3
	huart2.Init.Parity = UART_PARITY_NONE;
 80018ec:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 80018f8:	f00c f952 	bl	800dba0 <HAL_RS485Ex_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	e019      	b.n	8001934 <main+0x314>
 8001900:	e000ed00 	.word	0xe000ed00
 8001904:	40023800 	.word	0x40023800
 8001908:	40021400 	.word	0x40021400
 800190c:	40020400 	.word	0x40020400
 8001910:	40021000 	.word	0x40021000
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021800 	.word	0x40021800
 800191c:	40020800 	.word	0x40020800
 8001920:	20021e90 	.word	0x20021e90
 8001924:	40017800 	.word	0x40017800
 8001928:	20022158 	.word	0x20022158
 800192c:	40004400 	.word	0x40004400
 8001930:	10110000 	.word	0x10110000
 8001934:	2800      	cmp	r0, #0
 8001936:	f040 8417 	bne.w	8002168 <main+0xb48>
	hadc1.Instance = ADC1;
 800193a:	4cb4      	ldr	r4, [pc, #720]	; (8001c0c <main+0x5ec>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800193c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	hadc1.Instance = ADC1;
 8001940:	49b3      	ldr	r1, [pc, #716]	; (8001c10 <main+0x5f0>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001942:	4ab4      	ldr	r2, [pc, #720]	; (8001c14 <main+0x5f4>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8001944:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001946:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001948:	933d      	str	r3, [sp, #244]	; 0xf4
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194a:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800194c:	6123      	str	r3, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800194e:	61a6      	str	r6, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001950:	f884 3020 	strb.w	r3, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001954:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	60e3      	str	r3, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001958:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800195a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800195e:	6163      	str	r3, [r4, #20]
	hadc1.Instance = ADC1;
 8001960:	6021      	str	r1, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001962:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001964:	6065      	str	r5, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001966:	9340      	str	r3, [sp, #256]	; 0x100
	ADC_MultiModeTypeDef multimode = { 0 };
 8001968:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800196c:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001970:	f002 ff5c 	bl	800482c <HAL_ADC_Init>
 8001974:	2800      	cmp	r0, #0
 8001976:	f040 83f7 	bne.w	8002168 <main+0xb48>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800197a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 800197e:	2217      	movs	r2, #23
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001980:	9020      	str	r0, [sp, #128]	; 0x80
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001982:	a91e      	add	r1, sp, #120	; 0x78
 8001984:	4620      	mov	r0, r4
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001986:	931f      	str	r3, [sp, #124]	; 0x7c
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8001988:	921e      	str	r2, [sp, #120]	; 0x78
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800198a:	f003 fb0d 	bl	8004fa8 <HAL_ADCEx_MultiModeConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2800      	cmp	r0, #0
 8001992:	f040 83e9 	bne.w	8002168 <main+0xb48>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001996:	4620      	mov	r0, r4
 8001998:	a93d      	add	r1, sp, #244	; 0xf4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800199a:	933f      	str	r3, [sp, #252]	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800199c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019a0:	f003 fa20 	bl	8004de4 <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f040 83de 	bne.w	8002168 <main+0xb48>
	hadc2.Instance = ADC2;
 80019ac:	4c9a      	ldr	r4, [pc, #616]	; (8001c18 <main+0x5f8>)
 80019ae:	4a9b      	ldr	r2, [pc, #620]	; (8001c1c <main+0x5fc>)
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80019b0:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019b2:	9339      	str	r3, [sp, #228]	; 0xe4
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b4:	6123      	str	r3, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019b6:	f884 3020 	strb.w	r3, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	60e3      	str	r3, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80019bc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019c0:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019c2:	933c      	str	r3, [sp, #240]	; 0xf0
	hadc2.Init.ContinuousConvMode = ENABLE;
 80019c4:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 80019c6:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 80019c8:	6022      	str	r2, [r4, #0]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019ca:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019ce:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80019d2:	f002 ff2b 	bl	800482c <HAL_ADC_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2800      	cmp	r0, #0
 80019da:	f040 83c5 	bne.w	8002168 <main+0xb48>
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80019de:	4620      	mov	r0, r4
 80019e0:	a939      	add	r1, sp, #228	; 0xe4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019e2:	933b      	str	r3, [sp, #236]	; 0xec
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e4:	e9cd 7639 	strd	r7, r6, [sp, #228]	; 0xe4
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80019e8:	f003 f9fc 	bl	8004de4 <HAL_ADC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f040 83ba 	bne.w	8002168 <main+0xb48>
	hadc3.Instance = ADC3;
 80019f4:	4c8a      	ldr	r4, [pc, #552]	; (8001c20 <main+0x600>)
 80019f6:	4a8b      	ldr	r2, [pc, #556]	; (8001c24 <main+0x604>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019f8:	9035      	str	r0, [sp, #212]	; 0xd4
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80019fa:	4620      	mov	r0, r4
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019fc:	6123      	str	r3, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	f884 3020 	strb.w	r3, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a02:	60e3      	str	r3, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a08:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a0a:	9338      	str	r3, [sp, #224]	; 0xe0
	hadc3.Init.ContinuousConvMode = ENABLE;
 8001a0c:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8001a0e:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8001a10:	6022      	str	r2, [r4, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a12:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a16:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001a1a:	f002 ff07 	bl	800482c <HAL_ADC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2800      	cmp	r0, #0
 8001a22:	f040 83a1 	bne.w	8002168 <main+0xb48>
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001a26:	4620      	mov	r0, r4
 8001a28:	a935      	add	r1, sp, #212	; 0xd4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a2a:	9337      	str	r3, [sp, #220]	; 0xdc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2c:	e9cd 7635 	strd	r7, r6, [sp, #212]	; 0xd4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001a30:	f003 f9d8 	bl	8004de4 <HAL_ADC_ConfigChannel>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f040 8397 	bne.w	8002168 <main+0xb48>
	hrng.Instance = RNG;
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <main+0x608>)
 8001a3c:	4a7b      	ldr	r2, [pc, #492]	; (8001c2c <main+0x60c>)
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001a3e:	4618      	mov	r0, r3
	hrng.Instance = RNG;
 8001a40:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001a42:	f008 fb2b 	bl	800a09c <HAL_RNG_Init>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	f040 838e 	bne.w	8002168 <main+0xb48>
	htim6.Instance = TIM6;
 8001a4c:	4c78      	ldr	r4, [pc, #480]	; (8001c30 <main+0x610>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a4e:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8001a50:	4a78      	ldr	r2, [pc, #480]	; (8001c34 <main+0x614>)
	htim6.Init.Prescaler = 10800;
 8001a52:	f642 2730 	movw	r7, #10800	; 0x2a30
	htim6.Init.Period = 10000;
 8001a56:	f242 7510 	movw	r5, #10000	; 0x2710
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5a:	2680      	movs	r6, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a5c:	4620      	mov	r0, r4
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a60:	931d      	str	r3, [sp, #116]	; 0x74
	htim6.Init.Period = 10000;
 8001a62:	60e5      	str	r5, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	61a6      	str	r6, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a66:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	htim6.Init.Prescaler = 10800;
 8001a6a:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a6e:	f009 ff51 	bl	800b914 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f040 8377 	bne.w	8002168 <main+0xb48>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001a7a:	2210      	movs	r2, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001a7c:	a91b      	add	r1, sp, #108	; 0x6c
 8001a7e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	931d      	str	r3, [sp, #116]	; 0x74
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001a82:	921b      	str	r2, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001a84:	f00b fa14 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	f040 836c 	bne.w	8002168 <main+0xb48>
	htim3.Instance = TIM3;
 8001a90:	4c69      	ldr	r4, [pc, #420]	; (8001c38 <main+0x618>)
 8001a92:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <main+0x61c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a94:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a96:	9018      	str	r0, [sp, #96]	; 0x60
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a98:	904d      	str	r0, [sp, #308]	; 0x134
 8001a9a:	904e      	str	r0, [sp, #312]	; 0x138
 8001a9c:	904f      	str	r0, [sp, #316]	; 0x13c
 8001a9e:	9050      	str	r0, [sp, #320]	; 0x140
 8001aa0:	9051      	str	r0, [sp, #324]	; 0x144
 8001aa2:	9052      	str	r0, [sp, #328]	; 0x148
 8001aa4:	9053      	str	r0, [sp, #332]	; 0x14c
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001aa6:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 10800;
 8001aa8:	6067      	str	r7, [r4, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	6123      	str	r3, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aac:	61a6      	str	r6, [r4, #24]
	htim3.Instance = TIM3;
 8001aae:	6022      	str	r2, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ab0:	9334      	str	r3, [sp, #208]	; 0xd0
	htim3.Init.Period = 10000;
 8001ab2:	e9c4 3502 	strd	r3, r5, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ab6:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aba:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001abe:	f009 ff29 	bl	800b914 <HAL_TIM_Base_Init>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f040 8350 	bne.w	8002168 <main+0xb48>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001acc:	a931      	add	r1, sp, #196	; 0xc4
 8001ace:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	9331      	str	r3, [sp, #196]	; 0xc4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001ad2:	f009 fa31 	bl	800af38 <HAL_TIM_ConfigClockSource>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	f040 8346 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001adc:	4620      	mov	r0, r4
 8001ade:	f00a f895 	bl	800bc0c <HAL_TIM_PWM_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	f040 833f 	bne.w	8002168 <main+0xb48>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001aea:	a918      	add	r1, sp, #96	; 0x60
 8001aec:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	931a      	str	r3, [sp, #104]	; 0x68
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001af2:	f00b f9dd 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	f040 8336 	bne.w	8002168 <main+0xb48>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afc:	2560      	movs	r5, #96	; 0x60
	sConfigOC.Pulse = 10;
 8001afe:	230a      	movs	r3, #10
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	904f      	str	r0, [sp, #316]	; 0x13c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001b02:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	9051      	str	r0, [sp, #324]	; 0x144
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001b06:	a94d      	add	r1, sp, #308	; 0x134
 8001b08:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0a:	954d      	str	r5, [sp, #308]	; 0x134
	sConfigOC.Pulse = 10;
 8001b0c:	934e      	str	r3, [sp, #312]	; 0x138
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001b0e:	f00a fbdf 	bl	800c2d0 <HAL_TIM_PWM_ConfigChannel>
 8001b12:	4605      	mov	r5, r0
 8001b14:	2800      	cmp	r0, #0
 8001b16:	f040 8327 	bne.w	8002168 <main+0xb48>
	HAL_TIM_MspPostInit(&htim3);
 8001b1a:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8001b1c:	4c48      	ldr	r4, [pc, #288]	; (8001c40 <main+0x620>)
	HAL_TIM_MspPostInit(&htim3);
 8001b1e:	f001 fe47 	bl	80037b0 <HAL_TIM_MspPostInit>
	htim7.Init.Period = 9600;
 8001b22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	htim7.Instance = TIM7;
 8001b26:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <main+0x624>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001b28:	4620      	mov	r0, r4
	htim7.Init.Period = 9600;
 8001b2a:	60e3      	str	r3, [r4, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b2c:	9515      	str	r5, [sp, #84]	; 0x54
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2e:	61a6      	str	r6, [r4, #24]
	htim7.Instance = TIM7;
 8001b30:	6022      	str	r2, [r4, #0]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b36:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001b3a:	f009 feeb 	bl	800b914 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2800      	cmp	r0, #0
 8001b42:	f040 8311 	bne.w	8002168 <main+0xb48>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b46:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001b48:	a915      	add	r1, sp, #84	; 0x54
 8001b4a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	9317      	str	r3, [sp, #92]	; 0x5c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b4e:	9215      	str	r2, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001b50:	f00b f9ae 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f040 8306 	bne.w	8002168 <main+0xb48>
	htim1.Instance = TIM1;
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <main+0x628>)
 8001b5e:	493b      	ldr	r1, [pc, #236]	; (8001c4c <main+0x62c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b60:	902d      	str	r0, [sp, #180]	; 0xb4
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001b62:	4610      	mov	r0, r2
	htim1.Instance = TIM1;
 8001b64:	6011      	str	r1, [r2, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b66:	9330      	str	r3, [sp, #192]	; 0xc0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b68:	9314      	str	r3, [sp, #80]	; 0x50
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	e9c2 3301 	strd	r3, r3, [r2, #4]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	e9c2 3303 	strd	r3, r3, [r2, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	e9c2 3305 	strd	r3, r3, [r2, #20]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b76:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b7a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001b7e:	f009 fec9 	bl	800b914 <HAL_TIM_Base_Init>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	f040 82f0 	bne.w	8002168 <main+0xb48>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b88:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001b8c:	a92d      	add	r1, sp, #180	; 0xb4
 8001b8e:	482e      	ldr	r0, [pc, #184]	; (8001c48 <main+0x628>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	972d      	str	r7, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001b92:	f009 f9d1 	bl	800af38 <HAL_TIM_ConfigClockSource>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f040 82e6 	bne.w	8002168 <main+0xb48>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	9014      	str	r0, [sp, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001b9e:	a912      	add	r1, sp, #72	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ba0:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001ba4:	4828      	ldr	r0, [pc, #160]	; (8001c48 <main+0x628>)
 8001ba6:	f00b f983 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4602      	mov	r2, r0
 8001bac:	2800      	cmp	r0, #0
 8001bae:	f040 82db 	bne.w	8002168 <main+0xb48>
	hcrc.Instance = CRC;
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <main+0x630>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bb4:	2601      	movs	r6, #1
	hcrc.Instance = CRC;
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <main+0x634>)
 8001bb8:	8098      	strh	r0, [r3, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001bba:	4618      	mov	r0, r3
	hcrc.Instance = CRC;
 8001bbc:	6019      	str	r1, [r3, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bbe:	621e      	str	r6, [r3, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001bc0:	e9c3 2205 	strd	r2, r2, [r3, #20]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001bc4:	f003 fac8 	bl	8005158 <HAL_CRC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f040 82cc 	bne.w	8002168 <main+0xb48>
	htim2.Instance = TIM2;
 8001bd0:	4c21      	ldr	r4, [pc, #132]	; (8001c58 <main+0x638>)
 8001bd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.Period = 4000000000;
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <main+0x63c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001bd8:	ad41      	add	r5, sp, #260	; 0x104
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bda:	9025      	str	r0, [sp, #148]	; 0x94
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001bdc:	9041      	str	r0, [sp, #260]	; 0x104
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001bde:	4620      	mov	r0, r4
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001be0:	9329      	str	r3, [sp, #164]	; 0xa4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be2:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	61a3      	str	r3, [r4, #24]
	htim2.Instance = TIM2;
 8001be6:	6021      	str	r1, [r4, #0]
	htim2.Init.Period = 4000000000;
 8001be8:	60e2      	str	r2, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bea:	9328      	str	r3, [sp, #160]	; 0xa0
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001bec:	9342      	str	r3, [sp, #264]	; 0x108
 8001bee:	9343      	str	r3, [sp, #268]	; 0x10c
 8001bf0:	9344      	str	r3, [sp, #272]	; 0x110
 8001bf2:	9345      	str	r3, [sp, #276]	; 0x114
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bf4:	9311      	str	r3, [sp, #68]	; 0x44
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001bf6:	932c      	str	r3, [sp, #176]	; 0xb0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bfc:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c00:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001c04:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8001c08:	e02a      	b.n	8001c60 <main+0x640>
 8001c0a:	bf00      	nop
 8001c0c:	20021e00 	.word	0x20021e00
 8001c10:	40012000 	.word	0x40012000
 8001c14:	0f000001 	.word	0x0f000001
 8001c18:	20021afc 	.word	0x20021afc
 8001c1c:	40012100 	.word	0x40012100
 8001c20:	20021e48 	.word	0x20021e48
 8001c24:	40012200 	.word	0x40012200
 8001c28:	20022004 	.word	0x20022004
 8001c2c:	50060800 	.word	0x50060800
 8001c30:	20021f80 	.word	0x20021f80
 8001c34:	40001000 	.word	0x40001000
 8001c38:	20021c7c 	.word	0x20021c7c
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	200221d8 	.word	0x200221d8
 8001c44:	40001400 	.word	0x40001400
 8001c48:	20021fc0 	.word	0x20021fc0
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	20021ba4 	.word	0x20021ba4
 8001c54:	40023000 	.word	0x40023000
 8001c58:	20022118 	.word	0x20022118
 8001c5c:	ee6b2800 	.word	0xee6b2800
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001c60:	f009 fe58 	bl	800b914 <HAL_TIM_Base_Init>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	f040 827f 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001c6a:	a925      	add	r1, sp, #148	; 0x94
 8001c6c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6e:	9725      	str	r7, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001c70:	f009 f962 	bl	800af38 <HAL_TIM_ConfigClockSource>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	f040 8277 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f00a f884 	bl	800bd88 <HAL_TIM_IC_Init>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f040 8271 	bne.w	8002168 <main+0xb48>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c86:	2704      	movs	r7, #4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c88:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c8a:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001c8c:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8001c8e:	9045      	str	r0, [sp, #276]	; 0x114
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001c90:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c92:	9741      	str	r7, [sp, #260]	; 0x104
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c94:	9342      	str	r3, [sp, #264]	; 0x108
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8001c96:	f009 fc1f 	bl	800b4d8 <HAL_TIM_SlaveConfigSynchro>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	f040 8264 	bne.w	8002168 <main+0xb48>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001ca2:	a90f      	add	r1, sp, #60	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f00b f902 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	f040 825a 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001cb4:	4602      	mov	r2, r0
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb6:	9029      	str	r0, [sp, #164]	; 0xa4
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001cb8:	a929      	add	r1, sp, #164	; 0xa4
 8001cba:	4620      	mov	r0, r4
	sConfigIC.ICFilter = 0;
 8001cbc:	932c      	str	r3, [sp, #176]	; 0xb0
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cbe:	e9cd 632a 	strd	r6, r3, [sp, #168]	; 0xa8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001cc2:	f00a fd2f 	bl	800c724 <HAL_TIM_IC_ConfigChannel>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	f040 824e 	bne.w	8002168 <main+0xb48>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ccc:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001cce:	463a      	mov	r2, r7
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	a929      	add	r1, sp, #164	; 0xa4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cd4:	932a      	str	r3, [sp, #168]	; 0xa8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001cd6:	f00a fd25 	bl	800c724 <HAL_TIM_IC_ConfigChannel>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	f040 8244 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001ce0:	a929      	add	r1, sp, #164	; 0xa4
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ce6:	962a      	str	r6, [sp, #168]	; 0xa8
 8001ce8:	4637      	mov	r7, r6
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001cea:	f00a fd1b 	bl	800c724 <HAL_TIM_IC_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f040 8239 	bne.w	8002168 <main+0xb48>
	huart6.Instance = USART6;
 8001cf6:	4cc3      	ldr	r4, [pc, #780]	; (8002004 <main+0x9e4>)
	huart6.Init.BaudRate = 9600;
 8001cf8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	huart6.Instance = USART6;
 8001cfc:	f8df e364 	ldr.w	lr, [pc, #868]	; 8002064 <main+0xa44>
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001d00:	2130      	movs	r1, #48	; 0x30
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	huart6.AdvancedInit.DMADisableonRxError =
 8001d06:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001d0a:	260c      	movs	r6, #12
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001d0c:	6261      	str	r1, [r4, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001d0e:	63a2      	str	r2, [r4, #56]	; 0x38
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001d10:	4619      	mov	r1, r3
 8001d12:	461a      	mov	r2, r3
	huart6.Init.Parity = UART_PARITY_NONE;
 8001d14:	6123      	str	r3, [r4, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	6223      	str	r3, [r4, #32]
	huart6.AdvancedInit.DMADisableonRxError =
 8001d18:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	6166      	str	r6, [r4, #20]
	huart6.Init.BaudRate = 9600;
 8001d1e:	e9c4 e000 	strd	lr, r0, [r4]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001d22:	4620      	mov	r0, r4
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001d24:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001d2c:	f00b ff38 	bl	800dba0 <HAL_RS485Ex_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2800      	cmp	r0, #0
 8001d34:	f040 8218 	bne.w	8002168 <main+0xb48>
	hdac.Instance = DAC;
 8001d38:	4cb3      	ldr	r4, [pc, #716]	; (8002008 <main+0x9e8>)
 8001d3a:	4ab4      	ldr	r2, [pc, #720]	; (800200c <main+0x9ec>)
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001d3c:	4620      	mov	r0, r4
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8001d40:	930b      	str	r3, [sp, #44]	; 0x2c
	hdac.Instance = DAC;
 8001d42:	6022      	str	r2, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001d44:	f003 faca 	bl	80052dc <HAL_DAC_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f040 820c 	bne.w	8002168 <main+0xb48>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001d50:	f04f 0c14 	mov.w	ip, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001d54:	461a      	mov	r2, r3
 8001d56:	4620      	mov	r0, r4
 8001d58:	a90a      	add	r1, sp, #40	; 0x28
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d5a:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001d5c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001d60:	f003 fbf0 	bl	8005544 <HAL_DAC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2800      	cmp	r0, #0
 8001d68:	f040 81fe 	bne.w	8002168 <main+0xb48>
	hi2c1.Instance = I2C1;
 8001d6c:	4ca8      	ldr	r4, [pc, #672]	; (8002010 <main+0x9f0>)
 8001d6e:	4aa9      	ldr	r2, [pc, #676]	; (8002014 <main+0x9f4>)
	hi2c1.Init.OwnAddress1 = 0;
 8001d70:	60a0      	str	r0, [r4, #8]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001d72:	4620      	mov	r0, r4
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	e9c4 7303 	strd	r7, r3, [r4, #12]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d78:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	hi2c1.Init.Timing = 0x20404768;
 8001d80:	4ba5      	ldr	r3, [pc, #660]	; (8002018 <main+0x9f8>)
 8001d82:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001d86:	f005 fe71 	bl	8007a6c <HAL_I2C_Init>
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f040 81eb 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001d92:	4620      	mov	r0, r4
 8001d94:	f006 f8ce 	bl	8007f34 <HAL_I2CEx_ConfigAnalogFilter>
 8001d98:	4601      	mov	r1, r0
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	f040 81e4 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001da0:	4620      	mov	r0, r4
 8001da2:	f006 f919 	bl	8007fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	f040 81de 	bne.w	8002168 <main+0xb48>
	huart4.Instance = UART4;
 8001dac:	4b9b      	ldr	r3, [pc, #620]	; (800201c <main+0x9fc>)
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001dae:	f44f 7240 	mov.w	r2, #768	; 0x300
	huart4.Instance = UART4;
 8001db2:	499b      	ldr	r1, [pc, #620]	; (8002020 <main+0xa00>)
	huart4.Init.BaudRate = 115200;
 8001db4:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	6258      	str	r0, [r3, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001dba:	619a      	str	r2, [r3, #24]
	huart4.Instance = UART4;
 8001dbc:	6019      	str	r1, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001dbe:	605f      	str	r7, [r3, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	e9c3 0002 	strd	r0, r0, [r3, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	e9c3 0604 	strd	r0, r6, [r3, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc8:	e9c3 0007 	strd	r0, r0, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00b fe11 	bl	800d9f4 <HAL_UART_Init>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	f040 81c7 	bne.w	8002168 <main+0xb48>
	huart5.Instance = UART5;
 8001dda:	4b92      	ldr	r3, [pc, #584]	; (8002024 <main+0xa04>)
 8001ddc:	4992      	ldr	r1, [pc, #584]	; (8002028 <main+0xa08>)
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001dde:	4618      	mov	r0, r3
	huart5.Init.BaudRate = 115200;
 8001de0:	605f      	str	r7, [r3, #4]
	huart5.Instance = UART5;
 8001de2:	6019      	str	r1, [r3, #0]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001de4:	e9c3 2202 	strd	r2, r2, [r3, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001de8:	e9c3 2604 	strd	r2, r6, [r3, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	e9c3 2206 	strd	r2, r2, [r3, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df0:	e9c3 2208 	strd	r2, r2, [r3, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001df4:	f00b fdfe 	bl	800d9f4 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	f040 81b4 	bne.w	8002168 <main+0xb48>
	huart7.Instance = UART7;
 8001e00:	4c8a      	ldr	r4, [pc, #552]	; (800202c <main+0xa0c>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001e02:	461a      	mov	r2, r3
	huart7.Instance = UART7;
 8001e04:	f8df c260 	ldr.w	ip, [pc, #608]	; 8002068 <main+0xa48>
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4620      	mov	r0, r4
	huart7.Init.BaudRate = 115200;
 8001e0c:	6067      	str	r7, [r4, #4]
	huart7.Instance = UART7;
 8001e0e:	f8c4 c000 	str.w	ip, [r4]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001e12:	e9c4 3302 	strd	r3, r3, [r4, #8]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001e16:	e9c4 3604 	strd	r3, r6, [r4, #16]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001e22:	f00b febd 	bl	800dba0 <HAL_RS485Ex_Init>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	f040 819e 	bne.w	8002168 <main+0xb48>
	huart3.Instance = USART3;
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <main+0xa10>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	2400      	movs	r4, #0
	huart3.Instance = USART3;
 8001e30:	4880      	ldr	r0, [pc, #512]	; (8002034 <main+0xa14>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8001e32:	4622      	mov	r2, r4
 8001e34:	4621      	mov	r1, r4
	huart3.Instance = USART3;
 8001e36:	6018      	str	r0, [r3, #0]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8001e38:	4618      	mov	r0, r3
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	609c      	str	r4, [r3, #8]
	huart3.Init.BaudRate = 115200;
 8001e3c:	605f      	str	r7, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001e3e:	615e      	str	r6, [r3, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001e40:	e9c3 4403 	strd	r4, r4, [r3, #12]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	e9c3 4406 	strd	r4, r4, [r3, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e48:	e9c3 4408 	strd	r4, r4, [r3, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8001e4c:	f00b fe54 	bl	800daf8 <HAL_MultiProcessor_Init>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	f040 8189 	bne.w	8002168 <main+0xb48>
	hspi4.Instance = SPI4;
 8001e56:	4b78      	ldr	r3, [pc, #480]	; (8002038 <main+0xa18>)
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	hspi4.Instance = SPI4;
 8001e5c:	4977      	ldr	r1, [pc, #476]	; (800203c <main+0xa1c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	f44f 7682 	mov.w	r6, #260	; 0x104
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e62:	f44f 7940 	mov.w	r9, #768	; 0x300
	hspi4.Init.CRCPolynomial = 7;
 8001e66:	2707      	movs	r7, #7
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e68:	2408      	movs	r4, #8
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e6a:	6098      	str	r0, [r3, #8]
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e6c:	6318      	str	r0, [r3, #48]	; 0x30
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e6e:	619a      	str	r2, [r3, #24]
	hspi4.Instance = SPI4;
 8001e70:	6019      	str	r1, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e72:	605e      	str	r6, [r3, #4]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e74:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi4.Init.CRCPolynomial = 7;
 8001e78:	62df      	str	r7, [r3, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e7a:	635c      	str	r4, [r3, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7c:	e9c3 0004 	strd	r0, r0, [r3, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 f9ad 	bl	800a1e8 <HAL_SPI_Init>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f040 8169 	bne.w	8002168 <main+0xb48>
	hspi3.Instance = SPI3;
 8001e96:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <main+0xa20>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e98:	f44f 7800 	mov.w	r8, #512	; 0x200
	hspi3.Instance = SPI3;
 8001e9c:	4969      	ldr	r1, [pc, #420]	; (8002044 <main+0xa24>)
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e9e:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi3.Instance = SPI3;
 8001ea2:	6019      	str	r1, [r3, #0]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ea4:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea8:	e9c3 0001 	strd	r0, r0, [r3, #4]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001eac:	4618      	mov	r0, r3
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eae:	e9c3 2204 	strd	r2, r2, [r3, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb2:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi3.Init.CRCPolynomial = 7;
 8001eb6:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001eba:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001ebe:	f008 f993 	bl	800a1e8 <HAL_SPI_Init>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	f040 814f 	bne.w	8002168 <main+0xb48>
	hspi2.Instance = SPI2;
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <main+0xa28>)
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ecc:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
	hspi2.Instance = SPI2;
 8001ed0:	f8df e198 	ldr.w	lr, [pc, #408]	; 800206c <main+0xa4c>
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ed4:	2138      	movs	r1, #56	; 0x38
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ed6:	f8c3 8018 	str.w	r8, [r3, #24]
	hspi2.Instance = SPI2;
 8001eda:	f8c3 e000 	str.w	lr, [r3]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ede:	f8c3 c00c 	str.w	ip, [r3, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ee2:	61d9      	str	r1, [r3, #28]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee4:	e9c3 6001 	strd	r6, r0, [r3, #4]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee8:	e9c3 0004 	strd	r0, r0, [r3, #16]
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001eec:	4618      	mov	r0, r3
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eee:	e9c3 2208 	strd	r2, r2, [r3, #32]
	hspi2.Init.CRCPolynomial = 7;
 8001ef2:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef6:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001efa:	f008 f975 	bl	800a1e8 <HAL_SPI_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2800      	cmp	r0, #0
 8001f02:	f040 8131 	bne.w	8002168 <main+0xb48>
	hi2c4.Instance = I2C4;
 8001f06:	4c51      	ldr	r4, [pc, #324]	; (800204c <main+0xa2c>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	2601      	movs	r6, #1
	hi2c4.Instance = I2C4;
 8001f0a:	4a51      	ldr	r2, [pc, #324]	; (8002050 <main+0xa30>)
	hi2c4.Init.Timing = 0x20404768;
 8001f0c:	4f42      	ldr	r7, [pc, #264]	; (8002018 <main+0x9f8>)
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8001f0e:	4620      	mov	r0, r4
	hi2c4.Init.OwnAddress1 = 0;
 8001f10:	60a3      	str	r3, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f12:	6223      	str	r3, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8001f16:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	hi2c4.Init.Timing = 0x20404768;
 8001f1e:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8001f22:	f005 fda3 	bl	8007a6c <HAL_I2C_Init>
 8001f26:	4601      	mov	r1, r0
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f040 811d 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f006 f800 	bl	8007f34 <HAL_I2CEx_ConfigAnalogFilter>
 8001f34:	4601      	mov	r1, r0
 8001f36:	2800      	cmp	r0, #0
 8001f38:	f040 8116 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f006 f84b 	bl	8007fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f040 810f 	bne.w	8002168 <main+0xb48>
	hi2c2.Instance = I2C2;
 8001f4a:	4c42      	ldr	r4, [pc, #264]	; (8002054 <main+0xa34>)
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <main+0xa38>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001f4e:	4620      	mov	r0, r4
	hi2c2.Init.Timing = 0x20404768;
 8001f50:	6067      	str	r7, [r4, #4]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	6223      	str	r3, [r4, #32]
	hi2c2.Instance = I2C2;
 8001f54:	6022      	str	r2, [r4, #0]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f56:	e9c4 3602 	strd	r3, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8001f5a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001f62:	f005 fd83 	bl	8007a6c <HAL_I2C_Init>
 8001f66:	4601      	mov	r1, r0
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	f040 80fd 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f005 ffe0 	bl	8007f34 <HAL_I2CEx_ConfigAnalogFilter>
 8001f74:	4601      	mov	r1, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	f040 80f6 	bne.w	8002168 <main+0xb48>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f006 f82b 	bl	8007fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	f040 80f0 	bne.w	8002168 <main+0xb48>
	htim4.Instance = TIM4;
 8001f88:	4c34      	ldr	r4, [pc, #208]	; (800205c <main+0xa3c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f8a:	2300      	movs	r3, #0
	htim4.Instance = TIM4;
 8001f8c:	4834      	ldr	r0, [pc, #208]	; (8002060 <main+0xa40>)
	htim4.Init.Period = 1100;
 8001f8e:	f240 414c 	movw	r1, #1100	; 0x44c
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f92:	2280      	movs	r2, #128	; 0x80
	htim4.Init.Prescaler = 0;
 8001f94:	6063      	str	r3, [r4, #4]
	htim4.Instance = TIM4;
 8001f96:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001f98:	4620      	mov	r0, r4
	htim4.Init.Period = 1100;
 8001f9a:	60e1      	str	r1, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f9c:	61a2      	str	r2, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f9e:	9321      	str	r3, [sp, #132]	; 0x84
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001fa0:	9346      	str	r3, [sp, #280]	; 0x118
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	60a3      	str	r3, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	6123      	str	r3, [r4, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fa6:	9324      	str	r3, [sp, #144]	; 0x90
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fa8:	930e      	str	r3, [sp, #56]	; 0x38
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001faa:	9347      	str	r3, [sp, #284]	; 0x11c
 8001fac:	9348      	str	r3, [sp, #288]	; 0x120
 8001fae:	9349      	str	r3, [sp, #292]	; 0x124
 8001fb0:	934a      	str	r3, [sp, #296]	; 0x128
 8001fb2:	934b      	str	r3, [sp, #300]	; 0x12c
 8001fb4:	934c      	str	r3, [sp, #304]	; 0x130
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fb6:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fba:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001fbe:	f009 fca9 	bl	800b914 <HAL_TIM_Base_Init>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	f040 80d0 	bne.w	8002168 <main+0xb48>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001fcc:	a921      	add	r1, sp, #132	; 0x84
 8001fce:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001fd2:	f008 ffb1 	bl	800af38 <HAL_TIM_ConfigClockSource>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	f040 80c6 	bne.w	8002168 <main+0xb48>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f009 fd57 	bl	800ba90 <HAL_TIM_OC_Init>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	f040 80c0 	bne.w	8002168 <main+0xb48>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001fe8:	2630      	movs	r6, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fea:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001fec:	4620      	mov	r0, r4
 8001fee:	eb0d 0106 	add.w	r1, sp, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001ff2:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001ff4:	f00a ff5c 	bl	800ceb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	f040 80b4 	bne.w	8002168 <main+0xb48>
 8002000:	e036      	b.n	8002070 <main+0xa50>
 8002002:	bf00      	nop
 8002004:	20022014 	.word	0x20022014
 8002008:	20021ea0 	.word	0x20021ea0
 800200c:	40007400 	.word	0x40007400
 8002010:	20021b44 	.word	0x20021b44
 8002014:	40005400 	.word	0x40005400
 8002018:	20404768 	.word	0x20404768
 800201c:	20022094 	.word	0x20022094
 8002020:	40004c00 	.word	0x40004c00
 8002024:	20021d80 	.word	0x20021d80
 8002028:	40005000 	.word	0x40005000
 800202c:	200219bc 	.word	0x200219bc
 8002030:	20021a7c 	.word	0x20021a7c
 8002034:	40004800 	.word	0x40004800
 8002038:	20021eb8 	.word	0x20021eb8
 800203c:	40013400 	.word	0x40013400
 8002040:	20021cbc 	.word	0x20021cbc
 8002044:	40003c00 	.word	0x40003c00
 8002048:	20021958 	.word	0x20021958
 800204c:	200218ac 	.word	0x200218ac
 8002050:	40006000 	.word	0x40006000
 8002054:	20021bc8 	.word	0x20021bc8
 8002058:	40005800 	.word	0x40005800
 800205c:	20021a3c 	.word	0x20021a3c
 8002060:	40000800 	.word	0x40000800
 8002064:	40011400 	.word	0x40011400
 8002068:	40007800 	.word	0x40007800
 800206c:	40003800 	.word	0x40003800
	sConfigOC.Pulse = 550;
 8002070:	f240 2726 	movw	r7, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002074:	9048      	str	r0, [sp, #288]	; 0x120
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002076:	2208      	movs	r2, #8
 8002078:	a946      	add	r1, sp, #280	; 0x118
 800207a:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800207c:	9646      	str	r6, [sp, #280]	; 0x118
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207e:	934a      	str	r3, [sp, #296]	; 0x128
	sConfigOC.Pulse = 550;
 8002080:	9747      	str	r7, [sp, #284]	; 0x11c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002082:	f009 ffa5 	bl	800bfd0 <HAL_TIM_OC_ConfigChannel>
 8002086:	2800      	cmp	r0, #0
 8002088:	d16e      	bne.n	8002168 <main+0xb48>
	HAL_TIM_MspPostInit(&htim4);
 800208a:	4620      	mov	r0, r4
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800208c:	2706      	movs	r7, #6
	HAL_TIM_MspPostInit(&htim4);
 800208e:	f001 fb8f 	bl	80037b0 <HAL_TIM_MspPostInit>
  hiwdg.Instance = IWDG;
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <main+0xb4c>)
 8002094:	4936      	ldr	r1, [pc, #216]	; (8002170 <main+0xb50>)
  hiwdg.Init.Window = 4095;
 8002096:	f640 72ff 	movw	r2, #4095	; 0xfff
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800209a:	4618      	mov	r0, r3
  hiwdg.Instance = IWDG;
 800209c:	e9c3 1700 	strd	r1, r7, [r3]
  hiwdg.Init.Reload = 4095;
 80020a0:	e9c3 2202 	strd	r2, r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80020a4:	f005 ffe8 	bl	8008078 <HAL_IWDG_Init>
 80020a8:	4606      	mov	r6, r0
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d15c      	bne.n	8002168 <main+0xb48>
	HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80020ae:	4602      	mov	r2, r0
 80020b0:	4639      	mov	r1, r7
 80020b2:	2026      	movs	r0, #38	; 0x26
	osMessageQDef(myQueue01, 256, uint16_t);
 80020b4:	4c2f      	ldr	r4, [pc, #188]	; (8002174 <main+0xb54>)
	HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80020b6:	f002 fff5 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ba:	2026      	movs	r0, #38	; 0x26
 80020bc:	f003 f838 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80020c0:	4639      	mov	r1, r7
 80020c2:	4632      	mov	r2, r6
 80020c4:	2047      	movs	r0, #71	; 0x47
 80020c6:	f002 ffed 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020ca:	2047      	movs	r0, #71	; 0x47
 80020cc:	f003 f830 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80020d0:	4639      	mov	r1, r7
 80020d2:	4632      	mov	r2, r6
 80020d4:	2012      	movs	r0, #18
 80020d6:	f002 ffe5 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020da:	2012      	movs	r0, #18
 80020dc:	f003 f828 	bl	8005130 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80020e0:	4632      	mov	r2, r6
 80020e2:	4639      	mov	r1, r7
 80020e4:	2028      	movs	r0, #40	; 0x28
 80020e6:	f002 ffdd 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020ea:	2028      	movs	r0, #40	; 0x28
 80020ec:	f003 f820 	bl	8005130 <HAL_NVIC_EnableIRQ>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80020f0:	a835      	add	r0, sp, #212	; 0xd4
	osMutexDef(myMutex01);
 80020f2:	9635      	str	r6, [sp, #212]	; 0xd4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80020f4:	f00d fc9a 	bl	800fa2c <osMutexCreate>
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <main+0xb58>)
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80020fa:	2101      	movs	r1, #1
	osSemaphoreDef(ssicontent);
 80020fc:	9639      	str	r6, [sp, #228]	; 0xe4
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80020fe:	f104 0708 	add.w	r7, r4, #8
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002102:	6018      	str	r0, [r3, #0]
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002104:	a839      	add	r0, sp, #228	; 0xe4
 8002106:	f00d fce9 	bl	800fadc <osSemaphoreCreate>
 800210a:	491c      	ldr	r1, [pc, #112]	; (800217c <main+0xb5c>)
	osTimerDef(myTimer01, Callback01);
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <main+0xb60>)
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800210e:	4632      	mov	r2, r6
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002110:	6008      	str	r0, [r1, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002112:	2101      	movs	r1, #1
 8002114:	a83d      	add	r0, sp, #244	; 0xf4
	osTimerDef(myTimer01, Callback01);
 8002116:	933d      	str	r3, [sp, #244]	; 0xf4
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002118:	f00d fc76 	bl	800fa08 <osTimerCreate>
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <main+0xb64>)
 800211e:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8002120:	e894 0003 	ldmia.w	r4, {r0, r1}
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002124:	341c      	adds	r4, #28
	osMessageQDef(myQueue01, 256, uint16_t);
 8002126:	e885 0003 	stmia.w	r5, {r0, r1}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800212a:	4628      	mov	r0, r5
 800212c:	4631      	mov	r1, r6
 800212e:	f00d fd17 	bl	800fb60 <osMessageCreate>
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <main+0xb68>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002134:	ad46      	add	r5, sp, #280	; 0x118
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002136:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002138:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800213a:	683f      	ldr	r7, [r7, #0]
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800213e:	4631      	mov	r1, r6
 8002140:	a846      	add	r0, sp, #280	; 0x118
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002142:	602f      	str	r7, [r5, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002144:	f00d fc40 	bl	800f9c8 <osThreadCreate>
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <main+0xb6c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 800214a:	ad4d      	add	r5, sp, #308	; 0x134
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800214c:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	6824      	ldr	r4, [r4, #0]
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8002154:	4631      	mov	r1, r6
 8002156:	a84d      	add	r0, sp, #308	; 0x134
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002158:	602c      	str	r4, [r5, #0]
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 800215a:	f00d fc35 	bl	800f9c8 <osThreadCreate>
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <main+0xb70>)
 8002160:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8002162:	f00d fc23 	bl	800f9ac <osKernelStart>
 8002166:	e7fe      	b.n	8002166 <main+0xb46>
		Error_Handler();
 8002168:	f7ff f9da 	bl	8001520 <Error_Handler>
 800216c:	20021b94 	.word	0x20021b94
 8002170:	40003000 	.word	0x40003000
 8002174:	0801f800 	.word	0x0801f800
 8002178:	20022218 	.word	0x20022218
 800217c:	20021f7c 	.word	0x20021f7c
 8002180:	08000f09 	.word	0x08000f09
 8002184:	20022000 	.word	0x20022000
 8002188:	20022114 	.word	0x20022114
 800218c:	200218a8 	.word	0x200218a8
 8002190:	20021b90 	.word	0x20021b90

08002194 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8002194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002198:	b094      	sub	sp, #80	; 0x50
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], MAJORVERSION,MINORVERSION,MY_UID);
 800219a:	f240 37ed 	movw	r7, #1005	; 0x3ed
	MX_USB_DEVICE_Init();
 800219e:	f01a fc15 	bl	801c9cc <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], MAJORVERSION,MINORVERSION,MY_UID);
 80021a2:	2608      	movs	r6, #8
	MX_LWIP_Init();
 80021a4:	f00c faea 	bl	800e77c <MX_LWIP_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], MAJORVERSION,MINORVERSION,MY_UID);
 80021a8:	2500      	movs	r5, #0
	MX_FATFS_Init();
 80021aa:	f00c fac3 	bl	800e734 <MX_FATFS_Init>
	char stmuid[64] = { 0 };
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2100      	movs	r1, #0
 80021b2:	a804      	add	r0, sp, #16
 80021b4:	f01a fed4 	bl	801cf60 <memset>
	printf("\n\n-------------------------------------------------------------------\n");
 80021b8:	4888      	ldr	r0, [pc, #544]	; (80023dc <StartDefaultTask+0x248>)
 80021ba:	f01b fa9d 	bl	801d6f8 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, SW S/n=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], MAJORVERSION,MINORVERSION,MY_UID);
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <StartDefaultTask+0x24c>)
 80021c0:	4a88      	ldr	r2, [pc, #544]	; (80023e4 <StartDefaultTask+0x250>)
 80021c2:	4989      	ldr	r1, [pc, #548]	; (80023e8 <StartDefaultTask+0x254>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	6809      	ldr	r1, [r1, #0]
 80021ca:	4888      	ldr	r0, [pc, #544]	; (80023ec <StartDefaultTask+0x258>)
 80021cc:	9500      	str	r5, [sp, #0]
 80021ce:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80021d2:	f01b fa09 	bl	801d5e8 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 80021d6:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <StartDefaultTask+0x25c>)
 80021d8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80021dc:	075b      	lsls	r3, r3, #29
 80021de:	d41d      	bmi.n	800221c <StartDefaultTask+0x88>
		printf("LAN interface appears disconnected\n\r");
 80021e0:	4884      	ldr	r0, [pc, #528]	; (80023f4 <StartDefaultTask+0x260>)
 80021e2:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80021e4:	4d84      	ldr	r5, [pc, #528]	; (80023f8 <StartDefaultTask+0x264>)
		printf("LAN interface appears disconnected\n\r");
 80021e6:	f01b f9ff 	bl	801d5e8 <iprintf>
			osDelay(50);
 80021ea:	2032      	movs	r0, #50	; 0x32
 80021ec:	f00d fc04 	bl	800f9f8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f6:	4628      	mov	r0, r5
 80021f8:	f005 fa9e 	bl	8007738 <HAL_GPIO_WritePin>
			osDelay(50);
 80021fc:	2032      	movs	r0, #50	; 0x32
 80021fe:	f00d fbfb 	bl	800f9f8 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002208:	4628      	mov	r0, r5
 800220a:	f005 fa95 	bl	8007738 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 800220e:	3c01      	subs	r4, #1
 8002210:	d1eb      	bne.n	80021ea <StartDefaultTask+0x56>
		printf("************* REBOOTING **************\n");
 8002212:	487a      	ldr	r0, [pc, #488]	; (80023fc <StartDefaultTask+0x268>)
 8002214:	f01b fa70 	bl	801d6f8 <puts>
		rebootme();
 8002218:	f7fe fe8a 	bl	8000f30 <rebootme>
	netif = netif_default;
 800221c:	4b78      	ldr	r3, [pc, #480]	; (8002400 <StartDefaultTask+0x26c>)
 800221e:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8002474 <StartDefaultTask+0x2e0>
 8002222:	681b      	ldr	r3, [r3, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002224:	4977      	ldr	r1, [pc, #476]	; (8002404 <StartDefaultTask+0x270>)
 8002226:	4618      	mov	r0, r3
	netif = netif_default;
 8002228:	f8c8 3000 	str.w	r3, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800222c:	f012 fa44 	bl	80146b8 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8002230:	4975      	ldr	r1, [pc, #468]	; (8002408 <StartDefaultTask+0x274>)
 8002232:	f8d8 0000 	ldr.w	r0, [r8]
 8002236:	f012 fa11 	bl	801465c <netif_set_status_callback>
	statuspkt.uid = MY_UID;		// 16 bits
 800223a:	4c74      	ldr	r4, [pc, #464]	; (800240c <StartDefaultTask+0x278>)
	statuspkt.adctrigoff = TRIG_THRES;
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	t2cap[0] = 44444444;
 8002240:	4a73      	ldr	r2, [pc, #460]	; (8002410 <StartDefaultTask+0x27c>)
 8002242:	4974      	ldr	r1, [pc, #464]	; (8002414 <StartDefaultTask+0x280>)
	statuspkt.uid = MY_UID;		// 16 bits
 8002244:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
	t2cap[0] = 44444444;
 8002248:	6011      	str	r1, [r2, #0]
	statuspkt.majorversion = MAJORVERSION;
 800224a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 800224e:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
	statuspkt.udppknum = 0;
 8002252:	6025      	str	r5, [r4, #0]
	statuspkt.sysuptime = 0;
 8002254:	6665      	str	r5, [r4, #100]	; 0x64
	statuspkt.netuptime = 0;
 8002256:	66a5      	str	r5, [r4, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8002258:	66e5      	str	r5, [r4, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 800225a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 800225e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	stat = setupneo();
 8002262:	f000 fa33 	bl	80026cc <setupneo>
	if (stat != HAL_OK) {
 8002266:	2800      	cmp	r0, #0
 8002268:	d17a      	bne.n	8002360 <StartDefaultTask+0x1cc>
	initsplat();
 800226a:	f000 fe89 	bl	8002f80 <initsplat>
	printf("Setting up timers\n");
 800226e:	486a      	ldr	r0, [pc, #424]	; (8002418 <StartDefaultTask+0x284>)
 8002270:	f01b fa42 	bl	801d6f8 <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002274:	2300      	movs	r3, #0
 8002276:	4a69      	ldr	r2, [pc, #420]	; (800241c <StartDefaultTask+0x288>)
 8002278:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 800227a:	4d69      	ldr	r5, [pc, #420]	; (8002420 <StartDefaultTask+0x28c>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800227c:	6810      	ldr	r0, [r2, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f00d fe3c 	bl	800fefc <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8002284:	4867      	ldr	r0, [pc, #412]	; (8002424 <StartDefaultTask+0x290>)
 8002286:	f008 fdd1 	bl	800ae2c <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 800228a:	2200      	movs	r2, #0
 800228c:	6828      	ldr	r0, [r5, #0]
 800228e:	4611      	mov	r1, r2
 8002290:	f00a fbb8 	bl	800ca04 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8002294:	6828      	ldr	r0, [r5, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	2104      	movs	r1, #4
 800229a:	f00a fbb3 	bl	800ca04 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 800229e:	2200      	movs	r2, #0
 80022a0:	6828      	ldr	r0, [r5, #0]
 80022a2:	210c      	movs	r1, #12
 80022a4:	f00a fbae 	bl	800ca04 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80022a8:	2100      	movs	r1, #0
 80022aa:	4628      	mov	r0, r5
 80022ac:	f00a fd32 	bl	800cd14 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80022b0:	2104      	movs	r1, #4
 80022b2:	4628      	mov	r0, r5
 80022b4:	f00a fd2e 	bl	800cd14 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80022b8:	210c      	movs	r1, #12
 80022ba:	4628      	mov	r0, r5
 80022bc:	f00a fd2a 	bl	800cd14 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80022c0:	4628      	mov	r0, r5
 80022c2:	2301      	movs	r3, #1
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <StartDefaultTask+0x27c>)
 80022c6:	2108      	movs	r1, #8
 80022c8:	f00a fbfa 	bl	800cac0 <HAL_TIM_IC_Start_DMA>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d141      	bne.n	8002354 <StartDefaultTask+0x1c0>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80022d0:	6828      	ldr	r0, [r5, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	2108      	movs	r1, #8
	myip = ip.addr;
 80022d6:	4f54      	ldr	r7, [pc, #336]	; (8002428 <StartDefaultTask+0x294>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80022d8:	f00a fb94 	bl	800ca04 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80022dc:	f8d8 3000 	ldr.w	r3, [r8]
	printf("*****************************************\n");
 80022e0:	4852      	ldr	r0, [pc, #328]	; (800242c <StartDefaultTask+0x298>)
	i = 1;
 80022e2:	2501      	movs	r5, #1
	ip = dhcp->offered_ip_addr;
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	while (statuspkt.uid == MY_UID)		// not yet found new S/N from server
 80022e6:	f240 36ed 	movw	r6, #1005	; 0x3ed
	myip = ip.addr;
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	603b      	str	r3, [r7, #0]
	printf("*****************************************\n");
 80022ee:	f01b fa03 	bl	801d6f8 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	484e      	ldr	r0, [pc, #312]	; (8002430 <StartDefaultTask+0x29c>)
 80022f6:	0e0a      	lsrs	r2, r1, #24
 80022f8:	f3c1 4307 	ubfx	r3, r1, #16, #8
		printf("Try to get new S/N using http client. Try=%d\n", i++);
 80022fc:	4f4d      	ldr	r7, [pc, #308]	; (8002434 <StartDefaultTask+0x2a0>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80022fe:	9200      	str	r2, [sp, #0]
 8002300:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002304:	b2c9      	uxtb	r1, r1
 8002306:	f01b f96f 	bl	801d5e8 <iprintf>
	printf("*****************************************\n");
 800230a:	4848      	ldr	r0, [pc, #288]	; (800242c <StartDefaultTask+0x298>)
 800230c:	f01b f9f4 	bl	801d6f8 <puts>
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1],
 8002310:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <StartDefaultTask+0x24c>)
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <StartDefaultTask+0x250>)
 8002314:	a804      	add	r0, sp, #16
 8002316:	6811      	ldr	r1, [r2, #0]
 8002318:	3a08      	subs	r2, #8
 800231a:	9100      	str	r1, [sp, #0]
 800231c:	4946      	ldr	r1, [pc, #280]	; (8002438 <StartDefaultTask+0x2a4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	f01b fa85 	bl	801d830 <siprintf>
	while (statuspkt.uid == MY_UID)		// not yet found new S/N from server
 8002326:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800232a:	429e      	cmp	r6, r3
 800232c:	d11c      	bne.n	8002368 <StartDefaultTask+0x1d4>
		printf("Try to get new S/N using http client. Try=%d\n", i++);
 800232e:	4629      	mov	r1, r5
 8002330:	4638      	mov	r0, r7
 8002332:	f01b f959 	bl	801d5e8 <iprintf>
		if (i++ > 10) {
 8002336:	3502      	adds	r5, #2
		httpclient(stmuid);
 8002338:	a804      	add	r0, sp, #16
 800233a:	f002 f9eb 	bl	8004714 <httpclient>
		osDelay(5000);
 800233e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002342:	f00d fb59 	bl	800f9f8 <osDelay>
		if (i++ > 10) {
 8002346:	2d0d      	cmp	r5, #13
 8002348:	d1ed      	bne.n	8002326 <StartDefaultTask+0x192>
			printf("************* ABORTED **************\n");
 800234a:	483c      	ldr	r0, [pc, #240]	; (800243c <StartDefaultTask+0x2a8>)
 800234c:	f01b f9d4 	bl	801d6f8 <puts>
			rebootme();
 8002350:	f7fe fdee 	bl	8000f30 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8002354:	4601      	mov	r1, r0
 8002356:	483a      	ldr	r0, [pc, #232]	; (8002440 <StartDefaultTask+0x2ac>)
 8002358:	f01b f946 	bl	801d5e8 <iprintf>
		Error_Handler();
 800235c:	f7ff f8e0 	bl	8001520 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8002360:	4838      	ldr	r0, [pc, #224]	; (8002444 <StartDefaultTask+0x2b0>)
 8002362:	f01b f941 	bl	801d5e8 <iprintf>
 8002366:	e780      	b.n	800226a <StartDefaultTask+0xd6>
	osDelay(1000);
 8002368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uip = locateudp();
 800236c:	4d36      	ldr	r5, [pc, #216]	; (8002448 <StartDefaultTask+0x2b4>)
	osDelay(1000);
 800236e:	f00d fb43 	bl	800f9f8 <osDelay>
	printf("Starting httpd\n");
 8002372:	4836      	ldr	r0, [pc, #216]	; (800244c <StartDefaultTask+0x2b8>)
 8002374:	f01b f9c0 	bl	801d6f8 <puts>
 8002378:	4c35      	ldr	r4, [pc, #212]	; (8002450 <StartDefaultTask+0x2bc>)
	httpd_init();		// start the www server
 800237a:	f010 fe35 	bl	8012fe8 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 800237e:	f002 f9bd 	bl	80046fc <init_httpd_ssi>
	printf("Warming up phasors\n");
 8002382:	4834      	ldr	r0, [pc, #208]	; (8002454 <StartDefaultTask+0x2c0>)
 8002384:	f01b f9b8 	bl	801d6f8 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002388:	2108      	movs	r1, #8
 800238a:	4a33      	ldr	r2, [pc, #204]	; (8002458 <StartDefaultTask+0x2c4>)
 800238c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002390:	9100      	str	r1, [sp, #0]
 8002392:	2100      	movs	r1, #0
 8002394:	4831      	ldr	r0, [pc, #196]	; (800245c <StartDefaultTask+0x2c8>)
 8002396:	f002 ffc5 	bl	8005324 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 800239a:	4831      	ldr	r0, [pc, #196]	; (8002460 <StartDefaultTask+0x2cc>)
 800239c:	f008 fcc4 	bl	800ad28 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80023a0:	f00e fdd8 	bl	8010f54 <xTaskGetCurrentTaskHandle>
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <StartDefaultTask+0x2d0>)
 80023a6:	6018      	str	r0, [r3, #0]
	startadc();
 80023a8:	f7fe fb28 	bl	80009fc <startadc>
	uip = locateudp();
 80023ac:	f001 fe0e 	bl	8003fcc <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <StartDefaultTask+0x2d4>)
 80023b2:	2201      	movs	r2, #1
	uip = locateudp();
 80023b4:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask\n");
 80023b6:	482d      	ldr	r0, [pc, #180]	; (800246c <StartDefaultTask+0x2d8>)
	main_init_done = 1; // let lptask now main has initialised
 80023b8:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask\n");
 80023ba:	f01b f99d 	bl	801d6f8 <puts>
	while (lptask_init_done == 0)
 80023be:	e002      	b.n	80023c6 <StartDefaultTask+0x232>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 80023c0:	2064      	movs	r0, #100	; 0x64
 80023c2:	f00d fb19 	bl	800f9f8 <osDelay>
	while (lptask_init_done == 0)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f9      	beq.n	80023c0 <StartDefaultTask+0x22c>
		startudp(uip);		// should never return
 80023cc:	6828      	ldr	r0, [r5, #0]
 80023ce:	f001 fe31 	bl	8004034 <startudp>
		printf("UDP stream exited!!!\n\r");
 80023d2:	4827      	ldr	r0, [pc, #156]	; (8002470 <StartDefaultTask+0x2dc>)
 80023d4:	f01b f908 	bl	801d5e8 <iprintf>
		rebootme();
 80023d8:	f7fe fdaa 	bl	8000f30 <rebootme>
 80023dc:	0801fee8 	.word	0x0801fee8
 80023e0:	1ff0f428 	.word	0x1ff0f428
 80023e4:	1ff0f424 	.word	0x1ff0f424
 80023e8:	1ff0f420 	.word	0x1ff0f420
 80023ec:	0801ff30 	.word	0x0801ff30
 80023f0:	2002282c 	.word	0x2002282c
 80023f4:	0801ff68 	.word	0x0801ff68
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	0801ff90 	.word	0x0801ff90
 8002400:	20033a74 	.word	0x20033a74
 8002404:	08000f5d 	.word	0x08000f5d
 8002408:	08000efd 	.word	0x08000efd
 800240c:	200217f0 	.word	0x200217f0
 8002410:	20021894 	.word	0x20021894
 8002414:	02a62b1c 	.word	0x02a62b1c
 8002418:	0801ffd8 	.word	0x0801ffd8
 800241c:	20021f7c 	.word	0x20021f7c
 8002420:	20022118 	.word	0x20022118
 8002424:	20021f80 	.word	0x20021f80
 8002428:	20021c18 	.word	0x20021c18
 800242c:	08020008 	.word	0x08020008
 8002430:	08020034 	.word	0x08020034
 8002434:	08020074 	.word	0x08020074
 8002438:	0802005c 	.word	0x0802005c
 800243c:	080200a4 	.word	0x080200a4
 8002440:	0801ffec 	.word	0x0801ffec
 8002444:	0801ffb8 	.word	0x0801ffb8
 8002448:	20021c14 	.word	0x20021c14
 800244c:	080200cc 	.word	0x080200cc
 8002450:	20000858 	.word	0x20000858
 8002454:	080200dc 	.word	0x080200dc
 8002458:	080201a8 	.word	0x080201a8
 800245c:	20021ea0 	.word	0x20021ea0
 8002460:	200221d8 	.word	0x200221d8
 8002464:	2000080c 	.word	0x2000080c
 8002468:	2000085c 	.word	0x2000085c
 800246c:	080200f0 	.word	0x080200f0
 8002470:	08020104 	.word	0x08020104
 8002474:	200218a4 	.word	0x200218a4

08002478 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800247c:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	if (ch == '\n')
 800247e:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8002480:	b083      	sub	sp, #12
 8002482:	9001      	str	r0, [sp, #4]
	if (ch == '\n')
 8002484:	d009      	beq.n	800249a <__io_putchar+0x1e>
		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
	else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8002486:	230a      	movs	r3, #10
 8002488:	2201      	movs	r2, #1
 800248a:	a901      	add	r1, sp, #4
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <__io_putchar+0x34>)
 800248e:	f00b fa27 	bl	800d8e0 <HAL_UART_Transmit>
	return ch;
}
 8002492:	9801      	ldr	r0, [sp, #4]
 8002494:	b003      	add	sp, #12
 8002496:	f85d fb04 	ldr.w	pc, [sp], #4
 800249a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 800249c:	2202      	movs	r2, #2
 800249e:	4905      	ldr	r1, [pc, #20]	; (80024b4 <__io_putchar+0x38>)
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <__io_putchar+0x34>)
 80024a2:	f00b fa1d 	bl	800d8e0 <HAL_UART_Transmit>
}
 80024a6:	9801      	ldr	r0, [sp, #4]
 80024a8:	b003      	add	sp, #12
 80024aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ae:	bf00      	nop
 80024b0:	20022158 	.word	0x20022158
 80024b4:	080208bc 	.word	0x080208bc

080024b8 <calcepoch>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <calcepoch+0x40>)
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch() {
 80024ba:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80024bc:	8914      	ldrh	r4, [r2, #8]
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80024be:	f04f 35ff 	mov.w	r5, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80024c2:	7a91      	ldrb	r1, [r2, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <calcepoch+0x44>)
 80024c6:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80024ca:	4429      	add	r1, r5
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 80024cc:	621d      	str	r5, [r3, #32]

	epochtime = mktime(getgpstime());
 80024ce:	4618      	mov	r0, r3
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 80024d0:	7ad5      	ldrb	r5, [r2, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 80024d2:	615c      	str	r4, [r3, #20]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 80024d4:	6119      	str	r1, [r3, #16]
	now.tm_hour = statuspkt.NavPvt.hour;
 80024d6:	7b14      	ldrb	r4, [r2, #12]
	now.tm_min = statuspkt.NavPvt.min;
 80024d8:	7b51      	ldrb	r1, [r2, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 80024da:	7b92      	ldrb	r2, [r2, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 80024dc:	e9c3 4502 	strd	r4, r5, [r3, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 80024e0:	e9c3 2100 	strd	r2, r1, [r3]
	epochtime = mktime(getgpstime());
 80024e4:	f01a fe1e 	bl	801d124 <mktime>
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <calcepoch+0x48>)
 80024ea:	4602      	mov	r2, r0
	return ((uint32_t) epochtime + (10 * 60 * 60));		// add ten hours
#else
    return((uint32_t)epochtime);
#endif

}
 80024ec:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80024f0:	e9c3 2100 	strd	r2, r1, [r3]
}
 80024f4:	4410      	add	r0, r2
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	200217f0 	.word	0x200217f0
 80024fc:	20022220 	.word	0x20022220
 8002500:	200222a0 	.word	0x200222a0

08002504 <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8002504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002508:	4c20      	ldr	r4, [pc, #128]	; (800258c <disableNmea+0x88>)
void disableNmea() {
 800250a:	b08e      	sub	sp, #56	; 0x38
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800250c:	4f20      	ldr	r7, [pc, #128]	; (8002590 <disableNmea+0x8c>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800250e:	ae04      	add	r6, sp, #16
 8002510:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	4635      	mov	r5, r6
 8002518:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800251e:	e894 0003 	ldmia.w	r4, {r0, r1}
			{ 0xF0, 0x06 }, { 0xF0, 0x02 }, { 0xF0, 0x07 }, { 0xF0, 0x03 }, { 0xF0, 0x04 }, { 0xF0, 0x0E },
			{ 0xF0, 0x0F }, { 0xF0, 0x05 }, { 0xF0, 0x08 }, { 0xF1, 0x00 }, { 0xF1, 0x01 }, { 0xF1, 0x03 },
			{ 0xF1, 0x04 }, { 0xF1, 0x05 }, { 0xF1, 0x06 }, };

	// CFG-MSG packet buffer
	byte packet[] = { 0xB5, // sync char 1
 8002522:	f104 0208 	add.w	r2, r4, #8
 8002526:	ab01      	add	r3, sp, #4
 8002528:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800252c:	e886 0003 	stmia.w	r6, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8002530:	ca07      	ldmia	r2, {r0, r1, r2}
 8002532:	0c16      	lsrs	r6, r2, #16
 8002534:	c303      	stmia	r3!, {r0, r1}
 8002536:	f823 2b02 	strh.w	r2, [r3], #2
 800253a:	701e      	strb	r6, [r3, #0]
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 800253c:	2600      	movs	r6, #0
		packet[packetSize - 1] = 0x00;
 800253e:	2200      	movs	r2, #0
			packet[payloadOffset + j] = messages[i][j];
 8002540:	f895 c000 	ldrb.w	ip, [r5]
 8002544:	7868      	ldrb	r0, [r5, #1]
 8002546:	f10d 0106 	add.w	r1, sp, #6
		packet[packetSize - 1] = 0x00;
 800254a:	4613      	mov	r3, r2
		packet[packetSize - 2] = 0x00;
 800254c:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8002550:	f88d 600e 	strb.w	r6, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8002554:	f88d c00a 	strb.w	ip, [sp, #10]
 8002558:	f88d 000b 	strb.w	r0, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 800255c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002560:	4403      	add	r3, r0
		for (byte j = 0; j < packetSize - 4; j++) {
 8002562:	428c      	cmp	r4, r1
			packet[packetSize - 2] += packet[2 + j];
 8002564:	b2db      	uxtb	r3, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8002566:	441a      	add	r2, r3
			packet[packetSize - 2] += packet[2 + j];
 8002568:	f88d 300d 	strb.w	r3, [sp, #13]
			packet[packetSize - 1] += packet[packetSize - 2];
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f88d 200e 	strb.w	r2, [sp, #14]
		for (byte j = 0; j < packetSize - 4; j++) {
 8002572:	d1f3      	bne.n	800255c <disableNmea+0x58>
 8002574:	3502      	adds	r5, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002576:	2364      	movs	r3, #100	; 0x64
 8002578:	220b      	movs	r2, #11
 800257a:	a901      	add	r1, sp, #4
 800257c:	4638      	mov	r0, r7
 800257e:	f00b f9af 	bl	800d8e0 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8002582:	45a8      	cmp	r8, r5
 8002584:	d1db      	bne.n	800253e <disableNmea+0x3a>
		}

		sendPacket(packet, packetSize);
	}
}
 8002586:	b00e      	add	sp, #56	; 0x38
 8002588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800258c:	0801f848 	.word	0x0801f848
 8002590:	20022014 	.word	0x20022014

08002594 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8002594:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <changeFrequency+0x20>)
void changeFrequency() {
 8002598:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 800259a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259c:	466c      	mov	r4, sp
 800259e:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80025a0:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 80025a2:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80025a4:	4669      	mov	r1, sp
 80025a6:	2364      	movs	r3, #100	; 0x64
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <changeFrequency+0x24>)
 80025aa:	f00b f999 	bl	800d8e0 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 80025ae:	b004      	add	sp, #16
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	bf00      	nop
 80025b4:	0801f898 	.word	0x0801f898
 80025b8:	20022014 	.word	0x20022014

080025bc <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 80025bc:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 80025be:	4d09      	ldr	r5, [pc, #36]	; (80025e4 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 80025c0:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 80025c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c4:	ac01      	add	r4, sp, #4
 80025c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80025d0:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80025d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80025d6:	222c      	movs	r2, #44	; 0x2c
 80025d8:	a901      	add	r1, sp, #4
 80025da:	4803      	ldr	r0, [pc, #12]	; (80025e8 <disableUnnecessaryChannels+0x2c>)
 80025dc:	f00b f980 	bl	800d8e0 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 80025e0:	b00d      	add	sp, #52	; 0x34
 80025e2:	bd30      	pop	{r4, r5, pc}
 80025e4:	0801f8a8 	.word	0x0801f8a8
 80025e8:	20022014 	.word	0x20022014

080025ec <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 80025ec:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <enableNavPvt+0x24>)
void enableNavPvt() {
 80025f0:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 80025f2:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80025f4:	ac01      	add	r4, sp, #4
 80025f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f8:	c403      	stmia	r4!, {r0, r1}
 80025fa:	0c15      	lsrs	r5, r2, #16
 80025fc:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002600:	a901      	add	r1, sp, #4
 8002602:	220b      	movs	r2, #11
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8002606:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002608:	f00b f96a 	bl	800d8e0 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 800260c:	b005      	add	sp, #20
 800260e:	bd30      	pop	{r4, r5, pc}
 8002610:	0801f8d4 	.word	0x0801f8d4
 8002614:	20022014 	.word	0x20022014

08002618 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8002618:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 800261a:	4d09      	ldr	r5, [pc, #36]	; (8002640 <enableNaTP5+0x28>)
void enableNaTP5() {
 800261c:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 800261e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002620:	466c      	mov	r4, sp
 8002622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002628:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002630:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002634:	4669      	mov	r1, sp
 8002636:	4803      	ldr	r0, [pc, #12]	; (8002644 <enableNaTP5+0x2c>)
 8002638:	f00b f952 	bl	800d8e0 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 800263c:	b00b      	add	sp, #44	; 0x2c
 800263e:	bd30      	pop	{r4, r5, pc}
 8002640:	0801f8e0 	.word	0x0801f8e0
 8002644:	20022014 	.word	0x20022014

08002648 <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8002648:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 800264a:	4d1c      	ldr	r5, [pc, #112]	; (80026bc <IsPacketReady+0x74>)
 800264c:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 800264e:	2b03      	cmp	r3, #3
 8002650:	d809      	bhi.n	8002666 <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 8002652:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <IsPacketReady+0x78>)
 8002654:	4619      	mov	r1, r3
 8002656:	5cd2      	ldrb	r2, [r2, r3]
 8002658:	4282      	cmp	r2, r0
 800265a:	d00e      	beq.n	800267a <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 800265c:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 800265e:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8002660:	70eb      	strb	r3, [r5, #3]
}
 8002662:	bc70      	pop	{r4, r5, r6}
 8002664:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 8002666:	2b5b      	cmp	r3, #91	; 0x5b
 8002668:	d8f9      	bhi.n	800265e <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	4e15      	ldr	r6, [pc, #84]	; (80026c4 <IsPacketReady+0x7c>)
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 8002672:	2a5c      	cmp	r2, #92	; 0x5c
 8002674:	d006      	beq.n	8002684 <IsPacketReady+0x3c>
 8002676:	4613      	mov	r3, r2
 8002678:	e7f1      	b.n	800265e <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 800267a:	3301      	adds	r3, #1
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <IsPacketReady+0x7c>)
 800267e:	b2db      	uxtb	r3, r3
 8002680:	5442      	strb	r2, [r0, r1]
 8002682:	e7ec      	b.n	800265e <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 8002684:	2300      	movs	r3, #0
 8002686:	1c71      	adds	r1, r6, #1
 8002688:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 800268c:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 800268e:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 8002690:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002694:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8002696:	428c      	cmp	r4, r1
		CK_A = CK_A + PACKETstore[i];
 8002698:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 800269a:	441a      	add	r2, r3
 800269c:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 800269e:	d1f7      	bne.n	8002690 <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 80026a0:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d1d9      	bne.n	800265c <IsPacketReady+0x14>
 80026a8:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d1d5      	bne.n	800265c <IsPacketReady+0x14>
					gpsgood = 1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <IsPacketReady+0x80>)
					return true;
 80026b4:	4618      	mov	r0, r3
					gpsgood = 1;
 80026b6:	6013      	str	r3, [r2, #0]
					return true;
 80026b8:	e7d3      	b.n	8002662 <IsPacketReady+0x1a>
 80026ba:	bf00      	nop
 80026bc:	200002a4 	.word	0x200002a4
 80026c0:	080208f4 	.word	0x080208f4
 80026c4:	200222ac 	.word	0x200222ac
 80026c8:	20000874 	.word	0x20000874

080026cc <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 80026cc:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 80026ce:	f7ff ff19 	bl	8002504 <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	4912      	ldr	r1, [pc, #72]	; (8002720 <setupneo+0x54>)
 80026d6:	4813      	ldr	r0, [pc, #76]	; (8002724 <setupneo+0x58>)
 80026d8:	f00a fc90 	bl	800cffc <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 80026dc:	4604      	mov	r4, r0
 80026de:	b9d0      	cbnz	r0, 8002716 <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 80026e0:	4811      	ldr	r0, [pc, #68]	; (8002728 <setupneo+0x5c>)
 80026e2:	f01a ff81 	bl	801d5e8 <iprintf>

	changeFrequency();
 80026e6:	f7ff ff55 	bl	8002594 <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <setupneo+0x60>)
 80026ec:	f01b f804 	bl	801d6f8 <puts>
	disableUnnecessaryChannels();
 80026f0:	f7ff ff64 	bl	80025bc <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 80026f4:	480e      	ldr	r0, [pc, #56]	; (8002730 <setupneo+0x64>)
 80026f6:	f01a ff77 	bl	801d5e8 <iprintf>
	enableNavPvt();
 80026fa:	f7ff ff77 	bl	80025ec <enableNavPvt>
	osDelay(100);
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f00d f97a 	bl	800f9f8 <osDelay>
// Enable Time pulse
	enableNaTP5();
 8002704:	f7ff ff88 	bl	8002618 <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 800270a:	480b      	ldr	r0, [pc, #44]	; (8002738 <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800270c:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 800270e:	f01a ff6b 	bl	801d5e8 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8002712:	4620      	mov	r0, r4
 8002714:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <setupneo+0x70>)
 8002718:	f01a ffee 	bl	801d6f8 <puts>
}
 800271c:	4620      	mov	r0, r4
 800271e:	bd10      	pop	{r4, pc}
 8002720:	20000878 	.word	0x20000878
 8002724:	20022014 	.word	0x20022014
 8002728:	08020918 	.word	0x08020918
 800272c:	08020948 	.word	0x08020948
 8002730:	08020970 	.word	0x08020970
 8002734:	200217f0 	.word	0x200217f0
 8002738:	08020994 	.word	0x08020994
 800273c:	080208f8 	.word	0x080208f8

08002740 <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 8002740:	6802      	ldr	r2, [r0, #0]
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_UART_RxCpltCallback+0x5c>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d002      	beq.n	800274e <HAL_UART_RxCpltCallback+0xe>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		printf("USART unknown uart int\n");
 8002748:	4815      	ldr	r0, [pc, #84]	; (80027a0 <HAL_UART_RxCpltCallback+0x60>)
 800274a:	f01a bfd5 	b.w	801d6f8 <puts>
		data = rxdatabuf[0];
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_UART_RxCpltCallback+0x64>)
		flag = 1;
 8002750:	2101      	movs	r1, #1
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_UART_RxCpltCallback+0x68>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002754:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4c14      	ldr	r4, [pc, #80]	; (80027ac <HAL_UART_RxCpltCallback+0x6c>)
		if (IsPacketReady(data)) {
 800275a:	4618      	mov	r0, r3
		flag = 1;
 800275c:	6011      	str	r1, [r2, #0]
		data = rxdatabuf[0];
 800275e:	7023      	strb	r3, [r4, #0]
		if (IsPacketReady(data)) {
 8002760:	f7ff ff72 	bl	8002648 <IsPacketReady>
 8002764:	b180      	cbz	r0, 8002788 <HAL_UART_RxCpltCallback+0x48>
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_UART_RxCpltCallback+0x70>)
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_UART_RxCpltCallback+0x74>)
 800276a:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800276e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8002772:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8002774:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8002778:	d1f9      	bne.n	800276e <HAL_UART_RxCpltCallback+0x2e>
			if (statuspkt.NavPvt.flags & 1) { // locked
 800277a:	4c0f      	ldr	r4, [pc, #60]	; (80027b8 <HAL_UART_RxCpltCallback+0x78>)
 800277c:	7e63      	ldrb	r3, [r4, #25]
 800277e:	f013 0301 	ands.w	r3, r3, #1
 8002782:	d102      	bne.n	800278a <HAL_UART_RxCpltCallback+0x4a>
				gpslocked = 0;
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_UART_RxCpltCallback+0x7c>)
 8002786:	7013      	strb	r3, [r2, #0]
	}
}
 8002788:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 800278a:	f7ff fe95 	bl	80024b8 <calcepoch>
				gpslocked = 1;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_UART_RxCpltCallback+0x7c>)
 8002790:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8002792:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 8002796:	701a      	strb	r2, [r3, #0]
}
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	40011400 	.word	0x40011400
 80027a0:	080208dc 	.word	0x080208dc
 80027a4:	20000878 	.word	0x20000878
 80027a8:	20000870 	.word	0x20000870
 80027ac:	200222a8 	.word	0x200222a8
 80027b0:	200222b1 	.word	0x200222b1
 80027b4:	200217f3 	.word	0x200217f3
 80027b8:	200217f0 	.word	0x200217f0
 80027bc:	200008b5 	.word	0x200008b5

080027c0 <HAL_UART_ErrorCallback>:

HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80027c0:	4603      	mov	r3, r0
	HAL_StatusTypeDef stat;
	uint8_t ch;

	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
 80027c2:	4802      	ldr	r0, [pc, #8]	; (80027cc <HAL_UART_ErrorCallback+0xc>)
 80027c4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80027c6:	f01a bf0f 	b.w	801d5e8 <iprintf>
 80027ca:	bf00      	nop
 80027cc:	080208c0 	.word	0x080208c0

080027d0 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80027d6:	4c1c      	ldr	r4, [pc, #112]	; (8002848 <cycleleds+0x78>)
 80027d8:	ae01      	add	r6, sp, #4
 80027da:	f10d 070e 	add.w	r7, sp, #14
	const uint16_t pattern[] = {
 80027de:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e0:	4633      	mov	r3, r6
 80027e2:	4635      	mov	r5, r6
 80027e4:	c303      	stmia	r3!, {r0, r1}
 80027e6:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80027e8:	f835 1b02 	ldrh.w	r1, [r5], #2
 80027ec:	2200      	movs	r2, #0
 80027ee:	4620      	mov	r0, r4
 80027f0:	f004 ffa2 	bl	8007738 <HAL_GPIO_WritePin>
		osDelay(140);
 80027f4:	208c      	movs	r0, #140	; 0x8c
 80027f6:	f00d f8ff 	bl	800f9f8 <osDelay>
	for (i = 0; i < 5; i++) {
 80027fa:	42bd      	cmp	r5, r7
 80027fc:	d1f4      	bne.n	80027e8 <cycleleds+0x18>
	}
	osDelay(600);
 80027fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002802:	4634      	mov	r4, r6
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8002804:	4f10      	ldr	r7, [pc, #64]	; (8002848 <cycleleds+0x78>)
	osDelay(600);
 8002806:	f00d f8f7 	bl	800f9f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800280a:	f834 1b02 	ldrh.w	r1, [r4], #2
 800280e:	2201      	movs	r2, #1
 8002810:	4638      	mov	r0, r7
 8002812:	f004 ff91 	bl	8007738 <HAL_GPIO_WritePin>
		osDelay(140);
 8002816:	208c      	movs	r0, #140	; 0x8c
 8002818:	f00d f8ee 	bl	800f9f8 <osDelay>
	for (i = 0; i < 5; i++) {
 800281c:	42ac      	cmp	r4, r5
 800281e:	d1f4      	bne.n	800280a <cycleleds+0x3a>
	}
	osDelay(500);
 8002820:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8002824:	4d08      	ldr	r5, [pc, #32]	; (8002848 <cycleleds+0x78>)
	osDelay(500);
 8002826:	f00d f8e7 	bl	800f9f8 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800282a:	f836 1b02 	ldrh.w	r1, [r6], #2
 800282e:	2200      	movs	r2, #0
 8002830:	4628      	mov	r0, r5
 8002832:	f004 ff81 	bl	8007738 <HAL_GPIO_WritePin>
		osDelay(140);
 8002836:	208c      	movs	r0, #140	; 0x8c
 8002838:	f00d f8de 	bl	800f9f8 <osDelay>
	for (i = 0; i < 5; i++) {
 800283c:	42b4      	cmp	r4, r6
 800283e:	d1f4      	bne.n	800282a <cycleleds+0x5a>
	}
}
 8002840:	b005      	add	sp, #20
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002844:	0801f908 	.word	0x0801f908
 8002848:	40020c00 	.word	0x40020c00

0800284c <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4604      	mov	r4, r0
	osDelay(5);
 8002850:	2005      	movs	r0, #5
 8002852:	f00d f8d1 	bl	800f9f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8002856:	2201      	movs	r2, #1
 8002858:	2104      	movs	r1, #4
 800285a:	4814      	ldr	r0, [pc, #80]	; (80028ac <setpgagain+0x60>)
 800285c:	f004 ff6c 	bl	8007738 <HAL_GPIO_WritePin>
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 8002860:	f004 0407 	and.w	r4, r4, #7
	osDelay(5);
 8002864:	2005      	movs	r0, #5
	pgagain = 0x4000 | (gain & 0x07);
 8002866:	4d12      	ldr	r5, [pc, #72]	; (80028b0 <setpgagain+0x64>)
	osDelay(5);
 8002868:	f00d f8c6 	bl	800f9f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800286c:	2200      	movs	r2, #0
 800286e:	2104      	movs	r1, #4
 8002870:	480e      	ldr	r0, [pc, #56]	; (80028ac <setpgagain+0x60>)
 8002872:	f004 ff61 	bl	8007738 <HAL_GPIO_WritePin>
	pgagain = 0x4000 | (gain & 0x07);
 8002876:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	osDelay(5);
 800287a:	2005      	movs	r0, #5
 800287c:	f00d f8bc 	bl	800f9f8 <osDelay>
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8002880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002884:	2201      	movs	r2, #1
 8002886:	4629      	mov	r1, r5
 8002888:	480a      	ldr	r0, [pc, #40]	; (80028b4 <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 800288a:	802c      	strh	r4, [r5, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 800288c:	f007 fde6 	bl	800a45c <HAL_SPI_Transmit>
 8002890:	b110      	cbz	r0, 8002898 <setpgagain+0x4c>
		printf("setpgagain: SPI Error\n");
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <setpgagain+0x6c>)
 8002894:	f01a ff30 	bl	801d6f8 <puts>
	}
	osDelay(5);
 8002898:	2005      	movs	r0, #5
 800289a:	f00d f8ad 	bl	800f9f8 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800289e:	2201      	movs	r2, #1
 80028a0:	2104      	movs	r1, #4
 80028a2:	4802      	ldr	r0, [pc, #8]	; (80028ac <setpgagain+0x60>)
}
 80028a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80028a8:	f004 bf46 	b.w	8007738 <HAL_GPIO_WritePin>
 80028ac:	40021800 	.word	0x40021800
 80028b0:	200002b2 	.word	0x200002b2
 80028b4:	20021958 	.word	0x20021958
 80028b8:	08020cb8 	.word	0x08020cb8

080028bc <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 80028bc:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80028be:	2201      	movs	r2, #1
int initpga() {
 80028c0:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80028c2:	2104      	movs	r1, #4
 80028c4:	482b      	ldr	r0, [pc, #172]	; (8002974 <initpga+0xb8>)
 80028c6:	f004 ff37 	bl	8007738 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 80028ca:	2200      	movs	r2, #0
 80028cc:	2104      	movs	r1, #4
 80028ce:	4829      	ldr	r0, [pc, #164]	; (8002974 <initpga+0xb8>)
 80028d0:	f004 ff32 	bl	8007738 <HAL_GPIO_WritePin>
	osDelay(50);
 80028d4:	2032      	movs	r0, #50	; 0x32
 80028d6:	f00d f88f 	bl	800f9f8 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80028da:	2201      	movs	r2, #1
 80028dc:	2104      	movs	r1, #4
 80028de:	4825      	ldr	r0, [pc, #148]	; (8002974 <initpga+0xb8>)
 80028e0:	f004 ff2a 	bl	8007738 <HAL_GPIO_WritePin>
	osDelay(50);
 80028e4:	2032      	movs	r0, #50	; 0x32
 80028e6:	f00d f887 	bl	800f9f8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80028ea:	2200      	movs	r2, #0
 80028ec:	2104      	movs	r1, #4
 80028ee:	4821      	ldr	r0, [pc, #132]	; (8002974 <initpga+0xb8>)
 80028f0:	f004 ff22 	bl	8007738 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 80028f4:	2400      	movs	r4, #0
 80028f6:	a904      	add	r1, sp, #16
 80028f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fc:	2201      	movs	r2, #1
 80028fe:	481e      	ldr	r0, [pc, #120]	; (8002978 <initpga+0xbc>)
 8002900:	f821 4d0c 	strh.w	r4, [r1, #-12]!
 8002904:	f007 fdaa 	bl	800a45c <HAL_SPI_Transmit>
 8002908:	bb70      	cbnz	r0, 8002968 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800290a:	9002      	str	r0, [sp, #8]
 800290c:	9b02      	ldr	r3, [sp, #8]
 800290e:	2b31      	cmp	r3, #49	; 0x31
 8002910:	dc05      	bgt.n	800291e <initpga+0x62>
 8002912:	9b02      	ldr	r3, [sp, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	2b31      	cmp	r3, #49	; 0x31
 800291c:	ddf9      	ble.n	8002912 <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 800291e:	2201      	movs	r2, #1
 8002920:	2104      	movs	r1, #4
 8002922:	4814      	ldr	r0, [pc, #80]	; (8002974 <initpga+0xb8>)
 8002924:	f004 ff08 	bl	8007738 <HAL_GPIO_WritePin>
	osDelay(50);
 8002928:	2032      	movs	r0, #50	; 0x32
 800292a:	f00d f865 	bl	800f9f8 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800292e:	2200      	movs	r2, #0
 8002930:	2104      	movs	r1, #4
 8002932:	4810      	ldr	r0, [pc, #64]	; (8002974 <initpga+0xb8>)
 8002934:	f004 ff00 	bl	8007738 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 8002938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293c:	2201      	movs	r2, #1
 800293e:	490f      	ldr	r1, [pc, #60]	; (800297c <initpga+0xc0>)
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <initpga+0xbc>)
 8002942:	f007 fd8b 	bl	800a45c <HAL_SPI_Transmit>
 8002946:	b978      	cbnz	r0, 8002968 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8002948:	9003      	str	r0, [sp, #12]
 800294a:	9b03      	ldr	r3, [sp, #12]
 800294c:	2b31      	cmp	r3, #49	; 0x31
 800294e:	dc05      	bgt.n	800295c <initpga+0xa0>
 8002950:	9b03      	ldr	r3, [sp, #12]
 8002952:	3301      	adds	r3, #1
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	9b03      	ldr	r3, [sp, #12]
 8002958:	2b31      	cmp	r3, #49	; 0x31
 800295a:	ddf9      	ble.n	8002950 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff ff75 	bl	800284c <setpgagain>
	return (0);
 8002962:	2000      	movs	r0, #0
}
 8002964:	b004      	add	sp, #16
 8002966:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <initpga+0xc4>)
 800296a:	f01a fe3d 	bl	801d5e8 <iprintf>
		return (1);
 800296e:	2001      	movs	r0, #1
}
 8002970:	b004      	add	sp, #16
 8002972:	bd10      	pop	{r4, pc}
 8002974:	40021800 	.word	0x40021800
 8002978:	20021958 	.word	0x20021958
 800297c:	08020cd0 	.word	0x08020cd0
 8002980:	08020adc 	.word	0x08020adc

08002984 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 8002984:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8002986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 800298a:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800298c:	2301      	movs	r3, #1
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <initdualmux+0x2c>)
 8002990:	9000      	str	r0, [sp, #0]
 8002992:	2188      	movs	r1, #136	; 0x88
 8002994:	4807      	ldr	r0, [pc, #28]	; (80029b4 <initdualmux+0x30>)
 8002996:	f005 f94d 	bl	8007c34 <HAL_I2C_Master_Transmit>
 800299a:	b910      	cbnz	r0, 80029a2 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 800299c:	b003      	add	sp, #12
 800299e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <initdualmux+0x34>)
}
 80029a4:	b003      	add	sp, #12
 80029a6:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 80029aa:	f01a be1d 	b.w	801d5e8 <iprintf>
 80029ae:	bf00      	nop
 80029b0:	200002b0 	.word	0x200002b0
 80029b4:	20021b44 	.word	0x20021b44
 80029b8:	08020ac0 	.word	0x08020ac0
 80029bc:	00000000 	.word	0x00000000

080029c0 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 80029c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c4:	ed2d 8b04 	vpush	{d8-d9}
 80029c8:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 80029ca:	2112      	movs	r1, #18
 80029cc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80029d0:	2302      	movs	r3, #2
 80029d2:	aa10      	add	r2, sp, #64	; 0x40
 80029d4:	4886      	ldr	r0, [pc, #536]	; (8002bf0 <getpressure115+0x230>)
 80029d6:	f822 1d2c 	strh.w	r1, [r2, #-44]!
 80029da:	21c0      	movs	r1, #192	; 0xc0
 80029dc:	9500      	str	r5, [sp, #0]
 80029de:	f005 f929 	bl	8007c34 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 80029e2:	4607      	mov	r7, r0
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f040 80e2 	bne.w	8002bae <getpressure115+0x1ee>
		return (result);
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
 80029ea:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 80029ec:	2004      	movs	r0, #4
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 80029ee:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8002bf0 <getpressure115+0x230>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80029f2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8002c30 <getpressure115+0x270>
	osDelay(4);		// conversion time max 3mS
 80029f6:	f00c ffff 	bl	800f9f8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 80029fa:	aa0e      	add	r2, sp, #56	; 0x38
 80029fc:	2301      	movs	r3, #1
 80029fe:	9502      	str	r5, [sp, #8]
 8002a00:	4640      	mov	r0, r8
 8002a02:	1911      	adds	r1, r2, r4
 8002a04:	b2a2      	uxth	r2, r4
 8002a06:	e9cd 1300 	strd	r1, r3, [sp]
 8002a0a:	21c1      	movs	r1, #193	; 0xc1
 8002a0c:	f005 f9b8 	bl	8007d80 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002a10:	4606      	mov	r6, r0
 8002a12:	2800      	cmp	r0, #0
 8002a14:	f040 80bd 	bne.w	8002b92 <getpressure115+0x1d2>
	for (i = 0; i < 4; i++) {
 8002a18:	3401      	adds	r4, #1
 8002a1a:	2c04      	cmp	r4, #4
 8002a1c:	d1ed      	bne.n	80029fa <getpressure115+0x3a>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 8002a1e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
	pr = (data[0] * 256 + data[1]) >> 6;
 8002a22:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	tr = (data[2] * 256 + data[3]) >> 6;
 8002a26:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 8002a2a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 8002a2e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a32:	4d70      	ldr	r5, [pc, #448]	; (8002bf4 <getpressure115+0x234>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8002a34:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a38:	4c6f      	ldr	r4, [pc, #444]	; (8002bf8 <getpressure115+0x238>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8002a3a:	1192      	asrs	r2, r2, #6
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a3c:	496f      	ldr	r1, [pc, #444]	; (8002bfc <getpressure115+0x23c>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8002a3e:	099b      	lsrs	r3, r3, #6

	printf("Comp: Press = %f\n", p);
 8002a40:	486f      	ldr	r0, [pc, #444]	; (8002c00 <getpressure115+0x240>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8002a42:	ee08 2a10 	vmov	s16, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a46:	4a6f      	ldr	r2, [pc, #444]	; (8002c04 <getpressure115+0x244>)
	p = pr;
 8002a48:	ee07 3a90 	vmov	s15, r3
	t = tr;
 8002a4c:	eeb8 6b48 	vcvt.f64.u32	d6, s16
	p = pr;
 8002a50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 8002a54:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 8002a58:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a5c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8002a60:	ed95 4b00 	vldr	d4, [r5]
 8002a64:	ed94 6b00 	vldr	d6, [r4]
 8002a68:	ed9d 3b08 	vldr	d3, [sp, #32]
 8002a6c:	ed91 7b00 	vldr	d7, [r1]
 8002a70:	eea4 6b05 	vfma.f64	d6, d4, d5

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
	pressure = (uint32_t) n;
 8002a74:	4d64      	ldr	r5, [pc, #400]	; (8002c08 <getpressure115+0x248>)

	printf("\npressure = %d.%02d  ", pressure, pressfrac);

	t = tr * -0.1706 + 112.27; //C
	temperature = t;
	tempfrac = (t - temperature) * 100;
 8002a76:	4c65      	ldr	r4, [pc, #404]	; (8002c0c <getpressure115+0x24c>)
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a78:	ed92 4b00 	vldr	d4, [r2]
 8002a7c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002a80:	ed9f 9b4f 	vldr	d9, [pc, #316]	; 8002bc0 <getpressure115+0x200>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8002a84:	eea6 7b03 	vfma.f64	d7, d6, d3
 8002a88:	eea4 7b05 	vfma.f64	d7, d4, d5
 8002a8c:	ed8d 7b08 	vstr	d7, [sp, #32]
	printf("Comp: Press = %f\n", p);
 8002a90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002a94:	f01a fda8 	bl	801d5e8 <iprintf>
	printf("kPA Press = %f\n", p);
 8002a98:	485d      	ldr	r0, [pc, #372]	; (8002c10 <getpressure115+0x250>)
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8002a9a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8002a9e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8002bc8 <getpressure115+0x208>
 8002aa2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8002bd0 <getpressure115+0x210>
 8002aa6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002aaa:	ed8d 7b08 	vstr	d7, [sp, #32]
	printf("kPA Press = %f\n", p);
 8002aae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ab2:	f01a fd99 	bl	801d5e8 <iprintf>
	ffrac = modf(p, &n);
 8002ab6:	a80c      	add	r0, sp, #48	; 0x30
 8002ab8:	ed9d 0b08 	vldr	d0, [sp, #32]
 8002abc:	f01a fe60 	bl	801d780 <modf>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002ac0:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <getpressure115+0x254>)
	printf("\npressure = %d.%02d  ", pressure, pressfrac);
 8002ac2:	4855      	ldr	r0, [pc, #340]	; (8002c18 <getpressure115+0x258>)
	ffrac = modf(p, &n);
 8002ac4:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 8002ac8:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002acc:	ed9d 7b06 	vldr	d7, [sp, #24]
	pressure = (uint32_t) n;
 8002ad0:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002ad4:	ee27 7b09 	vmul.f64	d7, d7, d9
	pressure = (uint32_t) n;
 8002ad8:	ee16 1a90 	vmov	r1, s13
 8002adc:	edc5 6a00 	vstr	s13, [r5]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002ae0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ae4:	ee17 2a90 	vmov	r2, s15
 8002ae8:	edc3 7a00 	vstr	s15, [r3]
	printf("\npressure = %d.%02d  ", pressure, pressfrac);
 8002aec:	f01a fd7c 	bl	801d5e8 <iprintf>
	t = tr * -0.1706 + 112.27; //C
 8002af0:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
	temperature = t;
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <getpressure115+0x25c>)

	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
 8002af6:	484a      	ldr	r0, [pc, #296]	; (8002c20 <getpressure115+0x260>)
	t = tr * -0.1706 + 112.27; //C
 8002af8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002bd8 <getpressure115+0x218>
 8002afc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8002be0 <getpressure115+0x220>
 8002b00:	eea8 7b06 	vfma.f64	d7, d8, d6
 8002b04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
	temperature = t;
 8002b08:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 8002b0c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
	temperature = t;
 8002b10:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	tempfrac = (t - temperature) * 100;
 8002b14:	eeb8 5b46 	vcvt.f64.u32	d5, s12
	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
 8002b18:	ee16 1a10 	vmov	r1, s12
	temperature = t;
 8002b1c:	ed83 6a00 	vstr	s12, [r3]
	tempfrac = (t - temperature) * 100;
 8002b20:	ee37 7b45 	vsub.f64	d7, d7, d5
 8002b24:	ee27 7b09 	vmul.f64	d7, d7, d9
 8002b28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
 8002b2c:	ee17 2a90 	vmov	r2, s15
	tempfrac = (t - temperature) * 100;
 8002b30:	edc4 7a00 	vstr	s15, [r4]
	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
 8002b34:	f01a fd58 	bl	801d5e8 <iprintf>
	printf("\ntemperature2 = %f  ", t);
 8002b38:	483a      	ldr	r0, [pc, #232]	; (8002c24 <getpressure115+0x264>)
 8002b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b3e:	f01a fd53 	bl	801d5e8 <iprintf>

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002b42:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
	tempfrac = tempfrac * 100;	// now 10,000
 8002b46:	6821      	ldr	r1, [r4, #0]
 8002b48:	2364      	movs	r3, #100	; 0x64
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002b4a:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <getpressure115+0x268>)
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 8002b4c:	4638      	mov	r0, r7
	tempfrac = tempfrac * 100;	// now 10,000
 8002b4e:	fb03 f301 	mul.w	r3, r3, r1
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002b52:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8002b56:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8002be8 <getpressure115+0x228>
 8002b5a:	ed9d 7b08 	vldr	d7, [sp, #32]
 8002b5e:	ee26 6b04 	vmul.f64	d6, d6, d4
	tempfrac = tempfrac * 100;	// now 10,000
 8002b62:	6023      	str	r3, [r4, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8002b64:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b68:	feb8 6b46 	vrinta.f64	d6, d6
 8002b6c:	eefc 6bc6 	vcvt.u32.f64	s13, d6
 8002b70:	feb8 7b47 	vrinta.f64	d7, d7
 8002b74:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8002b78:	ee16 3a90 	vmov	r3, s13
 8002b7c:	ee17 1a10 	vmov	r1, s14
 8002b80:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002b88:	b011      	add	sp, #68	; 0x44
 8002b8a:	ecbd 8b04 	vpop	{d8-d9}
 8002b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8002b92:	4601      	mov	r1, r0
 8002b94:	4648      	mov	r0, r9
 8002b96:	f01a fd27 	bl	801d5e8 <iprintf>
			if (i == 3)
 8002b9a:	2c03      	cmp	r4, #3
 8002b9c:	f47f af3c 	bne.w	8002a18 <getpressure115+0x58>
 8002ba0:	4637      	mov	r7, r6
}
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	b011      	add	sp, #68	; 0x44
 8002ba6:	ecbd 8b04 	vpop	{d8-d9}
 8002baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8002bae:	481f      	ldr	r0, [pc, #124]	; (8002c2c <getpressure115+0x26c>)
 8002bb0:	f01a fd1a 	bl	801d5e8 <iprintf>
}
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	b011      	add	sp, #68	; 0x44
 8002bb8:	ecbd 8b04 	vpop	{d8-d9}
 8002bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	40590000 	.word	0x40590000
 8002bc8:	04411044 	.word	0x04411044
 8002bcc:	3fb04411 	.word	0x3fb04411
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	40490000 	.word	0x40490000
 8002bd8:	86594af5 	.word	0x86594af5
 8002bdc:	bfc5d638 	.word	0xbfc5d638
 8002be0:	ae147ae1 	.word	0xae147ae1
 8002be4:	405c1147 	.word	0x405c1147
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40af4000 	.word	0x40af4000
 8002bf0:	20021b44 	.word	0x20021b44
 8002bf4:	20000898 	.word	0x20000898
 8002bf8:	20000888 	.word	0x20000888
 8002bfc:	20000880 	.word	0x20000880
 8002c00:	08020a04 	.word	0x08020a04
 8002c04:	20000890 	.word	0x20000890
 8002c08:	20022310 	.word	0x20022310
 8002c0c:	20022308 	.word	0x20022308
 8002c10:	08020a18 	.word	0x08020a18
 8002c14:	20022314 	.word	0x20022314
 8002c18:	08020a28 	.word	0x08020a28
 8002c1c:	2002230c 	.word	0x2002230c
 8002c20:	08020a40 	.word	0x08020a40
 8002c24:	08020a58 	.word	0x08020a58
 8002c28:	200217f0 	.word	0x200217f0
 8002c2c:	080209bc 	.word	0x080209bc
 8002c30:	080209e0 	.word	0x080209e0

08002c34 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8002c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8002c38:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
HAL_StatusTypeDef initpressure115(void) {
 8002c3c:	b086      	sub	sp, #24

//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
 8002c3e:	2400      	movs	r4, #0
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8002c40:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002c44:	2701      	movs	r7, #1
 8002c46:	4e33      	ldr	r6, [pc, #204]	; (8002d14 <initpressure115+0xe0>)
		data[i] = 0x5A;
 8002c48:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8002c4c:	ab04      	add	r3, sp, #16
 8002c4e:	1d22      	adds	r2, r4, #4
 8002c50:	21c0      	movs	r1, #192	; 0xc0
 8002c52:	4630      	mov	r0, r6
 8002c54:	4423      	add	r3, r4
 8002c56:	b292      	uxth	r2, r2
 8002c58:	3401      	adds	r4, #1
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8002c62:	f005 f88d 	bl	8007d80 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002c66:	4605      	mov	r5, r0
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d142      	bne.n	8002cf2 <initpressure115+0xbe>
	for (i = 0; i < 8; i++) {
 8002c6c:	2c08      	cmp	r4, #8
 8002c6e:	d1ed      	bne.n	8002c4c <initpressure115+0x18>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8002c70:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002c74:	2c5a      	cmp	r4, #90	; 0x5a
 8002c76:	d044      	beq.n	8002d02 <initpressure115+0xce>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8002c78:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 8002c7c:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 8002c80:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 8002c84:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 8002c88:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 8002c8c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 8002c90:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8002c94:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 8002c98:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 8002c9c:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 8002c9e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 8002ca2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 8002ca6:	ee04 0a10 	vmov	s8, r0
 8002caa:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 8002cae:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8002cb0:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 8002cb4:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 8002cb6:	4818      	ldr	r0, [pc, #96]	; (8002d18 <initpressure115+0xe4>)
	b2 = (double) b2co / 16384;
 8002cb8:	ee05 1a10 	vmov	s10, r1
 8002cbc:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <initpressure115+0xe8>)
	c12 /= (double) 4194304.0;
 8002cc2:	ee06 2a10 	vmov	s12, r2
 8002cc6:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <initpressure115+0xec>)
	a0 = (double) a0co / 8;
 8002ccc:	ee07 3a10 	vmov	s14, r3
 8002cd0:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <initpressure115+0xf0>)
	b1 = (double) b1co / 8192;
 8002cd6:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 8002cda:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 8002cde:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 8002ce2:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8002ce6:	f7ff fe6b 	bl	80029c0 <getpressure115>
	return (HAL_OK);
}
 8002cea:	4628      	mov	r0, r5
 8002cec:	b006      	add	sp, #24
 8002cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8002cf2:	4601      	mov	r1, r0
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <initpressure115+0xf4>)
 8002cf6:	f01a fc77 	bl	801d5e8 <iprintf>
}
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	b006      	add	sp, #24
 8002cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8002d02:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8002d04:	4809      	ldr	r0, [pc, #36]	; (8002d2c <initpressure115+0xf8>)
 8002d06:	f01a fc6f 	bl	801d5e8 <iprintf>
}
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	b006      	add	sp, #24
 8002d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d12:	bf00      	nop
 8002d14:	20021b44 	.word	0x20021b44
 8002d18:	20000888 	.word	0x20000888
 8002d1c:	20000890 	.word	0x20000890
 8002d20:	20000898 	.word	0x20000898
 8002d24:	20000880 	.word	0x20000880
 8002d28:	08020af4 	.word	0x08020af4
 8002d2c:	08020b24 	.word	0x08020b24

08002d30 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8002d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d34:	b08a      	sub	sp, #40	; 0x28
	int i, trys;
	HAL_StatusTypeDef result;
	uint32_t p, t;
	double fp, fn, ffrac;

	data[0] = 0x55;
 8002d36:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8002d38:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002d3a:	4f4b      	ldr	r7, [pc, #300]	; (8002e68 <getpressure3115+0x138>)
	data[0] = 0x55;
 8002d3c:	ae0a      	add	r6, sp, #40	; 0x28
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8002d3e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002e84 <getpressure3115+0x154>
	data[0] = 0x55;
 8002d42:	f806 3d10 	strb.w	r3, [r6, #-16]!
		osDelay(10);
 8002d46:	200a      	movs	r0, #10
 8002d48:	f00c fe56 	bl	800f9f8 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d50:	2301      	movs	r3, #1
 8002d52:	9600      	str	r6, [sp, #0]
 8002d54:	9202      	str	r2, [sp, #8]
 8002d56:	21c0      	movs	r1, #192	; 0xc0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	f005 f80f 	bl	8007d80 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002d62:	4604      	mov	r4, r0
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d165      	bne.n	8002e34 <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8002d68:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (trys = 0; trys < 4; trys++) {
 8002d6c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	d401      	bmi.n	8002d76 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8002d72:	2d04      	cmp	r5, #4
 8002d74:	d1e7      	bne.n	8002d46 <getpressure3115+0x16>
 8002d76:	2501      	movs	r5, #1
 8002d78:	af08      	add	r7, sp, #32
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002d7a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8002d7e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8002e68 <getpressure3115+0x138>
 8002d82:	46a8      	mov	r8, r5
 8002d84:	2301      	movs	r3, #1
 8002d86:	b2aa      	uxth	r2, r5
 8002d88:	f8cd a008 	str.w	sl, [sp, #8]
 8002d8c:	21c0      	movs	r1, #192	; 0xc0
 8002d8e:	f8cd 8004 	str.w	r8, [sp, #4]
 8002d92:	4648      	mov	r0, r9
 8002d94:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8002d96:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8002d98:	f004 fff2 	bl	8007d80 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d152      	bne.n	8002e48 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8002da2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (i = 1; i < 6; i++) {
 8002da6:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8002da8:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8002dac:	d1ea      	bne.n	8002d84 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002dae:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21

//	pressure = p >> 2;  	// these are in Pascals not KPa as required
//	pressfrac = (p & 3) * 25;		// these are in Pascals not KPa as required

	fp = p / 4000.0;
	ffrac = modf(fp, &fn);
 8002db2:	a804      	add	r0, sp, #16
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002db4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8002db8:	0212      	lsls	r2, r2, #8
 8002dba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002dbe:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002dc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002dc6:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8002dca:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002dce:	4313      	orrs	r3, r2
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <getpressure3115+0x13c>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002dd2:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8002dd6:	091b      	lsrs	r3, r3, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8002dd8:	112d      	asrs	r5, r5, #4
	fp = p / 4000.0;
 8002dda:	ee07 3a90 	vmov	s15, r3
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002dde:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
	fp = p / 4000.0;
 8002de2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
	statuspkt.temppress = t << 20 | p;								// update status packet
 8002de6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	fp = p / 4000.0;
 8002dea:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002e58 <getpressure3115+0x128>
	ffrac = modf(fp, &fn);
 8002dee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8002df2:	f01a fcc5 	bl	801d780 <modf>
	pressure = (uint32_t) fn;
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8002df6:	f005 010f 	and.w	r1, r5, #15
 8002dfa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002dfe:	481c      	ldr	r0, [pc, #112]	; (8002e70 <getpressure3115+0x140>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <getpressure3115+0x144>)
	temperature = t >> 4;
 8002e02:	092d      	lsrs	r5, r5, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8002e04:	fb03 f301 	mul.w	r3, r3, r1
	temperature = t >> 4;
 8002e08:	491b      	ldr	r1, [pc, #108]	; (8002e78 <getpressure3115+0x148>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002e0a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8002e60 <getpressure3115+0x130>
	pressure = (uint32_t) fn;
 8002e0e:	ed9d 6b04 	vldr	d6, [sp, #16]
	tempfrac = (t & 0x0F) * 625 * 100;
 8002e12:	6003      	str	r3, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8002e14:	4620      	mov	r0, r4
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002e16:	ee20 0b07 	vmul.f64	d0, d0, d7
	pressure = (uint32_t) fn;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <getpressure3115+0x14c>)
	temperature = t >> 4;
 8002e1c:	600d      	str	r5, [r1, #0]
	pressure = (uint32_t) fn;
 8002e1e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002e22:	eebc 0bc0 	vcvt.u32.f64	s0, d0
	pressure = (uint32_t) fn;
 8002e26:	ed83 6a00 	vstr	s12, [r3]
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8002e2a:	ed82 0a00 	vstr	s0, [r2]
}
 8002e2e:	b00a      	add	sp, #40	; 0x28
 8002e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8002e34:	4601      	mov	r1, r0
 8002e36:	4640      	mov	r0, r8
 8002e38:	f01a fbd6 	bl	801d5e8 <iprintf>
			if (trys == 3)
 8002e3c:	2d03      	cmp	r5, #3
 8002e3e:	d193      	bne.n	8002d68 <getpressure3115+0x38>
}
 8002e40:	4620      	mov	r0, r4
 8002e42:	b00a      	add	sp, #40	; 0x28
 8002e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8002e48:	4601      	mov	r1, r0
 8002e4a:	480d      	ldr	r0, [pc, #52]	; (8002e80 <getpressure3115+0x150>)
 8002e4c:	f01a fbcc 	bl	801d5e8 <iprintf>
}
 8002e50:	4620      	mov	r0, r4
 8002e52:	b00a      	add	sp, #40	; 0x28
 8002e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	40af4000 	.word	0x40af4000
 8002e60:	00000000 	.word	0x00000000
 8002e64:	40f86a00 	.word	0x40f86a00
 8002e68:	20021b44 	.word	0x20021b44
 8002e6c:	200217f0 	.word	0x200217f0
 8002e70:	20022308 	.word	0x20022308
 8002e74:	20022314 	.word	0x20022314
 8002e78:	2002230c 	.word	0x2002230c
 8002e7c:	20022310 	.word	0x20022310
 8002e80:	08020a98 	.word	0x08020a98
 8002e84:	08020a70 	.word	0x08020a70

08002e88 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8002e8c:	2501      	movs	r5, #1
 8002e8e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002e92:	220c      	movs	r2, #12
 8002e94:	a808      	add	r0, sp, #32
 8002e96:	462b      	mov	r3, r5
 8002e98:	9602      	str	r6, [sp, #8]
 8002e9a:	21c0      	movs	r1, #192	; 0xc0
 8002e9c:	9000      	str	r0, [sp, #0]
 8002e9e:	9501      	str	r5, [sp, #4]
 8002ea0:	482f      	ldr	r0, [pc, #188]	; (8002f60 <initpressure3115+0xd8>)
 8002ea2:	f004 ff6d 	bl	8007d80 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8002ea6:	b938      	cbnz	r0, 8002eb8 <initpressure3115+0x30>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8002ea8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002eac:	2bc4      	cmp	r3, #196	; 0xc4
 8002eae:	d00a      	beq.n	8002ec6 <initpressure3115+0x3e>
		return (HAL_ERROR);
 8002eb0:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	b00b      	add	sp, #44	; 0x2c
 8002eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb8:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8002eba:	482a      	ldr	r0, [pc, #168]	; (8002f64 <initpressure3115+0xdc>)
 8002ebc:	f01a fb94 	bl	801d5e8 <iprintf>
}
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	b00b      	add	sp, #44	; 0x2c
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8002ec6:	4f28      	ldr	r7, [pc, #160]	; (8002f68 <initpressure3115+0xe0>)
 8002ec8:	aa0a      	add	r2, sp, #40	; 0x28
 8002eca:	9600      	str	r6, [sp, #0]
 8002ecc:	2302      	movs	r3, #2
 8002ece:	89bc      	ldrh	r4, [r7, #12]
 8002ed0:	21c0      	movs	r1, #192	; 0xc0
 8002ed2:	4823      	ldr	r0, [pc, #140]	; (8002f60 <initpressure3115+0xd8>)
 8002ed4:	f822 4d14 	strh.w	r4, [r2, #-20]!
 8002ed8:	f004 feac 	bl	8007c34 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8002edc:	4604      	mov	r4, r0
 8002ede:	bb78      	cbnz	r0, 8002f40 <initpressure3115+0xb8>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8002ee0:	8a39      	ldrh	r1, [r7, #16]
 8002ee2:	aa0a      	add	r2, sp, #40	; 0x28
 8002ee4:	9600      	str	r6, [sp, #0]
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f822 1d10 	strh.w	r1, [r2, #-16]!
 8002eec:	21c0      	movs	r1, #192	; 0xc0
 8002eee:	481c      	ldr	r0, [pc, #112]	; (8002f60 <initpressure3115+0xd8>)
 8002ef0:	f004 fea0 	bl	8007c34 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	bb38      	cbnz	r0, 8002f48 <initpressure3115+0xc0>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8002ef8:	8ab9      	ldrh	r1, [r7, #20]
 8002efa:	aa0a      	add	r2, sp, #40	; 0x28
 8002efc:	9600      	str	r6, [sp, #0]
 8002efe:	2302      	movs	r3, #2
 8002f00:	f822 1d0c 	strh.w	r1, [r2, #-12]!
 8002f04:	21c0      	movs	r1, #192	; 0xc0
 8002f06:	4816      	ldr	r0, [pc, #88]	; (8002f60 <initpressure3115+0xd8>)
 8002f08:	f004 fe94 	bl	8007c34 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	b9f8      	cbnz	r0, 8002f50 <initpressure3115+0xc8>
	osDelay(100);	// allow chip to start up sampling
 8002f10:	2064      	movs	r0, #100	; 0x64
 8002f12:	f00c fd71 	bl	800f9f8 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8002f16:	aa08      	add	r2, sp, #32
 8002f18:	462b      	mov	r3, r5
 8002f1a:	21c0      	movs	r1, #192	; 0xc0
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	462a      	mov	r2, r5
 8002f20:	480f      	ldr	r0, [pc, #60]	; (8002f60 <initpressure3115+0xd8>)
 8002f22:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002f26:	f004 ff2b 	bl	8007d80 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	b9a0      	cbnz	r0, 8002f58 <initpressure3115+0xd0>
	result = getpressure3115();
 8002f2e:	f7ff feff 	bl	8002d30 <getpressure3115>
	if (result != HAL_OK) {
 8002f32:	4604      	mov	r4, r0
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0bc      	beq.n	8002eb2 <initpressure3115+0x2a>
		printf("MPL3115A2 getpressure failed\n\r");
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <initpressure3115+0xe4>)
 8002f3a:	f01a fb55 	bl	801d5e8 <iprintf>
 8002f3e:	e7b8      	b.n	8002eb2 <initpressure3115+0x2a>
		printf("I2C HAL returned error 2b\n\r");
 8002f40:	480b      	ldr	r0, [pc, #44]	; (8002f70 <initpressure3115+0xe8>)
 8002f42:	f01a fb51 	bl	801d5e8 <iprintf>
		return (result);
 8002f46:	e7b4      	b.n	8002eb2 <initpressure3115+0x2a>
		printf("I2C HAL returned error 3\n\r");
 8002f48:	480a      	ldr	r0, [pc, #40]	; (8002f74 <initpressure3115+0xec>)
 8002f4a:	f01a fb4d 	bl	801d5e8 <iprintf>
		return (result);
 8002f4e:	e7b0      	b.n	8002eb2 <initpressure3115+0x2a>
		printf("I2C HAL returned error 4\n\r");
 8002f50:	4809      	ldr	r0, [pc, #36]	; (8002f78 <initpressure3115+0xf0>)
 8002f52:	f01a fb49 	bl	801d5e8 <iprintf>
		return (result);
 8002f56:	e7ac      	b.n	8002eb2 <initpressure3115+0x2a>
		printf("I2C HAL returned error 5\n\r");
 8002f58:	4808      	ldr	r0, [pc, #32]	; (8002f7c <initpressure3115+0xf4>)
 8002f5a:	f01a fb45 	bl	801d5e8 <iprintf>
		return (result);
 8002f5e:	e7a8      	b.n	8002eb2 <initpressure3115+0x2a>
 8002f60:	20021b44 	.word	0x20021b44
 8002f64:	08020ac0 	.word	0x08020ac0
 8002f68:	0801f908 	.word	0x0801f908
 8002f6c:	08020bbc 	.word	0x08020bbc
 8002f70:	08020b4c 	.word	0x08020b4c
 8002f74:	08020b68 	.word	0x08020b68
 8002f78:	08020b84 	.word	0x08020b84
 8002f7c:	08020ba0 	.word	0x08020ba0

08002f80 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8002f80:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 8002f82:	f7ff fc25 	bl	80027d0 <cycleleds>
	osDelay(500);
 8002f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f8a:	f00c fd35 	bl	800f9f8 <osDelay>
	printf("Initsplat: LED cycle\n");
 8002f8e:	4820      	ldr	r0, [pc, #128]	; (8003010 <initsplat+0x90>)
 8002f90:	f01a fbb2 	bl	801d6f8 <puts>

	printf("Initsplat: Dual Mux\n\r");
 8002f94:	481f      	ldr	r0, [pc, #124]	; (8003014 <initsplat+0x94>)
 8002f96:	f01a fb27 	bl	801d5e8 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8002f9a:	4c1f      	ldr	r4, [pc, #124]	; (8003018 <initsplat+0x98>)
	initdualmux();
 8002f9c:	f7ff fcf2 	bl	8002984 <initdualmux>
	osDelay(500);
 8002fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fa4:	f00c fd28 	bl	800f9f8 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 8002fa8:	481c      	ldr	r0, [pc, #112]	; (800301c <initsplat+0x9c>)
 8002faa:	f01a fba5 	bl	801d6f8 <puts>
	initpga();
 8002fae:	f7ff fc85 	bl	80028bc <initpga>
	osDelay(500);
 8002fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fb6:	f00c fd1f 	bl	800f9f8 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8002fba:	4819      	ldr	r0, [pc, #100]	; (8003020 <initsplat+0xa0>)
 8002fbc:	f01a fb14 	bl	801d5e8 <iprintf>
	psensor = PNONE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8002fc4:	f7ff ff60 	bl	8002e88 <initpressure3115>
 8002fc8:	b1b0      	cbz	r0, 8002ff8 <initsplat+0x78>
		printf("MPL3115A2 pressure sensor present\n\r");
		psensor = MPL3115A2;
	} else {
		if (initpressure115() == HAL_OK) {
 8002fca:	f7ff fe33 	bl	8002c34 <initpressure115>
 8002fce:	b140      	cbz	r0, 8002fe2 <initsplat+0x62>
			printf("MPL115A2 pressure sensor present\n\r");
			psensor = MPL115A2;		// assume MPL115 fitted instead
		} else {
			printf("NO pressure sensor present\n\r");
 8002fd0:	4814      	ldr	r0, [pc, #80]	; (8003024 <initsplat+0xa4>)
 8002fd2:	f01a fb09 	bl	801d5e8 <iprintf>
		}
	}
	osDelay(500);
 8002fd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8002fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 8002fde:	f00c bd0b 	b.w	800f9f8 <osDelay>
			printf("MPL115A2 pressure sensor present\n\r");
 8002fe2:	4811      	ldr	r0, [pc, #68]	; (8003028 <initsplat+0xa8>)
 8002fe4:	f01a fb00 	bl	801d5e8 <iprintf>
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8002fe8:	2302      	movs	r3, #2
	osDelay(500);
 8002fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8002fee:	6023      	str	r3, [r4, #0]
}
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 8002ff4:	f00c bd00 	b.w	800f9f8 <osDelay>
		printf("MPL3115A2 pressure sensor present\n\r");
 8002ff8:	480c      	ldr	r0, [pc, #48]	; (800302c <initsplat+0xac>)
 8002ffa:	f01a faf5 	bl	801d5e8 <iprintf>
		psensor = MPL3115A2;
 8002ffe:	2301      	movs	r3, #1
	osDelay(500);
 8003000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		psensor = MPL3115A2;
 8003004:	6023      	str	r3, [r4, #0]
}
 8003006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 800300a:	f00c bcf5 	b.w	800f9f8 <osDelay>
 800300e:	bf00      	nop
 8003010:	08020bdc 	.word	0x08020bdc
 8003014:	08020bf4 	.word	0x08020bf4
 8003018:	200008a4 	.word	0x200008a4
 800301c:	08020c0c 	.word	0x08020c0c
 8003020:	08020c30 	.word	0x08020c30
 8003024:	08020c98 	.word	0x08020c98
 8003028:	08020c74 	.word	0x08020c74
 800302c:	08020c50 	.word	0x08020c50

08003030 <HAL_MspInit>:
void HAL_MspInit(void) {
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_MspInit+0x5c>)
	__HAL_RCC_SYSCFG_CLK_ENABLE();

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	210f      	movs	r1, #15
 8003036:	f06f 0001 	mvn.w	r0, #1
void HAL_MspInit(void) {
 800303a:	b510      	push	{r4, lr}
	__HAL_RCC_PWR_CLK_ENABLE();
 800303c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
void HAL_MspInit(void) {
 800303e:	b082      	sub	sp, #8
	__HAL_RCC_PWR_CLK_ENABLE();
 8003040:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003044:	641c      	str	r4, [r3, #64]	; 0x40
 8003046:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003048:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 800304c:	9400      	str	r4, [sp, #0]
 800304e:	9c00      	ldr	r4, [sp, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003050:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003052:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003056:	645c      	str	r4, [r3, #68]	; 0x44
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003062:	f002 f81f 	bl	80050a4 <HAL_NVIC_SetPriority>

	/* Peripheral interrupt init */
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2106      	movs	r1, #6
 800306a:	2005      	movs	r0, #5
 800306c:	f002 f81a 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003070:	2005      	movs	r0, #5
 8003072:	f002 f85d 	bl	8005130 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2106      	movs	r1, #6
 800307a:	2051      	movs	r0, #81	; 0x51
 800307c:	f002 f812 	bl	80050a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003080:	2051      	movs	r0, #81	; 0x51

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8003082:	b002      	add	sp, #8
 8003084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003088:	f002 b852 	b.w	8005130 <HAL_NVIC_EnableIRQ>
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_ADC_MspInit>:
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (hadc->Instance == ADC1) {
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_ADC_MspInit+0x124>)
 8003092:	6803      	ldr	r3, [r0, #0]
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8003094:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (hadc->Instance == ADC1) {
 8003096:	4293      	cmp	r3, r2
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8003098:	b08d      	sub	sp, #52	; 0x34
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80030a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80030a6:	940b      	str	r4, [sp, #44]	; 0x2c
	if (hadc->Instance == ADC1) {
 80030a8:	d007      	beq.n	80030ba <HAL_ADC_MspInit+0x2a>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	} else if (hadc->Instance == ADC2) {
 80030aa:	4a43      	ldr	r2, [pc, #268]	; (80031b8 <HAL_ADC_MspInit+0x128>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d063      	beq.n	8003178 <HAL_ADC_MspInit+0xe8>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

		/* USER CODE BEGIN ADC2_MspInit 1 */

		/* USER CODE END ADC2_MspInit 1 */
	} else if (hadc->Instance == ADC3) {
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_ADC_MspInit+0x12c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d043      	beq.n	800313e <HAL_ADC_MspInit+0xae>
		/* USER CODE BEGIN ADC3_MspInit 1 */

		/* USER CODE END ADC3_MspInit 1 */
	}

}
 80030b6:	b00d      	add	sp, #52	; 0x34
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_ADC_MspInit+0x130>)
 80030bc:	4606      	mov	r6, r0
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030be:	2008      	movs	r0, #8
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c0:	2703      	movs	r7, #3
		__HAL_RCC_ADC1_CLK_ENABLE();
 80030c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c4:	a907      	add	r1, sp, #28
		hdma_adc1.Instance = DMA2_Stream4;
 80030c6:	4d3f      	ldr	r5, [pc, #252]	; (80031c4 <HAL_ADC_MspInit+0x134>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
 80030ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80030d4:	9201      	str	r2, [sp, #4]
 80030d6:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80030d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030e2:	9007      	str	r0, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	4837      	ldr	r0, [pc, #220]	; (80031c8 <HAL_ADC_MspInit+0x138>)
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ea:	9708      	str	r7, [sp, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	f004 f96c 	bl	80073cc <HAL_GPIO_Init>
		hdma_adc1.Instance = DMA2_Stream4;
 80030f4:	4a35      	ldr	r2, [pc, #212]	; (80031cc <HAL_ADC_MspInit+0x13c>)
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030fe:	f44f 6c00 	mov.w	ip, #2048	; 0x800
		hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003102:	62af      	str	r7, [r5, #40]	; 0x28
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003104:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003108:	f44f 7780 	mov.w	r7, #256	; 0x100
		hdma_adc1.Instance = DMA2_Stream4;
 800310c:	602a      	str	r2, [r5, #0]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	612b      	str	r3, [r5, #16]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003110:	2204      	movs	r2, #4
		hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003112:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003116:	606c      	str	r4, [r5, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003118:	60ac      	str	r4, [r5, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800311a:	60ec      	str	r4, [r5, #12]
		hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800311c:	632c      	str	r4, [r5, #48]	; 0x30
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800311e:	626a      	str	r2, [r5, #36]	; 0x24
		hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003120:	62eb      	str	r3, [r5, #44]	; 0x2c
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003122:	e9c5 c005 	strd	ip, r0, [r5, #20]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8003126:	4628      	mov	r0, r5
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003128:	e9c5 7107 	strd	r7, r1, [r5, #28]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 800312c:	f002 fa8c 	bl	8005648 <HAL_DMA_Init>
 8003130:	b108      	cbz	r0, 8003136 <HAL_ADC_MspInit+0xa6>
			Error_Handler();
 8003132:	f7fe f9f5 	bl	8001520 <Error_Handler>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8003136:	63b5      	str	r5, [r6, #56]	; 0x38
 8003138:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800313a:	b00d      	add	sp, #52	; 0x34
 800313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_RCC_ADC3_CLK_ENABLE();
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_ADC_MspInit+0x130>)
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003140:	2508      	movs	r5, #8
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003142:	2403      	movs	r4, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	a907      	add	r1, sp, #28
		__HAL_RCC_ADC3_CLK_ENABLE();
 8003146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	481f      	ldr	r0, [pc, #124]	; (80031c8 <HAL_ADC_MspInit+0x138>)
		__HAL_RCC_ADC3_CLK_ENABLE();
 800314a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
 8003150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003152:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003156:	9205      	str	r2, [sp, #20]
 8003158:	9a05      	ldr	r2, [sp, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003164:	9507      	str	r5, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	f003 0301 	and.w	r3, r3, #1
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316a:	9408      	str	r4, [sp, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	9306      	str	r3, [sp, #24]
 800316e:	9b06      	ldr	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f004 f92c 	bl	80073cc <HAL_GPIO_Init>
}
 8003174:	b00d      	add	sp, #52	; 0x34
 8003176:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_RCC_ADC2_CLK_ENABLE();
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_ADC_MspInit+0x130>)
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800317a:	2508      	movs	r5, #8
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800317c:	2403      	movs	r4, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	a907      	add	r1, sp, #28
		__HAL_RCC_ADC2_CLK_ENABLE();
 8003180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	4811      	ldr	r0, [pc, #68]	; (80031c8 <HAL_ADC_MspInit+0x138>)
		__HAL_RCC_ADC2_CLK_ENABLE();
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
 800318a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003190:	9203      	str	r2, [sp, #12]
 8003192:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800319e:	9507      	str	r5, [sp, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	f003 0301 	and.w	r3, r3, #1
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031a4:	9408      	str	r4, [sp, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	9b04      	ldr	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f004 f90f 	bl	80073cc <HAL_GPIO_Init>
}
 80031ae:	b00d      	add	sp, #52	; 0x34
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012000 	.word	0x40012000
 80031b8:	40012100 	.word	0x40012100
 80031bc:	40012200 	.word	0x40012200
 80031c0:	40023800 	.word	0x40023800
 80031c4:	20021f1c 	.word	0x20021f1c
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40026470 	.word	0x40026470

080031d0 <HAL_CRC_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcrc: CRC handle pointer
 * @retval None
 */
void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc) {
	if (hcrc->Instance == CRC) {
 80031d0:	6802      	ldr	r2, [r0, #0]
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_CRC_MspInit+0x28>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d000      	beq.n	80031da <HAL_CRC_MspInit+0xa>
 80031d8:	4770      	bx	lr
		/* USER CODE BEGIN CRC_MspInit 0 */

		/* USER CODE END CRC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CRC_CLK_ENABLE();
 80031da:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc) {
 80031e2:	b082      	sub	sp, #8
		__HAL_RCC_CRC_CLK_ENABLE();
 80031e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	9b01      	ldr	r3, [sp, #4]
		/* USER CODE BEGIN CRC_MspInit 1 */

		/* USER CODE END CRC_MspInit 1 */
	}

}
 80031f4:	b002      	add	sp, #8
 80031f6:	4770      	bx	lr
 80031f8:	40023000 	.word	0x40023000

080031fc <HAL_DAC_MspInit>:
 * @param hdac: DAC handle pointer
 * @retval None
 */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (hdac->Instance == DAC) {
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_DAC_MspInit+0xb0>)
 80031fe:	6802      	ldr	r2, [r0, #0]
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (hdac->Instance == DAC) {
 8003202:	429a      	cmp	r2, r3
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
 8003204:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003206:	f04f 0400 	mov.w	r4, #0
 800320a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800320e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003212:	9407      	str	r4, [sp, #28]
	if (hdac->Instance == DAC) {
 8003214:	d001      	beq.n	800321a <HAL_DAC_MspInit+0x1e>
		/* USER CODE BEGIN DAC_MspInit 1 */

		/* USER CODE END DAC_MspInit 1 */
	}

}
 8003216:	b009      	add	sp, #36	; 0x24
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_RCC_DAC_CLK_ENABLE();
 800321a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800321e:	4606      	mov	r6, r0
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003220:	2010      	movs	r0, #16
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003222:	2503      	movs	r5, #3
		__HAL_RCC_DAC_CLK_ENABLE();
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	a903      	add	r1, sp, #12
		hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003228:	f44f 6780 	mov.w	r7, #1024	; 0x400
		__HAL_RCC_DAC_CLK_ENABLE();
 800322c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
 8003232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003234:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003238:	9201      	str	r2, [sp, #4]
 800323a:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003246:	9003      	str	r0, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003248:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324c:	4818      	ldr	r0, [pc, #96]	; (80032b0 <HAL_DAC_MspInit+0xb4>)
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324e:	9504      	str	r5, [sp, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	9302      	str	r3, [sp, #8]
		hdma_dac1.Instance = DMA1_Stream5;
 8003252:	4d18      	ldr	r5, [pc, #96]	; (80032b4 <HAL_DAC_MspInit+0xb8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f004 f8b9 	bl	80073cc <HAL_GPIO_Init>
		hdma_dac1.Instance = DMA1_Stream5;
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_DAC_MspInit+0xbc>)
		hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325c:	2040      	movs	r0, #64	; 0x40
		hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800325e:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
		hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003262:	2104      	movs	r1, #4
		hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003264:	2202      	movs	r2, #2
		hdma_dac1.Instance = DMA1_Stream5;
 8003266:	602b      	str	r3, [r5, #0]
		hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003268:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
		hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800326c:	60ec      	str	r4, [r5, #12]
		hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800326e:	632c      	str	r4, [r5, #48]	; 0x30
		hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003270:	612f      	str	r7, [r5, #16]
		hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003272:	62eb      	str	r3, [r5, #44]	; 0x2c
		hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003274:	e9c5 c001 	strd	ip, r0, [r5, #4]
		if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) {
 8003278:	4628      	mov	r0, r5
		hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800327a:	e9c5 4405 	strd	r4, r4, [r5, #20]
		hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800327e:	e9c5 4407 	strd	r4, r4, [r5, #28]
		hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003282:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) {
 8003286:	f002 f9df 	bl	8005648 <HAL_DMA_Init>
 800328a:	b958      	cbnz	r0, 80032a4 <HAL_DAC_MspInit+0xa8>
		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1);
 800328c:	60b5      	str	r5, [r6, #8]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2106      	movs	r1, #6
 8003292:	2036      	movs	r0, #54	; 0x36
		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1);
 8003294:	63ae      	str	r6, [r5, #56]	; 0x38
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003296:	f001 ff05 	bl	80050a4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800329a:	2036      	movs	r0, #54	; 0x36
 800329c:	f001 ff48 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 80032a0:	b009      	add	sp, #36	; 0x24
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Error_Handler();
 80032a4:	f7fe f93c 	bl	8001520 <Error_Handler>
 80032a8:	e7f0      	b.n	800328c <HAL_DAC_MspInit+0x90>
 80032aa:	bf00      	nop
 80032ac:	40007400 	.word	0x40007400
 80032b0:	40020000 	.word	0x40020000
 80032b4:	20021d20 	.word	0x20021d20
 80032b8:	40026088 	.word	0x40026088

080032bc <HAL_I2C_MspInit>:
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (hi2c->Instance == I2C1) {
 80032bc:	6802      	ldr	r2, [r0, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032be:	2300      	movs	r3, #0
	if (hi2c->Instance == I2C1) {
 80032c0:	493d      	ldr	r1, [pc, #244]	; (80033b8 <HAL_I2C_MspInit+0xfc>)
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80032c2:	b570      	push	{r4, r5, r6, lr}
	if (hi2c->Instance == I2C1) {
 80032c4:	428a      	cmp	r2, r1
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80032c6:	b08c      	sub	sp, #48	; 0x30
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80032cc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80032d0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (hi2c->Instance == I2C1) {
 80032d2:	d007      	beq.n	80032e4 <HAL_I2C_MspInit+0x28>
		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	} else if (hi2c->Instance == I2C2) {
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <HAL_I2C_MspInit+0x100>)
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d04c      	beq.n	8003374 <HAL_I2C_MspInit+0xb8>
		/* Peripheral clock enable */
		__HAL_RCC_I2C2_CLK_ENABLE();
		/* USER CODE BEGIN I2C2_MspInit 1 */

		/* USER CODE END I2C2_MspInit 1 */
	} else if (hi2c->Instance == I2C4) {
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_I2C_MspInit+0x104>)
 80032dc:	429a      	cmp	r2, r3
 80032de:	d025      	beq.n	800332c <HAL_I2C_MspInit+0x70>
		/* USER CODE BEGIN I2C4_MspInit 1 */

		/* USER CODE END I2C4_MspInit 1 */
	}

}
 80032e0:	b00c      	add	sp, #48	; 0x30
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032e4:	4c37      	ldr	r4, [pc, #220]	; (80033c4 <HAL_I2C_MspInit+0x108>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e6:	2212      	movs	r2, #18
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e8:	2001      	movs	r0, #1
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 80032ea:	f44f 7610 	mov.w	r6, #576	; 0x240
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f0:	2503      	movs	r5, #3
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	a907      	add	r1, sp, #28
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6323      	str	r3, [r4, #48]	; 0x30
 80032fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032fc:	9208      	str	r2, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032fe:	2204      	movs	r2, #4
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003300:	f003 0302 	and.w	r3, r3, #2
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003304:	9009      	str	r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	4830      	ldr	r0, [pc, #192]	; (80033c8 <HAL_I2C_MspInit+0x10c>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 800330c:	9607      	str	r6, [sp, #28]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800330e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f004 f85b 	bl	80073cc <HAL_GPIO_Init>
		__HAL_RCC_I2C1_CLK_ENABLE();
 8003316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800331c:	6423      	str	r3, [r4, #64]	; 0x40
 800331e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	9b02      	ldr	r3, [sp, #8]
}
 8003328:	b00c      	add	sp, #48	; 0x30
 800332a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800332c:	4c25      	ldr	r4, [pc, #148]	; (80033c4 <HAL_I2C_MspInit+0x108>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800332e:	2212      	movs	r2, #18
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003330:	2001      	movs	r0, #1
		GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8003332:	f44f 4640 	mov.w	r6, #49152	; 0xc000
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003336:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2503      	movs	r5, #3
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800333a:	a907      	add	r1, sp, #28
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800333c:	f043 0320 	orr.w	r3, r3, #32
 8003340:	6323      	str	r3, [r4, #48]	; 0x30
 8003342:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003344:	9208      	str	r2, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003346:	2204      	movs	r2, #4
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003348:	f003 0320 	and.w	r3, r3, #32
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800334c:	9009      	str	r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800334e:	481f      	ldr	r0, [pc, #124]	; (80033cc <HAL_I2C_MspInit+0x110>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	9b05      	ldr	r3, [sp, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8003354:	9607      	str	r6, [sp, #28]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003356:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800335a:	f004 f837 	bl	80073cc <HAL_GPIO_Init>
		__HAL_RCC_I2C4_CLK_ENABLE();
 800335e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003364:	6423      	str	r3, [r4, #64]	; 0x40
 8003366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336c:	9306      	str	r3, [sp, #24]
 800336e:	9b06      	ldr	r3, [sp, #24]
}
 8003370:	b00c      	add	sp, #48	; 0x30
 8003372:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003374:	4c13      	ldr	r4, [pc, #76]	; (80033c4 <HAL_I2C_MspInit+0x108>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003376:	2012      	movs	r0, #18
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003378:	2203      	movs	r2, #3
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337a:	2601      	movs	r6, #1
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800337c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800337e:	2504      	movs	r5, #4
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003380:	a907      	add	r1, sp, #28
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003382:	f043 0320 	orr.w	r3, r3, #32
 8003386:	6323      	str	r3, [r4, #48]	; 0x30
 8003388:	6b23      	ldr	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338a:	9008      	str	r0, [sp, #32]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800338c:	f003 0320 	and.w	r3, r3, #32
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003390:	480e      	ldr	r0, [pc, #56]	; (80033cc <HAL_I2C_MspInit+0x110>)
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003392:	9207      	str	r2, [sp, #28]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	920a      	str	r2, [sp, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339a:	9609      	str	r6, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800339c:	950b      	str	r5, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800339e:	f004 f815 	bl	80073cc <HAL_GPIO_Init>
		__HAL_RCC_I2C2_CLK_ENABLE();
 80033a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a8:	6423      	str	r3, [r4, #64]	; 0x40
 80033aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	9b04      	ldr	r3, [sp, #16]
}
 80033b4:	b00c      	add	sp, #48	; 0x30
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	40005400 	.word	0x40005400
 80033bc:	40005800 	.word	0x40005800
 80033c0:	40006000 	.word	0x40006000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40021400 	.word	0x40021400

080033d0 <HAL_MDIOS_MspInit>:
 * @param hmdios: MDIOS handle pointer
 * @retval None
 */
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef *hmdios) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (hmdios->Instance == MDIOS) {
 80033d0:	6802      	ldr	r2, [r0, #0]
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_MDIOS_MspInit+0x74>)
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef *hmdios) {
 80033d4:	b570      	push	{r4, r5, r6, lr}
	if (hmdios->Instance == MDIOS) {
 80033d6:	429a      	cmp	r2, r3
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef *hmdios) {
 80033d8:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033da:	f04f 0400 	mov.w	r4, #0
 80033de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80033e2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80033e6:	9407      	str	r4, [sp, #28]
	if (hmdios->Instance == MDIOS) {
 80033e8:	d001      	beq.n	80033ee <HAL_MDIOS_MspInit+0x1e>
		/* USER CODE BEGIN MDIOS_MspInit 1 */

		/* USER CODE END MDIOS_MspInit 1 */
	}

}
 80033ea:	b008      	add	sp, #32
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_MDIO_CLK_ENABLE();
 80033ee:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2002      	movs	r0, #2
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_10;
 80033f4:	f44f 6688 	mov.w	r6, #1088	; 0x440
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f8:	2503      	movs	r5, #3
		__HAL_RCC_MDIO_CLK_ENABLE();
 80033fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fc:	a903      	add	r1, sp, #12
		__HAL_RCC_MDIO_CLK_ENABLE();
 80033fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800340a:	9201      	str	r2, [sp, #4]
 800340c:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003416:	220c      	movs	r2, #12
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	9004      	str	r0, [sp, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	4809      	ldr	r0, [pc, #36]	; (8003448 <HAL_MDIOS_MspInit+0x78>)
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_10;
 8003422:	9603      	str	r6, [sp, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003428:	e9cd 5206 	strd	r5, r2, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342c:	f003 ffce 	bl	80073cc <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 8003430:	4622      	mov	r2, r4
 8003432:	2106      	movs	r1, #6
 8003434:	206d      	movs	r0, #109	; 0x6d
 8003436:	f001 fe35 	bl	80050a4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 800343a:	206d      	movs	r0, #109	; 0x6d
 800343c:	f001 fe78 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 8003440:	b008      	add	sp, #32
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	40017800 	.word	0x40017800
 8003448:	40020000 	.word	0x40020000

0800344c <HAL_RNG_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng) {
	if (hrng->Instance == RNG) {
 800344c:	6802      	ldr	r2, [r0, #0]
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_RNG_MspInit+0x24>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d000      	beq.n	8003456 <HAL_RNG_MspInit+0xa>
 8003454:	4770      	bx	lr
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_RNG_MspInit+0x28>)
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng) {
 8003458:	b082      	sub	sp, #8
		__HAL_RCC_RNG_CLK_ENABLE();
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	9b01      	ldr	r3, [sp, #4]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}

}
 800346c:	b002      	add	sp, #8
 800346e:	4770      	bx	lr
 8003470:	50060800 	.word	0x50060800
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_SPI_MspInit>:
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (hspi->Instance == SPI2) {
 8003478:	6803      	ldr	r3, [r0, #0]
 800347a:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_SPI_MspInit+0x15c>)
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (hspi->Instance == SPI2) {
 8003480:	4293      	cmp	r3, r2
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8003482:	b08e      	sub	sp, #56	; 0x38
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800348c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003490:	940d      	str	r4, [sp, #52]	; 0x34
	if (hspi->Instance == SPI2) {
 8003492:	d008      	beq.n	80034a6 <HAL_SPI_MspInit+0x2e>
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	} else if (hspi->Instance == SPI3) {
 8003494:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <HAL_SPI_MspInit+0x160>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d05c      	beq.n	8003554 <HAL_SPI_MspInit+0xdc>
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

		/* USER CODE BEGIN SPI3_MspInit 1 */

		/* USER CODE END SPI3_MspInit 1 */
	} else if (hspi->Instance == SPI4) {
 800349a:	4a50      	ldr	r2, [pc, #320]	; (80035dc <HAL_SPI_MspInit+0x164>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d037      	beq.n	8003510 <HAL_SPI_MspInit+0x98>
		/* USER CODE BEGIN SPI4_MspInit 1 */

		/* USER CODE END SPI4_MspInit 1 */
	}

}
 80034a0:	b00e      	add	sp, #56	; 0x38
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_RCC_SPI2_CLK_ENABLE();
 80034a6:	4b4e      	ldr	r3, [pc, #312]	; (80035e0 <HAL_SPI_MspInit+0x168>)
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80034a8:	200c      	movs	r0, #12
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2702      	movs	r7, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034ac:	2601      	movs	r6, #1
		__HAL_RCC_SPI2_CLK_ENABLE();
 80034ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034b0:	2505      	movs	r5, #5
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b2:	a909      	add	r1, sp, #36	; 0x24
		__HAL_RCC_SPI2_CLK_ENABLE();
 80034b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
 80034ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80034c0:	9201      	str	r2, [sp, #4]
 80034c2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	f042 0204 	orr.w	r2, r2, #4
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	f002 0204 	and.w	r2, r2, #4
 80034d2:	9202      	str	r2, [sp, #8]
 80034d4:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80034e0:	9009      	str	r0, [sp, #36]	; 0x24
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034e2:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e6:	483f      	ldr	r0, [pc, #252]	; (80035e4 <HAL_SPI_MspInit+0x16c>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	970a      	str	r7, [sp, #40]	; 0x28
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80034ea:	9303      	str	r3, [sp, #12]
 80034ec:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034ee:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f2:	f003 ff6b 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034f6:	2308      	movs	r3, #8
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f8:	a909      	add	r1, sp, #36	; 0x24
 80034fa:	483b      	ldr	r0, [pc, #236]	; (80035e8 <HAL_SPI_MspInit+0x170>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	970a      	str	r7, [sp, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	940b      	str	r4, [sp, #44]	; 0x2c
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003500:	9309      	str	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003502:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003506:	f003 ff61 	bl	80073cc <HAL_GPIO_Init>
}
 800350a:	b00e      	add	sp, #56	; 0x38
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_RCC_SPI4_CLK_ENABLE();
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_SPI_MspInit+0x168>)
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003512:	2074      	movs	r0, #116	; 0x74
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2602      	movs	r6, #2
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003516:	a909      	add	r1, sp, #36	; 0x24
		__HAL_RCC_SPI4_CLK_ENABLE();
 8003518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351a:	2503      	movs	r5, #3
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800351c:	2405      	movs	r4, #5
		__HAL_RCC_SPI4_CLK_ENABLE();
 800351e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
 8003524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003526:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800352a:	9207      	str	r2, [sp, #28]
 800352c:	9a07      	ldr	r2, [sp, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	f042 0210 	orr.w	r2, r2, #16
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003538:	9009      	str	r0, [sp, #36]	; 0x24
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800353a:	f003 0310 	and.w	r3, r3, #16
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800353e:	482b      	ldr	r0, [pc, #172]	; (80035ec <HAL_SPI_MspInit+0x174>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	960a      	str	r6, [sp, #40]	; 0x28
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8003542:	9308      	str	r3, [sp, #32]
 8003544:	9b08      	ldr	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003546:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800354a:	f003 ff3f 	bl	80073cc <HAL_GPIO_Init>
}
 800354e:	b00e      	add	sp, #56	; 0x38
 8003550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_RCC_SPI3_CLK_ENABLE();
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_SPI_MspInit+0x168>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2602      	movs	r6, #2
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003558:	2004      	movs	r0, #4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2503      	movs	r5, #3
		__HAL_RCC_SPI3_CLK_ENABLE();
 800355c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800355e:	2707      	movs	r7, #7
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003562:	f04f 0806 	mov.w	r8, #6
		__HAL_RCC_SPI3_CLK_ENABLE();
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
 800356c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003572:	9204      	str	r2, [sp, #16]
 8003574:	9a04      	ldr	r2, [sp, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	4332      	orrs	r2, r6
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
 800357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357e:	4032      	ands	r2, r6
 8003580:	9205      	str	r2, [sp, #20]
 8003582:	9a05      	ldr	r2, [sp, #20]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003586:	4302      	orrs	r2, r0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 800358c:	9009      	str	r0, [sp, #36]	; 0x24
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800358e:	4003      	ands	r3, r0
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	4817      	ldr	r0, [pc, #92]	; (80035f0 <HAL_SPI_MspInit+0x178>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	960a      	str	r6, [sp, #40]	; 0x28
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003594:	9306      	str	r3, [sp, #24]
 8003596:	9b06      	ldr	r3, [sp, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	950c      	str	r5, [sp, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800359a:	970d      	str	r7, [sp, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359c:	f003 ff16 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a4:	a909      	add	r1, sp, #36	; 0x24
 80035a6:	480f      	ldr	r0, [pc, #60]	; (80035e4 <HAL_SPI_MspInit+0x16c>)
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	960a      	str	r6, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ac:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b4:	f003 ff0a 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035b8:	2310      	movs	r3, #16
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ba:	a909      	add	r1, sp, #36	; 0x24
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <HAL_SPI_MspInit+0x178>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	960a      	str	r6, [sp, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	940b      	str	r4, [sp, #44]	; 0x2c
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035c2:	9309      	str	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035c4:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	f003 ff00 	bl	80073cc <HAL_GPIO_Init>
}
 80035cc:	b00e      	add	sp, #56	; 0x38
 80035ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d2:	bf00      	nop
 80035d4:	40003800 	.word	0x40003800
 80035d8:	40003c00 	.word	0x40003c00
 80035dc:	40013400 	.word	0x40013400
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40020400 	.word	0x40020400

080035f4 <HAL_TIM_Base_MspInit>:
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (htim_base->Instance == TIM1) {
 80035f4:	4a64      	ldr	r2, [pc, #400]	; (8003788 <HAL_TIM_Base_MspInit+0x194>)
 80035f6:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80035f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (htim_base->Instance == TIM1) {
 80035fc:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80035fe:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003608:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800360c:	940d      	str	r4, [sp, #52]	; 0x34
	if (htim_base->Instance == TIM1) {
 800360e:	d01e      	beq.n	800364e <HAL_TIM_Base_MspInit+0x5a>
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	} else if (htim_base->Instance == TIM2) {
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	4605      	mov	r5, r0
 8003616:	d034      	beq.n	8003682 <HAL_TIM_Base_MspInit+0x8e>
		HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	} else if (htim_base->Instance == TIM3) {
 8003618:	4a5c      	ldr	r2, [pc, #368]	; (800378c <HAL_TIM_Base_MspInit+0x198>)
 800361a:	4293      	cmp	r3, r2
 800361c:	f000 808d 	beq.w	800373a <HAL_TIM_Base_MspInit+0x146>
		HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	} else if (htim_base->Instance == TIM4) {
 8003620:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <HAL_TIM_Base_MspInit+0x19c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d020      	beq.n	8003668 <HAL_TIM_Base_MspInit+0x74>
		/* Peripheral clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	} else if (htim_base->Instance == TIM6) {
 8003626:	4a5b      	ldr	r2, [pc, #364]	; (8003794 <HAL_TIM_Base_MspInit+0x1a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	f000 8099 	beq.w	8003760 <HAL_TIM_Base_MspInit+0x16c>
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
		/* USER CODE BEGIN TIM6_MspInit 1 */

		/* USER CODE END TIM6_MspInit 1 */
	} else if (htim_base->Instance == TIM7) {
 800362e:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <HAL_TIM_Base_MspInit+0x1a4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d109      	bne.n	8003648 <HAL_TIM_Base_MspInit+0x54>
		/* USER CODE BEGIN TIM7_MspInit 0 */

		/* USER CODE END TIM7_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM7_CLK_ENABLE();
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_TIM_Base_MspInit+0x1a8>)
 8003636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	9308      	str	r3, [sp, #32]
 8003646:	9b08      	ldr	r3, [sp, #32]
		/* USER CODE BEGIN TIM7_MspInit 1 */

		/* USER CODE END TIM7_MspInit 1 */
	}

}
 8003648:	b00f      	add	sp, #60	; 0x3c
 800364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_TIM1_CLK_ENABLE();
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_TIM_Base_MspInit+0x1a8>)
 8003650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	9b01      	ldr	r3, [sp, #4]
}
 8003662:	b00f      	add	sp, #60	; 0x3c
 8003664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_TIM4_CLK_ENABLE();
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_TIM_Base_MspInit+0x1a8>)
 800366a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366c:	f042 0204 	orr.w	r2, r2, #4
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	9306      	str	r3, [sp, #24]
 800367a:	9b06      	ldr	r3, [sp, #24]
}
 800367c:	b00f      	add	sp, #60	; 0x3c
 800367e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003682:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003686:	2701      	movs	r7, #1
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	f04f 0802 	mov.w	r8, #2
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 800368c:	2020      	movs	r0, #32
		__HAL_RCC_TIM2_CLK_ENABLE();
 800368e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	a909      	add	r1, sp, #36	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003692:	f44f 6980 	mov.w	r9, #1024	; 0x400
		hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8003696:	4e42      	ldr	r6, [pc, #264]	; (80037a0 <HAL_TIM_Base_MspInit+0x1ac>)
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003698:	433a      	orrs	r2, r7
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
 800369c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369e:	403a      	ands	r2, r7
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	433a      	orrs	r2, r7
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
 80036aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ac:	403a      	ands	r2, r7
 80036ae:	9203      	str	r2, [sp, #12]
 80036b0:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b4:	ea42 0208 	orr.w	r2, r2, r8
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036bc:	9009      	str	r0, [sp, #36]	; 0x24
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	ea03 0308 	and.w	r3, r3, r8
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	4838      	ldr	r0, [pc, #224]	; (80037a4 <HAL_TIM_Base_MspInit+0x1b0>)
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036c4:	970d      	str	r7, [sp, #52]	; 0x34
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f003 fe7d 	bl	80073cc <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	a909      	add	r1, sp, #36	; 0x24
 80036d4:	4834      	ldr	r0, [pc, #208]	; (80037a8 <HAL_TIM_Base_MspInit+0x1b4>)
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d6:	970d      	str	r7, [sp, #52]	; 0x34
		hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80036d8:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e8:	f003 fe70 	bl	80073cc <HAL_GPIO_Init>
		hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80036ec:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80037ac <HAL_TIM_Base_MspInit+0x1b8>
		hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
		hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
		if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK) {
 80036fc:	4630      	mov	r0, r6
		hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80036fe:	f8c6 9010 	str.w	r9, [r6, #16]
		hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003702:	60b4      	str	r4, [r6, #8]
		hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003704:	60f4      	str	r4, [r6, #12]
		hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8003706:	61f3      	str	r3, [r6, #28]
		hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003708:	e9c6 4408 	strd	r4, r4, [r6, #32]
		hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800370c:	e9c6 c700 	strd	ip, r7, [r6]
		hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003710:	e9c6 1205 	strd	r1, r2, [r6, #20]
		if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK) {
 8003714:	f001 ff98 	bl	8005648 <HAL_DMA_Init>
 8003718:	b108      	cbz	r0, 800371e <HAL_TIM_Base_MspInit+0x12a>
			Error_Handler();
 800371a:	f7fd ff01 	bl	8001520 <Error_Handler>
		__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_UPDATE], hdma_tim2_up_ch3);
 800371e:	622e      	str	r6, [r5, #32]
		HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003720:	2200      	movs	r2, #0
		__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim2_up_ch3);
 8003722:	62ee      	str	r6, [r5, #44]	; 0x2c
		HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003724:	2106      	movs	r1, #6
 8003726:	201c      	movs	r0, #28
		__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim2_up_ch3);
 8003728:	63b5      	str	r5, [r6, #56]	; 0x38
		HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800372a:	f001 fcbb 	bl	80050a4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800372e:	201c      	movs	r0, #28
 8003730:	f001 fcfe 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 8003734:	b00f      	add	sp, #60	; 0x3c
 8003736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_TIM3_CLK_ENABLE();
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_TIM_Base_MspInit+0x1a8>)
		HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800373c:	4622      	mov	r2, r4
 800373e:	2106      	movs	r1, #6
 8003740:	201d      	movs	r0, #29
		__HAL_RCC_TIM3_CLK_ENABLE();
 8003742:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003744:	f044 0402 	orr.w	r4, r4, #2
 8003748:	641c      	str	r4, [r3, #64]	; 0x40
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	9305      	str	r3, [sp, #20]
 8003752:	9b05      	ldr	r3, [sp, #20]
		HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8003754:	f001 fca6 	bl	80050a4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003758:	201d      	movs	r0, #29
 800375a:	f001 fce9 	bl	8005130 <HAL_NVIC_EnableIRQ>
 800375e:	e773      	b.n	8003648 <HAL_TIM_Base_MspInit+0x54>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_TIM_Base_MspInit+0x1a8>)
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003762:	4622      	mov	r2, r4
 8003764:	2106      	movs	r1, #6
 8003766:	2036      	movs	r0, #54	; 0x36
		__HAL_RCC_TIM6_CLK_ENABLE();
 8003768:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800376a:	f044 0410 	orr.w	r4, r4, #16
 800376e:	641c      	str	r4, [r3, #64]	; 0x40
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	9307      	str	r3, [sp, #28]
 8003778:	9b07      	ldr	r3, [sp, #28]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800377a:	f001 fc93 	bl	80050a4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800377e:	2036      	movs	r0, #54	; 0x36
 8003780:	f001 fcd6 	bl	8005130 <HAL_NVIC_EnableIRQ>
 8003784:	e760      	b.n	8003648 <HAL_TIM_Base_MspInit+0x54>
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40001000 	.word	0x40001000
 8003798:	40001400 	.word	0x40001400
 800379c:	40023800 	.word	0x40023800
 80037a0:	20021c1c 	.word	0x20021c1c
 80037a4:	40020000 	.word	0x40020000
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40026028 	.word	0x40026028

080037b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (htim->Instance == TIM3) {
 80037b0:	6802      	ldr	r2, [r0, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037b2:	2300      	movs	r3, #0
	if (htim->Instance == TIM3) {
 80037b4:	491c      	ldr	r1, [pc, #112]	; (8003828 <HAL_TIM_MspPostInit+0x78>)
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 80037b6:	b530      	push	{r4, r5, lr}
	if (htim->Instance == TIM3) {
 80037b8:	428a      	cmp	r2, r1
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 80037ba:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037bc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80037c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80037c4:	9307      	str	r3, [sp, #28]
	if (htim->Instance == TIM3) {
 80037c6:	d019      	beq.n	80037fc <HAL_TIM_MspPostInit+0x4c>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	} else if (htim->Instance == TIM4) {
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_TIM_MspPostInit+0x7c>)
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d001      	beq.n	80037d2 <HAL_TIM_MspPostInit+0x22>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 80037ce:	b009      	add	sp, #36	; 0x24
 80037d0:	bd30      	pop	{r4, r5, pc}
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2402      	movs	r4, #2
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037d8:	f44f 7580 	mov.w	r5, #256	; 0x100
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037dc:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e0:	4813      	ldr	r0, [pc, #76]	; (8003830 <HAL_TIM_MspPostInit+0x80>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80037e2:	4322      	orrs	r2, r4
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037e8:	9503      	str	r5, [sp, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	4023      	ands	r3, r4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ee:	9407      	str	r4, [sp, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f4:	f003 fdea 	bl	80073cc <HAL_GPIO_Init>
}
 80037f8:	b009      	add	sp, #36	; 0x24
 80037fa:	bd30      	pop	{r4, r5, pc}
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_TIM_MspPostInit+0x84>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2402      	movs	r4, #2
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003800:	2580      	movs	r5, #128	; 0x80
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003802:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003806:	480c      	ldr	r0, [pc, #48]	; (8003838 <HAL_TIM_MspPostInit+0x88>)
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003808:	f042 0204 	orr.w	r2, r2, #4
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003810:	9503      	str	r5, [sp, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003812:	f003 0304 	and.w	r3, r3, #4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003818:	9407      	str	r4, [sp, #28]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381e:	f003 fdd5 	bl	80073cc <HAL_GPIO_Init>
}
 8003822:	b009      	add	sp, #36	; 0x24
 8003824:	bd30      	pop	{r4, r5, pc}
 8003826:	bf00      	nop
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40020400 	.word	0x40020400
 8003834:	40023800 	.word	0x40023800
 8003838:	40020800 	.word	0x40020800

0800383c <HAL_UART_MspInit>:
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (huart->Instance == UART4) {
 800383c:	4aad      	ldr	r2, [pc, #692]	; (8003af4 <HAL_UART_MspInit+0x2b8>)
 800383e:	6803      	ldr	r3, [r0, #0]
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8003840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (huart->Instance == UART4) {
 8003844:	4293      	cmp	r3, r2
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8003846:	b097      	sub	sp, #92	; 0x5c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8003850:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8003854:	9415      	str	r4, [sp, #84]	; 0x54
	if (huart->Instance == UART4) {
 8003856:	d035      	beq.n	80038c4 <HAL_UART_MspInit+0x88>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

		/* USER CODE BEGIN UART4_MspInit 1 */

		/* USER CODE END UART4_MspInit 1 */
	} else if (huart->Instance == UART5) {
 8003858:	4aa7      	ldr	r2, [pc, #668]	; (8003af8 <HAL_UART_MspInit+0x2bc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d07b      	beq.n	8003956 <HAL_UART_MspInit+0x11a>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

		/* USER CODE BEGIN UART5_MspInit 1 */

		/* USER CODE END UART5_MspInit 1 */
	} else if (huart->Instance == UART7) {
 800385e:	4aa7      	ldr	r2, [pc, #668]	; (8003afc <HAL_UART_MspInit+0x2c0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f000 80ac 	beq.w	80039be <HAL_UART_MspInit+0x182>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

		/* USER CODE BEGIN UART7_MspInit 1 */

		/* USER CODE END UART7_MspInit 1 */
	} else if (huart->Instance == USART2) {
 8003866:	4aa6      	ldr	r2, [pc, #664]	; (8003b00 <HAL_UART_MspInit+0x2c4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	f000 80cb 	beq.w	8003a04 <HAL_UART_MspInit+0x1c8>
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	} else if (huart->Instance == USART3) {
 800386e:	4aa5      	ldr	r2, [pc, #660]	; (8003b04 <HAL_UART_MspInit+0x2c8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d006      	beq.n	8003882 <HAL_UART_MspInit+0x46>
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	} else if (huart->Instance == USART6) {
 8003874:	4aa4      	ldr	r2, [pc, #656]	; (8003b08 <HAL_UART_MspInit+0x2cc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	f000 80e4 	beq.w	8003a44 <HAL_UART_MspInit+0x208>
		/* USER CODE BEGIN USART6_MspInit 1 */

		/* USER CODE END USART6_MspInit 1 */
	}

}
 800387c:	b017      	add	sp, #92	; 0x5c
 800387e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_USART3_CLK_ENABLE();
 8003882:	4ba2      	ldr	r3, [pc, #648]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8003884:	f44f 7040 	mov.w	r0, #768	; 0x300
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003888:	2612      	movs	r6, #18
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388a:	2503      	movs	r5, #3
		__HAL_RCC_USART3_CLK_ENABLE();
 800388c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800388e:	2407      	movs	r4, #7
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003890:	a911      	add	r1, sp, #68	; 0x44
		__HAL_RCC_USART3_CLK_ENABLE();
 8003892:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
 8003898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800389e:	920c      	str	r2, [sp, #48]	; 0x30
 80038a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80038a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a4:	f042 0208 	orr.w	r2, r2, #8
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 80038ac:	9011      	str	r0, [sp, #68]	; 0x44
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80038ae:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b2:	4897      	ldr	r0, [pc, #604]	; (8003b10 <HAL_UART_MspInit+0x2d4>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b4:	9612      	str	r6, [sp, #72]	; 0x48
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80038b6:	930d      	str	r3, [sp, #52]	; 0x34
 80038b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038ba:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038be:	f003 fd85 	bl	80073cc <HAL_GPIO_Init>
 80038c2:	e7db      	b.n	800387c <HAL_UART_MspInit+0x40>
		__HAL_RCC_UART4_CLK_ENABLE();
 80038c4:	4b91      	ldr	r3, [pc, #580]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2702      	movs	r7, #2
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_15;
 80038c8:	f248 0001 	movw	r0, #32769	; 0x8001
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038cc:	2603      	movs	r6, #3
		__HAL_RCC_UART4_CLK_ENABLE();
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038d0:	2508      	movs	r5, #8
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d2:	a911      	add	r1, sp, #68	; 0x44
		__HAL_RCC_UART4_CLK_ENABLE();
 80038d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
 80038da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038dc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80038e0:	9201      	str	r2, [sp, #4]
 80038e2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	f002 0201 	and.w	r2, r2, #1
 80038f2:	9202      	str	r2, [sp, #8]
 80038f4:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f8:	433a      	orrs	r2, r7
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	403a      	ands	r2, r7
 8003900:	9203      	str	r2, [sp, #12]
 8003902:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	f042 0204 	orr.w	r2, r2, #4
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_15;
 800390e:	9011      	str	r0, [sp, #68]	; 0x44
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003910:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	487f      	ldr	r0, [pc, #508]	; (8003b14 <HAL_UART_MspInit+0x2d8>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	9712      	str	r7, [sp, #72]	; 0x48
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800391c:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003920:	f003 fd54 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003928:	a911      	add	r1, sp, #68	; 0x44
 800392a:	487b      	ldr	r0, [pc, #492]	; (8003b18 <HAL_UART_MspInit+0x2dc>)
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800392c:	9311      	str	r3, [sp, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	9712      	str	r7, [sp, #72]	; 0x48
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	9413      	str	r4, [sp, #76]	; 0x4c
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003932:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f003 fd49 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800393a:	f44f 6300 	mov.w	r3, #2048	; 0x800
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	a911      	add	r1, sp, #68	; 0x44
 8003940:	4876      	ldr	r0, [pc, #472]	; (8003b1c <HAL_UART_MspInit+0x2e0>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	9712      	str	r7, [sp, #72]	; 0x48
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	9413      	str	r4, [sp, #76]	; 0x4c
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003946:	9311      	str	r3, [sp, #68]	; 0x44
		GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003948:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f003 fd3e 	bl	80073cc <HAL_GPIO_Init>
}
 8003950:	b017      	add	sp, #92	; 0x5c
 8003952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_UART5_CLK_ENABLE();
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2702      	movs	r7, #2
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800395a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2603      	movs	r6, #3
		__HAL_RCC_UART5_CLK_ENABLE();
 8003960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003962:	2508      	movs	r5, #8
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003964:	a911      	add	r1, sp, #68	; 0x44
 8003966:	486c      	ldr	r0, [pc, #432]	; (8003b18 <HAL_UART_MspInit+0x2dc>)
		__HAL_RCC_UART5_CLK_ENABLE();
 8003968:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003974:	9205      	str	r2, [sp, #20]
 8003976:	9a05      	ldr	r2, [sp, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397a:	433a      	orrs	r2, r7
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	403a      	ands	r2, r7
 8003982:	9206      	str	r2, [sp, #24]
 8003984:	9a06      	ldr	r2, [sp, #24]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003988:	f042 0204 	orr.w	r2, r2, #4
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003990:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003994:	f003 0304 	and.w	r3, r3, #4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	9712      	str	r7, [sp, #72]	; 0x48
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	9614      	str	r6, [sp, #80]	; 0x50
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800399c:	9307      	str	r3, [sp, #28]
 800399e:	9b07      	ldr	r3, [sp, #28]
		GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039a0:	9515      	str	r5, [sp, #84]	; 0x54
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f003 fd13 	bl	80073cc <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a6:	a911      	add	r1, sp, #68	; 0x44
 80039a8:	485c      	ldr	r0, [pc, #368]	; (8003b1c <HAL_UART_MspInit+0x2e0>)
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	9413      	str	r4, [sp, #76]	; 0x4c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
		GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039b0:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b4:	f003 fd0a 	bl	80073cc <HAL_GPIO_Init>
}
 80039b8:	b017      	add	sp, #92	; 0x5c
 80039ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_UART7_CLK_ENABLE();
 80039be:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80039c0:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2602      	movs	r6, #2
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039c6:	a911      	add	r1, sp, #68	; 0x44
		__HAL_RCC_UART7_CLK_ENABLE();
 80039c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2503      	movs	r5, #3
		GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039cc:	2408      	movs	r4, #8
		__HAL_RCC_UART7_CLK_ENABLE();
 80039ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039da:	9208      	str	r2, [sp, #32]
 80039dc:	9a08      	ldr	r2, [sp, #32]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80039de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e0:	f042 0220 	orr.w	r2, r2, #32
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80039e8:	9011      	str	r0, [sp, #68]	; 0x44
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80039ea:	f003 0320 	and.w	r3, r3, #32
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039ee:	484c      	ldr	r0, [pc, #304]	; (8003b20 <HAL_UART_MspInit+0x2e4>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	9612      	str	r6, [sp, #72]	; 0x48
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80039f2:	9309      	str	r3, [sp, #36]	; 0x24
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80039f6:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039fa:	f003 fce7 	bl	80073cc <HAL_GPIO_Init>
}
 80039fe:	b017      	add	sp, #92	; 0x5c
 8003a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_RCC_USART2_CLK_ENABLE();
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003a06:	2070      	movs	r0, #112	; 0x70
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2602      	movs	r6, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0a:	2503      	movs	r5, #3
		__HAL_RCC_USART2_CLK_ENABLE();
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a0e:	2407      	movs	r4, #7
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a10:	a911      	add	r1, sp, #68	; 0x44
		__HAL_RCC_USART2_CLK_ENABLE();
 8003a12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a1e:	920a      	str	r2, [sp, #40]	; 0x28
 8003a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	f042 0208 	orr.w	r2, r2, #8
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8003a2c:	9011      	str	r0, [sp, #68]	; 0x44
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a32:	4837      	ldr	r0, [pc, #220]	; (8003b10 <HAL_UART_MspInit+0x2d4>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	9612      	str	r6, [sp, #72]	; 0x48
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a3a:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a3e:	f003 fcc5 	bl	80073cc <HAL_GPIO_Init>
 8003a42:	e71b      	b.n	800387c <HAL_UART_MspInit+0x40>
		__HAL_RCC_USART6_CLK_ENABLE();
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_UART_MspInit+0x2d0>)
 8003a46:	4605      	mov	r5, r0
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a48:	f44f 7040 	mov.w	r0, #768	; 0x300
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a4c:	2708      	movs	r7, #8
		__HAL_RCC_USART6_CLK_ENABLE();
 8003a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	f04f 0902 	mov.w	r9, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	f04f 0803 	mov.w	r8, #3
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a58:	a911      	add	r1, sp, #68	; 0x44
		__HAL_RCC_USART6_CLK_ENABLE();
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
		hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a5e:	4e31      	ldr	r6, [pc, #196]	; (8003b24 <HAL_UART_MspInit+0x2e8>)
		__HAL_RCC_USART6_CLK_ENABLE();
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
 8003a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a64:	f002 0220 	and.w	r2, r2, #32
 8003a68:	920e      	str	r2, [sp, #56]	; 0x38
 8003a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8003a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003a7a:	920f      	str	r2, [sp, #60]	; 0x3c
 8003a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a80:	f042 0204 	orr.w	r2, r2, #4
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003a88:	9011      	str	r0, [sp, #68]	; 0x44
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a8a:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a8e:	4826      	ldr	r0, [pc, #152]	; (8003b28 <HAL_UART_MspInit+0x2ec>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a94:	9310      	str	r3, [sp, #64]	; 0x40
 8003a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a98:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a9c:	f003 fc96 	bl	80073cc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aa0:	2340      	movs	r3, #64	; 0x40
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa2:	a911      	add	r1, sp, #68	; 0x44
 8003aa4:	481d      	ldr	r0, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0x2e0>)
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aa6:	9311      	str	r3, [sp, #68]	; 0x44
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	9413      	str	r4, [sp, #76]	; 0x4c
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003aae:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab2:	f003 fc8b 	bl	80073cc <HAL_GPIO_Init>
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003ab6:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
		hdma_usart6_rx.Instance = DMA2_Stream1;
 8003aba:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003b2c <HAL_UART_MspInit+0x2f0>
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
		hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8003aca:	4630      	mov	r0, r6
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003acc:	6274      	str	r4, [r6, #36]	; 0x24
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ace:	6131      	str	r1, [r6, #16]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ad0:	e9c6 4402 	strd	r4, r4, [r6, #8]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ad4:	e9c6 4405 	strd	r4, r4, [r6, #20]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003ad8:	e9c6 c700 	strd	ip, r7, [r6]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003adc:	e9c6 2307 	strd	r2, r3, [r6, #28]
		if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK) {
 8003ae0:	f001 fdb2 	bl	8005648 <HAL_DMA_Init>
 8003ae4:	b910      	cbnz	r0, 8003aec <HAL_UART_MspInit+0x2b0>
		__HAL_LINKDMA(huart, hdmarx, hdma_usart6_rx);
 8003ae6:	66ee      	str	r6, [r5, #108]	; 0x6c
 8003ae8:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8003aea:	e6c7      	b.n	800387c <HAL_UART_MspInit+0x40>
			Error_Handler();
 8003aec:	f7fd fd18 	bl	8001520 <Error_Handler>
 8003af0:	e7f9      	b.n	8003ae6 <HAL_UART_MspInit+0x2aa>
 8003af2:	bf00      	nop
 8003af4:	40004c00 	.word	0x40004c00
 8003af8:	40005000 	.word	0x40005000
 8003afc:	40007800 	.word	0x40007800
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40004800 	.word	0x40004800
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020c00 	.word	0x40020c00
 8003b14:	40020000 	.word	0x40020000
 8003b18:	40020400 	.word	0x40020400
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40021400 	.word	0x40021400
 8003b24:	200218f8 	.word	0x200218f8
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40026428 	.word	0x40026428

08003b30 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003b30:	b570      	push	{r4, r5, r6, lr}
	uint32_t uwTimclock = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;

	/*Configure the TIM12 IRQ priority */
	HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority, 0);
 8003b32:	4601      	mov	r1, r0
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003b34:	b088      	sub	sp, #32
	HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	202b      	movs	r0, #43	; 0x2b
 8003b3a:	f001 fab3 	bl	80050a4 <HAL_NVIC_SetPriority>

	/* Enable the TIM12 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003b3e:	202b      	movs	r0, #43	; 0x2b
 8003b40:	f001 faf6 	bl	8005130 <HAL_NVIC_EnableIRQ>

	/* Enable TIM12 clock */
	__HAL_RCC_TIM12_CLK_ENABLE();
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_InitTick+0x6c>)

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b46:	a901      	add	r1, sp, #4
 8003b48:	a803      	add	r0, sp, #12
	__HAL_RCC_TIM12_CLK_ENABLE();
 8003b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40

	/* Compute TIM12 clock */
	uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();

	/* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b4c:	4e14      	ldr	r6, [pc, #80]	; (8003ba0 <HAL_InitTick+0x70>)
	__HAL_RCC_TIM12_CLK_ENABLE();
 8003b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40

	/* Initialize TIM12 */
	htim12.Instance = TIM12;
 8003b52:	4c14      	ldr	r4, [pc, #80]	; (8003ba4 <HAL_InitTick+0x74>)
 8003b54:	4d14      	ldr	r5, [pc, #80]	; (8003ba8 <HAL_InitTick+0x78>)
	__HAL_RCC_TIM12_CLK_ENABLE();
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	9b02      	ldr	r3, [sp, #8]
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b62:	f005 fd99 	bl	8009698 <HAL_RCC_GetClockConfig>
	uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8003b66:	f005 fd77 	bl	8009658 <HAL_RCC_GetPCLK1Freq>
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim12.Init.Period = (1000000 / 1000) - 1;
	htim12.Init.Prescaler = uwPrescalerValue;
	htim12.Init.ClockDivision = 0;
 8003b6a:	2200      	movs	r2, #0
	uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8003b6c:	0043      	lsls	r3, r0, #1
	htim12.Init.Period = (1000000 / 1000) - 1;
 8003b6e:	f240 31e7 	movw	r1, #999	; 0x3e7
	htim12.Instance = TIM12;
 8003b72:	6025      	str	r5, [r4, #0]
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b74:	fba6 0303 	umull	r0, r3, r6, r3
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
	if (HAL_TIM_Base_Init(&htim12) == HAL_OK) {
 8003b78:	4620      	mov	r0, r4
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	3b01      	subs	r3, #1
	htim12.Init.ClockDivision = 0;
 8003b7e:	e9c4 1203 	strd	r1, r2, [r4, #12]
	htim12.Init.Prescaler = uwPrescalerValue;
 8003b82:	e9c4 3201 	strd	r3, r2, [r4, #4]
	if (HAL_TIM_Base_Init(&htim12) == HAL_OK) {
 8003b86:	f007 fec5 	bl	800b914 <HAL_TIM_Base_Init>
 8003b8a:	b110      	cbz	r0, 8003b92 <HAL_InitTick+0x62>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim12);
	}

	/* Return function status */
	return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
}
 8003b8e:	b008      	add	sp, #32
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_TIM_Base_Start_IT(&htim12);
 8003b92:	4620      	mov	r0, r4
 8003b94:	f007 f94a 	bl	800ae2c <HAL_TIM_Base_Start_IT>
}
 8003b98:	b008      	add	sp, #32
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	431bde83 	.word	0x431bde83
 8003ba4:	20022318 	.word	0x20022318
 8003ba8:	40001800 	.word	0x40001800

08003bac <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003bb0:	e7fe      	b.n	8003bb0 <HardFault_Handler>
 8003bb2:	bf00      	nop

08003bb4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003bb4:	e7fe      	b.n	8003bb4 <MemManage_Handler>
 8003bb6:	bf00      	nop

08003bb8 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003bb8:	e7fe      	b.n	8003bb8 <BusFault_Handler>
 8003bba:	bf00      	nop

08003bbc <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003bbc:	e7fe      	b.n	8003bbc <UsageFault_Handler>
 8003bbe:	bf00      	nop

08003bc0 <RCC_IRQHandler>:
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <DMA1_Stream1_IRQHandler>:
 */
void DMA1_Stream1_IRQHandler(void) {
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8003bc4:	4801      	ldr	r0, [pc, #4]	; (8003bcc <DMA1_Stream1_IRQHandler+0x8>)
 8003bc6:	f001 bfbb 	b.w	8005b40 <HAL_DMA_IRQHandler>
 8003bca:	bf00      	nop
 8003bcc:	20021c1c 	.word	0x20021c1c

08003bd0 <DMA1_Stream5_IRQHandler>:
 */
void DMA1_Stream5_IRQHandler(void) {
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1);
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <DMA1_Stream5_IRQHandler+0x8>)
 8003bd2:	f001 bfb5 	b.w	8005b40 <HAL_DMA_IRQHandler>
 8003bd6:	bf00      	nop
 8003bd8:	20021d20 	.word	0x20021d20

08003bdc <ADC_IRQHandler>:
}

/**
 * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
 */
void ADC_IRQHandler(void) {
 8003bdc:	b508      	push	{r3, lr}
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <ADC_IRQHandler+0x18>)
 8003be0:	f001 f84a 	bl	8004c78 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 8003be4:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <ADC_IRQHandler+0x1c>)
 8003be6:	f001 f847 	bl	8004c78 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc3);
 8003bea:	4804      	ldr	r0, [pc, #16]	; (8003bfc <ADC_IRQHandler+0x20>)
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 8003bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_IRQHandler(&hadc3);
 8003bf0:	f001 b842 	b.w	8004c78 <HAL_ADC_IRQHandler>
 8003bf4:	20021e00 	.word	0x20021e00
 8003bf8:	20021afc 	.word	0x20021afc
 8003bfc:	20021e48 	.word	0x20021e48

08003c00 <TIM2_IRQHandler>:
 */
void TIM2_IRQHandler(void) {
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <TIM2_IRQHandler+0x8>)
 8003c02:	f007 bd53 	b.w	800b6ac <HAL_TIM_IRQHandler>
 8003c06:	bf00      	nop
 8003c08:	20022118 	.word	0x20022118

08003c0c <TIM3_IRQHandler>:
 */
void TIM3_IRQHandler(void) {
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <TIM3_IRQHandler+0x8>)
 8003c0e:	f007 bd4d 	b.w	800b6ac <HAL_TIM_IRQHandler>
 8003c12:	bf00      	nop
 8003c14:	20021c7c 	.word	0x20021c7c

08003c18 <USART2_IRQHandler>:
 */
void USART2_IRQHandler(void) {
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <USART2_IRQHandler+0x8>)
 8003c1a:	f009 baa7 	b.w	800d16c <HAL_UART_IRQHandler>
 8003c1e:	bf00      	nop
 8003c20:	20022158 	.word	0x20022158

08003c24 <EXTI15_10_IRQHandler>:
 */
void EXTI15_10_IRQHandler(void) {
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c28:	f003 bdb8 	b.w	800779c <HAL_GPIO_EXTI_IRQHandler>

08003c2c <TIM8_BRK_TIM12_IRQHandler>:
 */
void TIM8_BRK_TIM12_IRQHandler(void) {
	/* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

	/* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
	HAL_TIM_IRQHandler(&htim12);
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8003c2e:	f007 bd3d 	b.w	800b6ac <HAL_TIM_IRQHandler>
 8003c32:	bf00      	nop
 8003c34:	20022318 	.word	0x20022318

08003c38 <TIM6_DAC_IRQHandler>:
}

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8003c38:	b508      	push	{r3, lr}
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_DAC_IRQHandler(&hdac);
 8003c3a:	4804      	ldr	r0, [pc, #16]	; (8003c4c <TIM6_DAC_IRQHandler+0x14>)
 8003c3c:	f001 fc54 	bl	80054e8 <HAL_DAC_IRQHandler>
	HAL_TIM_IRQHandler(&htim6);
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <TIM6_DAC_IRQHandler+0x18>)
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim6);
 8003c46:	f007 bd31 	b.w	800b6ac <HAL_TIM_IRQHandler>
 8003c4a:	bf00      	nop
 8003c4c:	20021ea0 	.word	0x20021ea0
 8003c50:	20021f80 	.word	0x20021f80

08003c54 <DMA2_Stream1_IRQHandler>:
 */
void DMA2_Stream1_IRQHandler(void) {
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c54:	4801      	ldr	r0, [pc, #4]	; (8003c5c <DMA2_Stream1_IRQHandler+0x8>)
 8003c56:	f001 bf73 	b.w	8005b40 <HAL_DMA_IRQHandler>
 8003c5a:	bf00      	nop
 8003c5c:	200218f8 	.word	0x200218f8

08003c60 <DMA2_Stream4_IRQHandler>:
 */
void DMA2_Stream4_IRQHandler(void) {
	/* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	/* USER CODE END DMA2_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <DMA2_Stream4_IRQHandler+0x8>)
 8003c62:	f001 bf6d 	b.w	8005b40 <HAL_DMA_IRQHandler>
 8003c66:	bf00      	nop
 8003c68:	20021f1c 	.word	0x20021f1c

08003c6c <ETH_IRQHandler>:
 */
void ETH_IRQHandler(void) {
	/* USER CODE BEGIN ETH_IRQn 0 */

	/* USER CODE END ETH_IRQn 0 */
	HAL_ETH_IRQHandler(&heth);
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <ETH_IRQHandler+0x8>)
 8003c6e:	f002 beb9 	b.w	80069e4 <HAL_ETH_IRQHandler>
 8003c72:	bf00      	nop
 8003c74:	20024144 	.word	0x20024144

08003c78 <OTG_FS_IRQHandler>:
 */
void OTG_FS_IRQHandler(void) {
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <OTG_FS_IRQHandler+0x8>)
 8003c7a:	f004 bbbf 	b.w	80083fc <HAL_PCD_IRQHandler>
 8003c7e:	bf00      	nop
 8003c80:	2003507c 	.word	0x2003507c

08003c84 <USART6_IRQHandler>:
 */
void USART6_IRQHandler(void) {
	/* USER CODE BEGIN USART6_IRQn 0 */

	/* USER CODE END USART6_IRQn 0 */
	HAL_UART_IRQHandler(&huart6);
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <USART6_IRQHandler+0x8>)
 8003c86:	f009 ba71 	b.w	800d16c <HAL_UART_IRQHandler>
 8003c8a:	bf00      	nop
 8003c8c:	20022014 	.word	0x20022014

08003c90 <FPU_IRQHandler>:
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <MDIOS_IRQHandler>:
 */
void MDIOS_IRQHandler(void) {
	/* USER CODE BEGIN MDIOS_IRQn 0 */

	/* USER CODE END MDIOS_IRQn 0 */
	HAL_MDIOS_IRQHandler(&hmdios);
 8003c94:	4801      	ldr	r0, [pc, #4]	; (8003c9c <MDIOS_IRQHandler+0x8>)
 8003c96:	f004 baa1 	b.w	80081dc <HAL_MDIOS_IRQHandler>
 8003c9a:	bf00      	nop
 8003c9c:	20021e90 	.word	0x20021e90

08003ca0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003ca0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003ca2:	1e16      	subs	r6, r2, #0
 8003ca4:	dd07      	ble.n	8003cb6 <_read+0x16>
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8003caa:	f3af 8000 	nop.w
 8003cae:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003cb2:	42a5      	cmp	r5, r4
 8003cb4:	d1f9      	bne.n	8003caa <_read+0xa>
	}

	return len;
}
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	bf00      	nop

08003cbc <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8003cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003cc8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003cca:	604b      	str	r3, [r1, #4]
}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop

08003cd0 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	4770      	bx	lr

08003cd4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	4770      	bx	lr

08003cd8 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003cd8:	490d      	ldr	r1, [pc, #52]	; (8003d10 <_sbrk+0x38>)
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8003cdc:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8003cde:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <_sbrk+0x40>)
 8003ce2:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8003ce4:	b183      	cbz	r3, 8003d08 <_sbrk+0x30>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003ce6:	4418      	add	r0, r3
 8003ce8:	4290      	cmp	r0, r2
 8003cea:	d804      	bhi.n	8003cf6 <_sbrk+0x1e>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8003cec:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf4:	4770      	bx	lr
		errno = ENOMEM;
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <_sbrk+0x44>)
 8003cf8:	210c      	movs	r1, #12
		return (void*) -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8003d02:	6011      	str	r1, [r2, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8003d08:	4c05      	ldr	r4, [pc, #20]	; (8003d20 <_sbrk+0x48>)
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	600c      	str	r4, [r1, #0]
 8003d0e:	e7ea      	b.n	8003ce6 <_sbrk+0xe>
 8003d10:	200008ac 	.word	0x200008ac
 8003d14:	20080000 	.word	0x20080000
 8003d18:	00008000 	.word	0x00008000
 8003d1c:	20033bd8 	.word	0x20033bd8
 8003d20:	20035480 	.word	0x20035480

08003d24 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d28:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003d2c:	490f      	ldr	r1, [pc, #60]	; (8003d6c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d2e:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8003d32:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d34:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8003d38:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8003d3a:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d3c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 8003d40:	4e0b      	ldr	r6, [pc, #44]	; (8003d70 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 8003d42:	f040 0001 	orr.w	r0, r0, #1
 8003d46:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8003d48:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	4001      	ands	r1, r0
 8003d4e:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8003d50:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003d58:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8003d5a:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d5c:	6095      	str	r5, [r2, #8]
#endif
}
 8003d5e:	bc70      	pop	{r4, r5, r6}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	fef6ffff 	.word	0xfef6ffff
 8003d70:	24003010 	.word	0x24003010

08003d74 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8003d74:	680b      	ldr	r3, [r1, #0]
 8003d76:	b113      	cbz	r3, 8003d7e <dnsfound+0xa>
		ip_ready = -1;
	} else
		ip_ready = ipaddr->addr;
 8003d78:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <dnsfound+0x14>)
 8003d7a:	6013      	str	r3, [r2, #0]
}
 8003d7c:	4770      	bx	lr
		ip_ready = -1;
 8003d7e:	4b02      	ldr	r3, [pc, #8]	; (8003d88 <dnsfound+0x14>)
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	4770      	bx	lr
 8003d88:	200008b8 	.word	0x200008b8

08003d8c <myreboot>:
	printf("%s, ... rebooting\n", msg);
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	480a      	ldr	r0, [pc, #40]	; (8003db8 <myreboot+0x2c>)
void myreboot(char *msg) {
 8003d90:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8003d92:	f019 fc29 	bl	801d5e8 <iprintf>
	osDelay(2000);
 8003d96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d9a:	f00b fe2d 	bl	800f9f8 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8003d9e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003da6:	68ca      	ldr	r2, [r1, #12]
 8003da8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <myreboot+0x28>
 8003db8:	08020d90 	.word	0x08020d90
 8003dbc:	e000ed00 	.word	0xe000ed00
 8003dc0:	05fa0004 	.word	0x05fa0004

08003dc4 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8003dc4:	b500      	push	{lr}
 8003dc6:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8003dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <sendudp+0x68>)
 8003dce:	f015 fb05 	bl	80193dc <udp_sendto>
 8003dd2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8003dd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003dda:	b25b      	sxtb	r3, r3
 8003ddc:	b93b      	cbnz	r3, 8003dee <sendudp+0x2a>
		busycount = 0;
 8003dde:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <sendudp+0x6c>)
 8003de0:	6013      	str	r3, [r2, #0]
	return (err);
 8003de2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003de6:	b240      	sxtb	r0, r0
 8003de8:	b003      	add	sp, #12
 8003dea:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8003dee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003df2:	4810      	ldr	r0, [pc, #64]	; (8003e34 <sendudp+0x70>)
 8003df4:	b249      	sxtb	r1, r1
 8003df6:	f019 fbf7 	bl	801d5e8 <iprintf>
		vTaskDelay(1999); //some delay!
 8003dfa:	f240 70cf 	movw	r0, #1999	; 0x7cf
 8003dfe:	f00c ff59 	bl	8010cb4 <vTaskDelay>
		if (err == ERR_MEM) {
 8003e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e06:	2bff      	cmp	r3, #255	; 0xff
 8003e08:	d00c      	beq.n	8003e24 <sendudp+0x60>
		if (err == ERR_USE) {
 8003e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e0e:	2bf8      	cmp	r3, #248	; 0xf8
 8003e10:	d1e7      	bne.n	8003de2 <sendudp+0x1e>
			if (busycount++ > 10)
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <sendudp+0x6c>)
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	2b0a      	cmp	r3, #10
 8003e1a:	6011      	str	r1, [r2, #0]
 8003e1c:	dde1      	ble.n	8003de2 <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <sendudp+0x74>)
 8003e20:	f7ff ffb4 	bl	8003d8c <myreboot>
			myreboot("sendudp: out of mem");
 8003e24:	4805      	ldr	r0, [pc, #20]	; (8003e3c <sendudp+0x78>)
 8003e26:	f7ff ffb1 	bl	8003d8c <myreboot>
 8003e2a:	bf00      	nop
 8003e2c:	20022368 	.word	0x20022368
 8003e30:	200008b0 	.word	0x200008b0
 8003e34:	08020e04 	.word	0x08020e04
 8003e38:	08020e2c 	.word	0x08020e2c
 8003e3c:	08020e18 	.word	0x08020e18

08003e40 <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e44:	4f27      	ldr	r7, [pc, #156]	; (8003ee4 <sendstatus+0xa4>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003e46:	460c      	mov	r4, r1
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e48:	4d27      	ldr	r5, [pc, #156]	; (8003ee8 <sendstatus+0xa8>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003e4a:	4606      	mov	r6, r0
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e4c:	6839      	ldr	r1, [r7, #0]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003e4e:	4617      	mov	r7, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e50:	6f68      	ldr	r0, [r5, #116]	; 0x74
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003e52:	b082      	sub	sp, #8
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e54:	0209      	lsls	r1, r1, #8
 8003e56:	4a25      	ldr	r2, [pc, #148]	; (8003eec <sendstatus+0xac>)
	statuspkt.adctrigoff = ((TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase))) & 0xFFF) | ((pgagain & 7) << 12);
 8003e58:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8003efc <sendstatus+0xbc>
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e5c:	b289      	uxth	r1, r1
 8003e5e:	4002      	ands	r2, r0
	statuspkt.adctrigoff = ((TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase))) & 0xFFF) | ((pgagain & 7) << 12);
 8003e60:	4823      	ldr	r0, [pc, #140]	; (8003ef0 <sendstatus+0xb0>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e62:	4319      	orrs	r1, r3
	statuspkt.adctrigoff = ((TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase))) & 0xFFF) | ((pgagain & 7) << 12);
 8003e64:	f8dc 3000 	ldr.w	r3, [ip]
 8003e68:	8800      	ldrh	r0, [r0, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e6a:	430a      	orrs	r2, r1
	while (ps->ref != 1) { // old packet not finished with yet
 8003e6c:	89e1      	ldrh	r1, [r4, #14]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabber & 0xff) << 8) | batchid);
 8003e6e:	676a      	str	r2, [r5, #116]	; 0x74
	statuspkt.adctrigoff = ((TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase))) & 0xFFF) | ((pgagain & 7) << 12);
 8003e70:	0302      	lsls	r2, r0, #12
 8003e72:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
 8003e76:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8003e7a:	1a1b      	subs	r3, r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bfb8      	it	lt
 8003e80:	425b      	neglt	r3, r3
	while (ps->ref != 1) { // old packet not finished with yet
 8003e82:	2901      	cmp	r1, #1
	statuspkt.adctrigoff = ((TRIG_THRES + (abs(globaladcnoise - statuspkt.adcbase))) & 0xFFF) | ((pgagain & 7) << 12);
 8003e84:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	ea43 0302 	orr.w	r3, r3, r2
 8003e90:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
	while (ps->ref != 1) { // old packet not finished with yet
 8003e94:	d007      	beq.n	8003ea6 <sendstatus+0x66>
		printf("******* timed status1: ps->ref = %d *******\n", ps->ref);
 8003e96:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003f00 <sendstatus+0xc0>
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	f019 fba4 	bl	801d5e8 <iprintf>
	while (ps->ref != 1) { // old packet not finished with yet
 8003ea0:	89e1      	ldrh	r1, [r4, #14]
 8003ea2:	2901      	cmp	r1, #1
 8003ea4:	d1f9      	bne.n	8003e9a <sendstatus+0x5a>
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8003ea6:	6861      	ldr	r1, [r4, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <sendstatus+0xb4>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8003eb0:	70ce      	strb	r6, [r1, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f7ff ff86 	bl	8003dc4 <sendudp>
	while (ps->ref != 1) { // old packet not finished with yet
 8003eb8:	89e1      	ldrh	r1, [r4, #14]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8003eba:	f88d 0007 	strb.w	r0, [sp, #7]
	while (ps->ref != 1) { // old packet not finished with yet
 8003ebe:	2901      	cmp	r1, #1
 8003ec0:	d009      	beq.n	8003ed6 <sendstatus+0x96>
		printf("******* timed status2: ps->ref = %d *******\n", ps->ref);
 8003ec2:	4e0d      	ldr	r6, [pc, #52]	; (8003ef8 <sendstatus+0xb8>)
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f019 fb8f 	bl	801d5e8 <iprintf>
		vTaskDelay(0); // but we need wait to update the data packet next, so wait
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f00c fef2 	bl	8010cb4 <vTaskDelay>
	while (ps->ref != 1) { // old packet not finished with yet
 8003ed0:	89e1      	ldrh	r1, [r4, #14]
 8003ed2:	2901      	cmp	r1, #1
 8003ed4:	d1f6      	bne.n	8003ec4 <sendstatus+0x84>
	statuspkt.udppknum++;
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	602b      	str	r3, [r5, #0]
}
 8003edc:	b002      	add	sp, #8
 8003ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000724 	.word	0x20000724
 8003ee8:	200217f0 	.word	0x200217f0
 8003eec:	ffff0000 	.word	0xffff0000
 8003ef0:	200002b2 	.word	0x200002b2
 8003ef4:	20022368 	.word	0x20022368
 8003ef8:	08020dd4 	.word	0x08020dd4
 8003efc:	20000720 	.word	0x20000720
 8003f00:	08020da4 	.word	0x08020da4

08003f04 <sendtimedstatus>:
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8003f04:	b470      	push	{r4, r5, r6}
		if ((t1sec != talive) && (t1sec % 120 == 0)) { // this is a temporary mech to send timed status pkts...
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <sendtimedstatus+0x34>)
 8003f08:	4e0c      	ldr	r6, [pc, #48]	; (8003f3c <sendtimedstatus+0x38>)
 8003f0a:	681d      	ldr	r5, [r3, #0]
 8003f0c:	6834      	ldr	r4, [r6, #0]
 8003f0e:	42a5      	cmp	r5, r4
 8003f10:	d008      	beq.n	8003f24 <sendtimedstatus+0x20>
 8003f12:	4c0b      	ldr	r4, [pc, #44]	; (8003f40 <sendtimedstatus+0x3c>)
 8003f14:	fba4 3405 	umull	r3, r4, r4, r5
 8003f18:	09a4      	lsrs	r4, r4, #6
 8003f1a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003f1e:	ebb5 0fc4 	cmp.w	r5, r4, lsl #3
 8003f22:	d001      	beq.n	8003f28 <sendtimedstatus+0x24>
}
 8003f24:	bc70      	pop	{r4, r5, r6}
 8003f26:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8003f28:	4613      	mov	r3, r2
			talive = t1sec;
 8003f2a:	6035      	str	r5, [r6, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	4601      	mov	r1, r0
 8003f30:	2002      	movs	r0, #2
}
 8003f32:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8003f34:	f7ff bf84 	b.w	8003e40 <sendstatus>
 8003f38:	20000868 	.word	0x20000868
 8003f3c:	200008c0 	.word	0x200008c0
 8003f40:	88888889 	.word	0x88888889

08003f44 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	4605      	mov	r5, r0
 8003f48:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
//	osDelay(500);
	ip_ready = 0;
 8003f4a:	2400      	movs	r4, #0
	printf("DNS Resolving %s ", name);
 8003f4c:	4819      	ldr	r0, [pc, #100]	; (8003fb4 <dnslookup+0x70>)
 8003f4e:	4629      	mov	r1, r5
	ip_ready = 0;
 8003f50:	4e19      	ldr	r6, [pc, #100]	; (8003fb8 <dnslookup+0x74>)
	printf("DNS Resolving %s ", name);
 8003f52:	f019 fb49 	bl	801d5e8 <iprintf>
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8003f56:	4628      	mov	r0, r5
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <dnslookup+0x78>)
	ip_ready = 0;
 8003f5e:	6034      	str	r4, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8003f60:	f00f fd9e 	bl	8013aa0 <dns_gethostbyname>
 8003f64:	4605      	mov	r5, r0

	switch (err) {
 8003f66:	3005      	adds	r0, #5
 8003f68:	d007      	beq.n	8003f7a <dnslookup+0x36>
 8003f6a:	b90d      	cbnz	r5, 8003f70 <dnslookup+0x2c>
	default:
		printf("****** gethostbyname failed *****\n ");
		break;
	}
	return (err);
}
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("****** gethostbyname failed *****\n ");
 8003f70:	4813      	ldr	r0, [pc, #76]	; (8003fc0 <dnslookup+0x7c>)
 8003f72:	f019 fb39 	bl	801d5e8 <iprintf>
}
 8003f76:	4628      	mov	r0, r5
 8003f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8003f7a:	4812      	ldr	r0, [pc, #72]	; (8003fc4 <dnslookup+0x80>)
 8003f7c:	2414      	movs	r4, #20
 8003f7e:	f019 fb33 	bl	801d5e8 <iprintf>
 8003f82:	e001      	b.n	8003f88 <dnslookup+0x44>
		for (i = 0; i < 20; i++) {
 8003f84:	3c01      	subs	r4, #1
 8003f86:	d0f3      	beq.n	8003f70 <dnslookup+0x2c>
			osDelay(1000);		// give it 20 seconds
 8003f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f8c:	f00b fd34 	bl	800f9f8 <osDelay>
			printf(".");
 8003f90:	202e      	movs	r0, #46	; 0x2e
 8003f92:	f019 fb41 	bl	801d618 <putchar>
			if (ip_ready) {
 8003f96:	6833      	ldr	r3, [r6, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f3      	beq.n	8003f84 <dnslookup+0x40>
				if (ip_ready == -1) {
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	d003      	beq.n	8003fa8 <dnslookup+0x64>
				return (ERR_OK);
 8003fa0:	2500      	movs	r5, #0
				ip->addr = ip_ready;
 8003fa2:	603b      	str	r3, [r7, #0]
}
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ip->addr = "127.0.0.1";	// safe ?
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <dnslookup+0x84>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8003faa:	f06f 0502 	mvn.w	r5, #2
					ip->addr = "127.0.0.1";	// safe ?
 8003fae:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8003fb0:	e7dc      	b.n	8003f6c <dnslookup+0x28>
 8003fb2:	bf00      	nop
 8003fb4:	08020cec 	.word	0x08020cec
 8003fb8:	200008b8 	.word	0x200008b8
 8003fbc:	08003d75 	.word	0x08003d75
 8003fc0:	08020d28 	.word	0x08020d28
 8003fc4:	08020d00 	.word	0x08020d00
 8003fc8:	08020d1c 	.word	0x08020d1c

08003fcc <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8003fcc:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8003fce:	4913      	ldr	r1, [pc, #76]	; (800401c <locateudp+0x50>)
{
 8003fd0:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 8003fd2:	4813      	ldr	r0, [pc, #76]	; (8004020 <locateudp+0x54>)
 8003fd4:	f019 fb08 	bl	801d5e8 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8003fd8:	4912      	ldr	r1, [pc, #72]	; (8004024 <locateudp+0x58>)
 8003fda:	4810      	ldr	r0, [pc, #64]	; (800401c <locateudp+0x50>)
 8003fdc:	f7ff ffb2 	bl	8003f44 <dnslookup>
 8003fe0:	b240      	sxtb	r0, r0
 8003fe2:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8003fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003fea:	b10b      	cbz	r3, 8003ff0 <locateudp+0x24>
		rebootme();
 8003fec:	f7fc ffa0 	bl	8000f30 <rebootme>

	ip = udpdestip.addr;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <locateudp+0x5c>)
	ip = udpdestip.addr;
 8003ff4:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8003ff6:	480d      	ldr	r0, [pc, #52]	; (800402c <locateudp+0x60>)
 8003ff8:	0e22      	lsrs	r2, r4, #24
 8003ffa:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003ffe:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004002:	9201      	str	r2, [sp, #4]
 8004004:	b2e2      	uxtb	r2, r4
 8004006:	9500      	str	r5, [sp, #0]
 8004008:	f019 fc12 	bl	801d830 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 800400c:	4907      	ldr	r1, [pc, #28]	; (800402c <locateudp+0x60>)
 800400e:	4808      	ldr	r0, [pc, #32]	; (8004030 <locateudp+0x64>)
 8004010:	f019 faea 	bl	801d5e8 <iprintf>
	return (ip);
}
 8004014:	4620      	mov	r0, r4
 8004016:	b005      	add	sp, #20
 8004018:	bd30      	pop	{r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	2002236c 	.word	0x2002236c
 8004020:	08020d4c 	.word	0x08020d4c
 8004024:	20022368 	.word	0x20022368
 8004028:	08020d6c 	.word	0x08020d6c
 800402c:	20022358 	.word	0x20022358
 8004030:	08020d7c 	.word	0x08020d7c

08004034 <startudp>:

void startudp(uint32_t ip) {
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	b085      	sub	sp, #20

	static uint8_t lastadcbatchid = 0;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800403a:	f00c ff8b 	bl	8010f54 <xTaskGetCurrentTaskHandle>
 800403e:	4b6e      	ldr	r3, [pc, #440]	; (80041f8 <startudp+0x1c4>)
 8004040:	6018      	str	r0, [r3, #0]
	osDelay(1000);
 8004042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004046:	f00b fcd7 	bl	800f9f8 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 800404a:	f015 fa37 	bl	80194bc <udp_new>
	if (pcb == NULL) {
 800404e:	2800      	cmp	r0, #0
 8004050:	f000 80c3 	beq.w	80041da <startudp+0x1a6>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4968      	ldr	r1, [pc, #416]	; (80041fc <startudp+0x1c8>)
 800405a:	4683      	mov	fp, r0
 800405c:	f015 f8ba 	bl	80191d4 <udp_bind>
 8004060:	4605      	mov	r5, r0
 8004062:	b118      	cbz	r0, 800406c <startudp+0x38>
		printf("startudp: udp_bind failed!\n");
 8004064:	4866      	ldr	r0, [pc, #408]	; (8004200 <startudp+0x1cc>)
 8004066:	f019 fb47 	bl	801d6f8 <puts>
 800406a:	e7fe      	b.n	800406a <startudp+0x36>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800406c:	2202      	movs	r2, #2
 800406e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8004072:	f010 fc55 	bl	8014920 <pbuf_alloc>

	if (p1 == NULL) {
 8004076:	9000      	str	r0, [sp, #0]
 8004078:	2800      	cmp	r0, #0
 800407a:	f000 80b2 	beq.w	80041e2 <startudp+0x1ae>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 800407e:	4c61      	ldr	r4, [pc, #388]	; (8004204 <startudp+0x1d0>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004080:	2202      	movs	r2, #2
	p1->payload = &(*pktbuf)[0];
 8004082:	9e00      	ldr	r6, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004084:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8004088:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800408a:	4628      	mov	r0, r5
	p1->payload = &(*pktbuf)[0];
 800408c:	6073      	str	r3, [r6, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 800408e:	f010 fc47 	bl	8014920 <pbuf_alloc>
	if (p2 == NULL) {
 8004092:	9001      	str	r0, [sp, #4]
 8004094:	2800      	cmp	r0, #0
 8004096:	f000 80ac 	beq.w	80041f2 <startudp+0x1be>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800409a:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800409c:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800409e:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80040a0:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80040a2:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80040a6:	4628      	mov	r0, r5
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80040a8:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80040aa:	f010 fc39 	bl	8014920 <pbuf_alloc>
	if (ps == NULL) {
 80040ae:	4604      	mov	r4, r0
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f000 809c 	beq.w	80041ee <startudp+0x1ba>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80040b6:	4e54      	ldr	r6, [pc, #336]	; (8004208 <startudp+0x1d4>)

	osDelay(5000);
 80040b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80040bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 8004244 <startudp+0x210>
	ps->payload = &statuspkt;	// point at status / GPS data
 80040c0:	6066      	str	r6, [r4, #4]
	osDelay(5000);
 80040c2:	f00b fc99 	bl	800f9f8 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count uns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <startudp+0x1d8>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 80040c8:	2101      	movs	r1, #1
 80040ca:	4a51      	ldr	r2, [pc, #324]	; (8004210 <startudp+0x1dc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80040cc:	4851      	ldr	r0, [pc, #324]	; (8004214 <startudp+0x1e0>)
	statuspkt.auxstatus1 = 0;
 80040ce:	6775      	str	r5, [r6, #116]	; 0x74
 80040d0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8004248 <startudp+0x214>
	statuspkt.adcudpover = 0;		// debug use count uns
 80040d4:	67b5      	str	r5, [r6, #120]	; 0x78
 80040d6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800424c <startudp+0x218>
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80040da:	67f5      	str	r5, [r6, #124]	; 0x7c
	netup = 1; // this is incomplete - it should be set by the phys layer also
 80040dc:	7011      	strb	r1, [r2, #0]
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80040de:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
			((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
			((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
			((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

			while (pd->ref != 1) {	// old packet not finished with yet
				printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80040e2:	4f4d      	ldr	r7, [pc, #308]	; (8004218 <startudp+0x1e4>)
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 80040e4:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 80040e8:	f019 fb06 	bl	801d6f8 <puts>
 80040ec:	e005      	b.n	80040fa <startudp+0xc6>
				sendtimedstatus(ps, pcb, lastadcbatchid); // on jabber, timed status sending masked by sigsend
			}

		} // if sigsend
		else {		// no adc sample to send, so send timed status
			sendtimedstatus(ps, pcb, lastadcbatchid);
 80040ee:	f898 2000 	ldrb.w	r2, [r8]
 80040f2:	4659      	mov	r1, fp
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff ff05 	bl	8003f04 <sendtimedstatus>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80040fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80040fe:	2001      	movs	r0, #1
 8004100:	f00d f862 	bl	80111c8 <ulTaskNotifyTake>
		if ((sendendstatus > 0) && (jabber == 0)) {
 8004104:	f89a 3000 	ldrb.w	r3, [sl]
 8004108:	b11b      	cbz	r3, 8004112 <startudp+0xde>
 800410a:	4b44      	ldr	r3, [pc, #272]	; (800421c <startudp+0x1e8>)
 800410c:	681d      	ldr	r5, [r3, #0]
 800410e:	2d00      	cmp	r5, #0
 8004110:	d053      	beq.n	80041ba <startudp+0x186>
		if ((sigsend) && (gpslocked)) { // only send if adc threshold was exceeded and GPS is locked
 8004112:	f8d9 3000 	ldr.w	r3, [r9]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0e9      	beq.n	80040ee <startudp+0xba>
 800411a:	4b41      	ldr	r3, [pc, #260]	; (8004220 <startudp+0x1ec>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0e5      	beq.n	80040ee <startudp+0xba>
			pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <startudp+0x1f0>)
			((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004124:	2200      	movs	r2, #0
			pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004126:	681d      	ldr	r5, [r3, #0]
 8004128:	e9dd 1300 	ldrd	r1, r3, [sp]
 800412c:	4295      	cmp	r5, r2
 800412e:	bf08      	it	eq
 8004130:	460b      	moveq	r3, r1
 8004132:	461d      	mov	r5, r3
			((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	70da      	strb	r2, [r3, #3]
			((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	686b      	ldr	r3, [r5, #4]
 800413c:	701a      	strb	r2, [r3, #0]
			((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	686a      	ldr	r2, [r5, #4]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	7053      	strb	r3, [r2, #1]
			((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	686a      	ldr	r2, [r5, #4]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	7093      	strb	r3, [r2, #2]
			while (pd->ref != 1) {	// old packet not finished with yet
 800414e:	89e9      	ldrh	r1, [r5, #14]
 8004150:	2901      	cmp	r1, #1
 8004152:	d005      	beq.n	8004160 <startudp+0x12c>
				printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004154:	4638      	mov	r0, r7
 8004156:	f019 fa47 	bl	801d5e8 <iprintf>
			while (pd->ref != 1) {	// old packet not finished with yet
 800415a:	89e9      	ldrh	r1, [r5, #14]
 800415c:	2901      	cmp	r1, #1
 800415e:	d1f9      	bne.n	8004154 <startudp+0x120>
			if (jabber == 0) {		// don't actually send it if jabbering
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <startudp+0x1e8>)
			sigsend = 0;	// assume its sent and the pb->p1 or p2 buffer is now clear
 8004162:	2200      	movs	r2, #0
			if (jabber == 0) {		// don't actually send it if jabbering
 8004164:	681b      	ldr	r3, [r3, #0]
			sigsend = 0;	// assume its sent and the pb->p1 or p2 buffer is now clear
 8004166:	f8c9 2000 	str.w	r2, [r9]
			if (jabber == 0) {		// don't actually send it if jabbering
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1bf      	bne.n	80040ee <startudp+0xba>
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800416e:	4629      	mov	r1, r5
 8004170:	f241 3388 	movw	r3, #5000	; 0x1388
 8004174:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <startudp+0x1f4>)
 8004176:	4658      	mov	r0, fp
 8004178:	f7ff fe24 	bl	8003dc4 <sendudp>
 800417c:	f88d 000f 	strb.w	r0, [sp, #15]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004180:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
				while (ps->ref != 1) { // old status packet not finished with yet
 8004184:	89e1      	ldrh	r1, [r4, #14]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004186:	3301      	adds	r3, #1
				while (ps->ref != 1) { // old status packet not finished with yet
 8004188:	2901      	cmp	r1, #1
				statuspkt.udpsent++;	// debug no of sample packets set
 800418a:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 800418e:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
 8004192:	f103 0301 	add.w	r3, r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	f103 0301 	add.w	r3, r3, #1
 80041a2:	6033      	str	r3, [r6, #0]
				while (ps->ref != 1) { // old status packet not finished with yet
 80041a4:	d0a9      	beq.n	80040fa <startudp+0xc6>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
 80041a6:	4821      	ldr	r0, [pc, #132]	; (800422c <startudp+0x1f8>)
 80041a8:	f019 fa1e 	bl	801d5e8 <iprintf>
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
 80041ac:	2000      	movs	r0, #0
 80041ae:	f00c fd81 	bl	8010cb4 <vTaskDelay>
				while (ps->ref != 1) { // old status packet not finished with yet
 80041b2:	89e1      	ldrh	r1, [r4, #14]
 80041b4:	2901      	cmp	r1, #1
 80041b6:	d1f6      	bne.n	80041a6 <startudp+0x172>
 80041b8:	e79f      	b.n	80040fa <startudp+0xc6>
			sendstatus(ENDSEQ, ps, pcb, lastadcbatchid); // send end of seq status
 80041ba:	f898 3000 	ldrb.w	r3, [r8]
 80041be:	465a      	mov	r2, fp
 80041c0:	4621      	mov	r1, r4
 80041c2:	2001      	movs	r0, #1
 80041c4:	f7ff fe3c 	bl	8003e40 <sendstatus>
			lastadcbatchid = adcbatchid;
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <startudp+0x1fc>)
			sendendstatus = 0;	// cancel the flag
 80041ca:	f88a 5000 	strb.w	r5, [sl]
			lastadcbatchid = adcbatchid;
 80041ce:	781b      	ldrb	r3, [r3, #0]
			statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 80041d0:	f8a6 505e 	strh.w	r5, [r6, #94]	; 0x5e
			lastadcbatchid = adcbatchid;
 80041d4:	f888 3000 	strb.w	r3, [r8]
 80041d8:	e79b      	b.n	8004112 <startudp+0xde>
		printf("startudp: udp_new failed!\n");
 80041da:	4816      	ldr	r0, [pc, #88]	; (8004234 <startudp+0x200>)
 80041dc:	f019 fa8c 	bl	801d6f8 <puts>
 80041e0:	e7fe      	b.n	80041e0 <startudp+0x1ac>
		printf("startudp: p1 buf_alloc failed!\n");
 80041e2:	4815      	ldr	r0, [pc, #84]	; (8004238 <startudp+0x204>)
		}
	} // forever while
}
 80041e4:	b005      	add	sp, #20
 80041e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 80041ea:	f019 ba85 	b.w	801d6f8 <puts>
 80041ee:	4813      	ldr	r0, [pc, #76]	; (800423c <startudp+0x208>)
 80041f0:	e7f8      	b.n	80041e4 <startudp+0x1b0>
		printf("startudp: p2 buf_alloc failed!\n");
 80041f2:	4813      	ldr	r0, [pc, #76]	; (8004240 <startudp+0x20c>)
 80041f4:	e7f6      	b.n	80041e4 <startudp+0x1b0>
 80041f6:	bf00      	nop
 80041f8:	2000080c 	.word	0x2000080c
 80041fc:	08039ac4 	.word	0x08039ac4
 8004200:	08020e64 	.word	0x08020e64
 8004204:	20021898 	.word	0x20021898
 8004208:	200217f0 	.word	0x200217f0
 800420c:	dec0edfe 	.word	0xdec0edfe
 8004210:	20000772 	.word	0x20000772
 8004214:	08020ee0 	.word	0x08020ee0
 8004218:	08020f14 	.word	0x08020f14
 800421c:	20000724 	.word	0x20000724
 8004220:	200008b5 	.word	0x200008b5
 8004224:	20000718 	.word	0x20000718
 8004228:	20022368 	.word	0x20022368
 800422c:	08020f44 	.word	0x08020f44
 8004230:	2000070c 	.word	0x2000070c
 8004234:	08020e48 	.word	0x08020e48
 8004238:	08020e80 	.word	0x08020e80
 800423c:	08020ec0 	.word	0x08020ec0
 8004240:	08020ea0 	.word	0x08020ea0
 8004244:	20000778 	.word	0x20000778
 8004248:	200008bc 	.word	0x200008bc
 800424c:	20000780 	.word	0x20000780

08004250 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	4606      	mov	r6, r0
 8004254:	460f      	mov	r7, r1
//  LOCK_TCPIP_CORE();

	HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8004256:	4854      	ldr	r0, [pc, #336]	; (80043a8 <tag_callback+0x158>)
 8004258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800425c:	f003 fa86 	bl	800776c <HAL_GPIO_TogglePin>
 8004260:	4c52      	ldr	r4, [pc, #328]	; (80043ac <tag_callback+0x15c>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8004262:	4d53      	ldr	r5, [pc, #332]	; (80043b0 <tag_callback+0x160>)
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004264:	e001      	b.n	800426a <tag_callback+0x1a>
		printf("sem wait 2\n");
 8004266:	f019 fa47 	bl	801d6f8 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 800426a:	2101      	movs	r1, #1
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	f00c f8b5 	bl	80103dc <xQueueSemaphoreTake>
 8004272:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8004274:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004276:	2b01      	cmp	r3, #1
 8004278:	d1f5      	bne.n	8004266 <tag_callback+0x16>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 800427a:	1f32      	subs	r2, r6, #4
 800427c:	2a07      	cmp	r2, #7
 800427e:	d819      	bhi.n	80042b4 <tag_callback+0x64>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8004280:	494c      	ldr	r1, [pc, #304]	; (80043b4 <tag_callback+0x164>)
 8004282:	4093      	lsls	r3, r2
 8004284:	4a4c      	ldr	r2, [pc, #304]	; (80043b8 <tag_callback+0x168>)
 8004286:	7809      	ldrb	r1, [r1, #0]
 8004288:	400b      	ands	r3, r1
 800428a:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 800428c:	bb43      	cbnz	r3, 80042e0 <tag_callback+0x90>
			strcpy(newstring, "0");
 800428e:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <tag_callback+0x16c>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004294:	2300      	movs	r3, #0
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4619      	mov	r1, r3
 800429c:	f00b fe2e 	bl	800fefc <xQueueGenericSend>
 80042a0:	2801      	cmp	r0, #1
 80042a2:	d002      	beq.n	80042aa <tag_callback+0x5a>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 80042a4:	4846      	ldr	r0, [pc, #280]	; (80043c0 <tag_callback+0x170>)
 80042a6:	f019 fa27 	bl	801d6f8 <puts>
	}
	return (strlen(newstring));
 80042aa:	4638      	mov	r0, r7
}
 80042ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 80042b0:	f7fb bfd0 	b.w	8000254 <strlen>
		switch (index) {
 80042b4:	2e14      	cmp	r6, #20
 80042b6:	d871      	bhi.n	800439c <tag_callback+0x14c>
 80042b8:	e8df f006 	tbb	[pc, r6]
 80042bc:	0b6b5257 	.word	0x0b6b5257
 80042c0:	70707070 	.word	0x70707070
 80042c4:	70707070 	.word	0x70707070
 80042c8:	323d5c67 	.word	0x323d5c67
 80042cc:	161b2025 	.word	0x161b2025
 80042d0:	48          	.byte	0x48
 80042d1:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 80042d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042d6:	4834      	ldr	r0, [pc, #208]	; (80043a8 <tag_callback+0x158>)
 80042d8:	f003 fa1c 	bl	8007714 <HAL_GPIO_ReadPin>
 80042dc:	2801      	cmp	r0, #1
 80042de:	d1d6      	bne.n	800428e <tag_callback+0x3e>
			strcpy(newstring, "1");
 80042e0:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <tag_callback+0x174>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	803b      	strh	r3, [r7, #0]
 80042e6:	e7d5      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, gpsstr);		// GPS Status
 80042e8:	4937      	ldr	r1, [pc, #220]	; (80043c8 <tag_callback+0x178>)
 80042ea:	4638      	mov	r0, r7
 80042ec:	f019 fb3c 	bl	801d968 <strcpy>
			break;
 80042f0:	e7d0      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, statstr);		// Detector Status
 80042f2:	4936      	ldr	r1, [pc, #216]	; (80043cc <tag_callback+0x17c>)
 80042f4:	4638      	mov	r0, r7
 80042f6:	f019 fb37 	bl	801d968 <strcpy>
			break;
 80042fa:	e7cb      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, snstr);			// Detector ID
 80042fc:	4934      	ldr	r1, [pc, #208]	; (80043d0 <tag_callback+0x180>)
 80042fe:	4638      	mov	r0, r7
 8004300:	f019 fb32 	bl	801d968 <strcpy>
			break;
 8004304:	e7c6      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8004306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800430a:	4832      	ldr	r0, [pc, #200]	; (80043d4 <tag_callback+0x184>)
 800430c:	f003 fa02 	bl	8007714 <HAL_GPIO_ReadPin>
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <tag_callback+0x16c>)
 8004312:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <tag_callback+0x174>)
 8004314:	2800      	cmp	r0, #0
 8004316:	bf08      	it	eq
 8004318:	4613      	moveq	r3, r2
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	803b      	strh	r3, [r7, #0]
			break;
 800431e:	e7b9      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <tag_callback+0x188>)
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <tag_callback+0x174>)
 8004324:	8811      	ldrh	r1, [r2, #0]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <tag_callback+0x16c>)
 8004328:	f011 0f04 	tst.w	r1, #4
 800432c:	bf08      	it	eq
 800432e:	4613      	moveq	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	803b      	strh	r3, [r7, #0]
			break;
 8004334:	e7ae      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8004336:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <tag_callback+0x188>)
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <tag_callback+0x174>)
 800433a:	8811      	ldrh	r1, [r2, #0]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <tag_callback+0x16c>)
 800433e:	f011 0f02 	tst.w	r1, #2
 8004342:	bf08      	it	eq
 8004344:	4613      	moveq	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	803b      	strh	r3, [r7, #0]
			break;
 800434a:	e7a3      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 800434c:	4a23      	ldr	r2, [pc, #140]	; (80043dc <tag_callback+0x18c>)
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <tag_callback+0x174>)
 8004350:	8811      	ldrh	r1, [r2, #0]
 8004352:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <tag_callback+0x16c>)
 8004354:	2900      	cmp	r1, #0
 8004356:	bf08      	it	eq
 8004358:	4613      	moveq	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	803b      	strh	r3, [r7, #0]
			break;
 800435e:	e799      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, pressstr);		// pressure
 8004360:	491f      	ldr	r1, [pc, #124]	; (80043e0 <tag_callback+0x190>)
 8004362:	4638      	mov	r0, r7
 8004364:	f019 fb00 	bl	801d968 <strcpy>
			break;
 8004368:	e794      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, tempstr);		// temperature
 800436a:	491e      	ldr	r1, [pc, #120]	; (80043e4 <tag_callback+0x194>)
 800436c:	4638      	mov	r0, r7
 800436e:	f019 fafb 	bl	801d968 <strcpy>
			break;
 8004372:	e78f      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8004374:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <tag_callback+0x188>)
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <tag_callback+0x174>)
 8004378:	8811      	ldrh	r1, [r2, #0]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <tag_callback+0x16c>)
 800437c:	f011 0f01 	tst.w	r1, #1
 8004380:	bf08      	it	eq
 8004382:	4613      	moveq	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	803b      	strh	r3, [r7, #0]
			break;
 8004388:	e784      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, "5");
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <tag_callback+0x198>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	803b      	strh	r3, [r7, #0]
			break;
 8004390:	e780      	b.n	8004294 <tag_callback+0x44>
			strcpy(newstring, nowtimestr);
 8004392:	4916      	ldr	r1, [pc, #88]	; (80043ec <tag_callback+0x19c>)
 8004394:	4638      	mov	r0, r7
 8004396:	f019 fae7 	bl	801d968 <strcpy>
			break;
 800439a:	e77b      	b.n	8004294 <tag_callback+0x44>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 800439c:	4632      	mov	r2, r6
 800439e:	4914      	ldr	r1, [pc, #80]	; (80043f0 <tag_callback+0x1a0>)
 80043a0:	4638      	mov	r0, r7
 80043a2:	f019 fa45 	bl	801d830 <siprintf>
			break;
 80043a6:	e775      	b.n	8004294 <tag_callback+0x44>
 80043a8:	40020c00 	.word	0x40020c00
 80043ac:	20021f7c 	.word	0x20021f7c
 80043b0:	08021234 	.word	0x08021234
 80043b4:	200002b0 	.word	0x200002b0
 80043b8:	200223b0 	.word	0x200223b0
 80043bc:	08039698 	.word	0x08039698
 80043c0:	08021264 	.word	0x08021264
 80043c4:	08020d24 	.word	0x08020d24
 80043c8:	20000004 	.word	0x20000004
 80043cc:	20000170 	.word	0x20000170
 80043d0:	200000d0 	.word	0x200000d0
 80043d4:	40021000 	.word	0x40021000
 80043d8:	200002b2 	.word	0x200002b2
 80043dc:	20000002 	.word	0x20000002
 80043e0:	200000c4 	.word	0x200000c4
 80043e4:	2000021c 	.word	0x2000021c
 80043e8:	08021240 	.word	0x08021240
 80043ec:	20000084 	.word	0x20000084
 80043f0:	08021244 	.word	0x08021244

080043f4 <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80043f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 80043f6:	4d2d      	ldr	r5, [pc, #180]	; (80044ac <returnpage+0xb8>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 80043f8:	b08d      	sub	sp, #52	; 0x34
 80043fa:	4616      	mov	r6, r2
 80043fc:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8004400:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8004402:	f88d 100e 	strb.w	r1, [sp, #14]
 8004406:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	int p1, p2;

	if (errorm == 0) {
 800440a:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800440e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004410:	682d      	ldr	r5, [r5, #0]
 8004412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004414:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8004416:	b10f      	cbz	r7, 800441c <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8004418:	b00d      	add	sp, #52	; 0x34
 800441a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 800441c:	a906      	add	r1, sp, #24
 800441e:	aa05      	add	r2, sp, #20
 8004420:	4c23      	ldr	r4, [pc, #140]	; (80044b0 <returnpage+0xbc>)
 8004422:	4630      	mov	r0, r6
 8004424:	e9cd 2100 	strd	r2, r1, [sp]
 8004428:	4623      	mov	r3, r4
 800442a:	aa04      	add	r2, sp, #16
 800442c:	4921      	ldr	r1, [pc, #132]	; (80044b4 <returnpage+0xc0>)
 800442e:	f019 fa1f 	bl	801d870 <siscanf>
		if (nconv != EOF) {
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	d01e      	beq.n	8004474 <returnpage+0x80>
			switch (nconv) {
 8004436:	2801      	cmp	r0, #1
 8004438:	d00b      	beq.n	8004452 <returnpage+0x5e>
 800443a:	db16      	blt.n	800446a <returnpage+0x76>
 800443c:	2804      	cmp	r0, #4
 800443e:	dc14      	bgt.n	800446a <returnpage+0x76>
				if (strlen(udp_target) < 7) {					// bad url or ip address
 8004440:	4620      	mov	r0, r4
 8004442:	f7fb ff07 	bl	8000254 <strlen>
 8004446:	2806      	cmp	r0, #6
 8004448:	d923      	bls.n	8004492 <returnpage+0x9e>
				printf("A response from Server -> Target UDP host changed to %s\n", udp_target);
 800444a:	4919      	ldr	r1, [pc, #100]	; (80044b0 <returnpage+0xbc>)
 800444c:	481a      	ldr	r0, [pc, #104]	; (80044b8 <returnpage+0xc4>)
 800444e:	f019 f8cb 	bl	801d5e8 <iprintf>
				statuspkt.uid = sn;
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <returnpage+0xc8>)
 8004456:	b29b      	uxth	r3, r3
				printf("A response from Server -> Serial Number Changed to %lu\n", statuspkt.uid);
 8004458:	4819      	ldr	r0, [pc, #100]	; (80044c0 <returnpage+0xcc>)
				statuspkt.uid = sn;
 800445a:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				printf("A response from Server -> Serial Number Changed to %lu\n", statuspkt.uid);
 800445e:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8004462:	f019 f8c1 	bl	801d5e8 <iprintf>
}
 8004466:	b00d      	add	sp, #52	; 0x34
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("Wrong number of params from Server -> %d\n", nconv);
 800446a:	4601      	mov	r1, r0
 800446c:	4815      	ldr	r0, [pc, #84]	; (80044c4 <returnpage+0xd0>)
 800446e:	f019 f8bb 	bl	801d5e8 <iprintf>
				break;
 8004472:	e7d1      	b.n	8004418 <returnpage+0x24>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8004474:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8004478:	ac0c      	add	r4, sp, #48	; 0x30
 800447a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800447e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <returnpage+0xd4>)
 8004484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004488:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800448c:	f019 f8ac 	bl	801d5e8 <iprintf>
}
 8004490:	e7c2      	b.n	8004418 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8004492:	4d0e      	ldr	r5, [pc, #56]	; (80044cc <returnpage+0xd8>)
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	88ae      	ldrh	r6, [r5, #4]
 8004498:	6020      	str	r0, [r4, #0]
 800449a:	6828      	ldr	r0, [r5, #0]
 800449c:	79ad      	ldrb	r5, [r5, #6]
 800449e:	6061      	str	r1, [r4, #4]
 80044a0:	60a2      	str	r2, [r4, #8]
 80044a2:	60e3      	str	r3, [r4, #12]
 80044a4:	6120      	str	r0, [r4, #16]
 80044a6:	82a6      	strh	r6, [r4, #20]
 80044a8:	75a5      	strb	r5, [r4, #22]
 80044aa:	e7ce      	b.n	800444a <returnpage+0x56>
 80044ac:	0801f920 	.word	0x0801f920
 80044b0:	2002236c 	.word	0x2002236c
 80044b4:	0802107c 	.word	0x0802107c
 80044b8:	080210a0 	.word	0x080210a0
 80044bc:	200217f0 	.word	0x200217f0
 80044c0:	080210dc 	.word	0x080210dc
 80044c4:	08021114 	.word	0x08021114
 80044c8:	08021140 	.word	0x08021140
 80044cc:	08021088 	.word	0x08021088

080044d0 <httpd_cgi_handler>:
void httpd_cgi_handler(const char *uri, int count, char **http_cgi_params, char **http_cgi_param_vals) {
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	4692      	mov	sl, r2
 80044d6:	b085      	sub	sp, #20
 80044d8:	460e      	mov	r6, r1
 80044da:	4604      	mov	r4, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80044dc:	220a      	movs	r2, #10
 80044de:	a903      	add	r1, sp, #12
 80044e0:	f8da 0000 	ldr.w	r0, [sl]
void httpd_cgi_handler(const char *uri, int count, char **http_cgi_params, char **http_cgi_param_vals) {
 80044e4:	461f      	mov	r7, r3
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80044e6:	f019 fafb 	bl	801dae0 <strtol>
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80044ea:	4632      	mov	r2, r6
 80044ec:	4603      	mov	r3, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 80044ee:	4605      	mov	r5, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 80044f0:	4621      	mov	r1, r4
 80044f2:	4869      	ldr	r0, [pc, #420]	; (8004698 <httpd_cgi_handler+0x1c8>)
 80044f4:	f019 f878 	bl	801d5e8 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	dd3c      	ble.n	8004576 <httpd_cgi_handler+0xa6>
 80044fc:	2400      	movs	r4, #0
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80044fe:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80046c8 <httpd_cgi_handler+0x1f8>
 8004502:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80046cc <httpd_cgi_handler+0x1fc>
 8004506:	f1a5 010c 	sub.w	r1, r5, #12
 800450a:	2201      	movs	r2, #1
		switch (j) {
 800450c:	f1a5 030a 	sub.w	r3, r5, #10
			j -= 11;	// now offset 0
 8004510:	f1a5 080b 	sub.w	r8, r5, #11
 8004514:	408a      	lsls	r2, r1
		switch (j) {
 8004516:	2b0e      	cmp	r3, #14
 8004518:	d830      	bhi.n	800457c <httpd_cgi_handler+0xac>
 800451a:	e8df f003 	tbb	[pc, r3]
 800451e:	94a3      	.short	0x94a3
 8004520:	08080808 	.word	0x08080808
 8004524:	08080808 	.word	0x08080808
 8004528:	7f394b5d 	.word	0x7f394b5d
 800452c:	6f          	.byte	0x6f
 800452d:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	b252      	sxtb	r2, r2
 8004532:	f999 3000 	ldrsb.w	r3, [r9]
			j -= 11;	// now offset 0
 8004536:	4645      	mov	r5, r8
			if (((*http_cgi_param_vals)[i]) == '0') {
 8004538:	5d08      	ldrb	r0, [r1, r4]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 800453a:	ea42 0103 	orr.w	r1, r2, r3
			if (((*http_cgi_param_vals)[i]) == '0') {
 800453e:	2830      	cmp	r0, #48	; 0x30
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8004540:	4856      	ldr	r0, [pc, #344]	; (800469c <httpd_cgi_handler+0x1cc>)
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8004542:	b2c9      	uxtb	r1, r1
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8004544:	bf04      	itt	eq
 8004546:	ea23 0202 	biceq.w	r2, r3, r2
 800454a:	b2d1      	uxtbeq	r1, r2
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 800454c:	4a54      	ldr	r2, [pc, #336]	; (80046a0 <httpd_cgi_handler+0x1d0>)
 800454e:	f001 0302 	and.w	r3, r1, #2
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8004552:	f889 1000 	strb.w	r1, [r9]
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8004556:	6013      	str	r3, [r2, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8004558:	f019 f846 	bl	801d5e8 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 800455c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004560:	2301      	movs	r3, #1
 8004562:	464a      	mov	r2, r9
 8004564:	2188      	movs	r1, #136	; 0x88
 8004566:	9000      	str	r0, [sp, #0]
 8004568:	484e      	ldr	r0, [pc, #312]	; (80046a4 <httpd_cgi_handler+0x1d4>)
 800456a:	f003 fb63 	bl	8007c34 <HAL_I2C_Master_Transmit>
 800456e:	b958      	cbnz	r0, 8004588 <httpd_cgi_handler+0xb8>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004570:	3401      	adds	r4, #1
 8004572:	42a6      	cmp	r6, r4
 8004574:	d1c7      	bne.n	8004506 <httpd_cgi_handler+0x36>
}
 8004576:	b005      	add	sp, #20
 8004578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 800457c:	f8da 1000 	ldr.w	r1, [sl]
 8004580:	4658      	mov	r0, fp
 8004582:	f019 f831 	bl	801d5e8 <iprintf>
			break;
 8004586:	e7f3      	b.n	8004570 <httpd_cgi_handler+0xa0>
				printf("I2C HAL returned error 1\n\r");
 8004588:	4847      	ldr	r0, [pc, #284]	; (80046a8 <httpd_cgi_handler+0x1d8>)
 800458a:	f019 f82d 	bl	801d5e8 <iprintf>
 800458e:	e7ef      	b.n	8004570 <httpd_cgi_handler+0xa0>
 8004590:	4d46      	ldr	r5, [pc, #280]	; (80046ac <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	882b      	ldrh	r3, [r5, #0]
 8004596:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004598:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 800459a:	f043 0001 	orr.w	r0, r3, #1
 800459e:	2a30      	cmp	r2, #48	; 0x30
 80045a0:	bf08      	it	eq
 80045a2:	f023 0001 	biceq.w	r0, r3, #1
			setpgagain(val);
 80045a6:	f7fe f951 	bl	800284c <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	dcf1      	bgt.n	8004592 <httpd_cgi_handler+0xc2>
}
 80045ae:	b005      	add	sp, #20
 80045b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b4:	4d3d      	ldr	r5, [pc, #244]	; (80046ac <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	882b      	ldrh	r3, [r5, #0]
 80045ba:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80045bc:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 80045be:	f043 0002 	orr.w	r0, r3, #2
 80045c2:	2a30      	cmp	r2, #48	; 0x30
 80045c4:	bf08      	it	eq
 80045c6:	f023 0002 	biceq.w	r0, r3, #2
			setpgagain(val);
 80045ca:	f7fe f93f 	bl	800284c <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	dcf1      	bgt.n	80045b6 <httpd_cgi_handler+0xe6>
}
 80045d2:	b005      	add	sp, #20
 80045d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d8:	4d34      	ldr	r5, [pc, #208]	; (80046ac <httpd_cgi_handler+0x1dc>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	882b      	ldrh	r3, [r5, #0]
 80045de:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80045e0:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80045e2:	f043 0004 	orr.w	r0, r3, #4
 80045e6:	2a30      	cmp	r2, #48	; 0x30
 80045e8:	bf08      	it	eq
 80045ea:	f023 0004 	biceq.w	r0, r3, #4
			setpgagain(val);
 80045ee:	f7fe f92d 	bl	800284c <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	dcf1      	bgt.n	80045da <httpd_cgi_handler+0x10a>
}
 80045f6:	b005      	add	sp, #20
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	1e62      	subs	r2, r4, #1
 8004600:	492b      	ldr	r1, [pc, #172]	; (80046b0 <httpd_cgi_handler+0x1e0>)
 8004602:	441a      	add	r2, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8004604:	f812 3f01 	ldrb.w	r3, [r2, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004608:	3401      	adds	r4, #1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 800460a:	3b30      	subs	r3, #48	; 0x30
 800460c:	bf18      	it	ne
 800460e:	2301      	movne	r3, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004610:	42a6      	cmp	r6, r4
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8004612:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004614:	dcf6      	bgt.n	8004604 <httpd_cgi_handler+0x134>
}
 8004616:	b005      	add	sp, #20
 8004618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 800461c:	4d25      	ldr	r5, [pc, #148]	; (80046b4 <httpd_cgi_handler+0x1e4>)
			if (((*http_cgi_param_vals)[i]) == '1')
 800461e:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8004620:	2201      	movs	r2, #1
 8004622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004626:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '1')
 8004628:	5d1b      	ldrb	r3, [r3, r4]
 800462a:	4414      	add	r4, r2
 800462c:	2b31      	cmp	r3, #49	; 0x31
 800462e:	d004      	beq.n	800463a <httpd_cgi_handler+0x16a>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8004630:	f003 f882 	bl	8007738 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004634:	42a6      	cmp	r6, r4
 8004636:	dcf2      	bgt.n	800461e <httpd_cgi_handler+0x14e>
 8004638:	e79d      	b.n	8004576 <httpd_cgi_handler+0xa6>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 800463a:	2200      	movs	r2, #0
 800463c:	f003 f87c 	bl	8007738 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004640:	42a6      	cmp	r6, r4
 8004642:	dcec      	bgt.n	800461e <httpd_cgi_handler+0x14e>
 8004644:	e797      	b.n	8004576 <httpd_cgi_handler+0xa6>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8004646:	4d1c      	ldr	r5, [pc, #112]	; (80046b8 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0')
 8004648:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800464a:	2201      	movs	r2, #1
 800464c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004650:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '0')
 8004652:	5d1b      	ldrb	r3, [r3, r4]
 8004654:	4414      	add	r4, r2
 8004656:	2b30      	cmp	r3, #48	; 0x30
 8004658:	d018      	beq.n	800468c <httpd_cgi_handler+0x1bc>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800465a:	f003 f86d 	bl	8007738 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800465e:	42a6      	cmp	r6, r4
 8004660:	dcf2      	bgt.n	8004648 <httpd_cgi_handler+0x178>
 8004662:	e788      	b.n	8004576 <httpd_cgi_handler+0xa6>
			printf("Reboot command from wwww\n");
 8004664:	4815      	ldr	r0, [pc, #84]	; (80046bc <httpd_cgi_handler+0x1ec>)
 8004666:	f019 f847 	bl	801d6f8 <puts>
			osDelay(1000);
 800466a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800466e:	f00b f9c3 	bl	800f9f8 <osDelay>
 8004672:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004676:	4912      	ldr	r1, [pc, #72]	; (80046c0 <httpd_cgi_handler+0x1f0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <httpd_cgi_handler+0x1f4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800467a:	68ca      	ldr	r2, [r1, #12]
 800467c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
 8004684:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <httpd_cgi_handler+0x1b8>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 800468c:	2200      	movs	r2, #0
 800468e:	f003 f853 	bl	8007738 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004692:	42a6      	cmp	r6, r4
 8004694:	dcd8      	bgt.n	8004648 <httpd_cgi_handler+0x178>
 8004696:	e76e      	b.n	8004576 <httpd_cgi_handler+0xa6>
 8004698:	08020fb0 	.word	0x08020fb0
 800469c:	08020ff8 	.word	0x08020ff8
 80046a0:	200008a0 	.word	0x200008a0
 80046a4:	20021b44 	.word	0x20021b44
 80046a8:	08020ac0 	.word	0x08020ac0
 80046ac:	200002b2 	.word	0x200002b2
 80046b0:	20000002 	.word	0x20000002
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40020c00 	.word	0x40020c00
 80046bc:	08020fdc 	.word	0x08020fdc
 80046c0:	e000ed00 	.word	0xe000ed00
 80046c4:	05fa0004 	.word	0x05fa0004
 80046c8:	08021014 	.word	0x08021014
 80046cc:	200002b0 	.word	0x200002b0

080046d0 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80046d0:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 80046d2:	4802      	ldr	r0, [pc, #8]	; (80046dc <httpd_post_receive_data+0xc>)
 80046d4:	f019 f810 	bl	801d6f8 <puts>
}
 80046d8:	2000      	movs	r0, #0
 80046da:	bd08      	pop	{r3, pc}
 80046dc:	08021060 	.word	0x08021060

080046e0 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 80046e0:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 80046e2:	4802      	ldr	r0, [pc, #8]	; (80046ec <httpd_post_begin+0xc>)
 80046e4:	f019 f808 	bl	801d6f8 <puts>
}
 80046e8:	2000      	movs	r0, #0
 80046ea:	bd08      	pop	{r3, pc}
 80046ec:	08021034 	.word	0x08021034

080046f0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <httpd_post_finished+0x8>)
 80046f2:	f019 b801 	b.w	801d6f8 <puts>
 80046f6:	bf00      	nop
 80046f8:	08021048 	.word	0x08021048

080046fc <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80046fc:	4803      	ldr	r0, [pc, #12]	; (800470c <init_httpd_ssi+0x10>)
 80046fe:	2215      	movs	r2, #21
 8004700:	4903      	ldr	r1, [pc, #12]	; (8004710 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8004702:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8004704:	f00e fcbe 	bl	8013084 <http_set_ssi_handler>
}
 8004708:	bd08      	pop	{r3, pc}
 800470a:	bf00      	nop
 800470c:	08004251 	.word	0x08004251
 8004710:	200002bc 	.word	0x200002bc

08004714 <httpclient>:

void httpclient(char Page[64]) {
 8004714:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;
	static ip_addr_t remoteip = { 0 };
	static char *Postvars = NULL;

	if (remoteip.addr == 0) {
 8004716:	4c11      	ldr	r4, [pc, #68]	; (800475c <httpclient+0x48>)
void httpclient(char Page[64]) {
 8004718:	b084      	sub	sp, #16
 800471a:	4605      	mov	r5, r0
	if (remoteip.addr == 0) {
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	b143      	cbz	r3, 8004732 <httpclient+0x1e>
		ip = remoteip.addr;
		printf("\nHTTP Target IP: %lu.%lu.%lu.%lu\n", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16,
				(ip & 0xff000000) >> 24);
	}

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8004720:	4629      	mov	r1, r5
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <httpclient+0x4c>)
 8004724:	2200      	movs	r2, #0
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	f7fc fb4e 	bl	8000dc8 <hc_open>
 800472c:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 800472e:	b004      	add	sp, #16
 8004730:	bd70      	pop	{r4, r5, r6, pc}
		err = dnslookup("lightning.vk4ya.com", &remoteip);
 8004732:	4621      	mov	r1, r4
 8004734:	480b      	ldr	r0, [pc, #44]	; (8004764 <httpclient+0x50>)
 8004736:	f7ff fc05 	bl	8003f44 <dnslookup>
		if (err != ERR_OK)
 800473a:	b958      	cbnz	r0, 8004754 <httpclient+0x40>
		ip = remoteip.addr;
 800473c:	6821      	ldr	r1, [r4, #0]
		printf("\nHTTP Target IP: %lu.%lu.%lu.%lu\n", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16,
 800473e:	480a      	ldr	r0, [pc, #40]	; (8004768 <httpclient+0x54>)
 8004740:	0e0e      	lsrs	r6, r1, #24
 8004742:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004746:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800474a:	b2c9      	uxtb	r1, r1
 800474c:	9600      	str	r6, [sp, #0]
 800474e:	f018 ff4b 	bl	801d5e8 <iprintf>
 8004752:	e7e5      	b.n	8004720 <httpclient+0xc>
			rebootme();
 8004754:	f7fc fbec 	bl	8000f30 <rebootme>
 8004758:	e7f0      	b.n	800473c <httpclient+0x28>
 800475a:	bf00      	nop
 800475c:	200008c4 	.word	0x200008c4
 8004760:	080043f5 	.word	0x080043f5
 8004764:	08020f78 	.word	0x08020f78
 8004768:	08020f8c 	.word	0x08020f8c

0800476c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800476c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004770:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004772:	e003      	b.n	800477c <LoopCopyDataInit>

08004774 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004776:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004778:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800477a:	3104      	adds	r1, #4

0800477c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800477c:	480b      	ldr	r0, [pc, #44]	; (80047ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004780:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004782:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004784:	d3f6      	bcc.n	8004774 <CopyDataInit>
  ldr  r2, =_sbss
 8004786:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004788:	e002      	b.n	8004790 <LoopFillZerobss>

0800478a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800478a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800478c:	f842 3b04 	str.w	r3, [r2], #4

08004790 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004792:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004794:	d3f9      	bcc.n	800478a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004796:	f7ff fac5 	bl	8003d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800479a:	f018 fb93 	bl	801cec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800479e:	f7fc ff3f 	bl	8001620 <main>
  bx  lr    
 80047a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047a4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80047a8:	08039fdc 	.word	0x08039fdc
  ldr  r0, =_sdata
 80047ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047b0:	200006ec 	.word	0x200006ec
  ldr  r2, =_sbss
 80047b4:	200006f0 	.word	0x200006f0
  ldr  r3, = _ebss
 80047b8:	20035480 	.word	0x20035480

080047bc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047bc:	e7fe      	b.n	80047bc <CAN1_RX0_IRQHandler>
	...

080047c0 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c2:	2003      	movs	r0, #3
{
 80047c4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ce:	f000 fc4d 	bl	800506c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047d2:	2000      	movs	r0, #0
 80047d4:	f7ff f9ac 	bl	8003b30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80047d8:	f7fe fc2a 	bl	8003030 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80047dc:	2000      	movs	r0, #0
 80047de:	bd08      	pop	{r3, pc}
 80047e0:	40023c00 	.word	0x40023c00

080047e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047e4:	4a03      	ldr	r2, [pc, #12]	; (80047f4 <HAL_IncTick+0x10>)
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_IncTick+0x14>)
 80047e8:	6811      	ldr	r1, [r2, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	440b      	add	r3, r1
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	200223b4 	.word	0x200223b4
 80047f8:	20000314 	.word	0x20000314

080047fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80047fc:	4b01      	ldr	r3, [pc, #4]	; (8004804 <HAL_GetTick+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200223b4 	.word	0x200223b4

08004808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7ff fff6 	bl	80047fc <HAL_GetTick>
 8004810:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004812:	1c63      	adds	r3, r4, #1
 8004814:	d002      	beq.n	800481c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_Delay+0x20>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800481c:	f7ff ffee 	bl	80047fc <HAL_GetTick>
 8004820:	1b40      	subs	r0, r0, r5
 8004822:	42a0      	cmp	r0, r4
 8004824:	d3fa      	bcc.n	800481c <HAL_Delay+0x14>
  {
  }
}
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	20000314 	.word	0x20000314

0800482c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800482c:	2800      	cmp	r0, #0
 800482e:	f000 813f 	beq.w	8004ab0 <HAL_ADC_Init+0x284>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004832:	49b2      	ldr	r1, [pc, #712]	; (8004afc <HAL_ADC_Init+0x2d0>)
 8004834:	4ab2      	ldr	r2, [pc, #712]	; (8004b00 <HAL_ADC_Init+0x2d4>)
{
 8004836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004838:	6803      	ldr	r3, [r0, #0]
 800483a:	4604      	mov	r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf18      	it	ne
 8004840:	4293      	cmpne	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_ADC_Init+0x22>
 8004844:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004848:	4293      	cmp	r3, r2
 800484a:	f040 8133 	bne.w	8004ab4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800484e:	6863      	ldr	r3, [r4, #4]
 8004850:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004854:	f040 8138 	bne.w	8004ac8 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004858:	68a3      	ldr	r3, [r4, #8]
 800485a:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800485e:	f040 813d 	bne.w	8004adc <HAL_ADC_Init+0x2b0>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d861      	bhi.n	800492c <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004868:	69a3      	ldr	r3, [r4, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d858      	bhi.n	8004920 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800486e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004870:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8004874:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8004878:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800487c:	bf18      	it	ne
 800487e:	2900      	cmpne	r1, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800488a:	bf0c      	ite	eq
 800488c:	2300      	moveq	r3, #0
 800488e:	f003 0301 	andne.w	r3, r3, #1
 8004892:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8004896:	bf0c      	ite	eq
 8004898:	2300      	moveq	r3, #0
 800489a:	f003 0301 	andne.w	r3, r3, #1
 800489e:	b123      	cbz	r3, 80048aa <HAL_ADC_Init+0x7e>
 80048a0:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	f200 8140 	bhi.w	8004b2a <HAL_ADC_Init+0x2fe>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80048b0:	d159      	bne.n	8004966 <HAL_ADC_Init+0x13a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80048b2:	69e3      	ldr	r3, [r4, #28]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	d84b      	bhi.n	8004952 <HAL_ADC_Init+0x126>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80048ba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d825      	bhi.n	800490e <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d83a      	bhi.n	800493e <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80048c8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d814      	bhi.n	80048fa <HAL_ADC_Init+0xce>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d0:	4b8c      	ldr	r3, [pc, #560]	; (8004b04 <HAL_ADC_Init+0x2d8>)
 80048d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d004      	beq.n	80048e2 <HAL_ADC_Init+0xb6>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80048d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048da:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80048de:	f040 8119 	bne.w	8004b14 <HAL_ADC_Init+0x2e8>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80048e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	f000 80d8 	beq.w	8004a9a <HAL_ADC_Init+0x26e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048ec:	06db      	lsls	r3, r3, #27
 80048ee:	d544      	bpl.n	800497a <HAL_ADC_Init+0x14e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048f0:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80048f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80048f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80048fa:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80048fe:	4882      	ldr	r0, [pc, #520]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004900:	f7fd fdba 	bl	8002478 <assert_failed>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004904:	4b7f      	ldr	r3, [pc, #508]	; (8004b04 <HAL_ADC_Init+0x2d8>)
 8004906:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004908:	429a      	cmp	r2, r3
 800490a:	d1e5      	bne.n	80048d8 <HAL_ADC_Init+0xac>
 800490c:	e7e9      	b.n	80048e2 <HAL_ADC_Init+0xb6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800490e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004912:	487d      	ldr	r0, [pc, #500]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004914:	f7fd fdb0 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d9d4      	bls.n	80048c8 <HAL_ADC_Init+0x9c>
 800491e:	e00e      	b.n	800493e <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004920:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004924:	4878      	ldr	r0, [pc, #480]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004926:	f7fd fda7 	bl	8002478 <assert_failed>
 800492a:	e7a0      	b.n	800486e <HAL_ADC_Init+0x42>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800492c:	f240 114f 	movw	r1, #335	; 0x14f
 8004930:	4875      	ldr	r0, [pc, #468]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004932:	f7fd fda1 	bl	8002478 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004936:	69a3      	ldr	r3, [r4, #24]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d998      	bls.n	800486e <HAL_ADC_Init+0x42>
 800493c:	e7f0      	b.n	8004920 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800493e:	f240 1155 	movw	r1, #341	; 0x155
 8004942:	4871      	ldr	r0, [pc, #452]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004944:	f7fd fd98 	bl	8002478 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004948:	f894 3020 	ldrb.w	r3, [r4, #32]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d9bf      	bls.n	80048d0 <HAL_ADC_Init+0xa4>
 8004950:	e7d3      	b.n	80048fa <HAL_ADC_Init+0xce>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004952:	f240 1153 	movw	r1, #339	; 0x153
 8004956:	486c      	ldr	r0, [pc, #432]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004958:	f7fd fd8e 	bl	8002478 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800495c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004960:	2b01      	cmp	r3, #1
 8004962:	d9ae      	bls.n	80048c2 <HAL_ADC_Init+0x96>
 8004964:	e7d3      	b.n	800490e <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004966:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800496a:	4867      	ldr	r0, [pc, #412]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 800496c:	f7fd fd84 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004970:	69e3      	ldr	r3, [r4, #28]
 8004972:	3b01      	subs	r3, #1
 8004974:	2b0f      	cmp	r3, #15
 8004976:	d9a0      	bls.n	80048ba <HAL_ADC_Init+0x8e>
 8004978:	e7eb      	b.n	8004952 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800497a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800497c:	4a63      	ldr	r2, [pc, #396]	; (8004b0c <HAL_ADC_Init+0x2e0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800497e:	4964      	ldr	r1, [pc, #400]	; (8004b10 <HAL_ADC_Init+0x2e4>)
    ADC_STATE_CLR_SET(hadc->State,
 8004980:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004982:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004984:	4d5f      	ldr	r5, [pc, #380]	; (8004b04 <HAL_ADC_Init+0x2d8>)
    ADC_STATE_CLR_SET(hadc->State,
 8004986:	f042 0202 	orr.w	r2, r2, #2
 800498a:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800498c:	684a      	ldr	r2, [r1, #4]
 800498e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004992:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004994:	684a      	ldr	r2, [r1, #4]
 8004996:	6860      	ldr	r0, [r4, #4]
 8004998:	4302      	orrs	r2, r0
 800499a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800499c:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800499e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049a4:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049a8:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049aa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ac:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049b0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b4:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049b6:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049b8:	6858      	ldr	r0, [r3, #4]
 80049ba:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80049be:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	ea41 010c 	orr.w	r1, r1, ip
 80049c6:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80049ce:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	ea42 0207 	orr.w	r2, r2, r7
 80049d6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049d8:	f000 8086 	beq.w	8004ae8 <HAL_ADC_Init+0x2bc>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049dc:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049e0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80049e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	4316      	orrs	r6, r2
 80049ea:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049ec:	6899      	ldr	r1, [r3, #8]
 80049ee:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80049f2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4302      	orrs	r2, r0
 80049f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049fa:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049fc:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049fe:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a02:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a06:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8004a0e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f000 8085 	beq.w	8004b20 <HAL_ADC_Init+0x2f4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	2a07      	cmp	r2, #7
 8004a1c:	d907      	bls.n	8004a2e <HAL_ADC_Init+0x202>
 8004a1e:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8004a22:	4839      	ldr	r0, [pc, #228]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004a24:	f7fd fd28 	bl	8002478 <assert_failed>
 8004a28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	3a01      	subs	r2, #1
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004a34:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004a3c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8004a44:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8004a48:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a4a:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a4c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a50:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a54:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a56:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a58:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5a:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004a5e:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8004a62:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a64:	689d      	ldr	r5, [r3, #8]
 8004a66:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8004a6a:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 8004a72:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a7a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004a82:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004a84:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a88:	f023 0303 	bic.w	r3, r3, #3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004a92:	2300      	movs	r3, #0
 8004a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7fe faf8 	bl	8003090 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004aa0:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004aa4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aa8:	06db      	lsls	r3, r3, #27
 8004aaa:	f53f af21 	bmi.w	80048f0 <HAL_ADC_Init+0xc4>
 8004aae:	e764      	b.n	800497a <HAL_ADC_Init+0x14e>
    return HAL_ERROR;
 8004ab0:	2001      	movs	r0, #1
}
 8004ab2:	4770      	bx	lr
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004ab4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004ab8:	4813      	ldr	r0, [pc, #76]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004aba:	f7fd fcdd 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004ac4:	f43f aec8 	beq.w	8004858 <HAL_ADC_Init+0x2c>
 8004ac8:	f240 114d 	movw	r1, #333	; 0x14d
 8004acc:	480e      	ldr	r0, [pc, #56]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004ace:	f7fd fcd3 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8004ad8:	f43f aec3 	beq.w	8004862 <HAL_ADC_Init+0x36>
 8004adc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004ae0:	4809      	ldr	r0, [pc, #36]	; (8004b08 <HAL_ADC_Init+0x2dc>)
 8004ae2:	f7fd fcc9 	bl	8002478 <assert_failed>
 8004ae6:	e6bc      	b.n	8004862 <HAL_ADC_Init+0x36>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	e77f      	b.n	80049fa <HAL_ADC_Init+0x1ce>
 8004afa:	bf00      	nop
 8004afc:	40012000 	.word	0x40012000
 8004b00:	40012100 	.word	0x40012100
 8004b04:	0f000001 	.word	0x0f000001
 8004b08:	0802127c 	.word	0x0802127c
 8004b0c:	ffffeefd 	.word	0xffffeefd
 8004b10:	40012300 	.word	0x40012300
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004b14:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004b18:	4807      	ldr	r0, [pc, #28]	; (8004b38 <HAL_ADC_Init+0x30c>)
 8004b1a:	f7fd fcad 	bl	8002478 <assert_failed>
 8004b1e:	e6e0      	b.n	80048e2 <HAL_ADC_Init+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	e78d      	b.n	8004a46 <HAL_ADC_Init+0x21a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004b2a:	f240 1151 	movw	r1, #337	; 0x151
 8004b2e:	4802      	ldr	r0, [pc, #8]	; (8004b38 <HAL_ADC_Init+0x30c>)
 8004b30:	f7fd fca2 	bl	8002478 <assert_failed>
 8004b34:	e6b9      	b.n	80048aa <HAL_ADC_Init+0x7e>
 8004b36:	bf00      	nop
 8004b38:	0802127c 	.word	0x0802127c

08004b3c <HAL_ADC_Start>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004b3c:	6983      	ldr	r3, [r0, #24]
  __IO uint32_t counter = 0;
 8004b3e:	2200      	movs	r2, #0
{
 8004b40:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004b42:	2b01      	cmp	r3, #1
{
 8004b44:	b082      	sub	sp, #8
 8004b46:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8004b48:	9201      	str	r2, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004b4a:	d904      	bls.n	8004b56 <HAL_ADC_Start+0x1a>
 8004b4c:	f240 21de 	movw	r1, #734	; 0x2de
 8004b50:	4840      	ldr	r0, [pc, #256]	; (8004c54 <HAL_ADC_Start+0x118>)
 8004b52:	f7fd fc91 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b58:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8004b5c:	d173      	bne.n	8004c46 <HAL_ADC_Start+0x10a>
  __HAL_LOCK(hadc);
 8004b5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d06c      	beq.n	8004c40 <HAL_ADC_Start+0x104>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b66:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8004b68:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b6a:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8004b6c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b70:	07d9      	lsls	r1, r3, #31
 8004b72:	d414      	bmi.n	8004b9e <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b74:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <HAL_ADC_Start+0x11c>)
 8004b76:	4839      	ldr	r0, [pc, #228]	; (8004c5c <HAL_ADC_Start+0x120>)
 8004b78:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8004b7a:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b7c:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8004b80:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b84:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8004b86:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b8c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8004b8e:	9b01      	ldr	r3, [sp, #4]
 8004b90:	b12b      	cbz	r3, 8004b9e <HAL_ADC_Start+0x62>
      counter--;
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8004b98:	9b01      	ldr	r3, [sp, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f9      	bne.n	8004b92 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b9e:	6893      	ldr	r3, [r2, #8]
 8004ba0:	07db      	lsls	r3, r3, #31
 8004ba2:	d524      	bpl.n	8004bee <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8004ba4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_ADC_Start+0x124>)
 8004ba8:	400b      	ands	r3, r1
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bb0:	6853      	ldr	r3, [r2, #4]
 8004bb2:	0558      	lsls	r0, r3, #21
 8004bb4:	d505      	bpl.n	8004bc2 <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bc0:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bc4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8004bc8:	d026      	beq.n	8004c18 <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bcc:	f023 0306 	bic.w	r3, r3, #6
 8004bd0:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004bd2:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8004bd6:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004bd8:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_ADC_Start+0x128>)
    __HAL_UNLOCK(hadc);
 8004bda:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004bde:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	06c9      	lsls	r1, r1, #27
 8004be4:	d106      	bne.n	8004bf4 <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004be6:	6890      	ldr	r0, [r2, #8]
 8004be8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004bec:	d016      	beq.n	8004c1c <HAL_ADC_Start+0xe0>
  return HAL_OK;
 8004bee:	2000      	movs	r0, #0
}
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bf4:	491c      	ldr	r1, [pc, #112]	; (8004c68 <HAL_ADC_Start+0x12c>)
 8004bf6:	428a      	cmp	r2, r1
 8004bf8:	d016      	beq.n	8004c28 <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004bfa:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bfc:	06db      	lsls	r3, r3, #27
 8004bfe:	d4f6      	bmi.n	8004bee <HAL_ADC_Start+0xb2>
 8004c00:	491a      	ldr	r1, [pc, #104]	; (8004c6c <HAL_ADC_Start+0x130>)
 8004c02:	428a      	cmp	r2, r1
 8004c04:	d1f3      	bne.n	8004bee <HAL_ADC_Start+0xb2>
 8004c06:	6888      	ldr	r0, [r1, #8]
 8004c08:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004c0c:	d1ef      	bne.n	8004bee <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c0e:	688b      	ldr	r3, [r1, #8]
 8004c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c14:	608b      	str	r3, [r1, #8]
 8004c16:	e7eb      	b.n	8004bf0 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 8004c18:	6463      	str	r3, [r4, #68]	; 0x44
 8004c1a:	e7da      	b.n	8004bd2 <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c1c:	6893      	ldr	r3, [r2, #8]
 8004c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c22:	6093      	str	r3, [r2, #8]
}
 8004c24:	b002      	add	sp, #8
 8004c26:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c28:	6893      	ldr	r3, [r2, #8]
 8004c2a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8004c2e:	d103      	bne.n	8004c38 <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c30:	6893      	ldr	r3, [r2, #8]
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_ADC_Start+0x128>)
  return HAL_OK;
 8004c3a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	e7d7      	b.n	8004bf0 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 8004c40:	2002      	movs	r0, #2
}
 8004c42:	b002      	add	sp, #8
 8004c44:	bd10      	pop	{r4, pc}
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004c46:	f240 21df 	movw	r1, #735	; 0x2df
 8004c4a:	4802      	ldr	r0, [pc, #8]	; (8004c54 <HAL_ADC_Start+0x118>)
 8004c4c:	f7fd fc14 	bl	8002478 <assert_failed>
 8004c50:	e785      	b.n	8004b5e <HAL_ADC_Start+0x22>
 8004c52:	bf00      	nop
 8004c54:	0802127c 	.word	0x0802127c
 8004c58:	200002b8 	.word	0x200002b8
 8004c5c:	431bde83 	.word	0x431bde83
 8004c60:	fffff8fe 	.word	0xfffff8fe
 8004c64:	40012300 	.word	0x40012300
 8004c68:	40012000 	.word	0x40012000
 8004c6c:	40012200 	.word	0x40012200

08004c70 <HAL_ADC_LevelOutOfWindowCallback>:
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop

08004c74 <HAL_ADC_ErrorCallback>:
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <HAL_ADC_IRQHandler>:
{
 8004c78:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004c7a:	6983      	ldr	r3, [r0, #24]
{
 8004c7c:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d904      	bls.n	8004c8c <HAL_ADC_IRQHandler+0x14>
 8004c82:	f240 41a5 	movw	r1, #1189	; 0x4a5
 8004c86:	4856      	ldr	r0, [pc, #344]	; (8004de0 <HAL_ADC_IRQHandler+0x168>)
 8004c88:	f7fd fbf6 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004c8c:	69e3      	ldr	r3, [r4, #28]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	f200 808f 	bhi.w	8004db4 <HAL_ADC_IRQHandler+0x13c>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	f200 8085 	bhi.w	8004da8 <HAL_ADC_IRQHandler+0x130>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004ca2:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004ca4:	0790      	lsls	r0, r2, #30
 8004ca6:	d513      	bpl.n	8004cd0 <HAL_ADC_IRQHandler+0x58>
 8004ca8:	068a      	lsls	r2, r1, #26
 8004caa:	d511      	bpl.n	8004cd0 <HAL_ADC_IRQHandler+0x58>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cae:	06d5      	lsls	r5, r2, #27
 8004cb0:	d403      	bmi.n	8004cba <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004cb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004cc0:	d058      	beq.n	8004d74 <HAL_ADC_IRQHandler+0xfc>
    HAL_ADC_ConvCpltCallback(hadc);
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7fb fd5e 	bl	8000784 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	f06f 0212 	mvn.w	r2, #18
 8004cce:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004cd0:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004cd2:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004cd4:	0752      	lsls	r2, r2, #29
 8004cd6:	d513      	bpl.n	8004d00 <HAL_ADC_IRQHandler+0x88>
 8004cd8:	060d      	lsls	r5, r1, #24
 8004cda:	d511      	bpl.n	8004d00 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cde:	06d0      	lsls	r0, r2, #27
 8004ce0:	d403      	bmi.n	8004cea <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ce2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce8:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004cf0:	d022      	beq.n	8004d38 <HAL_ADC_IRQHandler+0xc0>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 f956 	bl	8004fa4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f06f 020c 	mvn.w	r2, #12
 8004cfe:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004d00:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004d02:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004d04:	0650      	lsls	r0, r2, #25
 8004d06:	d504      	bpl.n	8004d12 <HAL_ADC_IRQHandler+0x9a>
 8004d08:	07ca      	lsls	r2, r1, #31
 8004d0a:	d502      	bpl.n	8004d12 <HAL_ADC_IRQHandler+0x9a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	07d5      	lsls	r5, r2, #31
 8004d10:	d456      	bmi.n	8004dc0 <HAL_ADC_IRQHandler+0x148>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004d12:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004d14:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8004d16:	0690      	lsls	r0, r2, #26
 8004d18:	d50d      	bpl.n	8004d36 <HAL_ADC_IRQHandler+0xbe>
 8004d1a:	014a      	lsls	r2, r1, #5
 8004d1c:	d50b      	bpl.n	8004d36 <HAL_ADC_IRQHandler+0xbe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d20:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8004d24:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d26:	f042 0202 	orr.w	r2, r2, #2
 8004d2a:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d2c:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8004d2e:	f7ff ffa1 	bl	8004c74 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	601d      	str	r5, [r3, #0]
}
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004d3a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004d3e:	d14b      	bne.n	8004dd8 <HAL_ADC_IRQHandler+0x160>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004d40:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004d42:	0552      	lsls	r2, r2, #21
 8004d44:	d4d5      	bmi.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004d46:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004d48:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004d4c:	d1d1      	bne.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004d4e:	69a2      	ldr	r2, [r4, #24]
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d1ce      	bne.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004d5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d62:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d66:	05dd      	lsls	r5, r3, #23
 8004d68:	d4c3      	bmi.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6423      	str	r3, [r4, #64]	; 0x40
 8004d72:	e7be      	b.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d74:	69a2      	ldr	r2, [r4, #24]
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d1a3      	bne.n	8004cc2 <HAL_ADC_IRQHandler+0x4a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d7c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004d80:	d002      	beq.n	8004d88 <HAL_ADC_IRQHandler+0x110>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d82:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d84:	0550      	lsls	r0, r2, #21
 8004d86:	d49c      	bmi.n	8004cc2 <HAL_ADC_IRQHandler+0x4a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	f022 0220 	bic.w	r2, r2, #32
 8004d8e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d96:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9a:	04d9      	lsls	r1, r3, #19
 8004d9c:	d491      	bmi.n	8004cc2 <HAL_ADC_IRQHandler+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6423      	str	r3, [r4, #64]	; 0x40
 8004da6:	e78c      	b.n	8004cc2 <HAL_ADC_IRQHandler+0x4a>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004da8:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8004dac:	480c      	ldr	r0, [pc, #48]	; (8004de0 <HAL_ADC_IRQHandler+0x168>)
 8004dae:	f7fd fb63 	bl	8002478 <assert_failed>
 8004db2:	e774      	b.n	8004c9e <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004db4:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8004db8:	4809      	ldr	r0, [pc, #36]	; (8004de0 <HAL_ADC_IRQHandler+0x168>)
 8004dba:	f7fd fb5d 	bl	8002478 <assert_failed>
 8004dbe:	e76a      	b.n	8004c96 <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004dc2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004dca:	f7ff ff51 	bl	8004c70 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f06f 0201 	mvn.w	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e79c      	b.n	8004d12 <HAL_ADC_IRQHandler+0x9a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004dd8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004dda:	0551      	lsls	r1, r2, #21
 8004ddc:	d489      	bmi.n	8004cf2 <HAL_ADC_IRQHandler+0x7a>
 8004dde:	e7af      	b.n	8004d40 <HAL_ADC_IRQHandler+0xc8>
 8004de0:	0802127c 	.word	0x0802127c

08004de4 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004de4:	680b      	ldr	r3, [r1, #0]
  __IO uint32_t counter = 0;
 8004de6:	2200      	movs	r2, #0
{
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004dea:	2b12      	cmp	r3, #18
{
 8004dec:	b083      	sub	sp, #12
 8004dee:	460d      	mov	r5, r1
 8004df0:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8004df2:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004df4:	d903      	bls.n	8004dfe <HAL_ADC_ConfigChannel+0x1a>
 8004df6:	4a66      	ldr	r2, [pc, #408]	; (8004f90 <HAL_ADC_ConfigChannel+0x1ac>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	f040 808f 	bne.w	8004f1c <HAL_ADC_ConfigChannel+0x138>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004dfe:	686b      	ldr	r3, [r5, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	f200 8094 	bhi.w	8004f30 <HAL_ADC_ConfigChannel+0x14c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004e08:	68ab      	ldr	r3, [r5, #8]
 8004e0a:	2b07      	cmp	r3, #7
 8004e0c:	f200 8099 	bhi.w	8004f42 <HAL_ADC_ConfigChannel+0x15e>
  __HAL_LOCK(hadc);
 8004e10:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f000 809e 	beq.w	8004f56 <HAL_ADC_ConfigChannel+0x172>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004e1a:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	6823      	ldr	r3, [r4, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004e20:	2e09      	cmp	r6, #9
  __HAL_LOCK(hadc);
 8004e22:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8004e26:	fa1f fc86 	uxth.w	ip, r6
 8004e2a:	68aa      	ldr	r2, [r5, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004e2c:	d825      	bhi.n	8004e7a <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e2e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8004e32:	2007      	movs	r0, #7
 8004e34:	6919      	ldr	r1, [r3, #16]
 8004e36:	40b8      	lsls	r0, r7
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e38:	fa02 f707 	lsl.w	r7, r2, r7
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e3c:	ea21 0100 	bic.w	r1, r1, r0
 8004e40:	6119      	str	r1, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	4317      	orrs	r7, r2
 8004e46:	611f      	str	r7, [r3, #16]
  if (sConfig->Rank < 7)
 8004e48:	6869      	ldr	r1, [r5, #4]
 8004e4a:	2906      	cmp	r1, #6
 8004e4c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004e50:	d82a      	bhi.n	8004ea8 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e52:	3a05      	subs	r2, #5
 8004e54:	201f      	movs	r0, #31
 8004e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e58:	4090      	lsls	r0, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e5a:	fa0c f202 	lsl.w	r2, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e5e:	ea21 0100 	bic.w	r1, r1, r0
 8004e62:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e66:	430a      	orrs	r2, r1
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e6a:	4a4a      	ldr	r2, [pc, #296]	; (8004f94 <HAL_ADC_ConfigChannel+0x1b0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02d      	beq.n	8004ecc <HAL_ADC_ConfigChannel+0xe8>
  __HAL_UNLOCK(hadc);
 8004e70:	2000      	movs	r0, #0
 8004e72:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004e76:	b003      	add	sp, #12
 8004e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e7a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
 8004e7e:	2007      	movs	r0, #7
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	3f1e      	subs	r7, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e84:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004f90 <HAL_ADC_ConfigChannel+0x1ac>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e88:	40b8      	lsls	r0, r7
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e8a:	4576      	cmp	r6, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e8c:	ea21 0100 	bic.w	r1, r1, r0
 8004e90:	60d9      	str	r1, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e92:	d078      	beq.n	8004f86 <HAL_ADC_ConfigChannel+0x1a2>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e94:	fa02 f707 	lsl.w	r7, r2, r7
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	4317      	orrs	r7, r2
 8004e9c:	60df      	str	r7, [r3, #12]
  if (sConfig->Rank < 7)
 8004e9e:	6869      	ldr	r1, [r5, #4]
 8004ea0:	2906      	cmp	r1, #6
 8004ea2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004ea6:	d9d4      	bls.n	8004e52 <HAL_ADC_ConfigChannel+0x6e>
  else if (sConfig->Rank < 13)
 8004ea8:	290c      	cmp	r1, #12
 8004eaa:	d857      	bhi.n	8004f5c <HAL_ADC_ConfigChannel+0x178>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004eac:	f1a2 0023 	sub.w	r0, r2, #35	; 0x23
 8004eb0:	251f      	movs	r5, #31
 8004eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eb4:	4085      	lsls	r5, r0
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004eb6:	fa0c f200 	lsl.w	r2, ip, r0
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004eba:	ea21 0105 	bic.w	r1, r1, r5
 8004ebe:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ec2:	4310      	orrs	r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <HAL_ADC_ConfigChannel+0x1b0>)
 8004ec6:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ec8:	6318      	str	r0, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004eca:	d1d1      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
 8004ecc:	2e12      	cmp	r6, #18
 8004ece:	d053      	beq.n	8004f78 <HAL_ADC_ConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	; (8004f90 <HAL_ADC_ConfigChannel+0x1ac>)
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	d001      	beq.n	8004eda <HAL_ADC_ConfigChannel+0xf6>
 8004ed6:	2e11      	cmp	r6, #17
 8004ed8:	d1ca      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <HAL_ADC_ConfigChannel+0x1b4>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004edc:	492c      	ldr	r1, [pc, #176]	; (8004f90 <HAL_ADC_ConfigChannel+0x1ac>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ede:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ee0:	428e      	cmp	r6, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee6:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ee8:	d1c2      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004eea:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_ADC_ConfigChannel+0x1b8>)
 8004ef0:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0c9b      	lsrs	r3, r3, #18
 8004f00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0b0      	beq.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
        counter--;
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f9      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x12a>
 8004f1a:	e7a9      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004f1c:	f240 615c 	movw	r1, #1628	; 0x65c
 8004f20:	481f      	ldr	r0, [pc, #124]	; (8004fa0 <HAL_ADC_ConfigChannel+0x1bc>)
 8004f22:	f7fd faa9 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004f26:	686b      	ldr	r3, [r5, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	f67f af6c 	bls.w	8004e08 <HAL_ADC_ConfigChannel+0x24>
 8004f30:	f240 615d 	movw	r1, #1629	; 0x65d
 8004f34:	481a      	ldr	r0, [pc, #104]	; (8004fa0 <HAL_ADC_ConfigChannel+0x1bc>)
 8004f36:	f7fd fa9f 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004f3a:	68ab      	ldr	r3, [r5, #8]
 8004f3c:	2b07      	cmp	r3, #7
 8004f3e:	f67f af67 	bls.w	8004e10 <HAL_ADC_ConfigChannel+0x2c>
 8004f42:	f240 615e 	movw	r1, #1630	; 0x65e
 8004f46:	4816      	ldr	r0, [pc, #88]	; (8004fa0 <HAL_ADC_ConfigChannel+0x1bc>)
 8004f48:	f7fd fa96 	bl	8002478 <assert_failed>
  __HAL_LOCK(hadc);
 8004f4c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f47f af62 	bne.w	8004e1a <HAL_ADC_ConfigChannel+0x36>
 8004f56:	2002      	movs	r0, #2
}
 8004f58:	b003      	add	sp, #12
 8004f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f5c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8004f60:	251f      	movs	r5, #31
 8004f62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f64:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f66:	fa0c f201 	lsl.w	r2, ip, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f6a:	ea20 0005 	bic.w	r0, r0, r5
 8004f6e:	62d8      	str	r0, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f72:	430a      	orrs	r2, r1
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f76:	e778      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x86>
    ADC->CCR |= ADC_CCR_VBATE;
 8004f78:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8004f84:	e774      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x8c>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f86:	68df      	ldr	r7, [r3, #12]
 8004f88:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8004f8c:	60df      	str	r7, [r3, #12]
 8004f8e:	e75b      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x64>
 8004f90:	10000012 	.word	0x10000012
 8004f94:	40012000 	.word	0x40012000
 8004f98:	40012300 	.word	0x40012300
 8004f9c:	200002b8 	.word	0x200002b8
 8004fa0:	0802127c 	.word	0x0802127c

08004fa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8004fa8:	680a      	ldr	r2, [r1, #0]
 8004faa:	2a19      	cmp	r2, #25
{
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8004fb2:	d93e      	bls.n	8005032 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8004fb4:	f240 319f 	movw	r1, #927	; 0x39f
 8004fb8:	4829      	ldr	r0, [pc, #164]	; (8005060 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004fba:	f7fd fa5d 	bl	8002478 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8004fc4:	d13d      	bne.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8004fc6:	68a3      	ldr	r3, [r4, #8]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	bf18      	it	ne
 8004fd2:	2b00      	cmpne	r3, #0
 8004fd4:	bf14      	ite	ne
 8004fd6:	2201      	movne	r2, #1
 8004fd8:	2200      	moveq	r2, #0
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fde:	bf0c      	ite	eq
 8004fe0:	2200      	moveq	r2, #0
 8004fe2:	f002 0201 	andne.w	r2, r2, #1
 8004fe6:	b112      	cbz	r2, 8004fee <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8004fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fec:	d131      	bne.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fee:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d02b      	beq.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff8:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8004ffa:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004ffc:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8004ffe:	f022 021f 	bic.w	r2, r2, #31
 8005002:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	6826      	ldr	r6, [r4, #0]
 8005008:	4332      	orrs	r2, r6
 800500a:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005012:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	6866      	ldr	r6, [r4, #4]
 8005018:	4332      	orrs	r2, r6
 800501a:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005022:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8005024:	68a4      	ldr	r4, [r4, #8]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4322      	orrs	r2, r4
 800502a:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800502c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8005030:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8005034:	40d3      	lsrs	r3, r2
 8005036:	07db      	lsls	r3, r3, #31
 8005038:	d5bc      	bpl.n	8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005040:	d0c1      	beq.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005042:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8005046:	4806      	ldr	r0, [pc, #24]	; (8005060 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005048:	f7fd fa16 	bl	8002478 <assert_failed>
 800504c:	e7bb      	b.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 800504e:	2002      	movs	r0, #2
}
 8005050:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005052:	f240 31a1 	movw	r1, #929	; 0x3a1
 8005056:	4802      	ldr	r0, [pc, #8]	; (8005060 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005058:	f7fd fa0e 	bl	8002478 <assert_failed>
 800505c:	e7c7      	b.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800505e:	bf00      	nop
 8005060:	080212b4 	.word	0x080212b4
 8005064:	40012300 	.word	0x40012300
 8005068:	02e602e7 	.word	0x02e602e7

0800506c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800506c:	1ec3      	subs	r3, r0, #3
 800506e:	2b04      	cmp	r3, #4
{
 8005070:	b510      	push	{r4, lr}
 8005072:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005074:	d903      	bls.n	800507e <HAL_NVIC_SetPriorityGrouping+0x12>
 8005076:	2192      	movs	r1, #146	; 0x92
 8005078:	4807      	ldr	r0, [pc, #28]	; (8005098 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 800507a:	f7fd f9fd 	bl	8002478 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800507e:	4907      	ldr	r1, [pc, #28]	; (800509c <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005080:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005084:	0224      	lsls	r4, r4, #8
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005088:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800508a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508e:	4002      	ands	r2, r0
 8005090:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005092:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005094:	60cc      	str	r4, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005096:	bd10      	pop	{r4, pc}
 8005098:	080212f0 	.word	0x080212f0
 800509c:	e000ed00 	.word	0xe000ed00
 80050a0:	05fa0000 	.word	0x05fa0000

080050a4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80050a4:	2a0f      	cmp	r2, #15
{ 
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	4616      	mov	r6, r2
 80050aa:	4605      	mov	r5, r0
 80050ac:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80050ae:	d832      	bhi.n	8005116 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80050b0:	2c0f      	cmp	r4, #15
 80050b2:	d82b      	bhi.n	800510c <HAL_NVIC_SetPriority+0x68>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_NVIC_SetPriority+0x7c>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050bc:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c0:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c2:	2904      	cmp	r1, #4
 80050c4:	bf28      	it	cs
 80050c6:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c8:	2a06      	cmp	r2, #6
 80050ca:	d917      	bls.n	80050fc <HAL_NVIC_SetPriority+0x58>
 80050cc:	3b03      	subs	r3, #3
 80050ce:	f04f 32ff 	mov.w	r2, #4294967295
 80050d2:	409a      	lsls	r2, r3
 80050d4:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80050dc:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050de:	fa02 f201 	lsl.w	r2, r2, r1
 80050e2:	ea24 0202 	bic.w	r2, r4, r2
 80050e6:	fa02 f203 	lsl.w	r2, r2, r3
 80050ea:	ea42 0206 	orr.w	r2, r2, r6
 80050ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80050f2:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80050f4:	db05      	blt.n	8005102 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_NVIC_SetPriority+0x80>)
 80050f8:	555a      	strb	r2, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fc:	2600      	movs	r6, #0
 80050fe:	4633      	mov	r3, r6
 8005100:	e7ea      	b.n	80050d8 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005102:	f005 050f 	and.w	r5, r5, #15
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_NVIC_SetPriority+0x84>)
 8005108:	555a      	strb	r2, [r3, r5]
 800510a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800510c:	21ab      	movs	r1, #171	; 0xab
 800510e:	4807      	ldr	r0, [pc, #28]	; (800512c <HAL_NVIC_SetPriority+0x88>)
 8005110:	f7fd f9b2 	bl	8002478 <assert_failed>
 8005114:	e7ce      	b.n	80050b4 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005116:	21aa      	movs	r1, #170	; 0xaa
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <HAL_NVIC_SetPriority+0x88>)
 800511a:	f7fd f9ad 	bl	8002478 <assert_failed>
 800511e:	e7c7      	b.n	80050b0 <HAL_NVIC_SetPriority+0xc>
 8005120:	e000ed00 	.word	0xe000ed00
 8005124:	e000e400 	.word	0xe000e400
 8005128:	e000ed14 	.word	0xe000ed14
 800512c:	080212f0 	.word	0x080212f0

08005130 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005130:	2800      	cmp	r0, #0
 8005132:	db08      	blt.n	8005146 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005134:	f000 011f 	and.w	r1, r0, #31
 8005138:	2301      	movs	r3, #1
 800513a:	0940      	lsrs	r0, r0, #5
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_NVIC_EnableIRQ+0x20>)
 800513e:	408b      	lsls	r3, r1
 8005140:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005144:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005146:	21be      	movs	r1, #190	; 0xbe
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <HAL_NVIC_EnableIRQ+0x24>)
 800514a:	f7fd b995 	b.w	8002478 <assert_failed>
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100
 8005154:	080212f0 	.word	0x080212f0

08005158 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005158:	2800      	cmp	r0, #0
 800515a:	d077      	beq.n	800524c <HAL_CRC_Init+0xf4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800515c:	4b3c      	ldr	r3, [pc, #240]	; (8005250 <HAL_CRC_Init+0xf8>)
 800515e:	6802      	ldr	r2, [r0, #0]
 8005160:	429a      	cmp	r2, r3
{
 8005162:	b510      	push	{r4, lr}
 8005164:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005166:	d003      	beq.n	8005170 <HAL_CRC_Init+0x18>
 8005168:	2170      	movs	r1, #112	; 0x70
 800516a:	483a      	ldr	r0, [pc, #232]	; (8005254 <HAL_CRC_Init+0xfc>)
 800516c:	f7fd f984 	bl	8002478 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005170:	7f63      	ldrb	r3, [r4, #29]
 8005172:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005176:	2b00      	cmp	r3, #0
 8005178:	d045      	beq.n	8005206 <HAL_CRC_Init+0xae>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800517a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800517c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800517e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005180:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005182:	d830      	bhi.n	80051e6 <HAL_CRC_Init+0x8e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005184:	2b00      	cmp	r3, #0
 8005186:	d135      	bne.n	80051f4 <HAL_CRC_Init+0x9c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	4a33      	ldr	r2, [pc, #204]	; (8005258 <HAL_CRC_Init+0x100>)
 800518c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	f022 0218 	bic.w	r2, r2, #24
 8005194:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8005196:	7962      	ldrb	r2, [r4, #5]
 8005198:	2a01      	cmp	r2, #1
 800519a:	d904      	bls.n	80051a6 <HAL_CRC_Init+0x4e>
 800519c:	2190      	movs	r1, #144	; 0x90
 800519e:	482d      	ldr	r0, [pc, #180]	; (8005254 <HAL_CRC_Init+0xfc>)
 80051a0:	f7fd f96a 	bl	8002478 <assert_failed>
 80051a4:	7962      	ldrb	r2, [r4, #5]
 80051a6:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	d136      	bne.n	800521a <HAL_CRC_Init+0xc2>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80051b2:	6962      	ldr	r2, [r4, #20]
 80051b4:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 80051b8:	d135      	bne.n	8005226 <HAL_CRC_Init+0xce>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051ba:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80051bc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051be:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80051c2:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80051c4:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051c8:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80051ca:	d138      	bne.n	800523e <HAL_CRC_Init+0xe6>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051cc:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80051ce:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80051d4:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051d6:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80051d8:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051da:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80051dc:	d82a      	bhi.n	8005234 <HAL_CRC_Init+0xdc>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051de:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80051e0:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80051e2:	7763      	strb	r3, [r4, #29]
}
 80051e4:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80051e6:	217e      	movs	r1, #126	; 0x7e
 80051e8:	481a      	ldr	r0, [pc, #104]	; (8005254 <HAL_CRC_Init+0xfc>)
 80051ea:	f7fd f945 	bl	8002478 <assert_failed>
 80051ee:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0c9      	beq.n	8005188 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80051f4:	68e2      	ldr	r2, [r4, #12]
 80051f6:	4620      	mov	r0, r4
 80051f8:	68a1      	ldr	r1, [r4, #8]
 80051fa:	f000 f82f 	bl	800525c <HAL_CRCEx_Polynomial_Set>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d0c9      	beq.n	8005196 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8005202:	2001      	movs	r0, #1
}
 8005204:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8005206:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8005208:	4620      	mov	r0, r4
 800520a:	f7fd ffe1 	bl	80031d0 <HAL_CRC_MspInit>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800520e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005210:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005212:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005214:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005216:	d9b5      	bls.n	8005184 <HAL_CRC_Init+0x2c>
 8005218:	e7e5      	b.n	80051e6 <HAL_CRC_Init+0x8e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800521a:	6922      	ldr	r2, [r4, #16]
 800521c:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800521e:	6962      	ldr	r2, [r4, #20]
 8005220:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005224:	d0c9      	beq.n	80051ba <HAL_CRC_Init+0x62>
 8005226:	219c      	movs	r1, #156	; 0x9c
 8005228:	480a      	ldr	r0, [pc, #40]	; (8005254 <HAL_CRC_Init+0xfc>)
 800522a:	f7fd f925 	bl	8002478 <assert_failed>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	6962      	ldr	r2, [r4, #20]
 8005232:	e7c2      	b.n	80051ba <HAL_CRC_Init+0x62>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005234:	21a5      	movs	r1, #165	; 0xa5
 8005236:	4807      	ldr	r0, [pc, #28]	; (8005254 <HAL_CRC_Init+0xfc>)
 8005238:	f7fd f91e 	bl	8002478 <assert_failed>
 800523c:	e7cf      	b.n	80051de <HAL_CRC_Init+0x86>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800523e:	4805      	ldr	r0, [pc, #20]	; (8005254 <HAL_CRC_Init+0xfc>)
 8005240:	21a0      	movs	r1, #160	; 0xa0
 8005242:	f7fd f919 	bl	8002478 <assert_failed>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	69a0      	ldr	r0, [r4, #24]
 800524a:	e7bf      	b.n	80051cc <HAL_CRC_Init+0x74>
    return HAL_ERROR;
 800524c:	2001      	movs	r0, #1
}
 800524e:	4770      	bx	lr
 8005250:	40023000 	.word	0x40023000
 8005254:	0802132c 	.word	0x0802132c
 8005258:	04c11db7 	.word	0x04c11db7

0800525c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800525c:	f032 0318 	bics.w	r3, r2, #24
{
 8005260:	b530      	push	{r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	b083      	sub	sp, #12
 8005266:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005268:	d005      	beq.n	8005276 <HAL_CRCEx_Polynomial_Set+0x1a>
 800526a:	215f      	movs	r1, #95	; 0x5f
 800526c:	481a      	ldr	r0, [pc, #104]	; (80052d8 <HAL_CRCEx_Polynomial_Set+0x7c>)
 800526e:	9201      	str	r2, [sp, #4]
 8005270:	f7fd f902 	bl	8002478 <assert_failed>
 8005274:	9a01      	ldr	r2, [sp, #4]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005276:	231e      	movs	r3, #30
 8005278:	e002      	b.n	8005280 <HAL_CRCEx_Polynomial_Set+0x24>
 800527a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800527e:	d320      	bcc.n	80052c2 <HAL_CRCEx_Polynomial_Set+0x66>
 8005280:	fa24 f103 	lsr.w	r1, r4, r3
 8005284:	07c9      	lsls	r1, r1, #31
 8005286:	d5f8      	bpl.n	800527a <HAL_CRCEx_Polynomial_Set+0x1e>
  {
  }

  switch (PolyLength)
 8005288:	2a18      	cmp	r2, #24
 800528a:	d81c      	bhi.n	80052c6 <HAL_CRCEx_Polynomial_Set+0x6a>
 800528c:	e8df f002 	tbb	[pc, r2]
 8005290:	1b1b1b0f 	.word	0x1b1b1b0f
 8005294:	1b1b1b1b 	.word	0x1b1b1b1b
 8005298:	1b1b1b21 	.word	0x1b1b1b21
 800529c:	1b1b1b1b 	.word	0x1b1b1b1b
 80052a0:	1b1b1b0d 	.word	0x1b1b1b0d
 80052a4:	1b1b1b1b 	.word	0x1b1b1b1b
 80052a8:	1e          	.byte	0x1e
 80052a9:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80052aa:	2b07      	cmp	r3, #7
 80052ac:	d80b      	bhi.n	80052c6 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052ae:	6829      	ldr	r1, [r5, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052b0:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052b2:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052b4:	688b      	ldr	r3, [r1, #8]
 80052b6:	f023 0318 	bic.w	r3, r3, #24
 80052ba:	431a      	orrs	r2, r3
 80052bc:	608a      	str	r2, [r1, #8]
  }
  /* Return function status */
  return status;
}
 80052be:	b003      	add	sp, #12
 80052c0:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d0f3      	beq.n	80052ae <HAL_CRCEx_Polynomial_Set+0x52>
      status =  HAL_ERROR;
 80052c6:	2001      	movs	r0, #1
}
 80052c8:	b003      	add	sp, #12
 80052ca:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80052cc:	2b06      	cmp	r3, #6
 80052ce:	d9ee      	bls.n	80052ae <HAL_CRCEx_Polynomial_Set+0x52>
 80052d0:	e7f9      	b.n	80052c6 <HAL_CRCEx_Polynomial_Set+0x6a>
      if (msb >= HAL_CRC_LENGTH_16B)
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d9eb      	bls.n	80052ae <HAL_CRCEx_Polynomial_Set+0x52>
 80052d6:	e7f6      	b.n	80052c6 <HAL_CRCEx_Polynomial_Set+0x6a>
 80052d8:	08021364 	.word	0x08021364

080052dc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 80052dc:	b1d8      	cbz	r0, 8005316 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <HAL_DAC_Init+0x40>)
 80052e0:	6802      	ldr	r2, [r0, #0]
 80052e2:	429a      	cmp	r2, r3
{ 
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80052e8:	d004      	beq.n	80052f4 <HAL_DAC_Init+0x18>
 80052ea:	f240 1113 	movw	r1, #275	; 0x113
 80052ee:	480c      	ldr	r0, [pc, #48]	; (8005320 <HAL_DAC_Init+0x44>)
 80052f0:	f7fd f8c2 	bl	8002478 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80052f4:	7923      	ldrb	r3, [r4, #4]
 80052f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052fa:	b13b      	cbz	r3, 800530c <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052fc:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80052fe:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005300:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005302:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8005304:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005306:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005308:	7122      	strb	r2, [r4, #4]
}
 800530a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 800530c:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 800530e:	4620      	mov	r0, r4
 8005310:	f7fd ff74 	bl	80031fc <HAL_DAC_MspInit>
 8005314:	e7f2      	b.n	80052fc <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8005316:	2001      	movs	r0, #1
}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40007400 	.word	0x40007400
 8005320:	080213a0 	.word	0x080213a0

08005324 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005328:	4699      	mov	r9, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800532a:	f031 0310 	bics.w	r3, r1, #16
{
 800532e:	460f      	mov	r7, r1
 8005330:	4604      	mov	r4, r0
 8005332:	4690      	mov	r8, r2
 8005334:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL(Channel));
 8005336:	d156      	bne.n	80053e6 <HAL_DAC_Start_DMA+0xc2>
  assert_param(IS_DAC_ALIGN(Alignment));
 8005338:	f036 0304 	bics.w	r3, r6, #4
 800533c:	d001      	beq.n	8005342 <HAL_DAC_Start_DMA+0x1e>
 800533e:	2e08      	cmp	r6, #8
 8005340:	d146      	bne.n	80053d0 <HAL_DAC_Start_DMA+0xac>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005342:	7962      	ldrb	r2, [r4, #5]
 8005344:	2a01      	cmp	r2, #1
 8005346:	d04b      	beq.n	80053e0 <HAL_DAC_Start_DMA+0xbc>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005348:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800534a:	2201      	movs	r2, #1
 800534c:	6825      	ldr	r5, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800534e:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8005350:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005352:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8005354:	b9cf      	cbnz	r7, 800538a <HAL_DAC_Start_DMA+0x66>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005356:	68a0      	ldr	r0, [r4, #8]
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800535c:	4a2e      	ldr	r2, [pc, #184]	; (8005418 <HAL_DAC_Start_DMA+0xf4>)
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800535e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005360:	492e      	ldr	r1, [pc, #184]	; (800541c <HAL_DAC_Start_DMA+0xf8>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005362:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005364:	4a2e      	ldr	r2, [pc, #184]	; (8005420 <HAL_DAC_Start_DMA+0xfc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005366:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005368:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800536a:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 800536c:	d050      	beq.n	8005410 <HAL_DAC_Start_DMA+0xec>
 800536e:	2e08      	cmp	r6, #8
 8005370:	d04b      	beq.n	800540a <HAL_DAC_Start_DMA+0xe6>
 8005372:	2e00      	cmp	r6, #0
 8005374:	d03d      	beq.n	80053f2 <HAL_DAC_Start_DMA+0xce>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005376:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005378:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800537a:	464b      	mov	r3, r9
 800537c:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800537e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8005382:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005384:	f000 fb26 	bl	80059d4 <HAL_DMA_Start_IT>
 8005388:	e017      	b.n	80053ba <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800538a:	68e0      	ldr	r0, [r4, #12]
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <HAL_DAC_Start_DMA+0x100>)
    switch(Alignment)
 8005392:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005394:	4924      	ldr	r1, [pc, #144]	; (8005428 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005396:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005398:	4a24      	ldr	r2, [pc, #144]	; (800542c <HAL_DAC_Start_DMA+0x108>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800539a:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800539c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800539e:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 80053a0:	d030      	beq.n	8005404 <HAL_DAC_Start_DMA+0xe0>
 80053a2:	2e08      	cmp	r6, #8
 80053a4:	d02b      	beq.n	80053fe <HAL_DAC_Start_DMA+0xda>
 80053a6:	b33e      	cbz	r6, 80053f8 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 80053a8:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053aa:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80053ac:	464b      	mov	r3, r9
 80053ae:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053b0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80053b4:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80053b6:	f000 fb0d 	bl	80059d4 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80053be:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 80053c0:	6815      	ldr	r5, [r2, #0]
 80053c2:	40b9      	lsls	r1, r7
  
  /* Return function status */
  return HAL_OK;
 80053c4:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 80053c6:	4329      	orrs	r1, r5
 80053c8:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdac);
 80053ca:	7163      	strb	r3, [r4, #5]
}
 80053cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 80053d0:	f240 210e 	movw	r1, #526	; 0x20e
 80053d4:	4816      	ldr	r0, [pc, #88]	; (8005430 <HAL_DAC_Start_DMA+0x10c>)
 80053d6:	f7fd f84f 	bl	8002478 <assert_failed>
  __HAL_LOCK(hdac);
 80053da:	7962      	ldrb	r2, [r4, #5]
 80053dc:	2a01      	cmp	r2, #1
 80053de:	d1b3      	bne.n	8005348 <HAL_DAC_Start_DMA+0x24>
 80053e0:	2002      	movs	r0, #2
}
 80053e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80053e6:	f240 210d 	movw	r1, #525	; 0x20d
 80053ea:	4811      	ldr	r0, [pc, #68]	; (8005430 <HAL_DAC_Start_DMA+0x10c>)
 80053ec:	f7fd f844 	bl	8002478 <assert_failed>
 80053f0:	e7a2      	b.n	8005338 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80053f2:	f105 0208 	add.w	r2, r5, #8
        break;
 80053f6:	e7bf      	b.n	8005378 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80053f8:	f105 0214 	add.w	r2, r5, #20
        break;
 80053fc:	e7d5      	b.n	80053aa <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80053fe:	f105 021c 	add.w	r2, r5, #28
        break;
 8005402:	e7d2      	b.n	80053aa <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005404:	f105 0218 	add.w	r2, r5, #24
        break;
 8005408:	e7cf      	b.n	80053aa <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800540a:	f105 0210 	add.w	r2, r5, #16
        break;
 800540e:	e7b3      	b.n	8005378 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005410:	f105 020c 	add.w	r2, r5, #12
        break;
 8005414:	e7b0      	b.n	8005378 <HAL_DAC_Start_DMA+0x54>
 8005416:	bf00      	nop
 8005418:	080054a9 	.word	0x080054a9
 800541c:	080054bd 	.word	0x080054bd
 8005420:	080054cd 	.word	0x080054cd
 8005424:	08005615 	.word	0x08005615
 8005428:	08005625 	.word	0x08005625
 800542c:	08005631 	.word	0x08005631
 8005430:	080213a0 	.word	0x080213a0

08005434 <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8005434:	f031 0310 	bics.w	r3, r1, #16
{
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 800543e:	d116      	bne.n	800546e <HAL_DAC_Stop_DMA+0x3a>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005440:	6803      	ldr	r3, [r0, #0]
 8005442:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005446:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 800544c:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005450:	ea20 0006 	bic.w	r0, r0, r6
 8005454:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	ea22 0201 	bic.w	r2, r2, r1
 800545c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800545e:	b9cc      	cbnz	r4, 8005494 <HAL_DAC_Stop_DMA+0x60>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8005460:	68a8      	ldr	r0, [r5, #8]
 8005462:	f000 fb11 	bl	8005a88 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005466:	b9d0      	cbnz	r0, 800549e <HAL_DAC_Stop_DMA+0x6a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005468:	2301      	movs	r3, #1
 800546a:	712b      	strb	r3, [r5, #4]
  }

  /* Return function status */
  return status;
}
 800546c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800546e:	f44f 7121 	mov.w	r1, #644	; 0x284
 8005472:	480c      	ldr	r0, [pc, #48]	; (80054a4 <HAL_DAC_Stop_DMA+0x70>)
 8005474:	f7fd f800 	bl	8002478 <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800547e:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8005484:	40a2      	lsls	r2, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005486:	ea21 0100 	bic.w	r1, r1, r0
 800548a:	6019      	str	r1, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800548c:	681c      	ldr	r4, [r3, #0]
 800548e:	ea24 0402 	bic.w	r4, r4, r2
 8005492:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8005494:	68e8      	ldr	r0, [r5, #12]
 8005496:	f000 faf7 	bl	8005a88 <HAL_DMA_Abort>
  if(status != HAL_OK)
 800549a:	2800      	cmp	r0, #0
 800549c:	d0e4      	beq.n	8005468 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800549e:	2304      	movs	r3, #4
 80054a0:	712b      	strb	r3, [r5, #4]
}
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	080213a0 	.word	0x080213a0

080054a8 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80054a8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fb fd71 	bl	8000f94 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80054b2:	2301      	movs	r3, #1
 80054b4:	7123      	strb	r3, [r4, #4]
}
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop

080054bc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80054bc:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80054be:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80054c0:	f7ff fffa 	bl	80054b8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80054c4:	bd08      	pop	{r3, pc}
 80054c6:	bf00      	nop

080054c8 <HAL_DAC_ErrorCallbackCh1>:
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80054cc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054d0:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80054d2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054d4:	f043 0304 	orr.w	r3, r3, #4
 80054d8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80054da:	f7ff fff5 	bl	80054c8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80054de:	2301      	movs	r3, #1
 80054e0:	7123      	strb	r3, [r4, #4]
}
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80054e8:	6803      	ldr	r3, [r0, #0]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ec:	0491      	lsls	r1, r2, #18
{
 80054ee:	b510      	push	{r4, lr}
 80054f0:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80054f2:	d415      	bmi.n	8005520 <HAL_DAC_IRQHandler+0x38>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80054f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f6:	0092      	lsls	r2, r2, #2
 80054f8:	d400      	bmi.n	80054fc <HAL_DAC_IRQHandler+0x14>
}
 80054fa:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 80054fc:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80054fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005502:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 8005504:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005506:	6922      	ldr	r2, [r4, #16]
 8005508:	f042 0202 	orr.w	r2, r2, #2
 800550c:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800550e:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8005516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800551a:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800551c:	f000 b878 	b.w	8005610 <HAL_DACEx_DMAUnderrunCallbackCh2>
    hdac->State = HAL_DAC_STATE_ERROR;
 8005520:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 8005526:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005528:	6902      	ldr	r2, [r0, #16]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005530:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005538:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800553a:	f7ff ffd3 	bl	80054e4 <HAL_DAC_DMAUnderrunCallbackCh1>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	e7d8      	b.n	80054f4 <HAL_DAC_IRQHandler+0xc>
 8005542:	bf00      	nop

08005544 <HAL_DAC_ConfigChannel>:
{
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8005548:	6809      	ldr	r1, [r1, #0]
{
 800554a:	4604      	mov	r4, r0
 800554c:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800554e:	f031 0304 	bics.w	r3, r1, #4
 8005552:	f021 0008 	bic.w	r0, r1, #8
 8005556:	f021 0210 	bic.w	r2, r1, #16
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	2824      	cmp	r0, #36	; 0x24
 8005562:	bf0c      	ite	eq
 8005564:	2300      	moveq	r3, #0
 8005566:	f003 0301 	andne.w	r3, r3, #1
 800556a:	293c      	cmp	r1, #60	; 0x3c
 800556c:	bf0c      	ite	eq
 800556e:	2300      	moveq	r3, #0
 8005570:	f003 0301 	andne.w	r3, r3, #1
 8005574:	2a0c      	cmp	r2, #12
 8005576:	bf0c      	ite	eq
 8005578:	2300      	moveq	r3, #0
 800557a:	f003 0301 	andne.w	r3, r3, #1
 800557e:	b11b      	cbz	r3, 8005588 <HAL_DAC_ConfigChannel+0x44>
 8005580:	f021 0120 	bic.w	r1, r1, #32
 8005584:	2914      	cmp	r1, #20
 8005586:	d135      	bne.n	80055f4 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8005588:	6873      	ldr	r3, [r6, #4]
 800558a:	f033 0302 	bics.w	r3, r3, #2
 800558e:	d12b      	bne.n	80055e8 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8005590:	f035 0310 	bics.w	r3, r5, #16
 8005594:	d11e      	bne.n	80055d4 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8005596:	7963      	ldrb	r3, [r4, #5]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d023      	beq.n	80055e4 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 = hdac->Instance->CR;
 800559c:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800559e:	2702      	movs	r7, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80055a0:	f640 70fe 	movw	r0, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80055a4:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdac->State = HAL_DAC_STATE_BUSY;
 80055a8:	7127      	strb	r7, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80055aa:	fa00 f605 	lsl.w	r6, r0, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80055ae:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 80055b0:	6808      	ldr	r0, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80055b2:	22c0      	movs	r2, #192	; 0xc0
  hdac->State = HAL_DAC_STATE_READY;
 80055b4:	2701      	movs	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80055b6:	ea20 0006 	bic.w	r0, r0, r6
  tmpreg1 |= tmpreg2 << Channel;
 80055ba:	40ab      	lsls	r3, r5
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80055bc:	40aa      	lsls	r2, r5
  __HAL_UNLOCK(hdac);
 80055be:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 80055c0:	4303      	orrs	r3, r0
  return HAL_OK;
 80055c2:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 80055c4:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80055c6:	680d      	ldr	r5, [r1, #0]
 80055c8:	ea25 0502 	bic.w	r5, r5, r2
 80055cc:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80055ce:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 80055d0:	7166      	strb	r6, [r4, #5]
}
 80055d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80055d4:	f44f 7157 	mov.w	r1, #860	; 0x35c
 80055d8:	4809      	ldr	r0, [pc, #36]	; (8005600 <HAL_DAC_ConfigChannel+0xbc>)
 80055da:	f7fc ff4d 	bl	8002478 <assert_failed>
  __HAL_LOCK(hdac);
 80055de:	7963      	ldrb	r3, [r4, #5]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d1db      	bne.n	800559c <HAL_DAC_ConfigChannel+0x58>
 80055e4:	2002      	movs	r0, #2
}
 80055e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80055e8:	f240 315b 	movw	r1, #859	; 0x35b
 80055ec:	4804      	ldr	r0, [pc, #16]	; (8005600 <HAL_DAC_ConfigChannel+0xbc>)
 80055ee:	f7fc ff43 	bl	8002478 <assert_failed>
 80055f2:	e7cd      	b.n	8005590 <HAL_DAC_ConfigChannel+0x4c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80055f4:	f240 315a 	movw	r1, #858	; 0x35a
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <HAL_DAC_ConfigChannel+0xbc>)
 80055fa:	f7fc ff3d 	bl	8002478 <assert_failed>
 80055fe:	e7c3      	b.n	8005588 <HAL_DAC_ConfigChannel+0x44>
 8005600:	080213a0 	.word	0x080213a0

08005604 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop

08005608 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop

0800560c <HAL_DACEx_ErrorCallbackCh2>:
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop

08005610 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005614:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005616:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fff3 	bl	8005604 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800561e:	2301      	movs	r3, #1
 8005620:	7123      	strb	r3, [r4, #4]
}
 8005622:	bd10      	pop	{r4, pc}

08005624 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005624:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005626:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005628:	f7ff ffee 	bl	8005608 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800562c:	bd08      	pop	{r3, pc}
 800562e:	bf00      	nop

08005630 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005630:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005632:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005634:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005636:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800563e:	f7ff ffe5 	bl	800560c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005642:	2301      	movs	r3, #1
 8005644:	7123      	strb	r3, [r4, #4]
}
 8005646:	bd10      	pop	{r4, pc}

08005648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7ff f8d6 	bl	80047fc <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005650:	2c00      	cmp	r4, #0
 8005652:	f000 812b 	beq.w	80058ac <HAL_DMA_Init+0x264>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	4605      	mov	r5, r0
 800565a:	4bbd      	ldr	r3, [pc, #756]	; (8005950 <HAL_DMA_Init+0x308>)
 800565c:	48bd      	ldr	r0, [pc, #756]	; (8005954 <HAL_DMA_Init+0x30c>)
 800565e:	49be      	ldr	r1, [pc, #760]	; (8005958 <HAL_DMA_Init+0x310>)
 8005660:	429a      	cmp	r2, r3
 8005662:	bf18      	it	ne
 8005664:	4282      	cmpne	r2, r0
 8005666:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	428a      	cmp	r2, r1
 8005672:	bf0c      	ite	eq
 8005674:	2300      	moveq	r3, #0
 8005676:	f003 0301 	andne.w	r3, r3, #1
 800567a:	3130      	adds	r1, #48	; 0x30
 800567c:	4282      	cmp	r2, r0
 800567e:	bf0c      	ite	eq
 8005680:	2300      	moveq	r3, #0
 8005682:	f003 0301 	andne.w	r3, r3, #1
 8005686:	3030      	adds	r0, #48	; 0x30
 8005688:	428a      	cmp	r2, r1
 800568a:	bf0c      	ite	eq
 800568c:	2300      	moveq	r3, #0
 800568e:	f003 0301 	andne.w	r3, r3, #1
 8005692:	3130      	adds	r1, #48	; 0x30
 8005694:	4282      	cmp	r2, r0
 8005696:	bf0c      	ite	eq
 8005698:	2300      	moveq	r3, #0
 800569a:	f003 0301 	andne.w	r3, r3, #1
 800569e:	3030      	adds	r0, #48	; 0x30
 80056a0:	428a      	cmp	r2, r1
 80056a2:	bf0c      	ite	eq
 80056a4:	2300      	moveq	r3, #0
 80056a6:	f003 0301 	andne.w	r3, r3, #1
 80056aa:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80056ae:	4282      	cmp	r2, r0
 80056b0:	bf0c      	ite	eq
 80056b2:	2300      	moveq	r3, #0
 80056b4:	f003 0301 	andne.w	r3, r3, #1
 80056b8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80056bc:	428a      	cmp	r2, r1
 80056be:	bf0c      	ite	eq
 80056c0:	2300      	moveq	r3, #0
 80056c2:	f003 0301 	andne.w	r3, r3, #1
 80056c6:	3130      	adds	r1, #48	; 0x30
 80056c8:	4282      	cmp	r2, r0
 80056ca:	bf0c      	ite	eq
 80056cc:	2300      	moveq	r3, #0
 80056ce:	f003 0301 	andne.w	r3, r3, #1
 80056d2:	3030      	adds	r0, #48	; 0x30
 80056d4:	428a      	cmp	r2, r1
 80056d6:	bf0c      	ite	eq
 80056d8:	2300      	moveq	r3, #0
 80056da:	f003 0301 	andne.w	r3, r3, #1
 80056de:	3130      	adds	r1, #48	; 0x30
 80056e0:	4282      	cmp	r2, r0
 80056e2:	bf0c      	ite	eq
 80056e4:	2300      	moveq	r3, #0
 80056e6:	f003 0301 	andne.w	r3, r3, #1
 80056ea:	3030      	adds	r0, #48	; 0x30
 80056ec:	428a      	cmp	r2, r1
 80056ee:	bf0c      	ite	eq
 80056f0:	2300      	moveq	r3, #0
 80056f2:	f003 0301 	andne.w	r3, r3, #1
 80056f6:	3130      	adds	r1, #48	; 0x30
 80056f8:	4282      	cmp	r2, r0
 80056fa:	bf0c      	ite	eq
 80056fc:	2300      	moveq	r3, #0
 80056fe:	f003 0301 	andne.w	r3, r3, #1
 8005702:	428a      	cmp	r2, r1
 8005704:	bf0c      	ite	eq
 8005706:	2300      	moveq	r3, #0
 8005708:	f003 0301 	andne.w	r3, r3, #1
 800570c:	b11b      	cbz	r3, 8005716 <HAL_DMA_Init+0xce>
 800570e:	4b93      	ldr	r3, [pc, #588]	; (800595c <HAL_DMA_Init+0x314>)
 8005710:	429a      	cmp	r2, r3
 8005712:	f040 8140 	bne.w	8005996 <HAL_DMA_Init+0x34e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800571c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005720:	bf18      	it	ne
 8005722:	2b00      	cmpne	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2201      	movne	r2, #1
 8005728:	2200      	moveq	r2, #0
 800572a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572e:	bf0c      	ite	eq
 8005730:	2200      	moveq	r2, #0
 8005732:	f002 0201 	andne.w	r2, r2, #1
 8005736:	b11a      	cbz	r2, 8005740 <HAL_DMA_Init+0xf8>
 8005738:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800573c:	f040 8130 	bne.w	80059a0 <HAL_DMA_Init+0x358>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8005746:	d002      	beq.n	800574e <HAL_DMA_Init+0x106>
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	f040 80b1 	bne.w	80058b0 <HAL_DMA_Init+0x268>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800574e:	68e3      	ldr	r3, [r4, #12]
 8005750:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8005754:	f040 8091 	bne.w	800587a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800575e:	f040 8082 	bne.w	8005866 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8005768:	d003      	beq.n	8005772 <HAL_DMA_Init+0x12a>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	f040 80a9 	bne.w	80058c4 <HAL_DMA_Init+0x27c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005772:	69a3      	ldr	r3, [r4, #24]
 8005774:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8005778:	d003      	beq.n	8005782 <HAL_DMA_Init+0x13a>
 800577a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577e:	f040 80ab 	bne.w	80058d8 <HAL_DMA_Init+0x290>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005782:	69e3      	ldr	r3, [r4, #28]
 8005784:	f033 0220 	bics.w	r2, r3, #32
 8005788:	d003      	beq.n	8005792 <HAL_DMA_Init+0x14a>
 800578a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578e:	f040 80ad 	bne.w	80058ec <HAL_DMA_Init+0x2a4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005792:	6a23      	ldr	r3, [r4, #32]
 8005794:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005798:	f040 80b1 	bne.w	80058fe <HAL_DMA_Init+0x2b6>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800579c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579e:	f033 0204 	bics.w	r2, r3, #4
 80057a2:	d174      	bne.n	800588e <HAL_DMA_Init+0x246>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d14c      	bne.n	8005842 <HAL_DMA_Init+0x1fa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057a8:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057aa:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80057ac:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80057ae:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80057b2:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80057b4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057be:	e005      	b.n	80057cc <HAL_DMA_Init+0x184>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057c0:	f7ff f81c 	bl	80047fc <HAL_GetTick>
 80057c4:	1b40      	subs	r0, r0, r5
 80057c6:	2805      	cmp	r0, #5
 80057c8:	d869      	bhi.n	800589e <HAL_DMA_Init+0x256>
 80057ca:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	07d1      	lsls	r1, r2, #31
 80057d0:	d4f6      	bmi.n	80057c0 <HAL_DMA_Init+0x178>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057d2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80057d6:	68e1      	ldr	r1, [r4, #12]
 80057d8:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80057da:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057dc:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057e0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e4:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e6:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ea:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057ec:	4d5c      	ldr	r5, [pc, #368]	; (8005960 <HAL_DMA_Init+0x318>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ee:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057f0:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f6:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f8:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057fa:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057fe:	f000 8083 	beq.w	8005908 <HAL_DMA_Init+0x2c0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005804:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005806:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800580a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4d55      	ldr	r5, [pc, #340]	; (8005964 <HAL_DMA_Init+0x31c>)
  hdma->Instance->FCR = tmp;
 8005810:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005812:	3a10      	subs	r2, #16
 8005814:	4954      	ldr	r1, [pc, #336]	; (8005968 <HAL_DMA_Init+0x320>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005816:	4855      	ldr	r0, [pc, #340]	; (800596c <HAL_DMA_Init+0x324>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005818:	fba5 5202 	umull	r5, r2, r5, r2
 800581c:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800581e:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005820:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005822:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005824:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 8005826:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005828:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800582c:	bf88      	it	hi
 800582e:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005830:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005832:	4083      	lsls	r3, r0
  return HAL_OK;
 8005834:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005836:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005838:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800583a:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800583c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005844:	2b03      	cmp	r3, #3
 8005846:	f200 8095 	bhi.w	8005974 <HAL_DMA_Init+0x32c>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800584a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800584c:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8005850:	f040 8095 	bne.w	800597e <HAL_DMA_Init+0x336>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005856:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800585a:	d0a5      	beq.n	80057a8 <HAL_DMA_Init+0x160>
 800585c:	21c9      	movs	r1, #201	; 0xc9
 800585e:	4844      	ldr	r0, [pc, #272]	; (8005970 <HAL_DMA_Init+0x328>)
 8005860:	f7fc fe0a 	bl	8002478 <assert_failed>
 8005864:	e7a0      	b.n	80057a8 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005866:	21bd      	movs	r1, #189	; 0xbd
 8005868:	4841      	ldr	r0, [pc, #260]	; (8005970 <HAL_DMA_Init+0x328>)
 800586a:	f7fc fe05 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800586e:	6963      	ldr	r3, [r4, #20]
 8005870:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8005874:	f47f af79 	bne.w	800576a <HAL_DMA_Init+0x122>
 8005878:	e77b      	b.n	8005772 <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800587a:	21bc      	movs	r1, #188	; 0xbc
 800587c:	483c      	ldr	r0, [pc, #240]	; (8005970 <HAL_DMA_Init+0x328>)
 800587e:	f7fc fdfb 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8005888:	f43f af6b 	beq.w	8005762 <HAL_DMA_Init+0x11a>
 800588c:	e7eb      	b.n	8005866 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800588e:	21c2      	movs	r1, #194	; 0xc2
 8005890:	4837      	ldr	r0, [pc, #220]	; (8005970 <HAL_DMA_Init+0x328>)
 8005892:	f7fc fdf1 	bl	8002478 <assert_failed>
 8005896:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005898:	2b00      	cmp	r3, #0
 800589a:	d085      	beq.n	80057a8 <HAL_DMA_Init+0x160>
 800589c:	e7d1      	b.n	8005842 <HAL_DMA_Init+0x1fa>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800589e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058a0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80058a2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058a4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80058ac:	2001      	movs	r0, #1
}
 80058ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80058b0:	21bb      	movs	r1, #187	; 0xbb
 80058b2:	482f      	ldr	r0, [pc, #188]	; (8005970 <HAL_DMA_Init+0x328>)
 80058b4:	f7fc fde0 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80058be:	f43f af4b 	beq.w	8005758 <HAL_DMA_Init+0x110>
 80058c2:	e7da      	b.n	800587a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80058c4:	21be      	movs	r1, #190	; 0xbe
 80058c6:	482a      	ldr	r0, [pc, #168]	; (8005970 <HAL_DMA_Init+0x328>)
 80058c8:	f7fc fdd6 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80058cc:	69a3      	ldr	r3, [r4, #24]
 80058ce:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80058d2:	f47f af52 	bne.w	800577a <HAL_DMA_Init+0x132>
 80058d6:	e754      	b.n	8005782 <HAL_DMA_Init+0x13a>
 80058d8:	21bf      	movs	r1, #191	; 0xbf
 80058da:	4825      	ldr	r0, [pc, #148]	; (8005970 <HAL_DMA_Init+0x328>)
 80058dc:	f7fc fdcc 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80058e0:	69e3      	ldr	r3, [r4, #28]
 80058e2:	f033 0220 	bics.w	r2, r3, #32
 80058e6:	f47f af50 	bne.w	800578a <HAL_DMA_Init+0x142>
 80058ea:	e752      	b.n	8005792 <HAL_DMA_Init+0x14a>
 80058ec:	21c0      	movs	r1, #192	; 0xc0
 80058ee:	4820      	ldr	r0, [pc, #128]	; (8005970 <HAL_DMA_Init+0x328>)
 80058f0:	f7fc fdc2 	bl	8002478 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80058fa:	f43f af4f 	beq.w	800579c <HAL_DMA_Init+0x154>
 80058fe:	21c1      	movs	r1, #193	; 0xc1
 8005900:	481b      	ldr	r0, [pc, #108]	; (8005970 <HAL_DMA_Init+0x328>)
 8005902:	f7fc fdb9 	bl	8002478 <assert_failed>
 8005906:	e749      	b.n	800579c <HAL_DMA_Init+0x154>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005908:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800590c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800590e:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8005912:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005916:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8005918:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800591a:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800591c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8005920:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005922:	2d00      	cmp	r5, #0
 8005924:	f43f af72 	beq.w	800580c <HAL_DMA_Init+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005928:	b376      	cbz	r6, 8005988 <HAL_DMA_Init+0x340>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800592a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800592e:	d041      	beq.n	80059b4 <HAL_DMA_Init+0x36c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005930:	2f02      	cmp	r7, #2
 8005932:	d905      	bls.n	8005940 <HAL_DMA_Init+0x2f8>
 8005934:	2f03      	cmp	r7, #3
 8005936:	f47f af69 	bne.w	800580c <HAL_DMA_Init+0x1c4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800593a:	01ea      	lsls	r2, r5, #7
 800593c:	f57f af66 	bpl.w	800580c <HAL_DMA_Init+0x1c4>
        hdma->State = HAL_DMA_STATE_READY;
 8005940:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005942:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8005944:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005946:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005948:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800594e:	bf00      	nop
 8005950:	40026010 	.word	0x40026010
 8005954:	40026028 	.word	0x40026028
 8005958:	40026040 	.word	0x40026040
 800595c:	400264b8 	.word	0x400264b8
 8005960:	e010803f 	.word	0xe010803f
 8005964:	aaaaaaab 	.word	0xaaaaaaab
 8005968:	fffffc00 	.word	0xfffffc00
 800596c:	08021410 	.word	0x08021410
 8005970:	080213d8 	.word	0x080213d8
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005974:	21c7      	movs	r1, #199	; 0xc7
 8005976:	4816      	ldr	r0, [pc, #88]	; (80059d0 <HAL_DMA_Init+0x388>)
 8005978:	f7fc fd7e 	bl	8002478 <assert_failed>
 800597c:	e765      	b.n	800584a <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800597e:	21c8      	movs	r1, #200	; 0xc8
 8005980:	4813      	ldr	r0, [pc, #76]	; (80059d0 <HAL_DMA_Init+0x388>)
 8005982:	f7fc fd79 	bl	8002478 <assert_failed>
 8005986:	e765      	b.n	8005854 <HAL_DMA_Init+0x20c>
    switch (tmp)
 8005988:	2f01      	cmp	r7, #1
 800598a:	d00e      	beq.n	80059aa <HAL_DMA_Init+0x362>
 800598c:	d3d5      	bcc.n	800593a <HAL_DMA_Init+0x2f2>
 800598e:	2f02      	cmp	r7, #2
 8005990:	f47f af3c 	bne.w	800580c <HAL_DMA_Init+0x1c4>
 8005994:	e7d1      	b.n	800593a <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005996:	21b9      	movs	r1, #185	; 0xb9
 8005998:	480d      	ldr	r0, [pc, #52]	; (80059d0 <HAL_DMA_Init+0x388>)
 800599a:	f7fc fd6d 	bl	8002478 <assert_failed>
 800599e:	e6ba      	b.n	8005716 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80059a0:	21ba      	movs	r1, #186	; 0xba
 80059a2:	480b      	ldr	r0, [pc, #44]	; (80059d0 <HAL_DMA_Init+0x388>)
 80059a4:	f7fc fd68 	bl	8002478 <assert_failed>
 80059a8:	e6ca      	b.n	8005740 <HAL_DMA_Init+0xf8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059aa:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80059ae:	f47f af2d 	bne.w	800580c <HAL_DMA_Init+0x1c4>
 80059b2:	e7c5      	b.n	8005940 <HAL_DMA_Init+0x2f8>
    switch (tmp)
 80059b4:	2f03      	cmp	r7, #3
 80059b6:	f63f af29 	bhi.w	800580c <HAL_DMA_Init+0x1c4>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <HAL_DMA_Init+0x378>)
 80059bc:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80059c0:	08005941 	.word	0x08005941
 80059c4:	0800593b 	.word	0x0800593b
 80059c8:	08005941 	.word	0x08005941
 80059cc:	080059ab 	.word	0x080059ab
 80059d0:	080213d8 	.word	0x080213d8

080059d4 <HAL_DMA_Start_IT>:
{
 80059d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d8:	461d      	mov	r5, r3
 80059da:	460f      	mov	r7, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80059dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 80059e0:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80059e2:	1e69      	subs	r1, r5, #1
{
 80059e4:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d83a      	bhi.n	8005a62 <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 80059ec:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d03f      	beq.n	8005a74 <HAL_DMA_Start_IT+0xa0>
 80059f4:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80059f6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80059fa:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 80059fc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a00:	d129      	bne.n	8005a56 <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a02:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a04:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a06:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a08:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a0c:	6563      	str	r3, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a0e:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a10:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a12:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a18:	600b      	str	r3, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8005a1a:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a1c:	d02d      	beq.n	8005a7a <HAL_DMA_Start_IT+0xa6>
    hdma->Instance->PAR = SrcAddress;
 8005a1e:	608f      	str	r7, [r1, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a20:	f8c1 800c 	str.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a24:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005a26:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8005a28:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a2a:	4083      	lsls	r3, r0
 8005a2c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a2e:	680b      	ldr	r3, [r1, #0]
 8005a30:	f043 0316 	orr.w	r3, r3, #22
 8005a34:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005a36:	694b      	ldr	r3, [r1, #20]
 8005a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3c:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005a3e:	b11a      	cbz	r2, 8005a48 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a40:	680b      	ldr	r3, [r1, #0]
 8005a42:	f043 0308 	orr.w	r3, r3, #8
 8005a46:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8005a48:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	600b      	str	r3, [r1, #0]
}
 8005a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8005a56:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8005a58:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8005a5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005a62:	f240 11cd 	movw	r1, #461	; 0x1cd
 8005a66:	4807      	ldr	r0, [pc, #28]	; (8005a84 <HAL_DMA_Start_IT+0xb0>)
 8005a68:	f7fc fd06 	bl	8002478 <assert_failed>
  __HAL_LOCK(hdma);
 8005a6c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d1bf      	bne.n	80059f4 <HAL_DMA_Start_IT+0x20>
 8005a74:	2002      	movs	r0, #2
}
 8005a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->Instance->PAR = DstAddress;
 8005a7a:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005a7e:	60cf      	str	r7, [r1, #12]
 8005a80:	e7d0      	b.n	8005a24 <HAL_DMA_Start_IT+0x50>
 8005a82:	bf00      	nop
 8005a84:	080213d8 	.word	0x080213d8

08005a88 <HAL_DMA_Abort>:
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a8c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005a8e:	f7fe feb5 	bl	80047fc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a92:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d006      	beq.n	8005aa8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a9a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005a9c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005a9e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa0:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005aa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aac:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	f022 0216 	bic.w	r2, r2, #22
 8005ab4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abc:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005abe:	b339      	cbz	r1, 8005b10 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f022 0208 	bic.w	r2, r2, #8
 8005ac6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad0:	e005      	b.n	8005ade <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ad2:	f7fe fe93 	bl	80047fc <HAL_GetTick>
 8005ad6:	1b40      	subs	r0, r0, r5
 8005ad8:	2805      	cmp	r0, #5
 8005ada:	d80f      	bhi.n	8005afc <HAL_DMA_Abort+0x74>
 8005adc:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f013 0301 	ands.w	r3, r3, #1
 8005ae4:	d1f5      	bne.n	8005ad2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ae8:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005aea:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aec:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005aee:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005af0:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005af2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005af6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005afe:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005b00:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b02:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b04:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8005b06:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d1d4      	bne.n	8005ac0 <HAL_DMA_Abort+0x38>
 8005b16:	e7d7      	b.n	8005ac8 <HAL_DMA_Abort+0x40>

08005b18 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b18:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8005b1c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b1e:	2a02      	cmp	r2, #2
 8005b20:	d003      	beq.n	8005b2a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b22:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005b24:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b28:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005b2a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b2c:	2105      	movs	r1, #5
  return HAL_OK;
 8005b2e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b30:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop

08005b40 <HAL_DMA_IRQHandler>:
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8005b46:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b48:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8005b4a:	4966      	ldr	r1, [pc, #408]	; (8005ce4 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8005b4c:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b4e:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b50:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8005b54:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8005b56:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b58:	422a      	tst	r2, r5
 8005b5a:	d003      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b5c:	6821      	ldr	r1, [r4, #0]
 8005b5e:	6808      	ldr	r0, [r1, #0]
 8005b60:	0740      	lsls	r0, r0, #29
 8005b62:	d459      	bmi.n	8005c18 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b64:	2201      	movs	r2, #1
 8005b66:	409a      	lsls	r2, r3
 8005b68:	422a      	tst	r2, r5
 8005b6a:	d003      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b6c:	6821      	ldr	r1, [r4, #0]
 8005b6e:	6949      	ldr	r1, [r1, #20]
 8005b70:	0608      	lsls	r0, r1, #24
 8005b72:	d474      	bmi.n	8005c5e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b74:	2204      	movs	r2, #4
 8005b76:	409a      	lsls	r2, r3
 8005b78:	422a      	tst	r2, r5
 8005b7a:	d003      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b7c:	6821      	ldr	r1, [r4, #0]
 8005b7e:	6809      	ldr	r1, [r1, #0]
 8005b80:	0789      	lsls	r1, r1, #30
 8005b82:	d466      	bmi.n	8005c52 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b84:	2210      	movs	r2, #16
 8005b86:	409a      	lsls	r2, r3
 8005b88:	422a      	tst	r2, r5
 8005b8a:	d003      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b8c:	6821      	ldr	r1, [r4, #0]
 8005b8e:	6808      	ldr	r0, [r1, #0]
 8005b90:	0700      	lsls	r0, r0, #28
 8005b92:	d44b      	bmi.n	8005c2c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b94:	2220      	movs	r2, #32
 8005b96:	409a      	lsls	r2, r3
 8005b98:	422a      	tst	r2, r5
 8005b9a:	d014      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	6808      	ldr	r0, [r1, #0]
 8005ba0:	06c0      	lsls	r0, r0, #27
 8005ba2:	d510      	bpl.n	8005bc6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ba4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ba6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005baa:	2a05      	cmp	r2, #5
 8005bac:	d063      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bae:	680b      	ldr	r3, [r1, #0]
 8005bb0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bb6:	d07e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb8:	0319      	lsls	r1, r3, #12
 8005bba:	f140 8089 	bpl.w	8005cd0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8005bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bc0:	b10b      	cbz	r3, 8005bc6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bc8:	b323      	cbz	r3, 8005c14 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bcc:	07da      	lsls	r2, r3, #31
 8005bce:	d51a      	bpl.n	8005c06 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8005bd0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bd2:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8005bd4:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bd6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8005bda:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8005be4:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e002      	b.n	8005bf0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	07db      	lsls	r3, r3, #31
 8005bee:	d504      	bpl.n	8005bfa <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	42b3      	cmp	r3, r6
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	d9f7      	bls.n	8005bea <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8005bfa:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8005bfe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005c02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005c06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c08:	b123      	cbz	r3, 8005c14 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8005c0a:	4620      	mov	r0, r4
}
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8005c12:	4718      	bx	r3
}
 8005c14:	b003      	add	sp, #12
 8005c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c18:	6808      	ldr	r0, [r1, #0]
 8005c1a:	f020 0004 	bic.w	r0, r0, #4
 8005c1e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c20:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c22:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	6562      	str	r2, [r4, #84]	; 0x54
 8005c2a:	e79b      	b.n	8005b64 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c2c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c2e:	680a      	ldr	r2, [r1, #0]
 8005c30:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c34:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c36:	d118      	bne.n	8005c6a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c38:	05d2      	lsls	r2, r2, #23
 8005c3a:	d403      	bmi.n	8005c44 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c3c:	680a      	ldr	r2, [r1, #0]
 8005c3e:	f022 0208 	bic.w	r2, r2, #8
 8005c42:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005c44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d0a4      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4790      	blx	r2
 8005c4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005c50:	e7a0      	b.n	8005b94 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c52:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c56:	f042 0204 	orr.w	r2, r2, #4
 8005c5a:	6562      	str	r2, [r4, #84]	; 0x54
 8005c5c:	e792      	b.n	8005b84 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c5e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c62:	f042 0202 	orr.w	r2, r2, #2
 8005c66:	6562      	str	r2, [r4, #84]	; 0x54
 8005c68:	e784      	b.n	8005b74 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c6a:	0311      	lsls	r1, r2, #12
 8005c6c:	d5ea      	bpl.n	8005c44 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005c70:	2a00      	cmp	r2, #0
 8005c72:	d1ea      	bne.n	8005c4a <HAL_DMA_IRQHandler+0x10a>
 8005c74:	e78e      	b.n	8005b94 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c76:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c78:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7a:	f022 0216 	bic.w	r2, r2, #22
 8005c7e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c80:	694a      	ldr	r2, [r1, #20]
 8005c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c86:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c88:	b338      	cbz	r0, 8005cda <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c8a:	680a      	ldr	r2, [r1, #0]
 8005c8c:	f022 0208 	bic.w	r2, r2, #8
 8005c90:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c92:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8005c94:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8005c96:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8005c9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c9e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005ca0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	d0b3      	beq.n	8005c14 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8005cac:	4620      	mov	r0, r4
}
 8005cae:	b003      	add	sp, #12
 8005cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8005cb4:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cb6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005cba:	d180      	bne.n	8005bbe <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cbc:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cc0:	f022 0210 	bic.w	r2, r2, #16
 8005cc4:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8005cc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005cca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8005cce:	e776      	b.n	8005bbe <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8005cd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f47f af75 	bne.w	8005bc2 <HAL_DMA_IRQHandler+0x82>
 8005cd8:	e775      	b.n	8005bc6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cda:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	d1d4      	bne.n	8005c8a <HAL_DMA_IRQHandler+0x14a>
 8005ce0:	e7d7      	b.n	8005c92 <HAL_DMA_IRQHandler+0x152>
 8005ce2:	bf00      	nop
 8005ce4:	200002b8 	.word	0x200002b8
 8005ce8:	1b4e81b5 	.word	0x1b4e81b5

08005cec <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	9d08      	ldr	r5, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005cf2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 8005cf6:	460f      	mov	r7, r1
 8005cf8:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005cfa:	1e69      	subs	r1, r5, #1
{
 8005cfc:	4690      	mov	r8, r2
 8005cfe:	4699      	mov	r9, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005d00:	42b1      	cmp	r1, r6
 8005d02:	d861      	bhi.n	8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d04:	68a0      	ldr	r0, [r4, #8]
 8005d06:	2880      	cmp	r0, #128	; 0x80
 8005d08:	d065      	beq.n	8005dd6 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d0a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005d0e:	2901      	cmp	r1, #1
 8005d10:	d07d      	beq.n	8005e0e <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8005d12:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d14:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005d18:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8005d1a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d1e:	d14d      	bne.n	8005dbc <HAL_DMAEx_MultiBufferStart_IT+0xd0>
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005d20:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d22:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d24:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d26:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d28:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d2c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005d2e:	680b      	ldr	r3, [r1, #0]
 8005d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d34:	600b      	str	r3, [r1, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8005d36:	f8c1 9010 	str.w	r9, [r1, #16]
  hdma->Instance->NDTR = DataLength;
 8005d3a:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d3c:	d051      	beq.n	8005de2 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005d3e:	608f      	str	r7, [r1, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005d40:	f8c1 800c 	str.w	r8, [r1, #12]
 8005d44:	4b91      	ldr	r3, [pc, #580]	; (8005f8c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005d46:	4a92      	ldr	r2, [pc, #584]	; (8005f90 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005d48:	4d92      	ldr	r5, [pc, #584]	; (8005f94 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	bf18      	it	ne
 8005d4e:	4291      	cmpne	r1, r2
 8005d50:	4891      	ldr	r0, [pc, #580]	; (8005f98 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d52:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8005d56:	bf14      	ite	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	2300      	moveq	r3, #0
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	bf0c      	ite	eq
 8005d60:	2300      	moveq	r3, #0
 8005d62:	f003 0301 	andne.w	r3, r3, #1
 8005d66:	4281      	cmp	r1, r0
 8005d68:	bf0c      	ite	eq
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	f003 0301 	andne.w	r3, r3, #1
 8005d70:	4291      	cmp	r1, r2
 8005d72:	d93a      	bls.n	8005dea <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d174      	bne.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x176>
 8005d78:	4b88      	ldr	r3, [pc, #544]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005d7a:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d7c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005d7e:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d80:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005d82:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005d84:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005d86:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005d88:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005d8a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005d8c:	4b83      	ldr	r3, [pc, #524]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d90:	680b      	ldr	r3, [r1, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d94:	f043 0316 	orr.w	r3, r3, #22
 8005d98:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d9a:	694b      	ldr	r3, [r1, #20]
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da0:	614b      	str	r3, [r1, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	d036      	beq.n	8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x128>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005da6:	680b      	ldr	r3, [r1, #0]
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma); 
 8005dae:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	600b      	str	r3, [r1, #0]
}
 8005db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hdma);	  
 8005dbc:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8005dbe:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8005dc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005dc8:	4875      	ldr	r0, [pc, #468]	; (8005fa0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005dca:	21a2      	movs	r1, #162	; 0xa2
 8005dcc:	f7fc fb54 	bl	8002478 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dd0:	68a0      	ldr	r0, [r4, #8]
 8005dd2:	2880      	cmp	r0, #128	; 0x80
 8005dd4:	d199      	bne.n	8005d0a <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8005dda:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005ddc:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8005de2:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005de6:	60cf      	str	r7, [r1, #12]
 8005de8:	e7ac      	b.n	8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x58>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dea:	4a6e      	ldr	r2, [pc, #440]	; (8005fa4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005dec:	4291      	cmp	r1, r2
 8005dee:	d915      	bls.n	8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d15a      	bne.n	8005eaa <HAL_DMAEx_MultiBufferStart_IT+0x1be>
 8005df4:	4b69      	ldr	r3, [pc, #420]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005df6:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005df8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005dfa:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005dfc:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005dfe:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e00:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e02:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e04:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e06:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e08:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	e7c0      	b.n	8005d90 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
  __HAL_LOCK(hdma);
 8005e0e:	2002      	movs	r0, #2
}
 8005e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1c5      	bne.n	8005da6 <HAL_DMAEx_MultiBufferStart_IT+0xba>
 8005e1a:	e7c8      	b.n	8005dae <HAL_DMAEx_MultiBufferStart_IT+0xc2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e1c:	4a62      	ldr	r2, [pc, #392]	; (8005fa8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	d90f      	bls.n	8005e42 <HAL_DMAEx_MultiBufferStart_IT+0x156>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 8140 	bne.w	80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8005e28:	4b60      	ldr	r3, [pc, #384]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005e2a:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e2c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e2e:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e30:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e32:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e34:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e36:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e38:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e3a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e7a6      	b.n	8005d90 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 80bc 	bne.w	8005fc0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 8005e48:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005e4a:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e4c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e4e:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e50:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e52:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e54:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e56:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e58:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e5a:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005e5e:	609a      	str	r2, [r3, #8]
 8005e60:	e796      	b.n	8005d90 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e62:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005e64:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8005e68:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	bf18      	it	ne
 8005e70:	4281      	cmpne	r1, r0
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	4291      	cmp	r1, r2
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	f003 0301 	andne.w	r3, r3, #1
 8005e82:	b11b      	cbz	r3, 8005e8c <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 8005e84:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005e86:	4299      	cmp	r1, r3
 8005e88:	f040 818a 	bne.w	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8005e8c:	4b43      	ldr	r3, [pc, #268]	; (8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005e8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005e96:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e9a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005e9c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ea0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005ea2:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005ea4:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005ea6:	60d8      	str	r0, [r3, #12]
 8005ea8:	e770      	b.n	8005d8c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eaa:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8005eac:	3a30      	subs	r2, #48	; 0x30
 8005eae:	4840      	ldr	r0, [pc, #256]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	bf18      	it	ne
 8005eb4:	4281      	cmpne	r1, r0
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	4291      	cmp	r1, r2
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	f003 0301 	andne.w	r3, r3, #1
 8005ec6:	b11b      	cbz	r3, 8005ed0 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8005ec8:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	f040 81e4 	bne.w	8006298 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005ed0:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ed4:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005ed6:	4a38      	ldr	r2, [pc, #224]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8005ed8:	4838      	ldr	r0, [pc, #224]	; (8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8005eda:	4299      	cmp	r1, r3
 8005edc:	bf18      	it	ne
 8005ede:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ee0:	f8c2 53e0 	str.w	r5, [r2, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ee4:	bf14      	ite	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	2300      	moveq	r3, #0
 8005eea:	4281      	cmp	r1, r0
 8005eec:	bf0c      	ite	eq
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	f003 0301 	andne.w	r3, r3, #1
 8005ef4:	b11b      	cbz	r3, 8005efe <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	f040 81e6 	bne.w	80062ca <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8005efe:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005f02:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005f06:	482d      	ldr	r0, [pc, #180]	; (8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8005f08:	4299      	cmp	r1, r3
 8005f0a:	bf18      	it	ne
 8005f0c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f0e:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	4281      	cmp	r1, r0
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2300      	moveq	r3, #0
 8005f1e:	f003 0301 	andne.w	r3, r3, #1
 8005f22:	b11b      	cbz	r3, 8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005f26:	4299      	cmp	r1, r3
 8005f28:	f040 81ff 	bne.w	800632a <HAL_DMAEx_MultiBufferStart_IT+0x63e>
 8005f2c:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005f30:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005f34:	4821      	ldr	r0, [pc, #132]	; (8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8005f36:	4299      	cmp	r1, r3
 8005f38:	bf18      	it	ne
 8005f3a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005f3c:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	4281      	cmp	r1, r0
 8005f48:	bf0c      	ite	eq
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	f003 0301 	andne.w	r3, r3, #1
 8005f50:	b11b      	cbz	r3, 8005f5a <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 8005f52:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005f54:	4299      	cmp	r1, r3
 8005f56:	f040 81d0 	bne.w	80062fa <HAL_DMAEx_MultiBufferStart_IT+0x60e>
 8005f5a:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005f5e:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005f62:	4816      	ldr	r0, [pc, #88]	; (8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8005f64:	4299      	cmp	r1, r3
 8005f66:	bf18      	it	ne
 8005f68:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005f6a:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	4281      	cmp	r1, r0
 8005f76:	bf0c      	ite	eq
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	f003 0301 	andne.w	r3, r3, #1
 8005f7e:	b11b      	cbz	r3, 8005f88 <HAL_DMAEx_MultiBufferStart_IT+0x29c>
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8005f82:	4299      	cmp	r1, r3
 8005f84:	f040 81e9 	bne.w	800635a <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 8005f88:	2240      	movs	r2, #64	; 0x40
 8005f8a:	e73d      	b.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8005f8c:	40026470 	.word	0x40026470
 8005f90:	40026070 	.word	0x40026070
 8005f94:	40026010 	.word	0x40026010
 8005f98:	40026410 	.word	0x40026410
 8005f9c:	40026400 	.word	0x40026400
 8005fa0:	08021418 	.word	0x08021418
 8005fa4:	400260b8 	.word	0x400260b8
 8005fa8:	40026058 	.word	0x40026058
 8005fac:	40026000 	.word	0x40026000
 8005fb0:	40026428 	.word	0x40026428
 8005fb4:	40026488 	.word	0x40026488
 8005fb8:	40026028 	.word	0x40026028
 8005fbc:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005fc0:	4b73      	ldr	r3, [pc, #460]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8005fc2:	4874      	ldr	r0, [pc, #464]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8005fc4:	4a74      	ldr	r2, [pc, #464]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8005fc6:	4299      	cmp	r1, r3
 8005fc8:	bf18      	it	ne
 8005fca:	4281      	cmpne	r1, r0
 8005fcc:	bf14      	ite	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	2300      	moveq	r3, #0
 8005fd2:	4291      	cmp	r1, r2
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	f003 0301 	andne.w	r3, r3, #1
 8005fdc:	b11b      	cbz	r3, 8005fe6 <HAL_DMAEx_MultiBufferStart_IT+0x2fa>
 8005fde:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	f040 81d2 	bne.w	800638a <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8005fe6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fea:	4b6a      	ldr	r3, [pc, #424]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8005fec:	4a68      	ldr	r2, [pc, #416]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8005fee:	4d6a      	ldr	r5, [pc, #424]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	bf18      	it	ne
 8005ff4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ff6:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006000:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006002:	42a9      	cmp	r1, r5
 8006004:	bf0c      	ite	eq
 8006006:	2300      	moveq	r3, #0
 8006008:	f003 0301 	andne.w	r3, r3, #1
 800600c:	b11b      	cbz	r3, 8006016 <HAL_DMAEx_MultiBufferStart_IT+0x32a>
 800600e:	4b63      	ldr	r3, [pc, #396]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006010:	4299      	cmp	r1, r3
 8006012:	f040 8205 	bne.w	8006420 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8006016:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800601a:	4b5e      	ldr	r3, [pc, #376]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800601c:	4a5c      	ldr	r2, [pc, #368]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800601e:	4d5e      	ldr	r5, [pc, #376]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006020:	4299      	cmp	r1, r3
 8006022:	bf18      	it	ne
 8006024:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006026:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800602a:	bf14      	ite	ne
 800602c:	2301      	movne	r3, #1
 800602e:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006030:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006032:	42a9      	cmp	r1, r5
 8006034:	bf0c      	ite	eq
 8006036:	2300      	moveq	r3, #0
 8006038:	f003 0301 	andne.w	r3, r3, #1
 800603c:	b11b      	cbz	r3, 8006046 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 800603e:	4b57      	ldr	r3, [pc, #348]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006040:	4299      	cmp	r1, r3
 8006042:	f040 8253 	bne.w	80064ec <HAL_DMAEx_MultiBufferStart_IT+0x800>
 8006046:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800604a:	4b51      	ldr	r3, [pc, #324]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800604c:	4a51      	ldr	r2, [pc, #324]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800604e:	4d52      	ldr	r5, [pc, #328]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006050:	4299      	cmp	r1, r3
 8006052:	bf18      	it	ne
 8006054:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006056:	f842 0c20 	str.w	r0, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	42a9      	cmp	r1, r5
 8006062:	bf0c      	ite	eq
 8006064:	2300      	moveq	r3, #0
 8006066:	f003 0301 	andne.w	r3, r3, #1
 800606a:	b11b      	cbz	r3, 8006074 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800606e:	4299      	cmp	r1, r3
 8006070:	f040 820e 	bne.w	8006490 <HAL_DMAEx_MultiBufferStart_IT+0x7a4>
 8006074:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006078:	4b46      	ldr	r3, [pc, #280]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 800607a:	4a45      	ldr	r2, [pc, #276]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 800607c:	4d46      	ldr	r5, [pc, #280]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 800607e:	4299      	cmp	r1, r3
 8006080:	bf18      	it	ne
 8006082:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006084:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006088:	bf14      	ite	ne
 800608a:	2301      	movne	r3, #1
 800608c:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800608e:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006090:	42a9      	cmp	r1, r5
 8006092:	bf0c      	ite	eq
 8006094:	2300      	moveq	r3, #0
 8006096:	f003 0301 	andne.w	r3, r3, #1
 800609a:	b11b      	cbz	r3, 80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800609c:	4b3f      	ldr	r3, [pc, #252]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 800609e:	4299      	cmp	r1, r3
 80060a0:	f040 8250 	bne.w	8006544 <HAL_DMAEx_MultiBufferStart_IT+0x858>
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	e6d9      	b.n	8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060a8:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80060aa:	3230      	adds	r2, #48	; 0x30
 80060ac:	4838      	ldr	r0, [pc, #224]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80060ae:	4299      	cmp	r1, r3
 80060b0:	bf18      	it	ne
 80060b2:	4281      	cmpne	r1, r0
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	4291      	cmp	r1, r2
 80060bc:	bf0c      	ite	eq
 80060be:	2300      	moveq	r3, #0
 80060c0:	f003 0301 	andne.w	r3, r3, #1
 80060c4:	b11b      	cbz	r3, 80060ce <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80060c6:	4b35      	ldr	r3, [pc, #212]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80060c8:	4299      	cmp	r1, r3
 80060ca:	f040 8178 	bne.w	80063be <HAL_DMAEx_MultiBufferStart_IT+0x6d2>
 80060ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060d2:	4b2f      	ldr	r3, [pc, #188]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 80060d4:	4a2f      	ldr	r2, [pc, #188]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 80060d6:	4d30      	ldr	r5, [pc, #192]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 80060d8:	4299      	cmp	r1, r3
 80060da:	bf18      	it	ne
 80060dc:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060de:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	42a9      	cmp	r1, r5
 80060ea:	bf0c      	ite	eq
 80060ec:	2300      	moveq	r3, #0
 80060ee:	f003 0301 	andne.w	r3, r3, #1
 80060f2:	b11b      	cbz	r3, 80060fc <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80060f4:	4b29      	ldr	r3, [pc, #164]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 80060f6:	4299      	cmp	r1, r3
 80060f8:	f040 817a 	bne.w	80063f0 <HAL_DMAEx_MultiBufferStart_IT+0x704>
 80060fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006102:	4a23      	ldr	r2, [pc, #140]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006104:	4d24      	ldr	r5, [pc, #144]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006106:	4299      	cmp	r1, r3
 8006108:	bf18      	it	ne
 800610a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800610c:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006110:	bf14      	ite	ne
 8006112:	2301      	movne	r3, #1
 8006114:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006116:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006118:	42a9      	cmp	r1, r5
 800611a:	bf0c      	ite	eq
 800611c:	2300      	moveq	r3, #0
 800611e:	f003 0301 	andne.w	r3, r3, #1
 8006122:	b11b      	cbz	r3, 800612c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006126:	4299      	cmp	r1, r3
 8006128:	f040 81ca 	bne.w	80064c0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>
 800612c:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006134:	4d18      	ldr	r5, [pc, #96]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006136:	4299      	cmp	r1, r3
 8006138:	bf18      	it	ne
 800613a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800613c:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006140:	bf14      	ite	ne
 8006142:	2301      	movne	r3, #1
 8006144:	2300      	moveq	r3, #0
 8006146:	42a9      	cmp	r1, r5
 8006148:	bf0c      	ite	eq
 800614a:	2300      	moveq	r3, #0
 800614c:	f003 0301 	andne.w	r3, r3, #1
 8006150:	b11b      	cbz	r3, 800615a <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006154:	4299      	cmp	r1, r3
 8006156:	f040 817b 	bne.w	8006450 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800615a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006160:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006162:	4d0d      	ldr	r5, [pc, #52]	; (8006198 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006164:	4299      	cmp	r1, r3
 8006166:	bf18      	it	ne
 8006168:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800616a:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006174:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006176:	42a9      	cmp	r1, r5
 8006178:	bf0c      	ite	eq
 800617a:	2300      	moveq	r3, #0
 800617c:	f003 0301 	andne.w	r3, r3, #1
 8006180:	b11b      	cbz	r3, 800618a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006184:	4299      	cmp	r1, r3
 8006186:	f040 81c7 	bne.w	8006518 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	e656      	b.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x150>
 800618e:	bf00      	nop
 8006190:	40026428 	.word	0x40026428
 8006194:	40026028 	.word	0x40026028
 8006198:	40026088 	.word	0x40026088
 800619c:	40026488 	.word	0x40026488
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061a0:	3b48      	subs	r3, #72	; 0x48
 80061a2:	3018      	adds	r0, #24
 80061a4:	3218      	adds	r2, #24
 80061a6:	4299      	cmp	r1, r3
 80061a8:	bf18      	it	ne
 80061aa:	4281      	cmpne	r1, r0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	4291      	cmp	r1, r2
 80061b4:	bf0c      	ite	eq
 80061b6:	2300      	moveq	r3, #0
 80061b8:	f003 0301 	andne.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 81e2 	beq.w	8006586 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80061c2:	4baf      	ldr	r3, [pc, #700]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80061c4:	4299      	cmp	r1, r3
 80061c6:	f000 81de 	beq.w	8006586 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80061ca:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061ce:	4bad      	ldr	r3, [pc, #692]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80061d0:	4aad      	ldr	r2, [pc, #692]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80061d2:	4dae      	ldr	r5, [pc, #696]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80061d4:	4299      	cmp	r1, r3
 80061d6:	bf18      	it	ne
 80061d8:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80061da:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	42a9      	cmp	r1, r5
 80061e6:	bf0c      	ite	eq
 80061e8:	2300      	moveq	r3, #0
 80061ea:	f003 0301 	andne.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 81c6 	beq.w	8006580 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80061f4:	4ba2      	ldr	r3, [pc, #648]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80061f6:	4299      	cmp	r1, r3
 80061f8:	f000 81c2 	beq.w	8006580 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80061fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006200:	4ba0      	ldr	r3, [pc, #640]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006202:	4aa1      	ldr	r2, [pc, #644]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006204:	4da1      	ldr	r5, [pc, #644]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006206:	4299      	cmp	r1, r3
 8006208:	bf18      	it	ne
 800620a:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800620c:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006210:	bf14      	ite	ne
 8006212:	2301      	movne	r3, #1
 8006214:	2300      	moveq	r3, #0
 8006216:	42a9      	cmp	r1, r5
 8006218:	bf0c      	ite	eq
 800621a:	2300      	moveq	r3, #0
 800621c:	f003 0301 	andne.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 81aa 	beq.w	800657a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 8006226:	4b96      	ldr	r3, [pc, #600]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006228:	4299      	cmp	r1, r3
 800622a:	f000 81a6 	beq.w	800657a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 800622e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006232:	4b94      	ldr	r3, [pc, #592]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006234:	4a94      	ldr	r2, [pc, #592]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006236:	4d95      	ldr	r5, [pc, #596]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006238:	4299      	cmp	r1, r3
 800623a:	bf18      	it	ne
 800623c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800623e:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	42a9      	cmp	r1, r5
 800624a:	bf0c      	ite	eq
 800624c:	2300      	moveq	r3, #0
 800624e:	f003 0301 	andne.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 818e 	beq.w	8006574 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006258:	4b89      	ldr	r3, [pc, #548]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800625a:	4299      	cmp	r1, r3
 800625c:	f000 818a 	beq.w	8006574 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006260:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006264:	4b87      	ldr	r3, [pc, #540]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006266:	4a88      	ldr	r2, [pc, #544]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006268:	4d88      	ldr	r5, [pc, #544]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 800626a:	4299      	cmp	r1, r3
 800626c:	bf18      	it	ne
 800626e:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006270:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	42a9      	cmp	r1, r5
 800627c:	bf0c      	ite	eq
 800627e:	2300      	moveq	r3, #0
 8006280:	f003 0301 	andne.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8172 	beq.w	800656e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800628a:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800628c:	4299      	cmp	r1, r3
 800628e:	f000 816e 	beq.w	800656e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8006292:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006296:	e579      	b.n	8005d8c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006298:	3b48      	subs	r3, #72	; 0x48
 800629a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 800629e:	3218      	adds	r2, #24
 80062a0:	4299      	cmp	r1, r3
 80062a2:	bf18      	it	ne
 80062a4:	4281      	cmpne	r1, r0
 80062a6:	bf14      	ite	ne
 80062a8:	2301      	movne	r3, #1
 80062aa:	2300      	moveq	r3, #0
 80062ac:	4291      	cmp	r1, r2
 80062ae:	bf0c      	ite	eq
 80062b0:	2300      	moveq	r3, #0
 80062b2:	f003 0301 	andne.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 816b 	beq.w	8006592 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80062bc:	4b70      	ldr	r3, [pc, #448]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80062be:	4299      	cmp	r1, r3
 80062c0:	f000 8167 	beq.w	8006592 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 80062c4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80062c8:	e604      	b.n	8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062ca:	4b6f      	ldr	r3, [pc, #444]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80062cc:	486d      	ldr	r0, [pc, #436]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80062ce:	4a6f      	ldr	r2, [pc, #444]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80062d0:	4299      	cmp	r1, r3
 80062d2:	bf18      	it	ne
 80062d4:	4281      	cmpne	r1, r0
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	4291      	cmp	r1, r2
 80062de:	bf0c      	ite	eq
 80062e0:	2300      	moveq	r3, #0
 80062e2:	f003 0301 	andne.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8159 	beq.w	800659e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 80062ec:	4b64      	ldr	r3, [pc, #400]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80062ee:	4299      	cmp	r1, r3
 80062f0:	f000 8155 	beq.w	800659e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 80062f4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80062f8:	e603      	b.n	8005f02 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80062fa:	4b62      	ldr	r3, [pc, #392]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80062fc:	4862      	ldr	r0, [pc, #392]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80062fe:	4a63      	ldr	r2, [pc, #396]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006300:	4299      	cmp	r1, r3
 8006302:	bf18      	it	ne
 8006304:	4281      	cmpne	r1, r0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	4291      	cmp	r1, r2
 800630e:	bf0c      	ite	eq
 8006310:	2300      	moveq	r3, #0
 8006312:	f003 0301 	andne.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 813e 	beq.w	8006598 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 800631c:	4b58      	ldr	r3, [pc, #352]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800631e:	4299      	cmp	r1, r3
 8006320:	f000 813a 	beq.w	8006598 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8006324:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8006328:	e619      	b.n	8005f5e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800632a:	4b56      	ldr	r3, [pc, #344]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800632c:	4856      	ldr	r0, [pc, #344]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800632e:	4a57      	ldr	r2, [pc, #348]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006330:	4299      	cmp	r1, r3
 8006332:	bf18      	it	ne
 8006334:	4281      	cmpne	r1, r0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	4291      	cmp	r1, r2
 800633e:	bf0c      	ite	eq
 8006340:	2300      	moveq	r3, #0
 8006342:	f003 0301 	andne.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 812c 	beq.w	80065a4 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 800634c:	4b4c      	ldr	r3, [pc, #304]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800634e:	4299      	cmp	r1, r3
 8006350:	f000 8128 	beq.w	80065a4 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8006354:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8006358:	e5ea      	b.n	8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800635a:	4b4a      	ldr	r3, [pc, #296]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 800635c:	484a      	ldr	r0, [pc, #296]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 800635e:	4a4b      	ldr	r2, [pc, #300]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006360:	4299      	cmp	r1, r3
 8006362:	bf18      	it	ne
 8006364:	4281      	cmpne	r1, r0
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	4291      	cmp	r1, r2
 800636e:	bf0c      	ite	eq
 8006370:	2300      	moveq	r3, #0
 8006372:	f003 0301 	andne.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8108 	beq.w	800658c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 800637c:	4b40      	ldr	r3, [pc, #256]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 800637e:	4299      	cmp	r1, r3
 8006380:	f000 8104 	beq.w	800658c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8006384:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006388:	e53e      	b.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800638a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800638e:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8006392:	3218      	adds	r2, #24
 8006394:	4299      	cmp	r1, r3
 8006396:	bf18      	it	ne
 8006398:	4281      	cmpne	r1, r0
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	4291      	cmp	r1, r2
 80063a2:	bf0c      	ite	eq
 80063a4:	2300      	moveq	r3, #0
 80063a6:	f003 0301 	andne.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80fd 	beq.w	80065aa <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80063b0:	4b33      	ldr	r3, [pc, #204]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80063b2:	4299      	cmp	r1, r3
 80063b4:	f000 80f9 	beq.w	80065aa <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 80063b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80063bc:	e615      	b.n	8005fea <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
 80063be:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80063c2:	3018      	adds	r0, #24
 80063c4:	3218      	adds	r2, #24
 80063c6:	4299      	cmp	r1, r3
 80063c8:	bf18      	it	ne
 80063ca:	4281      	cmpne	r1, r0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	4291      	cmp	r1, r2
 80063d4:	bf0c      	ite	eq
 80063d6:	2300      	moveq	r3, #0
 80063d8:	f003 0301 	andne.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80ea 	beq.w	80065b6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 80063e2:	4b27      	ldr	r3, [pc, #156]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	f000 80e6 	beq.w	80065b6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 80063ea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80063ee:	e670      	b.n	80060d2 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 80063f2:	4824      	ldr	r0, [pc, #144]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 80063f4:	4a25      	ldr	r2, [pc, #148]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 80063f6:	4299      	cmp	r1, r3
 80063f8:	bf18      	it	ne
 80063fa:	4281      	cmpne	r1, r0
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	4291      	cmp	r1, r2
 8006404:	bf0c      	ite	eq
 8006406:	2300      	moveq	r3, #0
 8006408:	f003 0301 	andne.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80de 	beq.w	80065ce <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006414:	4299      	cmp	r1, r3
 8006416:	f000 80da 	beq.w	80065ce <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 800641a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800641e:	e66f      	b.n	8006100 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006422:	4819      	ldr	r0, [pc, #100]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006426:	4299      	cmp	r1, r3
 8006428:	bf18      	it	ne
 800642a:	4281      	cmpne	r1, r0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	4291      	cmp	r1, r2
 8006434:	bf0c      	ite	eq
 8006436:	2300      	moveq	r3, #0
 8006438:	f003 0301 	andne.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80c0 	beq.w	80065c2 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006444:	4299      	cmp	r1, r3
 8006446:	f000 80bc 	beq.w	80065c2 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 800644a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800644e:	e5e4      	b.n	800601a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006452:	480c      	ldr	r0, [pc, #48]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006456:	4299      	cmp	r1, r3
 8006458:	bf18      	it	ne
 800645a:	4281      	cmpne	r1, r0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	4291      	cmp	r1, r2
 8006464:	bf0c      	ite	eq
 8006466:	2300      	moveq	r3, #0
 8006468:	f003 0301 	andne.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80b4 	beq.w	80065da <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006474:	4299      	cmp	r1, r3
 8006476:	f000 80b0 	beq.w	80065da <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800647a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800647e:	e66e      	b.n	800615e <HAL_DMAEx_MultiBufferStart_IT+0x472>
 8006480:	400264a0 	.word	0x400264a0
 8006484:	40026440 	.word	0x40026440
 8006488:	40026040 	.word	0x40026040
 800648c:	400260a0 	.word	0x400260a0
 8006490:	4b55      	ldr	r3, [pc, #340]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8006492:	4856      	ldr	r0, [pc, #344]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8006494:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8006496:	4299      	cmp	r1, r3
 8006498:	bf18      	it	ne
 800649a:	4281      	cmpne	r1, r0
 800649c:	bf14      	ite	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	2300      	moveq	r3, #0
 80064a2:	4291      	cmp	r1, r2
 80064a4:	bf0c      	ite	eq
 80064a6:	2300      	moveq	r3, #0
 80064a8:	f003 0301 	andne.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8085 	beq.w	80065bc <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80064b2:	4b50      	ldr	r3, [pc, #320]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80064b4:	4299      	cmp	r1, r3
 80064b6:	f000 8081 	beq.w	80065bc <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 80064ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80064be:	e5db      	b.n	8006078 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80064c0:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80064c2:	4849      	ldr	r0, [pc, #292]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80064c4:	4a4a      	ldr	r2, [pc, #296]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80064c6:	4299      	cmp	r1, r3
 80064c8:	bf18      	it	ne
 80064ca:	4281      	cmpne	r1, r0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	4291      	cmp	r1, r2
 80064d4:	bf0c      	ite	eq
 80064d6:	2300      	moveq	r3, #0
 80064d8:	f003 0301 	andne.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d079      	beq.n	80065d4 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 80064e0:	4b44      	ldr	r3, [pc, #272]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80064e2:	4299      	cmp	r1, r3
 80064e4:	d076      	beq.n	80065d4 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 80064e6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80064ea:	e621      	b.n	8006130 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 80064ec:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80064ee:	483f      	ldr	r0, [pc, #252]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80064f0:	4a3f      	ldr	r2, [pc, #252]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80064f2:	4299      	cmp	r1, r3
 80064f4:	bf18      	it	ne
 80064f6:	4281      	cmpne	r1, r0
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	4291      	cmp	r1, r2
 8006500:	bf0c      	ite	eq
 8006502:	2300      	moveq	r3, #0
 8006504:	f003 0301 	andne.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05d      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 800650c:	4b39      	ldr	r3, [pc, #228]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800650e:	4299      	cmp	r1, r3
 8006510:	d05a      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 8006512:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006516:	e598      	b.n	800604a <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006518:	4b34      	ldr	r3, [pc, #208]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 800651a:	4833      	ldr	r0, [pc, #204]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 800651c:	4a34      	ldr	r2, [pc, #208]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800651e:	4299      	cmp	r1, r3
 8006520:	bf18      	it	ne
 8006522:	4281      	cmpne	r1, r0
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	4291      	cmp	r1, r2
 800652c:	bf0c      	ite	eq
 800652e:	2300      	moveq	r3, #0
 8006530:	f003 0301 	andne.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d053      	beq.n	80065e0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8006538:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800653a:	4299      	cmp	r1, r3
 800653c:	d050      	beq.n	80065e0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800653e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006542:	e47b      	b.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8006544:	4b29      	ldr	r3, [pc, #164]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8006546:	4828      	ldr	r0, [pc, #160]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8006548:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800654a:	4299      	cmp	r1, r3
 800654c:	bf18      	it	ne
 800654e:	4281      	cmpne	r1, r0
 8006550:	bf14      	ite	ne
 8006552:	2301      	movne	r3, #1
 8006554:	2300      	moveq	r3, #0
 8006556:	4291      	cmp	r1, r2
 8006558:	bf0c      	ite	eq
 800655a:	2300      	moveq	r3, #0
 800655c:	f003 0301 	andne.w	r3, r3, #1
 8006560:	b333      	cbz	r3, 80065b0 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8006562:	4b24      	ldr	r3, [pc, #144]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8006564:	4299      	cmp	r1, r3
 8006566:	d023      	beq.n	80065b0 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8006568:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800656c:	e476      	b.n	8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 800656e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006572:	e40b      	b.n	8005d8c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006574:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006578:	e674      	b.n	8006264 <HAL_DMAEx_MultiBufferStart_IT+0x578>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800657a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800657e:	e658      	b.n	8006232 <HAL_DMAEx_MultiBufferStart_IT+0x546>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006580:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006584:	e63c      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x514>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006586:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800658a:	e620      	b.n	80061ce <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800658c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006590:	e43a      	b.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006592:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8006596:	e49d      	b.n	8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006598:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800659c:	e4df      	b.n	8005f5e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800659e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 80065a2:	e4ae      	b.n	8005f02 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80065a4:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80065a8:	e4c2      	b.n	8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80065aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80065ae:	e51c      	b.n	8005fea <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80065b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065b4:	e452      	b.n	8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80065b6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80065ba:	e58a      	b.n	80060d2 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80065bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80065c0:	e55a      	b.n	8006078 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80065c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80065c6:	e528      	b.n	800601a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80065c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80065cc:	e53d      	b.n	800604a <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80065ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80065d2:	e595      	b.n	8006100 <HAL_DMAEx_MultiBufferStart_IT+0x414>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80065d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80065d8:	e5aa      	b.n	8006130 <HAL_DMAEx_MultiBufferStart_IT+0x444>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80065da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80065de:	e5be      	b.n	800615e <HAL_DMAEx_MultiBufferStart_IT+0x472>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80065e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065e4:	e42a      	b.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80065e6:	bf00      	nop
 80065e8:	40026040 	.word	0x40026040
 80065ec:	40026440 	.word	0x40026440
 80065f0:	400260a0 	.word	0x400260a0
 80065f4:	400264a0 	.word	0x400264a0

080065f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80065f8:	b530      	push	{r4, r5, lr}
 80065fa:	4605      	mov	r5, r0
 80065fc:	b083      	sub	sp, #12
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80065fe:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8006602:	2200      	movs	r2, #0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006604:	682b      	ldr	r3, [r5, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006606:	2001      	movs	r0, #1
  __IO uint32_t tmpreg = 0;
 8006608:	9201      	str	r2, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800660a:	591a      	ldr	r2, [r3, r4]
 800660c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006610:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8006612:	591b      	ldr	r3, [r3, r4]
 8006614:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006616:	f7fe f8f7 	bl	8004808 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	9a01      	ldr	r2, [sp, #4]
 800661e:	511a      	str	r2, [r3, r4]
}
 8006620:	b003      	add	sp, #12
 8006622:	bd30      	pop	{r4, r5, pc}

08006624 <ETH_MACDMAConfig>:
{
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8006628:	2900      	cmp	r1, #0
 800662a:	d164      	bne.n	80066f6 <ETH_MACDMAConfig+0xd2>
 800662c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8006630:	430b      	orrs	r3, r1
 8006632:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  tmpreg = (heth->Instance)->MACCR;
 8006636:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006638:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800663a:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800663c:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800663e:	4b32      	ldr	r3, [pc, #200]	; (8006708 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006640:	2d00      	cmp	r5, #0
    tmpreg = (heth->Instance)->DMAOMR;
 8006642:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8006646:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800664a:	f04f 0600 	mov.w	r6, #0
 800664e:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006652:	bf14      	ite	ne
 8006654:	4631      	movne	r1, r6
 8006656:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800665a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800665c:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800665e:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006660:	f7fe f8d2 	bl	8004808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8006664:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006666:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006668:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800666a:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800666c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800666e:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006670:	f7fe f8ca 	bl	8004808 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8006674:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006676:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800667a:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800667c:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800667e:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006680:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8006682:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006684:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8006686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800668a:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800668c:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800668e:	f7fe f8bb 	bl	8004808 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8006692:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006694:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8006696:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006698:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800669a:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800669c:	f7fe f8b4 	bl	8004808 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80066a0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80066a2:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80066a4:	4919      	ldr	r1, [pc, #100]	; (800670c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80066a6:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80066a8:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80066aa:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <ETH_MACDMAConfig+0xec>)
 80066ae:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80066b0:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80066b2:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80066b4:	f7fe f8a8 	bl	8004808 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80066b8:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80066ba:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 80066be:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80066c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c4:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80066c6:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80066c8:	f7fe f89e 	bl	8004808 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80066cc:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80066ce:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80066d0:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80066d4:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 80066d6:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80066d8:	d105      	bne.n	80066e6 <ETH_MACDMAConfig+0xc2>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80066da:	f241 011c 	movw	r1, #4124	; 0x101c
 80066de:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <ETH_MACDMAConfig+0xf4>)
 80066e0:	5858      	ldr	r0, [r3, r1]
 80066e2:	4302      	orrs	r2, r0
 80066e4:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80066e6:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80066e8:	490c      	ldr	r1, [pc, #48]	; (800671c <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80066ea:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80066ec:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80066ee:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80066f0:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80066f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 80066fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066fe:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 8006702:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8006706:	e796      	b.n	8006636 <ETH_MACDMAConfig+0x12>
 8006708:	ff20810f 	.word	0xff20810f
 800670c:	f8de3f23 	.word	0xf8de3f23
 8006710:	02200004 	.word	0x02200004
 8006714:	02c12080 	.word	0x02c12080
 8006718:	00010040 	.word	0x00010040
 800671c:	40028040 	.word	0x40028040
 8006720:	40028044 	.word	0x40028044

08006724 <HAL_ETH_DMATxDescListInit>:
{
 8006724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8006728:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800672c:	2c01      	cmp	r4, #1
 800672e:	d03f      	beq.n	80067b0 <HAL_ETH_DMATxDescListInit+0x8c>
 8006730:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8006732:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 8006734:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 8006736:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800673a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800673e:	b34b      	cbz	r3, 8006794 <HAL_ETH_DMATxDescListInit+0x70>
 8006740:	f103 3eff 	add.w	lr, r3, #4294967295
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006744:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8006748:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800674c:	460c      	mov	r4, r1
 800674e:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006750:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006754:	e007      	b.n	8006766 <HAL_ETH_DMATxDescListInit+0x42>
  for(i=0; i < TxBuffCount; i++)
 8006756:	42b3      	cmp	r3, r6
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8006758:	60e6      	str	r6, [r4, #12]
 800675a:	f105 0501 	add.w	r5, r5, #1
 800675e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8006762:	4634      	mov	r4, r6
  for(i=0; i < TxBuffCount; i++)
 8006764:	d016      	beq.n	8006794 <HAL_ETH_DMATxDescListInit+0x70>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8006766:	f104 0620 	add.w	r6, r4, #32
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800676a:	f8c4 c000 	str.w	ip, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800676e:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006770:	f1b8 0f00 	cmp.w	r8, #0
 8006774:	d103      	bne.n	800677e <HAL_ETH_DMATxDescListInit+0x5a>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006776:	6827      	ldr	r7, [r4, #0]
 8006778:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800677c:	6027      	str	r7, [r4, #0]
    if(i < (TxBuffCount-1))
 800677e:	4575      	cmp	r5, lr
 8006780:	d3e9      	bcc.n	8006756 <HAL_ETH_DMATxDescListInit+0x32>
 8006782:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8006786:	60e1      	str	r1, [r4, #12]
 8006788:	3501      	adds	r5, #1
 800678a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800678e:	42b3      	cmp	r3, r6
 8006790:	4634      	mov	r4, r6
 8006792:	d1e8      	bne.n	8006766 <HAL_ETH_DMATxDescListInit+0x42>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006794:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 8006796:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006798:	f241 0210 	movw	r2, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 800679c:	2401      	movs	r4, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800679e:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 80067a0:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 80067a2:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80067a6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80067aa:	4610      	mov	r0, r2
 80067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 80067b0:	2202      	movs	r2, #2
}
 80067b2:	4610      	mov	r0, r2
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067b8 <HAL_ETH_DMARxDescListInit>:
{
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80067ba:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80067be:	2c01      	cmp	r4, #1
 80067c0:	d038      	beq.n	8006834 <HAL_ETH_DMARxDescListInit+0x7c>
 80067c2:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80067c4:	2402      	movs	r4, #2
  heth->RxDesc = DMARxDescTab; 
 80067c6:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80067c8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80067cc:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80067d0:	b31b      	cbz	r3, 800681a <HAL_ETH_DMARxDescListInit+0x62>
 80067d2:	f103 3eff 	add.w	lr, r3, #4294967295
 80067d6:	460c      	mov	r4, r1
 80067d8:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 80067dc:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80067de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80067e2:	f244 57f4 	movw	r7, #17908	; 0x45f4
 80067e6:	e007      	b.n	80067f8 <HAL_ETH_DMARxDescListInit+0x40>
  for(i=0; i < RxBuffCount; i++)
 80067e8:	42b3      	cmp	r3, r6
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80067ea:	60e6      	str	r6, [r4, #12]
 80067ec:	f105 0501 	add.w	r5, r5, #1
 80067f0:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80067f4:	4634      	mov	r4, r6
  for(i=0; i < RxBuffCount; i++)
 80067f6:	d010      	beq.n	800681a <HAL_ETH_DMARxDescListInit+0x62>
    if(i < (RxBuffCount-1))
 80067f8:	4575      	cmp	r5, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80067fa:	f8c4 c000 	str.w	ip, [r4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80067fe:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8006802:	e9c4 7201 	strd	r7, r2, [r4, #4]
    if(i < (RxBuffCount-1))
 8006806:	d3ef      	bcc.n	80067e8 <HAL_ETH_DMARxDescListInit+0x30>
 8006808:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800680c:	60e1      	str	r1, [r4, #12]
 800680e:	3501      	adds	r5, #1
 8006810:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < RxBuffCount; i++)
 8006814:	42b3      	cmp	r3, r6
 8006816:	4634      	mov	r4, r6
 8006818:	d1ee      	bne.n	80067f8 <HAL_ETH_DMARxDescListInit+0x40>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800681a:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 800681c:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800681e:	f241 020c 	movw	r2, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 8006822:	2401      	movs	r4, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8006824:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 8006826:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 8006828:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800682c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8006830:	4610      	mov	r0, r2
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 8006834:	2202      	movs	r2, #2
}
 8006836:	4610      	mov	r0, r2
 8006838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683a:	bf00      	nop

0800683c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800683c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006840:	2b01      	cmp	r3, #1
 8006842:	d065      	beq.n	8006910 <HAL_ETH_TransmitFrame+0xd4>
 8006844:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8006846:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8006848:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800684a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 800684e:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 8006852:	2900      	cmp	r1, #0
 8006854:	d033      	beq.n	80068be <HAL_ETH_TransmitFrame+0x82>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006856:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8006858:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800685a:	681c      	ldr	r4, [r3, #0]
 800685c:	2c00      	cmp	r4, #0
 800685e:	db59      	blt.n	8006914 <HAL_ETH_TransmitFrame+0xd8>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006860:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8006864:	4281      	cmp	r1, r0
 8006866:	d931      	bls.n	80068cc <HAL_ETH_TransmitFrame+0x90>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8006868:	4d31      	ldr	r5, [pc, #196]	; (8006930 <HAL_ETH_TransmitFrame+0xf4>)
 800686a:	fba5 4501 	umull	r4, r5, r5, r1
 800686e:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006870:	fb00 1015 	mls	r0, r0, r5, r1
 8006874:	b340      	cbz	r0, 80068c8 <HAL_ETH_TransmitFrame+0x8c>
      bufcount++;
 8006876:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8006878:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 800687c:	4c2d      	ldr	r4, [pc, #180]	; (8006934 <HAL_ETH_TransmitFrame+0xf8>)
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800687e:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006880:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8006884:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8006888:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800688a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800688e:	681c      	ldr	r4, [r3, #0]
 8006890:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8006894:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 8006896:	2800      	cmp	r0, #0
 8006898:	d044      	beq.n	8006924 <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1))
 800689a:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800689c:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800689e:	d104      	bne.n	80068aa <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80068a0:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80068a2:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80068a4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80068a8:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80068aa:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 80068ac:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80068ae:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80068b2:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80068b4:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80068b6:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80068b8:	d1e9      	bne.n	800688e <HAL_ETH_TransmitFrame+0x52>
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068bc:	e013      	b.n	80068e6 <HAL_ETH_TransmitFrame+0xaa>
    heth->State = HAL_ETH_STATE_READY;
 80068be:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80068c2:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80068c6:	4770      	bx	lr
  if (bufcount == 1)
 80068c8:	2d01      	cmp	r5, #1
 80068ca:	d1d5      	bne.n	8006878 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80068cc:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80068ce:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80068d2:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80068d4:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80068d8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80068da:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80068dc:	6819      	ldr	r1, [r3, #0]
 80068de:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80068e2:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80068e4:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80068e6:	6813      	ldr	r3, [r2, #0]
 80068e8:	f241 0114 	movw	r1, #4116	; 0x1014
 80068ec:	5858      	ldr	r0, [r3, r1]
 80068ee:	0740      	lsls	r0, r0, #29
 80068f0:	d505      	bpl.n	80068fe <HAL_ETH_TransmitFrame+0xc2>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80068f2:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 80068f4:	f241 0004 	movw	r0, #4100	; 0x1004
 80068f8:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80068fa:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 80068fc:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 80068fe:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8006900:	2101      	movs	r1, #1
  return HAL_OK;
 8006902:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8006904:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006908:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800690c:	bcf0      	pop	{r4, r5, r6, r7}
 800690e:	4770      	bx	lr
  __HAL_LOCK(heth);
 8006910:	2002      	movs	r0, #2
}
 8006912:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006914:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8006916:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8006918:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800691c:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8006920:	bcf0      	pop	{r4, r5, r6, r7}
 8006922:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006924:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006926:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006928:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800692c:	601c      	str	r4, [r3, #0]
 800692e:	e7bc      	b.n	80068aa <HAL_ETH_TransmitFrame+0x6e>
 8006930:	ac02b00b 	.word	0xac02b00b
 8006934:	fffffa0c 	.word	0xfffffa0c

08006938 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8006938:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 800693c:	2a01      	cmp	r2, #1
 800693e:	d032      	beq.n	80069a6 <HAL_ETH_GetReceivedFrame_IT+0x6e>
 8006940:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006942:	4603      	mov	r3, r0
 8006944:	2101      	movs	r1, #1
  uint32_t descriptorscancounter = 0;
 8006946:	2000      	movs	r0, #0
{
 8006948:	b470      	push	{r4, r5, r6}
  heth->State = HAL_ETH_STATE_BUSY;
 800694a:	2402      	movs	r4, #2
  __HAL_LOCK(heth);
 800694c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.SegCount = 1;   
 8006950:	460d      	mov	r5, r1
  heth->State = HAL_ETH_STATE_BUSY;
 8006952:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006956:	6811      	ldr	r1, [r2, #0]
 8006958:	2900      	cmp	r1, #0
 800695a:	db17      	blt.n	800698c <HAL_ETH_GetReceivedFrame_IT+0x54>
 800695c:	2804      	cmp	r0, #4
    descriptorscancounter++;
 800695e:	f100 0001 	add.w	r0, r0, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006962:	d013      	beq.n	800698c <HAL_ETH_GetReceivedFrame_IT+0x54>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8006964:	6811      	ldr	r1, [r2, #0]
 8006966:	68d4      	ldr	r4, [r2, #12]
 8006968:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800696c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006970:	d014      	beq.n	800699c <HAL_ETH_GetReceivedFrame_IT+0x64>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8006972:	6816      	ldr	r6, [r2, #0]
 8006974:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006976:	f416 7f40 	tst.w	r6, #768	; 0x300
 800697a:	f101 0101 	add.w	r1, r1, #1
 800697e:	d114      	bne.n	80069aa <HAL_ETH_GetReceivedFrame_IT+0x72>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8006980:	4622      	mov	r2, r4
      (heth->RxFrameInfos.SegCount)++;
 8006982:	6399      	str	r1, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8006984:	629c      	str	r4, [r3, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006986:	6811      	ldr	r1, [r2, #0]
 8006988:	2900      	cmp	r1, #0
 800698a:	dae7      	bge.n	800695c <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 800698c:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 800698e:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8006990:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8006998:	bc70      	pop	{r4, r5, r6}
 800699a:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800699e:	4622      	mov	r2, r4
      heth->RxFrameInfos.SegCount = 1;   
 80069a0:	639d      	str	r5, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80069a2:	629c      	str	r4, [r3, #40]	; 0x28
 80069a4:	e7ef      	b.n	8006986 <HAL_ETH_GetReceivedFrame_IT+0x4e>
  __HAL_LOCK(heth);
 80069a6:	2002      	movs	r0, #2
}
 80069a8:	4770      	bx	lr
      if ((heth->RxFrameInfos.SegCount) == 1)
 80069aa:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 80069ac:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 80069b0:	d010      	beq.n	80069d4 <HAL_ETH_GetReceivedFrame_IT+0x9c>
 80069b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80069b4:	6812      	ldr	r2, [r2, #0]
      heth->State = HAL_ETH_STATE_READY;
 80069b6:	2501      	movs	r5, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80069b8:	6888      	ldr	r0, [r1, #8]
      __HAL_UNLOCK(heth);
 80069ba:	2100      	movs	r1, #0
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80069bc:	f3c2 420d 	ubfx	r2, r2, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80069c0:	629c      	str	r4, [r3, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80069c2:	6418      	str	r0, [r3, #64]	; 0x40
      return HAL_OK;
 80069c4:	4608      	mov	r0, r1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80069c6:	3a04      	subs	r2, #4
      heth->State = HAL_ETH_STATE_READY;
 80069c8:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80069cc:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80069d0:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_OK;
 80069d2:	e7e1      	b.n	8006998 <HAL_ETH_GetReceivedFrame_IT+0x60>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80069d4:	4611      	mov	r1, r2
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
 80069d8:	e7ec      	b.n	80069b4 <HAL_ETH_GetReceivedFrame_IT+0x7c>
 80069da:	bf00      	nop

080069dc <HAL_ETH_TxCpltCallback>:
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <HAL_ETH_ErrorCallback>:
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <HAL_ETH_IRQHandler>:
{
 80069e4:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80069e6:	6803      	ldr	r3, [r0, #0]
 80069e8:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80069ec:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80069ee:	599d      	ldr	r5, [r3, r6]
 80069f0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80069f4:	d123      	bne.n	8006a3e <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80069f6:	599a      	ldr	r2, [r3, r6]
 80069f8:	07d2      	lsls	r2, r2, #31
 80069fa:	d416      	bmi.n	8006a2a <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80069fc:	f241 0514 	movw	r5, #4116	; 0x1014
 8006a00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a04:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8006a06:	595b      	ldr	r3, [r3, r5]
 8006a08:	041b      	lsls	r3, r3, #16
 8006a0a:	d400      	bmi.n	8006a0e <HAL_ETH_IRQHandler+0x2a>
}
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff ffe6 	bl	80069e0 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8006a1a:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8006a1c:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006a1e:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8006a20:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8006a2a:	f7ff ffd7 	bl	80069dc <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8006a2e:	2201      	movs	r2, #1
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8006a34:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006a38:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006a3c:	e7de      	b.n	80069fc <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8006a3e:	f008 f863 	bl	800eb08 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8006a46:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8006a48:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006a4a:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8006a4c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8006a50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006a54:	e7d2      	b.n	80069fc <HAL_ETH_IRQHandler+0x18>
 8006a56:	bf00      	nop

08006a58 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006a58:	8a03      	ldrh	r3, [r0, #16]
 8006a5a:	2b20      	cmp	r3, #32
{
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006a64:	d833      	bhi.n	8006ace <HAL_ETH_ReadPHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006a66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a6a:	2b82      	cmp	r3, #130	; 0x82
 8006a6c:	d038      	beq.n	8006ae0 <HAL_ETH_ReadPHYRegister+0x88>
  tmpreg = heth->Instance->MACMIIAR;
 8006a6e:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006a70:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006a72:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8006a74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006a78:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006a7c:	8a22      	ldrh	r2, [r4, #16]
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
  tmpreg = heth->Instance->MACMIIAR;
 8006a82:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006a84:	02d2      	lsls	r2, r2, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8006a86:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	430b      	orrs	r3, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8006a8e:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8006a90:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8006a92:	f7fd feb3 	bl	80047fc <HAL_GetTick>
 8006a96:	4605      	mov	r5, r0
 8006a98:	e004      	b.n	8006aa4 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006a9e:	f010 0001 	ands.w	r0, r0, #1
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8006aa4:	f7fd feaa 	bl	80047fc <HAL_GetTick>
 8006aa8:	1b40      	subs	r0, r0, r5
 8006aaa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006aae:	d3f4      	bcc.n	8006a9a <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8006ab0:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8006ab2:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006ab4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8006ab6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006ac0:	695b      	ldr	r3, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8006ac2:	2201      	movs	r2, #1
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8006ac8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006ace:	f240 5116 	movw	r1, #1302	; 0x516
 8006ad2:	4804      	ldr	r0, [pc, #16]	; (8006ae4 <HAL_ETH_ReadPHYRegister+0x8c>)
 8006ad4:	f7fb fcd0 	bl	8002478 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8006ad8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006adc:	2b82      	cmp	r3, #130	; 0x82
 8006ade:	d1c6      	bne.n	8006a6e <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8006ae0:	2002      	movs	r0, #2
}
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	08021454 	.word	0x08021454

08006ae8 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006ae8:	8a03      	ldrh	r3, [r0, #16]
 8006aea:	2b20      	cmp	r3, #32
{
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006af4:	d832      	bhi.n	8006b5c <HAL_ETH_WritePHYRegister+0x74>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006af6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006afa:	2b42      	cmp	r3, #66	; 0x42
 8006afc:	d037      	beq.n	8006b6e <HAL_ETH_WritePHYRegister+0x86>
  tmpreg = heth->Instance->MACMIIAR;
 8006afe:	6821      	ldr	r1, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006b00:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006b02:	2242      	movs	r2, #66	; 0x42
 8006b04:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006b06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8006b0a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006b0e:	8a22      	ldrh	r2, [r4, #16]
 8006b10:	f043 0303 	orr.w	r3, r3, #3
  tmpreg = heth->Instance->MACMIIAR;
 8006b14:	6908      	ldr	r0, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006b16:	02d2      	lsls	r2, r2, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006b18:	614e      	str	r6, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8006b1a:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8006b22:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8006b24:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8006b26:	f7fd fe69 	bl	80047fc <HAL_GetTick>
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	e004      	b.n	8006b38 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006b32:	f010 0001 	ands.w	r0, r0, #1
 8006b36:	d00d      	beq.n	8006b54 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006b38:	f7fd fe60 	bl	80047fc <HAL_GetTick>
 8006b3c:	1b40      	subs	r0, r0, r5
 8006b3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006b42:	d3f4      	bcc.n	8006b2e <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8006b44:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8006b46:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006b48:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8006b4a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8006b5c:	f240 515e 	movw	r1, #1374	; 0x55e
 8006b60:	4804      	ldr	r0, [pc, #16]	; (8006b74 <HAL_ETH_WritePHYRegister+0x8c>)
 8006b62:	f7fb fc89 	bl	8002478 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8006b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006b6a:	2b42      	cmp	r3, #66	; 0x42
 8006b6c:	d1c7      	bne.n	8006afe <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8006b6e:	2002      	movs	r0, #2
}
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
 8006b72:	bf00      	nop
 8006b74:	08021454 	.word	0x08021454

08006b78 <HAL_ETH_Init>:
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8006b7a:	2300      	movs	r3, #0
{
 8006b7c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8006b7e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f000 80bb 	beq.w	8006cfc <HAL_ETH_Init+0x184>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8006b86:	6843      	ldr	r3, [r0, #4]
 8006b88:	4604      	mov	r4, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	f200 8092 	bhi.w	8006cb4 <HAL_ETH_Init+0x13c>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006b90:	69a3      	ldr	r3, [r4, #24]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	f200 8085 	bhi.w	8006ca2 <HAL_ETH_Init+0x12a>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006b98:	69e3      	ldr	r3, [r4, #28]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d878      	bhi.n	8006c90 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006b9e:	6a23      	ldr	r3, [r4, #32]
 8006ba0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8006ba4:	f040 8095 	bne.w	8006cd2 <HAL_ETH_Init+0x15a>
  if(heth->State == HAL_ETH_STATE_RESET)
 8006ba8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8088 	beq.w	8006cc6 <HAL_ETH_Init+0x14e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bb6:	4b90      	ldr	r3, [pc, #576]	; (8006df8 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006bb8:	6821      	ldr	r1, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006bbc:	488f      	ldr	r0, [pc, #572]	; (8006dfc <HAL_ETH_Init+0x284>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006bbe:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006bd2:	6843      	ldr	r3, [r0, #4]
 8006bd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006bd8:	6043      	str	r3, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006bda:	6843      	ldr	r3, [r0, #4]
 8006bdc:	6a22      	ldr	r2, [r4, #32]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	6043      	str	r3, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006be2:	680b      	ldr	r3, [r1, #0]
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8006bea:	f7fd fe07 	bl	80047fc <HAL_GetTick>
 8006bee:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006bf0:	e005      	b.n	8006bfe <HAL_ETH_Init+0x86>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8006bf2:	f7fd fe03 	bl	80047fc <HAL_GetTick>
 8006bf6:	1b40      	subs	r0, r0, r5
 8006bf8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8006bfc:	d875      	bhi.n	8006cea <HAL_ETH_Init+0x172>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	07d0      	lsls	r0, r2, #31
 8006c08:	d4f3      	bmi.n	8006bf2 <HAL_ETH_Init+0x7a>
  tempreg = (heth->Instance)->MACMIIAR;
 8006c0a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8006c0c:	f002 fd1e 	bl	800964c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8006c10:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <HAL_ETH_Init+0x288>)
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8006c14:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8006c18:	4403      	add	r3, r0
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d972      	bls.n	8006d04 <HAL_ETH_Init+0x18c>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8006c1e:	4b7a      	ldr	r3, [pc, #488]	; (8006e08 <HAL_ETH_Init+0x290>)
 8006c20:	4a7a      	ldr	r2, [pc, #488]	; (8006e0c <HAL_ETH_Init+0x294>)
 8006c22:	4403      	add	r3, r0
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d87a      	bhi.n	8006d1e <HAL_ETH_Init+0x1a6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006c28:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8006c2c:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006c2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c32:	2100      	movs	r1, #0
 8006c34:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8006c36:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006c38:	f7ff ff56 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d163      	bne.n	8006d0a <HAL_ETH_Init+0x192>
  HAL_Delay(PHY_RESET_DELAY);
 8006c42:	20ff      	movs	r0, #255	; 0xff
 8006c44:	f7fd fde0 	bl	8004808 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d176      	bne.n	8006d3c <HAL_ETH_Init+0x1c4>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8006c54:	f040 8098 	bne.w	8006d88 <HAL_ETH_Init+0x210>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8006c58:	68e3      	ldr	r3, [r4, #12]
 8006c5a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006c5e:	f040 808c 	bne.w	8006d7a <HAL_ETH_Init+0x202>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006c62:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8006c64:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006c66:	2100      	movs	r1, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	f7ff ff3a 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d148      	bne.n	8006d0a <HAL_ETH_Init+0x192>
    HAL_Delay(PHY_CONFIG_DELAY);
 8006c78:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006c7c:	f7fd fdc4 	bl	8004808 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8006c80:	2100      	movs	r1, #0
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff fcce 	bl	8006624 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8006c8e:	e032      	b.n	8006cf6 <HAL_ETH_Init+0x17e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006c90:	21e0      	movs	r1, #224	; 0xe0
 8006c92:	485f      	ldr	r0, [pc, #380]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006c94:	f7fb fbf0 	bl	8002478 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006c98:	6a23      	ldr	r3, [r4, #32]
 8006c9a:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8006c9e:	d083      	beq.n	8006ba8 <HAL_ETH_Init+0x30>
 8006ca0:	e017      	b.n	8006cd2 <HAL_ETH_Init+0x15a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006ca2:	21df      	movs	r1, #223	; 0xdf
 8006ca4:	485a      	ldr	r0, [pc, #360]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006ca6:	f7fb fbe7 	bl	8002478 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8006caa:	69e3      	ldr	r3, [r4, #28]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f67f af76 	bls.w	8006b9e <HAL_ETH_Init+0x26>
 8006cb2:	e7ed      	b.n	8006c90 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8006cb4:	21de      	movs	r1, #222	; 0xde
 8006cb6:	4856      	ldr	r0, [pc, #344]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006cb8:	f7fb fbde 	bl	8002478 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8006cbc:	69a3      	ldr	r3, [r4, #24]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	f67f af6a 	bls.w	8006b98 <HAL_ETH_Init+0x20>
 8006cc4:	e7ed      	b.n	8006ca2 <HAL_ETH_Init+0x12a>
    heth->Lock = HAL_UNLOCKED;
 8006cc6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f007 fe8e 	bl	800e9ec <HAL_ETH_MspInit>
 8006cd0:	e771      	b.n	8006bb6 <HAL_ETH_Init+0x3e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8006cd2:	21e1      	movs	r1, #225	; 0xe1
 8006cd4:	484e      	ldr	r0, [pc, #312]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006cd6:	f7fb fbcf 	bl	8002478 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8006cda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006cde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f47f af67 	bne.w	8006bb6 <HAL_ETH_Init+0x3e>
 8006ce8:	e7ed      	b.n	8006cc6 <HAL_ETH_Init+0x14e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006cea:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8006cec:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006cee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8006cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	b003      	add	sp, #12
 8006cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006cfc:	2501      	movs	r5, #1
}
 8006cfe:	4628      	mov	r0, r5
 8006d00:	b003      	add	sp, #12
 8006d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006d04:	f045 0508 	orr.w	r5, r5, #8
 8006d08:	e790      	b.n	8006c2c <HAL_ETH_Init+0xb4>
      heth->State = HAL_ETH_STATE_READY;
 8006d0a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	2101      	movs	r1, #1
 8006d10:	f7ff fc88 	bl	8006624 <ETH_MACDMAConfig>
}
 8006d14:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8006d16:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8006d1a:	b003      	add	sp, #12
 8006d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8006d1e:	4b3d      	ldr	r3, [pc, #244]	; (8006e14 <HAL_ETH_Init+0x29c>)
 8006d20:	4a3d      	ldr	r2, [pc, #244]	; (8006e18 <HAL_ETH_Init+0x2a0>)
 8006d22:	4403      	add	r3, r0
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d981      	bls.n	8006c2c <HAL_ETH_Init+0xb4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8006d28:	4b3c      	ldr	r3, [pc, #240]	; (8006e1c <HAL_ETH_Init+0x2a4>)
 8006d2a:	4a3d      	ldr	r2, [pc, #244]	; (8006e20 <HAL_ETH_Init+0x2a8>)
 8006d2c:	4403      	add	r3, r0
 8006d2e:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006d30:	bf94      	ite	ls
 8006d32:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8006d36:	f045 0510 	orrhi.w	r5, r5, #16
 8006d3a:	e777      	b.n	8006c2c <HAL_ETH_Init+0xb4>
    tickstart = HAL_GetTick();
 8006d3c:	f7fd fd5e 	bl	80047fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006d40:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006d44:	4607      	mov	r7, r0
 8006d46:	e002      	b.n	8006d4e <HAL_ETH_Init+0x1d6>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006d48:	9b00      	ldr	r3, [sp, #0]
 8006d4a:	0759      	lsls	r1, r3, #29
 8006d4c:	d422      	bmi.n	8006d94 <HAL_ETH_Init+0x21c>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006d4e:	466a      	mov	r2, sp
 8006d50:	2101      	movs	r1, #1
 8006d52:	4620      	mov	r0, r4
 8006d54:	f7ff fe80 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006d58:	f7fd fd50 	bl	80047fc <HAL_GetTick>
 8006d5c:	1bc0      	subs	r0, r0, r7
 8006d5e:	42b0      	cmp	r0, r6
 8006d60:	d9f2      	bls.n	8006d48 <HAL_ETH_Init+0x1d0>
        ETH_MACDMAConfig(heth, err);
 8006d62:	2101      	movs	r1, #1
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff fc5d 	bl	8006624 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8006d6a:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8006d6c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006d6e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8006d70:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8006d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8006d78:	e7bd      	b.n	8006cf6 <HAL_ETH_Init+0x17e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8006d7a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006d7e:	4824      	ldr	r0, [pc, #144]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006d80:	f7fb fb7a 	bl	8002478 <assert_failed>
 8006d84:	68e3      	ldr	r3, [r4, #12]
 8006d86:	e76c      	b.n	8006c62 <HAL_ETH_Init+0xea>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006d88:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006d8c:	4820      	ldr	r0, [pc, #128]	; (8006e10 <HAL_ETH_Init+0x298>)
 8006d8e:	f7fb fb73 	bl	8002478 <assert_failed>
 8006d92:	e761      	b.n	8006c58 <HAL_ETH_Init+0xe0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fea4 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d1b2      	bne.n	8006d0a <HAL_ETH_Init+0x192>
    tickstart = HAL_GetTick();
 8006da4:	f7fd fd2a 	bl	80047fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006da8:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006dac:	4607      	mov	r7, r0
 8006dae:	e002      	b.n	8006db6 <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006db0:	9b00      	ldr	r3, [sp, #0]
 8006db2:	069a      	lsls	r2, r3, #26
 8006db4:	d40a      	bmi.n	8006dcc <HAL_ETH_Init+0x254>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006db6:	466a      	mov	r2, sp
 8006db8:	2101      	movs	r1, #1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff fe4c 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006dc0:	f7fd fd1c 	bl	80047fc <HAL_GetTick>
 8006dc4:	1bc0      	subs	r0, r0, r7
 8006dc6:	42b0      	cmp	r0, r6
 8006dc8:	d9f2      	bls.n	8006db0 <HAL_ETH_Init+0x238>
 8006dca:	e7ca      	b.n	8006d62 <HAL_ETH_Init+0x1ea>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006dcc:	466a      	mov	r2, sp
 8006dce:	211f      	movs	r1, #31
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff fe41 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d197      	bne.n	8006d0a <HAL_ETH_Init+0x192>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006dda:	9b00      	ldr	r3, [sp, #0]
 8006ddc:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006de0:	bf18      	it	ne
 8006de2:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006de6:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8006de8:	bf4c      	ite	mi
 8006dea:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8006dec:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8006df0:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	e744      	b.n	8006c80 <HAL_ETH_Init+0x108>
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40013800 	.word	0x40013800
 8006e00:	feced300 	.word	0xfeced300
 8006e04:	00e4e1bf 	.word	0x00e4e1bf
 8006e08:	fde9f140 	.word	0xfde9f140
 8006e0c:	017d783f 	.word	0x017d783f
 8006e10:	08021454 	.word	0x08021454
 8006e14:	fc6c7900 	.word	0xfc6c7900
 8006e18:	026259ff 	.word	0x026259ff
 8006e1c:	fa0a1f00 	.word	0xfa0a1f00
 8006e20:	02faf07f 	.word	0x02faf07f

08006e24 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8006e24:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d039      	beq.n	8006ea0 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006e2c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8006e2e:	2202      	movs	r2, #2
{  
 8006e30:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0;
 8006e32:	2500      	movs	r5, #0
{  
 8006e34:	b082      	sub	sp, #8
  heth->State = HAL_ETH_STATE_BUSY;
 8006e36:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8006e3a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8006e3c:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8006e3e:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006e40:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8006e42:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e46:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006e48:	f042 0208 	orr.w	r2, r2, #8
 8006e4c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e52:	f7fd fcd9 	bl	8004808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006e56:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e58:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8006e5e:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f042 0204 	orr.w	r2, r2, #4
 8006e66:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e6c:	f7fd fccc 	bl	8004808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006e70:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8006e72:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8006e74:	9a00      	ldr	r2, [sp, #0]
 8006e76:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8006e78:	f7ff fbbe 	bl	80065f8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8006e82:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8006e84:	58d1      	ldr	r1, [r2, r3]
 8006e86:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006e8a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8006e8c:	58d1      	ldr	r1, [r2, r3]
 8006e8e:	f041 0102 	orr.w	r1, r1, #2
 8006e92:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8006e94:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006e98:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8006ea0:	2002      	movs	r0, #2
}
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8006ea4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d039      	beq.n	8006f20 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006eac:	6803      	ldr	r3, [r0, #0]
 8006eae:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8006eb2:	2102      	movs	r1, #2
{  
 8006eb4:	b570      	push	{r4, r5, r6, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 8006eb6:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8006eba:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006ebc:	5899      	ldr	r1, [r3, r2]
{  
 8006ebe:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8006ec0:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8006ec4:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006ec6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8006eca:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ecc:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006ece:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8006ed0:	5899      	ldr	r1, [r3, r2]
 8006ed2:	f021 0102 	bic.w	r1, r1, #2
 8006ed6:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8006ed8:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f022 0204 	bic.w	r2, r2, #4
 8006ee0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ee6:	f7fd fc8f 	bl	8004808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006eea:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8006eec:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8006eee:	9a01      	ldr	r2, [sp, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8006ef2:	f7ff fb81 	bl	80065f8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006ef6:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8006ef8:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006efa:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	f022 0208 	bic.w	r2, r2, #8
 8006f02:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006f08:	f7fd fc7e 	bl	8004808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006f0c:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8006f0e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8006f14:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8006f18:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8006f1c:	b002      	add	sp, #8
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8006f20:	2002      	movs	r0, #2
}
 8006f22:	4770      	bx	lr

08006f24 <HAL_ETH_ConfigMAC>:
{
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8006f26:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	f000 8242 	beq.w	80073b4 <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006f30:	6883      	ldr	r3, [r0, #8]
 8006f32:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 8006f34:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 8006f36:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006f38:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8006f3c:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8006f3e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 8006f42:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8006f46:	f040 8207 	bne.w	8007358 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8006f4a:	68eb      	ldr	r3, [r5, #12]
 8006f4c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006f50:	f040 8114 	bne.w	800717c <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8006f54:	2c00      	cmp	r4, #0
 8006f56:	f000 8119 	beq.w	800718c <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8006f60:	f040 8139 	bne.w	80071d6 <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8006f6a:	f040 816b 	bne.w	8007244 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8006f74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f78:	d002      	beq.n	8006f80 <HAL_ETH_ConfigMAC+0x5c>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 821c 	bne.w	80073b8 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8006f80:	68e3      	ldr	r3, [r4, #12]
 8006f82:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8006f86:	f040 8152 	bne.w	800722e <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8006f90:	f040 8142 	bne.w	8007218 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8006f9a:	f040 8132 	bne.w	8007202 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8006f9e:	69a3      	ldr	r3, [r4, #24]
 8006fa0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8006fa4:	f040 8122 	bne.w	80071ec <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8006fa8:	69e3      	ldr	r3, [r4, #28]
 8006faa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006fae:	f040 81a3 	bne.w	80072f8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8006fb2:	6a23      	ldr	r3, [r4, #32]
 8006fb4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006fb8:	f040 818e 	bne.w	80072d8 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8006fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fbe:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8006fc2:	f040 8193 	bne.w	80072ec <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8006fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fc8:	f033 0310 	bics.w	r3, r3, #16
 8006fcc:	f040 8179 	bne.w	80072c2 <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8006fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fd2:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8006fd6:	f040 819a 	bne.w	800730e <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8006fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fdc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8006fe0:	d003      	beq.n	8006fea <HAL_ETH_ConfigMAC+0xc6>
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	f040 81d3 	bne.w	8007390 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8006fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff0:	2a40      	cmp	r2, #64	; 0x40
 8006ff2:	d002      	beq.n	8006ffa <HAL_ETH_ConfigMAC+0xd6>
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	f040 81b5 	bne.w	8007364 <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8006ffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ffc:	f033 0320 	bics.w	r3, r3, #32
 8007000:	f040 80de 	bne.w	80071c0 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8007004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007006:	f033 0308 	bics.w	r3, r3, #8
 800700a:	f040 80cf 	bne.w	80071ac <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800700e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007010:	2b01      	cmp	r3, #1
 8007012:	f200 80a5 	bhi.w	8007160 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007016:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007018:	f240 4204 	movw	r2, #1028	; 0x404
 800701c:	4293      	cmp	r3, r2
 800701e:	bf18      	it	ne
 8007020:	2b10      	cmpne	r3, #16
 8007022:	d003      	beq.n	800702c <HAL_ETH_ConfigMAC+0x108>
 8007024:	f033 0304 	bics.w	r3, r3, #4
 8007028:	f040 81be 	bne.w	80073a8 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800702c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800702e:	f033 0202 	bics.w	r2, r3, #2
 8007032:	d004      	beq.n	800703e <HAL_ETH_ConfigMAC+0x11a>
 8007034:	f240 4202 	movw	r2, #1026	; 0x402
 8007038:	4293      	cmp	r3, r2
 800703a:	f040 819e 	bne.w	800737a <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800703e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	f080 816e 	bcs.w	8007324 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8007048:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800704a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800704e:	f040 8173 	bne.w	8007338 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007052:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007054:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007058:	f040 8178 	bne.w	800734c <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800705c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800705e:	f033 0308 	bics.w	r3, r3, #8
 8007062:	f040 8123 	bne.w	80072ac <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007068:	f033 0304 	bics.w	r3, r3, #4
 800706c:	f040 8113 	bne.w	8007296 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007070:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007072:	f033 0302 	bics.w	r3, r3, #2
 8007076:	f040 8103 	bne.w	8007280 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800707a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800707c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007080:	f040 80f3 	bne.w	800726a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007084:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708a:	f080 80e8 	bcs.w	800725e <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 800708e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007090:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 8007092:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007096:	430b      	orrs	r3, r1
 8007098:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	6962      	ldr	r2, [r4, #20]
 80070a0:	4333      	orrs	r3, r6
 80070a2:	69a6      	ldr	r6, [r4, #24]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	69e1      	ldr	r1, [r4, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	6a22      	ldr	r2, [r4, #32]
 80070ac:	4333      	orrs	r3, r6
 80070ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070b0:	430b      	orrs	r3, r1
 80070b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80070b4:	4313      	orrs	r3, r2
 80070b6:	68aa      	ldr	r2, [r5, #8]
 80070b8:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 80070ba:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 80070bc:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 80070be:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 80070c0:	68e9      	ldr	r1, [r5, #12]
 80070c2:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80070c4:	4abf      	ldr	r2, [pc, #764]	; (80073c4 <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 80070c6:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80070c8:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80070ca:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80070ce:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80070d0:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 80070d2:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80070d4:	f7fd fb98 	bl	8004808 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80070d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80070da:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80070dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 80070de:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80070e0:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80070e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 80070e4:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 80070e6:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 80070e8:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80070ec:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 80070ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 80070f0:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 80070f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 80070f4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80070f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 80070f8:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 80070fa:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80070fc:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 80070fe:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007100:	f7fd fb82 	bl	8004808 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 8007104:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007106:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8007108:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 800710a:	430b      	orrs	r3, r1
 800710c:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800710e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 8007110:	430b      	orrs	r3, r1
 8007112:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 8007114:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 8007116:	430b      	orrs	r3, r1
 8007118:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800711a:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 800711c:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800711e:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8007120:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007122:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007124:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8007126:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8007128:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800712c:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800712e:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8007130:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 8007132:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007134:	f7fd fb68 	bl	8004808 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007138:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800713a:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800713c:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 800713e:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007140:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 8007142:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007144:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8007146:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8007148:	f7fd fb5e 	bl	8004808 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8007150:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 8007152:	2201      	movs	r2, #1
  return HAL_OK;  
 8007154:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8007156:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800715a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007160:	f240 6123 	movw	r1, #1571	; 0x623
 8007164:	4898      	ldr	r0, [pc, #608]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007166:	f7fb f987 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800716a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800716c:	f240 4204 	movw	r2, #1028	; 0x404
 8007170:	4293      	cmp	r3, r2
 8007172:	bf18      	it	ne
 8007174:	2b10      	cmpne	r3, #16
 8007176:	f47f af55 	bne.w	8007024 <HAL_ETH_ConfigMAC+0x100>
 800717a:	e757      	b.n	800702c <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800717c:	f240 610e 	movw	r1, #1550	; 0x60e
 8007180:	4891      	ldr	r0, [pc, #580]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007182:	f7fb f979 	bl	8002478 <assert_failed>
  if (macconf != NULL)
 8007186:	2c00      	cmp	r4, #0
 8007188:	f47f aee7 	bne.w	8006f5a <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 800718c:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800718e:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007190:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 8007192:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007194:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 8007196:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800719a:	4323      	orrs	r3, r4
 800719c:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800719e:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 80071a0:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80071a2:	f7fd fb31 	bl	8004808 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80071a6:	682b      	ldr	r3, [r5, #0]
 80071a8:	601c      	str	r4, [r3, #0]
 80071aa:	e7d1      	b.n	8007150 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80071ac:	f240 6122 	movw	r1, #1570	; 0x622
 80071b0:	4885      	ldr	r0, [pc, #532]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80071b2:	f7fb f961 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80071b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	f67f af2c 	bls.w	8007016 <HAL_ETH_ConfigMAC+0xf2>
 80071be:	e7cf      	b.n	8007160 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80071c0:	f240 6121 	movw	r1, #1569	; 0x621
 80071c4:	4880      	ldr	r0, [pc, #512]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80071c6:	f7fb f957 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80071ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80071cc:	f033 0308 	bics.w	r3, r3, #8
 80071d0:	f43f af1d 	beq.w	800700e <HAL_ETH_ConfigMAC+0xea>
 80071d4:	e7ea      	b.n	80071ac <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 80071d6:	f240 6113 	movw	r1, #1555	; 0x613
 80071da:	487b      	ldr	r0, [pc, #492]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80071dc:	f7fb f94c 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80071e6:	f43f aec2 	beq.w	8006f6e <HAL_ETH_ConfigMAC+0x4a>
 80071ea:	e02b      	b.n	8007244 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80071ec:	f240 6119 	movw	r1, #1561	; 0x619
 80071f0:	4875      	ldr	r0, [pc, #468]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80071f2:	f7fb f941 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80071f6:	69e3      	ldr	r3, [r4, #28]
 80071f8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80071fc:	f43f aed9 	beq.w	8006fb2 <HAL_ETH_ConfigMAC+0x8e>
 8007200:	e07a      	b.n	80072f8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007202:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8007206:	4870      	ldr	r0, [pc, #448]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007208:	f7fb f936 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800720c:	69a3      	ldr	r3, [r4, #24]
 800720e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007212:	f43f aec9 	beq.w	8006fa8 <HAL_ETH_ConfigMAC+0x84>
 8007216:	e7e9      	b.n	80071ec <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007218:	f240 6117 	movw	r1, #1559	; 0x617
 800721c:	486a      	ldr	r0, [pc, #424]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800721e:	f7fb f92b 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007222:	6963      	ldr	r3, [r4, #20]
 8007224:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007228:	f43f aeb9 	beq.w	8006f9e <HAL_ETH_ConfigMAC+0x7a>
 800722c:	e7e9      	b.n	8007202 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800722e:	f240 6116 	movw	r1, #1558	; 0x616
 8007232:	4865      	ldr	r0, [pc, #404]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007234:	f7fb f920 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800723e:	f43f aea9 	beq.w	8006f94 <HAL_ETH_ConfigMAC+0x70>
 8007242:	e7e9      	b.n	8007218 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007244:	f240 6114 	movw	r1, #1556	; 0x614
 8007248:	485f      	ldr	r0, [pc, #380]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800724a:	f7fb f915 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007254:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007258:	f47f ae8f 	bne.w	8006f7a <HAL_ETH_ConfigMAC+0x56>
 800725c:	e690      	b.n	8006f80 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800725e:	f240 612d 	movw	r1, #1581	; 0x62d
 8007262:	4859      	ldr	r0, [pc, #356]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007264:	f7fb f908 	bl	8002478 <assert_failed>
 8007268:	e711      	b.n	800708e <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800726a:	f240 612c 	movw	r1, #1580	; 0x62c
 800726e:	4856      	ldr	r0, [pc, #344]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007270:	f7fb f902 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007274:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727a:	f4ff af08 	bcc.w	800708e <HAL_ETH_ConfigMAC+0x16a>
 800727e:	e7ee      	b.n	800725e <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007280:	f240 612b 	movw	r1, #1579	; 0x62b
 8007284:	4850      	ldr	r0, [pc, #320]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007286:	f7fb f8f7 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800728a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800728c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007290:	f43f aef8 	beq.w	8007084 <HAL_ETH_ConfigMAC+0x160>
 8007294:	e7e9      	b.n	800726a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007296:	f240 612a 	movw	r1, #1578	; 0x62a
 800729a:	484b      	ldr	r0, [pc, #300]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800729c:	f7fb f8ec 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 80072a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80072a2:	f033 0302 	bics.w	r3, r3, #2
 80072a6:	f43f aee8 	beq.w	800707a <HAL_ETH_ConfigMAC+0x156>
 80072aa:	e7e9      	b.n	8007280 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 80072ac:	f240 6129 	movw	r1, #1577	; 0x629
 80072b0:	4845      	ldr	r0, [pc, #276]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80072b2:	f7fb f8e1 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 80072b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072b8:	f033 0304 	bics.w	r3, r3, #4
 80072bc:	f43f aed8 	beq.w	8007070 <HAL_ETH_ConfigMAC+0x14c>
 80072c0:	e7e9      	b.n	8007296 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 80072c2:	f240 611d 	movw	r1, #1565	; 0x61d
 80072c6:	4840      	ldr	r0, [pc, #256]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80072c8:	f7fb f8d6 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 80072cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072ce:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	f43f ae82 	beq.w	8006fda <HAL_ETH_ConfigMAC+0xb6>
 80072d6:	e01a      	b.n	800730e <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 80072d8:	f240 611b 	movw	r1, #1563	; 0x61b
 80072dc:	483a      	ldr	r0, [pc, #232]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80072de:	f7fb f8cb 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 80072e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e4:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 80072e8:	f43f ae6d 	beq.w	8006fc6 <HAL_ETH_ConfigMAC+0xa2>
 80072ec:	f240 611c 	movw	r1, #1564	; 0x61c
 80072f0:	4835      	ldr	r0, [pc, #212]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80072f2:	f7fb f8c1 	bl	8002478 <assert_failed>
 80072f6:	e666      	b.n	8006fc6 <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80072f8:	f240 611a 	movw	r1, #1562	; 0x61a
 80072fc:	4832      	ldr	r0, [pc, #200]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80072fe:	f7fb f8bb 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007302:	6a23      	ldr	r3, [r4, #32]
 8007304:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007308:	f43f ae58 	beq.w	8006fbc <HAL_ETH_ConfigMAC+0x98>
 800730c:	e7e4      	b.n	80072d8 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800730e:	f240 611e 	movw	r1, #1566	; 0x61e
 8007312:	482d      	ldr	r0, [pc, #180]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007314:	f7fb f8b0 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800731a:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800731e:	f47f ae60 	bne.w	8006fe2 <HAL_ETH_ConfigMAC+0xbe>
 8007322:	e662      	b.n	8006fea <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007324:	f240 6126 	movw	r1, #1574	; 0x626
 8007328:	4827      	ldr	r0, [pc, #156]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800732a:	f7fb f8a5 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800732e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007330:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007334:	f43f ae8d 	beq.w	8007052 <HAL_ETH_ConfigMAC+0x12e>
 8007338:	f240 6127 	movw	r1, #1575	; 0x627
 800733c:	4822      	ldr	r0, [pc, #136]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800733e:	f7fb f89b 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007342:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007344:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007348:	f43f ae88 	beq.w	800705c <HAL_ETH_ConfigMAC+0x138>
 800734c:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8007350:	481d      	ldr	r0, [pc, #116]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007352:	f7fb f891 	bl	8002478 <assert_failed>
 8007356:	e681      	b.n	800705c <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007358:	f240 610d 	movw	r1, #1549	; 0x60d
 800735c:	481a      	ldr	r0, [pc, #104]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800735e:	f7fb f88b 	bl	8002478 <assert_failed>
 8007362:	e5f2      	b.n	8006f4a <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007364:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8007368:	4817      	ldr	r0, [pc, #92]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 800736a:	f7fb f885 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800736e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007370:	f033 0320 	bics.w	r3, r3, #32
 8007374:	f43f ae46 	beq.w	8007004 <HAL_ETH_ConfigMAC+0xe0>
 8007378:	e722      	b.n	80071c0 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800737a:	f240 6125 	movw	r1, #1573	; 0x625
 800737e:	4812      	ldr	r0, [pc, #72]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007380:	f7fb f87a 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007384:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738a:	f4ff ae5d 	bcc.w	8007048 <HAL_ETH_ConfigMAC+0x124>
 800738e:	e7c9      	b.n	8007324 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007390:	f240 611f 	movw	r1, #1567	; 0x61f
 8007394:	480c      	ldr	r0, [pc, #48]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 8007396:	f7fb f86f 	bl	8002478 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800739a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800739c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073a0:	2a40      	cmp	r2, #64	; 0x40
 80073a2:	f47f ae27 	bne.w	8006ff4 <HAL_ETH_ConfigMAC+0xd0>
 80073a6:	e628      	b.n	8006ffa <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80073a8:	f240 6124 	movw	r1, #1572	; 0x624
 80073ac:	4806      	ldr	r0, [pc, #24]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80073ae:	f7fb f863 	bl	8002478 <assert_failed>
 80073b2:	e63b      	b.n	800702c <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 80073b4:	2002      	movs	r0, #2
}
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80073b8:	f240 6115 	movw	r1, #1557	; 0x615
 80073bc:	4802      	ldr	r0, [pc, #8]	; (80073c8 <HAL_ETH_ConfigMAC+0x4a4>)
 80073be:	f7fb f85b 	bl	8002478 <assert_failed>
 80073c2:	e5dd      	b.n	8006f80 <HAL_ETH_ConfigMAC+0x5c>
 80073c4:	ff20810f 	.word	0xff20810f
 80073c8:	08021454 	.word	0x08021454

080073cc <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80073cc:	4bbf      	ldr	r3, [pc, #764]	; (80076cc <HAL_GPIO_Init+0x300>)
 80073ce:	4ac0      	ldr	r2, [pc, #768]	; (80076d0 <HAL_GPIO_Init+0x304>)
 80073d0:	4290      	cmp	r0, r2
 80073d2:	bf18      	it	ne
 80073d4:	4298      	cmpne	r0, r3
{
 80073d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80073da:	bf18      	it	ne
 80073dc:	2301      	movne	r3, #1
{
 80073de:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80073e0:	bf08      	it	eq
 80073e2:	2300      	moveq	r3, #0
{
 80073e4:	4681      	mov	r9, r0
 80073e6:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	d026      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 80073ec:	4bb9      	ldr	r3, [pc, #740]	; (80076d4 <HAL_GPIO_Init+0x308>)
 80073ee:	4298      	cmp	r0, r3
 80073f0:	d023      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 80073f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f6:	4298      	cmp	r0, r3
 80073f8:	d01f      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 80073fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073fe:	4298      	cmp	r0, r3
 8007400:	d01b      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 8007402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007406:	4298      	cmp	r0, r3
 8007408:	d017      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 800740a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740e:	4298      	cmp	r0, r3
 8007410:	d013      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 8007412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007416:	4298      	cmp	r0, r3
 8007418:	d00f      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 800741a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	4290      	cmp	r0, r2
 8007424:	bf18      	it	ne
 8007426:	4298      	cmpne	r0, r3
 8007428:	d007      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 800742a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742e:	4298      	cmp	r0, r3
 8007430:	d003      	beq.n	800743a <HAL_GPIO_Init+0x6e>
 8007432:	21b1      	movs	r1, #177	; 0xb1
 8007434:	48a8      	ldr	r0, [pc, #672]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 8007436:	f7fb f81f 	bl	8002478 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800743a:	f8bb 3000 	ldrh.w	r3, [fp]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8116 	beq.w	8007670 <HAL_GPIO_Init+0x2a4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007444:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007448:	4ba4      	ldr	r3, [pc, #656]	; (80076dc <HAL_GPIO_Init+0x310>)
 800744a:	4ca5      	ldr	r4, [pc, #660]	; (80076e0 <HAL_GPIO_Init+0x314>)
 800744c:	f1a2 0011 	sub.w	r0, r2, #17
 8007450:	429a      	cmp	r2, r3
 8007452:	bf18      	it	ne
 8007454:	2a03      	cmpne	r2, #3
 8007456:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800745a:	bf8c      	ite	hi
 800745c:	2301      	movhi	r3, #1
 800745e:	2300      	movls	r3, #0
 8007460:	42a2      	cmp	r2, r4
 8007462:	bf0c      	ite	eq
 8007464:	2300      	moveq	r3, #0
 8007466:	f003 0301 	andne.w	r3, r3, #1
 800746a:	4a9e      	ldr	r2, [pc, #632]	; (80076e4 <HAL_GPIO_Init+0x318>)
 800746c:	2801      	cmp	r0, #1
 800746e:	bf94      	ite	ls
 8007470:	2300      	movls	r3, #0
 8007472:	f003 0301 	andhi.w	r3, r3, #1
 8007476:	4291      	cmp	r1, r2
 8007478:	bf0c      	ite	eq
 800747a:	2300      	moveq	r3, #0
 800747c:	f003 0301 	andne.w	r3, r3, #1
 8007480:	b11b      	cbz	r3, 800748a <HAL_GPIO_Init+0xbe>
 8007482:	4b99      	ldr	r3, [pc, #612]	; (80076e8 <HAL_GPIO_Init+0x31c>)
 8007484:	4299      	cmp	r1, r3
 8007486:	f040 8116 	bne.w	80076b6 <HAL_GPIO_Init+0x2ea>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800748a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800748e:	2b02      	cmp	r3, #2
 8007490:	f200 80f3 	bhi.w	800767a <HAL_GPIO_Init+0x2ae>
{
 8007494:	f04f 0800 	mov.w	r8, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007498:	f8df a274 	ldr.w	sl, [pc, #628]	; 8007710 <HAL_GPIO_Init+0x344>
 800749c:	e005      	b.n	80074aa <HAL_GPIO_Init+0xde>
  for(position = 0; position < GPIO_NUMBER; position++)
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	f1b8 0f10 	cmp.w	r8, #16
 80074a6:	f000 80c2 	beq.w	800762e <HAL_GPIO_Init+0x262>
    ioposition = ((uint32_t)0x01) << position;
 80074aa:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074ac:	f8db 5000 	ldr.w	r5, [fp]
    ioposition = ((uint32_t)0x01) << position;
 80074b0:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074b4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80074b6:	42ac      	cmp	r4, r5
 80074b8:	d1f1      	bne.n	800749e <HAL_GPIO_Init+0xd2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074ba:	f8db 3004 	ldr.w	r3, [fp, #4]
 80074be:	f023 0010 	bic.w	r0, r3, #16
 80074c2:	2802      	cmp	r0, #2
 80074c4:	d117      	bne.n	80074f6 <HAL_GPIO_Init+0x12a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80074c6:	f8db 2010 	ldr.w	r2, [fp, #16]
 80074ca:	2a0f      	cmp	r2, #15
 80074cc:	f200 80c0 	bhi.w	8007650 <HAL_GPIO_Init+0x284>
        temp = GPIOx->AFR[position >> 3];
 80074d0:	ea4f 01d8 	mov.w	r1, r8, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80074d4:	f008 0e07 	and.w	lr, r8, #7
 80074d8:	f04f 0c0f 	mov.w	ip, #15
 80074dc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80074e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80074e4:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80074e6:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80074ea:	fa02 f20e 	lsl.w	r2, r2, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80074ee:	ea26 060c 	bic.w	r6, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80074f2:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 80074f4:	620a      	str	r2, [r1, #32]
 80074f6:	ea4f 0748 	mov.w	r7, r8, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80074fa:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80074fc:	f8d9 2000 	ldr.w	r2, [r9]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007500:	3801      	subs	r0, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007502:	ea03 0106 	and.w	r1, r3, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007506:	40be      	lsls	r6, r7
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007508:	2801      	cmp	r0, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800750a:	ea6f 0606 	mvn.w	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800750e:	fa01 f107 	lsl.w	r1, r1, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007512:	ea06 0c02 	and.w	ip, r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007516:	ea41 010c 	orr.w	r1, r1, ip
      GPIOx->MODER = temp;
 800751a:	f8c9 1000 	str.w	r1, [r9]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800751e:	d818      	bhi.n	8007552 <HAL_GPIO_Init+0x186>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007520:	f8db 000c 	ldr.w	r0, [fp, #12]
 8007524:	2803      	cmp	r0, #3
 8007526:	f200 8085 	bhi.w	8007634 <HAL_GPIO_Init+0x268>
        temp = GPIOx->OSPEEDR; 
 800752a:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800752e:	40b8      	lsls	r0, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007530:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007534:	ea06 0c02 	and.w	ip, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007538:	fa01 f108 	lsl.w	r1, r1, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 800753c:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 8007540:	f8c9 0008 	str.w	r0, [r9, #8]
        temp = GPIOx->OTYPER;
 8007544:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007548:	ea20 0404 	bic.w	r4, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800754c:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 800754e:	f8c9 4004 	str.w	r4, [r9, #4]
      temp = GPIOx->PUPDR;
 8007552:	f8d9 000c 	ldr.w	r0, [r9, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007556:	f8db 1008 	ldr.w	r1, [fp, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800755a:	4006      	ands	r6, r0
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800755c:	fa01 f207 	lsl.w	r2, r1, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007560:	00df      	lsls	r7, r3, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007562:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007566:	f8c9 200c 	str.w	r2, [r9, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800756a:	d598      	bpl.n	800749e <HAL_GPIO_Init+0xd2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800756c:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8007570:	f028 0603 	bic.w	r6, r8, #3
 8007574:	4c5d      	ldr	r4, [pc, #372]	; (80076ec <HAL_GPIO_Init+0x320>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007576:	f008 0203 	and.w	r2, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800757e:	210f      	movs	r1, #15
 8007580:	4434      	add	r4, r6
 8007582:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007584:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8007588:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800758c:	4091      	lsls	r1, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800758e:	4e50      	ldr	r6, [pc, #320]	; (80076d0 <HAL_GPIO_Init+0x304>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007590:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007594:	45b1      	cmp	r9, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007596:	9003      	str	r0, [sp, #12]
 8007598:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800759a:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800759c:	ea20 0101 	bic.w	r1, r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80075a0:	d01f      	beq.n	80075e2 <HAL_GPIO_Init+0x216>
 80075a2:	9801      	ldr	r0, [sp, #4]
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d04e      	beq.n	8007646 <HAL_GPIO_Init+0x27a>
 80075a8:	484a      	ldr	r0, [pc, #296]	; (80076d4 <HAL_GPIO_Init+0x308>)
 80075aa:	4581      	cmp	r9, r0
 80075ac:	d05b      	beq.n	8007666 <HAL_GPIO_Init+0x29a>
 80075ae:	4850      	ldr	r0, [pc, #320]	; (80076f0 <HAL_GPIO_Init+0x324>)
 80075b0:	4581      	cmp	r9, r0
 80075b2:	d067      	beq.n	8007684 <HAL_GPIO_Init+0x2b8>
 80075b4:	484f      	ldr	r0, [pc, #316]	; (80076f4 <HAL_GPIO_Init+0x328>)
 80075b6:	4581      	cmp	r9, r0
 80075b8:	d069      	beq.n	800768e <HAL_GPIO_Init+0x2c2>
 80075ba:	484f      	ldr	r0, [pc, #316]	; (80076f8 <HAL_GPIO_Init+0x32c>)
 80075bc:	4581      	cmp	r9, r0
 80075be:	d070      	beq.n	80076a2 <HAL_GPIO_Init+0x2d6>
 80075c0:	484e      	ldr	r0, [pc, #312]	; (80076fc <HAL_GPIO_Init+0x330>)
 80075c2:	4581      	cmp	r9, r0
 80075c4:	d072      	beq.n	80076ac <HAL_GPIO_Init+0x2e0>
 80075c6:	484e      	ldr	r0, [pc, #312]	; (8007700 <HAL_GPIO_Init+0x334>)
 80075c8:	4581      	cmp	r9, r0
 80075ca:	d065      	beq.n	8007698 <HAL_GPIO_Init+0x2cc>
 80075cc:	484d      	ldr	r0, [pc, #308]	; (8007704 <HAL_GPIO_Init+0x338>)
 80075ce:	4581      	cmp	r9, r0
 80075d0:	d076      	beq.n	80076c0 <HAL_GPIO_Init+0x2f4>
 80075d2:	484d      	ldr	r0, [pc, #308]	; (8007708 <HAL_GPIO_Init+0x33c>)
 80075d4:	4581      	cmp	r9, r0
 80075d6:	bf0c      	ite	eq
 80075d8:	2009      	moveq	r0, #9
 80075da:	200a      	movne	r0, #10
 80075dc:	fa00 f202 	lsl.w	r2, r0, r2
 80075e0:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075e2:	4a4a      	ldr	r2, [pc, #296]	; (800770c <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075e4:	03de      	lsls	r6, r3, #15
        SYSCFG->EXTICR[position >> 2] = temp;
 80075e6:	60a1      	str	r1, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80075e8:	ea6f 0105 	mvn.w	r1, r5
        temp = EXTI->IMR;
 80075ec:	6812      	ldr	r2, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ee:	f108 0801 	add.w	r8, r8, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80075f2:	4846      	ldr	r0, [pc, #280]	; (800770c <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 80075f4:	bf54      	ite	pl
 80075f6:	400a      	andpl	r2, r1
          temp |= iocurrent;
 80075f8:	432a      	orrmi	r2, r5

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075fa:	039c      	lsls	r4, r3, #14
        EXTI->IMR = temp;
 80075fc:	6002      	str	r2, [r0, #0]
        temp = EXTI->EMR;
 80075fe:	6842      	ldr	r2, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8007600:	4842      	ldr	r0, [pc, #264]	; (800770c <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 8007602:	bf54      	ite	pl
 8007604:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8007606:	432a      	orrmi	r2, r5
        EXTI->EMR = temp;
 8007608:	6042      	str	r2, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800760a:	6882      	ldr	r2, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800760c:	02d8      	lsls	r0, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800760e:	483f      	ldr	r0, [pc, #252]	; (800770c <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
 8007610:	bf54      	ite	pl
 8007612:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8007614:	432a      	orrmi	r2, r5

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007616:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8007618:	4b3c      	ldr	r3, [pc, #240]	; (800770c <HAL_GPIO_Init+0x340>)
        EXTI->RTSR = temp;
 800761a:	6082      	str	r2, [r0, #8]
        temp = EXTI->FTSR;
 800761c:	68c2      	ldr	r2, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 800761e:	bf54      	ite	pl
 8007620:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8007622:	432a      	orrmi	r2, r5
  for(position = 0; position < GPIO_NUMBER; position++)
 8007624:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8007628:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800762a:	f47f af3e 	bne.w	80074aa <HAL_GPIO_Init+0xde>
      }
    }
  }
}
 800762e:	b005      	add	sp, #20
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007634:	4828      	ldr	r0, [pc, #160]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 8007636:	21d9      	movs	r1, #217	; 0xd9
 8007638:	f7fa ff1e 	bl	8002478 <assert_failed>
 800763c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8007640:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007644:	e771      	b.n	800752a <HAL_GPIO_Init+0x15e>
 8007646:	2001      	movs	r0, #1
 8007648:	fa00 f202 	lsl.w	r2, r0, r2
 800764c:	4311      	orrs	r1, r2
 800764e:	e7c8      	b.n	80075e2 <HAL_GPIO_Init+0x216>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007650:	4821      	ldr	r0, [pc, #132]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 8007652:	21c5      	movs	r1, #197	; 0xc5
 8007654:	f7fa ff10 	bl	8002478 <assert_failed>
 8007658:	f8db 3004 	ldr.w	r3, [fp, #4]
 800765c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8007660:	f023 0010 	bic.w	r0, r3, #16
 8007664:	e734      	b.n	80074d0 <HAL_GPIO_Init+0x104>
 8007666:	2002      	movs	r0, #2
 8007668:	fa00 f202 	lsl.w	r2, r0, r2
 800766c:	4311      	orrs	r1, r2
 800766e:	e7b8      	b.n	80075e2 <HAL_GPIO_Init+0x216>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007670:	21b2      	movs	r1, #178	; 0xb2
 8007672:	4819      	ldr	r0, [pc, #100]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 8007674:	f7fa ff00 	bl	8002478 <assert_failed>
 8007678:	e6e4      	b.n	8007444 <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800767a:	21b4      	movs	r1, #180	; 0xb4
 800767c:	4816      	ldr	r0, [pc, #88]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 800767e:	f7fa fefb 	bl	8002478 <assert_failed>
 8007682:	e707      	b.n	8007494 <HAL_GPIO_Init+0xc8>
 8007684:	2003      	movs	r0, #3
 8007686:	fa00 f202 	lsl.w	r2, r0, r2
 800768a:	4311      	orrs	r1, r2
 800768c:	e7a9      	b.n	80075e2 <HAL_GPIO_Init+0x216>
 800768e:	2004      	movs	r0, #4
 8007690:	fa00 f202 	lsl.w	r2, r0, r2
 8007694:	4311      	orrs	r1, r2
 8007696:	e7a4      	b.n	80075e2 <HAL_GPIO_Init+0x216>
 8007698:	2007      	movs	r0, #7
 800769a:	fa00 f202 	lsl.w	r2, r0, r2
 800769e:	4311      	orrs	r1, r2
 80076a0:	e79f      	b.n	80075e2 <HAL_GPIO_Init+0x216>
 80076a2:	2005      	movs	r0, #5
 80076a4:	fa00 f202 	lsl.w	r2, r0, r2
 80076a8:	4311      	orrs	r1, r2
 80076aa:	e79a      	b.n	80075e2 <HAL_GPIO_Init+0x216>
 80076ac:	2006      	movs	r0, #6
 80076ae:	fa00 f202 	lsl.w	r2, r0, r2
 80076b2:	4311      	orrs	r1, r2
 80076b4:	e795      	b.n	80075e2 <HAL_GPIO_Init+0x216>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80076b6:	21b3      	movs	r1, #179	; 0xb3
 80076b8:	4807      	ldr	r0, [pc, #28]	; (80076d8 <HAL_GPIO_Init+0x30c>)
 80076ba:	f7fa fedd 	bl	8002478 <assert_failed>
 80076be:	e6e4      	b.n	800748a <HAL_GPIO_Init+0xbe>
 80076c0:	2008      	movs	r0, #8
 80076c2:	fa00 f202 	lsl.w	r2, r0, r2
 80076c6:	4311      	orrs	r1, r2
 80076c8:	e78b      	b.n	80075e2 <HAL_GPIO_Init+0x216>
 80076ca:	bf00      	nop
 80076cc:	40020400 	.word	0x40020400
 80076d0:	40020000 	.word	0x40020000
 80076d4:	40020800 	.word	0x40020800
 80076d8:	0802148c 	.word	0x0802148c
 80076dc:	10210000 	.word	0x10210000
 80076e0:	10220000 	.word	0x10220000
 80076e4:	10110000 	.word	0x10110000
 80076e8:	10120000 	.word	0x10120000
 80076ec:	40013800 	.word	0x40013800
 80076f0:	40020c00 	.word	0x40020c00
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40021400 	.word	0x40021400
 80076fc:	40021800 	.word	0x40021800
 8007700:	40021c00 	.word	0x40021c00
 8007704:	40022000 	.word	0x40022000
 8007708:	40022400 	.word	0x40022400
 800770c:	40013c00 	.word	0x40013c00
 8007710:	40023800 	.word	0x40023800

08007714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007718:	460c      	mov	r4, r1
 800771a:	b129      	cbz	r1, 8007728 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800771c:	692b      	ldr	r3, [r5, #16]
 800771e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007720:	bf14      	ite	ne
 8007722:	2001      	movne	r0, #1
 8007724:	2000      	moveq	r0, #0
 8007726:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007728:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <HAL_GPIO_ReadPin+0x20>)
 800772e:	f7fa fea3 	bl	8002478 <assert_failed>
 8007732:	e7f3      	b.n	800771c <HAL_GPIO_ReadPin+0x8>
 8007734:	0802148c 	.word	0x0802148c

08007738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4606      	mov	r6, r0
 800773c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800773e:	460c      	mov	r4, r1
 8007740:	b161      	cbz	r1, 800775c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8007742:	2d01      	cmp	r5, #1
 8007744:	d803      	bhi.n	800774e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8007746:	b905      	cbnz	r5, 800774a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007748:	0424      	lsls	r4, r4, #16
 800774a:	61b4      	str	r4, [r6, #24]
  }
}
 800774c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800774e:	f240 119b 	movw	r1, #411	; 0x19b
 8007752:	4805      	ldr	r0, [pc, #20]	; (8007768 <HAL_GPIO_WritePin+0x30>)
 8007754:	f7fa fe90 	bl	8002478 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007758:	61b4      	str	r4, [r6, #24]
}
 800775a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800775c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <HAL_GPIO_WritePin+0x30>)
 8007762:	f7fa fe89 	bl	8002478 <assert_failed>
 8007766:	e7ec      	b.n	8007742 <HAL_GPIO_WritePin+0xa>
 8007768:	0802148c 	.word	0x0802148c

0800776c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007770:	460c      	mov	r4, r1
 8007772:	b129      	cbz	r1, 8007780 <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007774:	6943      	ldr	r3, [r0, #20]
 8007776:	ea31 0303 	bics.w	r3, r1, r3
 800777a:	d007      	beq.n	800778c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800777c:	61a9      	str	r1, [r5, #24]
  }
}
 800777e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007780:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8007784:	4803      	ldr	r0, [pc, #12]	; (8007794 <HAL_GPIO_TogglePin+0x28>)
 8007786:	f7fa fe77 	bl	8002478 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800778a:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800778c:	0424      	lsls	r4, r4, #16
 800778e:	61ac      	str	r4, [r5, #24]
}
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	0802148c 	.word	0x0802148c

08007798 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop

0800779c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800779c:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800779e:	6951      	ldr	r1, [r2, #20]
 80077a0:	4201      	tst	r1, r0
 80077a2:	d100      	bne.n	80077a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80077a4:	4770      	bx	lr
{
 80077a6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077a8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077aa:	f7ff fff5 	bl	8007798 <HAL_GPIO_EXTI_Callback>
}
 80077ae:	bd08      	pop	{r3, pc}
 80077b0:	40013c00 	.word	0x40013c00

080077b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80077b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b8:	4680      	mov	r8, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80077ba:	4d25      	ldr	r5, [pc, #148]	; (8007850 <I2C_TransferConfig+0x9c>)
 80077bc:	4825      	ldr	r0, [pc, #148]	; (8007854 <I2C_TransferConfig+0xa0>)
{
 80077be:	460e      	mov	r6, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80077c0:	f8d8 1000 	ldr.w	r1, [r8]
{
 80077c4:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80077c6:	4a24      	ldr	r2, [pc, #144]	; (8007858 <I2C_TransferConfig+0xa4>)
{
 80077c8:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80077ca:	4281      	cmp	r1, r0
 80077cc:	bf18      	it	ne
 80077ce:	42a9      	cmpne	r1, r5
{
 80077d0:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80077d2:	bf14      	ite	ne
 80077d4:	2001      	movne	r0, #1
 80077d6:	2000      	moveq	r0, #0
 80077d8:	4291      	cmp	r1, r2
 80077da:	bf0c      	ite	eq
 80077dc:	2000      	moveq	r0, #0
 80077de:	f000 0001 	andne.w	r0, r0, #1
 80077e2:	b110      	cbz	r0, 80077ea <I2C_TransferConfig+0x36>
 80077e4:	4b1d      	ldr	r3, [pc, #116]	; (800785c <I2C_TransferConfig+0xa8>)
 80077e6:	4299      	cmp	r1, r3
 80077e8:	d126      	bne.n	8007838 <I2C_TransferConfig+0x84>
  assert_param(IS_TRANSFER_MODE(Mode));
 80077ea:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80077ee:	d002      	beq.n	80077f6 <I2C_TransferConfig+0x42>
 80077f0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80077f4:	d126      	bne.n	8007844 <I2C_TransferConfig+0x90>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80077f6:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <I2C_TransferConfig+0xac>)
 80077f8:	429d      	cmp	r5, r3
 80077fa:	d00a      	beq.n	8007812 <I2C_TransferConfig+0x5e>
 80077fc:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 8007800:	4a18      	ldr	r2, [pc, #96]	; (8007864 <I2C_TransferConfig+0xb0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d005      	beq.n	8007812 <I2C_TransferConfig+0x5e>
 8007806:	b125      	cbz	r5, 8007812 <I2C_TransferConfig+0x5e>
 8007808:	f641 01c3 	movw	r1, #6339	; 0x18c3
 800780c:	4816      	ldr	r0, [pc, #88]	; (8007868 <I2C_TransferConfig+0xb4>)
 800780e:	f7fa fe33 	bl	8002478 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007812:	f8d8 1000 	ldr.w	r1, [r8]
 8007816:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800781a:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800781e:	4a13      	ldr	r2, [pc, #76]	; (800786c <I2C_TransferConfig+0xb8>)
 8007820:	431c      	orrs	r4, r3
 8007822:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
 8007826:	684d      	ldr	r5, [r1, #4]
 8007828:	ea44 0307 	orr.w	r3, r4, r7
 800782c:	ea25 0502 	bic.w	r5, r5, r2
 8007830:	432b      	orrs	r3, r5
 8007832:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007838:	f641 01c1 	movw	r1, #6337	; 0x18c1
 800783c:	480a      	ldr	r0, [pc, #40]	; (8007868 <I2C_TransferConfig+0xb4>)
 800783e:	f7fa fe1b 	bl	8002478 <assert_failed>
 8007842:	e7d2      	b.n	80077ea <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007844:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8007848:	4807      	ldr	r0, [pc, #28]	; (8007868 <I2C_TransferConfig+0xb4>)
 800784a:	f7fa fe15 	bl	8002478 <assert_failed>
 800784e:	e7d2      	b.n	80077f6 <I2C_TransferConfig+0x42>
 8007850:	40005800 	.word	0x40005800
 8007854:	40005400 	.word	0x40005400
 8007858:	40005c00 	.word	0x40005c00
 800785c:	40006000 	.word	0x40006000
 8007860:	80004000 	.word	0x80004000
 8007864:	80002000 	.word	0x80002000
 8007868:	080214c8 	.word	0x080214c8
 800786c:	03ff63ff 	.word	0x03ff63ff

08007870 <I2C_IsAcknowledgeFailed.part.1>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4605      	mov	r5, r0
 8007874:	460c      	mov	r4, r1
 8007876:	4616      	mov	r6, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007878:	6828      	ldr	r0, [r5, #0]
 800787a:	e001      	b.n	8007880 <I2C_IsAcknowledgeFailed.part.1+0x10>
      if (Timeout != HAL_MAX_DELAY)
 800787c:	1c63      	adds	r3, r4, #1
 800787e:	d120      	bne.n	80078c2 <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	0699      	lsls	r1, r3, #26
 8007884:	d5fa      	bpl.n	800787c <I2C_IsAcknowledgeFailed.part.1+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007886:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007888:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788a:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800788c:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800788e:	6983      	ldr	r3, [r0, #24]
 8007890:	079a      	lsls	r2, r3, #30
 8007892:	d501      	bpl.n	8007898 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8007894:	2300      	movs	r3, #0
 8007896:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007898:	6983      	ldr	r3, [r0, #24]
 800789a:	07db      	lsls	r3, r3, #31
 800789c:	d524      	bpl.n	80078e8 <I2C_IsAcknowledgeFailed.part.1+0x78>
    I2C_RESET_CR2(hi2c);
 800789e:	6843      	ldr	r3, [r0, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a0:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 80078a2:	4c14      	ldr	r4, [pc, #80]	; (80078f4 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 80078a4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80078a6:	4023      	ands	r3, r4
 80078a8:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80078ac:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078b0:	f043 0304 	orr.w	r3, r3, #4
 80078b4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078b6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80078be:	2001      	movs	r0, #1
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fc ff9b 	bl	80047fc <HAL_GetTick>
 80078c6:	1b80      	subs	r0, r0, r6
 80078c8:	4284      	cmp	r4, r0
 80078ca:	d301      	bcc.n	80078d0 <I2C_IsAcknowledgeFailed.part.1+0x60>
 80078cc:	2c00      	cmp	r4, #0
 80078ce:	d1d3      	bne.n	8007878 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078d2:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d4:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078d6:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 80078d8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078dc:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078de:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 80078e6:	e7ea      	b.n	80078be <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078e8:	6983      	ldr	r3, [r0, #24]
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6183      	str	r3, [r0, #24]
 80078f0:	e7d5      	b.n	800789e <I2C_IsAcknowledgeFailed.part.1+0x2e>
 80078f2:	bf00      	nop
 80078f4:	fe00e800 	.word	0xfe00e800

080078f8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	4605      	mov	r5, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007900:	e001      	b.n	8007906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8007902:	1c61      	adds	r1, r4, #1
 8007904:	d111      	bne.n	800792a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	0792      	lsls	r2, r2, #30
 800790c:	d40b      	bmi.n	8007926 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	06d8      	lsls	r0, r3, #27
 8007912:	d5f6      	bpl.n	8007902 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8007914:	4632      	mov	r2, r6
 8007916:	4621      	mov	r1, r4
 8007918:	4628      	mov	r0, r5
 800791a:	f7ff ffa9 	bl	8007870 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800791e:	2800      	cmp	r0, #0
 8007920:	d0ef      	beq.n	8007902 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8007922:	2001      	movs	r0, #1
}
 8007924:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007926:	2000      	movs	r0, #0
}
 8007928:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792a:	f7fc ff67 	bl	80047fc <HAL_GetTick>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	42a0      	cmp	r0, r4
 8007932:	d801      	bhi.n	8007938 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007934:	2c00      	cmp	r4, #0
 8007936:	d1e6      	bne.n	8007906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007938:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800793a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800793c:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800793e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007940:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007942:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007946:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007948:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800794c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	bf00      	nop

08007954 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	4605      	mov	r5, r0
 8007958:	460c      	mov	r4, r1
 800795a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800795c:	e00b      	b.n	8007976 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	06db      	lsls	r3, r3, #27
 8007962:	d502      	bpl.n	800796a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8007964:	f7ff ff84 	bl	8007870 <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007968:	b9d8      	cbnz	r0, 80079a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796a:	f7fc ff47 	bl	80047fc <HAL_GetTick>
 800796e:	1b80      	subs	r0, r0, r6
 8007970:	42a0      	cmp	r0, r4
 8007972:	d809      	bhi.n	8007988 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8007974:	b144      	cbz	r4, 8007988 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	4632      	mov	r2, r6
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	699f      	ldr	r7, [r3, #24]
 8007980:	06bf      	lsls	r7, r7, #26
 8007982:	d5ec      	bpl.n	800795e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8007984:	2000      	movs	r0, #0
}
 8007986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007988:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800798a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800798c:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800798e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007990:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8007992:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007996:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007998:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800799c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80079a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80079a2:	2001      	movs	r0, #1
}
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a6:	bf00      	nop

080079a8 <I2C_WaitOnFlagUntilTimeout>:
{
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4680      	mov	r8, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	4616      	mov	r6, r2
 80079b2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079b4:	f8d8 4000 	ldr.w	r4, [r8]
 80079b8:	e001      	b.n	80079be <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	1c6b      	adds	r3, r5, #1
 80079bc:	d10a      	bne.n	80079d4 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079be:	69a0      	ldr	r0, [r4, #24]
 80079c0:	ea37 0300 	bics.w	r3, r7, r0
 80079c4:	bf0c      	ite	eq
 80079c6:	2001      	moveq	r0, #1
 80079c8:	2000      	movne	r0, #0
 80079ca:	42b0      	cmp	r0, r6
 80079cc:	d0f5      	beq.n	80079ba <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 80079ce:	2000      	movs	r0, #0
}
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d4:	f7fc ff12 	bl	80047fc <HAL_GetTick>
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	1ac0      	subs	r0, r0, r3
 80079dc:	42a8      	cmp	r0, r5
 80079de:	d801      	bhi.n	80079e4 <I2C_WaitOnFlagUntilTimeout+0x3c>
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	d1e7      	bne.n	80079b4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079e8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ea:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80079ec:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079ee:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80079f0:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079f8:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 8007a00:	e7e6      	b.n	80079d0 <I2C_WaitOnFlagUntilTimeout+0x28>
 8007a02:	bf00      	nop

08007a04 <I2C_RequestMemoryRead>:
{
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	461d      	mov	r5, r3
 8007a08:	b082      	sub	sp, #8
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <I2C_RequestMemoryRead+0x64>)
{
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a10:	b2ea      	uxtb	r2, r5
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	f7ff fecd 	bl	80077b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007a20:	f7ff ff6a 	bl	80078f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a24:	b9c8      	cbnz	r0, 8007a5a <I2C_RequestMemoryRead+0x56>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a26:	2d01      	cmp	r5, #1
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	d10e      	bne.n	8007a4a <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a2c:	b2f6      	uxtb	r6, r6
 8007a2e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	4620      	mov	r0, r4
 8007a34:	2200      	movs	r2, #0
 8007a36:	2140      	movs	r1, #64	; 0x40
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	f7ff ffb4 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007a40:	3000      	adds	r0, #0
 8007a42:	bf18      	it	ne
 8007a44:	2001      	movne	r0, #1
}
 8007a46:	b002      	add	sp, #8
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a4a:	0a30      	lsrs	r0, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a4c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a50:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff ff50 	bl	80078f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a58:	b110      	cbz	r0, 8007a60 <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 8007a5a:	2001      	movs	r0, #1
}
 8007a5c:	b002      	add	sp, #8
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a60:	b2f6      	uxtb	r6, r6
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	629e      	str	r6, [r3, #40]	; 0x28
 8007a66:	e7e3      	b.n	8007a30 <I2C_RequestMemoryRead+0x2c>
 8007a68:	80002000 	.word	0x80002000

08007a6c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f000 80c8 	beq.w	8007c02 <HAL_I2C_Init+0x196>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007a72:	6802      	ldr	r2, [r0, #0]
 8007a74:	4969      	ldr	r1, [pc, #420]	; (8007c1c <HAL_I2C_Init+0x1b0>)
{
 8007a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007a78:	4b69      	ldr	r3, [pc, #420]	; (8007c20 <HAL_I2C_Init+0x1b4>)
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4869      	ldr	r0, [pc, #420]	; (8007c24 <HAL_I2C_Init+0x1b8>)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	bf18      	it	ne
 8007a82:	4282      	cmpne	r2, r0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	428a      	cmp	r2, r1
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	f003 0301 	andne.w	r3, r3, #1
 8007a94:	b11b      	cbz	r3, 8007a9e <HAL_I2C_Init+0x32>
 8007a96:	4b64      	ldr	r3, [pc, #400]	; (8007c28 <HAL_I2C_Init+0x1bc>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	f040 80b4 	bne.w	8007c06 <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007a9e:	68a3      	ldr	r3, [r4, #8]
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa4:	d268      	bcs.n	8007b78 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007aa6:	68e3      	ldr	r3, [r4, #12]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d856      	bhi.n	8007b5c <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8007ab4:	f040 809b 	bne.w	8007bee <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007ab8:	6963      	ldr	r3, [r4, #20]
 8007aba:	2bff      	cmp	r3, #255	; 0xff
 8007abc:	f200 808d 	bhi.w	8007bda <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007ac0:	69a3      	ldr	r3, [r4, #24]
 8007ac2:	2b07      	cmp	r3, #7
 8007ac4:	d87e      	bhi.n	8007bc4 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007ac6:	69e3      	ldr	r3, [r4, #28]
 8007ac8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8007acc:	d170      	bne.n	8007bb0 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007ace:	6a23      	ldr	r3, [r4, #32]
 8007ad0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8007ad4:	d160      	bne.n	8007b98 <HAL_I2C_Init+0x12c>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ad6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007ada:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d054      	beq.n	8007b8c <HAL_I2C_Init+0x120>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae2:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ae4:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ae6:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007aee:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8007af0:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007af2:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8007af6:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8007af8:	f020 0001 	bic.w	r0, r0, #1
 8007afc:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007afe:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b00:	6899      	ldr	r1, [r3, #8]
 8007b02:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007b06:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b08:	d032      	beq.n	8007b70 <HAL_I2C_Init+0x104>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b0e:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b10:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b12:	d102      	bne.n	8007b1a <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b18:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b1a:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1c:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b1e:	4843      	ldr	r0, [pc, #268]	; (8007c2c <HAL_I2C_Init+0x1c0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8007b20:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b22:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b24:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b26:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b2a:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b2c:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b2e:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b30:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b32:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b36:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b38:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b3c:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b3e:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8007b40:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b42:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b44:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b4e:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b50:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b54:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b56:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007b5c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007b60:	4833      	ldr	r0, [pc, #204]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007b62:	f7fa fc89 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8007b6c:	d0a4      	beq.n	8007ab8 <HAL_I2C_Init+0x4c>
 8007b6e:	e03e      	b.n	8007bee <HAL_I2C_Init+0x182>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b74:	609a      	str	r2, [r3, #8]
 8007b76:	e7d0      	b.n	8007b1a <HAL_I2C_Init+0xae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007b78:	f240 11df 	movw	r1, #479	; 0x1df
 8007b7c:	482c      	ldr	r0, [pc, #176]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007b7e:	f7fa fc7b 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d991      	bls.n	8007aae <HAL_I2C_Init+0x42>
 8007b8a:	e7e7      	b.n	8007b5c <HAL_I2C_Init+0xf0>
    hi2c->Lock = HAL_UNLOCKED;
 8007b8c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7fb fb93 	bl	80032bc <HAL_I2C_MspInit>
 8007b96:	e7a4      	b.n	8007ae2 <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007b98:	f240 11e5 	movw	r1, #485	; 0x1e5
 8007b9c:	4824      	ldr	r0, [pc, #144]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007b9e:	f7fa fc6b 	bl	8002478 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ba2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d199      	bne.n	8007ae2 <HAL_I2C_Init+0x76>
 8007bae:	e7ed      	b.n	8007b8c <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007bb0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8007bb4:	481e      	ldr	r0, [pc, #120]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007bb6:	f7fa fc5f 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007bba:	6a23      	ldr	r3, [r4, #32]
 8007bbc:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8007bc0:	d089      	beq.n	8007ad6 <HAL_I2C_Init+0x6a>
 8007bc2:	e7e9      	b.n	8007b98 <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007bc4:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007bc8:	4819      	ldr	r0, [pc, #100]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007bca:	f7fa fc55 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007bce:	69e3      	ldr	r3, [r4, #28]
 8007bd0:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8007bd4:	f43f af7b 	beq.w	8007ace <HAL_I2C_Init+0x62>
 8007bd8:	e7ea      	b.n	8007bb0 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007bda:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007bde:	4814      	ldr	r0, [pc, #80]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007be0:	f7fa fc4a 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8007be4:	69a3      	ldr	r3, [r4, #24]
 8007be6:	2b07      	cmp	r3, #7
 8007be8:	f67f af6d 	bls.w	8007ac6 <HAL_I2C_Init+0x5a>
 8007bec:	e7ea      	b.n	8007bc4 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007bee:	f240 11e1 	movw	r1, #481	; 0x1e1
 8007bf2:	480f      	ldr	r0, [pc, #60]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007bf4:	f7fa fc40 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007bf8:	6963      	ldr	r3, [r4, #20]
 8007bfa:	2bff      	cmp	r3, #255	; 0xff
 8007bfc:	f67f af60 	bls.w	8007ac0 <HAL_I2C_Init+0x54>
 8007c00:	e7eb      	b.n	8007bda <HAL_I2C_Init+0x16e>
    return HAL_ERROR;
 8007c02:	2001      	movs	r0, #1
}
 8007c04:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007c06:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c0a:	4809      	ldr	r0, [pc, #36]	; (8007c30 <HAL_I2C_Init+0x1c4>)
 8007c0c:	f7fa fc34 	bl	8002478 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c16:	f4ff af46 	bcc.w	8007aa6 <HAL_I2C_Init+0x3a>
 8007c1a:	e7ad      	b.n	8007b78 <HAL_I2C_Init+0x10c>
 8007c1c:	40005c00 	.word	0x40005c00
 8007c20:	40005400 	.word	0x40005400
 8007c24:	40005800 	.word	0x40005800
 8007c28:	40006000 	.word	0x40006000
 8007c2c:	02008000 	.word	0x02008000
 8007c30:	080214c8 	.word	0x080214c8

08007c34 <HAL_I2C_Master_Transmit>:
{
 8007c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c38:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8007c3c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c3e:	2c20      	cmp	r4, #32
 8007c40:	d169      	bne.n	8007d16 <HAL_I2C_Master_Transmit+0xe2>
    __HAL_LOCK(hi2c);
 8007c42:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8007c46:	2c01      	cmp	r4, #1
 8007c48:	d065      	beq.n	8007d16 <HAL_I2C_Master_Transmit+0xe2>
 8007c4a:	f04f 0901 	mov.w	r9, #1
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4698      	mov	r8, r3
 8007c52:	4615      	mov	r5, r2
 8007c54:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8007c58:	460f      	mov	r7, r1
    tickstart = HAL_GetTick();
 8007c5a:	f7fc fdcf 	bl	80047fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c5e:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 8007c60:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c62:	9000      	str	r0, [sp, #0]
 8007c64:	2319      	movs	r3, #25
 8007c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7ff fe9c 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d154      	bne.n	8007d1e <HAL_I2C_Master_Transmit+0xea>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c74:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c76:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8007c78:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c7a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c82:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007c84:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c8a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c8c:	2bff      	cmp	r3, #255	; 0xff
 8007c8e:	d954      	bls.n	8007d3a <HAL_I2C_Master_Transmit+0x106>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c90:	4839      	ldr	r0, [pc, #228]	; (8007d78 <HAL_I2C_Master_Transmit+0x144>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c92:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c98:	4639      	mov	r1, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c9c:	9000      	str	r0, [sp, #0]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff fd88 	bl	80077b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007caa:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d050      	beq.n	8007d54 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb2:	f7ff fe21 	bl	80078f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d131      	bne.n	8007d1e <HAL_I2C_Master_Transmit+0xea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cbc:	6822      	ldr	r2, [r4, #0]
 8007cbe:	f811 5b01 	ldrb.w	r5, [r1], #1
      hi2c->XferSize--;
 8007cc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cc4:	6295      	str	r5, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8007cc6:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007cc8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8007cca:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007ccc:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8007cce:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8007cd0:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8007cd2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007cd4:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cd6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8007cd8:	b289      	uxth	r1, r1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e2      	bne.n	8007ca4 <HAL_I2C_Master_Transmit+0x70>
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d0e0      	beq.n	8007ca4 <HAL_I2C_Master_Transmit+0x70>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	9600      	str	r6, [sp, #0]
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7ff fe5c 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cf4:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cfa:	4639      	mov	r1, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cfc:	b978      	cbnz	r0, 8007d1e <HAL_I2C_Master_Transmit+0xea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cfe:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d02:	4662      	mov	r2, ip
 8007d04:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d06:	45e6      	cmp	lr, ip
 8007d08:	d90d      	bls.n	8007d26 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d0a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d0e:	9500      	str	r5, [sp, #0]
 8007d10:	f7ff fd50 	bl	80077b4 <I2C_TransferConfig>
 8007d14:	e7c6      	b.n	8007ca4 <HAL_I2C_Master_Transmit+0x70>
    return HAL_BUSY;
 8007d16:	2002      	movs	r0, #2
}
 8007d18:	b003      	add	sp, #12
 8007d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8007d1e:	2001      	movs	r0, #1
}
 8007d20:	b003      	add	sp, #12
 8007d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8007d26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d2c:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007d2e:	b292      	uxth	r2, r2
 8007d30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	f7ff fd3e 	bl	80077b4 <I2C_TransferConfig>
 8007d38:	e7b4      	b.n	8007ca4 <HAL_I2C_Master_Transmit+0x70>
      hi2c->XferSize = hi2c->XferCount;
 8007d3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d40:	4d0d      	ldr	r5, [pc, #52]	; (8007d78 <HAL_I2C_Master_Transmit+0x144>)
 8007d42:	4639      	mov	r1, r7
      hi2c->XferSize = hi2c->XferCount;
 8007d44:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007d46:	4620      	mov	r0, r4
 8007d48:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007d4a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	f7ff fd31 	bl	80077b4 <I2C_TransferConfig>
 8007d52:	e7a7      	b.n	8007ca4 <HAL_I2C_Master_Transmit+0x70>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d54:	f7ff fdfe 	bl	8007954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1e0      	bne.n	8007d1e <HAL_I2C_Master_Transmit+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007d60:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <HAL_I2C_Master_Transmit+0x148>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d62:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	402a      	ands	r2, r5
 8007d68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d6a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007d6e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007d76:	e7cf      	b.n	8007d18 <HAL_I2C_Master_Transmit+0xe4>
 8007d78:	80002000 	.word	0x80002000
 8007d7c:	fe00e800 	.word	0xfe00e800

08007d80 <HAL_I2C_Mem_Read>:
{
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007d86:	3b01      	subs	r3, #1
{
 8007d88:	b083      	sub	sp, #12
 8007d8a:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007d8c:	2b01      	cmp	r3, #1
{
 8007d8e:	460e      	mov	r6, r1
 8007d90:	4692      	mov	sl, r2
 8007d92:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007d96:	d904      	bls.n	8007da2 <HAL_I2C_Mem_Read+0x22>
 8007d98:	f640 1174 	movw	r1, #2420	; 0x974
 8007d9c:	4862      	ldr	r0, [pc, #392]	; (8007f28 <HAL_I2C_Mem_Read+0x1a8>)
 8007d9e:	f7fa fb6b 	bl	8002478 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007da2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d11c      	bne.n	8007de4 <HAL_I2C_Mem_Read+0x64>
    if ((pData == NULL) || (Size == 0U))
 8007daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dac:	b1f3      	cbz	r3, 8007dec <HAL_I2C_Mem_Read+0x6c>
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	d01b      	beq.n	8007dec <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 8007db4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d013      	beq.n	8007de4 <HAL_I2C_Mem_Read+0x64>
 8007dbc:	2501      	movs	r5, #1
 8007dbe:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007dc2:	f7fc fd1b 	bl	80047fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007dca:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dcc:	2319      	movs	r3, #25
 8007dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f7ff fde8 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
 8007dd8:	4683      	mov	fp, r0
 8007dda:	b170      	cbz	r0, 8007dfa <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8007ddc:	2001      	movs	r0, #1
}
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8007de4:	2002      	movs	r0, #2
}
 8007de6:	b003      	add	sp, #12
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dec:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8007df0:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007df2:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007df4:	b003      	add	sp, #12
 8007df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dfa:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 8007dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dfe:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e00:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8007e04:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e06:	4652      	mov	r2, sl
    hi2c->XferISR   = NULL;
 8007e08:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e0c:	4643      	mov	r3, r8
 8007e0e:	9100      	str	r1, [sp, #0]
 8007e10:	4631      	mov	r1, r6
 8007e12:	9701      	str	r7, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e14:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e1c:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e1e:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8007e22:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e26:	f7ff fded 	bl	8007a04 <I2C_RequestMemoryRead>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d14a      	bne.n	8007ec4 <HAL_I2C_Mem_Read+0x144>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007e30:	2bff      	cmp	r3, #255	; 0xff
 8007e32:	d955      	bls.n	8007ee0 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e34:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e36:	483d      	ldr	r0, [pc, #244]	; (8007f2c <HAL_I2C_Mem_Read+0x1ac>)
 8007e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e3c:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e3e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e40:	9000      	str	r0, [sp, #0]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f7ff fcb6 	bl	80077b4 <I2C_TransferConfig>
 8007e48:	e003      	b.n	8007e52 <HAL_I2C_Mem_Read+0xd2>
    while (hi2c->XferCount > 0U);
 8007e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d053      	beq.n	8007efa <HAL_I2C_Mem_Read+0x17a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007e52:	9700      	str	r7, [sp, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e58:	2104      	movs	r1, #4
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff fda4 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1bb      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e6a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007e6c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007e6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007e70:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8007e72:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007e74:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8007e76:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8007e78:	3501      	adds	r5, #1
      hi2c->XferSize--;
 8007e7a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8007e7c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e7e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007e80:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e82:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8007e84:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1df      	bne.n	8007e4a <HAL_I2C_Mem_Read+0xca>
 8007e8a:	2900      	cmp	r1, #0
 8007e8c:	d0dd      	beq.n	8007e4a <HAL_I2C_Mem_Read+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e8e:	4602      	mov	r2, r0
 8007e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	9700      	str	r7, [sp, #0]
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff fd86 	bl	80079a8 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ea0:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ea6:	4631      	mov	r1, r6
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d197      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eac:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007eb0:	4662      	mov	r2, ip
 8007eb2:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eb4:	45e6      	cmp	lr, ip
 8007eb6:	d909      	bls.n	8007ecc <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eb8:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ebc:	9500      	str	r5, [sp, #0]
 8007ebe:	f7ff fc79 	bl	80077b4 <I2C_TransferConfig>
 8007ec2:	e7c2      	b.n	8007e4a <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 8007ec4:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e78c      	b.n	8007de6 <HAL_I2C_Mem_Read+0x66>
          hi2c->XferSize = hi2c->XferCount;
 8007ecc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ed2:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007ed4:	b292      	uxth	r2, r2
 8007ed6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	f7ff fc6b 	bl	80077b4 <I2C_TransferConfig>
 8007ede:	e7b4      	b.n	8007e4a <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8007ee0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ee6:	4d11      	ldr	r5, [pc, #68]	; (8007f2c <HAL_I2C_Mem_Read+0x1ac>)
 8007ee8:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 8007eea:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007eec:	4620      	mov	r0, r4
 8007eee:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007ef0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	f7ff fc5e 	bl	80077b4 <I2C_TransferConfig>
 8007ef8:	e7ab      	b.n	8007e52 <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007efa:	463a      	mov	r2, r7
 8007efc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7ff fd28 	bl	8007954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f47f af69 	bne.w	8007ddc <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8007f0e:	4d08      	ldr	r5, [pc, #32]	; (8007f30 <HAL_I2C_Mem_Read+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f10:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	402a      	ands	r2, r5
 8007f16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007f1c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f20:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007f24:	e75f      	b.n	8007de6 <HAL_I2C_Mem_Read+0x66>
 8007f26:	bf00      	nop
 8007f28:	080214c8 	.word	0x080214c8
 8007f2c:	80002400 	.word	0x80002400
 8007f30:	fe00e800 	.word	0xfe00e800

08007f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007f38:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8007f3a:	4823      	ldr	r0, [pc, #140]	; (8007fc8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8007f3c:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	4922      	ldr	r1, [pc, #136]	; (8007fcc <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 8007f42:	429a      	cmp	r2, r3
 8007f44:	bf18      	it	ne
 8007f46:	4282      	cmpne	r2, r0
 8007f48:	bf14      	ite	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	2300      	moveq	r3, #0
 8007f4e:	428a      	cmp	r2, r1
 8007f50:	bf0c      	ite	eq
 8007f52:	2300      	moveq	r3, #0
 8007f54:	f003 0301 	andne.w	r3, r3, #1
 8007f58:	b113      	cbz	r3, 8007f60 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007f5a:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d12c      	bne.n	8007fba <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007f60:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8007f64:	d124      	bne.n	8007fb0 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f66:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d11d      	bne.n	8007fac <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f70:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007f74:	2a01      	cmp	r2, #1
 8007f76:	d019      	beq.n	8007fac <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f78:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f7a:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f7c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007f82:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8007f84:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8007f86:	f021 0101 	bic.w	r1, r1, #1
 8007f8a:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f8c:	6811      	ldr	r1, [r2, #0]
 8007f8e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007f92:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f94:	6811      	ldr	r1, [r2, #0]
 8007f96:	430d      	orrs	r5, r1
 8007f98:	6015      	str	r5, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007f9a:	6811      	ldr	r1, [r2, #0]
 8007f9c:	f041 0101 	orr.w	r1, r1, #1
 8007fa0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007fa2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007fa6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007fac:	2002      	movs	r0, #2
}
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007fb0:	2160      	movs	r1, #96	; 0x60
 8007fb2:	4808      	ldr	r0, [pc, #32]	; (8007fd4 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8007fb4:	f7fa fa60 	bl	8002478 <assert_failed>
 8007fb8:	e7d5      	b.n	8007f66 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007fba:	215f      	movs	r1, #95	; 0x5f
 8007fbc:	4805      	ldr	r0, [pc, #20]	; (8007fd4 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8007fbe:	f7fa fa5b 	bl	8002478 <assert_failed>
 8007fc2:	e7cd      	b.n	8007f60 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007fc4:	40005400 	.word	0x40005400
 8007fc8:	40005800 	.word	0x40005800
 8007fcc:	40005c00 	.word	0x40005c00
 8007fd0:	40006000 	.word	0x40006000
 8007fd4:	08021500 	.word	0x08021500

08007fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007fdc:	4b21      	ldr	r3, [pc, #132]	; (8008064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 8007fde:	4822      	ldr	r0, [pc, #136]	; (8008068 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 8007fe0:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	4921      	ldr	r1, [pc, #132]	; (800806c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	bf18      	it	ne
 8007fea:	4282      	cmpne	r2, r0
 8007fec:	bf14      	ite	ne
 8007fee:	2301      	movne	r3, #1
 8007ff0:	2300      	moveq	r3, #0
 8007ff2:	428a      	cmp	r2, r1
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2300      	moveq	r3, #0
 8007ff8:	f003 0301 	andne.w	r3, r3, #1
 8007ffc:	b113      	cbz	r3, 8008004 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8008000:	429a      	cmp	r2, r3
 8008002:	d12a      	bne.n	800805a <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008004:	2d0f      	cmp	r5, #15
 8008006:	d823      	bhi.n	8008050 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008008:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b20      	cmp	r3, #32
 8008010:	d11c      	bne.n	800804c <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008012:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008016:	2a01      	cmp	r2, #1
 8008018:	d018      	beq.n	800804c <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800801a:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800801c:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800801e:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008020:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008024:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8008026:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8008028:	f021 0101 	bic.w	r1, r1, #1
 800802c:	6011      	str	r1, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800802e:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8008030:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8008034:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8008038:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800803a:	6811      	ldr	r1, [r2, #0]
 800803c:	f041 0101 	orr.w	r1, r1, #1
 8008040:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008046:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800804a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800804c:	2002      	movs	r0, #2
}
 800804e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008050:	218e      	movs	r1, #142	; 0x8e
 8008052:	4808      	ldr	r0, [pc, #32]	; (8008074 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8008054:	f7fa fa10 	bl	8002478 <assert_failed>
 8008058:	e7d6      	b.n	8008008 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800805a:	218d      	movs	r1, #141	; 0x8d
 800805c:	4805      	ldr	r0, [pc, #20]	; (8008074 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800805e:	f7fa fa0b 	bl	8002478 <assert_failed>
 8008062:	e7cf      	b.n	8008004 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8008064:	40005400 	.word	0x40005400
 8008068:	40005800 	.word	0x40005800
 800806c:	40005c00 	.word	0x40005c00
 8008070:	40006000 	.word	0x40006000
 8008074:	08021500 	.word	0x08021500

08008078 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008078:	2800      	cmp	r0, #0
 800807a:	d04b      	beq.n	8008114 <HAL_IWDG_Init+0x9c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800807c:	6802      	ldr	r2, [r0, #0]
{
 800807e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8008080:	4b27      	ldr	r3, [pc, #156]	; (8008120 <HAL_IWDG_Init+0xa8>)
 8008082:	4604      	mov	r4, r0
 8008084:	429a      	cmp	r2, r3
 8008086:	d003      	beq.n	8008090 <HAL_IWDG_Init+0x18>
 8008088:	21a5      	movs	r1, #165	; 0xa5
 800808a:	4826      	ldr	r0, [pc, #152]	; (8008124 <HAL_IWDG_Init+0xac>)
 800808c:	f7fa f9f4 	bl	8002478 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	2b06      	cmp	r3, #6
 8008094:	d833      	bhi.n	80080fe <HAL_IWDG_Init+0x86>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809c:	d226      	bcs.n	80080ec <HAL_IWDG_Init+0x74>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a4:	d21d      	bcs.n	80080e2 <HAL_IWDG_Init+0x6a>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	f64c 45cc 	movw	r5, #52428	; 0xcccc

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80080ac:	f245 5055 	movw	r0, #21845	; 0x5555

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80080b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  __HAL_IWDG_START(hiwdg);
 80080b4:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80080b6:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80080b8:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80080ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80080bc:	f7fc fb9e 	bl	80047fc <HAL_GetTick>
 80080c0:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80080c2:	e004      	b.n	80080ce <HAL_IWDG_Init+0x56>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80080c4:	f7fc fb9a 	bl	80047fc <HAL_GetTick>
 80080c8:	1b40      	subs	r0, r0, r5
 80080ca:	2830      	cmp	r0, #48	; 0x30
 80080cc:	d820      	bhi.n	8008110 <HAL_IWDG_Init+0x98>
  while (hiwdg->Instance->SR != 0x00u)
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	68d8      	ldr	r0, [r3, #12]
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d1f6      	bne.n	80080c4 <HAL_IWDG_Init+0x4c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80080d6:	68e2      	ldr	r2, [r4, #12]
 80080d8:	6919      	ldr	r1, [r3, #16]
 80080da:	4291      	cmp	r1, r2
 80080dc:	d01c      	beq.n	8008118 <HAL_IWDG_Init+0xa0>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80080de:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80080e2:	21a8      	movs	r1, #168	; 0xa8
 80080e4:	480f      	ldr	r0, [pc, #60]	; (8008124 <HAL_IWDG_Init+0xac>)
 80080e6:	f7fa f9c7 	bl	8002478 <assert_failed>
 80080ea:	e7dc      	b.n	80080a6 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80080ec:	21a7      	movs	r1, #167	; 0xa7
 80080ee:	480d      	ldr	r0, [pc, #52]	; (8008124 <HAL_IWDG_Init+0xac>)
 80080f0:	f7fa f9c2 	bl	8002478 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80080f4:	68e3      	ldr	r3, [r4, #12]
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d3d4      	bcc.n	80080a6 <HAL_IWDG_Init+0x2e>
 80080fc:	e7f1      	b.n	80080e2 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80080fe:	21a6      	movs	r1, #166	; 0xa6
 8008100:	4808      	ldr	r0, [pc, #32]	; (8008124 <HAL_IWDG_Init+0xac>)
 8008102:	f7fa f9b9 	bl	8002478 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d3c7      	bcc.n	800809e <HAL_IWDG_Init+0x26>
 800810e:	e7ed      	b.n	80080ec <HAL_IWDG_Init+0x74>
      return HAL_TIMEOUT;
 8008110:	2003      	movs	r0, #3
}
 8008112:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008114:	2001      	movs	r0, #1
}
 8008116:	4770      	bx	lr
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008118:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	40003000 	.word	0x40003000
 8008124:	0802153c 	.word	0x0802153c

08008128 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008128:	6803      	ldr	r3, [r0, #0]
 800812a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800812e:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008130:	601a      	str	r2, [r3, #0]
}
 8008132:	4770      	bx	lr

08008134 <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 8008134:	2800      	cmp	r0, #0
 8008136:	d03c      	beq.n	80081b2 <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008138:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <HAL_MDIOS_Init+0x8c>)
 800813a:	6802      	ldr	r2, [r0, #0]
 800813c:	429a      	cmp	r2, r3
{
 800813e:	b570      	push	{r4, r5, r6, lr}
 8008140:	4604      	mov	r4, r0
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008142:	d003      	beq.n	800814c <HAL_MDIOS_Init+0x18>
 8008144:	21c7      	movs	r1, #199	; 0xc7
 8008146:	481f      	ldr	r0, [pc, #124]	; (80081c4 <HAL_MDIOS_Init+0x90>)
 8008148:	f7fa f996 	bl	8002478 <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 800814c:	6863      	ldr	r3, [r4, #4]
 800814e:	2b1f      	cmp	r3, #31
 8008150:	d826      	bhi.n	80081a0 <HAL_MDIOS_Init+0x6c>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008158:	d119      	bne.n	800818e <HAL_MDIOS_Init+0x5a>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 800815a:	7b63      	ldrb	r3, [r4, #13]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d01d      	beq.n	800819c <HAL_MDIOS_Init+0x68>
 8008160:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008162:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 8008164:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008166:	b333      	cbz	r3, 80081b6 <HAL_MDIOS_Init+0x82>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 8008168:	6825      	ldr	r5, [r4, #0]
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 800816a:	2601      	movs	r6, #1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 800816c:	68a3      	ldr	r3, [r4, #8]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 800816e:	2202      	movs	r2, #2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008170:	6861      	ldr	r1, [r4, #4]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8008172:	7322      	strb	r2, [r4, #12]
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008174:	4333      	orrs	r3, r6
  tmpcr = hmdios->Instance->CR;
 8008176:	6828      	ldr	r0, [r5, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <HAL_MDIOS_Init+0x94>)
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 800817a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 800817e:	2100      	movs	r1, #0
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008180:	4002      	ands	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8008182:	4608      	mov	r0, r1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008184:	4313      	orrs	r3, r2
  hmdios->Instance->CR = tmpcr;
 8008186:	602b      	str	r3, [r5, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 8008188:	7326      	strb	r6, [r4, #12]
  __HAL_UNLOCK(hmdios);
 800818a:	7361      	strb	r1, [r4, #13]

}
 800818c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 800818e:	21c9      	movs	r1, #201	; 0xc9
 8008190:	480c      	ldr	r0, [pc, #48]	; (80081c4 <HAL_MDIOS_Init+0x90>)
 8008192:	f7fa f971 	bl	8002478 <assert_failed>
  __HAL_LOCK(hmdios);
 8008196:	7b63      	ldrb	r3, [r4, #13]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d1e1      	bne.n	8008160 <HAL_MDIOS_Init+0x2c>
 800819c:	2002      	movs	r0, #2
}
 800819e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 80081a0:	21c8      	movs	r1, #200	; 0xc8
 80081a2:	4808      	ldr	r0, [pc, #32]	; (80081c4 <HAL_MDIOS_Init+0x90>)
 80081a4:	f7fa f968 	bl	8002478 <assert_failed>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80081ae:	d0d4      	beq.n	800815a <HAL_MDIOS_Init+0x26>
 80081b0:	e7ed      	b.n	800818e <HAL_MDIOS_Init+0x5a>
    return HAL_ERROR;
 80081b2:	2001      	movs	r0, #1
}
 80081b4:	4770      	bx	lr
    HAL_MDIOS_MspInit(hmdios);
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fb f90a 	bl	80033d0 <HAL_MDIOS_MspInit>
 80081bc:	e7d4      	b.n	8008168 <HAL_MDIOS_Init+0x34>
 80081be:	bf00      	nop
 80081c0:	40017800 	.word	0x40017800
 80081c4:	08021578 	.word	0x08021578
 80081c8:	ffffe07e 	.word	0xffffe07e

080081cc <HAL_MDIOS_WriteCpltCallback>:
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <HAL_MDIOS_ReadCpltCallback>:
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <HAL_MDIOS_ErrorCallback>:
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop

080081d8 <HAL_MDIOS_WakeUpCallback>:
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop

080081dc <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 80081dc:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 80081de:	6803      	ldr	r3, [r0, #0]
{
 80081e0:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	0795      	lsls	r5, r2, #30
 80081e6:	d501      	bpl.n	80081ec <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 80081e8:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 80081ea:	bb22      	cbnz	r2, 8008236 <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	0750      	lsls	r0, r2, #29
 80081f0:	d502      	bpl.n	80081f8 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 80081f2:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	d130      	bne.n	800825a <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	0711      	lsls	r1, r2, #28
 80081fc:	d502      	bpl.n	8008204 <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	075a      	lsls	r2, r3, #29
 8008202:	d10b      	bne.n	800821c <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8008204:	4d1e      	ldr	r5, [pc, #120]	; (8008280 <HAL_MDIOS_IRQHandler+0xa4>)
 8008206:	696b      	ldr	r3, [r5, #20]
 8008208:	01db      	lsls	r3, r3, #7
 800820a:	d400      	bmi.n	800820e <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 800820c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff ffe2 	bl	80081d8 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 8008214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008218:	616b      	str	r3, [r5, #20]
}
 800821a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 800821c:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800821e:	4d18      	ldr	r5, [pc, #96]	; (8008280 <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 8008220:	f7ff ffd8 	bl	80081d4 <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	6993      	ldr	r3, [r2, #24]
 8008228:	f043 0307 	orr.w	r3, r3, #7
 800822c:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800822e:	696b      	ldr	r3, [r5, #20]
 8008230:	01db      	lsls	r3, r3, #7
 8008232:	d5eb      	bpl.n	800820c <HAL_MDIOS_IRQHandler+0x30>
 8008234:	e7eb      	b.n	800820e <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 8008236:	f7ff ffc9 	bl	80081cc <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 800823a:	f44f 7121 	mov.w	r1, #644	; 0x284
 800823e:	4811      	ldr	r0, [pc, #68]	; (8008284 <HAL_MDIOS_IRQHandler+0xa8>)
 8008240:	f7fa f91a 	bl	8002478 <assert_failed>
  __HAL_LOCK(hmdios);
 8008244:	7b63      	ldrb	r3, [r4, #13]
 8008246:	2b01      	cmp	r3, #1
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	d0cf      	beq.n	80081ec <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 800824c:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008250:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 8008252:	6898      	ldr	r0, [r3, #8]
 8008254:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 8008256:	7362      	strb	r2, [r4, #13]
 8008258:	e7c8      	b.n	80081ec <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff ffb8 	bl	80081d0 <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 8008260:	f240 219b 	movw	r1, #667	; 0x29b
 8008264:	4807      	ldr	r0, [pc, #28]	; (8008284 <HAL_MDIOS_IRQHandler+0xa8>)
 8008266:	f7fa f907 	bl	8002478 <assert_failed>
  __HAL_LOCK(hmdios);
 800826a:	7b63      	ldrb	r3, [r4, #13]
 800826c:	2b01      	cmp	r3, #1
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	d0c2      	beq.n	80081f8 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 8008272:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008276:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 800827c:	7362      	strb	r2, [r4, #13]
 800827e:	e7bb      	b.n	80081f8 <HAL_MDIOS_IRQHandler+0x1c>
 8008280:	40013c00 	.word	0x40013c00
 8008284:	08021578 	.word	0x08021578

08008288 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828a:	b08b      	sub	sp, #44	; 0x2c
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800828c:	2800      	cmp	r0, #0
 800828e:	f000 8092 	beq.w	80083b6 <HAL_PCD_Init+0x12e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8008292:	6803      	ldr	r3, [r0, #0]
 8008294:	4604      	mov	r4, r0
 8008296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800829a:	d006      	beq.n	80082aa <HAL_PCD_Init+0x22>
 800829c:	4a4a      	ldr	r2, [pc, #296]	; (80083c8 <HAL_PCD_Init+0x140>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <HAL_PCD_Init+0x22>
 80082a2:	2186      	movs	r1, #134	; 0x86
 80082a4:	4849      	ldr	r0, [pc, #292]	; (80083cc <HAL_PCD_Init+0x144>)
 80082a6:	f7fa f8e7 	bl	8002478 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082aa:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 80082ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d079      	beq.n	80083aa <HAL_PCD_Init+0x122>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082b6:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082b8:	4625      	mov	r5, r4
  __HAL_PCD_DISABLE(hpcd);
 80082ba:	6820      	ldr	r0, [r4, #0]
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082bc:	466f      	mov	r7, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80082be:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082c2:	1d26      	adds	r6, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 80082c4:	f005 fdf2 	bl	800deac <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082c8:	f855 eb10 	ldr.w	lr, [r5], #16
 80082cc:	46ac      	mov	ip, r5
 80082ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80082d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80082d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80082d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80082da:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80082de:	e887 0003 	stmia.w	r7, {r0, r1}
 80082e2:	4670      	mov	r0, lr
 80082e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80082e8:	f005 fd1a 	bl	800dd20 <USB_CoreInit>
 80082ec:	4607      	mov	r7, r0
 80082ee:	b130      	cbz	r0, 80082fe <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 80082f0:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082f2:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80082f4:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082f6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 80082fa:	b00b      	add	sp, #44	; 0x2c
 80082fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80082fe:	4601      	mov	r1, r0
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	f005 fddb 	bl	800debc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008306:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800830a:	f1bc 0f00 	cmp.w	ip, #0
 800830e:	d02b      	beq.n	8008368 <HAL_PCD_Init+0xe0>
 8008310:	4638      	mov	r0, r7
    hpcd->IN_ep[i].is_in = 1U;
 8008312:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008314:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8008316:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800831a:	1c41      	adds	r1, r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 800831c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8008320:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008324:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008328:	b2c8      	uxtb	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 800832a:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800832e:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008334:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008336:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800833a:	d3ec      	bcc.n	8008316 <HAL_PCD_Init+0x8e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800833c:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800833e:	4611      	mov	r1, r2
 8008340:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008344:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8008346:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800834a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800834e:	b2c2      	uxtb	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8008350:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008354:	4562      	cmp	r2, ip
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008356:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800835a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800835e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008362:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008366:	d3eb      	bcc.n	8008340 <HAL_PCD_Init+0xb8>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008368:	466f      	mov	r7, sp
 800836a:	f8d4 c000 	ldr.w	ip, [r4]
 800836e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008370:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008374:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008376:	e895 0003 	ldmia.w	r5, {r0, r1}
 800837a:	e887 0003 	stmia.w	r7, {r0, r1}
 800837e:	4660      	mov	r0, ip
 8008380:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008384:	f005 fdb2 	bl	800deec <USB_DevInit>
 8008388:	4605      	mov	r5, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d1b0      	bne.n	80082f0 <HAL_PCD_Init+0x68>
  hpcd->State = HAL_PCD_STATE_READY;
 800838e:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8008390:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8008392:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8008396:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008398:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800839c:	d00f      	beq.n	80083be <HAL_PCD_Init+0x136>
  (void)USB_DevDisconnect(hpcd->Instance);
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	f006 f942 	bl	800e628 <USB_DevDisconnect>
}
 80083a4:	4628      	mov	r0, r5
 80083a6:	b00b      	add	sp, #44	; 0x2c
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80083aa:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80083ae:	4620      	mov	r0, r4
 80083b0:	f014 fbe6 	bl	801cb80 <HAL_PCD_MspInit>
 80083b4:	e77f      	b.n	80082b6 <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 80083b6:	2501      	movs	r5, #1
}
 80083b8:	4628      	mov	r0, r5
 80083ba:	b00b      	add	sp, #44	; 0x2c
 80083bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fd26 	bl	8008e10 <HAL_PCDEx_ActivateLPM>
 80083c4:	e7eb      	b.n	800839e <HAL_PCD_Init+0x116>
 80083c6:	bf00      	nop
 80083c8:	40040000 	.word	0x40040000
 80083cc:	080215b4 	.word	0x080215b4

080083d0 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80083d0:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d00e      	beq.n	80083f6 <HAL_PCD_Start+0x26>
 80083d8:	2301      	movs	r3, #1
{
 80083da:	b510      	push	{r4, lr}
 80083dc:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 80083de:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80083e0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80083e4:	f006 f914 	bl	800e610 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80083e8:	6820      	ldr	r0, [r4, #0]
 80083ea:	f005 fd57 	bl	800de9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80083ee:	2000      	movs	r0, #0
 80083f0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80083f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80083f6:	2002      	movs	r0, #2
}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008400:	6806      	ldr	r6, [r0, #0]
{
 8008402:	b089      	sub	sp, #36	; 0x24
 8008404:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum = 0U;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008406:	4630      	mov	r0, r6
 8008408:	f006 f94c 	bl	800e6a4 <USB_GetMode>
 800840c:	b110      	cbz	r0, 8008414 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800840e:	b009      	add	sp, #36	; 0x24
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008416:	6820      	ldr	r0, [r4, #0]
 8008418:	f006 f912 	bl	800e640 <USB_ReadInterrupts>
 800841c:	2800      	cmp	r0, #0
 800841e:	d0f6      	beq.n	800840e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	f006 f90d 	bl	800e640 <USB_ReadInterrupts>
 8008426:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800842a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800842c:	d003      	beq.n	8008436 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800842e:	6943      	ldr	r3, [r0, #20]
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008436:	f006 f903 	bl	800e640 <USB_ReadInterrupts>
 800843a:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800843e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008440:	f040 81ce 	bne.w	80087e0 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008444:	f006 f8fc 	bl	800e640 <USB_ReadInterrupts>
 8008448:	0343      	lsls	r3, r0, #13
 800844a:	f100 8124 	bmi.w	8008696 <HAL_PCD_IRQHandler+0x29a>
 800844e:	f8d4 a000 	ldr.w	sl, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008452:	4650      	mov	r0, sl
 8008454:	f006 f8f4 	bl	800e640 <USB_ReadInterrupts>
 8008458:	2800      	cmp	r0, #0
 800845a:	f2c0 809c 	blt.w	8008596 <HAL_PCD_IRQHandler+0x19a>
 800845e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008460:	f006 f8ee 	bl	800e640 <USB_ReadInterrupts>
 8008464:	0500      	lsls	r0, r0, #20
 8008466:	d463      	bmi.n	8008530 <HAL_PCD_IRQHandler+0x134>
 8008468:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800846a:	f006 f8e9 	bl	800e640 <USB_ReadInterrupts>
 800846e:	0102      	lsls	r2, r0, #4
 8008470:	d513      	bpl.n	800849a <HAL_PCD_IRQHandler+0x9e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008472:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8008474:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008478:	6953      	ldr	r3, [r2, #20]
 800847a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800847e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008480:	2900      	cmp	r1, #0
 8008482:	d15f      	bne.n	8008544 <HAL_PCD_IRQHandler+0x148>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008484:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8008486:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008488:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800848a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800848e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008492:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008496:	f014 fce1 	bl	801ce5c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800849a:	6820      	ldr	r0, [r4, #0]
 800849c:	f006 f8d0 	bl	800e640 <USB_ReadInterrupts>
 80084a0:	04c3      	lsls	r3, r0, #19
 80084a2:	f100 80a6 	bmi.w	80085f2 <HAL_PCD_IRQHandler+0x1f6>
 80084a6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80084a8:	f006 f8ca 	bl	800e640 <USB_ReadInterrupts>
 80084ac:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80084b0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80084b2:	f040 8084 	bne.w	80085be <HAL_PCD_IRQHandler+0x1c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084b6:	f006 f8c3 	bl	800e640 <USB_ReadInterrupts>
 80084ba:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084be:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084c0:	d011      	beq.n	80084e6 <HAL_PCD_IRQHandler+0xea>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084c2:	6983      	ldr	r3, [r0, #24]
 80084c4:	f023 0310 	bic.w	r3, r3, #16
 80084c8:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80084ca:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084cc:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80084d0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d03e      	beq.n	8008556 <HAL_PCD_IRQHandler+0x15a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80084d8:	2b06      	cmp	r3, #6
 80084da:	f000 82ab 	beq.w	8008a34 <HAL_PCD_IRQHandler+0x638>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084de:	6983      	ldr	r3, [r0, #24]
 80084e0:	f043 0310 	orr.w	r3, r3, #16
 80084e4:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084e6:	f006 f8ab 	bl	800e640 <USB_ReadInterrupts>
 80084ea:	0707      	lsls	r7, r0, #28
 80084ec:	f100 81c2 	bmi.w	8008874 <HAL_PCD_IRQHandler+0x478>
 80084f0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80084f2:	f006 f8a5 	bl	800e640 <USB_ReadInterrupts>
 80084f6:	02c6      	lsls	r6, r0, #11
 80084f8:	f100 81b1 	bmi.w	800885e <HAL_PCD_IRQHandler+0x462>
 80084fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80084fe:	f006 f89f 	bl	800e640 <USB_ReadInterrupts>
 8008502:	0285      	lsls	r5, r0, #10
 8008504:	f100 81bf 	bmi.w	8008886 <HAL_PCD_IRQHandler+0x48a>
 8008508:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800850a:	f006 f899 	bl	800e640 <USB_ReadInterrupts>
 800850e:	0040      	lsls	r0, r0, #1
 8008510:	f100 80b8 	bmi.w	8008684 <HAL_PCD_IRQHandler+0x288>
 8008514:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008516:	f006 f893 	bl	800e640 <USB_ReadInterrupts>
 800851a:	0741      	lsls	r1, r0, #29
 800851c:	f57f af77 	bpl.w	800840e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008524:	076a      	lsls	r2, r5, #29
 8008526:	d411      	bmi.n	800854c <HAL_PCD_IRQHandler+0x150>
      hpcd->Instance->GOTGINT |= temp;
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	432a      	orrs	r2, r5
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	e76e      	b.n	800840e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008530:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8008534:	07d9      	lsls	r1, r3, #31
 8008536:	d42a      	bmi.n	800858e <HAL_PCD_IRQHandler+0x192>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	6943      	ldr	r3, [r0, #20]
 800853c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008540:	6143      	str	r3, [r0, #20]
 8008542:	e792      	b.n	800846a <HAL_PCD_IRQHandler+0x6e>
        HAL_PCD_SuspendCallback(hpcd);
 8008544:	4620      	mov	r0, r4
 8008546:	f014 fb9f 	bl	801cc88 <HAL_PCD_SuspendCallback>
 800854a:	e7a6      	b.n	800849a <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_DisconnectCallback(hpcd);
 800854c:	4620      	mov	r0, r4
 800854e:	f014 fbc3 	bl	801ccd8 <HAL_PCD_DisconnectCallback>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	e7e8      	b.n	8008528 <HAL_PCD_IRQHandler+0x12c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008556:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800855a:	421d      	tst	r5, r3
 800855c:	d0bf      	beq.n	80084de <HAL_PCD_IRQHandler+0xe2>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800855e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8008562:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8008566:	4630      	mov	r0, r6
 8008568:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800856c:	462a      	mov	r2, r5
 800856e:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8008572:	f005 ffcd 	bl	800e510 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008576:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800857a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800857e:	442a      	add	r2, r5
 8008580:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008582:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008584:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008588:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800858c:	e7a7      	b.n	80084de <HAL_PCD_IRQHandler+0xe2>
        HAL_PCD_SuspendCallback(hpcd);
 800858e:	4620      	mov	r0, r4
 8008590:	f014 fb7a 	bl	801cc88 <HAL_PCD_SuspendCallback>
 8008594:	e7d0      	b.n	8008538 <HAL_PCD_IRQHandler+0x13c>
      if (hpcd->LPM_State == LPM_L1)
 8008596:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800859a:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800859e:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085a0:	f022 0201 	bic.w	r2, r2, #1
 80085a4:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80085a8:	f000 8201 	beq.w	80089ae <HAL_PCD_IRQHandler+0x5b2>
        HAL_PCD_ResumeCallback(hpcd);
 80085ac:	4620      	mov	r0, r4
 80085ae:	f014 fb83 	bl	801ccb8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	6943      	ldr	r3, [r0, #20]
 80085b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ba:	6143      	str	r3, [r0, #20]
 80085bc:	e750      	b.n	8008460 <HAL_PCD_IRQHandler+0x64>
      (void)USB_ActivateSetup(hpcd->Instance);
 80085be:	f006 f875 	bl	800e6ac <USB_ActivateSetup>
      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80085c2:	6820      	ldr	r0, [r4, #0]
 80085c4:	f005 fd84 	bl	800e0d0 <USB_GetDevSpeed>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 81e3 	bne.w	8008994 <HAL_PCD_IRQHandler+0x598>
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 80085ce:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	f001 f83b 	bl	800964c <HAL_RCC_GetHCLKFreq>
 80085d6:	7b22      	ldrb	r2, [r4, #12]
 80085d8:	4601      	mov	r1, r0
 80085da:	4628      	mov	r0, r5
 80085dc:	f005 fbde 	bl	800dd9c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80085e0:	4620      	mov	r0, r4
 80085e2:	f014 fb3b 	bl	801cc5c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085e6:	6820      	ldr	r0, [r4, #0]
 80085e8:	6943      	ldr	r3, [r0, #20]
 80085ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ee:	6143      	str	r3, [r0, #20]
 80085f0:	e761      	b.n	80084b6 <HAL_PCD_IRQHandler+0xba>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085f2:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 80085f6:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008602:	f005 fd53 	bl	800e0ac <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008606:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800860a:	f1bc 0f00 	cmp.w	ip, #0
 800860e:	d015      	beq.n	800863c <HAL_PCD_IRQHandler+0x240>
 8008610:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008614:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8008618:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800861a:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008620:	4565      	cmp	r5, ip
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008622:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008626:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800862a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800862e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008632:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008636:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800863a:	d1ed      	bne.n	8008618 <HAL_PCD_IRQHandler+0x21c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800863c:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800863e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008640:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008644:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008646:	2a00      	cmp	r2, #0
 8008648:	f000 81a7 	beq.w	800899a <HAL_PCD_IRQHandler+0x59e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800864c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008650:	f043 030b 	orr.w	r3, r3, #11
 8008654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865a:	f043 030b 	orr.w	r3, r3, #11
 800865e:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008660:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008664:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008668:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800866a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800866e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008670:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008674:	f006 f836 	bl	800e6e4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	6943      	ldr	r3, [r0, #20]
 800867c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008680:	6143      	str	r3, [r0, #20]
 8008682:	e711      	b.n	80084a8 <HAL_PCD_IRQHandler+0xac>
      HAL_PCD_ConnectCallback(hpcd);
 8008684:	4620      	mov	r0, r4
 8008686:	f014 fb23 	bl	801ccd0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	6943      	ldr	r3, [r0, #20]
 800868e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008692:	6143      	str	r3, [r0, #20]
 8008694:	e73f      	b.n	8008516 <HAL_PCD_IRQHandler+0x11a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008696:	6820      	ldr	r0, [r4, #0]
 8008698:	f005 ffde 	bl	800e658 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800869c:	4681      	mov	r9, r0
 800869e:	2800      	cmp	r0, #0
 80086a0:	f000 81e7 	beq.w	8008a72 <HAL_PCD_IRQHandler+0x676>
 80086a4:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80086a8:	f8d4 a000 	ldr.w	sl, [r4]
 80086ac:	46a0      	mov	r8, r4
      epnum = 0U;
 80086ae:	f04f 0b00 	mov.w	fp, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086b2:	9505      	str	r5, [sp, #20]
 80086b4:	e9cd 3603 	strd	r3, r6, [sp, #12]
 80086b8:	e007      	b.n	80086ca <HAL_PCD_IRQHandler+0x2ce>
      while (ep_intr != 0U)
 80086ba:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80086be:	f10b 0b01 	add.w	fp, fp, #1
 80086c2:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 80086c6:	f000 811d 	beq.w	8008904 <HAL_PCD_IRQHandler+0x508>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80086ca:	f019 0f01 	tst.w	r9, #1
 80086ce:	d0f4      	beq.n	80086ba <HAL_PCD_IRQHandler+0x2be>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086d0:	fa5f f68b 	uxtb.w	r6, fp
 80086d4:	4650      	mov	r0, sl
 80086d6:	4631      	mov	r1, r6
 80086d8:	f005 ffd0 	bl	800e67c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086dc:	07c7      	lsls	r7, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086de:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086e0:	f100 80dc 	bmi.w	800889c <HAL_PCD_IRQHandler+0x4a0>
 80086e4:	f8d4 a000 	ldr.w	sl, [r4]
 80086e8:	4657      	mov	r7, sl
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086ea:	0728      	lsls	r0, r5, #28
 80086ec:	d504      	bpl.n	80086f8 <HAL_PCD_IRQHandler+0x2fc>
 80086ee:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086f0:	2208      	movs	r2, #8
 80086f2:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 80086f6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80086f8:	06e9      	lsls	r1, r5, #27
 80086fa:	d504      	bpl.n	8008706 <HAL_PCD_IRQHandler+0x30a>
 80086fc:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80086fe:	2210      	movs	r2, #16
 8008700:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008704:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008706:	066a      	lsls	r2, r5, #25
 8008708:	d504      	bpl.n	8008714 <HAL_PCD_IRQHandler+0x318>
 800870a:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800870c:	2240      	movs	r2, #64	; 0x40
 800870e:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008712:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008714:	07ab      	lsls	r3, r5, #30
 8008716:	d504      	bpl.n	8008722 <HAL_PCD_IRQHandler+0x326>
 8008718:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800871a:	2202      	movs	r2, #2
 800871c:	eb03 134b 	add.w	r3, r3, fp, lsl #5
 8008720:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008722:	062d      	lsls	r5, r5, #24
 8008724:	d5c9      	bpl.n	80086ba <HAL_PCD_IRQHandler+0x2be>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8008726:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 800872a:	4293      	cmp	r3, r2
 800872c:	d8c5      	bhi.n	80086ba <HAL_PCD_IRQHandler+0x2be>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800872e:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 8008730:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008734:	eb07 114b 	add.w	r1, r7, fp, lsl #5
  len32b = (len + 3U) / 4U;
 8008738:	4285      	cmp	r5, r0
 800873a:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800873c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8008740:	bf28      	it	cs
 8008742:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008744:	9106      	str	r1, [sp, #24]
 8008746:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8008748:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800874c:	b289      	uxth	r1, r1
 800874e:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 8008752:	d335      	bcc.n	80087c0 <HAL_PCD_IRQHandler+0x3c4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008754:	4293      	cmp	r3, r2
 8008756:	d233      	bcs.n	80087c0 <HAL_PCD_IRQHandler+0x3c4>
 8008758:	b392      	cbz	r2, 80087c0 <HAL_PCD_IRQHandler+0x3c4>
 800875a:	f8cd b01c 	str.w	fp, [sp, #28]
 800875e:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8008762:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008766:	e00b      	b.n	8008780 <HAL_PCD_IRQHandler+0x384>
 8008768:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800876c:	429a      	cmp	r2, r3
 800876e:	eba2 0503 	sub.w	r5, r2, r3
 8008772:	f240 8178 	bls.w	8008a66 <HAL_PCD_IRQHandler+0x66a>
 8008776:	2a00      	cmp	r2, #0
 8008778:	f000 8175 	beq.w	8008a66 <HAL_PCD_IRQHandler+0x66a>
 800877c:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8008780:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008782:	4632      	mov	r2, r6
 8008784:	bf28      	it	cs
 8008786:	4605      	movcs	r5, r0
 8008788:	7c20      	ldrb	r0, [r4, #16]
 800878a:	b2ab      	uxth	r3, r5
 800878c:	9000      	str	r0, [sp, #0]
 800878e:	4638      	mov	r0, r7
 8008790:	f005 fea8 	bl	800e4e4 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008794:	f8db 2018 	ldr.w	r2, [fp, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8008798:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800879c:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 800879e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087a2:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 80087a4:	4429      	add	r1, r5
    ep->xfer_count += len;
 80087a6:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087a8:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 80087ac:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 80087b0:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087b4:	d2d8      	bcs.n	8008768 <HAL_PCD_IRQHandler+0x36c>
 80087b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80087ba:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80087be:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 80087c0:	429a      	cmp	r2, r3
 80087c2:	f200 8154 	bhi.w	8008a6e <HAL_PCD_IRQHandler+0x672>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087c6:	f50a 6100 	add.w	r1, sl, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087ca:	f00b 020f 	and.w	r2, fp, #15
 80087ce:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80087d2:	46ba      	mov	sl, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087d4:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087d8:	ea23 0302 	bic.w	r3, r3, r2
 80087dc:	634b      	str	r3, [r1, #52]	; 0x34
 80087de:	e76c      	b.n	80086ba <HAL_PCD_IRQHandler+0x2be>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80087e0:	f005 ff32 	bl	800e648 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80087e4:	4607      	mov	r7, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f000 8147 	beq.w	8008a7a <HAL_PCD_IRQHandler+0x67e>
 80087ec:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 80087ee:	f04f 0b00 	mov.w	fp, #0
 80087f2:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80087f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80087fa:	e004      	b.n	8008806 <HAL_PCD_IRQHandler+0x40a>
      while (ep_intr != 0U)
 80087fc:	087f      	lsrs	r7, r7, #1
        epnum++;
 80087fe:	f10b 0b01 	add.w	fp, fp, #1
      while (ep_intr != 0U)
 8008802:	f000 8082 	beq.w	800890a <HAL_PCD_IRQHandler+0x50e>
        if ((ep_intr & 0x1U) != 0U)
 8008806:	07fd      	lsls	r5, r7, #31
 8008808:	d5f8      	bpl.n	80087fc <HAL_PCD_IRQHandler+0x400>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800880a:	fa5f f68b 	uxtb.w	r6, fp
 800880e:	4631      	mov	r1, r6
 8008810:	f005 ff2a 	bl	800e668 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008814:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008818:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800881a:	d179      	bne.n	8008910 <HAL_PCD_IRQHandler+0x514>
 800881c:	f000 0308 	and.w	r3, r0, #8
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008820:	2b00      	cmp	r3, #0
 8008822:	f040 809a 	bne.w	800895a <HAL_PCD_IRQHandler+0x55e>
 8008826:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008828:	f018 0f10 	tst.w	r8, #16
 800882c:	d003      	beq.n	8008836 <HAL_PCD_IRQHandler+0x43a>
 800882e:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008832:	2210      	movs	r2, #16
 8008834:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008836:	f018 0f20 	tst.w	r8, #32
 800883a:	d007      	beq.n	800884c <HAL_PCD_IRQHandler+0x450>
            if (hpcd->Init.dma_enable == 1U)
 800883c:	6921      	ldr	r1, [r4, #16]
 800883e:	2901      	cmp	r1, #1
 8008840:	f000 810b 	beq.w	8008a5a <HAL_PCD_IRQHandler+0x65e>
 8008844:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008848:	2220      	movs	r2, #32
 800884a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800884c:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8008850:	d0d4      	beq.n	80087fc <HAL_PCD_IRQHandler+0x400>
 8008852:	eb0a 134b 	add.w	r3, sl, fp, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800885a:	609a      	str	r2, [r3, #8]
 800885c:	e7ce      	b.n	80087fc <HAL_PCD_IRQHandler+0x400>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800885e:	4620      	mov	r0, r4
 8008860:	fa5f f18b 	uxtb.w	r1, fp
 8008864:	f014 fa30 	bl	801ccc8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	6943      	ldr	r3, [r0, #20]
 800886c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008870:	6143      	str	r3, [r0, #20]
 8008872:	e644      	b.n	80084fe <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8008874:	4620      	mov	r0, r4
 8008876:	f014 f9ed 	bl	801cc54 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	6943      	ldr	r3, [r0, #20]
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	6143      	str	r3, [r0, #20]
 8008884:	e635      	b.n	80084f2 <HAL_PCD_IRQHandler+0xf6>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008886:	4620      	mov	r0, r4
 8008888:	fa5f f18b 	uxtb.w	r1, fp
 800888c:	f014 fa18 	bl	801ccc0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	6943      	ldr	r3, [r0, #20]
 8008894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008898:	6143      	str	r3, [r0, #20]
 800889a:	e636      	b.n	800850a <HAL_PCD_IRQHandler+0x10e>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800889c:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800889e:	2701      	movs	r7, #1
 80088a0:	f00b 000f 	and.w	r0, fp, #15
 80088a4:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088a6:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088aa:	fa07 f000 	lsl.w	r0, r7, r0
 80088ae:	eb02 124b 	add.w	r2, r2, fp, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088b2:	ea21 0100 	bic.w	r1, r1, r0
            if (hpcd->Init.dma_enable == 1U)
 80088b6:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088b8:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 80088bc:	42b8      	cmp	r0, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80088be:	4613      	mov	r3, r2
 80088c0:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 80088c2:	d104      	bne.n	80088ce <HAL_PCD_IRQHandler+0x4d2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80088c4:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 80088c8:	4413      	add	r3, r2
 80088ca:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088ce:	4631      	mov	r1, r6
 80088d0:	4620      	mov	r0, r4
 80088d2:	f014 f9b5 	bl	801cc40 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	6827      	ldr	r7, [r4, #0]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d102      	bne.n	80088e4 <HAL_PCD_IRQHandler+0x4e8>
 80088de:	f1bb 0f00 	cmp.w	fp, #0
 80088e2:	d001      	beq.n	80088e8 <HAL_PCD_IRQHandler+0x4ec>
 80088e4:	46ba      	mov	sl, r7
 80088e6:	e700      	b.n	80086ea <HAL_PCD_IRQHandler+0x2ee>
 80088e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80088ea:	46ba      	mov	sl, r7
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f47f aefc 	bne.w	80086ea <HAL_PCD_IRQHandler+0x2ee>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088f2:	4638      	mov	r0, r7
 80088f4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80088f8:	2101      	movs	r1, #1
 80088fa:	f005 fef3 	bl	800e6e4 <USB_EP0_OutStart>
 80088fe:	6827      	ldr	r7, [r4, #0]
 8008900:	46ba      	mov	sl, r7
 8008902:	e6f2      	b.n	80086ea <HAL_PCD_IRQHandler+0x2ee>
 8008904:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8008908:	e5a3      	b.n	8008452 <HAL_PCD_IRQHandler+0x56>
 800890a:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 800890e:	e599      	b.n	8008444 <HAL_PCD_IRQHandler+0x48>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8008916:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008918:	2201      	movs	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800891a:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
 800891e:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 8008922:	2901      	cmp	r1, #1
 8008924:	f008 0308 	and.w	r3, r8, #8
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008928:	44f1      	add	r9, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800892a:	60aa      	str	r2, [r5, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800892c:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008930:	f8d9 2008 	ldr.w	r2, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008934:	d064      	beq.n	8008a00 <HAL_PCD_IRQHandler+0x604>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008936:	4974      	ldr	r1, [pc, #464]	; (8008b08 <HAL_PCD_IRQHandler+0x70c>)
 8008938:	458e      	cmp	lr, r1
 800893a:	d107      	bne.n	800894c <HAL_PCD_IRQHandler+0x550>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800893c:	0411      	lsls	r1, r2, #16
 800893e:	f100 80d3 	bmi.w	8008ae8 <HAL_PCD_IRQHandler+0x6ec>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008942:	0691      	lsls	r1, r2, #26
 8008944:	d502      	bpl.n	800894c <HAL_PCD_IRQHandler+0x550>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008946:	2120      	movs	r1, #32
 8008948:	f8c9 1008 	str.w	r1, [r9, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800894c:	4631      	mov	r1, r6
 800894e:	4620      	mov	r0, r4
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	f014 f96b 	bl	801cc2c <HAL_PCD_DataOutStageCallback>
 8008956:	9b05      	ldr	r3, [sp, #20]
 8008958:	e762      	b.n	8008820 <HAL_PCD_IRQHandler+0x424>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	ea4f 194b 	mov.w	r9, fp, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8008960:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008962:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 8008966:	eb0a 0509 	add.w	r5, sl, r9
  if (hpcd->Init.dma_enable == 1U)
 800896a:	2a01      	cmp	r2, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800896e:	4489      	add	r9, r1
 8008970:	f8d9 1008 	ldr.w	r1, [r9, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008974:	d03d      	beq.n	80089f2 <HAL_PCD_IRQHandler+0x5f6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008976:	4a64      	ldr	r2, [pc, #400]	; (8008b08 <HAL_PCD_IRQHandler+0x70c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d01f      	beq.n	80089bc <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 800897c:	4620      	mov	r0, r4
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	f014 f94e 	bl	801cc20 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008984:	4a61      	ldr	r2, [pc, #388]	; (8008b0c <HAL_PCD_IRQHandler+0x710>)
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	4293      	cmp	r3, r2
 800898a:	d820      	bhi.n	80089ce <HAL_PCD_IRQHandler+0x5d2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800898c:	2308      	movs	r3, #8
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	60ab      	str	r3, [r5, #8]
 8008992:	e749      	b.n	8008828 <HAL_PCD_IRQHandler+0x42c>
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8008994:	2303      	movs	r3, #3
 8008996:	60e3      	str	r3, [r4, #12]
 8008998:	e61a      	b.n	80085d0 <HAL_PCD_IRQHandler+0x1d4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	f242 032b 	movw	r3, #8235	; 0x202b
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f043 030b 	orr.w	r3, r3, #11
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	e658      	b.n	8008660 <HAL_PCD_IRQHandler+0x264>
        hpcd->LPM_State = LPM_L0;
 80089ae:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089b0:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 80089b2:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089b6:	f014 fa51 	bl	801ce5c <HAL_PCDEx_LPM_Callback>
 80089ba:	e5fa      	b.n	80085b2 <HAL_PCD_IRQHandler+0x1b6>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80089bc:	040a      	lsls	r2, r1, #16
 80089be:	d503      	bpl.n	80089c8 <HAL_PCD_IRQHandler+0x5cc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089c4:	f8c9 3008 	str.w	r3, [r9, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 80089c8:	4620      	mov	r0, r4
 80089ca:	f014 f929 	bl	801cc20 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80089ce:	6921      	ldr	r1, [r4, #16]
 80089d0:	2901      	cmp	r1, #1
 80089d2:	d1db      	bne.n	800898c <HAL_PCD_IRQHandler+0x590>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089d4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	f005 fe83 	bl	800e6e4 <USB_EP0_OutStart>
 80089de:	e7d5      	b.n	800898c <HAL_PCD_IRQHandler+0x590>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089e0:	2220      	movs	r2, #32
 80089e2:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f43f af1e 	beq.w	8008828 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80089ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80089ee:	f8d9 1008 	ldr.w	r1, [r9, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089f2:	4a46      	ldr	r2, [pc, #280]	; (8008b0c <HAL_PCD_IRQHandler+0x710>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d8e1      	bhi.n	80089bc <HAL_PCD_IRQHandler+0x5c0>
  HAL_PCD_SetupStageCallback(hpcd);
 80089f8:	4620      	mov	r0, r4
 80089fa:	f014 f911 	bl	801cc20 <HAL_PCD_SetupStageCallback>
 80089fe:	e7c5      	b.n	800898c <HAL_PCD_IRQHandler+0x590>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008a00:	0711      	lsls	r1, r2, #28
 8008a02:	d53d      	bpl.n	8008a80 <HAL_PCD_IRQHandler+0x684>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a04:	4941      	ldr	r1, [pc, #260]	; (8008b0c <HAL_PCD_IRQHandler+0x710>)
 8008a06:	458e      	cmp	lr, r1
 8008a08:	d905      	bls.n	8008a16 <HAL_PCD_IRQHandler+0x61a>
 8008a0a:	0410      	lsls	r0, r2, #16
 8008a0c:	d503      	bpl.n	8008a16 <HAL_PCD_IRQHandler+0x61a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008a12:	f8c9 2008 	str.w	r2, [r9, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8008a16:	4620      	mov	r0, r4
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	f014 f901 	bl	801cc20 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a1e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008a22:	2101      	movs	r1, #1
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	f005 fe5d 	bl	800e6e4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a2a:	2208      	movs	r2, #8
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	f8c9 2008 	str.w	r2, [r9, #8]
 8008a32:	e6f5      	b.n	8008820 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a34:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a38:	2208      	movs	r2, #8
 8008a3a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f005 fd66 	bl	800e510 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a44:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8008a48:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8008a52:	440b      	add	r3, r1
 8008a54:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8008a58:	e541      	b.n	80084de <HAL_PCD_IRQHandler+0xe2>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a5a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008a5e:	f005 fe41 	bl	800e6e4 <USB_EP0_OutStart>
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	e6ee      	b.n	8008844 <HAL_PCD_IRQHandler+0x448>
 8008a66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008a6a:	6827      	ldr	r7, [r4, #0]
 8008a6c:	e6a8      	b.n	80087c0 <HAL_PCD_IRQHandler+0x3c4>
 8008a6e:	46ba      	mov	sl, r7
 8008a70:	e623      	b.n	80086ba <HAL_PCD_IRQHandler+0x2be>
      epnum = 0U;
 8008a72:	4683      	mov	fp, r0
 8008a74:	f8d4 a000 	ldr.w	sl, [r4]
 8008a78:	e4eb      	b.n	8008452 <HAL_PCD_IRQHandler+0x56>
      epnum = 0U;
 8008a7a:	4683      	mov	fp, r0
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	e4e1      	b.n	8008444 <HAL_PCD_IRQHandler+0x48>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008a80:	0691      	lsls	r1, r2, #26
 8008a82:	d4ad      	bmi.n	80089e0 <HAL_PCD_IRQHandler+0x5e4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008a84:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008a88:	d1ad      	bne.n	80089e6 <HAL_PCD_IRQHandler+0x5ea>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a8a:	4920      	ldr	r1, [pc, #128]	; (8008b0c <HAL_PCD_IRQHandler+0x710>)
 8008a8c:	458e      	cmp	lr, r1
 8008a8e:	d901      	bls.n	8008a94 <HAL_PCD_IRQHandler+0x698>
 8008a90:	0412      	lsls	r2, r2, #16
 8008a92:	d434      	bmi.n	8008afe <HAL_PCD_IRQHandler+0x702>
 8008a94:	f04f 0c1c 	mov.w	ip, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a98:	f8d9 e010 	ldr.w	lr, [r9, #16]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	fb0c 4c0b 	mla	ip, ip, fp, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008aa4:	f3ce 0e12 	ubfx	lr, lr, #0, #19
 8008aa8:	9305      	str	r3, [sp, #20]
          hpcd->OUT_ep[epnum].maxpacket -
 8008aaa:	f8dc 2204 	ldr.w	r2, [ip, #516]	; 0x204
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008aae:	f8dc 5208 	ldr.w	r5, [ip, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 8008ab2:	eba2 0e0e 	sub.w	lr, r2, lr
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008ab6:	442a      	add	r2, r5
        hpcd->OUT_ep[epnum].xfer_count =
 8008ab8:	f8cc e214 	str.w	lr, [ip, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008abc:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ac0:	f014 f8b4 	bl	801cc2c <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008ac4:	9b05      	ldr	r3, [sp, #20]
 8008ac6:	f1bb 0f00 	cmp.w	fp, #0
 8008aca:	f47f aea9 	bne.w	8008820 <HAL_PCD_IRQHandler+0x424>
 8008ace:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	f47f aea4 	bne.w	8008820 <HAL_PCD_IRQHandler+0x424>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ad8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008adc:	2101      	movs	r1, #1
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	f005 fe00 	bl	800e6e4 <USB_EP0_OutStart>
 8008ae4:	9b05      	ldr	r3, [sp, #20]
 8008ae6:	e69b      	b.n	8008820 <HAL_PCD_IRQHandler+0x424>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008aec:	f8c9 2008 	str.w	r2, [r9, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f43f ae99 	beq.w	8008828 <HAL_PCD_IRQHandler+0x42c>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008af6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008af8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008afc:	e73b      	b.n	8008976 <HAL_PCD_IRQHandler+0x57a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008afe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b02:	f8c9 2008 	str.w	r2, [r9, #8]
 8008b06:	e76e      	b.n	80089e6 <HAL_PCD_IRQHandler+0x5ea>
 8008b08:	4f54310a 	.word	0x4f54310a
 8008b0c:	4f54300a 	.word	0x4f54300a

08008b10 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008b10:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008b14:	2a01      	cmp	r2, #1
 8008b16:	d00d      	beq.n	8008b34 <HAL_PCD_SetAddress+0x24>
 8008b18:	2201      	movs	r2, #1
{
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8008b1e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b22:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008b24:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b28:	f005 fd60 	bl	800e5ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008b32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008b34:	2002      	movs	r0, #2
}
 8008b36:	4770      	bx	lr

08008b38 <HAL_PCD_EP_Open>:
{
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008b3e:	0609      	lsls	r1, r1, #24
 8008b40:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008b44:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8008b48:	d422      	bmi.n	8008b90 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b4a:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 8008b4e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8008b52:	2600      	movs	r6, #0
 8008b54:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b58:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008b5a:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8008b5e:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b60:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8008b62:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8008b64:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8008b66:	b105      	cbz	r5, 8008b6a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8008b68:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d101      	bne.n	8008b72 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8008b72:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d015      	beq.n	8008ba6 <HAL_PCD_EP_Open+0x6e>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b7e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008b80:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b84:	f005 fab0 	bl	800e0e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b88:	2000      	movs	r0, #0
 8008b8a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8008b90:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b94:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8008b98:	2701      	movs	r7, #1
 8008b9a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008ba0:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8008ba4:	e7db      	b.n	8008b5e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8008ba6:	2002      	movs	r0, #2
}
 8008ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008baa:	bf00      	nop

08008bac <HAL_PCD_EP_Close>:
{
 8008bac:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8008bb0:	0609      	lsls	r1, r1, #24
{
 8008bb2:	b538      	push	{r3, r4, r5, lr}
 8008bb4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008bb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8008bbc:	d419      	bmi.n	8008bf2 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bbe:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008bc2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8008bc6:	2400      	movs	r4, #0
 8008bc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bcc:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008bce:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008bd2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008bd4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d019      	beq.n	8008c10 <HAL_PCD_EP_Close+0x64>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008be0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008be2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008be6:	f005 fac1 	bl	800e16c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bea:	2000      	movs	r0, #0
 8008bec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bf2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8008bf6:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008bfa:	2501      	movs	r5, #1
 8008bfc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c00:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008c02:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c06:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008c08:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d1e5      	bne.n	8008bdc <HAL_PCD_EP_Close+0x30>
 8008c10:	2002      	movs	r0, #2
}
 8008c12:	bd38      	pop	{r3, r4, r5, pc}

08008c14 <HAL_PCD_EP_Receive>:
{
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8008c1a:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c1c:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8008c1e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c22:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8008c26:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c2a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8008c2e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8008c32:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c36:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8008c3a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8008c3e:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8008c42:	6903      	ldr	r3, [r0, #16]
 8008c44:	6800      	ldr	r0, [r0, #0]
 8008c46:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8008c48:	bf08      	it	eq
 8008c4a:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8008c4e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c50:	b11d      	cbz	r5, 8008c5a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c52:	f005 fabf 	bl	800e1d4 <USB_EPStartXfer>
}
 8008c56:	2000      	movs	r0, #0
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c5a:	f005 fbb7 	bl	800e3cc <USB_EP0StartXfer>
}
 8008c5e:	2000      	movs	r0, #0
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	bf00      	nop

08008c64 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008c64:	f001 010f 	and.w	r1, r1, #15
 8008c68:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008c6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8008c70:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <HAL_PCD_EP_Transmit>:
{
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8008c7e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8008c80:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c82:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8008c84:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c88:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8008c8c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c90:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8008c92:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8008c94:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c96:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8008c9a:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8008c9c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8008ca0:	6903      	ldr	r3, [r0, #16]
 8008ca2:	6800      	ldr	r0, [r0, #0]
 8008ca4:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8008ca6:	bf08      	it	eq
 8008ca8:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8008caa:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cac:	b11d      	cbz	r5, 8008cb6 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cae:	f005 fa91 	bl	800e1d4 <USB_EPStartXfer>
}
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cb6:	f005 fb89 	bl	800e3cc <USB_EP0StartXfer>
}
 8008cba:	2000      	movs	r0, #0
 8008cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cbe:	bf00      	nop

08008cc0 <HAL_PCD_EP_SetStall>:
{
 8008cc0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008cc2:	6843      	ldr	r3, [r0, #4]
 8008cc4:	f001 050f 	and.w	r5, r1, #15
 8008cc8:	429d      	cmp	r5, r3
 8008cca:	d81f      	bhi.n	8008d0c <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8008ccc:	060b      	lsls	r3, r1, #24
 8008cce:	d41f      	bmi.n	8008d10 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8008cd0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8008cd4:	241c      	movs	r4, #28
    ep->is_in = 0U;
 8008cd6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008cd8:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8008cdc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8008ce0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008ce4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8008ce8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cea:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008cec:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008cee:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d01e      	beq.n	8008d34 <HAL_PCD_EP_SetStall+0x74>
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008cfc:	6800      	ldr	r0, [r0, #0]
 8008cfe:	f005 fc19 	bl	800e534 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d02:	b1cd      	cbz	r5, 8008d38 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8008d04:	2000      	movs	r0, #0
 8008d06:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008d0c:	2001      	movs	r0, #1
}
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d10:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8008d12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8008d16:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d18:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8008d1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d20:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8008d26:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d28:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008d2a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008d2c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d1e0      	bne.n	8008cf6 <HAL_PCD_EP_SetStall+0x36>
 8008d34:	2002      	movs	r0, #2
}
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008d38:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008d3c:	7c21      	ldrb	r1, [r4, #16]
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	f005 fcd0 	bl	800e6e4 <USB_EP0_OutStart>
 8008d44:	e7de      	b.n	8008d04 <HAL_PCD_EP_SetStall+0x44>
 8008d46:	bf00      	nop

08008d48 <HAL_PCD_EP_ClrStall>:
{
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d4e:	6843      	ldr	r3, [r0, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d821      	bhi.n	8008d98 <HAL_PCD_EP_ClrStall+0x50>
 8008d54:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8008d58:	0609      	lsls	r1, r1, #24
 8008d5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008d5e:	d41d      	bmi.n	8008d9c <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d60:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8008d64:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008d68:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d6a:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8008d6c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8008d70:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8008d74:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d76:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008d78:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008d7a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d01c      	beq.n	8008dbc <HAL_PCD_EP_ClrStall+0x74>
 8008d82:	4604      	mov	r4, r0
 8008d84:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d86:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008d88:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d8c:	f005 fc02 	bl	800e594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d90:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8008d94:	4628      	mov	r0, r5
}
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008d98:	2001      	movs	r0, #1
}
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8008d9c:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008da0:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8008da2:	2501      	movs	r5, #1
 8008da4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008da8:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8008daa:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8008dae:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008db0:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8008db2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008db4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d1e2      	bne.n	8008d82 <HAL_PCD_EP_ClrStall+0x3a>
 8008dbc:	2002      	movs	r0, #2
}
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}

08008dc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008dc0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008dc2:	6805      	ldr	r5, [r0, #0]
 8008dc4:	0412      	lsls	r2, r2, #16
 8008dc6:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8008dc8:	b1c1      	cbz	r1, 8008dfc <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008dca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8008dcc:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008dce:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008dd2:	d00b      	beq.n	8008dec <HAL_PCDEx_SetTxFiFo+0x2c>
 8008dd4:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008dd6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8008dda:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ddc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8008de0:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008de2:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8008de4:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008de6:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8008dea:	d3f4      	bcc.n	8008dd6 <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008dec:	3140      	adds	r1, #64	; 0x40
 8008dee:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8008df0:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008df2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008df6:	604c      	str	r4, [r1, #4]
}
 8008df8:	bc30      	pop	{r4, r5}
 8008dfa:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008dfc:	4314      	orrs	r4, r2
}
 8008dfe:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008e00:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8008e02:	bc30      	pop	{r4, r5}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop

08008e08 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8008e08:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8008e0a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8008e0c:	6259      	str	r1, [r3, #36]	; 0x24
}
 8008e0e:	4770      	bx	lr

08008e10 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e10:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8008e12:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e14:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8008e16:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8008e18:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8008e1c:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e1e:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8008e20:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e22:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8008e26:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8008e2a:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e2c:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e30:	430a      	orrs	r2, r1
}
 8008e32:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008e36:	4770      	bx	lr
 8008e38:	10000003 	.word	0x10000003

08008e3c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e3c:	4a02      	ldr	r2, [pc, #8]	; (8008e48 <HAL_PWR_EnableBkUpAccess+0xc>)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e44:	6013      	str	r3, [r2, #0]
}
 8008e46:	4770      	bx	lr
 8008e48:	40007000 	.word	0x40007000

08008e4c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8008e4c:	4a1b      	ldr	r2, [pc, #108]	; (8008ebc <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008e4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e50:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008e52:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8008e56:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e58:	6411      	str	r1, [r2, #64]	; 0x40
{
 8008e5a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e5e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e60:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008e64:	9201      	str	r2, [sp, #4]
 8008e66:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e6e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8008e70:	f7fb fcc4 	bl	80047fc <HAL_GetTick>
 8008e74:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e76:	e005      	b.n	8008e84 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e78:	f7fb fcc0 	bl	80047fc <HAL_GetTick>
 8008e7c:	1b40      	subs	r0, r0, r5
 8008e7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008e82:	d817      	bhi.n	8008eb4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	03da      	lsls	r2, r3, #15
 8008e88:	d5f6      	bpl.n	8008e78 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e8a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e8c:	4d0c      	ldr	r5, [pc, #48]	; (8008ec0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e92:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008e94:	f7fb fcb2 	bl	80047fc <HAL_GetTick>
 8008e98:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e9a:	e005      	b.n	8008ea8 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e9c:	f7fb fcae 	bl	80047fc <HAL_GetTick>
 8008ea0:	1b00      	subs	r0, r0, r4
 8008ea2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ea6:	d805      	bhi.n	8008eb4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ea8:	686b      	ldr	r3, [r5, #4]
 8008eaa:	039b      	lsls	r3, r3, #14
 8008eac:	d5f6      	bpl.n	8008e9c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8008eae:	2000      	movs	r0, #0
}
 8008eb0:	b003      	add	sp, #12
 8008eb2:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8008eb4:	2003      	movs	r0, #3
}
 8008eb6:	b003      	add	sp, #12
 8008eb8:	bd30      	pop	{r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	40007000 	.word	0x40007000

08008ec4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f000 81d3 	beq.w	8009270 <HAL_RCC_OscConfig+0x3ac>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008eca:	6803      	ldr	r3, [r0, #0]
 8008ecc:	2b0f      	cmp	r3, #15
{
 8008ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008ed6:	f200 80be 	bhi.w	8009056 <HAL_RCC_OscConfig+0x192>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eda:	07dd      	lsls	r5, r3, #31
 8008edc:	d534      	bpl.n	8008f48 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8008ee4:	d003      	beq.n	8008eee <HAL_RCC_OscConfig+0x2a>
 8008ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eea:	f040 817f 	bne.w	80091ec <HAL_RCC_OscConfig+0x328>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008eee:	4ab3      	ldr	r2, [pc, #716]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008ef0:	6893      	ldr	r3, [r2, #8]
 8008ef2:	f003 030c 	and.w	r3, r3, #12
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d01d      	beq.n	8008f36 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008efa:	6893      	ldr	r3, [r2, #8]
 8008efc:	f003 030c 	and.w	r3, r3, #12
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d015      	beq.n	8008f30 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0a:	f000 817f 	beq.w	800920c <HAL_RCC_OscConfig+0x348>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 81b0 	beq.w	8009274 <HAL_RCC_OscConfig+0x3b0>
 8008f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f18:	4ba8      	ldr	r3, [pc, #672]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f000 81ff 	beq.w	800931e <HAL_RCC_OscConfig+0x45a>
 8008f20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	e172      	b.n	8009216 <HAL_RCC_OscConfig+0x352>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f30:	6853      	ldr	r3, [r2, #4]
 8008f32:	0258      	lsls	r0, r3, #9
 8008f34:	d5e6      	bpl.n	8008f04 <HAL_RCC_OscConfig+0x40>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f36:	4ba1      	ldr	r3, [pc, #644]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	0399      	lsls	r1, r3, #14
 8008f3c:	d503      	bpl.n	8008f46 <HAL_RCC_OscConfig+0x82>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8126 	beq.w	8009192 <HAL_RCC_OscConfig+0x2ce>
 8008f46:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f48:	079f      	lsls	r7, r3, #30
 8008f4a:	d450      	bmi.n	8008fee <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f4c:	071a      	lsls	r2, r3, #28
 8008f4e:	d51a      	bpl.n	8008f86 <HAL_RCC_OscConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008f50:	6963      	ldr	r3, [r4, #20]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	f200 8141 	bhi.w	80091da <HAL_RCC_OscConfig+0x316>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8124 	beq.w	80091a6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f5e:	4b97      	ldr	r3, [pc, #604]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008f60:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f62:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008f6a:	f7fb fc47 	bl	80047fc <HAL_GetTick>
 8008f6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f70:	e005      	b.n	8008f7e <HAL_RCC_OscConfig+0xba>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f72:	f7fb fc43 	bl	80047fc <HAL_GetTick>
 8008f76:	1b80      	subs	r0, r0, r6
 8008f78:	2802      	cmp	r0, #2
 8008f7a:	f200 816b 	bhi.w	8009254 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008f80:	079b      	lsls	r3, r3, #30
 8008f82:	d5f6      	bpl.n	8008f72 <HAL_RCC_OscConfig+0xae>
 8008f84:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f86:	075e      	lsls	r6, r3, #29
 8008f88:	f140 808b 	bpl.w	80090a2 <HAL_RCC_OscConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d906      	bls.n	8008fa0 <HAL_RCC_OscConfig+0xdc>
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d004      	beq.n	8008fa0 <HAL_RCC_OscConfig+0xdc>
 8008f96:	f240 2107 	movw	r1, #519	; 0x207
 8008f9a:	4889      	ldr	r0, [pc, #548]	; (80091c0 <HAL_RCC_OscConfig+0x2fc>)
 8008f9c:	f7f9 fa6c 	bl	8002478 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fa0:	4b86      	ldr	r3, [pc, #536]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa4:	00d5      	lsls	r5, r2, #3
 8008fa6:	f100 8182 	bmi.w	80092ae <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8008fac:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fba:	9301      	str	r3, [sp, #4]
 8008fbc:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fbe:	4b81      	ldr	r3, [pc, #516]	; (80091c4 <HAL_RCC_OscConfig+0x300>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	05d0      	lsls	r0, r2, #23
 8008fc4:	f140 8135 	bpl.w	8009232 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fc8:	68a3      	ldr	r3, [r4, #8]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d04d      	beq.n	800906a <HAL_RCC_OscConfig+0x1a6>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 816f 	beq.w	80092b2 <HAL_RCC_OscConfig+0x3ee>
 8008fd4:	2b05      	cmp	r3, #5
 8008fd6:	4b79      	ldr	r3, [pc, #484]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8008fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fda:	f000 81a8 	beq.w	800932e <HAL_RCC_OscConfig+0x46a>
 8008fde:	f022 0201 	bic.w	r2, r2, #1
 8008fe2:	671a      	str	r2, [r3, #112]	; 0x70
 8008fe4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fe6:	f022 0204 	bic.w	r2, r2, #4
 8008fea:	671a      	str	r2, [r3, #112]	; 0x70
 8008fec:	e042      	b.n	8009074 <HAL_RCC_OscConfig+0x1b0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008fee:	68e3      	ldr	r3, [r4, #12]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	f200 80d2 	bhi.w	800919a <HAL_RCC_OscConfig+0x2d6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	2b1f      	cmp	r3, #31
 8008ffa:	f200 8152 	bhi.w	80092a2 <HAL_RCC_OscConfig+0x3de>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ffe:	4b6f      	ldr	r3, [pc, #444]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	f012 0f0c 	tst.w	r2, #12
 8009006:	f000 80bd 	beq.w	8009184 <HAL_RCC_OscConfig+0x2c0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	f002 020c 	and.w	r2, r2, #12
 8009010:	2a08      	cmp	r2, #8
 8009012:	f000 80b3 	beq.w	800917c <HAL_RCC_OscConfig+0x2b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 8166 	beq.w	80092ea <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_ENABLE();
 800901e:	4b67      	ldr	r3, [pc, #412]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8009020:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009022:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800902a:	f7fb fbe7 	bl	80047fc <HAL_GetTick>
 800902e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009030:	e005      	b.n	800903e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009032:	f7fb fbe3 	bl	80047fc <HAL_GetTick>
 8009036:	1b80      	subs	r0, r0, r6
 8009038:	2802      	cmp	r0, #2
 800903a:	f200 810b 	bhi.w	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	0798      	lsls	r0, r3, #30
 8009042:	d5f6      	bpl.n	8009032 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	6922      	ldr	r2, [r4, #16]
 8009048:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800904c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	e77a      	b.n	8008f4c <HAL_RCC_OscConfig+0x88>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009056:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800905a:	4859      	ldr	r0, [pc, #356]	; (80091c0 <HAL_RCC_OscConfig+0x2fc>)
 800905c:	f7f9 fa0c 	bl	8002478 <assert_failed>
 8009060:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009062:	07dd      	lsls	r5, r3, #31
 8009064:	f57f af70 	bpl.w	8008f48 <HAL_RCC_OscConfig+0x84>
 8009068:	e739      	b.n	8008ede <HAL_RCC_OscConfig+0x1a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800906a:	4a54      	ldr	r2, [pc, #336]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 800906c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800906e:	f043 0301 	orr.w	r3, r3, #1
 8009072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009074:	f7fb fbc2 	bl	80047fc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009078:	4e50      	ldr	r6, [pc, #320]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
      tickstart = HAL_GetTick();
 800907a:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800907c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009080:	e006      	b.n	8009090 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009082:	f7fb fbbb 	bl	80047fc <HAL_GetTick>
 8009086:	eba0 0008 	sub.w	r0, r0, r8
 800908a:	42b8      	cmp	r0, r7
 800908c:	f200 80e2 	bhi.w	8009254 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009090:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009092:	079a      	lsls	r2, r3, #30
 8009094:	d5f5      	bpl.n	8009082 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009096:	b125      	cbz	r5, 80090a2 <HAL_RCC_OscConfig+0x1de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009098:	4a48      	ldr	r2, [pc, #288]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 800909a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800909c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80090a2:	69a3      	ldr	r3, [r4, #24]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	f200 80a7 	bhi.w	80091f8 <HAL_RCC_OscConfig+0x334>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d062      	beq.n	8009174 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090ae:	4943      	ldr	r1, [pc, #268]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 80090b0:	688a      	ldr	r2, [r1, #8]
 80090b2:	f002 020c 	and.w	r2, r2, #12
 80090b6:	2a08      	cmp	r2, #8
 80090b8:	d06b      	beq.n	8009192 <HAL_RCC_OscConfig+0x2ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	f040 815d 	bne.w	800937a <HAL_RCC_OscConfig+0x4b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80090c0:	69e3      	ldr	r3, [r4, #28]
 80090c2:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80090c6:	f040 813a 	bne.w	800933e <HAL_RCC_OscConfig+0x47a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80090ca:	6a23      	ldr	r3, [r4, #32]
 80090cc:	3b02      	subs	r3, #2
 80090ce:	2b3d      	cmp	r3, #61	; 0x3d
 80090d0:	f200 814d 	bhi.w	800936e <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80090d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d6:	3b32      	subs	r3, #50	; 0x32
 80090d8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80090dc:	f200 8141 	bhi.w	8009362 <HAL_RCC_OscConfig+0x49e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80090e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80090e2:	2a08      	cmp	r2, #8
 80090e4:	f200 8115 	bhi.w	8009312 <HAL_RCC_OscConfig+0x44e>
 80090e8:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80090ec:	40d3      	lsrs	r3, r2
 80090ee:	07d8      	lsls	r0, r3, #31
 80090f0:	f140 810f 	bpl.w	8009312 <HAL_RCC_OscConfig+0x44e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80090f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090f6:	3b02      	subs	r3, #2
 80090f8:	2b0d      	cmp	r3, #13
 80090fa:	f200 812c 	bhi.w	8009356 <HAL_RCC_OscConfig+0x492>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80090fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009100:	3b02      	subs	r3, #2
 8009102:	2b05      	cmp	r3, #5
 8009104:	f200 8121 	bhi.w	800934a <HAL_RCC_OscConfig+0x486>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 800910a:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800910c:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800910e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009112:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009114:	f7fb fb72 	bl	80047fc <HAL_GetTick>
 8009118:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800911a:	e005      	b.n	8009128 <HAL_RCC_OscConfig+0x264>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800911c:	f7fb fb6e 	bl	80047fc <HAL_GetTick>
 8009120:	1b80      	subs	r0, r0, r6
 8009122:	2802      	cmp	r0, #2
 8009124:	f200 8096 	bhi.w	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	0199      	lsls	r1, r3, #6
 800912c:	d4f6      	bmi.n	800911c <HAL_RCC_OscConfig+0x258>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800912e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009132:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009134:	4313      	orrs	r3, r2
 8009136:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800913a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800913e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009140:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009142:	4c1e      	ldr	r4, [pc, #120]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009144:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009148:	3a01      	subs	r2, #1
 800914a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800914e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009152:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800915a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800915c:	f7fb fb4e 	bl	80047fc <HAL_GetTick>
 8009160:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009162:	e004      	b.n	800916e <HAL_RCC_OscConfig+0x2aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009164:	f7fb fb4a 	bl	80047fc <HAL_GetTick>
 8009168:	1b40      	subs	r0, r0, r5
 800916a:	2802      	cmp	r0, #2
 800916c:	d872      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	019a      	lsls	r2, r3, #6
 8009172:	d5f7      	bpl.n	8009164 <HAL_RCC_OscConfig+0x2a0>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8009174:	2000      	movs	r0, #0
}
 8009176:	b002      	add	sp, #8
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	025e      	lsls	r6, r3, #9
 8009180:	f53f af49 	bmi.w	8009016 <HAL_RCC_OscConfig+0x152>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009184:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	079d      	lsls	r5, r3, #30
 800918a:	d567      	bpl.n	800925c <HAL_RCC_OscConfig+0x398>
 800918c:	68e3      	ldr	r3, [r4, #12]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d064      	beq.n	800925c <HAL_RCC_OscConfig+0x398>
    return HAL_ERROR;
 8009192:	2001      	movs	r0, #1
}
 8009194:	b002      	add	sp, #8
 8009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800919a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800919e:	4808      	ldr	r0, [pc, #32]	; (80091c0 <HAL_RCC_OscConfig+0x2fc>)
 80091a0:	f7f9 f96a 	bl	8002478 <assert_failed>
 80091a4:	e727      	b.n	8008ff6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_LSI_DISABLE();
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <HAL_RCC_OscConfig+0x2f8>)
 80091a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091aa:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80091ac:	f022 0201 	bic.w	r2, r2, #1
 80091b0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80091b2:	f7fb fb23 	bl	80047fc <HAL_GetTick>
 80091b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b8:	e00b      	b.n	80091d2 <HAL_RCC_OscConfig+0x30e>
 80091ba:	bf00      	nop
 80091bc:	40023800 	.word	0x40023800
 80091c0:	080215ec 	.word	0x080215ec
 80091c4:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c8:	f7fb fb18 	bl	80047fc <HAL_GetTick>
 80091cc:	1b80      	subs	r0, r0, r6
 80091ce:	2802      	cmp	r0, #2
 80091d0:	d840      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80091d4:	079f      	lsls	r7, r3, #30
 80091d6:	d4f7      	bmi.n	80091c8 <HAL_RCC_OscConfig+0x304>
 80091d8:	e6d4      	b.n	8008f84 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80091da:	f240 11dd 	movw	r1, #477	; 0x1dd
 80091de:	4870      	ldr	r0, [pc, #448]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 80091e0:	f7f9 f94a 	bl	8002478 <assert_failed>
 80091e4:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0dd      	beq.n	80091a6 <HAL_RCC_OscConfig+0x2e2>
 80091ea:	e6b8      	b.n	8008f5e <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80091ec:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80091f0:	486b      	ldr	r0, [pc, #428]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 80091f2:	f7f9 f941 	bl	8002478 <assert_failed>
 80091f6:	e67a      	b.n	8008eee <HAL_RCC_OscConfig+0x2a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80091f8:	f240 214b 	movw	r1, #587	; 0x24b
 80091fc:	4868      	ldr	r0, [pc, #416]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 80091fe:	f7f9 f93b 	bl	8002478 <assert_failed>
 8009202:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009204:	2b00      	cmp	r3, #0
 8009206:	f47f af52 	bne.w	80090ae <HAL_RCC_OscConfig+0x1ea>
 800920a:	e7b3      	b.n	8009174 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800920c:	4a65      	ldr	r2, [pc, #404]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009214:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009216:	f7fb faf1 	bl	80047fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800921a:	4d62      	ldr	r5, [pc, #392]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
        tickstart = HAL_GetTick();
 800921c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800921e:	e004      	b.n	800922a <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009220:	f7fb faec 	bl	80047fc <HAL_GetTick>
 8009224:	1b80      	subs	r0, r0, r6
 8009226:	2864      	cmp	r0, #100	; 0x64
 8009228:	d814      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	039a      	lsls	r2, r3, #14
 800922e:	d5f7      	bpl.n	8009220 <HAL_RCC_OscConfig+0x35c>
 8009230:	e689      	b.n	8008f46 <HAL_RCC_OscConfig+0x82>
      PWR->CR1 |= PWR_CR1_DBP;
 8009232:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009234:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8009236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800923a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800923c:	f7fb fade 	bl	80047fc <HAL_GetTick>
 8009240:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009242:	6833      	ldr	r3, [r6, #0]
 8009244:	05d9      	lsls	r1, r3, #23
 8009246:	f53f aebf 	bmi.w	8008fc8 <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800924a:	f7fb fad7 	bl	80047fc <HAL_GetTick>
 800924e:	1bc0      	subs	r0, r0, r7
 8009250:	2864      	cmp	r0, #100	; 0x64
 8009252:	d9f6      	bls.n	8009242 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8009254:	2003      	movs	r0, #3
}
 8009256:	b002      	add	sp, #8
 8009258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800925c:	4a51      	ldr	r2, [pc, #324]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
 800925e:	6921      	ldr	r1, [r4, #16]
 8009260:	6813      	ldr	r3, [r2, #0]
 8009262:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009266:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800926e:	e66d      	b.n	8008f4c <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8009270:	2001      	movs	r0, #1
}
 8009272:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009274:	4b4b      	ldr	r3, [pc, #300]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
 8009276:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009278:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800927a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009286:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009288:	f7fb fab8 	bl	80047fc <HAL_GetTick>
 800928c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800928e:	e004      	b.n	800929a <HAL_RCC_OscConfig+0x3d6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009290:	f7fb fab4 	bl	80047fc <HAL_GetTick>
 8009294:	1b80      	subs	r0, r0, r6
 8009296:	2864      	cmp	r0, #100	; 0x64
 8009298:	d8dc      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	039b      	lsls	r3, r3, #14
 800929e:	d4f7      	bmi.n	8009290 <HAL_RCC_OscConfig+0x3cc>
 80092a0:	e651      	b.n	8008f46 <HAL_RCC_OscConfig+0x82>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80092a2:	f240 119d 	movw	r1, #413	; 0x19d
 80092a6:	483e      	ldr	r0, [pc, #248]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 80092a8:	f7f9 f8e6 	bl	8002478 <assert_failed>
 80092ac:	e6a7      	b.n	8008ffe <HAL_RCC_OscConfig+0x13a>
  FlagStatus pwrclkchanged = RESET;
 80092ae:	2500      	movs	r5, #0
 80092b0:	e685      	b.n	8008fbe <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092b2:	4b3c      	ldr	r3, [pc, #240]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ba:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092bc:	f022 0201 	bic.w	r2, r2, #1
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70
 80092c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092c4:	f022 0204 	bic.w	r2, r2, #4
 80092c8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80092ca:	f7fb fa97 	bl	80047fc <HAL_GetTick>
 80092ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092d0:	e004      	b.n	80092dc <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092d2:	f7fb fa93 	bl	80047fc <HAL_GetTick>
 80092d6:	1bc0      	subs	r0, r0, r7
 80092d8:	4540      	cmp	r0, r8
 80092da:	d8bb      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092dc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80092de:	079b      	lsls	r3, r3, #30
 80092e0:	d4f7      	bmi.n	80092d2 <HAL_RCC_OscConfig+0x40e>
    if(pwrclkchanged == SET)
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	f43f aedd 	beq.w	80090a2 <HAL_RCC_OscConfig+0x1de>
 80092e8:	e6d6      	b.n	8009098 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 80092ea:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <HAL_RCC_OscConfig+0x4e0>)
 80092ec:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ee:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80092f6:	f7fb fa81 	bl	80047fc <HAL_GetTick>
 80092fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092fc:	e004      	b.n	8009308 <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092fe:	f7fb fa7d 	bl	80047fc <HAL_GetTick>
 8009302:	1b80      	subs	r0, r0, r6
 8009304:	2802      	cmp	r0, #2
 8009306:	d8a5      	bhi.n	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	0799      	lsls	r1, r3, #30
 800930c:	d4f7      	bmi.n	80092fe <HAL_RCC_OscConfig+0x43a>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	e61c      	b.n	8008f4c <HAL_RCC_OscConfig+0x88>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009312:	f240 2157 	movw	r1, #599	; 0x257
 8009316:	4822      	ldr	r0, [pc, #136]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 8009318:	f7f9 f8ae 	bl	8002478 <assert_failed>
 800931c:	e6ea      	b.n	80090f4 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800931e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	e773      	b.n	8009216 <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800932e:	f042 0204 	orr.w	r2, r2, #4
 8009332:	671a      	str	r2, [r3, #112]	; 0x70
 8009334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	671a      	str	r2, [r3, #112]	; 0x70
 800933c:	e69a      	b.n	8009074 <HAL_RCC_OscConfig+0x1b0>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800933e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8009342:	4817      	ldr	r0, [pc, #92]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 8009344:	f7f9 f898 	bl	8002478 <assert_failed>
 8009348:	e6bf      	b.n	80090ca <HAL_RCC_OscConfig+0x206>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800934a:	f240 215a 	movw	r1, #602	; 0x25a
 800934e:	4814      	ldr	r0, [pc, #80]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 8009350:	f7f9 f892 	bl	8002478 <assert_failed>
 8009354:	e6d8      	b.n	8009108 <HAL_RCC_OscConfig+0x244>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009356:	f44f 7116 	mov.w	r1, #600	; 0x258
 800935a:	4811      	ldr	r0, [pc, #68]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 800935c:	f7f9 f88c 	bl	8002478 <assert_failed>
 8009360:	e6cd      	b.n	80090fe <HAL_RCC_OscConfig+0x23a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009362:	f240 2156 	movw	r1, #598	; 0x256
 8009366:	480e      	ldr	r0, [pc, #56]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 8009368:	f7f9 f886 	bl	8002478 <assert_failed>
 800936c:	e6b8      	b.n	80090e0 <HAL_RCC_OscConfig+0x21c>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800936e:	f240 2155 	movw	r1, #597	; 0x255
 8009372:	480b      	ldr	r0, [pc, #44]	; (80093a0 <HAL_RCC_OscConfig+0x4dc>)
 8009374:	f7f9 f880 	bl	8002478 <assert_failed>
 8009378:	e6ac      	b.n	80090d4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_PLL_DISABLE();
 800937a:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800937c:	460c      	mov	r4, r1
        __HAL_RCC_PLL_DISABLE();
 800937e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009382:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8009384:	f7fb fa3a 	bl	80047fc <HAL_GetTick>
 8009388:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800938a:	e005      	b.n	8009398 <HAL_RCC_OscConfig+0x4d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800938c:	f7fb fa36 	bl	80047fc <HAL_GetTick>
 8009390:	1b40      	subs	r0, r0, r5
 8009392:	2802      	cmp	r0, #2
 8009394:	f63f af5e 	bhi.w	8009254 <HAL_RCC_OscConfig+0x390>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	019b      	lsls	r3, r3, #6
 800939c:	d4f6      	bmi.n	800938c <HAL_RCC_OscConfig+0x4c8>
 800939e:	e6e9      	b.n	8009174 <HAL_RCC_OscConfig+0x2b0>
 80093a0:	080215ec 	.word	0x080215ec
 80093a4:	40023800 	.word	0x40023800

080093a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093a8:	4916      	ldr	r1, [pc, #88]	; (8009404 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80093aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093ac:	688b      	ldr	r3, [r1, #8]
 80093ae:	f003 030c 	and.w	r3, r3, #12
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d01b      	beq.n	80093ee <HAL_RCC_GetSysClockFreq+0x46>
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d117      	bne.n	80093ea <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093ba:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80093bc:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093c2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80093c4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80093c8:	d113      	bne.n	80093f2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093ca:	480f      	ldr	r0, [pc, #60]	; (8009408 <HAL_RCC_GetSysClockFreq+0x60>)
 80093cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80093d0:	fba1 0100 	umull	r0, r1, r1, r0
 80093d4:	f7f6 ff9c 	bl	8000310 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <HAL_RCC_GetSysClockFreq+0x5c>)
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80093e0:	3301      	adds	r3, #1
 80093e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80093e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80093e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80093ea:	4807      	ldr	r0, [pc, #28]	; (8009408 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80093ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80093ee:	4807      	ldr	r0, [pc, #28]	; (800940c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80093f0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093f2:	4806      	ldr	r0, [pc, #24]	; (800940c <HAL_RCC_GetSysClockFreq+0x64>)
 80093f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80093f8:	2300      	movs	r3, #0
 80093fa:	fba1 0100 	umull	r0, r1, r1, r0
 80093fe:	f7f6 ff87 	bl	8000310 <__aeabi_uldivmod>
 8009402:	e7e9      	b.n	80093d8 <HAL_RCC_GetSysClockFreq+0x30>
 8009404:	40023800 	.word	0x40023800
 8009408:	00f42400 	.word	0x00f42400
 800940c:	007a1200 	.word	0x007a1200

08009410 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009410:	2800      	cmp	r0, #0
 8009412:	f000 80e5 	beq.w	80095e0 <HAL_RCC_ClockConfig+0x1d0>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	3b01      	subs	r3, #1
 800941a:	2b0e      	cmp	r3, #14
{
 800941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009424:	f200 80c8 	bhi.w	80095b8 <HAL_RCC_ClockConfig+0x1a8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009428:	2d0f      	cmp	r5, #15
 800942a:	f200 80b5 	bhi.w	8009598 <HAL_RCC_ClockConfig+0x188>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800942e:	4a82      	ldr	r2, [pc, #520]	; (8009638 <HAL_RCC_ClockConfig+0x228>)
 8009430:	6813      	ldr	r3, [r2, #0]
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	42ab      	cmp	r3, r5
 8009438:	f0c0 80d4 	bcc.w	80095e4 <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	0798      	lsls	r0, r3, #30
 8009440:	d532      	bpl.n	80094a8 <HAL_RCC_ClockConfig+0x98>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009442:	0759      	lsls	r1, r3, #29
 8009444:	d504      	bpl.n	8009450 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009446:	497d      	ldr	r1, [pc, #500]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 8009448:	688a      	ldr	r2, [r1, #8]
 800944a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800944e:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009450:	071a      	lsls	r2, r3, #28
 8009452:	d504      	bpl.n	800945e <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009454:	4979      	ldr	r1, [pc, #484]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 8009456:	688a      	ldr	r2, [r1, #8]
 8009458:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800945c:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800945e:	68a1      	ldr	r1, [r4, #8]
 8009460:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8009464:	f021 0620 	bic.w	r6, r1, #32
 8009468:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800946c:	bf14      	ite	ne
 800946e:	2201      	movne	r2, #1
 8009470:	2200      	moveq	r2, #0
 8009472:	2e90      	cmp	r6, #144	; 0x90
 8009474:	bf0c      	ite	eq
 8009476:	2200      	moveq	r2, #0
 8009478:	f002 0201 	andne.w	r2, r2, #1
 800947c:	29f0      	cmp	r1, #240	; 0xf0
 800947e:	bf0c      	ite	eq
 8009480:	2200      	moveq	r2, #0
 8009482:	f002 0201 	andne.w	r2, r2, #1
 8009486:	28a0      	cmp	r0, #160	; 0xa0
 8009488:	bf0c      	ite	eq
 800948a:	2200      	moveq	r2, #0
 800948c:	f002 0201 	andne.w	r2, r2, #1
 8009490:	b122      	cbz	r2, 800949c <HAL_RCC_ClockConfig+0x8c>
 8009492:	f021 0210 	bic.w	r2, r1, #16
 8009496:	2ac0      	cmp	r2, #192	; 0xc0
 8009498:	f040 80c5 	bne.w	8009626 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800949c:	4867      	ldr	r0, [pc, #412]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 800949e:	6882      	ldr	r2, [r0, #8]
 80094a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80094a4:	4311      	orrs	r1, r2
 80094a6:	6081      	str	r1, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094a8:	07df      	lsls	r7, r3, #31
 80094aa:	d527      	bpl.n	80094fc <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80094ac:	6863      	ldr	r3, [r4, #4]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	f200 808f 	bhi.w	80095d2 <HAL_RCC_ClockConfig+0x1c2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094b4:	4a61      	ldr	r2, [pc, #388]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094b6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094b8:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094ba:	f000 8086 	beq.w	80095ca <HAL_RCC_ClockConfig+0x1ba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094be:	2b02      	cmp	r3, #2
 80094c0:	f000 809e 	beq.w	8009600 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094c4:	0791      	lsls	r1, r2, #30
 80094c6:	d574      	bpl.n	80095b2 <HAL_RCC_ClockConfig+0x1a2>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094c8:	495c      	ldr	r1, [pc, #368]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ce:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d0:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094d2:	f022 0203 	bic.w	r2, r2, #3
 80094d6:	4313      	orrs	r3, r2
 80094d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80094da:	f7fb f98f 	bl	80047fc <HAL_GetTick>
 80094de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094e0:	e005      	b.n	80094ee <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094e2:	f7fb f98b 	bl	80047fc <HAL_GetTick>
 80094e6:	1bc0      	subs	r0, r0, r7
 80094e8:	4540      	cmp	r0, r8
 80094ea:	f200 8087 	bhi.w	80095fc <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ee:	68b3      	ldr	r3, [r6, #8]
 80094f0:	6862      	ldr	r2, [r4, #4]
 80094f2:	f003 030c 	and.w	r3, r3, #12
 80094f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80094fa:	d1f2      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xd2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094fc:	4a4e      	ldr	r2, [pc, #312]	; (8009638 <HAL_RCC_ClockConfig+0x228>)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	42ab      	cmp	r3, r5
 8009506:	d909      	bls.n	800951c <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009508:	6813      	ldr	r3, [r2, #0]
 800950a:	f023 030f 	bic.w	r3, r3, #15
 800950e:	432b      	orrs	r3, r5
 8009510:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	42ab      	cmp	r3, r5
 800951a:	d14a      	bne.n	80095b2 <HAL_RCC_ClockConfig+0x1a2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	075a      	lsls	r2, r3, #29
 8009520:	d512      	bpl.n	8009548 <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009522:	68e1      	ldr	r1, [r4, #12]
 8009524:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 8009528:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800952c:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 8009530:	bf18      	it	ne
 8009532:	2a00      	cmpne	r2, #0
 8009534:	d002      	beq.n	800953c <HAL_RCC_ClockConfig+0x12c>
 8009536:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800953a:	d16c      	bne.n	8009616 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800953c:	483f      	ldr	r0, [pc, #252]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 800953e:	6882      	ldr	r2, [r0, #8]
 8009540:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009544:	430a      	orrs	r2, r1
 8009546:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009548:	071b      	lsls	r3, r3, #28
 800954a:	d513      	bpl.n	8009574 <HAL_RCC_ClockConfig+0x164>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8009552:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 8009556:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800955a:	bf18      	it	ne
 800955c:	2b00      	cmpne	r3, #0
 800955e:	d002      	beq.n	8009566 <HAL_RCC_ClockConfig+0x156>
 8009560:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8009564:	d150      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009566:	4935      	ldr	r1, [pc, #212]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 8009568:	688b      	ldr	r3, [r1, #8]
 800956a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800956e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009572:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009574:	f7ff ff18 	bl	80093a8 <HAL_RCC_GetSysClockFreq>
 8009578:	4b30      	ldr	r3, [pc, #192]	; (800963c <HAL_RCC_ClockConfig+0x22c>)
 800957a:	4931      	ldr	r1, [pc, #196]	; (8009640 <HAL_RCC_ClockConfig+0x230>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	4a31      	ldr	r2, [pc, #196]	; (8009644 <HAL_RCC_ClockConfig+0x234>)
 8009580:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009584:	5ccb      	ldrb	r3, [r1, r3]
 8009586:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 800958a:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800958c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800958e:	f7fa facf 	bl	8003b30 <HAL_InitTick>
  return HAL_OK;
 8009592:	2000      	movs	r0, #0
}
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009598:	f240 21cb 	movw	r1, #715	; 0x2cb
 800959c:	482a      	ldr	r0, [pc, #168]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 800959e:	f7f8 ff6b 	bl	8002478 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095a2:	4b25      	ldr	r3, [pc, #148]	; (8009638 <HAL_RCC_ClockConfig+0x228>)
 80095a4:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095a6:	6819      	ldr	r1, [r3, #0]
 80095a8:	f021 010f 	bic.w	r1, r1, #15
 80095ac:	430d      	orrs	r5, r1
 80095ae:	601d      	str	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095b0:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 80095b2:	2001      	movs	r0, #1
}
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80095b8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80095bc:	4822      	ldr	r0, [pc, #136]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 80095be:	f7f8 ff5b 	bl	8002478 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80095c2:	2d0f      	cmp	r5, #15
 80095c4:	f67f af33 	bls.w	800942e <HAL_RCC_ClockConfig+0x1e>
 80095c8:	e7e6      	b.n	8009598 <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ca:	0396      	lsls	r6, r2, #14
 80095cc:	f53f af7c 	bmi.w	80094c8 <HAL_RCC_ClockConfig+0xb8>
 80095d0:	e7ef      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1a2>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80095d2:	f240 21f6 	movw	r1, #758	; 0x2f6
 80095d6:	481c      	ldr	r0, [pc, #112]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 80095d8:	f7f8 ff4e 	bl	8002478 <assert_failed>
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	e769      	b.n	80094b4 <HAL_RCC_ClockConfig+0xa4>
    return HAL_ERROR;
 80095e0:	2001      	movs	r0, #1
}
 80095e2:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e4:	6813      	ldr	r3, [r2, #0]
 80095e6:	f023 030f 	bic.w	r3, r3, #15
 80095ea:	432b      	orrs	r3, r5
 80095ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ee:	6813      	ldr	r3, [r2, #0]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	42ab      	cmp	r3, r5
 80095f6:	f43f af21 	beq.w	800943c <HAL_RCC_ClockConfig+0x2c>
 80095fa:	e7da      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1a2>
        return HAL_TIMEOUT;
 80095fc:	2003      	movs	r0, #3
 80095fe:	e7d9      	b.n	80095b4 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009600:	0190      	lsls	r0, r2, #6
 8009602:	f53f af61 	bmi.w	80094c8 <HAL_RCC_ClockConfig+0xb8>
 8009606:	e7d4      	b.n	80095b2 <HAL_RCC_ClockConfig+0x1a2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009608:	f240 313a 	movw	r1, #826	; 0x33a
 800960c:	480e      	ldr	r0, [pc, #56]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 800960e:	f7f8 ff33 	bl	8002478 <assert_failed>
 8009612:	6922      	ldr	r2, [r4, #16]
 8009614:	e7a7      	b.n	8009566 <HAL_RCC_ClockConfig+0x156>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009616:	f240 3133 	movw	r1, #819	; 0x333
 800961a:	480b      	ldr	r0, [pc, #44]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 800961c:	f7f8 ff2c 	bl	8002478 <assert_failed>
 8009620:	68e1      	ldr	r1, [r4, #12]
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	e78a      	b.n	800953c <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009626:	f240 21ef 	movw	r1, #751	; 0x2ef
 800962a:	4807      	ldr	r0, [pc, #28]	; (8009648 <HAL_RCC_ClockConfig+0x238>)
 800962c:	f7f8 ff24 	bl	8002478 <assert_failed>
 8009630:	68a1      	ldr	r1, [r4, #8]
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	e732      	b.n	800949c <HAL_RCC_ClockConfig+0x8c>
 8009636:	bf00      	nop
 8009638:	40023c00 	.word	0x40023c00
 800963c:	40023800 	.word	0x40023800
 8009640:	08020cd4 	.word	0x08020cd4
 8009644:	200002b8 	.word	0x200002b8
 8009648:	080215ec 	.word	0x080215ec

0800964c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800964c:	4b01      	ldr	r3, [pc, #4]	; (8009654 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	200002b8 	.word	0x200002b8

08009658 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009658:	4b04      	ldr	r3, [pc, #16]	; (800966c <HAL_RCC_GetPCLK1Freq+0x14>)
 800965a:	4a05      	ldr	r2, [pc, #20]	; (8009670 <HAL_RCC_GetPCLK1Freq+0x18>)
 800965c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800965e:	4905      	ldr	r1, [pc, #20]	; (8009674 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009660:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009664:	6808      	ldr	r0, [r1, #0]
 8009666:	5cd3      	ldrb	r3, [r2, r3]
}
 8009668:	40d8      	lsrs	r0, r3
 800966a:	4770      	bx	lr
 800966c:	40023800 	.word	0x40023800
 8009670:	08020ce4 	.word	0x08020ce4
 8009674:	200002b8 	.word	0x200002b8

08009678 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <HAL_RCC_GetPCLK2Freq+0x14>)
 800967a:	4a05      	ldr	r2, [pc, #20]	; (8009690 <HAL_RCC_GetPCLK2Freq+0x18>)
 800967c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800967e:	4905      	ldr	r1, [pc, #20]	; (8009694 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009680:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009684:	6808      	ldr	r0, [r1, #0]
 8009686:	5cd3      	ldrb	r3, [r2, r3]
}
 8009688:	40d8      	lsrs	r0, r3
 800968a:	4770      	bx	lr
 800968c:	40023800 	.word	0x40023800
 8009690:	08020ce4 	.word	0x08020ce4
 8009694:	200002b8 	.word	0x200002b8

08009698 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009698:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800969a:	220f      	movs	r2, #15
 800969c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	f002 0203 	and.w	r2, r2, #3
 80096a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80096ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096ae:	689a      	ldr	r2, [r3, #8]
 80096b0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80096b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	08db      	lsrs	r3, r3, #3
{
 80096ba:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80096bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096c0:	4c05      	ldr	r4, [pc, #20]	; (80096d8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80096c2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096c4:	6823      	ldr	r3, [r4, #0]
}
 80096c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	600b      	str	r3, [r1, #0]
}
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40023800 	.word	0x40023800
 80096d8:	40023c00 	.word	0x40023c00

080096dc <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80096dc:	4a54      	ldr	r2, [pc, #336]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80096de:	6803      	ldr	r3, [r0, #0]
 80096e0:	401a      	ands	r2, r3
{
 80096e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096e6:	4604      	mov	r4, r0
 80096e8:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	f000 8349 	beq.w	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80096f0:	f013 0601 	ands.w	r6, r3, #1
 80096f4:	d00f      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80096f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096f8:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 80096fc:	f040 834c 	bne.w	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x6bc>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009700:	4a4c      	ldr	r2, [pc, #304]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009702:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009706:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009708:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800970a:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800970e:	6090      	str	r0, [r2, #8]
 8009710:	6890      	ldr	r0, [r2, #8]
 8009712:	4301      	orrs	r1, r0
 8009714:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009716:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800971a:	d014      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800971c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800971e:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 8009722:	f040 836f 	bne.w	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009726:	4943      	ldr	r1, [pc, #268]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x158>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009728:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800972c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8009730:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009734:	ea42 0205 	orr.w	r2, r2, r5
 8009738:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800973c:	f000 8327 	beq.w	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009740:	fab5 f585 	clz	r5, r5
 8009744:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009746:	02da      	lsls	r2, r3, #11
 8009748:	d514      	bpl.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800974a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800974c:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 8009750:	f040 8351 	bne.w	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009754:	4837      	ldr	r0, [pc, #220]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009756:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800975a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800975e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009762:	ea42 0201 	orr.w	r2, r2, r1
 8009766:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800976a:	f000 8313 	beq.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800976e:	2900      	cmp	r1, #0
 8009770:	bf08      	it	eq
 8009772:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8009774:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009778:	bf18      	it	ne
 800977a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800977c:	069f      	lsls	r7, r3, #26
 800977e:	f140 8099 	bpl.w	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009782:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009784:	492c      	ldr	r1, [pc, #176]	; (8009838 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009786:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800978a:	bf18      	it	ne
 800978c:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 8009790:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 8009794:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 8009798:	4828      	ldr	r0, [pc, #160]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800979a:	bf14      	ite	ne
 800979c:	2301      	movne	r3, #1
 800979e:	2300      	moveq	r3, #0
 80097a0:	458c      	cmp	ip, r1
 80097a2:	bf0c      	ite	eq
 80097a4:	2300      	moveq	r3, #0
 80097a6:	f003 0301 	andne.w	r3, r3, #1
 80097aa:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80097ae:	f8df c098 	ldr.w	ip, [pc, #152]	; 8009848 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80097b2:	4287      	cmp	r7, r0
 80097b4:	bf0c      	ite	eq
 80097b6:	2300      	moveq	r3, #0
 80097b8:	f003 0301 	andne.w	r3, r3, #1
 80097bc:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 80097c0:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 80097c4:	4561      	cmp	r1, ip
 80097c6:	bf0c      	ite	eq
 80097c8:	2300      	moveq	r3, #0
 80097ca:	f003 0301 	andne.w	r3, r3, #1
 80097ce:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 80097d2:	4287      	cmp	r7, r0
 80097d4:	bf0c      	ite	eq
 80097d6:	2300      	moveq	r3, #0
 80097d8:	f003 0301 	andne.w	r3, r3, #1
 80097dc:	4f18      	ldr	r7, [pc, #96]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80097de:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 80097e2:	4561      	cmp	r1, ip
 80097e4:	bf0c      	ite	eq
 80097e6:	2300      	moveq	r3, #0
 80097e8:	f003 0301 	andne.w	r3, r3, #1
 80097ec:	42b9      	cmp	r1, r7
 80097ee:	bf0c      	ite	eq
 80097f0:	2300      	moveq	r3, #0
 80097f2:	f003 0301 	andne.w	r3, r3, #1
 80097f6:	4281      	cmp	r1, r0
 80097f8:	bf0c      	ite	eq
 80097fa:	2300      	moveq	r3, #0
 80097fc:	f003 0301 	andne.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	f040 823f 	bne.w	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009806:	4a0b      	ldr	r2, [pc, #44]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009808:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800980a:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800980c:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800980e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8009812:	6411      	str	r1, [r2, #64]	; 0x40
 8009814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009816:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800981a:	9201      	str	r2, [sp, #4]
 800981c:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009824:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009826:	f7fa ffe9 	bl	80047fc <HAL_GetTick>
 800982a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800982c:	e015      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800982e:	bf00      	nop
 8009830:	1dfffff9 	.word	0x1dfffff9
 8009834:	40023800 	.word	0x40023800
 8009838:	00020300 	.word	0x00020300
 800983c:	00040300 	.word	0x00040300
 8009840:	00140300 	.word	0x00140300
 8009844:	40007000 	.word	0x40007000
 8009848:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800984c:	f7fa ffd6 	bl	80047fc <HAL_GetTick>
 8009850:	eba0 0008 	sub.w	r0, r0, r8
 8009854:	2864      	cmp	r0, #100	; 0x64
 8009856:	f200 8211 	bhi.w	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	05d8      	lsls	r0, r3, #23
 800985e:	d5f5      	bpl.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009860:	4ac4      	ldr	r2, [pc, #784]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009864:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009866:	f403 7040 	and.w	r0, r3, #768	; 0x300

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800986a:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800986e:	d011      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009870:	4281      	cmp	r1, r0
 8009872:	d00f      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009874:	6f11      	ldr	r1, [r2, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009876:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009878:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800987c:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8009880:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009882:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8009884:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8009888:	6717      	str	r7, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800988a:	6711      	str	r1, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800988c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800988e:	07c9      	lsls	r1, r1, #31
 8009890:	f100 8388 	bmi.w	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009894:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8009898:	f000 82a4 	beq.w	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800989c:	49b5      	ldr	r1, [pc, #724]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800989e:	688a      	ldr	r2, [r1, #8]
 80098a0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80098a4:	608a      	str	r2, [r1, #8]
 80098a6:	4ab3      	ldr	r2, [pc, #716]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098ac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80098ae:	430b      	orrs	r3, r1
 80098b0:	6713      	str	r3, [r2, #112]	; 0x70
 80098b2:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80098b4:	06df      	lsls	r7, r3, #27
 80098b6:	d510      	bpl.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80098b8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80098ba:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 80098be:	f040 82a8 	bne.w	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x736>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098c2:	4aac      	ldr	r2, [pc, #688]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098c4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80098c8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80098cc:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80098d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80098d4:	4339      	orrs	r1, r7
 80098d6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098da:	0458      	lsls	r0, r3, #17
 80098dc:	d50f      	bpl.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80098de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80098e0:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 80098e4:	d003      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 80098e6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80098ea:	f040 8264 	bne.w	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x6da>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098ee:	48a1      	ldr	r0, [pc, #644]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80098f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80098f8:	430a      	orrs	r2, r1
 80098fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098fe:	0419      	lsls	r1, r3, #16
 8009900:	d50f      	bpl.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009902:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009904:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8009908:	d003      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800990a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800990e:	f040 8259 	bne.w	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009912:	4898      	ldr	r0, [pc, #608]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009914:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009918:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800991c:	430a      	orrs	r2, r1
 800991e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009922:	03da      	lsls	r2, r3, #15
 8009924:	d50f      	bpl.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009926:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009928:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800992c:	d003      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800992e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8009932:	f040 824f 	bne.w	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009936:	488f      	ldr	r0, [pc, #572]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009938:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800993c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009940:	430a      	orrs	r2, r1
 8009942:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009946:	039f      	lsls	r7, r3, #14
 8009948:	d50f      	bpl.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800994a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800994c:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 8009950:	d003      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8009952:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8009956:	f040 8226 	bne.w	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x6ca>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800995a:	4886      	ldr	r0, [pc, #536]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800995c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009960:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009964:	430a      	orrs	r2, r1
 8009966:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800996a:	0658      	lsls	r0, r3, #25
 800996c:	d50b      	bpl.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800996e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009970:	2903      	cmp	r1, #3
 8009972:	f200 8290 	bhi.w	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x7ba>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009976:	487f      	ldr	r0, [pc, #508]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009978:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800997c:	f022 0203 	bic.w	r2, r2, #3
 8009980:	430a      	orrs	r2, r1
 8009982:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009986:	0619      	lsls	r1, r3, #24
 8009988:	d50c      	bpl.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800998a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800998c:	f031 020c 	bics.w	r2, r1, #12
 8009990:	f040 828f 	bne.w	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x7d6>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009994:	4877      	ldr	r0, [pc, #476]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009996:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800999a:	f022 020c 	bic.w	r2, r2, #12
 800999e:	430a      	orrs	r2, r1
 80099a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80099a4:	05da      	lsls	r2, r3, #23
 80099a6:	d50c      	bpl.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80099a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80099aa:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 80099ae:	f040 8288 	bne.w	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099b2:	4870      	ldr	r0, [pc, #448]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80099b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80099bc:	430a      	orrs	r2, r1
 80099be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099c2:	059f      	lsls	r7, r3, #22
 80099c4:	d50c      	bpl.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80099c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80099c8:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 80099cc:	f040 8291 	bne.w	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x816>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099d0:	4868      	ldr	r0, [pc, #416]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099d2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80099d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80099da:	430a      	orrs	r2, r1
 80099dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099e0:	0558      	lsls	r0, r3, #21
 80099e2:	d50c      	bpl.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80099e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80099e6:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 80099ea:	f040 828a 	bne.w	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x826>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099ee:	4861      	ldr	r0, [pc, #388]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80099f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80099f8:	430a      	orrs	r2, r1
 80099fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80099fe:	0519      	lsls	r1, r3, #20
 8009a00:	d50c      	bpl.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8009a02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a04:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 8009a08:	f040 8283 	bne.w	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x836>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009a0c:	4859      	ldr	r0, [pc, #356]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a0e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a16:	430a      	orrs	r2, r1
 8009a18:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009a1c:	04da      	lsls	r2, r3, #19
 8009a1e:	d50c      	bpl.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8009a20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a22:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 8009a26:	f040 827c 	bne.w	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x846>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009a2a:	4852      	ldr	r0, [pc, #328]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a2c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009a34:	430a      	orrs	r2, r1
 8009a36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009a3a:	049f      	lsls	r7, r3, #18
 8009a3c:	d50c      	bpl.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8009a3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009a40:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 8009a44:	f040 824d 	bne.w	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009a48:	484a      	ldr	r0, [pc, #296]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a4a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009a52:	430a      	orrs	r2, r1
 8009a54:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a58:	0258      	lsls	r0, r3, #9
 8009a5a:	d50c      	bpl.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8009a5c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009a5e:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 8009a62:	f040 81dd 	bne.w	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a66:	4843      	ldr	r0, [pc, #268]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a68:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009a6c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009a70:	430a      	orrs	r2, r1
 8009a72:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a76:	0299      	lsls	r1, r3, #10
 8009a78:	d510      	bpl.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8009a7a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009a7c:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 8009a80:	f040 81d6 	bne.w	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a84:	483b      	ldr	r0, [pc, #236]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8009a86:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a8a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 8009a8e:	bf08      	it	eq
 8009a90:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a92:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8009a96:	430a      	orrs	r2, r1
 8009a98:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8009a9c:	f013 0f08 	tst.w	r3, #8
 8009aa0:	bf18      	it	ne
 8009aa2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009aa4:	035a      	lsls	r2, r3, #13
 8009aa6:	d50c      	bpl.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009aa8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009aaa:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 8009aae:	f040 8210 	bne.w	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ab2:	4830      	ldr	r0, [pc, #192]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009ab8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009abc:	430a      	orrs	r2, r1
 8009abe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009ac2:	021f      	lsls	r7, r3, #8
 8009ac4:	d50d      	bpl.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009ac6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009aca:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 8009ace:	f040 81b7 	bne.w	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ad2:	4828      	ldr	r0, [pc, #160]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ad4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009ad8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009adc:	430a      	orrs	r2, r1
 8009ade:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009ae2:	0158      	lsls	r0, r3, #5
 8009ae4:	d50d      	bpl.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8009ae6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009aea:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 8009aee:	f040 81b0 	bne.w	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x776>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009af2:	4820      	ldr	r0, [pc, #128]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009af4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8009af8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009afc:	430a      	orrs	r2, r1
 8009afe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b02:	0119      	lsls	r1, r3, #4
 8009b04:	d50d      	bpl.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009b06:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009b0a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 8009b0e:	f040 81b1 	bne.w	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b12:	4818      	ldr	r0, [pc, #96]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b14:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009b18:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009b22:	00da      	lsls	r2, r3, #3
 8009b24:	d50d      	bpl.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8009b26:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009b2a:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 8009b2e:	f040 81aa 	bne.w	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009b32:	4910      	ldr	r1, [pc, #64]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b34:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8009b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009b42:	2e01      	cmp	r6, #1
 8009b44:	f000 80a9 	beq.w	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4e:	f000 80a4 	beq.w	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b52:	2d01      	cmp	r5, #1
 8009b54:	d003      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x482>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8009b56:	2000      	movs	r0, #0
}
 8009b58:	b003      	add	sp, #12
 8009b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b60:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b62:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8009b64:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009b68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009b6a:	f7fa fe47 	bl	80047fc <HAL_GetTick>
 8009b6e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b70:	e007      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b72:	bf00      	nop
 8009b74:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b78:	f7fa fe40 	bl	80047fc <HAL_GetTick>
 8009b7c:	1b80      	subs	r0, r0, r6
 8009b7e:	2864      	cmp	r0, #100	; 0x64
 8009b80:	d87c      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	009f      	lsls	r7, r3, #2
 8009b86:	d4f7      	bmi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8009b88:	6963      	ldr	r3, [r4, #20]
 8009b8a:	3b32      	subs	r3, #50	; 0x32
 8009b8c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009b90:	d904      	bls.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009b92:	f240 2146 	movw	r1, #582	; 0x246
 8009b96:	48b3      	ldr	r0, [pc, #716]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009b98:	f7f8 fc6e 	bl	8002478 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	031d      	lsls	r5, r3, #12
 8009ba0:	d501      	bpl.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009ba2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009ba4:	b11a      	cbz	r2, 8009bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ba6:	02d8      	lsls	r0, r3, #11
 8009ba8:	d526      	bpl.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009baa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009bac:	bb22      	cbnz	r2, 8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8009bae:	69a3      	ldr	r3, [r4, #24]
 8009bb0:	3b02      	subs	r3, #2
 8009bb2:	2b0d      	cmp	r3, #13
 8009bb4:	f200 8259 	bhi.w	800a06a <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8009bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bba:	1e59      	subs	r1, r3, #1
 8009bbc:	291f      	cmp	r1, #31
 8009bbe:	f200 824c 	bhi.w	800a05a <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009bc2:	4aa9      	ldr	r2, [pc, #676]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009bc4:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009bc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009bca:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bd2:	69a0      	ldr	r0, [r4, #24]
 8009bd4:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8009bd8:	4333      	orrs	r3, r6
 8009bda:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8009bde:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009be2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009be6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009bea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009bee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009bf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009bf6:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009bf8:	0299      	lsls	r1, r3, #10
 8009bfa:	d504      	bpl.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bfc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009bfe:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8009c02:	f000 8215 	beq.w	800a030 <HAL_RCCEx_PeriphCLKConfig+0x954>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c06:	071a      	lsls	r2, r3, #28
 8009c08:	d526      	bpl.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8009c0a:	69e3      	ldr	r3, [r4, #28]
 8009c0c:	3b02      	subs	r3, #2
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d904      	bls.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8009c12:	f240 2171 	movw	r1, #625	; 0x271
 8009c16:	4893      	ldr	r0, [pc, #588]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009c18:	f7f8 fc2e 	bl	8002478 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8009c1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c1e:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 8009c22:	f040 8228 	bne.w	800a076 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c26:	4a90      	ldr	r2, [pc, #576]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c28:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c2a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009c2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c32:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8009c36:	69e4      	ldr	r4, [r4, #28]
 8009c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8009c42:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 8009c46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009c4a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009c52:	4303      	orrs	r3, r0
 8009c54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8009c58:	4b83      	ldr	r3, [pc, #524]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c5c:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8009c5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009c64:	f7fa fdca 	bl	80047fc <HAL_GetTick>
 8009c68:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	f53f af72 	bmi.w	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c72:	f7fa fdc3 	bl	80047fc <HAL_GetTick>
 8009c76:	1b40      	subs	r0, r0, r5
 8009c78:	2864      	cmp	r0, #100	; 0x64
 8009c7a:	d9f6      	bls.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x58e>
        return HAL_TIMEOUT;
 8009c7c:	2003      	movs	r0, #3
}
 8009c7e:	b003      	add	sp, #12
 8009c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009c84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c88:	4b78      	ldr	r3, [pc, #480]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	f43f adbb 	beq.w	8009806 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8009c90:	21b9      	movs	r1, #185	; 0xb9
 8009c92:	4874      	ldr	r0, [pc, #464]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009c94:	f7f8 fbf0 	bl	8002478 <assert_failed>
 8009c98:	e5b5      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_PLLI2S_DISABLE();
 8009c9a:	4b73      	ldr	r3, [pc, #460]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c9e:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8009ca0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009ca4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009ca6:	f7fa fda9 	bl	80047fc <HAL_GetTick>
 8009caa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cac:	e004      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009cae:	f7fa fda5 	bl	80047fc <HAL_GetTick>
 8009cb2:	1bc0      	subs	r0, r0, r7
 8009cb4:	2864      	cmp	r0, #100	; 0x64
 8009cb6:	d8e1      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cb8:	6833      	ldr	r3, [r6, #0]
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	d4f7      	bmi.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009cbe:	6863      	ldr	r3, [r4, #4]
 8009cc0:	3b32      	subs	r3, #50	; 0x32
 8009cc2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009cc6:	f200 80ee 	bhi.w	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	07df      	lsls	r7, r3, #31
 8009cce:	d503      	bpl.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8009cd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	f000 8150 	beq.w	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009cd8:	031e      	lsls	r6, r3, #12
 8009cda:	d504      	bpl.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8009cdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009cde:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009ce2:	f000 8126 	beq.w	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8009ce6:	02d8      	lsls	r0, r3, #11
 8009ce8:	d504      	bpl.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x618>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009cec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8009cf0:	f000 811f 	beq.w	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x856>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009cf4:	01d9      	lsls	r1, r3, #7
 8009cf6:	d514      	bpl.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x646>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009cf8:	6927      	ldr	r7, [r4, #16]
 8009cfa:	2f03      	cmp	r7, #3
 8009cfc:	f200 8175 	bhi.w	8009fea <HAL_RCCEx_PeriphCLKConfig+0x90e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d00:	4959      	ldr	r1, [pc, #356]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009d02:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d04:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d08:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009d0c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8009d10:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8009d14:	4332      	orrs	r2, r6
 8009d16:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8009d1a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009d1e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009d22:	019a      	lsls	r2, r3, #6
 8009d24:	d51a      	bpl.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x680>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	f200 8173 	bhi.w	800a014 <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	3b02      	subs	r3, #2
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	f200 8168 	bhi.w	800a008 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009d38:	68e2      	ldr	r2, [r4, #12]
 8009d3a:	1e93      	subs	r3, r2, #2
 8009d3c:	2b0d      	cmp	r3, #13
 8009d3e:	f200 815c 	bhi.w	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6861      	ldr	r1, [r4, #4]
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	68a0      	ldr	r0, [r4, #8]
 8009d4a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009d4e:	4946      	ldr	r1, [pc, #280]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009d50:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8009d54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8009d5c:	4b42      	ldr	r3, [pc, #264]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d60:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8009d62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009d66:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009d68:	f7fa fd48 	bl	80047fc <HAL_GetTick>
 8009d6c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d6e:	e004      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d70:	f7fa fd44 	bl	80047fc <HAL_GetTick>
 8009d74:	1bc0      	subs	r0, r0, r7
 8009d76:	2864      	cmp	r0, #100	; 0x64
 8009d78:	d880      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d7a:	6833      	ldr	r3, [r6, #0]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	d5f7      	bpl.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d80:	e6e7      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x476>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009d82:	2174      	movs	r1, #116	; 0x74
 8009d84:	4837      	ldr	r0, [pc, #220]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009d86:	f7f8 fb77 	bl	8002478 <assert_failed>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	e4b0      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 8009d8e:	2500      	movs	r5, #0
      plli2sused = 1;
 8009d90:	2601      	movs	r6, #1
 8009d92:	e4d8      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 8009d94:	2601      	movs	r6, #1
 8009d96:	e4ed      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8009d98:	217a      	movs	r1, #122	; 0x7a
 8009d9a:	4832      	ldr	r0, [pc, #200]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009d9c:	f7f8 fb6c 	bl	8002478 <assert_failed>
 8009da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	e4ac      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009da6:	f240 111b 	movw	r1, #283	; 0x11b
 8009daa:	482e      	ldr	r0, [pc, #184]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009dac:	f7f8 fb64 	bl	8002478 <assert_failed>
 8009db0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	e5d1      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8009db6:	21fd      	movs	r1, #253	; 0xfd
 8009db8:	482a      	ldr	r0, [pc, #168]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009dba:	f7f8 fb5d 	bl	8002478 <assert_failed>
 8009dbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	e594      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x212>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009dc4:	f240 1107 	movw	r1, #263	; 0x107
 8009dc8:	4826      	ldr	r0, [pc, #152]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009dca:	f7f8 fb55 	bl	8002478 <assert_failed>
 8009dce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	e59e      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8009dd4:	f240 1111 	movw	r1, #273	; 0x111
 8009dd8:	4822      	ldr	r0, [pc, #136]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009dda:	f7f8 fb4d 	bl	8002478 <assert_failed>
 8009dde:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	e5a8      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009de4:	4820      	ldr	r0, [pc, #128]	; (8009e68 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009de6:	4922      	ldr	r1, [pc, #136]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8009de8:	6882      	ldr	r2, [r0, #8]
 8009dea:	4019      	ands	r1, r3
 8009dec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8009df0:	430a      	orrs	r2, r1
 8009df2:	6082      	str	r2, [r0, #8]
 8009df4:	e557      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8009df6:	219e      	movs	r1, #158	; 0x9e
 8009df8:	481a      	ldr	r0, [pc, #104]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009dfa:	f7f8 fb3d 	bl	8002478 <assert_failed>
 8009dfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	e4a7      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8009e04:	218a      	movs	r1, #138	; 0x8a
 8009e06:	4817      	ldr	r0, [pc, #92]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e08:	f7f8 fb36 	bl	8002478 <assert_failed>
 8009e0c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	e489      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8009e12:	21f3      	movs	r1, #243	; 0xf3
 8009e14:	4813      	ldr	r0, [pc, #76]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e16:	f7f8 fb2f 	bl	8002478 <assert_failed>
 8009e1a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	e550      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8009e20:	f240 1175 	movw	r1, #373	; 0x175
 8009e24:	480f      	ldr	r0, [pc, #60]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e26:	f7f8 fb27 	bl	8002478 <assert_failed>
 8009e2a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	e61a      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8009e30:	f240 117f 	movw	r1, #383	; 0x17f
 8009e34:	480b      	ldr	r0, [pc, #44]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e36:	f7f8 fb1f 	bl	8002478 <assert_failed>
 8009e3a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	e621      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009e40:	f240 11a1 	movw	r1, #417	; 0x1a1
 8009e44:	4807      	ldr	r0, [pc, #28]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e46:	f7f8 fb17 	bl	8002478 <assert_failed>
 8009e4a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	e63f      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8009e52:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8009e56:	4803      	ldr	r0, [pc, #12]	; (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009e58:	f7f8 fb0e 	bl	8002478 <assert_failed>
 8009e5c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	e646      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009e64:	08021624 	.word	0x08021624
 8009e68:	40023800 	.word	0x40023800
 8009e6c:	001c0300 	.word	0x001c0300
 8009e70:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009e74:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8009e78:	4886      	ldr	r0, [pc, #536]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009e7a:	f7f8 fafd 	bl	8002478 <assert_failed>
 8009e7e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	e645      	b.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8009e86:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009e8a:	4882      	ldr	r0, [pc, #520]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009e8c:	f7f8 faf4 	bl	8002478 <assert_failed>
 8009e90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e94:	e64d      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x456>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8009e96:	f240 1125 	movw	r1, #293	; 0x125
 8009e9a:	487e      	ldr	r0, [pc, #504]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009e9c:	f7f8 faec 	bl	8002478 <assert_failed>
 8009ea0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	e567      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8009ea6:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8009eaa:	487a      	ldr	r0, [pc, #488]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009eac:	f7f8 fae4 	bl	8002478 <assert_failed>
 8009eb0:	e70b      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8009eb2:	f240 112f 	movw	r1, #303	; 0x12f
 8009eb6:	4877      	ldr	r0, [pc, #476]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009eb8:	f7f8 fade 	bl	8002478 <assert_failed>
 8009ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	e568      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009ec2:	f240 1139 	movw	r1, #313	; 0x139
 8009ec6:	4873      	ldr	r0, [pc, #460]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ec8:	f7f8 fad6 	bl	8002478 <assert_failed>
 8009ecc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	e56f      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8009ed2:	f240 1197 	movw	r1, #407	; 0x197
 8009ed6:	486f      	ldr	r0, [pc, #444]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ed8:	f7f8 face 	bl	8002478 <assert_failed>
 8009edc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	e5e7      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8009ee2:	f240 116b 	movw	r1, #363	; 0x16b
 8009ee6:	486b      	ldr	r0, [pc, #428]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ee8:	f7f8 fac6 	bl	8002478 <assert_failed>
 8009eec:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	e5aa      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8009ef2:	f240 1143 	movw	r1, #323	; 0x143
 8009ef6:	4867      	ldr	r0, [pc, #412]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ef8:	f7f8 fabe 	bl	8002478 <assert_failed>
 8009efc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	e566      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8009f02:	f240 114d 	movw	r1, #333	; 0x14d
 8009f06:	4863      	ldr	r0, [pc, #396]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f08:	f7f8 fab6 	bl	8002478 <assert_failed>
 8009f0c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	e56d      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8009f12:	f240 1157 	movw	r1, #343	; 0x157
 8009f16:	485f      	ldr	r0, [pc, #380]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f18:	f7f8 faae 	bl	8002478 <assert_failed>
 8009f1c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	e574      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8009f22:	f240 1161 	movw	r1, #353	; 0x161
 8009f26:	485b      	ldr	r0, [pc, #364]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009f28:	f7f8 faa6 	bl	8002478 <assert_failed>
 8009f2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	e57b      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009f32:	68e3      	ldr	r3, [r4, #12]
 8009f34:	3b02      	subs	r3, #2
 8009f36:	2b0d      	cmp	r3, #13
 8009f38:	d851      	bhi.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x902>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	1e5e      	subs	r6, r3, #1
 8009f3e:	2e1f      	cmp	r6, #31
 8009f40:	d845      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f42:	4a55      	ldr	r2, [pc, #340]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009f44:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f46:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f4a:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009f52:	68e1      	ldr	r1, [r4, #12]
 8009f54:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8009f58:	433b      	orrs	r3, r7
 8009f5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8009f5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009f66:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009f6a:	f023 031f 	bic.w	r3, r3, #31
 8009f6e:	4333      	orrs	r3, r6
 8009f70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	e6bd      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x618>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8009f78:	68a7      	ldr	r7, [r4, #8]
 8009f7a:	1eba      	subs	r2, r7, #2
 8009f7c:	2a05      	cmp	r2, #5
 8009f7e:	d84f      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x944>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f80:	4945      	ldr	r1, [pc, #276]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f82:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f84:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f88:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f8c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8009f90:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 8009f94:	4332      	orrs	r2, r6
 8009f96:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8009f9a:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 8009f9e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8009fa2:	e699      	b.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fa4:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fa6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009faa:	f7fa fc27 	bl	80047fc <HAL_GetTick>
 8009fae:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fb0:	e006      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fb2:	f7fa fc23 	bl	80047fc <HAL_GetTick>
 8009fb6:	eba0 0009 	sub.w	r0, r0, r9
 8009fba:	4540      	cmp	r0, r8
 8009fbc:	f63f ae5e 	bhi.w	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fc2:	079b      	lsls	r3, r3, #30
 8009fc4:	d5f5      	bpl.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8009fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009fc8:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8009fcc:	e462      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8009fce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009fd2:	4830      	ldr	r0, [pc, #192]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fd4:	f7f8 fa50 	bl	8002478 <assert_failed>
 8009fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fda:	1e5e      	subs	r6, r3, #1
 8009fdc:	e7b1      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x866>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009fde:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8009fe2:	482c      	ldr	r0, [pc, #176]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009fe4:	f7f8 fa48 	bl	8002478 <assert_failed>
 8009fe8:	e7a7      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8009fea:	f240 2107 	movw	r1, #519	; 0x207
 8009fee:	4829      	ldr	r0, [pc, #164]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8009ff0:	f7f8 fa42 	bl	8002478 <assert_failed>
 8009ff4:	6927      	ldr	r7, [r4, #16]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	e682      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x624>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8009ffa:	f44f 7106 	mov.w	r1, #536	; 0x218
 8009ffe:	4825      	ldr	r0, [pc, #148]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a000:	f7f8 fa3a 	bl	8002478 <assert_failed>
 800a004:	68e2      	ldr	r2, [r4, #12]
 800a006:	e69c      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a008:	f240 2117 	movw	r1, #535	; 0x217
 800a00c:	4821      	ldr	r0, [pc, #132]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a00e:	f7f8 fa33 	bl	8002478 <assert_failed>
 800a012:	e691      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800a014:	f240 2116 	movw	r1, #534	; 0x216
 800a018:	481e      	ldr	r0, [pc, #120]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a01a:	f7f8 fa2d 	bl	8002478 <assert_failed>
 800a01e:	e686      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a020:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800a024:	481b      	ldr	r0, [pc, #108]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a026:	f7f8 fa27 	bl	8002478 <assert_failed>
 800a02a:	68a7      	ldr	r7, [r4, #8]
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	e7a7      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800a030:	6a26      	ldr	r6, [r4, #32]
 800a032:	2e03      	cmp	r6, #3
 800a034:	d826      	bhi.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a036:	4918      	ldr	r1, [pc, #96]	; (800a098 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a038:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a03a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a03e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a042:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800a046:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800a04a:	4302      	orrs	r2, r0
 800a04c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800a050:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a054:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800a058:	e5d5      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800a05a:	f240 214f 	movw	r1, #591	; 0x24f
 800a05e:	480d      	ldr	r0, [pc, #52]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a060:	f7f8 fa0a 	bl	8002478 <assert_failed>
 800a064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a066:	1e59      	subs	r1, r3, #1
 800a068:	e5ab      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800a06a:	f240 214d 	movw	r1, #589	; 0x24d
 800a06e:	4809      	ldr	r0, [pc, #36]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a070:	f7f8 fa02 	bl	8002478 <assert_failed>
 800a074:	e5a0      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800a076:	4807      	ldr	r0, [pc, #28]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a078:	f240 2172 	movw	r1, #626	; 0x272
 800a07c:	f7f8 f9fc 	bl	8002478 <assert_failed>
 800a080:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a082:	e5d0      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800a084:	f240 2162 	movw	r1, #610	; 0x262
 800a088:	4802      	ldr	r0, [pc, #8]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a08a:	f7f8 f9f5 	bl	8002478 <assert_failed>
 800a08e:	6a26      	ldr	r6, [r4, #32]
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	e7d0      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a094:	08021624 	.word	0x08021624
 800a098:	40023800 	.word	0x40023800

0800a09c <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a09c:	b1f8      	cbz	r0, 800a0de <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a09e:	6802      	ldr	r2, [r0, #0]
{
 800a0a0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a0a2:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <HAL_RNG_Init+0x48>)
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d003      	beq.n	800a0b2 <HAL_RNG_Init+0x16>
 800a0aa:	21a3      	movs	r1, #163	; 0xa3
 800a0ac:	480e      	ldr	r0, [pc, #56]	; (800a0e8 <HAL_RNG_Init+0x4c>)
 800a0ae:	f7f8 f9e3 	bl	8002478 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a0b2:	7963      	ldrb	r3, [r4, #5]
 800a0b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0b8:	b163      	cbz	r3, 800a0d4 <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a0ba:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0bc:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a0be:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800a0c0:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0c2:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800a0c4:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800a0c6:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800a0c8:	f043 0304 	orr.w	r3, r3, #4
 800a0cc:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800a0ce:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a0d0:	60a2      	str	r2, [r4, #8]
}
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800a0d4:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f7f9 f9b8 	bl	800344c <HAL_RNG_MspInit>
 800a0dc:	e7ed      	b.n	800a0ba <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800a0de:	2001      	movs	r0, #1
}
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	50060800 	.word	0x50060800
 800a0e8:	08021660 	.word	0x08021660

0800a0ec <SPI_WaitFifoStateUntilTimeout.part.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a0ec:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ee:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0f2:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0f4:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0f8:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800a0fc:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0fe:	d013      	beq.n	800a128 <SPI_WaitFifoStateUntilTimeout.part.1+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a100:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a102:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a106:	d107      	bne.n	800a118 <SPI_WaitFifoStateUntilTimeout.part.1+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800a108:	6811      	ldr	r1, [r2, #0]
 800a10a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a10e:	6011      	str	r1, [r2, #0]
 800a110:	6811      	ldr	r1, [r2, #0]
 800a112:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800a116:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a118:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a11a:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800a11c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800a11e:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800a122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800a126:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a128:	6899      	ldr	r1, [r3, #8]
 800a12a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a12e:	d002      	beq.n	800a136 <SPI_WaitFifoStateUntilTimeout.part.1+0x4a>
 800a130:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a134:	d1e4      	bne.n	800a100 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>
          __HAL_SPI_DISABLE(hspi);
 800a136:	6811      	ldr	r1, [r2, #0]
 800a138:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a13c:	6011      	str	r1, [r2, #0]
 800a13e:	e7df      	b.n	800a100 <SPI_WaitFifoStateUntilTimeout.part.1+0x14>

0800a140 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	4605      	mov	r5, r0
 800a144:	460c      	mov	r4, r1
 800a146:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	e001      	b.n	800a150 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800a14c:	1c62      	adds	r2, r4, #1
 800a14e:	d104      	bne.n	800a15a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a150:	6898      	ldr	r0, [r3, #8]
 800a152:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a156:	d1f9      	bne.n	800a14c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 800a158:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a15a:	f7fa fb4f 	bl	80047fc <HAL_GetTick>
 800a15e:	1b80      	subs	r0, r0, r6
 800a160:	4284      	cmp	r4, r0
 800a162:	d8f1      	bhi.n	800a148 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800a164:	4628      	mov	r0, r5
}
 800a166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a16a:	f7ff bfbf 	b.w	800a0ec <SPI_WaitFifoStateUntilTimeout.part.1>
 800a16e:	bf00      	nop

0800a170 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	4606      	mov	r6, r0
 800a174:	460c      	mov	r4, r1
 800a176:	4615      	mov	r5, r2
 800a178:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800a17a:	6831      	ldr	r1, [r6, #0]
 800a17c:	e005      	b.n	800a18a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a17e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800a182:	d100      	bne.n	800a186 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a184:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a186:	1c6b      	adds	r3, r5, #1
 800a188:	d103      	bne.n	800a192 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800a18a:	6888      	ldr	r0, [r1, #8]
 800a18c:	4020      	ands	r0, r4
 800a18e:	d1f6      	bne.n	800a17e <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 800a190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a192:	f7fa fb33 	bl	80047fc <HAL_GetTick>
 800a196:	1bc0      	subs	r0, r0, r7
 800a198:	4285      	cmp	r5, r0
 800a19a:	d8ee      	bhi.n	800a17a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800a19c:	4630      	mov	r0, r6
}
 800a19e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1a2:	f7ff bfa3 	b.w	800a0ec <SPI_WaitFifoStateUntilTimeout.part.1>
 800a1a6:	bf00      	nop

0800a1a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a1b4:	462a      	mov	r2, r5
{
 800a1b6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1b8:	f7ff ffda 	bl	800a170 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800a1bc:	b970      	cbnz	r0, 800a1dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1be:	4632      	mov	r2, r6
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff ffbc 	bl	800a140 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800a1c8:	b940      	cbnz	r0, 800a1dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1ca:	4633      	mov	r3, r6
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7ff ffcc 	bl	800a170 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800a1d8:	b900      	cbnz	r0, 800a1dc <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800a1da:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1de:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e0:	f043 0320 	orr.w	r3, r3, #32
 800a1e4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f000 80f9 	beq.w	800a3e0 <HAL_SPI_Init+0x1f8>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a1ee:	6802      	ldr	r2, [r0, #0]
 800a1f0:	4b94      	ldr	r3, [pc, #592]	; (800a444 <HAL_SPI_Init+0x25c>)
 800a1f2:	4995      	ldr	r1, [pc, #596]	; (800a448 <HAL_SPI_Init+0x260>)
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	bf18      	it	ne
 800a1f8:	428a      	cmpne	r2, r1
 800a1fa:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800a1fe:	bf14      	ite	ne
 800a200:	2301      	movne	r3, #1
 800a202:	2300      	moveq	r3, #0
{
 800a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a208:	4d90      	ldr	r5, [pc, #576]	; (800a44c <HAL_SPI_Init+0x264>)
 800a20a:	4604      	mov	r4, r0
 800a20c:	4890      	ldr	r0, [pc, #576]	; (800a450 <HAL_SPI_Init+0x268>)
 800a20e:	42aa      	cmp	r2, r5
 800a210:	bf0c      	ite	eq
 800a212:	2300      	moveq	r3, #0
 800a214:	f003 0301 	andne.w	r3, r3, #1
 800a218:	4282      	cmp	r2, r0
 800a21a:	bf0c      	ite	eq
 800a21c:	2300      	moveq	r3, #0
 800a21e:	f003 0301 	andne.w	r3, r3, #1
 800a222:	428a      	cmp	r2, r1
 800a224:	bf0c      	ite	eq
 800a226:	2300      	moveq	r3, #0
 800a228:	f003 0301 	andne.w	r3, r3, #1
 800a22c:	b11b      	cbz	r3, 800a236 <HAL_SPI_Init+0x4e>
 800a22e:	4b89      	ldr	r3, [pc, #548]	; (800a454 <HAL_SPI_Init+0x26c>)
 800a230:	429a      	cmp	r2, r3
 800a232:	f040 80ee 	bne.w	800a412 <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	b13b      	cbz	r3, 800a24a <HAL_SPI_Init+0x62>
 800a23a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a23e:	d004      	beq.n	800a24a <HAL_SPI_Init+0x62>
 800a240:	f240 1145 	movw	r1, #325	; 0x145
 800a244:	4884      	ldr	r0, [pc, #528]	; (800a458 <HAL_SPI_Init+0x270>)
 800a246:	f7f8 f917 	bl	8002478 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800a250:	d003      	beq.n	800a25a <HAL_SPI_Init+0x72>
 800a252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a256:	f040 80c5 	bne.w	800a3e4 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a25a:	68e2      	ldr	r2, [r4, #12]
 800a25c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800a260:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800a264:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800a268:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a26c:	bf18      	it	ne
 800a26e:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800a272:	bf14      	ite	ne
 800a274:	2301      	movne	r3, #1
 800a276:	2300      	moveq	r3, #0
 800a278:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800a27c:	bf0c      	ite	eq
 800a27e:	2300      	moveq	r3, #0
 800a280:	f003 0301 	andne.w	r3, r3, #1
 800a284:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a288:	bf0c      	ite	eq
 800a28a:	2300      	moveq	r3, #0
 800a28c:	f003 0301 	andne.w	r3, r3, #1
 800a290:	b12b      	cbz	r3, 800a29e <HAL_SPI_Init+0xb6>
 800a292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a296:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a29a:	f040 80cc 	bne.w	800a436 <HAL_SPI_Init+0x24e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a29e:	69a3      	ldr	r3, [r4, #24]
 800a2a0:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a2a4:	d003      	beq.n	800a2ae <HAL_SPI_Init+0xc6>
 800a2a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2aa:	f040 80a1 	bne.w	800a3f0 <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a2ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b0:	f033 0308 	bics.w	r3, r3, #8
 800a2b4:	d17f      	bne.n	800a3b6 <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	f023 0318 	bic.w	r3, r3, #24
 800a2bc:	2b20      	cmp	r3, #32
 800a2be:	d002      	beq.n	800a2c6 <HAL_SPI_Init+0xde>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f040 80b2 	bne.w	800a42a <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a2c6:	6a23      	ldr	r3, [r4, #32]
 800a2c8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a2cc:	d169      	bne.n	800a3a2 <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d0:	f033 0210 	bics.w	r2, r3, #16
 800a2d4:	d17b      	bne.n	800a3ce <HAL_SPI_Init+0x1e6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2d6:	b943      	cbnz	r3, 800a2ea <HAL_SPI_Init+0x102>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	f033 0302 	bics.w	r3, r3, #2
 800a2de:	f040 809e 	bne.w	800a41e <HAL_SPI_Init+0x236>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a2e2:	6963      	ldr	r3, [r4, #20]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	f200 808e 	bhi.w	800a406 <HAL_SPI_Init+0x21e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2ea:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2f0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04d      	beq.n	800a396 <HAL_SPI_Init+0x1ae>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2fa:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a2fc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800a2fe:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a300:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800a304:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a308:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800a30c:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a30e:	bf94      	ite	ls
 800a310:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 800a314:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800a316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a31a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a31e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a320:	d135      	bne.n	800a38e <HAL_SPI_Init+0x1a6>
 800a322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a326:	b92b      	cbnz	r3, 800a334 <HAL_SPI_Init+0x14c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a328:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a32c:	bf8c      	ite	hi
 800a32e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a330:	2301      	movls	r3, #1
 800a332:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a334:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a336:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	6920      	ldr	r0, [r4, #16]
 800a33e:	430b      	orrs	r3, r1
 800a340:	6961      	ldr	r1, [r4, #20]
 800a342:	4303      	orrs	r3, r0
 800a344:	430b      	orrs	r3, r1
 800a346:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800a34a:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a34c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a34e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a352:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a356:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a358:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a35a:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800a35e:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a360:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a364:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a366:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800a36a:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a36e:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a372:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a374:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a376:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a378:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a37a:	69d3      	ldr	r3, [r2, #28]
 800a37c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a380:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a382:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a386:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800a38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a38e:	2300      	movs	r3, #0
 800a390:	461e      	mov	r6, r3
 800a392:	62a3      	str	r3, [r4, #40]	; 0x28
 800a394:	e7c6      	b.n	800a324 <HAL_SPI_Init+0x13c>
    hspi->Lock = HAL_UNLOCKED;
 800a396:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800a39a:	4620      	mov	r0, r4
 800a39c:	f7f9 f86c 	bl	8003478 <HAL_SPI_MspInit>
 800a3a0:	e7ab      	b.n	800a2fa <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a3a2:	f240 114b 	movw	r1, #331	; 0x14b
 800a3a6:	482c      	ldr	r0, [pc, #176]	; (800a458 <HAL_SPI_Init+0x270>)
 800a3a8:	f7f8 f866 	bl	8002478 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ae:	f033 0210 	bics.w	r2, r3, #16
 800a3b2:	d090      	beq.n	800a2d6 <HAL_SPI_Init+0xee>
 800a3b4:	e00b      	b.n	800a3ce <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a3b6:	f240 1149 	movw	r1, #329	; 0x149
 800a3ba:	4827      	ldr	r0, [pc, #156]	; (800a458 <HAL_SPI_Init+0x270>)
 800a3bc:	f7f8 f85c 	bl	8002478 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a3c0:	69e3      	ldr	r3, [r4, #28]
 800a3c2:	f023 0318 	bic.w	r3, r3, #24
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f47f af7a 	bne.w	800a2c0 <HAL_SPI_Init+0xd8>
 800a3cc:	e77b      	b.n	800a2c6 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a3ce:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a3d2:	4821      	ldr	r0, [pc, #132]	; (800a458 <HAL_SPI_Init+0x270>)
 800a3d4:	f7f8 f850 	bl	8002478 <assert_failed>
 800a3d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d185      	bne.n	800a2ea <HAL_SPI_Init+0x102>
 800a3de:	e77b      	b.n	800a2d8 <HAL_SPI_Init+0xf0>
    return HAL_ERROR;
 800a3e0:	2001      	movs	r0, #1
}
 800a3e2:	4770      	bx	lr
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a3e4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a3e8:	481b      	ldr	r0, [pc, #108]	; (800a458 <HAL_SPI_Init+0x270>)
 800a3ea:	f7f8 f845 	bl	8002478 <assert_failed>
 800a3ee:	e734      	b.n	800a25a <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a3f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a3f4:	4818      	ldr	r0, [pc, #96]	; (800a458 <HAL_SPI_Init+0x270>)
 800a3f6:	f7f8 f83f 	bl	8002478 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a3fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3fc:	f033 0308 	bics.w	r3, r3, #8
 800a400:	f43f af59 	beq.w	800a2b6 <HAL_SPI_Init+0xce>
 800a404:	e7d7      	b.n	800a3b6 <HAL_SPI_Init+0x1ce>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a406:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a40a:	4813      	ldr	r0, [pc, #76]	; (800a458 <HAL_SPI_Init+0x270>)
 800a40c:	f7f8 f834 	bl	8002478 <assert_failed>
 800a410:	e76b      	b.n	800a2ea <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a412:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a416:	4810      	ldr	r0, [pc, #64]	; (800a458 <HAL_SPI_Init+0x270>)
 800a418:	f7f8 f82e 	bl	8002478 <assert_failed>
 800a41c:	e70b      	b.n	800a236 <HAL_SPI_Init+0x4e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a41e:	f240 114f 	movw	r1, #335	; 0x14f
 800a422:	480d      	ldr	r0, [pc, #52]	; (800a458 <HAL_SPI_Init+0x270>)
 800a424:	f7f8 f828 	bl	8002478 <assert_failed>
 800a428:	e75b      	b.n	800a2e2 <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a42a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a42e:	480a      	ldr	r0, [pc, #40]	; (800a458 <HAL_SPI_Init+0x270>)
 800a430:	f7f8 f822 	bl	8002478 <assert_failed>
 800a434:	e747      	b.n	800a2c6 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a436:	f240 1147 	movw	r1, #327	; 0x147
 800a43a:	4807      	ldr	r0, [pc, #28]	; (800a458 <HAL_SPI_Init+0x270>)
 800a43c:	f7f8 f81c 	bl	8002478 <assert_failed>
 800a440:	e72d      	b.n	800a29e <HAL_SPI_Init+0xb6>
 800a442:	bf00      	nop
 800a444:	40013000 	.word	0x40013000
 800a448:	40003800 	.word	0x40003800
 800a44c:	40003c00 	.word	0x40003c00
 800a450:	40013400 	.word	0x40013400
 800a454:	40015400 	.word	0x40015400
 800a458:	08021698 	.word	0x08021698

0800a45c <HAL_SPI_Transmit>:
{
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a462:	6883      	ldr	r3, [r0, #8]
{
 800a464:	b082      	sub	sp, #8
 800a466:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a468:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800a46c:	4688      	mov	r8, r1
 800a46e:	4617      	mov	r7, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a470:	f040 8081 	bne.w	800a576 <HAL_SPI_Transmit+0x11a>
  __HAL_LOCK(hspi);
 800a474:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	f000 8086 	beq.w	800a58a <HAL_SPI_Transmit+0x12e>
 800a47e:	2301      	movs	r3, #1
 800a480:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800a484:	f7fa f9ba 	bl	80047fc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a488:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800a48c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d009      	beq.n	800a4a6 <HAL_SPI_Transmit+0x4a>
    errorcode = HAL_BUSY;
 800a492:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a494:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800a496:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800a498:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a49c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800a4a0:	b002      	add	sp, #8
 800a4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800a4a6:	f1b8 0f00 	cmp.w	r8, #0
 800a4aa:	d072      	beq.n	800a592 <HAL_SPI_Transmit+0x136>
 800a4ac:	fab7 f387 	clz	r3, r7
 800a4b0:	095b      	lsrs	r3, r3, #5
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d16d      	bne.n	800a592 <HAL_SPI_Transmit+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4b6:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4b8:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a4ba:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4c0:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800a4c4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4c8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a4ca:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a4ce:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a4d0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a4d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a4d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800a4da:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4dc:	d103      	bne.n	800a4e6 <HAL_SPI_Transmit+0x8a>
    SPI_1LINE_TX(hspi);
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4e4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	0652      	lsls	r2, r2, #25
 800a4ea:	d403      	bmi.n	800a4f4 <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	f1a7 0701 	sub.w	r7, r7, #1
 800a4f8:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4fa:	68e2      	ldr	r2, [r4, #12]
 800a4fc:	fab7 f787 	clz	r7, r7
 800a500:	097f      	lsrs	r7, r7, #5
 800a502:	2900      	cmp	r1, #0
 800a504:	bf08      	it	eq
 800a506:	2701      	moveq	r7, #1
 800a508:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800a50c:	d94c      	bls.n	800a5a8 <HAL_SPI_Transmit+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a50e:	b147      	cbz	r7, 800a522 <HAL_SPI_Transmit+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a510:	4642      	mov	r2, r8
 800a512:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a516:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800a518:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a51a:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29b      	uxth	r3, r3
 800a520:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a522:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a524:	b29b      	uxth	r3, r3
 800a526:	b183      	cbz	r3, 800a54a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	0790      	lsls	r0, r2, #30
 800a52e:	d532      	bpl.n	800a596 <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a530:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a532:	f831 2b02 	ldrh.w	r2, [r1], #2
 800a536:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800a538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a53a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b29b      	uxth	r3, r3
 800a540:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a542:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a544:	b29b      	uxth	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ee      	bne.n	800a528 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a54a:	4632      	mov	r2, r6
 800a54c:	4629      	mov	r1, r5
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff fe2a 	bl	800a1a8 <SPI_EndRxTxTransaction>
 800a554:	b108      	cbz	r0, 800a55a <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a556:	2320      	movs	r3, #32
 800a558:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	b933      	cbnz	r3, 800a56c <HAL_SPI_Transmit+0x110>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a55e:	6822      	ldr	r2, [r4, #0]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	68d3      	ldr	r3, [r2, #12]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	6893      	ldr	r3, [r2, #8]
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a56c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800a56e:	3000      	adds	r0, #0
 800a570:	bf18      	it	ne
 800a572:	2001      	movne	r0, #1
error:
 800a574:	e78e      	b.n	800a494 <HAL_SPI_Transmit+0x38>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a576:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800a57a:	4827      	ldr	r0, [pc, #156]	; (800a618 <HAL_SPI_Transmit+0x1bc>)
 800a57c:	f7f7 ff7c 	bl	8002478 <assert_failed>
  __HAL_LOCK(hspi);
 800a580:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a584:	2b01      	cmp	r3, #1
 800a586:	f47f af7a 	bne.w	800a47e <HAL_SPI_Transmit+0x22>
 800a58a:	2002      	movs	r0, #2
}
 800a58c:	b002      	add	sp, #8
 800a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 800a592:	2001      	movs	r0, #1
 800a594:	e77e      	b.n	800a494 <HAL_SPI_Transmit+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a596:	f7fa f931 	bl	80047fc <HAL_GetTick>
 800a59a:	1b80      	subs	r0, r0, r6
 800a59c:	42a8      	cmp	r0, r5
 800a59e:	d3c0      	bcc.n	800a522 <HAL_SPI_Transmit+0xc6>
 800a5a0:	1c69      	adds	r1, r5, #1
 800a5a2:	d0be      	beq.n	800a522 <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800a5a4:	2003      	movs	r0, #3
 800a5a6:	e775      	b.n	800a494 <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5a8:	b16f      	cbz	r7, 800a5c6 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800a5aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a5ac:	2a01      	cmp	r2, #1
 800a5ae:	d92f      	bls.n	800a610 <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	e015      	b.n	800a5e0 <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5b4:	780a      	ldrb	r2, [r1, #0]
 800a5b6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800a5b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800a5ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a5bc:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800a5be:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800a5c0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800a5c2:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800a5c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a5c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0bd      	beq.n	800a54a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	0792      	lsls	r2, r2, #30
 800a5d4:	d514      	bpl.n	800a600 <HAL_SPI_Transmit+0x1a4>
        if (hspi->TxXferCount > 1U)
 800a5d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a5d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5da:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5dc:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800a5de:	d9e9      	bls.n	800a5b4 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5e0:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a5e4:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800a5e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5e8:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a5ea:	3b02      	subs	r3, #2
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800a5f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0a8      	beq.n	800a54a <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	0792      	lsls	r2, r2, #30
 800a5fe:	d4ea      	bmi.n	800a5d6 <HAL_SPI_Transmit+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a600:	f7fa f8fc 	bl	80047fc <HAL_GetTick>
 800a604:	1b80      	subs	r0, r0, r6
 800a606:	42a8      	cmp	r0, r5
 800a608:	d3dd      	bcc.n	800a5c6 <HAL_SPI_Transmit+0x16a>
 800a60a:	1c6b      	adds	r3, r5, #1
 800a60c:	d0db      	beq.n	800a5c6 <HAL_SPI_Transmit+0x16a>
 800a60e:	e7c9      	b.n	800a5a4 <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a610:	f898 2000 	ldrb.w	r2, [r8]
 800a614:	e7cf      	b.n	800a5b6 <HAL_SPI_Transmit+0x15a>
 800a616:	bf00      	nop
 800a618:	08021698 	.word	0x08021698

0800a61c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a61c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a61e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a620:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a622:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800a626:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a628:	4a0f      	ldr	r2, [pc, #60]	; (800a668 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a62a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800a62c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a62e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800a630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800a634:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a636:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63a:	4d0c      	ldr	r5, [pc, #48]	; (800a66c <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a63c:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63e:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800a640:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a644:	d00a      	beq.n	800a65c <TIM_OC5_SetConfig+0x40>
 800a646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a64a:	42a8      	cmp	r0, r5
 800a64c:	d006      	beq.n	800a65c <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a64e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a650:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a652:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800a654:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a656:	6203      	str	r3, [r0, #32]
}
 800a658:	bcf0      	pop	{r4, r5, r6, r7}
 800a65a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a65c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a660:	694d      	ldr	r5, [r1, #20]
 800a662:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800a666:	e7f2      	b.n	800a64e <TIM_OC5_SetConfig+0x32>
 800a668:	fffeff8f 	.word	0xfffeff8f
 800a66c:	40010000 	.word	0x40010000

0800a670 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a670:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a672:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a674:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a676:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a67a:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a67c:	4a0f      	ldr	r2, [pc, #60]	; (800a6bc <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a67e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800a680:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a682:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800a688:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a68a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68e:	4d0c      	ldr	r5, [pc, #48]	; (800a6c0 <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a690:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a692:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a694:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a698:	d00a      	beq.n	800a6b0 <TIM_OC6_SetConfig+0x40>
 800a69a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a69e:	42a8      	cmp	r0, r5
 800a6a0:	d006      	beq.n	800a6b0 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a6a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a6a6:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800a6a8:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6aa:	6203      	str	r3, [r0, #32]
}
 800a6ac:	bcf0      	pop	{r4, r5, r6, r7}
 800a6ae:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6b0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6b4:	694d      	ldr	r5, [r1, #20]
 800a6b6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800a6ba:	e7f2      	b.n	800a6a2 <TIM_OC6_SetConfig+0x32>
 800a6bc:	feff8fff 	.word	0xfeff8fff
 800a6c0:	40010000 	.word	0x40010000

0800a6c4 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6c4:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6c6:	4b2c      	ldr	r3, [pc, #176]	; (800a778 <TIM_OC1_SetConfig+0xb4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
{
 800a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d0:	460e      	mov	r6, r1
  tmpccer |= OC_Config->OCPolarity;
 800a6d2:	6889      	ldr	r1, [r1, #8]
{
 800a6d4:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800a6d6:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6d8:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a6da:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a6dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a6e0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800a6e2:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6e6:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6e8:	4a24      	ldr	r2, [pc, #144]	; (800a77c <TIM_OC1_SetConfig+0xb8>)
  tmpccer |= OC_Config->OCPolarity;
 800a6ea:	430d      	orrs	r5, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6ec:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800a6ee:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6f2:	d00a      	beq.n	800a70a <TIM_OC1_SetConfig+0x46>
 800a6f4:	4b22      	ldr	r3, [pc, #136]	; (800a780 <TIM_OC1_SetConfig+0xbc>)
 800a6f6:	4298      	cmp	r0, r3
 800a6f8:	d007      	beq.n	800a70a <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800a6fa:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a6fc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a700:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800a702:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800a704:	6225      	str	r5, [r4, #32]
}
 800a706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a70a:	68f2      	ldr	r2, [r6, #12]
 800a70c:	f032 0308 	bics.w	r3, r2, #8
 800a710:	d12a      	bne.n	800a768 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800a712:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a716:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800a718:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a71a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800a71e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a722:	d117      	bne.n	800a754 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a724:	6973      	ldr	r3, [r6, #20]
 800a726:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a72a:	d106      	bne.n	800a73a <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a72c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800a730:	69b1      	ldr	r1, [r6, #24]
 800a732:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800a734:	ea42 0803 	orr.w	r8, r2, r3
 800a738:	e7df      	b.n	800a6fa <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a73a:	f241 7184 	movw	r1, #6020	; 0x1784
 800a73e:	4811      	ldr	r0, [pc, #68]	; (800a784 <TIM_OC1_SetConfig+0xc0>)
 800a740:	f7f7 fe9a 	bl	8002478 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a744:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800a748:	69b1      	ldr	r1, [r6, #24]
 800a74a:	6973      	ldr	r3, [r6, #20]
 800a74c:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800a74e:	ea42 0803 	orr.w	r8, r2, r3
 800a752:	e7d2      	b.n	800a6fa <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a754:	f241 7183 	movw	r1, #6019	; 0x1783
 800a758:	480a      	ldr	r0, [pc, #40]	; (800a784 <TIM_OC1_SetConfig+0xc0>)
 800a75a:	f7f7 fe8d 	bl	8002478 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a75e:	6973      	ldr	r3, [r6, #20]
 800a760:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a764:	d0e2      	beq.n	800a72c <TIM_OC1_SetConfig+0x68>
 800a766:	e7e8      	b.n	800a73a <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a768:	f241 7176 	movw	r1, #6006	; 0x1776
 800a76c:	4805      	ldr	r0, [pc, #20]	; (800a784 <TIM_OC1_SetConfig+0xc0>)
 800a76e:	f7f7 fe83 	bl	8002478 <assert_failed>
 800a772:	68f2      	ldr	r2, [r6, #12]
 800a774:	e7cd      	b.n	800a712 <TIM_OC1_SetConfig+0x4e>
 800a776:	bf00      	nop
 800a778:	fffeff8c 	.word	0xfffeff8c
 800a77c:	40010000 	.word	0x40010000
 800a780:	40010400 	.word	0x40010400
 800a784:	080216d0 	.word	0x080216d0

0800a788 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a788:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a78a:	4b2e      	ldr	r3, [pc, #184]	; (800a844 <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a78c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a796:	6889      	ldr	r1, [r1, #8]
{
 800a798:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800a79a:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a79c:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a79e:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a7a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800a7a4:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800a7a6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7aa:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7ac:	4a26      	ldr	r2, [pc, #152]	; (800a848 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7ae:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7b2:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800a7b4:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7b8:	d00a      	beq.n	800a7d0 <TIM_OC3_SetConfig+0x48>
 800a7ba:	4b24      	ldr	r3, [pc, #144]	; (800a84c <TIM_OC3_SetConfig+0xc4>)
 800a7bc:	4298      	cmp	r0, r3
 800a7be:	d007      	beq.n	800a7d0 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800a7c0:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a7c2:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a7c6:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800a7c8:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800a7ca:	6225      	str	r5, [r4, #32]
}
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a7d0:	68f2      	ldr	r2, [r6, #12]
 800a7d2:	f032 0308 	bics.w	r3, r2, #8
 800a7d6:	d12d      	bne.n	800a834 <TIM_OC3_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7d8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a7dc:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7de:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a7e2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7e6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a7ea:	d119      	bne.n	800a820 <TIM_OC3_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a7ec:	6973      	ldr	r3, [r6, #20]
 800a7ee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a7f2:	d107      	bne.n	800a804 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7f4:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7f8:	69b1      	ldr	r1, [r6, #24]
 800a7fa:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a7fe:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800a802:	e7dd      	b.n	800a7c0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a804:	f641 011a 	movw	r1, #6170	; 0x181a
 800a808:	4811      	ldr	r0, [pc, #68]	; (800a850 <TIM_OC3_SetConfig+0xc8>)
 800a80a:	f7f7 fe35 	bl	8002478 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a80e:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a812:	69b1      	ldr	r1, [r6, #24]
 800a814:	6973      	ldr	r3, [r6, #20]
 800a816:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a81a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800a81e:	e7cf      	b.n	800a7c0 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a820:	f641 0119 	movw	r1, #6169	; 0x1819
 800a824:	480a      	ldr	r0, [pc, #40]	; (800a850 <TIM_OC3_SetConfig+0xc8>)
 800a826:	f7f7 fe27 	bl	8002478 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a82a:	6973      	ldr	r3, [r6, #20]
 800a82c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a830:	d0e0      	beq.n	800a7f4 <TIM_OC3_SetConfig+0x6c>
 800a832:	e7e7      	b.n	800a804 <TIM_OC3_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a834:	f641 010c 	movw	r1, #6156	; 0x180c
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <TIM_OC3_SetConfig+0xc8>)
 800a83a:	f7f7 fe1d 	bl	8002478 <assert_failed>
 800a83e:	68f2      	ldr	r2, [r6, #12]
 800a840:	e7ca      	b.n	800a7d8 <TIM_OC3_SetConfig+0x50>
 800a842:	bf00      	nop
 800a844:	fffeff8c 	.word	0xfffeff8c
 800a848:	40010000 	.word	0x40010000
 800a84c:	40010400 	.word	0x40010400
 800a850:	080216d0 	.word	0x080216d0

0800a854 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a854:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a856:	4b1b      	ldr	r3, [pc, #108]	; (800a8c4 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
{
 800a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85e:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a860:	6889      	ldr	r1, [r1, #8]
{
 800a862:	4604      	mov	r4, r0
 800a864:	b083      	sub	sp, #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a866:	683e      	ldr	r6, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a868:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800a86a:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a86c:	6842      	ldr	r2, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800a86e:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 800a872:	69c0      	ldr	r0, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a874:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a878:	4913      	ldr	r1, [pc, #76]	; (800a8c8 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a87a:	4003      	ands	r3, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a87c:	428c      	cmp	r4, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a87e:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a882:	d009      	beq.n	800a898 <TIM_OC4_SetConfig+0x44>
 800a884:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <TIM_OC4_SetConfig+0x78>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d006      	beq.n	800a898 <TIM_OC4_SetConfig+0x44>
  TIMx->CCR4 = OC_Config->Pulse;
 800a88a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800a88c:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a88e:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800a890:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800a892:	6225      	str	r5, [r4, #32]
}
 800a894:	b003      	add	sp, #12
 800a896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800a89e:	d104      	bne.n	800a8aa <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8a4:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800a8a8:	e7ef      	b.n	800a88a <TIM_OC4_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a8aa:	f641 0158 	movw	r1, #6232	; 0x1858
 800a8ae:	4808      	ldr	r0, [pc, #32]	; (800a8d0 <TIM_OC4_SetConfig+0x7c>)
 800a8b0:	9201      	str	r2, [sp, #4]
 800a8b2:	f7f7 fde1 	bl	8002478 <assert_failed>
 800a8b6:	9a01      	ldr	r2, [sp, #4]
 800a8b8:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8be:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800a8c2:	e7e2      	b.n	800a88a <TIM_OC4_SetConfig+0x36>
 800a8c4:	feff8cff 	.word	0xfeff8cff
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40010400 	.word	0x40010400
 800a8d0:	080216d0 	.word	0x080216d0

0800a8d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8d6:	6803      	ldr	r3, [r0, #0]
{
 800a8d8:	460c      	mov	r4, r1
 800a8da:	4606      	mov	r6, r0

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a8dc:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a8de:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a8e0:	4aac      	ldr	r2, [pc, #688]	; (800ab94 <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a8e2:	2830      	cmp	r0, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a8e8:	6825      	ldr	r5, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a8ea:	ea41 0100 	orr.w	r1, r1, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a8ee:	ea02 0201 	and.w	r2, r2, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a8f2:	ea42 0205 	orr.w	r2, r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800a8f6:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800a8f8:	f000 80c9 	beq.w	800aa8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800a8fc:	f240 80c2 	bls.w	800aa84 <TIM_SlaveTimer_SetConfig+0x1b0>
 800a900:	2850      	cmp	r0, #80	; 0x50
 800a902:	f000 8159 	beq.w	800abb8 <TIM_SlaveTimer_SetConfig+0x2e4>
 800a906:	d958      	bls.n	800a9ba <TIM_SlaveTimer_SetConfig+0xe6>
 800a908:	2860      	cmp	r0, #96	; 0x60
 800a90a:	f000 80ee 	beq.w	800aaea <TIM_SlaveTimer_SetConfig+0x216>
 800a90e:	2870      	cmp	r0, #112	; 0x70
 800a910:	f040 80e9 	bne.w	800aae6 <TIM_SlaveTimer_SetConfig+0x212>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a914:	4aa0      	ldr	r2, [pc, #640]	; (800ab98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800a916:	49a1      	ldr	r1, [pc, #644]	; (800ab9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	bf18      	it	ne
 800a91c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a920:	489f      	ldr	r0, [pc, #636]	; (800aba0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800a922:	bf14      	ite	ne
 800a924:	2201      	movne	r2, #1
 800a926:	2200      	moveq	r2, #0
 800a928:	428b      	cmp	r3, r1
 800a92a:	bf0c      	ite	eq
 800a92c:	2200      	moveq	r2, #0
 800a92e:	f002 0201 	andne.w	r2, r2, #1
 800a932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a936:	4283      	cmp	r3, r0
 800a938:	bf0c      	ite	eq
 800a93a:	2200      	moveq	r2, #0
 800a93c:	f002 0201 	andne.w	r2, r2, #1
 800a940:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800a944:	428b      	cmp	r3, r1
 800a946:	bf0c      	ite	eq
 800a948:	2200      	moveq	r2, #0
 800a94a:	f002 0201 	andne.w	r2, r2, #1
 800a94e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800a952:	4283      	cmp	r3, r0
 800a954:	bf0c      	ite	eq
 800a956:	2200      	moveq	r2, #0
 800a958:	f002 0201 	andne.w	r2, r2, #1
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf0c      	ite	eq
 800a960:	2200      	moveq	r2, #0
 800a962:	f002 0201 	andne.w	r2, r2, #1
 800a966:	b11a      	cbz	r2, 800a970 <TIM_SlaveTimer_SetConfig+0x9c>
 800a968:	4a8e      	ldr	r2, [pc, #568]	; (800aba4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	f040 81bf 	bne.w	800acee <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800a970:	68e3      	ldr	r3, [r4, #12]
 800a972:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a976:	f040 819c 	bne.w	800acb2 <TIM_SlaveTimer_SetConfig+0x3de>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	2b0a      	cmp	r3, #10
 800a97e:	bf18      	it	ne
 800a980:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800a984:	d003      	beq.n	800a98e <TIM_SlaveTimer_SetConfig+0xba>
 800a986:	f033 0302 	bics.w	r3, r3, #2
 800a98a:	f040 8198 	bne.w	800acbe <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a98e:	6921      	ldr	r1, [r4, #16]
 800a990:	290f      	cmp	r1, #15
 800a992:	d905      	bls.n	800a9a0 <TIM_SlaveTimer_SetConfig+0xcc>
 800a994:	f641 01ff 	movw	r1, #6399	; 0x18ff
 800a998:	4883      	ldr	r0, [pc, #524]	; (800aba8 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800a99a:	f7f7 fd6d 	bl	8002478 <assert_failed>
 800a99e:	6921      	ldr	r1, [r4, #16]
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9a0:	6835      	ldr	r5, [r6, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9a6:	68aa      	ldr	r2, [r5, #8]
 800a9a8:	68a4      	ldr	r4, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9aa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a9ae:	4323      	orrs	r3, r4
 800a9b0:	4313      	orrs	r3, r2

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9b6:	60ab      	str	r3, [r5, #8]
}
 800a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800a9ba:	2840      	cmp	r0, #64	; 0x40
 800a9bc:	f040 8093 	bne.w	800aae6 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a9c0:	4a75      	ldr	r2, [pc, #468]	; (800ab98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800a9c2:	4976      	ldr	r1, [pc, #472]	; (800ab9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	bf18      	it	ne
 800a9c8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a9cc:	4874      	ldr	r0, [pc, #464]	; (800aba0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800a9ce:	bf14      	ite	ne
 800a9d0:	2201      	movne	r2, #1
 800a9d2:	2200      	moveq	r2, #0
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2200      	moveq	r2, #0
 800a9da:	f002 0201 	andne.w	r2, r2, #1
 800a9de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9e2:	4283      	cmp	r3, r0
 800a9e4:	bf0c      	ite	eq
 800a9e6:	2200      	moveq	r2, #0
 800a9e8:	f002 0201 	andne.w	r2, r2, #1
 800a9ec:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf0c      	ite	eq
 800a9f4:	2200      	moveq	r2, #0
 800a9f6:	f002 0201 	andne.w	r2, r2, #1
 800a9fa:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800a9fe:	4283      	cmp	r3, r0
 800aa00:	bf0c      	ite	eq
 800aa02:	2200      	moveq	r2, #0
 800aa04:	f002 0201 	andne.w	r2, r2, #1
 800aa08:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	bf0c      	ite	eq
 800aa10:	2200      	moveq	r2, #0
 800aa12:	f002 0201 	andne.w	r2, r2, #1
 800aa16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa1a:	4283      	cmp	r3, r0
 800aa1c:	bf0c      	ite	eq
 800aa1e:	2200      	moveq	r2, #0
 800aa20:	f002 0201 	andne.w	r2, r2, #1
 800aa24:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	bf0c      	ite	eq
 800aa2c:	2200      	moveq	r2, #0
 800aa2e:	f002 0201 	andne.w	r2, r2, #1
 800aa32:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800aa36:	4283      	cmp	r3, r0
 800aa38:	bf0c      	ite	eq
 800aa3a:	2200      	moveq	r2, #0
 800aa3c:	f002 0201 	andne.w	r2, r2, #1
 800aa40:	428b      	cmp	r3, r1
 800aa42:	bf0c      	ite	eq
 800aa44:	2200      	moveq	r2, #0
 800aa46:	f002 0201 	andne.w	r2, r2, #1
 800aa4a:	b11a      	cbz	r2, 800aa54 <TIM_SlaveTimer_SetConfig+0x180>
 800aa4c:	4a57      	ldr	r2, [pc, #348]	; (800abac <TIM_SlaveTimer_SetConfig+0x2d8>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	f040 8159 	bne.w	800ad06 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	2b0f      	cmp	r3, #15
 800aa58:	f200 811e 	bhi.w	800ac98 <TIM_SlaveTimer_SetConfig+0x3c4>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	f000 8118 	beq.w	800ac94 <TIM_SlaveTimer_SetConfig+0x3c0>
      tmpccer = htim->Instance->CCER;
 800aa64:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800aa66:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800aa68:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800aa6a:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800aa6c:	6a19      	ldr	r1, [r3, #32]
 800aa6e:	f021 0101 	bic.w	r1, r1, #1
 800aa72:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800aa74:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800aa7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800aa7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800aa80:	621c      	str	r4, [r3, #32]
}
 800aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800aa84:	2810      	cmp	r0, #16
 800aa86:	d002      	beq.n	800aa8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800aa88:	2820      	cmp	r0, #32
 800aa8a:	d000      	beq.n	800aa8e <TIM_SlaveTimer_SetConfig+0x1ba>
 800aa8c:	bb58      	cbnz	r0, 800aae6 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aa8e:	4a42      	ldr	r2, [pc, #264]	; (800ab98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800aa90:	4942      	ldr	r1, [pc, #264]	; (800ab9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	bf18      	it	ne
 800aa96:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800aa9a:	4d41      	ldr	r5, [pc, #260]	; (800aba0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800aa9c:	4c44      	ldr	r4, [pc, #272]	; (800abb0 <TIM_SlaveTimer_SetConfig+0x2dc>)
 800aa9e:	bf14      	ite	ne
 800aaa0:	2201      	movne	r2, #1
 800aaa2:	2200      	moveq	r2, #0
 800aaa4:	4843      	ldr	r0, [pc, #268]	; (800abb4 <TIM_SlaveTimer_SetConfig+0x2e0>)
 800aaa6:	428b      	cmp	r3, r1
 800aaa8:	bf0c      	ite	eq
 800aaaa:	2200      	moveq	r2, #0
 800aaac:	f002 0201 	andne.w	r2, r2, #1
 800aab0:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800aab4:	42ab      	cmp	r3, r5
 800aab6:	bf0c      	ite	eq
 800aab8:	2200      	moveq	r2, #0
 800aaba:	f002 0201 	andne.w	r2, r2, #1
 800aabe:	42a3      	cmp	r3, r4
 800aac0:	bf0c      	ite	eq
 800aac2:	2200      	moveq	r2, #0
 800aac4:	f002 0201 	andne.w	r2, r2, #1
 800aac8:	4283      	cmp	r3, r0
 800aaca:	bf0c      	ite	eq
 800aacc:	2200      	moveq	r2, #0
 800aace:	f002 0201 	andne.w	r2, r2, #1
 800aad2:	428b      	cmp	r3, r1
 800aad4:	bf0c      	ite	eq
 800aad6:	2200      	moveq	r2, #0
 800aad8:	f002 0201 	andne.w	r2, r2, #1
 800aadc:	b11a      	cbz	r2, 800aae6 <TIM_SlaveTimer_SetConfig+0x212>
 800aade:	4a31      	ldr	r2, [pc, #196]	; (800aba4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	f040 80df 	bne.w	800aca4 <TIM_SlaveTimer_SetConfig+0x3d0>
  return HAL_OK;
 800aae6:	2000      	movs	r0, #0
}
 800aae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aaea:	4a2b      	ldr	r2, [pc, #172]	; (800ab98 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800aaec:	492b      	ldr	r1, [pc, #172]	; (800ab9c <TIM_SlaveTimer_SetConfig+0x2c8>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	bf18      	it	ne
 800aaf2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800aaf6:	482a      	ldr	r0, [pc, #168]	; (800aba0 <TIM_SlaveTimer_SetConfig+0x2cc>)
 800aaf8:	bf14      	ite	ne
 800aafa:	2201      	movne	r2, #1
 800aafc:	2200      	moveq	r2, #0
 800aafe:	428b      	cmp	r3, r1
 800ab00:	bf0c      	ite	eq
 800ab02:	2200      	moveq	r2, #0
 800ab04:	f002 0201 	andne.w	r2, r2, #1
 800ab08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	bf0c      	ite	eq
 800ab10:	2200      	moveq	r2, #0
 800ab12:	f002 0201 	andne.w	r2, r2, #1
 800ab16:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ab1a:	428b      	cmp	r3, r1
 800ab1c:	bf0c      	ite	eq
 800ab1e:	2200      	moveq	r2, #0
 800ab20:	f002 0201 	andne.w	r2, r2, #1
 800ab24:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ab28:	4283      	cmp	r3, r0
 800ab2a:	bf0c      	ite	eq
 800ab2c:	2200      	moveq	r2, #0
 800ab2e:	f002 0201 	andne.w	r2, r2, #1
 800ab32:	428b      	cmp	r3, r1
 800ab34:	bf0c      	ite	eq
 800ab36:	2200      	moveq	r2, #0
 800ab38:	f002 0201 	andne.w	r2, r2, #1
 800ab3c:	b11a      	cbz	r2, 800ab46 <TIM_SlaveTimer_SetConfig+0x272>
 800ab3e:	4a19      	ldr	r2, [pc, #100]	; (800aba4 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	f040 80ce 	bne.w	800ace2 <TIM_SlaveTimer_SetConfig+0x40e>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	2b0a      	cmp	r3, #10
 800ab4a:	bf18      	it	ne
 800ab4c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ab50:	d003      	beq.n	800ab5a <TIM_SlaveTimer_SetConfig+0x286>
 800ab52:	f033 0302 	bics.w	r3, r3, #2
 800ab56:	f040 80be 	bne.w	800acd6 <TIM_SlaveTimer_SetConfig+0x402>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ab5a:	6925      	ldr	r5, [r4, #16]
 800ab5c:	2d0f      	cmp	r5, #15
 800ab5e:	d905      	bls.n	800ab6c <TIM_SlaveTimer_SetConfig+0x298>
 800ab60:	f641 1135 	movw	r1, #6453	; 0x1935
 800ab64:	4810      	ldr	r0, [pc, #64]	; (800aba8 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800ab66:	f7f7 fc87 	bl	8002478 <assert_failed>
 800ab6a:	6925      	ldr	r5, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab6c:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800ab6e:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab70:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab72:	6a1c      	ldr	r4, [r3, #32]
 800ab74:	f024 0410 	bic.w	r4, r4, #16
 800ab78:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab7a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ab7c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab7e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab86:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ab8e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab90:	621a      	str	r2, [r3, #32]
}
 800ab92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab94:	fffefff8 	.word	0xfffefff8
 800ab98:	40010000 	.word	0x40010000
 800ab9c:	40000400 	.word	0x40000400
 800aba0:	40000800 	.word	0x40000800
 800aba4:	40001800 	.word	0x40001800
 800aba8:	080216d0 	.word	0x080216d0
 800abac:	40002000 	.word	0x40002000
 800abb0:	40000c00 	.word	0x40000c00
 800abb4:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800abb8:	4a56      	ldr	r2, [pc, #344]	; (800ad14 <TIM_SlaveTimer_SetConfig+0x440>)
 800abba:	4957      	ldr	r1, [pc, #348]	; (800ad18 <TIM_SlaveTimer_SetConfig+0x444>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bf18      	it	ne
 800abc0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800abc4:	4855      	ldr	r0, [pc, #340]	; (800ad1c <TIM_SlaveTimer_SetConfig+0x448>)
 800abc6:	bf14      	ite	ne
 800abc8:	2201      	movne	r2, #1
 800abca:	2200      	moveq	r2, #0
 800abcc:	428b      	cmp	r3, r1
 800abce:	bf0c      	ite	eq
 800abd0:	2200      	moveq	r2, #0
 800abd2:	f002 0201 	andne.w	r2, r2, #1
 800abd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abda:	4283      	cmp	r3, r0
 800abdc:	bf0c      	ite	eq
 800abde:	2200      	moveq	r2, #0
 800abe0:	f002 0201 	andne.w	r2, r2, #1
 800abe4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800abe8:	428b      	cmp	r3, r1
 800abea:	bf0c      	ite	eq
 800abec:	2200      	moveq	r2, #0
 800abee:	f002 0201 	andne.w	r2, r2, #1
 800abf2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800abf6:	4283      	cmp	r3, r0
 800abf8:	bf0c      	ite	eq
 800abfa:	2200      	moveq	r2, #0
 800abfc:	f002 0201 	andne.w	r2, r2, #1
 800ac00:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf0c      	ite	eq
 800ac08:	2200      	moveq	r2, #0
 800ac0a:	f002 0201 	andne.w	r2, r2, #1
 800ac0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac12:	4283      	cmp	r3, r0
 800ac14:	bf0c      	ite	eq
 800ac16:	2200      	moveq	r2, #0
 800ac18:	f002 0201 	andne.w	r2, r2, #1
 800ac1c:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ac20:	428b      	cmp	r3, r1
 800ac22:	bf0c      	ite	eq
 800ac24:	2200      	moveq	r2, #0
 800ac26:	f002 0201 	andne.w	r2, r2, #1
 800ac2a:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ac2e:	4283      	cmp	r3, r0
 800ac30:	bf0c      	ite	eq
 800ac32:	2200      	moveq	r2, #0
 800ac34:	f002 0201 	andne.w	r2, r2, #1
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2200      	moveq	r2, #0
 800ac3e:	f002 0201 	andne.w	r2, r2, #1
 800ac42:	b112      	cbz	r2, 800ac4a <TIM_SlaveTimer_SetConfig+0x376>
 800ac44:	4a36      	ldr	r2, [pc, #216]	; (800ad20 <TIM_SlaveTimer_SetConfig+0x44c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d157      	bne.n	800acfa <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	2b0a      	cmp	r3, #10
 800ac4e:	bf18      	it	ne
 800ac50:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ac54:	d002      	beq.n	800ac5c <TIM_SlaveTimer_SetConfig+0x388>
 800ac56:	f033 0302 	bics.w	r3, r3, #2
 800ac5a:	d136      	bne.n	800acca <TIM_SlaveTimer_SetConfig+0x3f6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ac5c:	6927      	ldr	r7, [r4, #16]
 800ac5e:	2f0f      	cmp	r7, #15
 800ac60:	d905      	bls.n	800ac6e <TIM_SlaveTimer_SetConfig+0x39a>
 800ac62:	f641 1127 	movw	r1, #6439	; 0x1927
 800ac66:	482f      	ldr	r0, [pc, #188]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ac68:	f7f7 fc06 	bl	8002478 <assert_failed>
 800ac6c:	6927      	ldr	r7, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac6e:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800ac70:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac72:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800ac74:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac76:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac78:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac7c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800ac80:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac82:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac84:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac8a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ac8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac90:	6219      	str	r1, [r3, #32]
}
 800ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800ac94:	2001      	movs	r0, #1
}
 800ac96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ac98:	f641 110c 	movw	r1, #6412	; 0x190c
 800ac9c:	4821      	ldr	r0, [pc, #132]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ac9e:	f7f7 fbeb 	bl	8002478 <assert_failed>
 800aca2:	e6db      	b.n	800aa5c <TIM_SlaveTimer_SetConfig+0x188>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aca4:	f641 1144 	movw	r1, #6468	; 0x1944
 800aca8:	481e      	ldr	r0, [pc, #120]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acaa:	f7f7 fbe5 	bl	8002478 <assert_failed>
  return HAL_OK;
 800acae:	2000      	movs	r0, #0
}
 800acb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800acb2:	f641 01fd 	movw	r1, #6397	; 0x18fd
 800acb6:	481b      	ldr	r0, [pc, #108]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acb8:	f7f7 fbde 	bl	8002478 <assert_failed>
 800acbc:	e65d      	b.n	800a97a <TIM_SlaveTimer_SetConfig+0xa6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800acbe:	f641 01fe 	movw	r1, #6398	; 0x18fe
 800acc2:	4818      	ldr	r0, [pc, #96]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acc4:	f7f7 fbd8 	bl	8002478 <assert_failed>
 800acc8:	e661      	b.n	800a98e <TIM_SlaveTimer_SetConfig+0xba>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800acca:	f641 1126 	movw	r1, #6438	; 0x1926
 800acce:	4815      	ldr	r0, [pc, #84]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acd0:	f7f7 fbd2 	bl	8002478 <assert_failed>
 800acd4:	e7c2      	b.n	800ac5c <TIM_SlaveTimer_SetConfig+0x388>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800acd6:	f641 1134 	movw	r1, #6452	; 0x1934
 800acda:	4812      	ldr	r0, [pc, #72]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acdc:	f7f7 fbcc 	bl	8002478 <assert_failed>
 800ace0:	e73b      	b.n	800ab5a <TIM_SlaveTimer_SetConfig+0x286>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ace2:	f641 1133 	movw	r1, #6451	; 0x1933
 800ace6:	480f      	ldr	r0, [pc, #60]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ace8:	f7f7 fbc6 	bl	8002478 <assert_failed>
 800acec:	e72b      	b.n	800ab46 <TIM_SlaveTimer_SetConfig+0x272>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800acee:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800acf2:	480c      	ldr	r0, [pc, #48]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800acf4:	f7f7 fbc0 	bl	8002478 <assert_failed>
 800acf8:	e63a      	b.n	800a970 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800acfa:	f641 1125 	movw	r1, #6437	; 0x1925
 800acfe:	4809      	ldr	r0, [pc, #36]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ad00:	f7f7 fbba 	bl	8002478 <assert_failed>
 800ad04:	e7a1      	b.n	800ac4a <TIM_SlaveTimer_SetConfig+0x376>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ad06:	f641 110b 	movw	r1, #6411	; 0x190b
 800ad0a:	4806      	ldr	r0, [pc, #24]	; (800ad24 <TIM_SlaveTimer_SetConfig+0x450>)
 800ad0c:	f7f7 fbb4 	bl	8002478 <assert_failed>
 800ad10:	e6a0      	b.n	800aa54 <TIM_SlaveTimer_SetConfig+0x180>
 800ad12:	bf00      	nop
 800ad14:	40010000 	.word	0x40010000
 800ad18:	40000400 	.word	0x40000400
 800ad1c:	40000800 	.word	0x40000800
 800ad20:	40002000 	.word	0x40002000
 800ad24:	080216d0 	.word	0x080216d0

0800ad28 <HAL_TIM_Base_Start>:
{
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad2c:	4b38      	ldr	r3, [pc, #224]	; (800ae10 <HAL_TIM_Base_Start+0xe8>)
 800ad2e:	4839      	ldr	r0, [pc, #228]	; (800ae14 <HAL_TIM_Base_Start+0xec>)
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	4939      	ldr	r1, [pc, #228]	; (800ae18 <HAL_TIM_Base_Start+0xf0>)
 800ad34:	429a      	cmp	r2, r3
 800ad36:	bf18      	it	ne
 800ad38:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ad3c:	4d37      	ldr	r5, [pc, #220]	; (800ae1c <HAL_TIM_Base_Start+0xf4>)
 800ad3e:	bf14      	ite	ne
 800ad40:	2301      	movne	r3, #1
 800ad42:	2300      	moveq	r3, #0
 800ad44:	4282      	cmp	r2, r0
 800ad46:	bf0c      	ite	eq
 800ad48:	2300      	moveq	r3, #0
 800ad4a:	f003 0301 	andne.w	r3, r3, #1
 800ad4e:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ad52:	428a      	cmp	r2, r1
 800ad54:	bf0c      	ite	eq
 800ad56:	2300      	moveq	r3, #0
 800ad58:	f003 0301 	andne.w	r3, r3, #1
 800ad5c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ad60:	42aa      	cmp	r2, r5
 800ad62:	bf0c      	ite	eq
 800ad64:	2300      	moveq	r3, #0
 800ad66:	f003 0301 	andne.w	r3, r3, #1
 800ad6a:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ad6e:	4282      	cmp	r2, r0
 800ad70:	bf0c      	ite	eq
 800ad72:	2300      	moveq	r3, #0
 800ad74:	f003 0301 	andne.w	r3, r3, #1
 800ad78:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ad7c:	428a      	cmp	r2, r1
 800ad7e:	bf0c      	ite	eq
 800ad80:	2300      	moveq	r3, #0
 800ad82:	f003 0301 	andne.w	r3, r3, #1
 800ad86:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ad8a:	42aa      	cmp	r2, r5
 800ad8c:	bf0c      	ite	eq
 800ad8e:	2300      	moveq	r3, #0
 800ad90:	f003 0301 	andne.w	r3, r3, #1
 800ad94:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ad98:	4282      	cmp	r2, r0
 800ad9a:	bf0c      	ite	eq
 800ad9c:	2300      	moveq	r3, #0
 800ad9e:	f003 0301 	andne.w	r3, r3, #1
 800ada2:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ada6:	428a      	cmp	r2, r1
 800ada8:	bf0c      	ite	eq
 800adaa:	2300      	moveq	r3, #0
 800adac:	f003 0301 	andne.w	r3, r3, #1
 800adb0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800adb4:	42aa      	cmp	r2, r5
 800adb6:	bf0c      	ite	eq
 800adb8:	2300      	moveq	r3, #0
 800adba:	f003 0301 	andne.w	r3, r3, #1
 800adbe:	4282      	cmp	r2, r0
 800adc0:	bf0c      	ite	eq
 800adc2:	2300      	moveq	r3, #0
 800adc4:	f003 0301 	andne.w	r3, r3, #1
 800adc8:	428a      	cmp	r2, r1
 800adca:	bf0c      	ite	eq
 800adcc:	2300      	moveq	r3, #0
 800adce:	f003 0301 	andne.w	r3, r3, #1
 800add2:	b113      	cbz	r3, 800adda <HAL_TIM_Base_Start+0xb2>
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <HAL_TIM_Base_Start+0xf8>)
 800add6:	429a      	cmp	r2, r3
 800add8:	d113      	bne.n	800ae02 <HAL_TIM_Base_Start+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 800adda:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800addc:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <HAL_TIM_Base_Start+0xfc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800adde:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ade2:	6891      	ldr	r1, [r2, #8]
 800ade4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade6:	2b06      	cmp	r3, #6
 800ade8:	d006      	beq.n	800adf8 <HAL_TIM_Base_Start+0xd0>
 800adea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adee:	d003      	beq.n	800adf8 <HAL_TIM_Base_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 800adf0:	6813      	ldr	r3, [r2, #0]
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800adf8:	2301      	movs	r3, #1
}
 800adfa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800adfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ae00:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae02:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ae06:	4808      	ldr	r0, [pc, #32]	; (800ae28 <HAL_TIM_Base_Start+0x100>)
 800ae08:	f7f7 fb36 	bl	8002478 <assert_failed>
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	e7e4      	b.n	800adda <HAL_TIM_Base_Start+0xb2>
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40000400 	.word	0x40000400
 800ae18:	40000800 	.word	0x40000800
 800ae1c:	40000c00 	.word	0x40000c00
 800ae20:	40002000 	.word	0x40002000
 800ae24:	00010007 	.word	0x00010007
 800ae28:	080216d0 	.word	0x080216d0

0800ae2c <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae2c:	6802      	ldr	r2, [r0, #0]
 800ae2e:	4938      	ldr	r1, [pc, #224]	; (800af10 <HAL_TIM_Base_Start_IT+0xe4>)
{
 800ae30:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae32:	4b38      	ldr	r3, [pc, #224]	; (800af14 <HAL_TIM_Base_Start_IT+0xe8>)
 800ae34:	4c38      	ldr	r4, [pc, #224]	; (800af18 <HAL_TIM_Base_Start_IT+0xec>)
 800ae36:	429a      	cmp	r2, r3
 800ae38:	bf18      	it	ne
 800ae3a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ae3e:	4d37      	ldr	r5, [pc, #220]	; (800af1c <HAL_TIM_Base_Start_IT+0xf0>)
 800ae40:	bf14      	ite	ne
 800ae42:	2301      	movne	r3, #1
 800ae44:	2300      	moveq	r3, #0
 800ae46:	42a2      	cmp	r2, r4
 800ae48:	bf0c      	ite	eq
 800ae4a:	2300      	moveq	r3, #0
 800ae4c:	f003 0301 	andne.w	r3, r3, #1
 800ae50:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800ae54:	428a      	cmp	r2, r1
 800ae56:	bf0c      	ite	eq
 800ae58:	2300      	moveq	r3, #0
 800ae5a:	f003 0301 	andne.w	r3, r3, #1
 800ae5e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ae62:	42aa      	cmp	r2, r5
 800ae64:	bf0c      	ite	eq
 800ae66:	2300      	moveq	r3, #0
 800ae68:	f003 0301 	andne.w	r3, r3, #1
 800ae6c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ae70:	42a2      	cmp	r2, r4
 800ae72:	bf0c      	ite	eq
 800ae74:	2300      	moveq	r3, #0
 800ae76:	f003 0301 	andne.w	r3, r3, #1
 800ae7a:	f504 3498 	add.w	r4, r4, #77824	; 0x13000
 800ae7e:	428a      	cmp	r2, r1
 800ae80:	bf0c      	ite	eq
 800ae82:	2300      	moveq	r3, #0
 800ae84:	f003 0301 	andne.w	r3, r3, #1
 800ae88:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ae8c:	42aa      	cmp	r2, r5
 800ae8e:	bf0c      	ite	eq
 800ae90:	2300      	moveq	r3, #0
 800ae92:	f003 0301 	andne.w	r3, r3, #1
 800ae96:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ae9a:	42a2      	cmp	r2, r4
 800ae9c:	bf0c      	ite	eq
 800ae9e:	2300      	moveq	r3, #0
 800aea0:	f003 0301 	andne.w	r3, r3, #1
 800aea4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800aea8:	428a      	cmp	r2, r1
 800aeaa:	bf0c      	ite	eq
 800aeac:	2300      	moveq	r3, #0
 800aeae:	f003 0301 	andne.w	r3, r3, #1
 800aeb2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800aeb6:	42aa      	cmp	r2, r5
 800aeb8:	bf0c      	ite	eq
 800aeba:	2300      	moveq	r3, #0
 800aebc:	f003 0301 	andne.w	r3, r3, #1
 800aec0:	42a2      	cmp	r2, r4
 800aec2:	bf0c      	ite	eq
 800aec4:	2300      	moveq	r3, #0
 800aec6:	f003 0301 	andne.w	r3, r3, #1
 800aeca:	428a      	cmp	r2, r1
 800aecc:	bf0c      	ite	eq
 800aece:	2300      	moveq	r3, #0
 800aed0:	f003 0301 	andne.w	r3, r3, #1
 800aed4:	b113      	cbz	r3, 800aedc <HAL_TIM_Base_Start_IT+0xb0>
 800aed6:	4b12      	ldr	r3, [pc, #72]	; (800af20 <HAL_TIM_Base_Start_IT+0xf4>)
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d111      	bne.n	800af00 <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aedc:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aede:	4b11      	ldr	r3, [pc, #68]	; (800af24 <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aee0:	f041 0101 	orr.w	r1, r1, #1
 800aee4:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aee6:	6891      	ldr	r1, [r2, #8]
 800aee8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeea:	2b06      	cmp	r3, #6
 800aeec:	d006      	beq.n	800aefc <HAL_TIM_Base_Start_IT+0xd0>
 800aeee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef2:	d003      	beq.n	800aefc <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800aef4:	6813      	ldr	r3, [r2, #0]
 800aef6:	f043 0301 	orr.w	r3, r3, #1
 800aefa:	6013      	str	r3, [r2, #0]
}
 800aefc:	2000      	movs	r0, #0
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800af02:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800af06:	4808      	ldr	r0, [pc, #32]	; (800af28 <HAL_TIM_Base_Start_IT+0xfc>)
 800af08:	f7f7 fab6 	bl	8002478 <assert_failed>
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	e7e5      	b.n	800aedc <HAL_TIM_Base_Start_IT+0xb0>
 800af10:	40000800 	.word	0x40000800
 800af14:	40010000 	.word	0x40010000
 800af18:	40000400 	.word	0x40000400
 800af1c:	40000c00 	.word	0x40000c00
 800af20:	40002000 	.word	0x40002000
 800af24:	00010007 	.word	0x00010007
 800af28:	080216d0 	.word	0x080216d0

0800af2c <HAL_TIM_OC_MspInit>:
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <HAL_TIM_PWM_MspInit>:
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <HAL_TIM_IC_MspInit>:
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop

0800af38 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800af38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	f000 81c8 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x39a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800af42:	680a      	ldr	r2, [r1, #0]
 800af44:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800af48:	bf18      	it	ne
 800af4a:	f5b2 5f00 	cmpne.w	r2, #8192	; 0x2000
{
 800af4e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800af50:	bf14      	ite	ne
 800af52:	2301      	movne	r3, #1
 800af54:	2300      	moveq	r3, #0
 800af56:	f032 0630 	bics.w	r6, r2, #48	; 0x30
 800af5a:	4604      	mov	r4, r0
 800af5c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800af5e:	f04f 0001 	mov.w	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800af62:	f04f 0102 	mov.w	r1, #2
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800af66:	bf08      	it	eq
 800af68:	2300      	moveq	r3, #0
  __HAL_LOCK(htim);
 800af6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800af6e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800af72:	b113      	cbz	r3, 800af7a <HAL_TIM_ConfigClockSource+0x42>
 800af74:	2e40      	cmp	r6, #64	; 0x40
 800af76:	f040 8242 	bne.w	800b3fe <HAL_TIM_ConfigClockSource+0x4c6>
  tmpsmcr = htim->Instance->SMCR;
 800af7a:	6823      	ldr	r3, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800af7c:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af7e:	49a5      	ldr	r1, [pc, #660]	; (800b214 <HAL_TIM_ConfigClockSource+0x2dc>)
  tmpsmcr = htim->Instance->SMCR;
 800af80:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af82:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800af86:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800af88:	f000 81d3 	beq.w	800b332 <HAL_TIM_ConfigClockSource+0x3fa>
 800af8c:	f240 81a3 	bls.w	800b2d6 <HAL_TIM_ConfigClockSource+0x39e>
 800af90:	2a70      	cmp	r2, #112	; 0x70
 800af92:	f000 814d 	beq.w	800b230 <HAL_TIM_ConfigClockSource+0x2f8>
 800af96:	d84c      	bhi.n	800b032 <HAL_TIM_ConfigClockSource+0xfa>
 800af98:	2a50      	cmp	r2, #80	; 0x50
 800af9a:	f000 8095 	beq.w	800b0c8 <HAL_TIM_ConfigClockSource+0x190>
 800af9e:	2a60      	cmp	r2, #96	; 0x60
 800afa0:	f040 812f 	bne.w	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800afa4:	4a9c      	ldr	r2, [pc, #624]	; (800b218 <HAL_TIM_ConfigClockSource+0x2e0>)
 800afa6:	499d      	ldr	r1, [pc, #628]	; (800b21c <HAL_TIM_ConfigClockSource+0x2e4>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	bf18      	it	ne
 800afac:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800afb0:	489b      	ldr	r0, [pc, #620]	; (800b220 <HAL_TIM_ConfigClockSource+0x2e8>)
 800afb2:	bf14      	ite	ne
 800afb4:	2201      	movne	r2, #1
 800afb6:	2200      	moveq	r2, #0
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf0c      	ite	eq
 800afbc:	2200      	moveq	r2, #0
 800afbe:	f002 0201 	andne.w	r2, r2, #1
 800afc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afc6:	4283      	cmp	r3, r0
 800afc8:	bf0c      	ite	eq
 800afca:	2200      	moveq	r2, #0
 800afcc:	f002 0201 	andne.w	r2, r2, #1
 800afd0:	428b      	cmp	r3, r1
 800afd2:	bf0c      	ite	eq
 800afd4:	2200      	moveq	r2, #0
 800afd6:	f002 0201 	andne.w	r2, r2, #1
 800afda:	b11a      	cbz	r2, 800afe4 <HAL_TIM_ConfigClockSource+0xac>
 800afdc:	4a91      	ldr	r2, [pc, #580]	; (800b224 <HAL_TIM_ConfigClockSource+0x2ec>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	f040 8201 	bne.w	800b3e6 <HAL_TIM_ConfigClockSource+0x4ae>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800afe4:	686b      	ldr	r3, [r5, #4]
 800afe6:	2b0a      	cmp	r3, #10
 800afe8:	bf18      	it	ne
 800afea:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800afee:	d003      	beq.n	800aff8 <HAL_TIM_ConfigClockSource+0xc0>
 800aff0:	f033 0302 	bics.w	r3, r3, #2
 800aff4:	f040 8216 	bne.w	800b424 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aff8:	68ee      	ldr	r6, [r5, #12]
 800affa:	2e0f      	cmp	r6, #15
 800affc:	f200 823f 	bhi.w	800b47e <HAL_TIM_ConfigClockSource+0x546>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b004:	6a18      	ldr	r0, [r3, #32]
 800b006:	f020 0010 	bic.w	r0, r0, #16
 800b00a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b00c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b00e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b010:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b018:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b01c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b020:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800b022:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b024:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b026:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b02a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800b02e:	609a      	str	r2, [r3, #8]
 800b030:	e0e7      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800b032:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b036:	f000 808d 	beq.w	800b154 <HAL_TIM_ConfigClockSource+0x21c>
 800b03a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b03e:	f040 80e0 	bne.w	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b042:	4a75      	ldr	r2, [pc, #468]	; (800b218 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b044:	4975      	ldr	r1, [pc, #468]	; (800b21c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b046:	4293      	cmp	r3, r2
 800b048:	bf18      	it	ne
 800b04a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b04e:	4874      	ldr	r0, [pc, #464]	; (800b220 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b050:	bf14      	ite	ne
 800b052:	2201      	movne	r2, #1
 800b054:	2200      	moveq	r2, #0
 800b056:	428b      	cmp	r3, r1
 800b058:	bf0c      	ite	eq
 800b05a:	2200      	moveq	r2, #0
 800b05c:	f002 0201 	andne.w	r2, r2, #1
 800b060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b064:	4283      	cmp	r3, r0
 800b066:	bf0c      	ite	eq
 800b068:	2200      	moveq	r2, #0
 800b06a:	f002 0201 	andne.w	r2, r2, #1
 800b06e:	428b      	cmp	r3, r1
 800b070:	bf0c      	ite	eq
 800b072:	2200      	moveq	r2, #0
 800b074:	f002 0201 	andne.w	r2, r2, #1
 800b078:	b11a      	cbz	r2, 800b082 <HAL_TIM_ConfigClockSource+0x14a>
 800b07a:	4a6a      	ldr	r2, [pc, #424]	; (800b224 <HAL_TIM_ConfigClockSource+0x2ec>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	f040 81b8 	bne.w	800b3f2 <HAL_TIM_ConfigClockSource+0x4ba>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b082:	68ab      	ldr	r3, [r5, #8]
 800b084:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b088:	f040 8207 	bne.w	800b49a <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b08c:	686b      	ldr	r3, [r5, #4]
 800b08e:	2b0a      	cmp	r3, #10
 800b090:	bf18      	it	ne
 800b092:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b096:	d003      	beq.n	800b0a0 <HAL_TIM_ConfigClockSource+0x168>
 800b098:	f033 0302 	bics.w	r3, r3, #2
 800b09c:	f040 81bc 	bne.w	800b418 <HAL_TIM_ConfigClockSource+0x4e0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b0a0:	68e8      	ldr	r0, [r5, #12]
 800b0a2:	280f      	cmp	r0, #15
 800b0a4:	f200 81dd 	bhi.w	800b462 <HAL_TIM_ConfigClockSource+0x52a>
      TIM_ETR_SetConfig(htim->Instance,
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800b0ac:	6891      	ldr	r1, [r2, #8]
 800b0ae:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800b0b4:	432b      	orrs	r3, r5
 800b0b6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800b0bc:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0be:	6893      	ldr	r3, [r2, #8]
 800b0c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0c4:	6093      	str	r3, [r2, #8]
      break;
 800b0c6:	e09c      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b0c8:	4a53      	ldr	r2, [pc, #332]	; (800b218 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b0ca:	4954      	ldr	r1, [pc, #336]	; (800b21c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	bf18      	it	ne
 800b0d0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b0d4:	4852      	ldr	r0, [pc, #328]	; (800b220 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b0d6:	bf14      	ite	ne
 800b0d8:	2201      	movne	r2, #1
 800b0da:	2200      	moveq	r2, #0
 800b0dc:	428b      	cmp	r3, r1
 800b0de:	bf0c      	ite	eq
 800b0e0:	2200      	moveq	r2, #0
 800b0e2:	f002 0201 	andne.w	r2, r2, #1
 800b0e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ea:	4283      	cmp	r3, r0
 800b0ec:	bf0c      	ite	eq
 800b0ee:	2200      	moveq	r2, #0
 800b0f0:	f002 0201 	andne.w	r2, r2, #1
 800b0f4:	428b      	cmp	r3, r1
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2200      	moveq	r2, #0
 800b0fa:	f002 0201 	andne.w	r2, r2, #1
 800b0fe:	b11a      	cbz	r2, 800b108 <HAL_TIM_ConfigClockSource+0x1d0>
 800b100:	4a48      	ldr	r2, [pc, #288]	; (800b224 <HAL_TIM_ConfigClockSource+0x2ec>)
 800b102:	4293      	cmp	r3, r2
 800b104:	f040 8169 	bne.w	800b3da <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b108:	686b      	ldr	r3, [r5, #4]
 800b10a:	2b0a      	cmp	r3, #10
 800b10c:	bf18      	it	ne
 800b10e:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b112:	d003      	beq.n	800b11c <HAL_TIM_ConfigClockSource+0x1e4>
 800b114:	f033 0302 	bics.w	r3, r3, #2
 800b118:	f040 818a 	bne.w	800b430 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b11c:	68ee      	ldr	r6, [r5, #12]
 800b11e:	2e0f      	cmp	r6, #15
 800b120:	f200 81b4 	bhi.w	800b48c <HAL_TIM_ConfigClockSource+0x554>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800b128:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b12a:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b12c:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b130:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800b134:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b136:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b138:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b13a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b13e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b144:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b146:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b148:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b14c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800b150:	609a      	str	r2, [r3, #8]
 800b152:	e056      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b154:	4a30      	ldr	r2, [pc, #192]	; (800b218 <HAL_TIM_ConfigClockSource+0x2e0>)
 800b156:	4831      	ldr	r0, [pc, #196]	; (800b21c <HAL_TIM_ConfigClockSource+0x2e4>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	bf18      	it	ne
 800b15c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b160:	492f      	ldr	r1, [pc, #188]	; (800b220 <HAL_TIM_ConfigClockSource+0x2e8>)
 800b162:	4d31      	ldr	r5, [pc, #196]	; (800b228 <HAL_TIM_ConfigClockSource+0x2f0>)
 800b164:	bf14      	ite	ne
 800b166:	2201      	movne	r2, #1
 800b168:	2200      	moveq	r2, #0
 800b16a:	4283      	cmp	r3, r0
 800b16c:	bf0c      	ite	eq
 800b16e:	2200      	moveq	r2, #0
 800b170:	f002 0201 	andne.w	r2, r2, #1
 800b174:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800b178:	428b      	cmp	r3, r1
 800b17a:	bf0c      	ite	eq
 800b17c:	2200      	moveq	r2, #0
 800b17e:	f002 0201 	andne.w	r2, r2, #1
 800b182:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b186:	42ab      	cmp	r3, r5
 800b188:	bf0c      	ite	eq
 800b18a:	2200      	moveq	r2, #0
 800b18c:	f002 0201 	andne.w	r2, r2, #1
 800b190:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800b194:	4283      	cmp	r3, r0
 800b196:	bf0c      	ite	eq
 800b198:	2200      	moveq	r2, #0
 800b19a:	f002 0201 	andne.w	r2, r2, #1
 800b19e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800b1a2:	428b      	cmp	r3, r1
 800b1a4:	bf0c      	ite	eq
 800b1a6:	2200      	moveq	r2, #0
 800b1a8:	f002 0201 	andne.w	r2, r2, #1
 800b1ac:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	bf0c      	ite	eq
 800b1b4:	2200      	moveq	r2, #0
 800b1b6:	f002 0201 	andne.w	r2, r2, #1
 800b1ba:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2200      	moveq	r2, #0
 800b1c4:	f002 0201 	andne.w	r2, r2, #1
 800b1c8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800b1cc:	428b      	cmp	r3, r1
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2200      	moveq	r2, #0
 800b1d2:	f002 0201 	andne.w	r2, r2, #1
 800b1d6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b1da:	42ab      	cmp	r3, r5
 800b1dc:	bf0c      	ite	eq
 800b1de:	2200      	moveq	r2, #0
 800b1e0:	f002 0201 	andne.w	r2, r2, #1
 800b1e4:	4283      	cmp	r3, r0
 800b1e6:	bf0c      	ite	eq
 800b1e8:	2200      	moveq	r2, #0
 800b1ea:	f002 0201 	andne.w	r2, r2, #1
 800b1ee:	428b      	cmp	r3, r1
 800b1f0:	bf0c      	ite	eq
 800b1f2:	2200      	moveq	r2, #0
 800b1f4:	f002 0201 	andne.w	r2, r2, #1
 800b1f8:	b11a      	cbz	r2, 800b202 <HAL_TIM_ConfigClockSource+0x2ca>
 800b1fa:	4a0c      	ldr	r2, [pc, #48]	; (800b22c <HAL_TIM_ConfigClockSource+0x2f4>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	f040 8158 	bne.w	800b4b2 <HAL_TIM_ConfigClockSource+0x57a>
  __HAL_UNLOCK(htim);
 800b202:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800b204:	2201      	movs	r2, #1
  return HAL_OK;
 800b206:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800b208:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b20c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	bf00      	nop
 800b214:	fffe0088 	.word	0xfffe0088
 800b218:	40010000 	.word	0x40010000
 800b21c:	40000400 	.word	0x40000400
 800b220:	40000800 	.word	0x40000800
 800b224:	40010400 	.word	0x40010400
 800b228:	40000c00 	.word	0x40000c00
 800b22c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b230:	4aa3      	ldr	r2, [pc, #652]	; (800b4c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b232:	49a4      	ldr	r1, [pc, #656]	; (800b4c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	bf18      	it	ne
 800b238:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b23c:	48a2      	ldr	r0, [pc, #648]	; (800b4c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b23e:	bf14      	ite	ne
 800b240:	2201      	movne	r2, #1
 800b242:	2200      	moveq	r2, #0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf0c      	ite	eq
 800b248:	2200      	moveq	r2, #0
 800b24a:	f002 0201 	andne.w	r2, r2, #1
 800b24e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b252:	4283      	cmp	r3, r0
 800b254:	bf0c      	ite	eq
 800b256:	2200      	moveq	r2, #0
 800b258:	f002 0201 	andne.w	r2, r2, #1
 800b25c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b260:	428b      	cmp	r3, r1
 800b262:	bf0c      	ite	eq
 800b264:	2200      	moveq	r2, #0
 800b266:	f002 0201 	andne.w	r2, r2, #1
 800b26a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b26e:	4283      	cmp	r3, r0
 800b270:	bf0c      	ite	eq
 800b272:	2200      	moveq	r2, #0
 800b274:	f002 0201 	andne.w	r2, r2, #1
 800b278:	428b      	cmp	r3, r1
 800b27a:	bf0c      	ite	eq
 800b27c:	2200      	moveq	r2, #0
 800b27e:	f002 0201 	andne.w	r2, r2, #1
 800b282:	b11a      	cbz	r2, 800b28c <HAL_TIM_ConfigClockSource+0x354>
 800b284:	4a91      	ldr	r2, [pc, #580]	; (800b4cc <HAL_TIM_ConfigClockSource+0x594>)
 800b286:	4293      	cmp	r3, r2
 800b288:	f040 80de 	bne.w	800b448 <HAL_TIM_ConfigClockSource+0x510>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b28c:	68ab      	ldr	r3, [r5, #8]
 800b28e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b292:	f040 8108 	bne.w	800b4a6 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b296:	686b      	ldr	r3, [r5, #4]
 800b298:	2b0a      	cmp	r3, #10
 800b29a:	bf18      	it	ne
 800b29c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b2a0:	d003      	beq.n	800b2aa <HAL_TIM_ConfigClockSource+0x372>
 800b2a2:	f033 0302 	bics.w	r3, r3, #2
 800b2a6:	f040 80c9 	bne.w	800b43c <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b2aa:	68e8      	ldr	r0, [r5, #12]
 800b2ac:	280f      	cmp	r0, #15
 800b2ae:	f200 80d1 	bhi.w	800b454 <HAL_TIM_ConfigClockSource+0x51c>
      TIM_ETR_SetConfig(htim->Instance,
 800b2b2:	6822      	ldr	r2, [r4, #0]
 800b2b4:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800b2b6:	6891      	ldr	r1, [r2, #8]
 800b2b8:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2ba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800b2be:	432b      	orrs	r3, r5
 800b2c0:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800b2c6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800b2c8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b2ce:	6093      	str	r3, [r2, #8]
      break;
 800b2d0:	e797      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
  __HAL_LOCK(htim);
 800b2d2:	2002      	movs	r0, #2
}
 800b2d4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800b2d6:	2a10      	cmp	r2, #16
 800b2d8:	d004      	beq.n	800b2e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b2da:	d96d      	bls.n	800b3b8 <HAL_TIM_ConfigClockSource+0x480>
 800b2dc:	2a20      	cmp	r2, #32
 800b2de:	d001      	beq.n	800b2e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b2e0:	2a30      	cmp	r2, #48	; 0x30
 800b2e2:	d18e      	bne.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b2e4:	4976      	ldr	r1, [pc, #472]	; (800b4c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b2e6:	4877      	ldr	r0, [pc, #476]	; (800b4c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b2e8:	428b      	cmp	r3, r1
 800b2ea:	bf18      	it	ne
 800b2ec:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b2f0:	4e75      	ldr	r6, [pc, #468]	; (800b4c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b2f2:	bf14      	ite	ne
 800b2f4:	2101      	movne	r1, #1
 800b2f6:	2100      	moveq	r1, #0
 800b2f8:	4283      	cmp	r3, r0
 800b2fa:	bf0c      	ite	eq
 800b2fc:	2100      	moveq	r1, #0
 800b2fe:	f001 0101 	andne.w	r1, r1, #1
 800b302:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b306:	42b3      	cmp	r3, r6
 800b308:	bf0c      	ite	eq
 800b30a:	2100      	moveq	r1, #0
 800b30c:	f001 0101 	andne.w	r1, r1, #1
 800b310:	4283      	cmp	r3, r0
 800b312:	bf0c      	ite	eq
 800b314:	2100      	moveq	r1, #0
 800b316:	f001 0101 	andne.w	r1, r1, #1
 800b31a:	b111      	cbz	r1, 800b322 <HAL_TIM_ConfigClockSource+0x3ea>
 800b31c:	496c      	ldr	r1, [pc, #432]	; (800b4d0 <HAL_TIM_ConfigClockSource+0x598>)
 800b31e:	428b      	cmp	r3, r1
 800b320:	d153      	bne.n	800b3ca <HAL_TIM_ConfigClockSource+0x492>
  tmpsmcr = TIMx->SMCR;
 800b322:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b324:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800b328:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b32c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800b32e:	609a      	str	r2, [r3, #8]
 800b330:	e767      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b332:	4a63      	ldr	r2, [pc, #396]	; (800b4c0 <HAL_TIM_ConfigClockSource+0x588>)
 800b334:	4963      	ldr	r1, [pc, #396]	; (800b4c4 <HAL_TIM_ConfigClockSource+0x58c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	bf18      	it	ne
 800b33a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b33e:	4862      	ldr	r0, [pc, #392]	; (800b4c8 <HAL_TIM_ConfigClockSource+0x590>)
 800b340:	bf14      	ite	ne
 800b342:	2201      	movne	r2, #1
 800b344:	2200      	moveq	r2, #0
 800b346:	428b      	cmp	r3, r1
 800b348:	bf0c      	ite	eq
 800b34a:	2200      	moveq	r2, #0
 800b34c:	f002 0201 	andne.w	r2, r2, #1
 800b350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b354:	4283      	cmp	r3, r0
 800b356:	bf0c      	ite	eq
 800b358:	2200      	moveq	r2, #0
 800b35a:	f002 0201 	andne.w	r2, r2, #1
 800b35e:	428b      	cmp	r3, r1
 800b360:	bf0c      	ite	eq
 800b362:	2200      	moveq	r2, #0
 800b364:	f002 0201 	andne.w	r2, r2, #1
 800b368:	b112      	cbz	r2, 800b370 <HAL_TIM_ConfigClockSource+0x438>
 800b36a:	4a59      	ldr	r2, [pc, #356]	; (800b4d0 <HAL_TIM_ConfigClockSource+0x598>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d126      	bne.n	800b3be <HAL_TIM_ConfigClockSource+0x486>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b370:	686b      	ldr	r3, [r5, #4]
 800b372:	2b0a      	cmp	r3, #10
 800b374:	bf18      	it	ne
 800b376:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b37a:	d002      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x44a>
 800b37c:	f033 0302 	bics.w	r3, r3, #2
 800b380:	d144      	bne.n	800b40c <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b382:	68ee      	ldr	r6, [r5, #12]
 800b384:	2e0f      	cmp	r6, #15
 800b386:	d873      	bhi.n	800b470 <HAL_TIM_ConfigClockSource+0x538>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800b38c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b38e:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b390:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b394:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800b398:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b39a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b39c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b39e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b3a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3a8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b3aa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3b0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800b3b4:	609a      	str	r2, [r3, #8]
 800b3b6:	e724      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d093      	beq.n	800b2e4 <HAL_TIM_ConfigClockSource+0x3ac>
 800b3bc:	e721      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b3be:	f241 2155 	movw	r1, #4693	; 0x1255
 800b3c2:	4844      	ldr	r0, [pc, #272]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b3c4:	f7f7 f858 	bl	8002478 <assert_failed>
 800b3c8:	e7d2      	b.n	800b370 <HAL_TIM_ConfigClockSource+0x438>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b3ca:	f241 2168 	movw	r1, #4712	; 0x1268
 800b3ce:	4841      	ldr	r0, [pc, #260]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b3d0:	f7f7 f852 	bl	8002478 <assert_failed>
 800b3d4:	682a      	ldr	r2, [r5, #0]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	e7a3      	b.n	800b322 <HAL_TIM_ConfigClockSource+0x3ea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b3da:	f241 2135 	movw	r1, #4661	; 0x1235
 800b3de:	483d      	ldr	r0, [pc, #244]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b3e0:	f7f7 f84a 	bl	8002478 <assert_failed>
 800b3e4:	e690      	b.n	800b108 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b3e6:	f241 2145 	movw	r1, #4677	; 0x1245
 800b3ea:	483a      	ldr	r0, [pc, #232]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b3ec:	f7f7 f844 	bl	8002478 <assert_failed>
 800b3f0:	e5f8      	b.n	800afe4 <HAL_TIM_ConfigClockSource+0xac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b3f2:	f241 2121 	movw	r1, #4641	; 0x1221
 800b3f6:	4837      	ldr	r0, [pc, #220]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b3f8:	f7f7 f83e 	bl	8002478 <assert_failed>
 800b3fc:	e641      	b.n	800b082 <HAL_TIM_ConfigClockSource+0x14a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b3fe:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800b402:	4834      	ldr	r0, [pc, #208]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b404:	f7f7 f838 	bl	8002478 <assert_failed>
 800b408:	682a      	ldr	r2, [r5, #0]
 800b40a:	e5b6      	b.n	800af7a <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b40c:	f241 2158 	movw	r1, #4696	; 0x1258
 800b410:	4830      	ldr	r0, [pc, #192]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b412:	f7f7 f831 	bl	8002478 <assert_failed>
 800b416:	e7b4      	b.n	800b382 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b418:	f241 2125 	movw	r1, #4645	; 0x1225
 800b41c:	482d      	ldr	r0, [pc, #180]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b41e:	f7f7 f82b 	bl	8002478 <assert_failed>
 800b422:	e63d      	b.n	800b0a0 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b424:	f241 2148 	movw	r1, #4680	; 0x1248
 800b428:	482a      	ldr	r0, [pc, #168]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b42a:	f7f7 f825 	bl	8002478 <assert_failed>
 800b42e:	e5e3      	b.n	800aff8 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b430:	f241 2138 	movw	r1, #4664	; 0x1238
 800b434:	4827      	ldr	r0, [pc, #156]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b436:	f7f7 f81f 	bl	8002478 <assert_failed>
 800b43a:	e66f      	b.n	800b11c <HAL_TIM_ConfigClockSource+0x1e4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b43c:	f241 210d 	movw	r1, #4621	; 0x120d
 800b440:	4824      	ldr	r0, [pc, #144]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b442:	f7f7 f819 	bl	8002478 <assert_failed>
 800b446:	e730      	b.n	800b2aa <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b448:	f241 2109 	movw	r1, #4617	; 0x1209
 800b44c:	4821      	ldr	r0, [pc, #132]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b44e:	f7f7 f813 	bl	8002478 <assert_failed>
 800b452:	e71b      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x354>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b454:	481f      	ldr	r0, [pc, #124]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b456:	f241 210e 	movw	r1, #4622	; 0x120e
 800b45a:	f7f7 f80d 	bl	8002478 <assert_failed>
 800b45e:	68e8      	ldr	r0, [r5, #12]
 800b460:	e727      	b.n	800b2b2 <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b462:	481c      	ldr	r0, [pc, #112]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b464:	f241 2126 	movw	r1, #4646	; 0x1226
 800b468:	f7f7 f806 	bl	8002478 <assert_failed>
 800b46c:	68e8      	ldr	r0, [r5, #12]
 800b46e:	e61b      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b470:	f241 2159 	movw	r1, #4697	; 0x1259
 800b474:	4817      	ldr	r0, [pc, #92]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b476:	f7f6 ffff 	bl	8002478 <assert_failed>
 800b47a:	68ee      	ldr	r6, [r5, #12]
 800b47c:	e784      	b.n	800b388 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b47e:	f241 2149 	movw	r1, #4681	; 0x1249
 800b482:	4814      	ldr	r0, [pc, #80]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b484:	f7f6 fff8 	bl	8002478 <assert_failed>
 800b488:	68ee      	ldr	r6, [r5, #12]
 800b48a:	e5b9      	b.n	800b000 <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b48c:	f241 2139 	movw	r1, #4665	; 0x1239
 800b490:	4810      	ldr	r0, [pc, #64]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b492:	f7f6 fff1 	bl	8002478 <assert_failed>
 800b496:	68ee      	ldr	r6, [r5, #12]
 800b498:	e644      	b.n	800b124 <HAL_TIM_ConfigClockSource+0x1ec>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b49a:	f241 2124 	movw	r1, #4644	; 0x1224
 800b49e:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4a0:	f7f6 ffea 	bl	8002478 <assert_failed>
 800b4a4:	e5f2      	b.n	800b08c <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b4a6:	f241 210c 	movw	r1, #4620	; 0x120c
 800b4aa:	480a      	ldr	r0, [pc, #40]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4ac:	f7f6 ffe4 	bl	8002478 <assert_failed>
 800b4b0:	e6f1      	b.n	800b296 <HAL_TIM_ConfigClockSource+0x35e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b4b2:	f241 2102 	movw	r1, #4610	; 0x1202
 800b4b6:	4807      	ldr	r0, [pc, #28]	; (800b4d4 <HAL_TIM_ConfigClockSource+0x59c>)
 800b4b8:	f7f6 ffde 	bl	8002478 <assert_failed>
 800b4bc:	e6a1      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x2ca>
 800b4be:	bf00      	nop
 800b4c0:	40010000 	.word	0x40010000
 800b4c4:	40000400 	.word	0x40000400
 800b4c8:	40000800 	.word	0x40000800
 800b4cc:	40001800 	.word	0x40001800
 800b4d0:	40010400 	.word	0x40010400
 800b4d4:	080216d0 	.word	0x080216d0

0800b4d8 <HAL_TIM_SlaveConfigSynchro>:
{
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b4dc:	4b39      	ldr	r3, [pc, #228]	; (800b5c4 <HAL_TIM_SlaveConfigSynchro+0xec>)
 800b4de:	483a      	ldr	r0, [pc, #232]	; (800b5c8 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800b4e0:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	4939      	ldr	r1, [pc, #228]	; (800b5cc <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	bf18      	it	ne
 800b4ea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800b4ee:	4e38      	ldr	r6, [pc, #224]	; (800b5d0 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800b4f0:	bf14      	ite	ne
 800b4f2:	2301      	movne	r3, #1
 800b4f4:	2300      	moveq	r3, #0
 800b4f6:	4282      	cmp	r2, r0
 800b4f8:	bf0c      	ite	eq
 800b4fa:	2300      	moveq	r3, #0
 800b4fc:	f003 0301 	andne.w	r3, r3, #1
 800b500:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800b504:	428a      	cmp	r2, r1
 800b506:	bf0c      	ite	eq
 800b508:	2300      	moveq	r3, #0
 800b50a:	f003 0301 	andne.w	r3, r3, #1
 800b50e:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800b512:	42b2      	cmp	r2, r6
 800b514:	bf0c      	ite	eq
 800b516:	2300      	moveq	r3, #0
 800b518:	f003 0301 	andne.w	r3, r3, #1
 800b51c:	4282      	cmp	r2, r0
 800b51e:	bf0c      	ite	eq
 800b520:	2300      	moveq	r3, #0
 800b522:	f003 0301 	andne.w	r3, r3, #1
 800b526:	428a      	cmp	r2, r1
 800b528:	bf0c      	ite	eq
 800b52a:	2300      	moveq	r3, #0
 800b52c:	f003 0301 	andne.w	r3, r3, #1
 800b530:	b113      	cbz	r3, 800b538 <HAL_TIM_SlaveConfigSynchro+0x60>
 800b532:	4b28      	ldr	r3, [pc, #160]	; (800b5d4 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800b534:	429a      	cmp	r2, r3
 800b536:	d138      	bne.n	800b5aa <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	1f1a      	subs	r2, r3, #4
 800b53c:	2a03      	cmp	r2, #3
 800b53e:	d902      	bls.n	800b546 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800b540:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800b544:	d12b      	bne.n	800b59e <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800b546:	686b      	ldr	r3, [r5, #4]
 800b548:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b54c:	2b40      	cmp	r3, #64	; 0x40
 800b54e:	d000      	beq.n	800b552 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800b550:	bb8b      	cbnz	r3, 800b5b6 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800b552:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b556:	2b01      	cmp	r3, #1
 800b558:	d01f      	beq.n	800b59a <HAL_TIM_SlaveConfigSynchro+0xc2>
 800b55a:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b55c:	2302      	movs	r3, #2
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b55e:	4629      	mov	r1, r5
 800b560:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800b562:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b566:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b56a:	f7ff f9b3 	bl	800a8d4 <TIM_SlaveTimer_SetConfig>
 800b56e:	b968      	cbnz	r0, 800b58c <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b578:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b580:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800b582:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b586:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(htim);
 800b58c:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 800b58e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800b592:	4630      	mov	r0, r6
    __HAL_UNLOCK(htim);
 800b594:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800b598:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800b59a:	2002      	movs	r0, #2
}
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800b59e:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800b5a2:	480d      	ldr	r0, [pc, #52]	; (800b5d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b5a4:	f7f6 ff68 	bl	8002478 <assert_failed>
 800b5a8:	e7cd      	b.n	800b546 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800b5aa:	f241 21a7 	movw	r1, #4775	; 0x12a7
 800b5ae:	480a      	ldr	r0, [pc, #40]	; (800b5d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b5b0:	f7f6 ff62 	bl	8002478 <assert_failed>
 800b5b4:	e7c0      	b.n	800b538 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800b5b6:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800b5ba:	4807      	ldr	r0, [pc, #28]	; (800b5d8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800b5bc:	f7f6 ff5c 	bl	8002478 <assert_failed>
 800b5c0:	e7c7      	b.n	800b552 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800b5c2:	bf00      	nop
 800b5c4:	40010000 	.word	0x40010000
 800b5c8:	40000400 	.word	0x40000400
 800b5cc:	40000800 	.word	0x40000800
 800b5d0:	40000c00 	.word	0x40000c00
 800b5d4:	40001800 	.word	0x40001800
 800b5d8:	080216d0 	.word	0x080216d0

0800b5dc <HAL_TIM_OC_DelayElapsedCallback>:
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop

0800b5e0 <TIM_DMACaptureCplt>:
{
 800b5e0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800b5e4:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b5e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800b5e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b5ec:	4282      	cmp	r2, r0
 800b5ee:	d00f      	beq.n	800b610 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b5f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5f2:	4283      	cmp	r3, r0
 800b5f4:	d01b      	beq.n	800b62e <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b5f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	d010      	beq.n	800b61e <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b5fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5fe:	4283      	cmp	r3, r0
 800b600:	d005      	beq.n	800b60e <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800b602:	4620      	mov	r0, r4
 800b604:	f7f5 fcca 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b608:	2300      	movs	r3, #0
 800b60a:	7723      	strb	r3, [r4, #28]
}
 800b60c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b60e:	2308      	movs	r3, #8
 800b610:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b612:	4620      	mov	r0, r4
 800b614:	f7f5 fcc2 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b618:	2300      	movs	r3, #0
 800b61a:	7723      	strb	r3, [r4, #28]
}
 800b61c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b61e:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800b620:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b622:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b624:	f7f5 fcba 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b628:	2300      	movs	r3, #0
 800b62a:	7723      	strb	r3, [r4, #28]
}
 800b62c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b62e:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800b630:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b632:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800b634:	f7f5 fcb2 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b638:	2300      	movs	r3, #0
 800b63a:	7723      	strb	r3, [r4, #28]
}
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	bf00      	nop

0800b640 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop

0800b644 <TIM_DMACaptureHalfCplt>:
{
 800b644:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b646:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800b648:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b64a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800b64c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b650:	4282      	cmp	r2, r0
 800b652:	d00f      	beq.n	800b674 <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b656:	4283      	cmp	r3, r0
 800b658:	d01b      	beq.n	800b692 <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b65a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b65c:	4283      	cmp	r3, r0
 800b65e:	d010      	beq.n	800b682 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b660:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b662:	4283      	cmp	r3, r0
 800b664:	d005      	beq.n	800b672 <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ffea 	bl	800b640 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66c:	2300      	movs	r3, #0
 800b66e:	7723      	strb	r3, [r4, #28]
}
 800b670:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b672:	2308      	movs	r3, #8
 800b674:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff ffe2 	bl	800b640 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67c:	2300      	movs	r3, #0
 800b67e:	7723      	strb	r3, [r4, #28]
}
 800b680:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b682:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b684:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b686:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b688:	f7ff ffda 	bl	800b640 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b68c:	2300      	movs	r3, #0
 800b68e:	7723      	strb	r3, [r4, #28]
}
 800b690:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b692:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b694:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b696:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b698:	f7ff ffd2 	bl	800b640 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b69c:	2300      	movs	r3, #0
 800b69e:	7723      	strb	r3, [r4, #28]
}
 800b6a0:	bd10      	pop	{r4, pc}
 800b6a2:	bf00      	nop

0800b6a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop

0800b6a8 <HAL_TIM_TriggerCallback>:
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop

0800b6ac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6ac:	6803      	ldr	r3, [r0, #0]
 800b6ae:	691a      	ldr	r2, [r3, #16]
 800b6b0:	0791      	lsls	r1, r2, #30
{
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6b6:	d502      	bpl.n	800b6be <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	0792      	lsls	r2, r2, #30
 800b6bc:	d468      	bmi.n	800b790 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	0752      	lsls	r2, r2, #29
 800b6c2:	d502      	bpl.n	800b6ca <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6c4:	68da      	ldr	r2, [r3, #12]
 800b6c6:	0750      	lsls	r0, r2, #29
 800b6c8:	d44f      	bmi.n	800b76a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6ca:	691a      	ldr	r2, [r3, #16]
 800b6cc:	0711      	lsls	r1, r2, #28
 800b6ce:	d502      	bpl.n	800b6d6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6d0:	68da      	ldr	r2, [r3, #12]
 800b6d2:	0712      	lsls	r2, r2, #28
 800b6d4:	d437      	bmi.n	800b746 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6d6:	691a      	ldr	r2, [r3, #16]
 800b6d8:	06d0      	lsls	r0, r2, #27
 800b6da:	d502      	bpl.n	800b6e2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	06d1      	lsls	r1, r2, #27
 800b6e0:	d41e      	bmi.n	800b720 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	07d2      	lsls	r2, r2, #31
 800b6e6:	d502      	bpl.n	800b6ee <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	07d0      	lsls	r0, r2, #31
 800b6ec:	d469      	bmi.n	800b7c2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6ee:	691a      	ldr	r2, [r3, #16]
 800b6f0:	0611      	lsls	r1, r2, #24
 800b6f2:	d502      	bpl.n	800b6fa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6f4:	68da      	ldr	r2, [r3, #12]
 800b6f6:	0612      	lsls	r2, r2, #24
 800b6f8:	d46b      	bmi.n	800b7d2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6fa:	691a      	ldr	r2, [r3, #16]
 800b6fc:	05d0      	lsls	r0, r2, #23
 800b6fe:	d502      	bpl.n	800b706 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	0611      	lsls	r1, r2, #24
 800b704:	d46d      	bmi.n	800b7e2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b706:	691a      	ldr	r2, [r3, #16]
 800b708:	0652      	lsls	r2, r2, #25
 800b70a:	d502      	bpl.n	800b712 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	0650      	lsls	r0, r2, #25
 800b710:	d46f      	bmi.n	800b7f2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b712:	691a      	ldr	r2, [r3, #16]
 800b714:	0691      	lsls	r1, r2, #26
 800b716:	d502      	bpl.n	800b71e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	0692      	lsls	r2, r2, #26
 800b71c:	d449      	bmi.n	800b7b2 <HAL_TIM_IRQHandler+0x106>
}
 800b71e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b720:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b724:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b726:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b728:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b72a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b72c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b72e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b732:	d16f      	bne.n	800b814 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b734:	f7ff ff52 	bl	800b5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff ffb3 	bl	800b6a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	2200      	movs	r2, #0
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	7722      	strb	r2, [r4, #28]
 800b744:	e7cd      	b.n	800b6e2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b746:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b74a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b74c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b74e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b750:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b752:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b754:	079b      	lsls	r3, r3, #30
 800b756:	d15a      	bne.n	800b80e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b758:	f7ff ff40 	bl	800b5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7ff ffa1 	bl	800b6a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b762:	2200      	movs	r2, #0
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	7722      	strb	r2, [r4, #28]
 800b768:	e7b5      	b.n	800b6d6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b76a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b76e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800b770:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b772:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b774:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b776:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b778:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b77c:	d144      	bne.n	800b808 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b77e:	f7ff ff2d 	bl	800b5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b782:	4620      	mov	r0, r4
 800b784:	f7ff ff8e 	bl	800b6a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b788:	2200      	movs	r2, #0
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	7722      	strb	r2, [r4, #28]
 800b78e:	e79c      	b.n	800b6ca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b790:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b794:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b796:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b798:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b79a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b79c:	0799      	lsls	r1, r3, #30
 800b79e:	d130      	bne.n	800b802 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a0:	f7ff ff1c 	bl	800b5dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f7ff ff7d 	bl	800b6a4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	7722      	strb	r2, [r4, #28]
 800b7b0:	e785      	b.n	800b6be <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b7b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7b8:	611a      	str	r2, [r3, #16]
}
 800b7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b7be:	f001 bc17 	b.w	800cff0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7c2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7ca:	f7f5 fe51 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	e78d      	b.n	800b6ee <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800b7d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b7da:	f001 fc0b 	bl	800cff4 <HAL_TIMEx_BreakCallback>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	e78b      	b.n	800b6fa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b7e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b7ea:	f001 fc05 	bl	800cff8 <HAL_TIMEx_Break2Callback>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	e789      	b.n	800b706 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800b7f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b7fa:	f7ff ff55 	bl	800b6a8 <HAL_TIM_TriggerCallback>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	e787      	b.n	800b712 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800b802:	f7f5 fbcb 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 800b806:	e7d0      	b.n	800b7aa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800b808:	f7f5 fbc8 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 800b80c:	e7bc      	b.n	800b788 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800b80e:	f7f5 fbc5 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 800b812:	e7a6      	b.n	800b762 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800b814:	f7f5 fbc2 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
 800b818:	e791      	b.n	800b73e <HAL_TIM_IRQHandler+0x92>
 800b81a:	bf00      	nop

0800b81c <HAL_TIM_ErrorCallback>:
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop

0800b820 <TIM_DMAError>:
{
 800b820:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 800b822:	2201      	movs	r2, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b824:	6b83      	ldr	r3, [r0, #56]	; 0x38
  HAL_TIM_ErrorCallback(htim);
 800b826:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800b828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800b82c:	f7ff fff6 	bl	800b81c <HAL_TIM_ErrorCallback>
}
 800b830:	bd08      	pop	{r3, pc}
 800b832:	bf00      	nop

0800b834 <TIM_Base_SetConfig>:
{
 800b834:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b836:	4e32      	ldr	r6, [pc, #200]	; (800b900 <TIM_Base_SetConfig+0xcc>)
 800b838:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b83c:	4f31      	ldr	r7, [pc, #196]	; (800b904 <TIM_Base_SetConfig+0xd0>)
 800b83e:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 800b842:	6803      	ldr	r3, [r0, #0]
 800b844:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b848:	fab6 f686 	clz	r6, r6
 800b84c:	fab7 f787 	clz	r7, r7
 800b850:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800b854:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800b858:	d025      	beq.n	800b8a6 <TIM_Base_SetConfig+0x72>
 800b85a:	bb26      	cbnz	r6, 800b8a6 <TIM_Base_SetConfig+0x72>
 800b85c:	4a2a      	ldr	r2, [pc, #168]	; (800b908 <TIM_Base_SetConfig+0xd4>)
 800b85e:	4290      	cmp	r0, r2
 800b860:	d03e      	beq.n	800b8e0 <TIM_Base_SetConfig+0xac>
 800b862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b866:	4290      	cmp	r0, r2
 800b868:	d03a      	beq.n	800b8e0 <TIM_Base_SetConfig+0xac>
 800b86a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b86e:	4290      	cmp	r0, r2
 800b870:	d03b      	beq.n	800b8ea <TIM_Base_SetConfig+0xb6>
 800b872:	2f00      	cmp	r7, #0
 800b874:	d139      	bne.n	800b8ea <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b876:	4a25      	ldr	r2, [pc, #148]	; (800b90c <TIM_Base_SetConfig+0xd8>)
 800b878:	4290      	cmp	r0, r2
 800b87a:	d018      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b87c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b880:	4290      	cmp	r0, r2
 800b882:	d014      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b888:	4290      	cmp	r0, r2
 800b88a:	d010      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b88c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b890:	4290      	cmp	r0, r2
 800b892:	d00c      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b898:	4290      	cmp	r0, r2
 800b89a:	d008      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b89c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8a0:	4290      	cmp	r0, r2
 800b8a2:	d108      	bne.n	800b8b6 <TIM_Base_SetConfig+0x82>
 800b8a4:	e003      	b.n	800b8ae <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8aa:	684d      	ldr	r5, [r1, #4]
 800b8ac:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8b2:	68cd      	ldr	r5, [r1, #12]
 800b8b4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8b6:	694a      	ldr	r2, [r1, #20]
 800b8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8bc:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8be:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800b8c0:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800b8c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8c4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8c6:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8c8:	b926      	cbnz	r6, 800b8d4 <TIM_Base_SetConfig+0xa0>
 800b8ca:	b91f      	cbnz	r7, 800b8d4 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800b8cc:	2301      	movs	r3, #1
}
 800b8ce:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800b8d0:	6143      	str	r3, [r0, #20]
}
 800b8d2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800b8d4:	690b      	ldr	r3, [r1, #16]
 800b8d6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b8d8:	2301      	movs	r3, #1
}
 800b8da:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800b8dc:	6143      	str	r3, [r0, #20]
}
 800b8de:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8e4:	684a      	ldr	r2, [r1, #4]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	e7e1      	b.n	800b8ae <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ea:	4a09      	ldr	r2, [pc, #36]	; (800b910 <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8f0:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8f2:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800b8f4:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8f8:	d0d9      	beq.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b8fa:	2f00      	cmp	r7, #0
 800b8fc:	d1d7      	bne.n	800b8ae <TIM_Base_SetConfig+0x7a>
 800b8fe:	e7ba      	b.n	800b876 <TIM_Base_SetConfig+0x42>
 800b900:	40010000 	.word	0x40010000
 800b904:	40010400 	.word	0x40010400
 800b908:	40000400 	.word	0x40000400
 800b90c:	40014000 	.word	0x40014000
 800b910:	40000c00 	.word	0x40000c00

0800b914 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b914:	2800      	cmp	r0, #0
 800b916:	f000 8097 	beq.w	800ba48 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b91a:	6802      	ldr	r2, [r0, #0]
 800b91c:	4956      	ldr	r1, [pc, #344]	; (800ba78 <HAL_TIM_Base_Init+0x164>)
{
 800b91e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b920:	4b56      	ldr	r3, [pc, #344]	; (800ba7c <HAL_TIM_Base_Init+0x168>)
 800b922:	4604      	mov	r4, r0
 800b924:	4856      	ldr	r0, [pc, #344]	; (800ba80 <HAL_TIM_Base_Init+0x16c>)
 800b926:	429a      	cmp	r2, r3
 800b928:	bf18      	it	ne
 800b92a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800b92e:	4d55      	ldr	r5, [pc, #340]	; (800ba84 <HAL_TIM_Base_Init+0x170>)
 800b930:	bf14      	ite	ne
 800b932:	2301      	movne	r3, #1
 800b934:	2300      	moveq	r3, #0
 800b936:	4282      	cmp	r2, r0
 800b938:	bf0c      	ite	eq
 800b93a:	2300      	moveq	r3, #0
 800b93c:	f003 0301 	andne.w	r3, r3, #1
 800b940:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800b944:	428a      	cmp	r2, r1
 800b946:	bf0c      	ite	eq
 800b948:	2300      	moveq	r3, #0
 800b94a:	f003 0301 	andne.w	r3, r3, #1
 800b94e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b952:	42aa      	cmp	r2, r5
 800b954:	bf0c      	ite	eq
 800b956:	2300      	moveq	r3, #0
 800b958:	f003 0301 	andne.w	r3, r3, #1
 800b95c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800b960:	4282      	cmp	r2, r0
 800b962:	bf0c      	ite	eq
 800b964:	2300      	moveq	r3, #0
 800b966:	f003 0301 	andne.w	r3, r3, #1
 800b96a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800b96e:	428a      	cmp	r2, r1
 800b970:	bf0c      	ite	eq
 800b972:	2300      	moveq	r3, #0
 800b974:	f003 0301 	andne.w	r3, r3, #1
 800b978:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800b97c:	42aa      	cmp	r2, r5
 800b97e:	bf0c      	ite	eq
 800b980:	2300      	moveq	r3, #0
 800b982:	f003 0301 	andne.w	r3, r3, #1
 800b986:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800b98a:	4282      	cmp	r2, r0
 800b98c:	bf0c      	ite	eq
 800b98e:	2300      	moveq	r3, #0
 800b990:	f003 0301 	andne.w	r3, r3, #1
 800b994:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800b998:	428a      	cmp	r2, r1
 800b99a:	bf0c      	ite	eq
 800b99c:	2300      	moveq	r3, #0
 800b99e:	f003 0301 	andne.w	r3, r3, #1
 800b9a2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b9a6:	42aa      	cmp	r2, r5
 800b9a8:	bf0c      	ite	eq
 800b9aa:	2300      	moveq	r3, #0
 800b9ac:	f003 0301 	andne.w	r3, r3, #1
 800b9b0:	4282      	cmp	r2, r0
 800b9b2:	bf0c      	ite	eq
 800b9b4:	2300      	moveq	r3, #0
 800b9b6:	f003 0301 	andne.w	r3, r3, #1
 800b9ba:	428a      	cmp	r2, r1
 800b9bc:	bf0c      	ite	eq
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	f003 0301 	andne.w	r3, r3, #1
 800b9c4:	b113      	cbz	r3, 800b9cc <HAL_TIM_Base_Init+0xb8>
 800b9c6:	4b30      	ldr	r3, [pc, #192]	; (800ba88 <HAL_TIM_Base_Init+0x174>)
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d14f      	bne.n	800ba6c <HAL_TIM_Base_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b9cc:	68a2      	ldr	r2, [r4, #8]
 800b9ce:	f032 0310 	bics.w	r3, r2, #16
 800b9d2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800b9d6:	bf14      	ite	ne
 800b9d8:	2301      	movne	r3, #1
 800b9da:	2300      	moveq	r3, #0
 800b9dc:	2920      	cmp	r1, #32
 800b9de:	bf0c      	ite	eq
 800b9e0:	2300      	moveq	r3, #0
 800b9e2:	f003 0301 	andne.w	r3, r3, #1
 800b9e6:	b10b      	cbz	r3, 800b9ec <HAL_TIM_Base_Init+0xd8>
 800b9e8:	2a40      	cmp	r2, #64	; 0x40
 800b9ea:	d139      	bne.n	800ba60 <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b9ec:	6923      	ldr	r3, [r4, #16]
 800b9ee:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b9f2:	d002      	beq.n	800b9fa <HAL_TIM_Base_Init+0xe6>
 800b9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f8:	d128      	bne.n	800ba4c <HAL_TIM_Base_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b9fa:	69a3      	ldr	r3, [r4, #24]
 800b9fc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ba00:	d116      	bne.n	800ba30 <HAL_TIM_Base_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ba02:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ba06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba0a:	b15b      	cbz	r3, 800ba24 <HAL_TIM_Base_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800ba0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba0e:	6820      	ldr	r0, [r4, #0]
 800ba10:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ba12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba16:	f7ff ff0d 	bl	800b834 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ba1a:	2301      	movs	r3, #1
  return HAL_OK;
 800ba1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ba1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800ba24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f7f7 fde3 	bl	80035f4 <HAL_TIM_Base_MspInit>
 800ba2e:	e7ed      	b.n	800ba0c <HAL_TIM_Base_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ba30:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ba34:	4815      	ldr	r0, [pc, #84]	; (800ba8c <HAL_TIM_Base_Init+0x178>)
 800ba36:	f7f6 fd1f 	bl	8002478 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ba3a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ba3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e2      	bne.n	800ba0c <HAL_TIM_Base_Init+0xf8>
 800ba46:	e7ed      	b.n	800ba24 <HAL_TIM_Base_Init+0x110>
    return HAL_ERROR;
 800ba48:	2001      	movs	r0, #1
}
 800ba4a:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ba4c:	f240 110f 	movw	r1, #271	; 0x10f
 800ba50:	480e      	ldr	r0, [pc, #56]	; (800ba8c <HAL_TIM_Base_Init+0x178>)
 800ba52:	f7f6 fd11 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ba56:	69a3      	ldr	r3, [r4, #24]
 800ba58:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ba5c:	d0d1      	beq.n	800ba02 <HAL_TIM_Base_Init+0xee>
 800ba5e:	e7e7      	b.n	800ba30 <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ba60:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800ba64:	4809      	ldr	r0, [pc, #36]	; (800ba8c <HAL_TIM_Base_Init+0x178>)
 800ba66:	f7f6 fd07 	bl	8002478 <assert_failed>
 800ba6a:	e7bf      	b.n	800b9ec <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba6c:	f240 110d 	movw	r1, #269	; 0x10d
 800ba70:	4806      	ldr	r0, [pc, #24]	; (800ba8c <HAL_TIM_Base_Init+0x178>)
 800ba72:	f7f6 fd01 	bl	8002478 <assert_failed>
 800ba76:	e7a9      	b.n	800b9cc <HAL_TIM_Base_Init+0xb8>
 800ba78:	40000800 	.word	0x40000800
 800ba7c:	40010000 	.word	0x40010000
 800ba80:	40000400 	.word	0x40000400
 800ba84:	40000c00 	.word	0x40000c00
 800ba88:	40002000 	.word	0x40002000
 800ba8c:	080216d0 	.word	0x080216d0

0800ba90 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f000 8097 	beq.w	800bbc4 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba96:	6802      	ldr	r2, [r0, #0]
 800ba98:	4956      	ldr	r1, [pc, #344]	; (800bbf4 <HAL_TIM_OC_Init+0x164>)
{
 800ba9a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ba9c:	4b56      	ldr	r3, [pc, #344]	; (800bbf8 <HAL_TIM_OC_Init+0x168>)
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4856      	ldr	r0, [pc, #344]	; (800bbfc <HAL_TIM_OC_Init+0x16c>)
 800baa2:	429a      	cmp	r2, r3
 800baa4:	bf18      	it	ne
 800baa6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800baaa:	4d55      	ldr	r5, [pc, #340]	; (800bc00 <HAL_TIM_OC_Init+0x170>)
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	4282      	cmp	r2, r0
 800bab4:	bf0c      	ite	eq
 800bab6:	2300      	moveq	r3, #0
 800bab8:	f003 0301 	andne.w	r3, r3, #1
 800babc:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bac0:	428a      	cmp	r2, r1
 800bac2:	bf0c      	ite	eq
 800bac4:	2300      	moveq	r3, #0
 800bac6:	f003 0301 	andne.w	r3, r3, #1
 800baca:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bace:	42aa      	cmp	r2, r5
 800bad0:	bf0c      	ite	eq
 800bad2:	2300      	moveq	r3, #0
 800bad4:	f003 0301 	andne.w	r3, r3, #1
 800bad8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800badc:	4282      	cmp	r2, r0
 800bade:	bf0c      	ite	eq
 800bae0:	2300      	moveq	r3, #0
 800bae2:	f003 0301 	andne.w	r3, r3, #1
 800bae6:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800baea:	428a      	cmp	r2, r1
 800baec:	bf0c      	ite	eq
 800baee:	2300      	moveq	r3, #0
 800baf0:	f003 0301 	andne.w	r3, r3, #1
 800baf4:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800baf8:	42aa      	cmp	r2, r5
 800bafa:	bf0c      	ite	eq
 800bafc:	2300      	moveq	r3, #0
 800bafe:	f003 0301 	andne.w	r3, r3, #1
 800bb02:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bb06:	4282      	cmp	r2, r0
 800bb08:	bf0c      	ite	eq
 800bb0a:	2300      	moveq	r3, #0
 800bb0c:	f003 0301 	andne.w	r3, r3, #1
 800bb10:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bb14:	428a      	cmp	r2, r1
 800bb16:	bf0c      	ite	eq
 800bb18:	2300      	moveq	r3, #0
 800bb1a:	f003 0301 	andne.w	r3, r3, #1
 800bb1e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bb22:	42aa      	cmp	r2, r5
 800bb24:	bf0c      	ite	eq
 800bb26:	2300      	moveq	r3, #0
 800bb28:	f003 0301 	andne.w	r3, r3, #1
 800bb2c:	4282      	cmp	r2, r0
 800bb2e:	bf0c      	ite	eq
 800bb30:	2300      	moveq	r3, #0
 800bb32:	f003 0301 	andne.w	r3, r3, #1
 800bb36:	428a      	cmp	r2, r1
 800bb38:	bf0c      	ite	eq
 800bb3a:	2300      	moveq	r3, #0
 800bb3c:	f003 0301 	andne.w	r3, r3, #1
 800bb40:	b113      	cbz	r3, 800bb48 <HAL_TIM_OC_Init+0xb8>
 800bb42:	4b30      	ldr	r3, [pc, #192]	; (800bc04 <HAL_TIM_OC_Init+0x174>)
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d14f      	bne.n	800bbe8 <HAL_TIM_OC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bb48:	68a2      	ldr	r2, [r4, #8]
 800bb4a:	f032 0310 	bics.w	r3, r2, #16
 800bb4e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bb52:	bf14      	ite	ne
 800bb54:	2301      	movne	r3, #1
 800bb56:	2300      	moveq	r3, #0
 800bb58:	2920      	cmp	r1, #32
 800bb5a:	bf0c      	ite	eq
 800bb5c:	2300      	moveq	r3, #0
 800bb5e:	f003 0301 	andne.w	r3, r3, #1
 800bb62:	b10b      	cbz	r3, 800bb68 <HAL_TIM_OC_Init+0xd8>
 800bb64:	2a40      	cmp	r2, #64	; 0x40
 800bb66:	d139      	bne.n	800bbdc <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bb6e:	d002      	beq.n	800bb76 <HAL_TIM_OC_Init+0xe6>
 800bb70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb74:	d128      	bne.n	800bbc8 <HAL_TIM_OC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bb76:	69a3      	ldr	r3, [r4, #24]
 800bb78:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bb7c:	d116      	bne.n	800bbac <HAL_TIM_OC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bb7e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bb82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bb86:	b15b      	cbz	r3, 800bba0 <HAL_TIM_OC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800bb88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bb8a:	6820      	ldr	r0, [r4, #0]
 800bb8c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bb8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bb92:	f7ff fe4f 	bl	800b834 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bb96:	2301      	movs	r3, #1
  return HAL_OK;
 800bb98:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bb9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800bba0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800bba4:	4620      	mov	r0, r4
 800bba6:	f7ff f9c1 	bl	800af2c <HAL_TIM_OC_MspInit>
 800bbaa:	e7ed      	b.n	800bb88 <HAL_TIM_OC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bbac:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800bbb0:	4815      	ldr	r0, [pc, #84]	; (800bc08 <HAL_TIM_OC_Init+0x178>)
 800bbb2:	f7f6 fc61 	bl	8002478 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bbb6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bbba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e2      	bne.n	800bb88 <HAL_TIM_OC_Init+0xf8>
 800bbc2:	e7ed      	b.n	800bba0 <HAL_TIM_OC_Init+0x110>
    return HAL_ERROR;
 800bbc4:	2001      	movs	r0, #1
}
 800bbc6:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bbc8:	f240 215b 	movw	r1, #603	; 0x25b
 800bbcc:	480e      	ldr	r0, [pc, #56]	; (800bc08 <HAL_TIM_OC_Init+0x178>)
 800bbce:	f7f6 fc53 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bbd2:	69a3      	ldr	r3, [r4, #24]
 800bbd4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bbd8:	d0d1      	beq.n	800bb7e <HAL_TIM_OC_Init+0xee>
 800bbda:	e7e7      	b.n	800bbac <HAL_TIM_OC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bbdc:	f240 215a 	movw	r1, #602	; 0x25a
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <HAL_TIM_OC_Init+0x178>)
 800bbe2:	f7f6 fc49 	bl	8002478 <assert_failed>
 800bbe6:	e7bf      	b.n	800bb68 <HAL_TIM_OC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bbe8:	f240 2159 	movw	r1, #601	; 0x259
 800bbec:	4806      	ldr	r0, [pc, #24]	; (800bc08 <HAL_TIM_OC_Init+0x178>)
 800bbee:	f7f6 fc43 	bl	8002478 <assert_failed>
 800bbf2:	e7a9      	b.n	800bb48 <HAL_TIM_OC_Init+0xb8>
 800bbf4:	40000800 	.word	0x40000800
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40000400 	.word	0x40000400
 800bc00:	40000c00 	.word	0x40000c00
 800bc04:	40002000 	.word	0x40002000
 800bc08:	080216d0 	.word	0x080216d0

0800bc0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	f000 8097 	beq.w	800bd40 <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bc12:	6802      	ldr	r2, [r0, #0]
 800bc14:	4956      	ldr	r1, [pc, #344]	; (800bd70 <HAL_TIM_PWM_Init+0x164>)
{
 800bc16:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bc18:	4b56      	ldr	r3, [pc, #344]	; (800bd74 <HAL_TIM_PWM_Init+0x168>)
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4856      	ldr	r0, [pc, #344]	; (800bd78 <HAL_TIM_PWM_Init+0x16c>)
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	bf18      	it	ne
 800bc22:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bc26:	4d55      	ldr	r5, [pc, #340]	; (800bd7c <HAL_TIM_PWM_Init+0x170>)
 800bc28:	bf14      	ite	ne
 800bc2a:	2301      	movne	r3, #1
 800bc2c:	2300      	moveq	r3, #0
 800bc2e:	4282      	cmp	r2, r0
 800bc30:	bf0c      	ite	eq
 800bc32:	2300      	moveq	r3, #0
 800bc34:	f003 0301 	andne.w	r3, r3, #1
 800bc38:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bc3c:	428a      	cmp	r2, r1
 800bc3e:	bf0c      	ite	eq
 800bc40:	2300      	moveq	r3, #0
 800bc42:	f003 0301 	andne.w	r3, r3, #1
 800bc46:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bc4a:	42aa      	cmp	r2, r5
 800bc4c:	bf0c      	ite	eq
 800bc4e:	2300      	moveq	r3, #0
 800bc50:	f003 0301 	andne.w	r3, r3, #1
 800bc54:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bc58:	4282      	cmp	r2, r0
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2300      	moveq	r3, #0
 800bc5e:	f003 0301 	andne.w	r3, r3, #1
 800bc62:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bc66:	428a      	cmp	r2, r1
 800bc68:	bf0c      	ite	eq
 800bc6a:	2300      	moveq	r3, #0
 800bc6c:	f003 0301 	andne.w	r3, r3, #1
 800bc70:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bc74:	42aa      	cmp	r2, r5
 800bc76:	bf0c      	ite	eq
 800bc78:	2300      	moveq	r3, #0
 800bc7a:	f003 0301 	andne.w	r3, r3, #1
 800bc7e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bc82:	4282      	cmp	r2, r0
 800bc84:	bf0c      	ite	eq
 800bc86:	2300      	moveq	r3, #0
 800bc88:	f003 0301 	andne.w	r3, r3, #1
 800bc8c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bc90:	428a      	cmp	r2, r1
 800bc92:	bf0c      	ite	eq
 800bc94:	2300      	moveq	r3, #0
 800bc96:	f003 0301 	andne.w	r3, r3, #1
 800bc9a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bc9e:	42aa      	cmp	r2, r5
 800bca0:	bf0c      	ite	eq
 800bca2:	2300      	moveq	r3, #0
 800bca4:	f003 0301 	andne.w	r3, r3, #1
 800bca8:	4282      	cmp	r2, r0
 800bcaa:	bf0c      	ite	eq
 800bcac:	2300      	moveq	r3, #0
 800bcae:	f003 0301 	andne.w	r3, r3, #1
 800bcb2:	428a      	cmp	r2, r1
 800bcb4:	bf0c      	ite	eq
 800bcb6:	2300      	moveq	r3, #0
 800bcb8:	f003 0301 	andne.w	r3, r3, #1
 800bcbc:	b113      	cbz	r3, 800bcc4 <HAL_TIM_PWM_Init+0xb8>
 800bcbe:	4b30      	ldr	r3, [pc, #192]	; (800bd80 <HAL_TIM_PWM_Init+0x174>)
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d14f      	bne.n	800bd64 <HAL_TIM_PWM_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bcc4:	68a2      	ldr	r2, [r4, #8]
 800bcc6:	f032 0310 	bics.w	r3, r2, #16
 800bcca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800bcce:	bf14      	ite	ne
 800bcd0:	2301      	movne	r3, #1
 800bcd2:	2300      	moveq	r3, #0
 800bcd4:	2920      	cmp	r1, #32
 800bcd6:	bf0c      	ite	eq
 800bcd8:	2300      	moveq	r3, #0
 800bcda:	f003 0301 	andne.w	r3, r3, #1
 800bcde:	b10b      	cbz	r3, 800bce4 <HAL_TIM_PWM_Init+0xd8>
 800bce0:	2a40      	cmp	r2, #64	; 0x40
 800bce2:	d139      	bne.n	800bd58 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bce4:	6923      	ldr	r3, [r4, #16]
 800bce6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bcea:	d002      	beq.n	800bcf2 <HAL_TIM_PWM_Init+0xe6>
 800bcec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcf0:	d128      	bne.n	800bd44 <HAL_TIM_PWM_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bcf2:	69a3      	ldr	r3, [r4, #24]
 800bcf4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bcf8:	d116      	bne.n	800bd28 <HAL_TIM_PWM_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bcfa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bcfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd02:	b15b      	cbz	r3, 800bd1c <HAL_TIM_PWM_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800bd04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd06:	6820      	ldr	r0, [r4, #0]
 800bd08:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd0e:	f7ff fd91 	bl	800b834 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800bd12:	2301      	movs	r3, #1
  return HAL_OK;
 800bd14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800bd16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800bd1c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800bd20:	4620      	mov	r0, r4
 800bd22:	f7ff f905 	bl	800af30 <HAL_TIM_PWM_MspInit>
 800bd26:	e7ed      	b.n	800bd04 <HAL_TIM_PWM_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bd28:	f240 419d 	movw	r1, #1181	; 0x49d
 800bd2c:	4815      	ldr	r0, [pc, #84]	; (800bd84 <HAL_TIM_PWM_Init+0x178>)
 800bd2e:	f7f6 fba3 	bl	8002478 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bd32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bd36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e2      	bne.n	800bd04 <HAL_TIM_PWM_Init+0xf8>
 800bd3e:	e7ed      	b.n	800bd1c <HAL_TIM_PWM_Init+0x110>
    return HAL_ERROR;
 800bd40:	2001      	movs	r0, #1
}
 800bd42:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bd44:	f240 419c 	movw	r1, #1180	; 0x49c
 800bd48:	480e      	ldr	r0, [pc, #56]	; (800bd84 <HAL_TIM_PWM_Init+0x178>)
 800bd4a:	f7f6 fb95 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bd4e:	69a3      	ldr	r3, [r4, #24]
 800bd50:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bd54:	d0d1      	beq.n	800bcfa <HAL_TIM_PWM_Init+0xee>
 800bd56:	e7e7      	b.n	800bd28 <HAL_TIM_PWM_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bd58:	f240 419b 	movw	r1, #1179	; 0x49b
 800bd5c:	4809      	ldr	r0, [pc, #36]	; (800bd84 <HAL_TIM_PWM_Init+0x178>)
 800bd5e:	f7f6 fb8b 	bl	8002478 <assert_failed>
 800bd62:	e7bf      	b.n	800bce4 <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd64:	f240 419a 	movw	r1, #1178	; 0x49a
 800bd68:	4806      	ldr	r0, [pc, #24]	; (800bd84 <HAL_TIM_PWM_Init+0x178>)
 800bd6a:	f7f6 fb85 	bl	8002478 <assert_failed>
 800bd6e:	e7a9      	b.n	800bcc4 <HAL_TIM_PWM_Init+0xb8>
 800bd70:	40000800 	.word	0x40000800
 800bd74:	40010000 	.word	0x40010000
 800bd78:	40000400 	.word	0x40000400
 800bd7c:	40000c00 	.word	0x40000c00
 800bd80:	40002000 	.word	0x40002000
 800bd84:	080216d0 	.word	0x080216d0

0800bd88 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	f000 8097 	beq.w	800bebc <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd8e:	6802      	ldr	r2, [r0, #0]
 800bd90:	4956      	ldr	r1, [pc, #344]	; (800beec <HAL_TIM_IC_Init+0x164>)
{
 800bd92:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bd94:	4b56      	ldr	r3, [pc, #344]	; (800bef0 <HAL_TIM_IC_Init+0x168>)
 800bd96:	4604      	mov	r4, r0
 800bd98:	4856      	ldr	r0, [pc, #344]	; (800bef4 <HAL_TIM_IC_Init+0x16c>)
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	bf18      	it	ne
 800bd9e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bda2:	4d55      	ldr	r5, [pc, #340]	; (800bef8 <HAL_TIM_IC_Init+0x170>)
 800bda4:	bf14      	ite	ne
 800bda6:	2301      	movne	r3, #1
 800bda8:	2300      	moveq	r3, #0
 800bdaa:	4282      	cmp	r2, r0
 800bdac:	bf0c      	ite	eq
 800bdae:	2300      	moveq	r3, #0
 800bdb0:	f003 0301 	andne.w	r3, r3, #1
 800bdb4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bdb8:	428a      	cmp	r2, r1
 800bdba:	bf0c      	ite	eq
 800bdbc:	2300      	moveq	r3, #0
 800bdbe:	f003 0301 	andne.w	r3, r3, #1
 800bdc2:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bdc6:	42aa      	cmp	r2, r5
 800bdc8:	bf0c      	ite	eq
 800bdca:	2300      	moveq	r3, #0
 800bdcc:	f003 0301 	andne.w	r3, r3, #1
 800bdd0:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bdd4:	4282      	cmp	r2, r0
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2300      	moveq	r3, #0
 800bdda:	f003 0301 	andne.w	r3, r3, #1
 800bdde:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bde2:	428a      	cmp	r2, r1
 800bde4:	bf0c      	ite	eq
 800bde6:	2300      	moveq	r3, #0
 800bde8:	f003 0301 	andne.w	r3, r3, #1
 800bdec:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bdf0:	42aa      	cmp	r2, r5
 800bdf2:	bf0c      	ite	eq
 800bdf4:	2300      	moveq	r3, #0
 800bdf6:	f003 0301 	andne.w	r3, r3, #1
 800bdfa:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bdfe:	4282      	cmp	r2, r0
 800be00:	bf0c      	ite	eq
 800be02:	2300      	moveq	r3, #0
 800be04:	f003 0301 	andne.w	r3, r3, #1
 800be08:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800be0c:	428a      	cmp	r2, r1
 800be0e:	bf0c      	ite	eq
 800be10:	2300      	moveq	r3, #0
 800be12:	f003 0301 	andne.w	r3, r3, #1
 800be16:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800be1a:	42aa      	cmp	r2, r5
 800be1c:	bf0c      	ite	eq
 800be1e:	2300      	moveq	r3, #0
 800be20:	f003 0301 	andne.w	r3, r3, #1
 800be24:	4282      	cmp	r2, r0
 800be26:	bf0c      	ite	eq
 800be28:	2300      	moveq	r3, #0
 800be2a:	f003 0301 	andne.w	r3, r3, #1
 800be2e:	428a      	cmp	r2, r1
 800be30:	bf0c      	ite	eq
 800be32:	2300      	moveq	r3, #0
 800be34:	f003 0301 	andne.w	r3, r3, #1
 800be38:	b113      	cbz	r3, 800be40 <HAL_TIM_IC_Init+0xb8>
 800be3a:	4b30      	ldr	r3, [pc, #192]	; (800befc <HAL_TIM_IC_Init+0x174>)
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d14f      	bne.n	800bee0 <HAL_TIM_IC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800be40:	68a2      	ldr	r2, [r4, #8]
 800be42:	f032 0310 	bics.w	r3, r2, #16
 800be46:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800be4a:	bf14      	ite	ne
 800be4c:	2301      	movne	r3, #1
 800be4e:	2300      	moveq	r3, #0
 800be50:	2920      	cmp	r1, #32
 800be52:	bf0c      	ite	eq
 800be54:	2300      	moveq	r3, #0
 800be56:	f003 0301 	andne.w	r3, r3, #1
 800be5a:	b10b      	cbz	r3, 800be60 <HAL_TIM_IC_Init+0xd8>
 800be5c:	2a40      	cmp	r2, #64	; 0x40
 800be5e:	d139      	bne.n	800bed4 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800be66:	d002      	beq.n	800be6e <HAL_TIM_IC_Init+0xe6>
 800be68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be6c:	d128      	bne.n	800bec0 <HAL_TIM_IC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800be6e:	69a3      	ldr	r3, [r4, #24]
 800be70:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800be74:	d116      	bne.n	800bea4 <HAL_TIM_IC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800be76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800be7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be7e:	b15b      	cbz	r3, 800be98 <HAL_TIM_IC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800be80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be82:	6820      	ldr	r0, [r4, #0]
 800be84:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800be86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be8a:	f7ff fcd3 	bl	800b834 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800be8e:	2301      	movs	r3, #1
  return HAL_OK;
 800be90:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800be92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800be96:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800be98:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7ff f849 	bl	800af34 <HAL_TIM_IC_MspInit>
 800bea2:	e7ed      	b.n	800be80 <HAL_TIM_IC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800bea4:	f240 61df 	movw	r1, #1759	; 0x6df
 800bea8:	4815      	ldr	r0, [pc, #84]	; (800bf00 <HAL_TIM_IC_Init+0x178>)
 800beaa:	f7f6 fae5 	bl	8002478 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800beae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800beb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e2      	bne.n	800be80 <HAL_TIM_IC_Init+0xf8>
 800beba:	e7ed      	b.n	800be98 <HAL_TIM_IC_Init+0x110>
    return HAL_ERROR;
 800bebc:	2001      	movs	r0, #1
}
 800bebe:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800bec0:	f240 61de 	movw	r1, #1758	; 0x6de
 800bec4:	480e      	ldr	r0, [pc, #56]	; (800bf00 <HAL_TIM_IC_Init+0x178>)
 800bec6:	f7f6 fad7 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800beca:	69a3      	ldr	r3, [r4, #24]
 800becc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bed0:	d0d1      	beq.n	800be76 <HAL_TIM_IC_Init+0xee>
 800bed2:	e7e7      	b.n	800bea4 <HAL_TIM_IC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800bed4:	f240 61dd 	movw	r1, #1757	; 0x6dd
 800bed8:	4809      	ldr	r0, [pc, #36]	; (800bf00 <HAL_TIM_IC_Init+0x178>)
 800beda:	f7f6 facd 	bl	8002478 <assert_failed>
 800bede:	e7bf      	b.n	800be60 <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bee0:	f240 61dc 	movw	r1, #1756	; 0x6dc
 800bee4:	4806      	ldr	r0, [pc, #24]	; (800bf00 <HAL_TIM_IC_Init+0x178>)
 800bee6:	f7f6 fac7 	bl	8002478 <assert_failed>
 800beea:	e7a9      	b.n	800be40 <HAL_TIM_IC_Init+0xb8>
 800beec:	40000800 	.word	0x40000800
 800bef0:	40010000 	.word	0x40010000
 800bef4:	40000400 	.word	0x40000400
 800bef8:	40000c00 	.word	0x40000c00
 800befc:	40002000 	.word	0x40002000
 800bf00:	080216d0 	.word	0x080216d0

0800bf04 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf04:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf06:	4b2e      	ldr	r3, [pc, #184]	; (800bfc0 <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf08:	f022 0210 	bic.w	r2, r2, #16
{
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf12:	6889      	ldr	r1, [r1, #8]
{
 800bf14:	4604      	mov	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf16:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf18:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800bf1a:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800bf1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800bf20:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800bf22:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf26:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf28:	4a26      	ldr	r2, [pc, #152]	; (800bfc4 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf2a:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf2e:	4290      	cmp	r0, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf30:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf34:	d00a      	beq.n	800bf4c <TIM_OC2_SetConfig+0x48>
 800bf36:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <TIM_OC2_SetConfig+0xc4>)
 800bf38:	4298      	cmp	r0, r3
 800bf3a:	d007      	beq.n	800bf4c <TIM_OC2_SetConfig+0x48>
  TIMx->CCR2 = OC_Config->Pulse;
 800bf3c:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800bf3e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800bf42:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800bf44:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800bf46:	6225      	str	r5, [r4, #32]
}
 800bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bf4c:	68f2      	ldr	r2, [r6, #12]
 800bf4e:	f032 0308 	bics.w	r3, r2, #8
 800bf52:	d12d      	bne.n	800bfb0 <TIM_OC2_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf54:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bf58:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf5a:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bf5e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf62:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bf66:	d119      	bne.n	800bf9c <TIM_OC2_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bf68:	6973      	ldr	r3, [r6, #20]
 800bf6a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bf6e:	d107      	bne.n	800bf80 <TIM_OC2_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf70:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf74:	69b1      	ldr	r1, [r6, #24]
 800bf76:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800bf7a:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800bf7e:	e7dd      	b.n	800bf3c <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bf80:	f241 71d0 	movw	r1, #6096	; 0x17d0
 800bf84:	4811      	ldr	r0, [pc, #68]	; (800bfcc <TIM_OC2_SetConfig+0xc8>)
 800bf86:	f7f6 fa77 	bl	8002478 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf8a:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf8e:	69b1      	ldr	r1, [r6, #24]
 800bf90:	6973      	ldr	r3, [r6, #20]
 800bf92:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800bf96:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800bf9a:	e7cf      	b.n	800bf3c <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bf9c:	f241 71cf 	movw	r1, #6095	; 0x17cf
 800bfa0:	480a      	ldr	r0, [pc, #40]	; (800bfcc <TIM_OC2_SetConfig+0xc8>)
 800bfa2:	f7f6 fa69 	bl	8002478 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bfa6:	6973      	ldr	r3, [r6, #20]
 800bfa8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bfac:	d0e0      	beq.n	800bf70 <TIM_OC2_SetConfig+0x6c>
 800bfae:	e7e7      	b.n	800bf80 <TIM_OC2_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bfb0:	f241 71c1 	movw	r1, #6081	; 0x17c1
 800bfb4:	4805      	ldr	r0, [pc, #20]	; (800bfcc <TIM_OC2_SetConfig+0xc8>)
 800bfb6:	f7f6 fa5f 	bl	8002478 <assert_failed>
 800bfba:	68f2      	ldr	r2, [r6, #12]
 800bfbc:	e7ca      	b.n	800bf54 <TIM_OC2_SetConfig+0x50>
 800bfbe:	bf00      	nop
 800bfc0:	feff8cff 	.word	0xfeff8cff
 800bfc4:	40010000 	.word	0x40010000
 800bfc8:	40010400 	.word	0x40010400
 800bfcc:	080216d0 	.word	0x080216d0

0800bfd0 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800bfd0:	2a14      	cmp	r2, #20
{
 800bfd2:	b570      	push	{r4, r5, r6, lr}
 800bfd4:	4615      	mov	r5, r2
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800bfda:	f240 808f 	bls.w	800c0fc <HAL_TIM_OC_ConfigChannel+0x12c>
 800bfde:	2a3c      	cmp	r2, #60	; 0x3c
 800bfe0:	f040 8091 	bne.w	800c106 <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	f023 0210 	bic.w	r2, r3, #16
 800bfea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800bfee:	2a40      	cmp	r2, #64	; 0x40
 800bff0:	bf18      	it	ne
 800bff2:	2b00      	cmpne	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_OC_ConfigChannel+0x2e>
 800bff6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800bffa:	f040 8137 	bne.w	800c26c <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800bffe:	68b3      	ldr	r3, [r6, #8]
 800c000:	f033 0302 	bics.w	r3, r3, #2
 800c004:	f040 8085 	bne.w	800c112 <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800c008:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	f000 808a 	beq.w	800c126 <HAL_TIM_OC_ConfigChannel+0x156>
 800c012:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c014:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800c016:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c01a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800c01e:	2d14      	cmp	r5, #20
 800c020:	d864      	bhi.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
 800c022:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c026:	0015      	.short	0x0015
 800c028:	00630063 	.word	0x00630063
 800c02c:	00820063 	.word	0x00820063
 800c030:	00630063 	.word	0x00630063
 800c034:	00b50063 	.word	0x00b50063
 800c038:	00630063 	.word	0x00630063
 800c03c:	00d90063 	.word	0x00d90063
 800c040:	00630063 	.word	0x00630063
 800c044:	00fd0063 	.word	0x00fd0063
 800c048:	00630063 	.word	0x00630063
 800c04c:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c050:	6820      	ldr	r0, [r4, #0]
 800c052:	4b97      	ldr	r3, [pc, #604]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c054:	4a97      	ldr	r2, [pc, #604]	; (800c2b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c056:	4298      	cmp	r0, r3
 800c058:	bf18      	it	ne
 800c05a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c05e:	4996      	ldr	r1, [pc, #600]	; (800c2b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c060:	bf14      	ite	ne
 800c062:	2301      	movne	r3, #1
 800c064:	2300      	moveq	r3, #0
 800c066:	4290      	cmp	r0, r2
 800c068:	bf0c      	ite	eq
 800c06a:	2300      	moveq	r3, #0
 800c06c:	f003 0301 	andne.w	r3, r3, #1
 800c070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c074:	4288      	cmp	r0, r1
 800c076:	bf0c      	ite	eq
 800c078:	2300      	moveq	r3, #0
 800c07a:	f003 0301 	andne.w	r3, r3, #1
 800c07e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c082:	4290      	cmp	r0, r2
 800c084:	bf0c      	ite	eq
 800c086:	2300      	moveq	r3, #0
 800c088:	f003 0301 	andne.w	r3, r3, #1
 800c08c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c090:	4288      	cmp	r0, r1
 800c092:	bf0c      	ite	eq
 800c094:	2300      	moveq	r3, #0
 800c096:	f003 0301 	andne.w	r3, r3, #1
 800c09a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800c09e:	4290      	cmp	r0, r2
 800c0a0:	bf0c      	ite	eq
 800c0a2:	2300      	moveq	r3, #0
 800c0a4:	f003 0301 	andne.w	r3, r3, #1
 800c0a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0ac:	4288      	cmp	r0, r1
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2300      	moveq	r3, #0
 800c0b2:	f003 0301 	andne.w	r3, r3, #1
 800c0b6:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800c0ba:	4290      	cmp	r0, r2
 800c0bc:	bf0c      	ite	eq
 800c0be:	2300      	moveq	r3, #0
 800c0c0:	f003 0301 	andne.w	r3, r3, #1
 800c0c4:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800c0c8:	4288      	cmp	r0, r1
 800c0ca:	bf0c      	ite	eq
 800c0cc:	2300      	moveq	r3, #0
 800c0ce:	f003 0301 	andne.w	r3, r3, #1
 800c0d2:	4290      	cmp	r0, r2
 800c0d4:	bf0c      	ite	eq
 800c0d6:	2300      	moveq	r3, #0
 800c0d8:	f003 0301 	andne.w	r3, r3, #1
 800c0dc:	b11b      	cbz	r3, 800c0e6 <HAL_TIM_OC_ConfigChannel+0x116>
 800c0de:	4b77      	ldr	r3, [pc, #476]	; (800c2bc <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800c0e0:	4298      	cmp	r0, r3
 800c0e2:	f040 80de 	bne.w	800c2a2 <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	f7fe faec 	bl	800a6c4 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800c0ec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c0ee:	2201      	movs	r2, #1
  return HAL_OK;
 800c0f0:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c0f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c0f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800c0fc:	4b70      	ldr	r3, [pc, #448]	; (800c2c0 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800c0fe:	40d3      	lsrs	r3, r2
 800c100:	07db      	lsls	r3, r3, #31
 800c102:	f53f af6f 	bmi.w	800bfe4 <HAL_TIM_OC_ConfigChannel+0x14>
 800c106:	f640 514c 	movw	r1, #3404	; 0xd4c
 800c10a:	486e      	ldr	r0, [pc, #440]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c10c:	f7f6 f9b4 	bl	8002478 <assert_failed>
 800c110:	e768      	b.n	800bfe4 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c112:	f640 514e 	movw	r1, #3406	; 0xd4e
 800c116:	486b      	ldr	r0, [pc, #428]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c118:	f7f6 f9ae 	bl	8002478 <assert_failed>
  __HAL_LOCK(htim);
 800c11c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c120:	2b01      	cmp	r3, #1
 800c122:	f47f af76 	bne.w	800c012 <HAL_TIM_OC_ConfigChannel+0x42>
 800c126:	2002      	movs	r0, #2
}
 800c128:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	4b60      	ldr	r3, [pc, #384]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c12e:	4a61      	ldr	r2, [pc, #388]	; (800c2b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c130:	4298      	cmp	r0, r3
 800c132:	bf18      	it	ne
 800c134:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c138:	495f      	ldr	r1, [pc, #380]	; (800c2b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c13a:	bf14      	ite	ne
 800c13c:	2301      	movne	r3, #1
 800c13e:	2300      	moveq	r3, #0
 800c140:	4290      	cmp	r0, r2
 800c142:	bf0c      	ite	eq
 800c144:	2300      	moveq	r3, #0
 800c146:	f003 0301 	andne.w	r3, r3, #1
 800c14a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c14e:	4288      	cmp	r0, r1
 800c150:	bf0c      	ite	eq
 800c152:	2300      	moveq	r3, #0
 800c154:	f003 0301 	andne.w	r3, r3, #1
 800c158:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c15c:	4290      	cmp	r0, r2
 800c15e:	bf0c      	ite	eq
 800c160:	2300      	moveq	r3, #0
 800c162:	f003 0301 	andne.w	r3, r3, #1
 800c166:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c16a:	4288      	cmp	r0, r1
 800c16c:	bf0c      	ite	eq
 800c16e:	2300      	moveq	r3, #0
 800c170:	f003 0301 	andne.w	r3, r3, #1
 800c174:	4290      	cmp	r0, r2
 800c176:	bf0c      	ite	eq
 800c178:	2300      	moveq	r3, #0
 800c17a:	f003 0301 	andne.w	r3, r3, #1
 800c17e:	b11b      	cbz	r3, 800c188 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800c180:	4b51      	ldr	r3, [pc, #324]	; (800c2c8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800c182:	4298      	cmp	r0, r3
 800c184:	f040 8086 	bne.w	800c294 <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c188:	4631      	mov	r1, r6
 800c18a:	f7ff febb 	bl	800bf04 <TIM_OC2_SetConfig>
      break;
 800c18e:	e7ad      	b.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c190:	6820      	ldr	r0, [r4, #0]
 800c192:	4b47      	ldr	r3, [pc, #284]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c194:	4a47      	ldr	r2, [pc, #284]	; (800c2b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c196:	4298      	cmp	r0, r3
 800c198:	bf18      	it	ne
 800c19a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c19e:	4946      	ldr	r1, [pc, #280]	; (800c2b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c1a0:	bf14      	ite	ne
 800c1a2:	2301      	movne	r3, #1
 800c1a4:	2300      	moveq	r3, #0
 800c1a6:	4290      	cmp	r0, r2
 800c1a8:	bf0c      	ite	eq
 800c1aa:	2300      	moveq	r3, #0
 800c1ac:	f003 0301 	andne.w	r3, r3, #1
 800c1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1b4:	4288      	cmp	r0, r1
 800c1b6:	bf0c      	ite	eq
 800c1b8:	2300      	moveq	r3, #0
 800c1ba:	f003 0301 	andne.w	r3, r3, #1
 800c1be:	4290      	cmp	r0, r2
 800c1c0:	bf0c      	ite	eq
 800c1c2:	2300      	moveq	r3, #0
 800c1c4:	f003 0301 	andne.w	r3, r3, #1
 800c1c8:	b113      	cbz	r3, 800c1d0 <HAL_TIM_OC_ConfigChannel+0x200>
 800c1ca:	4b40      	ldr	r3, [pc, #256]	; (800c2cc <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800c1cc:	4298      	cmp	r0, r3
 800c1ce:	d15a      	bne.n	800c286 <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	f7fe fad9 	bl	800a788 <TIM_OC3_SetConfig>
      break;
 800c1d6:	e789      	b.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c1d8:	6820      	ldr	r0, [r4, #0]
 800c1da:	4b35      	ldr	r3, [pc, #212]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c1dc:	4a35      	ldr	r2, [pc, #212]	; (800c2b4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800c1de:	4298      	cmp	r0, r3
 800c1e0:	bf18      	it	ne
 800c1e2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c1e6:	4934      	ldr	r1, [pc, #208]	; (800c2b8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800c1e8:	bf14      	ite	ne
 800c1ea:	2301      	movne	r3, #1
 800c1ec:	2300      	moveq	r3, #0
 800c1ee:	4290      	cmp	r0, r2
 800c1f0:	bf0c      	ite	eq
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	f003 0301 	andne.w	r3, r3, #1
 800c1f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1fc:	4288      	cmp	r0, r1
 800c1fe:	bf0c      	ite	eq
 800c200:	2300      	moveq	r3, #0
 800c202:	f003 0301 	andne.w	r3, r3, #1
 800c206:	4290      	cmp	r0, r2
 800c208:	bf0c      	ite	eq
 800c20a:	2300      	moveq	r3, #0
 800c20c:	f003 0301 	andne.w	r3, r3, #1
 800c210:	b113      	cbz	r3, 800c218 <HAL_TIM_OC_ConfigChannel+0x248>
 800c212:	4b2e      	ldr	r3, [pc, #184]	; (800c2cc <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800c214:	4298      	cmp	r0, r3
 800c216:	d12f      	bne.n	800c278 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c218:	4631      	mov	r1, r6
 800c21a:	f7fe fb1b 	bl	800a854 <TIM_OC4_SetConfig>
      break;
 800c21e:	e765      	b.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c220:	6820      	ldr	r0, [r4, #0]
 800c222:	4b23      	ldr	r3, [pc, #140]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c224:	4298      	cmp	r0, r3
 800c226:	d003      	beq.n	800c230 <HAL_TIM_OC_ConfigChannel+0x260>
 800c228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c22c:	4298      	cmp	r0, r3
 800c22e:	d116      	bne.n	800c25e <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c230:	4631      	mov	r1, r6
 800c232:	f7fe f9f3 	bl	800a61c <TIM_OC5_SetConfig>
      break;
 800c236:	e759      	b.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c238:	6820      	ldr	r0, [r4, #0]
 800c23a:	4b1d      	ldr	r3, [pc, #116]	; (800c2b0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800c23c:	4298      	cmp	r0, r3
 800c23e:	d003      	beq.n	800c248 <HAL_TIM_OC_ConfigChannel+0x278>
 800c240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c244:	4298      	cmp	r0, r3
 800c246:	d103      	bne.n	800c250 <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c248:	4631      	mov	r1, r6
 800c24a:	f7fe fa11 	bl	800a670 <TIM_OC6_SetConfig>
      break;
 800c24e:	e74d      	b.n	800c0ec <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c250:	481c      	ldr	r0, [pc, #112]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c252:	f640 518c 	movw	r1, #3468	; 0xd8c
 800c256:	f7f6 f90f 	bl	8002478 <assert_failed>
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	e7f4      	b.n	800c248 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c25e:	4819      	ldr	r0, [pc, #100]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c260:	f640 5182 	movw	r1, #3458	; 0xd82
 800c264:	f7f6 f908 	bl	8002478 <assert_failed>
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	e7e1      	b.n	800c230 <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800c26c:	f640 514d 	movw	r1, #3405	; 0xd4d
 800c270:	4814      	ldr	r0, [pc, #80]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c272:	f7f6 f901 	bl	8002478 <assert_failed>
 800c276:	e6c2      	b.n	800bffe <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c278:	4812      	ldr	r0, [pc, #72]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c27a:	f640 5178 	movw	r1, #3448	; 0xd78
 800c27e:	f7f6 f8fb 	bl	8002478 <assert_failed>
 800c282:	6820      	ldr	r0, [r4, #0]
 800c284:	e7c8      	b.n	800c218 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c286:	480f      	ldr	r0, [pc, #60]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c288:	f640 516e 	movw	r1, #3438	; 0xd6e
 800c28c:	f7f6 f8f4 	bl	8002478 <assert_failed>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	e79d      	b.n	800c1d0 <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c294:	480b      	ldr	r0, [pc, #44]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c296:	f640 5164 	movw	r1, #3428	; 0xd64
 800c29a:	f7f6 f8ed 	bl	8002478 <assert_failed>
 800c29e:	6820      	ldr	r0, [r4, #0]
 800c2a0:	e772      	b.n	800c188 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c2a2:	4808      	ldr	r0, [pc, #32]	; (800c2c4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800c2a4:	f640 515a 	movw	r1, #3418	; 0xd5a
 800c2a8:	f7f6 f8e6 	bl	8002478 <assert_failed>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	e71a      	b.n	800c0e6 <HAL_TIM_OC_ConfigChannel+0x116>
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40000400 	.word	0x40000400
 800c2b8:	40000800 	.word	0x40000800
 800c2bc:	40002000 	.word	0x40002000
 800c2c0:	00111111 	.word	0x00111111
 800c2c4:	080216d0 	.word	0x080216d0
 800c2c8:	40001800 	.word	0x40001800
 800c2cc:	40010400 	.word	0x40010400

0800c2d0 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800c2d0:	2a14      	cmp	r2, #20
{
 800c2d2:	b570      	push	{r4, r5, r6, lr}
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800c2da:	f240 809f 	bls.w	800c41c <HAL_TIM_PWM_ConfigChannel+0x14c>
 800c2de:	2a3c      	cmp	r2, #60	; 0x3c
 800c2e0:	f040 80a1 	bne.w	800c426 <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c2e4:	682a      	ldr	r2, [r5, #0]
 800c2e6:	4b97      	ldr	r3, [pc, #604]	; (800c544 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	2b60      	cmp	r3, #96	; 0x60
 800c2ec:	d005      	beq.n	800c2fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c2ee:	f022 0210 	bic.w	r2, r2, #16
 800c2f2:	4b95      	ldr	r3, [pc, #596]	; (800c548 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	f040 819e 	bne.w	800c636 <HAL_TIM_PWM_ConfigChannel+0x366>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c2fa:	68ab      	ldr	r3, [r5, #8]
 800c2fc:	f033 0302 	bics.w	r3, r3, #2
 800c300:	f040 8097 	bne.w	800c432 <HAL_TIM_PWM_ConfigChannel+0x162>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c304:	692b      	ldr	r3, [r5, #16]
 800c306:	f033 0304 	bics.w	r3, r3, #4
 800c30a:	f040 809c 	bne.w	800c446 <HAL_TIM_PWM_ConfigChannel+0x176>
  __HAL_LOCK(htim);
 800c30e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c312:	2b01      	cmp	r3, #1
 800c314:	f000 80a1 	beq.w	800c45a <HAL_TIM_PWM_ConfigChannel+0x18a>
 800c318:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c31a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800c31c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c320:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800c324:	2e14      	cmp	r6, #20
 800c326:	d871      	bhi.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800c328:	e8df f016 	tbh	[pc, r6, lsl #1]
 800c32c:	00700015 	.word	0x00700015
 800c330:	00700070 	.word	0x00700070
 800c334:	00700099 	.word	0x00700099
 800c338:	00700070 	.word	0x00700070
 800c33c:	007000da 	.word	0x007000da
 800c340:	00700070 	.word	0x00700070
 800c344:	00700120 	.word	0x00700120
 800c348:	00700070 	.word	0x00700070
 800c34c:	00700152 	.word	0x00700152
 800c350:	00700070 	.word	0x00700070
 800c354:	016b      	.short	0x016b
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	4b7c      	ldr	r3, [pc, #496]	; (800c54c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c35a:	4a7d      	ldr	r2, [pc, #500]	; (800c550 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c35c:	4298      	cmp	r0, r3
 800c35e:	bf18      	it	ne
 800c360:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c364:	497b      	ldr	r1, [pc, #492]	; (800c554 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	2300      	moveq	r3, #0
 800c36c:	4290      	cmp	r0, r2
 800c36e:	bf0c      	ite	eq
 800c370:	2300      	moveq	r3, #0
 800c372:	f003 0301 	andne.w	r3, r3, #1
 800c376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c37a:	4288      	cmp	r0, r1
 800c37c:	bf0c      	ite	eq
 800c37e:	2300      	moveq	r3, #0
 800c380:	f003 0301 	andne.w	r3, r3, #1
 800c384:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c388:	4290      	cmp	r0, r2
 800c38a:	bf0c      	ite	eq
 800c38c:	2300      	moveq	r3, #0
 800c38e:	f003 0301 	andne.w	r3, r3, #1
 800c392:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c396:	4288      	cmp	r0, r1
 800c398:	bf0c      	ite	eq
 800c39a:	2300      	moveq	r3, #0
 800c39c:	f003 0301 	andne.w	r3, r3, #1
 800c3a0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800c3a4:	4290      	cmp	r0, r2
 800c3a6:	bf0c      	ite	eq
 800c3a8:	2300      	moveq	r3, #0
 800c3aa:	f003 0301 	andne.w	r3, r3, #1
 800c3ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3b2:	4288      	cmp	r0, r1
 800c3b4:	bf0c      	ite	eq
 800c3b6:	2300      	moveq	r3, #0
 800c3b8:	f003 0301 	andne.w	r3, r3, #1
 800c3bc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800c3c0:	4290      	cmp	r0, r2
 800c3c2:	bf0c      	ite	eq
 800c3c4:	2300      	moveq	r3, #0
 800c3c6:	f003 0301 	andne.w	r3, r3, #1
 800c3ca:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800c3ce:	4288      	cmp	r0, r1
 800c3d0:	bf0c      	ite	eq
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	f003 0301 	andne.w	r3, r3, #1
 800c3d8:	4290      	cmp	r0, r2
 800c3da:	bf0c      	ite	eq
 800c3dc:	2300      	moveq	r3, #0
 800c3de:	f003 0301 	andne.w	r3, r3, #1
 800c3e2:	b11b      	cbz	r3, 800c3ec <HAL_TIM_PWM_ConfigChannel+0x11c>
 800c3e4:	4b5c      	ldr	r3, [pc, #368]	; (800c558 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c3e6:	4298      	cmp	r0, r3
 800c3e8:	f040 814e 	bne.w	800c688 <HAL_TIM_PWM_ConfigChannel+0x3b8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7fe f969 	bl	800a6c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3f6:	6999      	ldr	r1, [r3, #24]
 800c3f8:	f041 0108 	orr.w	r1, r1, #8
 800c3fc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3fe:	6999      	ldr	r1, [r3, #24]
 800c400:	f021 0104 	bic.w	r1, r1, #4
 800c404:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c406:	699a      	ldr	r2, [r3, #24]
 800c408:	4302      	orrs	r2, r0
 800c40a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800c40c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c40e:	2201      	movs	r2, #1
  return HAL_OK;
 800c410:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c412:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c416:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800c41c:	4b4f      	ldr	r3, [pc, #316]	; (800c55c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c41e:	40d3      	lsrs	r3, r2
 800c420:	07db      	lsls	r3, r3, #31
 800c422:	f53f af5f 	bmi.w	800c2e4 <HAL_TIM_PWM_ConfigChannel+0x14>
 800c426:	f640 6113 	movw	r1, #3603	; 0xe13
 800c42a:	484d      	ldr	r0, [pc, #308]	; (800c560 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c42c:	f7f6 f824 	bl	8002478 <assert_failed>
 800c430:	e758      	b.n	800c2e4 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c432:	f640 6115 	movw	r1, #3605	; 0xe15
 800c436:	484a      	ldr	r0, [pc, #296]	; (800c560 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c438:	f7f6 f81e 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c43c:	692b      	ldr	r3, [r5, #16]
 800c43e:	f033 0304 	bics.w	r3, r3, #4
 800c442:	f43f af64 	beq.w	800c30e <HAL_TIM_PWM_ConfigChannel+0x3e>
 800c446:	f640 6116 	movw	r1, #3606	; 0xe16
 800c44a:	4845      	ldr	r0, [pc, #276]	; (800c560 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c44c:	f7f6 f814 	bl	8002478 <assert_failed>
  __HAL_LOCK(htim);
 800c450:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c454:	2b01      	cmp	r3, #1
 800c456:	f47f af5f 	bne.w	800c318 <HAL_TIM_PWM_ConfigChannel+0x48>
 800c45a:	2002      	movs	r0, #2
}
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c45e:	6820      	ldr	r0, [r4, #0]
 800c460:	4b3a      	ldr	r3, [pc, #232]	; (800c54c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c462:	4a3b      	ldr	r2, [pc, #236]	; (800c550 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c464:	4298      	cmp	r0, r3
 800c466:	bf18      	it	ne
 800c468:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c46c:	4939      	ldr	r1, [pc, #228]	; (800c554 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c46e:	bf14      	ite	ne
 800c470:	2301      	movne	r3, #1
 800c472:	2300      	moveq	r3, #0
 800c474:	4290      	cmp	r0, r2
 800c476:	bf0c      	ite	eq
 800c478:	2300      	moveq	r3, #0
 800c47a:	f003 0301 	andne.w	r3, r3, #1
 800c47e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c482:	4288      	cmp	r0, r1
 800c484:	bf0c      	ite	eq
 800c486:	2300      	moveq	r3, #0
 800c488:	f003 0301 	andne.w	r3, r3, #1
 800c48c:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800c490:	4290      	cmp	r0, r2
 800c492:	bf0c      	ite	eq
 800c494:	2300      	moveq	r3, #0
 800c496:	f003 0301 	andne.w	r3, r3, #1
 800c49a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800c49e:	4288      	cmp	r0, r1
 800c4a0:	bf0c      	ite	eq
 800c4a2:	2300      	moveq	r3, #0
 800c4a4:	f003 0301 	andne.w	r3, r3, #1
 800c4a8:	4290      	cmp	r0, r2
 800c4aa:	bf0c      	ite	eq
 800c4ac:	2300      	moveq	r3, #0
 800c4ae:	f003 0301 	andne.w	r3, r3, #1
 800c4b2:	b11b      	cbz	r3, 800c4bc <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800c4b4:	4b2b      	ldr	r3, [pc, #172]	; (800c564 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c4b6:	4298      	cmp	r0, r3
 800c4b8:	f040 80df 	bne.w	800c67a <HAL_TIM_PWM_ConfigChannel+0x3aa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7ff fd21 	bl	800bf04 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4c4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4c6:	6999      	ldr	r1, [r3, #24]
 800c4c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c4cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4ce:	6999      	ldr	r1, [r3, #24]
 800c4d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c4d4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4d6:	699a      	ldr	r2, [r3, #24]
 800c4d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c4dc:	619a      	str	r2, [r3, #24]
      break;
 800c4de:	e795      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c4e0:	6820      	ldr	r0, [r4, #0]
 800c4e2:	4b1a      	ldr	r3, [pc, #104]	; (800c54c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c4e4:	4a1a      	ldr	r2, [pc, #104]	; (800c550 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c4e6:	4298      	cmp	r0, r3
 800c4e8:	bf18      	it	ne
 800c4ea:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c4ee:	4919      	ldr	r1, [pc, #100]	; (800c554 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c4f0:	bf14      	ite	ne
 800c4f2:	2301      	movne	r3, #1
 800c4f4:	2300      	moveq	r3, #0
 800c4f6:	4290      	cmp	r0, r2
 800c4f8:	bf0c      	ite	eq
 800c4fa:	2300      	moveq	r3, #0
 800c4fc:	f003 0301 	andne.w	r3, r3, #1
 800c500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c504:	4288      	cmp	r0, r1
 800c506:	bf0c      	ite	eq
 800c508:	2300      	moveq	r3, #0
 800c50a:	f003 0301 	andne.w	r3, r3, #1
 800c50e:	4290      	cmp	r0, r2
 800c510:	bf0c      	ite	eq
 800c512:	2300      	moveq	r3, #0
 800c514:	f003 0301 	andne.w	r3, r3, #1
 800c518:	b11b      	cbz	r3, 800c522 <HAL_TIM_PWM_ConfigChannel+0x252>
 800c51a:	4b13      	ldr	r3, [pc, #76]	; (800c568 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c51c:	4298      	cmp	r0, r3
 800c51e:	f040 80a5 	bne.w	800c66c <HAL_TIM_PWM_ConfigChannel+0x39c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c522:	4629      	mov	r1, r5
 800c524:	f7fe f930 	bl	800a788 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c528:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c52a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c52c:	69d9      	ldr	r1, [r3, #28]
 800c52e:	f041 0108 	orr.w	r1, r1, #8
 800c532:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c534:	69d9      	ldr	r1, [r3, #28]
 800c536:	f021 0104 	bic.w	r1, r1, #4
 800c53a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c53c:	69da      	ldr	r2, [r3, #28]
 800c53e:	4302      	orrs	r2, r0
 800c540:	61da      	str	r2, [r3, #28]
      break;
 800c542:	e763      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800c544:	fffeffef 	.word	0xfffeffef
 800c548:	00010040 	.word	0x00010040
 800c54c:	40010000 	.word	0x40010000
 800c550:	40000400 	.word	0x40000400
 800c554:	40000800 	.word	0x40000800
 800c558:	40002000 	.word	0x40002000
 800c55c:	00111111 	.word	0x00111111
 800c560:	080216d0 	.word	0x080216d0
 800c564:	40001800 	.word	0x40001800
 800c568:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c56c:	6820      	ldr	r0, [r4, #0]
 800c56e:	4b4a      	ldr	r3, [pc, #296]	; (800c698 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c570:	4a4a      	ldr	r2, [pc, #296]	; (800c69c <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800c572:	4298      	cmp	r0, r3
 800c574:	bf18      	it	ne
 800c576:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c57a:	4949      	ldr	r1, [pc, #292]	; (800c6a0 <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800c57c:	bf14      	ite	ne
 800c57e:	2301      	movne	r3, #1
 800c580:	2300      	moveq	r3, #0
 800c582:	4290      	cmp	r0, r2
 800c584:	bf0c      	ite	eq
 800c586:	2300      	moveq	r3, #0
 800c588:	f003 0301 	andne.w	r3, r3, #1
 800c58c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c590:	4288      	cmp	r0, r1
 800c592:	bf0c      	ite	eq
 800c594:	2300      	moveq	r3, #0
 800c596:	f003 0301 	andne.w	r3, r3, #1
 800c59a:	4290      	cmp	r0, r2
 800c59c:	bf0c      	ite	eq
 800c59e:	2300      	moveq	r3, #0
 800c5a0:	f003 0301 	andne.w	r3, r3, #1
 800c5a4:	b113      	cbz	r3, 800c5ac <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c5a6:	4b3f      	ldr	r3, [pc, #252]	; (800c6a4 <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 800c5a8:	4298      	cmp	r0, r3
 800c5aa:	d158      	bne.n	800c65e <HAL_TIM_PWM_ConfigChannel+0x38e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	f7fe f951 	bl	800a854 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5b4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5b6:	69d9      	ldr	r1, [r3, #28]
 800c5b8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c5bc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5be:	69d9      	ldr	r1, [r3, #28]
 800c5c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c5c4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5c6:	69da      	ldr	r2, [r3, #28]
 800c5c8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c5cc:	61da      	str	r2, [r3, #28]
      break;
 800c5ce:	e71d      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c5d0:	6820      	ldr	r0, [r4, #0]
 800c5d2:	4b31      	ldr	r3, [pc, #196]	; (800c698 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c5d4:	4298      	cmp	r0, r3
 800c5d6:	d003      	beq.n	800c5e0 <HAL_TIM_PWM_ConfigChannel+0x310>
 800c5d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	d137      	bne.n	800c650 <HAL_TIM_PWM_ConfigChannel+0x380>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	f7fe f81b 	bl	800a61c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5e8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5ec:	f041 0108 	orr.w	r1, r1, #8
 800c5f0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c5f4:	f021 0104 	bic.w	r1, r1, #4
 800c5f8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5fc:	4302      	orrs	r2, r0
 800c5fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c600:	e704      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c602:	6820      	ldr	r0, [r4, #0]
 800c604:	4b24      	ldr	r3, [pc, #144]	; (800c698 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800c606:	4298      	cmp	r0, r3
 800c608:	d003      	beq.n	800c612 <HAL_TIM_PWM_ConfigChannel+0x342>
 800c60a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c60e:	4298      	cmp	r0, r3
 800c610:	d117      	bne.n	800c642 <HAL_TIM_PWM_ConfigChannel+0x372>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c612:	4629      	mov	r1, r5
 800c614:	f7fe f82c 	bl	800a670 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c618:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c61a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c61c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c61e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800c622:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c626:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800c62a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c62c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c62e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c634:	e6ea      	b.n	800c40c <HAL_TIM_PWM_ConfigChannel+0x13c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c636:	f640 6114 	movw	r1, #3604	; 0xe14
 800c63a:	481b      	ldr	r0, [pc, #108]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c63c:	f7f5 ff1c 	bl	8002478 <assert_failed>
 800c640:	e65b      	b.n	800c2fa <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c642:	4819      	ldr	r0, [pc, #100]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c644:	f640 6177 	movw	r1, #3703	; 0xe77
 800c648:	f7f5 ff16 	bl	8002478 <assert_failed>
 800c64c:	6820      	ldr	r0, [r4, #0]
 800c64e:	e7e0      	b.n	800c612 <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c650:	4815      	ldr	r0, [pc, #84]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c652:	f640 6166 	movw	r1, #3686	; 0xe66
 800c656:	f7f5 ff0f 	bl	8002478 <assert_failed>
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	e7c0      	b.n	800c5e0 <HAL_TIM_PWM_ConfigChannel+0x310>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c65e:	4812      	ldr	r0, [pc, #72]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c660:	f640 6155 	movw	r1, #3669	; 0xe55
 800c664:	f7f5 ff08 	bl	8002478 <assert_failed>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	e79f      	b.n	800c5ac <HAL_TIM_PWM_ConfigChannel+0x2dc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c66c:	480e      	ldr	r0, [pc, #56]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c66e:	f640 6144 	movw	r1, #3652	; 0xe44
 800c672:	f7f5 ff01 	bl	8002478 <assert_failed>
 800c676:	6820      	ldr	r0, [r4, #0]
 800c678:	e753      	b.n	800c522 <HAL_TIM_PWM_ConfigChannel+0x252>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c67a:	480b      	ldr	r0, [pc, #44]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c67c:	f640 6133 	movw	r1, #3635	; 0xe33
 800c680:	f7f5 fefa 	bl	8002478 <assert_failed>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	e719      	b.n	800c4bc <HAL_TIM_PWM_ConfigChannel+0x1ec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c688:	4807      	ldr	r0, [pc, #28]	; (800c6a8 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800c68a:	f640 6122 	movw	r1, #3618	; 0xe22
 800c68e:	f7f5 fef3 	bl	8002478 <assert_failed>
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	e6aa      	b.n	800c3ec <HAL_TIM_PWM_ConfigChannel+0x11c>
 800c696:	bf00      	nop
 800c698:	40010000 	.word	0x40010000
 800c69c:	40000400 	.word	0x40000400
 800c6a0:	40000800 	.word	0x40000800
 800c6a4:	40010400 	.word	0x40010400
 800c6a8:	080216d0 	.word	0x080216d0

0800c6ac <TIM_TI1_SetConfig>:
{
 800c6ac:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6ae:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c6b0:	4e1b      	ldr	r6, [pc, #108]	; (800c720 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6b2:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c6b6:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6b8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ba:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800c6bc:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c6be:	d01d      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c6c4:	d01a      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6c6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800c6ca:	42b0      	cmp	r0, r6
 800c6cc:	d016      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c6d2:	42b0      	cmp	r0, r6
 800c6d4:	d012      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800c6da:	42b0      	cmp	r0, r6
 800c6dc:	d00e      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6de:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800c6e2:	42b0      	cmp	r0, r6
 800c6e4:	d00a      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6e6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800c6ea:	42b0      	cmp	r0, r6
 800c6ec:	d006      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
 800c6ee:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800c6f2:	42b0      	cmp	r0, r6
 800c6f4:	d002      	beq.n	800c6fc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c6f6:	f044 0201 	orr.w	r2, r4, #1
 800c6fa:	e002      	b.n	800c702 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c6fc:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800c700:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c702:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c704:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c70c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c710:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c712:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c714:	4313      	orrs	r3, r2
}
 800c716:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800c718:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c71a:	6201      	str	r1, [r0, #32]
}
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	40010000 	.word	0x40010000

0800c724 <HAL_TIM_IC_ConfigChannel>:
{
 800c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c726:	4bb1      	ldr	r3, [pc, #708]	; (800c9ec <HAL_TIM_IC_ConfigChannel+0x2c8>)
{
 800c728:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c72a:	6801      	ldr	r1, [r0, #0]
{
 800c72c:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c72e:	4fb0      	ldr	r7, [pc, #704]	; (800c9f0 <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800c730:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c732:	4299      	cmp	r1, r3
 800c734:	bf18      	it	ne
 800c736:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800c73a:	48ae      	ldr	r0, [pc, #696]	; (800c9f4 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800c73c:	4aae      	ldr	r2, [pc, #696]	; (800c9f8 <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800c73e:	bf14      	ite	ne
 800c740:	2301      	movne	r3, #1
 800c742:	2300      	moveq	r3, #0
 800c744:	42b9      	cmp	r1, r7
 800c746:	bf0c      	ite	eq
 800c748:	2300      	moveq	r3, #0
 800c74a:	f003 0301 	andne.w	r3, r3, #1
 800c74e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800c752:	4281      	cmp	r1, r0
 800c754:	bf0c      	ite	eq
 800c756:	2300      	moveq	r3, #0
 800c758:	f003 0301 	andne.w	r3, r3, #1
 800c75c:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800c760:	4291      	cmp	r1, r2
 800c762:	bf0c      	ite	eq
 800c764:	2300      	moveq	r3, #0
 800c766:	f003 0301 	andne.w	r3, r3, #1
 800c76a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800c76e:	42b9      	cmp	r1, r7
 800c770:	bf0c      	ite	eq
 800c772:	2300      	moveq	r3, #0
 800c774:	f003 0301 	andne.w	r3, r3, #1
 800c778:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800c77c:	4281      	cmp	r1, r0
 800c77e:	bf0c      	ite	eq
 800c780:	2300      	moveq	r3, #0
 800c782:	f003 0301 	andne.w	r3, r3, #1
 800c786:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c78a:	4291      	cmp	r1, r2
 800c78c:	bf0c      	ite	eq
 800c78e:	2300      	moveq	r3, #0
 800c790:	f003 0301 	andne.w	r3, r3, #1
 800c794:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c798:	42b9      	cmp	r1, r7
 800c79a:	bf0c      	ite	eq
 800c79c:	2300      	moveq	r3, #0
 800c79e:	f003 0301 	andne.w	r3, r3, #1
 800c7a2:	4281      	cmp	r1, r0
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2300      	moveq	r3, #0
 800c7a8:	f003 0301 	andne.w	r3, r3, #1
 800c7ac:	4291      	cmp	r1, r2
 800c7ae:	bf0c      	ite	eq
 800c7b0:	2300      	moveq	r3, #0
 800c7b2:	f003 0301 	andne.w	r3, r3, #1
 800c7b6:	b11b      	cbz	r3, 800c7c0 <HAL_TIM_IC_ConfigChannel+0x9c>
 800c7b8:	4b90      	ldr	r3, [pc, #576]	; (800c9fc <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800c7ba:	4299      	cmp	r1, r3
 800c7bc:	f040 80fb 	bne.w	800c9b6 <HAL_TIM_IC_ConfigChannel+0x292>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	f033 0202 	bics.w	r2, r3, #2
 800c7c6:	d001      	beq.n	800c7cc <HAL_TIM_IC_ConfigChannel+0xa8>
 800c7c8:	2b0a      	cmp	r3, #10
 800c7ca:	d16d      	bne.n	800c8a8 <HAL_TIM_IC_ConfigChannel+0x184>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d872      	bhi.n	800c8ba <HAL_TIM_IC_ConfigChannel+0x196>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800c7d4:	68a3      	ldr	r3, [r4, #8]
 800c7d6:	f033 030c 	bics.w	r3, r3, #12
 800c7da:	d177      	bne.n	800c8cc <HAL_TIM_IC_ConfigChannel+0x1a8>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800c7dc:	68e3      	ldr	r3, [r4, #12]
 800c7de:	2b0f      	cmp	r3, #15
 800c7e0:	d87c      	bhi.n	800c8dc <HAL_TIM_IC_ConfigChannel+0x1b8>
  __HAL_LOCK(htim);
 800c7e2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	f000 8082 	beq.w	800c8f0 <HAL_TIM_IC_ConfigChannel+0x1cc>
 800c7ec:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 800c7f2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800c7fa:	2e00      	cmp	r6, #0
 800c7fc:	d07a      	beq.n	800c8f4 <HAL_TIM_IC_ConfigChannel+0x1d0>
 800c7fe:	4b7b      	ldr	r3, [pc, #492]	; (800c9ec <HAL_TIM_IC_ConfigChannel+0x2c8>)
 800c800:	497b      	ldr	r1, [pc, #492]	; (800c9f0 <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800c802:	4298      	cmp	r0, r3
 800c804:	bf18      	it	ne
 800c806:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800c80a:	4a7a      	ldr	r2, [pc, #488]	; (800c9f4 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800c80c:	bf14      	ite	ne
 800c80e:	2301      	movne	r3, #1
 800c810:	2300      	moveq	r3, #0
 800c812:	4288      	cmp	r0, r1
 800c814:	bf0c      	ite	eq
 800c816:	2300      	moveq	r3, #0
 800c818:	f003 0301 	andne.w	r3, r3, #1
 800c81c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c820:	4290      	cmp	r0, r2
 800c822:	bf0c      	ite	eq
 800c824:	2300      	moveq	r3, #0
 800c826:	f003 0301 	andne.w	r3, r3, #1
 800c82a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800c82e:	4288      	cmp	r0, r1
 800c830:	bf0c      	ite	eq
 800c832:	2300      	moveq	r3, #0
 800c834:	f003 0301 	andne.w	r3, r3, #1
 800c838:	4290      	cmp	r0, r2
 800c83a:	bf0c      	ite	eq
 800c83c:	2300      	moveq	r3, #0
 800c83e:	f003 0301 	andne.w	r3, r3, #1
  else if (Channel == TIM_CHANNEL_2)
 800c842:	2e04      	cmp	r6, #4
 800c844:	d065      	beq.n	800c912 <HAL_TIM_IC_ConfigChannel+0x1ee>
  else if (Channel == TIM_CHANNEL_3)
 800c846:	2e08      	cmp	r6, #8
 800c848:	f000 8091 	beq.w	800c96e <HAL_TIM_IC_ConfigChannel+0x24a>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 80b8 	bne.w	800c9c2 <HAL_TIM_IC_ConfigChannel+0x29e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c852:	6a01      	ldr	r1, [r0, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800c854:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c856:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800c85a:	6867      	ldr	r7, [r4, #4]
 800c85c:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c85e:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c860:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c862:	69c1      	ldr	r1, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c864:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800c866:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c868:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c86c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c870:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c872:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c876:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c878:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c87c:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c87e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c882:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800c884:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800c886:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c888:	69c2      	ldr	r2, [r0, #28]
 800c88a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c88e:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c890:	69c3      	ldr	r3, [r0, #28]
 800c892:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c896:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800c898:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c89a:	2201      	movs	r2, #1
  return HAL_OK;
 800c89c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c89e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c8a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800c8a8:	f640 51af 	movw	r1, #3503	; 0xdaf
 800c8ac:	4854      	ldr	r0, [pc, #336]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c8ae:	f7f5 fde3 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d98c      	bls.n	800c7d4 <HAL_TIM_IC_ConfigChannel+0xb0>
 800c8ba:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
 800c8be:	4850      	ldr	r0, [pc, #320]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c8c0:	f7f5 fdda 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800c8c4:	68a3      	ldr	r3, [r4, #8]
 800c8c6:	f033 030c 	bics.w	r3, r3, #12
 800c8ca:	d087      	beq.n	800c7dc <HAL_TIM_IC_ConfigChannel+0xb8>
 800c8cc:	f640 51b1 	movw	r1, #3505	; 0xdb1
 800c8d0:	484b      	ldr	r0, [pc, #300]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c8d2:	f7f5 fdd1 	bl	8002478 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800c8d6:	68e3      	ldr	r3, [r4, #12]
 800c8d8:	2b0f      	cmp	r3, #15
 800c8da:	d982      	bls.n	800c7e2 <HAL_TIM_IC_ConfigChannel+0xbe>
 800c8dc:	f640 51b2 	movw	r1, #3506	; 0xdb2
 800c8e0:	4847      	ldr	r0, [pc, #284]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c8e2:	f7f5 fdc9 	bl	8002478 <assert_failed>
  __HAL_LOCK(htim);
 800c8e6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	f47f af7e 	bne.w	800c7ec <HAL_TIM_IC_ConfigChannel+0xc8>
 800c8f0:	2002      	movs	r0, #2
}
 800c8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800c8f4:	e9d4 1200 	ldrd	r1, r2, [r4]
 800c8f8:	68e3      	ldr	r3, [r4, #12]
 800c8fa:	f7ff fed7 	bl	800c6ac <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c8fe:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c900:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c902:	6999      	ldr	r1, [r3, #24]
 800c904:	f021 010c 	bic.w	r1, r1, #12
 800c908:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	4302      	orrs	r2, r0
 800c90e:	619a      	str	r2, [r3, #24]
 800c910:	e7c2      	b.n	800c898 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c912:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c916:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800c91a:	4288      	cmp	r0, r1
 800c91c:	bf18      	it	ne
 800c91e:	4290      	cmpne	r0, r2
 800c920:	d001      	beq.n	800c926 <HAL_TIM_IC_ConfigChannel+0x202>
 800c922:	2b00      	cmp	r3, #0
 800c924:	d15b      	bne.n	800c9de <HAL_TIM_IC_ConfigChannel+0x2ba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c926:	6a01      	ldr	r1, [r0, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800c928:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c92a:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800c92e:	6867      	ldr	r7, [r4, #4]
 800c930:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c932:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c934:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c936:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c938:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800c93a:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c93c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c940:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c944:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c946:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c94a:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c94c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c950:	4333      	orrs	r3, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c952:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c956:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800c958:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800c95a:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c95c:	6982      	ldr	r2, [r0, #24]
 800c95e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c962:	6182      	str	r2, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c964:	6983      	ldr	r3, [r0, #24]
 800c966:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800c96a:	6183      	str	r3, [r0, #24]
 800c96c:	e794      	b.n	800c898 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d12e      	bne.n	800c9d0 <HAL_TIM_IC_ConfigChannel+0x2ac>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c972:	6a06      	ldr	r6, [r0, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800c974:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c976:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800c97a:	6861      	ldr	r1, [r4, #4]
 800c97c:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c97e:	021b      	lsls	r3, r3, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c980:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c982:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c984:	0112      	lsls	r2, r2, #4
  tmpccer = TIMx->CCER;
 800c986:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c988:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c98c:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c990:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c992:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c996:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800c998:	4339      	orrs	r1, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c99a:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c99c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c9a0:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800c9a2:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800c9a4:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c9a6:	69c2      	ldr	r2, [r0, #28]
 800c9a8:	f022 020c 	bic.w	r2, r2, #12
 800c9ac:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c9ae:	69c3      	ldr	r3, [r0, #28]
 800c9b0:	4323      	orrs	r3, r4
 800c9b2:	61c3      	str	r3, [r0, #28]
 800c9b4:	e770      	b.n	800c898 <HAL_TIM_IC_ConfigChannel+0x174>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c9b6:	f640 51ae 	movw	r1, #3502	; 0xdae
 800c9ba:	4811      	ldr	r0, [pc, #68]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9bc:	f7f5 fd5c 	bl	8002478 <assert_failed>
 800c9c0:	e6fe      	b.n	800c7c0 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c9c2:	480f      	ldr	r0, [pc, #60]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9c4:	f640 51ea 	movw	r1, #3562	; 0xdea
 800c9c8:	f7f5 fd56 	bl	8002478 <assert_failed>
 800c9cc:	6828      	ldr	r0, [r5, #0]
 800c9ce:	e740      	b.n	800c852 <HAL_TIM_IC_ConfigChannel+0x12e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c9d0:	480b      	ldr	r0, [pc, #44]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9d2:	f640 51da 	movw	r1, #3546	; 0xdda
 800c9d6:	f7f5 fd4f 	bl	8002478 <assert_failed>
 800c9da:	6828      	ldr	r0, [r5, #0]
 800c9dc:	e7c9      	b.n	800c972 <HAL_TIM_IC_ConfigChannel+0x24e>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c9de:	4808      	ldr	r0, [pc, #32]	; (800ca00 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800c9e0:	f640 51ca 	movw	r1, #3530	; 0xdca
 800c9e4:	f7f5 fd48 	bl	8002478 <assert_failed>
 800c9e8:	6828      	ldr	r0, [r5, #0]
 800c9ea:	e79c      	b.n	800c926 <HAL_TIM_IC_ConfigChannel+0x202>
 800c9ec:	40010000 	.word	0x40010000
 800c9f0:	40000400 	.word	0x40000400
 800c9f4:	40000800 	.word	0x40000800
 800c9f8:	40000c00 	.word	0x40000c00
 800c9fc:	40002000 	.word	0x40002000
 800ca00:	080216d0 	.word	0x080216d0

0800ca04 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800ca04:	4b2b      	ldr	r3, [pc, #172]	; (800cab4 <TIM_CCxChannelCmd+0xb0>)
 800ca06:	4298      	cmp	r0, r3
{
 800ca08:	b530      	push	{r4, r5, lr}
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800ca10:	d031      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ca16:	d02e      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca18:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800ca1c:	4298      	cmp	r0, r3
 800ca1e:	d02a      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca24:	4298      	cmp	r0, r3
 800ca26:	d026      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	d022      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca30:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800ca34:	4298      	cmp	r0, r3
 800ca36:	d01e      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca38:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800ca3c:	4298      	cmp	r0, r3
 800ca3e:	d01a      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca44:	4298      	cmp	r0, r3
 800ca46:	d016      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca4c:	4298      	cmp	r0, r3
 800ca4e:	d012      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca50:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800ca54:	4298      	cmp	r0, r3
 800ca56:	d00e      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca5c:	4298      	cmp	r0, r3
 800ca5e:	d00a      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca64:	4298      	cmp	r0, r3
 800ca66:	d006      	beq.n	800ca76 <TIM_CCxChannelCmd+0x72>
 800ca68:	f641 21ad 	movw	r1, #6829	; 0x1aad
 800ca6c:	4812      	ldr	r0, [pc, #72]	; (800cab8 <TIM_CCxChannelCmd+0xb4>)
 800ca6e:	9201      	str	r2, [sp, #4]
 800ca70:	f7f5 fd02 	bl	8002478 <assert_failed>
 800ca74:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800ca76:	2d14      	cmp	r5, #20
 800ca78:	d910      	bls.n	800ca9c <TIM_CCxChannelCmd+0x98>
 800ca7a:	2d3c      	cmp	r5, #60	; 0x3c
 800ca7c:	d112      	bne.n	800caa4 <TIM_CCxChannelCmd+0xa0>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca7e:	f005 051f 	and.w	r5, r5, #31
 800ca82:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca84:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca86:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca88:	fa02 f505 	lsl.w	r5, r2, r5
  TIMx->CCER &= ~tmp;
 800ca8c:	ea23 0301 	bic.w	r3, r3, r1
 800ca90:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca92:	6a22      	ldr	r2, [r4, #32]
 800ca94:	4315      	orrs	r5, r2
 800ca96:	6225      	str	r5, [r4, #32]
}
 800ca98:	b003      	add	sp, #12
 800ca9a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800ca9c:	4b07      	ldr	r3, [pc, #28]	; (800cabc <TIM_CCxChannelCmd+0xb8>)
 800ca9e:	40eb      	lsrs	r3, r5
 800caa0:	07db      	lsls	r3, r3, #31
 800caa2:	d4ec      	bmi.n	800ca7e <TIM_CCxChannelCmd+0x7a>
 800caa4:	f641 21ae 	movw	r1, #6830	; 0x1aae
 800caa8:	4803      	ldr	r0, [pc, #12]	; (800cab8 <TIM_CCxChannelCmd+0xb4>)
 800caaa:	9201      	str	r2, [sp, #4]
 800caac:	f7f5 fce4 	bl	8002478 <assert_failed>
 800cab0:	9a01      	ldr	r2, [sp, #4]
 800cab2:	e7e4      	b.n	800ca7e <TIM_CCxChannelCmd+0x7a>
 800cab4:	40010000 	.word	0x40010000
 800cab8:	080216d0 	.word	0x080216d0
 800cabc:	00111111 	.word	0x00111111

0800cac0 <HAL_TIM_IC_Start_DMA>:
{
 800cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cac2:	4604      	mov	r4, r0
 800cac4:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cac6:	4883      	ldr	r0, [pc, #524]	; (800ccd4 <HAL_TIM_IC_Start_DMA+0x214>)
{
 800cac8:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800caca:	6821      	ldr	r1, [r4, #0]
 800cacc:	4281      	cmp	r1, r0
 800cace:	f000 8083 	beq.w	800cbd8 <HAL_TIM_IC_Start_DMA+0x118>
 800cad2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800cad6:	d053      	beq.n	800cb80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cad8:	487f      	ldr	r0, [pc, #508]	; (800ccd8 <HAL_TIM_IC_Start_DMA+0x218>)
 800cada:	4281      	cmp	r1, r0
 800cadc:	d050      	beq.n	800cb80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cade:	487f      	ldr	r0, [pc, #508]	; (800ccdc <HAL_TIM_IC_Start_DMA+0x21c>)
 800cae0:	4281      	cmp	r1, r0
 800cae2:	d04d      	beq.n	800cb80 <HAL_TIM_IC_Start_DMA+0xc0>
 800cae4:	487e      	ldr	r0, [pc, #504]	; (800cce0 <HAL_TIM_IC_Start_DMA+0x220>)
 800cae6:	4281      	cmp	r1, r0
 800cae8:	d04a      	beq.n	800cb80 <HAL_TIM_IC_Start_DMA+0xc0>
 800caea:	487e      	ldr	r0, [pc, #504]	; (800cce4 <HAL_TIM_IC_Start_DMA+0x224>)
 800caec:	4281      	cmp	r1, r0
 800caee:	d073      	beq.n	800cbd8 <HAL_TIM_IC_Start_DMA+0x118>
 800caf0:	487d      	ldr	r0, [pc, #500]	; (800cce8 <HAL_TIM_IC_Start_DMA+0x228>)
 800caf2:	4281      	cmp	r1, r0
 800caf4:	f000 80d5 	beq.w	800cca2 <HAL_TIM_IC_Start_DMA+0x1e2>
 800caf8:	487c      	ldr	r0, [pc, #496]	; (800ccec <HAL_TIM_IC_Start_DMA+0x22c>)
 800cafa:	4281      	cmp	r1, r0
 800cafc:	f040 80d6 	bne.w	800ccac <HAL_TIM_IC_Start_DMA+0x1ec>
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	f000 80c4 	beq.w	800cc8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800cb06:	f640 010d 	movw	r1, #2061	; 0x80d
 800cb0a:	4879      	ldr	r0, [pc, #484]	; (800ccf0 <HAL_TIM_IC_Start_DMA+0x230>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cb0c:	4e72      	ldr	r6, [pc, #456]	; (800ccd8 <HAL_TIM_IC_Start_DMA+0x218>)
 800cb0e:	4f73      	ldr	r7, [pc, #460]	; (800ccdc <HAL_TIM_IC_Start_DMA+0x21c>)
 800cb10:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cb14:	f7f5 fcb0 	bl	8002478 <assert_failed>
 800cb18:	6820      	ldr	r0, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cb1a:	496e      	ldr	r1, [pc, #440]	; (800ccd4 <HAL_TIM_IC_Start_DMA+0x214>)
 800cb1c:	4288      	cmp	r0, r1
 800cb1e:	bf18      	it	ne
 800cb20:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cb24:	bf14      	ite	ne
 800cb26:	2101      	movne	r1, #1
 800cb28:	2100      	moveq	r1, #0
 800cb2a:	42b0      	cmp	r0, r6
 800cb2c:	bf0c      	ite	eq
 800cb2e:	2100      	moveq	r1, #0
 800cb30:	f001 0101 	andne.w	r1, r1, #1
 800cb34:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800cb38:	42b8      	cmp	r0, r7
 800cb3a:	bf0c      	ite	eq
 800cb3c:	2100      	moveq	r1, #0
 800cb3e:	f001 0101 	andne.w	r1, r1, #1
 800cb42:	42b0      	cmp	r0, r6
 800cb44:	bf0c      	ite	eq
 800cb46:	2100      	moveq	r1, #0
 800cb48:	f001 0101 	andne.w	r1, r1, #1
 800cb4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb50:	2900      	cmp	r1, #0
 800cb52:	f040 8098 	bne.w	800cc86 <HAL_TIM_IC_Start_DMA+0x1c6>
  if ((htim->State == HAL_TIM_STATE_BUSY))
 800cb56:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800cb5a:	b2c0      	uxtb	r0, r0
 800cb5c:	2802      	cmp	r0, #2
 800cb5e:	d039      	beq.n	800cbd4 <HAL_TIM_IC_Start_DMA+0x114>
  else if ((htim->State == HAL_TIM_STATE_READY))
 800cb60:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800cb64:	2901      	cmp	r1, #1
 800cb66:	d03e      	beq.n	800cbe6 <HAL_TIM_IC_Start_DMA+0x126>
 800cb68:	6820      	ldr	r0, [r4, #0]
  switch (Channel)
 800cb6a:	2d0c      	cmp	r5, #12
 800cb6c:	d820      	bhi.n	800cbb0 <HAL_TIM_IC_Start_DMA+0xf0>
 800cb6e:	e8df f005 	tbb	[pc, r5]
 800cb72:	1f0b      	.short	0x1f0b
 800cb74:	1f411f1f 	.word	0x1f411f1f
 800cb78:	1f571f1f 	.word	0x1f571f1f
 800cb7c:	1f1f      	.short	0x1f1f
 800cb7e:	6d          	.byte	0x6d
 800cb7f:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cb80:	f035 010c 	bics.w	r1, r5, #12
 800cb84:	d1bf      	bne.n	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
 800cb86:	e7e6      	b.n	800cb56 <HAL_TIM_IC_Start_DMA+0x96>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cb88:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cb8a:	f100 0134 	add.w	r1, r0, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cb8e:	4f59      	ldr	r7, [pc, #356]	; (800ccf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cb90:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800cd10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cb94:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cb96:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cb98:	4f57      	ldr	r7, [pc, #348]	; (800ccf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800cb9a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cb9e:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800cba0:	f7f8 ff18 	bl	80059d4 <HAL_DMA_Start_IT>
 800cba4:	bb18      	cbnz	r0, 800cbee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800cba6:	6820      	ldr	r0, [r4, #0]
 800cba8:	68c3      	ldr	r3, [r0, #12]
 800cbaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cbae:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f7ff ff26 	bl	800ca04 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbb8:	6822      	ldr	r2, [r4, #0]
 800cbba:	4b50      	ldr	r3, [pc, #320]	; (800ccfc <HAL_TIM_IC_Start_DMA+0x23c>)
 800cbbc:	6891      	ldr	r1, [r2, #8]
 800cbbe:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbc0:	2b06      	cmp	r3, #6
 800cbc2:	d05d      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0x1c0>
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d05a      	beq.n	800cc80 <HAL_TIM_IC_Start_DMA+0x1c0>
    __HAL_TIM_ENABLE(htim);
 800cbca:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800cbcc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800cbce:	f043 0301 	orr.w	r3, r3, #1
 800cbd2:	6013      	str	r3, [r2, #0]
}
 800cbd4:	b003      	add	sp, #12
 800cbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cbd8:	2d14      	cmp	r5, #20
 800cbda:	d894      	bhi.n	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
 800cbdc:	4948      	ldr	r1, [pc, #288]	; (800cd00 <HAL_TIM_IC_Start_DMA+0x240>)
 800cbde:	40e9      	lsrs	r1, r5
 800cbe0:	07c9      	lsls	r1, r1, #31
 800cbe2:	d4b8      	bmi.n	800cb56 <HAL_TIM_IC_Start_DMA+0x96>
 800cbe4:	e78f      	b.n	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	d146      	bne.n	800cc78 <HAL_TIM_IC_Start_DMA+0x1b8>
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d044      	beq.n	800cc78 <HAL_TIM_IC_Start_DMA+0x1b8>
      return HAL_ERROR;
 800cbee:	2001      	movs	r0, #1
}
 800cbf0:	b003      	add	sp, #12
 800cbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cbf4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800cbf6:	f100 0138 	add.w	r1, r0, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cbfa:	4f3e      	ldr	r7, [pc, #248]	; (800ccf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cbfc:	f8df c110 	ldr.w	ip, [pc, #272]	; 800cd10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800cc00:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc02:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cc04:	4f3c      	ldr	r7, [pc, #240]	; (800ccf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc06:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800cc0a:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800cc0c:	f7f8 fee2 	bl	80059d4 <HAL_DMA_Start_IT>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d1ec      	bne.n	800cbee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	68c3      	ldr	r3, [r0, #12]
 800cc18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc1c:	60c3      	str	r3, [r0, #12]
      break;
 800cc1e:	e7c7      	b.n	800cbb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cc22:	f100 013c 	add.w	r1, r0, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc26:	4f33      	ldr	r7, [pc, #204]	; (800ccf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc28:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cd10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cc2c:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc2e:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cc30:	4f31      	ldr	r7, [pc, #196]	; (800ccf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc32:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800cc36:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800cc38:	f7f8 fecc 	bl	80059d4 <HAL_DMA_Start_IT>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d1d6      	bne.n	800cbee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	68c3      	ldr	r3, [r0, #12]
 800cc44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cc48:	60c3      	str	r3, [r0, #12]
      break;
 800cc4a:	e7b1      	b.n	800cbb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc4c:	6b26      	ldr	r6, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cc4e:	f100 0140 	add.w	r1, r0, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc52:	4f28      	ldr	r7, [pc, #160]	; (800ccf4 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc54:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800cd10 <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cc58:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800cc5a:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cc5c:	4f26      	ldr	r7, [pc, #152]	; (800ccf8 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800cc5e:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cc62:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800cc64:	f7f8 feb6 	bl	80059d4 <HAL_DMA_Start_IT>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1c0      	bne.n	800cbee <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	68c3      	ldr	r3, [r0, #12]
 800cc70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc74:	60c3      	str	r3, [r0, #12]
      break;
 800cc76:	e79b      	b.n	800cbb0 <HAL_TIM_IC_Start_DMA+0xf0>
      htim->State = HAL_TIM_STATE_BUSY;
 800cc78:	2102      	movs	r1, #2
 800cc7a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800cc7e:	e773      	b.n	800cb68 <HAL_TIM_IC_Start_DMA+0xa8>
  return HAL_OK;
 800cc80:	2000      	movs	r0, #0
}
 800cc82:	b003      	add	sp, #12
 800cc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cc86:	4917      	ldr	r1, [pc, #92]	; (800cce4 <HAL_TIM_IC_Start_DMA+0x224>)
 800cc88:	4288      	cmp	r0, r1
 800cc8a:	f43f af64 	beq.w	800cb56 <HAL_TIM_IC_Start_DMA+0x96>
 800cc8e:	f640 010e 	movw	r1, #2062	; 0x80e
 800cc92:	4817      	ldr	r0, [pc, #92]	; (800ccf0 <HAL_TIM_IC_Start_DMA+0x230>)
 800cc94:	e9cd 2300 	strd	r2, r3, [sp]
 800cc98:	f7f5 fbee 	bl	8002478 <assert_failed>
 800cc9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cca0:	e759      	b.n	800cb56 <HAL_TIM_IC_Start_DMA+0x96>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cca2:	f035 0104 	bics.w	r1, r5, #4
 800cca6:	f47f af2e 	bne.w	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
 800ccaa:	e7f0      	b.n	800cc8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800ccac:	4815      	ldr	r0, [pc, #84]	; (800cd04 <HAL_TIM_IC_Start_DMA+0x244>)
 800ccae:	4281      	cmp	r1, r0
 800ccb0:	f43f af26 	beq.w	800cb00 <HAL_TIM_IC_Start_DMA+0x40>
 800ccb4:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800ccb8:	4281      	cmp	r1, r0
 800ccba:	d0f2      	beq.n	800cca2 <HAL_TIM_IC_Start_DMA+0x1e2>
 800ccbc:	4812      	ldr	r0, [pc, #72]	; (800cd08 <HAL_TIM_IC_Start_DMA+0x248>)
 800ccbe:	4281      	cmp	r1, r0
 800ccc0:	f43f af1e 	beq.w	800cb00 <HAL_TIM_IC_Start_DMA+0x40>
 800ccc4:	4811      	ldr	r0, [pc, #68]	; (800cd0c <HAL_TIM_IC_Start_DMA+0x24c>)
 800ccc6:	4281      	cmp	r1, r0
 800ccc8:	f47f af1d 	bne.w	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	f47f af1a 	bne.w	800cb06 <HAL_TIM_IC_Start_DMA+0x46>
 800ccd2:	e7dc      	b.n	800cc8e <HAL_TIM_IC_Start_DMA+0x1ce>
 800ccd4:	40010000 	.word	0x40010000
 800ccd8:	40000400 	.word	0x40000400
 800ccdc:	40000800 	.word	0x40000800
 800cce0:	40000c00 	.word	0x40000c00
 800cce4:	40010400 	.word	0x40010400
 800cce8:	40014000 	.word	0x40014000
 800ccec:	40014400 	.word	0x40014400
 800ccf0:	080216d0 	.word	0x080216d0
 800ccf4:	0800b645 	.word	0x0800b645
 800ccf8:	0800b821 	.word	0x0800b821
 800ccfc:	00010007 	.word	0x00010007
 800cd00:	00111111 	.word	0x00111111
 800cd04:	40014800 	.word	0x40014800
 800cd08:	40001c00 	.word	0x40001c00
 800cd0c:	40002000 	.word	0x40002000
 800cd10:	0800b5e1 	.word	0x0800b5e1

0800cd14 <HAL_TIM_IC_Stop_DMA>:
{
 800cd14:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cd16:	4a5a      	ldr	r2, [pc, #360]	; (800ce80 <HAL_TIM_IC_Stop_DMA+0x16c>)
{
 800cd18:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cd1a:	6803      	ldr	r3, [r0, #0]
{
 800cd1c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	f000 808e 	beq.w	800ce40 <HAL_TIM_IC_Stop_DMA+0x12c>
 800cd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd28:	d04a      	beq.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0xac>
 800cd2a:	4a56      	ldr	r2, [pc, #344]	; (800ce84 <HAL_TIM_IC_Stop_DMA+0x170>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d047      	beq.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0xac>
 800cd30:	4a55      	ldr	r2, [pc, #340]	; (800ce88 <HAL_TIM_IC_Stop_DMA+0x174>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d044      	beq.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0xac>
 800cd36:	4a55      	ldr	r2, [pc, #340]	; (800ce8c <HAL_TIM_IC_Stop_DMA+0x178>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d041      	beq.n	800cdc0 <HAL_TIM_IC_Stop_DMA+0xac>
 800cd3c:	4a54      	ldr	r2, [pc, #336]	; (800ce90 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d07e      	beq.n	800ce40 <HAL_TIM_IC_Stop_DMA+0x12c>
 800cd42:	4a54      	ldr	r2, [pc, #336]	; (800ce94 <HAL_TIM_IC_Stop_DMA+0x180>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	f000 8082 	beq.w	800ce4e <HAL_TIM_IC_Stop_DMA+0x13a>
 800cd4a:	4a53      	ldr	r2, [pc, #332]	; (800ce98 <HAL_TIM_IC_Stop_DMA+0x184>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	f040 8083 	bne.w	800ce58 <HAL_TIM_IC_Stop_DMA+0x144>
 800cd52:	b325      	cbz	r5, 800cd9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800cd54:	f640 0192 	movw	r1, #2194	; 0x892
 800cd58:	4850      	ldr	r0, [pc, #320]	; (800ce9c <HAL_TIM_IC_Stop_DMA+0x188>)
 800cd5a:	f7f5 fb8d 	bl	8002478 <assert_failed>
 800cd5e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800cd60:	4a47      	ldr	r2, [pc, #284]	; (800ce80 <HAL_TIM_IC_Stop_DMA+0x16c>)
 800cd62:	4948      	ldr	r1, [pc, #288]	; (800ce84 <HAL_TIM_IC_Stop_DMA+0x170>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	bf18      	it	ne
 800cd68:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cd6c:	4846      	ldr	r0, [pc, #280]	; (800ce88 <HAL_TIM_IC_Stop_DMA+0x174>)
 800cd6e:	bf14      	ite	ne
 800cd70:	2201      	movne	r2, #1
 800cd72:	2200      	moveq	r2, #0
 800cd74:	428b      	cmp	r3, r1
 800cd76:	bf0c      	ite	eq
 800cd78:	2200      	moveq	r2, #0
 800cd7a:	f002 0201 	andne.w	r2, r2, #1
 800cd7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd82:	4283      	cmp	r3, r0
 800cd84:	bf0c      	ite	eq
 800cd86:	2200      	moveq	r2, #0
 800cd88:	f002 0201 	andne.w	r2, r2, #1
 800cd8c:	428b      	cmp	r3, r1
 800cd8e:	bf0c      	ite	eq
 800cd90:	2200      	moveq	r2, #0
 800cd92:	f002 0201 	andne.w	r2, r2, #1
 800cd96:	b142      	cbz	r2, 800cdaa <HAL_TIM_IC_Stop_DMA+0x96>
 800cd98:	4a3d      	ldr	r2, [pc, #244]	; (800ce90 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d005      	beq.n	800cdaa <HAL_TIM_IC_Stop_DMA+0x96>
 800cd9e:	f640 0193 	movw	r1, #2195	; 0x893
 800cda2:	483e      	ldr	r0, [pc, #248]	; (800ce9c <HAL_TIM_IC_Stop_DMA+0x188>)
 800cda4:	f7f5 fb68 	bl	8002478 <assert_failed>
 800cda8:	6823      	ldr	r3, [r4, #0]
  switch (Channel)
 800cdaa:	2d0c      	cmp	r5, #12
 800cdac:	d814      	bhi.n	800cdd8 <HAL_TIM_IC_Stop_DMA+0xc4>
 800cdae:	e8df f005 	tbb	[pc, r5]
 800cdb2:	130b      	.short	0x130b
 800cdb4:	133e1313 	.word	0x133e1313
 800cdb8:	13351313 	.word	0x13351313
 800cdbc:	1313      	.short	0x1313
 800cdbe:	2c          	.byte	0x2c
 800cdbf:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cdc0:	f035 020c 	bics.w	r2, r5, #12
 800cdc4:	d1c6      	bne.n	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800cdc6:	e7f0      	b.n	800cdaa <HAL_TIM_IC_Stop_DMA+0x96>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cdc8:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800cdca:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800cdcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cdd0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800cdd2:	f7f8 fea1 	bl	8005b18 <HAL_DMA_Abort_IT>
 800cdd6:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4618      	mov	r0, r3
 800cddc:	2200      	movs	r2, #0
 800cdde:	f7ff fe11 	bl	800ca04 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	f241 1211 	movw	r2, #4369	; 0x1111
 800cde8:	6a19      	ldr	r1, [r3, #32]
 800cdea:	4211      	tst	r1, r2
 800cdec:	d108      	bne.n	800ce00 <HAL_TIM_IC_Stop_DMA+0xec>
 800cdee:	6a19      	ldr	r1, [r3, #32]
 800cdf0:	f240 4244 	movw	r2, #1092	; 0x444
 800cdf4:	4211      	tst	r1, r2
 800cdf6:	d103      	bne.n	800ce00 <HAL_TIM_IC_Stop_DMA+0xec>
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	f022 0201 	bic.w	r2, r2, #1
 800cdfe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ce00:	2301      	movs	r3, #1
}
 800ce02:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ce04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ce0a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ce0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ce0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ce14:	f7f8 fe80 	bl	8005b18 <HAL_DMA_Abort_IT>
 800ce18:	6823      	ldr	r3, [r4, #0]
      break;
 800ce1a:	e7dd      	b.n	800cdd8 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ce1c:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ce1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ce20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ce24:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ce26:	f7f8 fe77 	bl	8005b18 <HAL_DMA_Abort_IT>
 800ce2a:	6823      	ldr	r3, [r4, #0]
      break;
 800ce2c:	e7d4      	b.n	800cdd8 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ce2e:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ce30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ce32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ce38:	f7f8 fe6e 	bl	8005b18 <HAL_DMA_Abort_IT>
 800ce3c:	6823      	ldr	r3, [r4, #0]
      break;
 800ce3e:	e7cb      	b.n	800cdd8 <HAL_TIM_IC_Stop_DMA+0xc4>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ce40:	2d14      	cmp	r5, #20
 800ce42:	d887      	bhi.n	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800ce44:	4a16      	ldr	r2, [pc, #88]	; (800cea0 <HAL_TIM_IC_Stop_DMA+0x18c>)
 800ce46:	40ea      	lsrs	r2, r5
 800ce48:	07d2      	lsls	r2, r2, #31
 800ce4a:	d4ae      	bmi.n	800cdaa <HAL_TIM_IC_Stop_DMA+0x96>
 800ce4c:	e782      	b.n	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800ce4e:	f035 0304 	bics.w	r3, r5, #4
 800ce52:	f47f af7f 	bne.w	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800ce56:	e7a2      	b.n	800cd9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800ce58:	4a12      	ldr	r2, [pc, #72]	; (800cea4 <HAL_TIM_IC_Stop_DMA+0x190>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	f43f af79 	beq.w	800cd52 <HAL_TIM_IC_Stop_DMA+0x3e>
 800ce60:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d0f2      	beq.n	800ce4e <HAL_TIM_IC_Stop_DMA+0x13a>
 800ce68:	4a0f      	ldr	r2, [pc, #60]	; (800cea8 <HAL_TIM_IC_Stop_DMA+0x194>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	f43f af71 	beq.w	800cd52 <HAL_TIM_IC_Stop_DMA+0x3e>
 800ce70:	4a0e      	ldr	r2, [pc, #56]	; (800ceac <HAL_TIM_IC_Stop_DMA+0x198>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	f47f af6e 	bne.w	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	f47f af6b 	bne.w	800cd54 <HAL_TIM_IC_Stop_DMA+0x40>
 800ce7e:	e78e      	b.n	800cd9e <HAL_TIM_IC_Stop_DMA+0x8a>
 800ce80:	40010000 	.word	0x40010000
 800ce84:	40000400 	.word	0x40000400
 800ce88:	40000800 	.word	0x40000800
 800ce8c:	40000c00 	.word	0x40000c00
 800ce90:	40010400 	.word	0x40010400
 800ce94:	40014000 	.word	0x40014000
 800ce98:	40014400 	.word	0x40014400
 800ce9c:	080216d0 	.word	0x080216d0
 800cea0:	00111111 	.word	0x00111111
 800cea4:	40014800 	.word	0x40014800
 800cea8:	40001c00 	.word	0x40001c00
 800ceac:	40002000 	.word	0x40002000

0800ceb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	4604      	mov	r4, r0
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800ceb4:	4b48      	ldr	r3, [pc, #288]	; (800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ceb6:	4849      	ldr	r0, [pc, #292]	; (800cfdc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
{
 800ceb8:	460d      	mov	r5, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800ceba:	6822      	ldr	r2, [r4, #0]
 800cebc:	4948      	ldr	r1, [pc, #288]	; (800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cebe:	429a      	cmp	r2, r3
 800cec0:	bf18      	it	ne
 800cec2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cec6:	4e47      	ldr	r6, [pc, #284]	; (800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cec8:	bf14      	ite	ne
 800ceca:	2301      	movne	r3, #1
 800cecc:	2300      	moveq	r3, #0
 800cece:	4282      	cmp	r2, r0
 800ced0:	bf0c      	ite	eq
 800ced2:	2300      	moveq	r3, #0
 800ced4:	f003 0301 	andne.w	r3, r3, #1
 800ced8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cedc:	428a      	cmp	r2, r1
 800cede:	bf0c      	ite	eq
 800cee0:	2300      	moveq	r3, #0
 800cee2:	f003 0301 	andne.w	r3, r3, #1
 800cee6:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ceea:	42b2      	cmp	r2, r6
 800ceec:	bf0c      	ite	eq
 800ceee:	2300      	moveq	r3, #0
 800cef0:	f003 0301 	andne.w	r3, r3, #1
 800cef4:	4282      	cmp	r2, r0
 800cef6:	bf0c      	ite	eq
 800cef8:	2300      	moveq	r3, #0
 800cefa:	f003 0301 	andne.w	r3, r3, #1
 800cefe:	428a      	cmp	r2, r1
 800cf00:	bf0c      	ite	eq
 800cf02:	2300      	moveq	r3, #0
 800cf04:	f003 0301 	andne.w	r3, r3, #1
 800cf08:	b113      	cbz	r3, 800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cf0a:	4b37      	ldr	r3, [pc, #220]	; (800cfe8 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d14e      	bne.n	800cfae <HAL_TIMEx_MasterConfigSynchronization+0xfe>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800cf16:	2b40      	cmp	r3, #64	; 0x40
 800cf18:	d001      	beq.n	800cf1e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d14d      	bne.n	800cfba <HAL_TIMEx_MasterConfigSynchronization+0x10a>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800cf1e:	68ab      	ldr	r3, [r5, #8]
 800cf20:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cf24:	d13d      	bne.n	800cfa2 <HAL_TIMEx_MasterConfigSynchronization+0xf2>

  /* Check input state */
  __HAL_LOCK(htim);
 800cf26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cf2a:	2002      	movs	r0, #2
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d01f      	beq.n	800cf70 <HAL_TIMEx_MasterConfigSynchronization+0xc0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf30:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(htim);
 800cf32:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf34:	4a28      	ldr	r2, [pc, #160]	; (800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cf36:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf3a:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800cf3c:	685e      	ldr	r6, [r3, #4]
  __HAL_LOCK(htim);
 800cf3e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800cf42:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf44:	d015      	beq.n	800cf72 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800cf46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d011      	beq.n	800cf72 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf4e:	682a      	ldr	r2, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf50:	f026 0670 	bic.w	r6, r6, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf54:	68a8      	ldr	r0, [r5, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800cf56:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf5a:	4316      	orrs	r6, r2
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800cf5c:	2200      	movs	r2, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf5e:	4307      	orrs	r7, r0
  htim->State = HAL_TIM_STATE_READY;
 800cf60:	2101      	movs	r1, #1

  return HAL_OK;
 800cf62:	4610      	mov	r0, r2
  htim->Instance->CR2 = tmpcr2;
 800cf64:	605e      	str	r6, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800cf66:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800cf68:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cf6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800cf72:	6868      	ldr	r0, [r5, #4]
 800cf74:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
 800cf78:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800cf7c:	bf18      	it	ne
 800cf7e:	2a00      	cmpne	r2, #0
 800cf80:	bf14      	ite	ne
 800cf82:	2101      	movne	r1, #1
 800cf84:	2100      	moveq	r1, #0
 800cf86:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800cf8a:	bf0c      	ite	eq
 800cf8c:	2100      	moveq	r1, #0
 800cf8e:	f001 0101 	andne.w	r1, r1, #1
 800cf92:	b111      	cbz	r1, 800cf9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cf94:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800cf98:	d115      	bne.n	800cfc6 <HAL_TIMEx_MasterConfigSynchronization+0x116>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf9a:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf9e:	4306      	orrs	r6, r0
 800cfa0:	e7d5      	b.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800cfa2:	f240 6165 	movw	r1, #1637	; 0x665
 800cfa6:	4811      	ldr	r0, [pc, #68]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800cfa8:	f7f5 fa66 	bl	8002478 <assert_failed>
 800cfac:	e7bb      	b.n	800cf26 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800cfae:	f240 6163 	movw	r1, #1635	; 0x663
 800cfb2:	480e      	ldr	r0, [pc, #56]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800cfb4:	f7f5 fa60 	bl	8002478 <assert_failed>
 800cfb8:	e7aa      	b.n	800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800cfba:	f240 6164 	movw	r1, #1636	; 0x664
 800cfbe:	480b      	ldr	r0, [pc, #44]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800cfc0:	f7f5 fa5a 	bl	8002478 <assert_failed>
 800cfc4:	e7ab      	b.n	800cf1e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800cfc6:	4809      	ldr	r0, [pc, #36]	; (800cfec <HAL_TIMEx_MasterConfigSynchronization+0x13c>)
 800cfc8:	f240 6177 	movw	r1, #1655	; 0x677
 800cfcc:	f7f5 fa54 	bl	8002478 <assert_failed>
 800cfd0:	6868      	ldr	r0, [r5, #4]
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	e7e1      	b.n	800cf9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cfd6:	bf00      	nop
 800cfd8:	40010000 	.word	0x40010000
 800cfdc:	40000400 	.word	0x40000400
 800cfe0:	40000800 	.word	0x40000800
 800cfe4:	40000c00 	.word	0x40000c00
 800cfe8:	40010400 	.word	0x40010400
 800cfec:	08021708 	.word	0x08021708

0800cff0 <HAL_TIMEx_CommutCallback>:
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <HAL_TIMEx_BreakCallback>:
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop

0800cff8 <HAL_TIMEx_Break2Callback>:
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop

0800cffc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d000:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800d002:	2e20      	cmp	r6, #32
 800d004:	d149      	bne.n	800d09a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d006:	2900      	cmp	r1, #0
 800d008:	d04a      	beq.n	800d0a0 <HAL_UART_Receive_DMA+0xa4>
 800d00a:	fab2 f782 	clz	r7, r2
 800d00e:	097f      	lsrs	r7, r7, #5
 800d010:	2f00      	cmp	r7, #0
 800d012:	d145      	bne.n	800d0a0 <HAL_UART_Receive_DMA+0xa4>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d014:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d03e      	beq.n	800d09a <HAL_UART_Receive_DMA+0x9e>
 800d01c:	4613      	mov	r3, r2
 800d01e:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d020:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 800d022:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d026:	67c7      	str	r7, [r0, #124]	; 0x7c
 800d028:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 800d02a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800d02c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800d030:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d034:	6782      	str	r2, [r0, #120]	; 0x78
 800d036:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 800d03a:	f1be 0f00 	cmp.w	lr, #0
 800d03e:	d015      	beq.n	800d06c <HAL_UART_Receive_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d040:	481c      	ldr	r0, [pc, #112]	; (800d0b4 <HAL_UART_Receive_DMA+0xb8>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d042:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d044:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800d0b8 <HAL_UART_Receive_DMA+0xbc>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d048:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d04c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800d0bc <HAL_UART_Receive_DMA+0xc0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d050:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d054:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 800d056:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d05a:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d05e:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d062:	f7f8 fcb7 	bl	80059d4 <HAL_DMA_Start_IT>
 800d066:	b9f0      	cbnz	r0, 800d0a6 <HAL_UART_Receive_DMA+0xaa>
 800d068:	f8d5 c000 	ldr.w	ip, [r5]
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d06c:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 800d070:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 800d076:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d07a:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d07e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d082:	f043 0301 	orr.w	r3, r3, #1
 800d086:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d08a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d092:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800d09a:	2002      	movs	r0, #2
}
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800d0a0:	2001      	movs	r0, #1
}
 800d0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0a6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800d0a8:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800d0ac:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0ae:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800d0b0:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800d0b2:	e7f3      	b.n	800d09c <HAL_UART_Receive_DMA+0xa0>
 800d0b4:	0800d0c5 	.word	0x0800d0c5
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d10d 	.word	0x0800d10d

0800d0c0 <HAL_UART_TxCpltCallback>:
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop

0800d0c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d0c6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0ce:	d011      	beq.n	800d0f4 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0d0:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800d0d2:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0d4:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800d0d6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d0e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0e2:	689a      	ldr	r2, [r3, #8]
 800d0e4:	f022 0201 	bic.w	r2, r2, #1
 800d0e8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0ea:	689a      	ldr	r2, [r3, #8]
 800d0ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0f0:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d0f4:	f7f5 fb24 	bl	8002740 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0f8:	bd08      	pop	{r3, pc}
 800d0fa:	bf00      	nop

0800d0fc <HAL_UART_RxHalfCpltCallback>:
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop

0800d100 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d100:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d102:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d104:	f7ff fffa 	bl	800d0fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d108:	bd08      	pop	{r3, pc}
 800d10a:	bf00      	nop

0800d10c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d10c:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d10e:	681a      	ldr	r2, [r3, #0]
{
 800d110:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d112:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d114:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d116:	6891      	ldr	r1, [r2, #8]
 800d118:	0609      	lsls	r1, r1, #24
 800d11a:	d501      	bpl.n	800d120 <UART_DMAError+0x14>
 800d11c:	2c21      	cmp	r4, #33	; 0x21
 800d11e:	d01b      	beq.n	800d158 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d120:	6891      	ldr	r1, [r2, #8]
 800d122:	0649      	lsls	r1, r1, #25
 800d124:	d501      	bpl.n	800d12a <UART_DMAError+0x1e>
 800d126:	2822      	cmp	r0, #34	; 0x22
 800d128:	d007      	beq.n	800d13a <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d12a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d12c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d12e:	f042 0210 	orr.w	r2, r2, #16
 800d132:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800d134:	f7f5 fb44 	bl	80027c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d138:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800d13a:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d13c:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800d13e:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d142:	6811      	ldr	r1, [r2, #0]
 800d144:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800d148:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d14a:	6891      	ldr	r1, [r2, #8]
 800d14c:	f021 0101 	bic.w	r1, r1, #1
 800d150:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800d152:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800d154:	679c      	str	r4, [r3, #120]	; 0x78
 800d156:	e7e8      	b.n	800d12a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800d158:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800d15a:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800d15c:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d160:	6811      	ldr	r1, [r2, #0]
 800d162:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800d166:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d168:	675c      	str	r4, [r3, #116]	; 0x74
 800d16a:	e7d9      	b.n	800d120 <UART_DMAError+0x14>

0800d16c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d16c:	6803      	ldr	r3, [r0, #0]
 800d16e:	69da      	ldr	r2, [r3, #28]
{
 800d170:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800d172:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d174:	681d      	ldr	r5, [r3, #0]
{
 800d176:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d178:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800d17a:	d047      	beq.n	800d20c <HAL_UART_IRQHandler+0xa0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d17c:	f011 0101 	ands.w	r1, r1, #1
 800d180:	d04b      	beq.n	800d21a <HAL_UART_IRQHandler+0xae>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d182:	07d0      	lsls	r0, r2, #31
 800d184:	d507      	bpl.n	800d196 <HAL_UART_IRQHandler+0x2a>
 800d186:	05ee      	lsls	r6, r5, #23
 800d188:	d505      	bpl.n	800d196 <HAL_UART_IRQHandler+0x2a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d18a:	2001      	movs	r0, #1
 800d18c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d18e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d190:	f040 0001 	orr.w	r0, r0, #1
 800d194:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d196:	0790      	lsls	r0, r2, #30
 800d198:	d45d      	bmi.n	800d256 <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d19a:	0750      	lsls	r0, r2, #29
 800d19c:	d501      	bpl.n	800d1a2 <HAL_UART_IRQHandler+0x36>
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	d163      	bne.n	800d26a <HAL_UART_IRQHandler+0xfe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1a2:	0716      	lsls	r6, r2, #28
 800d1a4:	d503      	bpl.n	800d1ae <HAL_UART_IRQHandler+0x42>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d1a6:	06a8      	lsls	r0, r5, #26
 800d1a8:	d466      	bmi.n	800d278 <HAL_UART_IRQHandler+0x10c>
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d164      	bne.n	800d278 <HAL_UART_IRQHandler+0x10c>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1ae:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	d031      	beq.n	800d218 <HAL_UART_IRQHandler+0xac>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d1b4:	0696      	lsls	r6, r2, #26
 800d1b6:	d501      	bpl.n	800d1bc <HAL_UART_IRQHandler+0x50>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d1b8:	06a8      	lsls	r0, r5, #26
 800d1ba:	d468      	bmi.n	800d28e <HAL_UART_IRQHandler+0x122>
      errorcode = huart->ErrorCode;
 800d1bc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1be:	6899      	ldr	r1, [r3, #8]
 800d1c0:	0649      	lsls	r1, r1, #25
 800d1c2:	d402      	bmi.n	800d1ca <HAL_UART_IRQHandler+0x5e>
 800d1c4:	f015 0508 	ands.w	r5, r5, #8
 800d1c8:	d068      	beq.n	800d29c <HAL_UART_IRQHandler+0x130>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1ca:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800d1cc:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800d1ce:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d1d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1d6:	689a      	ldr	r2, [r3, #8]
 800d1d8:	f022 0201 	bic.w	r2, r2, #1
 800d1dc:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800d1de:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e0:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800d1e2:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e4:	0652      	lsls	r2, r2, #25
 800d1e6:	d54e      	bpl.n	800d286 <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1e8:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d1ea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1f0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d1f2:	2900      	cmp	r1, #0
 800d1f4:	d047      	beq.n	800d286 <HAL_UART_IRQHandler+0x11a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1f6:	4b2c      	ldr	r3, [pc, #176]	; (800d2a8 <HAL_UART_IRQHandler+0x13c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1f8:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1fa:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1fc:	f7f8 fc8c 	bl	8005b18 <HAL_DMA_Abort_IT>
 800d200:	b150      	cbz	r0, 800d218 <HAL_UART_IRQHandler+0xac>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d202:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800d204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d208:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d20a:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d20c:	0691      	lsls	r1, r2, #26
 800d20e:	d507      	bpl.n	800d220 <HAL_UART_IRQHandler+0xb4>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d210:	06ae      	lsls	r6, r5, #26
 800d212:	d505      	bpl.n	800d220 <HAL_UART_IRQHandler+0xb4>
      if (huart->RxISR != NULL)
 800d214:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d216:	b9db      	cbnz	r3, 800d250 <HAL_UART_IRQHandler+0xe4>
}
 800d218:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800d21a:	f415 7f90 	tst.w	r5, #288	; 0x120
 800d21e:	d1b0      	bne.n	800d182 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d220:	0616      	lsls	r6, r2, #24
 800d222:	d40f      	bmi.n	800d244 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d224:	0651      	lsls	r1, r2, #25
 800d226:	d5f7      	bpl.n	800d218 <HAL_UART_IRQHandler+0xac>
 800d228:	066a      	lsls	r2, r5, #25
 800d22a:	d5f5      	bpl.n	800d218 <HAL_UART_IRQHandler+0xac>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d22c:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d22e:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d230:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d232:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d238:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d23a:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800d23c:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800d23e:	f7ff ff3f 	bl	800d0c0 <HAL_UART_TxCpltCallback>
}
 800d242:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d244:	0628      	lsls	r0, r5, #24
 800d246:	d5ed      	bpl.n	800d224 <HAL_UART_IRQHandler+0xb8>
    if (huart->TxISR != NULL)
 800d248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0e4      	beq.n	800d218 <HAL_UART_IRQHandler+0xac>
      huart->TxISR(huart);
 800d24e:	4620      	mov	r0, r4
}
 800d250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800d254:	4718      	bx	r3
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d256:	2900      	cmp	r1, #0
 800d258:	d0a3      	beq.n	800d1a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d25a:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d25c:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d25e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d260:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d262:	f040 0004 	orr.w	r0, r0, #4
 800d266:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d268:	d59b      	bpl.n	800d1a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d26a:	2004      	movs	r0, #4
 800d26c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d26e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d270:	f040 0002 	orr.w	r0, r0, #2
 800d274:	67e0      	str	r0, [r4, #124]	; 0x7c
 800d276:	e794      	b.n	800d1a2 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d278:	2108      	movs	r1, #8
 800d27a:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d27c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d27e:	f041 0108 	orr.w	r1, r1, #8
 800d282:	67e1      	str	r1, [r4, #124]	; 0x7c
 800d284:	e793      	b.n	800d1ae <HAL_UART_IRQHandler+0x42>
            HAL_UART_ErrorCallback(huart);
 800d286:	4620      	mov	r0, r4
 800d288:	f7f5 fa9a 	bl	80027c0 <HAL_UART_ErrorCallback>
}
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800d28e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d290:	2a00      	cmp	r2, #0
 800d292:	d093      	beq.n	800d1bc <HAL_UART_IRQHandler+0x50>
          huart->RxISR(huart);
 800d294:	4620      	mov	r0, r4
 800d296:	4790      	blx	r2
 800d298:	6823      	ldr	r3, [r4, #0]
 800d29a:	e78f      	b.n	800d1bc <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 800d29c:	4620      	mov	r0, r4
 800d29e:	f7f5 fa8f 	bl	80027c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2a2:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800d2a4:	bd70      	pop	{r4, r5, r6, pc}
 800d2a6:	bf00      	nop
 800d2a8:	0800d2ad 	.word	0x0800d2ad

0800d2ac <UART_DMAAbortOnError>:
{
 800d2ac:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 800d2ae:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800d2b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 800d2b6:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800d2b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800d2bc:	f7f5 fa80 	bl	80027c0 <HAL_UART_ErrorCallback>
}
 800d2c0:	bd08      	pop	{r3, pc}
 800d2c2:	bf00      	nop

0800d2c4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d2c4:	4bba      	ldr	r3, [pc, #744]	; (800d5b0 <UART_SetConfig+0x2ec>)
 800d2c6:	6842      	ldr	r2, [r0, #4]
 800d2c8:	429a      	cmp	r2, r3
{
 800d2ca:	b570      	push	{r4, r5, r6, lr}
 800d2cc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d2ce:	f200 80bf 	bhi.w	800d450 <UART_SetConfig+0x18c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800d2d8:	d002      	beq.n	800d2e0 <UART_SetConfig+0x1c>
 800d2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2de:	d17c      	bne.n	800d3da <UART_SetConfig+0x116>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d2e0:	68e3      	ldr	r3, [r4, #12]
 800d2e2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d2e6:	f040 8082 	bne.w	800d3ee <UART_SetConfig+0x12a>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d2ea:	6a23      	ldr	r3, [r4, #32]
 800d2ec:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800d2f0:	f040 8087 	bne.w	800d402 <UART_SetConfig+0x13e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d2fa:	d002      	beq.n	800d302 <UART_SetConfig+0x3e>
 800d2fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d300:	d165      	bne.n	800d3ce <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d302:	6963      	ldr	r3, [r4, #20]
 800d304:	f033 020c 	bics.w	r2, r3, #12
 800d308:	d148      	bne.n	800d39c <UART_SetConfig+0xd8>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d046      	beq.n	800d39c <UART_SetConfig+0xd8>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d30e:	69a3      	ldr	r3, [r4, #24]
 800d310:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800d314:	d14b      	bne.n	800d3ae <UART_SetConfig+0xea>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d316:	69e0      	ldr	r0, [r4, #28]
 800d318:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800d31c:	d150      	bne.n	800d3c0 <UART_SetConfig+0xfc>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	6921      	ldr	r1, [r4, #16]
 800d322:	68a2      	ldr	r2, [r4, #8]
 800d324:	681e      	ldr	r6, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	4da2      	ldr	r5, [pc, #648]	; (800d5b4 <UART_SetConfig+0x2f0>)
 800d32a:	6961      	ldr	r1, [r4, #20]
 800d32c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d32e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d330:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d332:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d334:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800d336:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d338:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800d33a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d33c:	4d9e      	ldr	r5, [pc, #632]	; (800d5b8 <UART_SetConfig+0x2f4>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d33e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d340:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d342:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d344:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d348:	ea42 0206 	orr.w	r2, r2, r6
 800d34c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800d354:	ea41 0102 	orr.w	r1, r1, r2
 800d358:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d35a:	d07f      	beq.n	800d45c <UART_SetConfig+0x198>
 800d35c:	4a97      	ldr	r2, [pc, #604]	; (800d5bc <UART_SetConfig+0x2f8>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d055      	beq.n	800d40e <UART_SetConfig+0x14a>
 800d362:	4a97      	ldr	r2, [pc, #604]	; (800d5c0 <UART_SetConfig+0x2fc>)
 800d364:	4293      	cmp	r3, r2
 800d366:	f000 80f1 	beq.w	800d54c <UART_SetConfig+0x288>
 800d36a:	4a96      	ldr	r2, [pc, #600]	; (800d5c4 <UART_SetConfig+0x300>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	f000 813b 	beq.w	800d5e8 <UART_SetConfig+0x324>
 800d372:	4a95      	ldr	r2, [pc, #596]	; (800d5c8 <UART_SetConfig+0x304>)
 800d374:	4293      	cmp	r3, r2
 800d376:	f000 8091 	beq.w	800d49c <UART_SetConfig+0x1d8>
 800d37a:	4a94      	ldr	r2, [pc, #592]	; (800d5cc <UART_SetConfig+0x308>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	f000 80fd 	beq.w	800d57c <UART_SetConfig+0x2b8>
 800d382:	4a93      	ldr	r2, [pc, #588]	; (800d5d0 <UART_SetConfig+0x30c>)
 800d384:	4293      	cmp	r3, r2
 800d386:	f000 8160 	beq.w	800d64a <UART_SetConfig+0x386>
 800d38a:	4a92      	ldr	r2, [pc, #584]	; (800d5d4 <UART_SetConfig+0x310>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	f000 816e 	beq.w	800d66e <UART_SetConfig+0x3aa>
  huart->RxISR = NULL;
 800d392:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800d394:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800d396:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d39c:	f640 2157 	movw	r1, #2647	; 0xa57
 800d3a0:	488d      	ldr	r0, [pc, #564]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3a2:	f7f5 f869 	bl	8002478 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d3a6:	69a3      	ldr	r3, [r4, #24]
 800d3a8:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800d3ac:	d0b3      	beq.n	800d316 <UART_SetConfig+0x52>
 800d3ae:	488a      	ldr	r0, [pc, #552]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3b0:	f640 2158 	movw	r1, #2648	; 0xa58
 800d3b4:	f7f5 f860 	bl	8002478 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d3b8:	69e0      	ldr	r0, [r4, #28]
 800d3ba:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800d3be:	d0ae      	beq.n	800d31e <UART_SetConfig+0x5a>
 800d3c0:	4885      	ldr	r0, [pc, #532]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3c2:	f640 2159 	movw	r1, #2649	; 0xa59
 800d3c6:	f7f5 f857 	bl	8002478 <assert_failed>
 800d3ca:	69e0      	ldr	r0, [r4, #28]
 800d3cc:	e7a7      	b.n	800d31e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d3ce:	f640 2156 	movw	r1, #2646	; 0xa56
 800d3d2:	4881      	ldr	r0, [pc, #516]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3d4:	f7f5 f850 	bl	8002478 <assert_failed>
 800d3d8:	e793      	b.n	800d302 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d3da:	f640 2152 	movw	r1, #2642	; 0xa52
 800d3de:	487e      	ldr	r0, [pc, #504]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3e0:	f7f5 f84a 	bl	8002478 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d3e4:	68e3      	ldr	r3, [r4, #12]
 800d3e6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d3ea:	f43f af7e 	beq.w	800d2ea <UART_SetConfig+0x26>
 800d3ee:	f640 2153 	movw	r1, #2643	; 0xa53
 800d3f2:	4879      	ldr	r0, [pc, #484]	; (800d5d8 <UART_SetConfig+0x314>)
 800d3f4:	f7f5 f840 	bl	8002478 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d3f8:	6a23      	ldr	r3, [r4, #32]
 800d3fa:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800d3fe:	f43f af79 	beq.w	800d2f4 <UART_SetConfig+0x30>
 800d402:	f640 2154 	movw	r1, #2644	; 0xa54
 800d406:	4874      	ldr	r0, [pc, #464]	; (800d5d8 <UART_SetConfig+0x314>)
 800d408:	f7f5 f836 	bl	8002478 <assert_failed>
 800d40c:	e772      	b.n	800d2f4 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d40e:	4b73      	ldr	r3, [pc, #460]	; (800d5dc <UART_SetConfig+0x318>)
 800d410:	4a73      	ldr	r2, [pc, #460]	; (800d5e0 <UART_SetConfig+0x31c>)
 800d412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d416:	f003 030c 	and.w	r3, r3, #12
 800d41a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d41c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d420:	d024      	beq.n	800d46c <UART_SetConfig+0x1a8>
    switch (clocksource)
 800d422:	2b08      	cmp	r3, #8
 800d424:	d8b5      	bhi.n	800d392 <UART_SetConfig+0xce>
 800d426:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <UART_SetConfig+0x168>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d53b 	.word	0x0800d53b
 800d430:	0800d4cb 	.word	0x0800d4cb
 800d434:	0800d623 	.word	0x0800d623
 800d438:	0800d393 	.word	0x0800d393
 800d43c:	0800d593 	.word	0x0800d593
 800d440:	0800d393 	.word	0x0800d393
 800d444:	0800d393 	.word	0x0800d393
 800d448:	0800d393 	.word	0x0800d393
 800d44c:	0800d56d 	.word	0x0800d56d
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d450:	f640 2151 	movw	r1, #2641	; 0xa51
 800d454:	4860      	ldr	r0, [pc, #384]	; (800d5d8 <UART_SetConfig+0x314>)
 800d456:	f7f5 f80f 	bl	8002478 <assert_failed>
 800d45a:	e73a      	b.n	800d2d2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d45c:	4b5f      	ldr	r3, [pc, #380]	; (800d5dc <UART_SetConfig+0x318>)
 800d45e:	4a61      	ldr	r2, [pc, #388]	; (800d5e4 <UART_SetConfig+0x320>)
 800d460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d464:	f003 0303 	and.w	r3, r3, #3
 800d468:	5cd3      	ldrb	r3, [r2, r3]
 800d46a:	e7d7      	b.n	800d41c <UART_SetConfig+0x158>
    switch (clocksource)
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d890      	bhi.n	800d392 <UART_SetConfig+0xce>
 800d470:	a201      	add	r2, pc, #4	; (adr r2, 800d478 <UART_SetConfig+0x1b4>)
 800d472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d476:	bf00      	nop
 800d478:	0800d5a5 	.word	0x0800d5a5
 800d47c:	0800d4f7 	.word	0x0800d4f7
 800d480:	0800d603 	.word	0x0800d603
 800d484:	0800d393 	.word	0x0800d393
 800d488:	0800d5ab 	.word	0x0800d5ab
 800d48c:	0800d393 	.word	0x0800d393
 800d490:	0800d393 	.word	0x0800d393
 800d494:	0800d393 	.word	0x0800d393
 800d498:	0800d613 	.word	0x0800d613
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d49c:	4b4f      	ldr	r3, [pc, #316]	; (800d5dc <UART_SetConfig+0x318>)
 800d49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4aa:	d06f      	beq.n	800d58c <UART_SetConfig+0x2c8>
 800d4ac:	d93f      	bls.n	800d52e <UART_SetConfig+0x26a>
 800d4ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4b2:	f000 80a3 	beq.w	800d5fc <UART_SetConfig+0x338>
 800d4b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4ba:	d054      	beq.n	800d566 <UART_SetConfig+0x2a2>
 800d4bc:	e769      	b.n	800d392 <UART_SetConfig+0xce>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f47f af67 	bne.w	800d392 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d4c8:	d015      	beq.n	800d4f6 <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d4ca:	f7fc f8d5 	bl	8009678 <HAL_RCC_GetPCLK2Freq>
 800d4ce:	6862      	ldr	r2, [r4, #4]
 800d4d0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4d8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4da:	f1a3 0110 	sub.w	r1, r3, #16
 800d4de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	f63f af55 	bhi.w	800d392 <UART_SetConfig+0xce>
      huart->Instance->BRR = usartdiv;
 800d4e8:	6822      	ldr	r2, [r4, #0]
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800d4ee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d4f0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d4f4:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d4f6:	f7fc f8bf 	bl	8009678 <HAL_RCC_GetPCLK2Freq>
 800d4fa:	6862      	ldr	r2, [r4, #4]
 800d4fc:	0853      	lsrs	r3, r2, #1
 800d4fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d502:	fbb3 f3f2 	udiv	r3, r3, r2
 800d506:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d508:	f1a3 0110 	sub.w	r1, r3, #16
 800d50c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d510:	4291      	cmp	r1, r2
 800d512:	f63f af3e 	bhi.w	800d392 <UART_SetConfig+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d516:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d51a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800d51e:	6821      	ldr	r1, [r4, #0]
 800d520:	2000      	movs	r0, #0
 800d522:	4313      	orrs	r3, r2
 800d524:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800d526:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d528:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f47f af2f 	bne.w	800d392 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d534:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d538:	d034      	beq.n	800d5a4 <UART_SetConfig+0x2e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d53a:	f7fc f88d 	bl	8009658 <HAL_RCC_GetPCLK1Freq>
 800d53e:	6862      	ldr	r2, [r4, #4]
 800d540:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d544:	fbb3 f3f2 	udiv	r3, r3, r2
 800d548:	b29b      	uxth	r3, r3
        break;
 800d54a:	e7c6      	b.n	800d4da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d54c:	4b23      	ldr	r3, [pc, #140]	; (800d5dc <UART_SetConfig+0x318>)
 800d54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d556:	2b10      	cmp	r3, #16
 800d558:	d018      	beq.n	800d58c <UART_SetConfig+0x2c8>
 800d55a:	d9e8      	bls.n	800d52e <UART_SetConfig+0x26a>
 800d55c:	2b20      	cmp	r3, #32
 800d55e:	d04d      	beq.n	800d5fc <UART_SetConfig+0x338>
 800d560:	2b30      	cmp	r3, #48	; 0x30
 800d562:	f47f af16 	bne.w	800d392 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d566:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d56a:	d052      	beq.n	800d612 <UART_SetConfig+0x34e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d56c:	6862      	ldr	r2, [r4, #4]
 800d56e:	0853      	lsrs	r3, r2, #1
 800d570:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d574:	fbb3 f3f2 	udiv	r3, r3, r2
 800d578:	b29b      	uxth	r3, r3
        break;
 800d57a:	e7ae      	b.n	800d4da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d57c:	4b17      	ldr	r3, [pc, #92]	; (800d5dc <UART_SetConfig+0x318>)
 800d57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d582:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d58a:	d152      	bne.n	800d632 <UART_SetConfig+0x36e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d58c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d590:	d00b      	beq.n	800d5aa <UART_SetConfig+0x2e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d592:	f7fb ff09 	bl	80093a8 <HAL_RCC_GetSysClockFreq>
 800d596:	6862      	ldr	r2, [r4, #4]
 800d598:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5a0:	b29b      	uxth	r3, r3
        break;
 800d5a2:	e79a      	b.n	800d4da <UART_SetConfig+0x216>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d5a4:	f7fc f858 	bl	8009658 <HAL_RCC_GetPCLK1Freq>
 800d5a8:	e7a7      	b.n	800d4fa <UART_SetConfig+0x236>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d5aa:	f7fb fefd 	bl	80093a8 <HAL_RCC_GetSysClockFreq>
 800d5ae:	e7a4      	b.n	800d4fa <UART_SetConfig+0x236>
 800d5b0:	019bfcc0 	.word	0x019bfcc0
 800d5b4:	efff69f3 	.word	0xefff69f3
 800d5b8:	40011000 	.word	0x40011000
 800d5bc:	40004400 	.word	0x40004400
 800d5c0:	40004800 	.word	0x40004800
 800d5c4:	40004c00 	.word	0x40004c00
 800d5c8:	40005000 	.word	0x40005000
 800d5cc:	40011400 	.word	0x40011400
 800d5d0:	40007800 	.word	0x40007800
 800d5d4:	40007c00 	.word	0x40007c00
 800d5d8:	08021758 	.word	0x08021758
 800d5dc:	40023800 	.word	0x40023800
 800d5e0:	08021748 	.word	0x08021748
 800d5e4:	08021744 	.word	0x08021744
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5e8:	4b2a      	ldr	r3, [pc, #168]	; (800d694 <UART_SetConfig+0x3d0>)
 800d5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d5f2:	2b40      	cmp	r3, #64	; 0x40
 800d5f4:	d0ca      	beq.n	800d58c <UART_SetConfig+0x2c8>
 800d5f6:	d99a      	bls.n	800d52e <UART_SetConfig+0x26a>
 800d5f8:	2b80      	cmp	r3, #128	; 0x80
 800d5fa:	d123      	bne.n	800d644 <UART_SetConfig+0x380>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d600:	d10f      	bne.n	800d622 <UART_SetConfig+0x35e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d602:	6862      	ldr	r2, [r4, #4]
 800d604:	4b24      	ldr	r3, [pc, #144]	; (800d698 <UART_SetConfig+0x3d4>)
 800d606:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d60a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d60e:	b29b      	uxth	r3, r3
        break;
 800d610:	e77a      	b.n	800d508 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d612:	6862      	ldr	r2, [r4, #4]
 800d614:	0853      	lsrs	r3, r2, #1
 800d616:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d61a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d61e:	b29b      	uxth	r3, r3
        break;
 800d620:	e772      	b.n	800d508 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d622:	6862      	ldr	r2, [r4, #4]
 800d624:	4b1d      	ldr	r3, [pc, #116]	; (800d69c <UART_SetConfig+0x3d8>)
 800d626:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d62a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d62e:	b29b      	uxth	r3, r3
        break;
 800d630:	e753      	b.n	800d4da <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d632:	f67f af44 	bls.w	800d4be <UART_SetConfig+0x1fa>
 800d636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d63a:	d0df      	beq.n	800d5fc <UART_SetConfig+0x338>
 800d63c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d640:	d091      	beq.n	800d566 <UART_SetConfig+0x2a2>
 800d642:	e6a6      	b.n	800d392 <UART_SetConfig+0xce>
 800d644:	2bc0      	cmp	r3, #192	; 0xc0
 800d646:	d08e      	beq.n	800d566 <UART_SetConfig+0x2a2>
 800d648:	e6a3      	b.n	800d392 <UART_SetConfig+0xce>
 800d64a:	4b12      	ldr	r3, [pc, #72]	; (800d694 <UART_SetConfig+0x3d0>)
 800d64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d650:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d658:	d098      	beq.n	800d58c <UART_SetConfig+0x2c8>
 800d65a:	f67f af68 	bls.w	800d52e <UART_SetConfig+0x26a>
 800d65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d662:	d0cb      	beq.n	800d5fc <UART_SetConfig+0x338>
 800d664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d668:	f43f af7d 	beq.w	800d566 <UART_SetConfig+0x2a2>
 800d66c:	e691      	b.n	800d392 <UART_SetConfig+0xce>
 800d66e:	4b09      	ldr	r3, [pc, #36]	; (800d694 <UART_SetConfig+0x3d0>)
 800d670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d67c:	d086      	beq.n	800d58c <UART_SetConfig+0x2c8>
 800d67e:	f67f af56 	bls.w	800d52e <UART_SetConfig+0x26a>
 800d682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d686:	d0b9      	beq.n	800d5fc <UART_SetConfig+0x338>
 800d688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d68c:	f43f af6b 	beq.w	800d566 <UART_SetConfig+0x2a2>
 800d690:	e67f      	b.n	800d392 <UART_SetConfig+0xce>
 800d692:	bf00      	nop
 800d694:	40023800 	.word	0x40023800
 800d698:	01e84800 	.word	0x01e84800
 800d69c:	00f42400 	.word	0x00f42400

0800d6a0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d6a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6a2:	2bff      	cmp	r3, #255	; 0xff
{
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d6a8:	d87d      	bhi.n	800d7a6 <UART_AdvFeatureConfig+0x106>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6aa:	07da      	lsls	r2, r3, #31
 800d6ac:	d50a      	bpl.n	800d6c4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d6ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d6b0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800d6b4:	f040 8097 	bne.w	800d7e6 <UART_AdvFeatureConfig+0x146>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6b8:	6820      	ldr	r0, [r4, #0]
 800d6ba:	6842      	ldr	r2, [r0, #4]
 800d6bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6c4:	0798      	lsls	r0, r3, #30
 800d6c6:	d50a      	bpl.n	800d6de <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d6c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d6ca:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800d6ce:	f040 8092 	bne.w	800d7f6 <UART_AdvFeatureConfig+0x156>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6d2:	6820      	ldr	r0, [r4, #0]
 800d6d4:	6842      	ldr	r2, [r0, #4]
 800d6d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6de:	0759      	lsls	r1, r3, #29
 800d6e0:	d50a      	bpl.n	800d6f8 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d6e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6e4:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800d6e8:	f040 808d 	bne.w	800d806 <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	6842      	ldr	r2, [r0, #4]
 800d6f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d6f4:	430a      	orrs	r2, r1
 800d6f6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6f8:	071a      	lsls	r2, r3, #28
 800d6fa:	d50a      	bpl.n	800d712 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6fe:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800d702:	f040 8088 	bne.w	800d816 <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d706:	6820      	ldr	r0, [r4, #0]
 800d708:	6842      	ldr	r2, [r0, #4]
 800d70a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d70e:	430a      	orrs	r2, r1
 800d710:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d712:	06d8      	lsls	r0, r3, #27
 800d714:	d50a      	bpl.n	800d72c <UART_AdvFeatureConfig+0x8c>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d718:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800d71c:	f040 8083 	bne.w	800d826 <UART_AdvFeatureConfig+0x186>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d720:	6820      	ldr	r0, [r4, #0]
 800d722:	6882      	ldr	r2, [r0, #8]
 800d724:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d728:	430a      	orrs	r2, r1
 800d72a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d72c:	0699      	lsls	r1, r3, #26
 800d72e:	d509      	bpl.n	800d744 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d730:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d732:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800d736:	d17e      	bne.n	800d836 <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	6882      	ldr	r2, [r0, #8]
 800d73c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d740:	430a      	orrs	r2, r1
 800d742:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d744:	065a      	lsls	r2, r3, #25
 800d746:	d521      	bpl.n	800d78c <UART_AdvFeatureConfig+0xec>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d748:	4b46      	ldr	r3, [pc, #280]	; (800d864 <UART_AdvFeatureConfig+0x1c4>)
 800d74a:	6822      	ldr	r2, [r4, #0]
 800d74c:	4846      	ldr	r0, [pc, #280]	; (800d868 <UART_AdvFeatureConfig+0x1c8>)
 800d74e:	4947      	ldr	r1, [pc, #284]	; (800d86c <UART_AdvFeatureConfig+0x1cc>)
 800d750:	429a      	cmp	r2, r3
 800d752:	bf18      	it	ne
 800d754:	4282      	cmpne	r2, r0
 800d756:	bf14      	ite	ne
 800d758:	2301      	movne	r3, #1
 800d75a:	2300      	moveq	r3, #0
 800d75c:	428a      	cmp	r2, r1
 800d75e:	bf0c      	ite	eq
 800d760:	2300      	moveq	r3, #0
 800d762:	f003 0301 	andne.w	r3, r3, #1
 800d766:	b113      	cbz	r3, 800d76e <UART_AdvFeatureConfig+0xce>
 800d768:	4b41      	ldr	r3, [pc, #260]	; (800d870 <UART_AdvFeatureConfig+0x1d0>)
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d16b      	bne.n	800d846 <UART_AdvFeatureConfig+0x1a6>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d76e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d770:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800d774:	d130      	bne.n	800d7d8 <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d776:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d778:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d77c:	684b      	ldr	r3, [r1, #4]
 800d77e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d782:	ea43 0302 	orr.w	r3, r3, r2
 800d786:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d788:	d01b      	beq.n	800d7c2 <UART_AdvFeatureConfig+0x122>
 800d78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d78c:	061b      	lsls	r3, r3, #24
 800d78e:	d509      	bpl.n	800d7a4 <UART_AdvFeatureConfig+0x104>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d790:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d792:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800d796:	d10d      	bne.n	800d7b4 <UART_AdvFeatureConfig+0x114>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d798:	6821      	ldr	r1, [r4, #0]
 800d79a:	684b      	ldr	r3, [r1, #4]
 800d79c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	604b      	str	r3, [r1, #4]
}
 800d7a4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d7a6:	f640 21d2 	movw	r1, #2770	; 0xad2
 800d7aa:	4832      	ldr	r0, [pc, #200]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d7ac:	f7f4 fe64 	bl	8002478 <assert_failed>
 800d7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b2:	e77a      	b.n	800d6aa <UART_AdvFeatureConfig+0xa>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d7b4:	f640 310f 	movw	r1, #2831	; 0xb0f
 800d7b8:	482e      	ldr	r0, [pc, #184]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d7ba:	f7f4 fe5d 	bl	8002478 <assert_failed>
 800d7be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d7c0:	e7ea      	b.n	800d798 <UART_AdvFeatureConfig+0xf8>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d7c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d7c4:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800d7c8:	d143      	bne.n	800d852 <UART_AdvFeatureConfig+0x1b2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7ca:	684a      	ldr	r2, [r1, #4]
 800d7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7ce:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d7d2:	4302      	orrs	r2, r0
 800d7d4:	604a      	str	r2, [r1, #4]
 800d7d6:	e7d9      	b.n	800d78c <UART_AdvFeatureConfig+0xec>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d7d8:	f640 3102 	movw	r1, #2818	; 0xb02
 800d7dc:	4825      	ldr	r0, [pc, #148]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d7de:	f7f4 fe4b 	bl	8002478 <assert_failed>
 800d7e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d7e4:	e7c7      	b.n	800d776 <UART_AdvFeatureConfig+0xd6>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d7e6:	f640 21d7 	movw	r1, #2775	; 0xad7
 800d7ea:	4822      	ldr	r0, [pc, #136]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d7ec:	f7f4 fe44 	bl	8002478 <assert_failed>
 800d7f0:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800d7f4:	e760      	b.n	800d6b8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d7f6:	f640 21de 	movw	r1, #2782	; 0xade
 800d7fa:	481e      	ldr	r0, [pc, #120]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d7fc:	f7f4 fe3c 	bl	8002478 <assert_failed>
 800d800:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d804:	e765      	b.n	800d6d2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d806:	f640 21e5 	movw	r1, #2789	; 0xae5
 800d80a:	481a      	ldr	r0, [pc, #104]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d80c:	f7f4 fe34 	bl	8002478 <assert_failed>
 800d810:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d814:	e76a      	b.n	800d6ec <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d816:	f640 21ec 	movw	r1, #2796	; 0xaec
 800d81a:	4816      	ldr	r0, [pc, #88]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d81c:	f7f4 fe2c 	bl	8002478 <assert_failed>
 800d820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d824:	e76f      	b.n	800d706 <UART_AdvFeatureConfig+0x66>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d826:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800d82a:	4812      	ldr	r0, [pc, #72]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d82c:	f7f4 fe24 	bl	8002478 <assert_failed>
 800d830:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d834:	e774      	b.n	800d720 <UART_AdvFeatureConfig+0x80>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d836:	f640 21fa 	movw	r1, #2810	; 0xafa
 800d83a:	480e      	ldr	r0, [pc, #56]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d83c:	f7f4 fe1c 	bl	8002478 <assert_failed>
 800d840:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d844:	e778      	b.n	800d738 <UART_AdvFeatureConfig+0x98>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d846:	f640 3101 	movw	r1, #2817	; 0xb01
 800d84a:	480a      	ldr	r0, [pc, #40]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d84c:	f7f4 fe14 	bl	8002478 <assert_failed>
 800d850:	e78d      	b.n	800d76e <UART_AdvFeatureConfig+0xce>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d852:	f640 3107 	movw	r1, #2823	; 0xb07
 800d856:	4807      	ldr	r0, [pc, #28]	; (800d874 <UART_AdvFeatureConfig+0x1d4>)
 800d858:	f7f4 fe0e 	bl	8002478 <assert_failed>
 800d85c:	6821      	ldr	r1, [r4, #0]
 800d85e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d860:	e7b3      	b.n	800d7ca <UART_AdvFeatureConfig+0x12a>
 800d862:	bf00      	nop
 800d864:	40011000 	.word	0x40011000
 800d868:	40004400 	.word	0x40004400
 800d86c:	40004800 	.word	0x40004800
 800d870:	40011400 	.word	0x40011400
 800d874:	08021758 	.word	0x08021758

0800d878 <UART_WaitOnFlagUntilTimeout>:
{
 800d878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d87c:	9d08      	ldr	r5, [sp, #32]
 800d87e:	4680      	mov	r8, r0
 800d880:	460f      	mov	r7, r1
 800d882:	4616      	mov	r6, r2
 800d884:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d886:	f8d8 4000 	ldr.w	r4, [r8]
 800d88a:	e001      	b.n	800d890 <UART_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 800d88c:	1c6b      	adds	r3, r5, #1
 800d88e:	d10a      	bne.n	800d8a6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d890:	69e0      	ldr	r0, [r4, #28]
 800d892:	ea37 0300 	bics.w	r3, r7, r0
 800d896:	bf0c      	ite	eq
 800d898:	2001      	moveq	r0, #1
 800d89a:	2000      	movne	r0, #0
 800d89c:	42b0      	cmp	r0, r6
 800d89e:	d0f5      	beq.n	800d88c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800d8a0:	2000      	movs	r0, #0
}
 800d8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8a6:	f7f6 ffa9 	bl	80047fc <HAL_GetTick>
 800d8aa:	eba0 0009 	sub.w	r0, r0, r9
 800d8ae:	42a8      	cmp	r0, r5
 800d8b0:	d801      	bhi.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0x3e>
 800d8b2:	2d00      	cmp	r5, #0
 800d8b4:	d1e7      	bne.n	800d886 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8b6:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800d8ba:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800d8bc:	2400      	movs	r4, #0
 800d8be:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8c8:	689a      	ldr	r2, [r3, #8]
 800d8ca:	f022 0201 	bic.w	r2, r2, #1
 800d8ce:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d8d0:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800d8d4:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800d8d8:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800d8dc:	e7e1      	b.n	800d8a2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d8de:	bf00      	nop

0800d8e0 <HAL_UART_Transmit>:
{
 800d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d8e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800d8e8:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 800d8ea:	2b20      	cmp	r3, #32
 800d8ec:	d13e      	bne.n	800d96c <HAL_UART_Transmit+0x8c>
 800d8ee:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	d03f      	beq.n	800d974 <HAL_UART_Transmit+0x94>
 800d8f4:	fab2 f682 	clz	r6, r2
 800d8f8:	9203      	str	r2, [sp, #12]
 800d8fa:	0976      	lsrs	r6, r6, #5
 800d8fc:	2e00      	cmp	r6, #0
 800d8fe:	d139      	bne.n	800d974 <HAL_UART_Transmit+0x94>
    __HAL_LOCK(huart);
 800d900:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800d904:	4604      	mov	r4, r0
 800d906:	2b01      	cmp	r3, #1
 800d908:	d030      	beq.n	800d96c <HAL_UART_Transmit+0x8c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d90a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800d90c:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d90e:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800d910:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d914:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800d916:	f7f6 ff71 	bl	80047fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d91a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800d91c:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800d91e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800d924:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800d928:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d92c:	d109      	bne.n	800d942 <HAL_UART_Transmit+0x62>
 800d92e:	e036      	b.n	800d99e <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d930:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d934:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800d936:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800d93a:	3b01      	subs	r3, #1
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d942:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d946:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800d948:	b29b      	uxth	r3, r3
 800d94a:	b1db      	cbz	r3, 800d984 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d94c:	4643      	mov	r3, r8
 800d94e:	2200      	movs	r2, #0
 800d950:	2180      	movs	r1, #128	; 0x80
 800d952:	4620      	mov	r0, r4
 800d954:	f7ff ff90 	bl	800d878 <UART_WaitOnFlagUntilTimeout>
 800d958:	b980      	cbnz	r0, 800d97c <HAL_UART_Transmit+0x9c>
 800d95a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	d1e7      	bne.n	800d930 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d960:	f836 2b02 	ldrh.w	r2, [r6], #2
 800d964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d968:	629a      	str	r2, [r3, #40]	; 0x28
 800d96a:	e7e4      	b.n	800d936 <HAL_UART_Transmit+0x56>
    return HAL_BUSY;
 800d96c:	2002      	movs	r0, #2
}
 800d96e:	b004      	add	sp, #16
 800d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800d974:	2001      	movs	r0, #1
}
 800d976:	b004      	add	sp, #16
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800d97c:	2003      	movs	r0, #3
}
 800d97e:	b004      	add	sp, #16
 800d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d984:	4643      	mov	r3, r8
 800d986:	2200      	movs	r2, #0
 800d988:	2140      	movs	r1, #64	; 0x40
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7ff ff74 	bl	800d878 <UART_WaitOnFlagUntilTimeout>
 800d990:	2800      	cmp	r0, #0
 800d992:	d1f3      	bne.n	800d97c <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_READY;
 800d994:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800d996:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800d99a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800d99c:	e7e7      	b.n	800d96e <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d99e:	6923      	ldr	r3, [r4, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1ce      	bne.n	800d942 <HAL_UART_Transmit+0x62>
 800d9a4:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800d9a6:	461d      	mov	r5, r3
 800d9a8:	e7cb      	b.n	800d942 <HAL_UART_Transmit+0x62>
 800d9aa:	bf00      	nop

0800d9ac <UART_CheckIdleState>:
{
 800d9ac:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ae:	2500      	movs	r5, #0
{
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9b4:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800d9b6:	f7f6 ff21 	bl	80047fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	6812      	ldr	r2, [r2, #0]
 800d9be:	0713      	lsls	r3, r2, #28
 800d9c0:	d408      	bmi.n	800d9d4 <UART_CheckIdleState+0x28>
  __HAL_UNLOCK(huart);
 800d9c2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d9c4:	2220      	movs	r2, #32
  return HAL_OK;
 800d9c6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800d9c8:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800d9ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800d9ce:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800d9d0:	b002      	add	sp, #8
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9d4:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800d9d8:	4603      	mov	r3, r0
 800d9da:	462a      	mov	r2, r5
 800d9dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d9e0:	9600      	str	r6, [sp, #0]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f7ff ff48 	bl	800d878 <UART_WaitOnFlagUntilTimeout>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d0ea      	beq.n	800d9c2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800d9ec:	2003      	movs	r0, #3
}
 800d9ee:	b002      	add	sp, #8
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}
 800d9f2:	bf00      	nop

0800d9f4 <HAL_UART_Init>:
  if (huart == NULL)
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d06c      	beq.n	800dad2 <HAL_UART_Init+0xde>
 800d9f8:	6802      	ldr	r2, [r0, #0]
 800d9fa:	493a      	ldr	r1, [pc, #232]	; (800dae4 <HAL_UART_Init+0xf0>)
{
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4b3a      	ldr	r3, [pc, #232]	; (800dae8 <HAL_UART_Init+0xf4>)
 800da00:	4604      	mov	r4, r0
 800da02:	483a      	ldr	r0, [pc, #232]	; (800daec <HAL_UART_Init+0xf8>)
 800da04:	4d3a      	ldr	r5, [pc, #232]	; (800daf0 <HAL_UART_Init+0xfc>)
 800da06:	429a      	cmp	r2, r3
 800da08:	bf18      	it	ne
 800da0a:	4282      	cmpne	r2, r0
 800da0c:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800da10:	bf14      	ite	ne
 800da12:	2301      	movne	r3, #1
 800da14:	2300      	moveq	r3, #0
 800da16:	428a      	cmp	r2, r1
 800da18:	bf0c      	ite	eq
 800da1a:	2300      	moveq	r3, #0
 800da1c:	f003 0301 	andne.w	r3, r3, #1
 800da20:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800da24:	42aa      	cmp	r2, r5
 800da26:	bf0c      	ite	eq
 800da28:	2300      	moveq	r3, #0
 800da2a:	f003 0301 	andne.w	r3, r3, #1
 800da2e:	f5a5 4518 	sub.w	r5, r5, #38912	; 0x9800
 800da32:	4282      	cmp	r2, r0
 800da34:	bf0c      	ite	eq
 800da36:	2300      	moveq	r3, #0
 800da38:	f003 0301 	andne.w	r3, r3, #1
 800da3c:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
 800da40:	428a      	cmp	r2, r1
 800da42:	bf0c      	ite	eq
 800da44:	2300      	moveq	r3, #0
 800da46:	f003 0301 	andne.w	r3, r3, #1
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800da4a:	69a1      	ldr	r1, [r4, #24]
 800da4c:	42aa      	cmp	r2, r5
 800da4e:	bf0c      	ite	eq
 800da50:	2300      	moveq	r3, #0
 800da52:	f003 0301 	andne.w	r3, r3, #1
 800da56:	4282      	cmp	r2, r0
 800da58:	bf0c      	ite	eq
 800da5a:	2300      	moveq	r3, #0
 800da5c:	f003 0301 	andne.w	r3, r3, #1
 800da60:	bb19      	cbnz	r1, 800daaa <HAL_UART_Init+0xb6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800da62:	2b00      	cmp	r3, #0
 800da64:	d137      	bne.n	800dad6 <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800da66:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800da68:	b34b      	cbz	r3, 800dabe <HAL_UART_Init+0xca>
  __HAL_UART_DISABLE(huart);
 800da6a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800da6c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da6e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800da70:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	f023 0301 	bic.w	r3, r3, #1
 800da78:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da7a:	f7ff fc23 	bl	800d2c4 <UART_SetConfig>
 800da7e:	2801      	cmp	r0, #1
 800da80:	d01b      	beq.n	800daba <HAL_UART_Init+0xc6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da84:	bb0b      	cbnz	r3, 800daca <HAL_UART_Init+0xd6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da86:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800da88:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da8a:	685a      	ldr	r2, [r3, #4]
 800da8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da92:	689a      	ldr	r2, [r3, #8]
 800da94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da98:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	f042 0201 	orr.w	r2, r2, #1
 800daa0:	601a      	str	r2, [r3, #0]
}
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800daa6:	f7ff bf81 	b.w	800d9ac <UART_CheckIdleState>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0db      	beq.n	800da66 <HAL_UART_Init+0x72>
 800daae:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800dab2:	4810      	ldr	r0, [pc, #64]	; (800daf4 <HAL_UART_Init+0x100>)
 800dab4:	f7f4 fce0 	bl	8002478 <assert_failed>
 800dab8:	e7d5      	b.n	800da66 <HAL_UART_Init+0x72>
}
 800daba:	2001      	movs	r0, #1
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800dabe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800dac2:	4620      	mov	r0, r4
 800dac4:	f7f5 feba 	bl	800383c <HAL_UART_MspInit>
 800dac8:	e7cf      	b.n	800da6a <HAL_UART_Init+0x76>
    UART_AdvFeatureConfig(huart);
 800daca:	4620      	mov	r0, r4
 800dacc:	f7ff fde8 	bl	800d6a0 <UART_AdvFeatureConfig>
 800dad0:	e7d9      	b.n	800da86 <HAL_UART_Init+0x92>
}
 800dad2:	2001      	movs	r0, #1
 800dad4:	4770      	bx	lr
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800dad6:	f240 112f 	movw	r1, #303	; 0x12f
 800dada:	4806      	ldr	r0, [pc, #24]	; (800daf4 <HAL_UART_Init+0x100>)
 800dadc:	f7f4 fccc 	bl	8002478 <assert_failed>
 800dae0:	e7c1      	b.n	800da66 <HAL_UART_Init+0x72>
 800dae2:	bf00      	nop
 800dae4:	40004c00 	.word	0x40004c00
 800dae8:	40011400 	.word	0x40011400
 800daec:	40005000 	.word	0x40005000
 800daf0:	40011000 	.word	0x40011000
 800daf4:	08021758 	.word	0x08021758

0800daf8 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d04d      	beq.n	800db98 <HAL_MultiProcessor_Init+0xa0>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800dafc:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	4604      	mov	r4, r0
 800db04:	4615      	mov	r5, r2
 800db06:	460e      	mov	r6, r1
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800db08:	d130      	bne.n	800db6c <HAL_MultiProcessor_Init+0x74>
  if (huart->gState == HAL_UART_STATE_RESET)
 800db0a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800db0c:	b343      	cbz	r3, 800db60 <HAL_MultiProcessor_Init+0x68>
  __HAL_UART_DISABLE(huart);
 800db0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800db10:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db12:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800db14:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800db16:	6813      	ldr	r3, [r2, #0]
 800db18:	f023 0301 	bic.w	r3, r3, #1
 800db1c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db1e:	f7ff fbd1 	bl	800d2c4 <UART_SetConfig>
 800db22:	2801      	cmp	r0, #1
 800db24:	d02b      	beq.n	800db7e <HAL_MultiProcessor_Init+0x86>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d131      	bne.n	800db90 <HAL_MultiProcessor_Init+0x98>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db2c:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800db2e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db3a:	689a      	ldr	r2, [r3, #8]
 800db3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db40:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800db42:	d01e      	beq.n	800db82 <HAL_MultiProcessor_Init+0x8a>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800db44:	6819      	ldr	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800db46:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800db48:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800db4c:	4329      	orrs	r1, r5
 800db4e:	6019      	str	r1, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	f042 0201 	orr.w	r2, r2, #1
}
 800db56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800db5a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800db5c:	f7ff bf26 	b.w	800d9ac <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800db60:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800db64:	4620      	mov	r0, r4
 800db66:	f7f5 fe69 	bl	800383c <HAL_UART_MspInit>
 800db6a:	e7d0      	b.n	800db0e <HAL_MultiProcessor_Init+0x16>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800db6c:	f240 2121 	movw	r1, #545	; 0x221
 800db70:	480a      	ldr	r0, [pc, #40]	; (800db9c <HAL_MultiProcessor_Init+0xa4>)
 800db72:	f7f4 fc81 	bl	8002478 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800db76:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1c8      	bne.n	800db0e <HAL_MultiProcessor_Init+0x16>
 800db7c:	e7f0      	b.n	800db60 <HAL_MultiProcessor_Init+0x68>
}
 800db7e:	2001      	movs	r0, #1
 800db80:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800db82:	6859      	ldr	r1, [r3, #4]
 800db84:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800db88:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800db8c:	605e      	str	r6, [r3, #4]
 800db8e:	e7d9      	b.n	800db44 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800db90:	4620      	mov	r0, r4
 800db92:	f7ff fd85 	bl	800d6a0 <UART_AdvFeatureConfig>
 800db96:	e7c9      	b.n	800db2c <HAL_MultiProcessor_Init+0x34>
}
 800db98:	2001      	movs	r0, #1
 800db9a:	4770      	bx	lr
 800db9c:	08021758 	.word	0x08021758

0800dba0 <HAL_RS485Ex_Init>:
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f000 8092 	beq.w	800dcca <HAL_RS485Ex_Init+0x12a>
{
 800dba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800dbaa:	4c4b      	ldr	r4, [pc, #300]	; (800dcd8 <HAL_RS485Ex_Init+0x138>)
 800dbac:	461d      	mov	r5, r3
 800dbae:	460e      	mov	r6, r1
 800dbb0:	6803      	ldr	r3, [r0, #0]
 800dbb2:	494a      	ldr	r1, [pc, #296]	; (800dcdc <HAL_RS485Ex_Init+0x13c>)
 800dbb4:	4617      	mov	r7, r2
 800dbb6:	4a4a      	ldr	r2, [pc, #296]	; (800dce0 <HAL_RS485Ex_Init+0x140>)
 800dbb8:	4680      	mov	r8, r0
 800dbba:	42a3      	cmp	r3, r4
 800dbbc:	bf18      	it	ne
 800dbbe:	428b      	cmpne	r3, r1
 800dbc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbc4:	bf14      	ite	ne
 800dbc6:	2401      	movne	r4, #1
 800dbc8:	2400      	moveq	r4, #0
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	bf0c      	ite	eq
 800dbce:	2400      	moveq	r4, #0
 800dbd0:	f004 0401 	andne.w	r4, r4, #1
 800dbd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbd8:	428b      	cmp	r3, r1
 800dbda:	bf0c      	ite	eq
 800dbdc:	2400      	moveq	r4, #0
 800dbde:	f004 0401 	andne.w	r4, r4, #1
 800dbe2:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	bf0c      	ite	eq
 800dbea:	2400      	moveq	r4, #0
 800dbec:	f004 0401 	andne.w	r4, r4, #1
 800dbf0:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf0c      	ite	eq
 800dbf8:	2400      	moveq	r4, #0
 800dbfa:	f004 0401 	andne.w	r4, r4, #1
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	bf0c      	ite	eq
 800dc02:	2400      	moveq	r4, #0
 800dc04:	f004 0401 	andne.w	r4, r4, #1
 800dc08:	b11c      	cbz	r4, 800dc12 <HAL_RS485Ex_Init+0x72>
 800dc0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d15d      	bne.n	800dcce <HAL_RS485Ex_Init+0x12e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800dc12:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800dc16:	d14a      	bne.n	800dcae <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800dc18:	2f1f      	cmp	r7, #31
 800dc1a:	d841      	bhi.n	800dca0 <HAL_RS485Ex_Init+0x100>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dc1c:	2d1f      	cmp	r5, #31
 800dc1e:	d836      	bhi.n	800dc8e <HAL_RS485Ex_Init+0xee>

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc20:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800dc24:	b36b      	cbz	r3, 800dc82 <HAL_RS485Ex_Init+0xe2>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dc26:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800dc2a:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc2c:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800dc2e:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800dc32:	6813      	ldr	r3, [r2, #0]
 800dc34:	f023 0301 	bic.w	r3, r3, #1
 800dc38:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc3a:	f7ff fb43 	bl	800d2c4 <UART_SetConfig>
 800dc3e:	2801      	cmp	r0, #1
 800dc40:	d03c      	beq.n	800dcbc <HAL_RS485Ex_Init+0x11c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc42:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d13b      	bne.n	800dcc2 <HAL_RS485Ex_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dc4a:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dc4e:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dc50:	4a24      	ldr	r2, [pc, #144]	; (800dce4 <HAL_RS485Ex_Init+0x144>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc52:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dc54:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dc56:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dc5a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800dc5e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800dc60:	6899      	ldr	r1, [r3, #8]
 800dc62:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800dc66:	430e      	orrs	r6, r1
 800dc68:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dc6a:	6819      	ldr	r1, [r3, #0]
 800dc6c:	400a      	ands	r2, r1
 800dc6e:	4317      	orrs	r7, r2
 800dc70:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	f042 0201 	orr.w	r2, r2, #1
}
 800dc78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800dc7c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800dc7e:	f7ff be95 	b.w	800d9ac <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800dc82:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800dc86:	4640      	mov	r0, r8
 800dc88:	f7f5 fdd8 	bl	800383c <HAL_UART_MspInit>
 800dc8c:	e7cb      	b.n	800dc26 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dc8e:	21a6      	movs	r1, #166	; 0xa6
 800dc90:	4815      	ldr	r0, [pc, #84]	; (800dce8 <HAL_RS485Ex_Init+0x148>)
 800dc92:	f7f4 fbf1 	bl	8002478 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800dc96:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1c3      	bne.n	800dc26 <HAL_RS485Ex_Init+0x86>
 800dc9e:	e7f0      	b.n	800dc82 <HAL_RS485Ex_Init+0xe2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800dca0:	21a3      	movs	r1, #163	; 0xa3
 800dca2:	4811      	ldr	r0, [pc, #68]	; (800dce8 <HAL_RS485Ex_Init+0x148>)
 800dca4:	f7f4 fbe8 	bl	8002478 <assert_failed>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800dca8:	2d1f      	cmp	r5, #31
 800dcaa:	d9b9      	bls.n	800dc20 <HAL_RS485Ex_Init+0x80>
 800dcac:	e7ef      	b.n	800dc8e <HAL_RS485Ex_Init+0xee>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800dcae:	21a0      	movs	r1, #160	; 0xa0
 800dcb0:	480d      	ldr	r0, [pc, #52]	; (800dce8 <HAL_RS485Ex_Init+0x148>)
 800dcb2:	f7f4 fbe1 	bl	8002478 <assert_failed>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800dcb6:	2f1f      	cmp	r7, #31
 800dcb8:	d9b0      	bls.n	800dc1c <HAL_RS485Ex_Init+0x7c>
 800dcba:	e7f1      	b.n	800dca0 <HAL_RS485Ex_Init+0x100>
}
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_AdvFeatureConfig(huart);
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	f7ff fcec 	bl	800d6a0 <UART_AdvFeatureConfig>
 800dcc8:	e7bf      	b.n	800dc4a <HAL_RS485Ex_Init+0xaa>
}
 800dcca:	2001      	movs	r0, #1
 800dccc:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800dcce:	219d      	movs	r1, #157	; 0x9d
 800dcd0:	4805      	ldr	r0, [pc, #20]	; (800dce8 <HAL_RS485Ex_Init+0x148>)
 800dcd2:	f7f4 fbd1 	bl	8002478 <assert_failed>
 800dcd6:	e79c      	b.n	800dc12 <HAL_RS485Ex_Init+0x72>
 800dcd8:	40011000 	.word	0x40011000
 800dcdc:	40004400 	.word	0x40004400
 800dce0:	40004800 	.word	0x40004800
 800dce4:	fc00ffff 	.word	0xfc00ffff
 800dce8:	08021794 	.word	0x08021794

0800dcec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dcec:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <USB_CoreReset+0x30>)
 800dcee:	e001      	b.n	800dcf4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	d010      	beq.n	800dd16 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcf4:	6902      	ldr	r2, [r0, #16]
 800dcf6:	2a00      	cmp	r2, #0
 800dcf8:	dafa      	bge.n	800dcf0 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dcfa:	6903      	ldr	r3, [r0, #16]
 800dcfc:	4a07      	ldr	r2, [pc, #28]	; (800dd1c <USB_CoreReset+0x30>)
 800dcfe:	f043 0301 	orr.w	r3, r3, #1
 800dd02:	6103      	str	r3, [r0, #16]
 800dd04:	e001      	b.n	800dd0a <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800dd06:	3a01      	subs	r2, #1
 800dd08:	d005      	beq.n	800dd16 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dd0a:	6903      	ldr	r3, [r0, #16]
 800dd0c:	f013 0301 	ands.w	r3, r3, #1
 800dd10:	d1f9      	bne.n	800dd06 <USB_CoreReset+0x1a>

  return HAL_OK;
 800dd12:	4618      	mov	r0, r3
}
 800dd14:	4770      	bx	lr
      return HAL_TIMEOUT;
 800dd16:	2003      	movs	r0, #3
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	00030d40 	.word	0x00030d40

0800dd20 <USB_CoreInit>:
{
 800dd20:	b084      	sub	sp, #16
 800dd22:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800dd26:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd28:	2d01      	cmp	r5, #1
{
 800dd2a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800dd2e:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd30:	d121      	bne.n	800dd76 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd32:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd34:	4b18      	ldr	r3, [pc, #96]	; (800dd98 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800dd3a:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd3c:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800dd3e:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd40:	68ca      	ldr	r2, [r1, #12]
 800dd42:	ea03 0302 	and.w	r3, r3, r2
 800dd46:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd48:	68cb      	ldr	r3, [r1, #12]
 800dd4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800dd4e:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 800dd50:	d01c      	beq.n	800dd8c <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800dd52:	4608      	mov	r0, r1
 800dd54:	f7ff ffca 	bl	800dcec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800dd58:	9b08      	ldr	r3, [sp, #32]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d107      	bne.n	800dd6e <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd5e:	688b      	ldr	r3, [r1, #8]
 800dd60:	f043 0306 	orr.w	r3, r3, #6
 800dd64:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd66:	688b      	ldr	r3, [r1, #8]
 800dd68:	f043 0320 	orr.w	r3, r3, #32
 800dd6c:	608b      	str	r3, [r1, #8]
}
 800dd6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd72:	b004      	add	sp, #16
 800dd74:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd76:	68c3      	ldr	r3, [r0, #12]
 800dd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd7c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800dd7e:	f7ff ffb5 	bl	800dcec <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd82:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800dd84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd88:	638b      	str	r3, [r1, #56]	; 0x38
 800dd8a:	e7e5      	b.n	800dd58 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd8c:	68cb      	ldr	r3, [r1, #12]
 800dd8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd92:	60cb      	str	r3, [r1, #12]
 800dd94:	e7dd      	b.n	800dd52 <USB_CoreInit+0x32>
 800dd96:	bf00      	nop
 800dd98:	ffbdffbf 	.word	0xffbdffbf

0800dd9c <USB_SetTurnaroundTime>:
  if (speed == USB_OTG_SPEED_FULL)
 800dd9c:	2a03      	cmp	r2, #3
{
 800dd9e:	4603      	mov	r3, r0
 800dda0:	b410      	push	{r4}
  if (speed == USB_OTG_SPEED_FULL)
 800dda2:	d00c      	beq.n	800ddbe <USB_SetTurnaroundTime+0x22>
 800dda4:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dda8:	68d9      	ldr	r1, [r3, #12]
}
 800ddaa:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ddac:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800ddb0:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ddb2:	68da      	ldr	r2, [r3, #12]
 800ddb4:	4322      	orrs	r2, r4
}
 800ddb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ddba:	60da      	str	r2, [r3, #12]
}
 800ddbc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ddbe:	4a29      	ldr	r2, [pc, #164]	; (800de64 <USB_SetTurnaroundTime+0xc8>)
 800ddc0:	4829      	ldr	r0, [pc, #164]	; (800de68 <USB_SetTurnaroundTime+0xcc>)
 800ddc2:	440a      	add	r2, r1
 800ddc4:	4282      	cmp	r2, r0
 800ddc6:	d93a      	bls.n	800de3e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ddc8:	4a28      	ldr	r2, [pc, #160]	; (800de6c <USB_SetTurnaroundTime+0xd0>)
 800ddca:	4829      	ldr	r0, [pc, #164]	; (800de70 <USB_SetTurnaroundTime+0xd4>)
 800ddcc:	440a      	add	r2, r1
 800ddce:	4282      	cmp	r2, r0
 800ddd0:	d932      	bls.n	800de38 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ddd2:	4a28      	ldr	r2, [pc, #160]	; (800de74 <USB_SetTurnaroundTime+0xd8>)
 800ddd4:	4828      	ldr	r0, [pc, #160]	; (800de78 <USB_SetTurnaroundTime+0xdc>)
 800ddd6:	440a      	add	r2, r1
 800ddd8:	4282      	cmp	r2, r0
 800ddda:	d933      	bls.n	800de44 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dddc:	4a27      	ldr	r2, [pc, #156]	; (800de7c <USB_SetTurnaroundTime+0xe0>)
 800ddde:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 800dde2:	440a      	add	r2, r1
 800dde4:	30a0      	adds	r0, #160	; 0xa0
 800dde6:	4282      	cmp	r2, r0
 800dde8:	d92f      	bls.n	800de4a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ddea:	4a25      	ldr	r2, [pc, #148]	; (800de80 <USB_SetTurnaroundTime+0xe4>)
 800ddec:	4825      	ldr	r0, [pc, #148]	; (800de84 <USB_SetTurnaroundTime+0xe8>)
 800ddee:	440a      	add	r2, r1
 800ddf0:	4282      	cmp	r2, r0
 800ddf2:	d92d      	bls.n	800de50 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ddf4:	4a24      	ldr	r2, [pc, #144]	; (800de88 <USB_SetTurnaroundTime+0xec>)
 800ddf6:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 800de00:	4282      	cmp	r2, r0
 800de02:	d928      	bls.n	800de56 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de04:	4a21      	ldr	r2, [pc, #132]	; (800de8c <USB_SetTurnaroundTime+0xf0>)
 800de06:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800de0a:	440a      	add	r2, r1
 800de0c:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800de10:	4282      	cmp	r2, r0
 800de12:	d9c7      	bls.n	800dda4 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de14:	4a1e      	ldr	r2, [pc, #120]	; (800de90 <USB_SetTurnaroundTime+0xf4>)
 800de16:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800de1a:	440a      	add	r2, r1
 800de1c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800de20:	4282      	cmp	r2, r0
 800de22:	d91b      	bls.n	800de5c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de24:	4a1b      	ldr	r2, [pc, #108]	; (800de94 <USB_SetTurnaroundTime+0xf8>)
 800de26:	4c1c      	ldr	r4, [pc, #112]	; (800de98 <USB_SetTurnaroundTime+0xfc>)
 800de28:	440a      	add	r2, r1
 800de2a:	42a2      	cmp	r2, r4
 800de2c:	bf8c      	ite	hi
 800de2e:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 800de32:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 800de36:	e7b7      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de38:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800de3c:	e7b4      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de3e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800de42:	e7b1      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de44:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800de48:	e7ae      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de4a:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800de4e:	e7ab      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de50:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800de54:	e7a8      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de56:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800de5a:	e7a5      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de5c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800de60:	e7a2      	b.n	800dda8 <USB_SetTurnaroundTime+0xc>
 800de62:	bf00      	nop
 800de64:	ff275340 	.word	0xff275340
 800de68:	000c34ff 	.word	0x000c34ff
 800de6c:	ff1b1e40 	.word	0xff1b1e40
 800de70:	000f423f 	.word	0x000f423f
 800de74:	ff0bdc00 	.word	0xff0bdc00
 800de78:	00124f7f 	.word	0x00124f7f
 800de7c:	fef98c80 	.word	0xfef98c80
 800de80:	fee5b660 	.word	0xfee5b660
 800de84:	0016e35f 	.word	0x0016e35f
 800de88:	feced300 	.word	0xfeced300
 800de8c:	feb35bc0 	.word	0xfeb35bc0
 800de90:	fe91ca00 	.word	0xfe91ca00
 800de94:	fe5954e0 	.word	0xfe5954e0
 800de98:	00419cdf 	.word	0x00419cdf

0800de9c <USB_EnableGlobalInt>:
{
 800de9c:	4602      	mov	r2, r0
}
 800de9e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dea0:	6893      	ldr	r3, [r2, #8]
 800dea2:	f043 0301 	orr.w	r3, r3, #1
 800dea6:	6093      	str	r3, [r2, #8]
}
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop

0800deac <USB_DisableGlobalInt>:
{
 800deac:	4602      	mov	r2, r0
}
 800deae:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800deb0:	6893      	ldr	r3, [r2, #8]
 800deb2:	f023 0301 	bic.w	r3, r3, #1
 800deb6:	6093      	str	r3, [r2, #8]
}
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop

0800debc <USB_SetCurrentMode>:
{
 800debc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800debe:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dec0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dec2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dec6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800dec8:	d00b      	beq.n	800dee2 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800deca:	b941      	cbnz	r1, 800dede <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800decc:	68c3      	ldr	r3, [r0, #12]
 800dece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ded2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800ded4:	2032      	movs	r0, #50	; 0x32
 800ded6:	f7f6 fc97 	bl	8004808 <HAL_Delay>
  return HAL_OK;
 800deda:	2000      	movs	r0, #0
}
 800dedc:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800dede:	2001      	movs	r0, #1
}
 800dee0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dee2:	68c3      	ldr	r3, [r0, #12]
 800dee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dee8:	60c3      	str	r3, [r0, #12]
 800deea:	e7f3      	b.n	800ded4 <USB_SetCurrentMode+0x18>

0800deec <USB_DevInit>:
{
 800deec:	b084      	sub	sp, #16
 800deee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (i = 0U; i < 15U; i++)
 800def2:	2400      	movs	r4, #0
{
 800def4:	af09      	add	r7, sp, #36	; 0x24
 800def6:	4605      	mov	r5, r0
 800def8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800defa:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 800defe:	4620      	mov	r0, r4
{
 800df00:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800df04:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800df06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    USBx->DIEPTXF[i] = 0U;
 800df0a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800df0e:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 800df10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800df14:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800df16:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df18:	d1f7      	bne.n	800df0a <USB_DevInit+0x1e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800df1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800df1c:	2900      	cmp	r1, #0
 800df1e:	f040 80a1 	bne.w	800e064 <USB_DevInit+0x178>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800df22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df26:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df2e:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800df30:	682b      	ldr	r3, [r5, #0]
 800df32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df36:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800df38:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df3a:	f1bc 0f01 	cmp.w	ip, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800df3e:	f505 6400 	add.w	r4, r5, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 800df42:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800df46:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800df4a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 800df4e:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df52:	d03e      	beq.n	800dfd2 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800df54:	f1bc 0f03 	cmp.w	ip, #3
 800df58:	d03b      	beq.n	800dfd2 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 800df5a:	f043 0303 	orr.w	r3, r3, #3
 800df5e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df62:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800df66:	4b4c      	ldr	r3, [pc, #304]	; (800e098 <USB_DevInit+0x1ac>)
 800df68:	612a      	str	r2, [r5, #16]
 800df6a:	e002      	b.n	800df72 <USB_DevInit+0x86>
    if (++count > 200000U)
 800df6c:	3b01      	subs	r3, #1
 800df6e:	f000 808b 	beq.w	800e088 <USB_DevInit+0x19c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df72:	6928      	ldr	r0, [r5, #16]
 800df74:	f010 0020 	ands.w	r0, r0, #32
 800df78:	d1f8      	bne.n	800df6c <USB_DevInit+0x80>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df7a:	2210      	movs	r2, #16
 800df7c:	4b46      	ldr	r3, [pc, #280]	; (800e098 <USB_DevInit+0x1ac>)
 800df7e:	612a      	str	r2, [r5, #16]
 800df80:	e001      	b.n	800df86 <USB_DevInit+0x9a>
    if (++count > 200000U)
 800df82:	3b01      	subs	r3, #1
 800df84:	d07e      	beq.n	800e084 <USB_DevInit+0x198>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df86:	692a      	ldr	r2, [r5, #16]
 800df88:	06d2      	lsls	r2, r2, #27
 800df8a:	d4fa      	bmi.n	800df82 <USB_DevInit+0x96>
  USBx_DEVICE->DIEPMSK = 0U;
 800df8c:	2200      	movs	r2, #0
 800df8e:	6122      	str	r2, [r4, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800df90:	6162      	str	r2, [r4, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df92:	61e2      	str	r2, [r4, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df94:	b327      	cbz	r7, 800dfe0 <USB_DevInit+0xf4>
 800df96:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df9a:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df9e:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800dfa2:	4696      	mov	lr, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dfa4:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800dfa8:	e009      	b.n	800dfbe <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 800dfaa:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfae:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dfb0:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dfb4:	f8c3 8008 	str.w	r8, [r3, #8]
 800dfb8:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfba:	42ba      	cmp	r2, r7
 800dfbc:	d034      	beq.n	800e028 <USB_DevInit+0x13c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dfbe:	f8d3 c000 	ldr.w	ip, [r3]
 800dfc2:	f1bc 0f00 	cmp.w	ip, #0
 800dfc6:	daf0      	bge.n	800dfaa <USB_DevInit+0xbe>
      if (i == 0U)
 800dfc8:	2a00      	cmp	r2, #0
 800dfca:	d05f      	beq.n	800e08c <USB_DevInit+0x1a0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dfcc:	f8c3 9000 	str.w	r9, [r3]
 800dfd0:	e7ed      	b.n	800dfae <USB_DevInit+0xc2>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800dfd2:	2a00      	cmp	r2, #0
 800dfd4:	d0c3      	beq.n	800df5e <USB_DevInit+0x72>
  USBx_DEVICE->DCFG |= speed;
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800dfde:	e7c0      	b.n	800df62 <USB_DevInit+0x76>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dfe0:	6923      	ldr	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 800dfe2:	2e01      	cmp	r6, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dfe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfe8:	6123      	str	r3, [r4, #16]
  if (cfg.dma_enable == 1U)
 800dfea:	d03f      	beq.n	800e06c <USB_DevInit+0x180>
  USBx->GINTMSK = 0U;
 800dfec:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dfee:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800dff2:	61aa      	str	r2, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dff4:	616b      	str	r3, [r5, #20]
  if (cfg.dma_enable == 0U)
 800dff6:	b91e      	cbnz	r6, 800e000 <USB_DevInit+0x114>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dff8:	69ab      	ldr	r3, [r5, #24]
 800dffa:	f043 0310 	orr.w	r3, r3, #16
 800dffe:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e000:	69ac      	ldr	r4, [r5, #24]
 800e002:	4b26      	ldr	r3, [pc, #152]	; (800e09c <USB_DevInit+0x1b0>)
  if (cfg.Sof_enable != 0U)
 800e004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e006:	4323      	orrs	r3, r4
 800e008:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800e00a:	b11a      	cbz	r2, 800e014 <USB_DevInit+0x128>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e00c:	69ab      	ldr	r3, [r5, #24]
 800e00e:	f043 0308 	orr.w	r3, r3, #8
 800e012:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800e014:	2901      	cmp	r1, #1
 800e016:	d103      	bne.n	800e020 <USB_DevInit+0x134>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e018:	69aa      	ldr	r2, [r5, #24]
 800e01a:	4b21      	ldr	r3, [pc, #132]	; (800e0a0 <USB_DevInit+0x1b4>)
 800e01c:	4313      	orrs	r3, r2
 800e01e:	61ab      	str	r3, [r5, #24]
}
 800e020:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e024:	b004      	add	sp, #16
 800e026:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e028:	2700      	movs	r7, #0
 800e02a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e02e:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e032:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e036:	46be      	mov	lr, r7
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e038:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800e03c:	e009      	b.n	800e052 <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e03e:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e042:	3701      	adds	r7, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e044:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e048:	f8c3 8008 	str.w	r8, [r3, #8]
 800e04c:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e04e:	4297      	cmp	r7, r2
 800e050:	d0c6      	beq.n	800dfe0 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e052:	f8d3 c000 	ldr.w	ip, [r3]
 800e056:	f1bc 0f00 	cmp.w	ip, #0
 800e05a:	daf0      	bge.n	800e03e <USB_DevInit+0x152>
      if (i == 0U)
 800e05c:	b1cf      	cbz	r7, 800e092 <USB_DevInit+0x1a6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e05e:	f8c3 9000 	str.w	r9, [r3]
 800e062:	e7ee      	b.n	800e042 <USB_DevInit+0x156>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e068:	63ab      	str	r3, [r5, #56]	; 0x38
 800e06a:	e765      	b.n	800df38 <USB_DevInit+0x4c>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e06c:	4a0d      	ldr	r2, [pc, #52]	; (800e0a4 <USB_DevInit+0x1b8>)
  USBx->GINTMSK = 0U;
 800e06e:	2600      	movs	r6, #0
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e070:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <USB_DevInit+0x1bc>)
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e072:	6322      	str	r2, [r4, #48]	; 0x30
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e074:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e078:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800e07a:	433b      	orrs	r3, r7
 800e07c:	6323      	str	r3, [r4, #48]	; 0x30
  USBx->GINTMSK = 0U;
 800e07e:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e080:	616a      	str	r2, [r5, #20]
 800e082:	e7bd      	b.n	800e000 <USB_DevInit+0x114>
    ret = HAL_ERROR;
 800e084:	2001      	movs	r0, #1
 800e086:	e781      	b.n	800df8c <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 800e088:	2001      	movs	r0, #1
 800e08a:	e776      	b.n	800df7a <USB_DevInit+0x8e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e08c:	f8c3 a000 	str.w	sl, [r3]
 800e090:	e78d      	b.n	800dfae <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e092:	f8c3 a000 	str.w	sl, [r3]
 800e096:	e7d4      	b.n	800e042 <USB_DevInit+0x156>
 800e098:	00030d40 	.word	0x00030d40
 800e09c:	803c3800 	.word	0x803c3800
 800e0a0:	40000004 	.word	0x40000004
 800e0a4:	00800100 	.word	0x00800100
 800e0a8:	00010003 	.word	0x00010003

0800e0ac <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e0ac:	0189      	lsls	r1, r1, #6
 800e0ae:	4a07      	ldr	r2, [pc, #28]	; (800e0cc <USB_FlushTxFifo+0x20>)
 800e0b0:	f041 0120 	orr.w	r1, r1, #32
 800e0b4:	6101      	str	r1, [r0, #16]
 800e0b6:	e001      	b.n	800e0bc <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 800e0b8:	3a01      	subs	r2, #1
 800e0ba:	d005      	beq.n	800e0c8 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e0bc:	6903      	ldr	r3, [r0, #16]
 800e0be:	f013 0320 	ands.w	r3, r3, #32
 800e0c2:	d1f9      	bne.n	800e0b8 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	4770      	bx	lr
      return HAL_TIMEOUT;
 800e0c8:	2003      	movs	r0, #3
}
 800e0ca:	4770      	bx	lr
 800e0cc:	00030d40 	.word	0x00030d40

0800e0d0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e0d0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e0d4:	f013 0006 	ands.w	r0, r3, #6
 800e0d8:	d004      	beq.n	800e0e4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e0da:	f013 0f02 	tst.w	r3, #2
    speed = USB_OTG_SPEED_FULL;
 800e0de:	bf0c      	ite	eq
 800e0e0:	2000      	moveq	r0, #0
 800e0e2:	2003      	movne	r0, #3
}
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop

0800e0e8 <USB_ActivateEndpoint>:
{
 800e0e8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800e0ea:	780a      	ldrb	r2, [r1, #0]
 800e0ec:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800e0ee:	784d      	ldrb	r5, [r1, #1]
 800e0f0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800e0f4:	f002 060f 	and.w	r6, r2, #15
 800e0f8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e0fc:	2d01      	cmp	r5, #1
 800e0fe:	fa03 f306 	lsl.w	r3, r3, r6
 800e102:	d017      	beq.n	800e134 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e104:	69e2      	ldr	r2, [r4, #28]
 800e106:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800e10a:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e10c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e110:	041b      	lsls	r3, r3, #16
 800e112:	d40c      	bmi.n	800e12e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e114:	688a      	ldr	r2, [r1, #8]
 800e116:	4b14      	ldr	r3, [pc, #80]	; (800e168 <USB_ActivateEndpoint+0x80>)
 800e118:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e11c:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e11e:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 800e122:	4313      	orrs	r3, r2
 800e124:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800e128:	430b      	orrs	r3, r1
 800e12a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e12e:	2000      	movs	r0, #0
 800e130:	bc70      	pop	{r4, r5, r6}
 800e132:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e134:	69e5      	ldr	r5, [r4, #28]
 800e136:	432b      	orrs	r3, r5
 800e138:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e13a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e13e:	041c      	lsls	r4, r3, #16
 800e140:	d4f5      	bmi.n	800e12e <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e142:	688c      	ldr	r4, [r1, #8]
 800e144:	4b08      	ldr	r3, [pc, #32]	; (800e168 <USB_ActivateEndpoint+0x80>)
 800e146:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e14a:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e14c:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800e150:	4323      	orrs	r3, r4
 800e152:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800e156:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800e15a:	430a      	orrs	r2, r1
}
 800e15c:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e15e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800e162:	2000      	movs	r0, #0
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	10008000 	.word	0x10008000

0800e16c <USB_DeactivateEndpoint>:
{
 800e16c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800e16e:	780c      	ldrb	r4, [r1, #0]
 800e170:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800e172:	7849      	ldrb	r1, [r1, #1]
 800e174:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800e178:	f004 050f 	and.w	r5, r4, #15
 800e17c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800e180:	2901      	cmp	r1, #1
 800e182:	fa03 f305 	lsl.w	r3, r3, r5
 800e186:	d010      	beq.n	800e1aa <USB_DeactivateEndpoint+0x3e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e188:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e18a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e18e:	490f      	ldr	r1, [pc, #60]	; (800e1cc <USB_DeactivateEndpoint+0x60>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e190:	401c      	ands	r4, r3
 800e192:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e194:	69d4      	ldr	r4, [r2, #28]
 800e196:	4023      	ands	r3, r4
 800e198:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e19a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e19e:	4019      	ands	r1, r3
}
 800e1a0:	bc30      	pop	{r4, r5}
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e1a2:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
}
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 800e1ac:	43db      	mvns	r3, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e1ae:	4908      	ldr	r1, [pc, #32]	; (800e1d0 <USB_DeactivateEndpoint+0x64>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1b0:	401c      	ands	r4, r3
 800e1b2:	63d4      	str	r4, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1b4:	69d4      	ldr	r4, [r2, #28]
 800e1b6:	4023      	ands	r3, r4
 800e1b8:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e1ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e1be:	4019      	ands	r1, r3
}
 800e1c0:	bc30      	pop	{r4, r5}
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e1c2:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	eff37800 	.word	0xeff37800
 800e1d0:	ec337800 	.word	0xec337800

0800e1d4 <USB_EPStartXfer>:
{
 800e1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800e1d8:	784f      	ldrb	r7, [r1, #1]
 800e1da:	780b      	ldrb	r3, [r1, #0]
 800e1dc:	2f01      	cmp	r7, #1
 800e1de:	694c      	ldr	r4, [r1, #20]
 800e1e0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e1e4:	78ce      	ldrb	r6, [r1, #3]
 800e1e6:	d055      	beq.n	800e294 <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1e8:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 800e1ec:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 800e3c8 <USB_EPStartXfer+0x1f4>
 800e1f0:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1f4:	4d72      	ldr	r5, [pc, #456]	; (800e3c0 <USB_EPStartXfer+0x1ec>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1f6:	ea0c 0e0e 	and.w	lr, ip, lr
 800e1fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800e1fe:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e202:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800e206:	ea0e 0505 	and.w	r5, lr, r5
 800e20a:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 800e20c:	b38c      	cbz	r4, 800e272 <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e20e:	eb0c 0504 	add.w	r5, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e212:	4c6c      	ldr	r4, [pc, #432]	; (800e3c4 <USB_EPStartXfer+0x1f0>)
 800e214:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 800e218:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e21a:	f105 35ff 	add.w	r5, r5, #4294967295
 800e21e:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e222:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e226:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e228:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e22c:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e230:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e234:	693d      	ldr	r5, [r7, #16]
 800e236:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800e23a:	ea44 0405 	orr.w	r4, r4, r5
 800e23e:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800e240:	d023      	beq.n	800e28a <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800e242:	2e01      	cmp	r6, #1
 800e244:	d10c      	bne.n	800e260 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e246:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800e24a:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e24e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e252:	bf0c      	ite	eq
 800e254:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e258:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800e25c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e260:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800e264:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e268:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800e26c:	2000      	movs	r0, #0
 800e26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e272:	693d      	ldr	r5, [r7, #16]
 800e274:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 800e278:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e27a:	ea44 0405 	orr.w	r4, r4, r5
 800e27e:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e280:	693c      	ldr	r4, [r7, #16]
 800e282:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e286:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800e288:	d1db      	bne.n	800e242 <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800e28a:	68ca      	ldr	r2, [r1, #12]
 800e28c:	2a00      	cmp	r2, #0
 800e28e:	d0d8      	beq.n	800e242 <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e290:	617a      	str	r2, [r7, #20]
 800e292:	e7d6      	b.n	800e242 <USB_EPStartXfer+0x6e>
 800e294:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800e298:	2c00      	cmp	r4, #0
 800e29a:	d13e      	bne.n	800e31a <USB_EPStartXfer+0x146>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e29c:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 800e2a0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2a2:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800e3c0 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2a6:	4f48      	ldr	r7, [pc, #288]	; (800e3c8 <USB_EPStartXfer+0x1f4>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2a8:	ea0e 0c0c 	and.w	ip, lr, ip
 800e2ac:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2b0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e2b4:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800e2b8:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2bc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e2c0:	ea0c 0707 	and.w	r7, ip, r7
 800e2c4:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800e2c6:	d072      	beq.n	800e3ae <USB_EPStartXfer+0x1da>
    if (ep->type == EP_TYPE_ISOC)
 800e2c8:	2e01      	cmp	r6, #1
 800e2ca:	d15d      	bne.n	800e388 <USB_EPStartXfer+0x1b4>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2cc:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800e2d0:	f415 7f80 	tst.w	r5, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2d4:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800e2d8:	bf0c      	ite	eq
 800e2da:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e2de:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800e2e2:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2e6:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800e2ea:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800e2ee:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 800e2f2:	2a00      	cmp	r2, #0
 800e2f4:	d1ba      	bne.n	800e26c <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e2f6:	b2a2      	uxth	r2, r4
 800e2f8:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 800e2fa:	0892      	lsrs	r2, r2, #2
 800e2fc:	d0b6      	beq.n	800e26c <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e2fe:	780c      	ldrb	r4, [r1, #0]
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e300:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e302:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800e306:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e30a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800e30e:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800e312:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e314:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e316:	d1fa      	bne.n	800e30e <USB_EPStartXfer+0x13a>
 800e318:	e7a8      	b.n	800e26c <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e31a:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e31e:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e322:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e326:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e328:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e32c:	f8df a098 	ldr.w	sl, [pc, #152]	; 800e3c8 <USB_EPStartXfer+0x1f4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e330:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e334:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e338:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800e3c0 <USB_EPStartXfer+0x1ec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e33c:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e340:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e344:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e348:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e34c:	f8df e074 	ldr.w	lr, [pc, #116]	; 800e3c4 <USB_EPStartXfer+0x1f0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e350:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e354:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 800e358:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800e35c:	ea4e 0e08 	orr.w	lr, lr, r8
 800e360:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e364:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800e368:	ea4c 0c0e 	orr.w	ip, ip, lr
 800e36c:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e370:	d013      	beq.n	800e39a <USB_EPStartXfer+0x1c6>
    if (dma == 1U)
 800e372:	2a01      	cmp	r2, #1
 800e374:	d020      	beq.n	800e3b8 <USB_EPStartXfer+0x1e4>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e376:	780a      	ldrb	r2, [r1, #0]
 800e378:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 800e37c:	f002 020f 	and.w	r2, r2, #15
 800e380:	4097      	lsls	r7, r2
 800e382:	430f      	orrs	r7, r1
 800e384:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e388:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 800e38c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e38e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e392:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e39a:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 800e39c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e39e:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800e3a2:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e3a4:	692f      	ldr	r7, [r5, #16]
 800e3a6:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800e3aa:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800e3ac:	d18e      	bne.n	800e2cc <USB_EPStartXfer+0xf8>
      if ((uint32_t)ep->dma_addr != 0U)
 800e3ae:	690f      	ldr	r7, [r1, #16]
 800e3b0:	2f00      	cmp	r7, #0
 800e3b2:	d089      	beq.n	800e2c8 <USB_EPStartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e3b4:	616f      	str	r7, [r5, #20]
 800e3b6:	e787      	b.n	800e2c8 <USB_EPStartXfer+0xf4>
      if ((uint32_t)ep->dma_addr != 0U)
 800e3b8:	690f      	ldr	r7, [r1, #16]
 800e3ba:	2f00      	cmp	r7, #0
 800e3bc:	d1fa      	bne.n	800e3b4 <USB_EPStartXfer+0x1e0>
 800e3be:	e7e3      	b.n	800e388 <USB_EPStartXfer+0x1b4>
 800e3c0:	e007ffff 	.word	0xe007ffff
 800e3c4:	1ff80000 	.word	0x1ff80000
 800e3c8:	fff80000 	.word	0xfff80000

0800e3cc <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800e3cc:	784b      	ldrb	r3, [r1, #1]
{
 800e3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800e3d0:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 800e3d2:	780d      	ldrb	r5, [r1, #0]
 800e3d4:	694f      	ldr	r7, [r1, #20]
 800e3d6:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800e3da:	d025      	beq.n	800e428 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3dc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800e3e0:	4e3e      	ldr	r6, [pc, #248]	; (800e4dc <USB_EP0StartXfer+0x110>)
 800e3e2:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3e4:	4d3e      	ldr	r5, [pc, #248]	; (800e4e0 <USB_EP0StartXfer+0x114>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3e6:	4006      	ands	r6, r0
 800e3e8:	6888      	ldr	r0, [r1, #8]
 800e3ea:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3ec:	691e      	ldr	r6, [r3, #16]
 800e3ee:	4035      	ands	r5, r6
 800e3f0:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 800e3f2:	b107      	cbz	r7, 800e3f6 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800e3f4:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3f6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e3f8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800e3fc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3fe:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e402:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e404:	691d      	ldr	r5, [r3, #16]
 800e406:	ea40 0005 	orr.w	r0, r0, r5
 800e40a:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800e40c:	d007      	beq.n	800e41e <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e40e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
}
 800e412:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e418:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800e41e:	68ca      	ldr	r2, [r1, #12]
 800e420:	2a00      	cmp	r2, #0
 800e422:	d0f4      	beq.n	800e40e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e424:	615a      	str	r2, [r3, #20]
 800e426:	e7f2      	b.n	800e40e <USB_EP0StartXfer+0x42>
 800e428:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800e42c:	b39f      	cbz	r7, 800e496 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e42e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800e432:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800e4dc <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e436:	4e2a      	ldr	r6, [pc, #168]	; (800e4e0 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e438:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 800e43c:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e440:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e444:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e446:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800e44a:	ea0c 0606 	and.w	r6, ip, r6
 800e44e:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800e450:	d236      	bcs.n	800e4c0 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e452:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e454:	f3ce 0612 	ubfx	r6, lr, #0, #19
        ep->xfer_len = ep->maxpacket;
 800e458:	f8c1 e014 	str.w	lr, [r1, #20]
    if (dma == 1U)
 800e45c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e45e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800e462:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e464:	691f      	ldr	r7, [r3, #16]
 800e466:	ea46 0607 	orr.w	r6, r6, r7
 800e46a:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800e46c:	d023      	beq.n	800e4b6 <USB_EP0StartXfer+0xea>
      if (ep->xfer_len > 0U)
 800e46e:	f1be 0f00 	cmp.w	lr, #0
 800e472:	d008      	beq.n	800e486 <USB_EP0StartXfer+0xba>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e474:	f005 020f 	and.w	r2, r5, #15
 800e478:	2501      	movs	r5, #1
 800e47a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800e47e:	4095      	lsls	r5, r2
 800e480:	431d      	orrs	r5, r3
 800e482:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e486:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800e48a:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e48c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e490:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800e494:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e496:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 800e498:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e49a:	4d11      	ldr	r5, [pc, #68]	; (800e4e0 <USB_EP0StartXfer+0x114>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e49c:	480f      	ldr	r0, [pc, #60]	; (800e4dc <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e49e:	ea05 0506 	and.w	r5, r5, r6
 800e4a2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4a4:	691d      	ldr	r5, [r3, #16]
 800e4a6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e4aa:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4ac:	691d      	ldr	r5, [r3, #16]
 800e4ae:	ea00 0005 	and.w	r0, r0, r5
 800e4b2:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800e4b4:	d1e7      	bne.n	800e486 <USB_EP0StartXfer+0xba>
      if ((uint32_t)ep->dma_addr != 0U)
 800e4b6:	690a      	ldr	r2, [r1, #16]
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	d0e4      	beq.n	800e486 <USB_EP0StartXfer+0xba>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4bc:	615a      	str	r2, [r3, #20]
 800e4be:	e7e2      	b.n	800e486 <USB_EP0StartXfer+0xba>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4c0:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e4c2:	f3c7 0712 	ubfx	r7, r7, #0, #19
    if (dma == 1U)
 800e4c6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4c8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800e4cc:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e4ce:	691e      	ldr	r6, [r3, #16]
 800e4d0:	ea47 0706 	orr.w	r7, r7, r6
 800e4d4:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800e4d6:	d1cd      	bne.n	800e474 <USB_EP0StartXfer+0xa8>
 800e4d8:	e7ed      	b.n	800e4b6 <USB_EP0StartXfer+0xea>
 800e4da:	bf00      	nop
 800e4dc:	fff80000 	.word	0xfff80000
 800e4e0:	e007ffff 	.word	0xe007ffff

0800e4e4 <USB_WritePacket>:
{
 800e4e4:	b410      	push	{r4}
 800e4e6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800e4ea:	b96c      	cbnz	r4, 800e508 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e4ec:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800e4ee:	089b      	lsrs	r3, r3, #2
 800e4f0:	d00a      	beq.n	800e508 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e4f2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800e4f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e4fa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800e4fe:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800e502:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e504:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e506:	d1fa      	bne.n	800e4fe <USB_WritePacket+0x1a>
}
 800e508:	2000      	movs	r0, #0
 800e50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e510:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800e512:	0892      	lsrs	r2, r2, #2
 800e514:	d00c      	beq.n	800e530 <USB_ReadPacket+0x20>
{
 800e516:	b410      	push	{r4}
 800e518:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800e51c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800e526:	4281      	cmp	r1, r0
 800e528:	d1fa      	bne.n	800e520 <USB_ReadPacket+0x10>
}
 800e52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e52e:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800e530:	4608      	mov	r0, r1
}
 800e532:	4770      	bx	lr

0800e534 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800e534:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e536:	784a      	ldrb	r2, [r1, #1]
 800e538:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e53c:	3300      	adds	r3, #0
 800e53e:	bf18      	it	ne
 800e540:	2301      	movne	r3, #1
 800e542:	2a01      	cmp	r2, #1
 800e544:	d012      	beq.n	800e56c <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e546:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e54a:	2a00      	cmp	r2, #0
 800e54c:	db06      	blt.n	800e55c <USB_EPSetStall+0x28>
 800e54e:	b12b      	cbz	r3, 800e55c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e550:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e558:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e55c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e564:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e568:	2000      	movs	r0, #0
 800e56a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e56c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e570:	2a00      	cmp	r2, #0
 800e572:	db06      	blt.n	800e582 <USB_EPSetStall+0x4e>
 800e574:	b12b      	cbz	r3, 800e582 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e576:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e57a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e57e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e582:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e58a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e58e:	2000      	movs	r0, #0
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop

0800e594 <USB_EPClearStall>:
{
 800e594:	78cb      	ldrb	r3, [r1, #3]
 800e596:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800e598:	7849      	ldrb	r1, [r1, #1]
 800e59a:	3b02      	subs	r3, #2
 800e59c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800e5a0:	2901      	cmp	r1, #1
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	d011      	beq.n	800e5ca <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e5a6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5aa:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e5ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e5b0:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5b4:	d901      	bls.n	800e5ba <USB_EPClearStall+0x26>
}
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e5be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5ca:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5ce:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e5d4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5d8:	d8ed      	bhi.n	800e5b6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e5da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e5de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop

0800e5ec <USB_SetDevAddress>:
{
 800e5ec:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e5ee:	0109      	lsls	r1, r1, #4
}
 800e5f0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e5f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e5f6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e5fa:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800e5fe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e602:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800e606:	4311      	orrs	r1, r2
 800e608:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop

0800e610 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e610:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800e614:	2003      	movs	r0, #3
{
 800e616:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e618:	6853      	ldr	r3, [r2, #4]
 800e61a:	f023 0302 	bic.w	r3, r3, #2
 800e61e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e620:	f7f6 f8f2 	bl	8004808 <HAL_Delay>
}
 800e624:	2000      	movs	r0, #0
 800e626:	bd08      	pop	{r3, pc}

0800e628 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e628:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800e62c:	2003      	movs	r0, #3
{
 800e62e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e630:	6853      	ldr	r3, [r2, #4]
 800e632:	f043 0302 	orr.w	r3, r3, #2
 800e636:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e638:	f7f6 f8e6 	bl	8004808 <HAL_Delay>
}
 800e63c:	2000      	movs	r0, #0
 800e63e:	bd08      	pop	{r3, pc}

0800e640 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800e640:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800e642:	6980      	ldr	r0, [r0, #24]
}
 800e644:	4010      	ands	r0, r2
 800e646:	4770      	bx	lr

0800e648 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e648:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e64c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e650:	69c0      	ldr	r0, [r0, #28]
 800e652:	4018      	ands	r0, r3
}
 800e654:	0c00      	lsrs	r0, r0, #16
 800e656:	4770      	bx	lr

0800e658 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e658:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800e65c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e660:	69c0      	ldr	r0, [r0, #28]
 800e662:	4018      	ands	r0, r3
}
 800e664:	b280      	uxth	r0, r0
 800e666:	4770      	bx	lr

0800e668 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e668:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e66c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e670:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e674:	6940      	ldr	r0, [r0, #20]
}
 800e676:	4010      	ands	r0, r2
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop

0800e67c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800e67c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e680:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800e684:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e686:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800e68a:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e68c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e68e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e692:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e694:	6880      	ldr	r0, [r0, #8]
}
 800e696:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e69a:	01db      	lsls	r3, r3, #7
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	430b      	orrs	r3, r1
}
 800e6a0:	4018      	ands	r0, r3
 800e6a2:	4770      	bx	lr

0800e6a4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800e6a4:	6940      	ldr	r0, [r0, #20]
}
 800e6a6:	f000 0001 	and.w	r0, r0, #1
 800e6aa:	4770      	bx	lr

0800e6ac <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e6ac:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e6b0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e6b4:	4a0a      	ldr	r2, [pc, #40]	; (800e6e0 <USB_ActivateSetup+0x34>)
 800e6b6:	400a      	ands	r2, r1
 800e6b8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e6bc:	689a      	ldr	r2, [r3, #8]
 800e6be:	f002 0206 	and.w	r2, r2, #6
 800e6c2:	2a04      	cmp	r2, #4
 800e6c4:	d105      	bne.n	800e6d2 <USB_ActivateSetup+0x26>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800e6c6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e6ca:	f042 0203 	orr.w	r2, r2, #3
 800e6ce:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e6d2:	685a      	ldr	r2, [r3, #4]
}
 800e6d4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e6d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6da:	605a      	str	r2, [r3, #4]
}
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	fffff800 	.word	0xfffff800

0800e6e4 <USB_EP0_OutStart>:
{
 800e6e4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e6e6:	4c12      	ldr	r4, [pc, #72]	; (800e730 <USB_EP0_OutStart+0x4c>)
 800e6e8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e6ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e6ee:	42a5      	cmp	r5, r4
 800e6f0:	d903      	bls.n	800e6fa <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6f2:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	db16      	blt.n	800e728 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6fa:	2400      	movs	r4, #0
  if (dma == 1U)
 800e6fc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6fe:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e700:	691c      	ldr	r4, [r3, #16]
 800e702:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e706:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e708:	691c      	ldr	r4, [r3, #16]
 800e70a:	f044 0418 	orr.w	r4, r4, #24
 800e70e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e710:	691c      	ldr	r4, [r3, #16]
 800e712:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800e716:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800e718:	d106      	bne.n	800e728 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e71a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e71c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e720:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e724:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e728:	2000      	movs	r0, #0
 800e72a:	bc30      	pop	{r4, r5}
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	4f54300a 	.word	0x4f54300a

0800e734 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e734:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e736:	4903      	ldr	r1, [pc, #12]	; (800e744 <MX_FATFS_Init+0x10>)
 800e738:	4803      	ldr	r0, [pc, #12]	; (800e748 <MX_FATFS_Init+0x14>)
 800e73a:	f001 f911 	bl	800f960 <FATFS_LinkDriver>
 800e73e:	4b03      	ldr	r3, [pc, #12]	; (800e74c <MX_FATFS_Init+0x18>)
 800e740:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e742:	bd08      	pop	{r3, pc}
 800e744:	200223b8 	.word	0x200223b8
 800e748:	20000318 	.word	0x20000318
 800e74c:	200223bc 	.word	0x200223bc

0800e750 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e750:	4b02      	ldr	r3, [pc, #8]	; (800e75c <USER_initialize+0xc>)
 800e752:	2201      	movs	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e756:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	20000315 	.word	0x20000315

0800e760 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800e760:	2000      	movs	r0, #0
 800e762:	4770      	bx	lr

0800e764 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800e764:	2001      	movs	r0, #1
 800e766:	4770      	bx	lr

0800e768 <USER_write>:
 800e768:	2000      	movs	r0, #0
 800e76a:	4770      	bx	lr

0800e76c <USER_status>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <USER_status+0xc>)
 800e76e:	2201      	movs	r2, #1
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	7818      	ldrb	r0, [r3, #0]
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	20000315 	.word	0x20000315

0800e77c <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800e77c:	2100      	movs	r1, #0
{
 800e77e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 800e780:	4608      	mov	r0, r1
{
 800e782:	b08b      	sub	sp, #44	; 0x2c
  tcpip_init( NULL, NULL );
 800e784:	f003 fb5a 	bl	8011e3c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e788:	2400      	movs	r4, #0
  netmask.addr = 0;
 800e78a:	4f1f      	ldr	r7, [pc, #124]	; (800e808 <MX_LWIP_Init+0x8c>)
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e78c:	4b1f      	ldr	r3, [pc, #124]	; (800e80c <MX_LWIP_Init+0x90>)
 800e78e:	4e20      	ldr	r6, [pc, #128]	; (800e810 <MX_LWIP_Init+0x94>)
 800e790:	463a      	mov	r2, r7
 800e792:	9302      	str	r3, [sp, #8]
 800e794:	9400      	str	r4, [sp, #0]
  ipaddr.addr = 0;
 800e796:	481f      	ldr	r0, [pc, #124]	; (800e814 <MX_LWIP_Init+0x98>)
  netmask.addr = 0;
 800e798:	603c      	str	r4, [r7, #0]
  gw.addr = 0;
 800e79a:	4d1f      	ldr	r5, [pc, #124]	; (800e818 <MX_LWIP_Init+0x9c>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e79c:	4601      	mov	r1, r0
 800e79e:	4f1f      	ldr	r7, [pc, #124]	; (800e81c <MX_LWIP_Init+0xa0>)
 800e7a0:	462b      	mov	r3, r5
  ipaddr.addr = 0;
 800e7a2:	6004      	str	r4, [r0, #0]
  gw.addr = 0;
 800e7a4:	602c      	str	r4, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	9701      	str	r7, [sp, #4]
 800e7aa:	f005 fed7 	bl	801455c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f005 ff1c 	bl	80145ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e7b4:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e7b8:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 800e7ba:	075b      	lsls	r3, r3, #29
 800e7bc:	d420      	bmi.n	800e800 <MX_LWIP_Init+0x84>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e7be:	f005 ff35 	bl	801462c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e7c2:	4917      	ldr	r1, [pc, #92]	; (800e820 <MX_LWIP_Init+0xa4>)
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e7c4:	ac05      	add	r4, sp, #20
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e7c6:	4812      	ldr	r0, [pc, #72]	; (800e810 <MX_LWIP_Init+0x94>)
 800e7c8:	f005 ff76 	bl	80146b8 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	a80a      	add	r0, sp, #40	; 0x28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e7d0:	2101      	movs	r1, #1
  link_arg.netif = &gnetif;
 800e7d2:	4f14      	ldr	r7, [pc, #80]	; (800e824 <MX_LWIP_Init+0xa8>)
  osSemaphoreDef(Netif_SEM);
 800e7d4:	f840 3d18 	str.w	r3, [r0, #-24]!
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e7d8:	f001 f980 	bl	800fadc <osSemaphoreCreate>
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e7dc:	4d12      	ldr	r5, [pc, #72]	; (800e828 <MX_LWIP_Init+0xac>)
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e7de:	4b13      	ldr	r3, [pc, #76]	; (800e82c <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 800e7e0:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800e7e2:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 800e7e4:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e7e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7e8:	682d      	ldr	r5, [r5, #0]
 800e7ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	a805      	add	r0, sp, #20
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800e7f0:	6025      	str	r5, [r4, #0]
  osThreadCreate (osThread(LinkThr), &link_arg);
 800e7f2:	f001 f8e9 	bl	800f9c8 <osThreadCreate>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e7f6:	4806      	ldr	r0, [pc, #24]	; (800e810 <MX_LWIP_Init+0x94>)
 800e7f8:	f00c f9a0 	bl	801ab3c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e7fc:	b00b      	add	sp, #44	; 0x2c
 800e7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800e800:	f005 fefa 	bl	80145f8 <netif_set_up>
 800e804:	e7dd      	b.n	800e7c2 <MX_LWIP_Init+0x46>
 800e806:	bf00      	nop
 800e808:	2002286c 	.word	0x2002286c
 800e80c:	08011dad 	.word	0x08011dad
 800e810:	2002282c 	.word	0x2002282c
 800e814:	20022868 	.word	0x20022868
 800e818:	20022870 	.word	0x20022870
 800e81c:	0800eb15 	.word	0x0800eb15
 800e820:	0800ed01 	.word	0x0800ed01
 800e824:	20022824 	.word	0x20022824
 800e828:	0801f934 	.word	0x0801f934
 800e82c:	200008c8 	.word	0x200008c8

0800e830 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e834:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800e8e8 <low_level_output+0xb8>
{
 800e838:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800e83a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e83c:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 800e840:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800e842:	2900      	cmp	r1, #0
 800e844:	d048      	beq.n	800e8d8 <low_level_output+0xa8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	2a00      	cmp	r2, #0
 800e84a:	db1f      	blt.n	800e88c <low_level_output+0x5c>
  bufferoffset = 0;
 800e84c:	2000      	movs	r0, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e84e:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 800e852:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800e854:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800e858:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e85a:	1816      	adds	r6, r2, r0
 800e85c:	454e      	cmp	r6, r9
 800e85e:	d803      	bhi.n	800e868 <low_level_output+0x38>
 800e860:	e027      	b.n	800e8b2 <low_level_output+0x82>
 800e862:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800e864:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e866:	d923      	bls.n	800e8b0 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e868:	eba9 0500 	sub.w	r5, r9, r0
 800e86c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e870:	4418      	add	r0, r3

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e872:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e876:	4439      	add	r1, r7
 800e878:	462a      	mov	r2, r5
 800e87a:	f00e fb66 	bl	801cf4a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800e87e:	68e4      	ldr	r4, [r4, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800e880:	2000      	movs	r0, #0
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e882:	442f      	add	r7, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e884:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e886:	44a8      	add	r8, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e888:	4283      	cmp	r3, r0
 800e88a:	daea      	bge.n	800e862 <low_level_output+0x32>
        errval = ERR_USE;
 800e88c:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800e890:	f8da 3000 	ldr.w	r3, [sl]
 800e894:	f241 0214 	movw	r2, #4116	; 0x1014
 800e898:	5899      	ldr	r1, [r3, r2]
 800e89a:	0689      	lsls	r1, r1, #26
 800e89c:	d505      	bpl.n	800e8aa <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e89e:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800e8a0:	f241 0104 	movw	r1, #4100	; 0x1004
 800e8a4:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e8a6:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800e8a8:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800e8aa:	b003      	add	sp, #12
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e8b0:	4632      	mov	r2, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e8b2:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e8b6:	4418      	add	r0, r3
 800e8b8:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800e8ba:	4490      	add	r8, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e8bc:	4439      	add	r1, r7
 800e8be:	f00e fb44 	bl	801cf4a <memcpy>
  for(q = p; q != NULL; q = q->next)
 800e8c2:	f8db b000 	ldr.w	fp, [fp]
 800e8c6:	9b01      	ldr	r3, [sp, #4]
 800e8c8:	f1bb 0f00 	cmp.w	fp, #0
 800e8cc:	d005      	beq.n	800e8da <low_level_output+0xaa>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e8ce:	6822      	ldr	r2, [r4, #0]
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	2a00      	cmp	r2, #0
 800e8d4:	dabe      	bge.n	800e854 <low_level_output+0x24>
 800e8d6:	e7d9      	b.n	800e88c <low_level_output+0x5c>
  uint32_t framelength = 0;
 800e8d8:	4688      	mov	r8, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800e8da:	4641      	mov	r1, r8
 800e8dc:	4802      	ldr	r0, [pc, #8]	; (800e8e8 <low_level_output+0xb8>)
 800e8de:	f7f7 ffad 	bl	800683c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	e7d4      	b.n	800e890 <low_level_output+0x60>
 800e8e6:	bf00      	nop
 800e8e8:	20024144 	.word	0x20024144

0800e8ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800e9e8 <ethernetif_input+0xfc>
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e8f8:	4b3a      	ldr	r3, [pc, #232]	; (800e9e4 <ethernetif_input+0xf8>)
 800e8fa:	f04f 31ff 	mov.w	r1, #4294967295
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	f001 f900 	bl	800fb04 <osSemaphoreWait>
 800e904:	2800      	cmp	r0, #0
 800e906:	d1f7      	bne.n	800e8f8 <ethernetif_input+0xc>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800e908:	4837      	ldr	r0, [pc, #220]	; (800e9e8 <ethernetif_input+0xfc>)
 800e90a:	f7f8 f815 	bl	8006938 <HAL_ETH_GetReceivedFrame_IT>
 800e90e:	4604      	mov	r4, r0
 800e910:	2800      	cmp	r0, #0
 800e912:	d1f1      	bne.n	800e8f8 <ethernetif_input+0xc>
  len = heth.RxFrameInfos.length;
 800e914:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  if (len > 0)
 800e918:	bb59      	cbnz	r1, 800e972 <ethernetif_input+0x86>
  struct pbuf *p = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e91e:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e922:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e926:	b140      	cbz	r0, 800e93a <ethernetif_input+0x4e>
 800e928:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e92a:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e92c:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e92e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e932:	4288      	cmp	r0, r1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e934:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e936:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e938:	d1f7      	bne.n	800e92a <ethernetif_input+0x3e>
    heth.RxFrameInfos.SegCount =0;
 800e93a:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800e93c:	f8da 3000 	ldr.w	r3, [sl]
 800e940:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 800e944:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800e948:	5899      	ldr	r1, [r3, r2]
 800e94a:	0609      	lsls	r1, r1, #24
 800e94c:	d505      	bpl.n	800e95a <ethernetif_input+0x6e>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800e94e:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 800e950:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800e954:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800e956:	2200      	movs	r2, #0
 800e958:	505a      	str	r2, [r3, r1]
    {
      do
      {
        p = low_level_input( netif );
        if   (p != NULL)
 800e95a:	9800      	ldr	r0, [sp, #0]
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d0cb      	beq.n	800e8f8 <ethernetif_input+0xc>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e960:	9901      	ldr	r1, [sp, #4]
 800e962:	690b      	ldr	r3, [r1, #16]
 800e964:	4798      	blx	r3
 800e966:	2800      	cmp	r0, #0
 800e968:	d0ce      	beq.n	800e908 <ethernetif_input+0x1c>
          {
            pbuf_free(p);
 800e96a:	9800      	ldr	r0, [sp, #0]
 800e96c:	f005 ff6a 	bl	8014844 <pbuf_free>
 800e970:	e7ca      	b.n	800e908 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e972:	2203      	movs	r2, #3
 800e974:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800e976:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e97a:	f005 ffd1 	bl	8014920 <pbuf_alloc>
  if (p != NULL)
 800e97e:	9000      	str	r0, [sp, #0]
 800e980:	2800      	cmp	r0, #0
 800e982:	d0ca      	beq.n	800e91a <ethernetif_input+0x2e>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800e984:	46a8      	mov	r8, r5
    bufferoffset = 0;
 800e986:	4621      	mov	r1, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e988:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800e98c:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e98e:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800e992:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800e996:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e998:	1854      	adds	r4, r2, r1
 800e99a:	454c      	cmp	r4, r9
 800e99c:	d914      	bls.n	800e9c8 <ethernetif_input+0xdc>
      payloadoffset = 0;
 800e99e:	4643      	mov	r3, r8
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800e9a0:	eba9 0701 	sub.w	r7, r9, r1
 800e9a4:	f8db 0004 	ldr.w	r0, [fp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800e9a8:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800e9ac:	4419      	add	r1, r3
 800e9ae:	4428      	add	r0, r5
 800e9b0:	463a      	mov	r2, r7
 800e9b2:	f00e faca 	bl	801cf4a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e9b6:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e9b8:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800e9ba:	443d      	add	r5, r7
        bufferoffset = 0;
 800e9bc:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800e9c0:	68b3      	ldr	r3, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e9c2:	d8ed      	bhi.n	800e9a0 <ethernetif_input+0xb4>
 800e9c4:	4698      	mov	r8, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800e9c6:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800e9c8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e9cc:	4441      	add	r1, r8
 800e9ce:	4428      	add	r0, r5
 800e9d0:	f00e fabb 	bl	801cf4a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800e9d4:	f8db b000 	ldr.w	fp, [fp]
 800e9d8:	4621      	mov	r1, r4
 800e9da:	f1bb 0f00 	cmp.w	fp, #0
 800e9de:	d1d8      	bne.n	800e992 <ethernetif_input+0xa6>
 800e9e0:	e79d      	b.n	800e91e <ethernetif_input+0x32>
 800e9e2:	bf00      	nop
 800e9e4:	200008cc 	.word	0x200008cc
 800e9e8:	20024144 	.word	0x20024144

0800e9ec <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800e9ec:	6802      	ldr	r2, [r0, #0]
 800e9ee:	4b41      	ldr	r3, [pc, #260]	; (800eaf4 <HAL_ETH_MspInit+0x108>)
{
 800e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800e9f2:	429a      	cmp	r2, r3
{
 800e9f4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9f6:	f04f 0400 	mov.w	r4, #0
 800e9fa:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800e9fe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800ea02:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800ea04:	d001      	beq.n	800ea0a <HAL_ETH_MspInit+0x1e>
}
 800ea06:	b00d      	add	sp, #52	; 0x34
 800ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800ea0a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea0e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ea10:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea12:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800ea14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ea16:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea18:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 800ea1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ea1e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea22:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800ea26:	9200      	str	r2, [sp, #0]
 800ea28:	9a00      	ldr	r2, [sp, #0]
 800ea2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea2c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ea30:	631a      	str	r2, [r3, #48]	; 0x30
 800ea32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea34:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800ea38:	9201      	str	r2, [sp, #4]
 800ea3a:	9a01      	ldr	r2, [sp, #4]
 800ea3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea3e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ea42:	631a      	str	r2, [r3, #48]	; 0x30
 800ea44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea46:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800ea4a:	9202      	str	r2, [sp, #8]
 800ea4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea50:	f042 0204 	orr.w	r2, r2, #4
 800ea54:	631a      	str	r2, [r3, #48]	; 0x30
 800ea56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea58:	f002 0204 	and.w	r2, r2, #4
 800ea5c:	9203      	str	r2, [sp, #12]
 800ea5e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea62:	f042 0201 	orr.w	r2, r2, #1
 800ea66:	631a      	str	r2, [r3, #48]	; 0x30
 800ea68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea6a:	f002 0201 	and.w	r2, r2, #1
 800ea6e:	9204      	str	r2, [sp, #16]
 800ea70:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea74:	433a      	orrs	r2, r7
 800ea76:	631a      	str	r2, [r3, #48]	; 0x30
 800ea78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea7a:	403a      	ands	r2, r7
 800ea7c:	9205      	str	r2, [sp, #20]
 800ea7e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ea80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea86:	631a      	str	r2, [r3, #48]	; 0x30
 800ea88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ea8a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ea8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea90:	4819      	ldr	r0, [pc, #100]	; (800eaf8 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea92:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ea94:	9306      	str	r3, [sp, #24]
 800ea96:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ea98:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea9c:	f7f8 fc96 	bl	80073cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800eaa0:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eaa2:	a907      	add	r1, sp, #28
 800eaa4:	4815      	ldr	r0, [pc, #84]	; (800eafc <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800eaa6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaa8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaaa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800eaac:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eab0:	f7f8 fc8c 	bl	80073cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800eab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800eab8:	a907      	add	r1, sp, #28
 800eaba:	4811      	ldr	r0, [pc, #68]	; (800eb00 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800eabc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eabe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eac0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800eac2:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800eac6:	f7f8 fc81 	bl	80073cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800eaca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eace:	a907      	add	r1, sp, #28
 800ead0:	480c      	ldr	r0, [pc, #48]	; (800eb04 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ead2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ead4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ead6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ead8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eadc:	f7f8 fc76 	bl	80073cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800eae0:	4622      	mov	r2, r4
 800eae2:	2106      	movs	r1, #6
 800eae4:	203d      	movs	r0, #61	; 0x3d
 800eae6:	f7f6 fadd 	bl	80050a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800eaea:	203d      	movs	r0, #61	; 0x3d
 800eaec:	f7f6 fb20 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 800eaf0:	b00d      	add	sp, #52	; 0x34
 800eaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaf4:	40028000 	.word	0x40028000
 800eaf8:	40020800 	.word	0x40020800
 800eafc:	40020000 	.word	0x40020000
 800eb00:	40020400 	.word	0x40020400
 800eb04:	40021800 	.word	0x40021800

0800eb08 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800eb08:	4b01      	ldr	r3, [pc, #4]	; (800eb10 <HAL_ETH_RxCpltCallback+0x8>)
 800eb0a:	6818      	ldr	r0, [r3, #0]
 800eb0c:	f001 b826 	b.w	800fb5c <osSemaphoreRelease>
 800eb10:	200008cc 	.word	0x200008cc

0800eb14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800eb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eb18:	4604      	mov	r4, r0
{
 800eb1a:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	f000 8097 	beq.w	800ec50 <ethernetif_init+0x13c>
  uint32_t regvalue = 0;
 800eb22:	f04f 0800 	mov.w	r8, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800eb26:	f247 4073 	movw	r0, #29811	; 0x7473
  MACAddr[0] = 0x00;
 800eb2a:	a90a      	add	r1, sp, #40	; 0x28
 800eb2c:	4b4c      	ldr	r3, [pc, #304]	; (800ec60 <ethernetif_init+0x14c>)
  heth.Instance = ETH;
 800eb2e:	4d4d      	ldr	r5, [pc, #308]	; (800ec64 <ethernetif_init+0x150>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800eb30:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  heth.Instance = ETH;
 800eb34:	4a4c      	ldr	r2, [pc, #304]	; (800ec68 <ethernetif_init+0x154>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800eb36:	f8df e164 	ldr.w	lr, [pc, #356]	; 800ec9c <ethernetif_init+0x188>
 800eb3a:	4f4c      	ldr	r7, [pc, #304]	; (800ec6c <ethernetif_init+0x158>)
  netif->name[0] = IFNAME0;
 800eb3c:	8720      	strh	r0, [r4, #56]	; 0x38
  uint32_t regvalue = 0;
 800eb3e:	f8cd 8004 	str.w	r8, [sp, #4]
  MACAddr[0] = 0x00;
 800eb42:	f841 3d1c 	str.w	r3, [r1, #-28]!
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800eb46:	683e      	ldr	r6, [r7, #0]
 800eb48:	f8de 3000 	ldr.w	r3, [lr]
 800eb4c:	4848      	ldr	r0, [pc, #288]	; (800ec70 <ethernetif_init+0x15c>)
  heth.Instance = ETH;
 800eb4e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800eb50:	2201      	movs	r2, #1
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800eb52:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800eb54:	f8a5 8010 	strh.w	r8, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800eb58:	606a      	str	r2, [r5, #4]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800eb5a:	6806      	ldr	r6, [r0, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800eb5c:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800eca0 <ethernetif_init+0x18c>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800eb60:	4073      	eors	r3, r6
 800eb62:	f88d 3011 	strb.w	r3, [sp, #17]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800eb66:	683f      	ldr	r7, [r7, #0]
 800eb68:	f8de 3000 	ldr.w	r3, [lr]
 800eb6c:	f8d0 c000 	ldr.w	ip, [r0]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800eb70:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800eb72:	407b      	eors	r3, r7

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800eb74:	4f3f      	ldr	r7, [pc, #252]	; (800ec74 <ethernetif_init+0x160>)
  netif->output = etharp_output;
 800eb76:	f8c4 8014 	str.w	r8, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800eb7a:	ea83 030c 	eor.w	r3, r3, ip
  netif->linkoutput = low_level_output;
 800eb7e:	61a7      	str	r7, [r4, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800eb80:	6169      	str	r1, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800eb82:	f88d 3010 	strb.w	r3, [sp, #16]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800eb86:	f8c5 9020 	str.w	r9, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 800eb8a:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800eb8e:	f7f7 fff3 	bl	8006b78 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800eb92:	b928      	cbnz	r0, 800eba0 <ethernetif_init+0x8c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800eb94:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800eb98:	f043 0304 	orr.w	r3, r3, #4
 800eb9c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800eba0:	2304      	movs	r3, #4
 800eba2:	4a35      	ldr	r2, [pc, #212]	; (800ec78 <ethernetif_init+0x164>)
 800eba4:	4935      	ldr	r1, [pc, #212]	; (800ec7c <ethernetif_init+0x168>)
  osSemaphoreDef(SEM);
 800eba6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800eba8:	482e      	ldr	r0, [pc, #184]	; (800ec64 <ethernetif_init+0x150>)
 800ebaa:	f7f7 fdbb 	bl	8006724 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ebae:	2304      	movs	r3, #4
 800ebb0:	4a33      	ldr	r2, [pc, #204]	; (800ec80 <ethernetif_init+0x16c>)
 800ebb2:	4934      	ldr	r1, [pc, #208]	; (800ec84 <ethernetif_init+0x170>)
 800ebb4:	482b      	ldr	r0, [pc, #172]	; (800ec64 <ethernetif_init+0x150>)
 800ebb6:	f7f7 fdff 	bl	80067b8 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ebba:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ebbc:	2106      	movs	r1, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ebbe:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
  osSemaphoreDef(SEM);
 800ebc2:	a80a      	add	r0, sp, #40	; 0x28
  netif->mtu = 1500;
 800ebc4:	f240 55dc 	movw	r5, #1500	; 0x5dc
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ebc8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ebcc:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ebd0:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ebd2:	2101      	movs	r1, #1
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ebd4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ebd8:	785e      	ldrb	r6, [r3, #1]
 800ebda:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ebde:	789e      	ldrb	r6, [r3, #2]
 800ebe0:	f884 6033 	strb.w	r6, [r4, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ebe4:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 800ebe6:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ebea:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ebee:	791e      	ldrb	r6, [r3, #4]
 800ebf0:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ebf4:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ebf6:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ebfa:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  netif->mtu = 1500;
 800ebfe:	85e5      	strh	r5, [r4, #46]	; 0x2e
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ec00:	ad05      	add	r5, sp, #20
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ec02:	f000 ff6b 	bl	800fadc <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ec06:	4e20      	ldr	r6, [pc, #128]	; (800ec88 <ethernetif_init+0x174>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ec08:	4b20      	ldr	r3, [pc, #128]	; (800ec8c <ethernetif_init+0x178>)
 800ec0a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ec0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec0e:	6836      	ldr	r6, [r6, #0]
 800ec10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  osThreadCreate (osThread(EthIf), netif);
 800ec12:	4621      	mov	r1, r4
 800ec14:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ec16:	602e      	str	r6, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800ec18:	f000 fed6 	bl	800f9c8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800ec1c:	4811      	ldr	r0, [pc, #68]	; (800ec64 <ethernetif_init+0x150>)
 800ec1e:	f7f8 f901 	bl	8006e24 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ec22:	aa01      	add	r2, sp, #4
 800ec24:	211d      	movs	r1, #29
 800ec26:	480f      	ldr	r0, [pc, #60]	; (800ec64 <ethernetif_init+0x150>)
 800ec28:	f7f7 ff16 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ec2c:	9b01      	ldr	r3, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ec2e:	211d      	movs	r1, #29
 800ec30:	480c      	ldr	r0, [pc, #48]	; (800ec64 <ethernetif_init+0x150>)
  regvalue |= (PHY_ISFR_INT4);
 800ec32:	f043 030b 	orr.w	r3, r3, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ec36:	461a      	mov	r2, r3
  regvalue |= (PHY_ISFR_INT4);
 800ec38:	9301      	str	r3, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ec3a:	f7f7 ff55 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ec3e:	aa01      	add	r2, sp, #4
 800ec40:	211d      	movs	r1, #29
 800ec42:	4808      	ldr	r0, [pc, #32]	; (800ec64 <ethernetif_init+0x150>)
 800ec44:	f7f7 ff08 	bl	8006a58 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800ec48:	4638      	mov	r0, r7
 800ec4a:	b00b      	add	sp, #44	; 0x2c
 800ec4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ec50:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <ethernetif_init+0x17c>)
 800ec52:	f240 222e 	movw	r2, #558	; 0x22e
 800ec56:	490f      	ldr	r1, [pc, #60]	; (800ec94 <ethernetif_init+0x180>)
 800ec58:	480f      	ldr	r0, [pc, #60]	; (800ec98 <ethernetif_init+0x184>)
 800ec5a:	f00e fcc5 	bl	801d5e8 <iprintf>
 800ec5e:	e760      	b.n	800eb22 <ethernetif_init+0xe>
 800ec60:	00e18000 	.word	0x00e18000
 800ec64:	20024144 	.word	0x20024144
 800ec68:	40028000 	.word	0x40028000
 800ec6c:	1ff0f424 	.word	0x1ff0f424
 800ec70:	1ff0f428 	.word	0x1ff0f428
 800ec74:	0800e831 	.word	0x0800e831
 800ec78:	2002418c 	.word	0x2002418c
 800ec7c:	20022874 	.word	0x20022874
 800ec80:	200228f4 	.word	0x200228f4
 800ec84:	200240c4 	.word	0x200240c4
 800ec88:	0801f948 	.word	0x0801f948
 800ec8c:	200008cc 	.word	0x200008cc
 800ec90:	080217d8 	.word	0x080217d8
 800ec94:	080217f4 	.word	0x080217f4
 800ec98:	08021804 	.word	0x08021804
 800ec9c:	1ff0f420 	.word	0x1ff0f420
 800eca0:	0801b41d 	.word	0x0801b41d

0800eca4 <sys_now>:
 800eca4:	f7f5 bdaa 	b.w	80047fc <HAL_GetTick>

0800eca8 <ethernetif_set_link>:
  * @brief  This function sets the netif link status.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)
{
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	b082      	sub	sp, #8
  uint32_t regvalue = 0;
 800ecac:	2300      	movs	r3, #0
{
 800ecae:	4606      	mov	r6, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ecb0:	4d11      	ldr	r5, [pc, #68]	; (800ecf8 <ethernetif_set_link+0x50>)
  uint32_t regvalue = 0;
 800ecb2:	ac02      	add	r4, sp, #8
 800ecb4:	f844 3d04 	str.w	r3, [r4, #-4]!
 800ecb8:	e005      	b.n	800ecc6 <ethernetif_set_link+0x1e>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ecba:	b9cb      	cbnz	r3, 800ecf0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800ecbc:	0753      	lsls	r3, r2, #29
 800ecbe:	d414      	bmi.n	800ecea <ethernetif_set_link+0x42>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800ecc0:	20c8      	movs	r0, #200	; 0xc8
 800ecc2:	f000 fe99 	bl	800f9f8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	2101      	movs	r1, #1
 800ecca:	4628      	mov	r0, r5
 800eccc:	f7f7 fec4 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ecd0:	6830      	ldr	r0, [r6, #0]
    regvalue &= PHY_LINKED_STATUS;
 800ecd2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ecd4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    regvalue &= PHY_LINKED_STATUS;
 800ecd8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ecdc:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 800ecde:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800ece0:	d5eb      	bpl.n	800ecba <ethernetif_set_link+0x12>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800ece2:	0752      	lsls	r2, r2, #29
 800ece4:	d5ec      	bpl.n	800ecc0 <ethernetif_set_link+0x18>
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1ea      	bne.n	800ecc0 <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 800ecea:	f005 fcd9 	bl	80146a0 <netif_set_link_down>
 800ecee:	e7e7      	b.n	800ecc0 <ethernetif_set_link+0x18>
      netif_set_link_up(link_arg->netif);
 800ecf0:	f005 fcb8 	bl	8014664 <netif_set_link_up>
 800ecf4:	e7e4      	b.n	800ecc0 <ethernetif_set_link+0x18>
 800ecf6:	bf00      	nop
 800ecf8:	20024144 	.word	0x20024144

0800ecfc <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop

0800ed00 <ethernetif_update_config>:
{
 800ed00:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 800ed02:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
{
 800ed06:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 800ed08:	2100      	movs	r1, #0
{
 800ed0a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 800ed0c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 800ed0e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 800ed10:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 800ed12:	d539      	bpl.n	800ed88 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800ed14:	4c32      	ldr	r4, [pc, #200]	; (800ede0 <ethernetif_update_config+0xe0>)
 800ed16:	6863      	ldr	r3, [r4, #4]
 800ed18:	b9e3      	cbnz	r3, 800ed54 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ed20:	d141      	bne.n	800eda6 <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ed22:	68e3      	ldr	r3, [r4, #12]
 800ed24:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800ed28:	d136      	bne.n	800ed98 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ed2a:	68a2      	ldr	r2, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ed2c:	08db      	lsrs	r3, r3, #3
 800ed2e:	2100      	movs	r1, #0
 800ed30:	482b      	ldr	r0, [pc, #172]	; (800ede0 <ethernetif_update_config+0xe0>)
 800ed32:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800ed36:	b292      	uxth	r2, r2
 800ed38:	f7f7 fed6 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	4828      	ldr	r0, [pc, #160]	; (800ede0 <ethernetif_update_config+0xe0>)
 800ed40:	f7f8 f8f0 	bl	8006f24 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 800ed44:	4826      	ldr	r0, [pc, #152]	; (800ede0 <ethernetif_update_config+0xe0>)
 800ed46:	f7f8 f86d 	bl	8006e24 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f7ff ffd6 	bl	800ecfc <ethernetif_notify_conn_changed>
}
 800ed50:	b002      	add	sp, #8
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800ed54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f7f7 fec5 	bl	8006ae8 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ed5e:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 800ed60:	f7f5 fd4c 	bl	80047fc <HAL_GetTick>
 800ed64:	9000      	str	r0, [sp, #0]
 800ed66:	e002      	b.n	800ed6e <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ed68:	9b01      	ldr	r3, [sp, #4]
 800ed6a:	069a      	lsls	r2, r3, #26
 800ed6c:	d425      	bmi.n	800edba <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ed6e:	aa01      	add	r2, sp, #4
 800ed70:	2101      	movs	r1, #1
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7f7 fe70 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 800ed78:	f7f5 fd40 	bl	80047fc <HAL_GetTick>
 800ed7c:	9b00      	ldr	r3, [sp, #0]
 800ed7e:	1ac0      	subs	r0, r0, r3
 800ed80:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ed84:	d9f0      	bls.n	800ed68 <ethernetif_update_config+0x68>
    error :
 800ed86:	e7c8      	b.n	800ed1a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 800ed88:	4815      	ldr	r0, [pc, #84]	; (800ede0 <ethernetif_update_config+0xe0>)
 800ed8a:	f7f8 f88b 	bl	8006ea4 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 800ed8e:	4628      	mov	r0, r5
 800ed90:	f7ff ffb4 	bl	800ecfc <ethernetif_notify_conn_changed>
}
 800ed94:	b002      	add	sp, #8
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ed98:	f240 21d6 	movw	r1, #726	; 0x2d6
 800ed9c:	4811      	ldr	r0, [pc, #68]	; (800ede4 <ethernetif_update_config+0xe4>)
 800ed9e:	f7f3 fb6b 	bl	8002478 <assert_failed>
 800eda2:	68e3      	ldr	r3, [r4, #12]
 800eda4:	e7c1      	b.n	800ed2a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800eda6:	f240 21d5 	movw	r1, #725	; 0x2d5
 800edaa:	480e      	ldr	r0, [pc, #56]	; (800ede4 <ethernetif_update_config+0xe4>)
 800edac:	f7f3 fb64 	bl	8002478 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800edb0:	68e3      	ldr	r3, [r4, #12]
 800edb2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800edb6:	d0b8      	beq.n	800ed2a <ethernetif_update_config+0x2a>
 800edb8:	e7ee      	b.n	800ed98 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800edba:	aa01      	add	r2, sp, #4
 800edbc:	211f      	movs	r1, #31
 800edbe:	4808      	ldr	r0, [pc, #32]	; (800ede0 <ethernetif_update_config+0xe0>)
 800edc0:	f7f7 fe4a 	bl	8006a58 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	f013 0210 	ands.w	r2, r3, #16
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800edca:	bf18      	it	ne
 800edcc:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 800edd0:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 800edd2:	bf4c      	ite	mi
 800edd4:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 800edd6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800edda:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 800eddc:	60a3      	str	r3, [r4, #8]
 800edde:	e7ad      	b.n	800ed3c <ethernetif_update_config+0x3c>
 800ede0:	20024144 	.word	0x20024144
 800ede4:	080217d8 	.word	0x080217d8

0800ede8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ede8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800edec:	b183      	cbz	r3, 800ee10 <USBD_CDC_EP0_RxReady+0x28>
{
 800edee:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800edf0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edf4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800edf8:	28ff      	cmp	r0, #255	; 0xff
 800edfa:	d007      	beq.n	800ee0c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	4621      	mov	r1, r4
 800ee00:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ee04:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800ee06:	23ff      	movs	r3, #255	; 0xff
 800ee08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	2000      	movs	r0, #0
 800ee12:	4770      	bx	lr

0800ee14 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ee14:	2343      	movs	r3, #67	; 0x43
 800ee16:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800ee18:	4800      	ldr	r0, [pc, #0]	; (800ee1c <USBD_CDC_GetFSCfgDesc+0x8>)
 800ee1a:	4770      	bx	lr
 800ee1c:	20000364 	.word	0x20000364

0800ee20 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ee20:	2343      	movs	r3, #67	; 0x43
 800ee22:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800ee24:	4800      	ldr	r0, [pc, #0]	; (800ee28 <USBD_CDC_GetHSCfgDesc+0x8>)
 800ee26:	4770      	bx	lr
 800ee28:	200003a8 	.word	0x200003a8

0800ee2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ee2c:	2343      	movs	r3, #67	; 0x43
 800ee2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800ee30:	4800      	ldr	r0, [pc, #0]	; (800ee34 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800ee32:	4770      	bx	lr
 800ee34:	200003f8 	.word	0x200003f8

0800ee38 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ee38:	230a      	movs	r3, #10
 800ee3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800ee3c:	4800      	ldr	r0, [pc, #0]	; (800ee40 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800ee3e:	4770      	bx	lr
 800ee40:	200003ec 	.word	0x200003ec

0800ee44 <USBD_CDC_DataOut>:
{
 800ee44:	b538      	push	{r3, r4, r5, lr}
 800ee46:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ee48:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ee4c:	f00e f802 	bl	801ce54 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800ee50:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ee54:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800ee58:	b14b      	cbz	r3, 800ee6e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ee5a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800ee5e:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800ee62:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	4798      	blx	r3
    return USBD_OK;
 800ee6a:	2000      	movs	r0, #0
}
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800ee6e:	2002      	movs	r0, #2
}
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	bf00      	nop

0800ee74 <USBD_CDC_DataIn>:
{
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ee76:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800ee7a:	b1e6      	cbz	r6, 800eeb6 <USBD_CDC_DataIn+0x42>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ee7c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800ee80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ee84:	69d7      	ldr	r7, [r2, #28]
 800ee86:	b15f      	cbz	r7, 800eea0 <USBD_CDC_DataIn+0x2c>
 800ee88:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800ee8c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ee90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee96:	fbb7 f4f3 	udiv	r4, r7, r3
 800ee9a:	fb03 7414 	mls	r4, r3, r4, r7
 800ee9e:	b11c      	cbz	r4, 800eea8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800eea0:	2000      	movs	r0, #0
 800eea2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 800eea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800eea8:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800eeaa:	4623      	mov	r3, r4
 800eeac:	4622      	mov	r2, r4
 800eeae:	f00d ffb5 	bl	801ce1c <USBD_LL_Transmit>
    return USBD_OK;
 800eeb2:	4620      	mov	r0, r4
}
 800eeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800eeb6:	2002      	movs	r0, #2
}
 800eeb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeba:	bf00      	nop

0800eebc <USBD_CDC_Setup>:
{
 800eebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eec0:	780b      	ldrb	r3, [r1, #0]
{
 800eec2:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800eec4:	2700      	movs	r7, #0
{
 800eec6:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eec8:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 800eecc:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800eece:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800eed2:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800eed6:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eeda:	d00f      	beq.n	800eefc <USBD_CDC_Setup+0x40>
 800eedc:	2c20      	cmp	r4, #32
 800eede:	d117      	bne.n	800ef10 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800eee0:	88cc      	ldrh	r4, [r1, #6]
 800eee2:	f891 c001 	ldrb.w	ip, [r1, #1]
 800eee6:	bb64      	cbnz	r4, 800ef42 <USBD_CDC_Setup+0x86>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eee8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800eeec:	4622      	mov	r2, r4
 800eeee:	4660      	mov	r0, ip
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 800eef4:	4620      	mov	r0, r4
}
 800eef6:	b002      	add	sp, #8
 800eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800eefc:	784f      	ldrb	r7, [r1, #1]
 800eefe:	2f0a      	cmp	r7, #10
 800ef00:	d014      	beq.n	800ef2c <USBD_CDC_Setup+0x70>
 800ef02:	2f0b      	cmp	r7, #11
 800ef04:	d00c      	beq.n	800ef20 <USBD_CDC_Setup+0x64>
 800ef06:	b91f      	cbnz	r7, 800ef10 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef08:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ef0c:	2b03      	cmp	r3, #3
 800ef0e:	d028      	beq.n	800ef62 <USBD_CDC_Setup+0xa6>
      USBD_CtlError (pdev, req);
 800ef10:	4630      	mov	r0, r6
 800ef12:	4629      	mov	r1, r5
 800ef14:	f000 fcac 	bl	800f870 <USBD_CtlError>
      ret = USBD_FAIL;
 800ef18:	2002      	movs	r0, #2
}
 800ef1a:	b002      	add	sp, #8
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ef20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d1f3      	bne.n	800ef10 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 800ef28:	4620      	mov	r0, r4
 800ef2a:	e7f6      	b.n	800ef1a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef2c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	d1ed      	bne.n	800ef10 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ef34:	2201      	movs	r2, #1
 800ef36:	f10d 0105 	add.w	r1, sp, #5
 800ef3a:	f000 fccb 	bl	800f8d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ef3e:	4620      	mov	r0, r4
 800ef40:	e7eb      	b.n	800ef1a <USBD_CDC_Setup+0x5e>
      if (req->bmRequest & 0x80U)
 800ef42:	061b      	lsls	r3, r3, #24
 800ef44:	d514      	bpl.n	800ef70 <USBD_CDC_Setup+0xb4>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef46:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	4660      	mov	r0, ip
 800ef4e:	4641      	mov	r1, r8
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ef54:	88ea      	ldrh	r2, [r5, #6]
 800ef56:	4641      	mov	r1, r8
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f000 fcbb 	bl	800f8d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ef5e:	4638      	mov	r0, r7
 800ef60:	e7db      	b.n	800ef1a <USBD_CDC_Setup+0x5e>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ef62:	2202      	movs	r2, #2
 800ef64:	f10d 0106 	add.w	r1, sp, #6
 800ef68:	f000 fcb4 	bl	800f8d4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	e7d4      	b.n	800ef1a <USBD_CDC_Setup+0x5e>
        hcdc->CmdOpCode = req->bRequest;
 800ef70:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ef74:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ef76:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ef7a:	4641      	mov	r1, r8
 800ef7c:	f000 fcc0 	bl	800f900 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800ef80:	4638      	mov	r0, r7
 800ef82:	e7ca      	b.n	800ef1a <USBD_CDC_Setup+0x5e>

0800ef84 <USBD_CDC_DeInit>:
{
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef88:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef8a:	2181      	movs	r1, #129	; 0x81
 800ef8c:	f00d fefa 	bl	801cd84 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef90:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef92:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef94:	4620      	mov	r0, r4
 800ef96:	f00d fef5 	bl	801cd84 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ef9a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ef9e:	4620      	mov	r0, r4
 800efa0:	2182      	movs	r1, #130	; 0x82
 800efa2:	f00d feef 	bl	801cd84 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800efa6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800efaa:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800efac:	b14b      	cbz	r3, 800efc2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800efae:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800efb6:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800efba:	f00d ffaf 	bl	801cf1c <free>
    pdev->pClassData = NULL;
 800efbe:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800efc2:	2000      	movs	r0, #0
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	bf00      	nop

0800efc8 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800efc8:	7c03      	ldrb	r3, [r0, #16]
{
 800efca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efce:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800efd0:	2501      	movs	r5, #1
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800efd2:	bbbb      	cbnz	r3, 800f044 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800efd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efd8:	2202      	movs	r2, #2
 800efda:	2181      	movs	r1, #129	; 0x81
 800efdc:	f00d fec0 	bl	801cd60 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800efe0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800efe2:	4629      	mov	r1, r5
 800efe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efe8:	2202      	movs	r2, #2
 800efea:	4620      	mov	r0, r4
 800efec:	f00d feb8 	bl	801cd60 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eff0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eff4:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eff6:	2308      	movs	r3, #8
 800eff8:	2203      	movs	r2, #3
 800effa:	2182      	movs	r1, #130	; 0x82
 800effc:	4620      	mov	r0, r4
 800effe:	f00d feaf 	bl	801cd60 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f002:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800f004:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f008:	f00d ff80 	bl	801cf0c <malloc>
 800f00c:	4605      	mov	r5, r0
 800f00e:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800f012:	b368      	cbz	r0, 800f070 <USBD_CDC_Init+0xa8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f014:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    hcdc->TxState = 0U;
 800f018:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f01e:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800f022:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f026:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 800f028:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f02c:	4620      	mov	r0, r4
 800f02e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f032:	f1b8 0f00 	cmp.w	r8, #0
 800f036:	d014      	beq.n	800f062 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f038:	2340      	movs	r3, #64	; 0x40
 800f03a:	f00d fefd 	bl	801ce38 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800f03e:	4630      	mov	r0, r6
}
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f044:	2340      	movs	r3, #64	; 0x40
 800f046:	2202      	movs	r2, #2
 800f048:	2181      	movs	r1, #129	; 0x81
 800f04a:	f00d fe89 	bl	801cd60 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f04e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f050:	4629      	mov	r1, r5
 800f052:	2340      	movs	r3, #64	; 0x40
 800f054:	2202      	movs	r2, #2
 800f056:	4620      	mov	r0, r4
 800f058:	f00d fe82 	bl	801cd60 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f05c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800f060:	e7c8      	b.n	800eff4 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f066:	f00d fee7 	bl	801ce38 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800f06a:	4640      	mov	r0, r8
}
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800f070:	4638      	mov	r0, r7
 800f072:	e7e5      	b.n	800f040 <USBD_CDC_Init+0x78>

0800f074 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800f074:	b119      	cbz	r1, 800f07e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800f076:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 800f07a:	2000      	movs	r0, #0
 800f07c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800f07e:	2002      	movs	r0, #2
  }

  return ret;
}
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop

0800f084 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f084:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800f088:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800f08a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f08e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800f092:	4770      	bx	lr

0800f094 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800f094:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 800f098:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800f09a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800f09e:	4770      	bx	lr

0800f0a0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f0a0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f0a4:	b18a      	cbz	r2, 800f0ca <USBD_CDC_ReceivePacket+0x2a>
 800f0a6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800f0aa:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f0ac:	7c04      	ldrb	r4, [r0, #16]
 800f0ae:	b12c      	cbz	r4, 800f0bc <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f0b0:	2340      	movs	r3, #64	; 0x40
 800f0b2:	2101      	movs	r1, #1
 800f0b4:	f00d fec0 	bl	801ce38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f0b8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800f0ba:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800f0bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	f00d feb9 	bl	801ce38 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800f0c6:	4620      	mov	r0, r4
}
 800f0c8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f0ca:	2002      	movs	r0, #2
}
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop

0800f0d0 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f0d0:	b188      	cbz	r0, 800f0f6 <USBD_Init+0x26>
{
 800f0d2:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f0d4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f0d8:	b113      	cbz	r3, 800f0e0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f0e0:	b109      	cbz	r1, 800f0e6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f0e2:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f0e6:	2101      	movs	r1, #1
  pdev->id = id;
 800f0e8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f0ea:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f0ee:	f00d fdf7 	bl	801cce0 <USBD_LL_Init>

  return USBD_OK;
 800f0f2:	2000      	movs	r0, #0
}
 800f0f4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800f0f6:	2002      	movs	r0, #2
}
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop

0800f0fc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800f0fc:	b119      	cbz	r1, 800f106 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f0fe:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800f102:	2000      	movs	r0, #0
 800f104:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f106:	2002      	movs	r0, #2
  }

  return status;
}
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop

0800f10c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f10c:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f10e:	f00d fe19 	bl	801cd44 <USBD_LL_Start>

  return USBD_OK;
}
 800f112:	2000      	movs	r0, #0
 800f114:	bd08      	pop	{r3, pc}
 800f116:	bf00      	nop

0800f118 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f118:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800f11a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f11e:	b11b      	cbz	r3, 800f128 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4798      	blx	r3
 800f124:	b900      	cbnz	r0, 800f128 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800f126:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f128:	2002      	movs	r0, #2
}
 800f12a:	bd08      	pop	{r3, pc}

0800f12c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f12c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f12e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	4798      	blx	r3
  return USBD_OK;
}
 800f136:	2000      	movs	r0, #0
 800f138:	bd08      	pop	{r3, pc}
 800f13a:	bf00      	nop

0800f13c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f13c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f13e:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 800f142:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f144:	4628      	mov	r0, r5
 800f146:	f000 fb7f 	bl	800f848 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800f14a:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800f14e:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800f150:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
  switch (pdev->request.bmRequest & 0x1FU)
 800f154:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800f158:	f8c4 026c 	str.w	r0, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800f15c:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800f15e:	f8c4 2270 	str.w	r2, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 800f162:	d015      	beq.n	800f190 <USBD_LL_SetupStage+0x54>
 800f164:	d30e      	bcc.n	800f184 <USBD_LL_SetupStage+0x48>
 800f166:	2b02      	cmp	r3, #2
 800f168:	d006      	beq.n	800f178 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f16a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800f16e:	4620      	mov	r0, r4
 800f170:	f00d fe16 	bl	801cda0 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800f174:	2000      	movs	r0, #0
 800f176:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800f178:	4629      	mov	r1, r5
 800f17a:	4620      	mov	r0, r4
 800f17c:	f000 facc 	bl	800f718 <USBD_StdEPReq>
}
 800f180:	2000      	movs	r0, #0
 800f182:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800f184:	4629      	mov	r1, r5
 800f186:	4620      	mov	r0, r4
 800f188:	f000 f900 	bl	800f38c <USBD_StdDevReq>
}
 800f18c:	2000      	movs	r0, #0
 800f18e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800f190:	4629      	mov	r1, r5
 800f192:	4620      	mov	r0, r4
 800f194:	f000 fa94 	bl	800f6c0 <USBD_StdItfReq>
}
 800f198:	2000      	movs	r0, #0
 800f19a:	bd38      	pop	{r3, r4, r5, pc}

0800f19c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800f1a0:	b941      	cbnz	r1, 800f1b4 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f1a2:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d00f      	beq.n	800f1ca <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f1aa:	2b05      	cmp	r3, #5
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	d02e      	beq.n	800f20e <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800f1b0:	2000      	movs	r0, #0
}
 800f1b2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800f1b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	b1c3      	cbz	r3, 800f1ee <USBD_LL_DataOutStage+0x52>
 800f1bc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f1c0:	2a03      	cmp	r2, #3
 800f1c2:	d114      	bne.n	800f1ee <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 800f1c4:	4798      	blx	r3
  return USBD_OK;
 800f1c6:	2000      	movs	r0, #0
}
 800f1c8:	bd70      	pop	{r4, r5, r6, pc}
 800f1ca:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 800f1cc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800f1d0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d90c      	bls.n	800f1f2 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -=  pep->maxpacket;
 800f1d8:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 800f1da:	4631      	mov	r1, r6
 800f1dc:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800f1de:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800f1e2:	bf8c      	ite	hi
 800f1e4:	b29a      	uxthhi	r2, r3
 800f1e6:	b292      	uxthls	r2, r2
 800f1e8:	f000 fb9a 	bl	800f920 <USBD_CtlContinueRx>
 800f1ec:	e7e0      	b.n	800f1b0 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 800f1ee:	2002      	movs	r0, #2
}
 800f1f0:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f1f2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	b123      	cbz	r3, 800f204 <USBD_LL_DataOutStage+0x68>
 800f1fa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f1fe:	2a03      	cmp	r2, #3
 800f200:	d100      	bne.n	800f204 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 800f202:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800f204:	4628      	mov	r0, r5
 800f206:	f000 fb93 	bl	800f930 <USBD_CtlSendStatus>
  return USBD_OK;
 800f20a:	2000      	movs	r0, #0
}
 800f20c:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 800f20e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800f212:	f00d fdc5 	bl	801cda0 <USBD_LL_StallEP>
  return USBD_OK;
 800f216:	4620      	mov	r0, r4
}
 800f218:	bd70      	pop	{r4, r5, r6, pc}
 800f21a:	bf00      	nop

0800f21c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f220:	b961      	cbnz	r1, 800f23c <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f222:	f8d0 526c 	ldr.w	r5, [r0, #620]	; 0x26c
 800f226:	2d02      	cmp	r5, #2
 800f228:	d016      	beq.n	800f258 <USBD_LL_DataInStage+0x3c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f22a:	f035 0304 	bics.w	r3, r5, #4
 800f22e:	d034      	beq.n	800f29a <USBD_LL_DataInStage+0x7e>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f230:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800f234:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800f236:	2b01      	cmp	r3, #1
 800f238:	d00b      	beq.n	800f252 <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800f23a:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800f23c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	b343      	cbz	r3, 800f296 <USBD_LL_DataInStage+0x7a>
 800f244:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f248:	2a03      	cmp	r2, #3
 800f24a:	d124      	bne.n	800f296 <USBD_LL_DataInStage+0x7a>
    pdev->pClass->DataIn(pdev, epnum);
 800f24c:	4798      	blx	r3
  return USBD_OK;
 800f24e:	2000      	movs	r0, #0
}
 800f250:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 800f252:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 800f256:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800f258:	e9d0 5308 	ldrd	r5, r3, [r0, #32]
 800f25c:	460e      	mov	r6, r1
 800f25e:	429d      	cmp	r5, r3
 800f260:	d81f      	bhi.n	800f2a2 <USBD_LL_DataInStage+0x86>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f262:	69c5      	ldr	r5, [r0, #28]
 800f264:	fbb5 f2f3 	udiv	r2, r5, r3
 800f268:	fb03 5212 	mls	r2, r3, r2, r5
 800f26c:	b90a      	cbnz	r2, 800f272 <USBD_LL_DataInStage+0x56>
 800f26e:	42ab      	cmp	r3, r5
 800f270:	d924      	bls.n	800f2bc <USBD_LL_DataInStage+0xa0>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f272:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	b12b      	cbz	r3, 800f286 <USBD_LL_DataInStage+0x6a>
 800f27a:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800f27e:	2a03      	cmp	r2, #3
 800f280:	d101      	bne.n	800f286 <USBD_LL_DataInStage+0x6a>
            pdev->pClass->EP0_TxSent(pdev);
 800f282:	4620      	mov	r0, r4
 800f284:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800f286:	2180      	movs	r1, #128	; 0x80
 800f288:	4620      	mov	r0, r4
 800f28a:	f00d fd89 	bl	801cda0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f28e:	4620      	mov	r0, r4
 800f290:	f000 fb5a 	bl	800f948 <USBD_CtlReceiveStatus>
 800f294:	e7cc      	b.n	800f230 <USBD_LL_DataInStage+0x14>
    return USBD_FAIL;
 800f296:	2002      	movs	r0, #2
}
 800f298:	bd70      	pop	{r4, r5, r6, pc}
        USBD_LL_StallEP(pdev, 0x80U);
 800f29a:	2180      	movs	r1, #128	; 0x80
 800f29c:	f00d fd80 	bl	801cda0 <USBD_LL_StallEP>
 800f2a0:	e7c6      	b.n	800f230 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800f2a2:	1aeb      	subs	r3, r5, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f2a4:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800f2a6:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	f000 fb21 	bl	800f8f0 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f2ae:	4633      	mov	r3, r6
 800f2b0:	4632      	mov	r2, r6
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f00d fdbf 	bl	801ce38 <USBD_LL_PrepareReceive>
 800f2ba:	e7b9      	b.n	800f230 <USBD_LL_DataInStage+0x14>
           (pep->total_length >= pep->maxpacket) &&
 800f2bc:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800f2c0:	429d      	cmp	r5, r3
 800f2c2:	d2d6      	bcs.n	800f272 <USBD_LL_DataInStage+0x56>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	f000 fb13 	bl	800f8f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f2ca:	f8c4 6270 	str.w	r6, [r4, #624]	; 0x270
 800f2ce:	e7ee      	b.n	800f2ae <USBD_LL_DataInStage+0x92>

0800f2d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f2d0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f2d2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f2d4:	2640      	movs	r6, #64	; 0x40
{
 800f2d6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f2d8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f2da:	4611      	mov	r1, r2
 800f2dc:	4633      	mov	r3, r6
 800f2de:	f00d fd3f 	bl	801cd60 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f2e2:	4633      	mov	r3, r6
 800f2e4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f2e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f2ea:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f00d fd35 	bl	801cd60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2f6:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800f2f8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f2fc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f2fe:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f300:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800f304:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800f308:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800f30a:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800f30e:	b123      	cbz	r3, 800f31a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f310:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f314:	4620      	mov	r0, r4
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	4798      	blx	r3
  }

  return USBD_OK;
}
 800f31a:	2000      	movs	r0, #0
 800f31c:	bd70      	pop	{r4, r5, r6, pc}
 800f31e:	bf00      	nop

0800f320 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800f320:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800f322:	2000      	movs	r0, #0
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop

0800f328 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800f328:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f32a:	2104      	movs	r1, #4
  return USBD_OK;
}
 800f32c:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 800f32e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f332:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800f336:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800f33a:	4770      	bx	lr

0800f33c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800f33c:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 800f33e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800f340:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800f344:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop

0800f34c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800f34c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800f350:	2a03      	cmp	r2, #3
 800f352:	d001      	beq.n	800f358 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800f354:	2000      	movs	r0, #0
 800f356:	4770      	bx	lr
{
 800f358:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800f35a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	b103      	cbz	r3, 800f364 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800f362:	4798      	blx	r3
}
 800f364:	2000      	movs	r0, #0
 800f366:	bd08      	pop	{r3, pc}

0800f368 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800f368:	2000      	movs	r0, #0
 800f36a:	4770      	bx	lr

0800f36c <USBD_LL_IsoOUTIncomplete>:
 800f36c:	2000      	movs	r0, #0
 800f36e:	4770      	bx	lr

0800f370 <USBD_LL_DevConnected>:
 800f370:	2000      	movs	r0, #0
 800f372:	4770      	bx	lr

0800f374 <USBD_LL_DevDisconnected>:
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f374:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f378:	2101      	movs	r1, #1
{
 800f37a:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f37c:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f380:	7901      	ldrb	r1, [r0, #4]
 800f382:	6853      	ldr	r3, [r2, #4]
 800f384:	4798      	blx	r3

  return USBD_OK;
}
 800f386:	2000      	movs	r0, #0
 800f388:	bd08      	pop	{r3, pc}
 800f38a:	bf00      	nop

0800f38c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f38c:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f38e:	780b      	ldrb	r3, [r1, #0]
{
 800f390:	b083      	sub	sp, #12
 800f392:	460d      	mov	r5, r1
 800f394:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f39a:	2b20      	cmp	r3, #32
 800f39c:	d028      	beq.n	800f3f0 <USBD_StdDevReq+0x64>
 800f39e:	2b40      	cmp	r3, #64	; 0x40
 800f3a0:	d026      	beq.n	800f3f0 <USBD_StdDevReq+0x64>
 800f3a2:	b153      	cbz	r3, 800f3ba <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800f3a4:	2180      	movs	r1, #128	; 0x80
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f00d fcfa 	bl	801cda0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	f00d fcf6 	bl	801cda0 <USBD_LL_StallEP>
}
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	b003      	add	sp, #12
 800f3b8:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800f3ba:	784b      	ldrb	r3, [r1, #1]
 800f3bc:	2b09      	cmp	r3, #9
 800f3be:	d8f1      	bhi.n	800f3a4 <USBD_StdDevReq+0x18>
 800f3c0:	a201      	add	r2, pc, #4	; (adr r2, 800f3c8 <USBD_StdDevReq+0x3c>)
 800f3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c6:	bf00      	nop
 800f3c8:	0800f445 	.word	0x0800f445
 800f3cc:	0800f471 	.word	0x0800f471
 800f3d0:	0800f3a5 	.word	0x0800f3a5
 800f3d4:	0800f48d 	.word	0x0800f48d
 800f3d8:	0800f3a5 	.word	0x0800f3a5
 800f3dc:	0800f499 	.word	0x0800f499
 800f3e0:	0800f4d7 	.word	0x0800f4d7
 800f3e4:	0800f3a5 	.word	0x0800f3a5
 800f3e8:	0800f525 	.word	0x0800f525
 800f3ec:	0800f403 	.word	0x0800f403
    pdev->pClass->Setup(pdev, req);
 800f3f0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	4798      	blx	r3
}
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	b003      	add	sp, #12
 800f400:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 800f402:	7889      	ldrb	r1, [r1, #2]
 800f404:	4dad      	ldr	r5, [pc, #692]	; (800f6bc <USBD_StdDevReq+0x330>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f406:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800f408:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f40a:	d8cb      	bhi.n	800f3a4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f40c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f410:	2b02      	cmp	r3, #2
 800f412:	f000 8128 	beq.w	800f666 <USBD_StdDevReq+0x2da>
 800f416:	2b03      	cmp	r3, #3
 800f418:	f040 8119 	bne.w	800f64e <USBD_StdDevReq+0x2c2>
      if (cfgidx == 0U)
 800f41c:	2900      	cmp	r1, #0
 800f41e:	f000 813e 	beq.w	800f69e <USBD_StdDevReq+0x312>
      else if (cfgidx != pdev->dev_config)
 800f422:	6841      	ldr	r1, [r0, #4]
 800f424:	2901      	cmp	r1, #1
 800f426:	d009      	beq.n	800f43c <USBD_StdDevReq+0xb0>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f428:	b2c9      	uxtb	r1, r1
 800f42a:	f7ff fe7f 	bl	800f12c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f42e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f430:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800f432:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f434:	f7ff fe70 	bl	800f118 <USBD_SetClassConfig>
 800f438:	2802      	cmp	r0, #2
 800f43a:	d0b3      	beq.n	800f3a4 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 800f43c:	4620      	mov	r0, r4
 800f43e:	f000 fa77 	bl	800f930 <USBD_CtlSendStatus>
 800f442:	e7b7      	b.n	800f3b4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f444:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f448:	2203      	movs	r2, #3
 800f44a:	3b01      	subs	r3, #1
 800f44c:	2b02      	cmp	r3, #2
 800f44e:	d8a9      	bhi.n	800f3a4 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800f450:	88cb      	ldrh	r3, [r1, #6]
 800f452:	2b02      	cmp	r3, #2
 800f454:	d1a6      	bne.n	800f3a4 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f456:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup)
 800f458:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f45c:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800f45e:	b103      	cbz	r3, 800f462 <USBD_StdDevReq+0xd6>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f460:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f462:	2202      	movs	r2, #2
 800f464:	f104 010c 	add.w	r1, r4, #12
 800f468:	4620      	mov	r0, r4
 800f46a:	f000 fa33 	bl	800f8d4 <USBD_CtlSendData>
 800f46e:	e7a1      	b.n	800f3b4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800f470:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f474:	3b01      	subs	r3, #1
 800f476:	2b02      	cmp	r3, #2
 800f478:	d894      	bhi.n	800f3a4 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f47a:	884b      	ldrh	r3, [r1, #2]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d199      	bne.n	800f3b4 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800f480:	2300      	movs	r3, #0
 800f482:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f486:	f000 fa53 	bl	800f930 <USBD_CtlSendStatus>
 800f48a:	e793      	b.n	800f3b4 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f48c:	884b      	ldrh	r3, [r1, #2]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d190      	bne.n	800f3b4 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 800f492:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
 800f496:	e7d1      	b.n	800f43c <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f498:	888b      	ldrh	r3, [r1, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d182      	bne.n	800f3a4 <USBD_StdDevReq+0x18>
 800f49e:	88cb      	ldrh	r3, [r1, #6]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f47f af7f 	bne.w	800f3a4 <USBD_StdDevReq+0x18>
 800f4a6:	884d      	ldrh	r5, [r1, #2]
 800f4a8:	2d7f      	cmp	r5, #127	; 0x7f
 800f4aa:	f63f af7b 	bhi.w	800f3a4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	f43f af76 	beq.w	800f3a4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f4b8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800f4ba:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4be:	f00d fc9f 	bl	801ce00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 fa34 	bl	800f930 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800f4c8:	2d00      	cmp	r5, #0
 800f4ca:	f000 80f2 	beq.w	800f6b2 <USBD_StdDevReq+0x326>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4ce:	2302      	movs	r3, #2
 800f4d0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800f4d4:	e76e      	b.n	800f3b4 <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 800f4d6:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 800f4d8:	0a13      	lsrs	r3, r2, #8
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	2b0e      	cmp	r3, #14
 800f4de:	f63f af61 	bhi.w	800f3a4 <USBD_StdDevReq+0x18>
 800f4e2:	a101      	add	r1, pc, #4	; (adr r1, 800f4e8 <USBD_StdDevReq+0x15c>)
 800f4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4e8:	0800f5cd 	.word	0x0800f5cd
 800f4ec:	0800f5b5 	.word	0x0800f5b5
 800f4f0:	0800f5dd 	.word	0x0800f5dd
 800f4f4:	0800f3a5 	.word	0x0800f3a5
 800f4f8:	0800f3a5 	.word	0x0800f3a5
 800f4fc:	0800f585 	.word	0x0800f585
 800f500:	0800f59b 	.word	0x0800f59b
 800f504:	0800f3a5 	.word	0x0800f3a5
 800f508:	0800f3a5 	.word	0x0800f3a5
 800f50c:	0800f3a5 	.word	0x0800f3a5
 800f510:	0800f3a5 	.word	0x0800f3a5
 800f514:	0800f3a5 	.word	0x0800f3a5
 800f518:	0800f3a5 	.word	0x0800f3a5
 800f51c:	0800f3a5 	.word	0x0800f3a5
 800f520:	0800f54b 	.word	0x0800f54b
  if (req->wLength != 1U)
 800f524:	88ca      	ldrh	r2, [r1, #6]
 800f526:	2a01      	cmp	r2, #1
 800f528:	f47f af3c 	bne.w	800f3a4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800f52c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f530:	2b00      	cmp	r3, #0
 800f532:	f43f af37 	beq.w	800f3a4 <USBD_StdDevReq+0x18>
 800f536:	2b02      	cmp	r3, #2
 800f538:	f240 80a3 	bls.w	800f682 <USBD_StdDevReq+0x2f6>
 800f53c:	2b03      	cmp	r3, #3
 800f53e:	f47f af31 	bne.w	800f3a4 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f542:	1d01      	adds	r1, r0, #4
 800f544:	f000 f9c6 	bl	800f8d4 <USBD_CtlSendData>
 800f548:	e734      	b.n	800f3b4 <USBD_StdDevReq+0x28>
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f54a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f54e:	f10d 0106 	add.w	r1, sp, #6
 800f552:	7c00      	ldrb	r0, [r0, #16]
 800f554:	69db      	ldr	r3, [r3, #28]
 800f556:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800f558:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f55c:	88ea      	ldrh	r2, [r5, #6]
 800f55e:	b16b      	cbz	r3, 800f57c <USBD_StdDevReq+0x1f0>
 800f560:	2a00      	cmp	r2, #0
 800f562:	f43f af6b 	beq.w	800f43c <USBD_StdDevReq+0xb0>
    len = MIN(len, req->wLength);
 800f566:	4293      	cmp	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 800f568:	4601      	mov	r1, r0
 800f56a:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800f56c:	bf28      	it	cs
 800f56e:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 800f570:	461a      	mov	r2, r3
    len = MIN(len, req->wLength);
 800f572:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800f576:	f000 f9ad 	bl	800f8d4 <USBD_CtlSendData>
 800f57a:	88ea      	ldrh	r2, [r5, #6]
  if(req->wLength == 0U)
 800f57c:	2a00      	cmp	r2, #0
 800f57e:	f47f af19 	bne.w	800f3b4 <USBD_StdDevReq+0x28>
 800f582:	e75b      	b.n	800f43c <USBD_StdDevReq+0xb0>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f584:	7c03      	ldrb	r3, [r0, #16]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f47f af0c 	bne.w	800f3a4 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f58c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f590:	f10d 0006 	add.w	r0, sp, #6
 800f594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f596:	4798      	blx	r3
 800f598:	e7de      	b.n	800f558 <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f59a:	7c03      	ldrb	r3, [r0, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f47f af01 	bne.w	800f3a4 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f5a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f5a6:	f10d 0006 	add.w	r0, sp, #6
 800f5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f5ae:	2307      	movs	r3, #7
 800f5b0:	7043      	strb	r3, [r0, #1]
 800f5b2:	e7d1      	b.n	800f558 <USBD_StdDevReq+0x1cc>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800f5b4:	7c02      	ldrb	r2, [r0, #16]
 800f5b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800f5ba:	2a00      	cmp	r2, #0
 800f5bc:	d168      	bne.n	800f690 <USBD_StdDevReq+0x304>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5c0:	f10d 0006 	add.w	r0, sp, #6
 800f5c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	7043      	strb	r3, [r0, #1]
 800f5ca:	e7c5      	b.n	800f558 <USBD_StdDevReq+0x1cc>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5cc:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f5d0:	f10d 0106 	add.w	r1, sp, #6
 800f5d4:	7c00      	ldrb	r0, [r0, #16]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4798      	blx	r3
 800f5da:	e7bd      	b.n	800f558 <USBD_StdDevReq+0x1cc>
    switch ((uint8_t)(req->wValue))
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	2a05      	cmp	r2, #5
 800f5e0:	f63f aee0 	bhi.w	800f3a4 <USBD_StdDevReq+0x18>
 800f5e4:	e8df f002 	tbb	[pc, r2]
 800f5e8:	131b232b 	.word	0x131b232b
 800f5ec:	030b      	.short	0x030b
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5ee:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f5f2:	f10d 0106 	add.w	r1, sp, #6
 800f5f6:	7c00      	ldrb	r0, [r0, #16]
 800f5f8:	699b      	ldr	r3, [r3, #24]
 800f5fa:	4798      	blx	r3
 800f5fc:	e7ac      	b.n	800f558 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5fe:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f602:	f10d 0106 	add.w	r1, sp, #6
 800f606:	7c00      	ldrb	r0, [r0, #16]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	4798      	blx	r3
 800f60c:	e7a4      	b.n	800f558 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f60e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f612:	f10d 0106 	add.w	r1, sp, #6
 800f616:	7c00      	ldrb	r0, [r0, #16]
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	4798      	blx	r3
 800f61c:	e79c      	b.n	800f558 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f61e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f622:	f10d 0106 	add.w	r1, sp, #6
 800f626:	7c00      	ldrb	r0, [r0, #16]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	4798      	blx	r3
 800f62c:	e794      	b.n	800f558 <USBD_StdDevReq+0x1cc>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f62e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f632:	f10d 0106 	add.w	r1, sp, #6
 800f636:	7c00      	ldrb	r0, [r0, #16]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	4798      	blx	r3
 800f63c:	e78c      	b.n	800f558 <USBD_StdDevReq+0x1cc>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f63e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800f642:	f10d 0106 	add.w	r1, sp, #6
 800f646:	7c00      	ldrb	r0, [r0, #16]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	4798      	blx	r3
 800f64c:	e784      	b.n	800f558 <USBD_StdDevReq+0x1cc>
  USBD_LL_StallEP(pdev , 0x80U);
 800f64e:	2180      	movs	r1, #128	; 0x80
 800f650:	f00d fba6 	bl	801cda0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f654:	2100      	movs	r1, #0
 800f656:	4620      	mov	r0, r4
 800f658:	f00d fba2 	bl	801cda0 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f65c:	7829      	ldrb	r1, [r5, #0]
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff fd64 	bl	800f12c <USBD_ClrClassConfig>
 800f664:	e6a6      	b.n	800f3b4 <USBD_StdDevReq+0x28>
      if (cfgidx)
 800f666:	2900      	cmp	r1, #0
 800f668:	f43f aee8 	beq.w	800f43c <USBD_StdDevReq+0xb0>
        pdev->dev_config = cfgidx;
 800f66c:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f66e:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800f670:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f672:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f676:	f7ff fd4f 	bl	800f118 <USBD_SetClassConfig>
 800f67a:	2802      	cmp	r0, #2
 800f67c:	f47f aede 	bne.w	800f43c <USBD_StdDevReq+0xb0>
 800f680:	e690      	b.n	800f3a4 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800f682:	2300      	movs	r3, #0
 800f684:	4601      	mov	r1, r0
 800f686:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f68a:	f000 f923 	bl	800f8d4 <USBD_CtlSendData>
 800f68e:	e691      	b.n	800f3b4 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f692:	f10d 0006 	add.w	r0, sp, #6
 800f696:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f698:	2302      	movs	r3, #2
 800f69a:	7043      	strb	r3, [r0, #1]
 800f69c:	e75c      	b.n	800f558 <USBD_StdDevReq+0x1cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f69e:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800f6a0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6a2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800f6a6:	f7ff fd41 	bl	800f12c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f000 f940 	bl	800f930 <USBD_CtlSendStatus>
 800f6b0:	e680      	b.n	800f3b4 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800f6b8:	e67c      	b.n	800f3b4 <USBD_StdDevReq+0x28>
 800f6ba:	bf00      	nop
 800f6bc:	200008d0 	.word	0x200008d0

0800f6c0 <USBD_StdItfReq>:
{
 800f6c0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6c2:	780b      	ldrb	r3, [r1, #0]
{
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6cc:	2b20      	cmp	r3, #32
 800f6ce:	d00c      	beq.n	800f6ea <USBD_StdItfReq+0x2a>
 800f6d0:	2b40      	cmp	r3, #64	; 0x40
 800f6d2:	d00a      	beq.n	800f6ea <USBD_StdItfReq+0x2a>
 800f6d4:	b14b      	cbz	r3, 800f6ea <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80U);
 800f6d6:	2180      	movs	r1, #128	; 0x80
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f00d fb61 	bl	801cda0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f6de:	4620      	mov	r0, r4
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	f00d fb5d 	bl	801cda0 <USBD_LL_StallEP>
}
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800f6ea:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d8f0      	bhi.n	800f6d6 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6f4:	792b      	ldrb	r3, [r5, #4]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d8ed      	bhi.n	800f6d6 <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f6fa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f6fe:	4629      	mov	r1, r5
 800f700:	4620      	mov	r0, r4
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f706:	88eb      	ldrh	r3, [r5, #6]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1ec      	bne.n	800f6e6 <USBD_StdItfReq+0x26>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d1ea      	bne.n	800f6e6 <USBD_StdItfReq+0x26>
          USBD_CtlSendStatus(pdev);
 800f710:	4620      	mov	r0, r4
 800f712:	f000 f90d 	bl	800f930 <USBD_CtlSendStatus>
 800f716:	e7e6      	b.n	800f6e6 <USBD_StdItfReq+0x26>

0800f718 <USBD_StdEPReq>:
{
 800f718:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f71a:	780b      	ldrb	r3, [r1, #0]
{
 800f71c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f71e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f722:	2b20      	cmp	r3, #32
 800f724:	d00c      	beq.n	800f740 <USBD_StdEPReq+0x28>
 800f726:	2b40      	cmp	r3, #64	; 0x40
 800f728:	d00a      	beq.n	800f740 <USBD_StdEPReq+0x28>
 800f72a:	b183      	cbz	r3, 800f74e <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800f72c:	2180      	movs	r1, #128	; 0x80
 800f72e:	4620      	mov	r0, r4
 800f730:	f00d fb36 	bl	801cda0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f734:	4620      	mov	r0, r4
 800f736:	2100      	movs	r1, #0
 800f738:	f00d fb32 	bl	801cda0 <USBD_LL_StallEP>
}
 800f73c:	2000      	movs	r0, #0
 800f73e:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 800f740:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800f744:	4620      	mov	r0, r4
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	4798      	blx	r3
}
 800f74a:	2000      	movs	r0, #0
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800f74e:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800f750:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800f752:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 800f754:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 800f756:	d037      	beq.n	800f7c8 <USBD_StdEPReq+0xb0>
 800f758:	d314      	bcc.n	800f784 <USBD_StdEPReq+0x6c>
 800f75a:	2b03      	cmp	r3, #3
 800f75c:	d1e6      	bne.n	800f72c <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800f75e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f762:	2b02      	cmp	r3, #2
 800f764:	d03f      	beq.n	800f7e6 <USBD_StdEPReq+0xce>
 800f766:	2b03      	cmp	r3, #3
 800f768:	d1e0      	bne.n	800f72c <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f76a:	884b      	ldrh	r3, [r1, #2]
 800f76c:	b933      	cbnz	r3, 800f77c <USBD_StdEPReq+0x64>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f76e:	066a      	lsls	r2, r5, #25
 800f770:	d004      	beq.n	800f77c <USBD_StdEPReq+0x64>
 800f772:	88cb      	ldrh	r3, [r1, #6]
 800f774:	b913      	cbnz	r3, 800f77c <USBD_StdEPReq+0x64>
            USBD_LL_StallEP(pdev, ep_addr);
 800f776:	4629      	mov	r1, r5
 800f778:	f00d fb12 	bl	801cda0 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800f77c:	4620      	mov	r0, r4
 800f77e:	f000 f8d7 	bl	800f930 <USBD_CtlSendStatus>
        break;
 800f782:	e7db      	b.n	800f73c <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800f784:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d036      	beq.n	800f7fa <USBD_StdEPReq+0xe2>
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d1cd      	bne.n	800f72c <USBD_StdEPReq+0x14>
 800f790:	f005 030f 	and.w	r3, r5, #15
        if((ep_addr & 0x80U) == 0x80U)
 800f794:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f796:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f79a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800f79e:	d43e      	bmi.n	800f81e <USBD_StdEPReq+0x106>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f7a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d0c1      	beq.n	800f72c <USBD_StdEPReq+0x14>
 800f7a8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f7ac:	2614      	movs	r6, #20
 800f7ae:	fb06 0603 	mla	r6, r6, r3, r0
 800f7b2:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d13c      	bne.n	800f834 <USBD_StdEPReq+0x11c>
            pep->status = 0x0001U;
 800f7ba:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4620      	mov	r0, r4
 800f7c0:	2202      	movs	r2, #2
 800f7c2:	f000 f887 	bl	800f8d4 <USBD_CtlSendData>
          break;
 800f7c6:	e7b9      	b.n	800f73c <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800f7c8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d00a      	beq.n	800f7e6 <USBD_StdEPReq+0xce>
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d1ab      	bne.n	800f72c <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f7d4:	884b      	ldrh	r3, [r1, #2]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1b0      	bne.n	800f73c <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800f7da:	066e      	lsls	r6, r5, #25
 800f7dc:	d0ce      	beq.n	800f77c <USBD_StdEPReq+0x64>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800f7de:	4629      	mov	r1, r5
 800f7e0:	f00d faec 	bl	801cdbc <USBD_LL_ClearStallEP>
 800f7e4:	e7ca      	b.n	800f77c <USBD_StdEPReq+0x64>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7e6:	066b      	lsls	r3, r5, #25
 800f7e8:	d0a0      	beq.n	800f72c <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	f00d fad8 	bl	801cda0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	2180      	movs	r1, #128	; 0x80
 800f7f4:	f00d fad4 	bl	801cda0 <USBD_LL_StallEP>
 800f7f8:	e7a0      	b.n	800f73c <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7fa:	0668      	lsls	r0, r5, #25
 800f7fc:	d196      	bne.n	800f72c <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f7fe:	0611      	lsls	r1, r2, #24
          pep->status = 0x0000U;
 800f800:	f04f 0500 	mov.w	r5, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f804:	4620      	mov	r0, r4
 800f806:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f80a:	bf4c      	ite	mi
 800f80c:	f104 0314 	addmi.w	r3, r4, #20
 800f810:	f504 73a0 	addpl.w	r3, r4, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f814:	4619      	mov	r1, r3
          pep->status = 0x0000U;
 800f816:	601d      	str	r5, [r3, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f818:	f000 f85c 	bl	800f8d4 <USBD_CtlSendData>
          break;
 800f81c:	e78e      	b.n	800f73c <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f81e:	699b      	ldr	r3, [r3, #24]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d083      	beq.n	800f72c <USBD_StdEPReq+0x14>
 800f824:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f828:	1c5e      	adds	r6, r3, #1
 800f82a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800f82e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f832:	e7c0      	b.n	800f7b6 <USBD_StdEPReq+0x9e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800f834:	4629      	mov	r1, r5
 800f836:	4620      	mov	r0, r4
 800f838:	f00d face 	bl	801cdd8 <USBD_LL_IsStallEP>
 800f83c:	b108      	cbz	r0, 800f842 <USBD_StdEPReq+0x12a>
            pep->status = 0x0001U;
 800f83e:	2301      	movs	r3, #1
 800f840:	e7bb      	b.n	800f7ba <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 800f842:	6030      	str	r0, [r6, #0]
 800f844:	e7ba      	b.n	800f7bc <USBD_StdEPReq+0xa4>
 800f846:	bf00      	nop

0800f848 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f848:	780b      	ldrb	r3, [r1, #0]
 800f84a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f84c:	784b      	ldrb	r3, [r1, #1]
 800f84e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f850:	78ca      	ldrb	r2, [r1, #3]
 800f852:	788b      	ldrb	r3, [r1, #2]
 800f854:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f858:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f85a:	794a      	ldrb	r2, [r1, #5]
 800f85c:	790b      	ldrb	r3, [r1, #4]
 800f85e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f862:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f864:	79ca      	ldrb	r2, [r1, #7]
 800f866:	798b      	ldrb	r3, [r1, #6]
 800f868:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f86c:	80c3      	strh	r3, [r0, #6]
}
 800f86e:	4770      	bx	lr

0800f870 <USBD_CtlError>:
{
 800f870:	b510      	push	{r4, lr}
 800f872:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800f874:	2180      	movs	r1, #128	; 0x80
 800f876:	f00d fa93 	bl	801cda0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f87a:	2100      	movs	r1, #0
 800f87c:	4620      	mov	r0, r4
}
 800f87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800f882:	f00d ba8d 	b.w	801cda0 <USBD_LL_StallEP>
 800f886:	bf00      	nop

0800f888 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800f888:	b300      	cbz	r0, 800f8cc <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800f88a:	7803      	ldrb	r3, [r0, #0]
{
 800f88c:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800f88e:	b1f3      	cbz	r3, 800f8ce <USBD_GetString+0x46>
 800f890:	4604      	mov	r4, r0
    uint8_t  len = 0U;
 800f892:	2300      	movs	r3, #0
    {
        len++;
 800f894:	3301      	adds	r3, #1
    while (*buf != '\0')
 800f896:	f814 5f01 	ldrb.w	r5, [r4, #1]!
        len++;
 800f89a:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 800f89c:	2d00      	cmp	r5, #0
 800f89e:	d1f9      	bne.n	800f894 <USBD_GetString+0xc>
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f8a4:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f8a6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f8a8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f8aa:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 800f8ac:	7804      	ldrb	r4, [r0, #0]
 800f8ae:	b15c      	cbz	r4, 800f8c8 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f8b0:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800f8b2:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800f8b4:	1c5a      	adds	r2, r3, #1
 800f8b6:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800f8b8:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 800f8ba:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800f8c0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800f8c4:	2c00      	cmp	r4, #0
 800f8c6:	d1f5      	bne.n	800f8b4 <USBD_GetString+0x2c>
}
 800f8c8:	bc30      	pop	{r4, r5}
 800f8ca:	4770      	bx	lr
 800f8cc:	4770      	bx	lr
    while (*buf != '\0')
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e7e8      	b.n	800f8a4 <USBD_GetString+0x1c>
 800f8d2:	bf00      	nop

0800f8d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f8d4:	b570      	push	{r4, r5, r6, lr}
 800f8d6:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f8d8:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8da:	460a      	mov	r2, r1
 800f8dc:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 800f8de:	61c5      	str	r5, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8e0:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length   = len;
 800f8e2:	6205      	str	r5, [r0, #32]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f8e4:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8e8:	f00d fa98 	bl	801ce1c <USBD_LL_Transmit>

  return USBD_OK;
}
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}

0800f8f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f8f0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	460a      	mov	r2, r1
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	f00d fa90 	bl	801ce1c <USBD_LL_Transmit>

  return USBD_OK;
}
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	bd08      	pop	{r3, pc}

0800f900 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f904:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f906:	460a      	mov	r2, r1
 800f908:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 800f90a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f90e:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length   = len;
 800f910:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f914:	f8c0 626c 	str.w	r6, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f918:	f00d fa8e 	bl	801ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f91c:	2000      	movs	r0, #0
 800f91e:	bd70      	pop	{r4, r5, r6, pc}

0800f920 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f920:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f922:	4613      	mov	r3, r2
 800f924:	460a      	mov	r2, r1
 800f926:	2100      	movs	r1, #0
 800f928:	f00d fa86 	bl	801ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f92c:	2000      	movs	r0, #0
 800f92e:	bd08      	pop	{r3, pc}

0800f930 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f930:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f932:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f934:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f936:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f93a:	4619      	mov	r1, r3
 800f93c:	461a      	mov	r2, r3
 800f93e:	f00d fa6d 	bl	801ce1c <USBD_LL_Transmit>

  return USBD_OK;
}
 800f942:	2000      	movs	r0, #0
 800f944:	bd08      	pop	{r3, pc}
 800f946:	bf00      	nop

0800f948 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f948:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f94a:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f94c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f94e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f952:	4619      	mov	r1, r3
 800f954:	461a      	mov	r2, r3
 800f956:	f00d fa6f 	bl	801ce38 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f95a:	2000      	movs	r0, #0
 800f95c:	bd08      	pop	{r3, pc}
 800f95e:	bf00      	nop

0800f960 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800f960:	4b11      	ldr	r3, [pc, #68]	; (800f9a8 <FATFS_LinkDriver+0x48>)
 800f962:	7a5a      	ldrb	r2, [r3, #9]
 800f964:	b10a      	cbz	r2, 800f96a <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 800f966:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800f968:	4770      	bx	lr
{
 800f96a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 800f970:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800f974:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 800f976:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 800f97a:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 800f97c:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 800f97e:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800f980:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 800f984:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 800f986:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 800f98a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 800f98c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 800f98e:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 800f990:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800f992:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800f994:	b2c0      	uxtb	r0, r0
 800f996:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 800f998:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800f99a:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 800f99c:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 800f99e:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 800f9a2:	708f      	strb	r7, [r1, #2]
}
 800f9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	200008d4 	.word	0x200008d4

0800f9ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f9ac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800f9ae:	f000 fff5 	bl	801099c <vTaskStartScheduler>
  
  return osOK;
}
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	bd08      	pop	{r3, pc}
 800f9b6:	bf00      	nop

0800f9b8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9b8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800f9bc:	b90b      	cbnz	r3, 800f9c2 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 800f9be:	f001 b83b 	b.w	8010a38 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 800f9c2:	f001 b83f 	b.w	8010a44 <xTaskGetTickCountFromISR>
 800f9c6:	bf00      	nop

0800f9c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f9c8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9ca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800f9ce:	b085      	sub	sp, #20
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800f9d4:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9d6:	ad03      	add	r5, sp, #12
 800f9d8:	6811      	ldr	r1, [r2, #0]
    fpriority += (priority - osPriorityIdle);
 800f9da:	bf14      	ite	ne
 800f9dc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f9de:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9e0:	8a12      	ldrh	r2, [r2, #16]
 800f9e2:	6840      	ldr	r0, [r0, #4]
 800f9e4:	e9cd 4500 	strd	r4, r5, [sp]
 800f9e8:	f000 fee8 	bl	80107bc <xTaskCreate>
 800f9ec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f9ee:	bf0c      	ite	eq
 800f9f0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800f9f2:	2000      	movne	r0, #0
}
 800f9f4:	b005      	add	sp, #20
 800f9f6:	bd30      	pop	{r4, r5, pc}

0800f9f8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	bf08      	it	eq
 800f9fc:	2001      	moveq	r0, #1
{
 800f9fe:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa00:	f001 f958 	bl	8010cb4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa04:	2000      	movs	r0, #0
 800fa06:	bd08      	pop	{r3, pc}

0800fa08 <osTimerCreate>:
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 800fa08:	4613      	mov	r3, r2
 800fa0a:	f1a1 0201 	sub.w	r2, r1, #1
 800fa0e:	2101      	movs	r1, #1
 800fa10:	fab2 f282 	clz	r2, r2
{
 800fa14:	b510      	push	{r4, lr}
  return xTimerCreate((const char *)"",
 800fa16:	6804      	ldr	r4, [r0, #0]
{
 800fa18:	b082      	sub	sp, #8
  return xTimerCreate((const char *)"",
 800fa1a:	0952      	lsrs	r2, r2, #5
 800fa1c:	4802      	ldr	r0, [pc, #8]	; (800fa28 <osTimerCreate+0x20>)
 800fa1e:	9400      	str	r4, [sp, #0]
 800fa20:	f001 fcf8 	bl	8011414 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800fa24:	b002      	add	sp, #8
 800fa26:	bd10      	pop	{r4, pc}
 800fa28:	0801fb70 	.word	0x0801fb70

0800fa2c <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	f000 bb2f 	b.w	8010090 <xQueueCreateMutex>
 800fa32:	bf00      	nop

0800fa34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fa34:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa36:	2400      	movs	r4, #0
{
 800fa38:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 800fa3a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800fa3c:	b300      	cbz	r0, 800fa80 <osMutexWait+0x4c>
 800fa3e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fa42:	b933      	cbnz	r3, 800fa52 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fa44:	f000 fcca 	bl	80103dc <xQueueSemaphoreTake>
 800fa48:	2801      	cmp	r0, #1
 800fa4a:	d116      	bne.n	800fa7a <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 800fa4c:	2000      	movs	r0, #0
}
 800fa4e:	b002      	add	sp, #8
 800fa50:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fa52:	aa01      	add	r2, sp, #4
 800fa54:	4621      	mov	r1, r4
 800fa56:	f000 fd97 	bl	8010588 <xQueueReceiveFromISR>
 800fa5a:	2801      	cmp	r0, #1
 800fa5c:	d10d      	bne.n	800fa7a <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d0f3      	beq.n	800fa4c <osMutexWait+0x18>
 800fa64:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <osMutexWait+0x54>)
 800fa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa6a:	601a      	str	r2, [r3, #0]
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	f3bf 8f6f 	isb	sy
  return osOK;
 800fa74:	4620      	mov	r0, r4
}
 800fa76:	b002      	add	sp, #8
 800fa78:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fa7a:	20ff      	movs	r0, #255	; 0xff
}
 800fa7c:	b002      	add	sp, #8
 800fa7e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800fa80:	2080      	movs	r0, #128	; 0x80
}
 800fa82:	b002      	add	sp, #8
 800fa84:	bd10      	pop	{r4, pc}
 800fa86:	bf00      	nop
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fa8c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800fa8e:	2400      	movs	r4, #0
{
 800fa90:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 800fa92:	9401      	str	r4, [sp, #4]
 800fa94:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800fa98:	b14b      	cbz	r3, 800faae <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fa9a:	a901      	add	r1, sp, #4
 800fa9c:	f000 fb7c 	bl	8010198 <xQueueGiveFromISR>
 800faa0:	2801      	cmp	r0, #1
 800faa2:	d10a      	bne.n	800faba <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800faa4:	9b01      	ldr	r3, [sp, #4]
 800faa6:	b95b      	cbnz	r3, 800fac0 <osMutexRelease+0x34>
  osStatus result = osOK;
 800faa8:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800faaa:	b002      	add	sp, #8
 800faac:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800faae:	461a      	mov	r2, r3
 800fab0:	4619      	mov	r1, r3
 800fab2:	f000 fa23 	bl	800fefc <xQueueGenericSend>
 800fab6:	2801      	cmp	r0, #1
 800fab8:	d0f6      	beq.n	800faa8 <osMutexRelease+0x1c>
    result = osErrorOS;
 800faba:	20ff      	movs	r0, #255	; 0xff
}
 800fabc:	b002      	add	sp, #8
 800fabe:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800fac0:	4b05      	ldr	r3, [pc, #20]	; (800fad8 <osMutexRelease+0x4c>)
 800fac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800fad0:	4620      	mov	r0, r4
}
 800fad2:	b002      	add	sp, #8
 800fad4:	bd10      	pop	{r4, pc}
 800fad6:	bf00      	nop
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fadc:	2901      	cmp	r1, #1
{ 
 800fade:	b510      	push	{r4, lr}
  if (count == 1) {
 800fae0:	d10d      	bne.n	800fafe <osSemaphoreCreate+0x22>
 800fae2:	4608      	mov	r0, r1
    vSemaphoreCreateBinary(sema);
 800fae4:	2203      	movs	r2, #3
 800fae6:	2100      	movs	r1, #0
 800fae8:	f000 f9dc 	bl	800fea4 <xQueueGenericCreate>
 800faec:	4604      	mov	r4, r0
 800faee:	b120      	cbz	r0, 800fafa <osSemaphoreCreate+0x1e>
 800faf0:	2300      	movs	r3, #0
 800faf2:	461a      	mov	r2, r3
 800faf4:	4619      	mov	r1, r3
 800faf6:	f000 fa01 	bl	800fefc <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800fafa:	4620      	mov	r0, r4
 800fafc:	bd10      	pop	{r4, pc}
    return NULL;
 800fafe:	2400      	movs	r4, #0
}
 800fb00:	4620      	mov	r0, r4
 800fb02:	bd10      	pop	{r4, pc}

0800fb04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fb04:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fb06:	2400      	movs	r4, #0
{
 800fb08:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 800fb0a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800fb0c:	b300      	cbz	r0, 800fb50 <osSemaphoreWait+0x4c>
 800fb0e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fb12:	b933      	cbnz	r3, 800fb22 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fb14:	f000 fc62 	bl	80103dc <xQueueSemaphoreTake>
 800fb18:	2801      	cmp	r0, #1
 800fb1a:	d116      	bne.n	800fb4a <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 800fb1c:	2000      	movs	r0, #0
}
 800fb1e:	b002      	add	sp, #8
 800fb20:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fb22:	aa01      	add	r2, sp, #4
 800fb24:	4621      	mov	r1, r4
 800fb26:	f000 fd2f 	bl	8010588 <xQueueReceiveFromISR>
 800fb2a:	2801      	cmp	r0, #1
 800fb2c:	d10d      	bne.n	800fb4a <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0f3      	beq.n	800fb1c <osSemaphoreWait+0x18>
 800fb34:	4b08      	ldr	r3, [pc, #32]	; (800fb58 <osSemaphoreWait+0x54>)
 800fb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb3a:	601a      	str	r2, [r3, #0]
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	f3bf 8f6f 	isb	sy
  return osOK;
 800fb44:	4620      	mov	r0, r4
}
 800fb46:	b002      	add	sp, #8
 800fb48:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800fb4a:	20ff      	movs	r0, #255	; 0xff
}
 800fb4c:	b002      	add	sp, #8
 800fb4e:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 800fb50:	2080      	movs	r0, #128	; 0x80
}
 800fb52:	b002      	add	sp, #8
 800fb54:	bd10      	pop	{r4, pc}
 800fb56:	bf00      	nop
 800fb58:	e000ed04 	.word	0xe000ed04

0800fb5c <osSemaphoreRelease>:
 800fb5c:	f7ff bf96 	b.w	800fa8c <osMutexRelease>

0800fb60 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fb60:	2200      	movs	r2, #0
 800fb62:	e9d0 0100 	ldrd	r0, r1, [r0]
 800fb66:	f000 b99d 	b.w	800fea4 <xQueueGenericCreate>
 800fb6a:	bf00      	nop

0800fb6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fb6c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800fb6e:	2400      	movs	r4, #0
{
 800fb70:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800fb72:	42a2      	cmp	r2, r4
 800fb74:	bf08      	it	eq
 800fb76:	2201      	moveq	r2, #1
{
 800fb78:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb7a:	9403      	str	r4, [sp, #12]
 800fb7c:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800fb80:	b15b      	cbz	r3, 800fb9a <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fb82:	4623      	mov	r3, r4
 800fb84:	aa03      	add	r2, sp, #12
 800fb86:	a901      	add	r1, sp, #4
 800fb88:	f000 fa94 	bl	80100b4 <xQueueGenericSendFromISR>
 800fb8c:	2801      	cmp	r0, #1
 800fb8e:	d109      	bne.n	800fba4 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb90:	9b03      	ldr	r3, [sp, #12]
 800fb92:	b953      	cbnz	r3, 800fbaa <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800fb94:	2000      	movs	r0, #0
}
 800fb96:	b004      	add	sp, #16
 800fb98:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb9a:	a901      	add	r1, sp, #4
 800fb9c:	f000 f9ae 	bl	800fefc <xQueueGenericSend>
 800fba0:	2801      	cmp	r0, #1
 800fba2:	d0f7      	beq.n	800fb94 <osMessagePut+0x28>
      return osErrorOS;
 800fba4:	20ff      	movs	r0, #255	; 0xff
}
 800fba6:	b004      	add	sp, #16
 800fba8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <osMessagePut+0x54>)
 800fbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	f3bf 8f6f 	isb	sy
  return osOK;
 800fbba:	4620      	mov	r0, r4
}
 800fbbc:	b004      	add	sp, #16
 800fbbe:	bd10      	pop	{r4, pc}
 800fbc0:	e000ed04 	.word	0xe000ed04

0800fbc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fbc4:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800fbc6:	2500      	movs	r5, #0
{
 800fbc8:	b084      	sub	sp, #16
 800fbca:	4604      	mov	r4, r0
  event.value.v = 0;
 800fbcc:	e9cd 5102 	strd	r5, r1, [sp, #8]
  
  if (queue_id == NULL) {
 800fbd0:	b359      	cbz	r1, 800fc2a <osMessageGet+0x66>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800fbd2:	9500      	str	r5, [sp, #0]
 800fbd4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800fbd8:	b99b      	cbnz	r3, 800fc02 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fbda:	4608      	mov	r0, r1
 800fbdc:	a902      	add	r1, sp, #8
 800fbde:	4616      	mov	r6, r2
 800fbe0:	f000 fb3a 	bl	8010258 <xQueueReceive>
 800fbe4:	2801      	cmp	r0, #1
 800fbe6:	d02e      	beq.n	800fc46 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fbe8:	2e00      	cmp	r6, #0
 800fbea:	bf0c      	ite	eq
 800fbec:	2300      	moveq	r3, #0
 800fbee:	2340      	movne	r3, #64	; 0x40
 800fbf0:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 800fbf2:	ab04      	add	r3, sp, #16
 800fbf4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fbf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	b004      	add	sp, #16
 800fc00:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fc02:	4608      	mov	r0, r1
 800fc04:	466a      	mov	r2, sp
 800fc06:	a902      	add	r1, sp, #8
 800fc08:	f000 fcbe 	bl	8010588 <xQueueReceiveFromISR>
 800fc0c:	2801      	cmp	r0, #1
 800fc0e:	d017      	beq.n	800fc40 <osMessageGet+0x7c>
      event.status = osOK;
 800fc10:	9501      	str	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800fc12:	9b00      	ldr	r3, [sp, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d0ec      	beq.n	800fbf2 <osMessageGet+0x2e>
 800fc18:	4b0c      	ldr	r3, [pc, #48]	; (800fc4c <osMessageGet+0x88>)
 800fc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc1e:	601a      	str	r2, [r3, #0]
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	e7e3      	b.n	800fbf2 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 800fc2a:	ab04      	add	r3, sp, #16
 800fc2c:	2280      	movs	r2, #128	; 0x80
 800fc2e:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 800fc32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	b004      	add	sp, #16
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800fc40:	2310      	movs	r3, #16
 800fc42:	9301      	str	r3, [sp, #4]
 800fc44:	e7e5      	b.n	800fc12 <osMessageGet+0x4e>
      event.status = osEventMessage;
 800fc46:	2310      	movs	r3, #16
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	e7d2      	b.n	800fbf2 <osMessageGet+0x2e>
 800fc4c:	e000ed04 	.word	0xe000ed04

0800fc50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc50:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc54:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc58:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc5a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc5c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc5e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc60:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop

0800fc68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop

0800fc70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc70:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800fc72:	6802      	ldr	r2, [r0, #0]
{
 800fc74:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc76:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800fc78:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc7a:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc7e:	689c      	ldr	r4, [r3, #8]
 800fc80:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fc82:	6099      	str	r1, [r3, #8]
}
 800fc84:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fc88:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fc8a:	6002      	str	r2, [r0, #0]
}
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop

0800fc90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc90:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fc92:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fc94:	1c6b      	adds	r3, r5, #1
 800fc96:	d011      	beq.n	800fcbc <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc98:	f100 0208 	add.w	r2, r0, #8
 800fc9c:	e000      	b.n	800fca0 <vListInsert+0x10>
 800fc9e:	461a      	mov	r2, r3
 800fca0:	6853      	ldr	r3, [r2, #4]
 800fca2:	681c      	ldr	r4, [r3, #0]
 800fca4:	42ac      	cmp	r4, r5
 800fca6:	d9fa      	bls.n	800fc9e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800fca8:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800fcaa:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800fcac:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fcae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fcb0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fcb2:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fcb4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fcb6:	6004      	str	r4, [r0, #0]
}
 800fcb8:	bc30      	pop	{r4, r5}
 800fcba:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcbc:	6902      	ldr	r2, [r0, #16]
 800fcbe:	6853      	ldr	r3, [r2, #4]
 800fcc0:	e7f2      	b.n	800fca8 <vListInsert+0x18>
 800fcc2:	bf00      	nop

0800fcc4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800fcc4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fcc6:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 800fcca:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fccc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fcce:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fcd0:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800fcd2:	4284      	cmp	r4, r0

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800fcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fcd8:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 800fcda:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fcdc:	bf08      	it	eq
 800fcde:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pvContainer = NULL;
 800fce0:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800fce2:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 800fce4:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fce6:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800fce8:	6818      	ldr	r0, [r3, #0]
}
 800fcea:	4770      	bx	lr

0800fcec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fcf0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800fcf2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcf4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fcf6:	b92a      	cbnz	r2, 800fd04 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcf8:	6806      	ldr	r6, [r0, #0]
 800fcfa:	3501      	adds	r5, #1
 800fcfc:	b366      	cbz	r6, 800fd58 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 800fcfe:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd00:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800fd02:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fd04:	b97e      	cbnz	r6, 800fd26 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fd06:	6880      	ldr	r0, [r0, #8]
 800fd08:	3501      	adds	r5, #1
 800fd0a:	f00d f91e 	bl	801cf4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fd0e:	68a3      	ldr	r3, [r4, #8]
 800fd10:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd12:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fd14:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd16:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fd18:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd1a:	d3f0      	bcc.n	800fcfe <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd1c:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800fd1e:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd20:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd22:	60a3      	str	r3, [r4, #8]
}
 800fd24:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd26:	68c0      	ldr	r0, [r0, #12]
 800fd28:	f00d f90f 	bl	801cf4a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fd2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fd2e:	68e3      	ldr	r3, [r4, #12]
 800fd30:	4252      	negs	r2, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd32:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fd34:	4413      	add	r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd36:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fd38:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd3a:	d202      	bcs.n	800fd42 <prvCopyDataToQueue+0x56>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fd3c:	6863      	ldr	r3, [r4, #4]
 800fd3e:	441a      	add	r2, r3
 800fd40:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fd42:	2e02      	cmp	r6, #2
 800fd44:	d003      	beq.n	800fd4e <prvCopyDataToQueue+0x62>
 800fd46:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800fd48:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd4a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800fd4c:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd4e:	2d00      	cmp	r5, #0
 800fd50:	d1d5      	bne.n	800fcfe <prvCopyDataToQueue+0x12>
 800fd52:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 800fd54:	2000      	movs	r0, #0
 800fd56:	e7d3      	b.n	800fd00 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fd58:	6840      	ldr	r0, [r0, #4]
 800fd5a:	f001 f969 	bl	8011030 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800fd5e:	6066      	str	r6, [r4, #4]
 800fd60:	e7ce      	b.n	800fd00 <prvCopyDataToQueue+0x14>
 800fd62:	bf00      	nop

0800fd64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fd64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fd66:	b172      	cbz	r2, 800fd86 <prvCopyDataFromQueue+0x22>
 800fd68:	460b      	mov	r3, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fd6a:	68c1      	ldr	r1, [r0, #12]
{
 800fd6c:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fd6e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fd70:	6844      	ldr	r4, [r0, #4]
 800fd72:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fd74:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fd76:	d301      	bcc.n	800fd7c <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800fd78:	6801      	ldr	r1, [r0, #0]
 800fd7a:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fd7c:	4618      	mov	r0, r3
	}
}
 800fd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fd82:	f00d b8e2 	b.w	801cf4a <memcpy>
 800fd86:	4770      	bx	lr

0800fd88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fd8c:	f001 fd42 	bl	8011814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fd90:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800fd94:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd96:	2c00      	cmp	r4, #0
 800fd98:	dd16      	ble.n	800fdc8 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd9c:	b1a3      	cbz	r3, 800fdc8 <prvUnlockQueue+0x40>
 800fd9e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800fda2:	e005      	b.n	800fdb0 <prvUnlockQueue+0x28>
 800fda4:	3c01      	subs	r4, #1
 800fda6:	b2e3      	uxtb	r3, r4
 800fda8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fdaa:	b16b      	cbz	r3, 800fdc8 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdae:	b15b      	cbz	r3, 800fdc8 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f001 f82b 	bl	8010e0c <xTaskRemoveFromEventList>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d0f4      	beq.n	800fda4 <prvUnlockQueue+0x1c>
 800fdba:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fdbc:	f001 f8c4 	bl	8010f48 <vTaskMissedYield>
 800fdc0:	b2e3      	uxtb	r3, r4
 800fdc2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1f1      	bne.n	800fdac <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fdc8:	23ff      	movs	r3, #255	; 0xff
 800fdca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fdce:	f001 fd47 	bl	8011860 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fdd2:	f001 fd1f 	bl	8011814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fdd6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800fdda:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fddc:	2c00      	cmp	r4, #0
 800fdde:	dd16      	ble.n	800fe0e <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fde0:	692b      	ldr	r3, [r5, #16]
 800fde2:	b1a3      	cbz	r3, 800fe0e <prvUnlockQueue+0x86>
 800fde4:	f105 0610 	add.w	r6, r5, #16
 800fde8:	e005      	b.n	800fdf6 <prvUnlockQueue+0x6e>
 800fdea:	3c01      	subs	r4, #1
 800fdec:	b2e3      	uxtb	r3, r4
 800fdee:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fdf0:	b16b      	cbz	r3, 800fe0e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdf2:	692b      	ldr	r3, [r5, #16]
 800fdf4:	b15b      	cbz	r3, 800fe0e <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f001 f808 	bl	8010e0c <xTaskRemoveFromEventList>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d0f4      	beq.n	800fdea <prvUnlockQueue+0x62>
 800fe00:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800fe02:	f001 f8a1 	bl	8010f48 <vTaskMissedYield>
 800fe06:	b2e3      	uxtb	r3, r4
 800fe08:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1f1      	bne.n	800fdf2 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fe0e:	23ff      	movs	r3, #255	; 0xff
 800fe10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800fe14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800fe18:	f001 bd22 	b.w	8011860 <vPortExitCritical>

0800fe1c <xQueueGenericReset>:
{
 800fe1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800fe1e:	b1e0      	cbz	r0, 800fe5a <xQueueGenericReset+0x3e>
 800fe20:	4604      	mov	r4, r0
 800fe22:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800fe24:	f001 fcf6 	bl	8011814 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe28:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800fe2a:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe2c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800fe2e:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe30:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe32:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe36:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800fe3a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 800fe3e:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800fe42:	1a59      	subs	r1, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800fe44:	4413      	add	r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800fe46:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800fe48:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800fe4a:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 800fe4c:	b985      	cbnz	r5, 800fe70 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	b9bb      	cbnz	r3, 800fe82 <xQueueGenericReset+0x66>
	taskEXIT_CRITICAL();
 800fe52:	f001 fd05 	bl	8011860 <vPortExitCritical>
}
 800fe56:	2001      	movs	r0, #1
 800fe58:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fe5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5e:	b672      	cpsid	i
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	b662      	cpsie	i
 800fe6e:	e7fe      	b.n	800fe6e <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe70:	f104 0010 	add.w	r0, r4, #16
 800fe74:	f7ff feec 	bl	800fc50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe7c:	f7ff fee8 	bl	800fc50 <vListInitialise>
 800fe80:	e7e7      	b.n	800fe52 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe82:	f104 0010 	add.w	r0, r4, #16
 800fe86:	f000 ffc1 	bl	8010e0c <xTaskRemoveFromEventList>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d0e1      	beq.n	800fe52 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800fe8e:	4b04      	ldr	r3, [pc, #16]	; (800fea0 <xQueueGenericReset+0x84>)
 800fe90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	e7d8      	b.n	800fe52 <xQueueGenericReset+0x36>
 800fea0:	e000ed04 	.word	0xe000ed04

0800fea4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fea4:	b950      	cbnz	r0, 800febc <xQueueGenericCreate+0x18>
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	b672      	cpsid	i
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	b662      	cpsie	i
 800feba:	e7fe      	b.n	800feba <xQueueGenericCreate+0x16>
	{
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	4606      	mov	r6, r0
 800fec0:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 800fec2:	b151      	cbz	r1, 800feda <xQueueGenericCreate+0x36>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fec4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800fec8:	3048      	adds	r0, #72	; 0x48
 800feca:	f001 fe0b 	bl	8011ae4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fece:	4604      	mov	r4, r0
 800fed0:	b188      	cbz	r0, 800fef6 <xQueueGenericCreate+0x52>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800fed2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fed6:	6003      	str	r3, [r0, #0]
 800fed8:	e005      	b.n	800fee6 <xQueueGenericCreate+0x42>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800feda:	2048      	movs	r0, #72	; 0x48
 800fedc:	f001 fe02 	bl	8011ae4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fee0:	4604      	mov	r4, r0
 800fee2:	b140      	cbz	r0, 800fef6 <xQueueGenericCreate+0x52>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fee4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800fee6:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fee8:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800feea:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800feec:	4620      	mov	r0, r4
 800feee:	f7ff ff95 	bl	800fe1c <xQueueGenericReset>
	}
 800fef2:	4620      	mov	r0, r4
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800fef6:	2400      	movs	r4, #0
	}
 800fef8:	4620      	mov	r0, r4
 800fefa:	bd70      	pop	{r4, r5, r6, pc}

0800fefc <xQueueGenericSend>:
{
 800fefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff00:	b084      	sub	sp, #16
 800ff02:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f000 80a3 	beq.w	8010050 <xQueueGenericSend+0x154>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff0a:	2900      	cmp	r1, #0
 800ff0c:	f000 8091 	beq.w	8010032 <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d10d      	bne.n	800ff30 <xQueueGenericSend+0x34>
 800ff14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ff16:	2a01      	cmp	r2, #1
 800ff18:	d00a      	beq.n	800ff30 <xQueueGenericSend+0x34>
 800ff1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1e:	b672      	cpsid	i
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	b662      	cpsie	i
 800ff2e:	e7fe      	b.n	800ff2e <xQueueGenericSend+0x32>
 800ff30:	4604      	mov	r4, r0
 800ff32:	461e      	mov	r6, r3
 800ff34:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff36:	f001 f813 	bl	8010f60 <xTaskGetSchedulerState>
 800ff3a:	b960      	cbnz	r0, 800ff56 <xQueueGenericSend+0x5a>
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	b153      	cbz	r3, 800ff56 <xQueueGenericSend+0x5a>
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	b672      	cpsid	i
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	b662      	cpsie	i
 800ff54:	e7fe      	b.n	800ff54 <xQueueGenericSend+0x58>
 800ff56:	f1a6 0502 	sub.w	r5, r6, #2
{
 800ff5a:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800ff5c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 801008c <xQueueGenericSend+0x190>
 800ff60:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 800ff64:	46b8      	mov	r8, r7
 800ff66:	096d      	lsrs	r5, r5, #5
 800ff68:	e007      	b.n	800ff7a <xQueueGenericSend+0x7e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ff6a:	f001 fc79 	bl	8011860 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7ff ff0a 	bl	800fd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff74:	f000 fe18 	bl	8010ba8 <xTaskResumeAll>
 800ff78:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800ff7a:	f001 fc4b 	bl	8011814 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d33f      	bcc.n	8010006 <xQueueGenericSend+0x10a>
 800ff86:	2d00      	cmp	r5, #0
 800ff88:	d13d      	bne.n	8010006 <xQueueGenericSend+0x10a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff8a:	9b01      	ldr	r3, [sp, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d06a      	beq.n	8010066 <xQueueGenericSend+0x16a>
				else if( xEntryTimeSet == pdFALSE )
 800ff90:	b917      	cbnz	r7, 800ff98 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff92:	a802      	add	r0, sp, #8
 800ff94:	f000 ff82 	bl	8010e9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ff98:	f001 fc62 	bl	8011860 <vPortExitCritical>
		vTaskSuspendAll();
 800ff9c:	f000 fd44 	bl	8010a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffa0:	f001 fc38 	bl	8011814 <vPortEnterCritical>
 800ffa4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ffa8:	2bff      	cmp	r3, #255	; 0xff
 800ffaa:	d101      	bne.n	800ffb0 <xQueueGenericSend+0xb4>
 800ffac:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800ffb0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ffb4:	2bff      	cmp	r3, #255	; 0xff
 800ffb6:	d101      	bne.n	800ffbc <xQueueGenericSend+0xc0>
 800ffb8:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800ffbc:	f001 fc50 	bl	8011860 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffc0:	a901      	add	r1, sp, #4
 800ffc2:	a802      	add	r0, sp, #8
 800ffc4:	f000 ff76 	bl	8010eb4 <xTaskCheckForTimeOut>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d157      	bne.n	801007c <xQueueGenericSend+0x180>
	taskENTER_CRITICAL();
 800ffcc:	f001 fc22 	bl	8011814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ffd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d1c8      	bne.n	800ff6a <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 800ffd8:	f001 fc42 	bl	8011860 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ffdc:	9901      	ldr	r1, [sp, #4]
 800ffde:	f104 0010 	add.w	r0, r4, #16
 800ffe2:	f000 fed7 	bl	8010d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7ff fece 	bl	800fd88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffec:	f000 fddc 	bl	8010ba8 <xTaskResumeAll>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d1c1      	bne.n	800ff78 <xQueueGenericSend+0x7c>
					portYIELD_WITHIN_API();
 800fff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fff8:	f8ca 3000 	str.w	r3, [sl]
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	e7b8      	b.n	800ff78 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010006:	4632      	mov	r2, r6
 8010008:	4649      	mov	r1, r9
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff fe6e 	bl	800fcec <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010012:	bb63      	cbnz	r3, 801006e <xQueueGenericSend+0x172>
					else if( xYieldRequired != pdFALSE )
 8010014:	b138      	cbz	r0, 8010026 <xQueueGenericSend+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 8010016:	4b1d      	ldr	r3, [pc, #116]	; (801008c <xQueueGenericSend+0x190>)
 8010018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010026:	f001 fc1b 	bl	8011860 <vPortExitCritical>
				return pdPASS;
 801002a:	2001      	movs	r0, #1
}
 801002c:	b004      	add	sp, #16
 801002e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010032:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010034:	2a00      	cmp	r2, #0
 8010036:	f43f af6b 	beq.w	800ff10 <xQueueGenericSend+0x14>
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	b672      	cpsid	i
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	b662      	cpsie	i
 801004e:	e7fe      	b.n	801004e <xQueueGenericSend+0x152>
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	b672      	cpsid	i
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	b662      	cpsie	i
 8010064:	e7fe      	b.n	8010064 <xQueueGenericSend+0x168>
					taskEXIT_CRITICAL();
 8010066:	f001 fbfb 	bl	8011860 <vPortExitCritical>
					return errQUEUE_FULL;
 801006a:	4628      	mov	r0, r5
 801006c:	e7de      	b.n	801002c <xQueueGenericSend+0x130>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801006e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010072:	f000 fecb 	bl	8010e0c <xTaskRemoveFromEventList>
 8010076:	2800      	cmp	r0, #0
 8010078:	d1cd      	bne.n	8010016 <xQueueGenericSend+0x11a>
 801007a:	e7d4      	b.n	8010026 <xQueueGenericSend+0x12a>
			prvUnlockQueue( pxQueue );
 801007c:	4620      	mov	r0, r4
 801007e:	f7ff fe83 	bl	800fd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010082:	f000 fd91 	bl	8010ba8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010086:	2000      	movs	r0, #0
 8010088:	e7d0      	b.n	801002c <xQueueGenericSend+0x130>
 801008a:	bf00      	nop
 801008c:	e000ed04 	.word	0xe000ed04

08010090 <xQueueCreateMutex>:
	{
 8010090:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010092:	4602      	mov	r2, r0
 8010094:	2100      	movs	r1, #0
 8010096:	2001      	movs	r0, #1
 8010098:	f7ff ff04 	bl	800fea4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 801009c:	4604      	mov	r4, r0
 801009e:	b138      	cbz	r0, 80100b0 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80100a0:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80100a2:	e9c0 3300 	strd	r3, r3, [r0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80100a6:	461a      	mov	r2, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80100a8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80100aa:	4619      	mov	r1, r3
 80100ac:	f7ff ff26 	bl	800fefc <xQueueGenericSend>
	}
 80100b0:	4620      	mov	r0, r4
 80100b2:	bd10      	pop	{r4, pc}

080100b4 <xQueueGenericSendFromISR>:
{
 80100b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d03e      	beq.n	801013a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80100bc:	b379      	cbz	r1, 801011e <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d10d      	bne.n	80100de <xQueueGenericSendFromISR+0x2a>
 80100c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80100c4:	2c01      	cmp	r4, #1
 80100c6:	d00a      	beq.n	80100de <xQueueGenericSendFromISR+0x2a>
 80100c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100cc:	b672      	cpsid	i
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	b662      	cpsie	i
 80100dc:	e7fe      	b.n	80100dc <xQueueGenericSendFromISR+0x28>
 80100de:	4604      	mov	r4, r0
 80100e0:	461f      	mov	r7, r3
 80100e2:	4690      	mov	r8, r2
 80100e4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100e6:	f001 fca3 	bl	8011a30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80100ea:	f3ef 8611 	mrs	r6, BASEPRI
 80100ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f2:	b672      	cpsid	i
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010102:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010106:	429a      	cmp	r2, r3
 8010108:	d322      	bcc.n	8010150 <xQueueGenericSendFromISR+0x9c>
 801010a:	f1a7 0002 	sub.w	r0, r7, #2
 801010e:	fab0 f080 	clz	r0, r0
 8010112:	0940      	lsrs	r0, r0, #5
 8010114:	b9e0      	cbnz	r0, 8010150 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010116:	f386 8811 	msr	BASEPRI, r6
}
 801011a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801011e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8010120:	2c00      	cmp	r4, #0
 8010122:	d0cc      	beq.n	80100be <xQueueGenericSendFromISR+0xa>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010128:	b672      	cpsid	i
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	b662      	cpsie	i
 8010138:	e7fe      	b.n	8010138 <xQueueGenericSendFromISR+0x84>
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	b672      	cpsid	i
 8010140:	f383 8811 	msr	BASEPRI, r3
 8010144:	f3bf 8f6f 	isb	sy
 8010148:	f3bf 8f4f 	dsb	sy
 801014c:	b662      	cpsie	i
 801014e:	e7fe      	b.n	801014e <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010150:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010154:	463a      	mov	r2, r7
 8010156:	4649      	mov	r1, r9
 8010158:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801015a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801015c:	f7ff fdc6 	bl	800fcec <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010160:	1c6b      	adds	r3, r5, #1
 8010162:	d008      	beq.n	8010176 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010164:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8010166:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010168:	b25b      	sxtb	r3, r3
 801016a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 801016e:	f386 8811 	msr	BASEPRI, r6
}
 8010172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010178:	b90b      	cbnz	r3, 801017e <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 801017a:	2001      	movs	r0, #1
 801017c:	e7cb      	b.n	8010116 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801017e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010182:	f000 fe43 	bl	8010e0c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010186:	2800      	cmp	r0, #0
 8010188:	d0f7      	beq.n	801017a <xQueueGenericSendFromISR+0xc6>
 801018a:	f1b8 0f00 	cmp.w	r8, #0
 801018e:	d0f4      	beq.n	801017a <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010190:	2001      	movs	r0, #1
 8010192:	f8c8 0000 	str.w	r0, [r8]
 8010196:	e7be      	b.n	8010116 <xQueueGenericSendFromISR+0x62>

08010198 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010198:	2800      	cmp	r0, #0
 801019a:	d032      	beq.n	8010202 <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 801019c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801019e:	b153      	cbz	r3, 80101b6 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	b672      	cpsid	i
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	b662      	cpsie	i
 80101b4:	e7fe      	b.n	80101b4 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	b373      	cbz	r3, 8010218 <xQueueGiveFromISR+0x80>
{
 80101ba:	b570      	push	{r4, r5, r6, lr}
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101c0:	f001 fc36 	bl	8011a30 <vPortValidateInterruptPriority>
	__asm volatile
 80101c4:	f3ef 8611 	mrs	r6, BASEPRI
 80101c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101cc:	b672      	cpsid	i
 80101ce:	f383 8811 	msr	BASEPRI, r3
 80101d2:	f3bf 8f6f 	isb	sy
 80101d6:	f3bf 8f4f 	dsb	sy
 80101da:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80101de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d92b      	bls.n	801023c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80101e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101e8:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80101ea:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101ec:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	d020      	beq.n	8010234 <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101f2:	3301      	adds	r3, #1
			xReturn = pdPASS;
 80101f4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101f6:	b25b      	sxtb	r3, r3
 80101f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80101fc:	f386 8811 	msr	BASEPRI, r6
}
 8010200:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8010202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010206:	b672      	cpsid	i
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	b662      	cpsie	i
 8010216:	e7fe      	b.n	8010216 <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010218:	6843      	ldr	r3, [r0, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d0cd      	beq.n	80101ba <xQueueGiveFromISR+0x22>
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	b672      	cpsid	i
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	b662      	cpsie	i
 8010232:	e7fe      	b.n	8010232 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010236:	b91b      	cbnz	r3, 8010240 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 8010238:	2001      	movs	r0, #1
 801023a:	e7df      	b.n	80101fc <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 801023c:	2000      	movs	r0, #0
 801023e:	e7dd      	b.n	80101fc <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010240:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010244:	f000 fde2 	bl	8010e0c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8010248:	2d00      	cmp	r5, #0
 801024a:	d0f5      	beq.n	8010238 <xQueueGiveFromISR+0xa0>
 801024c:	2800      	cmp	r0, #0
 801024e:	d0f3      	beq.n	8010238 <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010250:	2001      	movs	r0, #1
 8010252:	6028      	str	r0, [r5, #0]
 8010254:	e7d2      	b.n	80101fc <xQueueGiveFromISR+0x64>
 8010256:	bf00      	nop

08010258 <xQueueReceive>:
{
 8010258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801025c:	b085      	sub	sp, #20
 801025e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010260:	2800      	cmp	r0, #0
 8010262:	f000 809f 	beq.w	80103a4 <xQueueReceive+0x14c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010266:	2900      	cmp	r1, #0
 8010268:	f000 808d 	beq.w	8010386 <xQueueReceive+0x12e>
 801026c:	4604      	mov	r4, r0
 801026e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010270:	f000 fe76 	bl	8010f60 <xTaskGetSchedulerState>
 8010274:	b960      	cbnz	r0, 8010290 <xQueueReceive+0x38>
 8010276:	9b01      	ldr	r3, [sp, #4]
 8010278:	b153      	cbz	r3, 8010290 <xQueueReceive+0x38>
 801027a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027e:	b672      	cpsid	i
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	b662      	cpsie	i
 801028e:	e7fe      	b.n	801028e <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 8010290:	f001 fac0 	bl	8011814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010294:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010296:	2d00      	cmp	r5, #0
 8010298:	d144      	bne.n	8010324 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d06c      	beq.n	801037a <xQueueReceive+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102a0:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80102a2:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102a4:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 80102a8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80103d8 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102ac:	f000 fdf6 	bl	8010e9c <vTaskInternalSetTimeOutState>
 80102b0:	e012      	b.n	80102d8 <xQueueReceive+0x80>
	taskENTER_CRITICAL();
 80102b2:	f001 faaf 	bl	8011814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80102b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d048      	beq.n	801034e <xQueueReceive+0xf6>
	taskEXIT_CRITICAL();
 80102bc:	f001 fad0 	bl	8011860 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff fd61 	bl	800fd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102c6:	f000 fc6f 	bl	8010ba8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80102ca:	f001 faa3 	bl	8011814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102d0:	bb45      	cbnz	r5, 8010324 <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80102d2:	9b01      	ldr	r3, [sp, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d050      	beq.n	801037a <xQueueReceive+0x122>
		taskEXIT_CRITICAL();
 80102d8:	f001 fac2 	bl	8011860 <vPortExitCritical>
		vTaskSuspendAll();
 80102dc:	f000 fba4 	bl	8010a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102e0:	f001 fa98 	bl	8011814 <vPortEnterCritical>
 80102e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80102e8:	2bff      	cmp	r3, #255	; 0xff
 80102ea:	d02d      	beq.n	8010348 <xQueueReceive+0xf0>
 80102ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80102f0:	2bff      	cmp	r3, #255	; 0xff
 80102f2:	d026      	beq.n	8010342 <xQueueReceive+0xea>
 80102f4:	f001 fab4 	bl	8011860 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102f8:	a901      	add	r1, sp, #4
 80102fa:	a802      	add	r0, sp, #8
 80102fc:	f000 fdda 	bl	8010eb4 <xTaskCheckForTimeOut>
 8010300:	2800      	cmp	r0, #0
 8010302:	d0d6      	beq.n	80102b2 <xQueueReceive+0x5a>
			prvUnlockQueue( pxQueue );
 8010304:	4620      	mov	r0, r4
 8010306:	f7ff fd3f 	bl	800fd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801030a:	f000 fc4d 	bl	8010ba8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801030e:	f001 fa81 	bl	8011814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010314:	b38b      	cbz	r3, 801037a <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 8010316:	f001 faa3 	bl	8011860 <vPortExitCritical>
		taskENTER_CRITICAL();
 801031a:	f001 fa7b 	bl	8011814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801031e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010320:	2d00      	cmp	r5, #0
 8010322:	d0d6      	beq.n	80102d2 <xQueueReceive+0x7a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010324:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010326:	4639      	mov	r1, r7
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff fd1b 	bl	800fd64 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801032e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010330:	6923      	ldr	r3, [r4, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d141      	bne.n	80103ba <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 8010336:	f001 fa93 	bl	8011860 <vPortExitCritical>
				return pdPASS;
 801033a:	2001      	movs	r0, #1
}
 801033c:	b005      	add	sp, #20
 801033e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 8010342:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8010346:	e7d5      	b.n	80102f4 <xQueueReceive+0x9c>
 8010348:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 801034c:	e7ce      	b.n	80102ec <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 801034e:	f001 fa87 	bl	8011860 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010352:	9901      	ldr	r1, [sp, #4]
 8010354:	4648      	mov	r0, r9
 8010356:	f000 fd1d 	bl	8010d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801035a:	4620      	mov	r0, r4
 801035c:	f7ff fd14 	bl	800fd88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010360:	f000 fc22 	bl	8010ba8 <xTaskResumeAll>
 8010364:	2800      	cmp	r0, #0
 8010366:	d1d8      	bne.n	801031a <xQueueReceive+0xc2>
					portYIELD_WITHIN_API();
 8010368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801036c:	f8c8 3000 	str.w	r3, [r8]
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	e7cf      	b.n	801031a <xQueueReceive+0xc2>
					taskEXIT_CRITICAL();
 801037a:	f001 fa71 	bl	8011860 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801037e:	2000      	movs	r0, #0
}
 8010380:	b005      	add	sp, #20
 8010382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010386:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010388:	2b00      	cmp	r3, #0
 801038a:	f43f af6f 	beq.w	801026c <xQueueReceive+0x14>
 801038e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010392:	b672      	cpsid	i
 8010394:	f383 8811 	msr	BASEPRI, r3
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	b662      	cpsie	i
 80103a2:	e7fe      	b.n	80103a2 <xQueueReceive+0x14a>
 80103a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a8:	b672      	cpsid	i
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	b662      	cpsie	i
 80103b8:	e7fe      	b.n	80103b8 <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103ba:	f104 0010 	add.w	r0, r4, #16
 80103be:	f000 fd25 	bl	8010e0c <xTaskRemoveFromEventList>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d0b7      	beq.n	8010336 <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 80103c6:	4b04      	ldr	r3, [pc, #16]	; (80103d8 <xQueueReceive+0x180>)
 80103c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	e7ae      	b.n	8010336 <xQueueReceive+0xde>
 80103d8:	e000ed04 	.word	0xe000ed04

080103dc <xQueueSemaphoreTake>:
{
 80103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	b084      	sub	sp, #16
 80103e2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80103e4:	b160      	cbz	r0, 8010400 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 80103e6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80103e8:	b1ad      	cbz	r5, 8010416 <xQueueSemaphoreTake+0x3a>
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	b672      	cpsid	i
 80103f0:	f383 8811 	msr	BASEPRI, r3
 80103f4:	f3bf 8f6f 	isb	sy
 80103f8:	f3bf 8f4f 	dsb	sy
 80103fc:	b662      	cpsie	i
 80103fe:	e7fe      	b.n	80103fe <xQueueSemaphoreTake+0x22>
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	b672      	cpsid	i
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	b662      	cpsie	i
 8010414:	e7fe      	b.n	8010414 <xQueueSemaphoreTake+0x38>
 8010416:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010418:	f000 fda2 	bl	8010f60 <xTaskGetSchedulerState>
 801041c:	b960      	cbnz	r0, 8010438 <xQueueSemaphoreTake+0x5c>
 801041e:	9d01      	ldr	r5, [sp, #4]
 8010420:	b155      	cbz	r5, 8010438 <xQueueSemaphoreTake+0x5c>
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	b672      	cpsid	i
 8010428:	f383 8811 	msr	BASEPRI, r3
 801042c:	f3bf 8f6f 	isb	sy
 8010430:	f3bf 8f4f 	dsb	sy
 8010434:	b662      	cpsie	i
 8010436:	e7fe      	b.n	8010436 <xQueueSemaphoreTake+0x5a>
 8010438:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801043a:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 801043c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8010584 <xQueueSemaphoreTake+0x1a8>
 8010440:	e00c      	b.n	801045c <xQueueSemaphoreTake+0x80>
	taskENTER_CRITICAL();
 8010442:	f001 f9e7 	bl	8011814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010448:	2b00      	cmp	r3, #0
 801044a:	d039      	beq.n	80104c0 <xQueueSemaphoreTake+0xe4>
	taskEXIT_CRITICAL();
 801044c:	f001 fa08 	bl	8011860 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010450:	4620      	mov	r0, r4
 8010452:	f7ff fc99 	bl	800fd88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010456:	f000 fba7 	bl	8010ba8 <xTaskResumeAll>
 801045a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801045c:	f001 f9da 	bl	8011814 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010462:	2b00      	cmp	r3, #0
 8010464:	d171      	bne.n	801054a <xQueueSemaphoreTake+0x16e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010466:	9b01      	ldr	r3, [sp, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d061      	beq.n	8010530 <xQueueSemaphoreTake+0x154>
				else if( xEntryTimeSet == pdFALSE )
 801046c:	b916      	cbnz	r6, 8010474 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801046e:	a802      	add	r0, sp, #8
 8010470:	f000 fd14 	bl	8010e9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010474:	f001 f9f4 	bl	8011860 <vPortExitCritical>
		vTaskSuspendAll();
 8010478:	f000 fad6 	bl	8010a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801047c:	f001 f9ca 	bl	8011814 <vPortEnterCritical>
 8010480:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010484:	2bff      	cmp	r3, #255	; 0xff
 8010486:	d101      	bne.n	801048c <xQueueSemaphoreTake+0xb0>
 8010488:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 801048c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010490:	2bff      	cmp	r3, #255	; 0xff
 8010492:	d101      	bne.n	8010498 <xQueueSemaphoreTake+0xbc>
 8010494:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010498:	f001 f9e2 	bl	8011860 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801049c:	a901      	add	r1, sp, #4
 801049e:	a802      	add	r0, sp, #8
 80104a0:	f000 fd08 	bl	8010eb4 <xTaskCheckForTimeOut>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d0cc      	beq.n	8010442 <xQueueSemaphoreTake+0x66>
			prvUnlockQueue( pxQueue );
 80104a8:	4620      	mov	r0, r4
 80104aa:	f7ff fc6d 	bl	800fd88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104ae:	f000 fb7b 	bl	8010ba8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80104b2:	f001 f9af 	bl	8011814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80104b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104b8:	b1db      	cbz	r3, 80104f2 <xQueueSemaphoreTake+0x116>
	taskEXIT_CRITICAL();
 80104ba:	f001 f9d1 	bl	8011860 <vPortExitCritical>
 80104be:	e7cc      	b.n	801045a <xQueueSemaphoreTake+0x7e>
 80104c0:	f001 f9ce 	bl	8011860 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104c4:	6823      	ldr	r3, [r4, #0]
 80104c6:	b1db      	cbz	r3, 8010500 <xQueueSemaphoreTake+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104c8:	9901      	ldr	r1, [sp, #4]
 80104ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80104ce:	f000 fc61 	bl	8010d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7ff fc58 	bl	800fd88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104d8:	f000 fb66 	bl	8010ba8 <xTaskResumeAll>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1bc      	bne.n	801045a <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 80104e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80104e4:	f8c8 3000 	str.w	r3, [r8]
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	e7b3      	b.n	801045a <xQueueSemaphoreTake+0x7e>
	taskEXIT_CRITICAL();
 80104f2:	f001 f9b5 	bl	8011860 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80104f6:	b965      	cbnz	r5, 8010512 <xQueueSemaphoreTake+0x136>
}
 80104f8:	4628      	mov	r0, r5
 80104fa:	b004      	add	sp, #16
 80104fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8010500:	f001 f988 	bl	8011814 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010504:	6860      	ldr	r0, [r4, #4]
 8010506:	f000 fd3b 	bl	8010f80 <xTaskPriorityInherit>
 801050a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801050c:	f001 f9a8 	bl	8011860 <vPortExitCritical>
 8010510:	e7da      	b.n	80104c8 <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 8010512:	f001 f97f 	bl	8011814 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010516:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010518:	b119      	cbz	r1, 8010522 <xQueueSemaphoreTake+0x146>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801051a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801051c:	6819      	ldr	r1, [r3, #0]
 801051e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010522:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 8010524:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010526:	f000 fde1 	bl	80110ec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801052a:	f001 f999 	bl	8011860 <vPortExitCritical>
 801052e:	e7e3      	b.n	80104f8 <xQueueSemaphoreTake+0x11c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010530:	2d00      	cmp	r5, #0
 8010532:	d0fa      	beq.n	801052a <xQueueSemaphoreTake+0x14e>
 8010534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010538:	b672      	cpsid	i
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	b662      	cpsie	i
 8010548:	e7fe      	b.n	8010548 <xQueueSemaphoreTake+0x16c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801054a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801054c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801054e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010550:	b912      	cbnz	r2, 8010558 <xQueueSemaphoreTake+0x17c>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010552:	f000 fe2d 	bl	80111b0 <pvTaskIncrementMutexHeldCount>
 8010556:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	b91b      	cbnz	r3, 8010564 <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 801055c:	f001 f980 	bl	8011860 <vPortExitCritical>
				return pdPASS;
 8010560:	2501      	movs	r5, #1
 8010562:	e7c9      	b.n	80104f8 <xQueueSemaphoreTake+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010564:	f104 0010 	add.w	r0, r4, #16
 8010568:	f000 fc50 	bl	8010e0c <xTaskRemoveFromEventList>
 801056c:	2800      	cmp	r0, #0
 801056e:	d0f5      	beq.n	801055c <xQueueSemaphoreTake+0x180>
						queueYIELD_IF_USING_PREEMPTION();
 8010570:	4b04      	ldr	r3, [pc, #16]	; (8010584 <xQueueSemaphoreTake+0x1a8>)
 8010572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010576:	601a      	str	r2, [r3, #0]
 8010578:	f3bf 8f4f 	dsb	sy
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	e7ec      	b.n	801055c <xQueueSemaphoreTake+0x180>
 8010582:	bf00      	nop
 8010584:	e000ed04 	.word	0xe000ed04

08010588 <xQueueReceiveFromISR>:
{
 8010588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801058c:	b1c8      	cbz	r0, 80105c2 <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801058e:	2900      	cmp	r1, #0
 8010590:	d033      	beq.n	80105fa <xQueueReceiveFromISR+0x72>
 8010592:	4605      	mov	r5, r0
 8010594:	4690      	mov	r8, r2
 8010596:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010598:	f001 fa4a 	bl	8011a30 <vPortValidateInterruptPriority>
	__asm volatile
 801059c:	f3ef 8711 	mrs	r7, BASEPRI
 80105a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a4:	b672      	cpsid	i
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105b4:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105b6:	b97c      	cbnz	r4, 80105d8 <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 80105b8:	4620      	mov	r0, r4
	__asm volatile
 80105ba:	f387 8811 	msr	BASEPRI, r7
}
 80105be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80105c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c6:	b672      	cpsid	i
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	b662      	cpsie	i
 80105d6:	e7fe      	b.n	80105d6 <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 80105d8:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105dc:	4649      	mov	r1, r9
 80105de:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105e0:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80105e2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105e4:	f7ff fbbe 	bl	800fd64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105e8:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80105ea:	1c73      	adds	r3, r6, #1
 80105ec:	d013      	beq.n	8010616 <xQueueReceiveFromISR+0x8e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80105ee:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 80105f0:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80105f2:	b25b      	sxtb	r3, r3
 80105f4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80105f8:	e7df      	b.n	80105ba <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d0c8      	beq.n	8010592 <xQueueReceiveFromISR+0xa>
 8010600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010604:	b672      	cpsid	i
 8010606:	f383 8811 	msr	BASEPRI, r3
 801060a:	f3bf 8f6f 	isb	sy
 801060e:	f3bf 8f4f 	dsb	sy
 8010612:	b662      	cpsie	i
 8010614:	e7fe      	b.n	8010614 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010616:	692b      	ldr	r3, [r5, #16]
 8010618:	b90b      	cbnz	r3, 801061e <xQueueReceiveFromISR+0x96>
			xReturn = pdPASS;
 801061a:	2001      	movs	r0, #1
 801061c:	e7cd      	b.n	80105ba <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801061e:	f105 0010 	add.w	r0, r5, #16
 8010622:	f000 fbf3 	bl	8010e0c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8010626:	f1b8 0f00 	cmp.w	r8, #0
 801062a:	d0f6      	beq.n	801061a <xQueueReceiveFromISR+0x92>
 801062c:	2800      	cmp	r0, #0
 801062e:	d0f4      	beq.n	801061a <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010630:	2001      	movs	r0, #1
 8010632:	f8c8 0000 	str.w	r0, [r8]
 8010636:	e7c0      	b.n	80105ba <xQueueReceiveFromISR+0x32>

08010638 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010638:	2300      	movs	r3, #0
 801063a:	4a08      	ldr	r2, [pc, #32]	; (801065c <vQueueAddToRegistry+0x24>)
	{
 801063c:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801063e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8010642:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010646:	b124      	cbz	r4, 8010652 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010648:	3301      	adds	r3, #1
 801064a:	2b08      	cmp	r3, #8
 801064c:	d1f7      	bne.n	801063e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801064e:	bc30      	pop	{r4, r5}
 8010650:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010652:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010654:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8010658:	bc30      	pop	{r4, r5}
 801065a:	4770      	bx	lr
 801065c:	2002595c 	.word	0x2002595c

08010660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010660:	b570      	push	{r4, r5, r6, lr}
 8010662:	4604      	mov	r4, r0
 8010664:	460d      	mov	r5, r1
 8010666:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010668:	f001 f8d4 	bl	8011814 <vPortEnterCritical>
 801066c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010670:	2bff      	cmp	r3, #255	; 0xff
 8010672:	d102      	bne.n	801067a <vQueueWaitForMessageRestricted+0x1a>
 8010674:	2300      	movs	r3, #0
 8010676:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801067a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801067e:	2bff      	cmp	r3, #255	; 0xff
 8010680:	d102      	bne.n	8010688 <vQueueWaitForMessageRestricted+0x28>
 8010682:	2300      	movs	r3, #0
 8010684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010688:	f001 f8ea 	bl	8011860 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801068c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801068e:	b92b      	cbnz	r3, 801069c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010690:	4632      	mov	r2, r6
 8010692:	4629      	mov	r1, r5
 8010694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010698:	f000 fb98 	bl	8010dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801069c:	4620      	mov	r0, r4
	}
 801069e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80106a2:	f7ff bb71 	b.w	800fd88 <prvUnlockQueue>
 80106a6:	bf00      	nop

080106a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 80106ac:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106ae:	4d1a      	ldr	r5, [pc, #104]	; (8010718 <prvAddCurrentTaskToDelayedList+0x70>)
{
 80106b0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80106b2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106b4:	6828      	ldr	r0, [r5, #0]
 80106b6:	3004      	adds	r0, #4
 80106b8:	f7ff fb04 	bl	800fcc4 <uxListRemove>
 80106bc:	b940      	cbnz	r0, 80106d0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80106be:	682b      	ldr	r3, [r5, #0]
 80106c0:	2201      	movs	r2, #1
 80106c2:	4916      	ldr	r1, [pc, #88]	; (801071c <prvAddCurrentTaskToDelayedList+0x74>)
 80106c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80106c6:	680b      	ldr	r3, [r1, #0]
 80106c8:	4082      	lsls	r2, r0
 80106ca:	ea23 0302 	bic.w	r3, r3, r2
 80106ce:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106d0:	1c73      	adds	r3, r6, #1
 80106d2:	d100      	bne.n	80106d6 <prvAddCurrentTaskToDelayedList+0x2e>
 80106d4:	b9bf      	cbnz	r7, 8010706 <prvAddCurrentTaskToDelayedList+0x5e>
 80106d6:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80106dc:	d20b      	bcs.n	80106f6 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106de:	4b10      	ldr	r3, [pc, #64]	; (8010720 <prvAddCurrentTaskToDelayedList+0x78>)
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	6829      	ldr	r1, [r5, #0]
 80106e4:	3104      	adds	r1, #4
 80106e6:	f7ff fad3 	bl	800fc90 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80106ea:	4b0e      	ldr	r3, [pc, #56]	; (8010724 <prvAddCurrentTaskToDelayedList+0x7c>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	42a2      	cmp	r2, r4
 80106f0:	d900      	bls.n	80106f4 <prvAddCurrentTaskToDelayedList+0x4c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80106f2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80106f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106f6:	4b0c      	ldr	r3, [pc, #48]	; (8010728 <prvAddCurrentTaskToDelayedList+0x80>)
 80106f8:	6818      	ldr	r0, [r3, #0]
 80106fa:	6829      	ldr	r1, [r5, #0]
}
 80106fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010700:	3104      	adds	r1, #4
 8010702:	f7ff bac5 	b.w	800fc90 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010706:	6829      	ldr	r1, [r5, #0]
 8010708:	4808      	ldr	r0, [pc, #32]	; (801072c <prvAddCurrentTaskToDelayedList+0x84>)
 801070a:	3104      	adds	r1, #4
}
 801070c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010710:	f7ff baae 	b.w	800fc70 <vListInsertEnd>
 8010714:	20000a04 	.word	0x20000a04
 8010718:	200008e0 	.word	0x200008e0
 801071c:	2000098c 	.word	0x2000098c
 8010720:	200008e4 	.word	0x200008e4
 8010724:	200009bc 	.word	0x200009bc
 8010728:	200008e8 	.word	0x200008e8
 801072c:	200009dc 	.word	0x200009dc

08010730 <prvIdleTask>:
{
 8010730:	b580      	push	{r7, lr}
 8010732:	4d17      	ldr	r5, [pc, #92]	; (8010790 <prvIdleTask+0x60>)
				taskYIELD();
 8010734:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8010738:	4f16      	ldr	r7, [pc, #88]	; (8010794 <prvIdleTask+0x64>)
 801073a:	4e17      	ldr	r6, [pc, #92]	; (8010798 <prvIdleTask+0x68>)
 801073c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801079c <prvIdleTask+0x6c>
 8010740:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80107a0 <prvIdleTask+0x70>
 8010744:	e014      	b.n	8010770 <prvIdleTask+0x40>
			taskENTER_CRITICAL();
 8010746:	f001 f865 	bl	8011814 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801074e:	1d20      	adds	r0, r4, #4
 8010750:	f7ff fab8 	bl	800fcc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010754:	6833      	ldr	r3, [r6, #0]
 8010756:	3b01      	subs	r3, #1
 8010758:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 801075a:	682b      	ldr	r3, [r5, #0]
 801075c:	3b01      	subs	r3, #1
 801075e:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8010760:	f001 f87e 	bl	8011860 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8010764:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010766:	f001 fa5b 	bl	8011c20 <vPortFree>
			vPortFree( pxTCB );
 801076a:	4620      	mov	r0, r4
 801076c:	f001 fa58 	bl	8011c20 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1e7      	bne.n	8010746 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010776:	f8d8 3000 	ldr.w	r3, [r8]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d905      	bls.n	801078a <prvIdleTask+0x5a>
				taskYIELD();
 801077e:	f8c9 a000 	str.w	sl, [r9]
 8010782:	f3bf 8f4f 	dsb	sy
 8010786:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801078a:	f7f0 f9af 	bl	8000aec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801078e:	e7ef      	b.n	8010770 <prvIdleTask+0x40>
 8010790:	2000097c 	.word	0x2000097c
 8010794:	200009f0 	.word	0x200009f0
 8010798:	20000978 	.word	0x20000978
 801079c:	200008ec 	.word	0x200008ec
 80107a0:	e000ed04 	.word	0xe000ed04

080107a4 <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80107a4:	4a03      	ldr	r2, [pc, #12]	; (80107b4 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80107a6:	4b04      	ldr	r3, [pc, #16]	; (80107b8 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80107a8:	6812      	ldr	r2, [r2, #0]
 80107aa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80107ac:	68d2      	ldr	r2, [r2, #12]
 80107ae:	6852      	ldr	r2, [r2, #4]
 80107b0:	601a      	str	r2, [r3, #0]
}
 80107b2:	4770      	bx	lr
 80107b4:	200008e4 	.word	0x200008e4
 80107b8:	200009bc 	.word	0x200009bc

080107bc <xTaskCreate>:
	{
 80107bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107c0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80107c4:	4607      	mov	r7, r0
 80107c6:	460d      	mov	r5, r1
 80107c8:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ca:	4650      	mov	r0, sl
	{
 80107cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ce:	f001 f989 	bl	8011ae4 <pvPortMalloc>
			if( pxStack != NULL )
 80107d2:	2800      	cmp	r0, #0
 80107d4:	f000 80c2 	beq.w	801095c <xTaskCreate+0x1a0>
 80107d8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80107da:	2054      	movs	r0, #84	; 0x54
 80107dc:	f001 f982 	bl	8011ae4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80107e0:	4604      	mov	r4, r0
 80107e2:	2800      	cmp	r0, #0
 80107e4:	f000 808e 	beq.w	8010904 <xTaskCreate+0x148>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80107e8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80107ec:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 80107f0:	1e6b      	subs	r3, r5, #1
 80107f2:	f105 010f 	add.w	r1, r5, #15
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80107f6:	44d1      	add	r9, sl
 80107f8:	f100 0233 	add.w	r2, r0, #51	; 0x33
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80107fc:	f029 0907 	bic.w	r9, r9, #7
 8010800:	e001      	b.n	8010806 <xTaskCreate+0x4a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010802:	428b      	cmp	r3, r1
 8010804:	d006      	beq.n	8010814 <xTaskCreate+0x58>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010806:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 801080a:	f802 5f01 	strb.w	r5, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 801080e:	781d      	ldrb	r5, [r3, #0]
 8010810:	2d00      	cmp	r5, #0
 8010812:	d1f6      	bne.n	8010802 <xTaskCreate+0x46>
 8010814:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010816:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801081a:	f104 0a04 	add.w	sl, r4, #4
 801081e:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010820:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010824:	4650      	mov	r0, sl
		pxNewTCB->uxMutexesHeld = 0;
 8010826:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 801082a:	bf28      	it	cs
 801082c:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801082e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010830:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010832:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010836:	f7ff fa17 	bl	800fc68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801083a:	f104 0018 	add.w	r0, r4, #24
 801083e:	f7ff fa13 	bl	800fc68 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010842:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010846:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010848:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801084a:	4639      	mov	r1, r7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801084c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010850:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010852:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010854:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010856:	f000 ffad 	bl	80117b4 <pxPortInitialiseStack>
 801085a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 801085c:	b106      	cbz	r6, 8010860 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801085e:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8010860:	f000 ffd8 	bl	8011814 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010864:	4a3f      	ldr	r2, [pc, #252]	; (8010964 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
 8010866:	4e40      	ldr	r6, [pc, #256]	; (8010968 <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
 8010868:	6813      	ldr	r3, [r2, #0]
 801086a:	3301      	adds	r3, #1
 801086c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801086e:	6833      	ldr	r3, [r6, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d03e      	beq.n	80108f2 <xTaskCreate+0x136>
			if( xSchedulerRunning == pdFALSE )
 8010874:	4f3d      	ldr	r7, [pc, #244]	; (801096c <xTaskCreate+0x1b0>)
 8010876:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010878:	683a      	ldr	r2, [r7, #0]
 801087a:	b37a      	cbz	r2, 80108dc <xTaskCreate+0x120>
 801087c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801098c <xTaskCreate+0x1d0>
		uxTaskNumber++;
 8010880:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8010990 <xTaskCreate+0x1d4>
		prvAddTaskToReadyList( pxNewTCB );
 8010884:	f04f 0b01 	mov.w	fp, #1
 8010888:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010994 <xTaskCreate+0x1d8>
 801088c:	4651      	mov	r1, sl
		uxTaskNumber++;
 801088e:	f8de 5000 	ldr.w	r5, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 8010892:	fa0b f203 	lsl.w	r2, fp, r3
 8010896:	f8dc 0000 	ldr.w	r0, [ip]
 801089a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 801089e:	eb05 090b 	add.w	r9, r5, fp
		prvAddTaskToReadyList( pxNewTCB );
 80108a2:	4302      	orrs	r2, r0
 80108a4:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 80108a8:	f8ce 9000 	str.w	r9, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 80108ac:	f8cc 2000 	str.w	r2, [ip]
 80108b0:	f7ff f9de 	bl	800fc70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80108b4:	f000 ffd4 	bl	8011860 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	b1bb      	cbz	r3, 80108ec <xTaskCreate+0x130>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80108bc:	6832      	ldr	r2, [r6, #0]
 80108be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80108c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d212      	bcs.n	80108ec <xTaskCreate+0x130>
			taskYIELD_IF_USING_PREEMPTION();
 80108c6:	4b2a      	ldr	r3, [pc, #168]	; (8010970 <xTaskCreate+0x1b4>)
 80108c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80108d6:	4658      	mov	r0, fp
	}
 80108d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80108dc:	6832      	ldr	r2, [r6, #0]
 80108de:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801098c <xTaskCreate+0x1d0>
 80108e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d8cb      	bhi.n	8010880 <xTaskCreate+0xc4>
					pxCurrentTCB = pxNewTCB;
 80108e8:	6034      	str	r4, [r6, #0]
 80108ea:	e7c9      	b.n	8010880 <xTaskCreate+0xc4>
			xReturn = pdPASS;
 80108ec:	4658      	mov	r0, fp
	}
 80108ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 80108f2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80108f4:	6813      	ldr	r3, [r2, #0]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d00b      	beq.n	8010912 <xTaskCreate+0x156>
 80108fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80108fc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 801098c <xTaskCreate+0x1d0>
 8010900:	4f1a      	ldr	r7, [pc, #104]	; (801096c <xTaskCreate+0x1b0>)
 8010902:	e7bd      	b.n	8010880 <xTaskCreate+0xc4>
					vPortFree( pxStack );
 8010904:	4648      	mov	r0, r9
 8010906:	f001 f98b 	bl	8011c20 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801090a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801090e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010912:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801098c <xTaskCreate+0x1d0>
 8010916:	4645      	mov	r5, r8
 8010918:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801091c:	4628      	mov	r0, r5
 801091e:	3514      	adds	r5, #20
 8010920:	f7ff f996 	bl	800fc50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010924:	42af      	cmp	r7, r5
 8010926:	d1f9      	bne.n	801091c <xTaskCreate+0x160>
	vListInitialise( &xDelayedTaskList1 );
 8010928:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8010998 <xTaskCreate+0x1dc>
	vListInitialise( &xDelayedTaskList2 );
 801092c:	4d11      	ldr	r5, [pc, #68]	; (8010974 <xTaskCreate+0x1b8>)
	vListInitialise( &xDelayedTaskList1 );
 801092e:	4648      	mov	r0, r9
 8010930:	4f0e      	ldr	r7, [pc, #56]	; (801096c <xTaskCreate+0x1b0>)
 8010932:	f7ff f98d 	bl	800fc50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010936:	4628      	mov	r0, r5
 8010938:	f7ff f98a 	bl	800fc50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801093c:	480e      	ldr	r0, [pc, #56]	; (8010978 <xTaskCreate+0x1bc>)
 801093e:	f7ff f987 	bl	800fc50 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8010942:	480e      	ldr	r0, [pc, #56]	; (801097c <xTaskCreate+0x1c0>)
 8010944:	f7ff f984 	bl	800fc50 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010948:	480d      	ldr	r0, [pc, #52]	; (8010980 <xTaskCreate+0x1c4>)
 801094a:	f7ff f981 	bl	800fc50 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801094e:	4b0d      	ldr	r3, [pc, #52]	; (8010984 <xTaskCreate+0x1c8>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8010950:	4a0d      	ldr	r2, [pc, #52]	; (8010988 <xTaskCreate+0x1cc>)
 8010952:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010956:	601d      	str	r5, [r3, #0]
 8010958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801095a:	e791      	b.n	8010880 <xTaskCreate+0xc4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
 8010960:	e7ba      	b.n	80108d8 <xTaskCreate+0x11c>
 8010962:	bf00      	nop
 8010964:	20000978 	.word	0x20000978
 8010968:	200008e0 	.word	0x200008e0
 801096c:	200009d8 	.word	0x200009d8
 8010970:	e000ed04 	.word	0xe000ed04
 8010974:	200009a4 	.word	0x200009a4
 8010978:	200009c4 	.word	0x200009c4
 801097c:	200009f0 	.word	0x200009f0
 8010980:	200009dc 	.word	0x200009dc
 8010984:	200008e8 	.word	0x200008e8
 8010988:	200008e4 	.word	0x200008e4
 801098c:	200008ec 	.word	0x200008ec
 8010990:	20000988 	.word	0x20000988
 8010994:	2000098c 	.word	0x2000098c
 8010998:	20000990 	.word	0x20000990

0801099c <vTaskStartScheduler>:
{
 801099c:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 801099e:	4b1c      	ldr	r3, [pc, #112]	; (8010a10 <vTaskStartScheduler+0x74>)
{
 80109a0:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80109a2:	2400      	movs	r4, #0
 80109a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	491a      	ldr	r1, [pc, #104]	; (8010a14 <vTaskStartScheduler+0x78>)
 80109ac:	4623      	mov	r3, r4
 80109ae:	9400      	str	r4, [sp, #0]
 80109b0:	4819      	ldr	r0, [pc, #100]	; (8010a18 <vTaskStartScheduler+0x7c>)
 80109b2:	f7ff ff03 	bl	80107bc <xTaskCreate>
		if( xReturn == pdPASS )
 80109b6:	2801      	cmp	r0, #1
 80109b8:	d003      	beq.n	80109c2 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109ba:	3001      	adds	r0, #1
 80109bc:	d01c      	beq.n	80109f8 <vTaskStartScheduler+0x5c>
}
 80109be:	b003      	add	sp, #12
 80109c0:	bd30      	pop	{r4, r5, pc}
			xReturn = xTimerCreateTimerTask();
 80109c2:	f000 fcfd 	bl	80113c0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80109c6:	2801      	cmp	r0, #1
 80109c8:	d1f7      	bne.n	80109ba <vTaskStartScheduler+0x1e>
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	b672      	cpsid	i
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80109de:	490f      	ldr	r1, [pc, #60]	; (8010a1c <vTaskStartScheduler+0x80>)
 80109e0:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 80109e4:	4a0e      	ldr	r2, [pc, #56]	; (8010a20 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
 80109e6:	4b0f      	ldr	r3, [pc, #60]	; (8010a24 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80109e8:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80109ea:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80109ec:	601c      	str	r4, [r3, #0]
}
 80109ee:	b003      	add	sp, #12
 80109f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80109f4:	f000 bfb4 	b.w	8011960 <xPortStartScheduler>
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	b672      	cpsid	i
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	b662      	cpsie	i
 8010a0c:	e7fe      	b.n	8010a0c <vTaskStartScheduler+0x70>
 8010a0e:	bf00      	nop
 8010a10:	200009b8 	.word	0x200009b8
 8010a14:	08021834 	.word	0x08021834
 8010a18:	08010731 	.word	0x08010731
 8010a1c:	200009bc 	.word	0x200009bc
 8010a20:	200009d8 	.word	0x200009d8
 8010a24:	20000a04 	.word	0x20000a04

08010a28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010a28:	4a02      	ldr	r2, [pc, #8]	; (8010a34 <vTaskSuspendAll+0xc>)
 8010a2a:	6813      	ldr	r3, [r2, #0]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	6013      	str	r3, [r2, #0]
}
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	20000984 	.word	0x20000984

08010a38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010a38:	4b01      	ldr	r3, [pc, #4]	; (8010a40 <xTaskGetTickCount+0x8>)
 8010a3a:	6818      	ldr	r0, [r3, #0]
}
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	20000a04 	.word	0x20000a04

08010a44 <xTaskGetTickCountFromISR>:
{
 8010a44:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a46:	f000 fff3 	bl	8011a30 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8010a4a:	4b01      	ldr	r3, [pc, #4]	; (8010a50 <xTaskGetTickCountFromISR+0xc>)
 8010a4c:	6818      	ldr	r0, [r3, #0]
}
 8010a4e:	bd08      	pop	{r3, pc}
 8010a50:	20000a04 	.word	0x20000a04

08010a54 <xTaskIncrementTick>:
{
 8010a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a58:	4b48      	ldr	r3, [pc, #288]	; (8010b7c <xTaskIncrementTick+0x128>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	b9bb      	cbnz	r3, 8010a8e <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010a5e:	4b48      	ldr	r3, [pc, #288]	; (8010b80 <xTaskIncrementTick+0x12c>)
 8010a60:	681e      	ldr	r6, [r3, #0]
 8010a62:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8010a64:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010a66:	b1fe      	cbz	r6, 8010aa8 <xTaskIncrementTick+0x54>
 8010a68:	4d46      	ldr	r5, [pc, #280]	; (8010b84 <xTaskIncrementTick+0x130>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010a6a:	682b      	ldr	r3, [r5, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010a6c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010a6e:	42b3      	cmp	r3, r6
 8010a70:	d92c      	bls.n	8010acc <xTaskIncrementTick+0x78>
 8010a72:	4f45      	ldr	r7, [pc, #276]	; (8010b88 <xTaskIncrementTick+0x134>)
 8010a74:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8010ba0 <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a78:	f8d8 3000 	ldr.w	r3, [r8]
 8010a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	bf28      	it	cs
 8010a8a:	2401      	movcs	r4, #1
 8010a8c:	e004      	b.n	8010a98 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
 8010a8e:	4a3f      	ldr	r2, [pc, #252]	; (8010b8c <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 8010a90:	2400      	movs	r4, #0
		++uxPendedTicks;
 8010a92:	6813      	ldr	r3, [r2, #0]
 8010a94:	3301      	adds	r3, #1
 8010a96:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8010a98:	4b3d      	ldr	r3, [pc, #244]	; (8010b90 <xTaskIncrementTick+0x13c>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8010a9c:	2b00      	cmp	r3, #0
}
 8010a9e:	bf0c      	ite	eq
 8010aa0:	4620      	moveq	r0, r4
 8010aa2:	2001      	movne	r0, #1
 8010aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8010aa8:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8010ba4 <xTaskIncrementTick+0x150>
 8010aac:	f8db 2000 	ldr.w	r2, [fp]
 8010ab0:	6812      	ldr	r2, [r2, #0]
 8010ab2:	2a00      	cmp	r2, #0
 8010ab4:	d04b      	beq.n	8010b4e <xTaskIncrementTick+0xfa>
 8010ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aba:	b672      	cpsid	i
 8010abc:	f383 8811 	msr	BASEPRI, r3
 8010ac0:	f3bf 8f6f 	isb	sy
 8010ac4:	f3bf 8f4f 	dsb	sy
 8010ac8:	b662      	cpsie	i
 8010aca:	e7fe      	b.n	8010aca <xTaskIncrementTick+0x76>
 8010acc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8010ba4 <xTaskIncrementTick+0x150>
 8010ad0:	4f2d      	ldr	r7, [pc, #180]	; (8010b88 <xTaskIncrementTick+0x134>)
 8010ad2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8010ba0 <xTaskIncrementTick+0x14c>
 8010ad6:	e02f      	b.n	8010b38 <xTaskIncrementTick+0xe4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010ad8:	f8db 2000 	ldr.w	r2, [fp]
 8010adc:	68d2      	ldr	r2, [r2, #12]
 8010ade:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010ae2:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ae6:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8010aea:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010aec:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8010aee:	d32c      	bcc.n	8010b4a <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010af0:	f7ff f8e8 	bl	800fcc4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010af4:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010af8:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010afc:	b109      	cbz	r1, 8010b02 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010afe:	f7ff f8e1 	bl	800fcc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b02:	4a24      	ldr	r2, [pc, #144]	; (8010b94 <xTaskIncrementTick+0x140>)
 8010b04:	f04f 0c01 	mov.w	ip, #1
 8010b08:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8010b0c:	4651      	mov	r1, sl
 8010b0e:	6813      	ldr	r3, [r2, #0]
 8010b10:	fa0c fc00 	lsl.w	ip, ip, r0
 8010b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010b18:	ea4c 0c03 	orr.w	ip, ip, r3
 8010b1c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010b20:	f8c2 c000 	str.w	ip, [r2]
 8010b24:	f7ff f8a4 	bl	800fc70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b28:	f8d8 0000 	ldr.w	r0, [r8]
 8010b2c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8010b30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8010b32:	4291      	cmp	r1, r2
 8010b34:	bf28      	it	cs
 8010b36:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b38:	f8db 2000 	ldr.w	r2, [fp]
 8010b3c:	6812      	ldr	r2, [r2, #0]
 8010b3e:	2a00      	cmp	r2, #0
 8010b40:	d1ca      	bne.n	8010ad8 <xTaskIncrementTick+0x84>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b42:	f04f 33ff 	mov.w	r3, #4294967295
 8010b46:	602b      	str	r3, [r5, #0]
					break;
 8010b48:	e796      	b.n	8010a78 <xTaskIncrementTick+0x24>
						xNextTaskUnblockTime = xItemValue;
 8010b4a:	6029      	str	r1, [r5, #0]
						break;
 8010b4c:	e794      	b.n	8010a78 <xTaskIncrementTick+0x24>
			taskSWITCH_DELAYED_LISTS();
 8010b4e:	4a12      	ldr	r2, [pc, #72]	; (8010b98 <xTaskIncrementTick+0x144>)
 8010b50:	f8db 0000 	ldr.w	r0, [fp]
 8010b54:	4911      	ldr	r1, [pc, #68]	; (8010b9c <xTaskIncrementTick+0x148>)
 8010b56:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b58:	4d0a      	ldr	r5, [pc, #40]	; (8010b84 <xTaskIncrementTick+0x130>)
			taskSWITCH_DELAYED_LISTS();
 8010b5a:	f8cb 4000 	str.w	r4, [fp]
 8010b5e:	6010      	str	r0, [r2, #0]
 8010b60:	680a      	ldr	r2, [r1, #0]
 8010b62:	3201      	adds	r2, #1
 8010b64:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b66:	f8db 3000 	ldr.w	r3, [fp]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	b91b      	cbnz	r3, 8010b76 <xTaskIncrementTick+0x122>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b72:	602b      	str	r3, [r5, #0]
 8010b74:	e779      	b.n	8010a6a <xTaskIncrementTick+0x16>
 8010b76:	f7ff fe15 	bl	80107a4 <prvResetNextTaskUnblockTime.part.1>
 8010b7a:	e776      	b.n	8010a6a <xTaskIncrementTick+0x16>
 8010b7c:	20000984 	.word	0x20000984
 8010b80:	20000a04 	.word	0x20000a04
 8010b84:	200009bc 	.word	0x200009bc
 8010b88:	200008ec 	.word	0x200008ec
 8010b8c:	20000980 	.word	0x20000980
 8010b90:	20000a08 	.word	0x20000a08
 8010b94:	2000098c 	.word	0x2000098c
 8010b98:	200008e8 	.word	0x200008e8
 8010b9c:	200009c0 	.word	0x200009c0
 8010ba0:	200008e0 	.word	0x200008e0
 8010ba4:	200008e4 	.word	0x200008e4

08010ba8 <xTaskResumeAll>:
{
 8010ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8010bac:	4c36      	ldr	r4, [pc, #216]	; (8010c88 <xTaskResumeAll+0xe0>)
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	b953      	cbnz	r3, 8010bc8 <xTaskResumeAll+0x20>
 8010bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb6:	b672      	cpsid	i
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	b662      	cpsie	i
 8010bc6:	e7fe      	b.n	8010bc6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8010bc8:	f000 fe24 	bl	8011814 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bd2:	6824      	ldr	r4, [r4, #0]
 8010bd4:	bb74      	cbnz	r4, 8010c34 <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bd6:	4b2d      	ldr	r3, [pc, #180]	; (8010c8c <xTaskResumeAll+0xe4>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	b35b      	cbz	r3, 8010c34 <xTaskResumeAll+0x8c>
 8010bdc:	4d2c      	ldr	r5, [pc, #176]	; (8010c90 <xTaskResumeAll+0xe8>)
 8010bde:	4f2d      	ldr	r7, [pc, #180]	; (8010c94 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8010be0:	4e2d      	ldr	r6, [pc, #180]	; (8010c98 <xTaskResumeAll+0xf0>)
 8010be2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8010cac <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010be6:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8010cb0 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bea:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8010bec:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bf0:	b333      	cbz	r3, 8010c40 <xTaskResumeAll+0x98>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bf6:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bfa:	f104 0018 	add.w	r0, r4, #24
 8010bfe:	f7ff f861 	bl	800fcc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c02:	4650      	mov	r0, sl
 8010c04:	f7ff f85e 	bl	800fcc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010c0a:	6832      	ldr	r2, [r6, #0]
 8010c0c:	4651      	mov	r1, sl
 8010c0e:	fa08 f300 	lsl.w	r3, r8, r0
 8010c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c16:	4313      	orrs	r3, r2
 8010c18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010c1c:	6033      	str	r3, [r6, #0]
 8010c1e:	f7ff f827 	bl	800fc70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c22:	f8db 3000 	ldr.w	r3, [fp]
 8010c26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d3dd      	bcc.n	8010bea <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8010c2e:	f8c5 8000 	str.w	r8, [r5]
 8010c32:	e7da      	b.n	8010bea <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8010c34:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010c36:	f000 fe13 	bl	8011860 <vPortExitCritical>
}
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8010c40:	b13c      	cbz	r4, 8010c52 <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c42:	4b16      	ldr	r3, [pc, #88]	; (8010c9c <xTaskResumeAll+0xf4>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	b9db      	cbnz	r3, 8010c82 <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c4a:	4b15      	ldr	r3, [pc, #84]	; (8010ca0 <xTaskResumeAll+0xf8>)
 8010c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c50:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010c52:	4e14      	ldr	r6, [pc, #80]	; (8010ca4 <xTaskResumeAll+0xfc>)
 8010c54:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010c56:	b13c      	cbz	r4, 8010c68 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8010c58:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8010c5a:	f7ff fefb 	bl	8010a54 <xTaskIncrementTick>
 8010c5e:	b100      	cbz	r0, 8010c62 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8010c60:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010c62:	3c01      	subs	r4, #1
 8010c64:	d1f9      	bne.n	8010c5a <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8010c66:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d0e2      	beq.n	8010c34 <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 8010c6e:	4b0e      	ldr	r3, [pc, #56]	; (8010ca8 <xTaskResumeAll+0x100>)
 8010c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c74:	601a      	str	r2, [r3, #0]
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010c7e:	2401      	movs	r4, #1
 8010c80:	e7d9      	b.n	8010c36 <xTaskResumeAll+0x8e>
 8010c82:	f7ff fd8f 	bl	80107a4 <prvResetNextTaskUnblockTime.part.1>
 8010c86:	e7e4      	b.n	8010c52 <xTaskResumeAll+0xaa>
 8010c88:	20000984 	.word	0x20000984
 8010c8c:	20000978 	.word	0x20000978
 8010c90:	20000a08 	.word	0x20000a08
 8010c94:	200009c4 	.word	0x200009c4
 8010c98:	2000098c 	.word	0x2000098c
 8010c9c:	200008e4 	.word	0x200008e4
 8010ca0:	200009bc 	.word	0x200009bc
 8010ca4:	20000980 	.word	0x20000980
 8010ca8:	e000ed04 	.word	0xe000ed04
 8010cac:	200008ec 	.word	0x200008ec
 8010cb0:	200008e0 	.word	0x200008e0

08010cb4 <vTaskDelay>:
	{
 8010cb4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010cb6:	b1a8      	cbz	r0, 8010ce4 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8010cb8:	4b0f      	ldr	r3, [pc, #60]	; (8010cf8 <vTaskDelay+0x44>)
 8010cba:	6819      	ldr	r1, [r3, #0]
 8010cbc:	b151      	cbz	r1, 8010cd4 <vTaskDelay+0x20>
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	b672      	cpsid	i
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	b662      	cpsie	i
 8010cd2:	e7fe      	b.n	8010cd2 <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	3201      	adds	r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010cda:	f7ff fce5 	bl	80106a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010cde:	f7ff ff63 	bl	8010ba8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010ce2:	b938      	cbnz	r0, 8010cf4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8010ce4:	4b05      	ldr	r3, [pc, #20]	; (8010cfc <vTaskDelay+0x48>)
 8010ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cea:	601a      	str	r2, [r3, #0]
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	f3bf 8f6f 	isb	sy
	}
 8010cf4:	bd08      	pop	{r3, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20000984 	.word	0x20000984
 8010cfc:	e000ed04 	.word	0xe000ed04

08010d00 <vTaskSwitchContext>:
{
 8010d00:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d02:	4b1f      	ldr	r3, [pc, #124]	; (8010d80 <vTaskSwitchContext+0x80>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	bb03      	cbnz	r3, 8010d4a <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 8010d08:	4a1e      	ldr	r2, [pc, #120]	; (8010d84 <vTaskSwitchContext+0x84>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8010d0a:	4c1f      	ldr	r4, [pc, #124]	; (8010d88 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8010d0c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010d0e:	6822      	ldr	r2, [r4, #0]
 8010d10:	6823      	ldr	r3, [r4, #0]
 8010d12:	6812      	ldr	r2, [r2, #0]
 8010d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d926      	bls.n	8010d68 <vTaskSwitchContext+0x68>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010d1a:	4b1c      	ldr	r3, [pc, #112]	; (8010d8c <vTaskSwitchContext+0x8c>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010d1e:	fab3 f383 	clz	r3, r3
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	481a      	ldr	r0, [pc, #104]	; (8010d90 <vTaskSwitchContext+0x90>)
 8010d26:	f1c3 031f 	rsb	r3, r3, #31
 8010d2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010d2e:	0092      	lsls	r2, r2, #2
 8010d30:	5881      	ldr	r1, [r0, r2]
 8010d32:	1885      	adds	r5, r0, r2
 8010d34:	b169      	cbz	r1, 8010d52 <vTaskSwitchContext+0x52>
 8010d36:	6869      	ldr	r1, [r5, #4]
 8010d38:	3208      	adds	r2, #8
 8010d3a:	6849      	ldr	r1, [r1, #4]
 8010d3c:	4402      	add	r2, r0
 8010d3e:	4291      	cmp	r1, r2
 8010d40:	6069      	str	r1, [r5, #4]
 8010d42:	d017      	beq.n	8010d74 <vTaskSwitchContext+0x74>
 8010d44:	68cb      	ldr	r3, [r1, #12]
 8010d46:	6023      	str	r3, [r4, #0]
}
 8010d48:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 8010d4a:	4b0e      	ldr	r3, [pc, #56]	; (8010d84 <vTaskSwitchContext+0x84>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	601a      	str	r2, [r3, #0]
}
 8010d50:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	b672      	cpsid	i
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	b662      	cpsie	i
 8010d66:	e7fe      	b.n	8010d66 <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 8010d68:	6820      	ldr	r0, [r4, #0]
 8010d6a:	6821      	ldr	r1, [r4, #0]
 8010d6c:	3134      	adds	r1, #52	; 0x34
 8010d6e:	f7ef febf 	bl	8000af0 <vApplicationStackOverflowHook>
 8010d72:	e7d2      	b.n	8010d1a <vTaskSwitchContext+0x1a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010d74:	2214      	movs	r2, #20
 8010d76:	6849      	ldr	r1, [r1, #4]
 8010d78:	fb02 0303 	mla	r3, r2, r3, r0
 8010d7c:	6059      	str	r1, [r3, #4]
 8010d7e:	e7e1      	b.n	8010d44 <vTaskSwitchContext+0x44>
 8010d80:	20000984 	.word	0x20000984
 8010d84:	20000a08 	.word	0x20000a08
 8010d88:	200008e0 	.word	0x200008e0
 8010d8c:	2000098c 	.word	0x2000098c
 8010d90:	200008ec 	.word	0x200008ec

08010d94 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8010d94:	b950      	cbnz	r0, 8010dac <vTaskPlaceOnEventList+0x18>
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	e7fe      	b.n	8010daa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010dac:	4b06      	ldr	r3, [pc, #24]	; (8010dc8 <vTaskPlaceOnEventList+0x34>)
{
 8010dae:	b510      	push	{r4, lr}
 8010db0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010db2:	6819      	ldr	r1, [r3, #0]
 8010db4:	3118      	adds	r1, #24
 8010db6:	f7fe ff6b 	bl	800fc90 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010dba:	4620      	mov	r0, r4
 8010dbc:	2101      	movs	r1, #1
}
 8010dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010dc2:	f7ff bc71 	b.w	80106a8 <prvAddCurrentTaskToDelayedList>
 8010dc6:	bf00      	nop
 8010dc8:	200008e0 	.word	0x200008e0

08010dcc <vTaskPlaceOnEventListRestricted>:
	{
 8010dcc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8010dce:	b180      	cbz	r0, 8010df2 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010dd0:	4b0d      	ldr	r3, [pc, #52]	; (8010e08 <vTaskPlaceOnEventListRestricted+0x3c>)
 8010dd2:	460d      	mov	r5, r1
 8010dd4:	4614      	mov	r4, r2
 8010dd6:	6819      	ldr	r1, [r3, #0]
 8010dd8:	3118      	adds	r1, #24
 8010dda:	f7fe ff49 	bl	800fc70 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8010dde:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010de0:	4621      	mov	r1, r4
 8010de2:	bf0c      	ite	eq
 8010de4:	4628      	moveq	r0, r5
 8010de6:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8010dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010dee:	f7ff bc5b 	b.w	80106a8 <prvAddCurrentTaskToDelayedList>
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	b672      	cpsid	i
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	b662      	cpsie	i
 8010e06:	e7fe      	b.n	8010e06 <vTaskPlaceOnEventListRestricted+0x3a>
 8010e08:	200008e0 	.word	0x200008e0

08010e0c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010e0c:	68c3      	ldr	r3, [r0, #12]
{
 8010e0e:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010e10:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010e12:	b34c      	cbz	r4, 8010e68 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e14:	f104 0518 	add.w	r5, r4, #24
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f7fe ff53 	bl	800fcc4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e1e:	4b19      	ldr	r3, [pc, #100]	; (8010e84 <xTaskRemoveFromEventList+0x78>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	b9e3      	cbnz	r3, 8010e5e <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010e24:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010e26:	4d18      	ldr	r5, [pc, #96]	; (8010e88 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f7fe ff4b 	bl	800fcc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010e2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e30:	2301      	movs	r3, #1
 8010e32:	4631      	mov	r1, r6
 8010e34:	682e      	ldr	r6, [r5, #0]
 8010e36:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8010e3a:	4093      	lsls	r3, r2
 8010e3c:	4a13      	ldr	r2, [pc, #76]	; (8010e8c <xTaskRemoveFromEventList+0x80>)
 8010e3e:	4333      	orrs	r3, r6
 8010e40:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	f7fe ff13 	bl	800fc70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e4a:	4b11      	ldr	r3, [pc, #68]	; (8010e90 <xTaskRemoveFromEventList+0x84>)
 8010e4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d913      	bls.n	8010e7e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8010e56:	4b0f      	ldr	r3, [pc, #60]	; (8010e94 <xTaskRemoveFromEventList+0x88>)
 8010e58:	2001      	movs	r0, #1
 8010e5a:	6018      	str	r0, [r3, #0]
}
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e5e:	4629      	mov	r1, r5
 8010e60:	480d      	ldr	r0, [pc, #52]	; (8010e98 <xTaskRemoveFromEventList+0x8c>)
 8010e62:	f7fe ff05 	bl	800fc70 <vListInsertEnd>
 8010e66:	e7f0      	b.n	8010e4a <xTaskRemoveFromEventList+0x3e>
 8010e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6c:	b672      	cpsid	i
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	b662      	cpsie	i
 8010e7c:	e7fe      	b.n	8010e7c <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 8010e7e:	2000      	movs	r0, #0
}
 8010e80:	bd70      	pop	{r4, r5, r6, pc}
 8010e82:	bf00      	nop
 8010e84:	20000984 	.word	0x20000984
 8010e88:	2000098c 	.word	0x2000098c
 8010e8c:	200008ec 	.word	0x200008ec
 8010e90:	200008e0 	.word	0x200008e0
 8010e94:	20000a08 	.word	0x20000a08
 8010e98:	200009c4 	.word	0x200009c4

08010e9c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e9c:	4a03      	ldr	r2, [pc, #12]	; (8010eac <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e9e:	4b04      	ldr	r3, [pc, #16]	; (8010eb0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ea0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop
 8010eac:	200009c0 	.word	0x200009c0
 8010eb0:	20000a04 	.word	0x20000a04

08010eb4 <xTaskCheckForTimeOut>:
{
 8010eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8010eb6:	b350      	cbz	r0, 8010f0e <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 8010eb8:	b1f1      	cbz	r1, 8010ef8 <xTaskCheckForTimeOut+0x44>
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010ebe:	f000 fca9 	bl	8011814 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010ec2:	f8df c080 	ldr.w	ip, [pc, #128]	; 8010f44 <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 8010ec6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ec8:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8010eca:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8010ece:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ed0:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8010ed4:	d026      	beq.n	8010f24 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010ed6:	491a      	ldr	r1, [pc, #104]	; (8010f40 <xTaskCheckForTimeOut+0x8c>)
 8010ed8:	6822      	ldr	r2, [r4, #0]
 8010eda:	f8d1 e000 	ldr.w	lr, [r1]
 8010ede:	4572      	cmp	r2, lr
 8010ee0:	d001      	beq.n	8010ee6 <xTaskCheckForTimeOut+0x32>
 8010ee2:	42b7      	cmp	r7, r6
 8010ee4:	d929      	bls.n	8010f3a <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ee6:	4283      	cmp	r3, r0
 8010ee8:	d81e      	bhi.n	8010f28 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 8010eea:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8010eec:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8010eee:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8010ef0:	f000 fcb6 	bl	8011860 <vPortExitCritical>
}
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efc:	b672      	cpsid	i
 8010efe:	f383 8811 	msr	BASEPRI, r3
 8010f02:	f3bf 8f6f 	isb	sy
 8010f06:	f3bf 8f4f 	dsb	sy
 8010f0a:	b662      	cpsie	i
 8010f0c:	e7fe      	b.n	8010f0c <xTaskCheckForTimeOut+0x58>
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	b672      	cpsid	i
 8010f14:	f383 8811 	msr	BASEPRI, r3
 8010f18:	f3bf 8f6f 	isb	sy
 8010f1c:	f3bf 8f4f 	dsb	sy
 8010f20:	b662      	cpsie	i
 8010f22:	e7fe      	b.n	8010f22 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8010f24:	2600      	movs	r6, #0
 8010f26:	e7e3      	b.n	8010ef0 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f28:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 8010f2a:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f2c:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 8010f30:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8010f32:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f34:	e9c4 1200 	strd	r1, r2, [r4]
 8010f38:	e7da      	b.n	8010ef0 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8010f3a:	2601      	movs	r6, #1
 8010f3c:	e7d8      	b.n	8010ef0 <xTaskCheckForTimeOut+0x3c>
 8010f3e:	bf00      	nop
 8010f40:	200009c0 	.word	0x200009c0
 8010f44:	20000a04 	.word	0x20000a04

08010f48 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010f48:	4b01      	ldr	r3, [pc, #4]	; (8010f50 <vTaskMissedYield+0x8>)
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	601a      	str	r2, [r3, #0]
}
 8010f4e:	4770      	bx	lr
 8010f50:	20000a08 	.word	0x20000a08

08010f54 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8010f54:	4b01      	ldr	r3, [pc, #4]	; (8010f5c <xTaskGetCurrentTaskHandle+0x8>)
 8010f56:	6818      	ldr	r0, [r3, #0]
	}
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	200008e0 	.word	0x200008e0

08010f60 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010f60:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <xTaskGetSchedulerState+0x18>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	b133      	cbz	r3, 8010f74 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f66:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <xTaskGetSchedulerState+0x1c>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f6c:	bf0c      	ite	eq
 8010f6e:	2002      	moveq	r0, #2
 8010f70:	2000      	movne	r0, #0
 8010f72:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f74:	2001      	movs	r0, #1
	}
 8010f76:	4770      	bx	lr
 8010f78:	200009d8 	.word	0x200009d8
 8010f7c:	20000984 	.word	0x20000984

08010f80 <xTaskPriorityInherit>:
	{
 8010f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8010f84:	4607      	mov	r7, r0
 8010f86:	b1c8      	cbz	r0, 8010fbc <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f88:	4c26      	ldr	r4, [pc, #152]	; (8011024 <xTaskPriorityInherit+0xa4>)
 8010f8a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010f8c:	6821      	ldr	r1, [r4, #0]
 8010f8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010f90:	428a      	cmp	r2, r1
 8010f92:	d215      	bcs.n	8010fc0 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f94:	6981      	ldr	r1, [r0, #24]
 8010f96:	2900      	cmp	r1, #0
 8010f98:	db04      	blt.n	8010fa4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f9a:	6821      	ldr	r1, [r4, #0]
 8010f9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010f9e:	f1c1 0107 	rsb	r1, r1, #7
 8010fa2:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010fa4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010fa8:	4d1f      	ldr	r5, [pc, #124]	; (8011028 <xTaskPriorityInherit+0xa8>)
 8010faa:	6979      	ldr	r1, [r7, #20]
 8010fac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8010fb0:	4291      	cmp	r1, r2
 8010fb2:	d00e      	beq.n	8010fd2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fb4:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 8010fb6:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010fba:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 8010fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010fc0:	6822      	ldr	r2, [r4, #0]
 8010fc2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8010fc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010fc6:	4298      	cmp	r0, r3
 8010fc8:	bf2c      	ite	cs
 8010fca:	2000      	movcs	r0, #0
 8010fcc:	2001      	movcc	r0, #1
	}
 8010fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fd2:	f107 0804 	add.w	r8, r7, #4
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	f7fe fe74 	bl	800fcc4 <uxListRemove>
 8010fdc:	b9f8      	cbnz	r0, 801101e <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fe0:	4e12      	ldr	r6, [pc, #72]	; (801102c <xTaskPriorityInherit+0xac>)
 8010fe2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	58eb      	ldr	r3, [r5, r3]
 8010fea:	b933      	cbnz	r3, 8010ffa <xTaskPriorityInherit+0x7a>
 8010fec:	2101      	movs	r1, #1
 8010fee:	6833      	ldr	r3, [r6, #0]
 8010ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8010ff4:	ea23 0202 	bic.w	r2, r3, r2
 8010ff8:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ffa:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ffc:	2401      	movs	r4, #1
 8010ffe:	6833      	ldr	r3, [r6, #0]
 8011000:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011002:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011004:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011008:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801100a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801100e:	4313      	orrs	r3, r2
 8011010:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8011014:	6033      	str	r3, [r6, #0]
 8011016:	f7fe fe2b 	bl	800fc70 <vListInsertEnd>
				xReturn = pdTRUE;
 801101a:	4620      	mov	r0, r4
 801101c:	e7ce      	b.n	8010fbc <xTaskPriorityInherit+0x3c>
 801101e:	4e03      	ldr	r6, [pc, #12]	; (801102c <xTaskPriorityInherit+0xac>)
 8011020:	e7eb      	b.n	8010ffa <xTaskPriorityInherit+0x7a>
 8011022:	bf00      	nop
 8011024:	200008e0 	.word	0x200008e0
 8011028:	200008ec 	.word	0x200008ec
 801102c:	2000098c 	.word	0x2000098c

08011030 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8011030:	b178      	cbz	r0, 8011052 <xTaskPriorityDisinherit+0x22>
	{
 8011032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8011034:	4b2a      	ldr	r3, [pc, #168]	; (80110e0 <xTaskPriorityDisinherit+0xb0>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4283      	cmp	r3, r0
 801103a:	d00c      	beq.n	8011056 <xTaskPriorityDisinherit+0x26>
 801103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011040:	b672      	cpsid	i
 8011042:	f383 8811 	msr	BASEPRI, r3
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	b662      	cpsie	i
 8011050:	e7fe      	b.n	8011050 <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 8011052:	2000      	movs	r0, #0
	}
 8011054:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 8011056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011058:	b953      	cbnz	r3, 8011070 <xTaskPriorityDisinherit+0x40>
 801105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105e:	b672      	cpsid	i
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	b662      	cpsie	i
 801106e:	e7fe      	b.n	801106e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011070:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8011072:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011074:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8011076:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011078:	4291      	cmp	r1, r2
 801107a:	d000      	beq.n	801107e <xTaskPriorityDisinherit+0x4e>
 801107c:	b10b      	cbz	r3, 8011082 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 801107e:	2000      	movs	r0, #0
	}
 8011080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011082:	1d07      	adds	r7, r0, #4
 8011084:	4604      	mov	r4, r0
 8011086:	4638      	mov	r0, r7
 8011088:	f7fe fe1c 	bl	800fcc4 <uxListRemove>
 801108c:	b1b8      	cbz	r0, 80110be <xTaskPriorityDisinherit+0x8e>
 801108e:	4815      	ldr	r0, [pc, #84]	; (80110e4 <xTaskPriorityDisinherit+0xb4>)
 8011090:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011092:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8011094:	2501      	movs	r5, #1
 8011096:	f04f 0c14 	mov.w	ip, #20
 801109a:	f8d2 e000 	ldr.w	lr, [r2]
 801109e:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80110a4:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110a8:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 80110ac:	ea46 060e 	orr.w	r6, r6, lr
 80110b0:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80110b4:	6016      	str	r6, [r2, #0]
 80110b6:	f7fe fddb 	bl	800fc70 <vListInsertEnd>
					xReturn = pdTRUE;
 80110ba:	4628      	mov	r0, r5
	}
 80110bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80110be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80110c0:	2314      	movs	r3, #20
 80110c2:	4808      	ldr	r0, [pc, #32]	; (80110e4 <xTaskPriorityDisinherit+0xb4>)
 80110c4:	fb03 f301 	mul.w	r3, r3, r1
 80110c8:	4a07      	ldr	r2, [pc, #28]	; (80110e8 <xTaskPriorityDisinherit+0xb8>)
 80110ca:	58c3      	ldr	r3, [r0, r3]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1e0      	bne.n	8011092 <xTaskPriorityDisinherit+0x62>
 80110d0:	2501      	movs	r5, #1
 80110d2:	6813      	ldr	r3, [r2, #0]
 80110d4:	408d      	lsls	r5, r1
 80110d6:	ea23 0305 	bic.w	r3, r3, r5
 80110da:	6013      	str	r3, [r2, #0]
 80110dc:	e7d9      	b.n	8011092 <xTaskPriorityDisinherit+0x62>
 80110de:	bf00      	nop
 80110e0:	200008e0 	.word	0x200008e0
 80110e4:	200008ec 	.word	0x200008ec
 80110e8:	2000098c 	.word	0x2000098c

080110ec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80110ec:	b1b8      	cbz	r0, 801111e <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 80110ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80110f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80110f2:	b954      	cbnz	r4, 801110a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	b672      	cpsid	i
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	b662      	cpsie	i
 8011108:	e7fe      	b.n	8011108 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 801110a:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 801110c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801110e:	428b      	cmp	r3, r1
 8011110:	bf38      	it	cc
 8011112:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011114:	429a      	cmp	r2, r3
 8011116:	d001      	beq.n	801111c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8011118:	2c01      	cmp	r4, #1
 801111a:	d001      	beq.n	8011120 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 801111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801111e:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8011120:	4920      	ldr	r1, [pc, #128]	; (80111a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8011122:	6809      	ldr	r1, [r1, #0]
 8011124:	4281      	cmp	r1, r0
 8011126:	d022      	beq.n	801116e <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011128:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 801112a:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801112c:	2900      	cmp	r1, #0
 801112e:	db02      	blt.n	8011136 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011130:	f1c3 0307 	rsb	r3, r3, #7
 8011134:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011136:	4e1c      	ldr	r6, [pc, #112]	; (80111a8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8011138:	2514      	movs	r5, #20
 801113a:	6943      	ldr	r3, [r0, #20]
 801113c:	fb05 6202 	mla	r2, r5, r2, r6
 8011140:	4293      	cmp	r3, r2
 8011142:	d1eb      	bne.n	801111c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011144:	1d07      	adds	r7, r0, #4
 8011146:	4604      	mov	r4, r0
 8011148:	4638      	mov	r0, r7
 801114a:	f7fe fdbb 	bl	800fcc4 <uxListRemove>
 801114e:	b1c8      	cbz	r0, 8011184 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8011150:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011152:	4b16      	ldr	r3, [pc, #88]	; (80111ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 8011154:	2201      	movs	r2, #1
 8011156:	681c      	ldr	r4, [r3, #0]
 8011158:	2514      	movs	r5, #20
 801115a:	4639      	mov	r1, r7
 801115c:	4082      	lsls	r2, r0
 801115e:	fb05 6000 	mla	r0, r5, r0, r6
 8011162:	4322      	orrs	r2, r4
 8011164:	601a      	str	r2, [r3, #0]
	}
 8011166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 801116a:	f7fe bd81 	b.w	800fc70 <vListInsertEnd>
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	b672      	cpsid	i
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	b662      	cpsie	i
 8011182:	e7fe      	b.n	8011182 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011184:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011186:	2201      	movs	r2, #1
 8011188:	fb05 f500 	mul.w	r5, r5, r0
 801118c:	fa02 f400 	lsl.w	r4, r2, r0
 8011190:	5973      	ldr	r3, [r6, r5]
 8011192:	b10b      	cbz	r3, 8011198 <vTaskPriorityDisinheritAfterTimeout+0xac>
 8011194:	4b05      	ldr	r3, [pc, #20]	; (80111ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8011196:	e7dd      	b.n	8011154 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8011198:	4b04      	ldr	r3, [pc, #16]	; (80111ac <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	ea22 0204 	bic.w	r2, r2, r4
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	e7d7      	b.n	8011154 <vTaskPriorityDisinheritAfterTimeout+0x68>
 80111a4:	200008e0 	.word	0x200008e0
 80111a8:	200008ec 	.word	0x200008ec
 80111ac:	2000098c 	.word	0x2000098c

080111b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80111b0:	4b04      	ldr	r3, [pc, #16]	; (80111c4 <pvTaskIncrementMutexHeldCount+0x14>)
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	b11a      	cbz	r2, 80111be <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80111b6:	6819      	ldr	r1, [r3, #0]
 80111b8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80111ba:	3201      	adds	r2, #1
 80111bc:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80111be:	6818      	ldr	r0, [r3, #0]
	}
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	200008e0 	.word	0x200008e0

080111c8 <ulTaskNotifyTake>:
	{
 80111c8:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80111ca:	4c17      	ldr	r4, [pc, #92]	; (8011228 <ulTaskNotifyTake+0x60>)
	{
 80111cc:	4606      	mov	r6, r0
 80111ce:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80111d0:	f000 fb20 	bl	8011814 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111d8:	b923      	cbnz	r3, 80111e4 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	2101      	movs	r1, #1
 80111de:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80111e2:	b9ad      	cbnz	r5, 8011210 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 80111e4:	f000 fb3c 	bl	8011860 <vPortExitCritical>
		taskENTER_CRITICAL();
 80111e8:	f000 fb14 	bl	8011814 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80111f0:	b11d      	cbz	r5, 80111fa <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80111f2:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80111f4:	b94e      	cbnz	r6, 801120a <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80111f6:	1e6a      	subs	r2, r5, #1
 80111f8:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	2200      	movs	r2, #0
 80111fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8011202:	f000 fb2d 	bl	8011860 <vPortExitCritical>
	}
 8011206:	4628      	mov	r0, r5
 8011208:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801120a:	2200      	movs	r2, #0
 801120c:	64da      	str	r2, [r3, #76]	; 0x4c
 801120e:	e7f4      	b.n	80111fa <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011210:	4628      	mov	r0, r5
 8011212:	f7ff fa49 	bl	80106a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <ulTaskNotifyTake+0x64>)
 8011218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	f3bf 8f4f 	dsb	sy
 8011222:	f3bf 8f6f 	isb	sy
 8011226:	e7dd      	b.n	80111e4 <ulTaskNotifyTake+0x1c>
 8011228:	200008e0 	.word	0x200008e0
 801122c:	e000ed04 	.word	0xe000ed04

08011230 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8011230:	b308      	cbz	r0, 8011276 <vTaskNotifyGiveFromISR+0x46>
	{
 8011232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011236:	4604      	mov	r4, r0
 8011238:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801123a:	f000 fbf9 	bl	8011a30 <vPortValidateInterruptPriority>
	__asm volatile
 801123e:	f3ef 8711 	mrs	r7, BASEPRI
 8011242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011246:	b672      	cpsid	i
 8011248:	f383 8811 	msr	BASEPRI, r3
 801124c:	f3bf 8f6f 	isb	sy
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011256:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011258:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801125c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011260:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 8011262:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011264:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 8011266:	f103 0301 	add.w	r3, r3, #1
 801126a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801126c:	d00e      	beq.n	801128c <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 801126e:	f387 8811 	msr	BASEPRI, r7
	}
 8011272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8011276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127a:	b672      	cpsid	i
 801127c:	f383 8811 	msr	BASEPRI, r3
 8011280:	f3bf 8f6f 	isb	sy
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	b662      	cpsie	i
 801128a:	e7fe      	b.n	801128a <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801128c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801128e:	b153      	cbz	r3, 80112a6 <vTaskNotifyGiveFromISR+0x76>
 8011290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011294:	b672      	cpsid	i
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	b662      	cpsie	i
 80112a4:	e7fe      	b.n	80112a4 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112a6:	4b16      	ldr	r3, [pc, #88]	; (8011300 <vTaskNotifyGiveFromISR+0xd0>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	b9fb      	cbnz	r3, 80112ec <vTaskNotifyGiveFromISR+0xbc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112ac:	f104 0804 	add.w	r8, r4, #4
 80112b0:	4640      	mov	r0, r8
 80112b2:	f7fe fd07 	bl	800fcc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80112b8:	4a12      	ldr	r2, [pc, #72]	; (8011304 <vTaskNotifyGiveFromISR+0xd4>)
 80112ba:	f04f 0c14 	mov.w	ip, #20
 80112be:	fa05 f300 	lsl.w	r3, r5, r0
 80112c2:	4d11      	ldr	r5, [pc, #68]	; (8011308 <vTaskNotifyGiveFromISR+0xd8>)
 80112c4:	f8d2 e000 	ldr.w	lr, [r2]
 80112c8:	4641      	mov	r1, r8
 80112ca:	fb0c 5000 	mla	r0, ip, r0, r5
 80112ce:	ea43 030e 	orr.w	r3, r3, lr
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	f7fe fccc 	bl	800fc70 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80112d8:	4b0c      	ldr	r3, [pc, #48]	; (801130c <vTaskNotifyGiveFromISR+0xdc>)
 80112da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d9c4      	bls.n	801126e <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 80112e4:	b146      	cbz	r6, 80112f8 <vTaskNotifyGiveFromISR+0xc8>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80112e6:	2301      	movs	r3, #1
 80112e8:	6033      	str	r3, [r6, #0]
 80112ea:	e7c0      	b.n	801126e <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80112ec:	f104 0118 	add.w	r1, r4, #24
 80112f0:	4807      	ldr	r0, [pc, #28]	; (8011310 <vTaskNotifyGiveFromISR+0xe0>)
 80112f2:	f7fe fcbd 	bl	800fc70 <vListInsertEnd>
 80112f6:	e7ef      	b.n	80112d8 <vTaskNotifyGiveFromISR+0xa8>
						xYieldPending = pdTRUE;
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <vTaskNotifyGiveFromISR+0xe4>)
 80112fa:	2201      	movs	r2, #1
 80112fc:	601a      	str	r2, [r3, #0]
 80112fe:	e7b6      	b.n	801126e <vTaskNotifyGiveFromISR+0x3e>
 8011300:	20000984 	.word	0x20000984
 8011304:	2000098c 	.word	0x2000098c
 8011308:	200008ec 	.word	0x200008ec
 801130c:	200008e0 	.word	0x200008e0
 8011310:	200009c4 	.word	0x200009c4
 8011314:	20000a08 	.word	0x20000a08

08011318 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801131a:	4c12      	ldr	r4, [pc, #72]	; (8011364 <prvCheckForValidListAndQueue+0x4c>)
	taskENTER_CRITICAL();
 801131c:	f000 fa7a 	bl	8011814 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8011320:	6825      	ldr	r5, [r4, #0]
 8011322:	b11d      	cbz	r5, 801132c <prvCheckForValidListAndQueue+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8011324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8011328:	f000 ba9a 	b.w	8011860 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 801132c:	4f0e      	ldr	r7, [pc, #56]	; (8011368 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801132e:	4e0f      	ldr	r6, [pc, #60]	; (801136c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8011330:	4638      	mov	r0, r7
 8011332:	f7fe fc8d 	bl	800fc50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011336:	4630      	mov	r0, r6
 8011338:	f7fe fc8a 	bl	800fc50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801133c:	490c      	ldr	r1, [pc, #48]	; (8011370 <prvCheckForValidListAndQueue+0x58>)
			pxOverflowTimerList = &xActiveTimerList2;
 801133e:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8011340:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8011342:	600f      	str	r7, [r1, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8011344:	200a      	movs	r0, #10
 8011346:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8011348:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801134a:	f7fe fdab 	bl	800fea4 <xQueueGenericCreate>
 801134e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8011350:	2800      	cmp	r0, #0
 8011352:	d0e7      	beq.n	8011324 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011354:	4908      	ldr	r1, [pc, #32]	; (8011378 <prvCheckForValidListAndQueue+0x60>)
 8011356:	f7ff f96f 	bl	8010638 <vQueueAddToRegistry>
}
 801135a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801135e:	f000 ba7f 	b.w	8011860 <vPortExitCritical>
 8011362:	bf00      	nop
 8011364:	20000a40 	.word	0x20000a40
 8011368:	20000a14 	.word	0x20000a14
 801136c:	20000a28 	.word	0x20000a28
 8011370:	20000a0c 	.word	0x20000a0c
 8011374:	20000a10 	.word	0x20000a10
 8011378:	0802183c 	.word	0x0802183c

0801137c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801137c:	4291      	cmp	r1, r2
{
 801137e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011380:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011382:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8011384:	d805      	bhi.n	8011392 <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011386:	1ad2      	subs	r2, r2, r3
 8011388:	6983      	ldr	r3, [r0, #24]
 801138a:	429a      	cmp	r2, r3
 801138c:	d30c      	bcc.n	80113a8 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 801138e:	2001      	movs	r0, #1
}
 8011390:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011392:	429a      	cmp	r2, r3
 8011394:	d201      	bcs.n	801139a <prvInsertTimerInActiveList+0x1e>
 8011396:	4299      	cmp	r1, r3
 8011398:	d2f9      	bcs.n	801138e <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801139a:	4b07      	ldr	r3, [pc, #28]	; (80113b8 <prvInsertTimerInActiveList+0x3c>)
 801139c:	1d01      	adds	r1, r0, #4
 801139e:	6818      	ldr	r0, [r3, #0]
 80113a0:	f7fe fc76 	bl	800fc90 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80113a4:	2000      	movs	r0, #0
}
 80113a6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80113a8:	4b04      	ldr	r3, [pc, #16]	; (80113bc <prvInsertTimerInActiveList+0x40>)
 80113aa:	1d01      	adds	r1, r0, #4
 80113ac:	6818      	ldr	r0, [r3, #0]
 80113ae:	f7fe fc6f 	bl	800fc90 <vListInsert>
 80113b2:	2000      	movs	r0, #0
}
 80113b4:	bd08      	pop	{r3, pc}
 80113b6:	bf00      	nop
 80113b8:	20000a0c 	.word	0x20000a0c
 80113bc:	20000a10 	.word	0x20000a10

080113c0 <xTimerCreateTimerTask>:
{
 80113c0:	b500      	push	{lr}
 80113c2:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
 80113c4:	f7ff ffa8 	bl	8011318 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80113c8:	4b0e      	ldr	r3, [pc, #56]	; (8011404 <xTimerCreateTimerTask+0x44>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	b15b      	cbz	r3, 80113e6 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
 80113ce:	480e      	ldr	r0, [pc, #56]	; (8011408 <xTimerCreateTimerTask+0x48>)
 80113d0:	2102      	movs	r1, #2
 80113d2:	2300      	movs	r3, #0
 80113d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113d8:	e9cd 1000 	strd	r1, r0, [sp]
 80113dc:	490b      	ldr	r1, [pc, #44]	; (801140c <xTimerCreateTimerTask+0x4c>)
 80113de:	480c      	ldr	r0, [pc, #48]	; (8011410 <xTimerCreateTimerTask+0x50>)
 80113e0:	f7ff f9ec 	bl	80107bc <xTaskCreate>
	configASSERT( xReturn );
 80113e4:	b950      	cbnz	r0, 80113fc <xTimerCreateTimerTask+0x3c>
 80113e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ea:	b672      	cpsid	i
 80113ec:	f383 8811 	msr	BASEPRI, r3
 80113f0:	f3bf 8f6f 	isb	sy
 80113f4:	f3bf 8f4f 	dsb	sy
 80113f8:	b662      	cpsie	i
 80113fa:	e7fe      	b.n	80113fa <xTimerCreateTimerTask+0x3a>
}
 80113fc:	b003      	add	sp, #12
 80113fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011402:	bf00      	nop
 8011404:	20000a40 	.word	0x20000a40
 8011408:	20000a44 	.word	0x20000a44
 801140c:	08021844 	.word	0x08021844
 8011410:	08011551 	.word	0x08011551

08011414 <xTimerCreate>:
	{
 8011414:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8011418:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801141a:	2028      	movs	r0, #40	; 0x28
	{
 801141c:	460d      	mov	r5, r1
 801141e:	4616      	mov	r6, r2
 8011420:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8011422:	f000 fb5f 	bl	8011ae4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8011426:	4604      	mov	r4, r0
 8011428:	b1b8      	cbz	r0, 801145a <xTimerCreate+0x46>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801142a:	b955      	cbnz	r5, 8011442 <xTimerCreate+0x2e>
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	b672      	cpsid	i
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	b662      	cpsie	i
 8011440:	e7fe      	b.n	8011440 <xTimerCreate+0x2c>
		prvCheckForValidListAndQueue();
 8011442:	f7ff ff69 	bl	8011318 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011446:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8011448:	f8c4 9000 	str.w	r9, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801144c:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801144e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011450:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pvTimerID = pvTimerID;
 8011452:	e9c4 6707 	strd	r6, r7, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011456:	f7fe fc07 	bl	800fc68 <vListInitialiseItem>
	}
 801145a:	4620      	mov	r0, r4
 801145c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08011460 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8011460:	b1c0      	cbz	r0, 8011494 <xTimerGenericCommand+0x34>
{
 8011462:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8011464:	4d17      	ldr	r5, [pc, #92]	; (80114c4 <xTimerGenericCommand+0x64>)
 8011466:	4604      	mov	r4, r0
{
 8011468:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 801146a:	6828      	ldr	r0, [r5, #0]
 801146c:	b180      	cbz	r0, 8011490 <xTimerGenericCommand+0x30>
 801146e:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011470:	2905      	cmp	r1, #5
 8011472:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8011474:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011476:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801147a:	dc16      	bgt.n	80114aa <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801147c:	f7ff fd70 	bl	8010f60 <xTaskGetSchedulerState>
 8011480:	2802      	cmp	r0, #2
 8011482:	d018      	beq.n	80114b6 <xTimerGenericCommand+0x56>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011484:	2300      	movs	r3, #0
 8011486:	6828      	ldr	r0, [r5, #0]
 8011488:	4669      	mov	r1, sp
 801148a:	461a      	mov	r2, r3
 801148c:	f7fe fd36 	bl	800fefc <xQueueGenericSend>
}
 8011490:	b004      	add	sp, #16
 8011492:	bd70      	pop	{r4, r5, r6, pc}
 8011494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011498:	b672      	cpsid	i
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	b662      	cpsie	i
 80114a8:	e7fe      	b.n	80114a8 <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80114aa:	2300      	movs	r3, #0
 80114ac:	4669      	mov	r1, sp
 80114ae:	f7fe fe01 	bl	80100b4 <xQueueGenericSendFromISR>
}
 80114b2:	b004      	add	sp, #16
 80114b4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114b6:	6828      	ldr	r0, [r5, #0]
 80114b8:	2300      	movs	r3, #0
 80114ba:	9a08      	ldr	r2, [sp, #32]
 80114bc:	4669      	mov	r1, sp
 80114be:	f7fe fd1d 	bl	800fefc <xQueueGenericSend>
 80114c2:	e7e5      	b.n	8011490 <xTimerGenericCommand+0x30>
 80114c4:	20000a40 	.word	0x20000a40

080114c8 <prvSwitchTimerLists>:
{
 80114c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114cc:	4e1e      	ldr	r6, [pc, #120]	; (8011548 <prvSwitchTimerLists+0x80>)
 80114ce:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80114d0:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80114d4:	e00c      	b.n	80114f0 <prvSwitchTimerLists+0x28>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80114d6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80114d8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80114da:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80114dc:	1d25      	adds	r5, r4, #4
 80114de:	4628      	mov	r0, r5
 80114e0:	f7fe fbf0 	bl	800fcc4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114e6:	4620      	mov	r0, r4
 80114e8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80114ea:	69e3      	ldr	r3, [r4, #28]
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d00a      	beq.n	8011506 <prvSwitchTimerLists+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80114f0:	6833      	ldr	r3, [r6, #0]
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	2a00      	cmp	r2, #0
 80114f6:	d1ee      	bne.n	80114d6 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80114f8:	4a14      	ldr	r2, [pc, #80]	; (801154c <prvSwitchTimerLists+0x84>)
 80114fa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80114fc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80114fe:	6031      	str	r1, [r6, #0]
}
 8011500:	b002      	add	sp, #8
 8011502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011506:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011508:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801150a:	2300      	movs	r3, #0
 801150c:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801150e:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011510:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 8011512:	42af      	cmp	r7, r5
 8011514:	d205      	bcs.n	8011522 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011516:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011518:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801151a:	6830      	ldr	r0, [r6, #0]
 801151c:	f7fe fbb8 	bl	800fc90 <vListInsert>
 8011520:	e7e6      	b.n	80114f0 <prvSwitchTimerLists+0x28>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011522:	f8cd 8000 	str.w	r8, [sp]
 8011526:	4619      	mov	r1, r3
 8011528:	f7ff ff9a 	bl	8011460 <xTimerGenericCommand>
				configASSERT( xResult );
 801152c:	2800      	cmp	r0, #0
 801152e:	d1df      	bne.n	80114f0 <prvSwitchTimerLists+0x28>
 8011530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011534:	b672      	cpsid	i
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	b662      	cpsie	i
 8011544:	e7fe      	b.n	8011544 <prvSwitchTimerLists+0x7c>
 8011546:	bf00      	nop
 8011548:	20000a0c 	.word	0x20000a0c
 801154c:	20000a10 	.word	0x20000a10

08011550 <prvTimerTask>:
{
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	4f71      	ldr	r7, [pc, #452]	; (801171c <prvTimerTask+0x1cc>)
 8011556:	b087      	sub	sp, #28
 8011558:	4e71      	ldr	r6, [pc, #452]	; (8011720 <prvTimerTask+0x1d0>)
 801155a:	f04f 0801 	mov.w	r8, #1
 801155e:	4d71      	ldr	r5, [pc, #452]	; (8011724 <prvTimerTask+0x1d4>)
 8011560:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801172c <prvTimerTask+0x1dc>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011568:	2c00      	cmp	r4, #0
 801156a:	d04e      	beq.n	801160a <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8011570:	f7ff fa5a 	bl	8010a28 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011574:	f7ff fa60 	bl	8010a38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011578:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801157a:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 801157c:	4298      	cmp	r0, r3
 801157e:	d34c      	bcc.n	801161a <prvTimerTask+0xca>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011580:	4284      	cmp	r4, r0
	xLastTime = xTimeNow;
 8011582:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011584:	d95c      	bls.n	8011640 <prvTimerTask+0xf0>
 8011586:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011588:	eba4 0109 	sub.w	r1, r4, r9
 801158c:	6828      	ldr	r0, [r5, #0]
 801158e:	f7ff f867 	bl	8010660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011592:	f7ff fb09 	bl	8010ba8 <xTaskResumeAll>
 8011596:	b938      	cbnz	r0, 80115a8 <prvTimerTask+0x58>
					portYIELD_WITHIN_API();
 8011598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801159c:	4a62      	ldr	r2, [pc, #392]	; (8011728 <prvTimerTask+0x1d8>)
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	f3bf 8f4f 	dsb	sy
 80115a4:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80115a8:	2200      	movs	r2, #0
 80115aa:	a902      	add	r1, sp, #8
 80115ac:	6828      	ldr	r0, [r5, #0]
 80115ae:	f7fe fe53 	bl	8010258 <xQueueReceive>
 80115b2:	2800      	cmp	r0, #0
 80115b4:	d0d6      	beq.n	8011564 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80115b6:	9b02      	ldr	r3, [sp, #8]
 80115b8:	9c04      	ldr	r4, [sp, #16]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	da07      	bge.n	80115ce <prvTimerTask+0x7e>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80115be:	9b03      	ldr	r3, [sp, #12]
 80115c0:	4620      	mov	r0, r4
 80115c2:	9905      	ldr	r1, [sp, #20]
 80115c4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80115c6:	9b02      	ldr	r3, [sp, #8]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	dbed      	blt.n	80115a8 <prvTimerTask+0x58>
 80115cc:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80115ce:	6963      	ldr	r3, [r4, #20]
 80115d0:	b113      	cbz	r3, 80115d8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115d2:	1d20      	adds	r0, r4, #4
 80115d4:	f7fe fb76 	bl	800fcc4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80115d8:	f7ff fa2e 	bl	8010a38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80115dc:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80115de:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 80115e0:	4298      	cmp	r0, r3
 80115e2:	d321      	bcc.n	8011628 <prvTimerTask+0xd8>
 80115e4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80115e6:	f8c6 9000 	str.w	r9, [r6]
 80115ea:	2b09      	cmp	r3, #9
 80115ec:	d8dc      	bhi.n	80115a8 <prvTimerTask+0x58>
 80115ee:	fa08 f303 	lsl.w	r3, r8, r3
 80115f2:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
 80115f6:	d136      	bne.n	8011666 <prvTimerTask+0x116>
 80115f8:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80115fc:	d13e      	bne.n	801167c <prvTimerTask+0x12c>
 80115fe:	069b      	lsls	r3, r3, #26
 8011600:	d5d2      	bpl.n	80115a8 <prvTimerTask+0x58>
						vPortFree( pxTimer );
 8011602:	4620      	mov	r0, r4
 8011604:	f000 fb0c 	bl	8011c20 <vPortFree>
 8011608:	e7ce      	b.n	80115a8 <prvTimerTask+0x58>
	vTaskSuspendAll();
 801160a:	f7ff fa0d 	bl	8010a28 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801160e:	f7ff fa13 	bl	8010a38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011612:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8011614:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8011616:	4283      	cmp	r3, r0
 8011618:	d909      	bls.n	801162e <prvTimerTask+0xde>
		prvSwitchTimerLists();
 801161a:	f7ff ff55 	bl	80114c8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801161e:	f8c6 9000 	str.w	r9, [r6]
			( void ) xTaskResumeAll();
 8011622:	f7ff fac1 	bl	8010ba8 <xTaskResumeAll>
 8011626:	e7bf      	b.n	80115a8 <prvTimerTask+0x58>
		prvSwitchTimerLists();
 8011628:	f7ff ff4e 	bl	80114c8 <prvSwitchTimerLists>
 801162c:	e7da      	b.n	80115e4 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801162e:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8011632:	f8c6 9000 	str.w	r9, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	fab2 f282 	clz	r2, r2
 801163c:	0952      	lsrs	r2, r2, #5
 801163e:	e7a3      	b.n	8011588 <prvTimerTask+0x38>
				( void ) xTaskResumeAll();
 8011640:	f7ff fab2 	bl	8010ba8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801164c:	f10b 0004 	add.w	r0, fp, #4
 8011650:	f7fe fb38 	bl	800fcc4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011658:	2b01      	cmp	r3, #1
 801165a:	d036      	beq.n	80116ca <prvTimerTask+0x17a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801165c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8011660:	4658      	mov	r0, fp
 8011662:	4798      	blx	r3
 8011664:	e7a0      	b.n	80115a8 <prvTimerTask+0x58>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011666:	9903      	ldr	r1, [sp, #12]
 8011668:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801166a:	2900      	cmp	r1, #0
 801166c:	d04b      	beq.n	8011706 <prvTimerTask+0x1b6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801166e:	4449      	add	r1, r9
 8011670:	4620      	mov	r0, r4
 8011672:	464b      	mov	r3, r9
 8011674:	464a      	mov	r2, r9
 8011676:	f7ff fe81 	bl	801137c <prvInsertTimerInActiveList>
 801167a:	e795      	b.n	80115a8 <prvTimerTask+0x58>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	464a      	mov	r2, r9
 8011680:	69a1      	ldr	r1, [r4, #24]
 8011682:	4620      	mov	r0, r4
 8011684:	4419      	add	r1, r3
 8011686:	f7ff fe79 	bl	801137c <prvInsertTimerInActiveList>
 801168a:	2800      	cmp	r0, #0
 801168c:	d08c      	beq.n	80115a8 <prvTimerTask+0x58>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801168e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011690:	4620      	mov	r0, r4
 8011692:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011694:	69e3      	ldr	r3, [r4, #28]
 8011696:	2b01      	cmp	r3, #1
 8011698:	d186      	bne.n	80115a8 <prvTimerTask+0x58>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801169a:	9a03      	ldr	r2, [sp, #12]
 801169c:	4620      	mov	r0, r4
 801169e:	69a4      	ldr	r4, [r4, #24]
 80116a0:	465b      	mov	r3, fp
 80116a2:	f8cd b000 	str.w	fp, [sp]
 80116a6:	4659      	mov	r1, fp
 80116a8:	4422      	add	r2, r4
 80116aa:	f7ff fed9 	bl	8011460 <xTimerGenericCommand>
							configASSERT( xResult );
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f47f af7a 	bne.w	80115a8 <prvTimerTask+0x58>
 80116b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b8:	b672      	cpsid	i
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	b662      	cpsie	i
 80116c8:	e7fe      	b.n	80116c8 <prvTimerTask+0x178>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80116ca:	f8db 1018 	ldr.w	r1, [fp, #24]
 80116ce:	464a      	mov	r2, r9
 80116d0:	4623      	mov	r3, r4
 80116d2:	4658      	mov	r0, fp
 80116d4:	4421      	add	r1, r4
 80116d6:	f7ff fe51 	bl	801137c <prvInsertTimerInActiveList>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d0be      	beq.n	801165c <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80116de:	2300      	movs	r3, #0
 80116e0:	4622      	mov	r2, r4
 80116e2:	4658      	mov	r0, fp
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	4619      	mov	r1, r3
 80116e8:	f7ff feba 	bl	8011460 <xTimerGenericCommand>
			configASSERT( xResult );
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d1b5      	bne.n	801165c <prvTimerTask+0x10c>
 80116f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f4:	b672      	cpsid	i
 80116f6:	f383 8811 	msr	BASEPRI, r3
 80116fa:	f3bf 8f6f 	isb	sy
 80116fe:	f3bf 8f4f 	dsb	sy
 8011702:	b662      	cpsie	i
 8011704:	e7fe      	b.n	8011704 <prvTimerTask+0x1b4>
 8011706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170a:	b672      	cpsid	i
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	b662      	cpsie	i
 801171a:	e7fe      	b.n	801171a <prvTimerTask+0x1ca>
 801171c:	20000a0c 	.word	0x20000a0c
 8011720:	20000a3c 	.word	0x20000a3c
 8011724:	20000a40 	.word	0x20000a40
 8011728:	e000ed04 	.word	0xe000ed04
 801172c:	20000a10 	.word	0x20000a10

08011730 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011730:	4b10      	ldr	r3, [pc, #64]	; (8011774 <prvTaskExitError+0x44>)
{
 8011732:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8011734:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8011736:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8011738:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801173a:	3301      	adds	r3, #1
 801173c:	d00a      	beq.n	8011754 <prvTaskExitError+0x24>
 801173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011742:	b672      	cpsid	i
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	b662      	cpsie	i
 8011752:	e7fe      	b.n	8011752 <prvTaskExitError+0x22>
 8011754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011758:	b672      	cpsid	i
 801175a:	f383 8811 	msr	BASEPRI, r3
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	f3bf 8f4f 	dsb	sy
 8011766:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011768:	9b01      	ldr	r3, [sp, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d0fc      	beq.n	8011768 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801176e:	b002      	add	sp, #8
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	2000043c 	.word	0x2000043c

08011778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011778:	4808      	ldr	r0, [pc, #32]	; (801179c <prvPortStartFirstTask+0x24>)
 801177a:	6800      	ldr	r0, [r0, #0]
 801177c:	6800      	ldr	r0, [r0, #0]
 801177e:	f380 8808 	msr	MSP, r0
 8011782:	f04f 0000 	mov.w	r0, #0
 8011786:	f380 8814 	msr	CONTROL, r0
 801178a:	b662      	cpsie	i
 801178c:	b661      	cpsie	f
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	f3bf 8f6f 	isb	sy
 8011796:	df00      	svc	0
 8011798:	bf00      	nop
 801179a:	0000      	.short	0x0000
 801179c:	e000ed08 	.word	0xe000ed08

080117a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80117a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80117b0 <vPortEnableVFP+0x10>
 80117a4:	6801      	ldr	r1, [r0, #0]
 80117a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80117aa:	6001      	str	r1, [r0, #0]
 80117ac:	4770      	bx	lr
 80117ae:	0000      	.short	0x0000
 80117b0:	e000ed88 	.word	0xe000ed88

080117b4 <pxPortInitialiseStack>:
{
 80117b4:	b470      	push	{r4, r5, r6}
 80117b6:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117b8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117bc:	4d08      	ldr	r5, [pc, #32]	; (80117e0 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117be:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117c2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117c6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80117ca:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117cc:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117ce:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117d2:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117d6:	f843 4c24 	str.w	r4, [r3, #-36]
}
 80117da:	bc70      	pop	{r4, r5, r6}
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	08011731 	.word	0x08011731
	...

080117f0 <SVC_Handler>:
	__asm volatile (
 80117f0:	4b07      	ldr	r3, [pc, #28]	; (8011810 <pxCurrentTCBConst2>)
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	6808      	ldr	r0, [r1, #0]
 80117f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fa:	f380 8809 	msr	PSP, r0
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f04f 0000 	mov.w	r0, #0
 8011806:	f380 8811 	msr	BASEPRI, r0
 801180a:	4770      	bx	lr
 801180c:	f3af 8000 	nop.w

08011810 <pxCurrentTCBConst2>:
 8011810:	200008e0 	.word	0x200008e0

08011814 <vPortEnterCritical>:
 8011814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011818:	b672      	cpsid	i
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	b662      	cpsie	i
	uxCriticalNesting++;
 8011828:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <vPortEnterCritical+0x44>)
 801182a:	6813      	ldr	r3, [r2, #0]
 801182c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801182e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8011830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8011832:	d000      	beq.n	8011836 <vPortEnterCritical+0x22>
}
 8011834:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011836:	4b09      	ldr	r3, [pc, #36]	; (801185c <vPortEnterCritical+0x48>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801183e:	d0f9      	beq.n	8011834 <vPortEnterCritical+0x20>
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	b672      	cpsid	i
 8011846:	f383 8811 	msr	BASEPRI, r3
 801184a:	f3bf 8f6f 	isb	sy
 801184e:	f3bf 8f4f 	dsb	sy
 8011852:	b662      	cpsie	i
 8011854:	e7fe      	b.n	8011854 <vPortEnterCritical+0x40>
 8011856:	bf00      	nop
 8011858:	2000043c 	.word	0x2000043c
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011860:	4a09      	ldr	r2, [pc, #36]	; (8011888 <vPortExitCritical+0x28>)
 8011862:	6813      	ldr	r3, [r2, #0]
 8011864:	b953      	cbnz	r3, 801187c <vPortExitCritical+0x1c>
 8011866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186a:	b672      	cpsid	i
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	b662      	cpsie	i
 801187a:	e7fe      	b.n	801187a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801187c:	3b01      	subs	r3, #1
 801187e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011880:	b90b      	cbnz	r3, 8011886 <vPortExitCritical+0x26>
	__asm volatile
 8011882:	f383 8811 	msr	BASEPRI, r3
}
 8011886:	4770      	bx	lr
 8011888:	2000043c 	.word	0x2000043c
 801188c:	00000000 	.word	0x00000000

08011890 <PendSV_Handler>:
	__asm volatile
 8011890:	f3ef 8009 	mrs	r0, PSP
 8011894:	f3bf 8f6f 	isb	sy
 8011898:	4b15      	ldr	r3, [pc, #84]	; (80118f0 <pxCurrentTCBConst>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	f01e 0f10 	tst.w	lr, #16
 80118a0:	bf08      	it	eq
 80118a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80118a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118aa:	6010      	str	r0, [r2, #0]
 80118ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80118b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80118b4:	b672      	cpsid	i
 80118b6:	f380 8811 	msr	BASEPRI, r0
 80118ba:	f3bf 8f4f 	dsb	sy
 80118be:	f3bf 8f6f 	isb	sy
 80118c2:	b662      	cpsie	i
 80118c4:	f7ff fa1c 	bl	8010d00 <vTaskSwitchContext>
 80118c8:	f04f 0000 	mov.w	r0, #0
 80118cc:	f380 8811 	msr	BASEPRI, r0
 80118d0:	bc09      	pop	{r0, r3}
 80118d2:	6819      	ldr	r1, [r3, #0]
 80118d4:	6808      	ldr	r0, [r1, #0]
 80118d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118da:	f01e 0f10 	tst.w	lr, #16
 80118de:	bf08      	it	eq
 80118e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80118e4:	f380 8809 	msr	PSP, r0
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <pxCurrentTCBConst>:
 80118f0:	200008e0 	.word	0x200008e0

080118f4 <SysTick_Handler>:
{
 80118f4:	b508      	push	{r3, lr}
	__asm volatile
 80118f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fa:	b672      	cpsid	i
 80118fc:	f383 8811 	msr	BASEPRI, r3
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801190a:	f7ff f8a3 	bl	8010a54 <xTaskIncrementTick>
 801190e:	b118      	cbz	r0, 8011918 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011910:	4b03      	ldr	r3, [pc, #12]	; (8011920 <SysTick_Handler+0x2c>)
 8011912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011916:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011918:	2300      	movs	r3, #0
 801191a:	f383 8811 	msr	BASEPRI, r3
}
 801191e:	bd08      	pop	{r3, pc}
 8011920:	e000ed04 	.word	0xe000ed04

08011924 <vPortSetupTimerInterrupt>:
{
 8011924:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011926:	2300      	movs	r3, #0
 8011928:	4a08      	ldr	r2, [pc, #32]	; (801194c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801192a:	4c09      	ldr	r4, [pc, #36]	; (8011950 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801192c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801192e:	4809      	ldr	r0, [pc, #36]	; (8011954 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011932:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011934:	4c08      	ldr	r4, [pc, #32]	; (8011958 <vPortSetupTimerInterrupt+0x34>)
 8011936:	6803      	ldr	r3, [r0, #0]
 8011938:	4808      	ldr	r0, [pc, #32]	; (801195c <vPortSetupTimerInterrupt+0x38>)
 801193a:	fba4 4303 	umull	r4, r3, r4, r3
}
 801193e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011942:	099b      	lsrs	r3, r3, #6
 8011944:	3b01      	subs	r3, #1
 8011946:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011948:	6011      	str	r1, [r2, #0]
}
 801194a:	4770      	bx	lr
 801194c:	e000e010 	.word	0xe000e010
 8011950:	e000e018 	.word	0xe000e018
 8011954:	200002b8 	.word	0x200002b8
 8011958:	10624dd3 	.word	0x10624dd3
 801195c:	e000e014 	.word	0xe000e014

08011960 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011960:	4b2d      	ldr	r3, [pc, #180]	; (8011a18 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011962:	492e      	ldr	r1, [pc, #184]	; (8011a1c <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011964:	482e      	ldr	r0, [pc, #184]	; (8011a20 <xPortStartScheduler+0xc0>)
{
 8011966:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011968:	781a      	ldrb	r2, [r3, #0]
{
 801196a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801196c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801196e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011970:	b2d2      	uxtb	r2, r2
 8011972:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011974:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011976:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011978:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801197a:	b2db      	uxtb	r3, r3
 801197c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011980:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011984:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011988:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801198c:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801198e:	0611      	lsls	r1, r2, #24
 8011990:	d510      	bpl.n	80119b4 <xPortStartScheduler+0x54>
 8011992:	2306      	movs	r3, #6
 8011994:	e000      	b.n	8011998 <xPortStartScheduler+0x38>
 8011996:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011998:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801199c:	1e59      	subs	r1, r3, #1
 801199e:	0052      	lsls	r2, r2, #1
 80119a0:	b2d2      	uxtb	r2, r2
 80119a2:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80119aa:	0612      	lsls	r2, r2, #24
 80119ac:	d4f3      	bmi.n	8011996 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80119ae:	2b03      	cmp	r3, #3
 80119b0:	6003      	str	r3, [r0, #0]
 80119b2:	d00a      	beq.n	80119ca <xPortStartScheduler+0x6a>
	__asm volatile
 80119b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b8:	b672      	cpsid	i
 80119ba:	f383 8811 	msr	BASEPRI, r3
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f3bf 8f4f 	dsb	sy
 80119c6:	b662      	cpsie	i
 80119c8:	e7fe      	b.n	80119c8 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119ca:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80119cc:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119ce:	4a15      	ldr	r2, [pc, #84]	; (8011a24 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 80119d0:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119d2:	b2c9      	uxtb	r1, r1
 80119d4:	4d10      	ldr	r5, [pc, #64]	; (8011a18 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80119d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80119da:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119dc:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119de:	6813      	ldr	r3, [r2, #0]
 80119e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119e6:	6813      	ldr	r3, [r2, #0]
 80119e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119ec:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80119ee:	f7ff ff99 	bl	8011924 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80119f2:	4b0d      	ldr	r3, [pc, #52]	; (8011a28 <xPortStartScheduler+0xc8>)
 80119f4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80119f6:	f7ff fed3 	bl	80117a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119fa:	4a0c      	ldr	r2, [pc, #48]	; (8011a2c <xPortStartScheduler+0xcc>)
 80119fc:	6813      	ldr	r3, [r2, #0]
 80119fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a02:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8011a04:	f7ff feb8 	bl	8011778 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8011a08:	f7ff f97a 	bl	8010d00 <vTaskSwitchContext>
	prvTaskExitError();
 8011a0c:	f7ff fe90 	bl	8011730 <prvTaskExitError>
}
 8011a10:	4620      	mov	r0, r4
 8011a12:	b003      	add	sp, #12
 8011a14:	bd30      	pop	{r4, r5, pc}
 8011a16:	bf00      	nop
 8011a18:	e000e400 	.word	0xe000e400
 8011a1c:	20000a48 	.word	0x20000a48
 8011a20:	20000a4c 	.word	0x20000a4c
 8011a24:	e000ed20 	.word	0xe000ed20
 8011a28:	2000043c 	.word	0x2000043c
 8011a2c:	e000ef34 	.word	0xe000ef34

08011a30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011a30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011a34:	2b0f      	cmp	r3, #15
 8011a36:	d910      	bls.n	8011a5a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a38:	4912      	ldr	r1, [pc, #72]	; (8011a84 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a3a:	4a13      	ldr	r2, [pc, #76]	; (8011a88 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a3c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a3e:	7812      	ldrb	r2, [r2, #0]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d90a      	bls.n	8011a5a <vPortValidateInterruptPriority+0x2a>
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	b672      	cpsid	i
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	b662      	cpsie	i
 8011a58:	e7fe      	b.n	8011a58 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a5a:	4b0c      	ldr	r3, [pc, #48]	; (8011a8c <vPortValidateInterruptPriority+0x5c>)
 8011a5c:	4a0c      	ldr	r2, [pc, #48]	; (8011a90 <vPortValidateInterruptPriority+0x60>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	6812      	ldr	r2, [r2, #0]
 8011a62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d90a      	bls.n	8011a80 <vPortValidateInterruptPriority+0x50>
 8011a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6e:	b672      	cpsid	i
 8011a70:	f383 8811 	msr	BASEPRI, r3
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	b662      	cpsie	i
 8011a7e:	e7fe      	b.n	8011a7e <vPortValidateInterruptPriority+0x4e>
	}
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	e000e3f0 	.word	0xe000e3f0
 8011a88:	20000a48 	.word	0x20000a48
 8011a8c:	e000ed0c 	.word	0xe000ed0c
 8011a90:	20000a4c 	.word	0x20000a4c

08011a94 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a94:	4b11      	ldr	r3, [pc, #68]	; (8011adc <prvInsertBlockIntoFreeList+0x48>)
{
 8011a96:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	4282      	cmp	r2, r0
 8011a9c:	d201      	bcs.n	8011aa2 <prvInsertBlockIntoFreeList+0xe>
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	e7fa      	b.n	8011a98 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011aa2:	685c      	ldr	r4, [r3, #4]
 8011aa4:	1919      	adds	r1, r3, r4
 8011aa6:	4288      	cmp	r0, r1
 8011aa8:	d103      	bne.n	8011ab2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011aaa:	6841      	ldr	r1, [r0, #4]
 8011aac:	4618      	mov	r0, r3
 8011aae:	4421      	add	r1, r4
 8011ab0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011ab2:	6844      	ldr	r4, [r0, #4]
 8011ab4:	1901      	adds	r1, r0, r4
 8011ab6:	428a      	cmp	r2, r1
 8011ab8:	d109      	bne.n	8011ace <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011aba:	4909      	ldr	r1, [pc, #36]	; (8011ae0 <prvInsertBlockIntoFreeList+0x4c>)
 8011abc:	6809      	ldr	r1, [r1, #0]
 8011abe:	428a      	cmp	r2, r1
 8011ac0:	d005      	beq.n	8011ace <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011ac2:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011ac6:	4421      	add	r1, r4
 8011ac8:	e9c0 5100 	strd	r5, r1, [r0]
 8011acc:	e000      	b.n	8011ad0 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ace:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ad0:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ad2:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ad4:	bf18      	it	ne
 8011ad6:	6018      	strne	r0, [r3, #0]
}
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop
 8011adc:	20020a60 	.word	0x20020a60
 8011ae0:	20000a50 	.word	0x20000a50

08011ae4 <pvPortMalloc>:
{
 8011ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8011aea:	f7fe ff9d 	bl	8010a28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011aee:	4845      	ldr	r0, [pc, #276]	; (8011c04 <pvPortMalloc+0x120>)
 8011af0:	6803      	ldr	r3, [r0, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d037      	beq.n	8011b66 <pvPortMalloc+0x82>
 8011af6:	4b44      	ldr	r3, [pc, #272]	; (8011c08 <pvPortMalloc+0x124>)
 8011af8:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011afa:	423c      	tst	r4, r7
 8011afc:	d156      	bne.n	8011bac <pvPortMalloc+0xc8>
			if( xWantedSize > 0 )
 8011afe:	2c00      	cmp	r4, #0
 8011b00:	d054      	beq.n	8011bac <pvPortMalloc+0xc8>
				xWantedSize += xHeapStructSize;
 8011b02:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b06:	0759      	lsls	r1, r3, #29
 8011b08:	d002      	beq.n	8011b10 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b0a:	f023 0307 	bic.w	r3, r3, #7
 8011b0e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d04b      	beq.n	8011bac <pvPortMalloc+0xc8>
 8011b14:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8011c1c <pvPortMalloc+0x138>
 8011b18:	f8d8 6000 	ldr.w	r6, [r8]
 8011b1c:	429e      	cmp	r6, r3
 8011b1e:	d345      	bcc.n	8011bac <pvPortMalloc+0xc8>
				pxBlock = xStart.pxNextFreeBlock;
 8011b20:	493a      	ldr	r1, [pc, #232]	; (8011c0c <pvPortMalloc+0x128>)
 8011b22:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b24:	e003      	b.n	8011b2e <pvPortMalloc+0x4a>
 8011b26:	6825      	ldr	r5, [r4, #0]
 8011b28:	b125      	cbz	r5, 8011b34 <pvPortMalloc+0x50>
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	462c      	mov	r4, r5
 8011b2e:	6862      	ldr	r2, [r4, #4]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d3f8      	bcc.n	8011b26 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8011b34:	6800      	ldr	r0, [r0, #0]
 8011b36:	42a0      	cmp	r0, r4
 8011b38:	d038      	beq.n	8011bac <pvPortMalloc+0xc8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b3a:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b3e:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b40:	680d      	ldr	r5, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b42:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b46:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b48:	d93e      	bls.n	8011bc8 <pvPortMalloc+0xe4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b4a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b4c:	0742      	lsls	r2, r0, #29
 8011b4e:	d035      	beq.n	8011bbc <pvPortMalloc+0xd8>
 8011b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b54:	b672      	cpsid	i
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	b662      	cpsie	i
 8011b64:	e7fe      	b.n	8011b64 <pvPortMalloc+0x80>
	uxAddress = ( size_t ) ucHeap;
 8011b66:	4b2a      	ldr	r3, [pc, #168]	; (8011c10 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 8011b6c:	4a29      	ldr	r2, [pc, #164]	; (8011c14 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b6e:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b70:	4f29      	ldr	r7, [pc, #164]	; (8011c18 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b72:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8011b76:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b7a:	bf18      	it	ne
 8011b7c:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b7e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8011c1c <pvPortMalloc+0x138>
	pxEnd = ( void * ) uxAddress;
 8011b82:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b84:	bf18      	it	ne
 8011b86:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b8a:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011b8c:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b8e:	603b      	str	r3, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b90:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b92:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b96:	423c      	tst	r4, r7
	pxEnd->pxNextFreeBlock = NULL;
 8011b98:	e9c2 5500 	strd	r5, r5, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011b9c:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ba0:	4b1a      	ldr	r3, [pc, #104]	; (8011c0c <pvPortMalloc+0x128>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ba2:	4a19      	ldr	r2, [pc, #100]	; (8011c08 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ba4:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ba8:	6016      	str	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011baa:	d0a8      	beq.n	8011afe <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 8011bac:	f7fe fffc 	bl	8010ba8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8011bb0:	2500      	movs	r5, #0
 8011bb2:	f7ee ff9f 	bl	8000af4 <vApplicationMallocFailedHook>
}
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011bbc:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011bc0:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011bc2:	f7ff ff67 	bl	8011a94 <prvInsertBlockIntoFreeList>
 8011bc6:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011bc8:	4913      	ldr	r1, [pc, #76]	; (8011c18 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011bca:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8011bcc:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011bce:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011bd0:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bd2:	3508      	adds	r5, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011bd4:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011bd8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8011bda:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011bde:	bf38      	it	cc
 8011be0:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8011be2:	f7fe ffe1 	bl	8010ba8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8011be6:	2d00      	cmp	r5, #0
 8011be8:	d0e2      	beq.n	8011bb0 <pvPortMalloc+0xcc>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bea:	076b      	lsls	r3, r5, #29
 8011bec:	d0e3      	beq.n	8011bb6 <pvPortMalloc+0xd2>
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	b672      	cpsid	i
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	b662      	cpsie	i
 8011c02:	e7fe      	b.n	8011c02 <pvPortMalloc+0x11e>
 8011c04:	20000a50 	.word	0x20000a50
 8011c08:	20020a54 	.word	0x20020a54
 8011c0c:	20020a60 	.word	0x20020a60
 8011c10:	20000a54 	.word	0x20000a54
 8011c14:	20020a4c 	.word	0x20020a4c
 8011c18:	20020a5c 	.word	0x20020a5c
 8011c1c:	20020a58 	.word	0x20020a58

08011c20 <vPortFree>:
	if( pv != NULL )
 8011c20:	b1f0      	cbz	r0, 8011c60 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c22:	4a1b      	ldr	r2, [pc, #108]	; (8011c90 <vPortFree+0x70>)
 8011c24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011c28:	6812      	ldr	r2, [r2, #0]
 8011c2a:	4213      	tst	r3, r2
 8011c2c:	d10a      	bne.n	8011c44 <vPortFree+0x24>
 8011c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c32:	b672      	cpsid	i
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	b662      	cpsie	i
 8011c42:	e7fe      	b.n	8011c42 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c44:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8011c48:	b159      	cbz	r1, 8011c62 <vPortFree+0x42>
 8011c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4e:	b672      	cpsid	i
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	b662      	cpsie	i
 8011c5e:	e7fe      	b.n	8011c5e <vPortFree+0x3e>
 8011c60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c62:	ea23 0302 	bic.w	r3, r3, r2
{
 8011c66:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c68:	f840 3c04 	str.w	r3, [r0, #-4]
 8011c6c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8011c6e:	f7fe fedb 	bl	8010a28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c72:	4a08      	ldr	r2, [pc, #32]	; (8011c94 <vPortFree+0x74>)
 8011c74:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c78:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c7c:	6811      	ldr	r1, [r2, #0]
 8011c7e:	440b      	add	r3, r1
 8011c80:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c82:	f7ff ff07 	bl	8011a94 <prvInsertBlockIntoFreeList>
}
 8011c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8011c8a:	f7fe bf8d 	b.w	8010ba8 <xTaskResumeAll>
 8011c8e:	bf00      	nop
 8011c90:	20020a54 	.word	0x20020a54
 8011c94:	20020a58 	.word	0x20020a58

08011c98 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8011c98:	4b22      	ldr	r3, [pc, #136]	; (8011d24 <tcpip_thread+0x8c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
  if (tcpip_init_done != NULL) {
 8011ca0:	b113      	cbz	r3, 8011ca8 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8011ca2:	4a21      	ldr	r2, [pc, #132]	; (8011d28 <tcpip_thread+0x90>)
 8011ca4:	6810      	ldr	r0, [r2, #0]
 8011ca6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8011ca8:	4e20      	ldr	r6, [pc, #128]	; (8011d2c <tcpip_thread+0x94>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8011caa:	4f21      	ldr	r7, [pc, #132]	; (8011d30 <tcpip_thread+0x98>)
  LOCK_TCPIP_CORE();
 8011cac:	4630      	mov	r0, r6
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011cae:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011d3c <tcpip_thread+0xa4>
  LOCK_TCPIP_CORE();
 8011cb2:	f00a fe71 	bl	801c998 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	f00a fe74 	bl	801c9a4 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8011cbc:	a901      	add	r1, sp, #4
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	f007 f954 	bl	8018f6c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011cc4:	4630      	mov	r0, r6
 8011cc6:	f00a fe67 	bl	801c998 <sys_mutex_lock>
    if (msg == NULL) {
 8011cca:	9c01      	ldr	r4, [sp, #4]
 8011ccc:	b31c      	cbz	r4, 8011d16 <tcpip_thread+0x7e>
    switch (msg->type) {
 8011cce:	7825      	ldrb	r5, [r4, #0]
 8011cd0:	2d03      	cmp	r5, #3
 8011cd2:	d00b      	beq.n	8011cec <tcpip_thread+0x54>
 8011cd4:	2d04      	cmp	r5, #4
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011cd6:	4643      	mov	r3, r8
 8011cd8:	f04f 029b 	mov.w	r2, #155	; 0x9b
 8011cdc:	4915      	ldr	r1, [pc, #84]	; (8011d34 <tcpip_thread+0x9c>)
 8011cde:	4816      	ldr	r0, [pc, #88]	; (8011d38 <tcpip_thread+0xa0>)
    switch (msg->type) {
 8011ce0:	d015      	beq.n	8011d0e <tcpip_thread+0x76>
 8011ce2:	2d02      	cmp	r5, #2
 8011ce4:	d00a      	beq.n	8011cfc <tcpip_thread+0x64>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011ce6:	f00b fc7f 	bl	801d5e8 <iprintf>
      break;
 8011cea:	e7e4      	b.n	8011cb6 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011cec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8011cf0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011cf2:	9901      	ldr	r1, [sp, #4]
 8011cf4:	2009      	movs	r0, #9
 8011cf6:	f002 fbad 	bl	8014454 <memp_free>
      break;
 8011cfa:	e7dc      	b.n	8011cb6 <tcpip_thread+0x1e>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8011cfc:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8011d00:	6860      	ldr	r0, [r4, #4]
 8011d02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011d04:	9901      	ldr	r1, [sp, #4]
 8011d06:	200a      	movs	r0, #10
 8011d08:	f002 fba4 	bl	8014454 <memp_free>
      break;
 8011d0c:	e7d3      	b.n	8011cb6 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011d0e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8011d12:	4798      	blx	r3
      break;
 8011d14:	e7cf      	b.n	8011cb6 <tcpip_thread+0x1e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011d16:	4643      	mov	r3, r8
 8011d18:	2269      	movs	r2, #105	; 0x69
 8011d1a:	4906      	ldr	r1, [pc, #24]	; (8011d34 <tcpip_thread+0x9c>)
 8011d1c:	4806      	ldr	r0, [pc, #24]	; (8011d38 <tcpip_thread+0xa0>)
 8011d1e:	f00b fc63 	bl	801d5e8 <iprintf>
      continue;
 8011d22:	e7c8      	b.n	8011cb6 <tcpip_thread+0x1e>
 8011d24:	20020a6c 	.word	0x20020a6c
 8011d28:	20020a70 	.word	0x20020a70
 8011d2c:	2002599c 	.word	0x2002599c
 8011d30:	20020a68 	.word	0x20020a68
 8011d34:	080218e4 	.word	0x080218e4
 8011d38:	08021804 	.word	0x08021804
 8011d3c:	080218b4 	.word	0x080218b4

08011d40 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8011d40:	f002 bd80 	b.w	8014844 <pbuf_free>

08011d44 <tcpip_inpkt>:
{
 8011d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d46:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011d48:	4814      	ldr	r0, [pc, #80]	; (8011d9c <tcpip_inpkt+0x58>)
{
 8011d4a:	460e      	mov	r6, r1
 8011d4c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011d4e:	f00a fdeb 	bl	801c928 <sys_mbox_valid>
 8011d52:	b188      	cbz	r0, 8011d78 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011d54:	22b7      	movs	r2, #183	; 0xb7
 8011d56:	4912      	ldr	r1, [pc, #72]	; (8011da0 <tcpip_inpkt+0x5c>)
 8011d58:	200a      	movs	r0, #10
 8011d5a:	f002 fb57 	bl	801440c <memp_malloc_fn>
  if (msg == NULL) {
 8011d5e:	4604      	mov	r4, r0
 8011d60:	b1c0      	cbz	r0, 8011d94 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8011d62:	2302      	movs	r3, #2
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011d64:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8011d66:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8011d68:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8011d6a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011d6e:	480b      	ldr	r0, [pc, #44]	; (8011d9c <tcpip_inpkt+0x58>)
 8011d70:	f00a fda6 	bl	801c8c0 <sys_mbox_trypost>
 8011d74:	b938      	cbnz	r0, 8011d86 <tcpip_inpkt+0x42>
}
 8011d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011d78:	4b09      	ldr	r3, [pc, #36]	; (8011da0 <tcpip_inpkt+0x5c>)
 8011d7a:	22b5      	movs	r2, #181	; 0xb5
 8011d7c:	4909      	ldr	r1, [pc, #36]	; (8011da4 <tcpip_inpkt+0x60>)
 8011d7e:	480a      	ldr	r0, [pc, #40]	; (8011da8 <tcpip_inpkt+0x64>)
 8011d80:	f00b fc32 	bl	801d5e8 <iprintf>
 8011d84:	e7e6      	b.n	8011d54 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011d86:	4621      	mov	r1, r4
 8011d88:	200a      	movs	r0, #10
 8011d8a:	f002 fb63 	bl	8014454 <memp_free>
    return ERR_MEM;
 8011d8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8011d94:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20020a68 	.word	0x20020a68
 8011da0:	080218b4 	.word	0x080218b4
 8011da4:	080218a4 	.word	0x080218a4
 8011da8:	08021804 	.word	0x08021804

08011dac <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011dac:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 8011db0:	f013 0f18 	tst.w	r3, #24
 8011db4:	d102      	bne.n	8011dbc <tcpip_input+0x10>
  return tcpip_inpkt(p, inp, ip_input);
 8011db6:	4a03      	ldr	r2, [pc, #12]	; (8011dc4 <tcpip_input+0x18>)
 8011db8:	f7ff bfc4 	b.w	8011d44 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011dbc:	4a02      	ldr	r2, [pc, #8]	; (8011dc8 <tcpip_input+0x1c>)
 8011dbe:	f7ff bfc1 	b.w	8011d44 <tcpip_inpkt>
 8011dc2:	bf00      	nop
 8011dc4:	0801b8e5 	.word	0x0801b8e5
 8011dc8:	0801c731 	.word	0x0801c731

08011dcc <tcpip_callback_with_block>:
{
 8011dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dce:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011dd0:	4816      	ldr	r0, [pc, #88]	; (8011e2c <tcpip_callback_with_block+0x60>)
{
 8011dd2:	460e      	mov	r6, r1
 8011dd4:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011dd6:	f00a fda7 	bl	801c928 <sys_mbox_valid>
 8011dda:	b1a8      	cbz	r0, 8011e08 <tcpip_callback_with_block+0x3c>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011ddc:	22f0      	movs	r2, #240	; 0xf0
 8011dde:	4914      	ldr	r1, [pc, #80]	; (8011e30 <tcpip_callback_with_block+0x64>)
 8011de0:	2009      	movs	r0, #9
 8011de2:	f002 fb13 	bl	801440c <memp_malloc_fn>
  if (msg == NULL) {
 8011de6:	4604      	mov	r4, r0
 8011de8:	b1e0      	cbz	r0, 8011e24 <tcpip_callback_with_block+0x58>
  msg->type = TCPIP_MSG_CALLBACK;
 8011dea:	2303      	movs	r3, #3
    sys_mbox_post(&mbox, msg);
 8011dec:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8011dee:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8011df2:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 8011df4:	480d      	ldr	r0, [pc, #52]	; (8011e2c <tcpip_callback_with_block+0x60>)
  if (block) {
 8011df6:	b91d      	cbnz	r5, 8011e00 <tcpip_callback_with_block+0x34>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8011df8:	f00a fd62 	bl	801c8c0 <sys_mbox_trypost>
 8011dfc:	b958      	cbnz	r0, 8011e16 <tcpip_callback_with_block+0x4a>
}
 8011dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_post(&mbox, msg);
 8011e00:	f00a fd52 	bl	801c8a8 <sys_mbox_post>
  return ERR_OK;
 8011e04:	2000      	movs	r0, #0
}
 8011e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8011e08:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <tcpip_callback_with_block+0x64>)
 8011e0a:	22ee      	movs	r2, #238	; 0xee
 8011e0c:	4909      	ldr	r1, [pc, #36]	; (8011e34 <tcpip_callback_with_block+0x68>)
 8011e0e:	480a      	ldr	r0, [pc, #40]	; (8011e38 <tcpip_callback_with_block+0x6c>)
 8011e10:	f00b fbea 	bl	801d5e8 <iprintf>
 8011e14:	e7e2      	b.n	8011ddc <tcpip_callback_with_block+0x10>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011e16:	4621      	mov	r1, r4
 8011e18:	2009      	movs	r0, #9
 8011e1a:	f002 fb1b 	bl	8014454 <memp_free>
      return ERR_MEM;
 8011e1e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8011e24:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	20020a68 	.word	0x20020a68
 8011e30:	080218b4 	.word	0x080218b4
 8011e34:	080218a4 	.word	0x080218a4
 8011e38:	08021804 	.word	0x08021804

08011e3c <tcpip_init>:
{
 8011e3c:	b530      	push	{r4, r5, lr}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	4605      	mov	r5, r0
 8011e42:	460c      	mov	r4, r1
  lwip_init();
 8011e44:	f001 feea 	bl	8013c1c <lwip_init>
  tcpip_init_done = initfunc;
 8011e48:	4a13      	ldr	r2, [pc, #76]	; (8011e98 <tcpip_init+0x5c>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011e4a:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8011e4c:	4b13      	ldr	r3, [pc, #76]	; (8011e9c <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011e4e:	4814      	ldr	r0, [pc, #80]	; (8011ea0 <tcpip_init+0x64>)
  tcpip_init_done = initfunc;
 8011e50:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8011e52:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011e54:	f00a fd08 	bl	801c868 <sys_mbox_new>
 8011e58:	b9a8      	cbnz	r0, 8011e86 <tcpip_init+0x4a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011e5a:	4812      	ldr	r0, [pc, #72]	; (8011ea4 <tcpip_init+0x68>)
 8011e5c:	f00a fd76 	bl	801c94c <sys_mutex_new>
 8011e60:	b130      	cbz	r0, 8011e70 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011e62:	4b11      	ldr	r3, [pc, #68]	; (8011ea8 <tcpip_init+0x6c>)
 8011e64:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011e68:	4910      	ldr	r1, [pc, #64]	; (8011eac <tcpip_init+0x70>)
 8011e6a:	4811      	ldr	r0, [pc, #68]	; (8011eb0 <tcpip_init+0x74>)
 8011e6c:	f00b fbbc 	bl	801d5e8 <iprintf>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011e70:	2003      	movs	r0, #3
 8011e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e76:	2200      	movs	r2, #0
 8011e78:	490e      	ldr	r1, [pc, #56]	; (8011eb4 <tcpip_init+0x78>)
 8011e7a:	9000      	str	r0, [sp, #0]
 8011e7c:	480e      	ldr	r0, [pc, #56]	; (8011eb8 <tcpip_init+0x7c>)
 8011e7e:	f00a fd95 	bl	801c9ac <sys_thread_new>
}
 8011e82:	b003      	add	sp, #12
 8011e84:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011e86:	4b08      	ldr	r3, [pc, #32]	; (8011ea8 <tcpip_init+0x6c>)
 8011e88:	f240 12d5 	movw	r2, #469	; 0x1d5
 8011e8c:	490b      	ldr	r1, [pc, #44]	; (8011ebc <tcpip_init+0x80>)
 8011e8e:	4808      	ldr	r0, [pc, #32]	; (8011eb0 <tcpip_init+0x74>)
 8011e90:	f00b fbaa 	bl	801d5e8 <iprintf>
 8011e94:	e7e1      	b.n	8011e5a <tcpip_init+0x1e>
 8011e96:	bf00      	nop
 8011e98:	20020a6c 	.word	0x20020a6c
 8011e9c:	20020a70 	.word	0x20020a70
 8011ea0:	20020a68 	.word	0x20020a68
 8011ea4:	2002599c 	.word	0x2002599c
 8011ea8:	080218b4 	.word	0x080218b4
 8011eac:	08021870 	.word	0x08021870
 8011eb0:	08021804 	.word	0x08021804
 8011eb4:	08011c99 	.word	0x08011c99
 8011eb8:	08021894 	.word	0x08021894
 8011ebc:	0802184c 	.word	0x0802184c

08011ec0 <pbuf_free_callback>:
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
 8011ec0:	4601      	mov	r1, r0
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	4801      	ldr	r0, [pc, #4]	; (8011ecc <pbuf_free_callback+0xc>)
 8011ec6:	f7ff bf81 	b.w	8011dcc <tcpip_callback_with_block>
 8011eca:	bf00      	nop
 8011ecc:	08011d41 	.word	0x08011d41

08011ed0 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011ed0:	b1e8      	cbz	r0, 8011f0e <fs_open+0x3e>
 8011ed2:	b1e1      	cbz	r1, 8011f0e <fs_open+0x3e>
{
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	4606      	mov	r6, r0
 8011eda:	490f      	ldr	r1, [pc, #60]	; (8011f18 <fs_open+0x48>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011edc:	4c0f      	ldr	r4, [pc, #60]	; (8011f1c <fs_open+0x4c>)
 8011ede:	e000      	b.n	8011ee2 <fs_open+0x12>
 8011ee0:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	f7ee f9ac 	bl	8000240 <strcmp>
 8011ee8:	b130      	cbz	r0, 8011ef8 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011eea:	6824      	ldr	r4, [r4, #0]
 8011eec:	2c00      	cmp	r4, #0
 8011eee:	d1f7      	bne.n	8011ee0 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8011ef0:	f06f 0305 	mvn.w	r3, #5
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8011ef8:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 8011efa:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 8011efc:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 8011efe:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 8011f02:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 8011f06:	7c22      	ldrb	r2, [r4, #16]
}
 8011f08:	4618      	mov	r0, r3
      file->flags = f->flags;
 8011f0a:	7432      	strb	r2, [r6, #16]
}
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8011f0e:	f06f 030f 	mvn.w	r3, #15
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	0802c788 	.word	0x0802c788
 8011f1c:	080378f4 	.word	0x080378f4

08011f20 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop

08011f24 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8011f24:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8011f28:	1a10      	subs	r0, r2, r0
 8011f2a:	4770      	bx	lr

08011f2c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8011f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8011f30:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8011f32:	b374      	cbz	r4, 8011f92 <http_write+0x66>
 8011f34:	461f      	mov	r7, r3
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8011f36:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8011f38:	4605      	mov	r5, r0
 8011f3a:	4690      	mov	r8, r2
 8011f3c:	005b      	lsls	r3, r3, #1
 8011f3e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8011f42:	460e      	mov	r6, r1
 8011f44:	b298      	uxth	r0, r3
 8011f46:	4290      	cmp	r0, r2
 8011f48:	bf28      	it	cs
 8011f4a:	4610      	movcs	r0, r2
 8011f4c:	4284      	cmp	r4, r0
 8011f4e:	bf28      	it	cs
 8011f50:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8011f52:	463b      	mov	r3, r7
 8011f54:	4622      	mov	r2, r4
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f005 ff85 	bl	8017e68 <tcp_write>
    if (err == ERR_MEM) {
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	d003      	beq.n	8011f6a <http_write+0x3e>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8011f62:	b950      	cbnz	r0, 8011f7a <http_write+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8011f64:	f8a8 4000 	strh.w	r4, [r8]
 8011f68:	e00a      	b.n	8011f80 <http_write+0x54>
      if ((tcp_sndbuf(pcb) == 0) ||
 8011f6a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8011f6e:	b123      	cbz	r3, 8011f7a <http_write+0x4e>
 8011f70:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
        len /= 2;
 8011f74:	0864      	lsrs	r4, r4, #1
      if ((tcp_sndbuf(pcb) == 0) ||
 8011f76:	2b08      	cmp	r3, #8
 8011f78:	d908      	bls.n	8011f8c <http_write+0x60>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	f8a8 3000 	strh.w	r3, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
   /* ensure nagle is normally enabled (only disabled for persistent connections
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
 8011f80:	7eab      	ldrb	r3, [r5, #26]
 8011f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f86:	76ab      	strb	r3, [r5, #26]
#endif

  return err;
}
 8011f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while ((err == ERR_MEM) && (len > 1));
 8011f8c:	2c01      	cmp	r4, #1
 8011f8e:	d8e0      	bhi.n	8011f52 <http_write+0x26>
 8011f90:	e7f3      	b.n	8011f7a <http_write+0x4e>
    return ERR_OK;
 8011f92:	4620      	mov	r0, r4
}
 8011f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f98 <http_state_eof>:
{
 8011f98:	b510      	push	{r4, lr}
 8011f9a:	4604      	mov	r4, r0
  if(hs->handle) {
 8011f9c:	6940      	ldr	r0, [r0, #20]
 8011f9e:	b118      	cbz	r0, 8011fa8 <http_state_eof+0x10>
    fs_close(hs->handle);
 8011fa0:	f7ff ffbe 	bl	8011f20 <fs_close>
    hs->handle = NULL;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8011fa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011faa:	b118      	cbz	r0, 8011fb4 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 8011fac:	f001 fe88 	bl	8013cc0 <mem_free>
    hs->ssi = NULL;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8011fb4:	6a20      	ldr	r0, [r4, #32]
 8011fb6:	b118      	cbz	r0, 8011fc0 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8011fb8:	f002 fc44 	bl	8014844 <pbuf_free>
    hs->req = NULL;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	6223      	str	r3, [r4, #32]
}
 8011fc0:	bd10      	pop	{r4, pc}
 8011fc2:	bf00      	nop

08011fc4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8011fc8:	490c      	ldr	r1, [pc, #48]	; (8011ffc <http_get_404_file+0x38>)
  err = fs_open(&hs->file_handle, *uri);
 8011fca:	4604      	mov	r4, r0
  *uri = "/404.html";
 8011fcc:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8011fce:	f7ff ff7f 	bl	8011ed0 <fs_open>
  if (err != ERR_OK) {
 8011fd2:	b908      	cbnz	r0, 8011fd8 <http_get_404_file+0x14>
      }
    }
  }

  return &hs->file_handle;
}
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8011fd8:	4909      	ldr	r1, [pc, #36]	; (8012000 <http_get_404_file+0x3c>)
    err = fs_open(&hs->file_handle, *uri);
 8011fda:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8011fdc:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8011fde:	f7ff ff77 	bl	8011ed0 <fs_open>
    if (err != ERR_OK) {
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	d0f6      	beq.n	8011fd4 <http_get_404_file+0x10>
      *uri = "/404.shtml";
 8011fe6:	4907      	ldr	r1, [pc, #28]	; (8012004 <http_get_404_file+0x40>)
      err = fs_open(&hs->file_handle, *uri);
 8011fe8:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8011fea:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8011fec:	f7ff ff70 	bl	8011ed0 <fs_open>
      if (err != ERR_OK) {
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d0ef      	beq.n	8011fd4 <http_get_404_file+0x10>
        *uri = NULL;
 8011ff4:	2300      	movs	r3, #0
        return NULL;
 8011ff6:	461c      	mov	r4, r3
        *uri = NULL;
 8011ff8:	602b      	str	r3, [r5, #0]
        return NULL;
 8011ffa:	e7eb      	b.n	8011fd4 <http_get_404_file+0x10>
 8011ffc:	08037988 	.word	0x08037988
 8012000:	08037994 	.word	0x08037994
 8012004:	080379a0 	.word	0x080379a0

08012008 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8012008:	bb82      	cbnz	r2, 801206c <http_accept+0x64>
{
 801200a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801200c:	fab1 f581 	clz	r5, r1
 8012010:	096d      	lsrs	r5, r5, #5
 8012012:	bb45      	cbnz	r5, 8012066 <http_accept+0x5e>
 8012014:	460c      	mov	r4, r1
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012016:	2101      	movs	r1, #1
 8012018:	4620      	mov	r0, r4
 801201a:	f003 fb29 	bl	8015670 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801201e:	2034      	movs	r0, #52	; 0x34
 8012020:	f001 ffd8 	bl	8013fd4 <mem_malloc>
  if (ret != NULL) {
 8012024:	4606      	mov	r6, r0
 8012026:	b1d8      	cbz	r0, 8012060 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8012028:	2234      	movs	r2, #52	; 0x34
 801202a:	4629      	mov	r1, r5
 801202c:	f00a ff98 	bl	801cf60 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8012030:	4631      	mov	r1, r6
 8012032:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8012034:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8012036:	f003 fb37 	bl	80156a8 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 801203a:	4620      	mov	r0, r4
 801203c:	490d      	ldr	r1, [pc, #52]	; (8012074 <http_accept+0x6c>)
 801203e:	f003 fb37 	bl	80156b0 <tcp_recv>
  tcp_err(pcb, http_err);
 8012042:	4620      	mov	r0, r4
 8012044:	490c      	ldr	r1, [pc, #48]	; (8012078 <http_accept+0x70>)
 8012046:	f003 fb69 	bl	801571c <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801204a:	2204      	movs	r2, #4
 801204c:	4620      	mov	r0, r4
 801204e:	490b      	ldr	r1, [pc, #44]	; (801207c <http_accept+0x74>)
 8012050:	f003 fb86 	bl	8015760 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8012054:	4620      	mov	r0, r4
 8012056:	490a      	ldr	r1, [pc, #40]	; (8012080 <http_accept+0x78>)
 8012058:	f003 fb46 	bl	80156e8 <tcp_sent>

  return ERR_OK;
 801205c:	4628      	mov	r0, r5
}
 801205e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8012060:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012064:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8012066:	f06f 0005 	mvn.w	r0, #5
}
 801206a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801206c:	f06f 0005 	mvn.w	r0, #5
}
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	08012b79 	.word	0x08012b79
 8012078:	08012fd1 	.word	0x08012fd1
 801207c:	08012b21 	.word	0x08012b21
 8012080:	08012b05 	.word	0x08012b05

08012084 <http_init_file>:
{
 8012084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012088:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801208a:	469a      	mov	sl, r3
 801208c:	4604      	mov	r4, r0
 801208e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  if (file != NULL) {
 8012092:	460d      	mov	r5, r1
 8012094:	2900      	cmp	r1, #0
 8012096:	f000 80af 	beq.w	80121f8 <http_init_file+0x174>
 801209a:	4617      	mov	r7, r2
    if (tag_check) {
 801209c:	2b00      	cmp	r3, #0
 801209e:	f040 8084 	bne.w	80121aa <http_init_file+0x126>
 80120a2:	e9d5 3200 	ldrd	r3, r2, [r5]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80120a6:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80120a8:	e9c4 5305 	strd	r5, r3, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80120ac:	f2c0 809a 	blt.w	80121e4 <http_init_file+0x160>
    hs->retries = 0;
 80120b0:	2300      	movs	r3, #0
      hs->left = file->len;
 80120b2:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80120b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80120b8:	7c2b      	ldrb	r3, [r5, #16]
 80120ba:	07d9      	lsls	r1, r3, #31
 80120bc:	d559      	bpl.n	8012172 <http_init_file+0xee>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80120be:	2f00      	cmp	r7, #0
 80120c0:	d165      	bne.n	801218e <http_init_file+0x10a>
    if (params != NULL) {
 80120c2:	2e00      	cmp	r6, #0
 80120c4:	d049      	beq.n	801215a <http_init_file+0xd6>
  if(!params || (params[0] == '\0')) {
 80120c6:	7835      	ldrb	r5, [r6, #0]
 80120c8:	2d00      	cmp	r5, #0
 80120ca:	d040      	beq.n	801214e <http_init_file+0xca>
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80120cc:	2500      	movs	r5, #0
 80120ce:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8012220 <http_init_file+0x19c>
 80120d2:	f8df 8148 	ldr.w	r8, [pc, #328]	; 801221c <http_init_file+0x198>
 80120d6:	e016      	b.n	8012106 <http_init_file+0x82>
      *pair = '\0';
 80120d8:	f04f 0300 	mov.w	r3, #0
 80120dc:	f80b 3b01 	strb.w	r3, [fp], #1
 80120e0:	f1bb 0f00 	cmp.w	fp, #0
 80120e4:	bf08      	it	eq
 80120e6:	2700      	moveq	r7, #0
    equals = strchr(equals, '=');
 80120e8:	4630      	mov	r0, r6
 80120ea:	213d      	movs	r1, #61	; 0x3d
 80120ec:	f00b fc2f 	bl	801d94e <strchr>
    if(equals) {
 80120f0:	b330      	cbz	r0, 8012140 <http_init_file+0xbc>
      *equals = '\0';
 80120f2:	f04f 0300 	mov.w	r3, #0
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80120f6:	465e      	mov	r6, fp
 80120f8:	f108 0804 	add.w	r8, r8, #4
      *equals = '\0';
 80120fc:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8012100:	f848 0c04 	str.w	r0, [r8, #-4]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8012104:	b31f      	cbz	r7, 801214e <http_init_file+0xca>
 8012106:	3501      	adds	r5, #1
    pair = strchr(pair, '&');
 8012108:	2126      	movs	r1, #38	; 0x26
 801210a:	4630      	mov	r0, r6
    http_cgi_params[loop] = pair;
 801210c:	f849 6b04 	str.w	r6, [r9], #4
    pair = strchr(pair, '&');
 8012110:	f00b fc1d 	bl	801d94e <strchr>
 8012114:	2d0f      	cmp	r5, #15
    if(pair) {
 8012116:	4683      	mov	fp, r0
 8012118:	bfcc      	ite	gt
 801211a:	2700      	movgt	r7, #0
 801211c:	2701      	movle	r7, #1
 801211e:	2800      	cmp	r0, #0
 8012120:	d1da      	bne.n	80120d8 <http_init_file+0x54>
        pair = strchr(equals, ' ');
 8012122:	2120      	movs	r1, #32
 8012124:	4630      	mov	r0, r6
 8012126:	f00b fc12 	bl	801d94e <strchr>
        if(pair) {
 801212a:	2800      	cmp	r0, #0
 801212c:	d073      	beq.n	8012216 <http_init_file+0x192>
            *pair = '\0';
 801212e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8012132:	213d      	movs	r1, #61	; 0x3d
 8012134:	4630      	mov	r0, r6
            *pair = '\0';
 8012136:	465f      	mov	r7, fp
    equals = strchr(equals, '=');
 8012138:	f00b fc09 	bl	801d94e <strchr>
    if(equals) {
 801213c:	2800      	cmp	r0, #0
 801213e:	d1d8      	bne.n	80120f2 <http_init_file+0x6e>
      http_cgi_param_vals[loop] = NULL;
 8012140:	f8c8 0000 	str.w	r0, [r8]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8012144:	465e      	mov	r6, fp
 8012146:	f108 0804 	add.w	r8, r8, #4
 801214a:	2f00      	cmp	r7, #0
 801214c:	d1db      	bne.n	8012106 <http_init_file+0x82>
      httpd_cgi_handler(uri, count, http_cgi_params, http_cgi_param_vals
 801214e:	4629      	mov	r1, r5
 8012150:	4650      	mov	r0, sl
 8012152:	4b32      	ldr	r3, [pc, #200]	; (801221c <http_init_file+0x198>)
 8012154:	4a32      	ldr	r2, [pc, #200]	; (8012220 <http_init_file+0x19c>)
 8012156:	f7f2 f9bb 	bl	80044d0 <httpd_cgi_handler>
  if (hs->keepalive) {
 801215a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 801215e:	b12b      	cbz	r3, 801216c <http_init_file+0xe8>
     if (hs->ssi != NULL) {
 8012160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012162:	2b00      	cmp	r3, #0
 8012164:	d04e      	beq.n	8012204 <http_init_file+0x180>
       hs->keepalive = 0;
 8012166:	2300      	movs	r3, #0
 8012168:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 801216c:	2000      	movs	r0, #0
 801216e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("HTTP headers not included in file system",
 8012172:	4b2c      	ldr	r3, [pc, #176]	; (8012224 <http_init_file+0x1a0>)
 8012174:	f640 02df 	movw	r2, #2271	; 0x8df
 8012178:	492b      	ldr	r1, [pc, #172]	; (8012228 <http_init_file+0x1a4>)
 801217a:	482c      	ldr	r0, [pc, #176]	; (801222c <http_init_file+0x1a8>)
 801217c:	f00b fa34 	bl	801d5e8 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8012180:	2f00      	cmp	r7, #0
 8012182:	d09e      	beq.n	80120c2 <http_init_file+0x3e>
 8012184:	6963      	ldr	r3, [r4, #20]
 8012186:	7c1b      	ldrb	r3, [r3, #16]
 8012188:	07db      	lsls	r3, r3, #31
 801218a:	d59a      	bpl.n	80120c2 <http_init_file+0x3e>
 801218c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801218e:	4928      	ldr	r1, [pc, #160]	; (8012230 <http_init_file+0x1ac>)
 8012190:	69a0      	ldr	r0, [r4, #24]
 8012192:	f000 ffb5 	bl	8013100 <lwip_strnstr>
      if (file_start != NULL) {
 8012196:	2800      	cmp	r0, #0
 8012198:	d093      	beq.n	80120c2 <http_init_file+0x3e>
        size_t diff = file_start + 4 - hs->file;
 801219a:	3004      	adds	r0, #4
 801219c:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 801219e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        size_t diff = file_start + 4 - hs->file;
 80121a0:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 80121a2:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 80121a4:	1a9b      	subs	r3, r3, r2
 80121a6:	6263      	str	r3, [r4, #36]	; 0x24
 80121a8:	e78b      	b.n	80120c2 <http_init_file+0x3e>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80121aa:	20e0      	movs	r0, #224	; 0xe0
 80121ac:	f001 ff12 	bl	8013fd4 <mem_malloc>
  if (ret != NULL) {
 80121b0:	4680      	mov	r8, r0
 80121b2:	2800      	cmp	r0, #0
 80121b4:	f43f af75 	beq.w	80120a2 <http_init_file+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80121b8:	22e0      	movs	r2, #224	; 0xe0
 80121ba:	2100      	movs	r1, #0
 80121bc:	f00a fed0 	bl	801cf60 <memset>
        ssi->tag_index = 0;
 80121c0:	2100      	movs	r1, #0
        ssi->parse_left = file->len;
 80121c2:	e9d5 3200 	ldrd	r3, r2, [r5]
        ssi->tag_index = 0;
 80121c6:	f8a8 1010 	strh.w	r1, [r8, #16]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80121ca:	2a00      	cmp	r2, #0
        ssi->tag_state = TAG_NONE;
 80121cc:	f888 10df 	strb.w	r1, [r8, #223]	; 0xdf
        ssi->parsed = file->data;
 80121d0:	f8c8 3000 	str.w	r3, [r8]
        ssi->parse_left = file->len;
 80121d4:	e9c8 3202 	strd	r3, r2, [r8, #8]
        hs->ssi = ssi;
 80121d8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    hs->file = file->data;
 80121dc:	e9c4 5305 	strd	r5, r3, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80121e0:	f6bf af66 	bge.w	80120b0 <http_init_file+0x2c>
 80121e4:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80121e8:	4b0e      	ldr	r3, [pc, #56]	; (8012224 <http_init_file+0x1a0>)
 80121ea:	4912      	ldr	r1, [pc, #72]	; (8012234 <http_init_file+0x1b0>)
 80121ec:	480f      	ldr	r0, [pc, #60]	; (801222c <http_init_file+0x1a8>)
 80121ee:	f00b f9fb 	bl	801d5e8 <iprintf>
 80121f2:	686a      	ldr	r2, [r5, #4]
 80121f4:	6965      	ldr	r5, [r4, #20]
 80121f6:	e75b      	b.n	80120b0 <http_init_file+0x2c>
    hs->file = NULL;
 80121f8:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 80121fc:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 80121fe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8012202:	e7aa      	b.n	801215a <http_init_file+0xd6>
       if ((hs->handle != NULL) &&
 8012204:	6963      	ldr	r3, [r4, #20]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0b0      	beq.n	801216c <http_init_file+0xe8>
 801220a:	7c1b      	ldrb	r3, [r3, #16]
 801220c:	f003 0303 	and.w	r3, r3, #3
 8012210:	2b01      	cmp	r3, #1
 8012212:	d1ab      	bne.n	801216c <http_init_file+0xe8>
 8012214:	e7a7      	b.n	8012166 <http_init_file+0xe2>
        if(pair) {
 8012216:	465f      	mov	r7, fp
 8012218:	e766      	b.n	80120e8 <http_init_file+0x64>
 801221a:	bf00      	nop
 801221c:	200259e0 	.word	0x200259e0
 8012220:	200259a0 	.word	0x200259a0
 8012224:	080379ac 	.word	0x080379ac
 8012228:	08037a04 	.word	0x08037a04
 801222c:	08021804 	.word	0x08021804
 8012230:	0801fb6c 	.word	0x0801fb6c
 8012234:	080379e4 	.word	0x080379e4

08012238 <http_find_file>:
{
 8012238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	4605      	mov	r5, r0
 801223e:	b087      	sub	sp, #28
  size_t uri_len = strlen(uri);
 8012240:	4608      	mov	r0, r1
 8012242:	460c      	mov	r4, r1
{
 8012244:	9105      	str	r1, [sp, #20]
 8012246:	4691      	mov	r9, r2
 8012248:	462f      	mov	r7, r5
  size_t uri_len = strlen(uri);
 801224a:	f7ee f803 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 801224e:	4606      	mov	r6, r0
 8012250:	b130      	cbz	r0, 8012260 <http_find_file+0x28>
 8012252:	f100 38ff 	add.w	r8, r0, #4294967295
 8012256:	f814 3008 	ldrb.w	r3, [r4, r8]
 801225a:	2b2f      	cmp	r3, #47	; 0x2f
 801225c:	d05f      	beq.n	801231e <http_find_file+0xe6>
  u8_t tag_check = 0;
 801225e:	2600      	movs	r6, #0
    params = (char *)strchr(uri, '?');
 8012260:	213f      	movs	r1, #63	; 0x3f
 8012262:	4620      	mov	r0, r4
 8012264:	f00b fb73 	bl	801d94e <strchr>
    if (params != NULL) {
 8012268:	4680      	mov	r8, r0
 801226a:	b118      	cbz	r0, 8012274 <http_find_file+0x3c>
      *params = '\0';
 801226c:	2300      	movs	r3, #0
 801226e:	f808 3b01 	strb.w	r3, [r8], #1
 8012272:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8012274:	4621      	mov	r1, r4
 8012276:	4628      	mov	r0, r5
 8012278:	f7ff fe2a 	bl	8011ed0 <fs_open>
    if (err == ERR_OK) {
 801227c:	2800      	cmp	r0, #0
 801227e:	d13e      	bne.n	80122fe <http_find_file+0xc6>
    if (file != NULL) {
 8012280:	2f00      	cmp	r7, #0
 8012282:	d043      	beq.n	801230c <http_find_file+0xd4>
      char* param = (char*)strstr(uri, "?");
 8012284:	9e05      	ldr	r6, [sp, #20]
 8012286:	213f      	movs	r1, #63	; 0x3f
 8012288:	4630      	mov	r0, r6
 801228a:	f00b fb60 	bl	801d94e <strchr>
      if (param != NULL) {
 801228e:	4682      	mov	sl, r0
 8012290:	b110      	cbz	r0, 8012298 <http_find_file+0x60>
         *param = 0;
 8012292:	2300      	movs	r3, #0
 8012294:	7003      	strb	r3, [r0, #0]
 8012296:	9e05      	ldr	r6, [sp, #20]
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8012298:	212e      	movs	r1, #46	; 0x2e
 801229a:	4630      	mov	r0, r6
 801229c:	f00b fb57 	bl	801d94e <strchr>
 80122a0:	4604      	mov	r4, r0
 80122a2:	b908      	cbnz	r0, 80122a8 <http_find_file+0x70>
 80122a4:	e086      	b.n	80123b4 <http_find_file+0x17c>
 80122a6:	4604      	mov	r4, r0
 80122a8:	212e      	movs	r1, #46	; 0x2e
 80122aa:	1c60      	adds	r0, r4, #1
 80122ac:	f00b fb4f 	bl	801d94e <strchr>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d1f8      	bne.n	80122a6 <http_find_file+0x6e>
 80122b4:	4e47      	ldr	r6, [pc, #284]	; (80123d4 <http_find_file+0x19c>)
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80122b6:	4620      	mov	r0, r4
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80122b8:	4947      	ldr	r1, [pc, #284]	; (80123d8 <http_find_file+0x1a0>)
 80122ba:	f106 0b0c 	add.w	fp, r6, #12
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80122be:	f000 ff47 	bl	8013150 <lwip_stricmp>
 80122c2:	b140      	cbz	r0, 80122d6 <http_find_file+0x9e>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80122c4:	45b3      	cmp	fp, r6
 80122c6:	d028      	beq.n	801231a <http_find_file+0xe2>
 80122c8:	f856 1b04 	ldr.w	r1, [r6], #4
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80122cc:	4620      	mov	r0, r4
 80122ce:	f000 ff3f 	bl	8013150 <lwip_stricmp>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d1f6      	bne.n	80122c4 <http_find_file+0x8c>
          tag_check = 1;
 80122d6:	2601      	movs	r6, #1
      if (param != NULL) {
 80122d8:	f1ba 0f00 	cmp.w	sl, #0
 80122dc:	d002      	beq.n	80122e4 <http_find_file+0xac>
         *param = '?';
 80122de:	233f      	movs	r3, #63	; 0x3f
 80122e0:	f88a 3000 	strb.w	r3, [sl]
 80122e4:	9c05      	ldr	r4, [sp, #20]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80122e6:	4623      	mov	r3, r4
 80122e8:	464a      	mov	r2, r9
 80122ea:	4639      	mov	r1, r7
 80122ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80122f0:	9600      	str	r6, [sp, #0]
 80122f2:	4628      	mov	r0, r5
 80122f4:	f7ff fec6 	bl	8012084 <http_init_file>
}
 80122f8:	b007      	add	sp, #28
 80122fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 80122fe:	a905      	add	r1, sp, #20
 8012300:	4628      	mov	r0, r5
 8012302:	f7ff fe5f 	bl	8011fc4 <http_get_404_file>
 8012306:	4607      	mov	r7, r0
    if (file != NULL) {
 8012308:	2f00      	cmp	r7, #0
 801230a:	d1bb      	bne.n	8012284 <http_find_file+0x4c>
    file = http_get_404_file(hs, &uri);
 801230c:	a905      	add	r1, sp, #20
 801230e:	4628      	mov	r0, r5
 8012310:	f7ff fe58 	bl	8011fc4 <http_get_404_file>
 8012314:	9c05      	ldr	r4, [sp, #20]
 8012316:	4607      	mov	r7, r0
 8012318:	e7e5      	b.n	80122e6 <http_find_file+0xae>
      tag_check = 0;
 801231a:	2600      	movs	r6, #0
 801231c:	e7dc      	b.n	80122d8 <http_find_file+0xa0>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 801231e:	4b2f      	ldr	r3, [pc, #188]	; (80123dc <http_find_file+0x1a4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012320:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8012322:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012324:	d106      	bne.n	8012334 <http_find_file+0xfc>
 8012326:	f1a0 0301 	sub.w	r3, r0, #1
 801232a:	fab3 f383 	clz	r3, r3
 801232e:	095b      	lsrs	r3, r3, #5
 8012330:	2b00      	cmp	r3, #0
 8012332:	d04b      	beq.n	80123cc <http_find_file+0x194>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8012334:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8012338:	bf28      	it	cs
 801233a:	f04f 083f 	movcs.w	r8, #63	; 0x3f
    if (copy_len > 0) {
 801233e:	2e01      	cmp	r6, #1
 8012340:	d008      	beq.n	8012354 <http_find_file+0x11c>
      MEMCPY(http_uri_buf, uri, copy_len);
 8012342:	4642      	mov	r2, r8
 8012344:	4621      	mov	r1, r4
 8012346:	4825      	ldr	r0, [pc, #148]	; (80123dc <http_find_file+0x1a4>)
 8012348:	f00a fdff 	bl	801cf4a <memcpy>
      http_uri_buf[copy_len] = 0;
 801234c:	2300      	movs	r3, #0
 801234e:	9a02      	ldr	r2, [sp, #8]
 8012350:	f802 3008 	strb.w	r3, [r2, r8]
{
 8012354:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8012358:	f8df a080 	ldr.w	sl, [pc, #128]	; 80123dc <http_find_file+0x1a4>
      if (copy_len > 0) {
 801235c:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 801235e:	4654      	mov	r4, sl
      if (copy_len > 0) {
 8012360:	d00f      	beq.n	8012382 <http_find_file+0x14a>
        if (len_left > 0) {
 8012362:	f1d8 023f 	rsbs	r2, r8, #63	; 0x3f
 8012366:	d110      	bne.n	801238a <http_find_file+0x152>
      err = fs_open(&hs->file_handle, file_name);
 8012368:	4621      	mov	r1, r4
 801236a:	4628      	mov	r0, r5
 801236c:	f7ff fdb0 	bl	8011ed0 <fs_open>
      if(err == ERR_OK) {
 8012370:	b310      	cbz	r0, 80123b8 <http_find_file+0x180>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8012372:	f10b 0b01 	add.w	fp, fp, #1
 8012376:	f1bb 0f05 	cmp.w	fp, #5
 801237a:	d1ef      	bne.n	801235c <http_find_file+0x124>
 801237c:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 801237e:	2600      	movs	r6, #0
 8012380:	e76e      	b.n	8012260 <http_find_file+0x28>
        file_name = g_psDefaultFilenames[loop].name;
 8012382:	4b17      	ldr	r3, [pc, #92]	; (80123e0 <http_find_file+0x1a8>)
 8012384:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
 8012388:	e7ee      	b.n	8012368 <http_find_file+0x130>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 801238a:	4b15      	ldr	r3, [pc, #84]	; (80123e0 <http_find_file+0x1a8>)
 801238c:	9204      	str	r2, [sp, #16]
 801238e:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8012392:	4608      	mov	r0, r1
 8012394:	9103      	str	r1, [sp, #12]
 8012396:	f7ed ff5d 	bl	8000254 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 801239a:	9b02      	ldr	r3, [sp, #8]
 801239c:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 80123a0:	4443      	add	r3, r8
 80123a2:	4282      	cmp	r2, r0
 80123a4:	bf28      	it	cs
 80123a6:	4602      	movcs	r2, r0
 80123a8:	4618      	mov	r0, r3
 80123aa:	f00a fdce 	bl	801cf4a <memcpy>
        file_name = http_uri_buf;
 80123ae:	f8cd a008 	str.w	sl, [sp, #8]
 80123b2:	e7d9      	b.n	8012368 <http_find_file+0x130>
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80123b4:	4634      	mov	r4, r6
 80123b6:	e77d      	b.n	80122b4 <http_find_file+0x7c>
        tag_check = g_psDefaultFilenames[loop].shtml;
 80123b8:	4a09      	ldr	r2, [pc, #36]	; (80123e0 <http_find_file+0x1a8>)
        uri = file_name;
 80123ba:	9405      	str	r4, [sp, #20]
        tag_check = g_psDefaultFilenames[loop].shtml;
 80123bc:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 80123c0:	791e      	ldrb	r6, [r3, #4]
  if (file == NULL) {
 80123c2:	2d00      	cmp	r5, #0
 80123c4:	f43f af4c 	beq.w	8012260 <http_find_file+0x28>
  char *params = NULL;
 80123c8:	4680      	mov	r8, r0
 80123ca:	e78c      	b.n	80122e6 <http_find_file+0xae>
 80123cc:	9c02      	ldr	r4, [sp, #8]
  u8_t tag_check = 0;
 80123ce:	461e      	mov	r6, r3
 80123d0:	e746      	b.n	8012260 <http_find_file+0x28>
 80123d2:	bf00      	nop
 80123d4:	0803790c 	.word	0x0803790c
 80123d8:	08037968 	.word	0x08037968
 80123dc:	20020a74 	.word	0x20020a74
 80123e0:	08037918 	.word	0x08037918

080123e4 <http_post_rxpbuf>:
{
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	4604      	mov	r4, r0
  if (p != NULL) {
 80123e8:	b131      	cbz	r1, 80123f8 <http_post_rxpbuf+0x14>
    if (hs->post_content_len_left < p->tot_len) {
 80123ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80123ec:	890a      	ldrh	r2, [r1, #8]
 80123ee:	4293      	cmp	r3, r2
      hs->post_content_len_left = 0;
 80123f0:	bf34      	ite	cc
 80123f2:	2300      	movcc	r3, #0
      hs->post_content_len_left -= p->tot_len;
 80123f4:	1a9b      	subcs	r3, r3, r2
 80123f6:	6303      	str	r3, [r0, #48]	; 0x30
  err = httpd_post_receive_data(hs, p);
 80123f8:	4620      	mov	r0, r4
 80123fa:	f7f2 f969 	bl	80046d0 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80123fe:	b180      	cbz	r0, 8012422 <http_post_rxpbuf+0x3e>
    hs->post_content_len_left = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8012404:	4d09      	ldr	r5, [pc, #36]	; (801242c <http_post_rxpbuf+0x48>)
 8012406:	2600      	movs	r6, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012408:	4620      	mov	r0, r4
 801240a:	223f      	movs	r2, #63	; 0x3f
 801240c:	4629      	mov	r1, r5
  http_uri_buf[0] = 0;
 801240e:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012410:	f7f2 f96e 	bl	80046f0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8012414:	4632      	mov	r2, r6
 8012416:	4629      	mov	r1, r5
 8012418:	4620      	mov	r0, r4
}
 801241a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 801241e:	f7ff bf0b 	b.w	8012238 <http_find_file>
  if (hs->post_content_len_left == 0) {
 8012422:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012424:	2b00      	cmp	r3, #0
 8012426:	d0ed      	beq.n	8012404 <http_post_rxpbuf+0x20>
}
 8012428:	bd70      	pop	{r4, r5, r6, pc}
 801242a:	bf00      	nop
 801242c:	20020a74 	.word	0x20020a74

08012430 <http_find_error_file>:
  if (error_nr == 501) {
 8012430:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8012434:	4b15      	ldr	r3, [pc, #84]	; (801248c <http_find_error_file+0x5c>)
 8012436:	4291      	cmp	r1, r2
 8012438:	4a15      	ldr	r2, [pc, #84]	; (8012490 <http_find_error_file+0x60>)
{
 801243a:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801243c:	4c15      	ldr	r4, [pc, #84]	; (8012494 <http_find_error_file+0x64>)
  err = fs_open(&hs->file_handle, uri1);
 801243e:	bf18      	it	ne
 8012440:	4619      	movne	r1, r3
    uri3 = "/400.shtml";
 8012442:	4b15      	ldr	r3, [pc, #84]	; (8012498 <http_find_error_file+0x68>)
{
 8012444:	b082      	sub	sp, #8
  err = fs_open(&hs->file_handle, uri1);
 8012446:	bf08      	it	eq
 8012448:	4621      	moveq	r1, r4
    uri3 = "/400.shtml";
 801244a:	4d14      	ldr	r5, [pc, #80]	; (801249c <http_find_error_file+0x6c>)
 801244c:	4c14      	ldr	r4, [pc, #80]	; (80124a0 <http_find_error_file+0x70>)
 801244e:	bf04      	itt	eq
 8012450:	4615      	moveq	r5, r2
 8012452:	461c      	moveq	r4, r3
{
 8012454:	4606      	mov	r6, r0
  err = fs_open(&hs->file_handle, uri1);
 8012456:	f7ff fd3b 	bl	8011ed0 <fs_open>
  if (err != ERR_OK) {
 801245a:	b120      	cbz	r0, 8012466 <http_find_error_file+0x36>
    err = fs_open(&hs->file_handle, uri2);
 801245c:	4621      	mov	r1, r4
 801245e:	4630      	mov	r0, r6
 8012460:	f7ff fd36 	bl	8011ed0 <fs_open>
    if (err != ERR_OK) {
 8012464:	b948      	cbnz	r0, 801247a <http_find_error_file+0x4a>
  return http_init_file(hs, &hs->file_handle, 0, NULL, 0, NULL);
 8012466:	2300      	movs	r3, #0
 8012468:	4631      	mov	r1, r6
 801246a:	4630      	mov	r0, r6
 801246c:	461a      	mov	r2, r3
 801246e:	e9cd 3300 	strd	r3, r3, [sp]
 8012472:	f7ff fe07 	bl	8012084 <http_init_file>
}
 8012476:	b002      	add	sp, #8
 8012478:	bd70      	pop	{r4, r5, r6, pc}
      err = fs_open(&hs->file_handle, uri3);
 801247a:	4629      	mov	r1, r5
 801247c:	4630      	mov	r0, r6
 801247e:	f7ff fd27 	bl	8011ed0 <fs_open>
      if (err != ERR_OK) {
 8012482:	2800      	cmp	r0, #0
 8012484:	d0ef      	beq.n	8012466 <http_find_error_file+0x36>
        return ERR_ARG;
 8012486:	f06f 000f 	mvn.w	r0, #15
 801248a:	e7f4      	b.n	8012476 <http_find_error_file+0x46>
 801248c:	0803797c 	.word	0x0803797c
 8012490:	08037940 	.word	0x08037940
 8012494:	08037958 	.word	0x08037958
 8012498:	0803794c 	.word	0x0803794c
 801249c:	08037964 	.word	0x08037964
 80124a0:	08037970 	.word	0x08037970

080124a4 <http_close_or_abort_conn.constprop.7>:
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80124a4:	b538      	push	{r3, r4, r5, lr}
 80124a6:	4604      	mov	r4, r0
  if (hs != NULL) {
 80124a8:	460d      	mov	r5, r1
 80124aa:	b381      	cbz	r1, 801250e <http_close_or_abort_conn.constprop.7+0x6a>
    if ((hs->post_content_len_left != 0)
 80124ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80124ae:	bb33      	cbnz	r3, 80124fe <http_close_or_abort_conn.constprop.7+0x5a>
  tcp_arg(pcb, NULL);
 80124b0:	2100      	movs	r1, #0
 80124b2:	4620      	mov	r0, r4
 80124b4:	f003 f8f8 	bl	80156a8 <tcp_arg>
  tcp_recv(pcb, NULL);
 80124b8:	2100      	movs	r1, #0
 80124ba:	4620      	mov	r0, r4
 80124bc:	f003 f8f8 	bl	80156b0 <tcp_recv>
  tcp_err(pcb, NULL);
 80124c0:	2100      	movs	r1, #0
 80124c2:	4620      	mov	r0, r4
 80124c4:	f003 f92a 	bl	801571c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80124c8:	2200      	movs	r2, #0
 80124ca:	4620      	mov	r0, r4
 80124cc:	4611      	mov	r1, r2
 80124ce:	f003 f947 	bl	8015760 <tcp_poll>
  tcp_sent(pcb, NULL);
 80124d2:	2100      	movs	r1, #0
 80124d4:	4620      	mov	r0, r4
 80124d6:	f003 f907 	bl	80156e8 <tcp_sent>
    http_state_eof(hs);
 80124da:	4628      	mov	r0, r5
 80124dc:	f7ff fd5c 	bl	8011f98 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80124e0:	4628      	mov	r0, r5
 80124e2:	f001 fbed 	bl	8013cc0 <mem_free>
  err = tcp_close(pcb);
 80124e6:	4620      	mov	r0, r4
 80124e8:	f003 fcca 	bl	8015e80 <tcp_close>
  if (err != ERR_OK) {
 80124ec:	4605      	mov	r5, r0
 80124ee:	b120      	cbz	r0, 80124fa <http_close_or_abort_conn.constprop.7+0x56>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80124f0:	4620      	mov	r0, r4
 80124f2:	2204      	movs	r2, #4
 80124f4:	4910      	ldr	r1, [pc, #64]	; (8012538 <http_close_or_abort_conn.constprop.7+0x94>)
 80124f6:	f003 f933 	bl	8015760 <tcp_poll>
}
 80124fa:	4628      	mov	r0, r5
 80124fc:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80124fe:	490f      	ldr	r1, [pc, #60]	; (801253c <http_close_or_abort_conn.constprop.7+0x98>)
 8012500:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012502:	223f      	movs	r2, #63	; 0x3f
 8012504:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8012506:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8012508:	f7f2 f8f2 	bl	80046f0 <httpd_post_finished>
 801250c:	e7d0      	b.n	80124b0 <http_close_or_abort_conn.constprop.7+0xc>
  tcp_arg(pcb, NULL);
 801250e:	f003 f8cb 	bl	80156a8 <tcp_arg>
  tcp_recv(pcb, NULL);
 8012512:	4629      	mov	r1, r5
 8012514:	4620      	mov	r0, r4
 8012516:	f003 f8cb 	bl	80156b0 <tcp_recv>
  tcp_err(pcb, NULL);
 801251a:	4629      	mov	r1, r5
 801251c:	4620      	mov	r0, r4
 801251e:	f003 f8fd 	bl	801571c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8012522:	4629      	mov	r1, r5
 8012524:	4620      	mov	r0, r4
 8012526:	462a      	mov	r2, r5
 8012528:	f003 f91a 	bl	8015760 <tcp_poll>
  tcp_sent(pcb, NULL);
 801252c:	4629      	mov	r1, r5
 801252e:	4620      	mov	r0, r4
 8012530:	f003 f8da 	bl	80156e8 <tcp_sent>
 8012534:	e7d7      	b.n	80124e6 <http_close_or_abort_conn.constprop.7+0x42>
 8012536:	bf00      	nop
 8012538:	08012b21 	.word	0x08012b21
 801253c:	20020a74 	.word	0x20020a74

08012540 <http_eof>:
  if (hs->keepalive) {
 8012540:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8012544:	b90a      	cbnz	r2, 801254a <http_eof+0xa>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012546:	f7ff bfad 	b.w	80124a4 <http_close_or_abort_conn.constprop.7>
{
 801254a:	b538      	push	{r3, r4, r5, lr}
 801254c:	460c      	mov	r4, r1
 801254e:	4605      	mov	r5, r0
    http_state_eof(hs);
 8012550:	4608      	mov	r0, r1
 8012552:	f7ff fd21 	bl	8011f98 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 8012556:	2234      	movs	r2, #52	; 0x34
 8012558:	2100      	movs	r1, #0
 801255a:	4620      	mov	r0, r4
 801255c:	f00a fd00 	bl	801cf60 <memset>
    hs->keepalive = 1;
 8012560:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8012562:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8012564:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    tcp_nagle_disable(pcb);
 8012568:	7eab      	ldrb	r3, [r5, #26]
 801256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801256e:	76ab      	strb	r3, [r5, #26]
}
 8012570:	bd38      	pop	{r3, r4, r5, pc}
 8012572:	bf00      	nop

08012574 <http_send>:
{
 8012574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012578:	b089      	sub	sp, #36	; 0x24
  if (hs == NULL) {
 801257a:	b371      	cbz	r1, 80125da <http_send+0x66>
  if (hs->left == 0) {
 801257c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801257e:	460d      	mov	r5, r1
 8012580:	4606      	mov	r6, r0
 8012582:	b37b      	cbz	r3, 80125e4 <http_send+0x70>
  if(hs->ssi) {
 8012584:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8012586:	69a9      	ldr	r1, [r5, #24]
 8012588:	2c00      	cmp	r4, #0
 801258a:	f000 8180 	beq.w	801288e <http_send+0x31a>
  if(ssi->parsed > hs->file) {
 801258e:	6827      	ldr	r7, [r4, #0]
  len = tcp_sndbuf(pcb);
 8012590:	f8b6 2060 	ldrh.w	r2, [r6, #96]	; 0x60
  if(ssi->parsed > hs->file) {
 8012594:	428f      	cmp	r7, r1
  len = tcp_sndbuf(pcb);
 8012596:	f8ad 201e 	strh.w	r2, [sp, #30]
  if(ssi->parsed > hs->file) {
 801259a:	d936      	bls.n	801260a <http_send+0x96>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801259c:	1a7f      	subs	r7, r7, r1
 801259e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125a2:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80125a4:	4630      	mov	r0, r6
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80125a6:	429f      	cmp	r7, r3
 80125a8:	bfa8      	it	ge
 80125aa:	461f      	movge	r7, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80125ac:	2301      	movs	r3, #1
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80125ae:	f822 7d02 	strh.w	r7, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80125b2:	f7ff fcbb 	bl	8011f2c <http_write>
    if (err == ERR_OK) {
 80125b6:	2800      	cmp	r0, #0
 80125b8:	f000 8190 	beq.w	80128dc <http_send+0x368>
  u8_t data_to_send = 0;
 80125bc:	2700      	movs	r7, #0
    if(tcp_sndbuf(pcb) == 0) {
 80125be:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 80125c2:	bb23      	cbnz	r3, 801260e <http_send+0x9a>
 80125c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80125c6:	b94b      	cbnz	r3, 80125dc <http_send+0x68>
 80125c8:	6968      	ldr	r0, [r5, #20]
 80125ca:	f7ff fcab 	bl	8011f24 <fs_bytes_left>
 80125ce:	2800      	cmp	r0, #0
 80125d0:	dc04      	bgt.n	80125dc <http_send+0x68>
    http_eof(pcb, hs);
 80125d2:	4629      	mov	r1, r5
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7ff ffb3 	bl	8012540 <http_eof>
      return 0;
 80125da:	2700      	movs	r7, #0
}
 80125dc:	4638      	mov	r0, r7
 80125de:	b009      	add	sp, #36	; 0x24
 80125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->handle == NULL) {
 80125e4:	6948      	ldr	r0, [r1, #20]
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d0f3      	beq.n	80125d2 <http_send+0x5e>
  bytes_left = fs_bytes_left(hs->handle);
 80125ea:	f7ff fc9b 	bl	8011f24 <fs_bytes_left>
  if (bytes_left <= 0) {
 80125ee:	2800      	cmp	r0, #0
 80125f0:	ddef      	ble.n	80125d2 <http_send+0x5e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80125f2:	49b4      	ldr	r1, [pc, #720]	; (80128c4 <http_send+0x350>)
 80125f4:	f240 4283 	movw	r2, #1155	; 0x483
 80125f8:	4bb3      	ldr	r3, [pc, #716]	; (80128c8 <http_send+0x354>)
 80125fa:	48b4      	ldr	r0, [pc, #720]	; (80128cc <http_send+0x358>)
 80125fc:	f00a fff4 	bl	801d5e8 <iprintf>
  if(hs->ssi) {
 8012600:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8012602:	69a9      	ldr	r1, [r5, #24]
 8012604:	2c00      	cmp	r4, #0
 8012606:	d1c2      	bne.n	801258e <http_send+0x1a>
 8012608:	e141      	b.n	801288e <http_send+0x31a>
  u8_t data_to_send = 0;
 801260a:	2700      	movs	r7, #0
  err_t err = ERR_OK;
 801260c:	4638      	mov	r0, r7
 801260e:	68e1      	ldr	r1, [r4, #12]
              ssi->tag_index = 0;
 8012610:	f04f 0800 	mov.w	r8, #0
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012614:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80128c8 <http_send+0x354>
  while((ssi->parse_left) && (err == ERR_OK)) {
 8012618:	2900      	cmp	r1, #0
 801261a:	d044      	beq.n	80126a6 <http_send+0x132>
 801261c:	2800      	cmp	r0, #0
 801261e:	d142      	bne.n	80126a6 <http_send+0x132>
    if (len == 0) {
 8012620:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012624:	2a00      	cmp	r2, #0
 8012626:	d0cd      	beq.n	80125c4 <http_send+0x50>
    switch(ssi->tag_state) {
 8012628:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 801262c:	2b04      	cmp	r3, #4
 801262e:	d8f9      	bhi.n	8012624 <http_send+0xb0>
 8012630:	e8df f003 	tbb	[pc, r3]
 8012634:	556e8da0 	.word	0x556e8da0
 8012638:	03          	.byte	0x03
 8012639:	00          	.byte	0x00
        if(ssi->tag_end > hs->file) {
 801263a:	68a2      	ldr	r2, [r4, #8]
 801263c:	69ab      	ldr	r3, [r5, #24]
 801263e:	429a      	cmp	r2, r3
 8012640:	f240 80e4 	bls.w	801280c <http_send+0x298>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012644:	6861      	ldr	r1, [r4, #4]
 8012646:	428b      	cmp	r3, r1
 8012648:	f200 8164 	bhi.w	8012914 <http_send+0x3a0>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801264c:	1aca      	subs	r2, r1, r3
 801264e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8012652:	4282      	cmp	r2, r0
 8012654:	f340 810e 	ble.w	8012874 <http_send+0x300>
 8012658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801265c:	f8ad 201e 	strh.w	r2, [sp, #30]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012660:	4619      	mov	r1, r3
 8012662:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012664:	f10d 021e 	add.w	r2, sp, #30
 8012668:	4630      	mov	r0, r6
 801266a:	3300      	adds	r3, #0
 801266c:	bf18      	it	ne
 801266e:	2301      	movne	r3, #1
 8012670:	f7ff fc5c 	bl	8011f2c <http_write>
          if (err == ERR_OK) {
 8012674:	2800      	cmp	r0, #0
 8012676:	f040 814b 	bne.w	8012910 <http_send+0x39c>
 801267a:	6861      	ldr	r1, [r4, #4]
 801267c:	69ab      	ldr	r3, [r5, #24]
 801267e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            if(ssi->tag_started <= hs->file) {
 8012682:	428b      	cmp	r3, r1
 8012684:	d305      	bcc.n	8012692 <http_send+0x11e>
              len += ssi->tag_end - ssi->tag_started;
 8012686:	68a0      	ldr	r0, [r4, #8]
 8012688:	1a41      	subs	r1, r0, r1
 801268a:	440a      	add	r2, r1
 801268c:	b292      	uxth	r2, r2
 801268e:	f8ad 201e 	strh.w	r2, [sp, #30]
            hs->left -= len;
 8012692:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hs->file += len;
 8012694:	4413      	add	r3, r2
 8012696:	68e1      	ldr	r1, [r4, #12]
            data_to_send = 1;
 8012698:	2701      	movs	r7, #1
            hs->left -= len;
 801269a:	1a82      	subs	r2, r0, r2
            hs->file += len;
 801269c:	61ab      	str	r3, [r5, #24]
            hs->left -= len;
 801269e:	2000      	movs	r0, #0
 80126a0:	626a      	str	r2, [r5, #36]	; 0x24
  while((ssi->parse_left) && (err == ERR_OK)) {
 80126a2:	2900      	cmp	r1, #0
 80126a4:	d1ba      	bne.n	801261c <http_send+0xa8>
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80126a6:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 80126aa:	2b04      	cmp	r3, #4
 80126ac:	d08a      	beq.n	80125c4 <http_send+0x50>
 80126ae:	6824      	ldr	r4, [r4, #0]
 80126b0:	69a9      	ldr	r1, [r5, #24]
 80126b2:	428c      	cmp	r4, r1
 80126b4:	d986      	bls.n	80125c4 <http_send+0x50>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80126b6:	1a64      	subs	r4, r4, r1
 80126b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80126be:	aa08      	add	r2, sp, #32
 80126c0:	4284      	cmp	r4, r0
 80126c2:	bfa8      	it	ge
 80126c4:	4604      	movge	r4, r0
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126c6:	3300      	adds	r3, #0
 80126c8:	4630      	mov	r0, r6
 80126ca:	bf18      	it	ne
 80126cc:	2301      	movne	r3, #1
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80126ce:	f822 4d02 	strh.w	r4, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80126d2:	f7ff fc2b 	bl	8011f2c <http_write>
    if (err == ERR_OK) {
 80126d6:	2800      	cmp	r0, #0
 80126d8:	f000 80ea 	beq.w	80128b0 <http_send+0x33c>
 80126dc:	e772      	b.n	80125c4 <http_send+0x50>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	3901      	subs	r1, #1
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80126e2:	8a22      	ldrh	r2, [r4, #16]
 80126e4:	f813 eb01 	ldrb.w	lr, [r3], #1
 80126e8:	2a00      	cmp	r2, #0
 80126ea:	f040 8082 	bne.w	80127f2 <http_send+0x27e>
 80126ee:	f1ae 0009 	sub.w	r0, lr, #9
 80126f2:	fa5f fc80 	uxtb.w	ip, r0
 80126f6:	f1bc 0f17 	cmp.w	ip, #23
 80126fa:	d970      	bls.n	80127de <http_send+0x26a>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80126fc:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 8012700:	f000 812a 	beq.w	8012958 <http_send+0x3e4>
          ssi->parse_left--;
 8012704:	60e1      	str	r1, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8012706:	2000      	movs	r0, #0
          ssi->parsed++;
 8012708:	6023      	str	r3, [r4, #0]
          ssi->tag_state = TAG_NONE;
 801270a:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
 801270e:	e783      	b.n	8012618 <http_send+0xa4>
 8012710:	6822      	ldr	r2, [r4, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8012712:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012716:	7810      	ldrb	r0, [r2, #0]
 8012718:	f1a0 0309 	sub.w	r3, r0, #9
 801271c:	b2db      	uxtb	r3, r3
 801271e:	f1bc 0f00 	cmp.w	ip, #0
 8012722:	d136      	bne.n	8012792 <http_send+0x21e>
 8012724:	2b17      	cmp	r3, #23
 8012726:	d94d      	bls.n	80127c4 <http_send+0x250>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8012728:	282d      	cmp	r0, #45	; 0x2d
 801272a:	f101 31ff 	add.w	r1, r1, #4294967295
 801272e:	f102 0e01 	add.w	lr, r2, #1
 8012732:	f000 8098 	beq.w	8012866 <http_send+0x2f2>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8012736:	f10c 0301 	add.w	r3, ip, #1
 801273a:	44a4      	add	ip, r4
 801273c:	8223      	strh	r3, [r4, #16]
 801273e:	7813      	ldrb	r3, [r2, #0]
 8012740:	f88c 3015 	strb.w	r3, [ip, #21]
        ssi->parse_left--;
 8012744:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 8012746:	2000      	movs	r0, #0
 8012748:	f8c4 e000 	str.w	lr, [r4]
 801274c:	e764      	b.n	8012618 <http_send+0xa4>
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 801274e:	8a23      	ldrh	r3, [r4, #16]
 8012750:	2b05      	cmp	r3, #5
 8012752:	d067      	beq.n	8012824 <http_send+0x2b0>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8012754:	6822      	ldr	r2, [r4, #0]
 8012756:	485e      	ldr	r0, [pc, #376]	; (80128d0 <http_send+0x35c>)
 8012758:	f892 c000 	ldrb.w	ip, [r2]
 801275c:	5c18      	ldrb	r0, [r3, r0]
 801275e:	4584      	cmp	ip, r0
 8012760:	f000 8092 	beq.w	8012888 <http_send+0x314>
            ssi->tag_state = TAG_NONE;
 8012764:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
          ssi->parse_left--;
 8012768:	3901      	subs	r1, #1
          ssi->parsed++;
 801276a:	3201      	adds	r2, #1
 801276c:	2000      	movs	r0, #0
          ssi->parse_left--;
 801276e:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8012770:	6022      	str	r2, [r4, #0]
 8012772:	e751      	b.n	8012618 <http_send+0xa4>
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	781a      	ldrb	r2, [r3, #0]
 8012778:	2a3c      	cmp	r2, #60	; 0x3c
 801277a:	d104      	bne.n	8012786 <http_send+0x212>
          ssi->tag_state = TAG_LEADIN;
 801277c:	2201      	movs	r2, #1
          ssi->tag_started = ssi->parsed;
 801277e:	6063      	str	r3, [r4, #4]
          ssi->tag_state = TAG_LEADIN;
 8012780:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
          ssi->tag_index = 1;
 8012784:	8222      	strh	r2, [r4, #16]
        ssi->parse_left--;
 8012786:	3901      	subs	r1, #1
        ssi->parsed++;
 8012788:	3301      	adds	r3, #1
 801278a:	2000      	movs	r0, #0
        ssi->parse_left--;
 801278c:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 801278e:	6023      	str	r3, [r4, #0]
 8012790:	e742      	b.n	8012618 <http_send+0xa4>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8012792:	f000 0edf 	and.w	lr, r0, #223	; 0xdf
 8012796:	f1be 0f0d 	cmp.w	lr, #13
 801279a:	bf18      	it	ne
 801279c:	2b01      	cmpne	r3, #1
 801279e:	d948      	bls.n	8012832 <http_send+0x2be>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 80127a0:	f1a0 0020 	sub.w	r0, r0, #32
 80127a4:	fab0 f080 	clz	r0, r0
 80127a8:	0940      	lsrs	r0, r0, #5
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d141      	bne.n	8012832 <http_send+0x2be>
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80127ae:	f1bc 0f07 	cmp.w	ip, #7
 80127b2:	f101 31ff 	add.w	r1, r1, #4294967295
 80127b6:	f102 0e01 	add.w	lr, r2, #1
            ssi->tag_state = TAG_NONE;
 80127ba:	bf88      	it	hi
 80127bc:	f884 00df 	strbhi.w	r0, [r4, #223]	; 0xdf
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80127c0:	d8c0      	bhi.n	8012744 <http_send+0x1d0>
 80127c2:	e7b8      	b.n	8012736 <http_send+0x1c2>
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80127c4:	4843      	ldr	r0, [pc, #268]	; (80128d4 <http_send+0x360>)
 80127c6:	3901      	subs	r1, #1
 80127c8:	f102 0e01 	add.w	lr, r2, #1
 80127cc:	40d8      	lsrs	r0, r3
 80127ce:	43c0      	mvns	r0, r0
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80127d0:	f010 0001 	ands.w	r0, r0, #1
 80127d4:	d1af      	bne.n	8012736 <http_send+0x1c2>
          ssi->parse_left--;
 80127d6:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80127d8:	f8c4 e000 	str.w	lr, [r4]
 80127dc:	e71c      	b.n	8012618 <http_send+0xa4>
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80127de:	483d      	ldr	r0, [pc, #244]	; (80128d4 <http_send+0x360>)
 80127e0:	fa20 f00c 	lsr.w	r0, r0, ip
 80127e4:	43c0      	mvns	r0, r0
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80127e6:	f010 0001 	ands.w	r0, r0, #1
 80127ea:	d18b      	bne.n	8012704 <http_send+0x190>
          ssi->parse_left--;
 80127ec:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80127ee:	6023      	str	r3, [r4, #0]
 80127f0:	e712      	b.n	8012618 <http_send+0xa4>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 80127f2:	4839      	ldr	r0, [pc, #228]	; (80128d8 <http_send+0x364>)
 80127f4:	5c10      	ldrb	r0, [r2, r0]
 80127f6:	4570      	cmp	r0, lr
 80127f8:	d184      	bne.n	8012704 <http_send+0x190>
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 80127fa:	2a02      	cmp	r2, #2
          ssi->parse_left--;
 80127fc:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80127fe:	6023      	str	r3, [r4, #0]
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8012800:	f000 80ad 	beq.w	801295e <http_send+0x3ea>
            ssi->tag_index++;
 8012804:	3201      	adds	r2, #1
 8012806:	2000      	movs	r0, #0
 8012808:	8222      	strh	r2, [r4, #16]
 801280a:	e705      	b.n	8012618 <http_send+0xa4>
          if(ssi->tag_index < ssi->tag_insert_len) {
 801280c:	8a23      	ldrh	r3, [r4, #16]
 801280e:	8a60      	ldrh	r0, [r4, #18]
 8012810:	4283      	cmp	r3, r0
 8012812:	f0c0 8089 	bcc.w	8012928 <http_send+0x3b4>
              ssi->tag_index = 0;
 8012816:	f8a4 8010 	strh.w	r8, [r4, #16]
              ssi->parsed = ssi->tag_end;
 801281a:	2000      	movs	r0, #0
              ssi->tag_state = TAG_NONE;
 801281c:	f884 80df 	strb.w	r8, [r4, #223]	; 0xdf
              ssi->parsed = ssi->tag_end;
 8012820:	6022      	str	r2, [r4, #0]
 8012822:	e6f9      	b.n	8012618 <http_send+0xa4>
          ssi->tag_state = TAG_FOUND;
 8012824:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8012826:	f8a4 8010 	strh.w	r8, [r4, #16]
          ssi->tag_state = TAG_FOUND;
 801282a:	2000      	movs	r0, #0
 801282c:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
 8012830:	e6f2      	b.n	8012618 <http_send+0xa4>
            ssi->tag_state = TAG_LEADOUT;
 8012832:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8012834:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8012838:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801283c:	d85d      	bhi.n	80128fa <http_send+0x386>
            ssi->tag_name[ssi->tag_index] = '\0';
 801283e:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8012842:	f884 c014 	strb.w	ip, [r4, #20]
 8012846:	f102 0e01 	add.w	lr, r2, #1
            ssi->tag_name[ssi->tag_index] = '\0';
 801284a:	f883 8015 	strb.w	r8, [r3, #21]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 801284e:	7813      	ldrb	r3, [r2, #0]
 8012850:	2b2d      	cmp	r3, #45	; 0x2d
 8012852:	d04d      	beq.n	80128f0 <http_send+0x37c>
 8012854:	68e1      	ldr	r1, [r4, #12]
        ssi->parsed++;
 8012856:	2000      	movs	r0, #0
              ssi->tag_index = 0;
 8012858:	f8a4 8010 	strh.w	r8, [r4, #16]
 801285c:	3901      	subs	r1, #1
        ssi->parsed++;
 801285e:	f8c4 e000 	str.w	lr, [r4]
        ssi->parse_left--;
 8012862:	60e1      	str	r1, [r4, #12]
 8012864:	e6d8      	b.n	8012618 <http_send+0xa4>
            ssi->tag_state = TAG_NONE;
 8012866:	f884 c0df 	strb.w	ip, [r4, #223]	; 0xdf
        ssi->parsed++;
 801286a:	2000      	movs	r0, #0
        ssi->parse_left--;
 801286c:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 801286e:	f8c4 e000 	str.w	lr, [r4]
 8012872:	e6d1      	b.n	8012618 <http_send+0xa4>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012874:	b292      	uxth	r2, r2
 8012876:	f8ad 201e 	strh.w	r2, [sp, #30]
          if (len != 0) {
 801287a:	2a00      	cmp	r2, #0
 801287c:	f47f aef0 	bne.w	8012660 <http_send+0xec>
            if(ssi->tag_started <= hs->file) {
 8012880:	428b      	cmp	r3, r1
 8012882:	f4ff af06 	bcc.w	8012692 <http_send+0x11e>
 8012886:	e6fe      	b.n	8012686 <http_send+0x112>
            ssi->tag_index++;
 8012888:	3301      	adds	r3, #1
 801288a:	8223      	strh	r3, [r4, #16]
 801288c:	e76c      	b.n	8012768 <http_send+0x1f4>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801288e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8012892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012896:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8012898:	aa08      	add	r2, sp, #32
 801289a:	4287      	cmp	r7, r0
 801289c:	bf88      	it	hi
 801289e:	461f      	movhi	r7, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80128a0:	4623      	mov	r3, r4
 80128a2:	4630      	mov	r0, r6
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80128a4:	f822 7d02 	strh.w	r7, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80128a8:	f7ff fb40 	bl	8011f2c <http_write>
  if (err == ERR_OK) {
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d151      	bne.n	8012954 <http_send+0x3e0>
    hs->file += len;
 80128b0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    data_to_send = 1;
 80128b4:	2701      	movs	r7, #1
    hs->file += len;
 80128b6:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80128b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80128ba:	440a      	add	r2, r1
    hs->left -= len;
 80128bc:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80128be:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80128c0:	626b      	str	r3, [r5, #36]	; 0x24
 80128c2:	e680      	b.n	80125c6 <http_send+0x52>
 80128c4:	08037ab0 	.word	0x08037ab0
 80128c8:	080379ac 	.word	0x080379ac
 80128cc:	08021804 	.word	0x08021804
 80128d0:	08037ae8 	.word	0x08037ae8
 80128d4:	00800013 	.word	0x00800013
 80128d8:	08037b08 	.word	0x08037b08
      hs->file += len;
 80128dc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      data_to_send = 1;
 80128e0:	2701      	movs	r7, #1
      hs->file += len;
 80128e2:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 80128e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 80128e6:	440a      	add	r2, r1
      hs->left -= len;
 80128e8:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 80128ea:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 80128ec:	626b      	str	r3, [r5, #36]	; 0x24
 80128ee:	e666      	b.n	80125be <http_send+0x4a>
              ssi->tag_index = 1;
 80128f0:	2301      	movs	r3, #1
 80128f2:	68e1      	ldr	r1, [r4, #12]
 80128f4:	8223      	strh	r3, [r4, #16]
 80128f6:	3901      	subs	r1, #1
 80128f8:	e724      	b.n	8012744 <http_send+0x1d0>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80128fa:	f240 521b 	movw	r2, #1307	; 0x51b
 80128fe:	465b      	mov	r3, fp
 8012900:	4976      	ldr	r1, [pc, #472]	; (8012adc <http_send+0x568>)
 8012902:	4877      	ldr	r0, [pc, #476]	; (8012ae0 <http_send+0x56c>)
 8012904:	f00a fe70 	bl	801d5e8 <iprintf>
 8012908:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801290c:	6822      	ldr	r2, [r4, #0]
 801290e:	e796      	b.n	801283e <http_send+0x2ca>
 8012910:	68e1      	ldr	r1, [r4, #12]
 8012912:	e681      	b.n	8012618 <http_send+0xa4>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8012914:	465b      	mov	r3, fp
 8012916:	4973      	ldr	r1, [pc, #460]	; (8012ae4 <http_send+0x570>)
 8012918:	f240 528e 	movw	r2, #1422	; 0x58e
 801291c:	4870      	ldr	r0, [pc, #448]	; (8012ae0 <http_send+0x56c>)
 801291e:	f00a fe63 	bl	801d5e8 <iprintf>
 8012922:	6861      	ldr	r1, [r4, #4]
 8012924:	69ab      	ldr	r3, [r5, #24]
 8012926:	e691      	b.n	801264c <http_send+0xd8>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012928:	eba0 0c03 	sub.w	ip, r0, r3
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801292c:	f103 011e 	add.w	r1, r3, #30
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012930:	aa08      	add	r2, sp, #32
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8012932:	2301      	movs	r3, #1
 8012934:	4421      	add	r1, r4
 8012936:	4630      	mov	r0, r6
            len = (ssi->tag_insert_len - ssi->tag_index);
 8012938:	f822 cd02 	strh.w	ip, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801293c:	f7ff faf6 	bl	8011f2c <http_write>
            if (err == ERR_OK) {
 8012940:	2800      	cmp	r0, #0
 8012942:	d1e5      	bne.n	8012910 <http_send+0x39c>
              ssi->tag_index += len;
 8012944:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8012946:	2701      	movs	r7, #1
              ssi->tag_index += len;
 8012948:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801294c:	68e1      	ldr	r1, [r4, #12]
 801294e:	4413      	add	r3, r2
 8012950:	8223      	strh	r3, [r4, #16]
 8012952:	e661      	b.n	8012618 <http_send+0xa4>
  u8_t data_to_send = 0;
 8012954:	4627      	mov	r7, r4
 8012956:	e635      	b.n	80125c4 <http_send+0x50>
          ssi->parse_left--;
 8012958:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 801295a:	6023      	str	r3, [r4, #0]
 801295c:	e752      	b.n	8012804 <http_send+0x290>
  ssi = hs->ssi;
 801295e:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8012962:	f1b9 0f00 	cmp.w	r9, #0
 8012966:	f000 80b1 	beq.w	8012acc <http_send+0x558>
  if(g_pfnSSIHandler
 801296a:	4b5f      	ldr	r3, [pc, #380]	; (8012ae8 <http_send+0x574>)
 801296c:	f109 0115 	add.w	r1, r9, #21
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	9101      	str	r1, [sp, #4]
 8012974:	9302      	str	r3, [sp, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d061      	beq.n	8012a3e <http_send+0x4ca>
     && g_ppcTags && g_iNumTags
 801297a:	4b5c      	ldr	r3, [pc, #368]	; (8012aec <http_send+0x578>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d05d      	beq.n	8012a3e <http_send+0x4ca>
 8012982:	4a5b      	ldr	r2, [pc, #364]	; (8012af0 <http_send+0x57c>)
 8012984:	6812      	ldr	r2, [r2, #0]
    for(tag = 0; tag < g_iNumTags; tag++) {
 8012986:	2a00      	cmp	r2, #0
 8012988:	dd59      	ble.n	8012a3e <http_send+0x4ca>
 801298a:	f04f 0a00 	mov.w	sl, #0
 801298e:	3b04      	subs	r3, #4
 8012990:	9403      	str	r4, [sp, #12]
 8012992:	4614      	mov	r4, r2
 8012994:	9704      	str	r7, [sp, #16]
 8012996:	460f      	mov	r7, r1
 8012998:	9605      	str	r6, [sp, #20]
 801299a:	4656      	mov	r6, sl
 801299c:	46aa      	mov	sl, r5
 801299e:	461d      	mov	r5, r3
 80129a0:	e002      	b.n	80129a8 <http_send+0x434>
 80129a2:	3601      	adds	r6, #1
 80129a4:	42b4      	cmp	r4, r6
 80129a6:	d046      	beq.n	8012a36 <http_send+0x4c2>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 80129a8:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80129ac:	4638      	mov	r0, r7
 80129ae:	f7ed fc47 	bl	8000240 <strcmp>
 80129b2:	2800      	cmp	r0, #0
 80129b4:	d1f5      	bne.n	80129a2 <http_send+0x42e>
 80129b6:	4655      	mov	r5, sl
 80129b8:	46b2      	mov	sl, r6
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 80129ba:	22c0      	movs	r2, #192	; 0xc0
 80129bc:	f109 011e 	add.w	r1, r9, #30
 80129c0:	4650      	mov	r0, sl
 80129c2:	9b02      	ldr	r3, [sp, #8]
 80129c4:	9e05      	ldr	r6, [sp, #20]
 80129c6:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 80129ca:	4798      	blx	r3
 80129cc:	f8a9 0012 	strh.w	r0, [r9, #18]
            if (ssi->tag_end > hs->file) {
 80129d0:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 80129d2:	2004      	movs	r0, #4
            ssi->tag_index = 0;
 80129d4:	f8a4 8010 	strh.w	r8, [r4, #16]
            ssi->tag_state = TAG_SENDING;
 80129d8:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
            ssi->parsed = ssi->tag_started;
 80129dc:	e9d4 2300 	ldrd	r2, r3, [r4]
            if (ssi->tag_end > hs->file) {
 80129e0:	428a      	cmp	r2, r1
            ssi->tag_end = ssi->parsed;
 80129e2:	60a2      	str	r2, [r4, #8]
            ssi->parsed = ssi->tag_started;
 80129e4:	6023      	str	r3, [r4, #0]
            if (ssi->tag_end > hs->file) {
 80129e6:	d966      	bls.n	8012ab6 <http_send+0x542>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80129e8:	eba3 0c01 	sub.w	ip, r3, r1
 80129ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80129f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80129f2:	aa08      	add	r2, sp, #32
 80129f4:	4584      	cmp	ip, r0
 80129f6:	bfa8      	it	ge
 80129f8:	4684      	movge	ip, r0
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80129fa:	3300      	adds	r3, #0
 80129fc:	4630      	mov	r0, r6
 80129fe:	bf18      	it	ne
 8012a00:	2301      	movne	r3, #1
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8012a02:	f822 cd02 	strh.w	ip, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8012a06:	f7ff fa91 	bl	8011f2c <http_write>
              if (err == ERR_OK) {
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d180      	bne.n	8012910 <http_send+0x39c>
                if(ssi->tag_started <= hs->file) {
 8012a0e:	6867      	ldr	r7, [r4, #4]
 8012a10:	69aa      	ldr	r2, [r5, #24]
 8012a12:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012a16:	4297      	cmp	r7, r2
 8012a18:	d805      	bhi.n	8012a26 <http_send+0x4b2>
                  len += ssi->tag_end - ssi->tag_started;
 8012a1a:	68a1      	ldr	r1, [r4, #8]
 8012a1c:	1bc9      	subs	r1, r1, r7
 8012a1e:	440b      	add	r3, r1
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	f8ad 301e 	strh.w	r3, [sp, #30]
                hs->left -= len;
 8012a26:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8012a28:	441a      	add	r2, r3
                data_to_send = 1;
 8012a2a:	2701      	movs	r7, #1
                hs->left -= len;
 8012a2c:	1acb      	subs	r3, r1, r3
                hs->file += len;
 8012a2e:	61aa      	str	r2, [r5, #24]
 8012a30:	68e1      	ldr	r1, [r4, #12]
                hs->left -= len;
 8012a32:	626b      	str	r3, [r5, #36]	; 0x24
 8012a34:	e5f0      	b.n	8012618 <http_send+0xa4>
 8012a36:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 8012a3a:	9e05      	ldr	r6, [sp, #20]
 8012a3c:	4655      	mov	r5, sl
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8012a3e:	9801      	ldr	r0, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012a40:	f109 0a1e 	add.w	sl, r9, #30
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8012a44:	f7ed fc06 	bl	8000254 <strlen>
 8012a48:	2809      	cmp	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012a4a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8012b00 <http_send+0x58c>
 8012a4e:	bf28      	it	cs
 8012a50:	2009      	movcs	r0, #9
 8012a52:	9002      	str	r0, [sp, #8]
 8012a54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a58:	f8bc c000 	ldrh.w	ip, [ip]
 8012a5c:	f8c9 001e 	str.w	r0, [r9, #30]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012a60:	f109 0030 	add.w	r0, r9, #48	; 0x30
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012a64:	f8a9 c02e 	strh.w	ip, [r9, #46]	; 0x2e
 8012a68:	f8c9 1022 	str.w	r1, [r9, #34]	; 0x22
 8012a6c:	f8c9 2026 	str.w	r2, [r9, #38]	; 0x26
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012a70:	9901      	ldr	r1, [sp, #4]
 8012a72:	9a02      	ldr	r2, [sp, #8]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8012a74:	f8c9 302a 	str.w	r3, [r9, #42]	; 0x2a
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8012a78:	f00a fa67 	bl	801cf4a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012a7c:	9a02      	ldr	r2, [sp, #8]
 8012a7e:	4b1d      	ldr	r3, [pc, #116]	; (8012af4 <http_send+0x580>)
 8012a80:	f102 0130 	add.w	r1, r2, #48	; 0x30
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8012a84:	eb09 0c02 	add.w	ip, r9, r2
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012a88:	6818      	ldr	r0, [r3, #0]
 8012a8a:	eb09 0201 	add.w	r2, r9, r1
 8012a8e:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8012a92:	799b      	ldrb	r3, [r3, #6]
 8012a94:	f849 0001 	str.w	r0, [r9, r1]
  len = strlen(ssi->tag_insert);
 8012a98:	4650      	mov	r0, sl
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8012a9a:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012a9e:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8012aa0:	f88c 8037 	strb.w	r8, [ip, #55]	; 0x37
  len = strlen(ssi->tag_insert);
 8012aa4:	f7ed fbd6 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012aa8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8012aac:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012aae:	d205      	bcs.n	8012abc <http_send+0x548>
  ssi->tag_insert_len = (u16_t)len;
 8012ab0:	f8a9 a012 	strh.w	sl, [r9, #18]
 8012ab4:	e78c      	b.n	80129d0 <http_send+0x45c>
 8012ab6:	68e1      	ldr	r1, [r4, #12]
            if (ssi->tag_end > hs->file) {
 8012ab8:	2000      	movs	r0, #0
 8012aba:	e5ad      	b.n	8012618 <http_send+0xa4>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8012abc:	465b      	mov	r3, fp
 8012abe:	f240 3236 	movw	r2, #822	; 0x336
 8012ac2:	490d      	ldr	r1, [pc, #52]	; (8012af8 <http_send+0x584>)
 8012ac4:	4806      	ldr	r0, [pc, #24]	; (8012ae0 <http_send+0x56c>)
 8012ac6:	f00a fd8f 	bl	801d5e8 <iprintf>
 8012aca:	e7f1      	b.n	8012ab0 <http_send+0x53c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8012acc:	465b      	mov	r3, fp
 8012ace:	f240 22fd 	movw	r2, #765	; 0x2fd
 8012ad2:	490a      	ldr	r1, [pc, #40]	; (8012afc <http_send+0x588>)
 8012ad4:	4802      	ldr	r0, [pc, #8]	; (8012ae0 <http_send+0x56c>)
 8012ad6:	f00a fd87 	bl	801d5e8 <iprintf>
 8012ada:	e746      	b.n	801296a <http_send+0x3f6>
 8012adc:	08037af0 	.word	0x08037af0
 8012ae0:	08021804 	.word	0x08021804
 8012ae4:	08037b44 	.word	0x08037b44
 8012ae8:	20025a20 	.word	0x20025a20
 8012aec:	20025a28 	.word	0x20025a28
 8012af0:	20025a24 	.word	0x20025a24
 8012af4:	08037b2c 	.word	0x08037b2c
 8012af8:	08037b34 	.word	0x08037b34
 8012afc:	08037b0c 	.word	0x08037b0c
 8012b00:	08037b18 	.word	0x08037b18

08012b04 <http_sent>:
  if (hs == NULL) {
 8012b04:	b150      	cbz	r0, 8012b1c <http_sent+0x18>
  hs->retries = 0;
 8012b06:	2200      	movs	r2, #0
{
 8012b08:	b508      	push	{r3, lr}
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	4608      	mov	r0, r1
  hs->retries = 0;
 8012b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8012b12:	4619      	mov	r1, r3
 8012b14:	f7ff fd2e 	bl	8012574 <http_send>
}
 8012b18:	2000      	movs	r0, #0
 8012b1a:	bd08      	pop	{r3, pc}
 8012b1c:	2000      	movs	r0, #0
 8012b1e:	4770      	bx	lr

08012b20 <http_poll>:
{
 8012b20:	b510      	push	{r4, lr}
 8012b22:	460c      	mov	r4, r1
  if (hs == NULL) {
 8012b24:	b1a8      	cbz	r0, 8012b52 <http_poll+0x32>
    hs->retries++;
 8012b26:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012b2e:	2b04      	cmp	r3, #4
    hs->retries++;
 8012b30:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012b34:	d019      	beq.n	8012b6a <http_poll+0x4a>
    if(hs && (hs->handle)) {
 8012b36:	6943      	ldr	r3, [r0, #20]
 8012b38:	b123      	cbz	r3, 8012b44 <http_poll+0x24>
      if(http_send(pcb, hs)) {
 8012b3a:	4601      	mov	r1, r0
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f7ff fd19 	bl	8012574 <http_send>
 8012b42:	b908      	cbnz	r0, 8012b48 <http_poll+0x28>
  return ERR_OK;
 8012b44:	2000      	movs	r0, #0
}
 8012b46:	bd10      	pop	{r4, pc}
        tcp_output(pcb);
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f005 fdd9 	bl	8018700 <tcp_output>
  return ERR_OK;
 8012b4e:	2000      	movs	r0, #0
 8012b50:	e7f9      	b.n	8012b46 <http_poll+0x26>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012b52:	4601      	mov	r1, r0
 8012b54:	4620      	mov	r0, r4
 8012b56:	f7ff fca5 	bl	80124a4 <http_close_or_abort_conn.constprop.7>
    if (closed == ERR_MEM) {
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	d1f2      	bne.n	8012b44 <http_poll+0x24>
       tcp_abort(pcb);
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f003 fad0 	bl	8016104 <tcp_abort>
       return ERR_ABRT;
 8012b64:	f06f 000c 	mvn.w	r0, #12
}
 8012b68:	bd10      	pop	{r4, pc}
   return http_close_or_abort_conn(pcb, hs, 0);
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f7ff fc99 	bl	80124a4 <http_close_or_abort_conn.constprop.7>
      return ERR_OK;
 8012b72:	2000      	movs	r0, #0
}
 8012b74:	bd10      	pop	{r4, pc}
 8012b76:	bf00      	nop

08012b78 <http_recv>:
{
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	b08d      	sub	sp, #52	; 0x34
 8012b80:	460e      	mov	r6, r1
 8012b82:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8012b84:	b99b      	cbnz	r3, 8012bae <http_recv+0x36>
 8012b86:	fab2 f782 	clz	r7, r2
 8012b8a:	097f      	lsrs	r7, r7, #5
 8012b8c:	b97f      	cbnz	r7, 8012bae <http_recv+0x36>
 8012b8e:	8911      	ldrh	r1, [r2, #8]
 8012b90:	b1b8      	cbz	r0, 8012bc2 <http_recv+0x4a>
    tcp_recved(pcb, p->tot_len);
 8012b92:	4630      	mov	r0, r6
 8012b94:	f002 fc72 	bl	801547c <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8012b98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012b9a:	b9cb      	cbnz	r3, 8012bd0 <http_recv+0x58>
    if (hs->handle == NULL) {
 8012b9c:	696f      	ldr	r7, [r5, #20]
 8012b9e:	b32f      	cbz	r7, 8012bec <http_recv+0x74>
      pbuf_free(p);
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f001 fe4f 	bl	8014844 <pbuf_free>
}
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	b00d      	add	sp, #52	; 0x34
 8012baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8012bae:	b93c      	cbnz	r4, 8012bc0 <http_recv+0x48>
   return http_close_or_abort_conn(pcb, hs, 0);
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7ff fc76 	bl	80124a4 <http_close_or_abort_conn.constprop.7>
}
 8012bb8:	2000      	movs	r0, #0
 8012bba:	b00d      	add	sp, #52	; 0x34
 8012bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc0:	8921      	ldrh	r1, [r4, #8]
      tcp_recved(pcb, p->tot_len);
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	f002 fc5a 	bl	801547c <tcp_recved>
      pbuf_free(p);
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f001 fe3b 	bl	8014844 <pbuf_free>
 8012bce:	e7ef      	b.n	8012bb0 <http_recv+0x38>
    hs->retries = 0;
 8012bd0:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8012bd4:	4621      	mov	r1, r4
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f7ff fc04 	bl	80123e4 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8012bdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d1ea      	bne.n	8012bb8 <http_recv+0x40>
      http_send(pcb, hs);
 8012be2:	4629      	mov	r1, r5
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff fcc5 	bl	8012574 <http_send>
 8012bea:	e7e5      	b.n	8012bb8 <http_recv+0x40>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8012bec:	69ab      	ldr	r3, [r5, #24]
 8012bee:	6a28      	ldr	r0, [r5, #32]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f040 814b 	bne.w	8012e8c <http_recv+0x314>
  if (hs->req == NULL) {
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	f000 80e9 	beq.w	8012dce <http_recv+0x256>
    pbuf_cat(hs->req, p);
 8012bfc:	4621      	mov	r1, r4
 8012bfe:	f002 f835 	bl	8014c6c <pbuf_cat>
  pbuf_ref(p);
 8012c02:	4620      	mov	r0, r4
 8012c04:	f002 f81e 	bl	8014c44 <pbuf_ref>
  if (hs->req->next != NULL) {
 8012c08:	6a28      	ldr	r0, [r5, #32]
 8012c0a:	6803      	ldr	r3, [r0, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 8110 	beq.w	8012e32 <http_recv+0x2ba>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012c12:	8907      	ldrh	r7, [r0, #8]
 8012c14:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012c18:	49bb      	ldr	r1, [pc, #748]	; (8012f08 <http_recv+0x390>)
 8012c1a:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012c1c:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8012c1e:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8012c20:	bf28      	it	cs
 8012c22:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8012c24:	463a      	mov	r2, r7
 8012c26:	f002 f939 	bl	8014e9c <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8012c2a:	2f06      	cmp	r7, #6
 8012c2c:	f240 80d1 	bls.w	8012dd2 <http_recv+0x25a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8012c30:	463a      	mov	r2, r7
 8012c32:	49b6      	ldr	r1, [pc, #728]	; (8012f0c <http_recv+0x394>)
 8012c34:	4640      	mov	r0, r8
 8012c36:	f000 fa63 	bl	8013100 <lwip_strnstr>
    if (crlf != NULL) {
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	f000 80c9 	beq.w	8012dd2 <http_recv+0x25a>
      if (!strncmp(data, "GET ", 4)) {
 8012c40:	2204      	movs	r2, #4
 8012c42:	49b3      	ldr	r1, [pc, #716]	; (8012f10 <http_recv+0x398>)
 8012c44:	4640      	mov	r0, r8
 8012c46:	f00a fe97 	bl	801d978 <strncmp>
 8012c4a:	9005      	str	r0, [sp, #20]
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	f040 80fa 	bne.w	8012e46 <http_recv+0x2ce>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012c52:	f1a7 0a04 	sub.w	sl, r7, #4
 8012c56:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8012c5a:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012c5e:	49ad      	ldr	r1, [pc, #692]	; (8012f14 <http_recv+0x39c>)
 8012c60:	fa1f fa8a 	uxth.w	sl, sl
 8012c64:	4658      	mov	r0, fp
        sp1 = data + 3;
 8012c66:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012c68:	4652      	mov	r2, sl
 8012c6a:	f000 fa49 	bl	8013100 <lwip_strnstr>
      if (sp2 == NULL) {
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	4681      	mov	r9, r0
 8012c72:	2800      	cmp	r0, #0
 8012c74:	f000 811b 	beq.w	8012eae <http_recv+0x336>
      int is_09 = 0;
 8012c78:	469a      	mov	sl, r3
 8012c7a:	9305      	str	r3, [sp, #20]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8012c7c:	f1b9 0f00 	cmp.w	r9, #0
 8012c80:	f000 80a7 	beq.w	8012dd2 <http_recv+0x25a>
 8012c84:	9b04      	ldr	r3, [sp, #16]
 8012c86:	4599      	cmp	r9, r3
 8012c88:	f240 80a3 	bls.w	8012dd2 <http_recv+0x25a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8012c8c:	463a      	mov	r2, r7
 8012c8e:	49a2      	ldr	r1, [pc, #648]	; (8012f18 <http_recv+0x3a0>)
 8012c90:	4640      	mov	r0, r8
 8012c92:	f000 fa35 	bl	8013100 <lwip_strnstr>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	f000 809b 	beq.w	8012dd2 <http_recv+0x25a>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8012c9c:	9b05      	ldr	r3, [sp, #20]
 8012c9e:	f1ba 0f00 	cmp.w	sl, #0
 8012ca2:	f000 8115 	beq.w	8012ed0 <http_recv+0x358>
            hs->keepalive = 0;
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8012cac:	eba9 020b 	sub.w	r2, r9, fp
          *sp1 = 0;
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8012cb4:	b292      	uxth	r2, r2
          *sp1 = 0;
 8012cb6:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8012cb8:	eb0b 0002 	add.w	r0, fp, r2
 8012cbc:	f80b 1002 	strb.w	r1, [fp, r2]
 8012cc0:	9005      	str	r0, [sp, #20]
          if (is_post) {
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	f000 80ec 	beq.w	8012ea0 <http_recv+0x328>
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8012cc8:	f109 0301 	add.w	r3, r9, #1
 8012ccc:	4992      	ldr	r1, [pc, #584]	; (8012f18 <http_recv+0x3a0>)
            struct pbuf *q = hs->req;
 8012cce:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8012cd2:	eba3 0208 	sub.w	r2, r3, r8
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	9306      	str	r3, [sp, #24]
 8012cda:	1aba      	subs	r2, r7, r2
 8012cdc:	f000 fa10 	bl	8013100 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8012ce0:	9008      	str	r0, [sp, #32]
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	f000 8168 	beq.w	8012fb8 <http_recv+0x440>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8012ce8:	9b06      	ldr	r3, [sp, #24]
 8012cea:	498c      	ldr	r1, [pc, #560]	; (8012f1c <http_recv+0x3a4>)
 8012cec:	1ac2      	subs	r2, r0, r3
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f000 fa06 	bl	8013100 <lwip_strnstr>
    if (scontent_len != NULL) {
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	f000 80ff 	beq.w	8012ef8 <http_recv+0x380>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8012cfa:	f100 0310 	add.w	r3, r0, #16
 8012cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8012d00:	220a      	movs	r2, #10
 8012d02:	4982      	ldr	r1, [pc, #520]	; (8012f0c <http_recv+0x394>)
 8012d04:	4618      	mov	r0, r3
 8012d06:	9307      	str	r3, [sp, #28]
 8012d08:	f000 f9fa 	bl	8013100 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f000 80f3 	beq.w	8012ef8 <http_recv+0x380>
        content_len = atoi(content_len_num);
 8012d12:	9b07      	ldr	r3, [sp, #28]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f00a f8d1 	bl	801cebc <atoi>
        if (content_len == 0) {
 8012d1a:	1e01      	subs	r1, r0, #0
 8012d1c:	9107      	str	r1, [sp, #28]
 8012d1e:	f000 80e3 	beq.w	8012ee8 <http_recv+0x370>
        if (content_len >= 0) {
 8012d22:	f2c0 80e9 	blt.w	8012ef8 <http_recv+0x380>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012d26:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8012d28:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012d2a:	9a06      	ldr	r2, [sp, #24]
          u8_t post_auto_wnd = 1;
 8012d2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012d30:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8012d32:	f04f 0e00 	mov.w	lr, #0
          u8_t post_auto_wnd = 1;
 8012d36:	f80c 0d01 	strb.w	r0, [ip, #-1]!
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012d3a:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012d3c:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012d40:	1a9b      	subs	r3, r3, r2
          http_uri_buf[0] = 0;
 8012d42:	4877      	ldr	r0, [pc, #476]	; (8012f20 <http_recv+0x3a8>)
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012d44:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012d48:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012d4a:	9a06      	ldr	r2, [sp, #24]
          http_uri_buf[0] = 0;
 8012d4c:	f880 e000 	strb.w	lr, [r0]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8012d50:	bfb4      	ite	lt
 8012d52:	46b8      	movlt	r8, r7
 8012d54:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8012d58:	429f      	cmp	r7, r3
 8012d5a:	bfa8      	it	ge
 8012d5c:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012d5e:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8012d60:	4607      	mov	r7, r0
          *crlfcrlf = 0;
 8012d62:	9808      	ldr	r0, [sp, #32]
 8012d64:	f880 e000 	strb.w	lr, [r0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8012d68:	4628      	mov	r0, r5
 8012d6a:	9701      	str	r7, [sp, #4]
 8012d6c:	9f07      	ldr	r7, [sp, #28]
 8012d6e:	f8cd c00c 	str.w	ip, [sp, #12]
 8012d72:	9700      	str	r7, [sp, #0]
 8012d74:	f8cd b008 	str.w	fp, [sp, #8]
 8012d78:	f7f1 fcb2 	bl	80046e0 <httpd_post_begin>
          if (err == ERR_OK) {
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	f040 80fb 	bne.w	8012f78 <http_recv+0x400>
            hs->post_content_len_left = (u32_t)content_len;
 8012d82:	632f      	str	r7, [r5, #48]	; 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 8012d84:	f1ba 0f00 	cmp.w	sl, #0
 8012d88:	d011      	beq.n	8012dae <http_recv+0x236>
 8012d8a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8012d8e:	4598      	cmp	r8, r3
 8012d90:	f0c0 80d5 	bcc.w	8012f3e <http_recv+0x3c6>
 8012d94:	4652      	mov	r2, sl
 8012d96:	e003      	b.n	8012da0 <http_recv+0x228>
 8012d98:	8953      	ldrh	r3, [r2, #10]
 8012d9a:	4543      	cmp	r3, r8
 8012d9c:	f200 80ce 	bhi.w	8012f3c <http_recv+0x3c4>
              start_offset -= q->len;
 8012da0:	eba8 0803 	sub.w	r8, r8, r3
              q = q->next;
 8012da4:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8012da6:	fa1f f888 	uxth.w	r8, r8
            while((q != NULL) && (q->len <= start_offset)) {
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	d1f4      	bne.n	8012d98 <http_recv+0x220>
            } else if (hs->post_content_len_left == 0) {
 8012dae:	9b07      	ldr	r3, [sp, #28]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f000 80f6 	beq.w	8012fa2 <http_recv+0x42a>
        if (hs->req != NULL) {
 8012db6:	6a28      	ldr	r0, [r5, #32]
 8012db8:	2800      	cmp	r0, #0
 8012dba:	f000 80ee 	beq.w	8012f9a <http_recv+0x422>
          pbuf_free(hs->req);
 8012dbe:	f001 fd41 	bl	8014844 <pbuf_free>
          hs->req = NULL;
 8012dc2:	2300      	movs	r3, #0
      pbuf_free(p);
 8012dc4:	4620      	mov	r0, r4
          hs->req = NULL;
 8012dc6:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8012dc8:	f001 fd3c 	bl	8014844 <pbuf_free>
 8012dcc:	e706      	b.n	8012bdc <http_recv+0x64>
    hs->req = p;
 8012dce:	622c      	str	r4, [r5, #32]
 8012dd0:	e717      	b.n	8012c02 <http_recv+0x8a>
  clen = pbuf_clen(hs->req);
 8012dd2:	6a28      	ldr	r0, [r5, #32]
 8012dd4:	f001 ff2a 	bl	8014c2c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8012dd8:	6a2b      	ldr	r3, [r5, #32]
 8012dda:	891b      	ldrh	r3, [r3, #8]
 8012ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012de0:	d202      	bcs.n	8012de8 <http_recv+0x270>
 8012de2:	2805      	cmp	r0, #5
 8012de4:	f67f aedc 	bls.w	8012ba0 <http_recv+0x28>
    return http_find_error_file(hs, 400);
 8012de8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7ff fb1f 	bl	8012430 <http_find_error_file>
 8012df2:	4607      	mov	r7, r0
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012df4:	f107 0310 	add.w	r3, r7, #16
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	2b10      	cmp	r3, #16
 8012dfc:	d91d      	bls.n	8012e3a <http_recv+0x2c2>
 8012dfe:	4b49      	ldr	r3, [pc, #292]	; (8012f24 <http_recv+0x3ac>)
 8012e00:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8012e04:	4948      	ldr	r1, [pc, #288]	; (8012f28 <http_recv+0x3b0>)
 8012e06:	4849      	ldr	r0, [pc, #292]	; (8012f2c <http_recv+0x3b4>)
 8012e08:	f00a fbee 	bl	801d5e8 <iprintf>
      if (parsed != ERR_INPROGRESS) {
 8012e0c:	1d7b      	adds	r3, r7, #5
 8012e0e:	f43f aec7 	beq.w	8012ba0 <http_recv+0x28>
        if (hs->req != NULL) {
 8012e12:	6a28      	ldr	r0, [r5, #32]
 8012e14:	b118      	cbz	r0, 8012e1e <http_recv+0x2a6>
          pbuf_free(hs->req);
 8012e16:	f001 fd15 	bl	8014844 <pbuf_free>
          hs->req = NULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f001 fd10 	bl	8014844 <pbuf_free>
      if (parsed == ERR_OK) {
 8012e24:	2f00      	cmp	r7, #0
 8012e26:	f43f aed9 	beq.w	8012bdc <http_recv+0x64>
      } else if (parsed == ERR_ARG) {
 8012e2a:	3710      	adds	r7, #16
 8012e2c:	f43f aec0 	beq.w	8012bb0 <http_recv+0x38>
 8012e30:	e6c2      	b.n	8012bb8 <http_recv+0x40>
    data = (char *)p->payload;
 8012e32:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8012e36:	8967      	ldrh	r7, [r4, #10]
 8012e38:	e6f7      	b.n	8012c2a <http_recv+0xb2>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012e3a:	4a3d      	ldr	r2, [pc, #244]	; (8012f30 <http_recv+0x3b8>)
 8012e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8012e40:	07da      	lsls	r2, r3, #31
 8012e42:	d4e3      	bmi.n	8012e0c <http_recv+0x294>
 8012e44:	e7db      	b.n	8012dfe <http_recv+0x286>
      } else if (!strncmp(data, "POST ", 5)) {
 8012e46:	2205      	movs	r2, #5
 8012e48:	493a      	ldr	r1, [pc, #232]	; (8012f34 <http_recv+0x3bc>)
 8012e4a:	4640      	mov	r0, r8
 8012e4c:	f00a fd94 	bl	801d978 <strncmp>
 8012e50:	4682      	mov	sl, r0
 8012e52:	b988      	cbnz	r0, 8012e78 <http_recv+0x300>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012e54:	1f7b      	subs	r3, r7, #5
        sp1 = data + 4;
 8012e56:	f108 0204 	add.w	r2, r8, #4
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8012e5a:	f108 0b05 	add.w	fp, r8, #5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012e5e:	492d      	ldr	r1, [pc, #180]	; (8012f14 <http_recv+0x39c>)
 8012e60:	b29b      	uxth	r3, r3
        sp1 = data + 4;
 8012e62:	9204      	str	r2, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012e64:	4658      	mov	r0, fp
 8012e66:	461a      	mov	r2, r3
 8012e68:	9305      	str	r3, [sp, #20]
 8012e6a:	f000 f949 	bl	8013100 <lwip_strnstr>
      if (sp2 == NULL) {
 8012e6e:	9b05      	ldr	r3, [sp, #20]
 8012e70:	4681      	mov	r9, r0
 8012e72:	b338      	cbz	r0, 8012ec4 <http_recv+0x34c>
        is_post = 1;
 8012e74:	2301      	movs	r3, #1
 8012e76:	e700      	b.n	8012c7a <http_recv+0x102>
        data[4] = 0;
 8012e78:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8012e7a:	f240 11f5 	movw	r1, #501	; 0x1f5
 8012e7e:	4628      	mov	r0, r5
        data[4] = 0;
 8012e80:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8012e84:	f7ff fad4 	bl	8012430 <http_find_error_file>
 8012e88:	4607      	mov	r7, r0
 8012e8a:	e7b3      	b.n	8012df4 <http_recv+0x27c>
        if (hs->req != NULL) {
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	f43f ae87 	beq.w	8012ba0 <http_recv+0x28>
          pbuf_free(hs->req);
 8012e92:	f001 fcd7 	bl	8014844 <pbuf_free>
          hs->req = NULL;
 8012e96:	622f      	str	r7, [r5, #32]
      pbuf_free(p);
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f001 fcd3 	bl	8014844 <pbuf_free>
 8012e9e:	e68b      	b.n	8012bb8 <http_recv+0x40>
            return http_find_file(hs, uri, is_09);
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	4659      	mov	r1, fp
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	f7ff f9c7 	bl	8012238 <http_find_file>
 8012eaa:	4607      	mov	r7, r0
 8012eac:	e7a2      	b.n	8012df4 <http_recv+0x27c>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012eae:	4652      	mov	r2, sl
 8012eb0:	4916      	ldr	r1, [pc, #88]	; (8012f0c <http_recv+0x394>)
 8012eb2:	4658      	mov	r0, fp
 8012eb4:	9305      	str	r3, [sp, #20]
        is_09 = 1;
 8012eb6:	f04f 0a01 	mov.w	sl, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012eba:	f000 f921 	bl	8013100 <lwip_strnstr>
 8012ebe:	9b05      	ldr	r3, [sp, #20]
 8012ec0:	4681      	mov	r9, r0
 8012ec2:	e6da      	b.n	8012c7a <http_recv+0x102>
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	4658      	mov	r0, fp
 8012ec8:	4910      	ldr	r1, [pc, #64]	; (8012f0c <http_recv+0x394>)
 8012eca:	f000 f919 	bl	8013100 <lwip_strnstr>
 8012ece:	e78b      	b.n	8012de8 <http_recv+0x270>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8012ed0:	463a      	mov	r2, r7
 8012ed2:	4919      	ldr	r1, [pc, #100]	; (8012f38 <http_recv+0x3c0>)
 8012ed4:	4640      	mov	r0, r8
 8012ed6:	f000 f913 	bl	8013100 <lwip_strnstr>
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d052      	beq.n	8012f86 <http_recv+0x40e>
            hs->keepalive = 1;
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 8012ee6:	e6e1      	b.n	8012cac <http_recv+0x134>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8012ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012eea:	7c13      	ldrb	r3, [r2, #16]
 8012eec:	2b30      	cmp	r3, #48	; 0x30
 8012eee:	d103      	bne.n	8012ef8 <http_recv+0x380>
 8012ef0:	7c53      	ldrb	r3, [r2, #17]
 8012ef2:	2b0d      	cmp	r3, #13
 8012ef4:	f43f af17 	beq.w	8012d26 <http_recv+0x1ae>
              *sp1 = ' ';
 8012ef8:	2320      	movs	r3, #32
 8012efa:	9a04      	ldr	r2, [sp, #16]
 8012efc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8012efe:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8012f00:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8012f04:	7013      	strb	r3, [r2, #0]
 8012f06:	e76f      	b.n	8012de8 <http_recv+0x270>
 8012f08:	20020ab4 	.word	0x20020ab4
 8012f0c:	080208bc 	.word	0x080208bc
 8012f10:	08037a30 	.word	0x08037a30
 8012f14:	08020a3c 	.word	0x08020a3c
 8012f18:	0801fb6c 	.word	0x0801fb6c
 8012f1c:	08037a70 	.word	0x08037a70
 8012f20:	20020a74 	.word	0x20020a74
 8012f24:	080379ac 	.word	0x080379ac
 8012f28:	08037a84 	.word	0x08037a84
 8012f2c:	08021804 	.word	0x08021804
 8012f30:	00010901 	.word	0x00010901
 8012f34:	08037a38 	.word	0x08037a38
 8012f38:	08037a40 	.word	0x08037a40
 8012f3c:	4692      	mov	sl, r2
              pbuf_header(q, -(s16_t)start_offset);
 8012f3e:	f1c8 0100 	rsb	r1, r8, #0
 8012f42:	4650      	mov	r0, sl
 8012f44:	b209      	sxth	r1, r1
 8012f46:	f001 fc75 	bl	8014834 <pbuf_header>
              pbuf_ref(q);
 8012f4a:	4650      	mov	r0, sl
 8012f4c:	f001 fe7a 	bl	8014c44 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8012f50:	4651      	mov	r1, sl
 8012f52:	4628      	mov	r0, r5
 8012f54:	f7ff fa46 	bl	80123e4 <http_post_rxpbuf>
 8012f58:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8012f5a:	2f00      	cmp	r7, #0
 8012f5c:	f43f af2b 	beq.w	8012db6 <http_recv+0x23e>
              *sp1 = ' ';
 8012f60:	2320      	movs	r3, #32
 8012f62:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8012f64:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8012f68:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8012f6a:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8012f6c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8012f70:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8012f72:	f43f af39 	beq.w	8012de8 <http_recv+0x270>
 8012f76:	e73d      	b.n	8012df4 <http_recv+0x27c>
            return http_find_file(hs, http_uri_buf, 0);
 8012f78:	2200      	movs	r2, #0
 8012f7a:	4913      	ldr	r1, [pc, #76]	; (8012fc8 <http_recv+0x450>)
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7ff f95b 	bl	8012238 <http_find_file>
 8012f82:	4607      	mov	r7, r0
 8012f84:	e7e9      	b.n	8012f5a <http_recv+0x3e2>
              lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8012f86:	463a      	mov	r2, r7
 8012f88:	4910      	ldr	r1, [pc, #64]	; (8012fcc <http_recv+0x454>)
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	9305      	str	r3, [sp, #20]
 8012f8e:	f000 f8b7 	bl	8013100 <lwip_strnstr>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8012f92:	9b05      	ldr	r3, [sp, #20]
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d1a3      	bne.n	8012ee0 <http_recv+0x368>
 8012f98:	e685      	b.n	8012ca6 <http_recv+0x12e>
      pbuf_free(p);
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	f001 fc52 	bl	8014844 <pbuf_free>
 8012fa0:	e61c      	b.n	8012bdc <http_recv+0x64>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8012fa2:	9907      	ldr	r1, [sp, #28]
 8012fa4:	2202      	movs	r2, #2
 8012fa6:	2004      	movs	r0, #4
 8012fa8:	f001 fcba 	bl	8014920 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 8012fac:	4601      	mov	r1, r0
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f7ff fa18 	bl	80123e4 <http_post_rxpbuf>
 8012fb4:	4607      	mov	r7, r0
 8012fb6:	e7d0      	b.n	8012f5a <http_recv+0x3e2>
              *sp1 = ' ';
 8012fb8:	2320      	movs	r3, #32
 8012fba:	9a04      	ldr	r2, [sp, #16]
 8012fbc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8012fbe:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8012fc0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8012fc4:	7013      	strb	r3, [r2, #0]
 8012fc6:	e5eb      	b.n	8012ba0 <http_recv+0x28>
 8012fc8:	20020a74 	.word	0x20020a74
 8012fcc:	08037a58 	.word	0x08037a58

08012fd0 <http_err>:
  if (hs != NULL) {
 8012fd0:	b140      	cbz	r0, 8012fe4 <http_err+0x14>
{
 8012fd2:	b510      	push	{r4, lr}
 8012fd4:	4604      	mov	r4, r0
    http_state_eof(hs);
 8012fd6:	f7fe ffdf 	bl	8011f98 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8012fda:	4620      	mov	r0, r4
}
 8012fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8012fe0:	f000 be6e 	b.w	8013cc0 <mem_free>
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop

08012fe8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8012fe8:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8012fea:	202e      	movs	r0, #46	; 0x2e
 8012fec:	f003 f990 	bl	8016310 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	b380      	cbz	r0, 8013056 <httpd_init+0x6e>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8012ff4:	2101      	movs	r1, #1
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f002 fb3a 	bl	8015670 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8012ffc:	2250      	movs	r2, #80	; 0x50
 8012ffe:	491a      	ldr	r1, [pc, #104]	; (8013068 <httpd_init+0x80>)
 8013000:	4620      	mov	r0, r4
 8013002:	f002 f94f 	bl	80152a4 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8013006:	b958      	cbnz	r0, 8013020 <httpd_init+0x38>
  pcb = tcp_listen(pcb);
 8013008:	4620      	mov	r0, r4
 801300a:	21ff      	movs	r1, #255	; 0xff
 801300c:	f002 fa04 	bl	8015418 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8013010:	4604      	mov	r4, r0
 8013012:	b198      	cbz	r0, 801303c <httpd_init+0x54>
  tcp_accept(pcb, http_accept);
 8013014:	4620      	mov	r0, r4
 8013016:	4915      	ldr	r1, [pc, #84]	; (801306c <httpd_init+0x84>)
}
 8013018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 801301c:	f002 bb9a 	b.w	8015754 <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8013020:	4b13      	ldr	r3, [pc, #76]	; (8013070 <httpd_init+0x88>)
 8013022:	f640 2215 	movw	r2, #2581	; 0xa15
 8013026:	4913      	ldr	r1, [pc, #76]	; (8013074 <httpd_init+0x8c>)
 8013028:	4813      	ldr	r0, [pc, #76]	; (8013078 <httpd_init+0x90>)
 801302a:	f00a fadd 	bl	801d5e8 <iprintf>
  pcb = tcp_listen(pcb);
 801302e:	4620      	mov	r0, r4
 8013030:	21ff      	movs	r1, #255	; 0xff
 8013032:	f002 f9f1 	bl	8015418 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8013036:	4604      	mov	r4, r0
 8013038:	2800      	cmp	r0, #0
 801303a:	d1eb      	bne.n	8013014 <httpd_init+0x2c>
 801303c:	490f      	ldr	r1, [pc, #60]	; (801307c <httpd_init+0x94>)
 801303e:	f640 2217 	movw	r2, #2583	; 0xa17
 8013042:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <httpd_init+0x88>)
 8013044:	480c      	ldr	r0, [pc, #48]	; (8013078 <httpd_init+0x90>)
 8013046:	f00a facf 	bl	801d5e8 <iprintf>
  tcp_accept(pcb, http_accept);
 801304a:	4620      	mov	r0, r4
 801304c:	4907      	ldr	r1, [pc, #28]	; (801306c <httpd_init+0x84>)
}
 801304e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8013052:	f002 bb7f 	b.w	8015754 <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8013056:	4b06      	ldr	r3, [pc, #24]	; (8013070 <httpd_init+0x88>)
 8013058:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 801305c:	4908      	ldr	r1, [pc, #32]	; (8013080 <httpd_init+0x98>)
 801305e:	4806      	ldr	r0, [pc, #24]	; (8013078 <httpd_init+0x90>)
 8013060:	f00a fac2 	bl	801d5e8 <iprintf>
 8013064:	e7c6      	b.n	8012ff4 <httpd_init+0xc>
 8013066:	bf00      	nop
 8013068:	08039ac4 	.word	0x08039ac4
 801306c:	08012009 	.word	0x08012009
 8013070:	080379ac 	.word	0x080379ac
 8013074:	08037bb8 	.word	0x08037bb8
 8013078:	08021804 	.word	0x08021804
 801307c:	08037bd4 	.word	0x08037bd4
 8013080:	08037b9c 	.word	0x08037b9c

08013084 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8013084:	b570      	push	{r4, r5, r6, lr}
 8013086:	460d      	mov	r5, r1
 8013088:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801308a:	4606      	mov	r6, r0
 801308c:	b1c8      	cbz	r0, 80130c2 <http_set_ssi_handler+0x3e>
  g_pfnSSIHandler = ssi_handler;
 801308e:	4b11      	ldr	r3, [pc, #68]	; (80130d4 <http_set_ssi_handler+0x50>)
 8013090:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8013092:	b175      	cbz	r5, 80130b2 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8013094:	2c00      	cmp	r4, #0
 8013096:	dd04      	ble.n	80130a2 <http_set_ssi_handler+0x1e>

  g_ppcTags = tags;
 8013098:	4a0f      	ldr	r2, [pc, #60]	; (80130d8 <http_set_ssi_handler+0x54>)
  g_iNumTags = num_tags;
 801309a:	4b10      	ldr	r3, [pc, #64]	; (80130dc <http_set_ssi_handler+0x58>)
  g_ppcTags = tags;
 801309c:	6015      	str	r5, [r2, #0]
  g_iNumTags = num_tags;
 801309e:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80130a0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80130a2:	4b0f      	ldr	r3, [pc, #60]	; (80130e0 <http_set_ssi_handler+0x5c>)
 80130a4:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 80130a8:	490e      	ldr	r1, [pc, #56]	; (80130e4 <http_set_ssi_handler+0x60>)
 80130aa:	480f      	ldr	r0, [pc, #60]	; (80130e8 <http_set_ssi_handler+0x64>)
 80130ac:	f00a fa9c 	bl	801d5e8 <iprintf>
 80130b0:	e7f2      	b.n	8013098 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80130b2:	4b0b      	ldr	r3, [pc, #44]	; (80130e0 <http_set_ssi_handler+0x5c>)
 80130b4:	f640 222f 	movw	r2, #2607	; 0xa2f
 80130b8:	490c      	ldr	r1, [pc, #48]	; (80130ec <http_set_ssi_handler+0x68>)
 80130ba:	480b      	ldr	r0, [pc, #44]	; (80130e8 <http_set_ssi_handler+0x64>)
 80130bc:	f00a fa94 	bl	801d5e8 <iprintf>
 80130c0:	e7e8      	b.n	8013094 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80130c2:	4b07      	ldr	r3, [pc, #28]	; (80130e0 <http_set_ssi_handler+0x5c>)
 80130c4:	f640 2228 	movw	r2, #2600	; 0xa28
 80130c8:	4909      	ldr	r1, [pc, #36]	; (80130f0 <http_set_ssi_handler+0x6c>)
 80130ca:	4807      	ldr	r0, [pc, #28]	; (80130e8 <http_set_ssi_handler+0x64>)
 80130cc:	f00a fa8c 	bl	801d5e8 <iprintf>
 80130d0:	e7dd      	b.n	801308e <http_set_ssi_handler+0xa>
 80130d2:	bf00      	nop
 80130d4:	20025a20 	.word	0x20025a20
 80130d8:	20025a28 	.word	0x20025a28
 80130dc:	20025a24 	.word	0x20025a24
 80130e0:	080379ac 	.word	0x080379ac
 80130e4:	08037b84 	.word	0x08037b84
 80130e8:	08021804 	.word	0x08021804
 80130ec:	08037b74 	.word	0x08037b74
 80130f0:	08037b5c 	.word	0x08037b5c

080130f4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80130f4:	ba40      	rev16	r0, r0
}
 80130f6:	b280      	uxth	r0, r0
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop

080130fc <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80130fc:	ba00      	rev	r0, r0
 80130fe:	4770      	bx	lr

08013100 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8013100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013104:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8013106:	4608      	mov	r0, r1
{
 8013108:	4688      	mov	r8, r1
 801310a:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801310c:	f7ed f8a2 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8013110:	b1c0      	cbz	r0, 8013144 <lwip_strnstr+0x44>
 8013112:	4605      	mov	r5, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8013114:	7820      	ldrb	r0, [r4, #0]
 8013116:	b1b0      	cbz	r0, 8013146 <lwip_strnstr+0x46>
 8013118:	4426      	add	r6, r4
 801311a:	1963      	adds	r3, r4, r5
 801311c:	429e      	cmp	r6, r3
 801311e:	d314      	bcc.n	801314a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8013120:	f898 7000 	ldrb.w	r7, [r8]
 8013124:	e005      	b.n	8013132 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8013126:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801312a:	1963      	adds	r3, r4, r5
 801312c:	b158      	cbz	r0, 8013146 <lwip_strnstr+0x46>
 801312e:	429e      	cmp	r6, r3
 8013130:	d30b      	bcc.n	801314a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8013132:	4287      	cmp	r7, r0
 8013134:	d1f7      	bne.n	8013126 <lwip_strnstr+0x26>
 8013136:	462a      	mov	r2, r5
 8013138:	4641      	mov	r1, r8
 801313a:	4620      	mov	r0, r4
 801313c:	f00a fc1c 	bl	801d978 <strncmp>
 8013140:	2800      	cmp	r0, #0
 8013142:	d1f0      	bne.n	8013126 <lwip_strnstr+0x26>
 8013144:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8013146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801314a:	2000      	movs	r0, #0
}
 801314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013150 <lwip_stricmp>:
lwip_stricmp(const char* str1, const char* str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8013150:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8013154:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8013158:	4293      	cmp	r3, r2
 801315a:	d01c      	beq.n	8013196 <lwip_stricmp+0x46>
{
 801315c:	b430      	push	{r4, r5}
 801315e:	f043 0420 	orr.w	r4, r3, #32
 8013162:	f042 0520 	orr.w	r5, r2, #32
 8013166:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801316a:	2a19      	cmp	r2, #25
 801316c:	d810      	bhi.n	8013190 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801316e:	42ac      	cmp	r4, r5
 8013170:	d10e      	bne.n	8013190 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8013172:	b1a3      	cbz	r3, 801319e <lwip_stricmp+0x4e>
    c1 = *str1++;
 8013174:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8013178:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801317c:	4293      	cmp	r3, r2
 801317e:	d0f8      	beq.n	8013172 <lwip_stricmp+0x22>
 8013180:	f043 0420 	orr.w	r4, r3, #32
 8013184:	f042 0520 	orr.w	r5, r2, #32
 8013188:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801318c:	2a19      	cmp	r2, #25
 801318e:	d9ee      	bls.n	801316e <lwip_stricmp+0x1e>
        return 1;
 8013190:	2001      	movs	r0, #1
  return 0;
}
 8013192:	bc30      	pop	{r4, r5}
 8013194:	4770      	bx	lr
  } while (c1 != 0);
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1da      	bne.n	8013150 <lwip_stricmp>
  return 0;
 801319a:	4618      	mov	r0, r3
}
 801319c:	4770      	bx	lr
  return 0;
 801319e:	4618      	mov	r0, r3
}
 80131a0:	bc30      	pop	{r4, r5}
 80131a2:	4770      	bx	lr

080131a4 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
 80131a4:	b470      	push	{r4, r5, r6}
  char c1, c2;

  do {
    c1 = *str1++;
 80131a6:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80131aa:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 80131ae:	42a3      	cmp	r3, r4
 80131b0:	d009      	beq.n	80131c6 <lwip_strnicmp+0x22>
 80131b2:	f043 0520 	orr.w	r5, r3, #32
 80131b6:	f044 0620 	orr.w	r6, r4, #32
 80131ba:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80131be:	2c19      	cmp	r4, #25
 80131c0:	d80d      	bhi.n	80131de <lwip_strnicmp+0x3a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80131c2:	42b5      	cmp	r5, r6
 80131c4:	d10b      	bne.n	80131de <lwip_strnicmp+0x3a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (len-- && c1 != 0);
 80131c6:	3300      	adds	r3, #0
 80131c8:	bf18      	it	ne
 80131ca:	2301      	movne	r3, #1
 80131cc:	2a00      	cmp	r2, #0
 80131ce:	bf08      	it	eq
 80131d0:	2300      	moveq	r3, #0
 80131d2:	3a01      	subs	r2, #1
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d1e6      	bne.n	80131a6 <lwip_strnicmp+0x2>
  return 0;
 80131d8:	4618      	mov	r0, r3
}
 80131da:	bc70      	pop	{r4, r5, r6}
 80131dc:	4770      	bx	lr
        return 1;
 80131de:	2001      	movs	r0, #1
}
 80131e0:	bc70      	pop	{r4, r5, r6}
 80131e2:	4770      	bx	lr

080131e4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 80131e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131e8:	0106      	lsls	r6, r0, #4
 80131ea:	4c24      	ldr	r4, [pc, #144]	; (801327c <dns_call_found+0x98>)
 80131ec:	4605      	mov	r5, r0
 80131ee:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80131f0:	eb06 0800 	add.w	r8, r6, r0
 80131f4:	4f22      	ldr	r7, [pc, #136]	; (8013280 <dns_call_found+0x9c>)
 80131f6:	f104 0930 	add.w	r9, r4, #48	; 0x30
 80131fa:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80131fe:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8013202:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8013204:	4651      	mov	r1, sl
 8013206:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801320a:	b133      	cbz	r3, 801321a <dns_call_found+0x36>
 801320c:	7a22      	ldrb	r2, [r4, #8]
 801320e:	42aa      	cmp	r2, r5
 8013210:	d103      	bne.n	801321a <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8013212:	6862      	ldr	r2, [r4, #4]
 8013214:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8013216:	2300      	movs	r3, #0
 8013218:	6023      	str	r3, [r4, #0]
 801321a:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801321c:	454c      	cmp	r4, r9
 801321e:	d1f0      	bne.n	8013202 <dns_call_found+0x1e>
 8013220:	1973      	adds	r3, r6, r5
 8013222:	2400      	movs	r4, #0
 8013224:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8013228:	4f15      	ldr	r7, [pc, #84]	; (8013280 <dns_call_found+0x9c>)
 801322a:	7bd9      	ldrb	r1, [r3, #15]
 801322c:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 801322e:	b2e3      	uxtb	r3, r4
 8013230:	3401      	adds	r4, #1
 8013232:	42ab      	cmp	r3, r5
 8013234:	d002      	beq.n	801323c <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8013236:	7a93      	ldrb	r3, [r2, #10]
 8013238:	2b02      	cmp	r3, #2
 801323a:	d015      	beq.n	8013268 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801323c:	2c04      	cmp	r4, #4
 801323e:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8013242:	d1f4      	bne.n	801322e <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8013244:	2903      	cmp	r1, #3
 8013246:	d80d      	bhi.n	8013264 <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8013248:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801324a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8013284 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801324e:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8013252:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8013256:	f006 f915 	bl	8019484 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801325a:	2200      	movs	r2, #0
 801325c:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801325e:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8013260:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8013264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8013268:	7bd3      	ldrb	r3, [r2, #15]
 801326a:	428b      	cmp	r3, r1
 801326c:	d1e6      	bne.n	801323c <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801326e:	4435      	add	r5, r6
 8013270:	2304      	movs	r3, #4
 8013272:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8013276:	73fb      	strb	r3, [r7, #15]
 8013278:	e7f4      	b.n	8013264 <dns_call_found+0x80>
 801327a:	bf00      	nop
 801327c:	20020ec8 	.word	0x20020ec8
 8013280:	20020f04 	.word	0x20020f04
 8013284:	20020eb8 	.word	0x20020eb8

08013288 <dns_send>:
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8013288:	0103      	lsls	r3, r0, #4
{
 801328a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801328e:	181c      	adds	r4, r3, r0
 8013290:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8013400 <dns_send+0x178>
{
 8013294:	b087      	sub	sp, #28
 8013296:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8013298:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
 801329c:	9301      	str	r3, [sp, #4]
 801329e:	7ae3      	ldrb	r3, [r4, #11]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d907      	bls.n	80132b4 <dns_send+0x2c>
 80132a4:	4b51      	ldr	r3, [pc, #324]	; (80133ec <dns_send+0x164>)
 80132a6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80132aa:	4951      	ldr	r1, [pc, #324]	; (80133f0 <dns_send+0x168>)
 80132ac:	4851      	ldr	r0, [pc, #324]	; (80133f4 <dns_send+0x16c>)
 80132ae:	f00a f99b 	bl	801d5e8 <iprintf>
 80132b2:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80132b4:	4a50      	ldr	r2, [pc, #320]	; (80133f8 <dns_send+0x170>)
 80132b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80132ba:	2c00      	cmp	r4, #0
 80132bc:	f000 8083 	beq.w	80133c6 <dns_send+0x13e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80132c0:	9b01      	ldr	r3, [sp, #4]
 80132c2:	eb03 0509 	add.w	r5, r3, r9
 80132c6:	012d      	lsls	r5, r5, #4
 80132c8:	f105 0410 	add.w	r4, r5, #16
 80132cc:	4454      	add	r4, sl
 80132ce:	4620      	mov	r0, r4
 80132d0:	f7ec ffc0 	bl	8000254 <strlen>
 80132d4:	2200      	movs	r2, #0
 80132d6:	f100 0112 	add.w	r1, r0, #18
 80132da:	4610      	mov	r0, r2
 80132dc:	b289      	uxth	r1, r1
 80132de:	f001 fb1f 	bl	8014920 <pbuf_alloc>
  if (p != NULL) {
 80132e2:	4680      	mov	r8, r0
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d07d      	beq.n	80133e4 <dns_send+0x15c>
    hdr.id = lwip_htons(entry->txid);
 80132e8:	4455      	add	r5, sl
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80132ea:	2300      	movs	r3, #0
    --hostname;
 80132ec:	3c01      	subs	r4, #1
    hdr.id = lwip_htons(entry->txid);
 80132ee:	8928      	ldrh	r0, [r5, #8]
    query_idx = SIZEOF_DNS_HDR;
 80132f0:	250c      	movs	r5, #12
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80132f2:	9305      	str	r3, [sp, #20]
 80132f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80132f8:	f7ff fefc 	bl	80130f4 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 80132fc:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 80132fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8013302:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
 8013306:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801330a:	eb0d 0105 	add.w	r1, sp, r5
 801330e:	462a      	mov	r2, r5
 8013310:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8013312:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8013316:	f001 fe15 	bl	8014f44 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801331a:	7863      	ldrb	r3, [r4, #1]
      ++hostname;
 801331c:	1c67      	adds	r7, r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801331e:	2b2e      	cmp	r3, #46	; 0x2e
 8013320:	d04b      	beq.n	80133ba <dns_send+0x132>
 8013322:	2b00      	cmp	r3, #0
 8013324:	d049      	beq.n	80133ba <dns_send+0x132>
      ++hostname;
 8013326:	463c      	mov	r4, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013328:	2200      	movs	r2, #0
 801332a:	e000      	b.n	801332e <dns_send+0xa6>
 801332c:	b12b      	cbz	r3, 801333a <dns_send+0xb2>
 801332e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
        ++n;
 8013332:	3201      	adds	r2, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013334:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 8013336:	b2d2      	uxtb	r2, r2
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8013338:	d1f8      	bne.n	801332c <dns_send+0xa4>
 801333a:	18ae      	adds	r6, r5, r2
 801333c:	eba4 0b07 	sub.w	fp, r4, r7
 8013340:	b2b6      	uxth	r6, r6
 8013342:	fa1f fb8b 	uxth.w	fp, fp
      pbuf_put_at(p, query_idx, n);
 8013346:	4629      	mov	r1, r5
 8013348:	4640      	mov	r0, r8
 801334a:	f001 feb1 	bl	80150b0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 801334e:	1c6b      	adds	r3, r5, #1
 8013350:	465a      	mov	r2, fp
 8013352:	4639      	mov	r1, r7
 8013354:	b29b      	uxth	r3, r3
 8013356:	4640      	mov	r0, r8
 8013358:	f001 fe5e 	bl	8015018 <pbuf_take_at>
      query_idx += n + 1;
 801335c:	1c75      	adds	r5, r6, #1
    } while (*hostname != 0);
 801335e:	7822      	ldrb	r2, [r4, #0]
      query_idx += n + 1;
 8013360:	b2ad      	uxth	r5, r5
    } while (*hostname != 0);
 8013362:	2a00      	cmp	r2, #0
 8013364:	d1d9      	bne.n	801331a <dns_send+0x92>
    pbuf_put_at(p, query_idx, 0);
 8013366:	4629      	mov	r1, r5
 8013368:	4640      	mov	r0, r8
 801336a:	f001 fea1 	bl	80150b0 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801336e:	a906      	add	r1, sp, #24
 8013370:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    query_idx++;
 8013374:	1cb3      	adds	r3, r6, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8013376:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013378:	4d1f      	ldr	r5, [pc, #124]	; (80133f8 <dns_send+0x170>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801337a:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801337e:	b29b      	uxth	r3, r3
 8013380:	4640      	mov	r0, r8
 8013382:	f001 fe49 	bl	8015018 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8013386:	9b01      	ldr	r3, [sp, #4]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013388:	481c      	ldr	r0, [pc, #112]	; (80133fc <dns_send+0x174>)
 801338a:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 801338c:	444b      	add	r3, r9
 801338e:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8013390:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8013392:	eb0a 1a09 	add.w	sl, sl, r9, lsl #4
 8013396:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801339a:	f89a 400f 	ldrb.w	r4, [sl, #15]
 801339e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80133a2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80133a6:	f006 f819 	bl	80193dc <udp_sendto>
 80133aa:	4605      	mov	r5, r0
    pbuf_free(p);
 80133ac:	4640      	mov	r0, r8
 80133ae:	f001 fa49 	bl	8014844 <pbuf_free>
}
 80133b2:	4628      	mov	r0, r5
 80133b4:	b007      	add	sp, #28
 80133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80133ba:	f04f 0b00 	mov.w	fp, #0
 80133be:	462e      	mov	r6, r5
      ++hostname;
 80133c0:	463c      	mov	r4, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80133c2:	465a      	mov	r2, fp
 80133c4:	e7bf      	b.n	8013346 <dns_send+0xbe>
    dns_call_found(idx, NULL);
 80133c6:	4648      	mov	r0, r9
 80133c8:	4621      	mov	r1, r4
 80133ca:	f7ff ff0b 	bl	80131e4 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80133ce:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 80133d0:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 80133d2:	444b      	add	r3, r9
}
 80133d4:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 80133d6:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
 80133da:	f88a 400a 	strb.w	r4, [sl, #10]
}
 80133de:	b007      	add	sp, #28
 80133e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 80133e4:	f04f 35ff 	mov.w	r5, #4294967295
 80133e8:	e7e3      	b.n	80133b2 <dns_send+0x12a>
 80133ea:	bf00      	nop
 80133ec:	08037c88 	.word	0x08037c88
 80133f0:	08037cb8 	.word	0x08037cb8
 80133f4:	08021804 	.word	0x08021804
 80133f8:	20020efc 	.word	0x20020efc
 80133fc:	20020eb8 	.word	0x20020eb8
 8013400:	20020f04 	.word	0x20020f04

08013404 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8013404:	2803      	cmp	r0, #3
{
 8013406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801340a:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801340c:	d84a      	bhi.n	80134a4 <dns_check_entry+0xa0>

  switch (entry->state) {
 801340e:	0125      	lsls	r5, r4, #4
 8013410:	4e39      	ldr	r6, [pc, #228]	; (80134f8 <dns_check_entry+0xf4>)
 8013412:	192b      	adds	r3, r5, r4
 8013414:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8013418:	7a9b      	ldrb	r3, [r3, #10]
 801341a:	2b03      	cmp	r3, #3
 801341c:	d84e      	bhi.n	80134bc <dns_check_entry+0xb8>
 801341e:	e8df f003 	tbb	[pc, r3]
 8013422:	100e      	.short	0x100e
 8013424:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8013426:	192b      	adds	r3, r5, r4
 8013428:	011b      	lsls	r3, r3, #4
 801342a:	58f2      	ldr	r2, [r6, r3]
 801342c:	b112      	cbz	r2, 8013434 <dns_check_entry+0x30>
 801342e:	3a01      	subs	r2, #1
 8013430:	50f2      	str	r2, [r6, r3]
 8013432:	b922      	cbnz	r2, 801343e <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8013434:	442c      	add	r4, r5
 8013436:	2300      	movs	r3, #0
 8013438:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801343c:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013442:	4f2e      	ldr	r7, [pc, #184]	; (80134fc <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8013444:	f00a f960 	bl	801d708 <rand>
 8013448:	4b2b      	ldr	r3, [pc, #172]	; (80134f8 <dns_check_entry+0xf4>)
 801344a:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801344c:	7a9a      	ldrb	r2, [r3, #10]
 801344e:	2a02      	cmp	r2, #2
 8013450:	d030      	beq.n	80134b4 <dns_check_entry+0xb0>
 8013452:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013456:	42bb      	cmp	r3, r7
 8013458:	d1f8      	bne.n	801344c <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 801345a:	4425      	add	r5, r4
      err = dns_send(i);
 801345c:	4620      	mov	r0, r4
      entry->server_idx = 0;
 801345e:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8013460:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 8013462:	012d      	lsls	r5, r5, #4
 8013464:	f105 0308 	add.w	r3, r5, #8
 8013468:	4435      	add	r5, r6
 801346a:	441e      	add	r6, r3
 801346c:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 801346e:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 8013470:	80b2      	strh	r2, [r6, #4]
}
 8013472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8013476:	f7ff bf07 	b.w	8013288 <dns_send>
      if (--entry->tmr == 0) {
 801347a:	192a      	adds	r2, r5, r4
 801347c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8013480:	7b13      	ldrb	r3, [r2, #12]
 8013482:	3b01      	subs	r3, #1
 8013484:	b2db      	uxtb	r3, r3
 8013486:	7313      	strb	r3, [r2, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1d8      	bne.n	801343e <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801348c:	7b53      	ldrb	r3, [r2, #13]
 801348e:	3301      	adds	r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b04      	cmp	r3, #4
 8013494:	7353      	strb	r3, [r2, #13]
 8013496:	d01a      	beq.n	80134ce <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 8013498:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801349a:	4620      	mov	r0, r4
}
 801349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80134a0:	f7ff bef2 	b.w	8013288 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80134a4:	4b16      	ldr	r3, [pc, #88]	; (8013500 <dns_check_entry+0xfc>)
 80134a6:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80134aa:	4916      	ldr	r1, [pc, #88]	; (8013504 <dns_check_entry+0x100>)
 80134ac:	4816      	ldr	r0, [pc, #88]	; (8013508 <dns_check_entry+0x104>)
 80134ae:	f00a f89b 	bl	801d5e8 <iprintf>
 80134b2:	e7ac      	b.n	801340e <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80134b4:	891a      	ldrh	r2, [r3, #8]
 80134b6:	428a      	cmp	r2, r1
 80134b8:	d1cb      	bne.n	8013452 <dns_check_entry+0x4e>
 80134ba:	e7c3      	b.n	8013444 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80134bc:	4b10      	ldr	r3, [pc, #64]	; (8013500 <dns_check_entry+0xfc>)
 80134be:	f240 4237 	movw	r2, #1079	; 0x437
 80134c2:	4912      	ldr	r1, [pc, #72]	; (801350c <dns_check_entry+0x108>)
 80134c4:	4810      	ldr	r0, [pc, #64]	; (8013508 <dns_check_entry+0x104>)
}
 80134c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80134ca:	f00a b88d 	b.w	801d5e8 <iprintf>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 80134ce:	7ad3      	ldrb	r3, [r2, #11]
 80134d0:	b93b      	cbnz	r3, 80134e2 <dns_check_entry+0xde>
 80134d2:	490f      	ldr	r1, [pc, #60]	; (8013510 <dns_check_entry+0x10c>)
 80134d4:	6849      	ldr	r1, [r1, #4]
 80134d6:	b121      	cbz	r1, 80134e2 <dns_check_entry+0xde>
            entry->server_idx++;
 80134d8:	2101      	movs	r1, #1
            entry->retries = 0;
 80134da:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 80134dc:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 80134de:	7311      	strb	r1, [r2, #12]
 80134e0:	e7db      	b.n	801349a <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 80134e2:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80134e4:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80134e6:	2100      	movs	r1, #0
 80134e8:	f7ff fe7c 	bl	80131e4 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80134ec:	2300      	movs	r3, #0
 80134ee:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80134f2:	72b3      	strb	r3, [r6, #10]
            break;
 80134f4:	e7a3      	b.n	801343e <dns_check_entry+0x3a>
 80134f6:	bf00      	nop
 80134f8:	20020f04 	.word	0x20020f04
 80134fc:	20021344 	.word	0x20021344
 8013500:	08037c88 	.word	0x08037c88
 8013504:	08037c4c 	.word	0x08037c4c
 8013508:	08021804 	.word	0x08021804
 801350c:	08037c68 	.word	0x08037c68
 8013510:	20020efc 	.word	0x20020efc

08013514 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013518:	461f      	mov	r7, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801351a:	8913      	ldrh	r3, [r2, #8]
{
 801351c:	b08b      	sub	sp, #44	; 0x2c
 801351e:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8013520:	2b0f      	cmp	r3, #15
 8013522:	d908      	bls.n	8013536 <dns_recv+0x22>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8013524:	2300      	movs	r3, #0
 8013526:	220c      	movs	r2, #12
 8013528:	a904      	add	r1, sp, #16
 801352a:	4620      	mov	r0, r4
 801352c:	f001 fcb6 	bl	8014e9c <pbuf_copy_partial>
 8013530:	280c      	cmp	r0, #12
 8013532:	4606      	mov	r6, r0
 8013534:	d005      	beq.n	8013542 <dns_recv+0x2e>
    }
  }

memerr:
  /* deallocate memory and return */
  pbuf_free(p);
 8013536:	4620      	mov	r0, r4
 8013538:	f001 f984 	bl	8014844 <pbuf_free>
  return;
}
 801353c:	b00b      	add	sp, #44	; 0x2c
 801353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013542:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8013798 <dns_recv+0x284>
    txid = lwip_htons(hdr.id);
 8013546:	2500      	movs	r5, #0
 8013548:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801354c:	f7ff fdd2 	bl	80130f4 <lwip_htons>
 8013550:	464b      	mov	r3, r9
 8013552:	fa5f f885 	uxtb.w	r8, r5
      if ((entry->state == DNS_STATE_ASKING) &&
 8013556:	7a9a      	ldrb	r2, [r3, #10]
 8013558:	2a02      	cmp	r2, #2
 801355a:	d009      	beq.n	8013570 <dns_recv+0x5c>
 801355c:	3501      	adds	r5, #1
 801355e:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013562:	2d04      	cmp	r5, #4
 8013564:	d0e7      	beq.n	8013536 <dns_recv+0x22>
      if ((entry->state == DNS_STATE_ASKING) &&
 8013566:	7a9a      	ldrb	r2, [r3, #10]
 8013568:	fa5f f885 	uxtb.w	r8, r5
 801356c:	2a02      	cmp	r2, #2
 801356e:	d1f5      	bne.n	801355c <dns_recv+0x48>
 8013570:	891a      	ldrh	r2, [r3, #8]
 8013572:	4282      	cmp	r2, r0
 8013574:	d1f2      	bne.n	801355c <dns_recv+0x48>
        nquestions = lwip_htons(hdr.numquestions);
 8013576:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 801357a:	f7ff fdbb 	bl	80130f4 <lwip_htons>
 801357e:	4683      	mov	fp, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8013580:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013584:	f7ff fdb6 	bl	80130f4 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8013588:	f89d 3012 	ldrb.w	r3, [sp, #18]
        nanswers   = lwip_htons(hdr.numanswers);
 801358c:	4682      	mov	sl, r0
        if (nquestions != 1) {
 801358e:	09db      	lsrs	r3, r3, #7
 8013590:	d0d1      	beq.n	8013536 <dns_recv+0x22>
 8013592:	f1bb 0f01 	cmp.w	fp, #1
 8013596:	d1ce      	bne.n	8013536 <dns_recv+0x22>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8013598:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 801359c:	497c      	ldr	r1, [pc, #496]	; (8013790 <dns_recv+0x27c>)
 801359e:	683a      	ldr	r2, [r7, #0]
 80135a0:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 80135a4:	7adb      	ldrb	r3, [r3, #11]
 80135a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d1c3      	bne.n	8013536 <dns_recv+0x22>
 80135ae:	f44f 7788 	mov.w	r7, #272	; 0x110
 80135b2:	fb07 f305 	mul.w	r3, r7, r5
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80135b6:	f103 0210 	add.w	r2, r3, #16
 80135ba:	9301      	str	r3, [sp, #4]
 80135bc:	eb09 0b02 	add.w	fp, r9, r2
    n = pbuf_try_get_at(p, response_offset++);
 80135c0:	1c73      	adds	r3, r6, #1
 80135c2:	4631      	mov	r1, r6
 80135c4:	4620      	mov	r0, r4
 80135c6:	b29e      	uxth	r6, r3
 80135c8:	f001 fd5e 	bl	8015088 <pbuf_try_get_at>
    if (n < 0) {
 80135cc:	2800      	cmp	r0, #0
 80135ce:	dbb2      	blt.n	8013536 <dns_recv+0x22>
    if ((n & 0xc0) == 0xc0) {
 80135d0:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
 80135d4:	2bc0      	cmp	r3, #192	; 0xc0
 80135d6:	d0ae      	beq.n	8013536 <dns_recv+0x22>
      while (n > 0) {
 80135d8:	b1a8      	cbz	r0, 8013606 <dns_recv+0xf2>
 80135da:	465f      	mov	r7, fp
 80135dc:	183b      	adds	r3, r7, r0
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	e007      	b.n	80135f2 <dns_recv+0xde>
        if ((*query) != (u8_t)c) {
 80135e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80135e6:	4291      	cmp	r1, r2
        ++query;
 80135e8:	46bb      	mov	fp, r7
        if ((*query) != (u8_t)c) {
 80135ea:	d1a4      	bne.n	8013536 <dns_recv+0x22>
      while (n > 0) {
 80135ec:	9b00      	ldr	r3, [sp, #0]
 80135ee:	42bb      	cmp	r3, r7
 80135f0:	d009      	beq.n	8013606 <dns_recv+0xf2>
        int c = pbuf_try_get_at(p, response_offset);
 80135f2:	4631      	mov	r1, r6
 80135f4:	4620      	mov	r0, r4
 80135f6:	f001 fd47 	bl	8015088 <pbuf_try_get_at>
        ++response_offset;
 80135fa:	3601      	adds	r6, #1
        if (c < 0) {
 80135fc:	1e02      	subs	r2, r0, #0
        ++response_offset;
 80135fe:	b2b6      	uxth	r6, r6
        if ((*query) != (u8_t)c) {
 8013600:	b2d2      	uxtb	r2, r2
        if (c < 0) {
 8013602:	daee      	bge.n	80135e2 <dns_recv+0xce>
 8013604:	e797      	b.n	8013536 <dns_recv+0x22>
    n = pbuf_try_get_at(p, response_offset);
 8013606:	4631      	mov	r1, r6
 8013608:	4620      	mov	r0, r4
 801360a:	f001 fd3d 	bl	8015088 <pbuf_try_get_at>
    if (n < 0) {
 801360e:	2800      	cmp	r0, #0
      ++query;
 8013610:	f10b 0b01 	add.w	fp, fp, #1
    if (n < 0) {
 8013614:	db8f      	blt.n	8013536 <dns_recv+0x22>
  } while (n != 0);
 8013616:	d1d3      	bne.n	80135c0 <dns_recv+0xac>
  return response_offset + 1;
 8013618:	1c73      	adds	r3, r6, #1
        if (res_idx == 0xFFFF) {
 801361a:	f64f 7bff 	movw	fp, #65535	; 0xffff
  return response_offset + 1;
 801361e:	b29b      	uxth	r3, r3
        if (res_idx == 0xFFFF) {
 8013620:	455b      	cmp	r3, fp
 8013622:	d088      	beq.n	8013536 <dns_recv+0x22>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8013624:	2204      	movs	r2, #4
 8013626:	a902      	add	r1, sp, #8
 8013628:	4620      	mov	r0, r4
 801362a:	f001 fc37 	bl	8014e9c <pbuf_copy_partial>
 801362e:	2804      	cmp	r0, #4
 8013630:	d181      	bne.n	8013536 <dns_recv+0x22>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8013632:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801363a:	f47f af7c 	bne.w	8013536 <dns_recv+0x22>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801363e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013646:	f47f af76 	bne.w	8013536 <dns_recv+0x22>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801364a:	f89d 3013 	ldrb.w	r3, [sp, #19]
        res_idx += SIZEOF_DNS_QUERY;
 801364e:	3605      	adds	r6, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8013650:	071b      	lsls	r3, r3, #28
        res_idx += SIZEOF_DNS_QUERY;
 8013652:	b2b6      	uxth	r6, r6
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8013654:	d123      	bne.n	801369e <dns_recv+0x18a>
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8013656:	f1ba 0f00 	cmp.w	sl, #0
 801365a:	d020      	beq.n	801369e <dns_recv+0x18a>
 801365c:	8923      	ldrh	r3, [r4, #8]
 801365e:	42b3      	cmp	r3, r6
 8013660:	d80e      	bhi.n	8013680 <dns_recv+0x16c>
 8013662:	e01c      	b.n	801369e <dns_recv+0x18a>
      offset = (u16_t)(offset + n);
 8013664:	b29e      	uxth	r6, r3
    if ((n & 0xc0) == 0xc0) {
 8013666:	29c0      	cmp	r1, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8013668:	4631      	mov	r1, r6
    if ((n & 0xc0) == 0xc0) {
 801366a:	d026      	beq.n	80136ba <dns_recv+0x1a6>
      if (offset + n >= p->tot_len) {
 801366c:	8922      	ldrh	r2, [r4, #8]
 801366e:	4293      	cmp	r3, r2
 8013670:	f6bf af61 	bge.w	8013536 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset);
 8013674:	f001 fd08 	bl	8015088 <pbuf_try_get_at>
    if (n < 0) {
 8013678:	2800      	cmp	r0, #0
 801367a:	f6ff af5c 	blt.w	8013536 <dns_recv+0x22>
  } while (n != 0);
 801367e:	d01d      	beq.n	80136bc <dns_recv+0x1a8>
    n = pbuf_try_get_at(p, offset++);
 8013680:	1c72      	adds	r2, r6, #1
 8013682:	4631      	mov	r1, r6
 8013684:	4620      	mov	r0, r4
 8013686:	b292      	uxth	r2, r2
 8013688:	9200      	str	r2, [sp, #0]
 801368a:	f001 fcfd 	bl	8015088 <pbuf_try_get_at>
      if (offset + n >= p->tot_len) {
 801368e:	9a00      	ldr	r2, [sp, #0]
    if (n < 0) {
 8013690:	1e03      	subs	r3, r0, #0
    n = pbuf_try_get_at(p, offset);
 8013692:	4620      	mov	r0, r4
    if ((n & 0xc0) == 0xc0) {
 8013694:	f003 01c0 	and.w	r1, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8013698:	4413      	add	r3, r2
    if (n < 0) {
 801369a:	dae3      	bge.n	8013664 <dns_recv+0x150>
 801369c:	e74b      	b.n	8013536 <dns_recv+0x22>
        pbuf_free(p);
 801369e:	4620      	mov	r0, r4
 80136a0:	f001 f8d0 	bl	8014844 <pbuf_free>
        dns_call_found(i, NULL);
 80136a4:	4640      	mov	r0, r8
 80136a6:	2100      	movs	r1, #0
 80136a8:	f7ff fd9c 	bl	80131e4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80136ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80136b0:	2200      	movs	r2, #0
 80136b2:	fb03 9505 	mla	r5, r3, r5, r9
 80136b6:	72aa      	strb	r2, [r5, #10]
        return;
 80136b8:	e740      	b.n	801353c <dns_recv+0x28>
    n = pbuf_try_get_at(p, offset++);
 80136ba:	4616      	mov	r6, r2
  return offset + 1;
 80136bc:	1c73      	adds	r3, r6, #1
 80136be:	b29b      	uxth	r3, r3
            if (res_idx == 0xFFFF) {
 80136c0:	455b      	cmp	r3, fp
 80136c2:	f43f af38 	beq.w	8013536 <dns_recv+0x22>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80136c6:	220a      	movs	r2, #10
 80136c8:	a907      	add	r1, sp, #28
 80136ca:	4620      	mov	r0, r4
 80136cc:	f001 fbe6 	bl	8014e9c <pbuf_copy_partial>
 80136d0:	280a      	cmp	r0, #10
 80136d2:	f47f af30 	bne.w	8013536 <dns_recv+0x22>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80136d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
            res_idx += SIZEOF_DNS_ANSWER;
 80136da:	360b      	adds	r6, #11
 80136dc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80136e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx += SIZEOF_DNS_ANSWER;
 80136e4:	b2b6      	uxth	r6, r6
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80136e6:	d104      	bne.n	80136f2 <dns_recv+0x1de>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80136e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80136ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136f0:	d011      	beq.n	8013716 <dns_recv+0x202>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80136f2:	f7ff fcff 	bl	80130f4 <lwip_htons>
 80136f6:	4430      	add	r0, r6
 80136f8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80136fc:	f6bf af1b 	bge.w	8013536 <dns_recv+0x22>
            res_idx += lwip_htons(ans.len);
 8013700:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
            --nanswers;
 8013704:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx += lwip_htons(ans.len);
 8013708:	f7ff fcf4 	bl	80130f4 <lwip_htons>
 801370c:	4406      	add	r6, r0
            --nanswers;
 801370e:	fa1f fa8a 	uxth.w	sl, sl
            res_idx += lwip_htons(ans.len);
 8013712:	b2b6      	uxth	r6, r6
 8013714:	e79f      	b.n	8013656 <dns_recv+0x142>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8013716:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801371a:	d1ea      	bne.n	80136f2 <dns_recv+0x1de>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801371c:	4633      	mov	r3, r6
 801371e:	2204      	movs	r2, #4
 8013720:	a903      	add	r1, sp, #12
 8013722:	4620      	mov	r0, r4
 8013724:	f001 fbba 	bl	8014e9c <pbuf_copy_partial>
 8013728:	2804      	cmp	r0, #4
 801372a:	f47f af04 	bne.w	8013536 <dns_recv+0x22>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801372e:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 8013732:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8013734:	9a03      	ldr	r2, [sp, #12]
 8013736:	fb03 f405 	mul.w	r4, r3, r5
 801373a:	eb09 0604 	add.w	r6, r9, r4
 801373e:	6072      	str	r2, [r6, #4]
                  pbuf_free(p);
 8013740:	f001 f880 	bl	8014844 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8013744:	9808      	ldr	r0, [sp, #32]
 8013746:	f7ff fcd9 	bl	80130fc <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801374a:	4b12      	ldr	r3, [pc, #72]	; (8013794 <dns_recv+0x280>)
  dns_call_found(idx, &entry->ipaddr);
 801374c:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 801374e:	2203      	movs	r2, #3
  if (entry->ttl > DNS_MAX_TTL) {
 8013750:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 8013752:	f849 0004 	str.w	r0, [r9, r4]
  dns_call_found(idx, &entry->ipaddr);
 8013756:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 801375a:	72b2      	strb	r2, [r6, #10]
    entry->ttl = DNS_MAX_TTL;
 801375c:	bf88      	it	hi
 801375e:	f849 3004 	strhi.w	r3, [r9, r4]
  dns_call_found(idx, &entry->ipaddr);
 8013762:	4640      	mov	r0, r8
 8013764:	4449      	add	r1, r9
 8013766:	f7ff fd3d 	bl	80131e4 <dns_call_found>
  if (entry->ttl == 0) {
 801376a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801376e:	fb03 f505 	mul.w	r5, r3, r5
 8013772:	f859 3005 	ldr.w	r3, [r9, r5]
 8013776:	44a9      	add	r9, r5
 8013778:	2b00      	cmp	r3, #0
 801377a:	f47f aedf 	bne.w	801353c <dns_recv+0x28>
    if (entry->state == DNS_STATE_DONE) {
 801377e:	f899 200a 	ldrb.w	r2, [r9, #10]
 8013782:	2a03      	cmp	r2, #3
 8013784:	f47f aeda 	bne.w	801353c <dns_recv+0x28>
      entry->state = DNS_STATE_UNUSED;
 8013788:	f889 300a 	strb.w	r3, [r9, #10]
 801378c:	e6d6      	b.n	801353c <dns_recv+0x28>
 801378e:	bf00      	nop
 8013790:	20020efc 	.word	0x20020efc
 8013794:	00093a80 	.word	0x00093a80
 8013798:	20020f04 	.word	0x20020f04

0801379c <dns_init>:
}
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop

080137a0 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80137a0:	2801      	cmp	r0, #1
 80137a2:	d900      	bls.n	80137a6 <dns_setserver+0x6>
}
 80137a4:	4770      	bx	lr
    if (dnsserver != NULL) {
 80137a6:	b121      	cbz	r1, 80137b2 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80137a8:	680a      	ldr	r2, [r1, #0]
 80137aa:	4b05      	ldr	r3, [pc, #20]	; (80137c0 <dns_setserver+0x20>)
 80137ac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80137b0:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80137b2:	4a04      	ldr	r2, [pc, #16]	; (80137c4 <dns_setserver+0x24>)
 80137b4:	4b02      	ldr	r3, [pc, #8]	; (80137c0 <dns_setserver+0x20>)
 80137b6:	6812      	ldr	r2, [r2, #0]
 80137b8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	20020efc 	.word	0x20020efc
 80137c4:	08039ac4 	.word	0x08039ac4

080137c8 <dns_tmr>:
{
 80137c8:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80137ca:	2000      	movs	r0, #0
 80137cc:	f7ff fe1a 	bl	8013404 <dns_check_entry>
 80137d0:	2001      	movs	r0, #1
 80137d2:	f7ff fe17 	bl	8013404 <dns_check_entry>
 80137d6:	2002      	movs	r0, #2
 80137d8:	f7ff fe14 	bl	8013404 <dns_check_entry>
 80137dc:	2003      	movs	r0, #3
}
 80137de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80137e2:	f7ff be0f 	b.w	8013404 <dns_check_entry>
 80137e6:	bf00      	nop

080137e8 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80137e8:	2900      	cmp	r1, #0
 80137ea:	f000 8146 	beq.w	8013a7a <dns_gethostbyname_addrtype+0x292>
{
 80137ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80137f2:	fab0 f580 	clz	r5, r0
{
 80137f6:	b083      	sub	sp, #12
 80137f8:	4604      	mov	r4, r0
  if ((addr == NULL) ||
 80137fa:	096d      	lsrs	r5, r5, #5
 80137fc:	2d00      	cmp	r5, #0
 80137fe:	f040 808c 	bne.w	801391a <dns_gethostbyname_addrtype+0x132>
      (!hostname) || (!hostname[0])) {
 8013802:	7806      	ldrb	r6, [r0, #0]
 8013804:	2e00      	cmp	r6, #0
 8013806:	f000 8088 	beq.w	801391a <dns_gethostbyname_addrtype+0x132>
 801380a:	468b      	mov	fp, r1
 801380c:	461f      	mov	r7, r3
 801380e:	4616      	mov	r6, r2
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8013810:	f7ec fd20 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013814:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8013816:	4680      	mov	r8, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013818:	d87f      	bhi.n	801391a <dns_gethostbyname_addrtype+0x132>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801381a:	4659      	mov	r1, fp
 801381c:	4620      	mov	r0, r4
 801381e:	f008 fa6b 	bl	801bcf8 <ip4addr_aton>
 8013822:	b118      	cbz	r0, 801382c <dns_gethostbyname_addrtype+0x44>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8013824:	4628      	mov	r0, r5
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8013826:	b003      	add	sp, #12
 8013828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8013a8c <dns_gethostbyname_addrtype+0x2a4>
  if (ipaddr_aton(hostname, addr)) {
 8013830:	4605      	mov	r5, r0
 8013832:	46d1      	mov	r9, sl
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8013834:	f899 300a 	ldrb.w	r3, [r9, #10]
 8013838:	2b03      	cmp	r3, #3
 801383a:	d03b      	beq.n	80138b4 <dns_gethostbyname_addrtype+0xcc>
 801383c:	3501      	adds	r5, #1
 801383e:	f509 7988 	add.w	r9, r9, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013842:	2d04      	cmp	r5, #4
 8013844:	d1f6      	bne.n	8013834 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8013846:	4b8e      	ldr	r3, [pc, #568]	; (8013a80 <dns_gethostbyname_addrtype+0x298>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	f000 80fe 	beq.w	8013a4c <dns_gethostbyname_addrtype+0x264>
 8013850:	f8df b238 	ldr.w	fp, [pc, #568]	; 8013a8c <dns_gethostbyname_addrtype+0x2a4>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013854:	2500      	movs	r5, #0
 8013856:	4b8b      	ldr	r3, [pc, #556]	; (8013a84 <dns_gethostbyname_addrtype+0x29c>)
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013858:	f89b 200a 	ldrb.w	r2, [fp, #10]
 801385c:	2a02      	cmp	r2, #2
 801385e:	d045      	beq.n	80138ec <dns_gethostbyname_addrtype+0x104>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8013860:	3501      	adds	r5, #1
 8013862:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8013866:	b2ed      	uxtb	r5, r5
 8013868:	2d04      	cmp	r5, #4
 801386a:	d1f5      	bne.n	8013858 <dns_gethostbyname_addrtype+0x70>
      u8_t age = dns_seqno - entry->seqno;
 801386c:	2300      	movs	r3, #0
 801386e:	4a86      	ldr	r2, [pc, #536]	; (8013a88 <dns_gethostbyname_addrtype+0x2a0>)
  lseqi = DNS_TABLE_SIZE;
 8013870:	4629      	mov	r1, r5
      u8_t age = dns_seqno - entry->seqno;
 8013872:	7810      	ldrb	r0, [r2, #0]
  lseq = 0;
 8013874:	469c      	mov	ip, r3
    if (entry->state == DNS_STATE_UNUSED) {
 8013876:	f89a 200a 	ldrb.w	r2, [sl, #10]
 801387a:	fa5f fb83 	uxtb.w	fp, r3
 801387e:	2a00      	cmp	r2, #0
 8013880:	f000 80b1 	beq.w	80139e6 <dns_gethostbyname_addrtype+0x1fe>
    if (entry->state == DNS_STATE_DONE) {
 8013884:	2a03      	cmp	r2, #3
 8013886:	f103 0301 	add.w	r3, r3, #1
 801388a:	d026      	beq.n	80138da <dns_gethostbyname_addrtype+0xf2>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801388c:	2b04      	cmp	r3, #4
 801388e:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 8013892:	d1f0      	bne.n	8013876 <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013894:	2904      	cmp	r1, #4
 8013896:	d008      	beq.n	80138aa <dns_gethostbyname_addrtype+0xc2>
 8013898:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 801389c:	4a7b      	ldr	r2, [pc, #492]	; (8013a8c <dns_gethostbyname_addrtype+0x2a4>)
 801389e:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 80138a2:	f899 300a 	ldrb.w	r3, [r9, #10]
 80138a6:	2b03      	cmp	r3, #3
 80138a8:	d03a      	beq.n	8013920 <dns_gethostbyname_addrtype+0x138>
      return ERR_MEM;
 80138aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138ae:	b003      	add	sp, #12
 80138b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80138b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138b8:	f109 0110 	add.w	r1, r9, #16
 80138bc:	4620      	mov	r0, r4
 80138be:	f7ff fc71 	bl	80131a4 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80138c2:	2800      	cmp	r0, #0
 80138c4:	d1ba      	bne.n	801383c <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80138c6:	4b71      	ldr	r3, [pc, #452]	; (8013a8c <dns_gethostbyname_addrtype+0x2a4>)
 80138c8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80138cc:	eb03 1905 	add.w	r9, r3, r5, lsl #4
 80138d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80138d4:	f8cb 3000 	str.w	r3, [fp]
 80138d8:	e7a5      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
      u8_t age = dns_seqno - entry->seqno;
 80138da:	f89a 200e 	ldrb.w	r2, [sl, #14]
 80138de:	1a82      	subs	r2, r0, r2
 80138e0:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 80138e2:	4562      	cmp	r2, ip
 80138e4:	d9d2      	bls.n	801388c <dns_gethostbyname_addrtype+0xa4>
 80138e6:	4659      	mov	r1, fp
 80138e8:	4694      	mov	ip, r2
 80138ea:	e7cf      	b.n	801388c <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80138ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138f0:	f10b 0110 	add.w	r1, fp, #16
 80138f4:	4620      	mov	r0, r4
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	f7ff fc54 	bl	80131a4 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80138fc:	9b00      	ldr	r3, [sp, #0]
 80138fe:	2800      	cmp	r0, #0
 8013900:	d1ae      	bne.n	8013860 <dns_gethostbyname_addrtype+0x78>
        if (dns_requests[r].found == 0) {
 8013902:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8013906:	3001      	adds	r0, #1
 8013908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801390c:	0092      	lsls	r2, r2, #2
 801390e:	2900      	cmp	r1, #0
 8013910:	f000 80a2 	beq.w	8013a58 <dns_gethostbyname_addrtype+0x270>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013914:	2804      	cmp	r0, #4
 8013916:	d1f4      	bne.n	8013902 <dns_gethostbyname_addrtype+0x11a>
 8013918:	e7a2      	b.n	8013860 <dns_gethostbyname_addrtype+0x78>
    return ERR_ARG;
 801391a:	f06f 000f 	mvn.w	r0, #15
 801391e:	e782      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
      entry = &dns_table[i];
 8013920:	468b      	mov	fp, r1
 8013922:	f8cd 9000 	str.w	r9, [sp]
 8013926:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 801392a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801392e:	4b55      	ldr	r3, [pc, #340]	; (8013a84 <dns_gethostbyname_addrtype+0x29c>)
 8013930:	eb0a 0209 	add.w	r2, sl, r9
 8013934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013938:	0092      	lsls	r2, r2, #2
 801393a:	b12b      	cbz	r3, 8013948 <dns_gethostbyname_addrtype+0x160>
 801393c:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013940:	f1b9 0f04 	cmp.w	r9, #4
 8013944:	d1f1      	bne.n	801392a <dns_gethostbyname_addrtype+0x142>
 8013946:	e7b0      	b.n	80138aa <dns_gethostbyname_addrtype+0xc2>
 8013948:	4611      	mov	r1, r2
  req->dns_table_idx = i;
 801394a:	4a4e      	ldr	r2, [pc, #312]	; (8013a84 <dns_gethostbyname_addrtype+0x29c>)
  entry->state = DNS_STATE_NEW;
 801394c:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 8013950:	eb02 0c01 	add.w	ip, r2, r1
 8013954:	9101      	str	r1, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 8013956:	4621      	mov	r1, r4
  entry->seqno = dns_seqno;
 8013958:	9c00      	ldr	r4, [sp, #0]
  req->found = found;
 801395a:	4a4a      	ldr	r2, [pc, #296]	; (8013a84 <dns_gethostbyname_addrtype+0x29c>)
  entry->seqno = dns_seqno;
 801395c:	73a0      	strb	r0, [r4, #14]
  req->found = found;
 801395e:	9801      	ldr	r0, [sp, #4]
  req->arg   = callback_arg;
 8013960:	f8cc 7004 	str.w	r7, [ip, #4]
  req->found = found;
 8013964:	5016      	str	r6, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 8013966:	4626      	mov	r6, r4
 8013968:	4620      	mov	r0, r4
 801396a:	4642      	mov	r2, r8
  entry->state = DNS_STATE_NEW;
 801396c:	4637      	mov	r7, r6
 801396e:	f886 e00a 	strb.w	lr, [r6, #10]
 8013972:	4e47      	ldr	r6, [pc, #284]	; (8013a90 <dns_gethostbyname_addrtype+0x2a8>)
  MEMCPY(entry->name, name, namelen);
 8013974:	3010      	adds	r0, #16
  req->dns_table_idx = i;
 8013976:	f88c b008 	strb.w	fp, [ip, #8]
  entry->name[namelen] = 0;
 801397a:	461c      	mov	r4, r3
 801397c:	9301      	str	r3, [sp, #4]
 801397e:	44b8      	add	r8, r7
  MEMCPY(entry->name, name, namelen);
 8013980:	f009 fae3 	bl	801cf4a <memcpy>
  entry->name[namelen] = 0;
 8013984:	9b01      	ldr	r3, [sp, #4]
 8013986:	4632      	mov	r2, r6
 8013988:	f888 3010 	strb.w	r3, [r8, #16]
    if (dns_pcbs[i] == NULL) {
 801398c:	f852 3b04 	ldr.w	r3, [r2], #4
 8013990:	fa5f f884 	uxtb.w	r8, r4
 8013994:	b373      	cbz	r3, 80139f4 <dns_gethostbyname_addrtype+0x20c>
 8013996:	3401      	adds	r4, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8013998:	2c04      	cmp	r4, #4
 801399a:	d1f7      	bne.n	801398c <dns_gethostbyname_addrtype+0x1a4>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801399c:	493d      	ldr	r1, [pc, #244]	; (8013a94 <dns_gethostbyname_addrtype+0x2ac>)
 801399e:	f891 8000 	ldrb.w	r8, [r1]
 80139a2:	f108 0801 	add.w	r8, r8, #1
 80139a6:	fa5f f888 	uxtb.w	r8, r8
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80139aa:	f1b8 0f03 	cmp.w	r8, #3
 80139ae:	4643      	mov	r3, r8
 80139b0:	d902      	bls.n	80139b8 <dns_gethostbyname_addrtype+0x1d0>
 80139b2:	f04f 0800 	mov.w	r8, #0
      idx = 0;
 80139b6:	4643      	mov	r3, r8
    if (dns_pcbs[idx] != NULL) {
 80139b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80139bc:	f108 0201 	add.w	r2, r8, #1
 80139c0:	3d01      	subs	r5, #1
    if (dns_pcbs[idx] != NULL) {
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d145      	bne.n	8013a52 <dns_gethostbyname_addrtype+0x26a>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80139c6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80139ca:	fa5f f882 	uxtb.w	r8, r2
 80139ce:	d1ec      	bne.n	80139aa <dns_gethostbyname_addrtype+0x1c2>
    entry->state = DNS_STATE_UNUSED;
 80139d0:	9a00      	ldr	r2, [sp, #0]
    req->found = NULL;
 80139d2:	44d1      	add	r9, sl
  entry->pcb_idx = dns_alloc_pcb();
 80139d4:	2304      	movs	r3, #4
    req->found = NULL;
 80139d6:	492b      	ldr	r1, [pc, #172]	; (8013a84 <dns_gethostbyname_addrtype+0x29c>)
    entry->state = DNS_STATE_UNUSED;
 80139d8:	7295      	strb	r5, [r2, #10]
    return ERR_MEM;
 80139da:	f04f 30ff 	mov.w	r0, #4294967295
    req->found = NULL;
 80139de:	f841 5029 	str.w	r5, [r1, r9, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 80139e2:	73d3      	strb	r3, [r2, #15]
 80139e4:	e71f      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
    entry = &dns_table[i];
 80139e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80139ea:	4a28      	ldr	r2, [pc, #160]	; (8013a8c <dns_gethostbyname_addrtype+0x2a4>)
 80139ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	e798      	b.n	8013926 <dns_gethostbyname_addrtype+0x13e>
  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
 80139f4:	202e      	movs	r0, #46	; 0x2e
 80139f6:	f005 fd75 	bl	80194e4 <udp_new_ip_type>
  if (ret == NULL) {
 80139fa:	4607      	mov	r7, r0
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d039      	beq.n	8013a74 <dns_gethostbyname_addrtype+0x28c>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8013a00:	f009 fe82 	bl	801d708 <rand>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013a04:	4924      	ldr	r1, [pc, #144]	; (8013a98 <dns_gethostbyname_addrtype+0x2b0>)
    u16_t port = (u16_t)DNS_RAND_TXID();
 8013a06:	b283      	uxth	r3, r0
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013a08:	4638      	mov	r0, r7
    if (!DNS_PORT_ALLOWED(port)) {
 8013a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013a0e:	461a      	mov	r2, r3
    if (!DNS_PORT_ALLOWED(port)) {
 8013a10:	d3f6      	bcc.n	8013a00 <dns_gethostbyname_addrtype+0x218>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 8013a12:	f005 fbdf 	bl	80191d4 <udp_bind>
  } while (err == ERR_USE);
 8013a16:	f110 0f08 	cmn.w	r0, #8
 8013a1a:	d0f1      	beq.n	8013a00 <dns_gethostbyname_addrtype+0x218>
  if (err != ERR_OK) {
 8013a1c:	bb18      	cbnz	r0, 8013a66 <dns_gethostbyname_addrtype+0x27e>
  udp_recv(ret, dns_recv, NULL);
 8013a1e:	4602      	mov	r2, r0
 8013a20:	491e      	ldr	r1, [pc, #120]	; (8013a9c <dns_gethostbyname_addrtype+0x2b4>)
 8013a22:	4638      	mov	r0, r7
 8013a24:	f005 fd2a 	bl	801947c <udp_recv>
      dns_last_pcb_idx = i;
 8013a28:	4b1a      	ldr	r3, [pc, #104]	; (8013a94 <dns_gethostbyname_addrtype+0x2ac>)
    dns_pcbs[i] = dns_alloc_random_port();
 8013a2a:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
      dns_last_pcb_idx = i;
 8013a2e:	f883 8000 	strb.w	r8, [r3]
  dns_seqno++;
 8013a32:	4a15      	ldr	r2, [pc, #84]	; (8013a88 <dns_gethostbyname_addrtype+0x2a0>)
  dns_check_entry(i);
 8013a34:	4658      	mov	r0, fp
  entry->pcb_idx = dns_alloc_pcb();
 8013a36:	9900      	ldr	r1, [sp, #0]
  dns_seqno++;
 8013a38:	7813      	ldrb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 8013a3a:	f881 800f 	strb.w	r8, [r1, #15]
  dns_seqno++;
 8013a3e:	3301      	adds	r3, #1
 8013a40:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8013a42:	f7ff fcdf 	bl	8013404 <dns_check_entry>
  return ERR_INPROGRESS;
 8013a46:	f06f 0004 	mvn.w	r0, #4
 8013a4a:	e6ec      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
      return ERR_VAL;
 8013a4c:	f06f 0005 	mvn.w	r0, #5
 8013a50:	e6e9      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
      dns_last_pcb_idx = idx;
 8013a52:	f881 8000 	strb.w	r8, [r1]
 8013a56:	e7ec      	b.n	8013a32 <dns_gethostbyname_addrtype+0x24a>
          dns_requests[r].found = found;
 8013a58:	1899      	adds	r1, r3, r2
 8013a5a:	509e      	str	r6, [r3, r2]
          return ERR_INPROGRESS;
 8013a5c:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8013a60:	604f      	str	r7, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8013a62:	720d      	strb	r5, [r1, #8]
 8013a64:	e6df      	b.n	8013826 <dns_gethostbyname_addrtype+0x3e>
    udp_remove(ret);
 8013a66:	4638      	mov	r0, r7
 8013a68:	f005 fd0c 	bl	8019484 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8013a72:	e793      	b.n	801399c <dns_gethostbyname_addrtype+0x1b4>
 8013a74:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8013a78:	e790      	b.n	801399c <dns_gethostbyname_addrtype+0x1b4>
    return ERR_ARG;
 8013a7a:	f06f 000f 	mvn.w	r0, #15
}
 8013a7e:	4770      	bx	lr
 8013a80:	20020efc 	.word	0x20020efc
 8013a84:	20020ec8 	.word	0x20020ec8
 8013a88:	20020ef8 	.word	0x20020ef8
 8013a8c:	20020f04 	.word	0x20020f04
 8013a90:	20020eb8 	.word	0x20020eb8
 8013a94:	20020eb4 	.word	0x20020eb4
 8013a98:	08039ac4 	.word	0x08039ac4
 8013a9c:	08013515 	.word	0x08013515

08013aa0 <dns_gethostbyname>:
{
 8013aa0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8013aa2:	2400      	movs	r4, #0
{
 8013aa4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8013aa6:	9400      	str	r4, [sp, #0]
 8013aa8:	f7ff fe9e 	bl	80137e8 <dns_gethostbyname_addrtype>
}
 8013aac:	b002      	add	sp, #8
 8013aae:	bd10      	pop	{r4, pc}

08013ab0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8013ab0:	2300      	movs	r3, #0
{
 8013ab2:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013ab4:	4299      	cmp	r1, r3
{
 8013ab6:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8013ab8:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8013abc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8013ac0:	dd05      	ble.n	8013ace <lwip_standard_chksum+0x1e>
 8013ac2:	b126      	cbz	r6, 8013ace <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8013ac4:	7803      	ldrb	r3, [r0, #0]
    len--;
 8013ac6:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8013ac8:	3001      	adds	r0, #1
 8013aca:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8013ace:	2901      	cmp	r1, #1
 8013ad0:	dd26      	ble.n	8013b20 <lwip_standard_chksum+0x70>
 8013ad2:	3902      	subs	r1, #2
  u32_t sum = 0;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	084d      	lsrs	r5, r1, #1
 8013ad8:	1c6c      	adds	r4, r5, #1
 8013ada:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8013ade:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8013ae2:	4284      	cmp	r4, r0
    sum += *ps++;
 8013ae4:	4413      	add	r3, r2
  while (len > 1) {
 8013ae6:	d1fa      	bne.n	8013ade <lwip_standard_chksum+0x2e>
 8013ae8:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8013aec:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013af0:	2901      	cmp	r1, #1
 8013af2:	d102      	bne.n	8013afa <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013af4:	7802      	ldrb	r2, [r0, #0]
 8013af6:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8013afa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013afe:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013b00:	b298      	uxth	r0, r3
 8013b02:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8013b06:	b298      	uxth	r0, r3
 8013b08:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8013b0c:	b126      	cbz	r6, 8013b18 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013b0e:	0203      	lsls	r3, r0, #8
 8013b10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8013b18:	b280      	uxth	r0, r0
 8013b1a:	b003      	add	sp, #12
 8013b1c:	bc70      	pop	{r4, r5, r6}
 8013b1e:	4770      	bx	lr
  u32_t sum = 0;
 8013b20:	2300      	movs	r3, #0
 8013b22:	e7e5      	b.n	8013af0 <lwip_standard_chksum+0x40>

08013b24 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8013b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b28:	9d06      	ldr	r5, [sp, #24]
 8013b2a:	4617      	mov	r7, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8013b2c:	681c      	ldr	r4, [r3, #0]
{
 8013b2e:	4688      	mov	r8, r1
  acc = (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
 8013b30:	682b      	ldr	r3, [r5, #0]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
 8013b32:	0c1a      	lsrs	r2, r3, #16
 8013b34:	fa12 f383 	uxtah	r3, r2, r3
 8013b38:	fa13 f384 	uxtah	r3, r3, r4
 8013b3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8013b40:	b29c      	uxth	r4, r3
 8013b42:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8013b46:	b29c      	uxth	r4, r3
 8013b48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8013b4c:	b300      	cbz	r0, 8013b90 <inet_chksum_pseudo+0x6c>
 8013b4e:	4605      	mov	r5, r0
  u8_t swapped = 0;
 8013b50:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013b52:	8969      	ldrh	r1, [r5, #10]
 8013b54:	6868      	ldr	r0, [r5, #4]
 8013b56:	f7ff ffab 	bl	8013ab0 <lwip_standard_chksum>
 8013b5a:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8013b5c:	896b      	ldrh	r3, [r5, #10]
      swapped = 1 - swapped;
 8013b5e:	f1c6 0201 	rsb	r2, r6, #1
    acc = FOLD_U32T(acc);
 8013b62:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8013b64:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8013b68:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8013b6c:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8013b70:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8013b74:	d003      	beq.n	8013b7e <inet_chksum_pseudo+0x5a>
      acc = SWAP_BYTES_IN_WORD(acc);
 8013b76:	b280      	uxth	r0, r0
      swapped = 1 - swapped;
 8013b78:	b2d6      	uxtb	r6, r2
      acc = SWAP_BYTES_IN_WORD(acc);
 8013b7a:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8013b7e:	682d      	ldr	r5, [r5, #0]
 8013b80:	2d00      	cmp	r5, #0
 8013b82:	d1e6      	bne.n	8013b52 <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8013b84:	b126      	cbz	r6, 8013b90 <inet_chksum_pseudo+0x6c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013b86:	0223      	lsls	r3, r4, #8
 8013b88:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8013b90:	4640      	mov	r0, r8
 8013b92:	f7ff faaf 	bl	80130f4 <lwip_htons>
 8013b96:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f7ff faab 	bl	80130f4 <lwip_htons>
 8013b9e:	4428      	add	r0, r5
 8013ba0:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 8013ba2:	b2a0      	uxth	r0, r4
 8013ba4:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8013ba8:	b2a0      	uxth	r0, r4
 8013baa:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8013bae:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8013bb0:	b280      	uxth	r0, r0
 8013bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb6:	bf00      	nop

08013bb8 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8013bb8:	f7ff bfb4 	b.w	8013b24 <inet_chksum_pseudo>

08013bbc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013bbc:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8013bbe:	f7ff ff77 	bl	8013ab0 <lwip_standard_chksum>
 8013bc2:	43c0      	mvns	r0, r0
}
 8013bc4:	b280      	uxth	r0, r0
 8013bc6:	bd08      	pop	{r3, pc}

08013bc8 <inet_chksum_pbuf>:
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 8013bc8:	b328      	cbz	r0, 8013c16 <inet_chksum_pbuf+0x4e>
{
 8013bca:	b570      	push	{r4, r5, r6, lr}
  swapped = 0;
 8013bcc:	2600      	movs	r6, #0
 8013bce:	4605      	mov	r5, r0
  acc = 0;
 8013bd0:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013bd2:	8969      	ldrh	r1, [r5, #10]
 8013bd4:	6868      	ldr	r0, [r5, #4]
 8013bd6:	f7ff ff6b 	bl	8013ab0 <lwip_standard_chksum>
 8013bda:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8013bdc:	896b      	ldrh	r3, [r5, #10]
      swapped = 1 - swapped;
 8013bde:	f1c6 0201 	rsb	r2, r6, #1
    acc = FOLD_U32T(acc);
 8013be2:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8013be4:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8013be8:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8013bec:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8013bf0:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8013bf4:	d003      	beq.n	8013bfe <inet_chksum_pbuf+0x36>
      acc = SWAP_BYTES_IN_WORD(acc);
 8013bf6:	b280      	uxth	r0, r0
      swapped = 1 - swapped;
 8013bf8:	b2d6      	uxtb	r6, r2
      acc = SWAP_BYTES_IN_WORD(acc);
 8013bfa:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8013bfe:	682d      	ldr	r5, [r5, #0]
 8013c00:	2d00      	cmp	r5, #0
 8013c02:	d1e6      	bne.n	8013bd2 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8013c04:	b126      	cbz	r6, 8013c10 <inet_chksum_pbuf+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013c06:	0220      	lsls	r0, r4, #8
 8013c08:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013c0c:	b280      	uxth	r0, r0
 8013c0e:	4304      	orrs	r4, r0
 8013c10:	43e4      	mvns	r4, r4
 8013c12:	b2a0      	uxth	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
}
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8013c16:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8013c1a:	4770      	bx	lr

08013c1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013c1c:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013c1e:	f001 fad3 	bl	80151c8 <stats_init>
#if !NO_SYS
  sys_init();
 8013c22:	f008 fe87 	bl	801c934 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013c26:	f000 f80f 	bl	8013c48 <mem_init>
  memp_init();
 8013c2a:	f000 fbd3 	bl	80143d4 <memp_init>
  pbuf_init();
  netif_init();
 8013c2e:	f000 fc3f 	bl	80144b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013c32:	f005 f9f5 	bl	8019020 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013c36:	f001 fb33 	bl	80152a0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8013c3a:	f7ff fdaf 	bl	801379c <dns_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8013c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8013c42:	f005 b965 	b.w	8018f10 <sys_timeouts_init>
 8013c46:	bf00      	nop

08013c48 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013c48:	4b13      	ldr	r3, [pc, #76]	; (8013c98 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8013c4a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8013c4e:	4813      	ldr	r0, [pc, #76]	; (8013c9c <mem_init+0x54>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013c50:	f642 61e4 	movw	r1, #12004	; 0x2ee4
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013c54:	f023 0303 	bic.w	r3, r3, #3
{
 8013c58:	b570      	push	{r4, r5, r6, lr}
  mem->prev = 0;
 8013c5a:	2600      	movs	r6, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013c5c:	4d10      	ldr	r5, [pc, #64]	; (8013ca0 <mem_init+0x58>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013c5e:	2401      	movs	r4, #1
  mem->next = MEM_SIZE_ALIGNED;
 8013c60:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8013c62:	711e      	strb	r6, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013c64:	5098      	str	r0, [r3, r2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013c66:	480f      	ldr	r0, [pc, #60]	; (8013ca4 <mem_init+0x5c>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013c68:	545c      	strb	r4, [r3, r1]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013c6a:	602b      	str	r3, [r5, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8013c6c:	189d      	adds	r5, r3, r2
 8013c6e:	4c0e      	ldr	r4, [pc, #56]	; (8013ca8 <mem_init+0x60>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013c70:	490e      	ldr	r1, [pc, #56]	; (8013cac <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8013c72:	6003      	str	r3, [r0, #0]

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013c74:	480e      	ldr	r0, [pc, #56]	; (8013cb0 <mem_init+0x68>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8013c76:	6025      	str	r5, [r4, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013c78:	f8a1 20aa 	strh.w	r2, [r1, #170]	; 0xaa
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013c7c:	f008 fe66 	bl	801c94c <sys_mutex_new>
 8013c80:	b900      	cbnz	r0, 8013c84 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8013c82:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013c84:	4b0b      	ldr	r3, [pc, #44]	; (8013cb4 <mem_init+0x6c>)
 8013c86:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013c8a:	490b      	ldr	r1, [pc, #44]	; (8013cb8 <mem_init+0x70>)
 8013c8c:	480b      	ldr	r0, [pc, #44]	; (8013cbc <mem_init+0x74>)
}
 8013c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013c92:	f009 bca9 	b.w	801d5e8 <iprintf>
 8013c96:	bf00      	nop
 8013c98:	20025a47 	.word	0x20025a47
 8013c9c:	2ee02ee0 	.word	0x2ee02ee0
 8013ca0:	20021350 	.word	0x20021350
 8013ca4:	20021344 	.word	0x20021344
 8013ca8:	20021354 	.word	0x20021354
 8013cac:	20033a7c 	.word	0x20033a7c
 8013cb0:	2002134c 	.word	0x2002134c
 8013cb4:	08037d9c 	.word	0x08037d9c
 8013cb8:	08037dcc 	.word	0x08037dcc
 8013cbc:	08021804 	.word	0x08021804

08013cc0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	f000 8083 	beq.w	8013dcc <mem_free+0x10c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013cc6:	0783      	lsls	r3, r0, #30
{
 8013cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ccc:	4604      	mov	r4, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013cce:	d171      	bne.n	8013db4 <mem_free+0xf4>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013cd0:	4d5a      	ldr	r5, [pc, #360]	; (8013e3c <mem_free+0x17c>)
 8013cd2:	682b      	ldr	r3, [r5, #0]
 8013cd4:	42a3      	cmp	r3, r4
 8013cd6:	d85b      	bhi.n	8013d90 <mem_free+0xd0>
 8013cd8:	4f59      	ldr	r7, [pc, #356]	; (8013e40 <mem_free+0x180>)
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	42a3      	cmp	r3, r4
 8013cde:	d957      	bls.n	8013d90 <mem_free+0xd0>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013ce0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013ce4:	f1a4 0608 	sub.w	r6, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	f000 8087 	beq.w	8013dfc <mem_free+0x13c>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8013cee:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8013e70 <mem_free+0x1b0>
  mem->used = 0;
 8013cf2:	2200      	movs	r2, #0
    /* the newly freed struct is now the lowest */
    lfree = mem;
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013cf4:	4853      	ldr	r0, [pc, #332]	; (8013e44 <mem_free+0x184>)
  if (mem < lfree) {
 8013cf6:	f8d8 3000 	ldr.w	r3, [r8]
  mem->used = 0;
 8013cfa:	f804 2c04 	strb.w	r2, [r4, #-4]
  if (mem < lfree) {
 8013cfe:	42b3      	cmp	r3, r6
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013d00:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 8013d04:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013d08:	6829      	ldr	r1, [r5, #0]
 8013d0a:	eba2 0203 	sub.w	r2, r2, r3
    lfree = mem;
 8013d0e:	bf88      	it	hi
 8013d10:	f8c8 6000 	strhi.w	r6, [r8]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013d14:	eba6 0c01 	sub.w	ip, r6, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013d18:	42b1      	cmp	r1, r6
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013d1a:	4462      	add	r2, ip
 8013d1c:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013d20:	d855      	bhi.n	8013dce <mem_free+0x10e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013d22:	683a      	ldr	r2, [r7, #0]
 8013d24:	4296      	cmp	r6, r2
 8013d26:	d271      	bcs.n	8013e0c <mem_free+0x14c>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013d28:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d87a      	bhi.n	8013e26 <mem_free+0x166>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8013d30:	682a      	ldr	r2, [r5, #0]
 8013d32:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013d34:	429e      	cmp	r6, r3
 8013d36:	d012      	beq.n	8013d5e <mem_free+0x9e>
 8013d38:	7919      	ldrb	r1, [r3, #4]
 8013d3a:	b981      	cbnz	r1, 8013d5e <mem_free+0x9e>
 8013d3c:	6839      	ldr	r1, [r7, #0]
 8013d3e:	428b      	cmp	r3, r1
 8013d40:	d00d      	beq.n	8013d5e <mem_free+0x9e>
    if (lfree == nmem) {
 8013d42:	f8d8 1000 	ldr.w	r1, [r8]
    mem->next = nmem->next;
 8013d46:	8818      	ldrh	r0, [r3, #0]
    if (lfree == nmem) {
 8013d48:	428b      	cmp	r3, r1
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013d4a:	eba6 0102 	sub.w	r1, r6, r2
    mem->next = nmem->next;
 8013d4e:	f824 0c08 	strh.w	r0, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013d52:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 8013d54:	bf08      	it	eq
 8013d56:	f8c8 6000 	streq.w	r6, [r8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013d5a:	4413      	add	r3, r2
 8013d5c:	8059      	strh	r1, [r3, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8013d5e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8013d62:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8013d64:	429e      	cmp	r6, r3
 8013d66:	d00e      	beq.n	8013d86 <mem_free+0xc6>
 8013d68:	7918      	ldrb	r0, [r3, #4]
 8013d6a:	b960      	cbnz	r0, 8013d86 <mem_free+0xc6>
    if (lfree == mem) {
 8013d6c:	f8d8 0000 	ldr.w	r0, [r8]
 8013d70:	4286      	cmp	r6, r0
      lfree = pmem;
 8013d72:	bf08      	it	eq
 8013d74:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8013d78:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013d7c:	5253      	strh	r3, [r2, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8013d7e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013d82:	441a      	add	r2, r3
 8013d84:	8051      	strh	r1, [r2, #2]

  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
 8013d86:	4b30      	ldr	r3, [pc, #192]	; (8013e48 <mem_free+0x188>)
 8013d88:	2201      	movs	r2, #1
 8013d8a:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8013d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013d90:	4b2e      	ldr	r3, [pc, #184]	; (8013e4c <mem_free+0x18c>)
 8013d92:	f240 12af 	movw	r2, #431	; 0x1af
 8013d96:	492e      	ldr	r1, [pc, #184]	; (8013e50 <mem_free+0x190>)
 8013d98:	482e      	ldr	r0, [pc, #184]	; (8013e54 <mem_free+0x194>)
 8013d9a:	f009 fc25 	bl	801d5e8 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013d9e:	682b      	ldr	r3, [r5, #0]
 8013da0:	42a3      	cmp	r3, r4
 8013da2:	d93b      	bls.n	8013e1c <mem_free+0x15c>
    MEM_STATS_INC(illegal);
 8013da4:	4a27      	ldr	r2, [pc, #156]	; (8013e44 <mem_free+0x184>)
 8013da6:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8013daa:	3301      	adds	r3, #1
 8013dac:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
}
 8013db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013db4:	4d21      	ldr	r5, [pc, #132]	; (8013e3c <mem_free+0x17c>)
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013db6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8013dba:	4b24      	ldr	r3, [pc, #144]	; (8013e4c <mem_free+0x18c>)
 8013dbc:	4926      	ldr	r1, [pc, #152]	; (8013e58 <mem_free+0x198>)
 8013dbe:	4825      	ldr	r0, [pc, #148]	; (8013e54 <mem_free+0x194>)
 8013dc0:	f009 fc12 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	42a3      	cmp	r3, r4
 8013dc8:	d986      	bls.n	8013cd8 <mem_free+0x18>
 8013dca:	e7e1      	b.n	8013d90 <mem_free+0xd0>
 8013dcc:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013dce:	4b1f      	ldr	r3, [pc, #124]	; (8013e4c <mem_free+0x18c>)
 8013dd0:	f240 125d 	movw	r2, #349	; 0x15d
 8013dd4:	4921      	ldr	r1, [pc, #132]	; (8013e5c <mem_free+0x19c>)
 8013dd6:	481f      	ldr	r0, [pc, #124]	; (8013e54 <mem_free+0x194>)
 8013dd8:	f009 fc06 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	429e      	cmp	r6, r3
 8013de0:	d214      	bcs.n	8013e0c <mem_free+0x14c>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013de2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8013de6:	b133      	cbz	r3, 8013df6 <mem_free+0x136>
 8013de8:	4b18      	ldr	r3, [pc, #96]	; (8013e4c <mem_free+0x18c>)
 8013dea:	f240 125f 	movw	r2, #351	; 0x15f
 8013dee:	491c      	ldr	r1, [pc, #112]	; (8013e60 <mem_free+0x1a0>)
 8013df0:	4818      	ldr	r0, [pc, #96]	; (8013e54 <mem_free+0x194>)
 8013df2:	f009 fbf9 	bl	801d5e8 <iprintf>
 8013df6:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013dfa:	e795      	b.n	8013d28 <mem_free+0x68>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013dfc:	4b13      	ldr	r3, [pc, #76]	; (8013e4c <mem_free+0x18c>)
 8013dfe:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8013e02:	4918      	ldr	r1, [pc, #96]	; (8013e64 <mem_free+0x1a4>)
 8013e04:	4813      	ldr	r0, [pc, #76]	; (8013e54 <mem_free+0x194>)
 8013e06:	f009 fbef 	bl	801d5e8 <iprintf>
 8013e0a:	e770      	b.n	8013cee <mem_free+0x2e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013e0c:	4b0f      	ldr	r3, [pc, #60]	; (8013e4c <mem_free+0x18c>)
 8013e0e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013e12:	4915      	ldr	r1, [pc, #84]	; (8013e68 <mem_free+0x1a8>)
 8013e14:	480f      	ldr	r0, [pc, #60]	; (8013e54 <mem_free+0x194>)
 8013e16:	f009 fbe7 	bl	801d5e8 <iprintf>
 8013e1a:	e7e2      	b.n	8013de2 <mem_free+0x122>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013e1c:	4f08      	ldr	r7, [pc, #32]	; (8013e40 <mem_free+0x180>)
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	429c      	cmp	r4, r3
 8013e22:	d2bf      	bcs.n	8013da4 <mem_free+0xe4>
 8013e24:	e75c      	b.n	8013ce0 <mem_free+0x20>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013e26:	4b09      	ldr	r3, [pc, #36]	; (8013e4c <mem_free+0x18c>)
 8013e28:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8013e2c:	490f      	ldr	r1, [pc, #60]	; (8013e6c <mem_free+0x1ac>)
 8013e2e:	4809      	ldr	r0, [pc, #36]	; (8013e54 <mem_free+0x194>)
 8013e30:	f009 fbda 	bl	801d5e8 <iprintf>
 8013e34:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8013e38:	e77a      	b.n	8013d30 <mem_free+0x70>
 8013e3a:	bf00      	nop
 8013e3c:	20021350 	.word	0x20021350
 8013e40:	20021354 	.word	0x20021354
 8013e44:	20033a7c 	.word	0x20033a7c
 8013e48:	20021348 	.word	0x20021348
 8013e4c:	08037d9c 	.word	0x08037d9c
 8013e50:	08037cf4 	.word	0x08037cf4
 8013e54:	08021804 	.word	0x08021804
 8013e58:	08037cd0 	.word	0x08037cd0
 8013e5c:	08037d20 	.word	0x08037d20
 8013e60:	08037d54 	.word	0x08037d54
 8013e64:	08037d0c 	.word	0x08037d0c
 8013e68:	08037d38 	.word	0x08037d38
 8013e6c:	08037d70 	.word	0x08037d70
 8013e70:	20021344 	.word	0x20021344

08013e74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8013e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8013e78:	3103      	adds	r1, #3
 8013e7a:	f64f 74fc 	movw	r4, #65532	; 0xfffc
{
 8013e7e:	4605      	mov	r5, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8013e80:	400c      	ands	r4, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8013e82:	2c0b      	cmp	r4, #11
 8013e84:	d91f      	bls.n	8013ec6 <mem_trim+0x52>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8013e86:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8013e8a:	429c      	cmp	r4, r3
 8013e8c:	f200 808e 	bhi.w	8013fac <mem_trim+0x138>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013e90:	4e47      	ldr	r6, [pc, #284]	; (8013fb0 <mem_trim+0x13c>)
 8013e92:	6833      	ldr	r3, [r6, #0]
 8013e94:	42ab      	cmp	r3, r5
 8013e96:	d803      	bhi.n	8013ea0 <mem_trim+0x2c>
 8013e98:	4a46      	ldr	r2, [pc, #280]	; (8013fb4 <mem_trim+0x140>)
 8013e9a:	6812      	ldr	r2, [r2, #0]
 8013e9c:	42aa      	cmp	r2, r5
 8013e9e:	d818      	bhi.n	8013ed2 <mem_trim+0x5e>
 8013ea0:	4b45      	ldr	r3, [pc, #276]	; (8013fb8 <mem_trim+0x144>)
 8013ea2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013ea6:	4945      	ldr	r1, [pc, #276]	; (8013fbc <mem_trim+0x148>)
 8013ea8:	4845      	ldr	r0, [pc, #276]	; (8013fc0 <mem_trim+0x14c>)
 8013eaa:	f009 fb9d 	bl	801d5e8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013eae:	6833      	ldr	r3, [r6, #0]
 8013eb0:	42ab      	cmp	r3, r5
 8013eb2:	d90a      	bls.n	8013eca <mem_trim+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8013eb4:	4a43      	ldr	r2, [pc, #268]	; (8013fc4 <mem_trim+0x150>)
 8013eb6:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8013eba:	3301      	adds	r3, #1
 8013ebc:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    newsize = MIN_SIZE_ALIGNED;
 8013ec6:	240c      	movs	r4, #12
 8013ec8:	e7e2      	b.n	8013e90 <mem_trim+0x1c>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013eca:	4a3a      	ldr	r2, [pc, #232]	; (8013fb4 <mem_trim+0x140>)
 8013ecc:	6812      	ldr	r2, [r2, #0]
 8013ece:	42aa      	cmp	r2, r5
 8013ed0:	d9f0      	bls.n	8013eb4 <mem_trim+0x40>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013ed2:	f1a5 0208 	sub.w	r2, r5, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013ed6:	f835 0c08 	ldrh.w	r0, [r5, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8013eda:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013edc:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8013ee0:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8013ee2:	1a89      	subs	r1, r1, r2
 8013ee4:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013ee6:	42a1      	cmp	r1, r4
 8013ee8:	d333      	bcc.n	8013f52 <mem_trim+0xde>
  if (newsize == size) {
 8013eea:	d0e9      	beq.n	8013ec0 <mem_trim+0x4c>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8013eec:	eb03 0c00 	add.w	ip, r3, r0
  if (mem2->used == 0) {
 8013ef0:	f89c 6004 	ldrb.w	r6, [ip, #4]
 8013ef4:	bbb6      	cbnz	r6, 8013f64 <mem_trim+0xf0>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013ef6:	f104 0608 	add.w	r6, r4, #8
    next = mem2->next;
 8013efa:	f833 8000 	ldrh.w	r8, [r3, r0]
    if (lfree == mem2) {
 8013efe:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8013fd0 <mem_trim+0x15c>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013f02:	4630      	mov	r0, r6
    if (lfree == mem2) {
 8013f04:	f8de 6000 	ldr.w	r6, [lr]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013f08:	4410      	add	r0, r2
    if (lfree == mem2) {
 8013f0a:	4566      	cmp	r6, ip
    mem2->used = 0;
 8013f0c:	f04f 0c00 	mov.w	ip, #0
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013f10:	b280      	uxth	r0, r0
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f12:	f642 66e0 	movw	r6, #12000	; 0x2ee0
 8013f16:	eb03 0700 	add.w	r7, r3, r0
    mem2->next = next;
 8013f1a:	f8a7 8000 	strh.w	r8, [r7]
    mem2->prev = ptr;
 8013f1e:	807a      	strh	r2, [r7, #2]
    mem2->used = 0;
 8013f20:	f887 c004 	strb.w	ip, [r7, #4]
    mem->next = ptr2;
 8013f24:	f825 0c08 	strh.w	r0, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f28:	883a      	ldrh	r2, [r7, #0]
      lfree = (struct mem *)(void *)&ram[ptr2];
 8013f2a:	bf08      	it	eq
 8013f2c:	f8ce 7000 	streq.w	r7, [lr]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f30:	42b2      	cmp	r2, r6
 8013f32:	d001      	beq.n	8013f38 <mem_trim+0xc4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8013f34:	4413      	add	r3, r2
 8013f36:	8058      	strh	r0, [r3, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013f38:	4a22      	ldr	r2, [pc, #136]	; (8013fc4 <mem_trim+0x150>)
 8013f3a:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8013f3e:	441c      	add	r4, r3
 8013f40:	1a61      	subs	r1, r4, r1
 8013f42:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
  mem_free_count = 1;
 8013f46:	4b20      	ldr	r3, [pc, #128]	; (8013fc8 <mem_trim+0x154>)
 8013f48:	2201      	movs	r2, #1
}
 8013f4a:	4628      	mov	r0, r5
  mem_free_count = 1;
 8013f4c:	701a      	strb	r2, [r3, #0]
}
 8013f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013f52:	4b19      	ldr	r3, [pc, #100]	; (8013fb8 <mem_trim+0x144>)
 8013f54:	f240 2206 	movw	r2, #518	; 0x206
 8013f58:	491c      	ldr	r1, [pc, #112]	; (8013fcc <mem_trim+0x158>)
    return NULL;
 8013f5a:	2500      	movs	r5, #0
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013f5c:	4818      	ldr	r0, [pc, #96]	; (8013fc0 <mem_trim+0x14c>)
 8013f5e:	f009 fb43 	bl	801d5e8 <iprintf>
 8013f62:	e7ad      	b.n	8013ec0 <mem_trim+0x4c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013f64:	f104 0614 	add.w	r6, r4, #20
 8013f68:	428e      	cmp	r6, r1
 8013f6a:	d8ec      	bhi.n	8013f46 <mem_trim+0xd2>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013f6c:	f104 0608 	add.w	r6, r4, #8
    if (mem2 < lfree) {
 8013f70:	4f17      	ldr	r7, [pc, #92]	; (8013fd0 <mem_trim+0x15c>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8013f72:	4416      	add	r6, r2
 8013f74:	fa1f fe86 	uxth.w	lr, r6
    if (mem2 < lfree) {
 8013f78:	683e      	ldr	r6, [r7, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8013f7a:	eb03 0c0e 	add.w	ip, r3, lr
    if (mem2 < lfree) {
 8013f7e:	4566      	cmp	r6, ip
    mem2->next = mem->next;
 8013f80:	f8ac 0000 	strh.w	r0, [ip]
    mem2->prev = ptr;
 8013f84:	f8ac 2002 	strh.w	r2, [ip, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f88:	f642 60e0 	movw	r0, #12000	; 0x2ee0
      lfree = mem2;
 8013f8c:	bf88      	it	hi
 8013f8e:	f8c7 c000 	strhi.w	ip, [r7]
    mem2->used = 0;
 8013f92:	2700      	movs	r7, #0
 8013f94:	f88c 7004 	strb.w	r7, [ip, #4]
    mem->next = ptr2;
 8013f98:	f825 ec08 	strh.w	lr, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f9c:	f8bc 2000 	ldrh.w	r2, [ip]
 8013fa0:	4282      	cmp	r2, r0
 8013fa2:	d0c9      	beq.n	8013f38 <mem_trim+0xc4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8013fa4:	4413      	add	r3, r2
 8013fa6:	f8a3 e002 	strh.w	lr, [r3, #2]
 8013faa:	e7c5      	b.n	8013f38 <mem_trim+0xc4>
    return NULL;
 8013fac:	2500      	movs	r5, #0
 8013fae:	e787      	b.n	8013ec0 <mem_trim+0x4c>
 8013fb0:	20021350 	.word	0x20021350
 8013fb4:	20021354 	.word	0x20021354
 8013fb8:	08037d9c 	.word	0x08037d9c
 8013fbc:	08037e6c 	.word	0x08037e6c
 8013fc0:	08021804 	.word	0x08021804
 8013fc4:	20033a7c 	.word	0x20033a7c
 8013fc8:	20021348 	.word	0x20021348
 8013fcc:	08037e84 	.word	0x08037e84
 8013fd0:	20021344 	.word	0x20021344

08013fd4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f000 80ca 	beq.w	801416e <mem_malloc+0x19a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8013fda:	3003      	adds	r0, #3
{
 8013fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size = LWIP_MEM_ALIGN_SIZE(size);
 8013fe0:	f64f 79fc 	movw	r9, #65532	; 0xfffc
{
 8013fe4:	b083      	sub	sp, #12
  size = LWIP_MEM_ALIGN_SIZE(size);
 8013fe6:	ea00 0909 	and.w	r9, r0, r9

  if (size < MIN_SIZE_ALIGNED) {
 8013fea:	f1b9 0f0b 	cmp.w	r9, #11
 8013fee:	f240 80ac 	bls.w	801414a <mem_malloc+0x176>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8013ff2:	f642 66e0 	movw	r6, #12000	; 0x2ee0
 8013ff6:	45b1      	cmp	r9, r6
 8013ff8:	d83b      	bhi.n	8014072 <mem_malloc+0x9e>
 8013ffa:	eba6 0609 	sub.w	r6, r6, r9
 8013ffe:	46c8      	mov	r8, r9
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014000:	485c      	ldr	r0, [pc, #368]	; (8014174 <mem_malloc+0x1a0>)
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
 8014002:	2700      	movs	r7, #0
  sys_mutex_lock(&mem_mutex);
 8014004:	f008 fcc8 	bl	801c998 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014008:	4b5b      	ldr	r3, [pc, #364]	; (8014178 <mem_malloc+0x1a4>)
 801400a:	4a5c      	ldr	r2, [pc, #368]	; (801417c <mem_malloc+0x1a8>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801400c:	f06f 0e07 	mvn.w	lr, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014010:	681d      	ldr	r5, [r3, #0]
 8014012:	6812      	ldr	r2, [r2, #0]
      mem_free_count = 0;
 8014014:	495a      	ldr	r1, [pc, #360]	; (8014180 <mem_malloc+0x1ac>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014016:	eba2 0b05 	sub.w	fp, r2, r5
 801401a:	9201      	str	r2, [sp, #4]
 801401c:	fa1f fa8b 	uxth.w	sl, fp
      mem = (struct mem *)(void *)&ram[ptr];
 8014020:	eb05 030a 	add.w	r3, r5, sl
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014024:	46d3      	mov	fp, sl
      mem = (struct mem *)(void *)&ram[ptr];
 8014026:	9300      	str	r3, [sp, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014028:	4556      	cmp	r6, sl
 801402a:	d919      	bls.n	8014060 <mem_malloc+0x8c>
      mem_free_count = 0;
 801402c:	700f      	strb	r7, [r1, #0]
      if (mem_free_count != 0) {
 801402e:	780b      	ldrb	r3, [r1, #0]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d1f9      	bne.n	8014028 <mem_malloc+0x54>
      mem = (struct mem *)(void *)&ram[ptr];
 8014034:	9c00      	ldr	r4, [sp, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014036:	46dc      	mov	ip, fp
      if (mem_free_count != 0) {
 8014038:	4653      	mov	r3, sl
 801403a:	e004      	b.n	8014046 <mem_malloc+0x72>
      mem_free_count = 0;
 801403c:	700f      	strb	r7, [r1, #0]
 801403e:	469c      	mov	ip, r3
      if (mem_free_count != 0) {
 8014040:	780a      	ldrb	r2, [r1, #0]
 8014042:	2a00      	cmp	r2, #0
 8014044:	d1f0      	bne.n	8014028 <mem_malloc+0x54>
      if ((!mem->used) &&
 8014046:	7920      	ldrb	r0, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014048:	ebae 0303 	sub.w	r3, lr, r3
 801404c:	8822      	ldrh	r2, [r4, #0]
      if ((!mem->used) &&
 801404e:	b910      	cbnz	r0, 8014056 <mem_malloc+0x82>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014050:	4413      	add	r3, r2
      if ((!mem->used) &&
 8014052:	4543      	cmp	r3, r8
 8014054:	d211      	bcs.n	801407a <mem_malloc+0xa6>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014056:	42b2      	cmp	r2, r6
 8014058:	4613      	mov	r3, r2
      mem = (struct mem *)(void *)&ram[ptr];
 801405a:	eb05 0402 	add.w	r4, r5, r2
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801405e:	d3ed      	bcc.n	801403c <mem_malloc+0x68>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8014060:	4a48      	ldr	r2, [pc, #288]	; (8014184 <mem_malloc+0x1b0>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014062:	4844      	ldr	r0, [pc, #272]	; (8014174 <mem_malloc+0x1a0>)
  MEM_STATS_INC(err);
 8014064:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8014068:	3301      	adds	r3, #1
 801406a:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 801406e:	f008 fc99 	bl	801c9a4 <sys_mutex_unlock>
  return NULL;
 8014072:	2000      	movs	r0, #0
}
 8014074:	b003      	add	sp, #12
 8014076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801407a:	f108 0e14 	add.w	lr, r8, #20
 801407e:	4e41      	ldr	r6, [pc, #260]	; (8014184 <mem_malloc+0x1b0>)
 8014080:	4573      	cmp	r3, lr
 8014082:	f8b6 70ac 	ldrh.w	r7, [r6, #172]	; 0xac
 8014086:	d244      	bcs.n	8014112 <mem_malloc+0x13e>
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8014088:	443a      	add	r2, r7
          mem->used = 1;
 801408a:	2301      	movs	r3, #1
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 801408c:	eba2 0c0c 	sub.w	ip, r2, ip
          mem->used = 1;
 8014090:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8014092:	f8a6 c0ac 	strh.w	ip, [r6, #172]	; 0xac
          while (cur->used && cur != ram_end) {
 8014096:	4e3c      	ldr	r6, [pc, #240]	; (8014188 <mem_malloc+0x1b4>)
            mem_free_count = 0;
 8014098:	2700      	movs	r7, #0
          while (cur->used && cur != ram_end) {
 801409a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801409e:	6830      	ldr	r0, [r6, #0]
        if (mem == lfree) {
 80140a0:	45a4      	cmp	ip, r4
 80140a2:	d118      	bne.n	80140d6 <mem_malloc+0x102>
          while (cur->used && cur != ram_end) {
 80140a4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d061      	beq.n	8014170 <mem_malloc+0x19c>
 80140ac:	4584      	cmp	ip, r0
 80140ae:	d052      	beq.n	8014156 <mem_malloc+0x182>
            mem_free_count = 0;
 80140b0:	700f      	strb	r7, [r1, #0]
            if (mem_free_count != 0) {
 80140b2:	780b      	ldrb	r3, [r1, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1f3      	bne.n	80140a0 <mem_malloc+0xcc>
 80140b8:	4663      	mov	r3, ip
 80140ba:	e005      	b.n	80140c8 <mem_malloc+0xf4>
          while (cur->used && cur != ram_end) {
 80140bc:	4298      	cmp	r0, r3
 80140be:	d04b      	beq.n	8014158 <mem_malloc+0x184>
            mem_free_count = 0;
 80140c0:	700f      	strb	r7, [r1, #0]
            if (mem_free_count != 0) {
 80140c2:	780a      	ldrb	r2, [r1, #0]
 80140c4:	2a00      	cmp	r2, #0
 80140c6:	d1eb      	bne.n	80140a0 <mem_malloc+0xcc>
            cur = (struct mem *)(void *)&ram[cur->next];
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	442b      	add	r3, r5
          while (cur->used && cur != ram_end) {
 80140cc:	791a      	ldrb	r2, [r3, #4]
 80140ce:	2a00      	cmp	r2, #0
 80140d0:	d1f4      	bne.n	80140bc <mem_malloc+0xe8>
          lfree = cur;
 80140d2:	4a2a      	ldr	r2, [pc, #168]	; (801417c <mem_malloc+0x1a8>)
 80140d4:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80140d6:	f108 0808 	add.w	r8, r8, #8
        sys_mutex_unlock(&mem_mutex);
 80140da:	4826      	ldr	r0, [pc, #152]	; (8014174 <mem_malloc+0x1a0>)
 80140dc:	f008 fc62 	bl	801c9a4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80140e0:	6833      	ldr	r3, [r6, #0]
 80140e2:	44a0      	add	r8, r4
 80140e4:	4543      	cmp	r3, r8
 80140e6:	d33a      	bcc.n	801415e <mem_malloc+0x18a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80140e8:	07a3      	lsls	r3, r4, #30
 80140ea:	d00d      	beq.n	8014108 <mem_malloc+0x134>
 80140ec:	4b27      	ldr	r3, [pc, #156]	; (801418c <mem_malloc+0x1b8>)
 80140ee:	f240 22d6 	movw	r2, #726	; 0x2d6
 80140f2:	4927      	ldr	r1, [pc, #156]	; (8014190 <mem_malloc+0x1bc>)
 80140f4:	4827      	ldr	r0, [pc, #156]	; (8014194 <mem_malloc+0x1c0>)
 80140f6:	f009 fa77 	bl	801d5e8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80140fa:	4b24      	ldr	r3, [pc, #144]	; (801418c <mem_malloc+0x1b8>)
 80140fc:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8014100:	4925      	ldr	r1, [pc, #148]	; (8014198 <mem_malloc+0x1c4>)
 8014102:	4824      	ldr	r0, [pc, #144]	; (8014194 <mem_malloc+0x1c0>)
 8014104:	f009 fa70 	bl	801d5e8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8014108:	f104 0008 	add.w	r0, r4, #8
}
 801410c:	b003      	add	sp, #12
 801410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8014112:	f109 0308 	add.w	r3, r9, #8
          mem->used = 1;
 8014116:	f04f 0a01 	mov.w	sl, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801411a:	f642 6be0 	movw	fp, #12000	; 0x2ee0
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801411e:	4463      	add	r3, ip
 8014120:	b29b      	uxth	r3, r3
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8014122:	eb05 0e03 	add.w	lr, r5, r3
          mem2->used = 0;
 8014126:	f88e 0004 	strb.w	r0, [lr, #4]
          mem2->next = mem->next;
 801412a:	52ea      	strh	r2, [r5, r3]
          mem2->prev = ptr;
 801412c:	f8ae c002 	strh.w	ip, [lr, #2]
          mem->next = ptr2;
 8014130:	8023      	strh	r3, [r4, #0]
          mem->used = 1;
 8014132:	f884 a004 	strb.w	sl, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014136:	5aea      	ldrh	r2, [r5, r3]
 8014138:	455a      	cmp	r2, fp
 801413a:	d001      	beq.n	8014140 <mem_malloc+0x16c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801413c:	442a      	add	r2, r5
 801413e:	8053      	strh	r3, [r2, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8014140:	3708      	adds	r7, #8
 8014142:	44b9      	add	r9, r7
 8014144:	f8a6 90ac 	strh.w	r9, [r6, #172]	; 0xac
 8014148:	e7a5      	b.n	8014096 <mem_malloc+0xc2>
 801414a:	f04f 080c 	mov.w	r8, #12
 801414e:	f642 66d4 	movw	r6, #11988	; 0x2ed4
    size = MIN_SIZE_ALIGNED;
 8014152:	46c1      	mov	r9, r8
 8014154:	e754      	b.n	8014000 <mem_malloc+0x2c>
          while (cur->used && cur != ram_end) {
 8014156:	4620      	mov	r0, r4
          lfree = cur;
 8014158:	4b08      	ldr	r3, [pc, #32]	; (801417c <mem_malloc+0x1a8>)
 801415a:	6018      	str	r0, [r3, #0]
 801415c:	e7bb      	b.n	80140d6 <mem_malloc+0x102>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801415e:	4b0b      	ldr	r3, [pc, #44]	; (801418c <mem_malloc+0x1b8>)
 8014160:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014164:	490d      	ldr	r1, [pc, #52]	; (801419c <mem_malloc+0x1c8>)
 8014166:	480b      	ldr	r0, [pc, #44]	; (8014194 <mem_malloc+0x1c0>)
 8014168:	f009 fa3e 	bl	801d5e8 <iprintf>
 801416c:	e7bc      	b.n	80140e8 <mem_malloc+0x114>
}
 801416e:	4770      	bx	lr
          while (cur->used && cur != ram_end) {
 8014170:	4623      	mov	r3, r4
 8014172:	e7ae      	b.n	80140d2 <mem_malloc+0xfe>
 8014174:	2002134c 	.word	0x2002134c
 8014178:	20021350 	.word	0x20021350
 801417c:	20021344 	.word	0x20021344
 8014180:	20021348 	.word	0x20021348
 8014184:	20033a7c 	.word	0x20033a7c
 8014188:	20021354 	.word	0x20021354
 801418c:	08037d9c 	.word	0x08037d9c
 8014190:	08037e18 	.word	0x08037e18
 8014194:	08021804 	.word	0x08021804
 8014198:	08037e48 	.word	0x08037e48
 801419c:	08037de8 	.word	0x08037de8

080141a0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 80141a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a4:	2208      	movs	r2, #8
 80141a6:	b0a1      	sub	sp, #132	; 0x84
 80141a8:	f8df a100 	ldr.w	sl, [pc, #256]	; 80142ac <memp_overflow_check_all+0x10c>
 80141ac:	4b3a      	ldr	r3, [pc, #232]	; (8014298 <memp_overflow_check_all+0xf8>)
 80141ae:	4d3b      	ldr	r5, [pc, #236]	; (801429c <memp_overflow_check_all+0xfc>)
      LWIP_ASSERT(errstr, 0);
 80141b0:	4f3b      	ldr	r7, [pc, #236]	; (80142a0 <memp_overflow_check_all+0x100>)
 80141b2:	4e3c      	ldr	r6, [pc, #240]	; (80142a4 <memp_overflow_check_all+0x104>)
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp*)LWIP_MEM_ALIGN(memp_pools[i]->base);
 80141b4:	f103 0903 	add.w	r9, r3, #3
 80141b8:	f029 0903 	bic.w	r9, r9, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80141bc:	2a00      	cmp	r2, #0
 80141be:	d05f      	beq.n	8014280 <memp_overflow_check_all+0xe0>
 80141c0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80141c4:	f04f 0b00 	mov.w	fp, #0
 80141c8:	f108 041b 	add.w	r4, r8, #27
 80141cc:	44c8      	add	r8, r9
 80141ce:	444c      	add	r4, r9
 80141d0:	f108 082b 	add.w	r8, r8, #43	; 0x2b
    if (m[k] != 0xcd) {
 80141d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      char errstr[128] = "detected memp overflow in pool ";
 80141d8:	46ec      	mov	ip, sp
 80141da:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 80142b0 <memp_overflow_check_all+0x110>
    if (m[k] != 0xcd) {
 80141de:	2bcd      	cmp	r3, #205	; 0xcd
 80141e0:	d017      	beq.n	8014212 <memp_overflow_check_all+0x72>
      char errstr[128] = "detected memp overflow in pool ";
 80141e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80141e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141ea:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80141ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80141f2:	2260      	movs	r2, #96	; 0x60
 80141f4:	2100      	movs	r1, #0
 80141f6:	a808      	add	r0, sp, #32
 80141f8:	f008 feb2 	bl	801cf60 <memset>
      strcat(errstr, desc->desc);
 80141fc:	6829      	ldr	r1, [r5, #0]
 80141fe:	f10d 001f 	add.w	r0, sp, #31
 8014202:	f009 fbb1 	bl	801d968 <strcpy>
      LWIP_ASSERT(errstr, 0);
 8014206:	463b      	mov	r3, r7
 8014208:	4669      	mov	r1, sp
 801420a:	228a      	movs	r2, #138	; 0x8a
 801420c:	4630      	mov	r0, r6
 801420e:	f009 f9eb 	bl	801d5e8 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
 8014212:	45a0      	cmp	r8, r4
 8014214:	d1de      	bne.n	80141d4 <memp_overflow_check_all+0x34>
 8014216:	f109 040b 	add.w	r4, r9, #11
 801421a:	f109 081b 	add.w	r8, r9, #27
    if (m[k] != 0xcd) {
 801421e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      char errstr[128] = "detected memp underflow in pool ";
 8014222:	46ec      	mov	ip, sp
 8014224:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80142b4 <memp_overflow_check_all+0x114>
    if (m[k] != 0xcd) {
 8014228:	2bcd      	cmp	r3, #205	; 0xcd
 801422a:	d01b      	beq.n	8014264 <memp_overflow_check_all+0xc4>
      char errstr[128] = "detected memp underflow in pool ";
 801422c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014234:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014238:	f8de e000 	ldr.w	lr, [lr]
 801423c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014240:	225f      	movs	r2, #95	; 0x5f
 8014242:	2100      	movs	r1, #0
 8014244:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8014248:	f88c e000 	strb.w	lr, [ip]
 801424c:	f008 fe88 	bl	801cf60 <memset>
      strcat(errstr, desc->desc);
 8014250:	6829      	ldr	r1, [r5, #0]
 8014252:	a808      	add	r0, sp, #32
 8014254:	f009 fb88 	bl	801d968 <strcpy>
      LWIP_ASSERT(errstr, 0);
 8014258:	463b      	mov	r3, r7
 801425a:	4669      	mov	r1, sp
 801425c:	22a5      	movs	r2, #165	; 0xa5
 801425e:	4630      	mov	r0, r6
 8014260:	f009 f9c2 	bl	801d5e8 <iprintf>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8014264:	45a0      	cmp	r8, r4
 8014266:	d1da      	bne.n	801421e <memp_overflow_check_all+0x7e>
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8014268:	f10b 0b01 	add.w	fp, fp, #1
      memp_overflow_check_element_overflow(p, memp_pools[i]);
      memp_overflow_check_element_underflow(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 801426c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8014270:	896b      	ldrh	r3, [r5, #10]
 8014272:	fa1f fb8b 	uxth.w	fp, fp
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 8014276:	f108 022c 	add.w	r2, r8, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801427a:	455b      	cmp	r3, fp
      p = LWIP_ALIGNMENT_CAST(struct memp*, ((u8_t*)p + MEMP_SIZE + memp_pools[i]->size + MEMP_SANITY_REGION_AFTER_ALIGNED));
 801427c:	4491      	add	r9, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801427e:	d8a3      	bhi.n	80141c8 <memp_overflow_check_all+0x28>
  for (i = 0; i < MEMP_MAX; ++i) {
 8014280:	4b09      	ldr	r3, [pc, #36]	; (80142a8 <memp_overflow_check_all+0x108>)
 8014282:	4553      	cmp	r3, sl
 8014284:	d004      	beq.n	8014290 <memp_overflow_check_all+0xf0>
 8014286:	f85a 5b04 	ldr.w	r5, [sl], #4
 801428a:	68eb      	ldr	r3, [r5, #12]
 801428c:	896a      	ldrh	r2, [r5, #10]
 801428e:	e791      	b.n	80141b4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8014290:	b021      	add	sp, #132	; 0x84
 8014292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014296:	bf00      	nop
 8014298:	20029318 	.word	0x20029318
 801429c:	08037f80 	.word	0x08037f80
 80142a0:	08038070 	.word	0x08038070
 80142a4:	08021804 	.word	0x08021804
 80142a8:	080380e0 	.word	0x080380e0
 80142ac:	080380a4 	.word	0x080380a4
 80142b0:	0801f95c 	.word	0x0801f95c
 80142b4:	0801f9dc 	.word	0x0801f9dc

080142b8 <do_memp_malloc_pool_fn.isra.4>:

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
 80142b8:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80142ba:	680c      	ldr	r4, [r1, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80142bc:	b1e4      	cbz	r4, 80142f8 <do_memp_malloc_pool_fn.isra.4+0x40>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80142be:	6826      	ldr	r6, [r4, #0]
 80142c0:	4605      	mov	r5, r0
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 80142c2:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 80142c4:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 80142c6:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 80142c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80142cc:	07a3      	lsls	r3, r4, #30
 80142ce:	d10b      	bne.n	80142e8 <do_memp_malloc_pool_fn.isra.4+0x30>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80142d0:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80142d2:	f104 001c 	add.w	r0, r4, #28
    desc->stats->used++;
 80142d6:	8893      	ldrh	r3, [r2, #4]
    if (desc->stats->used > desc->stats->max) {
 80142d8:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 80142da:	3301      	adds	r3, #1
 80142dc:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 80142de:	4299      	cmp	r1, r3
    desc->stats->used++;
 80142e0:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 80142e2:	bf38      	it	cc
 80142e4:	80d3      	strhcc	r3, [r2, #6]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 80142e6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80142e8:	4b06      	ldr	r3, [pc, #24]	; (8014304 <do_memp_malloc_pool_fn.isra.4+0x4c>)
 80142ea:	f240 1249 	movw	r2, #329	; 0x149
 80142ee:	4906      	ldr	r1, [pc, #24]	; (8014308 <do_memp_malloc_pool_fn.isra.4+0x50>)
 80142f0:	4806      	ldr	r0, [pc, #24]	; (801430c <do_memp_malloc_pool_fn.isra.4+0x54>)
 80142f2:	f009 f979 	bl	801d5e8 <iprintf>
 80142f6:	e7eb      	b.n	80142d0 <do_memp_malloc_pool_fn.isra.4+0x18>
    desc->stats->err++;
 80142f8:	6802      	ldr	r2, [r0, #0]
 80142fa:	4620      	mov	r0, r4
 80142fc:	8813      	ldrh	r3, [r2, #0]
 80142fe:	3301      	adds	r3, #1
 8014300:	8013      	strh	r3, [r2, #0]
}
 8014302:	bd70      	pop	{r4, r5, r6, pc}
 8014304:	08038070 	.word	0x08038070
 8014308:	08037ed0 	.word	0x08037ed0
 801430c:	08021804 	.word	0x08021804

08014310 <do_memp_free_pool.isra.6>:
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014310:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8014312:	b570      	push	{r4, r5, r6, lr}
 8014314:	4614      	mov	r4, r2
 8014316:	4606      	mov	r6, r0
 8014318:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 801431a:	d122      	bne.n	8014362 <do_memp_free_pool.isra.6+0x52>
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801431c:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801431e:	f1a4 021c 	sub.w	r2, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014322:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8014324:	8883      	ldrh	r3, [r0, #4]
  memp->next = *desc->tab;
 8014326:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8014328:	3b01      	subs	r3, #1
 801432a:	8083      	strh	r3, [r0, #4]
  memp->next = *desc->tab;
 801432c:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 8014330:	600a      	str	r2, [r1, #0]
  if (t != NULL) {
 8014332:	b162      	cbz	r2, 801434e <do_memp_free_pool.isra.6+0x3e>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8014334:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8014338:	b14a      	cbz	r2, 801434e <do_memp_free_pool.isra.6+0x3e>
 801433a:	b143      	cbz	r3, 801434e <do_memp_free_pool.isra.6+0x3e>
      if (t == h) {
 801433c:	429a      	cmp	r2, r3
 801433e:	d007      	beq.n	8014350 <do_memp_free_pool.isra.6+0x40>
      h = ((h->next != NULL) ? h->next->next : NULL)) {
 8014340:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8014342:	6812      	ldr	r2, [r2, #0]
      h = ((h->next != NULL) ? h->next->next : NULL)) {
 8014344:	2b00      	cmp	r3, #0
 8014346:	d0f7      	beq.n	8014338 <do_memp_free_pool.isra.6+0x28>
 8014348:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801434a:	2a00      	cmp	r2, #0
 801434c:	d1f5      	bne.n	801433a <do_memp_free_pool.isra.6+0x2a>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801434e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8014350:	4b08      	ldr	r3, [pc, #32]	; (8014374 <do_memp_free_pool.isra.6+0x64>)
 8014352:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014356:	4908      	ldr	r1, [pc, #32]	; (8014378 <do_memp_free_pool.isra.6+0x68>)
 8014358:	4808      	ldr	r0, [pc, #32]	; (801437c <do_memp_free_pool.isra.6+0x6c>)
}
 801435a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801435e:	f009 b943 	b.w	801d5e8 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8014362:	4b04      	ldr	r3, [pc, #16]	; (8014374 <do_memp_free_pool.isra.6+0x64>)
 8014364:	f240 129d 	movw	r2, #413	; 0x19d
 8014368:	4905      	ldr	r1, [pc, #20]	; (8014380 <do_memp_free_pool.isra.6+0x70>)
 801436a:	4804      	ldr	r0, [pc, #16]	; (801437c <do_memp_free_pool.isra.6+0x6c>)
 801436c:	f009 f93c 	bl	801d5e8 <iprintf>
 8014370:	e7d4      	b.n	801431c <do_memp_free_pool.isra.6+0xc>
 8014372:	bf00      	nop
 8014374:	08038070 	.word	0x08038070
 8014378:	08037ec4 	.word	0x08037ec4
 801437c:	08021804 	.word	0x08021804
 8014380:	08037ea4 	.word	0x08037ea4

08014384 <memp_init_pool>:
{
 8014384:	b4f0      	push	{r4, r5, r6, r7}
  *desc->tab = NULL;
 8014386:	2600      	movs	r6, #0
  for (i = 0; i < desc->num; ++i) {
 8014388:	8947      	ldrh	r7, [r0, #10]
  *desc->tab = NULL;
 801438a:	e9d0 3403 	ldrd	r3, r4, [r0, #12]
 801438e:	6026      	str	r6, [r4, #0]
  for (i = 0; i < desc->num; ++i) {
 8014390:	b1e7      	cbz	r7, 80143cc <memp_init_pool+0x48>
 8014392:	3303      	adds	r3, #3
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 8014394:	f04f 32cd 	mov.w	r2, #3452816845	; 0xcdcdcdcd
  for (i = 0; i < desc->num; ++i) {
 8014398:	4635      	mov	r5, r6
 801439a:	f023 0303 	bic.w	r3, r3, #3
 801439e:	e001      	b.n	80143a4 <memp_init_pool+0x20>
 80143a0:	6904      	ldr	r4, [r0, #16]
 80143a2:	6826      	ldr	r6, [r4, #0]
    memp->next = *desc->tab;
 80143a4:	601e      	str	r6, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80143a6:	3501      	adds	r5, #1
    *desc->tab = memp;
 80143a8:	6023      	str	r3, [r4, #0]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
 80143aa:	60da      	str	r2, [r3, #12]
 80143ac:	611a      	str	r2, [r3, #16]
 80143ae:	615a      	str	r2, [r3, #20]
 80143b0:	619a      	str	r2, [r3, #24]
  m = (u8_t*)p + MEMP_SIZE + desc->size;
 80143b2:	8901      	ldrh	r1, [r0, #8]
 80143b4:	311c      	adds	r1, #28
 80143b6:	185c      	adds	r4, r3, r1
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
 80143b8:	505a      	str	r2, [r3, r1]
 80143ba:	6062      	str	r2, [r4, #4]
 80143bc:	60a2      	str	r2, [r4, #8]
 80143be:	60e2      	str	r2, [r4, #12]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80143c0:	8901      	ldrh	r1, [r0, #8]
  for (i = 0; i < desc->num; ++i) {
 80143c2:	8947      	ldrh	r7, [r0, #10]
      + MEMP_SANITY_REGION_AFTER_ALIGNED
 80143c4:	312c      	adds	r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 80143c6:	42af      	cmp	r7, r5
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80143c8:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 80143ca:	dce9      	bgt.n	80143a0 <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 80143cc:	6843      	ldr	r3, [r0, #4]
 80143ce:	805f      	strh	r7, [r3, #2]
}
 80143d0:	bcf0      	pop	{r4, r5, r6, r7}
 80143d2:	4770      	bx	lr

080143d4 <memp_init>:
{
 80143d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d6:	4c0a      	ldr	r4, [pc, #40]	; (8014400 <memp_init+0x2c>)
 80143d8:	4e0a      	ldr	r6, [pc, #40]	; (8014404 <memp_init+0x30>)
 80143da:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80143de:	4d0a      	ldr	r5, [pc, #40]	; (8014408 <memp_init+0x34>)
 80143e0:	e001      	b.n	80143e6 <memp_init+0x12>
 80143e2:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 80143e6:	4628      	mov	r0, r5
 80143e8:	f7ff ffcc 	bl	8014384 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80143ec:	686b      	ldr	r3, [r5, #4]
 80143ee:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80143f2:	42bc      	cmp	r4, r7
 80143f4:	d1f5      	bne.n	80143e2 <memp_init+0xe>
}
 80143f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 80143fa:	f7ff bed1 	b.w	80141a0 <memp_overflow_check_all>
 80143fe:	bf00      	nop
 8014400:	20033b30 	.word	0x20033b30
 8014404:	080380a4 	.word	0x080380a4
 8014408:	08037f80 	.word	0x08037f80

0801440c <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801440c:	280f      	cmp	r0, #15
{
 801440e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014410:	d80f      	bhi.n	8014432 <memp_malloc_fn+0x26>
 8014412:	460d      	mov	r5, r1
 8014414:	4616      	mov	r6, r2
 8014416:	4604      	mov	r4, r0
  memp_overflow_check_all();
 8014418:	f7ff fec2 	bl	80141a0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801441c:	4909      	ldr	r1, [pc, #36]	; (8014444 <memp_malloc_fn+0x38>)
 801441e:	4633      	mov	r3, r6
 8014420:	462a      	mov	r2, r5
 8014422:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8014426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801442a:	6901      	ldr	r1, [r0, #16]
 801442c:	3004      	adds	r0, #4
 801442e:	f7ff bf43 	b.w	80142b8 <do_memp_malloc_pool_fn.isra.4>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014432:	4b05      	ldr	r3, [pc, #20]	; (8014448 <memp_malloc_fn+0x3c>)
 8014434:	f240 1287 	movw	r2, #391	; 0x187
 8014438:	4904      	ldr	r1, [pc, #16]	; (801444c <memp_malloc_fn+0x40>)
 801443a:	4805      	ldr	r0, [pc, #20]	; (8014450 <memp_malloc_fn+0x44>)
 801443c:	f009 f8d4 	bl	801d5e8 <iprintf>
}
 8014440:	2000      	movs	r0, #0
 8014442:	bd70      	pop	{r4, r5, r6, pc}
 8014444:	080380a0 	.word	0x080380a0
 8014448:	08038070 	.word	0x08038070
 801444c:	08038050 	.word	0x08038050
 8014450:	08021804 	.word	0x08021804

08014454 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014454:	280f      	cmp	r0, #15
 8014456:	d811      	bhi.n	801447c <memp_free+0x28>

  if (mem == NULL) {
 8014458:	b179      	cbz	r1, 801447a <memp_free+0x26>
{
 801445a:	b570      	push	{r4, r5, r6, lr}
 801445c:	460d      	mov	r5, r1
 801445e:	4604      	mov	r4, r0
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8014460:	f7ff fe9e 	bl	80141a0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014464:	4b09      	ldr	r3, [pc, #36]	; (801448c <memp_free+0x38>)
 8014466:	462a      	mov	r2, r5
 8014468:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801446c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8014470:	f100 0110 	add.w	r1, r0, #16
 8014474:	3004      	adds	r0, #4
 8014476:	f7ff bf4b 	b.w	8014310 <do_memp_free_pool.isra.6>
 801447a:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801447c:	4b04      	ldr	r3, [pc, #16]	; (8014490 <memp_free+0x3c>)
 801447e:	f240 12db 	movw	r2, #475	; 0x1db
 8014482:	4904      	ldr	r1, [pc, #16]	; (8014494 <memp_free+0x40>)
 8014484:	4804      	ldr	r0, [pc, #16]	; (8014498 <memp_free+0x44>)
 8014486:	f009 b8af 	b.w	801d5e8 <iprintf>
 801448a:	bf00      	nop
 801448c:	080380a0 	.word	0x080380a0
 8014490:	08038070 	.word	0x08038070
 8014494:	08038034 	.word	0x08038034
 8014498:	08021804 	.word	0x08021804

0801449c <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801449c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
netif_issue_reports(struct netif* netif, u8_t report_type)
 80144a0:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80144a2:	071b      	lsls	r3, r3, #28
 80144a4:	d400      	bmi.n	80144a8 <netif_issue_reports.part.0+0xc>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80144a6:	4770      	bx	lr
      etharp_gratuitous(netif);
 80144a8:	3104      	adds	r1, #4
 80144aa:	f007 b861 	b.w	801b570 <etharp_request>
 80144ae:	bf00      	nop

080144b0 <netif_init>:
}
 80144b0:	4770      	bx	lr
 80144b2:	bf00      	nop

080144b4 <netif_set_ipaddr>:
{
 80144b4:	b570      	push	{r4, r5, r6, lr}
 80144b6:	6842      	ldr	r2, [r0, #4]
 80144b8:	b082      	sub	sp, #8
 80144ba:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80144bc:	460d      	mov	r5, r1
 80144be:	b1e1      	cbz	r1, 80144fa <netif_set_ipaddr+0x46>
 80144c0:	680b      	ldr	r3, [r1, #0]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80144c2:	429a      	cmp	r2, r3
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80144c4:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80144c6:	d016      	beq.n	80144f6 <netif_set_ipaddr+0x42>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80144c8:	1d06      	adds	r6, r0, #4
 80144ca:	a901      	add	r1, sp, #4
 80144cc:	4630      	mov	r0, r6
 80144ce:	f001 ff3f 	bl	8016350 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80144d2:	a901      	add	r1, sp, #4
 80144d4:	4630      	mov	r0, r6
 80144d6:	f005 f807 	bl	80194e8 <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80144da:	a901      	add	r1, sp, #4
 80144dc:	4630      	mov	r0, r6
 80144de:	f000 fe59 	bl	8015194 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80144e2:	682b      	ldr	r3, [r5, #0]
 80144e4:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80144e6:	b113      	cbz	r3, 80144ee <netif_set_ipaddr+0x3a>
 80144e8:	4620      	mov	r0, r4
 80144ea:	f7ff ffd7 	bl	801449c <netif_issue_reports.part.0>
    NETIF_STATUS_CALLBACK(netif);
 80144ee:	69e3      	ldr	r3, [r4, #28]
 80144f0:	b10b      	cbz	r3, 80144f6 <netif_set_ipaddr+0x42>
 80144f2:	4620      	mov	r0, r4
 80144f4:	4798      	blx	r3
}
 80144f6:	b002      	add	sp, #8
 80144f8:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80144fa:	4b0a      	ldr	r3, [pc, #40]	; (8014524 <netif_set_ipaddr+0x70>)
 80144fc:	681b      	ldr	r3, [r3, #0]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80144fe:	4293      	cmp	r3, r2
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8014500:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8014502:	d0f8      	beq.n	80144f6 <netif_set_ipaddr+0x42>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014504:	1d06      	adds	r6, r0, #4
 8014506:	a901      	add	r1, sp, #4
 8014508:	4630      	mov	r0, r6
 801450a:	f001 ff21 	bl	8016350 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801450e:	a901      	add	r1, sp, #4
 8014510:	4630      	mov	r0, r6
 8014512:	f004 ffe9 	bl	80194e8 <udp_netif_ip_addr_changed>
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8014516:	a901      	add	r1, sp, #4
 8014518:	4630      	mov	r0, r6
 801451a:	f000 fe3b 	bl	8015194 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801451e:	6065      	str	r5, [r4, #4]
 8014520:	e7e5      	b.n	80144ee <netif_set_ipaddr+0x3a>
 8014522:	bf00      	nop
 8014524:	08039ac4 	.word	0x08039ac4

08014528 <netif_set_addr>:
{
 8014528:	b570      	push	{r4, r5, r6, lr}
  if (ip4_addr_isany(ipaddr)) {
 801452a:	b159      	cbz	r1, 8014544 <netif_set_addr+0x1c>
 801452c:	680c      	ldr	r4, [r1, #0]
 801452e:	b14c      	cbz	r4, 8014544 <netif_set_addr+0x1c>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014530:	b102      	cbz	r2, 8014534 <netif_set_addr+0xc>
 8014532:	6812      	ldr	r2, [r2, #0]
 8014534:	6082      	str	r2, [r0, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014536:	b103      	cbz	r3, 801453a <netif_set_addr+0x12>
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	60c3      	str	r3, [r0, #12]
}
 801453c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8014540:	f7ff bfb8 	b.w	80144b4 <netif_set_ipaddr>
 8014544:	4615      	mov	r5, r2
 8014546:	461c      	mov	r4, r3
 8014548:	4606      	mov	r6, r0
    netif_set_ipaddr(netif, ipaddr);
 801454a:	f7ff ffb3 	bl	80144b4 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801454e:	b105      	cbz	r5, 8014552 <netif_set_addr+0x2a>
 8014550:	682d      	ldr	r5, [r5, #0]
 8014552:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014554:	b104      	cbz	r4, 8014558 <netif_set_addr+0x30>
 8014556:	6824      	ldr	r4, [r4, #0]
 8014558:	60f4      	str	r4, [r6, #12]
}
 801455a:	bd70      	pop	{r4, r5, r6, pc}

0801455c <netif_add>:
{
 801455c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014560:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014564:	4604      	mov	r4, r0
 8014566:	4689      	mov	r9, r1
 8014568:	4692      	mov	sl, r2
 801456a:	469b      	mov	fp, r3
 801456c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801456e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  LWIP_ASSERT("No init function given", init != NULL);
 8014570:	f1b8 0f00 	cmp.w	r8, #0
 8014574:	d026      	beq.n	80145c4 <netif_add+0x68>
  netif->num = netif_num++;
 8014576:	f8df c070 	ldr.w	ip, [pc, #112]	; 80145e8 <netif_add+0x8c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801457a:	2500      	movs	r5, #0
  netif->state = state;
 801457c:	6267      	str	r7, [r4, #36]	; 0x24
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801457e:	2703      	movs	r7, #3
  netif->num = netif_num++;
 8014580:	f89c 0000 	ldrb.w	r0, [ip]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014584:	465b      	mov	r3, fp
  netif->input = input;
 8014586:	6126      	str	r6, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014588:	4652      	mov	r2, sl
  netif->num = netif_num++;
 801458a:	1c46      	adds	r6, r0, #1
 801458c:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014590:	4649      	mov	r1, r9
 8014592:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014594:	6065      	str	r5, [r4, #4]
  netif->flags = 0;
 8014596:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801459a:	62a5      	str	r5, [r4, #40]	; 0x28
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801459c:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
  netif->num = netif_num++;
 80145a0:	f88c 6000 	strb.w	r6, [ip]
  ip_addr_set_zero_ip4(&netif->gw);
 80145a4:	e9c4 5502 	strd	r5, r5, [r4, #8]
  netif->link_callback = NULL;
 80145a8:	e9c4 5507 	strd	r5, r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80145ac:	f7ff ffbc 	bl	8014528 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80145b0:	4620      	mov	r0, r4
 80145b2:	47c0      	blx	r8
 80145b4:	b968      	cbnz	r0, 80145d2 <netif_add+0x76>
  netif->next = netif_list;
 80145b6:	4b08      	ldr	r3, [pc, #32]	; (80145d8 <netif_add+0x7c>)
  return netif;
 80145b8:	4620      	mov	r0, r4
  netif->next = netif_list;
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80145be:	601c      	str	r4, [r3, #0]
}
 80145c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80145c4:	4b05      	ldr	r3, [pc, #20]	; (80145dc <netif_add+0x80>)
 80145c6:	22fb      	movs	r2, #251	; 0xfb
 80145c8:	4905      	ldr	r1, [pc, #20]	; (80145e0 <netif_add+0x84>)
 80145ca:	4806      	ldr	r0, [pc, #24]	; (80145e4 <netif_add+0x88>)
 80145cc:	f009 f80c 	bl	801d5e8 <iprintf>
 80145d0:	e7d1      	b.n	8014576 <netif_add+0x1a>
    return NULL;
 80145d2:	4628      	mov	r0, r5
 80145d4:	e7f4      	b.n	80145c0 <netif_add+0x64>
 80145d6:	bf00      	nop
 80145d8:	20033a70 	.word	0x20033a70
 80145dc:	08038194 	.word	0x08038194
 80145e0:	080381c8 	.word	0x080381c8
 80145e4:	08021804 	.word	0x08021804
 80145e8:	20021458 	.word	0x20021458

080145ec <netif_set_default>:
  netif_default = netif;
 80145ec:	4b01      	ldr	r3, [pc, #4]	; (80145f4 <netif_set_default+0x8>)
 80145ee:	6018      	str	r0, [r3, #0]
}
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop
 80145f4:	20033a74 	.word	0x20033a74

080145f8 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80145f8:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 80145fc:	07d1      	lsls	r1, r2, #31
 80145fe:	d40f      	bmi.n	8014620 <netif_set_up+0x28>
    netif->flags |= NETIF_FLAG_UP;
 8014600:	f042 0201 	orr.w	r2, r2, #1
    NETIF_STATUS_CALLBACK(netif);
 8014604:	69c3      	ldr	r3, [r0, #28]
{
 8014606:	b510      	push	{r4, lr}
 8014608:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
 801460a:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37
    NETIF_STATUS_CALLBACK(netif);
 801460e:	b113      	cbz	r3, 8014616 <netif_set_up+0x1e>
 8014610:	4798      	blx	r3
 8014612:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014616:	0753      	lsls	r3, r2, #29
 8014618:	d501      	bpl.n	801461e <netif_set_up+0x26>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801461a:	6863      	ldr	r3, [r4, #4]
 801461c:	b90b      	cbnz	r3, 8014622 <netif_set_up+0x2a>
}
 801461e:	bd10      	pop	{r4, pc}
 8014620:	4770      	bx	lr
 8014622:	4620      	mov	r0, r4
 8014624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014628:	f7ff bf38 	b.w	801449c <netif_issue_reports.part.0>

0801462c <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 801462c:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8014630:	07d1      	lsls	r1, r2, #31
 8014632:	d50e      	bpl.n	8014652 <netif_set_down+0x26>
    netif->flags &= ~NETIF_FLAG_UP;
 8014634:	f022 0301 	bic.w	r3, r2, #1
{
 8014638:	b510      	push	{r4, lr}
    netif->flags &= ~NETIF_FLAG_UP;
 801463a:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801463e:	0713      	lsls	r3, r2, #28
 8014640:	4604      	mov	r4, r0
 8014642:	d407      	bmi.n	8014654 <netif_set_down+0x28>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8014644:	69e3      	ldr	r3, [r4, #28]
 8014646:	b11b      	cbz	r3, 8014650 <netif_set_down+0x24>
 8014648:	4620      	mov	r0, r4
  }
}
 801464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801464e:	4718      	bx	r3
}
 8014650:	bd10      	pop	{r4, pc}
 8014652:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 8014654:	f006 fcec 	bl	801b030 <etharp_cleanup_netif>
 8014658:	e7f4      	b.n	8014644 <netif_set_down+0x18>
 801465a:	bf00      	nop

0801465c <netif_set_status_callback>:
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
 801465c:	b100      	cbz	r0, 8014660 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801465e:	61c1      	str	r1, [r0, #28]
  }
}
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop

08014664 <netif_set_link_up>:
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014664:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8014668:	0751      	lsls	r1, r2, #29
 801466a:	d500      	bpl.n	801466e <netif_set_link_up+0xa>
 801466c:	4770      	bx	lr
    netif->flags |= NETIF_FLAG_LINK_UP;
 801466e:	f042 0204 	orr.w	r2, r2, #4
{
 8014672:	b510      	push	{r4, lr}
 8014674:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014676:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801467a:	f005 ffb9 	bl	801a5f0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 801467e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8014682:	07db      	lsls	r3, r3, #31
 8014684:	d504      	bpl.n	8014690 <netif_set_link_up+0x2c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014686:	6863      	ldr	r3, [r4, #4]
 8014688:	b113      	cbz	r3, 8014690 <netif_set_link_up+0x2c>
 801468a:	4620      	mov	r0, r4
 801468c:	f7ff ff06 	bl	801449c <netif_issue_reports.part.0>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 8014690:	6a23      	ldr	r3, [r4, #32]
 8014692:	b11b      	cbz	r3, 801469c <netif_set_link_up+0x38>
 8014694:	4620      	mov	r0, r4
  }
}
 8014696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801469a:	4718      	bx	r3
}
 801469c:	bd10      	pop	{r4, pc}
 801469e:	bf00      	nop

080146a0 <netif_set_link_down>:
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80146a0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 80146a4:	0759      	lsls	r1, r3, #29
 80146a6:	d506      	bpl.n	80146b6 <netif_set_link_down+0x16>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80146a8:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 80146ac:	6a01      	ldr	r1, [r0, #32]
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80146ae:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    NETIF_LINK_CALLBACK(netif);
 80146b2:	b101      	cbz	r1, 80146b6 <netif_set_link_down+0x16>
 80146b4:	4708      	bx	r1
  }
}
 80146b6:	4770      	bx	lr

080146b8 <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 80146b8:	b100      	cbz	r0, 80146bc <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80146ba:	6201      	str	r1, [r0, #32]
  }
}
 80146bc:	4770      	bx	lr
 80146be:	bf00      	nop

080146c0 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146c0:	4908      	ldr	r1, [pc, #32]	; (80146e4 <pbuf_free_ooseq_callback+0x24>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80146c2:	2200      	movs	r2, #0
 80146c4:	4b08      	ldr	r3, [pc, #32]	; (80146e8 <pbuf_free_ooseq_callback+0x28>)
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80146c6:	b510      	push	{r4, lr}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146c8:	680c      	ldr	r4, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80146ca:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146cc:	b914      	cbnz	r4, 80146d4 <pbuf_free_ooseq_callback+0x14>
 80146ce:	e008      	b.n	80146e2 <pbuf_free_ooseq_callback+0x22>
 80146d0:	68e4      	ldr	r4, [r4, #12]
 80146d2:	b134      	cbz	r4, 80146e2 <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 80146d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d0fa      	beq.n	80146d0 <pbuf_free_ooseq_callback+0x10>
      tcp_segs_free(pcb->ooseq);
 80146da:	f000 ffbf 	bl	801565c <tcp_segs_free>
      pcb->ooseq = NULL;
 80146de:	2300      	movs	r3, #0
 80146e0:	6723      	str	r3, [r4, #112]	; 0x70
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80146e2:	bd10      	pop	{r4, pc}
 80146e4:	20033b88 	.word	0x20033b88
 80146e8:	20033a78 	.word	0x20033a78

080146ec <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80146ec:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80146ee:	4604      	mov	r4, r0
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d03e      	beq.n	8014772 <pbuf_header_impl+0x86>
  if ((header_size_increment == 0) || (p == NULL)) {
 80146f4:	2900      	cmp	r1, #0
 80146f6:	d018      	beq.n	801472a <pbuf_header_impl+0x3e>
 80146f8:	b28d      	uxth	r5, r1
    return 0;
  }

  if (header_size_increment < 0) {
 80146fa:	db20      	blt.n	801473e <pbuf_header_impl+0x52>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80146fc:	4628      	mov	r0, r5
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80146fe:	7b23      	ldrb	r3, [r4, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8014700:	6866      	ldr	r6, [r4, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8014702:	b1a3      	cbz	r3, 801472e <pbuf_header_impl+0x42>
 8014704:	2b03      	cmp	r3, #3
 8014706:	d012      	beq.n	801472e <pbuf_header_impl+0x42>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8014708:	3b01      	subs	r3, #1
 801470a:	2b01      	cmp	r3, #1
 801470c:	d828      	bhi.n	8014760 <pbuf_header_impl+0x74>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801470e:	2900      	cmp	r1, #0
 8014710:	db3a      	blt.n	8014788 <pbuf_header_impl+0x9c>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8014712:	07d3      	lsls	r3, r2, #31
 8014714:	d536      	bpl.n	8014784 <pbuf_header_impl+0x98>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8014716:	1a71      	subs	r1, r6, r1
 8014718:	8963      	ldrh	r3, [r4, #10]
 801471a:	6061      	str	r1, [r4, #4]
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  p->tot_len += header_size_increment;
 801471c:	8922      	ldrh	r2, [r4, #8]
  p->len += header_size_increment;
 801471e:	442b      	add	r3, r5

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8014720:	2000      	movs	r0, #0
  p->tot_len += header_size_increment;
 8014722:	4415      	add	r5, r2
  p->len += header_size_increment;
 8014724:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8014726:	8125      	strh	r5, [r4, #8]
}
 8014728:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 801472a:	4608      	mov	r0, r1
}
 801472c:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 801472e:	1a71      	subs	r1, r6, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014730:	f104 0310 	add.w	r3, r4, #16
 8014734:	4299      	cmp	r1, r3
    p->payload = (u8_t *)p->payload - header_size_increment;
 8014736:	6061      	str	r1, [r4, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014738:	d30f      	bcc.n	801475a <pbuf_header_impl+0x6e>
 801473a:	8963      	ldrh	r3, [r4, #10]
 801473c:	e7ee      	b.n	801471c <pbuf_header_impl+0x30>
    increment_magnitude = (u16_t)-header_size_increment;
 801473e:	4268      	negs	r0, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014740:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8014742:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014744:	4283      	cmp	r3, r0
 8014746:	d2da      	bcs.n	80146fe <pbuf_header_impl+0x12>
 8014748:	4b12      	ldr	r3, [pc, #72]	; (8014794 <pbuf_header_impl+0xa8>)
 801474a:	f240 2247 	movw	r2, #583	; 0x247
 801474e:	4912      	ldr	r1, [pc, #72]	; (8014798 <pbuf_header_impl+0xac>)
 8014750:	4812      	ldr	r0, [pc, #72]	; (801479c <pbuf_header_impl+0xb0>)
 8014752:	f008 ff49 	bl	801d5e8 <iprintf>
 8014756:	2001      	movs	r0, #1
}
 8014758:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 801475a:	6066      	str	r6, [r4, #4]
      return 1;
 801475c:	2001      	movs	r0, #1
}
 801475e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("bad pbuf type", 0);
 8014760:	4b0c      	ldr	r3, [pc, #48]	; (8014794 <pbuf_header_impl+0xa8>)
 8014762:	f240 2277 	movw	r2, #631	; 0x277
 8014766:	490e      	ldr	r1, [pc, #56]	; (80147a0 <pbuf_header_impl+0xb4>)
 8014768:	480c      	ldr	r0, [pc, #48]	; (801479c <pbuf_header_impl+0xb0>)
 801476a:	f008 ff3d 	bl	801d5e8 <iprintf>
    return 1;
 801476e:	2001      	movs	r0, #1
}
 8014770:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8014772:	4b08      	ldr	r3, [pc, #32]	; (8014794 <pbuf_header_impl+0xa8>)
 8014774:	f240 223f 	movw	r2, #575	; 0x23f
 8014778:	490a      	ldr	r1, [pc, #40]	; (80147a4 <pbuf_header_impl+0xb8>)
 801477a:	4808      	ldr	r0, [pc, #32]	; (801479c <pbuf_header_impl+0xb0>)
 801477c:	f008 ff34 	bl	801d5e8 <iprintf>
    return 0;
 8014780:	4620      	mov	r0, r4
}
 8014782:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8014784:	2001      	movs	r0, #1
}
 8014786:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8014788:	8963      	ldrh	r3, [r4, #10]
 801478a:	4283      	cmp	r3, r0
 801478c:	d3fa      	bcc.n	8014784 <pbuf_header_impl+0x98>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801478e:	1a71      	subs	r1, r6, r1
 8014790:	6061      	str	r1, [r4, #4]
 8014792:	e7c3      	b.n	801471c <pbuf_header_impl+0x30>
 8014794:	08038464 	.word	0x08038464
 8014798:	08038494 	.word	0x08038494
 801479c:	08021804 	.word	0x08021804
 80147a0:	080384b4 	.word	0x080384b4
 80147a4:	08039364 	.word	0x08039364

080147a8 <pbuf_pool_is_empty.part.1>:
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80147a8:	2200      	movs	r2, #0
 80147aa:	4805      	ldr	r0, [pc, #20]	; (80147c0 <pbuf_pool_is_empty.part.1+0x18>)
pbuf_pool_is_empty(void)
 80147ac:	b508      	push	{r3, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80147ae:	4611      	mov	r1, r2
 80147b0:	f7fd fb0c 	bl	8011dcc <tcpip_callback_with_block>
 80147b4:	b110      	cbz	r0, 80147bc <pbuf_pool_is_empty.part.1+0x14>
 80147b6:	4b03      	ldr	r3, [pc, #12]	; (80147c4 <pbuf_pool_is_empty.part.1+0x1c>)
 80147b8:	2200      	movs	r2, #0
 80147ba:	701a      	strb	r2, [r3, #0]
}
 80147bc:	bd08      	pop	{r3, pc}
 80147be:	bf00      	nop
 80147c0:	080146c1 	.word	0x080146c1
 80147c4:	20033a78 	.word	0x20033a78

080147c8 <pbuf_alloced_custom>:
{
 80147c8:	b570      	push	{r4, r5, r6, lr}
 80147ca:	9c04      	ldr	r4, [sp, #16]
 80147cc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  switch (l) {
 80147d0:	2804      	cmp	r0, #4
 80147d2:	d81e      	bhi.n	8014812 <pbuf_alloced_custom+0x4a>
 80147d4:	e8df f000 	tbb	[pc, r0]
 80147d8:	0319151b 	.word	0x0319151b
 80147dc:	03          	.byte	0x03
 80147dd:	00          	.byte	0x00
    break;
 80147de:	2000      	movs	r0, #0
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80147e0:	180e      	adds	r6, r1, r0
 80147e2:	42ae      	cmp	r6, r5
 80147e4:	d81e      	bhi.n	8014824 <pbuf_alloced_custom+0x5c>
  p->pbuf.next = NULL;
 80147e6:	2500      	movs	r5, #0
 80147e8:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80147ea:	b164      	cbz	r4, 8014806 <pbuf_alloced_custom+0x3e>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80147ec:	4404      	add	r4, r0
 80147ee:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80147f0:	2502      	movs	r5, #2
  p->pbuf.ref = 1;
 80147f2:	2401      	movs	r4, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 80147f4:	8119      	strh	r1, [r3, #8]
  return &p->pbuf;
 80147f6:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 80147f8:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 80147fa:	731a      	strb	r2, [r3, #12]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80147fc:	735d      	strb	r5, [r3, #13]
  p->pbuf.ref = 1;
 80147fe:	81dc      	strh	r4, [r3, #14]
}
 8014800:	bd70      	pop	{r4, r5, r6, pc}
  switch (l) {
 8014802:	2024      	movs	r0, #36	; 0x24
 8014804:	e7ec      	b.n	80147e0 <pbuf_alloced_custom+0x18>
    p->pbuf.payload = NULL;
 8014806:	605c      	str	r4, [r3, #4]
 8014808:	e7f2      	b.n	80147f0 <pbuf_alloced_custom+0x28>
  switch (l) {
 801480a:	2010      	movs	r0, #16
 801480c:	e7e8      	b.n	80147e0 <pbuf_alloced_custom+0x18>
 801480e:	2038      	movs	r0, #56	; 0x38
 8014810:	e7e6      	b.n	80147e0 <pbuf_alloced_custom+0x18>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8014812:	4b05      	ldr	r3, [pc, #20]	; (8014828 <pbuf_alloced_custom+0x60>)
 8014814:	f240 12c5 	movw	r2, #453	; 0x1c5
 8014818:	4904      	ldr	r1, [pc, #16]	; (801482c <pbuf_alloced_custom+0x64>)
 801481a:	4805      	ldr	r0, [pc, #20]	; (8014830 <pbuf_alloced_custom+0x68>)
 801481c:	f008 fee4 	bl	801d5e8 <iprintf>
    return NULL;
 8014820:	2000      	movs	r0, #0
}
 8014822:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8014824:	2000      	movs	r0, #0
}
 8014826:	bd70      	pop	{r4, r5, r6, pc}
 8014828:	08038464 	.word	0x08038464
 801482c:	08038290 	.word	0x08038290
 8014830:	08021804 	.word	0x08021804

08014834 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8014834:	2200      	movs	r2, #0
 8014836:	f7ff bf59 	b.w	80146ec <pbuf_header_impl>
 801483a:	bf00      	nop

0801483c <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 801483c:	2201      	movs	r2, #1
 801483e:	f7ff bf55 	b.w	80146ec <pbuf_header_impl>
 8014842:	bf00      	nop

08014844 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014848:	4604      	mov	r4, r0
 801484a:	2800      	cmp	r0, #0
 801484c:	d051      	beq.n	80148f2 <pbuf_free+0xae>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801484e:	7b03      	ldrb	r3, [r0, #12]
 8014850:	2b03      	cmp	r3, #3
 8014852:	d846      	bhi.n	80148e2 <pbuf_free+0x9e>
{
 8014854:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014856:	4f2c      	ldr	r7, [pc, #176]	; (8014908 <pbuf_free+0xc4>)
 8014858:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801491c <pbuf_free+0xd8>
 801485c:	4e2b      	ldr	r6, [pc, #172]	; (801490c <pbuf_free+0xc8>)
 801485e:	e008      	b.n	8014872 <pbuf_free+0x2e>
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014860:	6923      	ldr	r3, [r4, #16]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d034      	beq.n	80148d0 <pbuf_free+0x8c>
        pc->custom_free_function(p);
 8014866:	4620      	mov	r0, r4
 8014868:	4798      	blx	r3
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
 801486a:	3501      	adds	r5, #1
  while (p != NULL) {
 801486c:	464c      	mov	r4, r9
      count++;
 801486e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8014870:	b1c4      	cbz	r4, 80148a4 <pbuf_free+0x60>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014872:	89e3      	ldrh	r3, [r4, #14]
 8014874:	b1cb      	cbz	r3, 80148aa <pbuf_free+0x66>
    ref = --(p->ref);
 8014876:	3b01      	subs	r3, #1
 8014878:	b29b      	uxth	r3, r3
 801487a:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 801487c:	b993      	cbnz	r3, 80148a4 <pbuf_free+0x60>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801487e:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8014880:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014884:	079b      	lsls	r3, r3, #30
 8014886:	d4eb      	bmi.n	8014860 <pbuf_free+0x1c>
      type = p->type;
 8014888:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 801488a:	2b03      	cmp	r3, #3
 801488c:	d01b      	beq.n	80148c6 <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801488e:	3b01      	subs	r3, #1
 8014890:	2b01      	cmp	r3, #1
 8014892:	d913      	bls.n	80148bc <pbuf_free+0x78>
          mem_free(p);
 8014894:	4620      	mov	r0, r4
      count++;
 8014896:	3501      	adds	r5, #1
  while (p != NULL) {
 8014898:	464c      	mov	r4, r9
          mem_free(p);
 801489a:	f7ff fa11 	bl	8013cc0 <mem_free>
      count++;
 801489e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80148a0:	2c00      	cmp	r4, #0
 80148a2:	d1e6      	bne.n	8014872 <pbuf_free+0x2e>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80148a4:	4628      	mov	r0, r5
 80148a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80148aa:	463b      	mov	r3, r7
 80148ac:	f240 22eb 	movw	r2, #747	; 0x2eb
 80148b0:	4641      	mov	r1, r8
 80148b2:	4630      	mov	r0, r6
 80148b4:	f008 fe98 	bl	801d5e8 <iprintf>
 80148b8:	89e3      	ldrh	r3, [r4, #14]
 80148ba:	e7dc      	b.n	8014876 <pbuf_free+0x32>
          memp_free(MEMP_PBUF, p);
 80148bc:	4621      	mov	r1, r4
 80148be:	200e      	movs	r0, #14
 80148c0:	f7ff fdc8 	bl	8014454 <memp_free>
 80148c4:	e7d1      	b.n	801486a <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
 80148c6:	4621      	mov	r1, r4
 80148c8:	200f      	movs	r0, #15
 80148ca:	f7ff fdc3 	bl	8014454 <memp_free>
 80148ce:	e7cc      	b.n	801486a <pbuf_free+0x26>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80148d0:	463b      	mov	r3, r7
 80148d2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80148d6:	490e      	ldr	r1, [pc, #56]	; (8014910 <pbuf_free+0xcc>)
 80148d8:	4630      	mov	r0, r6
 80148da:	f008 fe85 	bl	801d5e8 <iprintf>
 80148de:	6923      	ldr	r3, [r4, #16]
 80148e0:	e7c1      	b.n	8014866 <pbuf_free+0x22>
  LWIP_ASSERT("pbuf_free: sane type",
 80148e2:	4b09      	ldr	r3, [pc, #36]	; (8014908 <pbuf_free+0xc4>)
 80148e4:	f240 22de 	movw	r2, #734	; 0x2de
 80148e8:	490a      	ldr	r1, [pc, #40]	; (8014914 <pbuf_free+0xd0>)
 80148ea:	4808      	ldr	r0, [pc, #32]	; (801490c <pbuf_free+0xc8>)
 80148ec:	f008 fe7c 	bl	801d5e8 <iprintf>
 80148f0:	e7b0      	b.n	8014854 <pbuf_free+0x10>
    return 0;
 80148f2:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 80148f4:	4b04      	ldr	r3, [pc, #16]	; (8014908 <pbuf_free+0xc4>)
 80148f6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80148fa:	4907      	ldr	r1, [pc, #28]	; (8014918 <pbuf_free+0xd4>)
 80148fc:	4803      	ldr	r0, [pc, #12]	; (801490c <pbuf_free+0xc8>)
 80148fe:	f008 fe73 	bl	801d5e8 <iprintf>
}
 8014902:	4628      	mov	r0, r5
 8014904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014908:	08038464 	.word	0x08038464
 801490c:	08021804 	.word	0x08021804
 8014910:	08038440 	.word	0x08038440
 8014914:	08038410 	.word	0x08038410
 8014918:	08039364 	.word	0x08039364
 801491c:	08038428 	.word	0x08038428

08014920 <pbuf_alloc>:
{
 8014920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	4688      	mov	r8, r1
 8014926:	4617      	mov	r7, r2
  switch (layer) {
 8014928:	2804      	cmp	r0, #4
 801492a:	f200 80d2 	bhi.w	8014ad2 <pbuf_alloc+0x1b2>
 801492e:	e8df f000 	tbb	[pc, r0]
 8014932:	a8b7      	.short	0xa8b7
 8014934:	03b5      	.short	0x03b5
 8014936:	03          	.byte	0x03
 8014937:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8014938:	2400      	movs	r4, #0
  switch (type) {
 801493a:	2f03      	cmp	r7, #3
 801493c:	f200 80a3 	bhi.w	8014a86 <pbuf_alloc+0x166>
 8014940:	e8df f007 	tbb	[pc, r7]
 8014944:	026a6a82 	.word	0x026a6a82
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014948:	f240 121d 	movw	r2, #285	; 0x11d
 801494c:	4973      	ldr	r1, [pc, #460]	; (8014b1c <pbuf_alloc+0x1fc>)
 801494e:	200f      	movs	r0, #15
 8014950:	f7ff fd5c 	bl	801440c <memp_malloc_fn>
    if (p == NULL) {
 8014954:	4605      	mov	r5, r0
 8014956:	2800      	cmp	r0, #0
 8014958:	f000 80a4 	beq.w	8014aa4 <pbuf_alloc+0x184>
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801495c:	1ce6      	adds	r6, r4, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801495e:	4404      	add	r4, r0
    p->type = type;
 8014960:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014962:	f500 7918 	add.w	r9, r0, #608	; 0x260
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014966:	f026 0603 	bic.w	r6, r6, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801496a:	3413      	adds	r4, #19
    p->type = type;
 801496c:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 801496e:	2300      	movs	r3, #0
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014970:	f5c6 7614 	rsb	r6, r6, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8014974:	f024 0403 	bic.w	r4, r4, #3
    p->tot_len = length;
 8014978:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801497c:	4546      	cmp	r6, r8
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801497e:	6044      	str	r4, [r0, #4]
    p->next = NULL;
 8014980:	6003      	str	r3, [r0, #0]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014982:	bf28      	it	cs
 8014984:	4646      	movcs	r6, r8
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014986:	4434      	add	r4, r6
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8014988:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801498a:	45a1      	cmp	r9, r4
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801498c:	8146      	strh	r6, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801498e:	f0c0 80bb 	bcc.w	8014b08 <pbuf_alloc+0x1e8>
    rem_len = length - p->len;
 8014992:	eba8 0606 	sub.w	r6, r8, r6
    p->ref = 1;
 8014996:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8014998:	2e00      	cmp	r6, #0
    p->ref = 1;
 801499a:	81eb      	strh	r3, [r5, #14]
    while (rem_len > 0) {
 801499c:	dd4d      	ble.n	8014a3a <pbuf_alloc+0x11a>
 801499e:	46a8      	mov	r8, r5
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80149a0:	4f5e      	ldr	r7, [pc, #376]	; (8014b1c <pbuf_alloc+0x1fc>)
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80149a2:	f8df b194 	ldr.w	fp, [pc, #404]	; 8014b38 <pbuf_alloc+0x218>
 80149a6:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8014b24 <pbuf_alloc+0x204>
 80149aa:	e018      	b.n	80149de <pbuf_alloc+0xbe>
      q->tot_len = (u16_t)rem_len;
 80149ac:	b2b2      	uxth	r2, r6
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80149ae:	f104 0310 	add.w	r3, r4, #16
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80149b2:	f5b2 7f14 	cmp.w	r2, #592	; 0x250
 80149b6:	4611      	mov	r1, r2
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80149b8:	6063      	str	r3, [r4, #4]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80149ba:	bf28      	it	cs
 80149bc:	f44f 7114 	movcs.w	r1, #592	; 0x250
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80149c0:	079b      	lsls	r3, r3, #30
      q->tot_len = (u16_t)rem_len;
 80149c2:	8122      	strh	r2, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80149c4:	8161      	strh	r1, [r4, #10]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80149c6:	d17c      	bne.n	8014ac2 <pbuf_alloc+0x1a2>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80149c8:	896a      	ldrh	r2, [r5, #10]
 80149ca:	686b      	ldr	r3, [r5, #4]
 80149cc:	4413      	add	r3, r2
 80149ce:	4599      	cmp	r9, r3
 80149d0:	d36f      	bcc.n	8014ab2 <pbuf_alloc+0x192>
      rem_len -= q->len;
 80149d2:	8962      	ldrh	r2, [r4, #10]
      q->ref = 1;
 80149d4:	2301      	movs	r3, #1
      rem_len -= q->len;
 80149d6:	1ab6      	subs	r6, r6, r2
      q->ref = 1;
 80149d8:	81e3      	strh	r3, [r4, #14]
    while (rem_len > 0) {
 80149da:	2e00      	cmp	r6, #0
 80149dc:	dd2d      	ble.n	8014a3a <pbuf_alloc+0x11a>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80149de:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80149e2:	4639      	mov	r1, r7
 80149e4:	200f      	movs	r0, #15
 80149e6:	f7ff fd11 	bl	801440c <memp_malloc_fn>
      q->flags = 0;
 80149ea:	2300      	movs	r3, #0
      if (q == NULL) {
 80149ec:	4604      	mov	r4, r0
      q->type = type;
 80149ee:	2103      	movs	r1, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80149f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
      if (q == NULL) {
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d077      	beq.n	8014ae8 <pbuf_alloc+0x1c8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80149f8:	4296      	cmp	r6, r2
      q->type = type;
 80149fa:	7301      	strb	r1, [r0, #12]
      q->flags = 0;
 80149fc:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 80149fe:	6003      	str	r3, [r0, #0]
      r->next = q;
 8014a00:	f8c8 0000 	str.w	r0, [r8]
 8014a04:	4680      	mov	r8, r0
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8014a06:	d1d1      	bne.n	80149ac <pbuf_alloc+0x8c>
 8014a08:	463b      	mov	r3, r7
 8014a0a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8014a0e:	4659      	mov	r1, fp
 8014a10:	4650      	mov	r0, sl
 8014a12:	f008 fde9 	bl	801d5e8 <iprintf>
 8014a16:	e7c9      	b.n	80149ac <pbuf_alloc+0x8c>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014a18:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014a1c:	493f      	ldr	r1, [pc, #252]	; (8014b1c <pbuf_alloc+0x1fc>)
 8014a1e:	200e      	movs	r0, #14
 8014a20:	f7ff fcf4 	bl	801440c <memp_malloc_fn>
    if (p == NULL) {
 8014a24:	4605      	mov	r5, r0
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d041      	beq.n	8014aae <pbuf_alloc+0x18e>
    p->payload = NULL;
 8014a2a:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8014a2c:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014a30:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->type = type;
 8014a34:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8014a36:	e9c0 3300 	strd	r3, r3, [r0]
  p->ref = 1;
 8014a3a:	2201      	movs	r2, #1
  p->flags = 0;
 8014a3c:	2300      	movs	r3, #0
  p->ref = 1;
 8014a3e:	81ea      	strh	r2, [r5, #14]
  p->flags = 0;
 8014a40:	736b      	strb	r3, [r5, #13]
}
 8014a42:	4628      	mov	r0, r5
 8014a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8014a48:	f104 0013 	add.w	r0, r4, #19
 8014a4c:	f108 0303 	add.w	r3, r8, #3
 8014a50:	f020 0003 	bic.w	r0, r0, #3
 8014a54:	f023 0303 	bic.w	r3, r3, #3
 8014a58:	4418      	add	r0, r3
 8014a5a:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8014a5c:	4298      	cmp	r0, r3
 8014a5e:	d326      	bcc.n	8014aae <pbuf_alloc+0x18e>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8014a60:	f7ff fab8 	bl	8013fd4 <mem_malloc>
    if (p == NULL) {
 8014a64:	4605      	mov	r5, r0
 8014a66:	b310      	cbz	r0, 8014aae <pbuf_alloc+0x18e>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014a68:	4404      	add	r4, r0
    p->next = NULL;
 8014a6a:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8014a6c:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014a70:	3413      	adds	r4, #19
    p->len = p->tot_len = length;
 8014a72:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
 8014a76:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014a78:	f024 0403 	bic.w	r4, r4, #3
    p->type = type;
 8014a7c:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014a7e:	6044      	str	r4, [r0, #4]
 8014a80:	e7db      	b.n	8014a3a <pbuf_alloc+0x11a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8014a82:	2422      	movs	r4, #34	; 0x22
 8014a84:	e759      	b.n	801493a <pbuf_alloc+0x1a>
    return NULL;
 8014a86:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014a88:	4b24      	ldr	r3, [pc, #144]	; (8014b1c <pbuf_alloc+0x1fc>)
 8014a8a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8014a8e:	4924      	ldr	r1, [pc, #144]	; (8014b20 <pbuf_alloc+0x200>)
 8014a90:	4824      	ldr	r0, [pc, #144]	; (8014b24 <pbuf_alloc+0x204>)
 8014a92:	f008 fda9 	bl	801d5e8 <iprintf>
}
 8014a96:	4628      	mov	r0, r5
 8014a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8014a9c:	240e      	movs	r4, #14
 8014a9e:	e74c      	b.n	801493a <pbuf_alloc+0x1a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8014aa0:	2436      	movs	r4, #54	; 0x36
 8014aa2:	e74a      	b.n	801493a <pbuf_alloc+0x1a>
  queued = pbuf_free_ooseq_pending;
 8014aa4:	4b20      	ldr	r3, [pc, #128]	; (8014b28 <pbuf_alloc+0x208>)
  pbuf_free_ooseq_pending = 1;
 8014aa6:	2101      	movs	r1, #1
  queued = pbuf_free_ooseq_pending;
 8014aa8:	781a      	ldrb	r2, [r3, #0]
  pbuf_free_ooseq_pending = 1;
 8014aaa:	7019      	strb	r1, [r3, #0]
  if (!queued) {
 8014aac:	b34a      	cbz	r2, 8014b02 <pbuf_alloc+0x1e2>
      return NULL;
 8014aae:	2500      	movs	r5, #0
 8014ab0:	e7c7      	b.n	8014a42 <pbuf_alloc+0x122>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014ab2:	463b      	mov	r3, r7
 8014ab4:	f240 1255 	movw	r2, #341	; 0x155
 8014ab8:	491c      	ldr	r1, [pc, #112]	; (8014b2c <pbuf_alloc+0x20c>)
 8014aba:	4650      	mov	r0, sl
 8014abc:	f008 fd94 	bl	801d5e8 <iprintf>
 8014ac0:	e787      	b.n	80149d2 <pbuf_alloc+0xb2>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014ac2:	463b      	mov	r3, r7
 8014ac4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8014ac8:	4919      	ldr	r1, [pc, #100]	; (8014b30 <pbuf_alloc+0x210>)
 8014aca:	4650      	mov	r0, sl
 8014acc:	f008 fd8c 	bl	801d5e8 <iprintf>
 8014ad0:	e77a      	b.n	80149c8 <pbuf_alloc+0xa8>
    return NULL;
 8014ad2:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8014ad4:	4b11      	ldr	r3, [pc, #68]	; (8014b1c <pbuf_alloc+0x1fc>)
 8014ad6:	f44f 728b 	mov.w	r2, #278	; 0x116
 8014ada:	4916      	ldr	r1, [pc, #88]	; (8014b34 <pbuf_alloc+0x214>)
 8014adc:	4811      	ldr	r0, [pc, #68]	; (8014b24 <pbuf_alloc+0x204>)
 8014ade:	f008 fd83 	bl	801d5e8 <iprintf>
}
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  queued = pbuf_free_ooseq_pending;
 8014ae8:	4b0f      	ldr	r3, [pc, #60]	; (8014b28 <pbuf_alloc+0x208>)
  pbuf_free_ooseq_pending = 1;
 8014aea:	2101      	movs	r1, #1
  queued = pbuf_free_ooseq_pending;
 8014aec:	781a      	ldrb	r2, [r3, #0]
  pbuf_free_ooseq_pending = 1;
 8014aee:	7019      	strb	r1, [r3, #0]
  if (!queued) {
 8014af0:	b122      	cbz	r2, 8014afc <pbuf_alloc+0x1dc>
        pbuf_free(p);
 8014af2:	4628      	mov	r0, r5
        return NULL;
 8014af4:	2500      	movs	r5, #0
        pbuf_free(p);
 8014af6:	f7ff fea5 	bl	8014844 <pbuf_free>
        return NULL;
 8014afa:	e7a2      	b.n	8014a42 <pbuf_alloc+0x122>
 8014afc:	f7ff fe54 	bl	80147a8 <pbuf_pool_is_empty.part.1>
 8014b00:	e7f7      	b.n	8014af2 <pbuf_alloc+0x1d2>
 8014b02:	f7ff fe51 	bl	80147a8 <pbuf_pool_is_empty.part.1>
 8014b06:	e79c      	b.n	8014a42 <pbuf_alloc+0x122>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8014b08:	4b04      	ldr	r3, [pc, #16]	; (8014b1c <pbuf_alloc+0x1fc>)
 8014b0a:	f44f 7298 	mov.w	r2, #304	; 0x130
 8014b0e:	4907      	ldr	r1, [pc, #28]	; (8014b2c <pbuf_alloc+0x20c>)
 8014b10:	4804      	ldr	r0, [pc, #16]	; (8014b24 <pbuf_alloc+0x204>)
 8014b12:	f008 fd69 	bl	801d5e8 <iprintf>
 8014b16:	896e      	ldrh	r6, [r5, #10]
 8014b18:	e73b      	b.n	8014992 <pbuf_alloc+0x72>
 8014b1a:	bf00      	nop
 8014b1c:	08038464 	.word	0x08038464
 8014b20:	08038274 	.word	0x08038274
 8014b24:	08021804 	.word	0x08021804
 8014b28:	20033a78 	.word	0x20033a78
 8014b2c:	080381fc 	.word	0x080381fc
 8014b30:	08038244 	.word	0x08038244
 8014b34:	080381e0 	.word	0x080381e0
 8014b38:	08038230 	.word	0x08038230

08014b3c <pbuf_realloc>:
{
 8014b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b40:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014b42:	4604      	mov	r4, r0
 8014b44:	2800      	cmp	r0, #0
 8014b46:	d050      	beq.n	8014bea <pbuf_realloc+0xae>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8014b48:	7b23      	ldrb	r3, [r4, #12]
 8014b4a:	2b03      	cmp	r3, #3
 8014b4c:	d857      	bhi.n	8014bfe <pbuf_realloc+0xc2>
  if (new_len >= p->tot_len) {
 8014b4e:	8926      	ldrh	r6, [r4, #8]
 8014b50:	42ae      	cmp	r6, r5
 8014b52:	d92a      	bls.n	8014baa <pbuf_realloc+0x6e>
  grow = new_len - p->tot_len;
 8014b54:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014b56:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8014c18 <pbuf_realloc+0xdc>
 8014b5a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8014c28 <pbuf_realloc+0xec>
 8014b5e:	4f2c      	ldr	r7, [pc, #176]	; (8014c10 <pbuf_realloc+0xd4>)
  while (rem_len > q->len) {
 8014b60:	8963      	ldrh	r3, [r4, #10]
 8014b62:	42ab      	cmp	r3, r5
 8014b64:	d215      	bcs.n	8014b92 <pbuf_realloc+0x56>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014b66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    rem_len -= q->len;
 8014b6a:	1aeb      	subs	r3, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014b6c:	4296      	cmp	r6, r2
    rem_len -= q->len;
 8014b6e:	b29d      	uxth	r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014b70:	dc1d      	bgt.n	8014bae <pbuf_realloc+0x72>
    q->tot_len += (u16_t)grow;
 8014b72:	8923      	ldrh	r3, [r4, #8]
 8014b74:	4433      	add	r3, r6
 8014b76:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8014b78:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014b7a:	2c00      	cmp	r4, #0
 8014b7c:	d1f0      	bne.n	8014b60 <pbuf_realloc+0x24>
 8014b7e:	4643      	mov	r3, r8
 8014b80:	f240 220f 	movw	r2, #527	; 0x20f
 8014b84:	4923      	ldr	r1, [pc, #140]	; (8014c14 <pbuf_realloc+0xd8>)
 8014b86:	4638      	mov	r0, r7
 8014b88:	f008 fd2e 	bl	801d5e8 <iprintf>
  while (rem_len > q->len) {
 8014b8c:	8963      	ldrh	r3, [r4, #10]
 8014b8e:	42ab      	cmp	r3, r5
 8014b90:	d3e9      	bcc.n	8014b66 <pbuf_realloc+0x2a>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8014b92:	7b22      	ldrb	r2, [r4, #12]
 8014b94:	b90a      	cbnz	r2, 8014b9a <pbuf_realloc+0x5e>
 8014b96:	42ab      	cmp	r3, r5
 8014b98:	d111      	bne.n	8014bbe <pbuf_realloc+0x82>
  if (q->next != NULL) {
 8014b9a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8014b9c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8014b9e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8014ba0:	b108      	cbz	r0, 8014ba6 <pbuf_realloc+0x6a>
    pbuf_free(q->next);
 8014ba2:	f7ff fe4f 	bl	8014844 <pbuf_free>
  q->next = NULL;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	6023      	str	r3, [r4, #0]
}
 8014baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8014bae:	4643      	mov	r3, r8
 8014bb0:	f240 220b 	movw	r2, #523	; 0x20b
 8014bb4:	4649      	mov	r1, r9
 8014bb6:	4638      	mov	r0, r7
 8014bb8:	f008 fd16 	bl	801d5e8 <iprintf>
 8014bbc:	e7d9      	b.n	8014b72 <pbuf_realloc+0x36>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014bbe:	7b63      	ldrb	r3, [r4, #13]
 8014bc0:	079b      	lsls	r3, r3, #30
 8014bc2:	d4ea      	bmi.n	8014b9a <pbuf_realloc+0x5e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8014bc4:	6863      	ldr	r3, [r4, #4]
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	1b1c      	subs	r4, r3, r4
 8014bca:	1929      	adds	r1, r5, r4
 8014bcc:	b289      	uxth	r1, r1
 8014bce:	f7ff f951 	bl	8013e74 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	d1e0      	bne.n	8014b9a <pbuf_realloc+0x5e>
 8014bd8:	4b0f      	ldr	r3, [pc, #60]	; (8014c18 <pbuf_realloc+0xdc>)
 8014bda:	f240 221d 	movw	r2, #541	; 0x21d
 8014bde:	490f      	ldr	r1, [pc, #60]	; (8014c1c <pbuf_realloc+0xe0>)
 8014be0:	480b      	ldr	r0, [pc, #44]	; (8014c10 <pbuf_realloc+0xd4>)
 8014be2:	f008 fd01 	bl	801d5e8 <iprintf>
  q->len = rem_len;
 8014be6:	8164      	strh	r4, [r4, #10]
 8014be8:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014bea:	4b0b      	ldr	r3, [pc, #44]	; (8014c18 <pbuf_realloc+0xdc>)
 8014bec:	f240 12f3 	movw	r2, #499	; 0x1f3
 8014bf0:	490b      	ldr	r1, [pc, #44]	; (8014c20 <pbuf_realloc+0xe4>)
 8014bf2:	4807      	ldr	r0, [pc, #28]	; (8014c10 <pbuf_realloc+0xd4>)
 8014bf4:	f008 fcf8 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8014bf8:	7b23      	ldrb	r3, [r4, #12]
 8014bfa:	2b03      	cmp	r3, #3
 8014bfc:	d9a7      	bls.n	8014b4e <pbuf_realloc+0x12>
 8014bfe:	4b06      	ldr	r3, [pc, #24]	; (8014c18 <pbuf_realloc+0xdc>)
 8014c00:	f240 12f7 	movw	r2, #503	; 0x1f7
 8014c04:	4907      	ldr	r1, [pc, #28]	; (8014c24 <pbuf_realloc+0xe8>)
 8014c06:	4802      	ldr	r0, [pc, #8]	; (8014c10 <pbuf_realloc+0xd4>)
 8014c08:	f008 fcee 	bl	801d5e8 <iprintf>
 8014c0c:	e79f      	b.n	8014b4e <pbuf_realloc+0x12>
 8014c0e:	bf00      	nop
 8014c10:	08021804 	.word	0x08021804
 8014c14:	0803850c 	.word	0x0803850c
 8014c18:	08038464 	.word	0x08038464
 8014c1c:	08038524 	.word	0x08038524
 8014c20:	080384c4 	.word	0x080384c4
 8014c24:	080384dc 	.word	0x080384dc
 8014c28:	080384f8 	.word	0x080384f8

08014c2c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8014c2c:	b138      	cbz	r0, 8014c3e <pbuf_clen+0x12>
  len = 0;
 8014c2e:	2300      	movs	r3, #0
    ++len;
 8014c30:	3301      	adds	r3, #1
    p = p->next;
 8014c32:	6800      	ldr	r0, [r0, #0]
    ++len;
 8014c34:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d1fa      	bne.n	8014c30 <pbuf_clen+0x4>
  }
  return len;
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	4770      	bx	lr
  len = 0;
 8014c3e:	4603      	mov	r3, r0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	4770      	bx	lr

08014c44 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8014c44:	b120      	cbz	r0, 8014c50 <pbuf_ref+0xc>
    SYS_ARCH_INC(p->ref, 1);
 8014c46:	89c3      	ldrh	r3, [r0, #14]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014c4e:	b103      	cbz	r3, 8014c52 <pbuf_ref+0xe>
  }
}
 8014c50:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014c52:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <pbuf_ref+0x1c>)
 8014c54:	f240 3239 	movw	r2, #825	; 0x339
 8014c58:	4902      	ldr	r1, [pc, #8]	; (8014c64 <pbuf_ref+0x20>)
 8014c5a:	4803      	ldr	r0, [pc, #12]	; (8014c68 <pbuf_ref+0x24>)
 8014c5c:	f008 bcc4 	b.w	801d5e8 <iprintf>
 8014c60:	08038464 	.word	0x08038464
 8014c64:	08038540 	.word	0x08038540
 8014c68:	08021804 	.word	0x08021804

08014c6c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014c6c:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014c6e:	b338      	cbz	r0, 8014cc0 <pbuf_cat+0x54>
 8014c70:	460d      	mov	r5, r1
 8014c72:	b329      	cbz	r1, 8014cc0 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014c74:	6804      	ldr	r4, [r0, #0]
 8014c76:	b90c      	cbnz	r4, 8014c7c <pbuf_cat+0x10>
 8014c78:	e02b      	b.n	8014cd2 <pbuf_cat+0x66>
 8014c7a:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8014c7c:	8903      	ldrh	r3, [r0, #8]
 8014c7e:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014c80:	6822      	ldr	r2, [r4, #0]
    p->tot_len += t->tot_len;
 8014c82:	440b      	add	r3, r1
 8014c84:	8103      	strh	r3, [r0, #8]
 8014c86:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	d1f6      	bne.n	8014c7a <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014c8c:	8963      	ldrh	r3, [r4, #10]
 8014c8e:	8922      	ldrh	r2, [r4, #8]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d010      	beq.n	8014cb6 <pbuf_cat+0x4a>
 8014c94:	4b12      	ldr	r3, [pc, #72]	; (8014ce0 <pbuf_cat+0x74>)
 8014c96:	f240 3255 	movw	r2, #853	; 0x355
 8014c9a:	4912      	ldr	r1, [pc, #72]	; (8014ce4 <pbuf_cat+0x78>)
 8014c9c:	4812      	ldr	r0, [pc, #72]	; (8014ce8 <pbuf_cat+0x7c>)
 8014c9e:	f008 fca3 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014ca2:	6823      	ldr	r3, [r4, #0]
 8014ca4:	b133      	cbz	r3, 8014cb4 <pbuf_cat+0x48>
 8014ca6:	4b0e      	ldr	r3, [pc, #56]	; (8014ce0 <pbuf_cat+0x74>)
 8014ca8:	f240 3256 	movw	r2, #854	; 0x356
 8014cac:	490f      	ldr	r1, [pc, #60]	; (8014cec <pbuf_cat+0x80>)
 8014cae:	480e      	ldr	r0, [pc, #56]	; (8014ce8 <pbuf_cat+0x7c>)
 8014cb0:	f008 fc9a 	bl	801d5e8 <iprintf>
 8014cb4:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8014cb6:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014cb8:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8014cba:	4413      	add	r3, r2
 8014cbc:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014cc0:	4b07      	ldr	r3, [pc, #28]	; (8014ce0 <pbuf_cat+0x74>)
 8014cc2:	f240 324d 	movw	r2, #845	; 0x34d
 8014cc6:	490a      	ldr	r1, [pc, #40]	; (8014cf0 <pbuf_cat+0x84>)
 8014cc8:	4807      	ldr	r0, [pc, #28]	; (8014ce8 <pbuf_cat+0x7c>)
}
 8014cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014cce:	f008 bc8b 	b.w	801d5e8 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 8014cd2:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014cd4:	8963      	ldrh	r3, [r4, #10]
 8014cd6:	8922      	ldrh	r2, [r4, #8]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d1db      	bne.n	8014c94 <pbuf_cat+0x28>
 8014cdc:	e7eb      	b.n	8014cb6 <pbuf_cat+0x4a>
 8014cde:	bf00      	nop
 8014ce0:	08038464 	.word	0x08038464
 8014ce4:	080382ec 	.word	0x080382ec
 8014ce8:	08021804 	.word	0x08021804
 8014cec:	0803831c 	.word	0x0803831c
 8014cf0:	080382b4 	.word	0x080382b4

08014cf4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014cf4:	b510      	push	{r4, lr}
 8014cf6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8014cf8:	f7ff ffb8 	bl	8014c6c <pbuf_cat>
  if (p != NULL) {
 8014cfc:	b124      	cbz	r4, 8014d08 <pbuf_chain+0x14>
    SYS_ARCH_INC(p->ref, 1);
 8014cfe:	89e3      	ldrh	r3, [r4, #14]
 8014d00:	3301      	adds	r3, #1
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	81e3      	strh	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d06:	b103      	cbz	r3, 8014d0a <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014d08:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d0a:	4b04      	ldr	r3, [pc, #16]	; (8014d1c <pbuf_chain+0x28>)
 8014d0c:	f240 3239 	movw	r2, #825	; 0x339
 8014d10:	4903      	ldr	r1, [pc, #12]	; (8014d20 <pbuf_chain+0x2c>)
 8014d12:	4804      	ldr	r0, [pc, #16]	; (8014d24 <pbuf_chain+0x30>)
}
 8014d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d18:	f008 bc66 	b.w	801d5e8 <iprintf>
 8014d1c:	08038464 	.word	0x08038464
 8014d20:	08038540 	.word	0x08038540
 8014d24:	08021804 	.word	0x08021804

08014d28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f000 809d 	beq.w	8014e6c <pbuf_copy+0x144>
 8014d32:	fab1 f781 	clz	r7, r1
 8014d36:	4688      	mov	r8, r1
 8014d38:	097f      	lsrs	r7, r7, #5
 8014d3a:	2f00      	cmp	r7, #0
 8014d3c:	f040 8096 	bne.w	8014e6c <pbuf_copy+0x144>
 8014d40:	8902      	ldrh	r2, [r0, #8]
 8014d42:	4606      	mov	r6, r0
 8014d44:	890b      	ldrh	r3, [r1, #8]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	f0c0 8090 	bcc.w	8014e6c <pbuf_copy+0x144>
 8014d4c:	8942      	ldrh	r2, [r0, #10]
  u16_t offset_to=0, offset_from=0, len;
 8014d4e:	463d      	mov	r5, r7
 8014d50:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d52:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8014e80 <pbuf_copy+0x158>
 8014d56:	f8df b140 	ldr.w	fp, [pc, #320]	; 8014e98 <pbuf_copy+0x170>
 8014d5a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8014e88 <pbuf_copy+0x160>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014d5e:	1be3      	subs	r3, r4, r7
 8014d60:	1b52      	subs	r2, r2, r5
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014d62:	6870      	ldr	r0, [r6, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014d64:	429a      	cmp	r2, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014d66:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014d6a:	4428      	add	r0, r5
      len = p_from->len - offset_from;
 8014d6c:	bfa8      	it	ge
 8014d6e:	b29c      	uxthge	r4, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014d70:	4439      	add	r1, r7
      len = p_to->len - offset_to;
 8014d72:	bfb8      	it	lt
 8014d74:	b294      	uxthlt	r4, r2
    offset_to += len;
 8014d76:	4425      	add	r5, r4
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8014d78:	4622      	mov	r2, r4
 8014d7a:	f008 f8e6 	bl	801cf4a <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d7e:	8973      	ldrh	r3, [r6, #10]
    offset_to += len;
 8014d80:	b2ad      	uxth	r5, r5
    offset_from += len;
 8014d82:	4427      	add	r7, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d84:	42ab      	cmp	r3, r5
    offset_from += len;
 8014d86:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d88:	d349      	bcc.n	8014e1e <pbuf_copy+0xf6>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014d8a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014d8e:	429f      	cmp	r7, r3
 8014d90:	d83b      	bhi.n	8014e0a <pbuf_copy+0xe2>
    if (offset_from >= p_from->len) {
 8014d92:	429f      	cmp	r7, r3
 8014d94:	d302      	bcc.n	8014d9c <pbuf_copy+0x74>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8014d96:	f8d8 8000 	ldr.w	r8, [r8]
      offset_from = 0;
 8014d9a:	2700      	movs	r7, #0
    }
    if (offset_to == p_to->len) {
 8014d9c:	8973      	ldrh	r3, [r6, #10]
 8014d9e:	42ab      	cmp	r3, r5
 8014da0:	d015      	beq.n	8014dce <pbuf_copy+0xa6>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014da2:	f1b8 0f00 	cmp.w	r8, #0
 8014da6:	d044      	beq.n	8014e32 <pbuf_copy+0x10a>
 8014da8:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8014dac:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014db0:	429c      	cmp	r4, r3
 8014db2:	d01b      	beq.n	8014dec <pbuf_copy+0xc4>
 8014db4:	8972      	ldrh	r2, [r6, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014db6:	8933      	ldrh	r3, [r6, #8]
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d1d0      	bne.n	8014d5e <pbuf_copy+0x36>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014dbc:	6833      	ldr	r3, [r6, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d13e      	bne.n	8014e40 <pbuf_copy+0x118>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014dc2:	f1b8 0f00 	cmp.w	r8, #0
 8014dc6:	d1ca      	bne.n	8014d5e <pbuf_copy+0x36>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014dc8:	2000      	movs	r0, #0
}
 8014dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8014dce:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8014dd0:	b916      	cbnz	r6, 8014dd8 <pbuf_copy+0xb0>
 8014dd2:	f1b8 0f00 	cmp.w	r8, #0
 8014dd6:	d13e      	bne.n	8014e56 <pbuf_copy+0x12e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014dd8:	f1b8 0f00 	cmp.w	r8, #0
 8014ddc:	d027      	beq.n	8014e2e <pbuf_copy+0x106>
 8014dde:	f8b8 400a 	ldrh.w	r4, [r8, #10]
      offset_to = 0;
 8014de2:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014de4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014de8:	429c      	cmp	r4, r3
 8014dea:	d1e3      	bne.n	8014db4 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014dec:	f8d8 3000 	ldr.w	r3, [r8]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d0df      	beq.n	8014db4 <pbuf_copy+0x8c>
 8014df4:	4b22      	ldr	r3, [pc, #136]	; (8014e80 <pbuf_copy+0x158>)
 8014df6:	f240 32de 	movw	r2, #990	; 0x3de
 8014dfa:	4922      	ldr	r1, [pc, #136]	; (8014e84 <pbuf_copy+0x15c>)
 8014dfc:	4822      	ldr	r0, [pc, #136]	; (8014e88 <pbuf_copy+0x160>)
 8014dfe:	f008 fbf3 	bl	801d5e8 <iprintf>
 8014e02:	f06f 0005 	mvn.w	r0, #5
}
 8014e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014e0a:	4653      	mov	r3, sl
 8014e0c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8014e10:	491e      	ldr	r1, [pc, #120]	; (8014e8c <pbuf_copy+0x164>)
 8014e12:	4648      	mov	r0, r9
 8014e14:	f008 fbe8 	bl	801d5e8 <iprintf>
 8014e18:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014e1c:	e7b9      	b.n	8014d92 <pbuf_copy+0x6a>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e1e:	4653      	mov	r3, sl
 8014e20:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014e24:	4659      	mov	r1, fp
 8014e26:	4648      	mov	r0, r9
 8014e28:	f008 fbde 	bl	801d5e8 <iprintf>
 8014e2c:	e7ad      	b.n	8014d8a <pbuf_copy+0x62>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014e2e:	2e00      	cmp	r6, #0
 8014e30:	d0ca      	beq.n	8014dc8 <pbuf_copy+0xa0>
 8014e32:	8932      	ldrh	r2, [r6, #8]
 8014e34:	8973      	ldrh	r3, [r6, #10]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d1c6      	bne.n	8014dc8 <pbuf_copy+0xa0>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014e3a:	6830      	ldr	r0, [r6, #0]
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d0c4      	beq.n	8014dca <pbuf_copy+0xa2>
 8014e40:	4b0f      	ldr	r3, [pc, #60]	; (8014e80 <pbuf_copy+0x158>)
 8014e42:	f240 32e3 	movw	r2, #995	; 0x3e3
 8014e46:	490f      	ldr	r1, [pc, #60]	; (8014e84 <pbuf_copy+0x15c>)
 8014e48:	480f      	ldr	r0, [pc, #60]	; (8014e88 <pbuf_copy+0x160>)
 8014e4a:	f008 fbcd 	bl	801d5e8 <iprintf>
 8014e4e:	f06f 0005 	mvn.w	r0, #5
}
 8014e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8014e56:	4b0a      	ldr	r3, [pc, #40]	; (8014e80 <pbuf_copy+0x158>)
 8014e58:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014e5c:	490c      	ldr	r1, [pc, #48]	; (8014e90 <pbuf_copy+0x168>)
 8014e5e:	480a      	ldr	r0, [pc, #40]	; (8014e88 <pbuf_copy+0x160>)
 8014e60:	f008 fbc2 	bl	801d5e8 <iprintf>
 8014e64:	f06f 000f 	mvn.w	r0, #15
}
 8014e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e6c:	4b04      	ldr	r3, [pc, #16]	; (8014e80 <pbuf_copy+0x158>)
 8014e6e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014e72:	4908      	ldr	r1, [pc, #32]	; (8014e94 <pbuf_copy+0x16c>)
 8014e74:	4804      	ldr	r0, [pc, #16]	; (8014e88 <pbuf_copy+0x160>)
 8014e76:	f008 fbb7 	bl	801d5e8 <iprintf>
 8014e7a:	f06f 000f 	mvn.w	r0, #15
 8014e7e:	e7a4      	b.n	8014dca <pbuf_copy+0xa2>
 8014e80:	08038464 	.word	0x08038464
 8014e84:	080383a0 	.word	0x080383a0
 8014e88:	08021804 	.word	0x08021804
 8014e8c:	08038374 	.word	0x08038374
 8014e90:	08038390 	.word	0x08038390
 8014e94:	0803832c 	.word	0x0803832c
 8014e98:	0803835c 	.word	0x0803835c

08014e9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	b368      	cbz	r0, 8014f00 <pbuf_copy_partial+0x64>
 8014ea4:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014ea6:	2900      	cmp	r1, #0
 8014ea8:	d035      	beq.n	8014f16 <pbuf_copy_partial+0x7a>
 8014eaa:	4690      	mov	r8, r2
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014eac:	2a00      	cmp	r2, #0
 8014eae:	d03d      	beq.n	8014f2c <pbuf_copy_partial+0x90>
  left = 0;
 8014eb0:	2600      	movs	r6, #0
 8014eb2:	e009      	b.n	8014ec8 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 8014eb4:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8014eb6:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 8014eba:	d809      	bhi.n	8014ed0 <pbuf_copy_partial+0x34>
      offset -= p->len;
 8014ebc:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ebe:	682d      	ldr	r5, [r5, #0]
 8014ec0:	f1b8 0f00 	cmp.w	r8, #0
 8014ec4:	d019      	beq.n	8014efa <pbuf_copy_partial+0x5e>
 8014ec6:	b1c5      	cbz	r5, 8014efa <pbuf_copy_partial+0x5e>
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014ec8:	19b8      	adds	r0, r7, r6
 8014eca:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1f1      	bne.n	8014eb4 <pbuf_copy_partial+0x18>
      buf_copy_len = p->len - offset;
 8014ed0:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014ed2:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = p->len - offset;
 8014ed4:	b2a4      	uxth	r4, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014ed6:	4419      	add	r1, r3
 8014ed8:	4544      	cmp	r4, r8
 8014eda:	bf28      	it	cs
 8014edc:	4644      	movcs	r4, r8
 8014ede:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 8014ee0:	4426      	add	r6, r4
      left += buf_copy_len;
      len -= buf_copy_len;
 8014ee2:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014ee6:	f008 f830 	bl	801cf4a <memcpy>
      copied_total += buf_copy_len;
 8014eea:	b2b6      	uxth	r6, r6
      offset = 0;
 8014eec:	2300      	movs	r3, #0
      len -= buf_copy_len;
 8014eee:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ef2:	682d      	ldr	r5, [r5, #0]
 8014ef4:	f1b8 0f00 	cmp.w	r8, #0
 8014ef8:	d1e5      	bne.n	8014ec6 <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 8014efa:	4630      	mov	r0, r6
 8014efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014f00:	4606      	mov	r6, r0
 8014f02:	4b0c      	ldr	r3, [pc, #48]	; (8014f34 <pbuf_copy_partial+0x98>)
 8014f04:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8014f08:	490b      	ldr	r1, [pc, #44]	; (8014f38 <pbuf_copy_partial+0x9c>)
 8014f0a:	480c      	ldr	r0, [pc, #48]	; (8014f3c <pbuf_copy_partial+0xa0>)
 8014f0c:	f008 fb6c 	bl	801d5e8 <iprintf>
}
 8014f10:	4630      	mov	r0, r6
 8014f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014f16:	463e      	mov	r6, r7
 8014f18:	4b06      	ldr	r3, [pc, #24]	; (8014f34 <pbuf_copy_partial+0x98>)
 8014f1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014f1e:	4908      	ldr	r1, [pc, #32]	; (8014f40 <pbuf_copy_partial+0xa4>)
 8014f20:	4806      	ldr	r0, [pc, #24]	; (8014f3c <pbuf_copy_partial+0xa0>)
 8014f22:	f008 fb61 	bl	801d5e8 <iprintf>
}
 8014f26:	4630      	mov	r0, r6
 8014f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  left = 0;
 8014f2c:	4616      	mov	r6, r2
}
 8014f2e:	4630      	mov	r0, r6
 8014f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f34:	08038464 	.word	0x08038464
 8014f38:	080383cc 	.word	0x080383cc
 8014f3c:	08021804 	.word	0x08021804
 8014f40:	080383ec 	.word	0x080383ec

08014f44 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8014f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d04c      	beq.n	8014fe6 <pbuf_take+0xa2>
 8014f4c:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014f4e:	2900      	cmp	r1, #0
 8014f50:	d03f      	beq.n	8014fd2 <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8014f52:	8903      	ldrh	r3, [r0, #8]
 8014f54:	4690      	mov	r8, r2
 8014f56:	4605      	mov	r5, r0
 8014f58:	4293      	cmp	r3, r2
 8014f5a:	d330      	bcc.n	8014fbe <pbuf_take+0x7a>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014f5c:	b312      	cbz	r2, 8014fa4 <pbuf_take+0x60>
 8014f5e:	4614      	mov	r4, r2
  u16_t copied_total = 0;
 8014f60:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8014f62:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8015000 <pbuf_take+0xbc>
 8014f66:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015014 <pbuf_take+0xd0>
 8014f6a:	896b      	ldrh	r3, [r5, #10]
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8014f6c:	19b9      	adds	r1, r7, r6
 8014f6e:	6868      	ldr	r0, [r5, #4]
 8014f70:	42a3      	cmp	r3, r4
 8014f72:	bf28      	it	cs
 8014f74:	4623      	movcs	r3, r4
 8014f76:	4699      	mov	r9, r3
 8014f78:	461a      	mov	r2, r3
 8014f7a:	f007 ffe6 	bl	801cf4a <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014f7e:	682d      	ldr	r5, [r5, #0]
    total_copy_len -= buf_copy_len;
 8014f80:	eba4 0409 	sub.w	r4, r4, r9
    copied_total += buf_copy_len;
 8014f84:	444e      	add	r6, r9
    total_copy_len -= buf_copy_len;
 8014f86:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 8014f88:	b2b6      	uxth	r6, r6
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014f8a:	b14c      	cbz	r4, 8014fa0 <pbuf_take+0x5c>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8014f8c:	2d00      	cmp	r5, #0
 8014f8e:	d1ec      	bne.n	8014f6a <pbuf_take+0x26>
 8014f90:	465b      	mov	r3, fp
 8014f92:	f240 428e 	movw	r2, #1166	; 0x48e
 8014f96:	4651      	mov	r1, sl
 8014f98:	4818      	ldr	r0, [pc, #96]	; (8014ffc <pbuf_take+0xb8>)
 8014f9a:	f008 fb25 	bl	801d5e8 <iprintf>
 8014f9e:	e7e4      	b.n	8014f6a <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8014fa0:	45b0      	cmp	r8, r6
 8014fa2:	d102      	bne.n	8014faa <pbuf_take+0x66>
 8014fa4:	2000      	movs	r0, #0
  return ERR_OK;
}
 8014fa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8014faa:	4b15      	ldr	r3, [pc, #84]	; (8015000 <pbuf_take+0xbc>)
 8014fac:	f240 4299 	movw	r2, #1177	; 0x499
 8014fb0:	4914      	ldr	r1, [pc, #80]	; (8015004 <pbuf_take+0xc0>)
 8014fb2:	4812      	ldr	r0, [pc, #72]	; (8014ffc <pbuf_take+0xb8>)
 8014fb4:	f008 fb18 	bl	801d5e8 <iprintf>
 8014fb8:	4620      	mov	r0, r4
}
 8014fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8014fbe:	4b10      	ldr	r3, [pc, #64]	; (8015000 <pbuf_take+0xbc>)
 8014fc0:	f240 4286 	movw	r2, #1158	; 0x486
 8014fc4:	4910      	ldr	r1, [pc, #64]	; (8015008 <pbuf_take+0xc4>)
 8014fc6:	480d      	ldr	r0, [pc, #52]	; (8014ffc <pbuf_take+0xb8>)
 8014fc8:	f008 fb0e 	bl	801d5e8 <iprintf>
 8014fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd0:	e7e9      	b.n	8014fa6 <pbuf_take+0x62>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014fd2:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <pbuf_take+0xbc>)
 8014fd4:	f240 4285 	movw	r2, #1157	; 0x485
 8014fd8:	490c      	ldr	r1, [pc, #48]	; (801500c <pbuf_take+0xc8>)
 8014fda:	4808      	ldr	r0, [pc, #32]	; (8014ffc <pbuf_take+0xb8>)
 8014fdc:	f008 fb04 	bl	801d5e8 <iprintf>
 8014fe0:	f06f 000f 	mvn.w	r0, #15
 8014fe4:	e7df      	b.n	8014fa6 <pbuf_take+0x62>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8014fe6:	4b06      	ldr	r3, [pc, #24]	; (8015000 <pbuf_take+0xbc>)
 8014fe8:	f240 4284 	movw	r2, #1156	; 0x484
 8014fec:	4908      	ldr	r1, [pc, #32]	; (8015010 <pbuf_take+0xcc>)
 8014fee:	4803      	ldr	r0, [pc, #12]	; (8014ffc <pbuf_take+0xb8>)
 8014ff0:	f008 fafa 	bl	801d5e8 <iprintf>
 8014ff4:	f06f 000f 	mvn.w	r0, #15
 8014ff8:	e7d5      	b.n	8014fa6 <pbuf_take+0x62>
 8014ffa:	bf00      	nop
 8014ffc:	08021804 	.word	0x08021804
 8015000:	08038464 	.word	0x08038464
 8015004:	080385c0 	.word	0x080385c0
 8015008:	08038588 	.word	0x08038588
 801500c:	0803856c 	.word	0x0803856c
 8015010:	08038554 	.word	0x08038554
 8015014:	080385a8 	.word	0x080385a8

08015018 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8015018:	b390      	cbz	r0, 8015080 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801501a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801501e:	4617      	mov	r7, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8015020:	8942      	ldrh	r2, [r0, #10]
 8015022:	460e      	mov	r6, r1
 8015024:	4604      	mov	r4, r0
 8015026:	4293      	cmp	r3, r2
 8015028:	d203      	bcs.n	8015032 <pbuf_take_at+0x1a>
 801502a:	e00b      	b.n	8015044 <pbuf_take_at+0x2c>
 801502c:	8962      	ldrh	r2, [r4, #10]
 801502e:	429a      	cmp	r2, r3
 8015030:	d808      	bhi.n	8015044 <pbuf_take_at+0x2c>
    offset_left -= q->len;
 8015032:	1a9b      	subs	r3, r3, r2
    q = q->next;
 8015034:	6824      	ldr	r4, [r4, #0]
    offset_left -= q->len;
 8015036:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8015038:	2c00      	cmp	r4, #0
 801503a:	d1f7      	bne.n	801502c <pbuf_take_at+0x14>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 801503c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8015044:	8921      	ldrh	r1, [r4, #8]
 8015046:	19da      	adds	r2, r3, r7
 8015048:	4291      	cmp	r1, r2
 801504a:	dbf7      	blt.n	801503c <pbuf_take_at+0x24>
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 801504c:	8965      	ldrh	r5, [r4, #10]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 801504e:	4631      	mov	r1, r6
 8015050:	6860      	ldr	r0, [r4, #4]
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8015052:	1aed      	subs	r5, r5, r3
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8015054:	4418      	add	r0, r3
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8015056:	42bd      	cmp	r5, r7
 8015058:	bfa8      	it	ge
 801505a:	463d      	movge	r5, r7
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 801505c:	fa1f f885 	uxth.w	r8, r5
 8015060:	4642      	mov	r2, r8
 8015062:	f007 ff72 	bl	801cf4a <memcpy>
    remaining_len -= first_copy_len;
 8015066:	1b7a      	subs	r2, r7, r5
 8015068:	b292      	uxth	r2, r2
    if (remaining_len > 0) {
 801506a:	b912      	cbnz	r2, 8015072 <pbuf_take_at+0x5a>
    return ERR_OK;
 801506c:	4610      	mov	r0, r2
}
 801506e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8015072:	eb06 0108 	add.w	r1, r6, r8
 8015076:	6820      	ldr	r0, [r4, #0]
}
 8015078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801507c:	f7ff bf62 	b.w	8014f44 <pbuf_take>
  return ERR_MEM;
 8015080:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop

08015088 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8015088:	b158      	cbz	r0, 80150a2 <pbuf_try_get_at+0x1a>
 801508a:	8943      	ldrh	r3, [r0, #10]
 801508c:	4299      	cmp	r1, r3
 801508e:	d203      	bcs.n	8015098 <pbuf_try_get_at+0x10>
 8015090:	e00a      	b.n	80150a8 <pbuf_try_get_at+0x20>
 8015092:	8943      	ldrh	r3, [r0, #10]
 8015094:	428b      	cmp	r3, r1
 8015096:	d807      	bhi.n	80150a8 <pbuf_try_get_at+0x20>
    offset_left -= q->len;
 8015098:	1ac9      	subs	r1, r1, r3
    q = q->next;
 801509a:	6800      	ldr	r0, [r0, #0]
    offset_left -= q->len;
 801509c:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 801509e:	2800      	cmp	r0, #0
 80150a0:	d1f7      	bne.n	8015092 <pbuf_try_get_at+0xa>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t*)q->payload)[q_idx];
  }
  return -1;
 80150a2:	f04f 30ff 	mov.w	r0, #4294967295
 80150a6:	4770      	bx	lr
    return ((u8_t*)q->payload)[q_idx];
 80150a8:	6843      	ldr	r3, [r0, #4]
 80150aa:	5c58      	ldrb	r0, [r3, r1]
}
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop

080150b0 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80150b0:	b158      	cbz	r0, 80150ca <pbuf_put_at+0x1a>
 80150b2:	8943      	ldrh	r3, [r0, #10]
 80150b4:	4299      	cmp	r1, r3
 80150b6:	d203      	bcs.n	80150c0 <pbuf_put_at+0x10>
 80150b8:	e008      	b.n	80150cc <pbuf_put_at+0x1c>
 80150ba:	8943      	ldrh	r3, [r0, #10]
 80150bc:	428b      	cmp	r3, r1
 80150be:	d805      	bhi.n	80150cc <pbuf_put_at+0x1c>
    offset_left -= q->len;
 80150c0:	1ac9      	subs	r1, r1, r3
    q = q->next;
 80150c2:	6800      	ldr	r0, [r0, #0]
    offset_left -= q->len;
 80150c4:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 80150c6:	2800      	cmp	r0, #0
 80150c8:	d1f7      	bne.n	80150ba <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t*)q->payload)[q_idx] = data;
  }
}
 80150ca:	4770      	bx	lr
    ((u8_t*)q->payload)[q_idx] = data;
 80150cc:	6843      	ldr	r3, [r0, #4]
 80150ce:	545a      	strb	r2, [r3, r1]
}
 80150d0:	4770      	bx	lr
 80150d2:	bf00      	nop

080150d4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80150d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80150d8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801518c <raw_input+0xb8>
{
 80150dc:	4607      	mov	r7, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 80150de:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8015190 <raw_input+0xbc>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80150e2:	f8d8 1000 	ldr.w	r1, [r8]
 80150e6:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80150ea:	f006 fdeb 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80150ee:	687b      	ldr	r3, [r7, #4]
  pcb = raw_pcbs;
 80150f0:	f8db 4000 	ldr.w	r4, [fp]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80150f4:	7a5e      	ldrb	r6, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 80150f6:	2c00      	cmp	r4, #0
 80150f8:	d032      	beq.n	8015160 <raw_input+0x8c>
 80150fa:	4682      	mov	sl, r0
  prev = NULL;
 80150fc:	2500      	movs	r5, #0
 80150fe:	46b9      	mov	r9, r7
 8015100:	e003      	b.n	801510a <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8015102:	68e3      	ldr	r3, [r4, #12]
 8015104:	4625      	mov	r5, r4
  while ((eaten == 0) && (pcb != NULL)) {
 8015106:	b35b      	cbz	r3, 8015160 <raw_input+0x8c>
 8015108:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
 801510a:	7c23      	ldrb	r3, [r4, #16]
 801510c:	42b3      	cmp	r3, r6
 801510e:	d1f8      	bne.n	8015102 <raw_input+0x2e>
 8015110:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8015112:	f1ba 0f00 	cmp.w	sl, #0
 8015116:	d019      	beq.n	801514c <raw_input+0x78>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8015118:	2b00      	cmp	r3, #0
 801511a:	d1f2      	bne.n	8015102 <raw_input+0x2e>
      if (pcb->recv != NULL) {
 801511c:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8015120:	f1bc 0f00 	cmp.w	ip, #0
 8015124:	d0ed      	beq.n	8015102 <raw_input+0x2e>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8015126:	4b15      	ldr	r3, [pc, #84]	; (801517c <raw_input+0xa8>)
 8015128:	464a      	mov	r2, r9
 801512a:	4621      	mov	r1, r4
 801512c:	69a0      	ldr	r0, [r4, #24]
        void* old_payload = p->payload;
 801512e:	f8d9 7004 	ldr.w	r7, [r9, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8015132:	47e0      	blx	ip
        if (eaten != 0) {
 8015134:	b1b8      	cbz	r0, 8015166 <raw_input+0x92>
          if (prev != NULL) {
 8015136:	b135      	cbz	r5, 8015146 <raw_input+0x72>
            prev->next = pcb->next;
 8015138:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801513a:	f8db 3000 	ldr.w	r3, [fp]
            prev->next = pcb->next;
 801513e:	60ea      	str	r2, [r5, #12]
            raw_pcbs = pcb;
 8015140:	f8cb 4000 	str.w	r4, [fp]
            pcb->next = raw_pcbs;
 8015144:	60e3      	str	r3, [r4, #12]
  prev = NULL;
 8015146:	2001      	movs	r0, #1
  }
  return eaten;
}
 8015148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) ||
 801514c:	2b00      	cmp	r3, #0
 801514e:	d0e5      	beq.n	801511c <raw_input+0x48>
 8015150:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8015154:	429a      	cmp	r2, r3
 8015156:	d0e1      	beq.n	801511c <raw_input+0x48>
    pcb = pcb->next;
 8015158:	68e3      	ldr	r3, [r4, #12]
 801515a:	4625      	mov	r5, r4
  while ((eaten == 0) && (pcb != NULL)) {
 801515c:	2b00      	cmp	r3, #0
 801515e:	d1d3      	bne.n	8015108 <raw_input+0x34>
  u8_t eaten = 0;
 8015160:	2000      	movs	r0, #0
}
 8015162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8015166:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801516a:	42bb      	cmp	r3, r7
 801516c:	d0c9      	beq.n	8015102 <raw_input+0x2e>
 801516e:	4b04      	ldr	r3, [pc, #16]	; (8015180 <raw_input+0xac>)
 8015170:	22b6      	movs	r2, #182	; 0xb6
 8015172:	4904      	ldr	r1, [pc, #16]	; (8015184 <raw_input+0xb0>)
 8015174:	4804      	ldr	r0, [pc, #16]	; (8015188 <raw_input+0xb4>)
 8015176:	f008 fa37 	bl	801d5e8 <iprintf>
 801517a:	e7c2      	b.n	8015102 <raw_input+0x2e>
 801517c:	20025a3c 	.word	0x20025a3c
 8015180:	080385d8 	.word	0x080385d8
 8015184:	08038608 	.word	0x08038608
 8015188:	08021804 	.word	0x08021804
 801518c:	20025a2c 	.word	0x20025a2c
 8015190:	2002145c 	.word	0x2002145c

08015194 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015194:	b1a8      	cbz	r0, 80151c2 <raw_netif_ip_addr_changed+0x2e>
 8015196:	6802      	ldr	r2, [r0, #0]
 8015198:	b199      	cbz	r1, 80151c2 <raw_netif_ip_addr_changed+0x2e>
 801519a:	b192      	cbz	r2, 80151c2 <raw_netif_ip_addr_changed+0x2e>
 801519c:	680b      	ldr	r3, [r1, #0]
 801519e:	b183      	cbz	r3, 80151c2 <raw_netif_ip_addr_changed+0x2e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80151a0:	4b08      	ldr	r3, [pc, #32]	; (80151c4 <raw_netif_ip_addr_changed+0x30>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	b16b      	cbz	r3, 80151c2 <raw_netif_ip_addr_changed+0x2e>
{
 80151a6:	b410      	push	{r4}
 80151a8:	e000      	b.n	80151ac <raw_netif_ip_addr_changed+0x18>
 80151aa:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80151ac:	681c      	ldr	r4, [r3, #0]
 80151ae:	4294      	cmp	r4, r2
 80151b0:	d101      	bne.n	80151b6 <raw_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80151b2:	680a      	ldr	r2, [r1, #0]
 80151b4:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80151b6:	68db      	ldr	r3, [r3, #12]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d1f6      	bne.n	80151aa <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 80151bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151c0:	4770      	bx	lr
 80151c2:	4770      	bx	lr
 80151c4:	2002145c 	.word	0x2002145c

080151c8 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop

080151cc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80151cc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8015234 <tcp_new_port+0x68>
 80151d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80151d4:	b4f0      	push	{r4, r5, r6, r7}
 80151d6:	f8bc 0000 	ldrh.w	r0, [ip]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80151da:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80151de:	4f12      	ldr	r7, [pc, #72]	; (8015228 <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80151e0:	4d12      	ldr	r5, [pc, #72]	; (801522c <tcp_new_port+0x60>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80151e2:	42b0      	cmp	r0, r6
 80151e4:	d01c      	beq.n	8015220 <tcp_new_port+0x54>
 80151e6:	3001      	adds	r0, #1
 80151e8:	b280      	uxth	r0, r0
 80151ea:	4c11      	ldr	r4, [pc, #68]	; (8015230 <tcp_new_port+0x64>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80151ec:	462b      	mov	r3, r5
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	b913      	cbnz	r3, 80151f8 <tcp_new_port+0x2c>
 80151f2:	e00c      	b.n	801520e <tcp_new_port+0x42>
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	b153      	cbz	r3, 801520e <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 80151f8:	8ada      	ldrh	r2, [r3, #22]
 80151fa:	4282      	cmp	r2, r0
 80151fc:	d1fa      	bne.n	80151f4 <tcp_new_port+0x28>
 80151fe:	3901      	subs	r1, #1
 8015200:	b289      	uxth	r1, r1
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015202:	2900      	cmp	r1, #0
 8015204:	d1ed      	bne.n	80151e2 <tcp_new_port+0x16>
 8015206:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 801520a:	4608      	mov	r0, r1
 801520c:	e006      	b.n	801521c <tcp_new_port+0x50>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801520e:	42a7      	cmp	r7, r4
 8015210:	d002      	beq.n	8015218 <tcp_new_port+0x4c>
 8015212:	f854 3b04 	ldr.w	r3, [r4], #4
 8015216:	e7ea      	b.n	80151ee <tcp_new_port+0x22>
 8015218:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801521c:	bcf0      	pop	{r4, r5, r6, r7}
 801521e:	4770      	bx	lr
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015220:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8015224:	e7e1      	b.n	80151ea <tcp_new_port+0x1e>
 8015226:	bf00      	nop
 8015228:	080387a4 	.word	0x080387a4
 801522c:	20033b90 	.word	0x20033b90
 8015230:	08038798 	.word	0x08038798
 8015234:	20000444 	.word	0x20000444

08015238 <tcp_close_shutdown_fin>:
{
 8015238:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801523a:	4604      	mov	r4, r0
 801523c:	b310      	cbz	r0, 8015284 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801523e:	7d23      	ldrb	r3, [r4, #20]
 8015240:	2b04      	cmp	r3, #4
 8015242:	d005      	beq.n	8015250 <tcp_close_shutdown_fin+0x18>
 8015244:	2b07      	cmp	r3, #7
 8015246:	d00e      	beq.n	8015266 <tcp_close_shutdown_fin+0x2e>
 8015248:	2b03      	cmp	r3, #3
 801524a:	d001      	beq.n	8015250 <tcp_close_shutdown_fin+0x18>
    return ERR_OK;
 801524c:	2000      	movs	r0, #0
}
 801524e:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8015250:	4620      	mov	r0, r4
 8015252:	f003 f9e3 	bl	801861c <tcp_send_fin>
    if (err == ERR_OK) {
 8015256:	b950      	cbnz	r0, 801526e <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8015258:	2305      	movs	r3, #5
 801525a:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801525c:	4620      	mov	r0, r4
 801525e:	f003 fa4f 	bl	8018700 <tcp_output>
 8015262:	2000      	movs	r0, #0
}
 8015264:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8015266:	4620      	mov	r0, r4
 8015268:	f003 f9d8 	bl	801861c <tcp_send_fin>
    if (err == ERR_OK) {
 801526c:	b138      	cbz	r0, 801527e <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801526e:	1c43      	adds	r3, r0, #1
 8015270:	d1ed      	bne.n	801524e <tcp_close_shutdown_fin+0x16>
    pcb->flags |= TF_CLOSEPEND;
 8015272:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_OK;
 8015274:	2000      	movs	r0, #0
    pcb->flags |= TF_CLOSEPEND;
 8015276:	f043 0308 	orr.w	r3, r3, #8
 801527a:	76a3      	strb	r3, [r4, #26]
}
 801527c:	bd10      	pop	{r4, pc}
      pcb->state = LAST_ACK;
 801527e:	2309      	movs	r3, #9
 8015280:	7523      	strb	r3, [r4, #20]
 8015282:	e7eb      	b.n	801525c <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015284:	4b03      	ldr	r3, [pc, #12]	; (8015294 <tcp_close_shutdown_fin+0x5c>)
 8015286:	f240 124d 	movw	r2, #333	; 0x14d
 801528a:	4903      	ldr	r1, [pc, #12]	; (8015298 <tcp_close_shutdown_fin+0x60>)
 801528c:	4803      	ldr	r0, [pc, #12]	; (801529c <tcp_close_shutdown_fin+0x64>)
 801528e:	f008 f9ab 	bl	801d5e8 <iprintf>
 8015292:	e7d4      	b.n	801523e <tcp_close_shutdown_fin+0x6>
 8015294:	080386dc 	.word	0x080386dc
 8015298:	0803870c 	.word	0x0803870c
 801529c:	08021804 	.word	0x08021804

080152a0 <tcp_init>:
}
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop

080152a4 <tcp_bind>:
{
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80152a6:	4d23      	ldr	r5, [pc, #140]	; (8015334 <tcp_bind+0x90>)
 80152a8:	2900      	cmp	r1, #0
 80152aa:	bf18      	it	ne
 80152ac:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80152ae:	2800      	cmp	r0, #0
 80152b0:	d032      	beq.n	8015318 <tcp_bind+0x74>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80152b2:	7d01      	ldrb	r1, [r0, #20]
 80152b4:	4606      	mov	r6, r0
 80152b6:	2900      	cmp	r1, #0
 80152b8:	d131      	bne.n	801531e <tcp_bind+0x7a>
  if (port == 0) {
 80152ba:	b312      	cbz	r2, 8015302 <tcp_bind+0x5e>
 80152bc:	4b1e      	ldr	r3, [pc, #120]	; (8015338 <tcp_bind+0x94>)
 80152be:	4f1f      	ldr	r7, [pc, #124]	; (801533c <tcp_bind+0x98>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	b913      	cbnz	r3, 80152ca <tcp_bind+0x26>
 80152c4:	e00e      	b.n	80152e4 <tcp_bind+0x40>
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	b163      	cbz	r3, 80152e4 <tcp_bind+0x40>
        if (cpcb->local_port == port) {
 80152ca:	8ad8      	ldrh	r0, [r3, #22]
 80152cc:	4290      	cmp	r0, r2
 80152ce:	d1fa      	bne.n	80152c6 <tcp_bind+0x22>
                (ip_addr_isany(&cpcb->local_ip) ||
 80152d0:	6818      	ldr	r0, [r3, #0]
 80152d2:	b120      	cbz	r0, 80152de <tcp_bind+0x3a>
                ip_addr_isany(ipaddr) ||
 80152d4:	682c      	ldr	r4, [r5, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80152d6:	42a0      	cmp	r0, r4
 80152d8:	d001      	beq.n	80152de <tcp_bind+0x3a>
 80152da:	2c00      	cmp	r4, #0
 80152dc:	d1f3      	bne.n	80152c6 <tcp_bind+0x22>
              return ERR_USE;
 80152de:	f06f 0007 	mvn.w	r0, #7
}
 80152e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 80152e4:	3101      	adds	r1, #1
 80152e6:	2904      	cmp	r1, #4
 80152e8:	d113      	bne.n	8015312 <tcp_bind+0x6e>
  if (!ip_addr_isany(ipaddr)) {
 80152ea:	682b      	ldr	r3, [r5, #0]
 80152ec:	b103      	cbz	r3, 80152f0 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80152ee:	6033      	str	r3, [r6, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80152f0:	4b13      	ldr	r3, [pc, #76]	; (8015340 <tcp_bind+0x9c>)
  pcb->local_port = port;
 80152f2:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	601e      	str	r6, [r3, #0]
 80152f8:	60f2      	str	r2, [r6, #12]
 80152fa:	f003 fdcf 	bl	8018e9c <tcp_timer_needed>
  return ERR_OK;
 80152fe:	2000      	movs	r0, #0
}
 8015300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8015302:	f7ff ff63 	bl	80151cc <tcp_new_port>
    if (port == 0) {
 8015306:	4602      	mov	r2, r0
 8015308:	2800      	cmp	r0, #0
 801530a:	d1ee      	bne.n	80152ea <tcp_bind+0x46>
      return ERR_BUF;
 801530c:	f06f 0001 	mvn.w	r0, #1
}
 8015310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015312:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 8015316:	e7d3      	b.n	80152c0 <tcp_bind+0x1c>
    return ERR_VAL;
 8015318:	f06f 0005 	mvn.w	r0, #5
}
 801531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <tcp_bind+0xa0>)
 8015320:	f44f 7211 	mov.w	r2, #580	; 0x244
 8015324:	4908      	ldr	r1, [pc, #32]	; (8015348 <tcp_bind+0xa4>)
 8015326:	4809      	ldr	r0, [pc, #36]	; (801534c <tcp_bind+0xa8>)
 8015328:	f008 f95e 	bl	801d5e8 <iprintf>
 801532c:	f06f 0005 	mvn.w	r0, #5
}
 8015330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015332:	bf00      	nop
 8015334:	08039ac4 	.word	0x08039ac4
 8015338:	20033b90 	.word	0x20033b90
 801533c:	08038794 	.word	0x08038794
 8015340:	20033b94 	.word	0x20033b94
 8015344:	080386dc 	.word	0x080386dc
 8015348:	08038698 	.word	0x08038698
 801534c:	08021804 	.word	0x08021804

08015350 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015350:	7d03      	ldrb	r3, [r0, #20]
{
 8015352:	b570      	push	{r4, r5, r6, lr}
 8015354:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015356:	2b00      	cmp	r3, #0
 8015358:	d146      	bne.n	80153e8 <tcp_listen_with_backlog_and_err+0x98>
 801535a:	4605      	mov	r5, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801535c:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 8015360:	4927      	ldr	r1, [pc, #156]	; (8015400 <tcp_listen_with_backlog_and_err+0xb0>)
 8015362:	2003      	movs	r0, #3
 8015364:	f7ff f852 	bl	801440c <memp_malloc_fn>
  if (lpcb == NULL) {
 8015368:	4604      	mov	r4, r0
 801536a:	2800      	cmp	r0, #0
 801536c:	d033      	beq.n	80153d6 <tcp_listen_with_backlog_and_err+0x86>
  lpcb->callback_arg = pcb->callback_arg;
 801536e:	6929      	ldr	r1, [r5, #16]
  lpcb->state = LISTEN;
 8015370:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8015372:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->callback_arg = pcb->callback_arg;
 8015374:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8015376:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8015378:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 801537a:	7d6a      	ldrb	r2, [r5, #21]
 801537c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801537e:	7a2a      	ldrb	r2, [r5, #8]
 8015380:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8015382:	7aaa      	ldrb	r2, [r5, #10]
 8015384:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8015386:	7a6a      	ldrb	r2, [r5, #9]
 8015388:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801538a:	682a      	ldr	r2, [r5, #0]
 801538c:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801538e:	b18b      	cbz	r3, 80153b4 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015390:	4b1c      	ldr	r3, [pc, #112]	; (8015404 <tcp_listen_with_backlog_and_err+0xb4>)
 8015392:	681a      	ldr	r2, [r3, #0]
 8015394:	42aa      	cmp	r2, r5
 8015396:	d009      	beq.n	80153ac <tcp_listen_with_backlog_and_err+0x5c>
 8015398:	b152      	cbz	r2, 80153b0 <tcp_listen_with_backlog_and_err+0x60>
 801539a:	68d3      	ldr	r3, [r2, #12]
 801539c:	429d      	cmp	r5, r3
 801539e:	d01d      	beq.n	80153dc <tcp_listen_with_backlog_and_err+0x8c>
 80153a0:	b133      	cbz	r3, 80153b0 <tcp_listen_with_backlog_and_err+0x60>
 80153a2:	68da      	ldr	r2, [r3, #12]
 80153a4:	42aa      	cmp	r2, r5
 80153a6:	d01a      	beq.n	80153de <tcp_listen_with_backlog_and_err+0x8e>
 80153a8:	4613      	mov	r3, r2
 80153aa:	e7f9      	b.n	80153a0 <tcp_listen_with_backlog_and_err+0x50>
 80153ac:	68ea      	ldr	r2, [r5, #12]
 80153ae:	601a      	str	r2, [r3, #0]
 80153b0:	2300      	movs	r3, #0
 80153b2:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 80153b4:	4629      	mov	r1, r5
 80153b6:	2002      	movs	r0, #2
 80153b8:	f7ff f84c 	bl	8014454 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153bc:	4b12      	ldr	r3, [pc, #72]	; (8015408 <tcp_listen_with_backlog_and_err+0xb8>)
  lpcb->accept = tcp_accept_null;
 80153be:	4913      	ldr	r1, [pc, #76]	; (801540c <tcp_listen_with_backlog_and_err+0xbc>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153c0:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 80153c2:	61a1      	str	r1, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153c4:	60e2      	str	r2, [r4, #12]
 80153c6:	601c      	str	r4, [r3, #0]
 80153c8:	f003 fd68 	bl	8018e9c <tcp_timer_needed>
  res = ERR_OK;
 80153cc:	2300      	movs	r3, #0
  if (err != NULL) {
 80153ce:	b106      	cbz	r6, 80153d2 <tcp_listen_with_backlog_and_err+0x82>
    *err = res;
 80153d0:	7033      	strb	r3, [r6, #0]
}
 80153d2:	4620      	mov	r0, r4
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 80153d6:	f04f 33ff 	mov.w	r3, #4294967295
 80153da:	e7f8      	b.n	80153ce <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80153dc:	4613      	mov	r3, r2
 80153de:	68ea      	ldr	r2, [r5, #12]
 80153e0:	60da      	str	r2, [r3, #12]
 80153e2:	2300      	movs	r3, #0
 80153e4:	60eb      	str	r3, [r5, #12]
 80153e6:	e7e5      	b.n	80153b4 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80153e8:	4b05      	ldr	r3, [pc, #20]	; (8015400 <tcp_listen_with_backlog_and_err+0xb0>)
 80153ea:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80153ee:	4908      	ldr	r1, [pc, #32]	; (8015410 <tcp_listen_with_backlog_and_err+0xc0>)
  struct tcp_pcb_listen *lpcb = NULL;
 80153f0:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80153f2:	4808      	ldr	r0, [pc, #32]	; (8015414 <tcp_listen_with_backlog_and_err+0xc4>)
 80153f4:	f008 f8f8 	bl	801d5e8 <iprintf>
 80153f8:	f06f 030e 	mvn.w	r3, #14
 80153fc:	e7e7      	b.n	80153ce <tcp_listen_with_backlog_and_err+0x7e>
 80153fe:	bf00      	nop
 8015400:	080386dc 	.word	0x080386dc
 8015404:	20033b94 	.word	0x20033b94
 8015408:	20033b90 	.word	0x20033b90
 801540c:	0801610d 	.word	0x0801610d
 8015410:	08038770 	.word	0x08038770
 8015414:	08021804 	.word	0x08021804

08015418 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8015418:	2200      	movs	r2, #0
 801541a:	f7ff bf99 	b.w	8015350 <tcp_listen_with_backlog_and_err>
 801541e:	bf00      	nop

08015420 <tcp_update_rcv_ann_wnd>:
{
 8015420:	b538      	push	{r3, r4, r5, lr}
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015422:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 8015424:	4603      	mov	r3, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015426:	8d04      	ldrh	r4, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015428:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801542a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801542c:	1a60      	subs	r0, r4, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801542e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015432:	4428      	add	r0, r5
 8015434:	bf94      	ite	ls
 8015436:	1a82      	subls	r2, r0, r2
 8015438:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 801543c:	2a00      	cmp	r2, #0
 801543e:	db01      	blt.n	8015444 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015440:	855c      	strh	r4, [r3, #42]	; 0x2a
}
 8015442:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015444:	1a6a      	subs	r2, r5, r1
 8015446:	2a00      	cmp	r2, #0
 8015448:	dd02      	ble.n	8015450 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 801544a:	2000      	movs	r0, #0
 801544c:	8558      	strh	r0, [r3, #42]	; 0x2a
}
 801544e:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015450:	1b4d      	subs	r5, r1, r5
 8015452:	461c      	mov	r4, r3
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015454:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8015458:	d202      	bcs.n	8015460 <tcp_update_rcv_ann_wnd+0x40>
    return 0;
 801545a:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801545c:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801545e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015460:	4b03      	ldr	r3, [pc, #12]	; (8015470 <tcp_update_rcv_ann_wnd+0x50>)
 8015462:	f44f 7242 	mov.w	r2, #776	; 0x308
 8015466:	4903      	ldr	r1, [pc, #12]	; (8015474 <tcp_update_rcv_ann_wnd+0x54>)
 8015468:	4803      	ldr	r0, [pc, #12]	; (8015478 <tcp_update_rcv_ann_wnd+0x58>)
 801546a:	f008 f8bd 	bl	801d5e8 <iprintf>
 801546e:	e7f4      	b.n	801545a <tcp_update_rcv_ann_wnd+0x3a>
 8015470:	080386dc 	.word	0x080386dc
 8015474:	08038a14 	.word	0x08038a14
 8015478:	08021804 	.word	0x08021804

0801547c <tcp_recved>:
{
 801547c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801547e:	7d03      	ldrb	r3, [r0, #20]
{
 8015480:	4605      	mov	r5, r0
 8015482:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015484:	2b01      	cmp	r3, #1
 8015486:	d023      	beq.n	80154d0 <tcp_recved+0x54>
  pcb->rcv_wnd += len;
 8015488:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 801548a:	4421      	add	r1, r4
 801548c:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801548e:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8015492:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8015494:	d80a      	bhi.n	80154ac <tcp_recved+0x30>
  } else if (pcb->rcv_wnd == 0) {
 8015496:	b131      	cbz	r1, 80154a6 <tcp_recved+0x2a>
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015498:	4628      	mov	r0, r5
 801549a:	f7ff ffc1 	bl	8015420 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801549e:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80154a2:	da0c      	bge.n	80154be <tcp_recved+0x42>
}
 80154a4:	bd38      	pop	{r3, r4, r5, pc}
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80154a6:	7d2b      	ldrb	r3, [r5, #20]
 80154a8:	2b07      	cmp	r3, #7
 80154aa:	d119      	bne.n	80154e0 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80154ac:	f44f 6306 	mov.w	r3, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80154b0:	4628      	mov	r0, r5
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80154b2:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80154b4:	f7ff ffb4 	bl	8015420 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80154b8:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80154bc:	dbf2      	blt.n	80154a4 <tcp_recved+0x28>
    tcp_ack_now(pcb);
 80154be:	7eab      	ldrb	r3, [r5, #26]
    tcp_output(pcb);
 80154c0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80154c2:	f043 0302 	orr.w	r3, r3, #2
 80154c6:	76ab      	strb	r3, [r5, #26]
}
 80154c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80154cc:	f003 b918 	b.w	8018700 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80154d0:	4b08      	ldr	r3, [pc, #32]	; (80154f4 <tcp_recved+0x78>)
 80154d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80154d6:	4908      	ldr	r1, [pc, #32]	; (80154f8 <tcp_recved+0x7c>)
 80154d8:	4808      	ldr	r0, [pc, #32]	; (80154fc <tcp_recved+0x80>)
 80154da:	f008 f885 	bl	801d5e8 <iprintf>
 80154de:	e7d3      	b.n	8015488 <tcp_recved+0xc>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80154e0:	2b09      	cmp	r3, #9
 80154e2:	d0e3      	beq.n	80154ac <tcp_recved+0x30>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80154e4:	4b03      	ldr	r3, [pc, #12]	; (80154f4 <tcp_recved+0x78>)
 80154e6:	f240 322d 	movw	r2, #813	; 0x32d
 80154ea:	4905      	ldr	r1, [pc, #20]	; (8015500 <tcp_recved+0x84>)
 80154ec:	4803      	ldr	r0, [pc, #12]	; (80154fc <tcp_recved+0x80>)
 80154ee:	f008 f87b 	bl	801d5e8 <iprintf>
 80154f2:	e7d1      	b.n	8015498 <tcp_recved+0x1c>
 80154f4:	080386dc 	.word	0x080386dc
 80154f8:	08038840 	.word	0x08038840
 80154fc:	08021804 	.word	0x08021804
 8015500:	08038868 	.word	0x08038868

08015504 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 8015504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8015506:	2800      	cmp	r0, #0
 8015508:	d07b      	beq.n	8015602 <tcp_connect+0xfe>
 801550a:	2900      	cmp	r1, #0
 801550c:	d079      	beq.n	8015602 <tcp_connect+0xfe>
 801550e:	461e      	mov	r6, r3
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015510:	7d03      	ldrb	r3, [r0, #20]
 8015512:	4604      	mov	r4, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d177      	bne.n	8015608 <tcp_connect+0x104>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015518:	6809      	ldr	r1, [r1, #0]
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 801551a:	6803      	ldr	r3, [r0, #0]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801551c:	6041      	str	r1, [r0, #4]
  pcb->remote_port = port;
 801551e:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 8015520:	2b00      	cmp	r3, #0
 8015522:	d05d      	beq.n	80155e0 <tcp_connect+0xdc>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  old_local_port = pcb->local_port;
 8015524:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8015526:	2f00      	cmp	r7, #0
 8015528:	d039      	beq.n	801559e <tcp_connect+0x9a>
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801552a:	493c      	ldr	r1, [pc, #240]	; (801561c <tcp_connect+0x118>)
  pcb->rcv_nxt = 0;
 801552c:	2300      	movs	r3, #0
  iss += tcp_ticks;       /* XXX */
 801552e:	483c      	ldr	r0, [pc, #240]	; (8015620 <tcp_connect+0x11c>)
 8015530:	680a      	ldr	r2, [r1, #0]
 8015532:	6800      	ldr	r0, [r0, #0]
  pcb->rcv_nxt = 0;
 8015534:	4d3b      	ldr	r5, [pc, #236]	; (8015624 <tcp_connect+0x120>)
  iss += tcp_ticks;       /* XXX */
 8015536:	4402      	add	r2, r0
  pcb->rcv_nxt = 0;
 8015538:	6263      	str	r3, [r4, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 801553a:	f44f 6006 	mov.w	r0, #2144	; 0x860
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801553e:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->rcv_nxt = 0;
 8015540:	62a5      	str	r5, [r4, #40]	; 0x28
  pcb->lastack = iss - 1;
 8015542:	1e53      	subs	r3, r2, #1
  pcb->mss = INITIAL_MSS;
 8015544:	f44f 7506 	mov.w	r5, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 8015548:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  pcb->snd_nxt = iss;
 801554c:	64e2      	str	r2, [r4, #76]	; 0x4c
{
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801554e:	1d20      	adds	r0, r4, #4
  pcb->lastack = iss - 1;
 8015550:	6463      	str	r3, [r4, #68]	; 0x44
  pcb->mss = INITIAL_MSS;
 8015552:	8665      	strh	r5, [r4, #50]	; 0x32
  iss += tcp_ticks;       /* XXX */
 8015554:	600a      	str	r2, [r1, #0]
  pcb->snd_lbb = iss - 1;
 8015556:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  outif = ip_route(src, dest);
 801555a:	f006 f98d 	bl	801b878 <ip4_route>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801555e:	b108      	cbz	r0, 8015564 <tcp_connect+0x60>
      return sendmss;
    }
    mtu = outif->mtu;
 8015560:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015562:	bb23      	cbnz	r3, 80155ae <tcp_connect+0xaa>
  pcb->cwnd = 1;
 8015564:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015566:	8665      	strh	r5, [r4, #50]	; 0x32
  pcb->connected = connected;
 8015568:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801556c:	2102      	movs	r1, #2
  pcb->cwnd = 1;
 801556e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8015572:	4620      	mov	r0, r4
 8015574:	f002 ff9e 	bl	80184b4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8015578:	4605      	mov	r5, r0
 801557a:	b970      	cbnz	r0, 801559a <tcp_connect+0x96>
    pcb->state = SYN_SENT;
 801557c:	2302      	movs	r3, #2
 801557e:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8015580:	b9f7      	cbnz	r7, 80155c0 <tcp_connect+0xbc>
    TCP_REG_ACTIVE(pcb);
 8015582:	4b29      	ldr	r3, [pc, #164]	; (8015628 <tcp_connect+0x124>)
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	601c      	str	r4, [r3, #0]
 8015588:	60e2      	str	r2, [r4, #12]
 801558a:	f003 fc87 	bl	8018e9c <tcp_timer_needed>
 801558e:	4b27      	ldr	r3, [pc, #156]	; (801562c <tcp_connect+0x128>)
 8015590:	2201      	movs	r2, #1
    tcp_output(pcb);
 8015592:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8015594:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8015596:	f003 f8b3 	bl	8018700 <tcp_output>
}
 801559a:	4628      	mov	r0, r5
 801559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->local_port = tcp_new_port();
 801559e:	f7ff fe15 	bl	80151cc <tcp_new_port>
 80155a2:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d1c0      	bne.n	801552a <tcp_connect+0x26>
      return ERR_BUF;
 80155a8:	f06f 0501 	mvn.w	r5, #1
 80155ac:	e7f5      	b.n	801559a <tcp_connect+0x96>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80155ae:	f1a3 0528 	sub.w	r5, r3, #40	; 0x28
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80155b2:	b2ad      	uxth	r5, r5
 80155b4:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
 80155b8:	bf28      	it	cs
 80155ba:	f44f 7506 	movcs.w	r5, #536	; 0x218
 80155be:	e7d1      	b.n	8015564 <tcp_connect+0x60>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80155c0:	4b1b      	ldr	r3, [pc, #108]	; (8015630 <tcp_connect+0x12c>)
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	42a2      	cmp	r2, r4
 80155c6:	d012      	beq.n	80155ee <tcp_connect+0xea>
 80155c8:	2a00      	cmp	r2, #0
 80155ca:	d0da      	beq.n	8015582 <tcp_connect+0x7e>
 80155cc:	68d3      	ldr	r3, [r2, #12]
 80155ce:	429c      	cmp	r4, r3
 80155d0:	d013      	beq.n	80155fa <tcp_connect+0xf6>
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d0d5      	beq.n	8015582 <tcp_connect+0x7e>
 80155d6:	68da      	ldr	r2, [r3, #12]
 80155d8:	42a2      	cmp	r2, r4
 80155da:	d00f      	beq.n	80155fc <tcp_connect+0xf8>
 80155dc:	4613      	mov	r3, r2
 80155de:	e7f8      	b.n	80155d2 <tcp_connect+0xce>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80155e0:	3004      	adds	r0, #4
 80155e2:	f006 f949 	bl	801b878 <ip4_route>
 80155e6:	b128      	cbz	r0, 80155f4 <tcp_connect+0xf0>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80155e8:	6843      	ldr	r3, [r0, #4]
 80155ea:	6023      	str	r3, [r4, #0]
 80155ec:	e79a      	b.n	8015524 <tcp_connect+0x20>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80155ee:	68e2      	ldr	r2, [r4, #12]
 80155f0:	601a      	str	r2, [r3, #0]
 80155f2:	e7c6      	b.n	8015582 <tcp_connect+0x7e>
      return ERR_RTE;
 80155f4:	f06f 0503 	mvn.w	r5, #3
 80155f8:	e7cf      	b.n	801559a <tcp_connect+0x96>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80155fa:	4613      	mov	r3, r2
 80155fc:	68e2      	ldr	r2, [r4, #12]
 80155fe:	60da      	str	r2, [r3, #12]
 8015600:	e7bf      	b.n	8015582 <tcp_connect+0x7e>
    return ERR_VAL;
 8015602:	f06f 0505 	mvn.w	r5, #5
 8015606:	e7c8      	b.n	801559a <tcp_connect+0x96>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015608:	4b0a      	ldr	r3, [pc, #40]	; (8015634 <tcp_connect+0x130>)
 801560a:	f44f 725e 	mov.w	r2, #888	; 0x378
 801560e:	490a      	ldr	r1, [pc, #40]	; (8015638 <tcp_connect+0x134>)
 8015610:	f06f 0509 	mvn.w	r5, #9
 8015614:	4809      	ldr	r0, [pc, #36]	; (801563c <tcp_connect+0x138>)
 8015616:	f007 ffe7 	bl	801d5e8 <iprintf>
 801561a:	e7be      	b.n	801559a <tcp_connect+0x96>
 801561c:	20000440 	.word	0x20000440
 8015620:	20033b8c 	.word	0x20033b8c
 8015624:	08600860 	.word	0x08600860
 8015628:	20033b88 	.word	0x20033b88
 801562c:	20033b84 	.word	0x20033b84
 8015630:	20033b94 	.word	0x20033b94
 8015634:	080386dc 	.word	0x080386dc
 8015638:	08038718 	.word	0x08038718
 801563c:	08021804 	.word	0x08021804

08015640 <tcp_seg_free>:
  if (seg != NULL) {
 8015640:	b158      	cbz	r0, 801565a <tcp_seg_free+0x1a>
{
 8015642:	b510      	push	{r4, lr}
 8015644:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8015646:	6840      	ldr	r0, [r0, #4]
 8015648:	b108      	cbz	r0, 801564e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801564a:	f7ff f8fb 	bl	8014844 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801564e:	4621      	mov	r1, r4
 8015650:	2004      	movs	r0, #4
}
 8015652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8015656:	f7fe befd 	b.w	8014454 <memp_free>
 801565a:	4770      	bx	lr

0801565c <tcp_segs_free>:
  while (seg != NULL) {
 801565c:	b138      	cbz	r0, 801566e <tcp_segs_free+0x12>
{
 801565e:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8015660:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8015662:	f7ff ffed 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 8015666:	4620      	mov	r0, r4
 8015668:	2c00      	cmp	r4, #0
 801566a:	d1f9      	bne.n	8015660 <tcp_segs_free+0x4>
}
 801566c:	bd10      	pop	{r4, pc}
 801566e:	4770      	bx	lr

08015670 <tcp_setprio>:
  pcb->prio = prio;
 8015670:	7541      	strb	r1, [r0, #21]
}
 8015672:	4770      	bx	lr

08015674 <tcp_seg_copy>:
{
 8015674:	b538      	push	{r3, r4, r5, lr}
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015676:	f240 5294 	movw	r2, #1428	; 0x594
{
 801567a:	4605      	mov	r5, r0
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801567c:	4909      	ldr	r1, [pc, #36]	; (80156a4 <tcp_seg_copy+0x30>)
 801567e:	2004      	movs	r0, #4
 8015680:	f7fe fec4 	bl	801440c <memp_malloc_fn>
  if (cseg == NULL) {
 8015684:	4604      	mov	r4, r0
 8015686:	b150      	cbz	r0, 801569e <tcp_seg_copy+0x2a>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015688:	6828      	ldr	r0, [r5, #0]
 801568a:	6869      	ldr	r1, [r5, #4]
 801568c:	68aa      	ldr	r2, [r5, #8]
 801568e:	68eb      	ldr	r3, [r5, #12]
 8015690:	6020      	str	r0, [r4, #0]
 8015692:	6061      	str	r1, [r4, #4]
 8015694:	60a2      	str	r2, [r4, #8]
 8015696:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8015698:	6860      	ldr	r0, [r4, #4]
 801569a:	f7ff fad3 	bl	8014c44 <pbuf_ref>
}
 801569e:	4620      	mov	r0, r4
 80156a0:	bd38      	pop	{r3, r4, r5, pc}
 80156a2:	bf00      	nop
 80156a4:	080386dc 	.word	0x080386dc

080156a8 <tcp_arg>:
  if (pcb != NULL) {
 80156a8:	b100      	cbz	r0, 80156ac <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80156aa:	6101      	str	r1, [r0, #16]
}
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop

080156b0 <tcp_recv>:
  if (pcb != NULL) {
 80156b0:	b140      	cbz	r0, 80156c4 <tcp_recv+0x14>
{
 80156b2:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80156b4:	7d03      	ldrb	r3, [r0, #20]
 80156b6:	4604      	mov	r4, r0
 80156b8:	460d      	mov	r5, r1
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d003      	beq.n	80156c6 <tcp_recv+0x16>
    pcb->recv = recv;
 80156be:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80156c2:	bd38      	pop	{r3, r4, r5, pc}
 80156c4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80156c6:	4b05      	ldr	r3, [pc, #20]	; (80156dc <tcp_recv+0x2c>)
 80156c8:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80156cc:	4904      	ldr	r1, [pc, #16]	; (80156e0 <tcp_recv+0x30>)
 80156ce:	4805      	ldr	r0, [pc, #20]	; (80156e4 <tcp_recv+0x34>)
 80156d0:	f007 ff8a 	bl	801d5e8 <iprintf>
    pcb->recv = recv;
 80156d4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80156d8:	bd38      	pop	{r3, r4, r5, pc}
 80156da:	bf00      	nop
 80156dc:	080386dc 	.word	0x080386dc
 80156e0:	08038818 	.word	0x08038818
 80156e4:	08021804 	.word	0x08021804

080156e8 <tcp_sent>:
  if (pcb != NULL) {
 80156e8:	b138      	cbz	r0, 80156fa <tcp_sent+0x12>
{
 80156ea:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80156ec:	7d03      	ldrb	r3, [r0, #20]
 80156ee:	4604      	mov	r4, r0
 80156f0:	460d      	mov	r5, r1
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d002      	beq.n	80156fc <tcp_sent+0x14>
    pcb->sent = sent;
 80156f6:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80156f8:	bd38      	pop	{r3, r4, r5, pc}
 80156fa:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80156fc:	4b04      	ldr	r3, [pc, #16]	; (8015710 <tcp_sent+0x28>)
 80156fe:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8015702:	4904      	ldr	r1, [pc, #16]	; (8015714 <tcp_sent+0x2c>)
 8015704:	4804      	ldr	r0, [pc, #16]	; (8015718 <tcp_sent+0x30>)
 8015706:	f007 ff6f 	bl	801d5e8 <iprintf>
    pcb->sent = sent;
 801570a:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 801570c:	bd38      	pop	{r3, r4, r5, pc}
 801570e:	bf00      	nop
 8015710:	080386dc 	.word	0x080386dc
 8015714:	0803888c 	.word	0x0803888c
 8015718:	08021804 	.word	0x08021804

0801571c <tcp_err>:
  if (pcb != NULL) {
 801571c:	b140      	cbz	r0, 8015730 <tcp_err+0x14>
{
 801571e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015720:	7d03      	ldrb	r3, [r0, #20]
 8015722:	4604      	mov	r4, r0
 8015724:	460d      	mov	r5, r1
 8015726:	2b01      	cmp	r3, #1
 8015728:	d003      	beq.n	8015732 <tcp_err+0x16>
    pcb->errf = err;
 801572a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 801572e:	bd38      	pop	{r3, r4, r5, pc}
 8015730:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015732:	4b05      	ldr	r3, [pc, #20]	; (8015748 <tcp_err+0x2c>)
 8015734:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8015738:	4904      	ldr	r1, [pc, #16]	; (801574c <tcp_err+0x30>)
 801573a:	4805      	ldr	r0, [pc, #20]	; (8015750 <tcp_err+0x34>)
 801573c:	f007 ff54 	bl	801d5e8 <iprintf>
    pcb->errf = err;
 8015740:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8015744:	bd38      	pop	{r3, r4, r5, pc}
 8015746:	bf00      	nop
 8015748:	080386dc 	.word	0x080386dc
 801574c:	08038748 	.word	0x08038748
 8015750:	08021804 	.word	0x08021804

08015754 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015754:	b118      	cbz	r0, 801575e <tcp_accept+0xa>
 8015756:	7d03      	ldrb	r3, [r0, #20]
 8015758:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801575a:	bf08      	it	eq
 801575c:	6181      	streq	r1, [r0, #24]
}
 801575e:	4770      	bx	lr

08015760 <tcp_poll>:
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015760:	7d03      	ldrb	r3, [r0, #20]
 8015762:	2b01      	cmp	r3, #1
{
 8015764:	b570      	push	{r4, r5, r6, lr}
 8015766:	4604      	mov	r4, r0
 8015768:	460e      	mov	r6, r1
 801576a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801576c:	d003      	beq.n	8015776 <tcp_poll+0x16>
  pcb->poll = poll;
 801576e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8015772:	7725      	strb	r5, [r4, #28]
}
 8015774:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015776:	4b05      	ldr	r3, [pc, #20]	; (801578c <tcp_poll+0x2c>)
 8015778:	f240 7203 	movw	r2, #1795	; 0x703
 801577c:	4904      	ldr	r1, [pc, #16]	; (8015790 <tcp_poll+0x30>)
 801577e:	4805      	ldr	r0, [pc, #20]	; (8015794 <tcp_poll+0x34>)
 8015780:	f007 ff32 	bl	801d5e8 <iprintf>
  pcb->poll = poll;
 8015784:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8015788:	7725      	strb	r5, [r4, #28]
}
 801578a:	bd70      	pop	{r4, r5, r6, pc}
 801578c:	080386dc 	.word	0x080386dc
 8015790:	080387f8 	.word	0x080387f8
 8015794:	08021804 	.word	0x08021804

08015798 <tcp_pcb_purge>:
{
 8015798:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 801579a:	7d03      	ldrb	r3, [r0, #20]
     pcb->state != TIME_WAIT &&
 801579c:	2b0a      	cmp	r3, #10
 801579e:	d02a      	beq.n	80157f6 <tcp_pcb_purge+0x5e>
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d928      	bls.n	80157f6 <tcp_pcb_purge+0x5e>
 80157a4:	4604      	mov	r4, r0
    if (pcb->refused_data != NULL) {
 80157a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80157a8:	b118      	cbz	r0, 80157b2 <tcp_pcb_purge+0x1a>
      pbuf_free(pcb->refused_data);
 80157aa:	f7ff f84b 	bl	8014844 <pbuf_free>
      pcb->refused_data = NULL;
 80157ae:	2300      	movs	r3, #0
 80157b0:	6763      	str	r3, [r4, #116]	; 0x74
    if (pcb->ooseq != NULL) {
 80157b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 80157b4:	b128      	cbz	r0, 80157c2 <tcp_pcb_purge+0x2a>
    struct tcp_seg *next = seg->next;
 80157b6:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80157b8:	f7ff ff42 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 80157bc:	4628      	mov	r0, r5
 80157be:	2d00      	cmp	r5, #0
 80157c0:	d1f9      	bne.n	80157b6 <tcp_pcb_purge+0x1e>
    pcb->ooseq = NULL;
 80157c2:	2200      	movs	r2, #0
    pcb->rtime = -1;
 80157c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 80157c8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 80157ca:	6722      	str	r2, [r4, #112]	; 0x70
    pcb->rtime = -1;
 80157cc:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 80157ce:	b128      	cbz	r0, 80157dc <tcp_pcb_purge+0x44>
    struct tcp_seg *next = seg->next;
 80157d0:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80157d2:	f7ff ff35 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 80157d6:	4628      	mov	r0, r5
 80157d8:	2d00      	cmp	r5, #0
 80157da:	d1f9      	bne.n	80157d0 <tcp_pcb_purge+0x38>
    tcp_segs_free(pcb->unacked);
 80157dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  while (seg != NULL) {
 80157de:	b128      	cbz	r0, 80157ec <tcp_pcb_purge+0x54>
    struct tcp_seg *next = seg->next;
 80157e0:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80157e2:	f7ff ff2d 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 80157e6:	4628      	mov	r0, r5
 80157e8:	2d00      	cmp	r5, #0
 80157ea:	d1f9      	bne.n	80157e0 <tcp_pcb_purge+0x48>
    pcb->unacked = pcb->unsent = NULL;
 80157ec:	2300      	movs	r3, #0
 80157ee:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
    pcb->unsent_oversize = 0;
 80157f2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
 80157f6:	bd38      	pop	{r3, r4, r5, pc}

080157f8 <tcp_slowtmr>:
{
 80157f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80157fc:	4ebf      	ldr	r6, [pc, #764]	; (8015afc <tcp_slowtmr+0x304>)
{
 80157fe:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8015800:	4fbf      	ldr	r7, [pc, #764]	; (8015b00 <tcp_slowtmr+0x308>)
  ++tcp_ticks;
 8015802:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 8015804:	783b      	ldrb	r3, [r7, #0]
  ++tcp_ticks;
 8015806:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015808:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8015b30 <tcp_slowtmr+0x338>
  ++tcp_timer_ctr;
 801580c:	3301      	adds	r3, #1
  ++tcp_ticks;
 801580e:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 8015810:	703b      	strb	r3, [r7, #0]
  pcb = tcp_active_pcbs;
 8015812:	4bbc      	ldr	r3, [pc, #752]	; (8015b04 <tcp_slowtmr+0x30c>)
 8015814:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8015816:	2c00      	cmp	r4, #0
 8015818:	f000 8084 	beq.w	8015924 <tcp_slowtmr+0x12c>
  prev = NULL;
 801581c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015820:	7d23      	ldrb	r3, [r4, #20]
 8015822:	2b00      	cmp	r3, #0
 8015824:	f000 8103 	beq.w	8015a2e <tcp_slowtmr+0x236>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015828:	2b01      	cmp	r3, #1
 801582a:	f000 810b 	beq.w	8015a44 <tcp_slowtmr+0x24c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801582e:	2b0a      	cmp	r3, #10
 8015830:	f000 8113 	beq.w	8015a5a <tcp_slowtmr+0x262>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015834:	783a      	ldrb	r2, [r7, #0]
 8015836:	7f63      	ldrb	r3, [r4, #29]
 8015838:	4293      	cmp	r3, r2
 801583a:	f000 811a 	beq.w	8015a72 <tcp_slowtmr+0x27a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801583e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8015840:	7762      	strb	r2, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015842:	2b02      	cmp	r3, #2
 8015844:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8015848:	f000 8118 	beq.w	8015a7c <tcp_slowtmr+0x284>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801584c:	2a0b      	cmp	r2, #11
 801584e:	f240 80ce 	bls.w	80159ee <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8015852:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8015854:	2b06      	cmp	r3, #6
 8015856:	f000 80bd 	beq.w	80159d4 <tcp_slowtmr+0x1dc>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801585a:	f894 a008 	ldrb.w	sl, [r4, #8]
 801585e:	f01a 0a08 	ands.w	sl, sl, #8
 8015862:	d01d      	beq.n	80158a0 <tcp_slowtmr+0xa8>
 8015864:	2b04      	cmp	r3, #4
 8015866:	d007      	beq.n	8015878 <tcp_slowtmr+0x80>
 8015868:	f1a3 0307 	sub.w	r3, r3, #7
 801586c:	fab3 f383 	clz	r3, r3
 8015870:	095b      	lsrs	r3, r3, #5
 8015872:	2b00      	cmp	r3, #0
 8015874:	f000 80b8 	beq.w	80159e8 <tcp_slowtmr+0x1f0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015878:	6832      	ldr	r2, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801587a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801587e:	4ba2      	ldr	r3, [pc, #648]	; (8015b08 <tcp_slowtmr+0x310>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015880:	9203      	str	r2, [sp, #12]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015882:	4403      	add	r3, r0
 8015884:	4aa1      	ldr	r2, [pc, #644]	; (8015b0c <tcp_slowtmr+0x314>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015886:	6a21      	ldr	r1, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015888:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801588c:	9a03      	ldr	r2, [sp, #12]
 801588e:	1a52      	subs	r2, r2, r1
 8015890:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8015894:	f240 8150 	bls.w	8015b38 <tcp_slowtmr+0x340>
        ++pcb_remove;
 8015898:	3501      	adds	r5, #1
        ++pcb_reset;
 801589a:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801589e:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 80158a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80158a2:	b148      	cbz	r0, 80158b8 <tcp_slowtmr+0xc0>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80158a4:	6833      	ldr	r3, [r6, #0]
 80158a6:	6a22      	ldr	r2, [r4, #32]
 80158a8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80158ac:	1a9b      	subs	r3, r3, r2
 80158ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 80158b2:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 80158b6:	d256      	bcs.n	8015966 <tcp_slowtmr+0x16e>
    if (pcb->state == SYN_RCVD) {
 80158b8:	7d23      	ldrb	r3, [r4, #20]
 80158ba:	2b03      	cmp	r3, #3
 80158bc:	d05f      	beq.n	801597e <tcp_slowtmr+0x186>
    if (pcb->state == LAST_ACK) {
 80158be:	2b09      	cmp	r3, #9
 80158c0:	d162      	bne.n	8015988 <tcp_slowtmr+0x190>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80158c2:	6833      	ldr	r3, [r6, #0]
 80158c4:	6a22      	ldr	r2, [r4, #32]
 80158c6:	1a9b      	subs	r3, r3, r2
 80158c8:	2bf0      	cmp	r3, #240	; 0xf0
 80158ca:	d95d      	bls.n	8015988 <tcp_slowtmr+0x190>
      tcp_pcb_purge(pcb);
 80158cc:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80158ce:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80158d2:	f7ff ff61 	bl	8015798 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80158d6:	4b8b      	ldr	r3, [pc, #556]	; (8015b04 <tcp_slowtmr+0x30c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80158da:	f1b8 0f00 	cmp.w	r8, #0
 80158de:	f000 8175 	beq.w	8015bcc <tcp_slowtmr+0x3d4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80158e2:	42a3      	cmp	r3, r4
 80158e4:	f000 817f 	beq.w	8015be6 <tcp_slowtmr+0x3ee>
        prev->next = pcb->next;
 80158e8:	68e3      	ldr	r3, [r4, #12]
 80158ea:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 80158ee:	f1ba 0f00 	cmp.w	sl, #0
 80158f2:	f040 814e 	bne.w	8015b92 <tcp_slowtmr+0x39a>
      memp_free(MEMP_TCP_PCB, pcb2);
 80158f6:	4621      	mov	r1, r4
 80158f8:	2002      	movs	r0, #2
      tcp_active_pcbs_changed = 0;
 80158fa:	4d85      	ldr	r5, [pc, #532]	; (8015b10 <tcp_slowtmr+0x318>)
      pcb = pcb->next;
 80158fc:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8015900:	f7fe fda8 	bl	8014454 <memp_free>
      tcp_active_pcbs_changed = 0;
 8015904:	2300      	movs	r3, #0
 8015906:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015908:	f1bb 0f00 	cmp.w	fp, #0
 801590c:	d007      	beq.n	801591e <tcp_slowtmr+0x126>
 801590e:	4650      	mov	r0, sl
 8015910:	f06f 010c 	mvn.w	r1, #12
 8015914:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8015916:	782b      	ldrb	r3, [r5, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	f47f af7a 	bne.w	8015812 <tcp_slowtmr+0x1a>
  while (pcb != NULL) {
 801591e:	2c00      	cmp	r4, #0
 8015920:	f47f af7e 	bne.w	8015820 <tcp_slowtmr+0x28>
  pcb = tcp_tw_pcbs;
 8015924:	4f7b      	ldr	r7, [pc, #492]	; (8015b14 <tcp_slowtmr+0x31c>)
 8015926:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8015928:	b1d4      	cbz	r4, 8015960 <tcp_slowtmr+0x168>
  prev = NULL;
 801592a:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801592c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8015b30 <tcp_slowtmr+0x338>
 8015930:	f8df a200 	ldr.w	sl, [pc, #512]	; 8015b34 <tcp_slowtmr+0x33c>
 8015934:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8015b20 <tcp_slowtmr+0x328>
 8015938:	7d23      	ldrb	r3, [r4, #20]
 801593a:	2b0a      	cmp	r3, #10
 801593c:	d006      	beq.n	801594c <tcp_slowtmr+0x154>
 801593e:	464b      	mov	r3, r9
 8015940:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8015944:	4651      	mov	r1, sl
 8015946:	4640      	mov	r0, r8
 8015948:	f007 fe4e 	bl	801d5e8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801594c:	6833      	ldr	r3, [r6, #0]
 801594e:	6a22      	ldr	r2, [r4, #32]
 8015950:	1a9b      	subs	r3, r3, r2
 8015952:	2bf0      	cmp	r3, #240	; 0xf0
 8015954:	f200 8109 	bhi.w	8015b6a <tcp_slowtmr+0x372>
      pcb = pcb->next;
 8015958:	4625      	mov	r5, r4
 801595a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801595c:	2c00      	cmp	r4, #0
 801595e:	d1eb      	bne.n	8015938 <tcp_slowtmr+0x140>
}
 8015960:	b005      	add	sp, #20
 8015962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 8015966:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 801596a:	f7ff fe69 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 801596e:	4658      	mov	r0, fp
 8015970:	2800      	cmp	r0, #0
 8015972:	d1f8      	bne.n	8015966 <tcp_slowtmr+0x16e>
    if (pcb->state == SYN_RCVD) {
 8015974:	7d23      	ldrb	r3, [r4, #20]
      pcb->ooseq = NULL;
 8015976:	f8c4 b070 	str.w	fp, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 801597a:	2b03      	cmp	r3, #3
 801597c:	d19f      	bne.n	80158be <tcp_slowtmr+0xc6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801597e:	6833      	ldr	r3, [r6, #0]
 8015980:	6a22      	ldr	r2, [r4, #32]
 8015982:	1a9b      	subs	r3, r3, r2
 8015984:	2b28      	cmp	r3, #40	; 0x28
 8015986:	d8a1      	bhi.n	80158cc <tcp_slowtmr+0xd4>
    if (pcb_remove) {
 8015988:	2d00      	cmp	r5, #0
 801598a:	d19f      	bne.n	80158cc <tcp_slowtmr+0xd4>
      ++prev->polltmr;
 801598c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801598e:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8015990:	3301      	adds	r3, #1
      pcb = pcb->next;
 8015992:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 8015996:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8015998:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801599a:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801599c:	d814      	bhi.n	80159c8 <tcp_slowtmr+0x1d0>
        tcp_active_pcbs_changed = 0;
 801599e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8015b10 <tcp_slowtmr+0x318>
        TCP_EVENT_POLL(prev, err);
 80159a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80159a6:	76e5      	strb	r5, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80159a8:	f888 5000 	strb.w	r5, [r8]
        TCP_EVENT_POLL(prev, err);
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	f000 80fb 	beq.w	8015ba8 <tcp_slowtmr+0x3b0>
 80159b2:	4621      	mov	r1, r4
 80159b4:	6920      	ldr	r0, [r4, #16]
 80159b6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80159b8:	f898 3000 	ldrb.w	r3, [r8]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f47f af28 	bne.w	8015812 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 80159c2:	2800      	cmp	r0, #0
 80159c4:	f000 80f0 	beq.w	8015ba8 <tcp_slowtmr+0x3b0>
 80159c8:	46a0      	mov	r8, r4
      pcb = pcb->next;
 80159ca:	4654      	mov	r4, sl
  while (pcb != NULL) {
 80159cc:	2c00      	cmp	r4, #0
 80159ce:	f47f af27 	bne.w	8015820 <tcp_slowtmr+0x28>
 80159d2:	e7a7      	b.n	8015924 <tcp_slowtmr+0x12c>
      if (pcb->flags & TF_RXCLOSED) {
 80159d4:	7ea3      	ldrb	r3, [r4, #26]
 80159d6:	06db      	lsls	r3, r3, #27
 80159d8:	d506      	bpl.n	80159e8 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159da:	6833      	ldr	r3, [r6, #0]
 80159dc:	6a22      	ldr	r2, [r4, #32]
 80159de:	1a9b      	subs	r3, r3, r2
 80159e0:	2b28      	cmp	r3, #40	; 0x28
 80159e2:	d901      	bls.n	80159e8 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 80159e4:	3501      	adds	r5, #1
 80159e6:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 80159e8:	f04f 0a00 	mov.w	sl, #0
 80159ec:	e758      	b.n	80158a0 <tcp_slowtmr+0xa8>
      if (pcb->persist_backoff > 0) {
 80159ee:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 80159f2:	2d00      	cmp	r5, #0
 80159f4:	d048      	beq.n	8015a88 <tcp_slowtmr+0x290>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80159f6:	4848      	ldr	r0, [pc, #288]	; (8015b18 <tcp_slowtmr+0x320>)
        if (pcb->persist_cnt < backoff_cnt) {
 80159f8:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80159fc:	4405      	add	r5, r0
 80159fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8015a02:	428a      	cmp	r2, r1
 8015a04:	f0c0 80d9 	bcc.w	8015bba <tcp_slowtmr+0x3c2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f003 f96b 	bl	8018ce4 <tcp_zero_window_probe>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	f040 80fd 	bne.w	8015c0e <tcp_slowtmr+0x416>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015a14:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8015a18:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015a1c:	2b06      	cmp	r3, #6
 8015a1e:	f200 80f8 	bhi.w	8015c12 <tcp_slowtmr+0x41a>
              pcb->persist_backoff++;
 8015a22:	1c5a      	adds	r2, r3, #1
    pcb_remove = 0;
 8015a24:	4605      	mov	r5, r0
 8015a26:	7d23      	ldrb	r3, [r4, #20]
              pcb->persist_backoff++;
 8015a28:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 8015a2c:	e712      	b.n	8015854 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015a2e:	464b      	mov	r3, r9
 8015a30:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8015a34:	4939      	ldr	r1, [pc, #228]	; (8015b1c <tcp_slowtmr+0x324>)
 8015a36:	483a      	ldr	r0, [pc, #232]	; (8015b20 <tcp_slowtmr+0x328>)
 8015a38:	f007 fdd6 	bl	801d5e8 <iprintf>
 8015a3c:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015a3e:	2b01      	cmp	r3, #1
 8015a40:	f47f aef5 	bne.w	801582e <tcp_slowtmr+0x36>
 8015a44:	464b      	mov	r3, r9
 8015a46:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015a4a:	4936      	ldr	r1, [pc, #216]	; (8015b24 <tcp_slowtmr+0x32c>)
 8015a4c:	4834      	ldr	r0, [pc, #208]	; (8015b20 <tcp_slowtmr+0x328>)
 8015a4e:	f007 fdcb 	bl	801d5e8 <iprintf>
 8015a52:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015a54:	2b0a      	cmp	r3, #10
 8015a56:	f47f aeed 	bne.w	8015834 <tcp_slowtmr+0x3c>
 8015a5a:	464b      	mov	r3, r9
 8015a5c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8015a60:	4931      	ldr	r1, [pc, #196]	; (8015b28 <tcp_slowtmr+0x330>)
 8015a62:	482f      	ldr	r0, [pc, #188]	; (8015b20 <tcp_slowtmr+0x328>)
 8015a64:	f007 fdc0 	bl	801d5e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015a68:	783a      	ldrb	r2, [r7, #0]
 8015a6a:	7f63      	ldrb	r3, [r4, #29]
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	f47f aee6 	bne.w	801583e <tcp_slowtmr+0x46>
      pcb = pcb->next;
 8015a72:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8015a74:	2c00      	cmp	r4, #0
 8015a76:	f47f aed3 	bne.w	8015820 <tcp_slowtmr+0x28>
 8015a7a:	e753      	b.n	8015924 <tcp_slowtmr+0x12c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015a7c:	2a05      	cmp	r2, #5
 8015a7e:	d9b6      	bls.n	80159ee <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 8015a80:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 8015a84:	2501      	movs	r5, #1
 8015a86:	e70b      	b.n	80158a0 <tcp_slowtmr+0xa8>
        if (pcb->rtime >= 0) {
 8015a88:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8015a8c:	2900      	cmp	r1, #0
 8015a8e:	db01      	blt.n	8015a94 <tcp_slowtmr+0x29c>
          ++pcb->rtime;
 8015a90:	3101      	adds	r1, #1
 8015a92:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8015a94:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8015a96:	2900      	cmp	r1, #0
 8015a98:	f43f aedc 	beq.w	8015854 <tcp_slowtmr+0x5c>
 8015a9c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8015aa0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8015aa4:	4288      	cmp	r0, r1
 8015aa6:	f6ff aed5 	blt.w	8015854 <tcp_slowtmr+0x5c>
          if (pcb->state != SYN_SENT) {
 8015aaa:	2b02      	cmp	r3, #2
 8015aac:	d00a      	beq.n	8015ac4 <tcp_slowtmr+0x2cc>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015aae:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8015ab2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8015ab6:	491d      	ldr	r1, [pc, #116]	; (8015b2c <tcp_slowtmr+0x334>)
 8015ab8:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8015abc:	5c8a      	ldrb	r2, [r1, r2]
 8015abe:	4093      	lsls	r3, r2
 8015ac0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015ac4:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8015ac8:	2200      	movs	r2, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015aca:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ace:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->ssthresh = eff_wnd >> 1;
 8015ad0:	4283      	cmp	r3, r0
          pcb->rtime = 0;
 8015ad2:	8622      	strh	r2, [r4, #48]	; 0x30
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
          pcb->cwnd = pcb->mss;
 8015ad8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8015adc:	bf28      	it	cs
 8015ade:	4603      	movcs	r3, r0
          tcp_rexmit_rto(pcb);
 8015ae0:	4620      	mov	r0, r4
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ae2:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8015ae4:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015ae6:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8015ae8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->ssthresh = (pcb->mss << 1);
 8015aec:	bf38      	it	cc
 8015aee:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8015af2:	f003 f841 	bl	8018b78 <tcp_rexmit_rto>
 8015af6:	7d23      	ldrb	r3, [r4, #20]
 8015af8:	e6ac      	b.n	8015854 <tcp_slowtmr+0x5c>
 8015afa:	bf00      	nop
 8015afc:	20033b8c 	.word	0x20033b8c
 8015b00:	20021461 	.word	0x20021461
 8015b04:	20033b88 	.word	0x20033b88
 8015b08:	000a4cb8 	.word	0x000a4cb8
 8015b0c:	10624dd3 	.word	0x10624dd3
 8015b10:	20033b84 	.word	0x20033b84
 8015b14:	20033b98 	.word	0x20033b98
 8015b18:	080387f0 	.word	0x080387f0
 8015b1c:	080388b4 	.word	0x080388b4
 8015b20:	08021804 	.word	0x08021804
 8015b24:	080388e0 	.word	0x080388e0
 8015b28:	0803890c 	.word	0x0803890c
 8015b2c:	08038688 	.word	0x08038688
 8015b30:	080386dc 	.word	0x080386dc
 8015b34:	08038994 	.word	0x08038994
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015b38:	493b      	ldr	r1, [pc, #236]	; (8015c28 <tcp_slowtmr+0x430>)
 8015b3a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8015b3e:	fb01 0303 	mla	r3, r1, r3, r0
                / TCP_SLOW_INTERVAL)
 8015b42:	493a      	ldr	r1, [pc, #232]	; (8015c2c <tcp_slowtmr+0x434>)
 8015b44:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015b48:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8015b4c:	f67f af4c 	bls.w	80159e8 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 8015b50:	4620      	mov	r0, r4
 8015b52:	f003 f883 	bl	8018c5c <tcp_keepalive>
        if (err == ERR_OK) {
 8015b56:	2800      	cmp	r0, #0
 8015b58:	f47f af46 	bne.w	80159e8 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8015b5c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8015b60:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 8015b62:	3301      	adds	r3, #1
 8015b64:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 8015b68:	e69a      	b.n	80158a0 <tcp_slowtmr+0xa8>
      tcp_pcb_purge(pcb);
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f7ff fe14 	bl	8015798 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015b70:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8015b72:	2d00      	cmp	r5, #0
 8015b74:	d03f      	beq.n	8015bf6 <tcp_slowtmr+0x3fe>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015b76:	42a3      	cmp	r3, r4
 8015b78:	d04e      	beq.n	8015c18 <tcp_slowtmr+0x420>
        prev->next = pcb->next;
 8015b7a:	68e3      	ldr	r3, [r4, #12]
 8015b7c:	60eb      	str	r3, [r5, #12]
 8015b7e:	68e3      	ldr	r3, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8015b80:	4621      	mov	r1, r4
      pcb = pcb->next;
 8015b82:	461c      	mov	r4, r3
      memp_free(MEMP_TCP_PCB, pcb2);
 8015b84:	2002      	movs	r0, #2
 8015b86:	f7fe fc65 	bl	8014454 <memp_free>
  while (pcb != NULL) {
 8015b8a:	2c00      	cmp	r4, #0
 8015b8c:	f47f aed4 	bne.w	8015938 <tcp_slowtmr+0x140>
 8015b90:	e6e6      	b.n	8015960 <tcp_slowtmr+0x168>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015b92:	8b25      	ldrh	r5, [r4, #24]
 8015b94:	1d23      	adds	r3, r4, #4
 8015b96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015b98:	4622      	mov	r2, r4
 8015b9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015b9c:	9501      	str	r5, [sp, #4]
 8015b9e:	8ae5      	ldrh	r5, [r4, #22]
 8015ba0:	9500      	str	r5, [sp, #0]
 8015ba2:	f002 ff79 	bl	8018a98 <tcp_rst>
 8015ba6:	e6a6      	b.n	80158f6 <tcp_slowtmr+0xfe>
          tcp_output(prev);
 8015ba8:	4620      	mov	r0, r4
 8015baa:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8015bac:	4654      	mov	r4, sl
          tcp_output(prev);
 8015bae:	f002 fda7 	bl	8018700 <tcp_output>
  while (pcb != NULL) {
 8015bb2:	2c00      	cmp	r4, #0
 8015bb4:	f47f ae34 	bne.w	8015820 <tcp_slowtmr+0x28>
 8015bb8:	e6b4      	b.n	8015924 <tcp_slowtmr+0x12c>
          pcb->persist_cnt++;
 8015bba:	3201      	adds	r2, #1
 8015bbc:	b2d2      	uxtb	r2, r2
        if (pcb->persist_cnt >= backoff_cnt) {
 8015bbe:	428a      	cmp	r2, r1
          pcb->persist_cnt++;
 8015bc0:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8015bc4:	f4bf af20 	bcs.w	8015a08 <tcp_slowtmr+0x210>
    pcb_remove = 0;
 8015bc8:	2500      	movs	r5, #0
 8015bca:	e643      	b.n	8015854 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015bcc:	42a3      	cmp	r3, r4
 8015bce:	d006      	beq.n	8015bde <tcp_slowtmr+0x3e6>
 8015bd0:	464b      	mov	r3, r9
 8015bd2:	f240 428d 	movw	r2, #1165	; 0x48d
 8015bd6:	4916      	ldr	r1, [pc, #88]	; (8015c30 <tcp_slowtmr+0x438>)
 8015bd8:	4816      	ldr	r0, [pc, #88]	; (8015c34 <tcp_slowtmr+0x43c>)
 8015bda:	f007 fd05 	bl	801d5e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015bde:	68e3      	ldr	r3, [r4, #12]
 8015be0:	4a15      	ldr	r2, [pc, #84]	; (8015c38 <tcp_slowtmr+0x440>)
 8015be2:	6013      	str	r3, [r2, #0]
 8015be4:	e683      	b.n	80158ee <tcp_slowtmr+0xf6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015be6:	464b      	mov	r3, r9
 8015be8:	f240 4289 	movw	r2, #1161	; 0x489
 8015bec:	4913      	ldr	r1, [pc, #76]	; (8015c3c <tcp_slowtmr+0x444>)
 8015bee:	4811      	ldr	r0, [pc, #68]	; (8015c34 <tcp_slowtmr+0x43c>)
 8015bf0:	f007 fcfa 	bl	801d5e8 <iprintf>
 8015bf4:	e678      	b.n	80158e8 <tcp_slowtmr+0xf0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015bf6:	42a3      	cmp	r3, r4
 8015bf8:	d006      	beq.n	8015c08 <tcp_slowtmr+0x410>
 8015bfa:	464b      	mov	r3, r9
 8015bfc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8015c00:	490f      	ldr	r1, [pc, #60]	; (8015c40 <tcp_slowtmr+0x448>)
 8015c02:	4640      	mov	r0, r8
 8015c04:	f007 fcf0 	bl	801d5e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015c08:	68e3      	ldr	r3, [r4, #12]
 8015c0a:	603b      	str	r3, [r7, #0]
 8015c0c:	e7b8      	b.n	8015b80 <tcp_slowtmr+0x388>
 8015c0e:	7d23      	ldrb	r3, [r4, #20]
 8015c10:	e7da      	b.n	8015bc8 <tcp_slowtmr+0x3d0>
    pcb_remove = 0;
 8015c12:	4605      	mov	r5, r0
 8015c14:	7d23      	ldrb	r3, [r4, #20]
 8015c16:	e61d      	b.n	8015854 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015c18:	464b      	mov	r3, r9
 8015c1a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8015c1e:	4909      	ldr	r1, [pc, #36]	; (8015c44 <tcp_slowtmr+0x44c>)
 8015c20:	4640      	mov	r0, r8
 8015c22:	f007 fce1 	bl	801d5e8 <iprintf>
 8015c26:	e7a8      	b.n	8015b7a <tcp_slowtmr+0x382>
 8015c28:	000124f8 	.word	0x000124f8
 8015c2c:	10624dd3 	.word	0x10624dd3
 8015c30:	08038968 	.word	0x08038968
 8015c34:	08021804 	.word	0x08021804
 8015c38:	20033b88 	.word	0x20033b88
 8015c3c:	0803893c 	.word	0x0803893c
 8015c40:	080389ec 	.word	0x080389ec
 8015c44:	080389c4 	.word	0x080389c4

08015c48 <tcp_pcb_remove>:
  TCP_RMV(pcblist, pcb);
 8015c48:	6802      	ldr	r2, [r0, #0]
 8015c4a:	428a      	cmp	r2, r1
{
 8015c4c:	b510      	push	{r4, lr}
 8015c4e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8015c50:	d047      	beq.n	8015ce2 <tcp_pcb_remove+0x9a>
 8015c52:	b14a      	cbz	r2, 8015c68 <tcp_pcb_remove+0x20>
 8015c54:	68d3      	ldr	r3, [r2, #12]
 8015c56:	4299      	cmp	r1, r3
 8015c58:	d03f      	beq.n	8015cda <tcp_pcb_remove+0x92>
 8015c5a:	b12b      	cbz	r3, 8015c68 <tcp_pcb_remove+0x20>
 8015c5c:	68da      	ldr	r2, [r3, #12]
 8015c5e:	42a2      	cmp	r2, r4
 8015c60:	d03c      	beq.n	8015cdc <tcp_pcb_remove+0x94>
 8015c62:	4613      	mov	r3, r2
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d1f9      	bne.n	8015c5c <tcp_pcb_remove+0x14>
 8015c68:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8015c6a:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8015c6c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8015c6e:	f7ff fd93 	bl	8015798 <tcp_pcb_purge>
  if (pcb->state != TIME_WAIT &&
 8015c72:	7d23      	ldrb	r3, [r4, #20]
 8015c74:	2b0a      	cmp	r3, #10
 8015c76:	d02a      	beq.n	8015cce <tcp_pcb_remove+0x86>
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d028      	beq.n	8015cce <tcp_pcb_remove+0x86>
     pcb->flags & TF_ACK_DELAY) {
 8015c7c:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8015c7e:	07da      	lsls	r2, r3, #31
 8015c80:	d41e      	bmi.n	8015cc0 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015c82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015c84:	b133      	cbz	r3, 8015c94 <tcp_pcb_remove+0x4c>
 8015c86:	4b18      	ldr	r3, [pc, #96]	; (8015ce8 <tcp_pcb_remove+0xa0>)
 8015c88:	f240 7253 	movw	r2, #1875	; 0x753
 8015c8c:	4917      	ldr	r1, [pc, #92]	; (8015cec <tcp_pcb_remove+0xa4>)
 8015c8e:	4818      	ldr	r0, [pc, #96]	; (8015cf0 <tcp_pcb_remove+0xa8>)
 8015c90:	f007 fcaa 	bl	801d5e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015c94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015c96:	b133      	cbz	r3, 8015ca6 <tcp_pcb_remove+0x5e>
 8015c98:	4b13      	ldr	r3, [pc, #76]	; (8015ce8 <tcp_pcb_remove+0xa0>)
 8015c9a:	f240 7254 	movw	r2, #1876	; 0x754
 8015c9e:	4915      	ldr	r1, [pc, #84]	; (8015cf4 <tcp_pcb_remove+0xac>)
 8015ca0:	4813      	ldr	r0, [pc, #76]	; (8015cf0 <tcp_pcb_remove+0xa8>)
 8015ca2:	f007 fca1 	bl	801d5e8 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015ca6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ca8:	b133      	cbz	r3, 8015cb8 <tcp_pcb_remove+0x70>
 8015caa:	4b0f      	ldr	r3, [pc, #60]	; (8015ce8 <tcp_pcb_remove+0xa0>)
 8015cac:	f240 7256 	movw	r2, #1878	; 0x756
 8015cb0:	4911      	ldr	r1, [pc, #68]	; (8015cf8 <tcp_pcb_remove+0xb0>)
 8015cb2:	480f      	ldr	r0, [pc, #60]	; (8015cf0 <tcp_pcb_remove+0xa8>)
 8015cb4:	f007 fc98 	bl	801d5e8 <iprintf>
  pcb->state = CLOSED;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8015cbc:	82e3      	strh	r3, [r4, #22]
}
 8015cbe:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8015cc0:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8015cc4:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8015cc6:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8015cc8:	f002 fd1a 	bl	8018700 <tcp_output>
 8015ccc:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 8015cce:	2b01      	cmp	r3, #1
 8015cd0:	d0f2      	beq.n	8015cb8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015cd2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d1d6      	bne.n	8015c86 <tcp_pcb_remove+0x3e>
 8015cd8:	e7dc      	b.n	8015c94 <tcp_pcb_remove+0x4c>
  TCP_RMV(pcblist, pcb);
 8015cda:	4613      	mov	r3, r2
 8015cdc:	68e2      	ldr	r2, [r4, #12]
 8015cde:	60da      	str	r2, [r3, #12]
 8015ce0:	e7c2      	b.n	8015c68 <tcp_pcb_remove+0x20>
 8015ce2:	68cb      	ldr	r3, [r1, #12]
 8015ce4:	6003      	str	r3, [r0, #0]
 8015ce6:	e7bf      	b.n	8015c68 <tcp_pcb_remove+0x20>
 8015ce8:	080386dc 	.word	0x080386dc
 8015cec:	080387a4 	.word	0x080387a4
 8015cf0:	08021804 	.word	0x08021804
 8015cf4:	080387bc 	.word	0x080387bc
 8015cf8:	080387d8 	.word	0x080387d8

08015cfc <tcp_close_shutdown>:
{
 8015cfc:	b570      	push	{r4, r5, r6, lr}
 8015cfe:	4604      	mov	r4, r0
 8015d00:	b082      	sub	sp, #8
 8015d02:	7d05      	ldrb	r5, [r0, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015d04:	b119      	cbz	r1, 8015d0e <tcp_close_shutdown+0x12>
 8015d06:	2d04      	cmp	r5, #4
 8015d08:	d014      	beq.n	8015d34 <tcp_close_shutdown+0x38>
 8015d0a:	2d07      	cmp	r5, #7
 8015d0c:	d012      	beq.n	8015d34 <tcp_close_shutdown+0x38>
  switch (pcb->state) {
 8015d0e:	2d01      	cmp	r5, #1
 8015d10:	d06b      	beq.n	8015dea <tcp_close_shutdown+0xee>
 8015d12:	d330      	bcc.n	8015d76 <tcp_close_shutdown+0x7a>
 8015d14:	2d02      	cmp	r5, #2
 8015d16:	d162      	bne.n	8015dde <tcp_close_shutdown+0xe2>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8015d18:	4621      	mov	r1, r4
 8015d1a:	484f      	ldr	r0, [pc, #316]	; (8015e58 <tcp_close_shutdown+0x15c>)
 8015d1c:	f7ff ff94 	bl	8015c48 <tcp_pcb_remove>
 8015d20:	4b4e      	ldr	r3, [pc, #312]	; (8015e5c <tcp_close_shutdown+0x160>)
 8015d22:	2201      	movs	r2, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8015d24:	4621      	mov	r1, r4
 8015d26:	4628      	mov	r0, r5
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8015d28:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8015d2a:	f7fe fb93 	bl	8014454 <memp_free>
}
 8015d2e:	2000      	movs	r0, #0
 8015d30:	b002      	add	sp, #8
 8015d32:	bd70      	pop	{r4, r5, r6, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015d34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d02f      	beq.n	8015d9a <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015d3a:	7ea3      	ldrb	r3, [r4, #26]
 8015d3c:	06db      	lsls	r3, r3, #27
 8015d3e:	d531      	bpl.n	8015da4 <tcp_close_shutdown+0xa8>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015d40:	8b26      	ldrh	r6, [r4, #24]
 8015d42:	1d23      	adds	r3, r4, #4
 8015d44:	8ae5      	ldrh	r5, [r4, #22]
 8015d46:	4622      	mov	r2, r4
 8015d48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015d4a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015d4c:	e9cd 5600 	strd	r5, r6, [sp]
 8015d50:	f002 fea2 	bl	8018a98 <tcp_rst>
      tcp_pcb_purge(pcb);
 8015d54:	4620      	mov	r0, r4
 8015d56:	f7ff fd1f 	bl	8015798 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015d5a:	4b3f      	ldr	r3, [pc, #252]	; (8015e58 <tcp_close_shutdown+0x15c>)
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	42a2      	cmp	r2, r4
 8015d60:	d028      	beq.n	8015db4 <tcp_close_shutdown+0xb8>
 8015d62:	b34a      	cbz	r2, 8015db8 <tcp_close_shutdown+0xbc>
 8015d64:	68d3      	ldr	r3, [r2, #12]
 8015d66:	429c      	cmp	r4, r3
 8015d68:	d062      	beq.n	8015e30 <tcp_close_shutdown+0x134>
 8015d6a:	b32b      	cbz	r3, 8015db8 <tcp_close_shutdown+0xbc>
 8015d6c:	68da      	ldr	r2, [r3, #12]
 8015d6e:	42a2      	cmp	r2, r4
 8015d70:	d05f      	beq.n	8015e32 <tcp_close_shutdown+0x136>
 8015d72:	4613      	mov	r3, r2
 8015d74:	e7f9      	b.n	8015d6a <tcp_close_shutdown+0x6e>
    if (pcb->local_port != 0) {
 8015d76:	8ae3      	ldrh	r3, [r4, #22]
 8015d78:	b353      	cbz	r3, 8015dd0 <tcp_close_shutdown+0xd4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015d7a:	4b39      	ldr	r3, [pc, #228]	; (8015e60 <tcp_close_shutdown+0x164>)
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	42a2      	cmp	r2, r4
 8015d80:	d066      	beq.n	8015e50 <tcp_close_shutdown+0x154>
 8015d82:	2a00      	cmp	r2, #0
 8015d84:	d051      	beq.n	8015e2a <tcp_close_shutdown+0x12e>
 8015d86:	68d3      	ldr	r3, [r2, #12]
 8015d88:	429c      	cmp	r4, r3
 8015d8a:	d04b      	beq.n	8015e24 <tcp_close_shutdown+0x128>
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d04c      	beq.n	8015e2a <tcp_close_shutdown+0x12e>
 8015d90:	68da      	ldr	r2, [r3, #12]
 8015d92:	42a2      	cmp	r2, r4
 8015d94:	d047      	beq.n	8015e26 <tcp_close_shutdown+0x12a>
 8015d96:	4613      	mov	r3, r2
 8015d98:	e7f8      	b.n	8015d8c <tcp_close_shutdown+0x90>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015d9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8015d9c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015da0:	d1cb      	bne.n	8015d3a <tcp_close_shutdown+0x3e>
 8015da2:	e7b4      	b.n	8015d0e <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015da4:	4b2f      	ldr	r3, [pc, #188]	; (8015e64 <tcp_close_shutdown+0x168>)
 8015da6:	f240 120f 	movw	r2, #271	; 0x10f
 8015daa:	492f      	ldr	r1, [pc, #188]	; (8015e68 <tcp_close_shutdown+0x16c>)
 8015dac:	482f      	ldr	r0, [pc, #188]	; (8015e6c <tcp_close_shutdown+0x170>)
 8015dae:	f007 fc1b 	bl	801d5e8 <iprintf>
 8015db2:	e7c5      	b.n	8015d40 <tcp_close_shutdown+0x44>
      TCP_RMV_ACTIVE(pcb);
 8015db4:	68e2      	ldr	r2, [r4, #12]
 8015db6:	601a      	str	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8015db8:	7d23      	ldrb	r3, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 8015dba:	2000      	movs	r0, #0
 8015dbc:	4a27      	ldr	r2, [pc, #156]	; (8015e5c <tcp_close_shutdown+0x160>)
 8015dbe:	2101      	movs	r1, #1
      if (pcb->state == ESTABLISHED) {
 8015dc0:	2b04      	cmp	r3, #4
      TCP_RMV_ACTIVE(pcb);
 8015dc2:	60e0      	str	r0, [r4, #12]
 8015dc4:	7011      	strb	r1, [r2, #0]
      if (pcb->state == ESTABLISHED) {
 8015dc6:	d03a      	beq.n	8015e3e <tcp_close_shutdown+0x142>
        if (tcp_input_pcb == pcb) {
 8015dc8:	4b29      	ldr	r3, [pc, #164]	; (8015e70 <tcp_close_shutdown+0x174>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	42a3      	cmp	r3, r4
 8015dce:	d033      	beq.n	8015e38 <tcp_close_shutdown+0x13c>
          memp_free(MEMP_TCP_PCB, pcb);
 8015dd0:	4621      	mov	r1, r4
 8015dd2:	2002      	movs	r0, #2
 8015dd4:	f7fe fb3e 	bl	8014454 <memp_free>
}
 8015dd8:	2000      	movs	r0, #0
 8015dda:	b002      	add	sp, #8
 8015ddc:	bd70      	pop	{r4, r5, r6, pc}
    return tcp_close_shutdown_fin(pcb);
 8015dde:	4620      	mov	r0, r4
}
 8015de0:	b002      	add	sp, #8
 8015de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return tcp_close_shutdown_fin(pcb);
 8015de6:	f7ff ba27 	b.w	8015238 <tcp_close_shutdown_fin>
  switch (pcb->state) {
 8015dea:	4b1d      	ldr	r3, [pc, #116]	; (8015e60 <tcp_close_shutdown+0x164>)
         pcb->listener = NULL;
 8015dec:	2100      	movs	r1, #0
 8015dee:	4821      	ldr	r0, [pc, #132]	; (8015e74 <tcp_close_shutdown+0x178>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8015df0:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015df2:	b133      	cbz	r3, 8015e02 <tcp_close_shutdown+0x106>
      if (pcb->listener == lpcb) {
 8015df4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015df6:	4294      	cmp	r4, r2
         pcb->listener = NULL;
 8015df8:	bf08      	it	eq
 8015dfa:	6799      	streq	r1, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d1f8      	bne.n	8015df4 <tcp_close_shutdown+0xf8>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015e02:	3501      	adds	r5, #1
 8015e04:	2d04      	cmp	r5, #4
 8015e06:	d002      	beq.n	8015e0e <tcp_close_shutdown+0x112>
 8015e08:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 8015e0c:	e7f0      	b.n	8015df0 <tcp_close_shutdown+0xf4>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015e0e:	4621      	mov	r1, r4
 8015e10:	4819      	ldr	r0, [pc, #100]	; (8015e78 <tcp_close_shutdown+0x17c>)
 8015e12:	f7ff ff19 	bl	8015c48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015e16:	4621      	mov	r1, r4
 8015e18:	2003      	movs	r0, #3
 8015e1a:	f7fe fb1b 	bl	8014454 <memp_free>
}
 8015e1e:	2000      	movs	r0, #0
 8015e20:	b002      	add	sp, #8
 8015e22:	bd70      	pop	{r4, r5, r6, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015e24:	4613      	mov	r3, r2
 8015e26:	68e2      	ldr	r2, [r4, #12]
 8015e28:	60da      	str	r2, [r3, #12]
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	60e3      	str	r3, [r4, #12]
 8015e2e:	e7cf      	b.n	8015dd0 <tcp_close_shutdown+0xd4>
      TCP_RMV_ACTIVE(pcb);
 8015e30:	4613      	mov	r3, r2
 8015e32:	68e2      	ldr	r2, [r4, #12]
 8015e34:	60da      	str	r2, [r3, #12]
 8015e36:	e7bf      	b.n	8015db8 <tcp_close_shutdown+0xbc>
          tcp_trigger_input_pcb_close();
 8015e38:	f001 ff1e 	bl	8017c78 <tcp_trigger_input_pcb_close>
 8015e3c:	e777      	b.n	8015d2e <tcp_close_shutdown+0x32>
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015e3e:	4b0f      	ldr	r3, [pc, #60]	; (8015e7c <tcp_close_shutdown+0x180>)
        pcb->state = TIME_WAIT;
 8015e40:	210a      	movs	r1, #10
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015e42:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015e44:	7521      	strb	r1, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015e46:	60e2      	str	r2, [r4, #12]
 8015e48:	601c      	str	r4, [r3, #0]
 8015e4a:	f003 f827 	bl	8018e9c <tcp_timer_needed>
 8015e4e:	e76e      	b.n	8015d2e <tcp_close_shutdown+0x32>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015e50:	68e2      	ldr	r2, [r4, #12]
 8015e52:	601a      	str	r2, [r3, #0]
 8015e54:	e7e9      	b.n	8015e2a <tcp_close_shutdown+0x12e>
 8015e56:	bf00      	nop
 8015e58:	20033b88 	.word	0x20033b88
 8015e5c:	20033b84 	.word	0x20033b84
 8015e60:	20033b94 	.word	0x20033b94
 8015e64:	080386dc 	.word	0x080386dc
 8015e68:	080386c0 	.word	0x080386c0
 8015e6c:	08021804 	.word	0x08021804
 8015e70:	20033b9c 	.word	0x20033b9c
 8015e74:	08038794 	.word	0x08038794
 8015e78:	20033b90 	.word	0x20033b90
 8015e7c:	20033b98 	.word	0x20033b98

08015e80 <tcp_close>:
  if (pcb->state != LISTEN) {
 8015e80:	7d03      	ldrb	r3, [r0, #20]
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	d003      	beq.n	8015e8e <tcp_close+0xe>
    pcb->flags |= TF_RXCLOSED;
 8015e86:	7e83      	ldrb	r3, [r0, #26]
 8015e88:	f043 0310 	orr.w	r3, r3, #16
 8015e8c:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8015e8e:	2101      	movs	r1, #1
 8015e90:	f7ff bf34 	b.w	8015cfc <tcp_close_shutdown>

08015e94 <tcp_recv_null>:
  if (p != NULL) {
 8015e94:	b96a      	cbnz	r2, 8015eb2 <tcp_recv_null+0x1e>
  } else if (err == ERR_OK) {
 8015e96:	b953      	cbnz	r3, 8015eae <tcp_recv_null+0x1a>
  if (pcb->state != LISTEN) {
 8015e98:	7d0b      	ldrb	r3, [r1, #20]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d003      	beq.n	8015ea6 <tcp_recv_null+0x12>
    pcb->flags |= TF_RXCLOSED;
 8015e9e:	7e8b      	ldrb	r3, [r1, #26]
 8015ea0:	f043 0310 	orr.w	r3, r3, #16
 8015ea4:	768b      	strb	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 8015ea6:	4608      	mov	r0, r1
 8015ea8:	2101      	movs	r1, #1
 8015eaa:	f7ff bf27 	b.w	8015cfc <tcp_close_shutdown>
}
 8015eae:	2000      	movs	r0, #0
 8015eb0:	4770      	bx	lr
{
 8015eb2:	b510      	push	{r4, lr}
 8015eb4:	4614      	mov	r4, r2
 8015eb6:	4608      	mov	r0, r1
    tcp_recved(pcb, p->tot_len);
 8015eb8:	8911      	ldrh	r1, [r2, #8]
 8015eba:	f7ff fadf 	bl	801547c <tcp_recved>
    pbuf_free(p);
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f7fe fcc0 	bl	8014844 <pbuf_free>
}
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	bd10      	pop	{r4, pc}

08015ec8 <tcp_process_refused_data>:
{
 8015ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8015eca:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8015ecc:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015ece:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8015ed2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8015ed4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8015ed6:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015ed8:	b325      	cbz	r5, 8015f24 <tcp_process_refused_data+0x5c>
 8015eda:	4601      	mov	r1, r0
 8015edc:	4632      	mov	r2, r6
 8015ede:	6900      	ldr	r0, [r0, #16]
 8015ee0:	47a8      	blx	r5
 8015ee2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8015ee4:	b99d      	cbnz	r5, 8015f0e <tcp_process_refused_data+0x46>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8015ee6:	06bb      	lsls	r3, r7, #26
 8015ee8:	d50f      	bpl.n	8015f0a <tcp_process_refused_data+0x42>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015eea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8015eec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015ef0:	d001      	beq.n	8015ef6 <tcp_process_refused_data+0x2e>
          pcb->rcv_wnd++;
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8015ef6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8015efa:	b136      	cbz	r6, 8015f0a <tcp_process_refused_data+0x42>
 8015efc:	2300      	movs	r3, #0
 8015efe:	4621      	mov	r1, r4
 8015f00:	6920      	ldr	r0, [r4, #16]
 8015f02:	461a      	mov	r2, r3
 8015f04:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8015f06:	300d      	adds	r0, #13
 8015f08:	d008      	beq.n	8015f1c <tcp_process_refused_data+0x54>
}
 8015f0a:	4628      	mov	r0, r5
 8015f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (err == ERR_ABRT) {
 8015f0e:	350d      	adds	r5, #13
 8015f10:	d004      	beq.n	8015f1c <tcp_process_refused_data+0x54>
      return ERR_INPROGRESS;
 8015f12:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8015f16:	6766      	str	r6, [r4, #116]	; 0x74
}
 8015f18:	4628      	mov	r0, r5
 8015f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8015f1c:	f06f 050c 	mvn.w	r5, #12
}
 8015f20:	4628      	mov	r0, r5
 8015f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015f24:	462b      	mov	r3, r5
 8015f26:	4628      	mov	r0, r5
 8015f28:	4632      	mov	r2, r6
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	f7ff ffb2 	bl	8015e94 <tcp_recv_null>
 8015f30:	4605      	mov	r5, r0
 8015f32:	e7d7      	b.n	8015ee4 <tcp_process_refused_data+0x1c>

08015f34 <tcp_fasttmr>:
{
 8015f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8015f38:	4d1c      	ldr	r5, [pc, #112]	; (8015fac <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8015f3a:	2700      	movs	r7, #0
 8015f3c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015fb4 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 8015f40:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8015f42:	4e1b      	ldr	r6, [pc, #108]	; (8015fb0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8015f44:	3301      	adds	r3, #1
 8015f46:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8015f48:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8015f4c:	b1bc      	cbz	r4, 8015f7e <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015f4e:	782a      	ldrb	r2, [r5, #0]
 8015f50:	7f63      	ldrb	r3, [r4, #29]
 8015f52:	4293      	cmp	r3, r2
 8015f54:	d015      	beq.n	8015f82 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8015f56:	7ea3      	ldrb	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8015f58:	7762      	strb	r2, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8015f5a:	07d9      	lsls	r1, r3, #31
 8015f5c:	d41a      	bmi.n	8015f94 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 8015f5e:	071a      	lsls	r2, r3, #28
 8015f60:	d411      	bmi.n	8015f86 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 8015f62:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8015f64:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8015f68:	b133      	cbz	r3, 8015f78 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8015f6a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8015f6c:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8015f6e:	f7ff ffab 	bl	8015ec8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015f72:	7833      	ldrb	r3, [r6, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d1e7      	bne.n	8015f48 <tcp_fasttmr+0x14>
      pcb = next;
 8015f78:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8015f7a:	2c00      	cmp	r4, #0
 8015f7c:	d1e7      	bne.n	8015f4e <tcp_fasttmr+0x1a>
}
 8015f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 8015f82:	68e4      	ldr	r4, [r4, #12]
 8015f84:	e7e2      	b.n	8015f4c <tcp_fasttmr+0x18>
        pcb->flags &= ~(TF_CLOSEPEND);
 8015f86:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8015f8a:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 8015f8c:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8015f8e:	f7ff f953 	bl	8015238 <tcp_close_shutdown_fin>
 8015f92:	e7e6      	b.n	8015f62 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8015f94:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8015f98:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8015f9a:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8015f9c:	f002 fbb0 	bl	8018700 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015fa0:	7ea3      	ldrb	r3, [r4, #26]
 8015fa2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8015fa6:	76a3      	strb	r3, [r4, #26]
 8015fa8:	e7d9      	b.n	8015f5e <tcp_fasttmr+0x2a>
 8015faa:	bf00      	nop
 8015fac:	20021461 	.word	0x20021461
 8015fb0:	20033b84 	.word	0x20033b84
 8015fb4:	20033b88 	.word	0x20033b88

08015fb8 <tcp_tmr>:
{
 8015fb8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8015fba:	f7ff ffbb 	bl	8015f34 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8015fbe:	4a06      	ldr	r2, [pc, #24]	; (8015fd8 <tcp_tmr+0x20>)
 8015fc0:	7813      	ldrb	r3, [r2, #0]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	7013      	strb	r3, [r2, #0]
 8015fc8:	07db      	lsls	r3, r3, #31
 8015fca:	d400      	bmi.n	8015fce <tcp_tmr+0x16>
}
 8015fcc:	bd08      	pop	{r3, pc}
 8015fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8015fd2:	f7ff bc11 	b.w	80157f8 <tcp_slowtmr>
 8015fd6:	bf00      	nop
 8015fd8:	20021460 	.word	0x20021460

08015fdc <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015fdc:	7d03      	ldrb	r3, [r0, #20]
 8015fde:	2b01      	cmp	r3, #1
{
 8015fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe4:	4604      	mov	r4, r0
 8015fe6:	b083      	sub	sp, #12
 8015fe8:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015fea:	d059      	beq.n	80160a0 <tcp_abandon+0xc4>
  if (pcb->state == TIME_WAIT) {
 8015fec:	2b0a      	cmp	r3, #10
 8015fee:	d061      	beq.n	80160b4 <tcp_abandon+0xd8>
    seqno = pcb->snd_nxt;
 8015ff0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8015ff4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8015ff8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8015ffc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8016000:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 8016002:	2b00      	cmp	r3, #0
 8016004:	d13a      	bne.n	801607c <tcp_abandon+0xa0>
      if (pcb->local_port != 0) {
 8016006:	bb57      	cbnz	r7, 801605e <tcp_abandon+0x82>
    int send_rst = 0;
 8016008:	461e      	mov	r6, r3
    if (pcb->unacked != NULL) {
 801600a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801600c:	b130      	cbz	r0, 801601c <tcp_abandon+0x40>
    struct tcp_seg *next = seg->next;
 801600e:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016012:	f7ff fb15 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 8016016:	4658      	mov	r0, fp
 8016018:	2800      	cmp	r0, #0
 801601a:	d1f8      	bne.n	801600e <tcp_abandon+0x32>
    if (pcb->unsent != NULL) {
 801601c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801601e:	b130      	cbz	r0, 801602e <tcp_abandon+0x52>
    struct tcp_seg *next = seg->next;
 8016020:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016024:	f7ff fb0c 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 8016028:	4658      	mov	r0, fp
 801602a:	2800      	cmp	r0, #0
 801602c:	d1f8      	bne.n	8016020 <tcp_abandon+0x44>
    if (pcb->ooseq != NULL) {
 801602e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8016030:	b130      	cbz	r0, 8016040 <tcp_abandon+0x64>
    struct tcp_seg *next = seg->next;
 8016032:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8016036:	f7ff fb03 	bl	8015640 <tcp_seg_free>
  while (seg != NULL) {
 801603a:	4658      	mov	r0, fp
 801603c:	2800      	cmp	r0, #0
 801603e:	d1f8      	bne.n	8016032 <tcp_abandon+0x56>
    if (send_rst) {
 8016040:	bb26      	cbnz	r6, 801608c <tcp_abandon+0xb0>
    memp_free(MEMP_TCP_PCB, pcb);
 8016042:	4621      	mov	r1, r4
 8016044:	2002      	movs	r0, #2
 8016046:	f7fe fa05 	bl	8014454 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801604a:	2d00      	cmp	r5, #0
 801604c:	d048      	beq.n	80160e0 <tcp_abandon+0x104>
 801604e:	4640      	mov	r0, r8
 8016050:	f06f 010c 	mvn.w	r1, #12
 8016054:	462b      	mov	r3, r5
}
 8016056:	b003      	add	sp, #12
 8016058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801605c:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801605e:	4b22      	ldr	r3, [pc, #136]	; (80160e8 <tcp_abandon+0x10c>)
 8016060:	681a      	ldr	r2, [r3, #0]
 8016062:	42a2      	cmp	r2, r4
 8016064:	d031      	beq.n	80160ca <tcp_abandon+0xee>
 8016066:	2a00      	cmp	r2, #0
 8016068:	d031      	beq.n	80160ce <tcp_abandon+0xf2>
 801606a:	68d3      	ldr	r3, [r2, #12]
 801606c:	429c      	cmp	r4, r3
 801606e:	d033      	beq.n	80160d8 <tcp_abandon+0xfc>
 8016070:	b36b      	cbz	r3, 80160ce <tcp_abandon+0xf2>
 8016072:	68da      	ldr	r2, [r3, #12]
 8016074:	42a2      	cmp	r2, r4
 8016076:	d030      	beq.n	80160da <tcp_abandon+0xfe>
 8016078:	4613      	mov	r3, r2
 801607a:	e7f9      	b.n	8016070 <tcp_abandon+0x94>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801607c:	4621      	mov	r1, r4
 801607e:	481b      	ldr	r0, [pc, #108]	; (80160ec <tcp_abandon+0x110>)
 8016080:	f7ff fde2 	bl	8015c48 <tcp_pcb_remove>
 8016084:	4b1a      	ldr	r3, [pc, #104]	; (80160f0 <tcp_abandon+0x114>)
 8016086:	2201      	movs	r2, #1
 8016088:	701a      	strb	r2, [r3, #0]
 801608a:	e7be      	b.n	801600a <tcp_abandon+0x2e>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801608c:	8b23      	ldrh	r3, [r4, #24]
 801608e:	4651      	mov	r1, sl
 8016090:	9700      	str	r7, [sp, #0]
 8016092:	4648      	mov	r0, r9
 8016094:	9301      	str	r3, [sp, #4]
 8016096:	4622      	mov	r2, r4
 8016098:	1d23      	adds	r3, r4, #4
 801609a:	f002 fcfd 	bl	8018a98 <tcp_rst>
 801609e:	e7d0      	b.n	8016042 <tcp_abandon+0x66>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80160a0:	4b14      	ldr	r3, [pc, #80]	; (80160f4 <tcp_abandon+0x118>)
 80160a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80160a6:	4914      	ldr	r1, [pc, #80]	; (80160f8 <tcp_abandon+0x11c>)
 80160a8:	4814      	ldr	r0, [pc, #80]	; (80160fc <tcp_abandon+0x120>)
 80160aa:	f007 fa9d 	bl	801d5e8 <iprintf>
 80160ae:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 80160b0:	2b0a      	cmp	r3, #10
 80160b2:	d19d      	bne.n	8015ff0 <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80160b4:	4621      	mov	r1, r4
 80160b6:	4812      	ldr	r0, [pc, #72]	; (8016100 <tcp_abandon+0x124>)
 80160b8:	f7ff fdc6 	bl	8015c48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80160bc:	4621      	mov	r1, r4
 80160be:	2002      	movs	r0, #2
}
 80160c0:	b003      	add	sp, #12
 80160c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80160c6:	f7fe b9c5 	b.w	8014454 <memp_free>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80160ca:	68e2      	ldr	r2, [r4, #12]
 80160cc:	601a      	str	r2, [r3, #0]
 80160ce:	2300      	movs	r3, #0
    u16_t local_port = 0;
 80160d0:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80160d2:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 80160d4:	461e      	mov	r6, r3
 80160d6:	e798      	b.n	801600a <tcp_abandon+0x2e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80160d8:	4613      	mov	r3, r2
 80160da:	68e2      	ldr	r2, [r4, #12]
 80160dc:	60da      	str	r2, [r3, #12]
 80160de:	e7f6      	b.n	80160ce <tcp_abandon+0xf2>
}
 80160e0:	b003      	add	sp, #12
 80160e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e6:	bf00      	nop
 80160e8:	20033b94 	.word	0x20033b94
 80160ec:	20033b88 	.word	0x20033b88
 80160f0:	20033b84 	.word	0x20033b84
 80160f4:	080386dc 	.word	0x080386dc
 80160f8:	08038654 	.word	0x08038654
 80160fc:	08021804 	.word	0x08021804
 8016100:	20033b98 	.word	0x20033b98

08016104 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8016104:	2101      	movs	r1, #1
 8016106:	f7ff bf69 	b.w	8015fdc <tcp_abandon>
 801610a:	bf00      	nop

0801610c <tcp_accept_null>:
{
 801610c:	4608      	mov	r0, r1
  tcp_abandon(pcb, 1);
 801610e:	2101      	movs	r1, #1
{
 8016110:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8016112:	f7ff ff63 	bl	8015fdc <tcp_abandon>
}
 8016116:	f06f 000c 	mvn.w	r0, #12
 801611a:	bd08      	pop	{r3, pc}

0801611c <tcp_netif_ip_addr_changed_pcblist>:
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 801611c:	b189      	cbz	r1, 8016142 <tcp_netif_ip_addr_changed_pcblist+0x26>
{
 801611e:	b538      	push	{r3, r4, r5, lr}
 8016120:	4605      	mov	r5, r0
 8016122:	4608      	mov	r0, r1
 8016124:	e001      	b.n	801612a <tcp_netif_ip_addr_changed_pcblist+0xe>
  while (pcb != NULL) {
 8016126:	4620      	mov	r0, r4
 8016128:	b154      	cbz	r4, 8016140 <tcp_netif_ip_addr_changed_pcblist+0x24>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801612a:	6802      	ldr	r2, [r0, #0]
 801612c:	682b      	ldr	r3, [r5, #0]
 801612e:	68c4      	ldr	r4, [r0, #12]
 8016130:	429a      	cmp	r2, r3
 8016132:	d1f8      	bne.n	8016126 <tcp_netif_ip_addr_changed_pcblist+0xa>
  tcp_abandon(pcb, 1);
 8016134:	2101      	movs	r1, #1
 8016136:	f7ff ff51 	bl	8015fdc <tcp_abandon>
  while (pcb != NULL) {
 801613a:	4620      	mov	r0, r4
 801613c:	2c00      	cmp	r4, #0
 801613e:	d1f4      	bne.n	801612a <tcp_netif_ip_addr_changed_pcblist+0xe>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8016140:	bd38      	pop	{r3, r4, r5, pc}
 8016142:	4770      	bx	lr

08016144 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016144:	4b0f      	ldr	r3, [pc, #60]	; (8016184 <tcp_kill_state+0x40>)
 8016146:	6819      	ldr	r1, [r3, #0]
 8016148:	b1d1      	cbz	r1, 8016180 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801614a:	4b0f      	ldr	r3, [pc, #60]	; (8016188 <tcp_kill_state+0x44>)
  inactivity = 0;
 801614c:	2200      	movs	r2, #0
{
 801614e:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016150:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8016152:	4614      	mov	r4, r2
 8016154:	e001      	b.n	801615a <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016156:	68c9      	ldr	r1, [r1, #12]
 8016158:	b159      	cbz	r1, 8016172 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801615a:	7d0b      	ldrb	r3, [r1, #20]
 801615c:	4283      	cmp	r3, r0
 801615e:	d1fa      	bne.n	8016156 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016160:	6a0b      	ldr	r3, [r1, #32]
 8016162:	1aeb      	subs	r3, r5, r3
 8016164:	4293      	cmp	r3, r2
 8016166:	d3f6      	bcc.n	8016156 <tcp_kill_state+0x12>
 8016168:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801616a:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801616c:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801616e:	2900      	cmp	r1, #0
 8016170:	d1f3      	bne.n	801615a <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8016172:	b11c      	cbz	r4, 801617c <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8016174:	4620      	mov	r0, r4
}
 8016176:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8016178:	f7ff bf30 	b.w	8015fdc <tcp_abandon>
}
 801617c:	bc30      	pop	{r4, r5}
 801617e:	4770      	bx	lr
 8016180:	4770      	bx	lr
 8016182:	bf00      	nop
 8016184:	20033b88 	.word	0x20033b88
 8016188:	20033b8c 	.word	0x20033b8c

0801618c <tcp_alloc>:
{
 801618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801618e:	f240 6217 	movw	r2, #1559	; 0x617
{
 8016192:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016194:	4952      	ldr	r1, [pc, #328]	; (80162e0 <tcp_alloc+0x154>)
 8016196:	2002      	movs	r0, #2
 8016198:	f7fe f938 	bl	801440c <memp_malloc_fn>
  if (pcb == NULL) {
 801619c:	b340      	cbz	r0, 80161f0 <tcp_alloc+0x64>
 801619e:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80161a0:	2298      	movs	r2, #152	; 0x98
 80161a2:	2100      	movs	r1, #0
 80161a4:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 80161a6:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80161a8:	f006 feda 	bl	801cf60 <memset>
    pcb->last_timer = tcp_timer_ctr;
 80161ac:	4a4d      	ldr	r2, [pc, #308]	; (80162e4 <tcp_alloc+0x158>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80161ae:	4603      	mov	r3, r0
    pcb->tmr = tcp_ticks;
 80161b0:	484d      	ldr	r0, [pc, #308]	; (80162e8 <tcp_alloc+0x15c>)
    pcb->snd_buf = TCP_SND_BUF;
 80161b2:	f44f 6186 	mov.w	r1, #1072	; 0x430
    pcb->tmr = tcp_ticks;
 80161b6:	6805      	ldr	r5, [r0, #0]
    pcb->last_timer = tcp_timer_ctr;
 80161b8:	7810      	ldrb	r0, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80161ba:	2206      	movs	r2, #6
    pcb->prio = prio;
 80161bc:	755c      	strb	r4, [r3, #21]
    pcb->cwnd = 1;
 80161be:	2401      	movs	r4, #1
    pcb->last_timer = tcp_timer_ctr;
 80161c0:	7758      	strb	r0, [r3, #29]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80161c2:	484a      	ldr	r0, [pc, #296]	; (80162ec <tcp_alloc+0x160>)
    pcb->tmr = tcp_ticks;
 80161c4:	621d      	str	r5, [r3, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80161c6:	f8a3 1060 	strh.w	r1, [r3, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80161ca:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rtime = -1;
 80161ce:	4d48      	ldr	r5, [pc, #288]	; (80162f0 <tcp_alloc+0x164>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80161d0:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80161d2:	4948      	ldr	r1, [pc, #288]	; (80162f4 <tcp_alloc+0x168>)
    pcb->recv = tcp_recv_null;
 80161d4:	4848      	ldr	r0, [pc, #288]	; (80162f8 <tcp_alloc+0x16c>)
    pcb->ttl = TCP_TTL;
 80161d6:	729e      	strb	r6, [r3, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80161d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80161dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80161de:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80161e0:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 80161e4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80161e8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80161f0:	4b42      	ldr	r3, [pc, #264]	; (80162fc <tcp_alloc+0x170>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	b193      	cbz	r3, 801621c <tcp_alloc+0x90>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80161f6:	4a3c      	ldr	r2, [pc, #240]	; (80162e8 <tcp_alloc+0x15c>)
 80161f8:	4618      	mov	r0, r3
 80161fa:	6a19      	ldr	r1, [r3, #32]
 80161fc:	6815      	ldr	r5, [r2, #0]
 80161fe:	1a69      	subs	r1, r5, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	b143      	cbz	r3, 8016216 <tcp_alloc+0x8a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016204:	6a1a      	ldr	r2, [r3, #32]
 8016206:	1aaa      	subs	r2, r5, r2
 8016208:	428a      	cmp	r2, r1
 801620a:	d3f9      	bcc.n	8016200 <tcp_alloc+0x74>
 801620c:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801620e:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016210:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016212:	2b00      	cmp	r3, #0
 8016214:	d1f6      	bne.n	8016204 <tcp_alloc+0x78>
  tcp_abandon(pcb, 1);
 8016216:	2101      	movs	r1, #1
 8016218:	f7ff fee0 	bl	8015fdc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801621c:	f240 621d 	movw	r2, #1565	; 0x61d
 8016220:	492f      	ldr	r1, [pc, #188]	; (80162e0 <tcp_alloc+0x154>)
 8016222:	2002      	movs	r0, #2
 8016224:	f7fe f8f2 	bl	801440c <memp_malloc_fn>
    if (pcb == NULL) {
 8016228:	4603      	mov	r3, r0
 801622a:	b130      	cbz	r0, 801623a <tcp_alloc+0xae>
 801622c:	4a34      	ldr	r2, [pc, #208]	; (8016300 <tcp_alloc+0x174>)
 801622e:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8016232:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016234:	3a01      	subs	r2, #1
 8016236:	800a      	strh	r2, [r1, #0]
 8016238:	e7b2      	b.n	80161a0 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801623a:	2009      	movs	r0, #9
 801623c:	f7ff ff82 	bl	8016144 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016240:	f240 6223 	movw	r2, #1571	; 0x623
 8016244:	4926      	ldr	r1, [pc, #152]	; (80162e0 <tcp_alloc+0x154>)
 8016246:	2002      	movs	r0, #2
 8016248:	f7fe f8e0 	bl	801440c <memp_malloc_fn>
      if (pcb == NULL) {
 801624c:	4603      	mov	r3, r0
 801624e:	b138      	cbz	r0, 8016260 <tcp_alloc+0xd4>
 8016250:	4a2b      	ldr	r2, [pc, #172]	; (8016300 <tcp_alloc+0x174>)
 8016252:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8016256:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016258:	3a01      	subs	r2, #1
 801625a:	b292      	uxth	r2, r2
 801625c:	800a      	strh	r2, [r1, #0]
 801625e:	e7e9      	b.n	8016234 <tcp_alloc+0xa8>
        tcp_kill_state(CLOSING);
 8016260:	2008      	movs	r0, #8
 8016262:	f7ff ff6f 	bl	8016144 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016266:	f240 6229 	movw	r2, #1577	; 0x629
 801626a:	491d      	ldr	r1, [pc, #116]	; (80162e0 <tcp_alloc+0x154>)
 801626c:	2002      	movs	r0, #2
 801626e:	f7fe f8cd 	bl	801440c <memp_malloc_fn>
        if (pcb == NULL) {
 8016272:	4603      	mov	r3, r0
 8016274:	b138      	cbz	r0, 8016286 <tcp_alloc+0xfa>
 8016276:	4a22      	ldr	r2, [pc, #136]	; (8016300 <tcp_alloc+0x174>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016278:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801627c:	880a      	ldrh	r2, [r1, #0]
 801627e:	3a01      	subs	r2, #1
 8016280:	b292      	uxth	r2, r2
 8016282:	800a      	strh	r2, [r1, #0]
 8016284:	e7e8      	b.n	8016258 <tcp_alloc+0xcc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016286:	4a1f      	ldr	r2, [pc, #124]	; (8016304 <tcp_alloc+0x178>)
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016288:	f014 0f80 	tst.w	r4, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801628c:	6812      	ldr	r2, [r2, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801628e:	bf0c      	ite	eq
 8016290:	4625      	moveq	r5, r4
 8016292:	257f      	movne	r5, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016294:	b1a2      	cbz	r2, 80162c0 <tcp_alloc+0x134>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016296:	4914      	ldr	r1, [pc, #80]	; (80162e8 <tcp_alloc+0x15c>)
  inactivity = 0;
 8016298:	4606      	mov	r6, r0
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801629a:	680f      	ldr	r7, [r1, #0]
    if (pcb->prio <= mprio &&
 801629c:	7d50      	ldrb	r0, [r2, #21]
 801629e:	4285      	cmp	r5, r0
 80162a0:	d306      	bcc.n	80162b0 <tcp_alloc+0x124>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80162a2:	6a11      	ldr	r1, [r2, #32]
 80162a4:	1a79      	subs	r1, r7, r1
    if (pcb->prio <= mprio &&
 80162a6:	428e      	cmp	r6, r1
 80162a8:	d802      	bhi.n	80162b0 <tcp_alloc+0x124>
 80162aa:	4605      	mov	r5, r0
 80162ac:	460e      	mov	r6, r1
 80162ae:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80162b0:	68d2      	ldr	r2, [r2, #12]
 80162b2:	2a00      	cmp	r2, #0
 80162b4:	d1f2      	bne.n	801629c <tcp_alloc+0x110>
  if (inactive != NULL) {
 80162b6:	b11b      	cbz	r3, 80162c0 <tcp_alloc+0x134>
  tcp_abandon(pcb, 1);
 80162b8:	4618      	mov	r0, r3
 80162ba:	2101      	movs	r1, #1
 80162bc:	f7ff fe8e 	bl	8015fdc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80162c0:	f240 622f 	movw	r2, #1583	; 0x62f
 80162c4:	4906      	ldr	r1, [pc, #24]	; (80162e0 <tcp_alloc+0x154>)
 80162c6:	2002      	movs	r0, #2
 80162c8:	f7fe f8a0 	bl	801440c <memp_malloc_fn>
          if (pcb != NULL) {
 80162cc:	4603      	mov	r3, r0
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d08c      	beq.n	80161ec <tcp_alloc+0x60>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80162d2:	4a0b      	ldr	r2, [pc, #44]	; (8016300 <tcp_alloc+0x174>)
 80162d4:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 80162d8:	8801      	ldrh	r1, [r0, #0]
 80162da:	3901      	subs	r1, #1
 80162dc:	8001      	strh	r1, [r0, #0]
 80162de:	e7cb      	b.n	8016278 <tcp_alloc+0xec>
 80162e0:	080386dc 	.word	0x080386dc
 80162e4:	20021461 	.word	0x20021461
 80162e8:	20033b8c 	.word	0x20033b8c
 80162ec:	08600860 	.word	0x08600860
 80162f0:	0218ffff 	.word	0x0218ffff
 80162f4:	006ddd00 	.word	0x006ddd00
 80162f8:	08015e95 	.word	0x08015e95
 80162fc:	20033b98 	.word	0x20033b98
 8016300:	20033a7c 	.word	0x20033a7c
 8016304:	20033b88 	.word	0x20033b88

08016308 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8016308:	2040      	movs	r0, #64	; 0x40
 801630a:	f7ff bf3f 	b.w	801618c <tcp_alloc>
 801630e:	bf00      	nop

08016310 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016310:	2040      	movs	r0, #64	; 0x40
 8016312:	f7ff bf3b 	b.w	801618c <tcp_alloc>
 8016316:	bf00      	nop

08016318 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8016318:	4b03      	ldr	r3, [pc, #12]	; (8016328 <tcp_next_iss+0x10>)
 801631a:	4a04      	ldr	r2, [pc, #16]	; (801632c <tcp_next_iss+0x14>)
 801631c:	6818      	ldr	r0, [r3, #0]
 801631e:	6812      	ldr	r2, [r2, #0]
 8016320:	4410      	add	r0, r2
 8016322:	6018      	str	r0, [r3, #0]
}
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	20000440 	.word	0x20000440
 801632c:	20033b8c 	.word	0x20033b8c

08016330 <tcp_eff_send_mss_impl>:
{
 8016330:	b510      	push	{r4, lr}
 8016332:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8016334:	4608      	mov	r0, r1
 8016336:	f005 fa9f 	bl	801b878 <ip4_route>
    if (outif == NULL) {
 801633a:	b130      	cbz	r0, 801634a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 801633c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  if (mtu != 0) {
 801633e:	b123      	cbz	r3, 801634a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8016340:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016342:	b29b      	uxth	r3, r3
 8016344:	429c      	cmp	r4, r3
 8016346:	bf28      	it	cs
 8016348:	461c      	movcs	r4, r3
}
 801634a:	4620      	mov	r0, r4
 801634c:	bd10      	pop	{r4, pc}
 801634e:	bf00      	nop

08016350 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8016350:	b310      	cbz	r0, 8016398 <tcp_netif_ip_addr_changed+0x48>
 8016352:	6802      	ldr	r2, [r0, #0]
{
 8016354:	b538      	push	{r3, r4, r5, lr}
 8016356:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8016358:	b902      	cbnz	r2, 801635c <tcp_netif_ip_addr_changed+0xc>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 801635a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801635c:	4b0f      	ldr	r3, [pc, #60]	; (801639c <tcp_netif_ip_addr_changed+0x4c>)
 801635e:	460d      	mov	r5, r1
 8016360:	6819      	ldr	r1, [r3, #0]
 8016362:	f7ff fedb 	bl	801611c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016366:	4b0e      	ldr	r3, [pc, #56]	; (80163a0 <tcp_netif_ip_addr_changed+0x50>)
 8016368:	4620      	mov	r0, r4
 801636a:	6819      	ldr	r1, [r3, #0]
 801636c:	f7ff fed6 	bl	801611c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8016370:	2d00      	cmp	r5, #0
 8016372:	d0f2      	beq.n	801635a <tcp_netif_ip_addr_changed+0xa>
 8016374:	682b      	ldr	r3, [r5, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d0ef      	beq.n	801635a <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801637a:	4b0a      	ldr	r3, [pc, #40]	; (80163a4 <tcp_netif_ip_addr_changed+0x54>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d0eb      	beq.n	801635a <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016382:	6818      	ldr	r0, [r3, #0]
 8016384:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8016386:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016388:	4288      	cmp	r0, r1
 801638a:	d101      	bne.n	8016390 <tcp_netif_ip_addr_changed+0x40>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801638c:	6829      	ldr	r1, [r5, #0]
 801638e:	6019      	str	r1, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8016390:	4613      	mov	r3, r2
 8016392:	2a00      	cmp	r2, #0
 8016394:	d1f5      	bne.n	8016382 <tcp_netif_ip_addr_changed+0x32>
}
 8016396:	bd38      	pop	{r3, r4, r5, pc}
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	20033b88 	.word	0x20033b88
 80163a0:	20033b94 	.word	0x20033b94
 80163a4:	20033b90 	.word	0x20033b90

080163a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80163aa:	68c3      	ldr	r3, [r0, #12]
{
 80163ac:	4605      	mov	r5, r0
 80163ae:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80163b0:	8998      	ldrh	r0, [r3, #12]
 80163b2:	f7fc fe9f 	bl	80130f4 <lwip_htons>
 80163b6:	07c2      	lsls	r2, r0, #31
 80163b8:	d432      	bmi.n	8016420 <tcp_oos_insert_segment+0x78>
 80163ba:	4e1c      	ldr	r6, [pc, #112]	; (801642c <tcp_oos_insert_segment+0x84>)
 80163bc:	e005      	b.n	80163ca <tcp_oos_insert_segment+0x22>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 80163be:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80163c0:	4620      	mov	r0, r4
 80163c2:	f7ff f93d 	bl	8015640 <tcp_seg_free>
 80163c6:	463c      	mov	r4, r7
    while (next &&
 80163c8:	b1ef      	cbz	r7, 8016406 <tcp_oos_insert_segment+0x5e>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80163ca:	68e1      	ldr	r1, [r4, #12]
 80163cc:	8923      	ldrh	r3, [r4, #8]
 80163ce:	6848      	ldr	r0, [r1, #4]
 80163d0:	6837      	ldr	r7, [r6, #0]
 80163d2:	892a      	ldrh	r2, [r5, #8]
 80163d4:	4403      	add	r3, r0
 80163d6:	443a      	add	r2, r7
 80163d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80163da:	2b00      	cmp	r3, #0
 80163dc:	db15      	blt.n	801640a <tcp_oos_insert_segment+0x62>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163de:	8988      	ldrh	r0, [r1, #12]
 80163e0:	f7fc fe88 	bl	80130f4 <lwip_htons>
 80163e4:	07c3      	lsls	r3, r0, #31
 80163e6:	d5ea      	bpl.n	80163be <tcp_oos_insert_segment+0x16>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163e8:	68eb      	ldr	r3, [r5, #12]
 80163ea:	2001      	movs	r0, #1
 80163ec:	899f      	ldrh	r7, [r3, #12]
 80163ee:	f7fc fe81 	bl	80130f4 <lwip_htons>
 80163f2:	68eb      	ldr	r3, [r5, #12]
 80163f4:	4338      	orrs	r0, r7
      next = next->next;
 80163f6:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163f8:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 80163fa:	4620      	mov	r0, r4
 80163fc:	f7ff f920 	bl	8015640 <tcp_seg_free>
 8016400:	463c      	mov	r4, r7
    while (next &&
 8016402:	2f00      	cmp	r7, #0
 8016404:	d1e1      	bne.n	80163ca <tcp_oos_insert_segment+0x22>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 8016406:	602c      	str	r4, [r5, #0]
}
 8016408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801640a:	1a12      	subs	r2, r2, r0
    if (next &&
 801640c:	2a00      	cmp	r2, #0
 801640e:	ddfa      	ble.n	8016406 <tcp_oos_insert_segment+0x5e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016410:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 8016412:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016414:	b289      	uxth	r1, r1
 8016416:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016418:	f7fe fb90 	bl	8014b3c <pbuf_realloc>
  cseg->next = next;
 801641c:	602c      	str	r4, [r5, #0]
}
 801641e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 8016420:	4620      	mov	r0, r4
    next = NULL;
 8016422:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8016424:	f7ff f91a 	bl	801565c <tcp_segs_free>
  cseg->next = next;
 8016428:	602c      	str	r4, [r5, #0]
}
 801642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801642c:	20021488 	.word	0x20021488

08016430 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016430:	7d03      	ldrb	r3, [r0, #20]
 8016432:	2b03      	cmp	r3, #3
{
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	4604      	mov	r4, r0
 801643a:	b081      	sub	sp, #4
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801643c:	f240 80dd 	bls.w	80165fa <tcp_receive+0x1ca>

  if (flags & TCP_ACK) {
 8016440:	4b85      	ldr	r3, [pc, #532]	; (8016658 <tcp_receive+0x228>)
 8016442:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801667c <tcp_receive+0x24c>
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	f8d8 2000 	ldr.w	r2, [r8]
 801644c:	06db      	lsls	r3, r3, #27
 801644e:	d435      	bmi.n	80164bc <tcp_receive+0x8c>
 8016450:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8016680 <tcp_receive+0x250>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016454:	f8b9 1000 	ldrh.w	r1, [r9]
 8016458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801645a:	b1f1      	cbz	r1, 801649a <tcp_receive+0x6a>
 801645c:	7d20      	ldrb	r0, [r4, #20]
 801645e:	2806      	cmp	r0, #6
 8016460:	d81b      	bhi.n	801649a <tcp_receive+0x6a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016462:	1a9d      	subs	r5, r3, r2
 8016464:	2d01      	cmp	r5, #1
 8016466:	d406      	bmi.n	8016476 <tcp_receive+0x46>
 8016468:	1a59      	subs	r1, r3, r1
 801646a:	f1c2 0001 	rsb	r0, r2, #1
 801646e:	4401      	add	r1, r0
 8016470:	2900      	cmp	r1, #0
 8016472:	f340 81ae 	ble.w	80167d2 <tcp_receive+0x3a2>
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016476:	1ad1      	subs	r1, r2, r3
 8016478:	2900      	cmp	r1, #0
 801647a:	f2c0 81a5 	blt.w	80167c8 <tcp_receive+0x398>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801647e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8016480:	f1c1 0101 	rsb	r1, r1, #1
 8016484:	4411      	add	r1, r2
 8016486:	1ac9      	subs	r1, r1, r3
 8016488:	2900      	cmp	r1, #0
 801648a:	f340 8251 	ble.w	8016930 <tcp_receive+0x500>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801648e:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 8016490:	b001      	add	sp, #4
 8016492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8016496:	f002 b8e5 	b.w	8018664 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801649a:	1ad1      	subs	r1, r2, r3
 801649c:	2900      	cmp	r1, #0
 801649e:	db06      	blt.n	80164ae <tcp_receive+0x7e>
 80164a0:	f1c3 0301 	rsb	r3, r3, #1
 80164a4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80164a6:	1a5b      	subs	r3, r3, r1
 80164a8:	4413      	add	r3, r2
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	dd03      	ble.n	80164b6 <tcp_receive+0x86>
      tcp_ack_now(pcb);
 80164ae:	7ea3      	ldrb	r3, [r4, #26]
 80164b0:	f043 0302 	orr.w	r3, r3, #2
 80164b4:	76a3      	strb	r3, [r4, #26]
}
 80164b6:	b001      	add	sp, #4
 80164b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80164bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80164be:	4e67      	ldr	r6, [pc, #412]	; (801665c <tcp_receive+0x22c>)
 80164c0:	1a88      	subs	r0, r1, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80164c2:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
 80164c6:	6833      	ldr	r3, [r6, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80164c8:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80164ca:	6d65      	ldr	r5, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80164cc:	db7d      	blt.n	80165ca <tcp_receive+0x19a>
 80164ce:	4291      	cmp	r1, r2
 80164d0:	d078      	beq.n	80165c4 <tcp_receive+0x194>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80164d2:	429d      	cmp	r5, r3
 80164d4:	f000 80b9 	beq.w	801664a <tcp_receive+0x21a>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80164d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80164da:	1a99      	subs	r1, r3, r2
 80164dc:	2900      	cmp	r1, #0
 80164de:	f300 8094 	bgt.w	801660a <tcp_receive+0x1da>
      if (tcplen == 0) {
 80164e2:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8016680 <tcp_receive+0x250>
 80164e6:	f8b9 1000 	ldrh.w	r1, [r9]
 80164ea:	b939      	cbnz	r1, 80164fc <tcp_receive+0xcc>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80164ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80164f0:	443d      	add	r5, r7
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80164f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80164f4:	4401      	add	r1, r0
 80164f6:	42a9      	cmp	r1, r5
 80164f8:	f000 830f 	beq.w	8016b1a <tcp_receive+0x6ea>
        pcb->dupacks = 0;
 80164fc:	2200      	movs	r2, #0
 80164fe:	4f58      	ldr	r7, [pc, #352]	; (8016660 <tcp_receive+0x230>)
 8016500:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016502:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    while (pcb->unsent != NULL &&
 8016506:	2b00      	cmp	r3, #0
 8016508:	d04b      	beq.n	80165a2 <tcp_receive+0x172>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	6835      	ldr	r5, [r6, #0]
 801650e:	6858      	ldr	r0, [r3, #4]
 8016510:	f7fc fdf4 	bl	80130fc <lwip_htonl>
 8016514:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016516:	4682      	mov	sl, r0
 8016518:	68da      	ldr	r2, [r3, #12]
 801651a:	f8b3 b008 	ldrh.w	fp, [r3, #8]
 801651e:	8990      	ldrh	r0, [r2, #12]
 8016520:	f7fc fde8 	bl	80130f4 <lwip_htons>
 8016524:	eba5 050b 	sub.w	r5, r5, fp
 8016528:	f010 0003 	ands.w	r0, r0, #3
 801652c:	eba5 050a 	sub.w	r5, r5, sl
 8016530:	bf18      	it	ne
 8016532:	2001      	movne	r0, #1
 8016534:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
 8016536:	2d00      	cmp	r5, #0
 8016538:	db33      	blt.n	80165a2 <tcp_receive+0x172>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801653a:	6833      	ldr	r3, [r6, #0]
 801653c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801653e:	1a9b      	subs	r3, r3, r2
 8016540:	2b00      	cmp	r3, #0
 8016542:	dc2e      	bgt.n	80165a2 <tcp_receive+0x172>
      next = pcb->unsent;
 8016544:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8016546:	682b      	ldr	r3, [r5, #0]
 8016548:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 801654a:	2b00      	cmp	r3, #0
 801654c:	d073      	beq.n	8016636 <tcp_receive+0x206>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801654e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
 8016552:	6868      	ldr	r0, [r5, #4]
 8016554:	f7fe fb6a 	bl	8014c2c <pbuf_clen>
 8016558:	4582      	cmp	sl, r0
 801655a:	d364      	bcc.n	8016626 <tcp_receive+0x1f6>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801655c:	6868      	ldr	r0, [r5, #4]
 801655e:	f7fe fb65 	bl	8014c2c <pbuf_clen>
 8016562:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
      recv_acked += next->len;
 8016566:	892b      	ldrh	r3, [r5, #8]
 8016568:	8839      	ldrh	r1, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801656a:	1a12      	subs	r2, r2, r0
      tcp_seg_free(next);
 801656c:	4628      	mov	r0, r5
      recv_acked += next->len;
 801656e:	440b      	add	r3, r1
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8016570:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      recv_acked += next->len;
 8016574:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8016576:	f7ff f863 	bl	8015640 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 801657a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801657e:	2b00      	cmp	r3, #0
 8016580:	d04f      	beq.n	8016622 <tcp_receive+0x1f2>
 8016582:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	; 0x68
        LWIP_ASSERT("tcp_receive: valid queue length",
 8016586:	2a00      	cmp	r2, #0
 8016588:	d1bd      	bne.n	8016506 <tcp_receive+0xd6>
 801658a:	2b00      	cmp	r3, #0
 801658c:	d1bb      	bne.n	8016506 <tcp_receive+0xd6>
 801658e:	4b35      	ldr	r3, [pc, #212]	; (8016664 <tcp_receive+0x234>)
 8016590:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8016594:	4934      	ldr	r1, [pc, #208]	; (8016668 <tcp_receive+0x238>)
 8016596:	4835      	ldr	r0, [pc, #212]	; (801666c <tcp_receive+0x23c>)
 8016598:	f007 f826 	bl	801d5e8 <iprintf>
 801659c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    while (pcb->unsent != NULL &&
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d1b3      	bne.n	801650a <tcp_receive+0xda>
    pcb->snd_buf += recv_acked;
 80165a2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80165a6:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80165a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80165aa:	440b      	add	r3, r1
 80165ac:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80165b0:	b12a      	cbz	r2, 80165be <tcp_receive+0x18e>
 80165b2:	6831      	ldr	r1, [r6, #0]
 80165b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80165b6:	1a5b      	subs	r3, r3, r1
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f2c0 80db 	blt.w	8016774 <tcp_receive+0x344>
 80165be:	f8d8 2000 	ldr.w	r2, [r8]
 80165c2:	e747      	b.n	8016454 <tcp_receive+0x24>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165c4:	1ae9      	subs	r1, r5, r3
 80165c6:	2900      	cmp	r1, #0
 80165c8:	da83      	bge.n	80164d2 <tcp_receive+0xa2>
 80165ca:	4929      	ldr	r1, [pc, #164]	; (8016670 <tcp_receive+0x240>)
 80165cc:	6809      	ldr	r1, [r1, #0]
 80165ce:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80165d0:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80165d4:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80165d8:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 80165da:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 80165de:	bf38      	it	cc
 80165e0:	f8a4 105e 	strhcc.w	r1, [r4, #94]	; 0x5e
 80165e4:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80165e8:	bb41      	cbnz	r1, 801663c <tcp_receive+0x20c>
        if (pcb->persist_backoff == 0) {
 80165ea:	2a00      	cmp	r2, #0
 80165ec:	f47f af74 	bne.w	80164d8 <tcp_receive+0xa8>
          pcb->persist_cnt = 0;
 80165f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165f4:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 80165f8:	e76e      	b.n	80164d8 <tcp_receive+0xa8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80165fa:	4b1a      	ldr	r3, [pc, #104]	; (8016664 <tcp_receive+0x234>)
 80165fc:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8016600:	491c      	ldr	r1, [pc, #112]	; (8016674 <tcp_receive+0x244>)
 8016602:	481a      	ldr	r0, [pc, #104]	; (801666c <tcp_receive+0x23c>)
 8016604:	f006 fff0 	bl	801d5e8 <iprintf>
 8016608:	e71a      	b.n	8016440 <tcp_receive+0x10>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801660a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801660c:	1a9a      	subs	r2, r3, r2
 801660e:	2a00      	cmp	r2, #0
 8016610:	dd38      	ble.n	8016684 <tcp_receive+0x254>
      tcp_send_empty_ack(pcb);
 8016612:	4620      	mov	r0, r4
 8016614:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8016680 <tcp_receive+0x250>
 8016618:	f002 f824 	bl	8018664 <tcp_send_empty_ack>
 801661c:	4f10      	ldr	r7, [pc, #64]	; (8016660 <tcp_receive+0x230>)
 801661e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016620:	e771      	b.n	8016506 <tcp_receive+0xd6>
 8016622:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016624:	e76f      	b.n	8016506 <tcp_receive+0xd6>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016626:	4b0f      	ldr	r3, [pc, #60]	; (8016664 <tcp_receive+0x234>)
 8016628:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801662c:	4912      	ldr	r1, [pc, #72]	; (8016678 <tcp_receive+0x248>)
 801662e:	480f      	ldr	r0, [pc, #60]	; (801666c <tcp_receive+0x23c>)
 8016630:	f006 ffda 	bl	801d5e8 <iprintf>
 8016634:	e792      	b.n	801655c <tcp_receive+0x12c>
        pcb->unsent_oversize = 0;
 8016636:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801663a:	e788      	b.n	801654e <tcp_receive+0x11e>
      } else if (pcb->persist_backoff > 0) {
 801663c:	2a00      	cmp	r2, #0
 801663e:	f43f af4b 	beq.w	80164d8 <tcp_receive+0xa8>
          pcb->persist_backoff = 0;
 8016642:	2200      	movs	r2, #0
 8016644:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 8016648:	e746      	b.n	80164d8 <tcp_receive+0xa8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801664a:	4909      	ldr	r1, [pc, #36]	; (8016670 <tcp_receive+0x240>)
 801664c:	6809      	ldr	r1, [r1, #0]
 801664e:	89c9      	ldrh	r1, [r1, #14]
 8016650:	428f      	cmp	r7, r1
 8016652:	f4bf af41 	bcs.w	80164d8 <tcp_receive+0xa8>
 8016656:	e7bb      	b.n	80165d0 <tcp_receive+0x1a0>
 8016658:	20021468 	.word	0x20021468
 801665c:	20021464 	.word	0x20021464
 8016660:	2002147c 	.word	0x2002147c
 8016664:	08038bf8 	.word	0x08038bf8
 8016668:	08038c70 	.word	0x08038c70
 801666c:	08021804 	.word	0x08021804
 8016670:	20021490 	.word	0x20021490
 8016674:	08038c2c 	.word	0x08038c2c
 8016678:	08038c48 	.word	0x08038c48
 801667c:	20021488 	.word	0x20021488
 8016680:	2002149e 	.word	0x2002149e
      if (pcb->flags & TF_INFR) {
 8016684:	7ea2      	ldrb	r2, [r4, #26]
 8016686:	0757      	lsls	r7, r2, #29
 8016688:	d506      	bpl.n	8016698 <tcp_receive+0x268>
        pcb->flags &= ~TF_INFR;
 801668a:	f022 0204 	bic.w	r2, r2, #4
        pcb->cwnd = pcb->ssthresh;
 801668e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
        pcb->flags &= ~TF_INFR;
 8016692:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8016694:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8016698:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 801669a:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801669c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 80166a0:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80166a2:	eb02 03e0 	add.w	r3, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 80166a6:	7d22      	ldrb	r2, [r4, #20]
      pcb->nrtx = 0;
 80166a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80166ac:	2a03      	cmp	r2, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80166ae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80166b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80166b6:	d90f      	bls.n	80166d8 <tcp_receive+0x2a8>
        if (pcb->cwnd < pcb->ssthresh) {
 80166b8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80166bc:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80166c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80166c2:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80166c4:	bf9c      	itt	ls
 80166c6:	435b      	mulls	r3, r3
 80166c8:	fb93 f3f2 	sdivls	r3, r3, r2
 80166cc:	4413      	add	r3, r2
 80166ce:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80166d0:	429a      	cmp	r2, r3
 80166d2:	d201      	bcs.n	80166d8 <tcp_receive+0x2a8>
            pcb->cwnd = new_cwnd;
 80166d4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80166d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80166da:	4fb7      	ldr	r7, [pc, #732]	; (80169b8 <tcp_receive+0x588>)
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80166dc:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 80169cc <tcp_receive+0x59c>
 80166e0:	4db6      	ldr	r5, [pc, #728]	; (80169bc <tcp_receive+0x58c>)
      while (pcb->unacked != NULL &&
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f000 8314 	beq.w	8016d10 <tcp_receive+0x8e0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	6858      	ldr	r0, [r3, #4]
 80166ec:	f7fc fd06 	bl	80130fc <lwip_htonl>
 80166f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80166f2:	4683      	mov	fp, r0
 80166f4:	68da      	ldr	r2, [r3, #12]
 80166f6:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 80166fa:	8990      	ldrh	r0, [r2, #12]
 80166fc:	f7fc fcfa 	bl	80130f4 <lwip_htons>
 8016700:	6833      	ldr	r3, [r6, #0]
 8016702:	f010 0003 	ands.w	r0, r0, #3
 8016706:	ebaa 0a03 	sub.w	sl, sl, r3
 801670a:	bf18      	it	ne
 801670c:	2001      	movne	r0, #1
 801670e:	44da      	add	sl, fp
 8016710:	4450      	add	r0, sl
      while (pcb->unacked != NULL &&
 8016712:	2800      	cmp	r0, #0
 8016714:	f300 82ae 	bgt.w	8016c74 <tcp_receive+0x844>
        next = pcb->unacked;
 8016718:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801671c:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8016720:	e9da 3000 	ldrd	r3, r0, [sl]
        pcb->unacked = pcb->unacked->next;
 8016724:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8016726:	f7fe fa81 	bl	8014c2c <pbuf_clen>
 801672a:	4583      	cmp	fp, r0
 801672c:	d344      	bcc.n	80167b8 <tcp_receive+0x388>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 801672e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016732:	f7fe fa7b 	bl	8014c2c <pbuf_clen>
 8016736:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        recv_acked += next->len;
 801673a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 801673e:	8839      	ldrh	r1, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8016740:	1a12      	subs	r2, r2, r0
        tcp_seg_free(next);
 8016742:	4650      	mov	r0, sl
        recv_acked += next->len;
 8016744:	440b      	add	r3, r1
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8016746:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        recv_acked += next->len;
 801674a:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 801674c:	f7fe ff78 	bl	8015640 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8016750:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8016754:	b373      	cbz	r3, 80167b4 <tcp_receive+0x384>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8016756:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016758:	2b00      	cmp	r3, #0
 801675a:	d1c2      	bne.n	80166e2 <tcp_receive+0x2b2>
 801675c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801675e:	2b00      	cmp	r3, #0
 8016760:	f000 829a 	beq.w	8016c98 <tcp_receive+0x868>
        pcb->rtime = -1;
 8016764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016768:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801676a:	2200      	movs	r2, #0
 801676c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80169d0 <tcp_receive+0x5a0>
 8016770:	76e2      	strb	r2, [r4, #27]
 8016772:	e6c8      	b.n	8016506 <tcp_receive+0xd6>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016774:	4b92      	ldr	r3, [pc, #584]	; (80169c0 <tcp_receive+0x590>)
      m = m - (pcb->sa >> 3);
 8016776:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	1a9b      	subs	r3, r3, r2
      m = m - (pcb->sa >> 3);
 801677e:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
 8016782:	b29b      	uxth	r3, r3
      pcb->sa += m;
 8016784:	4419      	add	r1, r3
      m = m - (pcb->sa >> 3);
 8016786:	b218      	sxth	r0, r3
      pcb->sa += m;
 8016788:	b209      	sxth	r1, r1
      if (m < 0) {
 801678a:	2800      	cmp	r0, #0
      pcb->sa += m;
 801678c:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 801678e:	da01      	bge.n	8016794 <tcp_receive+0x364>
        m = -m;
 8016790:	425b      	negs	r3, r3
 8016792:	b218      	sxth	r0, r3
      m = m - (pcb->sv >> 2);
 8016794:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 8016798:	2200      	movs	r2, #0
      pcb->sv += m;
 801679a:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
      pcb->rttest = 0;
 801679e:	6362      	str	r2, [r4, #52]	; 0x34
 80167a0:	f8d8 2000 	ldr.w	r2, [r8]
      pcb->sv += m;
 80167a4:	4403      	add	r3, r0
 80167a6:	b29b      	uxth	r3, r3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80167a8:	eb03 01e1 	add.w	r1, r3, r1, asr #3
      pcb->sv += m;
 80167ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80167ae:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80167b2:	e64f      	b.n	8016454 <tcp_receive+0x24>
 80167b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80167b6:	e794      	b.n	80166e2 <tcp_receive+0x2b2>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80167b8:	464b      	mov	r3, r9
 80167ba:	f240 429e 	movw	r2, #1182	; 0x49e
 80167be:	4981      	ldr	r1, [pc, #516]	; (80169c4 <tcp_receive+0x594>)
 80167c0:	4628      	mov	r0, r5
 80167c2:	f006 ff11 	bl	801d5e8 <iprintf>
 80167c6:	e7b2      	b.n	801672e <tcp_receive+0x2fe>
        tcp_ack_now(pcb);
 80167c8:	7ea3      	ldrb	r3, [r4, #26]
 80167ca:	f043 0302 	orr.w	r3, r3, #2
 80167ce:	76a3      	strb	r3, [r4, #26]
 80167d0:	e65d      	b.n	801648e <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 80167d2:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80169c8 <tcp_receive+0x598>
      off = pcb->rcv_nxt - seqno;
 80167d6:	462f      	mov	r7, r5
      struct pbuf *p = inseg.p;
 80167d8:	f8da 6004 	ldr.w	r6, [sl, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80167dc:	2e00      	cmp	r6, #0
 80167de:	f000 81cf 	beq.w	8016b80 <tcp_receive+0x750>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80167e2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80167e6:	429d      	cmp	r5, r3
 80167e8:	f300 81c2 	bgt.w	8016b70 <tcp_receive+0x740>
      if (inseg.p->len < off) {
 80167ec:	f8da 0004 	ldr.w	r0, [sl, #4]
 80167f0:	fa1f fb85 	uxth.w	fp, r5
 80167f4:	8943      	ldrh	r3, [r0, #10]
 80167f6:	42ab      	cmp	r3, r5
 80167f8:	f280 81aa 	bge.w	8016b50 <tcp_receive+0x720>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80167fc:	8903      	ldrh	r3, [r0, #8]
 80167fe:	42ab      	cmp	r3, r5
 8016800:	f2c0 8257 	blt.w	8016cb2 <tcp_receive+0x882>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016804:	eba3 020b 	sub.w	r2, r3, fp
        while (p->len < off) {
 8016808:	8973      	ldrh	r3, [r6, #10]
 801680a:	429d      	cmp	r5, r3
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801680c:	b292      	uxth	r2, r2
        while (p->len < off) {
 801680e:	dd07      	ble.n	8016820 <tcp_receive+0x3f0>
          p->len = 0;
 8016810:	2100      	movs	r1, #0
 8016812:	8171      	strh	r1, [r6, #10]
          off -= p->len;
 8016814:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8016816:	8132      	strh	r2, [r6, #8]
          p = p->next;
 8016818:	6836      	ldr	r6, [r6, #0]
        while (p->len < off) {
 801681a:	8973      	ldrh	r3, [r6, #10]
 801681c:	42bb      	cmp	r3, r7
 801681e:	dbf8      	blt.n	8016812 <tcp_receive+0x3e2>
        if (pbuf_header(p, (s16_t)-off)) {
 8016820:	4279      	negs	r1, r7
 8016822:	4630      	mov	r0, r6
 8016824:	b209      	sxth	r1, r1
 8016826:	f7fe f805 	bl	8014834 <pbuf_header>
 801682a:	2800      	cmp	r0, #0
 801682c:	f040 8268 	bne.w	8016d00 <tcp_receive+0x8d0>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016830:	f8ba 1008 	ldrh.w	r1, [sl, #8]
 8016834:	f8d8 3000 	ldr.w	r3, [r8]
 8016838:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801683a:	440b      	add	r3, r1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801683c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801683e:	f8da 100c 	ldr.w	r1, [sl, #12]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016842:	1a9b      	subs	r3, r3, r2
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016844:	f8c8 2000 	str.w	r2, [r8]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8016848:	f8aa 3008 	strh.w	r3, [sl, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801684c:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801684e:	2800      	cmp	r0, #0
 8016850:	f43f ae1d 	beq.w	801648e <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 8016854:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016858:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 801685c:	8998      	ldrh	r0, [r3, #12]
 801685e:	f7fc fc49 	bl	80130f4 <lwip_htons>
 8016862:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8016866:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8016868:	bf18      	it	ne
 801686a:	2301      	movne	r3, #1
 801686c:	442b      	add	r3, r5
 801686e:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8016870:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8016872:	f8a9 3000 	strh.w	r3, [r9]
        if (tcplen > pcb->rcv_wnd) {
 8016876:	f0c0 824d 	bcc.w	8016d14 <tcp_receive+0x8e4>
        if (pcb->ooseq != NULL) {
 801687a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801687c:	2b00      	cmp	r3, #0
 801687e:	f000 80b0 	beq.w	80169e2 <tcp_receive+0x5b2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016882:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016886:	8998      	ldrh	r0, [r3, #12]
 8016888:	f7fc fc34 	bl	80130f4 <lwip_htons>
 801688c:	07c2      	lsls	r2, r0, #31
 801688e:	f100 80a5 	bmi.w	80169dc <tcp_receive+0x5ac>
 8016892:	f8d8 7000 	ldr.w	r7, [r8]
 8016896:	f8b9 3000 	ldrh.w	r3, [r9]
            next = pcb->ooseq;
 801689a:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801689c:	19da      	adds	r2, r3, r7
            while (next &&
 801689e:	2e00      	cmp	r6, #0
 80168a0:	f000 82ef 	beq.w	8016e82 <tcp_receive+0xa52>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80168a4:	68f0      	ldr	r0, [r6, #12]
 80168a6:	8931      	ldrh	r1, [r6, #8]
 80168a8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80168ac:	eba2 0e0c 	sub.w	lr, r2, ip
 80168b0:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 80168b4:	2900      	cmp	r1, #0
 80168b6:	da18      	bge.n	80168ea <tcp_receive+0x4ba>
 80168b8:	e282      	b.n	8016dc0 <tcp_receive+0x990>
              next = next->next;
 80168ba:	6835      	ldr	r5, [r6, #0]
              tcp_seg_free(prev);
 80168bc:	4630      	mov	r0, r6
 80168be:	f7fe febf 	bl	8015640 <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80168c2:	f8b9 3000 	ldrh.w	r3, [r9]
 80168c6:	462e      	mov	r6, r5
            while (next &&
 80168c8:	2d00      	cmp	r5, #0
 80168ca:	f000 82b6 	beq.w	8016e3a <tcp_receive+0xa0a>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80168ce:	f8d8 7000 	ldr.w	r7, [r8]
 80168d2:	68e8      	ldr	r0, [r5, #12]
 80168d4:	19da      	adds	r2, r3, r7
 80168d6:	8929      	ldrh	r1, [r5, #8]
 80168d8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80168dc:	eba2 0e0c 	sub.w	lr, r2, ip
 80168e0:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 80168e4:	2900      	cmp	r1, #0
 80168e6:	f2c0 826c 	blt.w	8016dc2 <tcp_receive+0x992>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80168ea:	8980      	ldrh	r0, [r0, #12]
 80168ec:	f7fc fc02 	bl	80130f4 <lwip_htons>
 80168f0:	07c3      	lsls	r3, r0, #31
 80168f2:	d5e2      	bpl.n	80168ba <tcp_receive+0x48a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80168f4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80168f8:	8998      	ldrh	r0, [r3, #12]
 80168fa:	f7fc fbfb 	bl	80130f4 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80168fe:	0787      	lsls	r7, r0, #30
 8016900:	d4db      	bmi.n	80168ba <tcp_receive+0x48a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016902:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016906:	2001      	movs	r0, #1
 8016908:	899d      	ldrh	r5, [r3, #12]
 801690a:	f7fc fbf3 	bl	80130f4 <lwip_htons>
 801690e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016912:	4328      	orrs	r0, r5
                tcplen = TCP_TCPLEN(&inseg);
 8016914:	f8ba 5008 	ldrh.w	r5, [sl, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016918:	b280      	uxth	r0, r0
 801691a:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801691c:	f7fc fbea 	bl	80130f4 <lwip_htons>
 8016920:	f010 0003 	ands.w	r0, r0, #3
 8016924:	bf18      	it	ne
 8016926:	2001      	movne	r0, #1
 8016928:	4405      	add	r5, r0
 801692a:	f8a9 5000 	strh.w	r5, [r9]
 801692e:	e7c4      	b.n	80168ba <tcp_receive+0x48a>
      if (pcb->rcv_nxt == seqno) {
 8016930:	429a      	cmp	r2, r3
 8016932:	f000 824b 	beq.w	8016dcc <tcp_receive+0x99c>
        tcp_send_empty_ack(pcb);
 8016936:	4620      	mov	r0, r4
 8016938:	f001 fe94 	bl	8018664 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 801693c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801693e:	2d00      	cmp	r5, #0
 8016940:	f000 8126 	beq.w	8016b90 <tcp_receive+0x760>
            if (seqno == next->tcphdr->seqno) {
 8016944:	68e8      	ldr	r0, [r5, #12]
          prev = NULL;
 8016946:	2600      	movs	r6, #0
            if (seqno == next->tcphdr->seqno) {
 8016948:	f8d8 1000 	ldr.w	r1, [r8]
 801694c:	6843      	ldr	r3, [r0, #4]
 801694e:	1c4f      	adds	r7, r1, #1
 8016950:	f101 3cff 	add.w	ip, r1, #4294967295
 8016954:	428b      	cmp	r3, r1
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016956:	eba7 0e03 	sub.w	lr, r7, r3
            if (seqno == next->tcphdr->seqno) {
 801695a:	d018      	beq.n	801698e <tcp_receive+0x55e>
              if (prev == NULL) {
 801695c:	2e00      	cmp	r6, #0
 801695e:	f000 811c 	beq.w	8016b9a <tcp_receive+0x76a>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016962:	68f2      	ldr	r2, [r6, #12]
 8016964:	6852      	ldr	r2, [r2, #4]
 8016966:	ebac 0202 	sub.w	r2, ip, r2
 801696a:	2a00      	cmp	r2, #0
 801696c:	db03      	blt.n	8016976 <tcp_receive+0x546>
 801696e:	f1be 0f00 	cmp.w	lr, #0
 8016972:	f340 820b 	ble.w	8016d8c <tcp_receive+0x95c>
              if (next->next == NULL &&
 8016976:	682a      	ldr	r2, [r5, #0]
 8016978:	462e      	mov	r6, r5
 801697a:	2a00      	cmp	r2, #0
 801697c:	f000 8119 	beq.w	8016bb2 <tcp_receive+0x782>
 8016980:	4615      	mov	r5, r2
            if (seqno == next->tcphdr->seqno) {
 8016982:	68e8      	ldr	r0, [r5, #12]
 8016984:	6843      	ldr	r3, [r0, #4]
 8016986:	428b      	cmp	r3, r1
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8016988:	eba7 0e03 	sub.w	lr, r7, r3
            if (seqno == next->tcphdr->seqno) {
 801698c:	d1e6      	bne.n	801695c <tcp_receive+0x52c>
              if (inseg.len > next->len) {
 801698e:	480e      	ldr	r0, [pc, #56]	; (80169c8 <tcp_receive+0x598>)
 8016990:	892b      	ldrh	r3, [r5, #8]
 8016992:	8902      	ldrh	r2, [r0, #8]
 8016994:	429a      	cmp	r2, r3
 8016996:	f67f ad8e 	bls.w	80164b6 <tcp_receive+0x86>
                cseg = tcp_seg_copy(&inseg);
 801699a:	f7fe fe6b 	bl	8015674 <tcp_seg_copy>
                if (cseg != NULL) {
 801699e:	2800      	cmp	r0, #0
 80169a0:	f43f ad89 	beq.w	80164b6 <tcp_receive+0x86>
                  if (prev != NULL) {
 80169a4:	2e00      	cmp	r6, #0
 80169a6:	f000 826a 	beq.w	8016e7e <tcp_receive+0xa4e>
                    prev->next = cseg;
 80169aa:	6030      	str	r0, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 80169ac:	4629      	mov	r1, r5
}
 80169ae:	b001      	add	sp, #4
 80169b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 80169b4:	f7ff bcf8 	b.w	80163a8 <tcp_oos_insert_segment>
 80169b8:	2002147c 	.word	0x2002147c
 80169bc:	08021804 	.word	0x08021804
 80169c0:	20033b8c 	.word	0x20033b8c
 80169c4:	08038c48 	.word	0x08038c48
 80169c8:	2002146c 	.word	0x2002146c
 80169cc:	08038bf8 	.word	0x08038bf8
 80169d0:	2002149e 	.word	0x2002149e
              pcb->ooseq = pcb->ooseq->next;
 80169d4:	6803      	ldr	r3, [r0, #0]
 80169d6:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80169d8:	f7fe fe32 	bl	8015640 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80169dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80169de:	2800      	cmp	r0, #0
 80169e0:	d1f8      	bne.n	80169d4 <tcp_receive+0x5a4>
 80169e2:	f8b9 3000 	ldrh.w	r3, [r9]
 80169e6:	f8d8 2000 	ldr.w	r2, [r8]
 80169ea:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80169ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 80169ee:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80169f0:	4299      	cmp	r1, r3
 80169f2:	d209      	bcs.n	8016a08 <tcp_receive+0x5d8>
 80169f4:	4bb4      	ldr	r3, [pc, #720]	; (8016cc8 <tcp_receive+0x898>)
 80169f6:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80169fa:	49b4      	ldr	r1, [pc, #720]	; (8016ccc <tcp_receive+0x89c>)
 80169fc:	48b4      	ldr	r0, [pc, #720]	; (8016cd0 <tcp_receive+0x8a0>)
 80169fe:	f006 fdf3 	bl	801d5e8 <iprintf>
 8016a02:	f8b9 3000 	ldrh.w	r3, [r9]
 8016a06:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
 8016a08:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 8016a0a:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8016a0c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8016a0e:	f7fe fd07 	bl	8015420 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8016a12:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016a16:	891a      	ldrh	r2, [r3, #8]
 8016a18:	b122      	cbz	r2, 8016a24 <tcp_receive+0x5f4>
          recv_data = inseg.p;
 8016a1a:	49ae      	ldr	r1, [pc, #696]	; (8016cd4 <tcp_receive+0x8a4>)
          inseg.p = NULL;
 8016a1c:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8016a1e:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8016a20:	f8ca 2004 	str.w	r2, [sl, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016a24:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016a28:	8998      	ldrh	r0, [r3, #12]
 8016a2a:	f7fc fb63 	bl	80130f4 <lwip_htons>
 8016a2e:	07c5      	lsls	r5, r0, #31
 8016a30:	d504      	bpl.n	8016a3c <tcp_receive+0x60c>
          recv_flags |= TF_GOT_FIN;
 8016a32:	4aa9      	ldr	r2, [pc, #676]	; (8016cd8 <tcp_receive+0x8a8>)
 8016a34:	7813      	ldrb	r3, [r2, #0]
 8016a36:	f043 0320 	orr.w	r3, r3, #32
 8016a3a:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8016a3c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8016a3e:	2d00      	cmp	r5, #0
 8016a40:	f000 8121 	beq.w	8016c86 <tcp_receive+0x856>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016a44:	68eb      	ldr	r3, [r5, #12]
 8016a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016a48:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 8016a4a:	428a      	cmp	r2, r1
 8016a4c:	f040 811b 	bne.w	8016c86 <tcp_receive+0x856>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016a50:	f8df a274 	ldr.w	sl, [pc, #628]	; 8016cc8 <tcp_receive+0x898>
 8016a54:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8016cfc <tcp_receive+0x8cc>
 8016a58:	4f9d      	ldr	r7, [pc, #628]	; (8016cd0 <tcp_receive+0x8a0>)
 8016a5a:	e03a      	b.n	8016ad2 <tcp_receive+0x6a2>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016a5c:	68eb      	ldr	r3, [r5, #12]
 8016a5e:	892e      	ldrh	r6, [r5, #8]
 8016a60:	8998      	ldrh	r0, [r3, #12]
 8016a62:	f7fc fb47 	bl	80130f4 <lwip_htons>
 8016a66:	f010 0303 	ands.w	r3, r0, #3
 8016a6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8016a6c:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016a6e:	bf18      	it	ne
 8016a70:	2301      	movne	r3, #1
 8016a72:	4433      	add	r3, r6
 8016a74:	1ad3      	subs	r3, r2, r3
 8016a76:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8016a78:	f7fe fcd2 	bl	8015420 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8016a7c:	6869      	ldr	r1, [r5, #4]
 8016a7e:	890b      	ldrh	r3, [r1, #8]
 8016a80:	b143      	cbz	r3, 8016a94 <tcp_receive+0x664>
            if (recv_data) {
 8016a82:	4b94      	ldr	r3, [pc, #592]	; (8016cd4 <tcp_receive+0x8a4>)
 8016a84:	6818      	ldr	r0, [r3, #0]
 8016a86:	2800      	cmp	r0, #0
 8016a88:	f000 80fb 	beq.w	8016c82 <tcp_receive+0x852>
              pbuf_cat(recv_data, cseg->p);
 8016a8c:	f7fe f8ee 	bl	8014c6c <pbuf_cat>
            cseg->p = NULL;
 8016a90:	2300      	movs	r3, #0
 8016a92:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016a94:	68eb      	ldr	r3, [r5, #12]
 8016a96:	8998      	ldrh	r0, [r3, #12]
 8016a98:	f7fc fb2c 	bl	80130f4 <lwip_htons>
 8016a9c:	07c0      	lsls	r0, r0, #31
 8016a9e:	d509      	bpl.n	8016ab4 <tcp_receive+0x684>
            recv_flags |= TF_GOT_FIN;
 8016aa0:	4a8d      	ldr	r2, [pc, #564]	; (8016cd8 <tcp_receive+0x8a8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016aa2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8016aa4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016aa6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8016aa8:	f043 0320 	orr.w	r3, r3, #32
 8016aac:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016aae:	d101      	bne.n	8016ab4 <tcp_receive+0x684>
              pcb->state = CLOSE_WAIT;
 8016ab0:	2307      	movs	r3, #7
 8016ab2:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8016ab4:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8016ab6:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8016ab8:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8016aba:	f7fe fdc1 	bl	8015640 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016abe:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8016ac0:	2d00      	cmp	r5, #0
 8016ac2:	f000 80e0 	beq.w	8016c86 <tcp_receive+0x856>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016ac6:	68eb      	ldr	r3, [r5, #12]
        while (pcb->ooseq != NULL &&
 8016ac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016aca:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 8016acc:	428a      	cmp	r2, r1
 8016ace:	f040 80da 	bne.w	8016c86 <tcp_receive+0x856>
          seqno = pcb->ooseq->tcphdr->seqno;
 8016ad2:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016ad6:	8998      	ldrh	r0, [r3, #12]
 8016ad8:	892e      	ldrh	r6, [r5, #8]
 8016ada:	f7fc fb0b 	bl	80130f4 <lwip_htons>
 8016ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016ae0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016ae4:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016ae6:	bf18      	it	ne
 8016ae8:	2001      	movne	r0, #1
 8016aea:	4416      	add	r6, r2
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016aec:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016af0:	4430      	add	r0, r6
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016af2:	892e      	ldrh	r6, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016af4:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016af6:	8998      	ldrh	r0, [r3, #12]
 8016af8:	f7fc fafc 	bl	80130f4 <lwip_htons>
 8016afc:	f010 0003 	ands.w	r0, r0, #3
 8016b00:	bf18      	it	ne
 8016b02:	2001      	movne	r0, #1
 8016b04:	4430      	add	r0, r6
 8016b06:	4583      	cmp	fp, r0
 8016b08:	d2a8      	bcs.n	8016a5c <tcp_receive+0x62c>
 8016b0a:	4653      	mov	r3, sl
 8016b0c:	f240 52de 	movw	r2, #1502	; 0x5de
 8016b10:	4649      	mov	r1, r9
 8016b12:	4638      	mov	r0, r7
 8016b14:	f006 fd68 	bl	801d5e8 <iprintf>
 8016b18:	e7a0      	b.n	8016a5c <tcp_receive+0x62c>
          if (pcb->rtime >= 0) {
 8016b1a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8016b1c:	0bc9      	lsrs	r1, r1, #15
 8016b1e:	f47f aced 	bne.w	80164fc <tcp_receive+0xcc>
 8016b22:	429a      	cmp	r2, r3
 8016b24:	f47f acea 	bne.w	80164fc <tcp_receive+0xcc>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016b28:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016b2c:	2bff      	cmp	r3, #255	; 0xff
 8016b2e:	f000 8188 	beq.w	8016e42 <tcp_receive+0xa12>
                ++pcb->dupacks;
 8016b32:	3301      	adds	r3, #1
 8016b34:	b2db      	uxtb	r3, r3
              if (pcb->dupacks > 3) {
 8016b36:	2b03      	cmp	r3, #3
                ++pcb->dupacks;
 8016b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8016b3c:	f200 8181 	bhi.w	8016e42 <tcp_receive+0xa12>
              } else if (pcb->dupacks == 3) {
 8016b40:	f47f ad6c 	bne.w	801661c <tcp_receive+0x1ec>
                tcp_rexmit_fast(pcb);
 8016b44:	4620      	mov	r0, r4
 8016b46:	4f65      	ldr	r7, [pc, #404]	; (8016cdc <tcp_receive+0x8ac>)
 8016b48:	f002 f860 	bl	8018c0c <tcp_rexmit_fast>
 8016b4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016b4e:	e4da      	b.n	8016506 <tcp_receive+0xd6>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8016b50:	f1cb 0100 	rsb	r1, fp, #0
 8016b54:	b209      	sxth	r1, r1
 8016b56:	f7fd fe6d 	bl	8014834 <pbuf_header>
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	f43f ae68 	beq.w	8016830 <tcp_receive+0x400>
          LWIP_ASSERT("pbuf_header failed", 0);
 8016b60:	4b59      	ldr	r3, [pc, #356]	; (8016cc8 <tcp_receive+0x898>)
 8016b62:	f240 5251 	movw	r2, #1361	; 0x551
 8016b66:	495e      	ldr	r1, [pc, #376]	; (8016ce0 <tcp_receive+0x8b0>)
 8016b68:	4859      	ldr	r0, [pc, #356]	; (8016cd0 <tcp_receive+0x8a0>)
 8016b6a:	f006 fd3d 	bl	801d5e8 <iprintf>
 8016b6e:	e65f      	b.n	8016830 <tcp_receive+0x400>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8016b70:	4b55      	ldr	r3, [pc, #340]	; (8016cc8 <tcp_receive+0x898>)
 8016b72:	f240 523d 	movw	r2, #1341	; 0x53d
 8016b76:	495b      	ldr	r1, [pc, #364]	; (8016ce4 <tcp_receive+0x8b4>)
 8016b78:	4855      	ldr	r0, [pc, #340]	; (8016cd0 <tcp_receive+0x8a0>)
 8016b7a:	f006 fd35 	bl	801d5e8 <iprintf>
 8016b7e:	e635      	b.n	80167ec <tcp_receive+0x3bc>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016b80:	4b51      	ldr	r3, [pc, #324]	; (8016cc8 <tcp_receive+0x898>)
 8016b82:	f240 523c 	movw	r2, #1340	; 0x53c
 8016b86:	4958      	ldr	r1, [pc, #352]	; (8016ce8 <tcp_receive+0x8b8>)
 8016b88:	4851      	ldr	r0, [pc, #324]	; (8016cd0 <tcp_receive+0x8a0>)
 8016b8a:	f006 fd2d 	bl	801d5e8 <iprintf>
 8016b8e:	e628      	b.n	80167e2 <tcp_receive+0x3b2>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016b90:	4856      	ldr	r0, [pc, #344]	; (8016cec <tcp_receive+0x8bc>)
 8016b92:	f7fe fd6f 	bl	8015674 <tcp_seg_copy>
 8016b96:	6720      	str	r0, [r4, #112]	; 0x70
 8016b98:	e48d      	b.n	80164b6 <tcp_receive+0x86>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016b9a:	1aca      	subs	r2, r1, r3
 8016b9c:	2a00      	cmp	r2, #0
 8016b9e:	f6bf aeea 	bge.w	8016976 <tcp_receive+0x546>
                  cseg = tcp_seg_copy(&inseg);
 8016ba2:	4852      	ldr	r0, [pc, #328]	; (8016cec <tcp_receive+0x8bc>)
 8016ba4:	f7fe fd66 	bl	8015674 <tcp_seg_copy>
                  if (cseg != NULL) {
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	f43f ac84 	beq.w	80164b6 <tcp_receive+0x86>
                    pcb->ooseq = cseg;
 8016bae:	6720      	str	r0, [r4, #112]	; 0x70
 8016bb0:	e6fc      	b.n	80169ac <tcp_receive+0x57c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016bb2:	1acb      	subs	r3, r1, r3
              if (next->next == NULL &&
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f77f ac7e 	ble.w	80164b6 <tcp_receive+0x86>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016bba:	8980      	ldrh	r0, [r0, #12]
 8016bbc:	f7fc fa9a 	bl	80130f4 <lwip_htons>
 8016bc0:	07c2      	lsls	r2, r0, #31
 8016bc2:	f53f ac78 	bmi.w	80164b6 <tcp_receive+0x86>
                next->next = tcp_seg_copy(&inseg);
 8016bc6:	4849      	ldr	r0, [pc, #292]	; (8016cec <tcp_receive+0x8bc>)
 8016bc8:	f7fe fd54 	bl	8015674 <tcp_seg_copy>
 8016bcc:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	f43f ac71 	beq.w	80164b6 <tcp_receive+0x86>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016bd4:	68eb      	ldr	r3, [r5, #12]
 8016bd6:	892a      	ldrh	r2, [r5, #8]
 8016bd8:	6859      	ldr	r1, [r3, #4]
 8016bda:	f8d8 3000 	ldr.w	r3, [r8]
 8016bde:	440a      	add	r2, r1
 8016be0:	1ad2      	subs	r2, r2, r3
 8016be2:	2a00      	cmp	r2, #0
 8016be4:	dd05      	ble.n	8016bf2 <tcp_receive+0x7c2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016be6:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8016be8:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016bea:	b299      	uxth	r1, r3
 8016bec:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8016bee:	f7fd ffa5 	bl	8014b3c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016bf2:	f8d8 2000 	ldr.w	r2, [r8]
 8016bf6:	f8b9 3000 	ldrh.w	r3, [r9]
 8016bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016bfc:	4413      	add	r3, r2
 8016bfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016c00:	1a5b      	subs	r3, r3, r1
 8016c02:	1a9b      	subs	r3, r3, r2
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	f77f ac56 	ble.w	80164b6 <tcp_receive+0x86>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016c0a:	682b      	ldr	r3, [r5, #0]
 8016c0c:	68db      	ldr	r3, [r3, #12]
 8016c0e:	8998      	ldrh	r0, [r3, #12]
 8016c10:	f7fc fa70 	bl	80130f4 <lwip_htons>
 8016c14:	07c3      	lsls	r3, r0, #31
 8016c16:	f100 8136 	bmi.w	8016e86 <tcp_receive+0xa56>
 8016c1a:	682a      	ldr	r2, [r5, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016c1c:	f8d8 0000 	ldr.w	r0, [r8]
 8016c20:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8016c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c24:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8016c26:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016c28:	4419      	add	r1, r3
 8016c2a:	b289      	uxth	r1, r1
 8016c2c:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016c2e:	f7fd ff85 	bl	8014b3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016c32:	682b      	ldr	r3, [r5, #0]
 8016c34:	68da      	ldr	r2, [r3, #12]
 8016c36:	891d      	ldrh	r5, [r3, #8]
 8016c38:	8990      	ldrh	r0, [r2, #12]
 8016c3a:	f7fc fa5b 	bl	80130f4 <lwip_htons>
 8016c3e:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c42:	f8d8 1000 	ldr.w	r1, [r8]
                    tcplen = TCP_TCPLEN(next->next);
 8016c46:	bf18      	it	ne
 8016c48:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8016c4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8016c4e:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c50:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8016c52:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c54:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8016c56:	f8a9 3000 	strh.w	r3, [r9]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c5a:	4291      	cmp	r1, r2
 8016c5c:	f43f ac2b 	beq.w	80164b6 <tcp_receive+0x86>
 8016c60:	4b19      	ldr	r3, [pc, #100]	; (8016cc8 <tcp_receive+0x898>)
 8016c62:	f240 627b 	movw	r2, #1659	; 0x67b
 8016c66:	4922      	ldr	r1, [pc, #136]	; (8016cf0 <tcp_receive+0x8c0>)
 8016c68:	4819      	ldr	r0, [pc, #100]	; (8016cd0 <tcp_receive+0x8a0>)
}
 8016c6a:	b001      	add	sp, #4
 8016c6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016c70:	f006 bcba 	b.w	801d5e8 <iprintf>
      if (pcb->unacked == NULL) {
 8016c74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d04a      	beq.n	8016d10 <tcp_receive+0x8e0>
        pcb->rtime = 0;
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016c7e:	8622      	strh	r2, [r4, #48]	; 0x30
 8016c80:	e573      	b.n	801676a <tcp_receive+0x33a>
              recv_data = cseg->p;
 8016c82:	6019      	str	r1, [r3, #0]
 8016c84:	e704      	b.n	8016a90 <tcp_receive+0x660>
        tcp_ack(pcb);
 8016c86:	7ea3      	ldrb	r3, [r4, #26]
 8016c88:	07d9      	lsls	r1, r3, #31
 8016c8a:	d50e      	bpl.n	8016caa <tcp_receive+0x87a>
 8016c8c:	f023 0301 	bic.w	r3, r3, #1
 8016c90:	f043 0302 	orr.w	r3, r3, #2
 8016c94:	76a3      	strb	r3, [r4, #26]
 8016c96:	e40e      	b.n	80164b6 <tcp_receive+0x86>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8016c98:	464b      	mov	r3, r9
 8016c9a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8016c9e:	4915      	ldr	r1, [pc, #84]	; (8016cf4 <tcp_receive+0x8c4>)
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f006 fca1 	bl	801d5e8 <iprintf>
 8016ca6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016ca8:	e51b      	b.n	80166e2 <tcp_receive+0x2b2>
        tcp_ack(pcb);
 8016caa:	f043 0301 	orr.w	r3, r3, #1
 8016cae:	76a3      	strb	r3, [r4, #26]
 8016cb0:	e401      	b.n	80164b6 <tcp_receive+0x86>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016cb2:	4b05      	ldr	r3, [pc, #20]	; (8016cc8 <tcp_receive+0x898>)
 8016cb4:	f240 523f 	movw	r2, #1343	; 0x53f
 8016cb8:	490f      	ldr	r1, [pc, #60]	; (8016cf8 <tcp_receive+0x8c8>)
 8016cba:	4805      	ldr	r0, [pc, #20]	; (8016cd0 <tcp_receive+0x8a0>)
 8016cbc:	f006 fc94 	bl	801d5e8 <iprintf>
 8016cc0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016cc4:	891b      	ldrh	r3, [r3, #8]
 8016cc6:	e59d      	b.n	8016804 <tcp_receive+0x3d4>
 8016cc8:	08038bf8 	.word	0x08038bf8
 8016ccc:	08038d48 	.word	0x08038d48
 8016cd0:	08021804 	.word	0x08021804
 8016cd4:	20021480 	.word	0x20021480
 8016cd8:	20021484 	.word	0x20021484
 8016cdc:	2002147c 	.word	0x2002147c
 8016ce0:	08038cc0 	.word	0x08038cc0
 8016ce4:	08038ca0 	.word	0x08038ca0
 8016ce8:	08038c90 	.word	0x08038c90
 8016cec:	2002146c 	.word	0x2002146c
 8016cf0:	08038cd4 	.word	0x08038cd4
 8016cf4:	08038c70 	.word	0x08038c70
 8016cf8:	08038cb0 	.word	0x08038cb0
 8016cfc:	08038d68 	.word	0x08038d68
          LWIP_ASSERT("pbuf_header failed", 0);
 8016d00:	4b69      	ldr	r3, [pc, #420]	; (8016ea8 <tcp_receive+0xa78>)
 8016d02:	f240 524c 	movw	r2, #1356	; 0x54c
 8016d06:	4969      	ldr	r1, [pc, #420]	; (8016eac <tcp_receive+0xa7c>)
 8016d08:	4869      	ldr	r0, [pc, #420]	; (8016eb0 <tcp_receive+0xa80>)
 8016d0a:	f006 fc6d 	bl	801d5e8 <iprintf>
 8016d0e:	e58f      	b.n	8016830 <tcp_receive+0x400>
 8016d10:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016d12:	e527      	b.n	8016764 <tcp_receive+0x334>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d14:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016d18:	8998      	ldrh	r0, [r3, #12]
 8016d1a:	f7fc f9eb 	bl	80130f4 <lwip_htons>
 8016d1e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016d20:	f8da 300c 	ldr.w	r3, [sl, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d24:	f100 809b 	bmi.w	8016e5e <tcp_receive+0xa2e>
 8016d28:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016d2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016d2c:	f8aa 3008 	strh.w	r3, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016d30:	f7fc f9e0 	bl	80130f4 <lwip_htons>
 8016d34:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8016d36:	f8ba 1008 	ldrh.w	r1, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016d3a:	d503      	bpl.n	8016d44 <tcp_receive+0x914>
            inseg.len -= 1;
 8016d3c:	3901      	subs	r1, #1
 8016d3e:	b289      	uxth	r1, r1
 8016d40:	f8aa 1008 	strh.w	r1, [sl, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8016d44:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016d48:	f7fd fef8 	bl	8014b3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016d4c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016d50:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 8016d54:	8998      	ldrh	r0, [r3, #12]
 8016d56:	f7fc f9cd 	bl	80130f4 <lwip_htons>
 8016d5a:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d5e:	f8d8 2000 	ldr.w	r2, [r8]
          tcplen = TCP_TCPLEN(&inseg);
 8016d62:	bf18      	it	ne
 8016d64:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d66:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8016d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8016d6a:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d6c:	4431      	add	r1, r6
          tcplen = TCP_TCPLEN(&inseg);
 8016d6e:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d70:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8016d72:	f8a9 3000 	strh.w	r3, [r9]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d76:	428a      	cmp	r2, r1
 8016d78:	f43f ad7f 	beq.w	801687a <tcp_receive+0x44a>
 8016d7c:	4b4a      	ldr	r3, [pc, #296]	; (8016ea8 <tcp_receive+0xa78>)
 8016d7e:	f240 527f 	movw	r2, #1407	; 0x57f
 8016d82:	494c      	ldr	r1, [pc, #304]	; (8016eb4 <tcp_receive+0xa84>)
 8016d84:	484a      	ldr	r0, [pc, #296]	; (8016eb0 <tcp_receive+0xa80>)
 8016d86:	f006 fc2f 	bl	801d5e8 <iprintf>
 8016d8a:	e576      	b.n	801687a <tcp_receive+0x44a>
                  cseg = tcp_seg_copy(&inseg);
 8016d8c:	484a      	ldr	r0, [pc, #296]	; (8016eb8 <tcp_receive+0xa88>)
 8016d8e:	f7fe fc71 	bl	8015674 <tcp_seg_copy>
                  if (cseg != NULL) {
 8016d92:	4604      	mov	r4, r0
 8016d94:	2800      	cmp	r0, #0
 8016d96:	f43f ab8e 	beq.w	80164b6 <tcp_receive+0x86>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016d9a:	68f3      	ldr	r3, [r6, #12]
 8016d9c:	8932      	ldrh	r2, [r6, #8]
 8016d9e:	6859      	ldr	r1, [r3, #4]
 8016da0:	f8d8 3000 	ldr.w	r3, [r8]
 8016da4:	440a      	add	r2, r1
 8016da6:	1ad2      	subs	r2, r2, r3
 8016da8:	2a00      	cmp	r2, #0
 8016daa:	dd05      	ble.n	8016db8 <tcp_receive+0x988>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016dac:	1a5b      	subs	r3, r3, r1
                      pbuf_realloc(prev->p, prev->len);
 8016dae:	6870      	ldr	r0, [r6, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016db0:	b299      	uxth	r1, r3
 8016db2:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016db4:	f7fd fec2 	bl	8014b3c <pbuf_realloc>
                    prev->next = cseg;
 8016db8:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016dba:	4629      	mov	r1, r5
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	e5f6      	b.n	80169ae <tcp_receive+0x57e>
            while (next &&
 8016dc0:	4635      	mov	r5, r6
            if (next &&
 8016dc2:	f1be 0f00 	cmp.w	lr, #0
 8016dc6:	dc04      	bgt.n	8016dd2 <tcp_receive+0x9a2>
            pcb->ooseq = next;
 8016dc8:	6725      	str	r5, [r4, #112]	; 0x70
 8016dca:	e60f      	b.n	80169ec <tcp_receive+0x5bc>
 8016dcc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8016eb8 <tcp_receive+0xa88>
 8016dd0:	e540      	b.n	8016854 <tcp_receive+0x424>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016dd2:	ebac 0707 	sub.w	r7, ip, r7
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016dd6:	f8da 300c 	ldr.w	r3, [sl, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016dda:	f8aa 7008 	strh.w	r7, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016dde:	8998      	ldrh	r0, [r3, #12]
 8016de0:	f7fc f988 	bl	80130f4 <lwip_htons>
 8016de4:	0786      	lsls	r6, r0, #30
                inseg.len -= 1;
 8016de6:	f8ba 1008 	ldrh.w	r1, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016dea:	d503      	bpl.n	8016df4 <tcp_receive+0x9c4>
                inseg.len -= 1;
 8016dec:	3901      	subs	r1, #1
 8016dee:	b289      	uxth	r1, r1
 8016df0:	f8aa 1008 	strh.w	r1, [sl, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8016df4:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016df8:	f7fd fea0 	bl	8014b3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016dfc:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016e00:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8016e04:	8998      	ldrh	r0, [r3, #12]
 8016e06:	f7fc f975 	bl	80130f4 <lwip_htons>
 8016e0a:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e0e:	f8d8 2000 	ldr.w	r2, [r8]
              tcplen = TCP_TCPLEN(&inseg);
 8016e12:	bf18      	it	ne
 8016e14:	2301      	movne	r3, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e16:	68ee      	ldr	r6, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8016e18:	443b      	add	r3, r7
 8016e1a:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e1c:	1899      	adds	r1, r3, r2
              tcplen = TCP_TCPLEN(&inseg);
 8016e1e:	f8a9 3000 	strh.w	r3, [r9]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e22:	6872      	ldr	r2, [r6, #4]
 8016e24:	4291      	cmp	r1, r2
 8016e26:	d0cf      	beq.n	8016dc8 <tcp_receive+0x998>
 8016e28:	4b1f      	ldr	r3, [pc, #124]	; (8016ea8 <tcp_receive+0xa78>)
 8016e2a:	f240 52af 	movw	r2, #1455	; 0x5af
 8016e2e:	4923      	ldr	r1, [pc, #140]	; (8016ebc <tcp_receive+0xa8c>)
 8016e30:	481f      	ldr	r0, [pc, #124]	; (8016eb0 <tcp_receive+0xa80>)
 8016e32:	f006 fbd9 	bl	801d5e8 <iprintf>
 8016e36:	f8b9 3000 	ldrh.w	r3, [r9]
 8016e3a:	f8d8 2000 	ldr.w	r2, [r8]
 8016e3e:	441a      	add	r2, r3
 8016e40:	e7c2      	b.n	8016dc8 <tcp_receive+0x998>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8016e42:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8016e46:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016e48:	4413      	add	r3, r2
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	f4bf abe5 	bcs.w	801661c <tcp_receive+0x1ec>
                  pcb->cwnd += pcb->mss;
 8016e52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8016e56:	4f1a      	ldr	r7, [pc, #104]	; (8016ec0 <tcp_receive+0xa90>)
 8016e58:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016e5a:	f7ff bb54 	b.w	8016506 <tcp_receive+0xd6>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016e5e:	899d      	ldrh	r5, [r3, #12]
 8016e60:	4628      	mov	r0, r5
 8016e62:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8016e66:	f7fc f945 	bl	80130f4 <lwip_htons>
 8016e6a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8016e6e:	f7fc f941 	bl	80130f4 <lwip_htons>
 8016e72:	4328      	orrs	r0, r5
 8016e74:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016e78:	b280      	uxth	r0, r0
 8016e7a:	8198      	strh	r0, [r3, #12]
 8016e7c:	e755      	b.n	8016d2a <tcp_receive+0x8fa>
                    pcb->ooseq = cseg;
 8016e7e:	6720      	str	r0, [r4, #112]	; 0x70
 8016e80:	e594      	b.n	80169ac <tcp_receive+0x57c>
            while (next &&
 8016e82:	4635      	mov	r5, r6
 8016e84:	e7a0      	b.n	8016dc8 <tcp_receive+0x998>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016e86:	682b      	ldr	r3, [r5, #0]
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	899e      	ldrh	r6, [r3, #12]
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8016e92:	f7fc f92f 	bl	80130f4 <lwip_htons>
 8016e96:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8016e9a:	f7fc f92b 	bl	80130f4 <lwip_htons>
 8016e9e:	682a      	ldr	r2, [r5, #0]
 8016ea0:	4306      	orrs	r6, r0
 8016ea2:	68d3      	ldr	r3, [r2, #12]
 8016ea4:	819e      	strh	r6, [r3, #12]
 8016ea6:	e6b9      	b.n	8016c1c <tcp_receive+0x7ec>
 8016ea8:	08038bf8 	.word	0x08038bf8
 8016eac:	08038cc0 	.word	0x08038cc0
 8016eb0:	08021804 	.word	0x08021804
 8016eb4:	08038cd4 	.word	0x08038cd4
 8016eb8:	2002146c 	.word	0x2002146c
 8016ebc:	08038d0c 	.word	0x08038d0c
 8016ec0:	2002147c 	.word	0x2002147c

08016ec4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8016ec4:	490d      	ldr	r1, [pc, #52]	; (8016efc <tcp_getoptbyte+0x38>)
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8016ec6:	4a0e      	ldr	r2, [pc, #56]	; (8016f00 <tcp_getoptbyte+0x3c>)
 8016ec8:	880b      	ldrh	r3, [r1, #0]
 8016eca:	6810      	ldr	r0, [r2, #0]
 8016ecc:	1c5a      	adds	r2, r3, #1
{
 8016ece:	b410      	push	{r4}
 8016ed0:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8016ed2:	b150      	cbz	r0, 8016eea <tcp_getoptbyte+0x26>
 8016ed4:	4c0b      	ldr	r4, [pc, #44]	; (8016f04 <tcp_getoptbyte+0x40>)
 8016ed6:	8824      	ldrh	r4, [r4, #0]
 8016ed8:	429c      	cmp	r4, r3
 8016eda:	d806      	bhi.n	8016eea <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8016edc:	1b1b      	subs	r3, r3, r4
 8016ede:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
  }
}
 8016ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return tcphdr_opt2[idx];
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	5cc0      	ldrb	r0, [r0, r3]
}
 8016ee8:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8016eea:	4807      	ldr	r0, [pc, #28]	; (8016f08 <tcp_getoptbyte+0x44>)
    return opts[tcp_optidx++];
 8016eec:	800a      	strh	r2, [r1, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8016eee:	6802      	ldr	r2, [r0, #0]
}
 8016ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return opts[tcp_optidx++];
 8016ef4:	4413      	add	r3, r2
 8016ef6:	7d18      	ldrb	r0, [r3, #20]
}
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop
 8016efc:	2002148c 	.word	0x2002148c
 8016f00:	20021498 	.word	0x20021498
 8016f04:	20021494 	.word	0x20021494
 8016f08:	20021490 	.word	0x20021490

08016f0c <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8016f0c:	4a1b      	ldr	r2, [pc, #108]	; (8016f7c <tcp_parseopt.isra.1.part.2+0x70>)
 8016f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016f10:	4c1b      	ldr	r4, [pc, #108]	; (8016f80 <tcp_parseopt.isra.1.part.2+0x74>)
 8016f12:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8016f14:	4605      	mov	r5, r0
 8016f16:	8816      	ldrh	r6, [r2, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016f18:	8023      	strh	r3, [r4, #0]
 8016f1a:	42b3      	cmp	r3, r6
 8016f1c:	d220      	bcs.n	8016f60 <tcp_parseopt.isra.1.part.2+0x54>
      u8_t opt = tcp_getoptbyte();
 8016f1e:	f7ff ffd1 	bl	8016ec4 <tcp_getoptbyte>
      switch (opt) {
 8016f22:	2801      	cmp	r0, #1
 8016f24:	d027      	beq.n	8016f76 <tcp_parseopt.isra.1.part.2+0x6a>
 8016f26:	d31b      	bcc.n	8016f60 <tcp_parseopt.isra.1.part.2+0x54>
 8016f28:	2802      	cmp	r0, #2
 8016f2a:	d11a      	bne.n	8016f62 <tcp_parseopt.isra.1.part.2+0x56>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016f2c:	f7ff ffca 	bl	8016ec4 <tcp_getoptbyte>
 8016f30:	2804      	cmp	r0, #4
 8016f32:	d115      	bne.n	8016f60 <tcp_parseopt.isra.1.part.2+0x54>
 8016f34:	8823      	ldrh	r3, [r4, #0]
 8016f36:	3301      	adds	r3, #1
 8016f38:	42b3      	cmp	r3, r6
 8016f3a:	da11      	bge.n	8016f60 <tcp_parseopt.isra.1.part.2+0x54>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8016f3c:	f7ff ffc2 	bl	8016ec4 <tcp_getoptbyte>
 8016f40:	0200      	lsls	r0, r0, #8
 8016f42:	b287      	uxth	r7, r0
        mss |= tcp_getoptbyte();
 8016f44:	f7ff ffbe 	bl	8016ec4 <tcp_getoptbyte>
 8016f48:	8823      	ldrh	r3, [r4, #0]
 8016f4a:	4338      	orrs	r0, r7
 8016f4c:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016f4e:	1e42      	subs	r2, r0, #1
 8016f50:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 8016f54:	bf28      	it	cs
 8016f56:	f44f 7006 	movcs.w	r0, #536	; 0x218
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016f5a:	42b3      	cmp	r3, r6
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016f5c:	8028      	strh	r0, [r5, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016f5e:	d3de      	bcc.n	8016f1e <tcp_parseopt.isra.1.part.2+0x12>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 8016f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data = tcp_getoptbyte();
 8016f62:	f7ff ffaf 	bl	8016ec4 <tcp_getoptbyte>
        if (data < 2) {
 8016f66:	2801      	cmp	r0, #1
 8016f68:	d9fa      	bls.n	8016f60 <tcp_parseopt.isra.1.part.2+0x54>
        tcp_optidx += data - 2;
 8016f6a:	8823      	ldrh	r3, [r4, #0]
 8016f6c:	3b02      	subs	r3, #2
 8016f6e:	4403      	add	r3, r0
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	8023      	strh	r3, [r4, #0]
 8016f74:	e7d1      	b.n	8016f1a <tcp_parseopt.isra.1.part.2+0xe>
 8016f76:	8823      	ldrh	r3, [r4, #0]
 8016f78:	e7cf      	b.n	8016f1a <tcp_parseopt.isra.1.part.2+0xe>
 8016f7a:	bf00      	nop
 8016f7c:	2002149c 	.word	0x2002149c
 8016f80:	2002148c 	.word	0x2002148c

08016f84 <tcp_input_delayed_close.part.3>:
tcp_input_delayed_close(struct tcp_pcb *pcb)
 8016f84:	b510      	push	{r4, lr}
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f86:	7e83      	ldrb	r3, [r0, #26]
tcp_input_delayed_close(struct tcp_pcb *pcb)
 8016f88:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f8a:	06db      	lsls	r3, r3, #27
 8016f8c:	d406      	bmi.n	8016f9c <tcp_input_delayed_close.part.3+0x18>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016f8e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016f92:	b11b      	cbz	r3, 8016f9c <tcp_input_delayed_close.part.3+0x18>
 8016f94:	f06f 010e 	mvn.w	r1, #14
 8016f98:	6900      	ldr	r0, [r0, #16]
 8016f9a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016f9c:	4621      	mov	r1, r4
 8016f9e:	4804      	ldr	r0, [pc, #16]	; (8016fb0 <tcp_input_delayed_close.part.3+0x2c>)
 8016fa0:	f7fe fe52 	bl	8015c48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8016fa4:	4621      	mov	r1, r4
 8016fa6:	2002      	movs	r0, #2
 8016fa8:	f7fd fa54 	bl	8014454 <memp_free>
}
 8016fac:	2001      	movs	r0, #1
 8016fae:	bd10      	pop	{r4, pc}
 8016fb0:	20033b88 	.word	0x20033b88

08016fb4 <tcp_input>:
{
 8016fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TCP_STATS_INC(tcp.recv);
 8016fb8:	4cc0      	ldr	r4, [pc, #768]	; (80172bc <tcp_input+0x308>)
{
 8016fba:	b085      	sub	sp, #20
  if (p->len < TCP_HLEN) {
 8016fbc:	8942      	ldrh	r2, [r0, #10]
{
 8016fbe:	4605      	mov	r5, r0
  TCP_STATS_INC(tcp.recv);
 8016fc0:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 8016fc4:	6841      	ldr	r1, [r0, #4]
  if (p->len < TCP_HLEN) {
 8016fc6:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 8016fc8:	4ebd      	ldr	r6, [pc, #756]	; (80172c0 <tcp_input+0x30c>)
  TCP_STATS_INC(tcp.recv);
 8016fca:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 8016fce:	6031      	str	r1, [r6, #0]
  TCP_STATS_INC(tcp.recv);
 8016fd0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 8016fd4:	d80f      	bhi.n	8016ff6 <tcp_input+0x42>
      TCP_STATS_INC(tcp.lenerr);
 8016fd6:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8016fda:	3301      	adds	r3, #1
 8016fdc:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 8016fe0:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
  pbuf_free(p);
 8016fe4:	4628      	mov	r0, r5
  TCP_STATS_INC(tcp.drop);
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
 8016fec:	b005      	add	sp, #20
 8016fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8016ff2:	f7fd bc27 	b.w	8014844 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ff6:	4fb3      	ldr	r7, [pc, #716]	; (80172c4 <tcp_input+0x310>)
 8016ff8:	6839      	ldr	r1, [r7, #0]
 8016ffa:	6978      	ldr	r0, [r7, #20]
 8016ffc:	f004 fe62 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 8017000:	b9b0      	cbnz	r0, 8017030 <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017008:	2be0      	cmp	r3, #224	; 0xe0
 801700a:	d011      	beq.n	8017030 <tcp_input+0x7c>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801700c:	f107 0014 	add.w	r0, r7, #20
 8017010:	892a      	ldrh	r2, [r5, #8]
 8017012:	f107 0310 	add.w	r3, r7, #16
 8017016:	2106      	movs	r1, #6
 8017018:	9000      	str	r0, [sp, #0]
 801701a:	4628      	mov	r0, r5
 801701c:	f7fc fdcc 	bl	8013bb8 <ip_chksum_pseudo>
    if (chksum != 0) {
 8017020:	4680      	mov	r8, r0
 8017022:	b158      	cbz	r0, 801703c <tcp_input+0x88>
      TCP_STATS_INC(tcp.chkerr);
 8017024:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8017028:	3301      	adds	r3, #1
 801702a:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
      goto dropped;
 801702e:	e7d7      	b.n	8016fe0 <tcp_input+0x2c>
    TCP_STATS_INC(tcp.proterr);
 8017030:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8017034:	3301      	adds	r3, #1
 8017036:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 801703a:	e7d1      	b.n	8016fe0 <tcp_input+0x2c>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801703c:	6833      	ldr	r3, [r6, #0]
 801703e:	8998      	ldrh	r0, [r3, #12]
 8017040:	f7fc f858 	bl	80130f4 <lwip_htons>
 8017044:	0a80      	lsrs	r0, r0, #10
 8017046:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801704a:	2813      	cmp	r0, #19
 801704c:	d9c3      	bls.n	8016fd6 <tcp_input+0x22>
 801704e:	b281      	uxth	r1, r0
 8017050:	892b      	ldrh	r3, [r5, #8]
 8017052:	428b      	cmp	r3, r1
 8017054:	d3bf      	bcc.n	8016fd6 <tcp_input+0x22>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8017056:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 801705a:	896a      	ldrh	r2, [r5, #10]
  tcphdr_opt2 = NULL;
 801705c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8017308 <tcp_input+0x354>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8017060:	b29b      	uxth	r3, r3
 8017062:	4899      	ldr	r0, [pc, #612]	; (80172c8 <tcp_input+0x314>)
  if (p->len >= hdrlen_bytes) {
 8017064:	428a      	cmp	r2, r1
  tcphdr_opt2 = NULL;
 8017066:	f8c9 8000 	str.w	r8, [r9]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801706a:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801706c:	f080 81a0 	bcs.w	80173b0 <tcp_input+0x3fc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017070:	682b      	ldr	r3, [r5, #0]
 8017072:	2b00      	cmp	r3, #0
 8017074:	f000 8267 	beq.w	8017546 <tcp_input+0x592>
    pbuf_header(p, -TCP_HLEN);
 8017078:	f06f 0113 	mvn.w	r1, #19
 801707c:	4628      	mov	r0, r5
 801707e:	f7fd fbd9 	bl	8014834 <pbuf_header>
    tcphdr_opt1len = p->len;
 8017082:	896b      	ldrh	r3, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8017084:	4a90      	ldr	r2, [pc, #576]	; (80172c8 <tcp_input+0x314>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8017086:	4628      	mov	r0, r5
 8017088:	4259      	negs	r1, r3
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801708a:	f8b2 8000 	ldrh.w	r8, [r2]
    tcphdr_opt1len = p->len;
 801708e:	4a8f      	ldr	r2, [pc, #572]	; (80172cc <tcp_input+0x318>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8017090:	b209      	sxth	r1, r1
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8017092:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 8017096:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8017098:	f7fd fbcc 	bl	8014834 <pbuf_header>
    if (opt2len > p->next->len) {
 801709c:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801709e:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 80170a2:	8943      	ldrh	r3, [r0, #10]
 80170a4:	4543      	cmp	r3, r8
 80170a6:	d396      	bcc.n	8016fd6 <tcp_input+0x22>
    pbuf_header(p->next, -(s16_t)opt2len);
 80170a8:	f1c8 0100 	rsb	r1, r8, #0
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80170ac:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 80170ae:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80170b0:	f8c9 3000 	str.w	r3, [r9]
    pbuf_header(p->next, -(s16_t)opt2len);
 80170b4:	f7fd fbbe 	bl	8014834 <pbuf_header>
    p->tot_len -= opt2len;
 80170b8:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80170ba:	896a      	ldrh	r2, [r5, #10]
    p->tot_len -= opt2len;
 80170bc:	eba3 0308 	sub.w	r3, r3, r8
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80170c4:	b132      	cbz	r2, 80170d4 <tcp_input+0x120>
 80170c6:	4b82      	ldr	r3, [pc, #520]	; (80172d0 <tcp_input+0x31c>)
 80170c8:	22cf      	movs	r2, #207	; 0xcf
 80170ca:	4982      	ldr	r1, [pc, #520]	; (80172d4 <tcp_input+0x320>)
 80170cc:	4882      	ldr	r0, [pc, #520]	; (80172d8 <tcp_input+0x324>)
 80170ce:	f006 fa8b 	bl	801d5e8 <iprintf>
 80170d2:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80170d4:	682a      	ldr	r2, [r5, #0]
 80170d6:	8912      	ldrh	r2, [r2, #8]
 80170d8:	429a      	cmp	r2, r3
 80170da:	d005      	beq.n	80170e8 <tcp_input+0x134>
 80170dc:	4b7c      	ldr	r3, [pc, #496]	; (80172d0 <tcp_input+0x31c>)
 80170de:	22d0      	movs	r2, #208	; 0xd0
 80170e0:	497e      	ldr	r1, [pc, #504]	; (80172dc <tcp_input+0x328>)
 80170e2:	487d      	ldr	r0, [pc, #500]	; (80172d8 <tcp_input+0x324>)
 80170e4:	f006 fa80 	bl	801d5e8 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80170e8:	f8d6 8000 	ldr.w	r8, [r6]
 80170ec:	f8b8 0000 	ldrh.w	r0, [r8]
 80170f0:	f7fc f800 	bl	80130f4 <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80170f4:	f8d6 9000 	ldr.w	r9, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80170f8:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80170fc:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8017100:	f7fb fff8 	bl	80130f4 <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017104:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017108:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801710c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017110:	f7fb fff4 	bl	80130fc <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017114:	f8d6 9000 	ldr.w	r9, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017118:	4b71      	ldr	r3, [pc, #452]	; (80172e0 <tcp_input+0x32c>)
 801711a:	f8c8 0004 	str.w	r0, [r8, #4]
 801711e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017120:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8017124:	f7fb ffea 	bl	80130fc <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017128:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801712c:	4b6d      	ldr	r3, [pc, #436]	; (80172e4 <tcp_input+0x330>)
 801712e:	f8c9 0008 	str.w	r0, [r9, #8]
 8017132:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017134:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 8017138:	f7fb ffdc 	bl	80130f4 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801713c:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801713e:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 8017142:	8998      	ldrh	r0, [r3, #12]
 8017144:	f7fb ffd6 	bl	80130f4 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017148:	892a      	ldrh	r2, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 801714a:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801714c:	f010 0303 	ands.w	r3, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 8017150:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017154:	bf18      	it	ne
 8017156:	2301      	movne	r3, #1
 8017158:	4413      	add	r3, r2
  flags = TCPH_FLAGS(tcphdr);
 801715a:	4a63      	ldr	r2, [pc, #396]	; (80172e8 <tcp_input+0x334>)
 801715c:	7010      	strb	r0, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801715e:	4a63      	ldr	r2, [pc, #396]	; (80172ec <tcp_input+0x338>)
 8017160:	f8d2 8000 	ldr.w	r8, [r2]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017164:	4a62      	ldr	r2, [pc, #392]	; (80172f0 <tcp_input+0x33c>)
 8017166:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017168:	f1b8 0f00 	cmp.w	r8, #0
 801716c:	f000 80d4 	beq.w	8017318 <tcp_input+0x364>
  prev = NULL;
 8017170:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017174:	f8df b158 	ldr.w	fp, [pc, #344]	; 80172d0 <tcp_input+0x31c>
 8017178:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80172d8 <tcp_input+0x324>
 801717c:	e006      	b.n	801718c <tcp_input+0x1d8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801717e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017182:	46c1      	mov	r9, r8
 8017184:	2b00      	cmp	r3, #0
 8017186:	f000 80c7 	beq.w	8017318 <tcp_input+0x364>
 801718a:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801718c:	f898 3014 	ldrb.w	r3, [r8, #20]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d07a      	beq.n	801728a <tcp_input+0x2d6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017194:	2b0a      	cmp	r3, #10
 8017196:	f000 8088 	beq.w	80172aa <tcp_input+0x2f6>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801719a:	2b01      	cmp	r3, #1
 801719c:	d07e      	beq.n	801729c <tcp_input+0x2e8>
    if (pcb->remote_port == tcphdr->src &&
 801719e:	6833      	ldr	r3, [r6, #0]
 80171a0:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 80171a4:	881a      	ldrh	r2, [r3, #0]
 80171a6:	4291      	cmp	r1, r2
 80171a8:	d1e9      	bne.n	801717e <tcp_input+0x1ca>
 80171aa:	885b      	ldrh	r3, [r3, #2]
 80171ac:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d1e4      	bne.n	801717e <tcp_input+0x1ca>
        pcb->local_port == tcphdr->dest &&
 80171b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d1df      	bne.n	801717e <tcp_input+0x1ca>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171be:	f8d8 2000 	ldr.w	r2, [r8]
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d1da      	bne.n	801717e <tcp_input+0x1ca>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80171c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80171cc:	4543      	cmp	r3, r8
 80171ce:	f000 8497 	beq.w	8017b00 <tcp_input+0xb4c>
      if (prev != NULL) {
 80171d2:	f1b9 0f00 	cmp.w	r9, #0
 80171d6:	f000 848c 	beq.w	8017af2 <tcp_input+0xb3e>
        pcb->next = tcp_active_pcbs;
 80171da:	4944      	ldr	r1, [pc, #272]	; (80172ec <tcp_input+0x338>)
        prev->next = pcb->next;
 80171dc:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 80171e0:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 80171e2:	f8c1 8000 	str.w	r8, [r1]
 80171e6:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 80171e8:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80171ec:	4543      	cmp	r3, r8
 80171ee:	f000 8478 	beq.w	8017ae2 <tcp_input+0xb2e>
    inseg.next = NULL;
 80171f2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801730c <tcp_input+0x358>
 80171f6:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 80171f8:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 80171fa:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 80171fc:	f8c9 200c 	str.w	r2, [r9, #12]
    if (flags & TCP_PSH) {
 8017200:	4a39      	ldr	r2, [pc, #228]	; (80172e8 <tcp_input+0x334>)
    recv_data = NULL;
 8017202:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8017310 <tcp_input+0x35c>
    if (flags & TCP_PSH) {
 8017206:	7812      	ldrb	r2, [r2, #0]
    recv_flags = 0;
 8017208:	4f3a      	ldr	r7, [pc, #232]	; (80172f4 <tcp_input+0x340>)
    recv_acked = 0;
 801720a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8017314 <tcp_input+0x360>
    if (flags & TCP_PSH) {
 801720e:	0712      	lsls	r2, r2, #28
    inseg.p = p;
 8017210:	f8c9 5004 	str.w	r5, [r9, #4]
    inseg.len = p->tot_len;
 8017214:	f8a9 1008 	strh.w	r1, [r9, #8]
    inseg.next = NULL;
 8017218:	f8c9 3000 	str.w	r3, [r9]
    recv_data = NULL;
 801721c:	f8ca 3000 	str.w	r3, [sl]
    recv_flags = 0;
 8017220:	703b      	strb	r3, [r7, #0]
    recv_acked = 0;
 8017222:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 8017226:	d503      	bpl.n	8017230 <tcp_input+0x27c>
      p->flags |= PBUF_FLAG_PUSH;
 8017228:	7b6b      	ldrb	r3, [r5, #13]
 801722a:	f043 0301 	orr.w	r3, r3, #1
 801722e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8017230:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017234:	2b00      	cmp	r3, #0
 8017236:	f000 80c2 	beq.w	80173be <tcp_input+0x40a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801723a:	4640      	mov	r0, r8
 801723c:	f7fe fe44 	bl	8015ec8 <tcp_process_refused_data>
 8017240:	300d      	adds	r0, #13
 8017242:	d009      	beq.n	8017258 <tcp_input+0x2a4>
 8017244:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017248:	2b00      	cmp	r3, #0
 801724a:	f000 80b8 	beq.w	80173be <tcp_input+0x40a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801724e:	4b28      	ldr	r3, [pc, #160]	; (80172f0 <tcp_input+0x33c>)
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	2b00      	cmp	r3, #0
 8017254:	f000 80b3 	beq.w	80173be <tcp_input+0x40a>
        if (pcb->rcv_ann_wnd == 0) {
 8017258:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 801725c:	2b00      	cmp	r3, #0
 801725e:	f000 830f 	beq.w	8017880 <tcp_input+0x8cc>
        TCP_STATS_INC(tcp.drop);
 8017262:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 8017266:	4d24      	ldr	r5, [pc, #144]	; (80172f8 <tcp_input+0x344>)
 8017268:	3301      	adds	r3, #1
 801726a:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
    tcp_input_pcb = NULL;
 801726e:	2400      	movs	r4, #0
    if (inseg.p != NULL)
 8017270:	f8d9 0004 	ldr.w	r0, [r9, #4]
    tcp_input_pcb = NULL;
 8017274:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 8017276:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 801727a:	b118      	cbz	r0, 8017284 <tcp_input+0x2d0>
      pbuf_free(inseg.p);
 801727c:	f7fd fae2 	bl	8014844 <pbuf_free>
      inseg.p = NULL;
 8017280:	f8c9 4004 	str.w	r4, [r9, #4]
}
 8017284:	b005      	add	sp, #20
 8017286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801728a:	465b      	mov	r3, fp
 801728c:	22e2      	movs	r2, #226	; 0xe2
 801728e:	491b      	ldr	r1, [pc, #108]	; (80172fc <tcp_input+0x348>)
 8017290:	4650      	mov	r0, sl
 8017292:	f006 f9a9 	bl	801d5e8 <iprintf>
 8017296:	f898 3014 	ldrb.w	r3, [r8, #20]
 801729a:	e77b      	b.n	8017194 <tcp_input+0x1e0>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801729c:	465b      	mov	r3, fp
 801729e:	22e4      	movs	r2, #228	; 0xe4
 80172a0:	4917      	ldr	r1, [pc, #92]	; (8017300 <tcp_input+0x34c>)
 80172a2:	4650      	mov	r0, sl
 80172a4:	f006 f9a0 	bl	801d5e8 <iprintf>
 80172a8:	e779      	b.n	801719e <tcp_input+0x1ea>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80172aa:	465b      	mov	r3, fp
 80172ac:	22e3      	movs	r2, #227	; 0xe3
 80172ae:	4915      	ldr	r1, [pc, #84]	; (8017304 <tcp_input+0x350>)
 80172b0:	4650      	mov	r0, sl
 80172b2:	f006 f999 	bl	801d5e8 <iprintf>
 80172b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80172ba:	e76e      	b.n	801719a <tcp_input+0x1e6>
 80172bc:	20033a7c 	.word	0x20033a7c
 80172c0:	20021490 	.word	0x20021490
 80172c4:	20025a2c 	.word	0x20025a2c
 80172c8:	2002149c 	.word	0x2002149c
 80172cc:	20021494 	.word	0x20021494
 80172d0:	08038bf8 	.word	0x08038bf8
 80172d4:	08038a40 	.word	0x08038a40
 80172d8:	08021804 	.word	0x08021804
 80172dc:	08038a4c 	.word	0x08038a4c
 80172e0:	20021488 	.word	0x20021488
 80172e4:	20021464 	.word	0x20021464
 80172e8:	20021468 	.word	0x20021468
 80172ec:	20033b88 	.word	0x20033b88
 80172f0:	2002149e 	.word	0x2002149e
 80172f4:	20021484 	.word	0x20021484
 80172f8:	20033b9c 	.word	0x20033b9c
 80172fc:	08038a6c 	.word	0x08038a6c
 8017300:	08038ac0 	.word	0x08038ac0
 8017304:	08038a94 	.word	0x08038a94
 8017308:	20021498 	.word	0x20021498
 801730c:	2002146c 	.word	0x2002146c
 8017310:	20021480 	.word	0x20021480
 8017314:	2002147c 	.word	0x2002147c
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017318:	4ba7      	ldr	r3, [pc, #668]	; (80175b8 <tcp_input+0x604>)
 801731a:	f8d3 8000 	ldr.w	r8, [r3]
 801731e:	f1b8 0f00 	cmp.w	r8, #0
 8017322:	f000 82aa 	beq.w	801787a <tcp_input+0x8c6>
 8017326:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017328:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80175dc <tcp_input+0x628>
 801732c:	4645      	mov	r5, r8
 801732e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80175f0 <tcp_input+0x63c>
 8017332:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 80175e4 <tcp_input+0x630>
 8017336:	4698      	mov	r8, r3
 8017338:	e002      	b.n	8017340 <tcp_input+0x38c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801733a:	68ed      	ldr	r5, [r5, #12]
 801733c:	2d00      	cmp	r5, #0
 801733e:	d06f      	beq.n	8017420 <tcp_input+0x46c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017340:	7d28      	ldrb	r0, [r5, #20]
 8017342:	4653      	mov	r3, sl
 8017344:	22fe      	movs	r2, #254	; 0xfe
 8017346:	4649      	mov	r1, r9
 8017348:	280a      	cmp	r0, #10
 801734a:	4658      	mov	r0, fp
 801734c:	d001      	beq.n	8017352 <tcp_input+0x39e>
 801734e:	f006 f94b 	bl	801d5e8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8017352:	6833      	ldr	r3, [r6, #0]
 8017354:	8b29      	ldrh	r1, [r5, #24]
 8017356:	881a      	ldrh	r2, [r3, #0]
 8017358:	428a      	cmp	r2, r1
 801735a:	d1ee      	bne.n	801733a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 801735c:	8ae9      	ldrh	r1, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 801735e:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8017362:	458c      	cmp	ip, r1
 8017364:	d1e9      	bne.n	801733a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8017366:	6938      	ldr	r0, [r7, #16]
 8017368:	6869      	ldr	r1, [r5, #4]
 801736a:	4281      	cmp	r1, r0
 801736c:	d1e5      	bne.n	801733a <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801736e:	6978      	ldr	r0, [r7, #20]
 8017370:	6829      	ldr	r1, [r5, #0]
 8017372:	4281      	cmp	r1, r0
 8017374:	d1e1      	bne.n	801733a <tcp_input+0x386>
 8017376:	4643      	mov	r3, r8
 8017378:	46a8      	mov	r8, r5
 801737a:	461d      	mov	r5, r3
  if (flags & TCP_RST) {
 801737c:	4b8f      	ldr	r3, [pc, #572]	; (80175bc <tcp_input+0x608>)
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	075f      	lsls	r7, r3, #29
 8017382:	d413      	bmi.n	80173ac <tcp_input+0x3f8>
 8017384:	498e      	ldr	r1, [pc, #568]	; (80175c0 <tcp_input+0x60c>)
  if (flags & TCP_SYN) {
 8017386:	079e      	lsls	r6, r3, #30
 8017388:	880c      	ldrh	r4, [r1, #0]
 801738a:	f140 83e6 	bpl.w	8017b5a <tcp_input+0xba6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801738e:	4b8d      	ldr	r3, [pc, #564]	; (80175c4 <tcp_input+0x610>)
 8017390:	6819      	ldr	r1, [r3, #0]
 8017392:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017396:	1acb      	subs	r3, r1, r3
 8017398:	d405      	bmi.n	80173a6 <tcp_input+0x3f2>
 801739a:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 801739e:	1b9b      	subs	r3, r3, r6
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	f340 83e2 	ble.w	8017b6a <tcp_input+0xbb6>
  if ((tcplen > 0)) {
 80173a6:	2c00      	cmp	r4, #0
 80173a8:	f040 83eb 	bne.w	8017b82 <tcp_input+0xbce>
        pbuf_free(p);
 80173ac:	4628      	mov	r0, r5
 80173ae:	e61d      	b.n	8016fec <tcp_input+0x38>
    tcphdr_opt1len = tcphdr_optlen;
 80173b0:	4a85      	ldr	r2, [pc, #532]	; (80175c8 <tcp_input+0x614>)
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80173b2:	4249      	negs	r1, r1
 80173b4:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80173b6:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80173b8:	f7fd fa3c 	bl	8014834 <pbuf_header>
 80173bc:	e694      	b.n	80170e8 <tcp_input+0x134>
  if (flags & TCP_RST) {
 80173be:	4b7f      	ldr	r3, [pc, #508]	; (80175bc <tcp_input+0x608>)
    tcp_input_pcb = pcb;
 80173c0:	4d82      	ldr	r5, [pc, #520]	; (80175cc <tcp_input+0x618>)
  if (flags & TCP_RST) {
 80173c2:	781c      	ldrb	r4, [r3, #0]
    tcp_input_pcb = pcb;
 80173c4:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 80173c8:	0762      	lsls	r2, r4, #29
 80173ca:	f140 80e6 	bpl.w	801759a <tcp_input+0x5e6>
    if (pcb->state == SYN_SENT) {
 80173ce:	f898 1014 	ldrb.w	r1, [r8, #20]
 80173d2:	2902      	cmp	r1, #2
 80173d4:	f000 8258 	beq.w	8017888 <tcp_input+0x8d4>
      if (seqno == pcb->rcv_nxt) {
 80173d8:	4b7a      	ldr	r3, [pc, #488]	; (80175c4 <tcp_input+0x610>)
 80173da:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	f000 83af 	beq.w	8017b44 <tcp_input+0xb90>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80173e6:	1a9b      	subs	r3, r3, r2
 80173e8:	d405      	bmi.n	80173f6 <tcp_input+0x442>
 80173ea:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 80173ee:	1a9b      	subs	r3, r3, r2
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	f340 82f7 	ble.w	80179e4 <tcp_input+0xa30>
      if (recv_flags & TF_RESET) {
 80173f6:	783b      	ldrb	r3, [r7, #0]
 80173f8:	071e      	lsls	r6, r3, #28
 80173fa:	f140 80fd 	bpl.w	80175f8 <tcp_input+0x644>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80173fe:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8017402:	b123      	cbz	r3, 801740e <tcp_input+0x45a>
 8017404:	f06f 010d 	mvn.w	r1, #13
 8017408:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801740c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801740e:	4641      	mov	r1, r8
 8017410:	486f      	ldr	r0, [pc, #444]	; (80175d0 <tcp_input+0x61c>)
 8017412:	f7fe fc19 	bl	8015c48 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8017416:	4641      	mov	r1, r8
 8017418:	2002      	movs	r0, #2
 801741a:	f7fd f81b 	bl	8014454 <memp_free>
 801741e:	e726      	b.n	801726e <tcp_input+0x2ba>
 8017420:	469c      	mov	ip, r3
 8017422:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017424:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80175f4 <tcp_input+0x640>
 8017428:	f8d9 e000 	ldr.w	lr, [r9]
 801742c:	f1be 0f00 	cmp.w	lr, #0
 8017430:	f000 8090 	beq.w	8017554 <tcp_input+0x5a0>
      if (lpcb->local_port == tcphdr->dest) {
 8017434:	f8bc 1002 	ldrh.w	r1, [ip, #2]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017438:	46f0      	mov	r8, lr
 801743a:	6978      	ldr	r0, [r7, #20]
    prev = NULL;
 801743c:	2200      	movs	r2, #0
 801743e:	e006      	b.n	801744e <tcp_input+0x49a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017440:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017444:	4642      	mov	r2, r8
 8017446:	4698      	mov	r8, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	f000 8083 	beq.w	8017554 <tcp_input+0x5a0>
      if (lpcb->local_port == tcphdr->dest) {
 801744e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8017452:	428b      	cmp	r3, r1
 8017454:	d1f4      	bne.n	8017440 <tcp_input+0x48c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017456:	f8d8 3000 	ldr.w	r3, [r8]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801745a:	b10b      	cbz	r3, 8017460 <tcp_input+0x4ac>
 801745c:	4283      	cmp	r3, r0
 801745e:	d1ef      	bne.n	8017440 <tcp_input+0x48c>
      if (prev != NULL) {
 8017460:	2a00      	cmp	r2, #0
 8017462:	f000 8223 	beq.w	80178ac <tcp_input+0x8f8>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017466:	f8d8 300c 	ldr.w	r3, [r8, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801746a:	f8c9 8000 	str.w	r8, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801746e:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017470:	f8c8 e00c 	str.w	lr, [r8, #12]
  if (flags & TCP_RST) {
 8017474:	4b51      	ldr	r3, [pc, #324]	; (80175bc <tcp_input+0x608>)
 8017476:	781b      	ldrb	r3, [r3, #0]
 8017478:	075a      	lsls	r2, r3, #29
 801747a:	d497      	bmi.n	80173ac <tcp_input+0x3f8>
  if (flags & TCP_ACK) {
 801747c:	06d8      	lsls	r0, r3, #27
 801747e:	f100 8229 	bmi.w	80178d4 <tcp_input+0x920>
  } else if (flags & TCP_SYN) {
 8017482:	0799      	lsls	r1, r3, #30
 8017484:	d592      	bpl.n	80173ac <tcp_input+0x3f8>
    npcb = tcp_alloc(pcb->prio);
 8017486:	f898 0015 	ldrb.w	r0, [r8, #21]
 801748a:	f7fe fe7f 	bl	801618c <tcp_alloc>
    if (npcb == NULL) {
 801748e:	4681      	mov	r9, r0
 8017490:	2800      	cmp	r0, #0
 8017492:	f000 838e 	beq.w	8017bb2 <tcp_input+0xbfe>
    npcb->remote_port = tcphdr->src;
 8017496:	6832      	ldr	r2, [r6, #0]
    npcb->state = SYN_RCVD;
 8017498:	2403      	movs	r4, #3
    npcb->rcv_nxt = seqno + 1;
 801749a:	4b4a      	ldr	r3, [pc, #296]	; (80175c4 <tcp_input+0x610>)
    npcb->local_port = pcb->local_port;
 801749c:	f8b8 c016 	ldrh.w	ip, [r8, #22]
    npcb->rcv_nxt = seqno + 1;
 80174a0:	6819      	ldr	r1, [r3, #0]
    npcb->remote_port = tcphdr->src;
 80174a2:	7813      	ldrb	r3, [r2, #0]
 80174a4:	7852      	ldrb	r2, [r2, #1]
    npcb->rcv_nxt = seqno + 1;
 80174a6:	3101      	adds	r1, #1
    npcb->remote_port = tcphdr->src;
 80174a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    npcb->rcv_nxt = seqno + 1;
 80174ac:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80174ae:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->remote_port = tcphdr->src;
 80174b0:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80174b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 80174b6:	f8a0 c016 	strh.w	ip, [r0, #22]
    npcb->state = SYN_RCVD;
 80174ba:	7504      	strb	r4, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80174bc:	e9c0 3200 	strd	r3, r2, [r0]
    iss = tcp_next_iss(npcb);
 80174c0:	f7fe ff2a 	bl	8016318 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80174c4:	4b3f      	ldr	r3, [pc, #252]	; (80175c4 <tcp_input+0x610>)
    TCP_REG_ACTIVE(npcb);
 80174c6:	4942      	ldr	r1, [pc, #264]	; (80175d0 <tcp_input+0x61c>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80174c8:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 80174ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80174ce:	3a01      	subs	r2, #1
    npcb->snd_wl2 = iss;
 80174d0:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
    npcb->lastack = iss;
 80174d4:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_lbb = iss;
 80174d8:	f8c9 0058 	str.w	r0, [r9, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80174dc:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->listener = pcb;
 80174e0:	f8c9 8078 	str.w	r8, [r9, #120]	; 0x78
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80174e4:	e9c9 0213 	strd	r0, r2, [r9, #76]	; 0x4c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80174e8:	f898 3008 	ldrb.w	r3, [r8, #8]
    TCP_REG_ACTIVE(npcb);
 80174ec:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80174ee:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 80174f2:	f8c1 9000 	str.w	r9, [r1]
 80174f6:	f8c9 200c 	str.w	r2, [r9, #12]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80174fa:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 80174fe:	f001 fccd 	bl	8018e9c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 8017502:	4b34      	ldr	r3, [pc, #208]	; (80175d4 <tcp_input+0x620>)
    TCP_REG_ACTIVE(npcb);
 8017504:	4a34      	ldr	r2, [pc, #208]	; (80175d8 <tcp_input+0x624>)
 8017506:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 8017508:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801750a:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801750c:	2b00      	cmp	r3, #0
 801750e:	f040 834b 	bne.w	8017ba8 <tcp_input+0xbf4>
    npcb->snd_wnd = tcphdr->wnd;
 8017512:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017514:	f109 0104 	add.w	r1, r9, #4
 8017518:	f8b9 0032 	ldrh.w	r0, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801751c:	89db      	ldrh	r3, [r3, #14]
 801751e:	f8a9 305c 	strh.w	r3, [r9, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017522:	f8a9 305e 	strh.w	r3, [r9, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017526:	f7fe ff03 	bl	8016330 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801752a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801752c:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017530:	4648      	mov	r0, r9
 8017532:	f000 ffbf 	bl	80184b4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8017536:	2800      	cmp	r0, #0
 8017538:	f040 832f 	bne.w	8017b9a <tcp_input+0xbe6>
    tcp_output(npcb);
 801753c:	4648      	mov	r0, r9
 801753e:	f001 f8df 	bl	8018700 <tcp_output>
        pbuf_free(p);
 8017542:	4628      	mov	r0, r5
 8017544:	e552      	b.n	8016fec <tcp_input+0x38>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017546:	4b25      	ldr	r3, [pc, #148]	; (80175dc <tcp_input+0x628>)
 8017548:	22b2      	movs	r2, #178	; 0xb2
 801754a:	4925      	ldr	r1, [pc, #148]	; (80175e0 <tcp_input+0x62c>)
 801754c:	4825      	ldr	r0, [pc, #148]	; (80175e4 <tcp_input+0x630>)
 801754e:	f006 f84b 	bl	801d5e8 <iprintf>
 8017552:	e591      	b.n	8017078 <tcp_input+0xc4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017554:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8017558:	f7fb fdcc 	bl	80130f4 <lwip_htons>
 801755c:	0743      	lsls	r3, r0, #29
 801755e:	f53f af25 	bmi.w	80173ac <tcp_input+0x3f8>
      TCP_STATS_INC(tcp.proterr);
 8017562:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017566:	6830      	ldr	r0, [r6, #0]
      TCP_STATS_INC(tcp.drop);
 8017568:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
      TCP_STATS_INC(tcp.proterr);
 801756c:	3201      	adds	r2, #1
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801756e:	4914      	ldr	r1, [pc, #80]	; (80175c0 <tcp_input+0x60c>)
      TCP_STATS_INC(tcp.proterr);
 8017570:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8017574:	3301      	adds	r3, #1
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017576:	880e      	ldrh	r6, [r1, #0]
 8017578:	8802      	ldrh	r2, [r0, #0]
 801757a:	4912      	ldr	r1, [pc, #72]	; (80175c4 <tcp_input+0x610>)
      TCP_STATS_INC(tcp.drop);
 801757c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017580:	6809      	ldr	r1, [r1, #0]
 8017582:	4b19      	ldr	r3, [pc, #100]	; (80175e8 <tcp_input+0x634>)
 8017584:	9201      	str	r2, [sp, #4]
 8017586:	4431      	add	r1, r6
 8017588:	8844      	ldrh	r4, [r0, #2]
 801758a:	1d1a      	adds	r2, r3, #4
 801758c:	4817      	ldr	r0, [pc, #92]	; (80175ec <tcp_input+0x638>)
 801758e:	6800      	ldr	r0, [r0, #0]
 8017590:	9400      	str	r4, [sp, #0]
 8017592:	f001 fa81 	bl	8018a98 <tcp_rst>
        pbuf_free(p);
 8017596:	4628      	mov	r0, r5
 8017598:	e528      	b.n	8016fec <tcp_input+0x38>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801759a:	f014 0202 	ands.w	r2, r4, #2
 801759e:	f898 301a 	ldrb.w	r3, [r8, #26]
 80175a2:	d07f      	beq.n	80176a4 <tcp_input+0x6f0>
 80175a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80175a8:	3902      	subs	r1, #2
 80175aa:	2901      	cmp	r1, #1
 80175ac:	d97a      	bls.n	80176a4 <tcp_input+0x6f0>
      tcp_ack_now(pcb);
 80175ae:	f043 0302 	orr.w	r3, r3, #2
 80175b2:	f888 301a 	strb.w	r3, [r8, #26]
 80175b6:	e71e      	b.n	80173f6 <tcp_input+0x442>
 80175b8:	20033b98 	.word	0x20033b98
 80175bc:	20021468 	.word	0x20021468
 80175c0:	2002149e 	.word	0x2002149e
 80175c4:	20021488 	.word	0x20021488
 80175c8:	20021494 	.word	0x20021494
 80175cc:	20033b9c 	.word	0x20033b9c
 80175d0:	20033b88 	.word	0x20033b88
 80175d4:	2002149c 	.word	0x2002149c
 80175d8:	20033b84 	.word	0x20033b84
 80175dc:	08038bf8 	.word	0x08038bf8
 80175e0:	08038a30 	.word	0x08038a30
 80175e4:	08021804 	.word	0x08021804
 80175e8:	20025a3c 	.word	0x20025a3c
 80175ec:	20021464 	.word	0x20021464
 80175f0:	08038b40 	.word	0x08038b40
 80175f4:	20033b90 	.word	0x20033b90
        if (recv_acked > 0) {
 80175f8:	f8bb 2000 	ldrh.w	r2, [fp]
 80175fc:	b162      	cbz	r2, 8017618 <tcp_input+0x664>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80175fe:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8017602:	b133      	cbz	r3, 8017612 <tcp_input+0x65e>
 8017604:	4641      	mov	r1, r8
 8017606:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801760a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801760c:	300d      	adds	r0, #13
 801760e:	f43f ae2e 	beq.w	801726e <tcp_input+0x2ba>
          recv_acked = 0;
 8017612:	2300      	movs	r3, #0
 8017614:	f8ab 3000 	strh.w	r3, [fp]
  if (recv_flags & TF_CLOSED) {
 8017618:	783b      	ldrb	r3, [r7, #0]
 801761a:	06dc      	lsls	r4, r3, #27
 801761c:	f100 8153 	bmi.w	80178c6 <tcp_input+0x912>
        if (recv_data != NULL) {
 8017620:	f8da 3000 	ldr.w	r3, [sl]
 8017624:	b31b      	cbz	r3, 801766e <tcp_input+0x6ba>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017626:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 801762a:	b133      	cbz	r3, 801763a <tcp_input+0x686>
 801762c:	4bb3      	ldr	r3, [pc, #716]	; (80178fc <tcp_input+0x948>)
 801762e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8017632:	49b3      	ldr	r1, [pc, #716]	; (8017900 <tcp_input+0x94c>)
 8017634:	48b3      	ldr	r0, [pc, #716]	; (8017904 <tcp_input+0x950>)
 8017636:	f005 ffd7 	bl	801d5e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801763a:	f898 301a 	ldrb.w	r3, [r8, #26]
 801763e:	f8da 2000 	ldr.w	r2, [sl]
 8017642:	f013 0310 	ands.w	r3, r3, #16
 8017646:	f040 8137 	bne.w	80178b8 <tcp_input+0x904>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801764a:	f8d8 4080 	ldr.w	r4, [r8, #128]	; 0x80
 801764e:	2c00      	cmp	r4, #0
 8017650:	f000 8241 	beq.w	8017ad6 <tcp_input+0xb22>
 8017654:	4641      	mov	r1, r8
 8017656:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801765a:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801765c:	f110 0f0d 	cmn.w	r0, #13
 8017660:	f43f ae05 	beq.w	801726e <tcp_input+0x2ba>
          if (err != ERR_OK) {
 8017664:	b118      	cbz	r0, 801766e <tcp_input+0x6ba>
            pcb->refused_data = recv_data;
 8017666:	f8da 3000 	ldr.w	r3, [sl]
 801766a:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801766e:	783b      	ldrb	r3, [r7, #0]
 8017670:	0698      	lsls	r0, r3, #26
 8017672:	d508      	bpl.n	8017686 <tcp_input+0x6d2>
          if (pcb->refused_data != NULL) {
 8017674:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 8017678:	2b00      	cmp	r3, #0
 801767a:	f000 824b 	beq.w	8017b14 <tcp_input+0xb60>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801767e:	7b5a      	ldrb	r2, [r3, #13]
 8017680:	f042 0220 	orr.w	r2, r2, #32
 8017684:	735a      	strb	r2, [r3, #13]
  if (recv_flags & TF_CLOSED) {
 8017686:	783b      	ldrb	r3, [r7, #0]
        tcp_input_pcb = NULL;
 8017688:	2200      	movs	r2, #0
  if (recv_flags & TF_CLOSED) {
 801768a:	06d9      	lsls	r1, r3, #27
        tcp_input_pcb = NULL;
 801768c:	602a      	str	r2, [r5, #0]
  if (recv_flags & TF_CLOSED) {
 801768e:	d505      	bpl.n	801769c <tcp_input+0x6e8>
 8017690:	4640      	mov	r0, r8
 8017692:	f7ff fc77 	bl	8016f84 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 8017696:	2800      	cmp	r0, #0
 8017698:	f47f ade9 	bne.w	801726e <tcp_input+0x2ba>
        tcp_output(pcb);
 801769c:	4640      	mov	r0, r8
 801769e:	f001 f82f 	bl	8018700 <tcp_output>
 80176a2:	e5e4      	b.n	801726e <tcp_input+0x2ba>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80176a4:	06db      	lsls	r3, r3, #27
 80176a6:	d403      	bmi.n	80176b0 <tcp_input+0x6fc>
    pcb->tmr = tcp_ticks;
 80176a8:	4b97      	ldr	r3, [pc, #604]	; (8017908 <tcp_input+0x954>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	f8c8 3020 	str.w	r3, [r8, #32]
  if (tcphdr_optlen != 0) {
 80176b0:	4b96      	ldr	r3, [pc, #600]	; (801790c <tcp_input+0x958>)
  pcb->keep_cnt_sent = 0;
 80176b2:	2100      	movs	r1, #0
  if (tcphdr_optlen != 0) {
 80176b4:	881b      	ldrh	r3, [r3, #0]
  pcb->keep_cnt_sent = 0;
 80176b6:	f888 1096 	strb.w	r1, [r8, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80176ba:	b12b      	cbz	r3, 80176c8 <tcp_input+0x714>
 80176bc:	f108 0032 	add.w	r0, r8, #50	; 0x32
 80176c0:	9203      	str	r2, [sp, #12]
 80176c2:	f7ff fc23 	bl	8016f0c <tcp_parseopt.isra.1.part.2>
 80176c6:	9a03      	ldr	r2, [sp, #12]
  switch (pcb->state) {
 80176c8:	f898 3014 	ldrb.w	r3, [r8, #20]
 80176cc:	3b02      	subs	r3, #2
 80176ce:	2b07      	cmp	r3, #7
 80176d0:	f63f ae91 	bhi.w	80173f6 <tcp_input+0x442>
 80176d4:	e8df f003 	tbb	[pc, r3]
 80176d8:	60c07d9c 	.word	0x60c07d9c
 80176dc:	041dc042 	.word	0x041dc042
    tcp_receive(pcb);
 80176e0:	4640      	mov	r0, r8
 80176e2:	f7fe fea5 	bl	8016430 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80176e6:	4b8a      	ldr	r3, [pc, #552]	; (8017910 <tcp_input+0x95c>)
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	06db      	lsls	r3, r3, #27
 80176ec:	f57f ae83 	bpl.w	80173f6 <tcp_input+0x442>
 80176f0:	4b88      	ldr	r3, [pc, #544]	; (8017914 <tcp_input+0x960>)
 80176f2:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 80176f6:	681a      	ldr	r2, [r3, #0]
 80176f8:	783b      	ldrb	r3, [r7, #0]
 80176fa:	4291      	cmp	r1, r2
 80176fc:	f47f ae7b 	bne.w	80173f6 <tcp_input+0x442>
 8017700:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 8017704:	2a00      	cmp	r2, #0
 8017706:	f47f ae76 	bne.w	80173f6 <tcp_input+0x442>
      recv_flags |= TF_CLOSED;
 801770a:	f043 0310 	orr.w	r3, r3, #16
 801770e:	703b      	strb	r3, [r7, #0]
 8017710:	e671      	b.n	80173f6 <tcp_input+0x442>
    tcp_receive(pcb);
 8017712:	4640      	mov	r0, r8
 8017714:	f7fe fe8c 	bl	8016430 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017718:	4b7d      	ldr	r3, [pc, #500]	; (8017910 <tcp_input+0x95c>)
 801771a:	781b      	ldrb	r3, [r3, #0]
 801771c:	06da      	lsls	r2, r3, #27
 801771e:	f57f ae6a 	bpl.w	80173f6 <tcp_input+0x442>
 8017722:	4b7c      	ldr	r3, [pc, #496]	; (8017914 <tcp_input+0x960>)
 8017724:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	429a      	cmp	r2, r3
 801772c:	f47f ae63 	bne.w	80173f6 <tcp_input+0x442>
 8017730:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017734:	2b00      	cmp	r3, #0
 8017736:	f47f ae5e 	bne.w	80173f6 <tcp_input+0x442>
      tcp_pcb_purge(pcb);
 801773a:	4640      	mov	r0, r8
 801773c:	f7fe f82c 	bl	8015798 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017740:	4b75      	ldr	r3, [pc, #468]	; (8017918 <tcp_input+0x964>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	4543      	cmp	r3, r8
 8017746:	f000 8247 	beq.w	8017bd8 <tcp_input+0xc24>
 801774a:	2b00      	cmp	r3, #0
 801774c:	f000 8248 	beq.w	8017be0 <tcp_input+0xc2c>
 8017750:	68da      	ldr	r2, [r3, #12]
 8017752:	4542      	cmp	r2, r8
 8017754:	f000 8254 	beq.w	8017c00 <tcp_input+0xc4c>
 8017758:	4613      	mov	r3, r2
 801775a:	e7f6      	b.n	801774a <tcp_input+0x796>
    tcp_receive(pcb);
 801775c:	4640      	mov	r0, r8
 801775e:	f7fe fe67 	bl	8016430 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8017762:	783b      	ldrb	r3, [r7, #0]
 8017764:	0699      	lsls	r1, r3, #26
 8017766:	f57f ae46 	bpl.w	80173f6 <tcp_input+0x442>
      tcp_ack_now(pcb);
 801776a:	f898 301a 	ldrb.w	r3, [r8, #26]
      tcp_pcb_purge(pcb);
 801776e:	4640      	mov	r0, r8
      tcp_ack_now(pcb);
 8017770:	f043 0302 	orr.w	r3, r3, #2
 8017774:	f888 301a 	strb.w	r3, [r8, #26]
      tcp_pcb_purge(pcb);
 8017778:	f7fe f80e 	bl	8015798 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801777c:	4b66      	ldr	r3, [pc, #408]	; (8017918 <tcp_input+0x964>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	4543      	cmp	r3, r8
 8017782:	f000 8229 	beq.w	8017bd8 <tcp_input+0xc24>
 8017786:	2b00      	cmp	r3, #0
 8017788:	f000 822a 	beq.w	8017be0 <tcp_input+0xc2c>
 801778c:	68da      	ldr	r2, [r3, #12]
 801778e:	4542      	cmp	r2, r8
 8017790:	f000 8236 	beq.w	8017c00 <tcp_input+0xc4c>
 8017794:	4613      	mov	r3, r2
 8017796:	e7f6      	b.n	8017786 <tcp_input+0x7d2>
    tcp_receive(pcb);
 8017798:	4640      	mov	r0, r8
 801779a:	f7fe fe49 	bl	8016430 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801779e:	783b      	ldrb	r3, [r7, #0]
 80177a0:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177a4:	4b5a      	ldr	r3, [pc, #360]	; (8017910 <tcp_input+0x95c>)
 80177a6:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 80177a8:	f000 811f 	beq.w	80179ea <tcp_input+0xa36>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177ac:	06dc      	lsls	r4, r3, #27
 80177ae:	d506      	bpl.n	80177be <tcp_input+0x80a>
 80177b0:	4b58      	ldr	r3, [pc, #352]	; (8017914 <tcp_input+0x960>)
 80177b2:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	429a      	cmp	r2, r3
 80177ba:	f000 8225 	beq.w	8017c08 <tcp_input+0xc54>
        tcp_ack_now(pcb);
 80177be:	f898 301a 	ldrb.w	r3, [r8, #26]
        pcb->state = CLOSING;
 80177c2:	2208      	movs	r2, #8
        tcp_ack_now(pcb);
 80177c4:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSING;
 80177c8:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 80177cc:	f888 301a 	strb.w	r3, [r8, #26]
 80177d0:	e611      	b.n	80173f6 <tcp_input+0x442>
    if (flags & TCP_ACK) {
 80177d2:	06e1      	lsls	r1, r4, #27
 80177d4:	f140 811c 	bpl.w	8017a10 <tcp_input+0xa5c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80177d8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80177dc:	4a4d      	ldr	r2, [pc, #308]	; (8017914 <tcp_input+0x960>)
 80177de:	43db      	mvns	r3, r3
 80177e0:	6810      	ldr	r0, [r2, #0]
 80177e2:	42c3      	cmn	r3, r0
 80177e4:	d405      	bmi.n	80177f2 <tcp_input+0x83e>
 80177e6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80177ea:	1ac3      	subs	r3, r0, r3
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	f340 811e 	ble.w	8017a2e <tcp_input+0xa7a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177f2:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80177f4:	4a49      	ldr	r2, [pc, #292]	; (801791c <tcp_input+0x968>)
 80177f6:	494a      	ldr	r1, [pc, #296]	; (8017920 <tcp_input+0x96c>)
 80177f8:	8814      	ldrh	r4, [r2, #0]
 80177fa:	881a      	ldrh	r2, [r3, #0]
 80177fc:	6809      	ldr	r1, [r1, #0]
 80177fe:	9201      	str	r2, [sp, #4]
 8017800:	885a      	ldrh	r2, [r3, #2]
 8017802:	4421      	add	r1, r4
 8017804:	4b47      	ldr	r3, [pc, #284]	; (8017924 <tcp_input+0x970>)
 8017806:	9200      	str	r2, [sp, #0]
 8017808:	1d1a      	adds	r2, r3, #4
 801780a:	f001 f945 	bl	8018a98 <tcp_rst>
 801780e:	e5f2      	b.n	80173f6 <tcp_input+0x442>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017810:	f004 0312 	and.w	r3, r4, #18
 8017814:	2b12      	cmp	r3, #18
 8017816:	f000 8087 	beq.w	8017928 <tcp_input+0x974>
    else if (flags & TCP_ACK) {
 801781a:	06e0      	lsls	r0, r4, #27
 801781c:	f57f adeb 	bpl.w	80173f6 <tcp_input+0x442>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017820:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017822:	4a3e      	ldr	r2, [pc, #248]	; (801791c <tcp_input+0x968>)
 8017824:	493e      	ldr	r1, [pc, #248]	; (8017920 <tcp_input+0x96c>)
 8017826:	8810      	ldrh	r0, [r2, #0]
 8017828:	6809      	ldr	r1, [r1, #0]
 801782a:	881a      	ldrh	r2, [r3, #0]
 801782c:	4401      	add	r1, r0
 801782e:	4839      	ldr	r0, [pc, #228]	; (8017914 <tcp_input+0x960>)
 8017830:	9201      	str	r2, [sp, #4]
 8017832:	885a      	ldrh	r2, [r3, #2]
 8017834:	4b3b      	ldr	r3, [pc, #236]	; (8017924 <tcp_input+0x970>)
 8017836:	6800      	ldr	r0, [r0, #0]
 8017838:	9200      	str	r2, [sp, #0]
 801783a:	1d1a      	adds	r2, r3, #4
 801783c:	f001 f92c 	bl	8018a98 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017840:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 8017844:	2b05      	cmp	r3, #5
 8017846:	f63f add6 	bhi.w	80173f6 <tcp_input+0x442>
        pcb->rtime = 0;
 801784a:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 801784c:	4640      	mov	r0, r8
        pcb->rtime = 0;
 801784e:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8017852:	f001 f991 	bl	8018b78 <tcp_rexmit_rto>
 8017856:	e5ce      	b.n	80173f6 <tcp_input+0x442>
    tcp_receive(pcb);
 8017858:	4640      	mov	r0, r8
 801785a:	f7fe fde9 	bl	8016430 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801785e:	783b      	ldrb	r3, [r7, #0]
 8017860:	069e      	lsls	r6, r3, #26
 8017862:	f57f adc8 	bpl.w	80173f6 <tcp_input+0x442>
      tcp_ack_now(pcb);
 8017866:	f898 301a 	ldrb.w	r3, [r8, #26]
      pcb->state = CLOSE_WAIT;
 801786a:	2207      	movs	r2, #7
      tcp_ack_now(pcb);
 801786c:	f043 0302 	orr.w	r3, r3, #2
      pcb->state = CLOSE_WAIT;
 8017870:	f888 2014 	strb.w	r2, [r8, #20]
      tcp_ack_now(pcb);
 8017874:	f888 301a 	strb.w	r3, [r8, #26]
 8017878:	e5bd      	b.n	80173f6 <tcp_input+0x442>
 801787a:	f8d6 c000 	ldr.w	ip, [r6]
 801787e:	e5d1      	b.n	8017424 <tcp_input+0x470>
          tcp_send_empty_ack(pcb);
 8017880:	4640      	mov	r0, r8
 8017882:	f000 feef 	bl	8018664 <tcp_send_empty_ack>
 8017886:	e4ec      	b.n	8017262 <tcp_input+0x2ae>
      if (ackno == pcb->snd_nxt) {
 8017888:	4b22      	ldr	r3, [pc, #136]	; (8017914 <tcp_input+0x960>)
 801788a:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	429a      	cmp	r2, r3
 8017892:	f47f adb0 	bne.w	80173f6 <tcp_input+0x442>
      recv_flags |= TF_RESET;
 8017896:	783a      	ldrb	r2, [r7, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8017898:	f898 301a 	ldrb.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 801789c:	f042 0208 	orr.w	r2, r2, #8
      pcb->flags &= ~TF_ACK_DELAY;
 80178a0:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 80178a4:	703a      	strb	r2, [r7, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80178a6:	f888 301a 	strb.w	r3, [r8, #26]
 80178aa:	e5a4      	b.n	80173f6 <tcp_input+0x442>
        TCP_STATS_INC(tcp.cachehit);
 80178ac:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 80178b0:	3301      	adds	r3, #1
 80178b2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80178b6:	e5dd      	b.n	8017474 <tcp_input+0x4c0>
            pbuf_free(recv_data);
 80178b8:	4610      	mov	r0, r2
 80178ba:	f7fc ffc3 	bl	8014844 <pbuf_free>
            tcp_abort(pcb);
 80178be:	4640      	mov	r0, r8
 80178c0:	f7fe fc20 	bl	8016104 <tcp_abort>
            goto aborted;
 80178c4:	e4d3      	b.n	801726e <tcp_input+0x2ba>
 80178c6:	4640      	mov	r0, r8
 80178c8:	f7ff fb5c 	bl	8016f84 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 80178cc:	2800      	cmp	r0, #0
 80178ce:	f47f acce 	bne.w	801726e <tcp_input+0x2ba>
 80178d2:	e6a5      	b.n	8017620 <tcp_input+0x66c>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80178d4:	6833      	ldr	r3, [r6, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80178d6:	4a11      	ldr	r2, [pc, #68]	; (801791c <tcp_input+0x968>)
 80178d8:	4911      	ldr	r1, [pc, #68]	; (8017920 <tcp_input+0x96c>)
 80178da:	8810      	ldrh	r0, [r2, #0]
 80178dc:	6809      	ldr	r1, [r1, #0]
 80178de:	881a      	ldrh	r2, [r3, #0]
 80178e0:	4401      	add	r1, r0
 80178e2:	480c      	ldr	r0, [pc, #48]	; (8017914 <tcp_input+0x960>)
 80178e4:	9201      	str	r2, [sp, #4]
 80178e6:	885a      	ldrh	r2, [r3, #2]
 80178e8:	4b0e      	ldr	r3, [pc, #56]	; (8017924 <tcp_input+0x970>)
 80178ea:	6800      	ldr	r0, [r0, #0]
 80178ec:	9200      	str	r2, [sp, #0]
 80178ee:	1d1a      	adds	r2, r3, #4
 80178f0:	f001 f8d2 	bl	8018a98 <tcp_rst>
        pbuf_free(p);
 80178f4:	4628      	mov	r0, r5
 80178f6:	f7ff bb79 	b.w	8016fec <tcp_input+0x38>
 80178fa:	bf00      	nop
 80178fc:	08038bf8 	.word	0x08038bf8
 8017900:	08038bdc 	.word	0x08038bdc
 8017904:	08021804 	.word	0x08021804
 8017908:	20033b8c 	.word	0x20033b8c
 801790c:	2002149c 	.word	0x2002149c
 8017910:	20021468 	.word	0x20021468
 8017914:	20021464 	.word	0x20021464
 8017918:	20033b88 	.word	0x20033b88
 801791c:	2002149e 	.word	0x2002149e
 8017920:	20021488 	.word	0x20021488
 8017924:	20025a3c 	.word	0x20025a3c
        && (ackno == pcb->lastack + 1)) {
 8017928:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 801792c:	4bc3      	ldr	r3, [pc, #780]	; (8017c3c <tcp_input+0xc88>)
 801792e:	3201      	adds	r2, #1
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	429a      	cmp	r2, r3
 8017934:	f47f af71 	bne.w	801781a <tcp_input+0x866>
      pcb->rcv_nxt = seqno + 1;
 8017938:	4bc1      	ldr	r3, [pc, #772]	; (8017c40 <tcp_input+0xc8c>)
      pcb->state = ESTABLISHED;
 801793a:	2004      	movs	r0, #4
      pcb->lastack = ackno;
 801793c:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8017940:	681b      	ldr	r3, [r3, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017942:	eb08 0100 	add.w	r1, r8, r0
      pcb->snd_wnd = tcphdr->wnd;
 8017946:	6834      	ldr	r4, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8017948:	1c5a      	adds	r2, r3, #1
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801794a:	3b01      	subs	r3, #1
      pcb->rcv_nxt = seqno + 1;
 801794c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017950:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8017954:	89e2      	ldrh	r2, [r4, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017956:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
      pcb->snd_wnd = tcphdr->wnd;
 801795a:	f8a8 205c 	strh.w	r2, [r8, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801795e:	f8a8 205e 	strh.w	r2, [r8, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8017962:	f888 0014 	strb.w	r0, [r8, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017966:	f8b8 0032 	ldrh.w	r0, [r8, #50]	; 0x32
 801796a:	f7fe fce1 	bl	8016330 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801796e:	f241 111c 	movw	r1, #4380	; 0x111c
 8017972:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017974:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017978:	0080      	lsls	r0, r0, #2
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801797a:	f8b8 2062 	ldrh.w	r2, [r8, #98]	; 0x62
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801797e:	428b      	cmp	r3, r1
 8017980:	bf38      	it	cc
 8017982:	460b      	movcc	r3, r1
 8017984:	4283      	cmp	r3, r0
 8017986:	bf28      	it	cs
 8017988:	4603      	movcs	r3, r0
 801798a:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801798e:	b932      	cbnz	r2, 801799e <tcp_input+0x9ea>
 8017990:	4bac      	ldr	r3, [pc, #688]	; (8017c44 <tcp_input+0xc90>)
 8017992:	f240 321a 	movw	r2, #794	; 0x31a
 8017996:	49ac      	ldr	r1, [pc, #688]	; (8017c48 <tcp_input+0xc94>)
 8017998:	48ac      	ldr	r0, [pc, #688]	; (8017c4c <tcp_input+0xc98>)
 801799a:	f005 fe25 	bl	801d5e8 <iprintf>
      --pcb->snd_queuelen;
 801799e:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
      rseg = pcb->unacked;
 80179a2:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
      --pcb->snd_queuelen;
 80179a6:	3b01      	subs	r3, #1
 80179a8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
      if (rseg == NULL) {
 80179ac:	2c00      	cmp	r4, #0
 80179ae:	d058      	beq.n	8017a62 <tcp_input+0xaae>
        pcb->unacked = rseg->next;
 80179b0:	6823      	ldr	r3, [r4, #0]
 80179b2:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
      tcp_seg_free(rseg);
 80179b6:	4620      	mov	r0, r4
 80179b8:	f7fd fe42 	bl	8015640 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80179bc:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d049      	beq.n	8017a58 <tcp_input+0xaa4>
        pcb->rtime = 0;
 80179c4:	2300      	movs	r3, #0
 80179c6:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
        pcb->nrtx = 0;
 80179ca:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80179ce:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80179d2:	b13b      	cbz	r3, 80179e4 <tcp_input+0xa30>
 80179d4:	2200      	movs	r2, #0
 80179d6:	4641      	mov	r1, r8
 80179d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80179dc:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80179de:	300d      	adds	r0, #13
 80179e0:	f43f ac45 	beq.w	801726e <tcp_input+0x2ba>
      tcp_ack_now(pcb);
 80179e4:	f898 301a 	ldrb.w	r3, [r8, #26]
 80179e8:	e5e1      	b.n	80175ae <tcp_input+0x5fa>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80179ea:	06d8      	lsls	r0, r3, #27
 80179ec:	f57f ad03 	bpl.w	80173f6 <tcp_input+0x442>
 80179f0:	4b92      	ldr	r3, [pc, #584]	; (8017c3c <tcp_input+0xc88>)
 80179f2:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	429a      	cmp	r2, r3
 80179fa:	f47f acfc 	bne.w	80173f6 <tcp_input+0x442>
 80179fe:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	f47f acf7 	bne.w	80173f6 <tcp_input+0x442>
      pcb->state = FIN_WAIT_2;
 8017a08:	2306      	movs	r3, #6
 8017a0a:	f888 3014 	strb.w	r3, [r8, #20]
 8017a0e:	e4f2      	b.n	80173f6 <tcp_input+0x442>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017a10:	2a00      	cmp	r2, #0
 8017a12:	f43f acf0 	beq.w	80173f6 <tcp_input+0x442>
 8017a16:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017a1a:	4a89      	ldr	r2, [pc, #548]	; (8017c40 <tcp_input+0xc8c>)
 8017a1c:	3b01      	subs	r3, #1
 8017a1e:	6812      	ldr	r2, [r2, #0]
 8017a20:	4293      	cmp	r3, r2
 8017a22:	f47f ace8 	bne.w	80173f6 <tcp_input+0x442>
      tcp_rexmit(pcb);
 8017a26:	4640      	mov	r0, r8
 8017a28:	f001 f8c4 	bl	8018bb4 <tcp_rexmit>
 8017a2c:	e4e3      	b.n	80173f6 <tcp_input+0x442>
        pcb->state = ESTABLISHED;
 8017a2e:	2204      	movs	r2, #4
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017a30:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
        pcb->state = ESTABLISHED;
 8017a34:	f888 2014 	strb.w	r2, [r8, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	f43f af40 	beq.w	80178be <tcp_input+0x90a>
 8017a3e:	699b      	ldr	r3, [r3, #24]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d038      	beq.n	8017ab6 <tcp_input+0xb02>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017a44:	2200      	movs	r2, #0
 8017a46:	4641      	mov	r1, r8
 8017a48:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017a4c:	4798      	blx	r3
        if (err != ERR_OK) {
 8017a4e:	b1b0      	cbz	r0, 8017a7e <tcp_input+0xaca>
          if (err != ERR_ABRT) {
 8017a50:	300d      	adds	r0, #13
 8017a52:	f43f ac0c 	beq.w	801726e <tcp_input+0x2ba>
 8017a56:	e732      	b.n	80178be <tcp_input+0x90a>
        pcb->rtime = -1;
 8017a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a5c:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 8017a60:	e7b5      	b.n	80179ce <tcp_input+0xa1a>
        rseg = pcb->unsent;
 8017a62:	f8d8 4068 	ldr.w	r4, [r8, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8017a66:	b934      	cbnz	r4, 8017a76 <tcp_input+0xac2>
 8017a68:	4b76      	ldr	r3, [pc, #472]	; (8017c44 <tcp_input+0xc90>)
 8017a6a:	f240 3222 	movw	r2, #802	; 0x322
 8017a6e:	4978      	ldr	r1, [pc, #480]	; (8017c50 <tcp_input+0xc9c>)
 8017a70:	4876      	ldr	r0, [pc, #472]	; (8017c4c <tcp_input+0xc98>)
 8017a72:	f005 fdb9 	bl	801d5e8 <iprintf>
        pcb->unsent = rseg->next;
 8017a76:	6823      	ldr	r3, [r4, #0]
 8017a78:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 8017a7c:	e79b      	b.n	80179b6 <tcp_input+0xa02>
        tcp_receive(pcb);
 8017a7e:	4640      	mov	r0, r8
 8017a80:	f7fe fcd6 	bl	8016430 <tcp_receive>
        if (recv_acked != 0) {
 8017a84:	f8bb 3000 	ldrh.w	r3, [fp]
 8017a88:	b113      	cbz	r3, 8017a90 <tcp_input+0xadc>
          recv_acked--;
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	f8ab 3000 	strh.w	r3, [fp]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017a90:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 8017a94:	f241 101c 	movw	r0, #4380	; 0x111c
        if (recv_flags & TF_GOT_FIN) {
 8017a98:	7839      	ldrb	r1, [r7, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017a9a:	0053      	lsls	r3, r2, #1
 8017a9c:	0092      	lsls	r2, r2, #2
 8017a9e:	4283      	cmp	r3, r0
 8017aa0:	bf38      	it	cc
 8017aa2:	4603      	movcc	r3, r0
 8017aa4:	4293      	cmp	r3, r2
 8017aa6:	bf28      	it	cs
 8017aa8:	4613      	movcs	r3, r2
 8017aaa:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8017aae:	068b      	lsls	r3, r1, #26
 8017ab0:	f57f aca1 	bpl.w	80173f6 <tcp_input+0x442>
 8017ab4:	e6d7      	b.n	8017866 <tcp_input+0x8b2>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8017ab6:	4b63      	ldr	r3, [pc, #396]	; (8017c44 <tcp_input+0xc90>)
 8017ab8:	f240 3251 	movw	r2, #849	; 0x351
 8017abc:	4965      	ldr	r1, [pc, #404]	; (8017c54 <tcp_input+0xca0>)
 8017abe:	4863      	ldr	r0, [pc, #396]	; (8017c4c <tcp_input+0xc98>)
 8017ac0:	f005 fd92 	bl	801d5e8 <iprintf>
        if (pcb->listener == NULL) {
 8017ac4:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f43f aef8 	beq.w	80178be <tcp_input+0x90a>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017ace:	699b      	ldr	r3, [r3, #24]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d1b7      	bne.n	8017a44 <tcp_input+0xa90>
 8017ad4:	e6f3      	b.n	80178be <tcp_input+0x90a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017ad6:	4623      	mov	r3, r4
 8017ad8:	4620      	mov	r0, r4
 8017ada:	4641      	mov	r1, r8
 8017adc:	f7fe f9da 	bl	8015e94 <tcp_recv_null>
 8017ae0:	e5bc      	b.n	801765c <tcp_input+0x6a8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017ae2:	4b58      	ldr	r3, [pc, #352]	; (8017c44 <tcp_input+0xc90>)
 8017ae4:	22f4      	movs	r2, #244	; 0xf4
 8017ae6:	495c      	ldr	r1, [pc, #368]	; (8017c58 <tcp_input+0xca4>)
 8017ae8:	4858      	ldr	r0, [pc, #352]	; (8017c4c <tcp_input+0xc98>)
 8017aea:	f005 fd7d 	bl	801d5e8 <iprintf>
 8017aee:	f7ff bb80 	b.w	80171f2 <tcp_input+0x23e>
        TCP_STATS_INC(tcp.cachehit);
 8017af2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017af6:	3201      	adds	r2, #1
 8017af8:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 8017afc:	f7ff bb76 	b.w	80171ec <tcp_input+0x238>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017b00:	4b50      	ldr	r3, [pc, #320]	; (8017c44 <tcp_input+0xc90>)
 8017b02:	22ec      	movs	r2, #236	; 0xec
 8017b04:	4955      	ldr	r1, [pc, #340]	; (8017c5c <tcp_input+0xca8>)
 8017b06:	4851      	ldr	r0, [pc, #324]	; (8017c4c <tcp_input+0xc98>)
 8017b08:	f005 fd6e 	bl	801d5e8 <iprintf>
 8017b0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b10:	f7ff bb5f 	b.w	80171d2 <tcp_input+0x21e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017b14:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8017b18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017b1c:	d002      	beq.n	8017b24 <tcp_input+0xb70>
              pcb->rcv_wnd++;
 8017b1e:	3301      	adds	r3, #1
 8017b20:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8017b24:	f8d8 4080 	ldr.w	r4, [r8, #128]	; 0x80
 8017b28:	2c00      	cmp	r4, #0
 8017b2a:	f43f adac 	beq.w	8017686 <tcp_input+0x6d2>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	4641      	mov	r1, r8
 8017b32:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017b36:	461a      	mov	r2, r3
 8017b38:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8017b3a:	300d      	adds	r0, #13
 8017b3c:	f47f ada3 	bne.w	8017686 <tcp_input+0x6d2>
aborted:
 8017b40:	f7ff bb95 	b.w	801726e <tcp_input+0x2ba>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017b44:	2900      	cmp	r1, #0
 8017b46:	f47f aea6 	bne.w	8017896 <tcp_input+0x8e2>
 8017b4a:	4b3e      	ldr	r3, [pc, #248]	; (8017c44 <tcp_input+0xc90>)
 8017b4c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017b50:	4943      	ldr	r1, [pc, #268]	; (8017c60 <tcp_input+0xcac>)
 8017b52:	483e      	ldr	r0, [pc, #248]	; (8017c4c <tcp_input+0xc98>)
 8017b54:	f005 fd48 	bl	801d5e8 <iprintf>
 8017b58:	e69d      	b.n	8017896 <tcp_input+0x8e2>
  } else if (flags & TCP_FIN) {
 8017b5a:	07d9      	lsls	r1, r3, #31
 8017b5c:	f57f ac23 	bpl.w	80173a6 <tcp_input+0x3f2>
    pcb->tmr = tcp_ticks;
 8017b60:	4b40      	ldr	r3, [pc, #256]	; (8017c64 <tcp_input+0xcb0>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	f8c8 3020 	str.w	r3, [r8, #32]
 8017b68:	e41d      	b.n	80173a6 <tcp_input+0x3f2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b6a:	4b3f      	ldr	r3, [pc, #252]	; (8017c68 <tcp_input+0xcb4>)
 8017b6c:	4421      	add	r1, r4
 8017b6e:	4833      	ldr	r0, [pc, #204]	; (8017c3c <tcp_input+0xc88>)
 8017b70:	e9cd c200 	strd	ip, r2, [sp]
 8017b74:	1d1a      	adds	r2, r3, #4
 8017b76:	6800      	ldr	r0, [r0, #0]
 8017b78:	f000 ff8e 	bl	8018a98 <tcp_rst>
        pbuf_free(p);
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f7ff ba35 	b.w	8016fec <tcp_input+0x38>
    pcb->flags |= TF_ACK_NOW;
 8017b82:	f898 301a 	ldrb.w	r3, [r8, #26]
    tcp_output(pcb);
 8017b86:	4640      	mov	r0, r8
    pcb->flags |= TF_ACK_NOW;
 8017b88:	f043 0302 	orr.w	r3, r3, #2
 8017b8c:	f888 301a 	strb.w	r3, [r8, #26]
    tcp_output(pcb);
 8017b90:	f000 fdb6 	bl	8018700 <tcp_output>
        pbuf_free(p);
 8017b94:	4628      	mov	r0, r5
 8017b96:	f7ff ba29 	b.w	8016fec <tcp_input+0x38>
      tcp_abandon(npcb, 0);
 8017b9a:	4648      	mov	r0, r9
 8017b9c:	2100      	movs	r1, #0
 8017b9e:	f7fe fa1d 	bl	8015fdc <tcp_abandon>
        pbuf_free(p);
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	f7ff ba22 	b.w	8016fec <tcp_input+0x38>
 8017ba8:	f109 0032 	add.w	r0, r9, #50	; 0x32
 8017bac:	f7ff f9ae 	bl	8016f0c <tcp_parseopt.isra.1.part.2>
 8017bb0:	e4af      	b.n	8017512 <tcp_input+0x55e>
      TCP_STATS_INC(tcp.memerr);
 8017bb2:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017bb6:	f8d8 6018 	ldr.w	r6, [r8, #24]
      TCP_STATS_INC(tcp.memerr);
 8017bba:	3301      	adds	r3, #1
 8017bbc:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017bc0:	2e00      	cmp	r6, #0
 8017bc2:	f43f abf3 	beq.w	80173ac <tcp_input+0x3f8>
 8017bc6:	4601      	mov	r1, r0
 8017bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8017bcc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017bd0:	47b0      	blx	r6
        pbuf_free(p);
 8017bd2:	4628      	mov	r0, r5
 8017bd4:	f7ff ba0a 	b.w	8016fec <tcp_input+0x38>
      TCP_RMV_ACTIVE(pcb);
 8017bd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bdc:	4a23      	ldr	r2, [pc, #140]	; (8017c6c <tcp_input+0xcb8>)
 8017bde:	6013      	str	r3, [r2, #0]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017be0:	4b23      	ldr	r3, [pc, #140]	; (8017c70 <tcp_input+0xcbc>)
      pcb->state = TIME_WAIT;
 8017be2:	200a      	movs	r0, #10
      TCP_RMV_ACTIVE(pcb);
 8017be4:	2101      	movs	r1, #1
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017be6:	681a      	ldr	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8017be8:	f888 0014 	strb.w	r0, [r8, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017bec:	f8c8 200c 	str.w	r2, [r8, #12]
      TCP_RMV_ACTIVE(pcb);
 8017bf0:	4a20      	ldr	r2, [pc, #128]	; (8017c74 <tcp_input+0xcc0>)
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017bf2:	f8c3 8000 	str.w	r8, [r3]
      TCP_RMV_ACTIVE(pcb);
 8017bf6:	7011      	strb	r1, [r2, #0]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017bf8:	f001 f950 	bl	8018e9c <tcp_timer_needed>
 8017bfc:	f7ff bbfb 	b.w	80173f6 <tcp_input+0x442>
      TCP_RMV_ACTIVE(pcb);
 8017c00:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8017c04:	60da      	str	r2, [r3, #12]
 8017c06:	e7eb      	b.n	8017be0 <tcp_input+0xc2c>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017c08:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f47f add6 	bne.w	80177be <tcp_input+0x80a>
        tcp_ack_now(pcb);
 8017c12:	f898 301a 	ldrb.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8017c16:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 8017c18:	f043 0302 	orr.w	r3, r3, #2
 8017c1c:	f888 301a 	strb.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 8017c20:	f7fd fdba 	bl	8015798 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017c24:	4b11      	ldr	r3, [pc, #68]	; (8017c6c <tcp_input+0xcb8>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	4543      	cmp	r3, r8
 8017c2a:	d0d5      	beq.n	8017bd8 <tcp_input+0xc24>
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d0d7      	beq.n	8017be0 <tcp_input+0xc2c>
 8017c30:	68da      	ldr	r2, [r3, #12]
 8017c32:	4542      	cmp	r2, r8
 8017c34:	d0e4      	beq.n	8017c00 <tcp_input+0xc4c>
 8017c36:	4613      	mov	r3, r2
 8017c38:	e7f8      	b.n	8017c2c <tcp_input+0xc78>
 8017c3a:	bf00      	nop
 8017c3c:	20021464 	.word	0x20021464
 8017c40:	20021488 	.word	0x20021488
 8017c44:	08038bf8 	.word	0x08038bf8
 8017c48:	08038b90 	.word	0x08038b90
 8017c4c:	08021804 	.word	0x08021804
 8017c50:	08038ba8 	.word	0x08038ba8
 8017c54:	08038bbc 	.word	0x08038bbc
 8017c58:	08038b14 	.word	0x08038b14
 8017c5c:	08038ae8 	.word	0x08038ae8
 8017c60:	08038b70 	.word	0x08038b70
 8017c64:	20033b8c 	.word	0x20033b8c
 8017c68:	20025a3c 	.word	0x20025a3c
 8017c6c:	20033b88 	.word	0x20033b88
 8017c70:	20033b98 	.word	0x20033b98
 8017c74:	20033b84 	.word	0x20033b84

08017c78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8017c78:	4a02      	ldr	r2, [pc, #8]	; (8017c84 <tcp_trigger_input_pcb_close+0xc>)
 8017c7a:	7813      	ldrb	r3, [r2, #0]
 8017c7c:	f043 0310 	orr.w	r3, r3, #16
 8017c80:	7013      	strb	r3, [r2, #0]
}
 8017c82:	4770      	bx	lr
 8017c84:	20021484 	.word	0x20021484

08017c88 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017c88:	b570      	push	{r4, r5, r6, lr}
 8017c8a:	460d      	mov	r5, r1
 8017c8c:	461e      	mov	r6, r3
 8017c8e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017c92:	4295      	cmp	r5, r2
{
 8017c94:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if (length < max_length) {
 8017c98:	d20e      	bcs.n	8017cb8 <tcp_pbuf_prealloc+0x30>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017c9a:	079c      	lsls	r4, r3, #30
 8017c9c:	d508      	bpl.n	8017cb0 <tcp_pbuf_prealloc+0x28>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017c9e:	f205 231b 	addw	r3, r5, #539	; 0x21b
 8017ca2:	f023 0103 	bic.w	r1, r3, #3
 8017ca6:	428a      	cmp	r2, r1
 8017ca8:	bf28      	it	cs
 8017caa:	460a      	movcs	r2, r1
 8017cac:	b291      	uxth	r1, r2
 8017cae:	e004      	b.n	8017cba <tcp_pbuf_prealloc+0x32>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017cb0:	9b04      	ldr	r3, [sp, #16]
 8017cb2:	7e9b      	ldrb	r3, [r3, #26]
 8017cb4:	065b      	lsls	r3, r3, #25
 8017cb6:	d515      	bpl.n	8017ce4 <tcp_pbuf_prealloc+0x5c>
 8017cb8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017cba:	2200      	movs	r2, #0
 8017cbc:	f7fc fe30 	bl	8014920 <pbuf_alloc>
  if (p == NULL) {
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	b168      	cbz	r0, 8017ce0 <tcp_pbuf_prealloc+0x58>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	b133      	cbz	r3, 8017cd6 <tcp_pbuf_prealloc+0x4e>
 8017cc8:	4b0c      	ldr	r3, [pc, #48]	; (8017cfc <tcp_pbuf_prealloc+0x74>)
 8017cca:	f44f 7288 	mov.w	r2, #272	; 0x110
 8017cce:	490c      	ldr	r1, [pc, #48]	; (8017d00 <tcp_pbuf_prealloc+0x78>)
 8017cd0:	480c      	ldr	r0, [pc, #48]	; (8017d04 <tcp_pbuf_prealloc+0x7c>)
 8017cd2:	f005 fc89 	bl	801d5e8 <iprintf>
  *oversize = p->len - length;
 8017cd6:	8963      	ldrh	r3, [r4, #10]
 8017cd8:	1b5b      	subs	r3, r3, r5
 8017cda:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017cdc:	8125      	strh	r5, [r4, #8]
 8017cde:	8165      	strh	r5, [r4, #10]
  return p;
}
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}
        (!(pcb->flags & TF_NODELAY) &&
 8017ce4:	2900      	cmp	r1, #0
 8017ce6:	d0da      	beq.n	8017c9e <tcp_pbuf_prealloc+0x16>
         (!first_seg ||
 8017ce8:	9b04      	ldr	r3, [sp, #16]
 8017cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d1d6      	bne.n	8017c9e <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 8017cf0:	9b04      	ldr	r3, [sp, #16]
 8017cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d1d2      	bne.n	8017c9e <tcp_pbuf_prealloc+0x16>
 8017cf8:	e7de      	b.n	8017cb8 <tcp_pbuf_prealloc+0x30>
 8017cfa:	bf00      	nop
 8017cfc:	08038f18 	.word	0x08038f18
 8017d00:	08038f4c 	.word	0x08038f4c
 8017d04:	08021804 	.word	0x08021804

08017d08 <tcp_create_segment.isra.0>:
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
 8017d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	4681      	mov	r9, r0
 8017d0e:	4688      	mov	r8, r1
 8017d10:	4617      	mov	r7, r2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017d12:	4932      	ldr	r1, [pc, #200]	; (8017ddc <tcp_create_segment.isra.0+0xd4>)
 8017d14:	22b2      	movs	r2, #178	; 0xb2
 8017d16:	2004      	movs	r0, #4
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
 8017d18:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
 8017d1c:	461e      	mov	r6, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017d1e:	f7fc fb75 	bl	801440c <memp_malloc_fn>
 8017d22:	4604      	mov	r4, r0
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d055      	beq.n	8017dd4 <tcp_create_segment.isra.0+0xcc>
 8017d28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
  seg->flags = optflags;
 8017d2c:	f880 b00a 	strb.w	fp, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017d30:	893b      	ldrh	r3, [r7, #8]
  seg->next = NULL;
 8017d32:	2200      	movs	r2, #0
 8017d34:	fa5f f58a 	uxtb.w	r5, sl
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017d38:	fa1f fa8a 	uxth.w	sl, sl
 8017d3c:	4553      	cmp	r3, sl
  seg->next = NULL;
 8017d3e:	e9c0 2700 	strd	r2, r7, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017d42:	d334      	bcc.n	8017dae <tcp_create_segment.isra.0+0xa6>
  seg->len = p->tot_len - optlen;
 8017d44:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8017d48:	4638      	mov	r0, r7
 8017d4a:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8017d4c:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8017d4e:	f7fc fd71 	bl	8014834 <pbuf_header>
 8017d52:	4607      	mov	r7, r0
 8017d54:	bb98      	cbnz	r0, 8017dbe <tcp_create_segment.isra.0+0xb6>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017d56:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8017d58:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017d5a:	f8b9 0000 	ldrh.w	r0, [r9]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017d5e:	f8d3 9004 	ldr.w	r9, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8017d62:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017d66:	f8c4 900c 	str.w	r9, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017d6a:	f7fb f9c3 	bl	80130f4 <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017d6e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017d72:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017d76:	f8b8 0000 	ldrh.w	r0, [r8]
 8017d7a:	f7fb f9bb 	bl	80130f4 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017d7e:	f8d4 900c 	ldr.w	r9, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017d82:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017d86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d88:	f7fb f9b8 	bl	80130fc <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8017d8c:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017d90:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8017d94:	f405 4070 	and.w	r0, r5, #61440	; 0xf000
 8017d98:	4330      	orrs	r0, r6
 8017d9a:	f7fb f9ab 	bl	80130f4 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8017d9e:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8017da0:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8017da4:	749f      	strb	r7, [r3, #18]
 8017da6:	74df      	strb	r7, [r3, #19]
}
 8017da8:	4620      	mov	r0, r4
 8017daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017dae:	4b0b      	ldr	r3, [pc, #44]	; (8017ddc <tcp_create_segment.isra.0+0xd4>)
 8017db0:	22ba      	movs	r2, #186	; 0xba
 8017db2:	490b      	ldr	r1, [pc, #44]	; (8017de0 <tcp_create_segment.isra.0+0xd8>)
 8017db4:	480b      	ldr	r0, [pc, #44]	; (8017de4 <tcp_create_segment.isra.0+0xdc>)
 8017db6:	f005 fc17 	bl	801d5e8 <iprintf>
 8017dba:	893b      	ldrh	r3, [r7, #8]
 8017dbc:	e7c2      	b.n	8017d44 <tcp_create_segment.isra.0+0x3c>
    TCP_STATS_INC(tcp.err);
 8017dbe:	4a0a      	ldr	r2, [pc, #40]	; (8017de8 <tcp_create_segment.isra.0+0xe0>)
    tcp_seg_free(seg);
 8017dc0:	4620      	mov	r0, r4
    return NULL;
 8017dc2:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 8017dc4:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8017dc8:	3301      	adds	r3, #1
 8017dca:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 8017dce:	f7fd fc37 	bl	8015640 <tcp_seg_free>
 8017dd2:	e7e9      	b.n	8017da8 <tcp_create_segment.isra.0+0xa0>
    pbuf_free(p);
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	f7fc fd35 	bl	8014844 <pbuf_free>
 8017dda:	e7e5      	b.n	8017da8 <tcp_create_segment.isra.0+0xa0>
 8017ddc:	08038f18 	.word	0x08038f18
 8017de0:	08038d90 	.word	0x08038d90
 8017de4:	08021804 	.word	0x08021804
 8017de8:	20033a7c 	.word	0x20033a7c

08017dec <tcp_output_alloc_header.constprop.1>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017dec:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8017dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017df0:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8017df2:	4605      	mov	r5, r0
 8017df4:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017df6:	2001      	movs	r0, #1
 8017df8:	2200      	movs	r2, #0
 8017dfa:	f7fc fd91 	bl	8014920 <pbuf_alloc>
  if (p != NULL) {
 8017dfe:	4606      	mov	r6, r0
 8017e00:	b310      	cbz	r0, 8017e48 <tcp_output_alloc_header.constprop.1+0x5c>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017e02:	8943      	ldrh	r3, [r0, #10]
 8017e04:	2b13      	cmp	r3, #19
 8017e06:	d921      	bls.n	8017e4c <tcp_output_alloc_header.constprop.1+0x60>
    tcphdr = (struct tcp_hdr *)p->payload;
 8017e08:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8017e0a:	8ae8      	ldrh	r0, [r5, #22]
 8017e0c:	f7fb f972 	bl	80130f4 <lwip_htons>
 8017e10:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8017e12:	8b28      	ldrh	r0, [r5, #24]
 8017e14:	f7fb f96e 	bl	80130f4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8017e18:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8017e1a:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017e1c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8017e1e:	f7fb f96d 	bl	80130fc <lwip_htonl>
 8017e22:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8017e24:	f245 0010 	movw	r0, #20496	; 0x5010
 8017e28:	f7fb f964 	bl	80130f4 <lwip_htons>
 8017e2c:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017e2e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8017e30:	f7fb f960 	bl	80130f4 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017e34:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 8017e36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    tcphdr->chksum = 0;
 8017e38:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017e3a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017e3c:	440a      	add	r2, r1
    tcphdr->chksum = 0;
 8017e3e:	7423      	strb	r3, [r4, #16]
 8017e40:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8017e42:	74a3      	strb	r3, [r4, #18]
 8017e44:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017e46:	62ea      	str	r2, [r5, #44]	; 0x2c
}
 8017e48:	4630      	mov	r0, r6
 8017e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017e4c:	4b03      	ldr	r3, [pc, #12]	; (8017e5c <tcp_output_alloc_header.constprop.1+0x70>)
 8017e4e:	2273      	movs	r2, #115	; 0x73
 8017e50:	4903      	ldr	r1, [pc, #12]	; (8017e60 <tcp_output_alloc_header.constprop.1+0x74>)
 8017e52:	4804      	ldr	r0, [pc, #16]	; (8017e64 <tcp_output_alloc_header.constprop.1+0x78>)
 8017e54:	f005 fbc8 	bl	801d5e8 <iprintf>
 8017e58:	e7d6      	b.n	8017e08 <tcp_output_alloc_header.constprop.1+0x1c>
 8017e5a:	bf00      	nop
 8017e5c:	08038f18 	.word	0x08038f18
 8017e60:	08038ee8 	.word	0x08038ee8
 8017e64:	08021804 	.word	0x08021804

08017e68 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6c:	b091      	sub	sp, #68	; 0x44
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8017e6e:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
{
 8017e72:	4692      	mov	sl, r2
  u16_t oversize = 0;
 8017e74:	2200      	movs	r2, #0
{
 8017e76:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8017e78:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
  u16_t oversize = 0;
 8017e7c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8017e80:	085b      	lsrs	r3, r3, #1
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017e82:	9107      	str	r1, [sp, #28]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8017e84:	455b      	cmp	r3, fp
 8017e86:	bf28      	it	cs
 8017e88:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	bf18      	it	ne
 8017e8e:	469b      	movne	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017e90:	2900      	cmp	r1, #0
 8017e92:	f000 82d1 	beq.w	8018438 <tcp_write+0x5d0>
  if ((pcb->state != ESTABLISHED) &&
 8017e96:	7d03      	ldrb	r3, [r0, #20]
 8017e98:	4606      	mov	r6, r0
      (pcb->state != CLOSE_WAIT) &&
 8017e9a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 8017e9c:	2a02      	cmp	r2, #2
 8017e9e:	d902      	bls.n	8017ea6 <tcp_write+0x3e>
 8017ea0:	2b07      	cmp	r3, #7
 8017ea2:	f040 828c 	bne.w	80183be <tcp_write+0x556>
  } else if (len == 0) {
 8017ea6:	f1ba 0f00 	cmp.w	sl, #0
 8017eaa:	d077      	beq.n	8017f9c <tcp_write+0x134>
  if (len > pcb->snd_buf) {
 8017eac:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 8017eb0:	4553      	cmp	r3, sl
 8017eb2:	f0c0 82ad 	bcc.w	8018410 <tcp_write+0x5a8>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8017eb6:	f8b6 7062 	ldrh.w	r7, [r6, #98]	; 0x62
 8017eba:	2f08      	cmp	r7, #8
 8017ebc:	f200 82af 	bhi.w	801841e <tcp_write+0x5b6>
 8017ec0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8017ec2:	2f00      	cmp	r7, #0
 8017ec4:	d05d      	beq.n	8017f82 <tcp_write+0x11a>
 8017ec6:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8017ec8:	9209      	str	r2, [sp, #36]	; 0x24
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d16a      	bne.n	8017fa4 <tcp_write+0x13c>
 8017ece:	2a00      	cmp	r2, #0
 8017ed0:	f000 8270 	beq.w	80183b4 <tcp_write+0x54c>
 8017ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ed6:	e000      	b.n	8017eda <tcp_write+0x72>
 8017ed8:	461a      	mov	r2, r3
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017eda:	6813      	ldr	r3, [r2, #0]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1fb      	bne.n	8017ed8 <tcp_write+0x70>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8017ee0:	7a95      	ldrb	r5, [r2, #10]
 8017ee2:	4699      	mov	r9, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017ee4:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8017ee6:	00ad      	lsls	r5, r5, #2
 8017ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8017eea:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017eee:	195a      	adds	r2, r3, r5
 8017ef0:	4593      	cmp	fp, r2
 8017ef2:	f2c0 81d5 	blt.w	80182a0 <tcp_write+0x438>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017ef6:	ebab 0403 	sub.w	r4, fp, r3
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017efa:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017efe:	1b64      	subs	r4, r4, r5
    oversize = pcb->unsent_oversize;
 8017f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f02:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017f06:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f040 8101 	bne.w	8018110 <tcp_write+0x2a8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017f0e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f14:	459a      	cmp	sl, r3
 8017f16:	f240 8154 	bls.w	80181c2 <tcp_write+0x35a>
 8017f1a:	2c00      	cmp	r4, #0
 8017f1c:	f000 8151 	beq.w	80181c2 <tcp_write+0x35a>
 8017f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f22:	8912      	ldrh	r2, [r2, #8]
 8017f24:	920d      	str	r2, [sp, #52]	; 0x34
 8017f26:	2a00      	cmp	r2, #0
 8017f28:	f000 81c4 	beq.w	80182b4 <tcp_write+0x44c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017f2c:	ebaa 0503 	sub.w	r5, sl, r3
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017f32:	42a5      	cmp	r5, r4
 8017f34:	bfa8      	it	ge
 8017f36:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017f38:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017f3a:	fa1f f885 	uxth.w	r8, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017f3e:	f100 8241 	bmi.w	80183c4 <tcp_write+0x55c>
        queuelen += pbuf_clen(concat_p);
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	e000      	b.n	8017f4a <tcp_write+0xe2>
 8017f48:	4613      	mov	r3, r2
 8017f4a:	681a      	ldr	r2, [r3, #0]
 8017f4c:	2a00      	cmp	r2, #0
 8017f4e:	d1fb      	bne.n	8017f48 <tcp_write+0xe0>
 8017f50:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017f52:	7b1a      	ldrb	r2, [r3, #12]
 8017f54:	2a01      	cmp	r2, #1
 8017f56:	f040 8106 	bne.w	8018166 <tcp_write+0x2fe>
 8017f5a:	895a      	ldrh	r2, [r3, #10]
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	4413      	add	r3, r2
 8017f60:	9a07      	ldr	r2, [sp, #28]
 8017f62:	429a      	cmp	r2, r3
 8017f64:	f040 80ff 	bne.w	8018166 <tcp_write+0x2fe>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	f040 827f 	bne.w	801846e <tcp_write+0x606>
          extendlen = seglen;
 8017f70:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f76:	eb08 0403 	add.w	r4, r8, r3
 8017f7a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8017f7e:	b2a4      	uxth	r4, r4
 8017f80:	e123      	b.n	80181ca <tcp_write+0x362>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017f82:	b923      	cbnz	r3, 8017f8e <tcp_write+0x126>
 8017f84:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8017f86:	9309      	str	r3, [sp, #36]	; 0x24
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 81c6 	beq.w	801831a <tcp_write+0x4b2>
 8017f8e:	4b99      	ldr	r3, [pc, #612]	; (80181f4 <tcp_write+0x38c>)
 8017f90:	f240 1259 	movw	r2, #345	; 0x159
 8017f94:	4998      	ldr	r1, [pc, #608]	; (80181f8 <tcp_write+0x390>)
 8017f96:	4899      	ldr	r0, [pc, #612]	; (80181fc <tcp_write+0x394>)
 8017f98:	f005 fb26 	bl	801d5e8 <iprintf>
 8017f9c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8017f9e:	f8b6 7062 	ldrh.w	r7, [r6, #98]	; 0x62
 8017fa2:	9309      	str	r3, [sp, #36]	; 0x24
  if (pcb->unsent != NULL) {
 8017fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d194      	bne.n	8017ed4 <tcp_write+0x6c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017faa:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f040 80d1 	bne.w	8018156 <tcp_write+0x2ee>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017fb4:	f1ba 0f00 	cmp.w	sl, #0
 8017fb8:	f000 8252 	beq.w	8018460 <tcp_write+0x5f8>
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	461c      	mov	r4, r3
 8017fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8017fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8017fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8017fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fca:	f04f 0900 	mov.w	r9, #0
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017fce:	f8cd b014 	str.w	fp, [sp, #20]
 8017fd2:	f003 0301 	and.w	r3, r3, #1
 8017fd6:	46cb      	mov	fp, r9
 8017fd8:	9308      	str	r3, [sp, #32]
 8017fda:	e044      	b.n	8018066 <tcp_write+0x1fe>
 8017fdc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	f040 80d6 	bne.w	8018192 <tcp_write+0x32a>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017fe6:	2201      	movs	r2, #1
 8017fe8:	4629      	mov	r1, r5
 8017fea:	2000      	movs	r0, #0
 8017fec:	f7fc fc98 	bl	8014920 <pbuf_alloc>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	d06a      	beq.n	80180ca <tcp_write+0x262>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8017ff4:	9a07      	ldr	r2, [sp, #28]
 8017ff6:	9006      	str	r0, [sp, #24]
 8017ff8:	1911      	adds	r1, r2, r4

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017ffa:	2200      	movs	r2, #0
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8017ffc:	6041      	str	r1, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017ffe:	4611      	mov	r1, r2
 8018000:	4610      	mov	r0, r2
 8018002:	f7fc fc8d 	bl	8014920 <pbuf_alloc>
 8018006:	9b06      	ldr	r3, [sp, #24]
 8018008:	4680      	mov	r8, r0
 801800a:	2800      	cmp	r0, #0
 801800c:	f000 8156 	beq.w	80182bc <tcp_write+0x454>
        pbuf_free(p2);
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018010:	4619      	mov	r1, r3
 8018012:	f7fc fe2b 	bl	8014c6c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018016:	4640      	mov	r0, r8
 8018018:	f7fc fe08 	bl	8014c2c <pbuf_clen>
 801801c:	4407      	add	r7, r0
 801801e:	b2bf      	uxth	r7, r7

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8018020:	2f09      	cmp	r7, #9
 8018022:	d84f      	bhi.n	80180c4 <tcp_write+0x25c>
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018024:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8018026:	2300      	movs	r3, #0
 8018028:	4642      	mov	r2, r8
 801802a:	f106 0118 	add.w	r1, r6, #24
 801802e:	eb04 0c00 	add.w	ip, r4, r0
 8018032:	9301      	str	r3, [sp, #4]
 8018034:	f106 0016 	add.w	r0, r6, #22
 8018038:	f8cd c000 	str.w	ip, [sp]
 801803c:	f7ff fe64 	bl	8017d08 <tcp_create_segment.isra.0>
 8018040:	4680      	mov	r8, r0
 8018042:	2800      	cmp	r0, #0
 8018044:	d041      	beq.n	80180ca <tcp_write+0x262>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018046:	f1b9 0f00 	cmp.w	r9, #0
 801804a:	f000 80a0 	beq.w	801818e <tcp_write+0x326>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801804e:	f1bb 0f00 	cmp.w	fp, #0
 8018052:	f000 80a6 	beq.w	80181a2 <tcp_write+0x33a>
      prev_seg->next = seg;
 8018056:	f8cb 8000 	str.w	r8, [fp]

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801805a:	442c      	add	r4, r5
 801805c:	46c3      	mov	fp, r8
 801805e:	b2a4      	uxth	r4, r4
  while (pos < len) {
 8018060:	45a2      	cmp	sl, r4
 8018062:	f240 80b5 	bls.w	80181d0 <tcp_write+0x368>
    u16_t left = len - pos;
 8018066:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 801806a:	9b05      	ldr	r3, [sp, #20]
 801806c:	b2ad      	uxth	r5, r5
 801806e:	429d      	cmp	r5, r3
 8018070:	bf28      	it	cs
 8018072:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018074:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018076:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018078:	2b00      	cmp	r3, #0
 801807a:	d0af      	beq.n	8017fdc <tcp_write+0x174>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801807c:	fab9 fc89 	clz	ip, r9
 8018080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018082:	9a05      	ldr	r2, [sp, #20]
 8018084:	4629      	mov	r1, r5
 8018086:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801808a:	2000      	movs	r0, #0
 801808c:	e9cd 6300 	strd	r6, r3, [sp]
 8018090:	f8cd c008 	str.w	ip, [sp, #8]
 8018094:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8018098:	f7ff fdf6 	bl	8017c88 <tcp_pbuf_prealloc>
 801809c:	4680      	mov	r8, r0
 801809e:	b1a0      	cbz	r0, 80180ca <tcp_write+0x262>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80180a0:	8943      	ldrh	r3, [r0, #10]
 80180a2:	42ab      	cmp	r3, r5
 80180a4:	f0c0 8085 	bcc.w	80181b2 <tcp_write+0x34a>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80180a8:	9b07      	ldr	r3, [sp, #28]
 80180aa:	462a      	mov	r2, r5
 80180ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80180b0:	1919      	adds	r1, r3, r4
 80180b2:	f004 ff4a 	bl	801cf4a <memcpy>
    queuelen += pbuf_clen(p);
 80180b6:	4640      	mov	r0, r8
 80180b8:	f7fc fdb8 	bl	8014c2c <pbuf_clen>
 80180bc:	4407      	add	r7, r0
 80180be:	b2bf      	uxth	r7, r7
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80180c0:	2f09      	cmp	r7, #9
 80180c2:	d9af      	bls.n	8018024 <tcp_write+0x1bc>
      pbuf_free(p);
 80180c4:	4640      	mov	r0, r8
 80180c6:	f7fc fbbd 	bl	8014844 <pbuf_free>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80180ca:	7eb3      	ldrb	r3, [r6, #26]
  TCP_STATS_INC(tcp.memerr);
 80180cc:	4a4c      	ldr	r2, [pc, #304]	; (8018200 <tcp_write+0x398>)
  pcb->flags |= TF_NAGLEMEMERR;
 80180ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80180d2:	76b3      	strb	r3, [r6, #26]
  TCP_STATS_INC(tcp.memerr);
 80180d4:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 80180d8:	3301      	adds	r3, #1
 80180da:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c

  if (concat_p != NULL) {
 80180de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180e0:	b113      	cbz	r3, 80180e8 <tcp_write+0x280>
    pbuf_free(concat_p);
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fc fbae 	bl	8014844 <pbuf_free>
  }
  if (queue != NULL) {
 80180e8:	f1b9 0f00 	cmp.w	r9, #0
 80180ec:	d002      	beq.n	80180f4 <tcp_write+0x28c>
    tcp_segs_free(queue);
 80180ee:	4648      	mov	r0, r9
 80180f0:	f7fd fab4 	bl	801565c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80180f4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
 80180f8:	b12b      	cbz	r3, 8018106 <tcp_write+0x29e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80180fa:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80180fc:	b91b      	cbnz	r3, 8018106 <tcp_write+0x29e>
 80180fe:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8018100:	2b00      	cmp	r3, #0
 8018102:	f000 80df 	beq.w	80182c4 <tcp_write+0x45c>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018106:	f04f 30ff 	mov.w	r0, #4294967295
}
 801810a:	b011      	add	sp, #68	; 0x44
 801810c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018110:	42a3      	cmp	r3, r4
 8018112:	f200 80e5 	bhi.w	80182e0 <tcp_write+0x478>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018118:	4553      	cmp	r3, sl
 801811a:	461a      	mov	r2, r3
 801811c:	bf28      	it	cs
 801811e:	4652      	movcs	r2, sl
 8018120:	42a2      	cmp	r2, r4
 8018122:	4610      	mov	r0, r2
 8018124:	bfa8      	it	ge
 8018126:	4620      	movge	r0, r4
      oversize -= oversize_used;
 8018128:	1a1b      	subs	r3, r3, r0
      space -= oversize_used;
 801812a:	1a24      	subs	r4, r4, r0
      oversize -= oversize_used;
 801812c:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801812e:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 8018130:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018134:	2b00      	cmp	r3, #0
 8018136:	f000 80cf 	beq.w	80182d8 <tcp_write+0x470>
 801813a:	4582      	cmp	sl, r0
 801813c:	f000 80cc 	beq.w	80182d8 <tcp_write+0x470>
 8018140:	900b      	str	r0, [sp, #44]	; 0x2c
 8018142:	f240 12e1 	movw	r2, #481	; 0x1e1
 8018146:	4b2b      	ldr	r3, [pc, #172]	; (80181f4 <tcp_write+0x38c>)
 8018148:	492e      	ldr	r1, [pc, #184]	; (8018204 <tcp_write+0x39c>)
 801814a:	482c      	ldr	r0, [pc, #176]	; (80181fc <tcp_write+0x394>)
 801814c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8018150:	f005 fa4a 	bl	801d5e8 <iprintf>
 8018154:	e6dd      	b.n	8017f12 <tcp_write+0xaa>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018156:	4b27      	ldr	r3, [pc, #156]	; (80181f4 <tcp_write+0x38c>)
 8018158:	f240 2225 	movw	r2, #549	; 0x225
 801815c:	492a      	ldr	r1, [pc, #168]	; (8018208 <tcp_write+0x3a0>)
 801815e:	4827      	ldr	r0, [pc, #156]	; (80181fc <tcp_write+0x394>)
 8018160:	f005 fa42 	bl	801d5e8 <iprintf>
 8018164:	e726      	b.n	8017fb4 <tcp_write+0x14c>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018166:	2201      	movs	r2, #1
 8018168:	4641      	mov	r1, r8
 801816a:	2004      	movs	r0, #4
 801816c:	f7fc fbd8 	bl	8014920 <pbuf_alloc>
 8018170:	900c      	str	r0, [sp, #48]	; 0x30
 8018172:	2800      	cmp	r0, #0
 8018174:	f000 80db 	beq.w	801832e <tcp_write+0x4c6>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8018178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801817a:	9b07      	ldr	r3, [sp, #28]
 801817c:	4413      	add	r3, r2
  u16_t extendlen = 0;
 801817e:	2200      	movs	r2, #0
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8018180:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 8018182:	920d      	str	r2, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 8018184:	f7fc fd52 	bl	8014c2c <pbuf_clen>
 8018188:	4407      	add	r7, r0
 801818a:	b2bf      	uxth	r7, r7
 801818c:	e6f2      	b.n	8017f74 <tcp_write+0x10c>
 801818e:	4681      	mov	r9, r0
 8018190:	e763      	b.n	801805a <tcp_write+0x1f2>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018192:	4b18      	ldr	r3, [pc, #96]	; (80181f4 <tcp_write+0x38c>)
 8018194:	f240 224b 	movw	r2, #587	; 0x24b
 8018198:	491c      	ldr	r1, [pc, #112]	; (801820c <tcp_write+0x3a4>)
 801819a:	4818      	ldr	r0, [pc, #96]	; (80181fc <tcp_write+0x394>)
 801819c:	f005 fa24 	bl	801d5e8 <iprintf>
 80181a0:	e721      	b.n	8017fe6 <tcp_write+0x17e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80181a2:	4b14      	ldr	r3, [pc, #80]	; (80181f4 <tcp_write+0x38c>)
 80181a4:	f240 2285 	movw	r2, #645	; 0x285
 80181a8:	4919      	ldr	r1, [pc, #100]	; (8018210 <tcp_write+0x3a8>)
 80181aa:	4814      	ldr	r0, [pc, #80]	; (80181fc <tcp_write+0x394>)
 80181ac:	f005 fa1c 	bl	801d5e8 <iprintf>
 80181b0:	e751      	b.n	8018056 <tcp_write+0x1ee>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80181b2:	4b10      	ldr	r3, [pc, #64]	; (80181f4 <tcp_write+0x38c>)
 80181b4:	f240 2241 	movw	r2, #577	; 0x241
 80181b8:	4916      	ldr	r1, [pc, #88]	; (8018214 <tcp_write+0x3ac>)
 80181ba:	4810      	ldr	r0, [pc, #64]	; (80181fc <tcp_write+0x394>)
 80181bc:	f005 fa14 	bl	801d5e8 <iprintf>
 80181c0:	e772      	b.n	80180a8 <tcp_write+0x240>
  u16_t extendlen = 0;
 80181c2:	2300      	movs	r3, #0
 80181c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80181c6:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 80181c8:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 80181ca:	45a2      	cmp	sl, r4
 80181cc:	f63f aefc 	bhi.w	8017fc8 <tcp_write+0x160>
  if (oversize_used > 0) {
 80181d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	f000 808f 	beq.w	80182f6 <tcp_write+0x48e>
    for (p = last_unsent->p; p; p = p->next) {
 80181d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181da:	685c      	ldr	r4, [r3, #4]
 80181dc:	b34c      	cbz	r4, 8018232 <tcp_write+0x3ca>
 80181de:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80181e2:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 80181e4:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 80181e6:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 80181e8:	445b      	add	r3, fp
 80181ea:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 80181ec:	b1a2      	cbz	r2, 8018218 <tcp_write+0x3b0>
  struct pbuf *concat_p = NULL;
 80181ee:	4614      	mov	r4, r2
 80181f0:	e7f8      	b.n	80181e4 <tcp_write+0x37c>
 80181f2:	bf00      	nop
 80181f4:	08038f18 	.word	0x08038f18
 80181f8:	08038fd0 	.word	0x08038fd0
 80181fc:	08021804 	.word	0x08021804
 8018200:	20033a7c 	.word	0x20033a7c
 8018204:	0803903c 	.word	0x0803903c
 8018208:	08039088 	.word	0x08039088
 801820c:	080390f8 	.word	0x080390f8
 8018210:	08039108 	.word	0x08039108
 8018214:	080390b8 	.word	0x080390b8
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018218:	6863      	ldr	r3, [r4, #4]
 801821a:	465a      	mov	r2, fp
 801821c:	8960      	ldrh	r0, [r4, #10]
 801821e:	4629      	mov	r1, r5
 8018220:	4418      	add	r0, r3
 8018222:	f004 fe92 	bl	801cf4a <memcpy>
        p->len += oversize_used;
 8018226:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018228:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801822a:	445b      	add	r3, fp
 801822c:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801822e:	2a00      	cmp	r2, #0
 8018230:	d1dd      	bne.n	80181ee <tcp_write+0x386>
    last_unsent->len += oversize_used;
 8018232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018234:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018236:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 8018238:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801823c:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801823e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 8018240:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 8018242:	f8a6 2064 	strh.w	r2, [r6, #100]	; 0x64
  if (concat_p != NULL) {
 8018246:	2b00      	cmp	r3, #0
 8018248:	f000 8091 	beq.w	801836e <tcp_write+0x506>
    pbuf_cat(last_unsent->p, concat_p);
 801824c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801824e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018250:	6860      	ldr	r0, [r4, #4]
 8018252:	4629      	mov	r1, r5
 8018254:	f7fc fd0a 	bl	8014c6c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018258:	892a      	ldrh	r2, [r5, #8]
 801825a:	8923      	ldrh	r3, [r4, #8]
 801825c:	4413      	add	r3, r2
 801825e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8018260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018262:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 8018266:	6db2      	ldr	r2, [r6, #88]	; 0x58
  pcb->snd_buf -= len;
 8018268:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
  pcb->snd_lbb += len;
 801826c:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801826e:	f8a6 7062 	strh.w	r7, [r6, #98]	; 0x62
  pcb->snd_buf -= len;
 8018272:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 8018276:	65b2      	str	r2, [r6, #88]	; 0x58
  pcb->snd_buf -= len;
 8018278:	f8a6 a060 	strh.w	sl, [r6, #96]	; 0x60
  if (pcb->snd_queuelen != 0) {
 801827c:	b117      	cbz	r7, 8018284 <tcp_write+0x41c>
    LWIP_ASSERT("tcp_write: valid queue length",
 801827e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8018280:	2b00      	cmp	r3, #0
 8018282:	d069      	beq.n	8018358 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8018284:	f1b8 0f00 	cmp.w	r8, #0
 8018288:	d008      	beq.n	801829c <tcp_write+0x434>
 801828a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801828e:	2800      	cmp	r0, #0
 8018290:	f43f af3b 	beq.w	801810a <tcp_write+0x2a2>
 8018294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018296:	f013 0402 	ands.w	r4, r3, #2
 801829a:	d053      	beq.n	8018344 <tcp_write+0x4dc>
  return ERR_OK;
 801829c:	2000      	movs	r0, #0
 801829e:	e734      	b.n	801810a <tcp_write+0x2a2>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80182a0:	4b79      	ldr	r3, [pc, #484]	; (8018488 <tcp_write+0x620>)
 80182a2:	f240 12c7 	movw	r2, #455	; 0x1c7
 80182a6:	4979      	ldr	r1, [pc, #484]	; (801848c <tcp_write+0x624>)
 80182a8:	4879      	ldr	r0, [pc, #484]	; (8018490 <tcp_write+0x628>)
 80182aa:	f005 f99d 	bl	801d5e8 <iprintf>
 80182ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182b0:	891b      	ldrh	r3, [r3, #8]
 80182b2:	e620      	b.n	8017ef6 <tcp_write+0x8e>
  struct pbuf *concat_p = NULL;
 80182b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80182b8:	930c      	str	r3, [sp, #48]	; 0x30
 80182ba:	e786      	b.n	80181ca <tcp_write+0x362>
        pbuf_free(p2);
 80182bc:	4618      	mov	r0, r3
 80182be:	f7fc fac1 	bl	8014844 <pbuf_free>
        goto memerr;
 80182c2:	e702      	b.n	80180ca <tcp_write+0x262>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80182c4:	4b70      	ldr	r3, [pc, #448]	; (8018488 <tcp_write+0x620>)
 80182c6:	f240 3202 	movw	r2, #770	; 0x302
 80182ca:	4972      	ldr	r1, [pc, #456]	; (8018494 <tcp_write+0x62c>)
 80182cc:	4870      	ldr	r0, [pc, #448]	; (8018490 <tcp_write+0x628>)
 80182ce:	f005 f98b 	bl	801d5e8 <iprintf>
  return ERR_MEM;
 80182d2:	f04f 30ff 	mov.w	r0, #4294967295
 80182d6:	e718      	b.n	801810a <tcp_write+0x2a2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80182d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80182da:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80182de:	e618      	b.n	8017f12 <tcp_write+0xaa>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80182e0:	4b69      	ldr	r3, [pc, #420]	; (8018488 <tcp_write+0x620>)
 80182e2:	f240 12d9 	movw	r2, #473	; 0x1d9
 80182e6:	496c      	ldr	r1, [pc, #432]	; (8018498 <tcp_write+0x630>)
 80182e8:	4869      	ldr	r0, [pc, #420]	; (8018490 <tcp_write+0x628>)
 80182ea:	f005 f97d 	bl	801d5e8 <iprintf>
 80182ee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80182f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80182f4:	e70f      	b.n	8018116 <tcp_write+0x2ae>
  pcb->unsent_oversize = oversize;
 80182f6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80182fa:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
  if (concat_p != NULL) {
 80182fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018300:	2b00      	cmp	r3, #0
 8018302:	d034      	beq.n	801836e <tcp_write+0x506>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018306:	2b00      	cmp	r3, #0
 8018308:	d1a0      	bne.n	801824c <tcp_write+0x3e4>
 801830a:	4b5f      	ldr	r3, [pc, #380]	; (8018488 <tcp_write+0x620>)
 801830c:	f240 22bb 	movw	r2, #699	; 0x2bb
 8018310:	4962      	ldr	r1, [pc, #392]	; (801849c <tcp_write+0x634>)
 8018312:	485f      	ldr	r0, [pc, #380]	; (8018490 <tcp_write+0x628>)
 8018314:	f005 f968 	bl	801d5e8 <iprintf>
 8018318:	e798      	b.n	801824c <tcp_write+0x3e4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801831a:	f8b6 4064 	ldrh.w	r4, [r6, #100]	; 0x64
 801831e:	2c00      	cmp	r4, #0
 8018320:	f47f af19 	bne.w	8018156 <tcp_write+0x2ee>
 8018324:	940d      	str	r4, [sp, #52]	; 0x34
  queuelen = pcb->snd_queuelen;
 8018326:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018328:	940b      	str	r4, [sp, #44]	; 0x2c
 801832a:	940c      	str	r4, [sp, #48]	; 0x30
 801832c:	e64c      	b.n	8017fc8 <tcp_write+0x160>
  pcb->flags |= TF_NAGLEMEMERR;
 801832e:	7eb3      	ldrb	r3, [r6, #26]
  TCP_STATS_INC(tcp.memerr);
 8018330:	4a5b      	ldr	r2, [pc, #364]	; (80184a0 <tcp_write+0x638>)
  pcb->flags |= TF_NAGLEMEMERR;
 8018332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018336:	76b3      	strb	r3, [r6, #26]
  TCP_STATS_INC(tcp.memerr);
 8018338:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801833c:	3301      	adds	r3, #1
 801833e:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
 8018342:	e6d7      	b.n	80180f4 <tcp_write+0x28c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018344:	8985      	ldrh	r5, [r0, #12]
 8018346:	2008      	movs	r0, #8
 8018348:	f7fa fed4 	bl	80130f4 <lwip_htons>
 801834c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018350:	4305      	orrs	r5, r0
  return ERR_OK;
 8018352:	4620      	mov	r0, r4
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018354:	819d      	strh	r5, [r3, #12]
 8018356:	e6d8      	b.n	801810a <tcp_write+0x2a2>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018358:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 801835a:	2b00      	cmp	r3, #0
 801835c:	d192      	bne.n	8018284 <tcp_write+0x41c>
 801835e:	4b4a      	ldr	r3, [pc, #296]	; (8018488 <tcp_write+0x620>)
 8018360:	f240 22ed 	movw	r2, #749	; 0x2ed
 8018364:	494b      	ldr	r1, [pc, #300]	; (8018494 <tcp_write+0x62c>)
 8018366:	484a      	ldr	r0, [pc, #296]	; (8018490 <tcp_write+0x628>)
 8018368:	f005 f93e 	bl	801d5e8 <iprintf>
 801836c:	e78a      	b.n	8018284 <tcp_write+0x41c>
  } else if (extendlen > 0) {
 801836e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018370:	2b00      	cmp	r3, #0
 8018372:	d046      	beq.n	8018402 <tcp_write+0x59a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018376:	2b00      	cmp	r3, #0
 8018378:	d068      	beq.n	801844c <tcp_write+0x5e4>
 801837a:	6859      	ldr	r1, [r3, #4]
 801837c:	2900      	cmp	r1, #0
 801837e:	d065      	beq.n	801844c <tcp_write+0x5e4>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018380:	680a      	ldr	r2, [r1, #0]
 8018382:	2a00      	cmp	r2, #0
 8018384:	d07d      	beq.n	8018482 <tcp_write+0x61a>
 8018386:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018388:	e000      	b.n	801838c <tcp_write+0x524>
 801838a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801838c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801838e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8018390:	4423      	add	r3, r4
 8018392:	810b      	strh	r3, [r1, #8]
 8018394:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018396:	2800      	cmp	r0, #0
 8018398:	d1f7      	bne.n	801838a <tcp_write+0x522>
    p->tot_len += extendlen;
 801839a:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801839c:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801839e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 80183a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    p->tot_len += extendlen;
 80183a2:	4420      	add	r0, r4
    p->len += extendlen;
 80183a4:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 80183a6:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 80183a8:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 80183aa:	4423      	add	r3, r4
    p->len += extendlen;
 80183ac:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 80183ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183b0:	8113      	strh	r3, [r2, #8]
 80183b2:	e755      	b.n	8018260 <tcp_write+0x3f8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80183b4:	4b34      	ldr	r3, [pc, #208]	; (8018488 <tcp_write+0x620>)
 80183b6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80183ba:	493a      	ldr	r1, [pc, #232]	; (80184a4 <tcp_write+0x63c>)
 80183bc:	e5eb      	b.n	8017f96 <tcp_write+0x12e>
    return ERR_CONN;
 80183be:	f06f 000a 	mvn.w	r0, #10
 80183c2:	e6a2      	b.n	801810a <tcp_write+0x2a2>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80183c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183c6:	2301      	movs	r3, #1
 80183c8:	4641      	mov	r1, r8
 80183ca:	2004      	movs	r0, #4
 80183cc:	9302      	str	r3, [sp, #8]
 80183ce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80183d2:	e9cd 6200 	strd	r6, r2, [sp]
 80183d6:	4622      	mov	r2, r4
 80183d8:	f7ff fc56 	bl	8017c88 <tcp_pbuf_prealloc>
 80183dc:	4604      	mov	r4, r0
 80183de:	900c      	str	r0, [sp, #48]	; 0x30
 80183e0:	2800      	cmp	r0, #0
 80183e2:	d0a4      	beq.n	801832e <tcp_write+0x4c6>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80183e4:	9b07      	ldr	r3, [sp, #28]
 80183e6:	4642      	mov	r2, r8
 80183e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80183ea:	6840      	ldr	r0, [r0, #4]
 80183ec:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 80183ee:	2300      	movs	r3, #0
 80183f0:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80183f2:	f004 fdaa 	bl	801cf4a <memcpy>
        queuelen += pbuf_clen(concat_p);
 80183f6:	4620      	mov	r0, r4
 80183f8:	f7fc fc18 	bl	8014c2c <pbuf_clen>
 80183fc:	4407      	add	r7, r0
 80183fe:	b2bf      	uxth	r7, r7
 8018400:	e5b8      	b.n	8017f74 <tcp_write+0x10c>
  if (last_unsent == NULL) {
 8018402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018404:	2b00      	cmp	r3, #0
 8018406:	f47f af2b 	bne.w	8018260 <tcp_write+0x3f8>
    pcb->unsent = queue;
 801840a:	f8c6 9068 	str.w	r9, [r6, #104]	; 0x68
 801840e:	e72a      	b.n	8018266 <tcp_write+0x3fe>
    pcb->flags |= TF_NAGLEMEMERR;
 8018410:	7eb3      	ldrb	r3, [r6, #26]
    return ERR_MEM;
 8018412:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 8018416:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801841a:	76b3      	strb	r3, [r6, #26]
 801841c:	e675      	b.n	801810a <tcp_write+0x2a2>
    TCP_STATS_INC(tcp.memerr);
 801841e:	4a20      	ldr	r2, [pc, #128]	; (80184a0 <tcp_write+0x638>)
    return ERR_MEM;
 8018420:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 8018424:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8018428:	3301      	adds	r3, #1
 801842a:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801842e:	7eb3      	ldrb	r3, [r6, #26]
 8018430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018434:	76b3      	strb	r3, [r6, #26]
 8018436:	e668      	b.n	801810a <tcp_write+0x2a2>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018438:	4b13      	ldr	r3, [pc, #76]	; (8018488 <tcp_write+0x620>)
 801843a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801843e:	491a      	ldr	r1, [pc, #104]	; (80184a8 <tcp_write+0x640>)
 8018440:	4813      	ldr	r0, [pc, #76]	; (8018490 <tcp_write+0x628>)
 8018442:	f005 f8d1 	bl	801d5e8 <iprintf>
 8018446:	f06f 000f 	mvn.w	r0, #15
 801844a:	e65e      	b.n	801810a <tcp_write+0x2a2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801844c:	4b0e      	ldr	r3, [pc, #56]	; (8018488 <tcp_write+0x620>)
 801844e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8018452:	4916      	ldr	r1, [pc, #88]	; (80184ac <tcp_write+0x644>)
 8018454:	480e      	ldr	r0, [pc, #56]	; (8018490 <tcp_write+0x628>)
 8018456:	f005 f8c7 	bl	801d5e8 <iprintf>
 801845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801845c:	6859      	ldr	r1, [r3, #4]
 801845e:	e78f      	b.n	8018380 <tcp_write+0x518>
  pcb->unsent_oversize = oversize;
 8018460:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018464:	46d0      	mov	r8, sl
 8018466:	46d1      	mov	r9, sl
 8018468:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
 801846c:	e7cd      	b.n	801840a <tcp_write+0x5a2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801846e:	4b06      	ldr	r3, [pc, #24]	; (8018488 <tcp_write+0x620>)
 8018470:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8018474:	490e      	ldr	r1, [pc, #56]	; (80184b0 <tcp_write+0x648>)
 8018476:	4806      	ldr	r0, [pc, #24]	; (8018490 <tcp_write+0x628>)
          extendlen = seglen;
 8018478:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801847c:	f005 f8b4 	bl	801d5e8 <iprintf>
 8018480:	e578      	b.n	8017f74 <tcp_write+0x10c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018482:	460a      	mov	r2, r1
 8018484:	e789      	b.n	801839a <tcp_write+0x532>
 8018486:	bf00      	nop
 8018488:	08038f18 	.word	0x08038f18
 801848c:	08039004 	.word	0x08039004
 8018490:	08021804 	.word	0x08021804
 8018494:	0803918c 	.word	0x0803918c
 8018498:	0803901c 	.word	0x0803901c
 801849c:	0803911c 	.word	0x0803911c
 80184a0:	20033a7c 	.word	0x20033a7c
 80184a4:	08038f94 	.word	0x08038f94
 80184a8:	08038f60 	.word	0x08038f60
 80184ac:	08039154 	.word	0x08039154
 80184b0:	0803905c 	.word	0x0803905c

080184b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80184b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80184b8:	f011 0803 	ands.w	r8, r1, #3
{
 80184bc:	b083      	sub	sp, #12
 80184be:	460d      	mov	r5, r1
 80184c0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80184c2:	d050      	beq.n	8018566 <tcp_enqueue_flags+0xb2>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80184c4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80184c8:	2b08      	cmp	r3, #8
 80184ca:	d901      	bls.n	80184d0 <tcp_enqueue_flags+0x1c>
 80184cc:	07e9      	lsls	r1, r5, #31
 80184ce:	d57a      	bpl.n	80185c6 <tcp_enqueue_flags+0x112>
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
 80184d0:	f3c5 0740 	ubfx	r7, r5, #1, #1
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80184d4:	2200      	movs	r2, #0
 80184d6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80184da:	4610      	mov	r0, r2
 80184dc:	4649      	mov	r1, r9
 80184de:	f7fc fa1f 	bl	8014920 <pbuf_alloc>
 80184e2:	4606      	mov	r6, r0
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d07b      	beq.n	80185e0 <tcp_enqueue_flags+0x12c>
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80184e8:	8943      	ldrh	r3, [r0, #10]
 80184ea:	454b      	cmp	r3, r9
 80184ec:	d343      	bcc.n	8018576 <tcp_enqueue_flags+0xc2>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80184ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80184f0:	4632      	mov	r2, r6
 80184f2:	9701      	str	r7, [sp, #4]
 80184f4:	462b      	mov	r3, r5
 80184f6:	9100      	str	r1, [sp, #0]
 80184f8:	f104 0016 	add.w	r0, r4, #22
 80184fc:	f104 0118 	add.w	r1, r4, #24
 8018500:	f7ff fc02 	bl	8017d08 <tcp_create_segment.isra.0>
 8018504:	4606      	mov	r6, r0
 8018506:	2800      	cmp	r0, #0
 8018508:	d06a      	beq.n	80185e0 <tcp_enqueue_flags+0x12c>
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801850a:	68c3      	ldr	r3, [r0, #12]
 801850c:	079a      	lsls	r2, r3, #30
 801850e:	d146      	bne.n	801859e <tcp_enqueue_flags+0xea>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018510:	8933      	ldrh	r3, [r6, #8]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d137      	bne.n	8018586 <tcp_enqueue_flags+0xd2>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018516:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8018518:	b90a      	cbnz	r2, 801851e <tcp_enqueue_flags+0x6a>
 801851a:	e03e      	b.n	801859a <tcp_enqueue_flags+0xe6>
 801851c:	461a      	mov	r2, r3
    pcb->unsent = seg;
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801851e:	6813      	ldr	r3, [r2, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d1fb      	bne.n	801851c <tcp_enqueue_flags+0x68>
    useg->next = seg;
 8018524:	6016      	str	r6, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018526:	2300      	movs	r3, #0
 8018528:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801852c:	f1b8 0f00 	cmp.w	r8, #0
 8018530:	d002      	beq.n	8018538 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 8018532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018534:	3301      	adds	r3, #1
 8018536:	65a3      	str	r3, [r4, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018538:	07eb      	lsls	r3, r5, #31
 801853a:	d40f      	bmi.n	801855c <tcp_enqueue_flags+0xa8>
    pcb->flags |= TF_FIN;
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801853c:	6870      	ldr	r0, [r6, #4]
 801853e:	f7fc fb75 	bl	8014c2c <pbuf_clen>
 8018542:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8018546:	4418      	add	r0, r3
 8018548:	b280      	uxth	r0, r0
 801854a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801854e:	b110      	cbz	r0, 8018556 <tcp_enqueue_flags+0xa2>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018550:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8018552:	b360      	cbz	r0, 80185ae <tcp_enqueue_flags+0xfa>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018554:	2000      	movs	r0, #0
}
 8018556:	b003      	add	sp, #12
 8018558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pcb->flags |= TF_FIN;
 801855c:	7ea3      	ldrb	r3, [r4, #26]
 801855e:	f043 0320 	orr.w	r3, r3, #32
 8018562:	76a3      	strb	r3, [r4, #26]
 8018564:	e7ea      	b.n	801853c <tcp_enqueue_flags+0x88>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018566:	4b25      	ldr	r3, [pc, #148]	; (80185fc <tcp_enqueue_flags+0x148>)
 8018568:	f240 321b 	movw	r2, #795	; 0x31b
 801856c:	4924      	ldr	r1, [pc, #144]	; (8018600 <tcp_enqueue_flags+0x14c>)
 801856e:	4825      	ldr	r0, [pc, #148]	; (8018604 <tcp_enqueue_flags+0x150>)
 8018570:	f005 f83a 	bl	801d5e8 <iprintf>
 8018574:	e7a6      	b.n	80184c4 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018576:	4b21      	ldr	r3, [pc, #132]	; (80185fc <tcp_enqueue_flags+0x148>)
 8018578:	f240 3241 	movw	r2, #833	; 0x341
 801857c:	4922      	ldr	r1, [pc, #136]	; (8018608 <tcp_enqueue_flags+0x154>)
 801857e:	4821      	ldr	r0, [pc, #132]	; (8018604 <tcp_enqueue_flags+0x150>)
 8018580:	f005 f832 	bl	801d5e8 <iprintf>
 8018584:	e7b3      	b.n	80184ee <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018586:	f240 324a 	movw	r2, #842	; 0x34a
 801858a:	4b1c      	ldr	r3, [pc, #112]	; (80185fc <tcp_enqueue_flags+0x148>)
 801858c:	491f      	ldr	r1, [pc, #124]	; (801860c <tcp_enqueue_flags+0x158>)
 801858e:	481d      	ldr	r0, [pc, #116]	; (8018604 <tcp_enqueue_flags+0x150>)
 8018590:	f005 f82a 	bl	801d5e8 <iprintf>
  if (pcb->unsent == NULL) {
 8018594:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8018596:	2a00      	cmp	r2, #0
 8018598:	d1c1      	bne.n	801851e <tcp_enqueue_flags+0x6a>
    pcb->unsent = seg;
 801859a:	66a6      	str	r6, [r4, #104]	; 0x68
 801859c:	e7c3      	b.n	8018526 <tcp_enqueue_flags+0x72>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801859e:	4b17      	ldr	r3, [pc, #92]	; (80185fc <tcp_enqueue_flags+0x148>)
 80185a0:	f240 3249 	movw	r2, #841	; 0x349
 80185a4:	491a      	ldr	r1, [pc, #104]	; (8018610 <tcp_enqueue_flags+0x15c>)
 80185a6:	4817      	ldr	r0, [pc, #92]	; (8018604 <tcp_enqueue_flags+0x150>)
 80185a8:	f005 f81e 	bl	801d5e8 <iprintf>
 80185ac:	e7b0      	b.n	8018510 <tcp_enqueue_flags+0x5c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80185ae:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 80185b0:	2c00      	cmp	r4, #0
 80185b2:	d1d0      	bne.n	8018556 <tcp_enqueue_flags+0xa2>
 80185b4:	4b11      	ldr	r3, [pc, #68]	; (80185fc <tcp_enqueue_flags+0x148>)
 80185b6:	f240 326d 	movw	r2, #877	; 0x36d
 80185ba:	4916      	ldr	r1, [pc, #88]	; (8018614 <tcp_enqueue_flags+0x160>)
 80185bc:	4811      	ldr	r0, [pc, #68]	; (8018604 <tcp_enqueue_flags+0x150>)
 80185be:	f005 f813 	bl	801d5e8 <iprintf>
  return ERR_OK;
 80185c2:	4620      	mov	r0, r4
 80185c4:	e7c7      	b.n	8018556 <tcp_enqueue_flags+0xa2>
    TCP_STATS_INC(tcp.memerr);
 80185c6:	4a14      	ldr	r2, [pc, #80]	; (8018618 <tcp_enqueue_flags+0x164>)
    return ERR_MEM;
 80185c8:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 80185cc:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 80185d0:	3301      	adds	r3, #1
 80185d2:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 80185d6:	7ea3      	ldrb	r3, [r4, #26]
 80185d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80185dc:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 80185de:	e7ba      	b.n	8018556 <tcp_enqueue_flags+0xa2>
    pcb->flags |= TF_NAGLEMEMERR;
 80185e0:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_MEM;
 80185e2:	f04f 30ff 	mov.w	r0, #4294967295
    TCP_STATS_INC(tcp.memerr);
 80185e6:	4a0c      	ldr	r2, [pc, #48]	; (8018618 <tcp_enqueue_flags+0x164>)
    pcb->flags |= TF_NAGLEMEMERR;
 80185e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80185ec:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 80185ee:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 80185f2:	3301      	adds	r3, #1
 80185f4:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    return ERR_MEM;
 80185f8:	e7ad      	b.n	8018556 <tcp_enqueue_flags+0xa2>
 80185fa:	bf00      	nop
 80185fc:	08038f18 	.word	0x08038f18
 8018600:	08038da8 	.word	0x08038da8
 8018604:	08021804 	.word	0x08021804
 8018608:	08038e00 	.word	0x08038e00
 801860c:	08038e54 	.word	0x08038e54
 8018610:	08038e3c 	.word	0x08038e3c
 8018614:	08038e80 	.word	0x08038e80
 8018618:	20033a7c 	.word	0x20033a7c

0801861c <tcp_send_fin>:
{
 801861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 801861e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8018620:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8018622:	b90c      	cbnz	r4, 8018628 <tcp_send_fin+0xc>
 8018624:	e00a      	b.n	801863c <tcp_send_fin+0x20>
 8018626:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018628:	6823      	ldr	r3, [r4, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d1fb      	bne.n	8018626 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801862e:	68e3      	ldr	r3, [r4, #12]
 8018630:	8998      	ldrh	r0, [r3, #12]
 8018632:	f7fa fd5f 	bl	80130f4 <lwip_htons>
 8018636:	f010 0607 	ands.w	r6, r0, #7
 801863a:	d005      	beq.n	8018648 <tcp_send_fin+0x2c>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801863c:	4628      	mov	r0, r5
 801863e:	2101      	movs	r1, #1
}
 8018640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018644:	f7ff bf36 	b.w	80184b4 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018648:	68e3      	ldr	r3, [r4, #12]
 801864a:	2001      	movs	r0, #1
 801864c:	899f      	ldrh	r7, [r3, #12]
 801864e:	f7fa fd51 	bl	80130f4 <lwip_htons>
 8018652:	68e3      	ldr	r3, [r4, #12]
 8018654:	4338      	orrs	r0, r7
 8018656:	8198      	strh	r0, [r3, #12]
}
 8018658:	4630      	mov	r0, r6
      pcb->flags |= TF_FIN;
 801865a:	7eab      	ldrb	r3, [r5, #26]
 801865c:	f043 0320 	orr.w	r3, r3, #32
 8018660:	76ab      	strb	r3, [r5, #26]
}
 8018662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018664 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018668:	4604      	mov	r4, r0
 801866a:	b084      	sub	sp, #16
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801866c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801866e:	f7fa fd45 	bl	80130fc <lwip_htonl>
 8018672:	2100      	movs	r1, #0
 8018674:	4602      	mov	r2, r0
 8018676:	4620      	mov	r0, r4
 8018678:	f7ff fbb8 	bl	8017dec <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 801867c:	2800      	cmp	r0, #0
 801867e:	d037      	beq.n	80186f0 <tcp_send_empty_ack+0x8c>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018680:	1d26      	adds	r6, r4, #4
  tcphdr = (struct tcp_hdr *)p->payload;
 8018682:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018686:	4605      	mov	r5, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018688:	4630      	mov	r0, r6
 801868a:	f003 f8f5 	bl	801b878 <ip4_route>
  if (netif == NULL) {
 801868e:	4607      	mov	r7, r0
 8018690:	b308      	cbz	r0, 80186d6 <tcp_send_empty_ack+0x72>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018692:	892a      	ldrh	r2, [r5, #8]
 8018694:	4623      	mov	r3, r4
 8018696:	9600      	str	r6, [sp, #0]
 8018698:	2106      	movs	r1, #6
 801869a:	4628      	mov	r0, r5
 801869c:	f7fb fa8c 	bl	8013bb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80186a0:	f04f 0c06 	mov.w	ip, #6
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80186a4:	f8a8 0010 	strh.w	r0, [r8, #16]
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80186a8:	4632      	mov	r2, r6
 80186aa:	7a66      	ldrb	r6, [r4, #9]
 80186ac:	4621      	mov	r1, r4
 80186ae:	7aa3      	ldrb	r3, [r4, #10]
 80186b0:	4628      	mov	r0, r5
 80186b2:	9702      	str	r7, [sp, #8]
 80186b4:	e9cd 6c00 	strd	r6, ip, [sp]
 80186b8:	f003 faf2 	bl	801bca0 <ip4_output_if>
 80186bc:	4606      	mov	r6, r0
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80186be:	4628      	mov	r0, r5
 80186c0:	f7fc f8c0 	bl	8014844 <pbuf_free>

  if (err != ERR_OK) {
 80186c4:	b966      	cbnz	r6, 80186e0 <tcp_send_empty_ack+0x7c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80186c6:	7ea3      	ldrb	r3, [r4, #26]
 80186c8:	f023 0303 	bic.w	r3, r3, #3
 80186cc:	76a3      	strb	r3, [r4, #26]
  }

  return err;
}
 80186ce:	4630      	mov	r0, r6
 80186d0:	b004      	add	sp, #16
 80186d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  pbuf_free(p);
 80186d6:	4628      	mov	r0, r5
    err = ERR_RTE;
 80186d8:	f06f 0603 	mvn.w	r6, #3
  pbuf_free(p);
 80186dc:	f7fc f8b2 	bl	8014844 <pbuf_free>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80186e0:	7ea3      	ldrb	r3, [r4, #26]
}
 80186e2:	4630      	mov	r0, r6
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80186e4:	f043 0303 	orr.w	r3, r3, #3
 80186e8:	76a3      	strb	r3, [r4, #26]
}
 80186ea:	b004      	add	sp, #16
 80186ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80186f0:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_BUF;
 80186f2:	f06f 0601 	mvn.w	r6, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80186f6:	f043 0303 	orr.w	r3, r3, #3
 80186fa:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 80186fc:	e7e7      	b.n	80186ce <tcp_send_empty_ack+0x6a>
 80186fe:	bf00      	nop

08018700 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018700:	7d03      	ldrb	r3, [r0, #20]
 8018702:	2b01      	cmp	r3, #1
{
 8018704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018708:	4605      	mov	r5, r0
 801870a:	b085      	sub	sp, #20
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801870c:	f000 81a7 	beq.w	8018a5e <tcp_output+0x35e>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018710:	4bb3      	ldr	r3, [pc, #716]	; (80189e0 <tcp_output+0x2e0>)
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	42ab      	cmp	r3, r5
 8018716:	f000 819e 	beq.w	8018a56 <tcp_output+0x356>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801871a:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 801871e:	f8b5 2048 	ldrh.w	r2, [r5, #72]	; 0x48
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8018722:	7eab      	ldrb	r3, [r5, #26]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018724:	4297      	cmp	r7, r2
  seg = pcb->unsent;
 8018726:	6eac      	ldr	r4, [r5, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018728:	bf28      	it	cs
 801872a:	4617      	movcs	r7, r2
  if (pcb->flags & TF_ACK_NOW &&
 801872c:	0799      	lsls	r1, r3, #30
 801872e:	d50d      	bpl.n	801874c <tcp_output+0x4c>
 8018730:	2c00      	cmp	r4, #0
 8018732:	f000 80d5 	beq.w	80188e0 <tcp_output+0x1e0>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8018736:	68e3      	ldr	r3, [r4, #12]
 8018738:	6858      	ldr	r0, [r3, #4]
 801873a:	f7fa fcdf 	bl	80130fc <lwip_htonl>
 801873e:	8923      	ldrh	r3, [r4, #8]
 8018740:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8018742:	1a9b      	subs	r3, r3, r2
 8018744:	4418      	add	r0, r3
     (seg == NULL ||
 8018746:	42b8      	cmp	r0, r7
 8018748:	f200 80ca 	bhi.w	80188e0 <tcp_output+0x1e0>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801874c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 801874e:	2e00      	cmp	r6, #0
 8018750:	d13a      	bne.n	80187c8 <tcp_output+0xc8>
    for (; useg->next != NULL; useg = useg->next);
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018752:	f105 0904 	add.w	r9, r5, #4
 8018756:	4648      	mov	r0, r9
 8018758:	f003 f88e 	bl	801b878 <ip4_route>
  if (netif == NULL) {
 801875c:	4682      	mov	sl, r0
 801875e:	2800      	cmp	r0, #0
 8018760:	f000 818c 	beq.w	8018a7c <tcp_output+0x37c>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018764:	682b      	ldr	r3, [r5, #0]
 8018766:	b90b      	cbnz	r3, 801876c <tcp_output+0x6c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018768:	6843      	ldr	r3, [r0, #4]
 801876a:	602b      	str	r3, [r5, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801876c:	2c00      	cmp	r4, #0
 801876e:	f000 80ae 	beq.w	80188ce <tcp_output+0x1ce>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8018772:	68e3      	ldr	r3, [r4, #12]
 8018774:	6858      	ldr	r0, [r3, #4]
 8018776:	f7fa fcc1 	bl	80130fc <lwip_htonl>
 801877a:	8923      	ldrh	r3, [r4, #8]
 801877c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801877e:	1a9b      	subs	r3, r3, r2
 8018780:	4418      	add	r0, r3
 8018782:	42b8      	cmp	r0, r7
 8018784:	f240 8092 	bls.w	80188ac <tcp_output+0x1ac>
 8018788:	2f00      	cmp	r7, #0
 801878a:	f000 808f 	beq.w	80188ac <tcp_output+0x1ac>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801878e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8018792:	42bb      	cmp	r3, r7
 8018794:	f040 808a 	bne.w	80188ac <tcp_output+0x1ac>
 8018798:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801879a:	2b00      	cmp	r3, #0
 801879c:	f040 8086 	bne.w	80188ac <tcp_output+0x1ac>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80187a0:	f895 1095 	ldrb.w	r1, [r5, #149]	; 0x95
 80187a4:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80187a6:	7eab      	ldrb	r3, [r5, #26]
 80187a8:	b919      	cbnz	r1, 80187b2 <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 80187aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80187ae:	f8a5 1094 	strh.w	r1, [r5, #148]	; 0x94
    }
    seg = pcb->unsent;
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80187b2:	2a00      	cmp	r2, #0
 80187b4:	f000 8090 	beq.w	80188d8 <tcp_output+0x1d8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80187b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  return ERR_OK;
 80187bc:	2000      	movs	r0, #0
  pcb->flags &= ~TF_NAGLEMEMERR;
 80187be:	76ab      	strb	r3, [r5, #26]
}
 80187c0:	b005      	add	sp, #20
 80187c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c6:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80187c8:	6833      	ldr	r3, [r6, #0]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d1fb      	bne.n	80187c6 <tcp_output+0xc6>
 80187ce:	e7c0      	b.n	8018752 <tcp_output+0x52>
    LWIP_ASSERT("RST not expected here!",
 80187d0:	4b84      	ldr	r3, [pc, #528]	; (80189e4 <tcp_output+0x2e4>)
 80187d2:	f240 4246 	movw	r2, #1094	; 0x446
 80187d6:	4984      	ldr	r1, [pc, #528]	; (80189e8 <tcp_output+0x2e8>)
 80187d8:	4884      	ldr	r0, [pc, #528]	; (80189ec <tcp_output+0x2ec>)
 80187da:	f004 ff05 	bl	801d5e8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80187de:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80187e0:	b15b      	cbz	r3, 80187fa <tcp_output+0xfa>
 80187e2:	7eab      	ldrb	r3, [r5, #26]
 80187e4:	f013 0f44 	tst.w	r3, #68	; 0x44
 80187e8:	d107      	bne.n	80187fa <tcp_output+0xfa>
 80187ea:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80187ec:	2a00      	cmp	r2, #0
 80187ee:	f000 80e2 	beq.w	80189b6 <tcp_output+0x2b6>
 80187f2:	6811      	ldr	r1, [r2, #0]
 80187f4:	2900      	cmp	r1, #0
 80187f6:	f000 80d9 	beq.w	80189ac <tcp_output+0x2ac>
    if (pcb->state != SYN_SENT) {
 80187fa:	7d2b      	ldrb	r3, [r5, #20]
 80187fc:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8018800:	2b02      	cmp	r3, #2
 8018802:	d00a      	beq.n	801881a <tcp_output+0x11a>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018804:	f8b8 b00c 	ldrh.w	fp, [r8, #12]
 8018808:	2010      	movs	r0, #16
 801880a:	f7fa fc73 	bl	80130f4 <lwip_htons>
 801880e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8018812:	ea4b 0000 	orr.w	r0, fp, r0
 8018816:	f8a8 000c 	strh.w	r0, [r8, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801881a:	6863      	ldr	r3, [r4, #4]
 801881c:	89db      	ldrh	r3, [r3, #14]
 801881e:	2b01      	cmp	r3, #1
 8018820:	d06b      	beq.n	80188fa <tcp_output+0x1fa>
    if (pcb->state != SYN_SENT) {
 8018822:	7d2b      	ldrb	r3, [r5, #20]
    pcb->unsent = seg->next;
 8018824:	6822      	ldr	r2, [r4, #0]
    if (pcb->state != SYN_SENT) {
 8018826:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 8018828:	66aa      	str	r2, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801882a:	d003      	beq.n	8018834 <tcp_output+0x134>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801882c:	7eab      	ldrb	r3, [r5, #26]
 801882e:	f023 0303 	bic.w	r3, r3, #3
 8018832:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018834:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018838:	f7fa fc60 	bl	80130fc <lwip_htonl>
 801883c:	68e3      	ldr	r3, [r4, #12]
 801883e:	4680      	mov	r8, r0
 8018840:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8018844:	8998      	ldrh	r0, [r3, #12]
 8018846:	f7fa fc55 	bl	80130f4 <lwip_htons>
 801884a:	f010 0003 	ands.w	r0, r0, #3
 801884e:	44d8      	add	r8, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018850:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018852:	bf18      	it	ne
 8018854:	2001      	movne	r0, #1
 8018856:	4440      	add	r0, r8
    if (TCP_TCPLEN(seg) > 0) {
 8018858:	f8b4 8008 	ldrh.w	r8, [r4, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801885c:	1a1b      	subs	r3, r3, r0
 801885e:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8018860:	68e3      	ldr	r3, [r4, #12]
      pcb->snd_nxt = snd_nxt;
 8018862:	bfb8      	it	lt
 8018864:	64e8      	strlt	r0, [r5, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8018866:	8998      	ldrh	r0, [r3, #12]
 8018868:	f7fa fc44 	bl	80130f4 <lwip_htons>
 801886c:	f010 0003 	ands.w	r0, r0, #3
 8018870:	bf18      	it	ne
 8018872:	2001      	movne	r0, #1
 8018874:	eb10 0f08 	cmn.w	r0, r8
 8018878:	d038      	beq.n	80188ec <tcp_output+0x1ec>
      seg->next = NULL;
 801887a:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801887c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      seg->next = NULL;
 801887e:	6022      	str	r2, [r4, #0]
      if (pcb->unacked == NULL) {
 8018880:	2b00      	cmp	r3, #0
 8018882:	d037      	beq.n	80188f4 <tcp_output+0x1f4>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018884:	68e3      	ldr	r3, [r4, #12]
 8018886:	6858      	ldr	r0, [r3, #4]
 8018888:	f7fa fc38 	bl	80130fc <lwip_htonl>
 801888c:	68f3      	ldr	r3, [r6, #12]
 801888e:	4680      	mov	r8, r0
 8018890:	6858      	ldr	r0, [r3, #4]
 8018892:	f7fa fc33 	bl	80130fc <lwip_htonl>
 8018896:	eba8 0000 	sub.w	r0, r8, r0
 801889a:	2800      	cmp	r0, #0
 801889c:	f2c0 809a 	blt.w	80189d4 <tcp_output+0x2d4>
          useg->next = seg;
 80188a0:	6034      	str	r4, [r6, #0]
 80188a2:	4626      	mov	r6, r4
    seg = pcb->unsent;
 80188a4:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 80188a6:	2c00      	cmp	r4, #0
 80188a8:	f000 80eb 	beq.w	8018a82 <tcp_output+0x382>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80188ac:	68e3      	ldr	r3, [r4, #12]
 80188ae:	6858      	ldr	r0, [r3, #4]
 80188b0:	f7fa fc24 	bl	80130fc <lwip_htonl>
 80188b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80188b6:	8922      	ldrh	r2, [r4, #8]
 80188b8:	1ac0      	subs	r0, r0, r3
 80188ba:	4410      	add	r0, r2
  while (seg != NULL &&
 80188bc:	42b8      	cmp	r0, r7
 80188be:	d806      	bhi.n	80188ce <tcp_output+0x1ce>
    LWIP_ASSERT("RST not expected here!",
 80188c0:	68e3      	ldr	r3, [r4, #12]
 80188c2:	8998      	ldrh	r0, [r3, #12]
 80188c4:	f7fa fc16 	bl	80130f4 <lwip_htons>
 80188c8:	0742      	lsls	r2, r0, #29
 80188ca:	d588      	bpl.n	80187de <tcp_output+0xde>
 80188cc:	e780      	b.n	80187d0 <tcp_output+0xd0>
 80188ce:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80188d0:	7eab      	ldrb	r3, [r5, #26]
  if (pcb->unsent == NULL) {
 80188d2:	2a00      	cmp	r2, #0
 80188d4:	f47f af70 	bne.w	80187b8 <tcp_output+0xb8>
    pcb->unsent_oversize = 0;
 80188d8:	2200      	movs	r2, #0
 80188da:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
 80188de:	e76b      	b.n	80187b8 <tcp_output+0xb8>
     return tcp_send_empty_ack(pcb);
 80188e0:	4628      	mov	r0, r5
}
 80188e2:	b005      	add	sp, #20
 80188e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 80188e8:	f7ff bebc 	b.w	8018664 <tcp_send_empty_ack>
      tcp_seg_free(seg);
 80188ec:	4620      	mov	r0, r4
 80188ee:	f7fc fea7 	bl	8015640 <tcp_seg_free>
 80188f2:	e7d7      	b.n	80188a4 <tcp_output+0x1a4>
        pcb->unacked = seg;
 80188f4:	66ec      	str	r4, [r5, #108]	; 0x6c
 80188f6:	4626      	mov	r6, r4
 80188f8:	e7d4      	b.n	80188a4 <tcp_output+0x1a4>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80188fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80188fc:	f7fa fbfe 	bl	80130fc <lwip_htonl>
 8018900:	f8c8 0008 	str.w	r0, [r8, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018904:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8018906:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801890a:	f7fa fbf3 	bl	80130f4 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801890e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8018910:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018912:	f8a8 000e 	strh.w	r0, [r8, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018916:	4413      	add	r3, r2

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018918:	f8d4 800c 	ldr.w	r8, [r4, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801891c:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801891e:	7aa3      	ldrb	r3, [r4, #10]
 8018920:	07db      	lsls	r3, r3, #31
 8018922:	d47f      	bmi.n	8018a24 <tcp_output+0x324>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018924:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8018928:	2b00      	cmp	r3, #0
 801892a:	da01      	bge.n	8018930 <tcp_output+0x230>
    pcb->rtime = 0;
 801892c:	2300      	movs	r3, #0
 801892e:	862b      	strh	r3, [r5, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018930:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8018932:	2b00      	cmp	r3, #0
 8018934:	f000 8084 	beq.w	8018a40 <tcp_output+0x340>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018938:	6861      	ldr	r1, [r4, #4]
  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 801893a:	f04f 0c00 	mov.w	ip, #0
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801893e:	462b      	mov	r3, r5
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018940:	684a      	ldr	r2, [r1, #4]
  seg->p->len -= len;
 8018942:	8948      	ldrh	r0, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018944:	eba8 0e02 	sub.w	lr, r8, r2
  seg->p->tot_len -= len;
 8018948:	890a      	ldrh	r2, [r1, #8]
  seg->p->payload = seg->tcphdr;
 801894a:	f8c1 8004 	str.w	r8, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801894e:	fa1f fe8e 	uxth.w	lr, lr
  seg->p->tot_len -= len;
 8018952:	eba2 020e 	sub.w	r2, r2, lr
  seg->p->len -= len;
 8018956:	eba0 000e 	sub.w	r0, r0, lr
  seg->p->tot_len -= len;
 801895a:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801895c:	8148      	strh	r0, [r1, #10]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801895e:	4608      	mov	r0, r1
  seg->p->tot_len -= len;
 8018960:	810a      	strh	r2, [r1, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018962:	2106      	movs	r1, #6
  seg->tcphdr->chksum = 0;
 8018964:	f888 c010 	strb.w	ip, [r8, #16]
 8018968:	f888 c011 	strb.w	ip, [r8, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801896c:	f8cd 9000 	str.w	r9, [sp]
 8018970:	f7fb f922 	bl	8013bb8 <ip_chksum_pseudo>
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8018974:	f8df c078 	ldr.w	ip, [pc, #120]	; 80189f0 <tcp_output+0x2f0>

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018978:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801897c:	f8a8 0010 	strh.w	r0, [r8, #16]
  TCP_STATS_INC(tcp.xmit);
 8018980:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018984:	464a      	mov	r2, r9
 8018986:	6860      	ldr	r0, [r4, #4]
 8018988:	4629      	mov	r1, r5
  TCP_STATS_INC(tcp.xmit);
 801898a:	3301      	adds	r3, #1
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801898c:	e9cd ea01 	strd	lr, sl, [sp, #4]
  TCP_STATS_INC(tcp.xmit);
 8018990:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018994:	f895 c009 	ldrb.w	ip, [r5, #9]
 8018998:	7aab      	ldrb	r3, [r5, #10]
 801899a:	f8cd c000 	str.w	ip, [sp]
 801899e:	f003 f97f 	bl	801bca0 <ip4_output_if>
    if (err != ERR_OK) {
 80189a2:	2800      	cmp	r0, #0
 80189a4:	d163      	bne.n	8018a6e <tcp_output+0x36e>
 80189a6:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80189aa:	e73a      	b.n	8018822 <tcp_output+0x122>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80189ac:	8910      	ldrh	r0, [r2, #8]
 80189ae:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 80189b0:	4288      	cmp	r0, r1
 80189b2:	f4bf af22 	bcs.w	80187fa <tcp_output+0xfa>
 80189b6:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
 80189ba:	2900      	cmp	r1, #0
 80189bc:	f43f af1d 	beq.w	80187fa <tcp_output+0xfa>
 80189c0:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
 80189c4:	2908      	cmp	r1, #8
 80189c6:	f63f af18 	bhi.w	80187fa <tcp_output+0xfa>
 80189ca:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80189ce:	f47f af14 	bne.w	80187fa <tcp_output+0xfa>
output_done:
 80189d2:	e6ee      	b.n	80187b2 <tcp_output+0xb2>
          while (*cur_seg &&
 80189d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80189d6:	f105 0b6c 	add.w	fp, r5, #108	; 0x6c
          while (*cur_seg &&
 80189da:	b983      	cbnz	r3, 80189fe <tcp_output+0x2fe>
 80189dc:	e01e      	b.n	8018a1c <tcp_output+0x31c>
 80189de:	bf00      	nop
 80189e0:	20033b9c 	.word	0x20033b9c
 80189e4:	08038f18 	.word	0x08038f18
 80189e8:	08038ed0 	.word	0x08038ed0
 80189ec:	08021804 	.word	0x08021804
 80189f0:	20033a7c 	.word	0x20033a7c
              cur_seg = &((*cur_seg)->next );
 80189f4:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 80189f8:	f8db 3000 	ldr.w	r3, [fp]
 80189fc:	b173      	cbz	r3, 8018a1c <tcp_output+0x31c>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	6858      	ldr	r0, [r3, #4]
 8018a02:	f7fa fb7b 	bl	80130fc <lwip_htonl>
 8018a06:	68e3      	ldr	r3, [r4, #12]
 8018a08:	4680      	mov	r8, r0
 8018a0a:	6858      	ldr	r0, [r3, #4]
 8018a0c:	f7fa fb76 	bl	80130fc <lwip_htonl>
 8018a10:	eba8 0000 	sub.w	r0, r8, r0
          while (*cur_seg &&
 8018a14:	2800      	cmp	r0, #0
 8018a16:	dbed      	blt.n	80189f4 <tcp_output+0x2f4>
 8018a18:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8018a1c:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8018a1e:	f8cb 4000 	str.w	r4, [fp]
 8018a22:	e73f      	b.n	80188a4 <tcp_output+0x1a4>
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8018a24:	4649      	mov	r1, r9
 8018a26:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018a2a:	f7fd fc81 	bl	8016330 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018a2e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8018a32:	f7fa fb63 	bl	80130fc <lwip_htonl>
 8018a36:	f8c8 0014 	str.w	r0, [r8, #20]
 8018a3a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8018a3e:	e771      	b.n	8018924 <tcp_output+0x224>
    pcb->rttest = tcp_ticks;
 8018a40:	4b11      	ldr	r3, [pc, #68]	; (8018a88 <tcp_output+0x388>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018a46:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a4a:	f7fa fb57 	bl	80130fc <lwip_htonl>
 8018a4e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8018a52:	63a8      	str	r0, [r5, #56]	; 0x38
 8018a54:	e770      	b.n	8018938 <tcp_output+0x238>
    return ERR_OK;
 8018a56:	2000      	movs	r0, #0
}
 8018a58:	b005      	add	sp, #20
 8018a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018a5e:	4b0b      	ldr	r3, [pc, #44]	; (8018a8c <tcp_output+0x38c>)
 8018a60:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8018a64:	490a      	ldr	r1, [pc, #40]	; (8018a90 <tcp_output+0x390>)
 8018a66:	480b      	ldr	r0, [pc, #44]	; (8018a94 <tcp_output+0x394>)
 8018a68:	f004 fdbe 	bl	801d5e8 <iprintf>
 8018a6c:	e650      	b.n	8018710 <tcp_output+0x10>
      pcb->flags |= TF_NAGLEMEMERR;
 8018a6e:	7eab      	ldrb	r3, [r5, #26]
 8018a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018a74:	76ab      	strb	r3, [r5, #26]
}
 8018a76:	b005      	add	sp, #20
 8018a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 8018a7c:	f06f 0003 	mvn.w	r0, #3
 8018a80:	e69e      	b.n	80187c0 <tcp_output+0xc0>
 8018a82:	7eab      	ldrb	r3, [r5, #26]
 8018a84:	e728      	b.n	80188d8 <tcp_output+0x1d8>
 8018a86:	bf00      	nop
 8018a88:	20033b8c 	.word	0x20033b8c
 8018a8c:	08038f18 	.word	0x08038f18
 8018a90:	08038ea8 	.word	0x08038ea8
 8018a94:	08021804 	.word	0x08021804

08018a98 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8018a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a9c:	b085      	sub	sp, #20
 8018a9e:	4682      	mov	sl, r0
 8018aa0:	4689      	mov	r9, r1
 8018aa2:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8018aa4:	2114      	movs	r1, #20
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	2001      	movs	r0, #1
{
 8018aaa:	461f      	mov	r7, r3
 8018aac:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018ab0:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8018ab4:	f7fb ff34 	bl	8014920 <pbuf_alloc>
  if (p == NULL) {
 8018ab8:	2800      	cmp	r0, #0
 8018aba:	d052      	beq.n	8018b62 <tcp_rst+0xca>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018abc:	8943      	ldrh	r3, [r0, #10]
 8018abe:	4605      	mov	r5, r0
 8018ac0:	2b13      	cmp	r3, #19
 8018ac2:	d946      	bls.n	8018b52 <tcp_rst+0xba>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8018ac4:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	f7fa fb14 	bl	80130f4 <lwip_htons>
  tcphdr->ackno = lwip_htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018acc:	2600      	movs	r6, #0
  tcphdr->src = lwip_htons(local_port);
 8018ace:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8018ad0:	4658      	mov	r0, fp
 8018ad2:	f7fa fb0f 	bl	80130f4 <lwip_htons>
 8018ad6:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8018ad8:	4650      	mov	r0, sl
 8018ada:	f7fa fb0f 	bl	80130fc <lwip_htonl>
 8018ade:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8018ae0:	4648      	mov	r0, r9
 8018ae2:	f7fa fb0b 	bl	80130fc <lwip_htonl>
 8018ae6:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8018ae8:	f245 0014 	movw	r0, #20500	; 0x5014
 8018aec:	f7fa fb02 	bl	80130f4 <lwip_htons>
#endif
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
 8018af0:	4a1d      	ldr	r2, [pc, #116]	; (8018b68 <tcp_rst+0xd0>)
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018af2:	f04f 0c08 	mov.w	ip, #8
 8018af6:	2160      	movs	r1, #96	; 0x60
  TCP_STATS_INC(tcp.xmit);
 8018af8:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8018afc:	81a0      	strh	r0, [r4, #12]
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8018afe:	4638      	mov	r0, r7
  TCP_STATS_INC(tcp.xmit);
 8018b00:	3301      	adds	r3, #1
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8018b02:	f884 c00e 	strb.w	ip, [r4, #14]
 8018b06:	73e1      	strb	r1, [r4, #15]
  tcphdr->chksum = 0;
 8018b08:	7426      	strb	r6, [r4, #16]
 8018b0a:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8018b0c:	74a6      	strb	r6, [r4, #18]
 8018b0e:	74e6      	strb	r6, [r4, #19]
  TCP_STATS_INC(tcp.xmit);
 8018b10:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  netif = ip_route(local_ip, remote_ip);
 8018b14:	f002 feb0 	bl	801b878 <ip4_route>
  if (netif != NULL) {
 8018b18:	4681      	mov	r9, r0
 8018b1a:	b1a0      	cbz	r0, 8018b46 <tcp_rst+0xae>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018b1c:	892a      	ldrh	r2, [r5, #8]
 8018b1e:	4643      	mov	r3, r8
 8018b20:	2106      	movs	r1, #6
 8018b22:	9700      	str	r7, [sp, #0]
 8018b24:	4628      	mov	r0, r5
 8018b26:	f7fb f847 	bl	8013bb8 <ip_chksum_pseudo>
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8018b2a:	f04f 0c06 	mov.w	ip, #6
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018b2e:	8220      	strh	r0, [r4, #16]
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8018b30:	463a      	mov	r2, r7
 8018b32:	f8cd 9008 	str.w	r9, [sp, #8]
 8018b36:	4641      	mov	r1, r8
 8018b38:	9600      	str	r6, [sp, #0]
 8018b3a:	23ff      	movs	r3, #255	; 0xff
 8018b3c:	f8cd c004 	str.w	ip, [sp, #4]
 8018b40:	4628      	mov	r0, r5
 8018b42:	f003 f8ad 	bl	801bca0 <ip4_output_if>
  }
  pbuf_free(p);
 8018b46:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018b48:	b005      	add	sp, #20
 8018b4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8018b4e:	f7fb be79 	b.w	8014844 <pbuf_free>
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018b52:	4b06      	ldr	r3, [pc, #24]	; (8018b6c <tcp_rst+0xd4>)
 8018b54:	f240 524d 	movw	r2, #1357	; 0x54d
 8018b58:	4905      	ldr	r1, [pc, #20]	; (8018b70 <tcp_rst+0xd8>)
 8018b5a:	4806      	ldr	r0, [pc, #24]	; (8018b74 <tcp_rst+0xdc>)
 8018b5c:	f004 fd44 	bl	801d5e8 <iprintf>
 8018b60:	e7b0      	b.n	8018ac4 <tcp_rst+0x2c>
}
 8018b62:	b005      	add	sp, #20
 8018b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b68:	20033a7c 	.word	0x20033a7c
 8018b6c:	08038f18 	.word	0x08038f18
 8018b70:	08038ee8 	.word	0x08038ee8
 8018b74:	08021804 	.word	0x08021804

08018b78 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018b78:	4601      	mov	r1, r0
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8018b7a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8018b7c:	b1c0      	cbz	r0, 8018bb0 <tcp_rexmit_rto+0x38>
 8018b7e:	4602      	mov	r2, r0
{
 8018b80:	b410      	push	{r4}
 8018b82:	e000      	b.n	8018b86 <tcp_rexmit_rto+0xe>
 8018b84:	461a      	mov	r2, r3
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8018b86:	6813      	ldr	r3, [r2, #0]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d1fb      	bne.n	8018b84 <tcp_rexmit_rto+0xc>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018b8c:	6e8c      	ldr	r4, [r1, #104]	; 0x68
 8018b8e:	6014      	str	r4, [r2, #0]
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018b90:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
 8018b94:	2aff      	cmp	r2, #255	; 0xff
  pcb->unacked = NULL;
 8018b96:	e9c1 031a 	strd	r0, r3, [r1, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8018b9a:	d002      	beq.n	8018ba2 <tcp_rexmit_rto+0x2a>
    ++pcb->nrtx;
 8018b9c:	3201      	adds	r2, #1
 8018b9e:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018ba2:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
 8018ba4:	4608      	mov	r0, r1
}
 8018ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 8018baa:	634b      	str	r3, [r1, #52]	; 0x34
  tcp_output(pcb);
 8018bac:	f7ff bda8 	b.w	8018700 <tcp_output>
 8018bb0:	4770      	bx	lr
 8018bb2:	bf00      	nop

08018bb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8018bb6:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8018bb8:	b326      	cbz	r6, 8018c04 <tcp_rexmit+0x50>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8018bba:	6832      	ldr	r2, [r6, #0]
 8018bbc:	4607      	mov	r7, r0

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 8018bbe:	6e83      	ldr	r3, [r0, #104]	; 0x68
  cur_seg = &(pcb->unsent);
 8018bc0:	f100 0568 	add.w	r5, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8018bc4:	66c2      	str	r2, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8018bc6:	b91b      	cbnz	r3, 8018bd0 <tcp_rexmit+0x1c>
 8018bc8:	e00f      	b.n	8018bea <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8018bca:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	b163      	cbz	r3, 8018bea <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018bd0:	68db      	ldr	r3, [r3, #12]
 8018bd2:	6858      	ldr	r0, [r3, #4]
 8018bd4:	f7fa fa92 	bl	80130fc <lwip_htonl>
 8018bd8:	68f3      	ldr	r3, [r6, #12]
 8018bda:	4604      	mov	r4, r0
 8018bdc:	6858      	ldr	r0, [r3, #4]
 8018bde:	f7fa fa8d 	bl	80130fc <lwip_htonl>
 8018be2:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 8018be4:	2800      	cmp	r0, #0
 8018be6:	dbf0      	blt.n	8018bca <tcp_rexmit+0x16>
 8018be8:	682b      	ldr	r3, [r5, #0]
  }
  seg->next = *cur_seg;
 8018bea:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8018bec:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018bee:	6833      	ldr	r3, [r6, #0]
 8018bf0:	b14b      	cbz	r3, 8018c06 <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018bf2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8018bf6:	2bff      	cmp	r3, #255	; 0xff
 8018bf8:	d002      	beq.n	8018c00 <tcp_rexmit+0x4c>
    ++pcb->nrtx;
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018c00:	2300      	movs	r3, #0
 8018c02:	637b      	str	r3, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8018c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8018c06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8018c0a:	e7f2      	b.n	8018bf2 <tcp_rexmit+0x3e>

08018c0c <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018c0c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8018c0e:	b322      	cbz	r2, 8018c5a <tcp_rexmit_fast+0x4e>
{
 8018c10:	b510      	push	{r4, lr}
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018c12:	7e82      	ldrb	r2, [r0, #26]
 8018c14:	4604      	mov	r4, r0
 8018c16:	0753      	lsls	r3, r2, #29
 8018c18:	d500      	bpl.n	8018c1c <tcp_rexmit_fast+0x10>
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  }
}
 8018c1a:	bd10      	pop	{r4, pc}
    tcp_rexmit(pcb);
 8018c1c:	f7ff ffca 	bl	8018bb4 <tcp_rexmit>
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c20:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8018c24:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	bf38      	it	cc
 8018c2c:	0853      	lsrcc	r3, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c2e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c30:	bf28      	it	cs
 8018c32:	085b      	lsrcs	r3, r3, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c34:	0051      	lsls	r1, r2, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c36:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c3a:	428b      	cmp	r3, r1
 8018c3c:	d202      	bcs.n	8018c44 <tcp_rexmit_fast+0x38>
      pcb->ssthresh = 2*pcb->mss;
 8018c3e:	b28b      	uxth	r3, r1
 8018c40:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018c44:	440a      	add	r2, r1
    pcb->flags |= TF_INFR;
 8018c46:	7ea1      	ldrb	r1, [r4, #26]
    pcb->rtime = 0;
 8018c48:	2000      	movs	r0, #0
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018c4a:	4413      	add	r3, r2
    pcb->flags |= TF_INFR;
 8018c4c:	f041 0204 	orr.w	r2, r1, #4
    pcb->rtime = 0;
 8018c50:	8620      	strh	r0, [r4, #48]	; 0x30
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018c52:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8018c56:	76a2      	strb	r2, [r4, #26]
}
 8018c58:	bd10      	pop	{r4, pc}
 8018c5a:	4770      	bx	lr

08018c5c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c60:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018c62:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 8018c64:	b084      	sub	sp, #16
  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018c66:	3801      	subs	r0, #1
 8018c68:	f7fa fa48 	bl	80130fc <lwip_htonl>
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	4602      	mov	r2, r0
 8018c70:	4620      	mov	r0, r4
 8018c72:	f7ff f8bb 	bl	8017dec <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 8018c76:	b380      	cbz	r0, 8018cda <tcp_keepalive+0x7e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018c78:	1d26      	adds	r6, r4, #4
 8018c7a:	4605      	mov	r5, r0
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	f002 fdfb 	bl	801b878 <ip4_route>
  if (netif == NULL) {
 8018c82:	4607      	mov	r7, r0
 8018c84:	b330      	cbz	r0, 8018cd4 <tcp_keepalive+0x78>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018c86:	892a      	ldrh	r2, [r5, #8]
 8018c88:	4623      	mov	r3, r4
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8018c8a:	f8d5 8004 	ldr.w	r8, [r5, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018c8e:	2106      	movs	r1, #6
 8018c90:	9600      	str	r6, [sp, #0]
 8018c92:	4628      	mov	r0, r5
 8018c94:	f7fa ff90 	bl	8013bb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 8018c98:	f8df c044 	ldr.w	ip, [pc, #68]	; 8018ce0 <tcp_keepalive+0x84>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018c9c:	f8a8 0010 	strh.w	r0, [r8, #16]

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8018ca0:	f04f 0e00 	mov.w	lr, #0
    TCP_STATS_INC(tcp.xmit);
 8018ca4:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8018ca8:	2006      	movs	r0, #6
 8018caa:	9702      	str	r7, [sp, #8]
 8018cac:	4621      	mov	r1, r4
    TCP_STATS_INC(tcp.xmit);
 8018cae:	3301      	adds	r3, #1
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8018cb0:	9001      	str	r0, [sp, #4]
 8018cb2:	4632      	mov	r2, r6
 8018cb4:	4628      	mov	r0, r5
    TCP_STATS_INC(tcp.xmit);
 8018cb6:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8018cba:	7aa3      	ldrb	r3, [r4, #10]
 8018cbc:	f8cd e000 	str.w	lr, [sp]
 8018cc0:	f002 ffee 	bl	801bca0 <ip4_output_if>
 8018cc4:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	f7fb fdbc 	bl	8014844 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8018ccc:	4620      	mov	r0, r4
 8018cce:	b004      	add	sp, #16
 8018cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_RTE;
 8018cd4:	f06f 0403 	mvn.w	r4, #3
 8018cd8:	e7f5      	b.n	8018cc6 <tcp_keepalive+0x6a>
    return ERR_MEM;
 8018cda:	f04f 34ff 	mov.w	r4, #4294967295
 8018cde:	e7f5      	b.n	8018ccc <tcp_keepalive+0x70>
 8018ce0:	20033a7c 	.word	0x20033a7c

08018ce4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8018ce8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8018cea:	b084      	sub	sp, #16

  if (seg == NULL) {
 8018cec:	2c00      	cmp	r4, #0
 8018cee:	d068      	beq.n	8018dc2 <tcp_zero_window_probe+0xde>
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018cf0:	68e3      	ldr	r3, [r4, #12]
 8018cf2:	4605      	mov	r5, r0
 8018cf4:	8998      	ldrh	r0, [r3, #12]
 8018cf6:	f7fa f9fd 	bl	80130f4 <lwip_htons>
 8018cfa:	07c2      	lsls	r2, r0, #31
 8018cfc:	68e3      	ldr	r3, [r4, #12]
 8018cfe:	d449      	bmi.n	8018d94 <tcp_zero_window_probe+0xb0>
 8018d00:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8018d02:	2101      	movs	r1, #1
 8018d04:	4628      	mov	r0, r5
 8018d06:	f7ff f871 	bl	8017dec <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 8018d0a:	4606      	mov	r6, r0
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d062      	beq.n	8018dd6 <tcp_zero_window_probe+0xf2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018d10:	6860      	ldr	r0, [r4, #4]
 8018d12:	2201      	movs	r2, #1
 8018d14:	8921      	ldrh	r1, [r4, #8]
 8018d16:	8903      	ldrh	r3, [r0, #8]
  tcphdr = (struct tcp_hdr *)p->payload;
 8018d18:	f8d6 8004 	ldr.w	r8, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018d1c:	1a5b      	subs	r3, r3, r1
 8018d1e:	f108 0114 	add.w	r1, r8, #20
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	f7fc f8ba 	bl	8014e9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018d28:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018d2a:	1d2c      	adds	r4, r5, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018d2c:	6858      	ldr	r0, [r3, #4]
 8018d2e:	f7fa f9e5 	bl	80130fc <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018d32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018d34:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018d36:	1a1b      	subs	r3, r3, r0
 8018d38:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8018d3a:	bfb8      	it	lt
 8018d3c:	64e8      	strlt	r0, [r5, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8018d3e:	4620      	mov	r0, r4
 8018d40:	f002 fd9a 	bl	801b878 <ip4_route>
  if (netif == NULL) {
 8018d44:	4607      	mov	r7, r0
 8018d46:	2800      	cmp	r0, #0
 8018d48:	d042      	beq.n	8018dd0 <tcp_zero_window_probe+0xec>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018d4a:	8932      	ldrh	r2, [r6, #8]
 8018d4c:	462b      	mov	r3, r5
 8018d4e:	9400      	str	r4, [sp, #0]
 8018d50:	2106      	movs	r1, #6
 8018d52:	4630      	mov	r0, r6
 8018d54:	f7fa ff30 	bl	8013bb8 <ip_chksum_pseudo>
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 8018d58:	f8df c088 	ldr.w	ip, [pc, #136]	; 8018de4 <tcp_zero_window_probe+0x100>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018d5c:	f8a8 0010 	strh.w	r0, [r8, #16]

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018d60:	f04f 0e00 	mov.w	lr, #0
    TCP_STATS_INC(tcp.xmit);
 8018d64:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018d68:	2006      	movs	r0, #6
 8018d6a:	9702      	str	r7, [sp, #8]
 8018d6c:	4622      	mov	r2, r4
    TCP_STATS_INC(tcp.xmit);
 8018d6e:	3301      	adds	r3, #1
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018d70:	9001      	str	r0, [sp, #4]
 8018d72:	4629      	mov	r1, r5
 8018d74:	4630      	mov	r0, r6
    TCP_STATS_INC(tcp.xmit);
 8018d76:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018d7a:	7aab      	ldrb	r3, [r5, #10]
 8018d7c:	f8cd e000 	str.w	lr, [sp]
 8018d80:	f002 ff8e 	bl	801bca0 <ip4_output_if>
 8018d84:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8018d86:	4630      	mov	r0, r6
 8018d88:	f7fb fd5c 	bl	8014844 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	b004      	add	sp, #16
 8018d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018d94:	8921      	ldrh	r1, [r4, #8]
 8018d96:	685a      	ldr	r2, [r3, #4]
 8018d98:	2900      	cmp	r1, #0
 8018d9a:	d1b2      	bne.n	8018d02 <tcp_zero_window_probe+0x1e>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8018d9c:	4628      	mov	r0, r5
 8018d9e:	f7ff f825 	bl	8017dec <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 8018da2:	4606      	mov	r6, r0
 8018da4:	b1b8      	cbz	r0, 8018dd6 <tcp_zero_window_probe+0xf2>
  tcphdr = (struct tcp_hdr *)p->payload;
 8018da6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018daa:	2011      	movs	r0, #17
 8018dac:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8018db0:	f7fa f9a0 	bl	80130f4 <lwip_htons>
 8018db4:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8018db8:	b2bf      	uxth	r7, r7
 8018dba:	4338      	orrs	r0, r7
 8018dbc:	f8a8 000c 	strh.w	r0, [r8, #12]
 8018dc0:	e7b2      	b.n	8018d28 <tcp_zero_window_probe+0x44>
    seg = pcb->unsent;
 8018dc2:	6e84      	ldr	r4, [r0, #104]	; 0x68
  if (seg == NULL) {
 8018dc4:	2c00      	cmp	r4, #0
 8018dc6:	d193      	bne.n	8018cf0 <tcp_zero_window_probe+0xc>
}
 8018dc8:	4620      	mov	r0, r4
 8018dca:	b004      	add	sp, #16
 8018dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_RTE;
 8018dd0:	f06f 0403 	mvn.w	r4, #3
 8018dd4:	e7d7      	b.n	8018d86 <tcp_zero_window_probe+0xa2>
    return ERR_MEM;
 8018dd6:	f04f 34ff 	mov.w	r4, #4294967295
}
 8018dda:	4620      	mov	r0, r4
 8018ddc:	b004      	add	sp, #16
 8018dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de2:	bf00      	nop
 8018de4:	20033a7c 	.word	0x20033a7c

08018de8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dec:	4605      	mov	r5, r0
 8018dee:	4688      	mov	r8, r1
 8018df0:	4617      	mov	r7, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018df2:	4925      	ldr	r1, [pc, #148]	; (8018e88 <sys_timeout+0xa0>)
 8018df4:	22d2      	movs	r2, #210	; 0xd2
 8018df6:	200c      	movs	r0, #12
 8018df8:	f7fb fb08 	bl	801440c <memp_malloc_fn>
  if (timeout == NULL) {
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	d02d      	beq.n	8018e5c <sys_timeout+0x74>
 8018e00:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 8018e02:	f7f5 ff4f 	bl	800eca4 <sys_now>
  if (next_timeout == NULL) {
 8018e06:	4a21      	ldr	r2, [pc, #132]	; (8018e8c <sys_timeout+0xa4>)
    diff = 0;
    timeouts_last_time = now;
 8018e08:	4b21      	ldr	r3, [pc, #132]	; (8018e90 <sys_timeout+0xa8>)
  if (next_timeout == NULL) {
 8018e0a:	6816      	ldr	r6, [r2, #0]
 8018e0c:	2e00      	cmp	r6, #0
 8018e0e:	d02d      	beq.n	8018e6c <sys_timeout+0x84>
 8018e10:	681b      	ldr	r3, [r3, #0]
  } else {
    diff = now - timeouts_last_time;
  }

  timeout->next = NULL;
 8018e12:	2100      	movs	r1, #0
  timeout->h = handler;
 8018e14:	f8c4 8008 	str.w	r8, [r4, #8]
 8018e18:	1aeb      	subs	r3, r5, r3
  timeout->arg = arg;
 8018e1a:	60e7      	str	r7, [r4, #12]
  timeout->next = NULL;
 8018e1c:	6021      	str	r1, [r4, #0]
  timeout->time = msecs + diff;
 8018e1e:	4418      	add	r0, r3
 8018e20:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 8018e22:	6873      	ldr	r3, [r6, #4]
 8018e24:	42ab      	cmp	r3, r5
 8018e26:	d813      	bhi.n	8018e50 <sys_timeout+0x68>
 8018e28:	4631      	mov	r1, r6
 8018e2a:	e003      	b.n	8018e34 <sys_timeout+0x4c>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 8018e2c:	6853      	ldr	r3, [r2, #4]
 8018e2e:	4298      	cmp	r0, r3
 8018e30:	d324      	bcc.n	8018e7c <sys_timeout+0x94>
 8018e32:	4611      	mov	r1, r2
      timeout->time -= t->time;
 8018e34:	1ac0      	subs	r0, r0, r3
      if (t->next == NULL || t->next->time > timeout->time) {
 8018e36:	680a      	ldr	r2, [r1, #0]
      timeout->time -= t->time;
 8018e38:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8018e3a:	2a00      	cmp	r2, #0
 8018e3c:	d1f6      	bne.n	8018e2c <sys_timeout+0x44>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        } else if (timeout->time > msecs) {
 8018e3e:	42a8      	cmp	r0, r5
 8018e40:	d902      	bls.n	8018e48 <sys_timeout+0x60>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8018e42:	6873      	ldr	r3, [r6, #4]
 8018e44:	442b      	add	r3, r5
 8018e46:	6063      	str	r3, [r4, #4]
        }
        timeout->next = t->next;
 8018e48:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 8018e4a:	600c      	str	r4, [r1, #0]
        break;
      }
    }
  }
}
 8018e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 8018e50:	1b5b      	subs	r3, r3, r5
    next_timeout = timeout;
 8018e52:	6014      	str	r4, [r2, #0]
    next_timeout->time -= msecs;
 8018e54:	6073      	str	r3, [r6, #4]
    timeout->next = next_timeout;
 8018e56:	6026      	str	r6, [r4, #0]
}
 8018e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018e5c:	4b0a      	ldr	r3, [pc, #40]	; (8018e88 <sys_timeout+0xa0>)
 8018e5e:	22d4      	movs	r2, #212	; 0xd4
 8018e60:	490c      	ldr	r1, [pc, #48]	; (8018e94 <sys_timeout+0xac>)
 8018e62:	480d      	ldr	r0, [pc, #52]	; (8018e98 <sys_timeout+0xb0>)
}
 8018e64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018e68:	f004 bbbe 	b.w	801d5e8 <iprintf>
  timeout->next = NULL;
 8018e6c:	6026      	str	r6, [r4, #0]
  timeout->time = msecs + diff;
 8018e6e:	6065      	str	r5, [r4, #4]
    next_timeout = timeout;
 8018e70:	6014      	str	r4, [r2, #0]
    timeouts_last_time = now;
 8018e72:	6018      	str	r0, [r3, #0]
  timeout->arg = arg;
 8018e74:	e9c4 8702 	strd	r8, r7, [r4, #8]
}
 8018e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          t->next->time -= timeout->time;
 8018e7c:	1a18      	subs	r0, r3, r0
 8018e7e:	6050      	str	r0, [r2, #4]
        timeout->next = t->next;
 8018e80:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 8018e82:	600c      	str	r4, [r1, #0]
 8018e84:	e7e2      	b.n	8018e4c <sys_timeout+0x64>
 8018e86:	bf00      	nop
 8018e88:	080391dc 	.word	0x080391dc
 8018e8c:	200214a0 	.word	0x200214a0
 8018e90:	200214a8 	.word	0x200214a8
 8018e94:	08039210 	.word	0x08039210
 8018e98:	08021804 	.word	0x08021804

08018e9c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018e9c:	4b0a      	ldr	r3, [pc, #40]	; (8018ec8 <tcp_timer_needed+0x2c>)
 8018e9e:	681a      	ldr	r2, [r3, #0]
 8018ea0:	b982      	cbnz	r2, 8018ec4 <tcp_timer_needed+0x28>
 8018ea2:	4a0a      	ldr	r2, [pc, #40]	; (8018ecc <tcp_timer_needed+0x30>)
 8018ea4:	6812      	ldr	r2, [r2, #0]
 8018ea6:	b14a      	cbz	r2, 8018ebc <tcp_timer_needed+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	4909      	ldr	r1, [pc, #36]	; (8018ed0 <tcp_timer_needed+0x34>)
 8018eac:	20fa      	movs	r0, #250	; 0xfa
{
 8018eae:	b410      	push	{r4}
    tcpip_tcp_timer_active = 1;
 8018eb0:	2401      	movs	r4, #1
 8018eb2:	601c      	str	r4, [r3, #0]
}
 8018eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018eb8:	f7ff bf96 	b.w	8018de8 <sys_timeout>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018ebc:	4a05      	ldr	r2, [pc, #20]	; (8018ed4 <tcp_timer_needed+0x38>)
 8018ebe:	6812      	ldr	r2, [r2, #0]
 8018ec0:	2a00      	cmp	r2, #0
 8018ec2:	d1f1      	bne.n	8018ea8 <tcp_timer_needed+0xc>
 8018ec4:	4770      	bx	lr
 8018ec6:	bf00      	nop
 8018ec8:	200214a4 	.word	0x200214a4
 8018ecc:	20033b88 	.word	0x20033b88
 8018ed0:	08018ed9 	.word	0x08018ed9
 8018ed4:	20033b98 	.word	0x20033b98

08018ed8 <tcpip_tcp_timer>:
{
 8018ed8:	b508      	push	{r3, lr}
  tcp_tmr();
 8018eda:	f7fd f86d 	bl	8015fb8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018ede:	4b08      	ldr	r3, [pc, #32]	; (8018f00 <tcpip_tcp_timer+0x28>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	b913      	cbnz	r3, 8018eea <tcpip_tcp_timer+0x12>
 8018ee4:	4b07      	ldr	r3, [pc, #28]	; (8018f04 <tcpip_tcp_timer+0x2c>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	b133      	cbz	r3, 8018ef8 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018eea:	2200      	movs	r2, #0
 8018eec:	4906      	ldr	r1, [pc, #24]	; (8018f08 <tcpip_tcp_timer+0x30>)
 8018eee:	20fa      	movs	r0, #250	; 0xfa
}
 8018ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ef4:	f7ff bf78 	b.w	8018de8 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8018ef8:	4a04      	ldr	r2, [pc, #16]	; (8018f0c <tcpip_tcp_timer+0x34>)
 8018efa:	6013      	str	r3, [r2, #0]
}
 8018efc:	bd08      	pop	{r3, pc}
 8018efe:	bf00      	nop
 8018f00:	20033b88 	.word	0x20033b88
 8018f04:	20033b98 	.word	0x20033b98
 8018f08:	08018ed9 	.word	0x08018ed9
 8018f0c:	200214a4 	.word	0x200214a4

08018f10 <sys_timeouts_init>:
{
 8018f10:	b570      	push	{r4, r5, r6, lr}
 8018f12:	4c0c      	ldr	r4, [pc, #48]	; (8018f44 <sys_timeouts_init+0x34>)
 8018f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8018f18:	4e0b      	ldr	r6, [pc, #44]	; (8018f48 <sys_timeouts_init+0x38>)
 8018f1a:	f104 0520 	add.w	r5, r4, #32
 8018f1e:	4622      	mov	r2, r4
 8018f20:	4631      	mov	r1, r6
 8018f22:	f7ff ff61 	bl	8018de8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018f26:	42ac      	cmp	r4, r5
 8018f28:	d007      	beq.n	8018f3a <sys_timeouts_init+0x2a>
 8018f2a:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8018f2e:	4631      	mov	r1, r6
 8018f30:	4622      	mov	r2, r4
 8018f32:	f7ff ff59 	bl	8018de8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018f36:	42ac      	cmp	r4, r5
 8018f38:	d1f7      	bne.n	8018f2a <sys_timeouts_init+0x1a>
  timeouts_last_time = sys_now();
 8018f3a:	f7f5 feb3 	bl	800eca4 <sys_now>
 8018f3e:	4b03      	ldr	r3, [pc, #12]	; (8018f4c <sys_timeouts_init+0x3c>)
 8018f40:	6018      	str	r0, [r3, #0]
}
 8018f42:	bd70      	pop	{r4, r5, r6, pc}
 8018f44:	080391b4 	.word	0x080391b4
 8018f48:	08018f51 	.word	0x08018f51
 8018f4c:	200214a8 	.word	0x200214a8

08018f50 <cyclic_timer>:
{
 8018f50:	b510      	push	{r4, lr}
 8018f52:	4604      	mov	r4, r0
  cyclic->handler();
 8018f54:	6843      	ldr	r3, [r0, #4]
 8018f56:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8018f58:	4903      	ldr	r1, [pc, #12]	; (8018f68 <cyclic_timer+0x18>)
 8018f5a:	4622      	mov	r2, r4
 8018f5c:	6820      	ldr	r0, [r4, #0]
}
 8018f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8018f62:	f7ff bf41 	b.w	8018de8 <sys_timeout>
 8018f66:	bf00      	nop
 8018f68:	08018f51 	.word	0x08018f51

08018f6c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8018f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f70:	4c28      	ldr	r4, [pc, #160]	; (8019014 <sys_timeouts_mbox_fetch+0xa8>)
 8018f72:	b083      	sub	sp, #12
 8018f74:	4680      	mov	r8, r0
 8018f76:	4689      	mov	r9, r1
  diff = sys_now() - timeouts_last_time;
 8018f78:	4d27      	ldr	r5, [pc, #156]	; (8019018 <sys_timeouts_mbox_fetch+0xac>)
 8018f7a:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 8018f7c:	4f27      	ldr	r7, [pc, #156]	; (801901c <sys_timeouts_mbox_fetch+0xb0>)
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8018f7e:	b18b      	cbz	r3, 8018fa4 <sys_timeouts_mbox_fetch+0x38>
  diff = sys_now() - timeouts_last_time;
 8018f80:	f7f5 fe90 	bl	800eca4 <sys_now>
 8018f84:	682a      	ldr	r2, [r5, #0]
  if (diff > next_timeout->time) {
 8018f86:	6823      	ldr	r3, [r4, #0]
  diff = sys_now() - timeouts_last_time;
 8018f88:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 8018f8a:	685a      	ldr	r2, [r3, #4]
 8018f8c:	4290      	cmp	r0, r2
 8018f8e:	d811      	bhi.n	8018fb4 <sys_timeouts_mbox_fetch+0x48>
    sys_arch_mbox_fetch(mbox, msg, 0);
    return;
  }

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8018f90:	1a12      	subs	r2, r2, r0
 8018f92:	d00f      	beq.n	8018fb4 <sys_timeouts_mbox_fetch+0x48>
 8018f94:	4649      	mov	r1, r9
 8018f96:	4640      	mov	r0, r8
 8018f98:	f003 fca4 	bl	801c8e4 <sys_arch_mbox_fetch>
 8018f9c:	3001      	adds	r0, #1
 8018f9e:	d135      	bne.n	801900c <sys_timeouts_mbox_fetch+0xa0>
  if (next_timeout) {
 8018fa0:	6823      	ldr	r3, [r4, #0]
 8018fa2:	b93b      	cbnz	r3, 8018fb4 <sys_timeouts_mbox_fetch+0x48>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018fa4:	4649      	mov	r1, r9
 8018fa6:	4640      	mov	r0, r8
 8018fa8:	2200      	movs	r2, #0
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8018faa:	b003      	add	sp, #12
 8018fac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018fb0:	f003 bc98 	b.w	801c8e4 <sys_arch_mbox_fetch>
    now = sys_now();
 8018fb4:	f7f5 fe76 	bl	800eca4 <sys_now>
    diff = now - timeouts_last_time;
 8018fb8:	682b      	ldr	r3, [r5, #0]
 8018fba:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 8018fbe:	6823      	ldr	r3, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018fc0:	200c      	movs	r0, #12
 8018fc2:	4619      	mov	r1, r3
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d0ed      	beq.n	8018fa4 <sys_timeouts_mbox_fetch+0x38>
 8018fc8:	685a      	ldr	r2, [r3, #4]
 8018fca:	455a      	cmp	r2, fp
        diff -= tmptimeout->time;
 8018fcc:	ebab 0b02 	sub.w	fp, fp, r2
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8018fd0:	d8d5      	bhi.n	8018f7e <sys_timeouts_mbox_fetch+0x12>
        next_timeout = tmptimeout->next;
 8018fd2:	681e      	ldr	r6, [r3, #0]
        handler = tmptimeout->h;
 8018fd4:	f8d3 a008 	ldr.w	sl, [r3, #8]
        next_timeout = tmptimeout->next;
 8018fd8:	9601      	str	r6, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 8018fda:	682e      	ldr	r6, [r5, #0]
 8018fdc:	4432      	add	r2, r6
        next_timeout = tmptimeout->next;
 8018fde:	9e01      	ldr	r6, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 8018fe0:	602a      	str	r2, [r5, #0]
        next_timeout = tmptimeout->next;
 8018fe2:	6026      	str	r6, [r4, #0]
        arg = tmptimeout->arg;
 8018fe4:	68de      	ldr	r6, [r3, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018fe6:	f7fb fa35 	bl	8014454 <memp_free>
          LOCK_TCPIP_CORE();
 8018fea:	4638      	mov	r0, r7
        if (handler != NULL) {
 8018fec:	f1ba 0f00 	cmp.w	sl, #0
 8018ff0:	d0e5      	beq.n	8018fbe <sys_timeouts_mbox_fetch+0x52>
          LOCK_TCPIP_CORE();
 8018ff2:	f003 fcd1 	bl	801c998 <sys_mutex_lock>
          handler(arg);
 8018ff6:	4630      	mov	r0, r6
 8018ff8:	47d0      	blx	sl
          UNLOCK_TCPIP_CORE();
 8018ffa:	4638      	mov	r0, r7
 8018ffc:	f003 fcd2 	bl	801c9a4 <sys_mutex_unlock>
      tmptimeout = next_timeout;
 8019000:	6823      	ldr	r3, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019002:	200c      	movs	r0, #12
 8019004:	4619      	mov	r1, r3
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8019006:	2b00      	cmp	r3, #0
 8019008:	d1de      	bne.n	8018fc8 <sys_timeouts_mbox_fetch+0x5c>
 801900a:	e7cb      	b.n	8018fa4 <sys_timeouts_mbox_fetch+0x38>
}
 801900c:	b003      	add	sp, #12
 801900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019012:	bf00      	nop
 8019014:	200214a0 	.word	0x200214a0
 8019018:	200214a8 	.word	0x200214a8
 801901c:	2002599c 	.word	0x2002599c

08019020 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8019020:	4770      	bx	lr
 8019022:	bf00      	nop

08019024 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8019028:	4d63      	ldr	r5, [pc, #396]	; (80191b8 <udp_input+0x194>)
{
 801902a:	b085      	sub	sp, #20

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801902c:	8942      	ldrh	r2, [r0, #10]
  UDP_STATS_INC(udp.recv);
 801902e:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 8019032:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 8019034:	f103 0301 	add.w	r3, r3, #1
 8019038:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801903c:	f240 8093 	bls.w	8019166 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019040:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80191d0 <udp_input+0x1ac>
 8019044:	4606      	mov	r6, r0
  udphdr = (struct udp_hdr *)p->payload;
 8019046:	6844      	ldr	r4, [r0, #4]
 8019048:	4688      	mov	r8, r1
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801904a:	f8da 0014 	ldr.w	r0, [sl, #20]
 801904e:	f8da 1000 	ldr.w	r1, [sl]
 8019052:	f002 fe37 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 8019056:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019058:	8820      	ldrh	r0, [r4, #0]
 801905a:	f7fa f84b 	bl	80130f4 <lwip_htons>
 801905e:	4681      	mov	r9, r0
  dest = lwip_ntohs(udphdr->dest);
 8019060:	8860      	ldrh	r0, [r4, #2]
 8019062:	f7fa f847 	bl	80130f4 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019066:	4b55      	ldr	r3, [pc, #340]	; (80191bc <udp_input+0x198>)
 8019068:	f8d3 b000 	ldr.w	fp, [r3]
 801906c:	f1bb 0f00 	cmp.w	fp, #0
 8019070:	f000 809c 	beq.w	80191ac <udp_input+0x188>
  uncon_pcb = NULL;
 8019074:	f04f 0c00 	mov.w	ip, #0
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019078:	465c      	mov	r4, fp
 801907a:	e9da 3e04 	ldrd	r3, lr, [sl, #16]
 801907e:	9303      	str	r3, [sp, #12]
  prev = NULL;
 8019080:	4663      	mov	r3, ip
 8019082:	e004      	b.n	801908e <udp_input+0x6a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019084:	68e2      	ldr	r2, [r4, #12]
 8019086:	4623      	mov	r3, r4
 8019088:	2a00      	cmp	r2, #0
 801908a:	d043      	beq.n	8019114 <udp_input+0xf0>
 801908c:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
 801908e:	8a62      	ldrh	r2, [r4, #18]
 8019090:	4282      	cmp	r2, r0
 8019092:	d1f7      	bne.n	8019084 <udp_input+0x60>
 8019094:	6821      	ldr	r1, [r4, #0]
    if (broadcast != 0) {
 8019096:	2f00      	cmp	r7, #0
 8019098:	d034      	beq.n	8019104 <udp_input+0xe0>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801909a:	b141      	cbz	r1, 80190ae <udp_input+0x8a>
 801909c:	f1be 3fff 	cmp.w	lr, #4294967295
 80190a0:	d005      	beq.n	80190ae <udp_input+0x8a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80190a2:	ea8e 0101 	eor.w	r1, lr, r1
 80190a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80190aa:	4211      	tst	r1, r2
 80190ac:	d1ea      	bne.n	8019084 <udp_input+0x60>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80190ae:	7c22      	ldrb	r2, [r4, #16]
 80190b0:	0752      	lsls	r2, r2, #29
 80190b2:	d403      	bmi.n	80190bc <udp_input+0x98>
 80190b4:	f1bc 0f00 	cmp.w	ip, #0
 80190b8:	bf08      	it	eq
 80190ba:	46a4      	moveq	ip, r4
      if ((pcb->remote_port == src) &&
 80190bc:	8aa2      	ldrh	r2, [r4, #20]
 80190be:	454a      	cmp	r2, r9
 80190c0:	d1e0      	bne.n	8019084 <udp_input+0x60>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80190c2:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 80190c4:	b112      	cbz	r2, 80190cc <udp_input+0xa8>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80190c6:	9903      	ldr	r1, [sp, #12]
 80190c8:	428a      	cmp	r2, r1
 80190ca:	d1db      	bne.n	8019084 <udp_input+0x60>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d067      	beq.n	80191a0 <udp_input+0x17c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80190d0:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 80190d2:	493a      	ldr	r1, [pc, #232]	; (80191bc <udp_input+0x198>)
          prev->next = pcb->next;
 80190d4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80190d6:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 80190d8:	f8c4 b00c 	str.w	fp, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80190dc:	f06f 0107 	mvn.w	r1, #7
 80190e0:	4630      	mov	r0, r6
 80190e2:	f7fb fba7 	bl	8014834 <pbuf_header>
 80190e6:	2800      	cmp	r0, #0
 80190e8:	d14e      	bne.n	8019188 <udp_input+0x164>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80190ea:	69a5      	ldr	r5, [r4, #24]
 80190ec:	2d00      	cmp	r5, #0
 80190ee:	d049      	beq.n	8019184 <udp_input+0x160>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80190f0:	69e0      	ldr	r0, [r4, #28]
 80190f2:	4632      	mov	r2, r6
 80190f4:	4621      	mov	r1, r4
 80190f6:	4b32      	ldr	r3, [pc, #200]	; (80191c0 <udp_input+0x19c>)
 80190f8:	f8cd 9000 	str.w	r9, [sp]
 80190fc:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80190fe:	b005      	add	sp, #20
 8019100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019104:	2900      	cmp	r1, #0
 8019106:	d0d2      	beq.n	80190ae <udp_input+0x8a>
 8019108:	458e      	cmp	lr, r1
 801910a:	d0d0      	beq.n	80190ae <udp_input+0x8a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801910c:	68e2      	ldr	r2, [r4, #12]
 801910e:	4623      	mov	r3, r4
 8019110:	2a00      	cmp	r2, #0
 8019112:	d1bb      	bne.n	801908c <udp_input+0x68>
  if (pcb != NULL) {
 8019114:	f1bc 0f00 	cmp.w	ip, #0
 8019118:	d14b      	bne.n	80191b2 <udp_input+0x18e>
  if (for_us) {
 801911a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801911e:	4573      	cmp	r3, lr
 8019120:	d130      	bne.n	8019184 <udp_input+0x160>
    if (pbuf_header(p, -UDP_HLEN)) {
 8019122:	f06f 0107 	mvn.w	r1, #7
 8019126:	4630      	mov	r0, r6
 8019128:	f7fb fb84 	bl	8014834 <pbuf_header>
 801912c:	bb60      	cbnz	r0, 8019188 <udp_input+0x164>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801912e:	b987      	cbnz	r7, 8019152 <udp_input+0x12e>
 8019130:	f8da 3014 	ldr.w	r3, [sl, #20]
 8019134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019138:	2be0      	cmp	r3, #224	; 0xe0
 801913a:	d00a      	beq.n	8019152 <udp_input+0x12e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801913c:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8019140:	4630      	mov	r0, r6
 8019142:	3108      	adds	r1, #8
 8019144:	b209      	sxth	r1, r1
 8019146:	f7fb fb79 	bl	801483c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801914a:	2103      	movs	r1, #3
 801914c:	4630      	mov	r0, r6
 801914e:	f002 fb87 	bl	801b860 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 8019152:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
      pbuf_free(p);
 8019156:	4630      	mov	r0, r6
      UDP_STATS_INC(udp.drop);
 8019158:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801915c:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801915e:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 8019160:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
 8019164:	e007      	b.n	8019176 <udp_input+0x152>
    UDP_STATS_INC(udp.lenerr);
 8019166:	f8b5 2082 	ldrh.w	r2, [r5, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 801916a:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801916e:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 8019170:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 8019172:	f8a5 2082 	strh.w	r2, [r5, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 8019176:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
}
 801917a:	b005      	add	sp, #20
 801917c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8019180:	f7fb bb60 	b.w	8014844 <pbuf_free>
        pbuf_free(p);
 8019184:	4630      	mov	r0, r6
 8019186:	e7f8      	b.n	801917a <udp_input+0x156>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8019188:	4b0e      	ldr	r3, [pc, #56]	; (80191c4 <udp_input+0x1a0>)
 801918a:	f240 1255 	movw	r2, #341	; 0x155
 801918e:	490e      	ldr	r1, [pc, #56]	; (80191c8 <udp_input+0x1a4>)
 8019190:	480e      	ldr	r0, [pc, #56]	; (80191cc <udp_input+0x1a8>)
 8019192:	f004 fa29 	bl	801d5e8 <iprintf>
      UDP_STATS_INC(udp.drop);
 8019196:	f8b5 307e 	ldrh.w	r3, [r5, #126]	; 0x7e
      pbuf_free(p);
 801919a:	4630      	mov	r0, r6
      UDP_STATS_INC(udp.drop);
 801919c:	3301      	adds	r3, #1
 801919e:	e7ea      	b.n	8019176 <udp_input+0x152>
          UDP_STATS_INC(udp.cachehit);
 80191a0:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
 80191a4:	3301      	adds	r3, #1
 80191a6:	f8a5 308e 	strh.w	r3, [r5, #142]	; 0x8e
 80191aa:	e797      	b.n	80190dc <udp_input+0xb8>
 80191ac:	f8da e014 	ldr.w	lr, [sl, #20]
 80191b0:	e7b3      	b.n	801911a <udp_input+0xf6>
 80191b2:	4664      	mov	r4, ip
 80191b4:	e792      	b.n	80190dc <udp_input+0xb8>
 80191b6:	bf00      	nop
 80191b8:	20033a7c 	.word	0x20033a7c
 80191bc:	20033ba0 	.word	0x20033ba0
 80191c0:	20025a3c 	.word	0x20025a3c
 80191c4:	08039250 	.word	0x08039250
 80191c8:	08039280 	.word	0x08039280
 80191cc:	08021804 	.word	0x08021804
 80191d0:	20025a2c 	.word	0x20025a2c

080191d4 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 80191d4:	4b34      	ldr	r3, [pc, #208]	; (80192a8 <udp_bind+0xd4>)
 80191d6:	2900      	cmp	r1, #0
 80191d8:	bf08      	it	eq
 80191da:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80191dc:	2800      	cmp	r0, #0
 80191de:	d05e      	beq.n	801929e <udp_bind+0xca>
{
 80191e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80191e4:	4f31      	ldr	r7, [pc, #196]	; (80192ac <udp_bind+0xd8>)
 80191e6:	683e      	ldr	r6, [r7, #0]
 80191e8:	b1de      	cbz	r6, 8019222 <udp_bind+0x4e>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80191ea:	42b0      	cmp	r0, r6
 80191ec:	d044      	beq.n	8019278 <udp_bind+0xa4>
 80191ee:	4634      	mov	r4, r6
 80191f0:	e001      	b.n	80191f6 <udp_bind+0x22>
 80191f2:	42a0      	cmp	r0, r4
 80191f4:	d040      	beq.n	8019278 <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80191f6:	68e4      	ldr	r4, [r4, #12]
 80191f8:	2c00      	cmp	r4, #0
 80191fa:	d1fa      	bne.n	80191f2 <udp_bind+0x1e>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 80191fc:	b1a2      	cbz	r2, 8019228 <udp_bind+0x54>
 80191fe:	680d      	ldr	r5, [r1, #0]
 8019200:	4633      	mov	r3, r6
 8019202:	e001      	b.n	8019208 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019204:	68db      	ldr	r3, [r3, #12]
 8019206:	b353      	cbz	r3, 801925e <udp_bind+0x8a>
      if (pcb != ipcb) {
 8019208:	4298      	cmp	r0, r3
 801920a:	d0fb      	beq.n	8019204 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801920c:	8a59      	ldrh	r1, [r3, #18]
 801920e:	4291      	cmp	r1, r2
 8019210:	d1f8      	bne.n	8019204 <udp_bind+0x30>
 8019212:	6819      	ldr	r1, [r3, #0]
 8019214:	42a9      	cmp	r1, r5
 8019216:	d1f5      	bne.n	8019204 <udp_bind+0x30>
      return ERR_USE;
 8019218:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801921c:	4618      	mov	r0, r3
 801921e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 8019222:	2a00      	cmp	r2, #0
 8019224:	d137      	bne.n	8019296 <udp_bind+0xc2>
  rebind = 0;
 8019226:	4634      	mov	r4, r6
 8019228:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80192b0 <udp_bind+0xdc>
again:
 801922c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019230:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8019234:	f8b8 2000 	ldrh.w	r2, [r8]
 8019238:	4572      	cmp	r2, lr
 801923a:	d029      	beq.n	8019290 <udp_bind+0xbc>
 801923c:	3201      	adds	r2, #1
 801923e:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019240:	b156      	cbz	r6, 8019258 <udp_bind+0x84>
    if (pcb->local_port == udp_port) {
 8019242:	8a73      	ldrh	r3, [r6, #18]
 8019244:	4293      	cmp	r3, r2
 8019246:	d019      	beq.n	801927c <udp_bind+0xa8>
 8019248:	4633      	mov	r3, r6
 801924a:	e002      	b.n	8019252 <udp_bind+0x7e>
 801924c:	8a5d      	ldrh	r5, [r3, #18]
 801924e:	4295      	cmp	r5, r2
 8019250:	d014      	beq.n	801927c <udp_bind+0xa8>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019252:	68db      	ldr	r3, [r3, #12]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d1f9      	bne.n	801924c <udp_bind+0x78>
 8019258:	680d      	ldr	r5, [r1, #0]
 801925a:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801925e:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 8019260:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8019262:	b92c      	cbnz	r4, 8019270 <udp_bind+0x9c>
  return ERR_OK;
 8019264:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 8019266:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8019268:	6038      	str	r0, [r7, #0]
}
 801926a:	4618      	mov	r0, r3
 801926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 8019270:	2300      	movs	r3, #0
}
 8019272:	4618      	mov	r0, r3
 8019274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 8019278:	2401      	movs	r4, #1
 801927a:	e7bf      	b.n	80191fc <udp_bind+0x28>
 801927c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019280:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019284:	f1bc 0f00 	cmp.w	ip, #0
 8019288:	d1d6      	bne.n	8019238 <udp_bind+0x64>
 801928a:	f8a8 2000 	strh.w	r2, [r8]
 801928e:	e7c3      	b.n	8019218 <udp_bind+0x44>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019290:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019294:	e7d4      	b.n	8019240 <udp_bind+0x6c>
 8019296:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 8019298:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801929a:	6003      	str	r3, [r0, #0]
 801929c:	e7e2      	b.n	8019264 <udp_bind+0x90>
    return ERR_VAL;
 801929e:	f06f 0305 	mvn.w	r3, #5
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	4770      	bx	lr
 80192a6:	bf00      	nop
 80192a8:	08039ac4 	.word	0x08039ac4
 80192ac:	20033ba0 	.word	0x20033ba0
 80192b0:	20000446 	.word	0x20000446

080192b4 <udp_sendto_if_src>:
{
 80192b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192b8:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80192ba:	2800      	cmp	r0, #0
 80192bc:	d062      	beq.n	8019384 <udp_sendto_if_src+0xd0>
 80192be:	2a00      	cmp	r2, #0
 80192c0:	d060      	beq.n	8019384 <udp_sendto_if_src+0xd0>
 80192c2:	4690      	mov	r8, r2
  if (pcb->local_port == 0) {
 80192c4:	8a42      	ldrh	r2, [r0, #18]
 80192c6:	4604      	mov	r4, r0
 80192c8:	4699      	mov	r9, r3
 80192ca:	460d      	mov	r5, r1
 80192cc:	2a00      	cmp	r2, #0
 80192ce:	d037      	beq.n	8019340 <udp_sendto_if_src+0x8c>
  if (pbuf_header(p, UDP_HLEN)) {
 80192d0:	2108      	movs	r1, #8
 80192d2:	4628      	mov	r0, r5
 80192d4:	f7fb faae 	bl	8014834 <pbuf_header>
 80192d8:	2800      	cmp	r0, #0
 80192da:	d13d      	bne.n	8019358 <udp_sendto_if_src+0xa4>
 80192dc:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80192de:	8973      	ldrh	r3, [r6, #10]
 80192e0:	2b07      	cmp	r3, #7
 80192e2:	d947      	bls.n	8019374 <udp_sendto_if_src+0xc0>
  udphdr = (struct udp_hdr *)q->payload;
 80192e4:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80192e6:	8a60      	ldrh	r0, [r4, #18]
 80192e8:	f7f9 ff04 	bl	80130f4 <lwip_htons>
 80192ec:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 80192ee:	4648      	mov	r0, r9
 80192f0:	f7f9 ff00 	bl	80130f4 <lwip_htons>
  udphdr->chksum = 0x0000;
 80192f4:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80192f6:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 80192f8:	71bb      	strb	r3, [r7, #6]
 80192fa:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 80192fc:	8930      	ldrh	r0, [r6, #8]
 80192fe:	f7f9 fef9 	bl	80130f4 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019302:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 8019306:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019308:	4642      	mov	r2, r8
 801930a:	7aa3      	ldrb	r3, [r4, #10]
 801930c:	f8cd c004 	str.w	ip, [sp, #4]
 8019310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019314:	9002      	str	r0, [sp, #8]
 8019316:	4630      	mov	r0, r6
 8019318:	7a64      	ldrb	r4, [r4, #9]
 801931a:	9400      	str	r4, [sp, #0]
 801931c:	f002 fc14 	bl	801bb48 <ip4_output_if_src>
  if (q != p) {
 8019320:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019322:	4607      	mov	r7, r0
  if (q != p) {
 8019324:	d002      	beq.n	801932c <udp_sendto_if_src+0x78>
    pbuf_free(q);
 8019326:	4630      	mov	r0, r6
 8019328:	f7fb fa8c 	bl	8014844 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801932c:	4a18      	ldr	r2, [pc, #96]	; (8019390 <udp_sendto_if_src+0xdc>)
 801932e:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 8019332:	3301      	adds	r3, #1
 8019334:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 8019338:	4638      	mov	r0, r7
 801933a:	b005      	add	sp, #20
 801933c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019340:	4601      	mov	r1, r0
 8019342:	f7ff ff47 	bl	80191d4 <udp_bind>
    if (err != ERR_OK) {
 8019346:	4607      	mov	r7, r0
 8019348:	2800      	cmp	r0, #0
 801934a:	d1f5      	bne.n	8019338 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 801934c:	2108      	movs	r1, #8
 801934e:	4628      	mov	r0, r5
 8019350:	f7fb fa70 	bl	8014834 <pbuf_header>
 8019354:	2800      	cmp	r0, #0
 8019356:	d0c1      	beq.n	80192dc <udp_sendto_if_src+0x28>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019358:	2200      	movs	r2, #0
 801935a:	2108      	movs	r1, #8
 801935c:	2001      	movs	r0, #1
 801935e:	f7fb fadf 	bl	8014920 <pbuf_alloc>
    if (q == NULL) {
 8019362:	4606      	mov	r6, r0
 8019364:	b188      	cbz	r0, 801938a <udp_sendto_if_src+0xd6>
    if (p->tot_len != 0) {
 8019366:	892b      	ldrh	r3, [r5, #8]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d0b8      	beq.n	80192de <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 801936c:	4629      	mov	r1, r5
 801936e:	f7fb fcc1 	bl	8014cf4 <pbuf_chain>
 8019372:	e7b4      	b.n	80192de <udp_sendto_if_src+0x2a>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019374:	4b07      	ldr	r3, [pc, #28]	; (8019394 <udp_sendto_if_src+0xe0>)
 8019376:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801937a:	4907      	ldr	r1, [pc, #28]	; (8019398 <udp_sendto_if_src+0xe4>)
 801937c:	4807      	ldr	r0, [pc, #28]	; (801939c <udp_sendto_if_src+0xe8>)
 801937e:	f004 f933 	bl	801d5e8 <iprintf>
 8019382:	e7af      	b.n	80192e4 <udp_sendto_if_src+0x30>
    return ERR_VAL;
 8019384:	f06f 0705 	mvn.w	r7, #5
 8019388:	e7d6      	b.n	8019338 <udp_sendto_if_src+0x84>
      return ERR_MEM;
 801938a:	f04f 37ff 	mov.w	r7, #4294967295
 801938e:	e7d3      	b.n	8019338 <udp_sendto_if_src+0x84>
 8019390:	20033a7c 	.word	0x20033a7c
 8019394:	08039250 	.word	0x08039250
 8019398:	08039294 	.word	0x08039294
 801939c:	08021804 	.word	0x08021804

080193a0 <udp_sendto_if>:
{
 80193a0:	b570      	push	{r4, r5, r6, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80193a6:	b190      	cbz	r0, 80193ce <udp_sendto_if+0x2e>
 80193a8:	b18a      	cbz	r2, 80193ce <udp_sendto_if+0x2e>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80193aa:	6805      	ldr	r5, [r0, #0]
 80193ac:	b935      	cbnz	r5, 80193bc <udp_sendto_if+0x1c>
    src_ip = netif_ip_addr4(netif);
 80193ae:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80193b0:	e9cd 4500 	strd	r4, r5, [sp]
 80193b4:	f7ff ff7e 	bl	80192b4 <udp_sendto_if_src>
}
 80193b8:	b002      	add	sp, #8
 80193ba:	bd70      	pop	{r4, r5, r6, pc}
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80193bc:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80193c0:	2ee0      	cmp	r6, #224	; 0xe0
 80193c2:	d0f4      	beq.n	80193ae <udp_sendto_if+0xe>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80193c4:	6866      	ldr	r6, [r4, #4]
 80193c6:	42b5      	cmp	r5, r6
 80193c8:	d104      	bne.n	80193d4 <udp_sendto_if+0x34>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80193ca:	4605      	mov	r5, r0
 80193cc:	e7f0      	b.n	80193b0 <udp_sendto_if+0x10>
    return ERR_VAL;
 80193ce:	f06f 0005 	mvn.w	r0, #5
 80193d2:	e7f1      	b.n	80193b8 <udp_sendto_if+0x18>
      return ERR_RTE;
 80193d4:	f06f 0003 	mvn.w	r0, #3
 80193d8:	e7ee      	b.n	80193b8 <udp_sendto_if+0x18>
 80193da:	bf00      	nop

080193dc <udp_sendto>:
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80193dc:	b198      	cbz	r0, 8019406 <udp_sendto+0x2a>
 80193de:	b192      	cbz	r2, 8019406 <udp_sendto+0x2a>
{
 80193e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193e2:	4605      	mov	r5, r0
 80193e4:	b083      	sub	sp, #12
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 80193e6:	4610      	mov	r0, r2
 80193e8:	461f      	mov	r7, r3
 80193ea:	4614      	mov	r4, r2
 80193ec:	460e      	mov	r6, r1
 80193ee:	f002 fa43 	bl	801b878 <ip4_route>
  if (netif == NULL) {
 80193f2:	b158      	cbz	r0, 801940c <udp_sendto+0x30>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80193f4:	9000      	str	r0, [sp, #0]
 80193f6:	463b      	mov	r3, r7
 80193f8:	4622      	mov	r2, r4
 80193fa:	4631      	mov	r1, r6
 80193fc:	4628      	mov	r0, r5
 80193fe:	f7ff ffcf 	bl	80193a0 <udp_sendto_if>
}
 8019402:	b003      	add	sp, #12
 8019404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8019406:	f06f 0005 	mvn.w	r0, #5
}
 801940a:	4770      	bx	lr
    UDP_STATS_INC(udp.rterr);
 801940c:	4a04      	ldr	r2, [pc, #16]	; (8019420 <udp_sendto+0x44>)
 801940e:	f06f 0003 	mvn.w	r0, #3
 8019412:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8019416:	3301      	adds	r3, #1
 8019418:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 801941c:	e7f1      	b.n	8019402 <udp_sendto+0x26>
 801941e:	bf00      	nop
 8019420:	20033a7c 	.word	0x20033a7c

08019424 <udp_connect>:
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8019424:	b328      	cbz	r0, 8019472 <udp_connect+0x4e>
 8019426:	b321      	cbz	r1, 8019472 <udp_connect+0x4e>
{
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	4616      	mov	r6, r2
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 801942c:	8a42      	ldrh	r2, [r0, #18]
 801942e:	4604      	mov	r4, r0
 8019430:	460d      	mov	r5, r1
 8019432:	b1c2      	cbz	r2, 8019466 <udp_connect+0x42>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019434:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019436:	4910      	ldr	r1, [pc, #64]	; (8019478 <udp_connect+0x54>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019438:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801943a:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801943e:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019440:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 8019442:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019444:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019446:	b142      	cbz	r2, 801945a <udp_connect+0x36>
    if (pcb == ipcb) {
 8019448:	4294      	cmp	r4, r2
 801944a:	d00a      	beq.n	8019462 <udp_connect+0x3e>
 801944c:	4613      	mov	r3, r2
 801944e:	e001      	b.n	8019454 <udp_connect+0x30>
 8019450:	429c      	cmp	r4, r3
 8019452:	d006      	beq.n	8019462 <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d1fa      	bne.n	8019450 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801945a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  return ERR_OK;
 801945c:	2000      	movs	r0, #0
  udp_pcbs = pcb;
 801945e:	600c      	str	r4, [r1, #0]
}
 8019460:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 8019462:	2000      	movs	r0, #0
}
 8019464:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019466:	4601      	mov	r1, r0
 8019468:	f7ff feb4 	bl	80191d4 <udp_bind>
    if (err != ERR_OK) {
 801946c:	2800      	cmp	r0, #0
 801946e:	d0e1      	beq.n	8019434 <udp_connect+0x10>
}
 8019470:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8019472:	f06f 0005 	mvn.w	r0, #5
}
 8019476:	4770      	bx	lr
 8019478:	20033ba0 	.word	0x20033ba0

0801947c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801947c:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8019480:	4770      	bx	lr
 8019482:	bf00      	nop

08019484 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019484:	4b0c      	ldr	r3, [pc, #48]	; (80194b8 <udp_remove+0x34>)
{
 8019486:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 8019488:	681a      	ldr	r2, [r3, #0]
 801948a:	4282      	cmp	r2, r0
 801948c:	d00a      	beq.n	80194a4 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801948e:	b132      	cbz	r2, 801949e <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019490:	68d3      	ldr	r3, [r2, #12]
 8019492:	b123      	cbz	r3, 801949e <udp_remove+0x1a>
 8019494:	4299      	cmp	r1, r3
 8019496:	d00a      	beq.n	80194ae <udp_remove+0x2a>
 8019498:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801949a:	2a00      	cmp	r2, #0
 801949c:	d1f8      	bne.n	8019490 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801949e:	2001      	movs	r0, #1
 80194a0:	f7fa bfd8 	b.w	8014454 <memp_free>
    udp_pcbs = udp_pcbs->next;
 80194a4:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80194a6:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 80194a8:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 80194aa:	f7fa bfd3 	b.w	8014454 <memp_free>
        pcb2->next = pcb->next;
 80194ae:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80194b0:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 80194b2:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80194b4:	f7fa bfce 	b.w	8014454 <memp_free>
 80194b8:	20033ba0 	.word	0x20033ba0

080194bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80194bc:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80194be:	f240 4252 	movw	r2, #1106	; 0x452
 80194c2:	4907      	ldr	r1, [pc, #28]	; (80194e0 <udp_new+0x24>)
 80194c4:	2001      	movs	r0, #1
 80194c6:	f7fa ffa1 	bl	801440c <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80194ca:	4604      	mov	r4, r0
 80194cc:	b128      	cbz	r0, 80194da <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80194ce:	2220      	movs	r2, #32
 80194d0:	2100      	movs	r1, #0
 80194d2:	f003 fd45 	bl	801cf60 <memset>
    pcb->ttl = UDP_TTL;
 80194d6:	23ff      	movs	r3, #255	; 0xff
 80194d8:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80194da:	4620      	mov	r0, r4
 80194dc:	bd10      	pop	{r4, pc}
 80194de:	bf00      	nop
 80194e0:	08039250 	.word	0x08039250

080194e4 <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 80194e4:	f7ff bfea 	b.w	80194bc <udp_new>

080194e8 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80194e8:	b1a8      	cbz	r0, 8019516 <udp_netif_ip_addr_changed+0x2e>
 80194ea:	6802      	ldr	r2, [r0, #0]
 80194ec:	b199      	cbz	r1, 8019516 <udp_netif_ip_addr_changed+0x2e>
 80194ee:	b192      	cbz	r2, 8019516 <udp_netif_ip_addr_changed+0x2e>
 80194f0:	680b      	ldr	r3, [r1, #0]
 80194f2:	b183      	cbz	r3, 8019516 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80194f4:	4b08      	ldr	r3, [pc, #32]	; (8019518 <udp_netif_ip_addr_changed+0x30>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	b16b      	cbz	r3, 8019516 <udp_netif_ip_addr_changed+0x2e>
{
 80194fa:	b410      	push	{r4}
 80194fc:	e000      	b.n	8019500 <udp_netif_ip_addr_changed+0x18>
 80194fe:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019500:	681c      	ldr	r4, [r3, #0]
 8019502:	4294      	cmp	r4, r2
 8019504:	d101      	bne.n	801950a <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019506:	680a      	ldr	r2, [r1, #0]
 8019508:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801950a:	68db      	ldr	r3, [r3, #12]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d1f6      	bne.n	80194fe <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8019510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019514:	4770      	bx	lr
 8019516:	4770      	bx	lr
 8019518:	20033ba0 	.word	0x20033ba0

0801951c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801951c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801951e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8019520:	7a63      	ldrb	r3, [r4, #9]
 8019522:	2b08      	cmp	r3, #8
 8019524:	d004      	beq.n	8019530 <dhcp_check+0x14>
    dhcp->state = new_state;
    dhcp->tries = 0;
 8019526:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019528:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801952a:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 801952c:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 801952e:	82e3      	strh	r3, [r4, #22]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019530:	2200      	movs	r2, #0
 8019532:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019536:	f001 fe6b 	bl	801b210 <etharp_query>
  if (dhcp->tries < 255) {
 801953a:	7aa3      	ldrb	r3, [r4, #10]
 801953c:	2bff      	cmp	r3, #255	; 0xff
 801953e:	d001      	beq.n	8019544 <dhcp_check+0x28>
    dhcp->tries++;
 8019540:	3301      	adds	r3, #1
 8019542:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019544:	2301      	movs	r3, #1
 8019546:	82e3      	strh	r3, [r4, #22]
}
 8019548:	bd10      	pop	{r4, pc}
 801954a:	bf00      	nop

0801954c <dhcp_bind>:
{
 801954c:	b510      	push	{r4, lr}
 801954e:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019550:	2800      	cmp	r0, #0
 8019552:	d076      	beq.n	8019642 <dhcp_bind+0xf6>
  dhcp = netif_dhcp_data(netif);
 8019554:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019556:	2900      	cmp	r1, #0
 8019558:	d07c      	beq.n	8019654 <dhcp_bind+0x108>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801955a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  dhcp->lease_used = 0;
 801955c:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801955e:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 8019560:	840a      	strh	r2, [r1, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8019562:	d00b      	beq.n	801957c <dhcp_bind+0x30>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019564:	331e      	adds	r3, #30
 8019566:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
 801956a:	fba2 2303 	umull	r2, r3, r2, r3
 801956e:	095b      	lsrs	r3, r3, #5
     if (timeout > 0xffff) {
 8019570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019574:	d25a      	bcs.n	801962c <dhcp_bind+0xe0>
     if (dhcp->t0_timeout == 0) {
 8019576:	b903      	cbnz	r3, 801957a <dhcp_bind+0x2e>
       dhcp->t0_timeout = 1;
 8019578:	2301      	movs	r3, #1
 801957a:	844b      	strh	r3, [r1, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801957c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 801957e:	1c53      	adds	r3, r2, #1
 8019580:	d040      	beq.n	8019604 <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019582:	321e      	adds	r2, #30
 8019584:	4b3f      	ldr	r3, [pc, #252]	; (8019684 <dhcp_bind+0x138>)
 8019586:	fba3 3202 	umull	r3, r2, r3, r2
 801958a:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
 801958c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8019590:	d248      	bcs.n	8019624 <dhcp_bind+0xd8>
    if (dhcp->t1_timeout == 0) {
 8019592:	2a00      	cmp	r2, #0
 8019594:	d172      	bne.n	801967c <dhcp_bind+0x130>
      dhcp->t1_timeout = 1;
 8019596:	2301      	movs	r3, #1
 8019598:	461a      	mov	r2, r3
 801959a:	830b      	strh	r3, [r1, #24]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801959c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801959e:	838a      	strh	r2, [r1, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80195a0:	1c5c      	adds	r4, r3, #1
 80195a2:	d033      	beq.n	801960c <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80195a4:	331e      	adds	r3, #30
 80195a6:	4c37      	ldr	r4, [pc, #220]	; (8019684 <dhcp_bind+0x138>)
 80195a8:	fba4 4303 	umull	r4, r3, r4, r3
 80195ac:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 80195ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195b2:	d242      	bcs.n	801963a <dhcp_bind+0xee>
    if (dhcp->t2_timeout == 0) {
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d15e      	bne.n	8019676 <dhcp_bind+0x12a>
      dhcp->t2_timeout = 1;
 80195b8:	2401      	movs	r4, #1
 80195ba:	4623      	mov	r3, r4
 80195bc:	834c      	strh	r4, [r1, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80195be:	2401      	movs	r4, #1
 80195c0:	83cb      	strh	r3, [r1, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80195c2:	4293      	cmp	r3, r2
 80195c4:	d802      	bhi.n	80195cc <dhcp_bind+0x80>
 80195c6:	b10c      	cbz	r4, 80195cc <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 80195c8:	2300      	movs	r3, #0
 80195ca:	830b      	strh	r3, [r1, #24]
  if (dhcp->subnet_mask_given) {
 80195cc:	7acb      	ldrb	r3, [r1, #11]
 80195ce:	b313      	cbz	r3, 8019616 <dhcp_bind+0xca>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80195d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80195d2:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80195d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80195d6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80195d8:	b92b      	cbnz	r3, 80195e6 <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80195da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80195dc:	9a00      	ldr	r2, [sp, #0]
 80195de:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80195e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80195e4:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 80195e6:	7a4b      	ldrb	r3, [r1, #9]
 80195e8:	2b0a      	cmp	r3, #10
 80195ea:	d004      	beq.n	80195f6 <dhcp_bind+0xaa>
    dhcp->tries = 0;
 80195ec:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80195ee:	220a      	movs	r2, #10
    dhcp->tries = 0;
 80195f0:	728b      	strb	r3, [r1, #10]
    dhcp->state = new_state;
 80195f2:	724a      	strb	r2, [r1, #9]
    dhcp->request_timeout = 0;
 80195f4:	82cb      	strh	r3, [r1, #22]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80195f6:	3128      	adds	r1, #40	; 0x28
 80195f8:	ab01      	add	r3, sp, #4
 80195fa:	466a      	mov	r2, sp
 80195fc:	f7fa ff94 	bl	8014528 <netif_set_addr>
}
 8019600:	b002      	add	sp, #8
 8019602:	bd10      	pop	{r4, pc}
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019604:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8019606:	8b0a      	ldrh	r2, [r1, #24]
 8019608:	1c5c      	adds	r4, r3, #1
 801960a:	d1cb      	bne.n	80195a4 <dhcp_bind+0x58>
 801960c:	8b4b      	ldrh	r3, [r1, #26]
 801960e:	1c1c      	adds	r4, r3, #0
 8019610:	bf18      	it	ne
 8019612:	2401      	movne	r4, #1
 8019614:	e7d5      	b.n	80195c2 <dhcp_bind+0x76>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019616:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    if (first_octet <= 127) {
 801961a:	061a      	lsls	r2, r3, #24
 801961c:	d423      	bmi.n	8019666 <dhcp_bind+0x11a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801961e:	23ff      	movs	r3, #255	; 0xff
 8019620:	9300      	str	r3, [sp, #0]
 8019622:	e7d7      	b.n	80195d4 <dhcp_bind+0x88>
    dhcp->t1_timeout = (u16_t)timeout;
 8019624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019628:	830a      	strh	r2, [r1, #24]
 801962a:	e7b7      	b.n	801959c <dhcp_bind+0x50>
     dhcp->t0_timeout = (u16_t)timeout;
 801962c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019630:	6b8a      	ldr	r2, [r1, #56]	; 0x38
     dhcp->t0_timeout = (u16_t)timeout;
 8019632:	844b      	strh	r3, [r1, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019634:	1c53      	adds	r3, r2, #1
 8019636:	d1a4      	bne.n	8019582 <dhcp_bind+0x36>
 8019638:	e7e4      	b.n	8019604 <dhcp_bind+0xb8>
    dhcp->t2_timeout = (u16_t)timeout;
 801963a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801963e:	834b      	strh	r3, [r1, #26]
 8019640:	e7bd      	b.n	80195be <dhcp_bind+0x72>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019642:	4b11      	ldr	r3, [pc, #68]	; (8019688 <dhcp_bind+0x13c>)
 8019644:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8019648:	4910      	ldr	r1, [pc, #64]	; (801968c <dhcp_bind+0x140>)
 801964a:	4811      	ldr	r0, [pc, #68]	; (8019690 <dhcp_bind+0x144>)
 801964c:	f003 ffcc 	bl	801d5e8 <iprintf>
}
 8019650:	b002      	add	sp, #8
 8019652:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019654:	4b0c      	ldr	r3, [pc, #48]	; (8019688 <dhcp_bind+0x13c>)
 8019656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801965a:	490e      	ldr	r1, [pc, #56]	; (8019694 <dhcp_bind+0x148>)
 801965c:	480c      	ldr	r0, [pc, #48]	; (8019690 <dhcp_bind+0x144>)
 801965e:	f003 ffc3 	bl	801d5e8 <iprintf>
}
 8019662:	b002      	add	sp, #8
 8019664:	bd10      	pop	{r4, pc}
    } else if (first_octet >= 192) {
 8019666:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019668:	bf8c      	ite	hi
 801966a:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801966e:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8019672:	9300      	str	r3, [sp, #0]
 8019674:	e7ae      	b.n	80195d4 <dhcp_bind+0x88>
    dhcp->t2_timeout = (u16_t)timeout;
 8019676:	b29b      	uxth	r3, r3
 8019678:	834b      	strh	r3, [r1, #26]
 801967a:	e7a0      	b.n	80195be <dhcp_bind+0x72>
    dhcp->t1_timeout = (u16_t)timeout;
 801967c:	b292      	uxth	r2, r2
 801967e:	830a      	strh	r2, [r1, #24]
 8019680:	e78c      	b.n	801959c <dhcp_bind+0x50>
 8019682:	bf00      	nop
 8019684:	88888889 	.word	0x88888889
 8019688:	080392c4 	.word	0x080392c4
 801968c:	080392fc 	.word	0x080392fc
 8019690:	08021804 	.word	0x08021804
 8019694:	08039318 	.word	0x08039318

08019698 <dhcp_inc_pcb_refcount>:
{
 8019698:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801969a:	4c15      	ldr	r4, [pc, #84]	; (80196f0 <dhcp_inc_pcb_refcount+0x58>)
 801969c:	7823      	ldrb	r3, [r4, #0]
 801969e:	b9fb      	cbnz	r3, 80196e0 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80196a0:	4d14      	ldr	r5, [pc, #80]	; (80196f4 <dhcp_inc_pcb_refcount+0x5c>)
 80196a2:	682b      	ldr	r3, [r5, #0]
 80196a4:	b12b      	cbz	r3, 80196b2 <dhcp_inc_pcb_refcount+0x1a>
 80196a6:	4b14      	ldr	r3, [pc, #80]	; (80196f8 <dhcp_inc_pcb_refcount+0x60>)
 80196a8:	22d9      	movs	r2, #217	; 0xd9
 80196aa:	4914      	ldr	r1, [pc, #80]	; (80196fc <dhcp_inc_pcb_refcount+0x64>)
 80196ac:	4814      	ldr	r0, [pc, #80]	; (8019700 <dhcp_inc_pcb_refcount+0x68>)
 80196ae:	f003 ff9b 	bl	801d5e8 <iprintf>
    dhcp_pcb = udp_new();
 80196b2:	f7ff ff03 	bl	80194bc <udp_new>
 80196b6:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 80196b8:	b1b0      	cbz	r0, 80196e8 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80196ba:	7a06      	ldrb	r6, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80196bc:	2244      	movs	r2, #68	; 0x44
 80196be:	4911      	ldr	r1, [pc, #68]	; (8019704 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80196c0:	f046 0620 	orr.w	r6, r6, #32
 80196c4:	7206      	strb	r6, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80196c6:	f7ff fd85 	bl	80191d4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80196ca:	2243      	movs	r2, #67	; 0x43
 80196cc:	490d      	ldr	r1, [pc, #52]	; (8019704 <dhcp_inc_pcb_refcount+0x6c>)
 80196ce:	6828      	ldr	r0, [r5, #0]
 80196d0:	f7ff fea8 	bl	8019424 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80196d4:	6828      	ldr	r0, [r5, #0]
 80196d6:	2200      	movs	r2, #0
 80196d8:	490b      	ldr	r1, [pc, #44]	; (8019708 <dhcp_inc_pcb_refcount+0x70>)
 80196da:	f7ff fecf 	bl	801947c <udp_recv>
 80196de:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 80196e0:	3301      	adds	r3, #1
  return ERR_OK;
 80196e2:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80196e4:	7023      	strb	r3, [r4, #0]
}
 80196e6:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 80196e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80196ec:	bd70      	pop	{r4, r5, r6, pc}
 80196ee:	bf00      	nop
 80196f0:	200214b0 	.word	0x200214b0
 80196f4:	200214ac 	.word	0x200214ac
 80196f8:	080392c4 	.word	0x080392c4
 80196fc:	080394d4 	.word	0x080394d4
 8019700:	08021804 	.word	0x08021804
 8019704:	08039ac4 	.word	0x08039ac4
 8019708:	08019fad 	.word	0x08019fad

0801970c <dhcp_option_short.isra.0>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801970c:	880b      	ldrh	r3, [r1, #0]
dhcp_option_short(struct dhcp *dhcp, u16_t value)
 801970e:	b570      	push	{r4, r5, r6, lr}
 8019710:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019712:	1c99      	adds	r1, r3, #2
dhcp_option_short(struct dhcp *dhcp, u16_t value)
 8019714:	4606      	mov	r6, r0
 8019716:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019718:	2944      	cmp	r1, #68	; 0x44
 801971a:	d908      	bls.n	801972e <dhcp_option_short.isra.0+0x22>
 801971c:	4b0a      	ldr	r3, [pc, #40]	; (8019748 <dhcp_option_short.isra.0+0x3c>)
 801971e:	f240 5282 	movw	r2, #1410	; 0x582
 8019722:	490a      	ldr	r1, [pc, #40]	; (801974c <dhcp_option_short.isra.0+0x40>)
 8019724:	480a      	ldr	r0, [pc, #40]	; (8019750 <dhcp_option_short.isra.0+0x44>)
 8019726:	f003 ff5f 	bl	801d5e8 <iprintf>
 801972a:	8823      	ldrh	r3, [r4, #0]
 801972c:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801972e:	6830      	ldr	r0, [r6, #0]
 8019730:	1c5a      	adds	r2, r3, #1
 8019732:	0a2e      	lsrs	r6, r5, #8
 8019734:	4403      	add	r3, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8019736:	fa10 f282 	uxtah	r2, r0, r2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801973a:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801973e:	8021      	strh	r1, [r4, #0]
 8019740:	f882 50f0 	strb.w	r5, [r2, #240]	; 0xf0
}
 8019744:	bd70      	pop	{r4, r5, r6, pc}
 8019746:	bf00      	nop
 8019748:	080392c4 	.word	0x080392c4
 801974c:	08039584 	.word	0x08039584
 8019750:	08021804 	.word	0x08021804

08019754 <dhcp_option.isra.1>:
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 8019754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019756:	461d      	mov	r5, r3
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019758:	880b      	ldrh	r3, [r1, #0]
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 801975a:	460c      	mov	r4, r1
 801975c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801975e:	1c99      	adds	r1, r3, #2
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
 8019760:	4607      	mov	r7, r0
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019762:	194a      	adds	r2, r1, r5
 8019764:	2a44      	cmp	r2, #68	; 0x44
 8019766:	d908      	bls.n	801977a <dhcp_option.isra.1+0x26>
 8019768:	4b09      	ldr	r3, [pc, #36]	; (8019790 <dhcp_option.isra.1+0x3c>)
 801976a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801976e:	4909      	ldr	r1, [pc, #36]	; (8019794 <dhcp_option.isra.1+0x40>)
 8019770:	4809      	ldr	r0, [pc, #36]	; (8019798 <dhcp_option.isra.1+0x44>)
 8019772:	f003 ff39 	bl	801d5e8 <iprintf>
 8019776:	8823      	ldrh	r3, [r4, #0]
 8019778:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801977a:	6838      	ldr	r0, [r7, #0]
 801977c:	1c5a      	adds	r2, r3, #1
 801977e:	4403      	add	r3, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8019780:	fa10 f282 	uxtah	r2, r0, r2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8019784:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8019788:	8021      	strh	r1, [r4, #0]
 801978a:	f882 50f0 	strb.w	r5, [r2, #240]	; 0xf0
}
 801978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019790:	080392c4 	.word	0x080392c4
 8019794:	080394fc 	.word	0x080394fc
 8019798:	08021804 	.word	0x08021804

0801979c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801979c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80197a0:	2800      	cmp	r0, #0
 80197a2:	f000 80e3 	beq.w	801996c <dhcp_create_msg+0x1d0>
 80197a6:	460c      	mov	r4, r1
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80197a8:	2900      	cmp	r1, #0
 80197aa:	f000 80e9 	beq.w	8019980 <dhcp_create_msg+0x1e4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80197ae:	68cb      	ldr	r3, [r1, #12]
 80197b0:	4615      	mov	r5, r2
 80197b2:	4607      	mov	r7, r0
 80197b4:	b133      	cbz	r3, 80197c4 <dhcp_create_msg+0x28>
 80197b6:	4b77      	ldr	r3, [pc, #476]	; (8019994 <dhcp_create_msg+0x1f8>)
 80197b8:	f240 721f 	movw	r2, #1823	; 0x71f
 80197bc:	4976      	ldr	r1, [pc, #472]	; (8019998 <dhcp_create_msg+0x1fc>)
 80197be:	4877      	ldr	r0, [pc, #476]	; (801999c <dhcp_create_msg+0x200>)
 80197c0:	f003 ff12 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 80197c4:	6923      	ldr	r3, [r4, #16]
 80197c6:	b133      	cbz	r3, 80197d6 <dhcp_create_msg+0x3a>
 80197c8:	4b72      	ldr	r3, [pc, #456]	; (8019994 <dhcp_create_msg+0x1f8>)
 80197ca:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80197ce:	4974      	ldr	r1, [pc, #464]	; (80199a0 <dhcp_create_msg+0x204>)
 80197d0:	4872      	ldr	r0, [pc, #456]	; (801999c <dhcp_create_msg+0x200>)
 80197d2:	f003 ff09 	bl	801d5e8 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80197d6:	2200      	movs	r2, #0
 80197d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80197dc:	4610      	mov	r0, r2
 80197de:	f7fb f89f 	bl	8014920 <pbuf_alloc>
 80197e2:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 80197e4:	2800      	cmp	r0, #0
 80197e6:	f000 80be 	beq.w	8019966 <dhcp_create_msg+0x1ca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80197ea:	8943      	ldrh	r3, [r0, #10]
 80197ec:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80197f0:	f0c0 80a3 	bcc.w	801993a <dhcp_create_msg+0x19e>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80197f4:	2d03      	cmp	r5, #3
 80197f6:	f000 809a 	beq.w	801992e <dhcp_create_msg+0x192>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80197fa:	7aa3      	ldrb	r3, [r4, #10]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	f000 80ad 	beq.w	801995c <dhcp_create_msg+0x1c0>
 8019802:	4b68      	ldr	r3, [pc, #416]	; (80199a4 <dhcp_create_msg+0x208>)
 8019804:	6818      	ldr	r0, [r3, #0]
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019806:	6020      	str	r0, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8019808:	68e2      	ldr	r2, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801980a:	2301      	movs	r3, #1
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 801980c:	f04f 0800 	mov.w	r8, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8019810:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8019814:	f8c4 9010 	str.w	r9, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8019818:	f889 3000 	strb.w	r3, [r9]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801981c:	f889 3001 	strb.w	r3, [r9, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8019820:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
  dhcp->msg_out->hops = 0;
 8019824:	f889 8003 	strb.w	r8, [r9, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8019828:	f889 3002 	strb.w	r3, [r9, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801982c:	f7f9 fc66 	bl	80130fc <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019830:	1feb      	subs	r3, r5, #7
  dhcp->msg_out->secs = 0;
 8019832:	6926      	ldr	r6, [r4, #16]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019834:	2b01      	cmp	r3, #1
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8019836:	f8c9 0004 	str.w	r0, [r9, #4]
  dhcp->msg_out->secs = 0;
 801983a:	f886 8008 	strb.w	r8, [r6, #8]
 801983e:	f886 8009 	strb.w	r8, [r6, #9]
  dhcp->msg_out->flags = 0;
 8019842:	f886 800a 	strb.w	r8, [r6, #10]
 8019846:	f886 800b 	strb.w	r8, [r6, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801984a:	f886 800c 	strb.w	r8, [r6, #12]
 801984e:	f886 800d 	strb.w	r8, [r6, #13]
 8019852:	f886 800e 	strb.w	r8, [r6, #14]
 8019856:	f886 800f 	strb.w	r8, [r6, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801985a:	d901      	bls.n	8019860 <dhcp_create_msg+0xc4>
 801985c:	2d04      	cmp	r5, #4
 801985e:	d15f      	bne.n	8019920 <dhcp_create_msg+0x184>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	60f3      	str	r3, [r6, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8019864:	2200      	movs	r2, #0
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8019866:	4631      	mov	r1, r6
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8019868:	7432      	strb	r2, [r6, #16]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801986a:	4613      	mov	r3, r2
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801986c:	7472      	strb	r2, [r6, #17]
 801986e:	74b2      	strb	r2, [r6, #18]
 8019870:	74f2      	strb	r2, [r6, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8019872:	7532      	strb	r2, [r6, #20]
 8019874:	7572      	strb	r2, [r6, #21]
 8019876:	75b2      	strb	r2, [r6, #22]
 8019878:	75f2      	strb	r2, [r6, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801987a:	7632      	strb	r2, [r6, #24]
 801987c:	7672      	strb	r2, [r6, #25]
 801987e:	76b2      	strb	r2, [r6, #26]
 8019880:	f801 2f1b 	strb.w	r2, [r1, #27]!
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019884:	f897 c030 	ldrb.w	ip, [r7, #48]	; 0x30
 8019888:	e004      	b.n	8019894 <dhcp_create_msg+0xf8>
 801988a:	3301      	adds	r3, #1
 801988c:	f801 0f01 	strb.w	r0, [r1, #1]!
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8019890:	2b10      	cmp	r3, #16
 8019892:	d00d      	beq.n	80198b0 <dhcp_create_msg+0x114>
 8019894:	b29a      	uxth	r2, r3
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8019896:	2000      	movs	r0, #0
 8019898:	2a05      	cmp	r2, #5
 801989a:	d8f6      	bhi.n	801988a <dhcp_create_msg+0xee>
 801989c:	4594      	cmp	ip, r2
 801989e:	d9f4      	bls.n	801988a <dhcp_create_msg+0xee>
 80198a0:	18fa      	adds	r2, r7, r3
 80198a2:	3301      	adds	r3, #1
 80198a4:	f892 0031 	ldrb.w	r0, [r2, #49]	; 0x31
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80198a8:	2b10      	cmp	r3, #16
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80198aa:	f801 0f01 	strb.w	r0, [r1, #1]!
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80198ae:	d1f1      	bne.n	8019894 <dhcp_create_msg+0xf8>
 80198b0:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80198b4:	f106 036b 	add.w	r3, r6, #107	; 0x6b
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 80198b8:	2100      	movs	r1, #0
 80198ba:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80198be:	4293      	cmp	r3, r2
 80198c0:	d1fb      	bne.n	80198ba <dhcp_create_msg+0x11e>
 80198c2:	f106 02eb 	add.w	r2, r6, #235	; 0xeb
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 80198c6:	2100      	movs	r1, #0
 80198c8:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80198cc:	4293      	cmp	r3, r2
 80198ce:	d1fb      	bne.n	80198c8 <dhcp_create_msg+0x12c>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80198d0:	2063      	movs	r0, #99	; 0x63
 80198d2:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 80198d6:	2753      	movs	r7, #83	; 0x53
 80198d8:	4632      	mov	r2, r6
  dhcp->options_out_len = 0;
 80198da:	2300      	movs	r3, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80198dc:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 80198e0:	f886 c0ed 	strb.w	ip, [r6, #237]	; 0xed
 80198e4:	f886 70ee 	strb.w	r7, [r6, #238]	; 0xee
 80198e8:	f802 0fef 	strb.w	r0, [r2, #239]!
  dhcp->options_out_len = 0;
 80198ec:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80198ee:	f802 3f01 	strb.w	r3, [r2, #1]!
 80198f2:	3301      	adds	r3, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80198f4:	2b44      	cmp	r3, #68	; 0x44
 80198f6:	d1fa      	bne.n	80198ee <dhcp_create_msg+0x152>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80198f8:	2301      	movs	r3, #1
 80198fa:	2235      	movs	r2, #53	; 0x35
 80198fc:	f104 0114 	add.w	r1, r4, #20
 8019900:	f104 0010 	add.w	r0, r4, #16
 8019904:	f7ff ff26 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019908:	8aa3      	ldrh	r3, [r4, #20]
 801990a:	2b43      	cmp	r3, #67	; 0x43
 801990c:	d81d      	bhi.n	801994a <dhcp_create_msg+0x1ae>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801990e:	6922      	ldr	r2, [r4, #16]
 8019910:	1c59      	adds	r1, r3, #1
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
 8019912:	2000      	movs	r0, #0
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019914:	4413      	add	r3, r2
 8019916:	82a1      	strh	r1, [r4, #20]
 8019918:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 801991c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019920:	2d03      	cmp	r5, #3
 8019922:	d19f      	bne.n	8019864 <dhcp_create_msg+0xc8>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8019924:	7a63      	ldrb	r3, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019926:	3b04      	subs	r3, #4
 8019928:	2b01      	cmp	r3, #1
 801992a:	d89b      	bhi.n	8019864 <dhcp_create_msg+0xc8>
 801992c:	e798      	b.n	8019860 <dhcp_create_msg+0xc4>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801992e:	7a63      	ldrb	r3, [r4, #9]
 8019930:	2b03      	cmp	r3, #3
 8019932:	f43f af62 	beq.w	80197fa <dhcp_create_msg+0x5e>
 8019936:	6820      	ldr	r0, [r4, #0]
 8019938:	e766      	b.n	8019808 <dhcp_create_msg+0x6c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801993a:	4b16      	ldr	r3, [pc, #88]	; (8019994 <dhcp_create_msg+0x1f8>)
 801993c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8019940:	4919      	ldr	r1, [pc, #100]	; (80199a8 <dhcp_create_msg+0x20c>)
 8019942:	4816      	ldr	r0, [pc, #88]	; (801999c <dhcp_create_msg+0x200>)
 8019944:	f003 fe50 	bl	801d5e8 <iprintf>
 8019948:	e754      	b.n	80197f4 <dhcp_create_msg+0x58>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801994a:	4b12      	ldr	r3, [pc, #72]	; (8019994 <dhcp_create_msg+0x1f8>)
 801994c:	f240 527b 	movw	r2, #1403	; 0x57b
 8019950:	4916      	ldr	r1, [pc, #88]	; (80199ac <dhcp_create_msg+0x210>)
 8019952:	4812      	ldr	r0, [pc, #72]	; (801999c <dhcp_create_msg+0x200>)
 8019954:	f003 fe48 	bl	801d5e8 <iprintf>
 8019958:	8aa3      	ldrh	r3, [r4, #20]
 801995a:	e7d8      	b.n	801990e <dhcp_create_msg+0x172>
      xid = LWIP_RAND();
 801995c:	f003 fed4 	bl	801d708 <rand>
 8019960:	4b10      	ldr	r3, [pc, #64]	; (80199a4 <dhcp_create_msg+0x208>)
 8019962:	6018      	str	r0, [r3, #0]
 8019964:	e74f      	b.n	8019806 <dhcp_create_msg+0x6a>
    return ERR_MEM;
 8019966:	f04f 30ff 	mov.w	r0, #4294967295
 801996a:	e7d7      	b.n	801991c <dhcp_create_msg+0x180>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801996c:	4b09      	ldr	r3, [pc, #36]	; (8019994 <dhcp_create_msg+0x1f8>)
 801996e:	f240 721d 	movw	r2, #1821	; 0x71d
 8019972:	490f      	ldr	r1, [pc, #60]	; (80199b0 <dhcp_create_msg+0x214>)
 8019974:	4809      	ldr	r0, [pc, #36]	; (801999c <dhcp_create_msg+0x200>)
 8019976:	f003 fe37 	bl	801d5e8 <iprintf>
 801997a:	f06f 000f 	mvn.w	r0, #15
 801997e:	e7cd      	b.n	801991c <dhcp_create_msg+0x180>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019980:	4b04      	ldr	r3, [pc, #16]	; (8019994 <dhcp_create_msg+0x1f8>)
 8019982:	f240 721e 	movw	r2, #1822	; 0x71e
 8019986:	490b      	ldr	r1, [pc, #44]	; (80199b4 <dhcp_create_msg+0x218>)
 8019988:	4804      	ldr	r0, [pc, #16]	; (801999c <dhcp_create_msg+0x200>)
 801998a:	f003 fe2d 	bl	801d5e8 <iprintf>
 801998e:	f06f 0005 	mvn.w	r0, #5
 8019992:	e7c3      	b.n	801991c <dhcp_create_msg+0x180>
 8019994:	080392c4 	.word	0x080392c4
 8019998:	08039370 	.word	0x08039370
 801999c:	08021804 	.word	0x08021804
 80199a0:	08039398 	.word	0x08039398
 80199a4:	200214b4 	.word	0x200214b4
 80199a8:	080393c0 	.word	0x080393c0
 80199ac:	08039400 	.word	0x08039400
 80199b0:	08039330 	.word	0x08039330
 80199b4:	08039350 	.word	0x08039350

080199b8 <dhcp_option_trailer>:
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80199b8:	b358      	cbz	r0, 8019a12 <dhcp_option_trailer+0x5a>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80199ba:	6903      	ldr	r3, [r0, #16]
{
 80199bc:	b570      	push	{r4, r5, r6, lr}
 80199be:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80199c0:	b373      	cbz	r3, 8019a20 <dhcp_option_trailer+0x68>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80199c2:	8aa1      	ldrh	r1, [r4, #20]
 80199c4:	2943      	cmp	r1, #67	; 0x43
 80199c6:	d81b      	bhi.n	8019a00 <dhcp_option_trailer+0x48>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80199c8:	1c4a      	adds	r2, r1, #1
 80199ca:	6923      	ldr	r3, [r4, #16]
 80199cc:	25ff      	movs	r5, #255	; 0xff
 80199ce:	b292      	uxth	r2, r2
 80199d0:	1858      	adds	r0, r3, r1
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80199d2:	2a43      	cmp	r2, #67	; 0x43
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80199d4:	82a2      	strh	r2, [r4, #20]
 80199d6:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80199da:	d810      	bhi.n	80199fe <dhcp_option_trailer+0x46>
 80199dc:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 80199e0:	f102 05f0 	add.w	r5, r2, #240	; 0xf0
 80199e4:	f1c1 0142 	rsb	r1, r1, #66	; 0x42
 80199e8:	4402      	add	r2, r0
 80199ea:	442b      	add	r3, r5
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80199ec:	2000      	movs	r0, #0
 80199ee:	fa12 f281 	uxtah	r2, r2, r1
 80199f2:	f803 0b01 	strb.w	r0, [r3], #1
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80199f6:	4293      	cmp	r3, r2
 80199f8:	d1fb      	bne.n	80199f2 <dhcp_option_trailer+0x3a>
 80199fa:	2344      	movs	r3, #68	; 0x44
 80199fc:	82a3      	strh	r3, [r4, #20]
  }
}
 80199fe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019a00:	490b      	ldr	r1, [pc, #44]	; (8019a30 <dhcp_option_trailer+0x78>)
 8019a02:	f240 7284 	movw	r2, #1924	; 0x784
 8019a06:	4b0b      	ldr	r3, [pc, #44]	; (8019a34 <dhcp_option_trailer+0x7c>)
 8019a08:	480b      	ldr	r0, [pc, #44]	; (8019a38 <dhcp_option_trailer+0x80>)
 8019a0a:	f003 fded 	bl	801d5e8 <iprintf>
 8019a0e:	8aa1      	ldrh	r1, [r4, #20]
 8019a10:	e7da      	b.n	80199c8 <dhcp_option_trailer+0x10>
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8019a12:	4b08      	ldr	r3, [pc, #32]	; (8019a34 <dhcp_option_trailer+0x7c>)
 8019a14:	f240 7282 	movw	r2, #1922	; 0x782
 8019a18:	4908      	ldr	r1, [pc, #32]	; (8019a3c <dhcp_option_trailer+0x84>)
 8019a1a:	4807      	ldr	r0, [pc, #28]	; (8019a38 <dhcp_option_trailer+0x80>)
 8019a1c:	f003 bde4 	b.w	801d5e8 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8019a20:	4b04      	ldr	r3, [pc, #16]	; (8019a34 <dhcp_option_trailer+0x7c>)
 8019a22:	f240 7283 	movw	r2, #1923	; 0x783
 8019a26:	4906      	ldr	r1, [pc, #24]	; (8019a40 <dhcp_option_trailer+0x88>)
 8019a28:	4803      	ldr	r0, [pc, #12]	; (8019a38 <dhcp_option_trailer+0x80>)
 8019a2a:	f003 fddd 	bl	801d5e8 <iprintf>
 8019a2e:	e7c8      	b.n	80199c2 <dhcp_option_trailer+0xa>
 8019a30:	08039618 	.word	0x08039618
 8019a34:	080392c4 	.word	0x080392c4
 8019a38:	08021804 	.word	0x08021804
 8019a3c:	080395c8 	.word	0x080395c8
 8019a40:	080395ec 	.word	0x080395ec

08019a44 <dhcp_option_long.isra.4>:
dhcp_option_long(struct dhcp *dhcp, u32_t value)
 8019a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019a46:	880b      	ldrh	r3, [r1, #0]
dhcp_option_long(struct dhcp *dhcp, u32_t value)
 8019a48:	460d      	mov	r5, r1
 8019a4a:	4607      	mov	r7, r0
 8019a4c:	4614      	mov	r4, r2
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019a4e:	1d1e      	adds	r6, r3, #4
 8019a50:	2e44      	cmp	r6, #68	; 0x44
 8019a52:	d908      	bls.n	8019a66 <dhcp_option_long.isra.4+0x22>
 8019a54:	4b10      	ldr	r3, [pc, #64]	; (8019a98 <dhcp_option_long.isra.4+0x54>)
 8019a56:	f240 528a 	movw	r2, #1418	; 0x58a
 8019a5a:	4910      	ldr	r1, [pc, #64]	; (8019a9c <dhcp_option_long.isra.4+0x58>)
 8019a5c:	4810      	ldr	r0, [pc, #64]	; (8019aa0 <dhcp_option_long.isra.4+0x5c>)
 8019a5e:	f003 fdc3 	bl	801d5e8 <iprintf>
 8019a62:	882b      	ldrh	r3, [r5, #0]
 8019a64:	1d1e      	adds	r6, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019a66:	683a      	ldr	r2, [r7, #0]
 8019a68:	1c58      	adds	r0, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019a6a:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019a6c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8019a70:	18d7      	adds	r7, r2, r3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019a72:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019a74:	fa12 f080 	uxtah	r0, r2, r0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019a78:	fa12 f181 	uxtah	r1, r2, r1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019a7c:	f887 c0f0 	strb.w	ip, [r7, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019a80:	fa12 f383 	uxtah	r3, r2, r3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019a84:	0c27      	lsrs	r7, r4, #16
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019a86:	0a22      	lsrs	r2, r4, #8
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019a88:	f880 70f0 	strb.w	r7, [r0, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019a8c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019a90:	802e      	strh	r6, [r5, #0]
 8019a92:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 8019a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a98:	080392c4 	.word	0x080392c4
 8019a9c:	08039544 	.word	0x08039544
 8019aa0:	08021804 	.word	0x08021804

08019aa4 <dhcp_delete_msg>:
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8019aa4:	b310      	cbz	r0, 8019aec <dhcp_delete_msg+0x48>
{
 8019aa6:	b510      	push	{r4, lr}
 8019aa8:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8019aaa:	68c0      	ldr	r0, [r0, #12]
 8019aac:	b138      	cbz	r0, 8019abe <dhcp_delete_msg+0x1a>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8019aae:	6923      	ldr	r3, [r4, #16]
 8019ab0:	b173      	cbz	r3, 8019ad0 <dhcp_delete_msg+0x2c>
    pbuf_free(dhcp->p_out);
 8019ab2:	f7fa fec7 	bl	8014844 <pbuf_free>
  dhcp->p_out = NULL;
 8019ab6:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 8019ab8:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8019abc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8019abe:	4b0f      	ldr	r3, [pc, #60]	; (8019afc <dhcp_delete_msg+0x58>)
 8019ac0:	f240 726e 	movw	r2, #1902	; 0x76e
 8019ac4:	490e      	ldr	r1, [pc, #56]	; (8019b00 <dhcp_delete_msg+0x5c>)
 8019ac6:	480f      	ldr	r0, [pc, #60]	; (8019b04 <dhcp_delete_msg+0x60>)
 8019ac8:	f003 fd8e 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8019acc:	6923      	ldr	r3, [r4, #16]
 8019ace:	b933      	cbnz	r3, 8019ade <dhcp_delete_msg+0x3a>
 8019ad0:	4b0a      	ldr	r3, [pc, #40]	; (8019afc <dhcp_delete_msg+0x58>)
 8019ad2:	f240 726f 	movw	r2, #1903	; 0x76f
 8019ad6:	490c      	ldr	r1, [pc, #48]	; (8019b08 <dhcp_delete_msg+0x64>)
 8019ad8:	480a      	ldr	r0, [pc, #40]	; (8019b04 <dhcp_delete_msg+0x60>)
 8019ada:	f003 fd85 	bl	801d5e8 <iprintf>
  if (dhcp->p_out != NULL) {
 8019ade:	68e0      	ldr	r0, [r4, #12]
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d1e6      	bne.n	8019ab2 <dhcp_delete_msg+0xe>
  dhcp->p_out = NULL;
 8019ae4:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 8019ae6:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8019aea:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8019aec:	4b03      	ldr	r3, [pc, #12]	; (8019afc <dhcp_delete_msg+0x58>)
 8019aee:	f240 726d 	movw	r2, #1901	; 0x76d
 8019af2:	4906      	ldr	r1, [pc, #24]	; (8019b0c <dhcp_delete_msg+0x68>)
 8019af4:	4803      	ldr	r0, [pc, #12]	; (8019b04 <dhcp_delete_msg+0x60>)
 8019af6:	f003 bd77 	b.w	801d5e8 <iprintf>
 8019afa:	bf00      	nop
 8019afc:	080392c4 	.word	0x080392c4
 8019b00:	08039480 	.word	0x08039480
 8019b04:	08021804 	.word	0x08021804
 8019b08:	080394a8 	.word	0x080394a8
 8019b0c:	08039460 	.word	0x08039460

08019b10 <dhcp_discover>:
{
 8019b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b14:	6a84      	ldr	r4, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019b16:	2300      	movs	r3, #0
{
 8019b18:	b083      	sub	sp, #12
 8019b1a:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 8019b1c:	7a62      	ldrb	r2, [r4, #9]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019b1e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (new_state != dhcp->state) {
 8019b20:	2a06      	cmp	r2, #6
 8019b22:	d003      	beq.n	8019b2c <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8019b24:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8019b26:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 8019b28:	82e3      	strh	r3, [r4, #22]
    dhcp->state = new_state;
 8019b2a:	7262      	strb	r2, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	4621      	mov	r1, r4
 8019b30:	4630      	mov	r0, r6
 8019b32:	f7ff fe33 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 8019b36:	4607      	mov	r7, r0
 8019b38:	b1e8      	cbz	r0, 8019b76 <dhcp_discover+0x66>
  if (dhcp->tries < 255) {
 8019b3a:	7aa3      	ldrb	r3, [r4, #10]
 8019b3c:	2bff      	cmp	r3, #255	; 0xff
 8019b3e:	d014      	beq.n	8019b6a <dhcp_discover+0x5a>
    dhcp->tries++;
 8019b40:	3301      	adds	r3, #1
 8019b42:	b2db      	uxtb	r3, r3
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019b44:	2b05      	cmp	r3, #5
    dhcp->tries++;
 8019b46:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019b48:	d80f      	bhi.n	8019b6a <dhcp_discover+0x5a>
 8019b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019b4e:	4931      	ldr	r1, [pc, #196]	; (8019c14 <dhcp_discover+0x104>)
}
 8019b50:	4638      	mov	r0, r7
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019b52:	fa02 f303 	lsl.w	r3, r2, r3
 8019b56:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019b5a:	fba1 2303 	umull	r2, r3, r1, r3
 8019b5e:	f3c3 134f 	ubfx	r3, r3, #5, #16
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019b62:	82e3      	strh	r3, [r4, #22]
}
 8019b64:	b003      	add	sp, #12
 8019b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b6a:	2378      	movs	r3, #120	; 0x78
}
 8019b6c:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019b6e:	82e3      	strh	r3, [r4, #22]
}
 8019b70:	b003      	add	sp, #12
 8019b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b76:	f104 0a10 	add.w	sl, r4, #16
 8019b7a:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019b7e:	2302      	movs	r3, #2
 8019b80:	2239      	movs	r2, #57	; 0x39
 8019b82:	4650      	mov	r0, sl
 8019b84:	4659      	mov	r1, fp
 8019b86:	f7ff fde5 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8019b8a:	4659      	mov	r1, fp
 8019b8c:	4650      	mov	r0, sl
 8019b8e:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8019b90:	f7ff fdbc 	bl	801970c <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b94:	4659      	mov	r1, fp
 8019b96:	4650      	mov	r0, sl
 8019b98:	2304      	movs	r3, #4
 8019b9a:	2237      	movs	r2, #55	; 0x37
 8019b9c:	4d1e      	ldr	r5, [pc, #120]	; (8019c18 <dhcp_discover+0x108>)
 8019b9e:	f7ff fdd9 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019ba2:	8aa3      	ldrh	r3, [r4, #20]
 8019ba4:	f105 0903 	add.w	r9, r5, #3
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019ba8:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019bac:	2b43      	cmp	r3, #67	; 0x43
 8019bae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8019c2c <dhcp_discover+0x11c>
 8019bb2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8019c30 <dhcp_discover+0x120>
 8019bb6:	d80c      	bhi.n	8019bd2 <dhcp_discover+0xc2>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019bb8:	6922      	ldr	r2, [r4, #16]
 8019bba:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019bbc:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019bbe:	4413      	add	r3, r2
 8019bc0:	82a1      	strh	r1, [r4, #20]
 8019bc2:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019bc6:	d00d      	beq.n	8019be4 <dhcp_discover+0xd4>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019bc8:	8aa3      	ldrh	r3, [r4, #20]
 8019bca:	f815 8b01 	ldrb.w	r8, [r5], #1
 8019bce:	2b43      	cmp	r3, #67	; 0x43
 8019bd0:	d9f2      	bls.n	8019bb8 <dhcp_discover+0xa8>
 8019bd2:	465b      	mov	r3, fp
 8019bd4:	f240 527b 	movw	r2, #1403	; 0x57b
 8019bd8:	4651      	mov	r1, sl
 8019bda:	4810      	ldr	r0, [pc, #64]	; (8019c1c <dhcp_discover+0x10c>)
 8019bdc:	f003 fd04 	bl	801d5e8 <iprintf>
 8019be0:	8aa3      	ldrh	r3, [r4, #20]
 8019be2:	e7e9      	b.n	8019bb8 <dhcp_discover+0xa8>
    dhcp_option_trailer(dhcp);
 8019be4:	4620      	mov	r0, r4
 8019be6:	f7ff fee7 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8019bea:	8aa1      	ldrh	r1, [r4, #20]
 8019bec:	68e0      	ldr	r0, [r4, #12]
 8019bee:	31f0      	adds	r1, #240	; 0xf0
 8019bf0:	b289      	uxth	r1, r1
 8019bf2:	f7fa ffa3 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8019bf6:	4a0a      	ldr	r2, [pc, #40]	; (8019c20 <dhcp_discover+0x110>)
 8019bf8:	68e1      	ldr	r1, [r4, #12]
 8019bfa:	2343      	movs	r3, #67	; 0x43
 8019bfc:	6810      	ldr	r0, [r2, #0]
 8019bfe:	4a09      	ldr	r2, [pc, #36]	; (8019c24 <dhcp_discover+0x114>)
 8019c00:	e9cd 6200 	strd	r6, r2, [sp]
 8019c04:	4a08      	ldr	r2, [pc, #32]	; (8019c28 <dhcp_discover+0x118>)
 8019c06:	f7ff fb55 	bl	80192b4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f7ff ff4a 	bl	8019aa4 <dhcp_delete_msg>
 8019c10:	e793      	b.n	8019b3a <dhcp_discover+0x2a>
 8019c12:	bf00      	nop
 8019c14:	10624dd3 	.word	0x10624dd3
 8019c18:	080394d1 	.word	0x080394d1
 8019c1c:	08021804 	.word	0x08021804
 8019c20:	200214ac 	.word	0x200214ac
 8019c24:	08039ac4 	.word	0x08039ac4
 8019c28:	08039ac8 	.word	0x08039ac8
 8019c2c:	080392c4 	.word	0x080392c4
 8019c30:	08039400 	.word	0x08039400

08019c34 <dhcp_select>:
{
 8019c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c38:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8019c3a:	b083      	sub	sp, #12
 8019c3c:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 8019c3e:	7a63      	ldrb	r3, [r4, #9]
 8019c40:	2b01      	cmp	r3, #1
 8019c42:	d004      	beq.n	8019c4e <dhcp_select+0x1a>
    dhcp->tries = 0;
 8019c44:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019c46:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8019c48:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 8019c4a:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 8019c4c:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8019c4e:	2203      	movs	r2, #3
 8019c50:	4621      	mov	r1, r4
 8019c52:	4630      	mov	r0, r6
 8019c54:	f7ff fda2 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 8019c58:	4607      	mov	r7, r0
 8019c5a:	b1e8      	cbz	r0, 8019c98 <dhcp_select+0x64>
  if (dhcp->tries < 255) {
 8019c5c:	7aa3      	ldrb	r3, [r4, #10]
 8019c5e:	2bff      	cmp	r3, #255	; 0xff
 8019c60:	d014      	beq.n	8019c8c <dhcp_select+0x58>
    dhcp->tries++;
 8019c62:	3301      	adds	r3, #1
 8019c64:	b2db      	uxtb	r3, r3
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019c66:	2b05      	cmp	r3, #5
    dhcp->tries++;
 8019c68:	72a3      	strb	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019c6a:	d80f      	bhi.n	8019c8c <dhcp_select+0x58>
 8019c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019c70:	493e      	ldr	r1, [pc, #248]	; (8019d6c <dhcp_select+0x138>)
}
 8019c72:	4638      	mov	r0, r7
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8019c74:	fa02 f303 	lsl.w	r3, r2, r3
 8019c78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019c7c:	fba1 2303 	umull	r2, r3, r1, r3
 8019c80:	f3c3 134f 	ubfx	r3, r3, #5, #16
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019c84:	82e3      	strh	r3, [r4, #22]
}
 8019c86:	b003      	add	sp, #12
 8019c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019c8c:	2378      	movs	r3, #120	; 0x78
}
 8019c8e:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019c90:	82e3      	strh	r3, [r4, #22]
}
 8019c92:	b003      	add	sp, #12
 8019c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c98:	f104 0a10 	add.w	sl, r4, #16
 8019c9c:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019ca0:	2302      	movs	r3, #2
 8019ca2:	2239      	movs	r2, #57	; 0x39
 8019ca4:	4650      	mov	r0, sl
 8019ca6:	4659      	mov	r1, fp
 8019ca8:	f7ff fd54 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8019cac:	4659      	mov	r1, fp
 8019cae:	4650      	mov	r0, sl
 8019cb0:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 8019cb2:	f7ff fd2b 	bl	801970c <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8019cb6:	4659      	mov	r1, fp
 8019cb8:	2304      	movs	r3, #4
 8019cba:	4650      	mov	r0, sl
 8019cbc:	2232      	movs	r2, #50	; 0x32
 8019cbe:	4d2c      	ldr	r5, [pc, #176]	; (8019d70 <dhcp_select+0x13c>)
 8019cc0:	f7ff fd48 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019cc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019cc6:	f7f9 fa19 	bl	80130fc <lwip_htonl>
 8019cca:	4659      	mov	r1, fp
 8019ccc:	4602      	mov	r2, r0
 8019cce:	4650      	mov	r0, sl
 8019cd0:	f7ff feb8 	bl	8019a44 <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8019cd4:	4659      	mov	r1, fp
 8019cd6:	2304      	movs	r3, #4
 8019cd8:	4650      	mov	r0, sl
 8019cda:	2236      	movs	r2, #54	; 0x36
 8019cdc:	f105 0903 	add.w	r9, r5, #3
 8019ce0:	f7ff fd38 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019ce4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019ce6:	f7f9 fa09 	bl	80130fc <lwip_htonl>
 8019cea:	4659      	mov	r1, fp
 8019cec:	4602      	mov	r2, r0
 8019cee:	4650      	mov	r0, sl
 8019cf0:	f7ff fea8 	bl	8019a44 <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019cf4:	4659      	mov	r1, fp
 8019cf6:	4650      	mov	r0, sl
 8019cf8:	2304      	movs	r3, #4
 8019cfa:	2237      	movs	r2, #55	; 0x37
 8019cfc:	f04f 0801 	mov.w	r8, #1
 8019d00:	f7ff fd28 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019d04:	8aa3      	ldrh	r3, [r4, #20]
 8019d06:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8019d84 <dhcp_select+0x150>
 8019d0a:	2b43      	cmp	r3, #67	; 0x43
 8019d0c:	f8df a078 	ldr.w	sl, [pc, #120]	; 8019d88 <dhcp_select+0x154>
 8019d10:	d80c      	bhi.n	8019d2c <dhcp_select+0xf8>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019d12:	6922      	ldr	r2, [r4, #16]
 8019d14:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019d16:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019d18:	4413      	add	r3, r2
 8019d1a:	82a1      	strh	r1, [r4, #20]
 8019d1c:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019d20:	d00d      	beq.n	8019d3e <dhcp_select+0x10a>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019d22:	8aa3      	ldrh	r3, [r4, #20]
 8019d24:	f815 8b01 	ldrb.w	r8, [r5], #1
 8019d28:	2b43      	cmp	r3, #67	; 0x43
 8019d2a:	d9f2      	bls.n	8019d12 <dhcp_select+0xde>
 8019d2c:	465b      	mov	r3, fp
 8019d2e:	f240 527b 	movw	r2, #1403	; 0x57b
 8019d32:	4651      	mov	r1, sl
 8019d34:	480f      	ldr	r0, [pc, #60]	; (8019d74 <dhcp_select+0x140>)
 8019d36:	f003 fc57 	bl	801d5e8 <iprintf>
 8019d3a:	8aa3      	ldrh	r3, [r4, #20]
 8019d3c:	e7e9      	b.n	8019d12 <dhcp_select+0xde>
    dhcp_option_trailer(dhcp);
 8019d3e:	4620      	mov	r0, r4
 8019d40:	f7ff fe3a 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8019d44:	8aa1      	ldrh	r1, [r4, #20]
 8019d46:	68e0      	ldr	r0, [r4, #12]
 8019d48:	31f0      	adds	r1, #240	; 0xf0
 8019d4a:	b289      	uxth	r1, r1
 8019d4c:	f7fa fef6 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8019d50:	4a09      	ldr	r2, [pc, #36]	; (8019d78 <dhcp_select+0x144>)
 8019d52:	68e1      	ldr	r1, [r4, #12]
 8019d54:	2343      	movs	r3, #67	; 0x43
 8019d56:	6810      	ldr	r0, [r2, #0]
 8019d58:	4a08      	ldr	r2, [pc, #32]	; (8019d7c <dhcp_select+0x148>)
 8019d5a:	e9cd 6200 	strd	r6, r2, [sp]
 8019d5e:	4a08      	ldr	r2, [pc, #32]	; (8019d80 <dhcp_select+0x14c>)
 8019d60:	f7ff faa8 	bl	80192b4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8019d64:	4620      	mov	r0, r4
 8019d66:	f7ff fe9d 	bl	8019aa4 <dhcp_delete_msg>
 8019d6a:	e777      	b.n	8019c5c <dhcp_select+0x28>
 8019d6c:	10624dd3 	.word	0x10624dd3
 8019d70:	080394d1 	.word	0x080394d1
 8019d74:	08021804 	.word	0x08021804
 8019d78:	200214ac 	.word	0x200214ac
 8019d7c:	08039ac4 	.word	0x08039ac4
 8019d80:	08039ac8 	.word	0x08039ac8
 8019d84:	080392c4 	.word	0x080392c4
 8019d88:	08039400 	.word	0x08039400

08019d8c <dhcp_reboot>:
{
 8019d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d90:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8019d92:	b083      	sub	sp, #12
 8019d94:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 8019d96:	7a63      	ldrb	r3, [r4, #9]
 8019d98:	2b03      	cmp	r3, #3
 8019d9a:	d004      	beq.n	8019da6 <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 8019d9c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8019d9e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8019da0:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 8019da2:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 8019da4:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8019da6:	2203      	movs	r2, #3
 8019da8:	4621      	mov	r1, r4
 8019daa:	4630      	mov	r0, r6
 8019dac:	f7ff fcf6 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 8019db0:	4607      	mov	r7, r0
 8019db2:	b1f0      	cbz	r0, 8019df2 <dhcp_reboot+0x66>
  if (dhcp->tries < 255) {
 8019db4:	7aa3      	ldrb	r3, [r4, #10]
 8019db6:	2bff      	cmp	r3, #255	; 0xff
 8019db8:	d015      	beq.n	8019de6 <dhcp_reboot+0x5a>
    dhcp->tries++;
 8019dba:	3301      	adds	r3, #1
 8019dbc:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8019dbe:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8019dc0:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8019dc2:	d810      	bhi.n	8019de6 <dhcp_reboot+0x5a>
 8019dc4:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 8019dc8:	4a37      	ldr	r2, [pc, #220]	; (8019ea8 <dhcp_reboot+0x11c>)
}
 8019dca:	4638      	mov	r0, r7
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8019dcc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019dd0:	00db      	lsls	r3, r3, #3
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8019ddc:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019dde:	82e3      	strh	r3, [r4, #22]
}
 8019de0:	b003      	add	sp, #12
 8019de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019de6:	2314      	movs	r3, #20
}
 8019de8:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8019dea:	82e3      	strh	r3, [r4, #22]
}
 8019dec:	b003      	add	sp, #12
 8019dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df2:	f104 0a10 	add.w	sl, r4, #16
 8019df6:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019dfa:	2302      	movs	r3, #2
 8019dfc:	2239      	movs	r2, #57	; 0x39
 8019dfe:	4650      	mov	r0, sl
 8019e00:	4659      	mov	r1, fp
 8019e02:	f7ff fca7 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019e06:	4659      	mov	r1, fp
 8019e08:	4650      	mov	r0, sl
 8019e0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019e0e:	f7ff fc7d 	bl	801970c <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8019e12:	4659      	mov	r1, fp
 8019e14:	2304      	movs	r3, #4
 8019e16:	4650      	mov	r0, sl
 8019e18:	2232      	movs	r2, #50	; 0x32
 8019e1a:	4d24      	ldr	r5, [pc, #144]	; (8019eac <dhcp_reboot+0x120>)
 8019e1c:	f7ff fc9a 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019e20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019e22:	f7f9 f96b 	bl	80130fc <lwip_htonl>
 8019e26:	4659      	mov	r1, fp
 8019e28:	4602      	mov	r2, r0
 8019e2a:	4650      	mov	r0, sl
 8019e2c:	f7ff fe0a 	bl	8019a44 <dhcp_option_long.isra.4>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019e30:	4659      	mov	r1, fp
 8019e32:	4650      	mov	r0, sl
 8019e34:	2304      	movs	r3, #4
 8019e36:	2237      	movs	r2, #55	; 0x37
 8019e38:	f105 0903 	add.w	r9, r5, #3
 8019e3c:	f7ff fc8a 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019e40:	8aa3      	ldrh	r3, [r4, #20]
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019e42:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019e46:	f8df b074 	ldr.w	fp, [pc, #116]	; 8019ebc <dhcp_reboot+0x130>
 8019e4a:	2b43      	cmp	r3, #67	; 0x43
 8019e4c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8019ec0 <dhcp_reboot+0x134>
 8019e50:	d80c      	bhi.n	8019e6c <dhcp_reboot+0xe0>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019e52:	6922      	ldr	r2, [r4, #16]
 8019e54:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e56:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8019e58:	4413      	add	r3, r2
 8019e5a:	82a1      	strh	r1, [r4, #20]
 8019e5c:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e60:	d00d      	beq.n	8019e7e <dhcp_reboot+0xf2>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8019e62:	8aa3      	ldrh	r3, [r4, #20]
 8019e64:	f815 8b01 	ldrb.w	r8, [r5], #1
 8019e68:	2b43      	cmp	r3, #67	; 0x43
 8019e6a:	d9f2      	bls.n	8019e52 <dhcp_reboot+0xc6>
 8019e6c:	465b      	mov	r3, fp
 8019e6e:	f240 527b 	movw	r2, #1403	; 0x57b
 8019e72:	4651      	mov	r1, sl
 8019e74:	480e      	ldr	r0, [pc, #56]	; (8019eb0 <dhcp_reboot+0x124>)
 8019e76:	f003 fbb7 	bl	801d5e8 <iprintf>
 8019e7a:	8aa3      	ldrh	r3, [r4, #20]
 8019e7c:	e7e9      	b.n	8019e52 <dhcp_reboot+0xc6>
    dhcp_option_trailer(dhcp);
 8019e7e:	4620      	mov	r0, r4
 8019e80:	f7ff fd9a 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8019e84:	8aa1      	ldrh	r1, [r4, #20]
 8019e86:	68e0      	ldr	r0, [r4, #12]
 8019e88:	31f0      	adds	r1, #240	; 0xf0
 8019e8a:	b289      	uxth	r1, r1
 8019e8c:	f7fa fe56 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8019e90:	4a08      	ldr	r2, [pc, #32]	; (8019eb4 <dhcp_reboot+0x128>)
 8019e92:	68e1      	ldr	r1, [r4, #12]
 8019e94:	2343      	movs	r3, #67	; 0x43
 8019e96:	6810      	ldr	r0, [r2, #0]
 8019e98:	9600      	str	r6, [sp, #0]
 8019e9a:	4a07      	ldr	r2, [pc, #28]	; (8019eb8 <dhcp_reboot+0x12c>)
 8019e9c:	f7ff fa80 	bl	80193a0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	f7ff fdff 	bl	8019aa4 <dhcp_delete_msg>
 8019ea6:	e785      	b.n	8019db4 <dhcp_reboot+0x28>
 8019ea8:	10624dd3 	.word	0x10624dd3
 8019eac:	080394d1 	.word	0x080394d1
 8019eb0:	08021804 	.word	0x08021804
 8019eb4:	200214ac 	.word	0x200214ac
 8019eb8:	08039ac8 	.word	0x08039ac8
 8019ebc:	080392c4 	.word	0x080392c4
 8019ec0:	08039400 	.word	0x08039400

08019ec4 <dhcp_dec_pcb_refcount>:
{
 8019ec4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019ec6:	4d0b      	ldr	r5, [pc, #44]	; (8019ef4 <dhcp_dec_pcb_refcount+0x30>)
 8019ec8:	782c      	ldrb	r4, [r5, #0]
 8019eca:	b154      	cbz	r4, 8019ee2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 8019ecc:	3c01      	subs	r4, #1
 8019ece:	b2e4      	uxtb	r4, r4
 8019ed0:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8019ed2:	b104      	cbz	r4, 8019ed6 <dhcp_dec_pcb_refcount+0x12>
}
 8019ed4:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8019ed6:	4d08      	ldr	r5, [pc, #32]	; (8019ef8 <dhcp_dec_pcb_refcount+0x34>)
 8019ed8:	6828      	ldr	r0, [r5, #0]
 8019eda:	f7ff fad3 	bl	8019484 <udp_remove>
    dhcp_pcb = NULL;
 8019ede:	602c      	str	r4, [r5, #0]
}
 8019ee0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019ee2:	4b06      	ldr	r3, [pc, #24]	; (8019efc <dhcp_dec_pcb_refcount+0x38>)
 8019ee4:	22f3      	movs	r2, #243	; 0xf3
 8019ee6:	4906      	ldr	r1, [pc, #24]	; (8019f00 <dhcp_dec_pcb_refcount+0x3c>)
 8019ee8:	4806      	ldr	r0, [pc, #24]	; (8019f04 <dhcp_dec_pcb_refcount+0x40>)
 8019eea:	f003 fb7d 	bl	801d5e8 <iprintf>
 8019eee:	782c      	ldrb	r4, [r5, #0]
 8019ef0:	e7ec      	b.n	8019ecc <dhcp_dec_pcb_refcount+0x8>
 8019ef2:	bf00      	nop
 8019ef4:	200214b0 	.word	0x200214b0
 8019ef8:	200214ac 	.word	0x200214ac
 8019efc:	080392c4 	.word	0x080392c4
 8019f00:	0803943c 	.word	0x0803943c
 8019f04:	08021804 	.word	0x08021804

08019f08 <dhcp_handle_ack.isra.8>:
dhcp_handle_ack(struct netif *netif)
 8019f08:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019f0a:	4d26      	ldr	r5, [pc, #152]	; (8019fa4 <dhcp_handle_ack.isra.8+0x9c>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019f0c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif)
 8019f0e:	b082      	sub	sp, #8
 8019f10:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019f12:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019f14:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019f18:	b112      	cbz	r2, 8019f20 <dhcp_handle_ack.isra.8+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019f1a:	4b23      	ldr	r3, [pc, #140]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f1c:	68db      	ldr	r3, [r3, #12]
 8019f1e:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019f20:	792b      	ldrb	r3, [r5, #4]
 8019f22:	b11b      	cbz	r3, 8019f2c <dhcp_handle_ack.isra.8+0x24>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019f24:	4b20      	ldr	r3, [pc, #128]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f26:	691b      	ldr	r3, [r3, #16]
 8019f28:	63a3      	str	r3, [r4, #56]	; 0x38
 8019f2a:	e002      	b.n	8019f32 <dhcp_handle_ack.isra.8+0x2a>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f2e:	085b      	lsrs	r3, r3, #1
 8019f30:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019f32:	796b      	ldrb	r3, [r5, #5]
 8019f34:	b11b      	cbz	r3, 8019f3e <dhcp_handle_ack.isra.8+0x36>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019f36:	4b1c      	ldr	r3, [pc, #112]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f38:	695b      	ldr	r3, [r3, #20]
 8019f3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019f3c:	e004      	b.n	8019f48 <dhcp_handle_ack.isra.8+0x40>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019f44:	08db      	lsrs	r3, r3, #3
 8019f46:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8019f48:	6862      	ldr	r2, [r4, #4]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019f4a:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8019f4c:	6912      	ldr	r2, [r2, #16]
 8019f4e:	62a2      	str	r2, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019f50:	b13b      	cbz	r3, 8019f62 <dhcp_handle_ack.isra.8+0x5a>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019f52:	4b15      	ldr	r3, [pc, #84]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f54:	6998      	ldr	r0, [r3, #24]
 8019f56:	f7f9 f8d1 	bl	80130fc <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8019f5a:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019f5c:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8019f5e:	72e3      	strb	r3, [r4, #11]
 8019f60:	e000      	b.n	8019f64 <dhcp_handle_ack.isra.8+0x5c>
    dhcp->subnet_mask_given = 0;
 8019f62:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019f64:	79eb      	ldrb	r3, [r5, #7]
 8019f66:	b123      	cbz	r3, 8019f72 <dhcp_handle_ack.isra.8+0x6a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019f68:	4b0f      	ldr	r3, [pc, #60]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f6a:	69d8      	ldr	r0, [r3, #28]
 8019f6c:	f7f9 f8c6 	bl	80130fc <lwip_htonl>
 8019f70:	6320      	str	r0, [r4, #48]	; 0x30
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019f72:	7a2b      	ldrb	r3, [r5, #8]
 8019f74:	b1a3      	cbz	r3, 8019fa0 <dhcp_handle_ack.isra.8+0x98>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019f76:	4e0c      	ldr	r6, [pc, #48]	; (8019fa8 <dhcp_handle_ack.isra.8+0xa0>)
 8019f78:	ac02      	add	r4, sp, #8
 8019f7a:	6a30      	ldr	r0, [r6, #32]
 8019f7c:	f7f9 f8be 	bl	80130fc <lwip_htonl>
 8019f80:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 8019f84:	2000      	movs	r0, #0
 8019f86:	4621      	mov	r1, r4
 8019f88:	f7f9 fc0a 	bl	80137a0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019f8c:	7a6b      	ldrb	r3, [r5, #9]
 8019f8e:	b13b      	cbz	r3, 8019fa0 <dhcp_handle_ack.isra.8+0x98>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019f90:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8019f92:	f7f9 f8b3 	bl	80130fc <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8019f96:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019f98:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8019f9a:	2001      	movs	r0, #1
 8019f9c:	f7f9 fc00 	bl	80137a0 <dns_setserver>
}
 8019fa0:	b002      	add	sp, #8
 8019fa2:	bd70      	pop	{r4, r5, r6, pc}
 8019fa4:	20033ba4 	.word	0x20033ba4
 8019fa8:	20033bb0 	.word	0x20033bb0

08019fac <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8019fac:	4b9e      	ldr	r3, [pc, #632]	; (801a228 <dhcp_recv+0x27c>)
{
 8019fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8019fb2:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8019fb6:	b08b      	sub	sp, #44	; 0x2c
 8019fb8:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019fba:	f8da 7028 	ldr.w	r7, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019fbe:	b11f      	cbz	r7, 8019fc8 <dhcp_recv+0x1c>
 8019fc0:	7a3b      	ldrb	r3, [r7, #8]
 8019fc2:	b93b      	cbnz	r3, 8019fd4 <dhcp_recv+0x28>
    dhcp->msg_in = NULL;
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	607b      	str	r3, [r7, #4]
  pbuf_free(p);
 8019fc8:	4658      	mov	r0, fp
 8019fca:	f7fa fc3b 	bl	8014844 <pbuf_free>
}
 8019fce:	b00b      	add	sp, #44	; 0x2c
 8019fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8019fd4:	687b      	ldr	r3, [r7, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019fd6:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8019fd8:	b133      	cbz	r3, 8019fe8 <dhcp_recv+0x3c>
 8019fda:	4b94      	ldr	r3, [pc, #592]	; (801a22c <dhcp_recv+0x280>)
 8019fdc:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8019fe0:	4993      	ldr	r1, [pc, #588]	; (801a230 <dhcp_recv+0x284>)
 8019fe2:	4894      	ldr	r0, [pc, #592]	; (801a234 <dhcp_recv+0x288>)
 8019fe4:	f003 fb00 	bl	801d5e8 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019fe8:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8019fec:	2b2b      	cmp	r3, #43	; 0x2b
 8019fee:	d9e9      	bls.n	8019fc4 <dhcp_recv+0x18>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019ff0:	7823      	ldrb	r3, [r4, #0]
 8019ff2:	2b02      	cmp	r3, #2
 8019ff4:	d1e6      	bne.n	8019fc4 <dhcp_recv+0x18>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8019ff6:	f89a 6030 	ldrb.w	r6, [sl, #48]	; 0x30
 8019ffa:	b1b6      	cbz	r6, 801a02a <dhcp_recv+0x7e>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019ffc:	f89a 2031 	ldrb.w	r2, [sl, #49]	; 0x31
 801a000:	7f23      	ldrb	r3, [r4, #28]
 801a002:	429a      	cmp	r2, r3
 801a004:	d1de      	bne.n	8019fc4 <dhcp_recv+0x18>
 801a006:	f10a 0032 	add.w	r0, sl, #50	; 0x32
 801a00a:	f104 011d 	add.w	r1, r4, #29
 801a00e:	2301      	movs	r3, #1
 801a010:	b2da      	uxtb	r2, r3
 801a012:	3301      	adds	r3, #1
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801a014:	2a05      	cmp	r2, #5
 801a016:	d808      	bhi.n	801a02a <dhcp_recv+0x7e>
 801a018:	4296      	cmp	r6, r2
 801a01a:	d906      	bls.n	801a02a <dhcp_recv+0x7e>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a01c:	f810 5b01 	ldrb.w	r5, [r0], #1
 801a020:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a024:	4295      	cmp	r5, r2
 801a026:	d0f3      	beq.n	801a010 <dhcp_recv+0x64>
free_pbuf_and_return:
 801a028:	e7cc      	b.n	8019fc4 <dhcp_recv+0x18>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a02a:	6860      	ldr	r0, [r4, #4]
 801a02c:	f7f9 f866 	bl	80130fc <lwip_htonl>
 801a030:	683b      	ldr	r3, [r7, #0]
 801a032:	4298      	cmp	r0, r3
 801a034:	d1c6      	bne.n	8019fc4 <dhcp_recv+0x18>
  dhcp_clear_all_options(dhcp);
 801a036:	2200      	movs	r2, #0
 801a038:	497f      	ldr	r1, [pc, #508]	; (801a238 <dhcp_recv+0x28c>)
 801a03a:	604a      	str	r2, [r1, #4]
 801a03c:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801a03e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801a042:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801a044:	2b2b      	cmp	r3, #43	; 0x2b
 801a046:	d9bd      	bls.n	8019fc4 <dhcp_recv+0x18>
  int parse_sname_as_options = 0;
 801a048:	9206      	str	r2, [sp, #24]
  options_idx = DHCP_OPTIONS_OFS;
 801a04a:	20f0      	movs	r0, #240	; 0xf0
  options_idx_max = p->tot_len;
 801a04c:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801a050:	f8db 1004 	ldr.w	r1, [fp, #4]
 801a054:	f8cd a01c 	str.w	sl, [sp, #28]
 801a058:	4692      	mov	sl, r2
  options_idx = DHCP_OPTIONS_OFS;
 801a05a:	9003      	str	r0, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801a05c:	6079      	str	r1, [r7, #4]
 801a05e:	9704      	str	r7, [sp, #16]
 801a060:	f8cd b008 	str.w	fp, [sp, #8]
 801a064:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
 801a068:	e000      	b.n	801a06c <dhcp_recv+0xc0>
 801a06a:	8973      	ldrh	r3, [r6, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801a06c:	4293      	cmp	r3, r2
    options_idx -= q->len;
 801a06e:	eba2 0103 	sub.w	r1, r2, r3
    options_idx_max -= q->len;
 801a072:	ebaa 0303 	sub.w	r3, sl, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801a076:	d809      	bhi.n	801a08c <dhcp_recv+0xe0>
    q = q->next;
 801a078:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 801a07a:	b28a      	uxth	r2, r1
    options_idx_max -= q->len;
 801a07c:	fa1f fa83 	uxth.w	sl, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801a080:	2e00      	cmp	r6, #0
 801a082:	d1f2      	bne.n	801a06a <dhcp_recv+0xbe>
 801a084:	9f04      	ldr	r7, [sp, #16]
 801a086:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a08a:	e79b      	b.n	8019fc4 <dhcp_recv+0x18>
  options = (u8_t*)q->payload;
 801a08c:	6873      	ldr	r3, [r6, #4]
 801a08e:	4693      	mov	fp, r2
 801a090:	9203      	str	r2, [sp, #12]
 801a092:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a094:	45d3      	cmp	fp, sl
 801a096:	f080 81d4 	bcs.w	801a442 <dhcp_recv+0x496>
 801a09a:	9b01      	ldr	r3, [sp, #4]
 801a09c:	f813 200b 	ldrb.w	r2, [r3, fp]
 801a0a0:	2aff      	cmp	r2, #255	; 0xff
 801a0a2:	f000 81ce 	beq.w	801a442 <dhcp_recv+0x496>
    if ((offset + 1) < q->len) {
 801a0a6:	8973      	ldrh	r3, [r6, #10]
 801a0a8:	f10b 0101 	add.w	r1, fp, #1
    u16_t val_offset = offset + 2;
 801a0ac:	f10b 0502 	add.w	r5, fp, #2
    if ((offset + 1) < q->len) {
 801a0b0:	4299      	cmp	r1, r3
    u16_t val_offset = offset + 2;
 801a0b2:	b2ad      	uxth	r5, r5
    if ((offset + 1) < q->len) {
 801a0b4:	f280 80e8 	bge.w	801a288 <dhcp_recv+0x2dc>
      len = options[offset + 1];
 801a0b8:	9801      	ldr	r0, [sp, #4]
 801a0ba:	4458      	add	r0, fp
 801a0bc:	7844      	ldrb	r4, [r0, #1]
    switch(op) {
 801a0be:	2a3b      	cmp	r2, #59	; 0x3b
 801a0c0:	f200 80d3 	bhi.w	801a26a <dhcp_recv+0x2be>
 801a0c4:	e8df f002 	tbb	[pc, r2]
 801a0c8:	a5d11e73 	.word	0xa5d11e73
 801a0cc:	d180d1d1 	.word	0xd180d1d1
 801a0d0:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0d4:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0d8:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0dc:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0e0:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0e4:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0e8:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0ec:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0f0:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0f4:	d1d1d1d1 	.word	0xd1d1d1d1
 801a0f8:	cbd1d1d1 	.word	0xcbd1d1d1
 801a0fc:	d19398be 	.word	0xd19398be
 801a100:	767bd1d1 	.word	0x767bd1d1
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a104:	2c04      	cmp	r4, #4
 801a106:	f040 8178 	bne.w	801a3fa <dhcp_recv+0x44e>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a10a:	2706      	movs	r7, #6
    offset += len + 2;
 801a10c:	eb05 0b04 	add.w	fp, r5, r4
 801a110:	fa1f fb8b 	uxth.w	fp, fp
 801a114:	4a48      	ldr	r2, [pc, #288]	; (801a238 <dhcp_recv+0x28c>)
      u32_t value = 0;
 801a116:	ab0a      	add	r3, sp, #40	; 0x28
 801a118:	f8cd a014 	str.w	sl, [sp, #20]
 801a11c:	eb02 0907 	add.w	r9, r2, r7
 801a120:	2200      	movs	r2, #0
 801a122:	f843 2d04 	str.w	r2, [r3, #-4]!
 801a126:	469a      	mov	sl, r3
 801a128:	e018      	b.n	801a15c <dhcp_recv+0x1b0>
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a12a:	f7fa feb7 	bl	8014e9c <pbuf_copy_partial>
 801a12e:	4580      	cmp	r8, r0
 801a130:	d1a8      	bne.n	801a084 <dhcp_recv+0xd8>
        if (decode_len > 4) {
 801a132:	2c04      	cmp	r4, #4
 801a134:	f240 816c 	bls.w	801a410 <dhcp_recv+0x464>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a138:	07a2      	lsls	r2, r4, #30
 801a13a:	f040 8177 	bne.w	801a42c <dhcp_recv+0x480>
          dhcp_got_option(dhcp, decode_idx);
 801a13e:	f04f 0301 	mov.w	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a142:	9809      	ldr	r0, [sp, #36]	; 0x24
          decode_len -= 4;
 801a144:	3c04      	subs	r4, #4
          val_offset += 4;
 801a146:	3504      	adds	r5, #4
          dhcp_got_option(dhcp, decode_idx);
 801a148:	f809 3b01 	strb.w	r3, [r9], #1
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a14c:	f7f8 ffd6 	bl	80130fc <lwip_htonl>
 801a150:	4b3a      	ldr	r3, [pc, #232]	; (801a23c <dhcp_recv+0x290>)
          decode_len -= 4;
 801a152:	b2e4      	uxtb	r4, r4
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a154:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
          val_offset += 4;
 801a158:	b2ad      	uxth	r5, r5
          decode_idx++;
 801a15a:	3701      	adds	r7, #1
        copy_len = LWIP_MIN(decode_len, 4);
 801a15c:	2c04      	cmp	r4, #4
 801a15e:	46a0      	mov	r8, r4
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801a160:	f899 c000 	ldrb.w	ip, [r9]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a164:	462b      	mov	r3, r5
        copy_len = LWIP_MIN(decode_len, 4);
 801a166:	bf28      	it	cs
 801a168:	f04f 0804 	movcs.w	r8, #4
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a16c:	4651      	mov	r1, sl
 801a16e:	4630      	mov	r0, r6
 801a170:	4642      	mov	r2, r8
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801a172:	f1bc 0f00 	cmp.w	ip, #0
 801a176:	d0d8      	beq.n	801a12a <dhcp_recv+0x17e>
 801a178:	f8dd a014 	ldr.w	sl, [sp, #20]
 801a17c:	8973      	ldrh	r3, [r6, #10]
    if (offset >= q->len) {
 801a17e:	459b      	cmp	fp, r3
 801a180:	d388      	bcc.n	801a094 <dhcp_recv+0xe8>
      offset -= q->len;
 801a182:	ebab 0b03 	sub.w	fp, fp, r3
      offset_max -= q->len;
 801a186:	ebaa 0303 	sub.w	r3, sl, r3
      offset -= q->len;
 801a18a:	fa1f fb8b 	uxth.w	fp, fp
      offset_max -= q->len;
 801a18e:	fa1f fa83 	uxth.w	sl, r3
      if ((offset < offset_max) && offset_max) {
 801a192:	45d3      	cmp	fp, sl
 801a194:	f080 8155 	bcs.w	801a442 <dhcp_recv+0x496>
 801a198:	f1ba 0f00 	cmp.w	sl, #0
 801a19c:	f000 8151 	beq.w	801a442 <dhcp_recv+0x496>
        q = q->next;
 801a1a0:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a1a2:	2e00      	cmp	r6, #0
 801a1a4:	f000 8172 	beq.w	801a48c <dhcp_recv+0x4e0>
        options = (u8_t*)q->payload;
 801a1a8:	6873      	ldr	r3, [r6, #4]
 801a1aa:	9301      	str	r3, [sp, #4]
 801a1ac:	e772      	b.n	801a094 <dhcp_recv+0xe8>
    offset += len + 2;
 801a1ae:	fa1f fb81 	uxth.w	fp, r1
 801a1b2:	e7e4      	b.n	801a17e <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a1b4:	2c04      	cmp	r4, #4
 801a1b6:	f040 80f4 	bne.w	801a3a2 <dhcp_recv+0x3f6>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a1ba:	2705      	movs	r7, #5
 801a1bc:	e7a6      	b.n	801a10c <dhcp_recv+0x160>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a1be:	2c04      	cmp	r4, #4
 801a1c0:	d157      	bne.n	801a272 <dhcp_recv+0x2c6>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a1c2:	4627      	mov	r7, r4
 801a1c4:	e7a2      	b.n	801a10c <dhcp_recv+0x160>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a1c6:	2400      	movs	r4, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a1c8:	07a1      	lsls	r1, r4, #30
 801a1ca:	f040 818b 	bne.w	801a4e4 <dhcp_recv+0x538>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a1ce:	2c08      	cmp	r4, #8
 801a1d0:	4622      	mov	r2, r4
 801a1d2:	bf28      	it	cs
 801a1d4:	2208      	movcs	r2, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a1d6:	42a2      	cmp	r2, r4
 801a1d8:	f200 8179 	bhi.w	801a4ce <dhcp_recv+0x522>
    offset += len + 2;
 801a1dc:	eb05 0b04 	add.w	fp, r5, r4
 801a1e0:	fa1f fb8b 	uxth.w	fp, fp
    if (decode_len > 0) {
 801a1e4:	2c00      	cmp	r4, #0
 801a1e6:	d0ca      	beq.n	801a17e <dhcp_recv+0x1d2>
 801a1e8:	4614      	mov	r4, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a1ea:	2708      	movs	r7, #8
 801a1ec:	e792      	b.n	801a114 <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a1ee:	2c04      	cmp	r4, #4
 801a1f0:	f040 80e2 	bne.w	801a3b8 <dhcp_recv+0x40c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a1f4:	2702      	movs	r7, #2
 801a1f6:	e789      	b.n	801a10c <dhcp_recv+0x160>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a1f8:	2c01      	cmp	r4, #1
 801a1fa:	d0e2      	beq.n	801a1c2 <dhcp_recv+0x216>
 801a1fc:	4b0b      	ldr	r3, [pc, #44]	; (801a22c <dhcp_recv+0x280>)
 801a1fe:	f240 621d 	movw	r2, #1565	; 0x61d
 801a202:	490f      	ldr	r1, [pc, #60]	; (801a240 <dhcp_recv+0x294>)
 801a204:	480b      	ldr	r0, [pc, #44]	; (801a234 <dhcp_recv+0x288>)
 801a206:	9f04      	ldr	r7, [sp, #16]
 801a208:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a20c:	f003 f9ec 	bl	801d5e8 <iprintf>
 801a210:	e6d8      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a212:	2c03      	cmp	r4, #3
 801a214:	f240 80ba 	bls.w	801a38c <dhcp_recv+0x3e0>
    offset += len + 2;
 801a218:	eb05 0b04 	add.w	fp, r5, r4
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a21c:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 801a21e:	2404      	movs	r4, #4
    offset += len + 2;
 801a220:	fa1f fb8b 	uxth.w	fp, fp
 801a224:	e776      	b.n	801a114 <dhcp_recv+0x168>
 801a226:	bf00      	nop
 801a228:	20025a2c 	.word	0x20025a2c
 801a22c:	080392c4 	.word	0x080392c4
 801a230:	08039658 	.word	0x08039658
 801a234:	08021804 	.word	0x08021804
 801a238:	20033ba4 	.word	0x20033ba4
 801a23c:	20033bb0 	.word	0x20033bb0
 801a240:	0803969c 	.word	0x0803969c
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a244:	2c01      	cmp	r4, #1
 801a246:	f040 80c2 	bne.w	801a3ce <dhcp_recv+0x422>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a24a:	9b03      	ldr	r3, [sp, #12]
 801a24c:	2bf0      	cmp	r3, #240	; 0xf0
 801a24e:	f040 8133 	bne.w	801a4b8 <dhcp_recv+0x50c>
    offset += len + 2;
 801a252:	f10b 0b03 	add.w	fp, fp, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a256:	2700      	movs	r7, #0
    offset += len + 2;
 801a258:	fa1f fb8b 	uxth.w	fp, fp
 801a25c:	e75a      	b.n	801a114 <dhcp_recv+0x168>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a25e:	2c04      	cmp	r4, #4
 801a260:	f040 80c0 	bne.w	801a3e4 <dhcp_recv+0x438>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a264:	2703      	movs	r7, #3
 801a266:	e751      	b.n	801a10c <dhcp_recv+0x160>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a268:	2400      	movs	r4, #0
    offset += len + 2;
 801a26a:	442c      	add	r4, r5
 801a26c:	fa1f fb84 	uxth.w	fp, r4
 801a270:	e785      	b.n	801a17e <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a272:	4bb7      	ldr	r3, [pc, #732]	; (801a550 <dhcp_recv+0x5a4>)
 801a274:	f240 6225 	movw	r2, #1573	; 0x625
 801a278:	49b6      	ldr	r1, [pc, #728]	; (801a554 <dhcp_recv+0x5a8>)
 801a27a:	48b7      	ldr	r0, [pc, #732]	; (801a558 <dhcp_recv+0x5ac>)
 801a27c:	9f04      	ldr	r7, [sp, #16]
 801a27e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a282:	f003 f9b1 	bl	801d5e8 <iprintf>
 801a286:	e69d      	b.n	8019fc4 <dhcp_recv+0x18>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801a288:	6830      	ldr	r0, [r6, #0]
 801a28a:	b110      	cbz	r0, 801a292 <dhcp_recv+0x2e6>
 801a28c:	6840      	ldr	r0, [r0, #4]
 801a28e:	7804      	ldrb	r4, [r0, #0]
 801a290:	e715      	b.n	801a0be <dhcp_recv+0x112>
    switch(op) {
 801a292:	2a3b      	cmp	r2, #59	; 0x3b
 801a294:	d8e8      	bhi.n	801a268 <dhcp_recv+0x2bc>
 801a296:	a001      	add	r0, pc, #4	; (adr r0, 801a29c <dhcp_recv+0x2f0>)
 801a298:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 801a29c:	0801a1af 	.word	0x0801a1af
 801a2a0:	0801a3fb 	.word	0x0801a3fb
 801a2a4:	0801a269 	.word	0x0801a269
 801a2a8:	0801a38d 	.word	0x0801a38d
 801a2ac:	0801a269 	.word	0x0801a269
 801a2b0:	0801a269 	.word	0x0801a269
 801a2b4:	0801a1c7 	.word	0x0801a1c7
 801a2b8:	0801a269 	.word	0x0801a269
 801a2bc:	0801a269 	.word	0x0801a269
 801a2c0:	0801a269 	.word	0x0801a269
 801a2c4:	0801a269 	.word	0x0801a269
 801a2c8:	0801a269 	.word	0x0801a269
 801a2cc:	0801a269 	.word	0x0801a269
 801a2d0:	0801a269 	.word	0x0801a269
 801a2d4:	0801a269 	.word	0x0801a269
 801a2d8:	0801a269 	.word	0x0801a269
 801a2dc:	0801a269 	.word	0x0801a269
 801a2e0:	0801a269 	.word	0x0801a269
 801a2e4:	0801a269 	.word	0x0801a269
 801a2e8:	0801a269 	.word	0x0801a269
 801a2ec:	0801a269 	.word	0x0801a269
 801a2f0:	0801a269 	.word	0x0801a269
 801a2f4:	0801a269 	.word	0x0801a269
 801a2f8:	0801a269 	.word	0x0801a269
 801a2fc:	0801a269 	.word	0x0801a269
 801a300:	0801a269 	.word	0x0801a269
 801a304:	0801a269 	.word	0x0801a269
 801a308:	0801a269 	.word	0x0801a269
 801a30c:	0801a269 	.word	0x0801a269
 801a310:	0801a269 	.word	0x0801a269
 801a314:	0801a269 	.word	0x0801a269
 801a318:	0801a269 	.word	0x0801a269
 801a31c:	0801a269 	.word	0x0801a269
 801a320:	0801a269 	.word	0x0801a269
 801a324:	0801a269 	.word	0x0801a269
 801a328:	0801a269 	.word	0x0801a269
 801a32c:	0801a269 	.word	0x0801a269
 801a330:	0801a269 	.word	0x0801a269
 801a334:	0801a269 	.word	0x0801a269
 801a338:	0801a269 	.word	0x0801a269
 801a33c:	0801a269 	.word	0x0801a269
 801a340:	0801a269 	.word	0x0801a269
 801a344:	0801a269 	.word	0x0801a269
 801a348:	0801a269 	.word	0x0801a269
 801a34c:	0801a269 	.word	0x0801a269
 801a350:	0801a269 	.word	0x0801a269
 801a354:	0801a269 	.word	0x0801a269
 801a358:	0801a269 	.word	0x0801a269
 801a35c:	0801a269 	.word	0x0801a269
 801a360:	0801a269 	.word	0x0801a269
 801a364:	0801a269 	.word	0x0801a269
 801a368:	0801a3e5 	.word	0x0801a3e5
 801a36c:	0801a3cf 	.word	0x0801a3cf
 801a370:	0801a1fd 	.word	0x0801a1fd
 801a374:	0801a3b9 	.word	0x0801a3b9
 801a378:	0801a269 	.word	0x0801a269
 801a37c:	0801a269 	.word	0x0801a269
 801a380:	0801a269 	.word	0x0801a269
 801a384:	0801a273 	.word	0x0801a273
 801a388:	0801a3a3 	.word	0x0801a3a3
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a38c:	4b70      	ldr	r3, [pc, #448]	; (801a550 <dhcp_recv+0x5a4>)
 801a38e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 801a392:	4972      	ldr	r1, [pc, #456]	; (801a55c <dhcp_recv+0x5b0>)
 801a394:	4870      	ldr	r0, [pc, #448]	; (801a558 <dhcp_recv+0x5ac>)
 801a396:	9f04      	ldr	r7, [sp, #16]
 801a398:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a39c:	f003 f924 	bl	801d5e8 <iprintf>
 801a3a0:	e610      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3a2:	4b6b      	ldr	r3, [pc, #428]	; (801a550 <dhcp_recv+0x5a4>)
 801a3a4:	f240 6229 	movw	r2, #1577	; 0x629
 801a3a8:	496a      	ldr	r1, [pc, #424]	; (801a554 <dhcp_recv+0x5a8>)
 801a3aa:	486b      	ldr	r0, [pc, #428]	; (801a558 <dhcp_recv+0x5ac>)
 801a3ac:	9f04      	ldr	r7, [sp, #16]
 801a3ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a3b2:	f003 f919 	bl	801d5e8 <iprintf>
 801a3b6:	e605      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3b8:	4b65      	ldr	r3, [pc, #404]	; (801a550 <dhcp_recv+0x5a4>)
 801a3ba:	f240 6221 	movw	r2, #1569	; 0x621
 801a3be:	4965      	ldr	r1, [pc, #404]	; (801a554 <dhcp_recv+0x5a8>)
 801a3c0:	4865      	ldr	r0, [pc, #404]	; (801a558 <dhcp_recv+0x5ac>)
 801a3c2:	9f04      	ldr	r7, [sp, #16]
 801a3c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a3c8:	f003 f90e 	bl	801d5e8 <iprintf>
 801a3cc:	e5fa      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a3ce:	4b60      	ldr	r3, [pc, #384]	; (801a550 <dhcp_recv+0x5a4>)
 801a3d0:	f240 6217 	movw	r2, #1559	; 0x617
 801a3d4:	4962      	ldr	r1, [pc, #392]	; (801a560 <dhcp_recv+0x5b4>)
 801a3d6:	4860      	ldr	r0, [pc, #384]	; (801a558 <dhcp_recv+0x5ac>)
 801a3d8:	9f04      	ldr	r7, [sp, #16]
 801a3da:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a3de:	f003 f903 	bl	801d5e8 <iprintf>
 801a3e2:	e5ef      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3e4:	4b5a      	ldr	r3, [pc, #360]	; (801a550 <dhcp_recv+0x5a4>)
 801a3e6:	f240 6209 	movw	r2, #1545	; 0x609
 801a3ea:	495a      	ldr	r1, [pc, #360]	; (801a554 <dhcp_recv+0x5a8>)
 801a3ec:	485a      	ldr	r0, [pc, #360]	; (801a558 <dhcp_recv+0x5ac>)
 801a3ee:	9f04      	ldr	r7, [sp, #16]
 801a3f0:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a3f4:	f003 f8f8 	bl	801d5e8 <iprintf>
 801a3f8:	e5e4      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3fa:	4b55      	ldr	r3, [pc, #340]	; (801a550 <dhcp_recv+0x5a4>)
 801a3fc:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801a400:	4954      	ldr	r1, [pc, #336]	; (801a554 <dhcp_recv+0x5a8>)
 801a402:	4855      	ldr	r0, [pc, #340]	; (801a558 <dhcp_recv+0x5ac>)
 801a404:	9f04      	ldr	r7, [sp, #16]
 801a406:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a40a:	f003 f8ed 	bl	801d5e8 <iprintf>
 801a40e:	e5d9      	b.n	8019fc4 <dhcp_recv+0x18>
 801a410:	f8dd a014 	ldr.w	sl, [sp, #20]
        } else if (decode_len == 4) {
 801a414:	d02f      	beq.n	801a476 <dhcp_recv+0x4ca>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a416:	2c01      	cmp	r4, #1
 801a418:	d143      	bne.n	801a4a2 <dhcp_recv+0x4f6>
          value = ((u8_t*)&value)[0];
 801a41a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
        dhcp_set_option_value(dhcp, decode_idx, value);
 801a41e:	4a51      	ldr	r2, [pc, #324]	; (801a564 <dhcp_recv+0x5b8>)
        dhcp_got_option(dhcp, decode_idx);
 801a420:	2301      	movs	r3, #1
        dhcp_set_option_value(dhcp, decode_idx, value);
 801a422:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
        dhcp_got_option(dhcp, decode_idx);
 801a426:	4a50      	ldr	r2, [pc, #320]	; (801a568 <dhcp_recv+0x5bc>)
 801a428:	55d3      	strb	r3, [r2, r7]
 801a42a:	e6a7      	b.n	801a17c <dhcp_recv+0x1d0>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a42c:	4b48      	ldr	r3, [pc, #288]	; (801a550 <dhcp_recv+0x5a4>)
 801a42e:	f240 623e 	movw	r2, #1598	; 0x63e
 801a432:	494e      	ldr	r1, [pc, #312]	; (801a56c <dhcp_recv+0x5c0>)
 801a434:	4848      	ldr	r0, [pc, #288]	; (801a558 <dhcp_recv+0x5ac>)
 801a436:	9f04      	ldr	r7, [sp, #16]
 801a438:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a43c:	f003 f8d4 	bl	801d5e8 <iprintf>
 801a440:	e5c0      	b.n	8019fc4 <dhcp_recv+0x18>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a442:	4b49      	ldr	r3, [pc, #292]	; (801a568 <dhcp_recv+0x5bc>)
 801a444:	781b      	ldrb	r3, [r3, #0]
 801a446:	b153      	cbz	r3, 801a45e <dhcp_recv+0x4b2>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a448:	4b46      	ldr	r3, [pc, #280]	; (801a564 <dhcp_recv+0x5b8>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a44a:	2200      	movs	r2, #0
 801a44c:	4946      	ldr	r1, [pc, #280]	; (801a568 <dhcp_recv+0x5bc>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a44e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a450:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a452:	2b01      	cmp	r3, #1
 801a454:	d015      	beq.n	801a482 <dhcp_recv+0x4d6>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a456:	2b02      	cmp	r3, #2
 801a458:	d004      	beq.n	801a464 <dhcp_recv+0x4b8>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a45a:	2b03      	cmp	r3, #3
 801a45c:	d00f      	beq.n	801a47e <dhcp_recv+0x4d2>
  } else if (parse_sname_as_options) {
 801a45e:	9b06      	ldr	r3, [sp, #24]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d04a      	beq.n	801a4fa <dhcp_recv+0x54e>
    parse_sname_as_options = 0;
 801a464:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a466:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    parse_sname_as_options = 0;
 801a46a:	9306      	str	r3, [sp, #24]
    options_idx = DHCP_SNAME_OFS;
 801a46c:	232c      	movs	r3, #44	; 0x2c
 801a46e:	9303      	str	r3, [sp, #12]
 801a470:	9b02      	ldr	r3, [sp, #8]
 801a472:	895b      	ldrh	r3, [r3, #10]
 801a474:	e5f6      	b.n	801a064 <dhcp_recv+0xb8>
          value = lwip_ntohl(value);
 801a476:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a478:	f7f8 fe40 	bl	80130fc <lwip_htonl>
 801a47c:	e7cf      	b.n	801a41e <dhcp_recv+0x472>
      parse_sname_as_options = 1;
 801a47e:	2301      	movs	r3, #1
 801a480:	9306      	str	r3, [sp, #24]
    options_idx = DHCP_FILE_OFS;
 801a482:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a484:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801a488:	9303      	str	r3, [sp, #12]
 801a48a:	e7f1      	b.n	801a470 <dhcp_recv+0x4c4>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a48c:	4b30      	ldr	r3, [pc, #192]	; (801a550 <dhcp_recv+0x5a4>)
 801a48e:	f240 6254 	movw	r2, #1620	; 0x654
 801a492:	4937      	ldr	r1, [pc, #220]	; (801a570 <dhcp_recv+0x5c4>)
 801a494:	4830      	ldr	r0, [pc, #192]	; (801a558 <dhcp_recv+0x5ac>)
 801a496:	9f04      	ldr	r7, [sp, #16]
 801a498:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a49c:	f003 f8a4 	bl	801d5e8 <iprintf>
 801a4a0:	e590      	b.n	8019fc4 <dhcp_recv+0x18>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a4a2:	4b2b      	ldr	r3, [pc, #172]	; (801a550 <dhcp_recv+0x5a4>)
 801a4a4:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 801a4a8:	4932      	ldr	r1, [pc, #200]	; (801a574 <dhcp_recv+0x5c8>)
 801a4aa:	482b      	ldr	r0, [pc, #172]	; (801a558 <dhcp_recv+0x5ac>)
 801a4ac:	9f04      	ldr	r7, [sp, #16]
 801a4ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a4b2:	f003 f899 	bl	801d5e8 <iprintf>
 801a4b6:	e585      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a4b8:	4b25      	ldr	r3, [pc, #148]	; (801a550 <dhcp_recv+0x5a4>)
 801a4ba:	f240 6219 	movw	r2, #1561	; 0x619
 801a4be:	492e      	ldr	r1, [pc, #184]	; (801a578 <dhcp_recv+0x5cc>)
 801a4c0:	4825      	ldr	r0, [pc, #148]	; (801a558 <dhcp_recv+0x5ac>)
 801a4c2:	9f04      	ldr	r7, [sp, #16]
 801a4c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a4c8:	f003 f88e 	bl	801d5e8 <iprintf>
 801a4cc:	e57a      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a4ce:	4b20      	ldr	r3, [pc, #128]	; (801a550 <dhcp_recv+0x5a4>)
 801a4d0:	f240 6204 	movw	r2, #1540	; 0x604
 801a4d4:	4921      	ldr	r1, [pc, #132]	; (801a55c <dhcp_recv+0x5b0>)
 801a4d6:	4820      	ldr	r0, [pc, #128]	; (801a558 <dhcp_recv+0x5ac>)
 801a4d8:	9f04      	ldr	r7, [sp, #16]
 801a4da:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a4de:	f003 f883 	bl	801d5e8 <iprintf>
 801a4e2:	e56f      	b.n	8019fc4 <dhcp_recv+0x18>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a4e4:	4b1a      	ldr	r3, [pc, #104]	; (801a550 <dhcp_recv+0x5a4>)
 801a4e6:	f240 6201 	movw	r2, #1537	; 0x601
 801a4ea:	4924      	ldr	r1, [pc, #144]	; (801a57c <dhcp_recv+0x5d0>)
 801a4ec:	481a      	ldr	r0, [pc, #104]	; (801a558 <dhcp_recv+0x5ac>)
 801a4ee:	9f04      	ldr	r7, [sp, #16]
 801a4f0:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a4f4:	f003 f878 	bl	801d5e8 <iprintf>
 801a4f8:	e564      	b.n	8019fc4 <dhcp_recv+0x18>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a4fa:	4b1b      	ldr	r3, [pc, #108]	; (801a568 <dhcp_recv+0x5bc>)
 801a4fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a500:	785b      	ldrb	r3, [r3, #1]
 801a502:	9f04      	ldr	r7, [sp, #16]
 801a504:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	f43f ad5b 	beq.w	8019fc4 <dhcp_recv+0x18>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a50e:	4a15      	ldr	r2, [pc, #84]	; (801a564 <dhcp_recv+0x5b8>)
 801a510:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801a512:	2b05      	cmp	r3, #5
 801a514:	d034      	beq.n	801a580 <dhcp_recv+0x5d4>
  else if ((msg_type == DHCP_NAK) &&
 801a516:	2b06      	cmp	r3, #6
 801a518:	d041      	beq.n	801a59e <dhcp_recv+0x5f2>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	f47f ad52 	bne.w	8019fc4 <dhcp_recv+0x18>
 801a520:	7a7b      	ldrb	r3, [r7, #9]
 801a522:	2b06      	cmp	r3, #6
 801a524:	f47f ad4e 	bne.w	8019fc4 <dhcp_recv+0x18>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a528:	4b0f      	ldr	r3, [pc, #60]	; (801a568 <dhcp_recv+0x5bc>)
    dhcp->request_timeout = 0;
 801a52a:	9906      	ldr	r1, [sp, #24]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a52c:	789b      	ldrb	r3, [r3, #2]
    dhcp->request_timeout = 0;
 801a52e:	82f9      	strh	r1, [r7, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a530:	2b00      	cmp	r3, #0
 801a532:	f43f ad47 	beq.w	8019fc4 <dhcp_recv+0x18>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a536:	f8da 4028 	ldr.w	r4, [sl, #40]	; 0x28
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a53a:	6890      	ldr	r0, [r2, #8]
 801a53c:	f7f8 fdde 	bl	80130fc <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a540:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a542:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 801a544:	4650      	mov	r0, sl
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801a546:	691b      	ldr	r3, [r3, #16]
 801a548:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 801a54a:	f7ff fb73 	bl	8019c34 <dhcp_select>
 801a54e:	e539      	b.n	8019fc4 <dhcp_recv+0x18>
 801a550:	080392c4 	.word	0x080392c4
 801a554:	0803966c 	.word	0x0803966c
 801a558:	08021804 	.word	0x08021804
 801a55c:	08039678 	.word	0x08039678
 801a560:	0803969c 	.word	0x0803969c
 801a564:	20033bb0 	.word	0x20033bb0
 801a568:	20033ba4 	.word	0x20033ba4
 801a56c:	080396c0 	.word	0x080396c0
 801a570:	080396ec 	.word	0x080396ec
 801a574:	080396d8 	.word	0x080396d8
 801a578:	080396a8 	.word	0x080396a8
 801a57c:	0803968c 	.word	0x0803968c
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a580:	7a7b      	ldrb	r3, [r7, #9]
 801a582:	2b01      	cmp	r3, #1
 801a584:	d026      	beq.n	801a5d4 <dhcp_recv+0x628>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a586:	3b03      	subs	r3, #3
 801a588:	2b02      	cmp	r3, #2
 801a58a:	f63f ad1b 	bhi.w	8019fc4 <dhcp_recv+0x18>
      dhcp_handle_ack(netif);
 801a58e:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801a592:	f7ff fcb9 	bl	8019f08 <dhcp_handle_ack.isra.8>
      dhcp_bind(netif);
 801a596:	4650      	mov	r0, sl
 801a598:	f7fe ffd8 	bl	801954c <dhcp_bind>
 801a59c:	e512      	b.n	8019fc4 <dhcp_recv+0x18>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a59e:	7a7b      	ldrb	r3, [r7, #9]
 801a5a0:	1eda      	subs	r2, r3, #3
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a5a2:	2a02      	cmp	r2, #2
 801a5a4:	d902      	bls.n	801a5ac <dhcp_recv+0x600>
 801a5a6:	2b01      	cmp	r3, #1
 801a5a8:	f47f ad0c 	bne.w	8019fc4 <dhcp_recv+0x18>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5ac:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801a5b0:	7a5a      	ldrb	r2, [r3, #9]
 801a5b2:	2a0c      	cmp	r2, #12
 801a5b4:	d004      	beq.n	801a5c0 <dhcp_recv+0x614>
    dhcp->tries = 0;
 801a5b6:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801a5b8:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801a5ba:	729a      	strb	r2, [r3, #10]
    dhcp->state = new_state;
 801a5bc:	7259      	strb	r1, [r3, #9]
    dhcp->request_timeout = 0;
 801a5be:	82da      	strh	r2, [r3, #22]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a5c0:	4b0a      	ldr	r3, [pc, #40]	; (801a5ec <dhcp_recv+0x640>)
 801a5c2:	4650      	mov	r0, sl
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	4619      	mov	r1, r3
 801a5c8:	f7f9 ffae 	bl	8014528 <netif_set_addr>
  dhcp_discover(netif);
 801a5cc:	4650      	mov	r0, sl
 801a5ce:	f7ff fa9f 	bl	8019b10 <dhcp_discover>
 801a5d2:	e4f7      	b.n	8019fc4 <dhcp_recv+0x18>
      dhcp_handle_ack(netif);
 801a5d4:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801a5d8:	f7ff fc96 	bl	8019f08 <dhcp_handle_ack.isra.8>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a5dc:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
        dhcp_check(netif);
 801a5e0:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a5e2:	071b      	lsls	r3, r3, #28
 801a5e4:	d5d8      	bpl.n	801a598 <dhcp_recv+0x5ec>
        dhcp_check(netif);
 801a5e6:	f7fe ff99 	bl	801951c <dhcp_check>
 801a5ea:	e4eb      	b.n	8019fc4 <dhcp_recv+0x18>
 801a5ec:	08039ac4 	.word	0x08039ac4

0801a5f0 <dhcp_network_changed>:
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (!dhcp)
 801a5f2:	b153      	cbz	r3, 801a60a <dhcp_network_changed+0x1a>
  switch (dhcp->state) {
 801a5f4:	7a5a      	ldrb	r2, [r3, #9]
 801a5f6:	2a0a      	cmp	r2, #10
 801a5f8:	d80c      	bhi.n	801a614 <dhcp_network_changed+0x24>
 801a5fa:	e8df f002 	tbb	[pc, r2]
 801a5fe:	0b06      	.short	0x0b06
 801a600:	0707070b 	.word	0x0707070b
 801a604:	0b0b0b0b 	.word	0x0b0b0b0b
 801a608:	07          	.byte	0x07
 801a609:	00          	.byte	0x00
}
 801a60a:	4770      	bx	lr
    dhcp->tries = 0;
 801a60c:	2200      	movs	r2, #0
 801a60e:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 801a610:	f7ff bbbc 	b.w	8019d8c <dhcp_reboot>
    dhcp->tries = 0;
 801a614:	2200      	movs	r2, #0
 801a616:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 801a618:	f7ff ba7a 	b.w	8019b10 <dhcp_discover>

0801a61c <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a61c:	b1f8      	cbz	r0, 801a65e <dhcp_arp_reply+0x42>
{
 801a61e:	b5f0      	push	{r4, r5, r6, r7, lr}
  dhcp = netif_dhcp_data(netif);
 801a620:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801a622:	b083      	sub	sp, #12
 801a624:	4605      	mov	r5, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a626:	b114      	cbz	r4, 801a62e <dhcp_arp_reply+0x12>
 801a628:	7a62      	ldrb	r2, [r4, #9]
 801a62a:	2a08      	cmp	r2, #8
 801a62c:	d001      	beq.n	801a632 <dhcp_arp_reply+0x16>
}
 801a62e:	b003      	add	sp, #12
 801a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a632:	6809      	ldr	r1, [r1, #0]
 801a634:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a636:	4291      	cmp	r1, r2
 801a638:	d1f9      	bne.n	801a62e <dhcp_arp_reply+0x12>
    dhcp->state = new_state;
 801a63a:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801a63c:	2300      	movs	r3, #0
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a63e:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801a640:	7261      	strb	r1, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a642:	4621      	mov	r1, r4
    dhcp->tries = 0;
 801a644:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801a646:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801a648:	f7ff f8a8 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 801a64c:	b170      	cbz	r0, 801a66c <dhcp_arp_reply+0x50>
  if (dhcp->tries < 255) {
 801a64e:	7aa3      	ldrb	r3, [r4, #10]
 801a650:	2bff      	cmp	r3, #255	; 0xff
 801a652:	d001      	beq.n	801a658 <dhcp_arp_reply+0x3c>
    dhcp->tries++;
 801a654:	3301      	adds	r3, #1
 801a656:	72a3      	strb	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a658:	2314      	movs	r3, #20
 801a65a:	82e3      	strh	r3, [r4, #22]
 801a65c:	e7e7      	b.n	801a62e <dhcp_arp_reply+0x12>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a65e:	4b18      	ldr	r3, [pc, #96]	; (801a6c0 <dhcp_arp_reply+0xa4>)
 801a660:	f240 327b 	movw	r2, #891	; 0x37b
 801a664:	4917      	ldr	r1, [pc, #92]	; (801a6c4 <dhcp_arp_reply+0xa8>)
 801a666:	4818      	ldr	r0, [pc, #96]	; (801a6c8 <dhcp_arp_reply+0xac>)
 801a668:	f002 bfbe 	b.w	801d5e8 <iprintf>
 801a66c:	f104 0610 	add.w	r6, r4, #16
 801a670:	f104 0714 	add.w	r7, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801a674:	2304      	movs	r3, #4
 801a676:	2232      	movs	r2, #50	; 0x32
 801a678:	4639      	mov	r1, r7
 801a67a:	4630      	mov	r0, r6
 801a67c:	f7ff f86a 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a680:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a682:	f7f8 fd3b 	bl	80130fc <lwip_htonl>
 801a686:	4639      	mov	r1, r7
 801a688:	4602      	mov	r2, r0
 801a68a:	4630      	mov	r0, r6
 801a68c:	f7ff f9da 	bl	8019a44 <dhcp_option_long.isra.4>
    dhcp_option_trailer(dhcp);
 801a690:	4620      	mov	r0, r4
 801a692:	f7ff f991 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a696:	8aa1      	ldrh	r1, [r4, #20]
 801a698:	68e0      	ldr	r0, [r4, #12]
 801a69a:	31f0      	adds	r1, #240	; 0xf0
 801a69c:	b289      	uxth	r1, r1
 801a69e:	f7fa fa4d 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801a6a2:	4a0a      	ldr	r2, [pc, #40]	; (801a6cc <dhcp_arp_reply+0xb0>)
 801a6a4:	68e1      	ldr	r1, [r4, #12]
 801a6a6:	2343      	movs	r3, #67	; 0x43
 801a6a8:	6810      	ldr	r0, [r2, #0]
 801a6aa:	4a09      	ldr	r2, [pc, #36]	; (801a6d0 <dhcp_arp_reply+0xb4>)
 801a6ac:	e9cd 5200 	strd	r5, r2, [sp]
 801a6b0:	4a08      	ldr	r2, [pc, #32]	; (801a6d4 <dhcp_arp_reply+0xb8>)
 801a6b2:	f7fe fdff 	bl	80192b4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f7ff f9f4 	bl	8019aa4 <dhcp_delete_msg>
 801a6bc:	e7c7      	b.n	801a64e <dhcp_arp_reply+0x32>
 801a6be:	bf00      	nop
 801a6c0:	080392c4 	.word	0x080392c4
 801a6c4:	080217f4 	.word	0x080217f4
 801a6c8:	08021804 	.word	0x08021804
 801a6cc:	200214ac 	.word	0x200214ac
 801a6d0:	08039ac4 	.word	0x08039ac4
 801a6d4:	08039ac8 	.word	0x08039ac8

0801a6d8 <dhcp_renew>:
{
 801a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a6dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801a6de:	b083      	sub	sp, #12
 801a6e0:	4606      	mov	r6, r0
  if (new_state != dhcp->state) {
 801a6e2:	7a63      	ldrb	r3, [r4, #9]
 801a6e4:	2b05      	cmp	r3, #5
 801a6e6:	d004      	beq.n	801a6f2 <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801a6e8:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801a6ea:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801a6ec:	72a3      	strb	r3, [r4, #10]
    dhcp->state = new_state;
 801a6ee:	7262      	strb	r2, [r4, #9]
    dhcp->request_timeout = 0;
 801a6f0:	82e3      	strh	r3, [r4, #22]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801a6f2:	2203      	movs	r2, #3
 801a6f4:	4621      	mov	r1, r4
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	f7ff f850 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 801a6fc:	4607      	mov	r7, r0
 801a6fe:	b1f0      	cbz	r0, 801a73e <dhcp_renew+0x66>
  if (dhcp->tries < 255) {
 801a700:	7aa3      	ldrb	r3, [r4, #10]
 801a702:	2bff      	cmp	r3, #255	; 0xff
 801a704:	d015      	beq.n	801a732 <dhcp_renew+0x5a>
    dhcp->tries++;
 801a706:	3301      	adds	r3, #1
 801a708:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801a70a:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801a70c:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801a70e:	d810      	bhi.n	801a732 <dhcp_renew+0x5a>
 801a710:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801a714:	4a30      	ldr	r2, [pc, #192]	; (801a7d8 <dhcp_renew+0x100>)
}
 801a716:	4638      	mov	r0, r7
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801a718:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a71c:	011b      	lsls	r3, r3, #4
 801a71e:	b29b      	uxth	r3, r3
 801a720:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a724:	fba2 2303 	umull	r2, r3, r2, r3
 801a728:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a72a:	82e3      	strh	r3, [r4, #22]
}
 801a72c:	b003      	add	sp, #12
 801a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a732:	2328      	movs	r3, #40	; 0x28
}
 801a734:	4638      	mov	r0, r7
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a736:	82e3      	strh	r3, [r4, #22]
}
 801a738:	b003      	add	sp, #12
 801a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a73e:	f104 0a10 	add.w	sl, r4, #16
 801a742:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a746:	2302      	movs	r3, #2
 801a748:	2239      	movs	r2, #57	; 0x39
 801a74a:	4650      	mov	r0, sl
 801a74c:	4659      	mov	r1, fp
 801a74e:	f7ff f801 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801a752:	4659      	mov	r1, fp
 801a754:	4650      	mov	r0, sl
 801a756:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
 801a758:	f7fe ffd8 	bl	801970c <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a75c:	4659      	mov	r1, fp
 801a75e:	4650      	mov	r0, sl
 801a760:	2304      	movs	r3, #4
 801a762:	2237      	movs	r2, #55	; 0x37
 801a764:	4d1d      	ldr	r5, [pc, #116]	; (801a7dc <dhcp_renew+0x104>)
 801a766:	f7fe fff5 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a76a:	8aa3      	ldrh	r3, [r4, #20]
 801a76c:	f105 0903 	add.w	r9, r5, #3
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a770:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a774:	2b43      	cmp	r3, #67	; 0x43
 801a776:	f8df b070 	ldr.w	fp, [pc, #112]	; 801a7e8 <dhcp_renew+0x110>
 801a77a:	f8df a070 	ldr.w	sl, [pc, #112]	; 801a7ec <dhcp_renew+0x114>
 801a77e:	d80c      	bhi.n	801a79a <dhcp_renew+0xc2>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a780:	6922      	ldr	r2, [r4, #16]
 801a782:	1c59      	adds	r1, r3, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a784:	45a9      	cmp	r9, r5
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a786:	4413      	add	r3, r2
 801a788:	82a1      	strh	r1, [r4, #20]
 801a78a:	f883 80f0 	strb.w	r8, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a78e:	d00d      	beq.n	801a7ac <dhcp_renew+0xd4>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a790:	8aa3      	ldrh	r3, [r4, #20]
 801a792:	f815 8b01 	ldrb.w	r8, [r5], #1
 801a796:	2b43      	cmp	r3, #67	; 0x43
 801a798:	d9f2      	bls.n	801a780 <dhcp_renew+0xa8>
 801a79a:	465b      	mov	r3, fp
 801a79c:	f240 527b 	movw	r2, #1403	; 0x57b
 801a7a0:	4651      	mov	r1, sl
 801a7a2:	480f      	ldr	r0, [pc, #60]	; (801a7e0 <dhcp_renew+0x108>)
 801a7a4:	f002 ff20 	bl	801d5e8 <iprintf>
 801a7a8:	8aa3      	ldrh	r3, [r4, #20]
 801a7aa:	e7e9      	b.n	801a780 <dhcp_renew+0xa8>
    dhcp_option_trailer(dhcp);
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	f7ff f903 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a7b2:	8aa1      	ldrh	r1, [r4, #20]
 801a7b4:	68e0      	ldr	r0, [r4, #12]
 801a7b6:	31f0      	adds	r1, #240	; 0xf0
 801a7b8:	b289      	uxth	r1, r1
 801a7ba:	f7fa f9bf 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801a7be:	4a09      	ldr	r2, [pc, #36]	; (801a7e4 <dhcp_renew+0x10c>)
 801a7c0:	68e1      	ldr	r1, [r4, #12]
 801a7c2:	2343      	movs	r3, #67	; 0x43
 801a7c4:	6810      	ldr	r0, [r2, #0]
 801a7c6:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801a7ca:	9600      	str	r6, [sp, #0]
 801a7cc:	f7fe fde8 	bl	80193a0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	f7ff f967 	bl	8019aa4 <dhcp_delete_msg>
 801a7d6:	e793      	b.n	801a700 <dhcp_renew+0x28>
 801a7d8:	10624dd3 	.word	0x10624dd3
 801a7dc:	080394d1 	.word	0x080394d1
 801a7e0:	08021804 	.word	0x08021804
 801a7e4:	200214ac 	.word	0x200214ac
 801a7e8:	080392c4 	.word	0x080392c4
 801a7ec:	08039400 	.word	0x08039400

0801a7f0 <dhcp_release>:
{
 801a7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801a7f6:	b085      	sub	sp, #20
  if (dhcp == NULL) {
 801a7f8:	2c00      	cmp	r4, #0
 801a7fa:	d058      	beq.n	801a8ae <dhcp_release+0xbe>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a7fc:	7a63      	ldrb	r3, [r4, #9]
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a7fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a800:	1f1a      	subs	r2, r3, #4
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a802:	9103      	str	r1, [sp, #12]
 801a804:	2b0a      	cmp	r3, #10
 801a806:	bf18      	it	ne
 801a808:	2a01      	cmpne	r2, #1
 801a80a:	bf94      	ite	ls
 801a80c:	2501      	movls	r5, #1
 801a80e:	2500      	movhi	r5, #0
  if (new_state != dhcp->state) {
 801a810:	b973      	cbnz	r3, 801a830 <dhcp_release+0x40>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801a812:	2300      	movs	r3, #0
 801a814:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801a818:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a81c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801a820:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801a824:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 801a826:	b945      	cbnz	r5, 801a83a <dhcp_release+0x4a>
}
 801a828:	4628      	mov	r0, r5
 801a82a:	b005      	add	sp, #20
 801a82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dhcp->state = new_state;
 801a830:	2300      	movs	r3, #0
 801a832:	7263      	strb	r3, [r4, #9]
    dhcp->tries = 0;
 801a834:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801a836:	82e3      	strh	r3, [r4, #22]
 801a838:	e7eb      	b.n	801a812 <dhcp_release+0x22>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801a83a:	2207      	movs	r2, #7
 801a83c:	4621      	mov	r1, r4
 801a83e:	4606      	mov	r6, r0
 801a840:	f7fe ffac 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 801a844:	4605      	mov	r5, r0
 801a846:	b148      	cbz	r0, 801a85c <dhcp_release+0x6c>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a848:	4b1a      	ldr	r3, [pc, #104]	; (801a8b4 <dhcp_release+0xc4>)
 801a84a:	4630      	mov	r0, r6
 801a84c:	461a      	mov	r2, r3
 801a84e:	4619      	mov	r1, r3
 801a850:	f7f9 fe6a 	bl	8014528 <netif_set_addr>
}
 801a854:	4628      	mov	r0, r5
 801a856:	b005      	add	sp, #20
 801a858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a85c:	f104 0810 	add.w	r8, r4, #16
 801a860:	f104 0914 	add.w	r9, r4, #20
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801a864:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801a866:	2304      	movs	r3, #4
 801a868:	4649      	mov	r1, r9
 801a86a:	2236      	movs	r2, #54	; 0x36
 801a86c:	4640      	mov	r0, r8
 801a86e:	f7fe ff71 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801a872:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 801a876:	f7f8 fc41 	bl	80130fc <lwip_htonl>
 801a87a:	4649      	mov	r1, r9
 801a87c:	4602      	mov	r2, r0
 801a87e:	4640      	mov	r0, r8
 801a880:	f7ff f8e0 	bl	8019a44 <dhcp_option_long.isra.4>
    dhcp_option_trailer(dhcp);
 801a884:	4620      	mov	r0, r4
 801a886:	f7ff f897 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801a88a:	8aa1      	ldrh	r1, [r4, #20]
 801a88c:	68e0      	ldr	r0, [r4, #12]
 801a88e:	31f0      	adds	r1, #240	; 0xf0
 801a890:	b289      	uxth	r1, r1
 801a892:	f7fa f953 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801a896:	4b08      	ldr	r3, [pc, #32]	; (801a8b8 <dhcp_release+0xc8>)
 801a898:	68e1      	ldr	r1, [r4, #12]
 801a89a:	463a      	mov	r2, r7
 801a89c:	6818      	ldr	r0, [r3, #0]
 801a89e:	2343      	movs	r3, #67	; 0x43
 801a8a0:	9600      	str	r6, [sp, #0]
 801a8a2:	f7fe fd7d 	bl	80193a0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f7ff f8fc 	bl	8019aa4 <dhcp_delete_msg>
 801a8ac:	e7cc      	b.n	801a848 <dhcp_release+0x58>
    return ERR_ARG;
 801a8ae:	f06f 050f 	mvn.w	r5, #15
 801a8b2:	e7b9      	b.n	801a828 <dhcp_release+0x38>
 801a8b4:	08039ac4 	.word	0x08039ac4
 801a8b8:	200214ac 	.word	0x200214ac

0801a8bc <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 801a8bc:	4b60      	ldr	r3, [pc, #384]	; (801aa40 <dhcp_coarse_tmr+0x184>)
{
 801a8be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = netif_list;
 801a8c2:	681d      	ldr	r5, [r3, #0]
{
 801a8c4:	b085      	sub	sp, #20
  while (netif != NULL) {
 801a8c6:	b1f5      	cbz	r5, 801a906 <dhcp_coarse_tmr+0x4a>
 801a8c8:	4e5e      	ldr	r6, [pc, #376]	; (801aa44 <dhcp_coarse_tmr+0x188>)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a8ca:	f8df 818c 	ldr.w	r8, [pc, #396]	; 801aa58 <dhcp_coarse_tmr+0x19c>
 801a8ce:	4f5e      	ldr	r7, [pc, #376]	; (801aa48 <dhcp_coarse_tmr+0x18c>)
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a8d0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a8d2:	b1ac      	cbz	r4, 801a900 <dhcp_coarse_tmr+0x44>
 801a8d4:	7a63      	ldrb	r3, [r4, #9]
 801a8d6:	b19b      	cbz	r3, 801a900 <dhcp_coarse_tmr+0x44>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a8d8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 801a8da:	b129      	cbz	r1, 801a8e8 <dhcp_coarse_tmr+0x2c>
 801a8dc:	8c22      	ldrh	r2, [r4, #32]
 801a8de:	3201      	adds	r2, #1
 801a8e0:	b292      	uxth	r2, r2
 801a8e2:	4291      	cmp	r1, r2
 801a8e4:	8422      	strh	r2, [r4, #32]
 801a8e6:	d011      	beq.n	801a90c <dhcp_coarse_tmr+0x50>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a8e8:	8be2      	ldrh	r2, [r4, #30]
 801a8ea:	b11a      	cbz	r2, 801a8f4 <dhcp_coarse_tmr+0x38>
 801a8ec:	1e51      	subs	r1, r2, #1
 801a8ee:	2a01      	cmp	r2, #1
 801a8f0:	83e1      	strh	r1, [r4, #30]
 801a8f2:	d012      	beq.n	801a91a <dhcp_coarse_tmr+0x5e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a8f4:	8ba2      	ldrh	r2, [r4, #28]
 801a8f6:	b11a      	cbz	r2, 801a900 <dhcp_coarse_tmr+0x44>
 801a8f8:	1e51      	subs	r1, r2, #1
 801a8fa:	2a01      	cmp	r2, #1
 801a8fc:	83a1      	strh	r1, [r4, #28]
 801a8fe:	d03f      	beq.n	801a980 <dhcp_coarse_tmr+0xc4>
    netif = netif->next;
 801a900:	682d      	ldr	r5, [r5, #0]
  while (netif != NULL) {
 801a902:	2d00      	cmp	r5, #0
 801a904:	d1e4      	bne.n	801a8d0 <dhcp_coarse_tmr+0x14>
}
 801a906:	b005      	add	sp, #20
 801a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release(netif);
 801a90c:	4628      	mov	r0, r5
 801a90e:	f7ff ff6f 	bl	801a7f0 <dhcp_release>
        dhcp_discover(netif);
 801a912:	4628      	mov	r0, r5
 801a914:	f7ff f8fc 	bl	8019b10 <dhcp_discover>
 801a918:	e7f2      	b.n	801a900 <dhcp_coarse_tmr+0x44>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a91a:	1e5a      	subs	r2, r3, #1
 801a91c:	b2d1      	uxtb	r1, r2
 801a91e:	2909      	cmp	r1, #9
 801a920:	d8ee      	bhi.n	801a900 <dhcp_coarse_tmr+0x44>
 801a922:	f240 2219 	movw	r2, #537	; 0x219
 801a926:	40ca      	lsrs	r2, r1
 801a928:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a92a:	f012 0201 	ands.w	r2, r2, #1
 801a92e:	d1e7      	bne.n	801a900 <dhcp_coarse_tmr+0x44>
  if (new_state != dhcp->state) {
 801a930:	2b04      	cmp	r3, #4
 801a932:	d003      	beq.n	801a93c <dhcp_coarse_tmr+0x80>
    dhcp->state = new_state;
 801a934:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801a936:	72a2      	strb	r2, [r4, #10]
    dhcp->request_timeout = 0;
 801a938:	82e2      	strh	r2, [r4, #22]
    dhcp->state = new_state;
 801a93a:	7263      	strb	r3, [r4, #9]
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801a93c:	2203      	movs	r2, #3
 801a93e:	4621      	mov	r1, r4
 801a940:	4628      	mov	r0, r5
 801a942:	f7fe ff2b 	bl	801979c <dhcp_create_msg>
  if (result == ERR_OK) {
 801a946:	b370      	cbz	r0, 801a9a6 <dhcp_coarse_tmr+0xea>
  if (dhcp->tries < 255) {
 801a948:	7aa3      	ldrb	r3, [r4, #10]
 801a94a:	2bff      	cmp	r3, #255	; 0xff
 801a94c:	d029      	beq.n	801a9a2 <dhcp_coarse_tmr+0xe6>
    dhcp->tries++;
 801a94e:	3301      	adds	r3, #1
 801a950:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801a952:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801a954:	72a3      	strb	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801a956:	d824      	bhi.n	801a9a2 <dhcp_coarse_tmr+0xe6>
 801a958:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801a95c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a960:	00db      	lsls	r3, r3, #3
 801a962:	b29b      	uxth	r3, r3
 801a964:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a968:	fba6 2303 	umull	r2, r3, r6, r3
 801a96c:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801a96e:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801a970:	8c21      	ldrh	r1, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801a972:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801a974:	1a53      	subs	r3, r2, r1
 801a976:	2b01      	cmp	r3, #1
 801a978:	ddc2      	ble.n	801a900 <dhcp_coarse_tmr+0x44>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a97a:	105b      	asrs	r3, r3, #1
 801a97c:	83e3      	strh	r3, [r4, #30]
 801a97e:	e7bf      	b.n	801a900 <dhcp_coarse_tmr+0x44>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a980:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801a984:	2a01      	cmp	r2, #1
 801a986:	d001      	beq.n	801a98c <dhcp_coarse_tmr+0xd0>
 801a988:	2b0a      	cmp	r3, #10
 801a98a:	d1b9      	bne.n	801a900 <dhcp_coarse_tmr+0x44>
    dhcp_renew(netif);
 801a98c:	4628      	mov	r0, r5
 801a98e:	f7ff fea3 	bl	801a6d8 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801a992:	8b63      	ldrh	r3, [r4, #26]
 801a994:	8c22      	ldrh	r2, [r4, #32]
 801a996:	1a9b      	subs	r3, r3, r2
 801a998:	2b01      	cmp	r3, #1
 801a99a:	ddb1      	ble.n	801a900 <dhcp_coarse_tmr+0x44>
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a99c:	105b      	asrs	r3, r3, #1
 801a99e:	83a3      	strh	r3, [r4, #28]
 801a9a0:	e7ae      	b.n	801a900 <dhcp_coarse_tmr+0x44>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a9a2:	2314      	movs	r3, #20
 801a9a4:	e7e3      	b.n	801a96e <dhcp_coarse_tmr+0xb2>
 801a9a6:	f104 0a10 	add.w	sl, r4, #16
 801a9aa:	f104 0b14 	add.w	fp, r4, #20
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a9ae:	2302      	movs	r3, #2
 801a9b0:	2239      	movs	r2, #57	; 0x39
 801a9b2:	4650      	mov	r0, sl
 801a9b4:	4659      	mov	r1, fp
 801a9b6:	f7fe fecd 	bl	8019754 <dhcp_option.isra.1>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801a9ba:	4659      	mov	r1, fp
 801a9bc:	4650      	mov	r0, sl
 801a9be:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
 801a9c0:	f8cd b00c 	str.w	fp, [sp, #12]
 801a9c4:	f7fe fea2 	bl	801970c <dhcp_option_short.isra.0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a9c8:	4650      	mov	r0, sl
 801a9ca:	2304      	movs	r3, #4
 801a9cc:	9903      	ldr	r1, [sp, #12]
 801a9ce:	2237      	movs	r2, #55	; 0x37
 801a9d0:	f7fe fec0 	bl	8019754 <dhcp_option.isra.1>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a9d4:	8aa3      	ldrh	r3, [r4, #20]
 801a9d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 801aa5c <dhcp_coarse_tmr+0x1a0>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a9da:	f04f 0b01 	mov.w	fp, #1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a9de:	2b43      	cmp	r3, #67	; 0x43
 801a9e0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 801aa60 <dhcp_coarse_tmr+0x1a4>
 801a9e4:	d80d      	bhi.n	801aa02 <dhcp_coarse_tmr+0x146>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801a9e6:	6922      	ldr	r2, [r4, #16]
 801a9e8:	1c59      	adds	r1, r3, #1
 801a9ea:	4413      	add	r3, r2
 801a9ec:	82a1      	strh	r1, [r4, #20]
 801a9ee:	f883 b0f0 	strb.w	fp, [r3, #240]	; 0xf0
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a9f2:	4b16      	ldr	r3, [pc, #88]	; (801aa4c <dhcp_coarse_tmr+0x190>)
 801a9f4:	4599      	cmp	r9, r3
 801a9f6:	d00d      	beq.n	801aa14 <dhcp_coarse_tmr+0x158>
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801a9f8:	8aa3      	ldrh	r3, [r4, #20]
 801a9fa:	f819 bb01 	ldrb.w	fp, [r9], #1
 801a9fe:	2b43      	cmp	r3, #67	; 0x43
 801aa00:	d9f1      	bls.n	801a9e6 <dhcp_coarse_tmr+0x12a>
 801aa02:	4643      	mov	r3, r8
 801aa04:	f240 527b 	movw	r2, #1403	; 0x57b
 801aa08:	4639      	mov	r1, r7
 801aa0a:	4650      	mov	r0, sl
 801aa0c:	f002 fdec 	bl	801d5e8 <iprintf>
 801aa10:	8aa3      	ldrh	r3, [r4, #20]
 801aa12:	e7e8      	b.n	801a9e6 <dhcp_coarse_tmr+0x12a>
    dhcp_option_trailer(dhcp);
 801aa14:	4620      	mov	r0, r4
 801aa16:	f7fe ffcf 	bl	80199b8 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801aa1a:	8aa1      	ldrh	r1, [r4, #20]
 801aa1c:	68e0      	ldr	r0, [r4, #12]
 801aa1e:	31f0      	adds	r1, #240	; 0xf0
 801aa20:	b289      	uxth	r1, r1
 801aa22:	f7fa f88b 	bl	8014b3c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801aa26:	4a0a      	ldr	r2, [pc, #40]	; (801aa50 <dhcp_coarse_tmr+0x194>)
 801aa28:	68e1      	ldr	r1, [r4, #12]
 801aa2a:	2343      	movs	r3, #67	; 0x43
 801aa2c:	6810      	ldr	r0, [r2, #0]
 801aa2e:	9500      	str	r5, [sp, #0]
 801aa30:	4a08      	ldr	r2, [pc, #32]	; (801aa54 <dhcp_coarse_tmr+0x198>)
 801aa32:	f7fe fcb5 	bl	80193a0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801aa36:	4620      	mov	r0, r4
 801aa38:	f7ff f834 	bl	8019aa4 <dhcp_delete_msg>
 801aa3c:	e784      	b.n	801a948 <dhcp_coarse_tmr+0x8c>
 801aa3e:	bf00      	nop
 801aa40:	20033a70 	.word	0x20033a70
 801aa44:	10624dd3 	.word	0x10624dd3
 801aa48:	08039400 	.word	0x08039400
 801aa4c:	080394d4 	.word	0x080394d4
 801aa50:	200214ac 	.word	0x200214ac
 801aa54:	08039ac8 	.word	0x08039ac8
 801aa58:	080392c4 	.word	0x080392c4
 801aa5c:	080394d1 	.word	0x080394d1
 801aa60:	08021804 	.word	0x08021804

0801aa64 <dhcp_fine_tmr>:
{
 801aa64:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 801aa66:	4b1f      	ldr	r3, [pc, #124]	; (801aae4 <dhcp_fine_tmr+0x80>)
 801aa68:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 801aa6a:	b1fc      	cbz	r4, 801aaac <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801aa6c:	2500      	movs	r5, #0
 801aa6e:	e003      	b.n	801aa78 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801aa70:	3a01      	subs	r2, #1
 801aa72:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 801aa74:	6824      	ldr	r4, [r4, #0]
  while (netif != NULL) {
 801aa76:	b1cc      	cbz	r4, 801aaac <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801aa78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d0fa      	beq.n	801aa74 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801aa7e:	8ada      	ldrh	r2, [r3, #22]
 801aa80:	2a01      	cmp	r2, #1
 801aa82:	d8f5      	bhi.n	801aa70 <dhcp_fine_tmr+0xc>
      else if (dhcp->request_timeout == 1) {
 801aa84:	d1f6      	bne.n	801aa74 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801aa86:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 801aa88:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801aa8a:	2a0c      	cmp	r2, #12
 801aa8c:	d018      	beq.n	801aac0 <dhcp_fine_tmr+0x5c>
 801aa8e:	2a06      	cmp	r2, #6
 801aa90:	d016      	beq.n	801aac0 <dhcp_fine_tmr+0x5c>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801aa92:	2a01      	cmp	r2, #1
 801aa94:	d00b      	beq.n	801aaae <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801aa96:	2a08      	cmp	r2, #8
 801aa98:	d016      	beq.n	801aac8 <dhcp_fine_tmr+0x64>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801aa9a:	2a03      	cmp	r2, #3
 801aa9c:	d1ea      	bne.n	801aa74 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801aa9e:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 801aaa0:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801aaa2:	2b01      	cmp	r3, #1
 801aaa4:	d91a      	bls.n	801aadc <dhcp_fine_tmr+0x78>
      dhcp_discover(netif);
 801aaa6:	f7ff f833 	bl	8019b10 <dhcp_discover>
 801aaaa:	e7e3      	b.n	801aa74 <dhcp_fine_tmr+0x10>
}
 801aaac:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 5) {
 801aaae:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 801aab0:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801aab2:	2b05      	cmp	r3, #5
 801aab4:	d802      	bhi.n	801aabc <dhcp_fine_tmr+0x58>
      dhcp_select(netif);
 801aab6:	f7ff f8bd 	bl	8019c34 <dhcp_select>
 801aaba:	e7db      	b.n	801aa74 <dhcp_fine_tmr+0x10>
      dhcp_release(netif);
 801aabc:	f7ff fe98 	bl	801a7f0 <dhcp_release>
      dhcp_discover(netif);
 801aac0:	4620      	mov	r0, r4
 801aac2:	f7ff f825 	bl	8019b10 <dhcp_discover>
 801aac6:	e7d5      	b.n	801aa74 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 1) {
 801aac8:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 801aaca:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801aacc:	2b01      	cmp	r3, #1
 801aace:	d902      	bls.n	801aad6 <dhcp_fine_tmr+0x72>
      dhcp_bind(netif);
 801aad0:	f7fe fd3c 	bl	801954c <dhcp_bind>
 801aad4:	e7ce      	b.n	801aa74 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801aad6:	f7fe fd21 	bl	801951c <dhcp_check>
 801aada:	e7cb      	b.n	801aa74 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801aadc:	f7ff f956 	bl	8019d8c <dhcp_reboot>
 801aae0:	e7c8      	b.n	801aa74 <dhcp_fine_tmr+0x10>
 801aae2:	bf00      	nop
 801aae4:	20033a70 	.word	0x20033a70

0801aae8 <dhcp_stop>:
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801aae8:	b1c8      	cbz	r0, 801ab1e <dhcp_stop+0x36>
{
 801aaea:	b510      	push	{r4, lr}
  dhcp = netif_dhcp_data(netif);
 801aaec:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (dhcp != NULL) {
 801aaee:	b184      	cbz	r4, 801ab12 <dhcp_stop+0x2a>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801aaf0:	6863      	ldr	r3, [r4, #4]
 801aaf2:	b133      	cbz	r3, 801ab02 <dhcp_stop+0x1a>
 801aaf4:	4b0d      	ldr	r3, [pc, #52]	; (801ab2c <dhcp_stop+0x44>)
 801aaf6:	f240 524f 	movw	r2, #1359	; 0x54f
 801aafa:	490d      	ldr	r1, [pc, #52]	; (801ab30 <dhcp_stop+0x48>)
 801aafc:	480d      	ldr	r0, [pc, #52]	; (801ab34 <dhcp_stop+0x4c>)
 801aafe:	f002 fd73 	bl	801d5e8 <iprintf>
  if (new_state != dhcp->state) {
 801ab02:	7a63      	ldrb	r3, [r4, #9]
 801ab04:	b11b      	cbz	r3, 801ab0e <dhcp_stop+0x26>
    dhcp->state = new_state;
 801ab06:	2300      	movs	r3, #0
 801ab08:	7263      	strb	r3, [r4, #9]
    dhcp->tries = 0;
 801ab0a:	72a3      	strb	r3, [r4, #10]
    dhcp->request_timeout = 0;
 801ab0c:	82e3      	strh	r3, [r4, #22]
    if (dhcp->pcb_allocated != 0) {
 801ab0e:	7a23      	ldrb	r3, [r4, #8]
 801ab10:	b903      	cbnz	r3, 801ab14 <dhcp_stop+0x2c>
}
 801ab12:	bd10      	pop	{r4, pc}
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ab14:	f7ff f9d6 	bl	8019ec4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801ab18:	2300      	movs	r3, #0
 801ab1a:	7223      	strb	r3, [r4, #8]
}
 801ab1c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801ab1e:	4b03      	ldr	r3, [pc, #12]	; (801ab2c <dhcp_stop+0x44>)
 801ab20:	f240 5242 	movw	r2, #1346	; 0x542
 801ab24:	4904      	ldr	r1, [pc, #16]	; (801ab38 <dhcp_stop+0x50>)
 801ab26:	4803      	ldr	r0, [pc, #12]	; (801ab34 <dhcp_stop+0x4c>)
 801ab28:	f002 bd5e 	b.w	801d5e8 <iprintf>
 801ab2c:	080392c4 	.word	0x080392c4
 801ab30:	08039658 	.word	0x08039658
 801ab34:	08021804 	.word	0x08021804
 801ab38:	08039770 	.word	0x08039770

0801ab3c <dhcp_start>:
{
 801ab3c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ab3e:	2800      	cmp	r0, #0
 801ab40:	d047      	beq.n	801abd2 <dhcp_start+0x96>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ab42:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 801ab46:	4605      	mov	r5, r0
 801ab48:	07db      	lsls	r3, r3, #31
 801ab4a:	d538      	bpl.n	801abbe <dhcp_start+0x82>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ab4c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  dhcp = netif_dhcp_data(netif);
 801ab4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801ab50:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801ab54:	d330      	bcc.n	801abb8 <dhcp_start+0x7c>
  if (dhcp == NULL) {
 801ab56:	b32c      	cbz	r4, 801aba4 <dhcp_start+0x68>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801ab58:	68e3      	ldr	r3, [r4, #12]
 801ab5a:	b133      	cbz	r3, 801ab6a <dhcp_start+0x2e>
 801ab5c:	4b22      	ldr	r3, [pc, #136]	; (801abe8 <dhcp_start+0xac>)
 801ab5e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 801ab62:	4922      	ldr	r1, [pc, #136]	; (801abec <dhcp_start+0xb0>)
 801ab64:	4822      	ldr	r0, [pc, #136]	; (801abf0 <dhcp_start+0xb4>)
 801ab66:	f002 fd3f 	bl	801d5e8 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801ab6a:	6863      	ldr	r3, [r4, #4]
 801ab6c:	b133      	cbz	r3, 801ab7c <dhcp_start+0x40>
 801ab6e:	4b1e      	ldr	r3, [pc, #120]	; (801abe8 <dhcp_start+0xac>)
 801ab70:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ab74:	491f      	ldr	r1, [pc, #124]	; (801abf4 <dhcp_start+0xb8>)
 801ab76:	481e      	ldr	r0, [pc, #120]	; (801abf0 <dhcp_start+0xb4>)
 801ab78:	f002 fd36 	bl	801d5e8 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 801ab7c:	7a23      	ldrb	r3, [r4, #8]
 801ab7e:	b973      	cbnz	r3, 801ab9e <dhcp_start+0x62>
  memset(dhcp, 0, sizeof(struct dhcp));
 801ab80:	2240      	movs	r2, #64	; 0x40
 801ab82:	2100      	movs	r1, #0
 801ab84:	4620      	mov	r0, r4
 801ab86:	f002 f9eb 	bl	801cf60 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801ab8a:	f7fe fd85 	bl	8019698 <dhcp_inc_pcb_refcount>
 801ab8e:	b998      	cbnz	r0, 801abb8 <dhcp_start+0x7c>
  dhcp->pcb_allocated = 1;
 801ab90:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 801ab92:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 801ab94:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 801ab96:	f7fe ffbb 	bl	8019b10 <dhcp_discover>
  if (result != ERR_OK) {
 801ab9a:	b950      	cbnz	r0, 801abb2 <dhcp_start+0x76>
}
 801ab9c:	bd38      	pop	{r3, r4, r5, pc}
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ab9e:	f7ff f991 	bl	8019ec4 <dhcp_dec_pcb_refcount>
 801aba2:	e7ed      	b.n	801ab80 <dhcp_start+0x44>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801aba4:	2040      	movs	r0, #64	; 0x40
 801aba6:	f7f9 fa15 	bl	8013fd4 <mem_malloc>
    if (dhcp == NULL) {
 801abaa:	4604      	mov	r4, r0
 801abac:	b120      	cbz	r0, 801abb8 <dhcp_start+0x7c>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801abae:	62a8      	str	r0, [r5, #40]	; 0x28
 801abb0:	e7e6      	b.n	801ab80 <dhcp_start+0x44>
    dhcp_stop(netif);
 801abb2:	4628      	mov	r0, r5
 801abb4:	f7ff ff98 	bl	801aae8 <dhcp_stop>
    return ERR_MEM;
 801abb8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801abbc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801abbe:	4b0a      	ldr	r3, [pc, #40]	; (801abe8 <dhcp_start+0xac>)
 801abc0:	f240 22d7 	movw	r2, #727	; 0x2d7
 801abc4:	490c      	ldr	r1, [pc, #48]	; (801abf8 <dhcp_start+0xbc>)
 801abc6:	480a      	ldr	r0, [pc, #40]	; (801abf0 <dhcp_start+0xb4>)
 801abc8:	f002 fd0e 	bl	801d5e8 <iprintf>
 801abcc:	f06f 000f 	mvn.w	r0, #15
}
 801abd0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801abd2:	4b05      	ldr	r3, [pc, #20]	; (801abe8 <dhcp_start+0xac>)
 801abd4:	f240 22d6 	movw	r2, #726	; 0x2d6
 801abd8:	4908      	ldr	r1, [pc, #32]	; (801abfc <dhcp_start+0xc0>)
 801abda:	4805      	ldr	r0, [pc, #20]	; (801abf0 <dhcp_start+0xb4>)
 801abdc:	f002 fd04 	bl	801d5e8 <iprintf>
 801abe0:	f06f 000f 	mvn.w	r0, #15
}
 801abe4:	bd38      	pop	{r3, r4, r5, pc}
 801abe6:	bf00      	nop
 801abe8:	080392c4 	.word	0x080392c4
 801abec:	08039758 	.word	0x08039758
 801abf0:	08021804 	.word	0x08021804
 801abf4:	08039658 	.word	0x08039658
 801abf8:	08039734 	.word	0x08039734
 801abfc:	080217f4 	.word	0x080217f4

0801ac00 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 801ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801ac04:	4605      	mov	r5, r0
 801ac06:	b1e0      	cbz	r0, 801ac42 <free_etharp_q+0x42>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 801ac08:	6868      	ldr	r0, [r5, #4]
 801ac0a:	b318      	cbz	r0, 801ac54 <free_etharp_q+0x54>
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801ac0c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801ac6c <free_etharp_q+0x6c>
 801ac10:	4f14      	ldr	r7, [pc, #80]	; (801ac64 <free_etharp_q+0x64>)
 801ac12:	4e15      	ldr	r6, [pc, #84]	; (801ac68 <free_etharp_q+0x68>)
 801ac14:	e000      	b.n	801ac18 <free_etharp_q+0x18>
 801ac16:	6860      	ldr	r0, [r4, #4]
    q = q->next;
 801ac18:	682c      	ldr	r4, [r5, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801ac1a:	b150      	cbz	r0, 801ac32 <free_etharp_q+0x32>
    pbuf_free(r->p);
 801ac1c:	f7f9 fe12 	bl	8014844 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801ac20:	4629      	mov	r1, r5
 801ac22:	200b      	movs	r0, #11
 801ac24:	4625      	mov	r5, r4
 801ac26:	f7f9 fc15 	bl	8014454 <memp_free>
  while (q) {
 801ac2a:	2c00      	cmp	r4, #0
 801ac2c:	d1f3      	bne.n	801ac16 <free_etharp_q+0x16>
  }
}
 801ac2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801ac32:	4643      	mov	r3, r8
 801ac34:	229c      	movs	r2, #156	; 0x9c
 801ac36:	4639      	mov	r1, r7
 801ac38:	4630      	mov	r0, r6
 801ac3a:	f002 fcd5 	bl	801d5e8 <iprintf>
 801ac3e:	6868      	ldr	r0, [r5, #4]
 801ac40:	e7ec      	b.n	801ac1c <free_etharp_q+0x1c>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ac42:	4b0a      	ldr	r3, [pc, #40]	; (801ac6c <free_etharp_q+0x6c>)
 801ac44:	2297      	movs	r2, #151	; 0x97
 801ac46:	490a      	ldr	r1, [pc, #40]	; (801ac70 <free_etharp_q+0x70>)
 801ac48:	4807      	ldr	r0, [pc, #28]	; (801ac68 <free_etharp_q+0x68>)
 801ac4a:	f002 fccd 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 801ac4e:	6868      	ldr	r0, [r5, #4]
 801ac50:	2800      	cmp	r0, #0
 801ac52:	d1db      	bne.n	801ac0c <free_etharp_q+0xc>
 801ac54:	4b05      	ldr	r3, [pc, #20]	; (801ac6c <free_etharp_q+0x6c>)
 801ac56:	2298      	movs	r2, #152	; 0x98
 801ac58:	4906      	ldr	r1, [pc, #24]	; (801ac74 <free_etharp_q+0x74>)
 801ac5a:	4803      	ldr	r0, [pc, #12]	; (801ac68 <free_etharp_q+0x68>)
 801ac5c:	f002 fcc4 	bl	801d5e8 <iprintf>
 801ac60:	6868      	ldr	r0, [r5, #4]
 801ac62:	e7d3      	b.n	801ac0c <free_etharp_q+0xc>
 801ac64:	0803992c 	.word	0x0803992c
 801ac68:	08021804 	.word	0x08021804
 801ac6c:	080398d8 	.word	0x080398d8
 801ac70:	08039910 	.word	0x08039910
 801ac74:	0803991c 	.word	0x0803991c

0801ac78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	b083      	sub	sp, #12
 801ac7e:	4689      	mov	r9, r1
 801ac80:	4692      	mov	sl, r2
 801ac82:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ac84:	4606      	mov	r6, r0
{
 801ac86:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ac88:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ac8c:	2800      	cmp	r0, #0
 801ac8e:	d059      	beq.n	801ad44 <etharp_raw+0xcc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ac90:	2200      	movs	r2, #0
 801ac92:	211c      	movs	r1, #28
 801ac94:	2002      	movs	r0, #2
 801ac96:	f7f9 fe43 	bl	8014920 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ac9a:	4605      	mov	r5, r0
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d059      	beq.n	801ad54 <etharp_raw+0xdc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801aca0:	8943      	ldrh	r3, [r0, #10]
 801aca2:	2b1b      	cmp	r3, #27
 801aca4:	d946      	bls.n	801ad34 <etharp_raw+0xbc>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801aca6:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aca8:	4658      	mov	r0, fp
 801acaa:	f7f8 fa23 	bl	80130f4 <lwip_htons>
 801acae:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801acb0:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 801acb4:	2b06      	cmp	r3, #6
 801acb6:	d006      	beq.n	801acc6 <etharp_raw+0x4e>
 801acb8:	4b2a      	ldr	r3, [pc, #168]	; (801ad64 <etharp_raw+0xec>)
 801acba:	f240 426b 	movw	r2, #1131	; 0x46b
 801acbe:	492a      	ldr	r1, [pc, #168]	; (801ad68 <etharp_raw+0xf0>)
 801acc0:	482a      	ldr	r0, [pc, #168]	; (801ad6c <etharp_raw+0xf4>)
 801acc2:	f002 fc91 	bl	801d5e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801acc6:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801acca:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 801acce:	f04f 0c04 	mov.w	ip, #4
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801acd2:	4630      	mov	r0, r6
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801acd4:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801acd6:	2600      	movs	r6, #0
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801acd8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801acdc:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ace0:	4653      	mov	r3, sl
 801ace2:	464a      	mov	r2, r9
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801ace4:	81a1      	strh	r1, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801ace6:	6839      	ldr	r1, [r7, #0]
 801ace8:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801acec:	2106      	movs	r1, #6
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801acee:	88bf      	ldrh	r7, [r7, #4]
 801acf0:	82e7      	strh	r7, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801acf2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801acf4:	683f      	ldr	r7, [r7, #0]
 801acf6:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801acfa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801acfc:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801acfe:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801ad02:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ad04:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801ad08:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ad0a:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801ad0c:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801ad10:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ad12:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801ad14:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ad18:	9700      	str	r7, [sp, #0]
 801ad1a:	f001 fd67 	bl	801c7ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801ad1e:	4a14      	ldr	r2, [pc, #80]	; (801ad70 <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 801ad20:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801ad22:	8b13      	ldrh	r3, [r2, #24]
 801ad24:	4443      	add	r3, r8
 801ad26:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801ad28:	f7f9 fd8c 	bl	8014844 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801ad2c:	4630      	mov	r0, r6
}
 801ad2e:	b003      	add	sp, #12
 801ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ad34:	4b0b      	ldr	r3, [pc, #44]	; (801ad64 <etharp_raw+0xec>)
 801ad36:	f240 4264 	movw	r2, #1124	; 0x464
 801ad3a:	490e      	ldr	r1, [pc, #56]	; (801ad74 <etharp_raw+0xfc>)
 801ad3c:	480b      	ldr	r0, [pc, #44]	; (801ad6c <etharp_raw+0xf4>)
 801ad3e:	f002 fc53 	bl	801d5e8 <iprintf>
 801ad42:	e7b0      	b.n	801aca6 <etharp_raw+0x2e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ad44:	4b07      	ldr	r3, [pc, #28]	; (801ad64 <etharp_raw+0xec>)
 801ad46:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801ad4a:	490b      	ldr	r1, [pc, #44]	; (801ad78 <etharp_raw+0x100>)
 801ad4c:	4807      	ldr	r0, [pc, #28]	; (801ad6c <etharp_raw+0xf4>)
 801ad4e:	f002 fc4b 	bl	801d5e8 <iprintf>
 801ad52:	e79d      	b.n	801ac90 <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 801ad54:	4a06      	ldr	r2, [pc, #24]	; (801ad70 <etharp_raw+0xf8>)
    return ERR_MEM;
 801ad56:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801ad5a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801ad5c:	3301      	adds	r3, #1
 801ad5e:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801ad60:	e7e5      	b.n	801ad2e <etharp_raw+0xb6>
 801ad62:	bf00      	nop
 801ad64:	080398d8 	.word	0x080398d8
 801ad68:	08039894 	.word	0x08039894
 801ad6c:	08021804 	.word	0x08021804
 801ad70:	20033a7c 	.word	0x20033a7c
 801ad74:	08039860 	.word	0x08039860
 801ad78:	080217f4 	.word	0x080217f4

0801ad7c <etharp_output_to_arp_index>:
{
 801ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad80:	0055      	lsls	r5, r2, #1
 801ad82:	4e2f      	ldr	r6, [pc, #188]	; (801ae40 <etharp_output_to_arp_index+0xc4>)
{
 801ad84:	b084      	sub	sp, #16
 801ad86:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad88:	eb05 0802 	add.w	r8, r5, r2
{
 801ad8c:	4607      	mov	r7, r0
 801ad8e:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad90:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801ad94:	f898 3014 	ldrb.w	r3, [r8, #20]
 801ad98:	2b01      	cmp	r3, #1
 801ad9a:	d934      	bls.n	801ae06 <etharp_output_to_arp_index+0x8a>
 801ad9c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ada0:	2b02      	cmp	r3, #2
 801ada2:	f107 0831 	add.w	r8, r7, #49	; 0x31
 801ada6:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801adaa:	f101 0a0c 	add.w	sl, r1, #12
 801adae:	44b2      	add	sl, r6
 801adb0:	d00b      	beq.n	801adca <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801adb2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801adb6:	4653      	mov	r3, sl
 801adb8:	4642      	mov	r2, r8
 801adba:	4649      	mov	r1, r9
 801adbc:	4638      	mov	r0, r7
 801adbe:	9400      	str	r4, [sp, #0]
 801adc0:	f001 fd14 	bl	801c7ec <ethernet_output>
}
 801adc4:	b004      	add	sp, #16
 801adc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801adca:	442c      	add	r4, r5
 801adcc:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801add0:	8a63      	ldrh	r3, [r4, #18]
 801add2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801add6:	d820      	bhi.n	801ae1a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801add8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801addc:	d3e9      	bcc.n	801adb2 <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801adde:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ade0:	2201      	movs	r2, #1
 801ade2:	4b18      	ldr	r3, [pc, #96]	; (801ae44 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ade4:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ade6:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ade8:	9203      	str	r2, [sp, #12]
 801adea:	9301      	str	r3, [sp, #4]
 801adec:	4652      	mov	r2, sl
 801adee:	9102      	str	r1, [sp, #8]
 801adf0:	4643      	mov	r3, r8
 801adf2:	9000      	str	r0, [sp, #0]
 801adf4:	4641      	mov	r1, r8
 801adf6:	4638      	mov	r0, r7
 801adf8:	f7ff ff3e 	bl	801ac78 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801adfc:	2800      	cmp	r0, #0
 801adfe:	d1d8      	bne.n	801adb2 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ae00:	2303      	movs	r3, #3
 801ae02:	7523      	strb	r3, [r4, #20]
 801ae04:	e7d5      	b.n	801adb2 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ae06:	4b10      	ldr	r3, [pc, #64]	; (801ae48 <etharp_output_to_arp_index+0xcc>)
 801ae08:	f240 22ed 	movw	r2, #749	; 0x2ed
 801ae0c:	490f      	ldr	r1, [pc, #60]	; (801ae4c <etharp_output_to_arp_index+0xd0>)
 801ae0e:	4810      	ldr	r0, [pc, #64]	; (801ae50 <etharp_output_to_arp_index+0xd4>)
 801ae10:	f002 fbea 	bl	801d5e8 <iprintf>
 801ae14:	f898 3014 	ldrb.w	r3, [r8, #20]
 801ae18:	e7c0      	b.n	801ad9c <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ae1a:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ae1c:	2001      	movs	r0, #1
 801ae1e:	4b09      	ldr	r3, [pc, #36]	; (801ae44 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ae20:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ae22:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ae24:	9003      	str	r0, [sp, #12]
 801ae26:	9301      	str	r3, [sp, #4]
 801ae28:	4641      	mov	r1, r8
 801ae2a:	9200      	str	r2, [sp, #0]
 801ae2c:	4643      	mov	r3, r8
 801ae2e:	9602      	str	r6, [sp, #8]
 801ae30:	4638      	mov	r0, r7
 801ae32:	4a08      	ldr	r2, [pc, #32]	; (801ae54 <etharp_output_to_arp_index+0xd8>)
 801ae34:	f7ff ff20 	bl	801ac78 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	d1ba      	bne.n	801adb2 <etharp_output_to_arp_index+0x36>
 801ae3c:	e7e0      	b.n	801ae00 <etharp_output_to_arp_index+0x84>
 801ae3e:	bf00      	nop
 801ae40:	200214b8 	.word	0x200214b8
 801ae44:	08039cb8 	.word	0x08039cb8
 801ae48:	080398d8 	.word	0x080398d8
 801ae4c:	08039814 	.word	0x08039814
 801ae50:	08021804 	.word	0x08021804
 801ae54:	08039c44 	.word	0x08039c44

0801ae58 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 801ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae5c:	2300      	movs	r3, #0
  s8_t old_queue = ARP_TABLE_SIZE;
 801ae5e:	f04f 0c20 	mov.w	ip, #32
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 801ae62:	b083      	sub	sp, #12
 801ae64:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801af9c <etharp_find_entry.isra.0+0x144>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ae68:	461f      	mov	r7, r3
 801ae6a:	469a      	mov	sl, r3
 801ae6c:	4642      	mov	r2, r8
 801ae6e:	4699      	mov	r9, r3
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ae70:	46e6      	mov	lr, ip
 801ae72:	f8cd c004 	str.w	ip, [sp, #4]
  s8_t empty = ARP_TABLE_SIZE;
 801ae76:	4664      	mov	r4, ip
 801ae78:	468b      	mov	fp, r1
 801ae7a:	e005      	b.n	801ae88 <etharp_find_entry.isra.0+0x30>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ae7c:	b93d      	cbnz	r5, 801ae8e <etharp_find_entry.isra.0+0x36>
      empty = i;
 801ae7e:	b25c      	sxtb	r4, r3
 801ae80:	3301      	adds	r3, #1
 801ae82:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ae84:	2b20      	cmp	r3, #32
 801ae86:	d015      	beq.n	801aeb4 <etharp_find_entry.isra.0+0x5c>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ae88:	2c20      	cmp	r4, #32
    u8_t state = arp_table[i].state;
 801ae8a:	7d15      	ldrb	r5, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ae8c:	d0f6      	beq.n	801ae7c <etharp_find_entry.isra.0+0x24>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ae8e:	2d00      	cmp	r5, #0
 801ae90:	d0f6      	beq.n	801ae80 <etharp_find_entry.isra.0+0x28>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ae92:	b118      	cbz	r0, 801ae9c <etharp_find_entry.isra.0+0x44>
 801ae94:	6806      	ldr	r6, [r0, #0]
 801ae96:	6851      	ldr	r1, [r2, #4]
 801ae98:	428e      	cmp	r6, r1
 801ae9a:	d05a      	beq.n	801af52 <etharp_find_entry.isra.0+0xfa>
      if (state == ETHARP_STATE_PENDING) {
 801ae9c:	2d01      	cmp	r5, #1
 801ae9e:	8a56      	ldrh	r6, [r2, #18]
 801aea0:	d02e      	beq.n	801af00 <etharp_find_entry.isra.0+0xa8>
          if (arp_table[i].ctime >= age_stable) {
 801aea2:	42be      	cmp	r6, r7
 801aea4:	d3ec      	bcc.n	801ae80 <etharp_find_entry.isra.0+0x28>
            old_stable = i;
 801aea6:	fa4f fe83 	sxtb.w	lr, r3
 801aeaa:	3301      	adds	r3, #1
 801aeac:	4637      	mov	r7, r6
 801aeae:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aeb0:	2b20      	cmp	r3, #32
 801aeb2:	d1e9      	bne.n	801ae88 <etharp_find_entry.isra.0+0x30>
 801aeb4:	4659      	mov	r1, fp
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801aeb6:	2901      	cmp	r1, #1
 801aeb8:	d165      	bne.n	801af86 <etharp_find_entry.isra.0+0x12e>
 801aeba:	2c20      	cmp	r4, #32
 801aebc:	4605      	mov	r5, r0
 801aebe:	d02d      	beq.n	801af1c <etharp_find_entry.isra.0+0xc4>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801aec0:	4626      	mov	r6, r4
    i = empty;
 801aec2:	b2e4      	uxtb	r4, r4
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801aec4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 801aec8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801aecc:	7d1b      	ldrb	r3, [r3, #20]
 801aece:	b133      	cbz	r3, 801aede <etharp_find_entry.isra.0+0x86>
 801aed0:	4b2e      	ldr	r3, [pc, #184]	; (801af8c <etharp_find_entry.isra.0+0x134>)
 801aed2:	f240 1287 	movw	r2, #391	; 0x187
 801aed6:	492e      	ldr	r1, [pc, #184]	; (801af90 <etharp_find_entry.isra.0+0x138>)
 801aed8:	482e      	ldr	r0, [pc, #184]	; (801af94 <etharp_find_entry.isra.0+0x13c>)
 801aeda:	f002 fb85 	bl	801d5e8 <iprintf>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801aede:	0073      	lsls	r3, r6, #1
  if (ipaddr != NULL) {
 801aee0:	b125      	cbz	r5, 801aeec <etharp_find_entry.isra.0+0x94>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801aee2:	199a      	adds	r2, r3, r6
 801aee4:	6829      	ldr	r1, [r5, #0]
 801aee6:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801aeea:	6051      	str	r1, [r2, #4]
  arp_table[i].ctime = 0;
 801aeec:	4433      	add	r3, r6
 801aeee:	2200      	movs	r2, #0
  return (err_t)i;
 801aef0:	b260      	sxtb	r0, r4
  arp_table[i].ctime = 0;
 801aef2:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 801aef6:	f8a8 2012 	strh.w	r2, [r8, #18]
}
 801aefa:	b003      	add	sp, #12
 801aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801af00:	6815      	ldr	r5, [r2, #0]
 801af02:	b12d      	cbz	r5, 801af10 <etharp_find_entry.isra.0+0xb8>
          if (arp_table[i].ctime >= age_queue) {
 801af04:	454e      	cmp	r6, r9
 801af06:	d3bb      	bcc.n	801ae80 <etharp_find_entry.isra.0+0x28>
            old_queue = i;
 801af08:	46b1      	mov	r9, r6
 801af0a:	fa4f fc83 	sxtb.w	ip, r3
 801af0e:	e7b7      	b.n	801ae80 <etharp_find_entry.isra.0+0x28>
          if (arp_table[i].ctime >= age_pending) {
 801af10:	4556      	cmp	r6, sl
 801af12:	d3b5      	bcc.n	801ae80 <etharp_find_entry.isra.0+0x28>
            old_pending = i;
 801af14:	b259      	sxtb	r1, r3
 801af16:	46b2      	mov	sl, r6
 801af18:	9101      	str	r1, [sp, #4]
 801af1a:	e7b1      	b.n	801ae80 <etharp_find_entry.isra.0+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801af1c:	f1be 0f20 	cmp.w	lr, #32
 801af20:	d11b      	bne.n	801af5a <etharp_find_entry.isra.0+0x102>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801af22:	9b01      	ldr	r3, [sp, #4]
 801af24:	2b20      	cmp	r3, #32
 801af26:	d028      	beq.n	801af7a <etharp_find_entry.isra.0+0x122>
      i = old_pending;
 801af28:	b2dc      	uxtb	r4, r3
  if (arp_table[i].q != NULL) {
 801af2a:	0067      	lsls	r7, r4, #1
    etharp_free_entry(i);
 801af2c:	4626      	mov	r6, r4
  if (arp_table[i].q != NULL) {
 801af2e:	eb07 0904 	add.w	r9, r7, r4
 801af32:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801af36:	f858 0009 	ldr.w	r0, [r8, r9]
 801af3a:	b120      	cbz	r0, 801af46 <etharp_find_entry.isra.0+0xee>
    free_etharp_q(arp_table[i].q);
 801af3c:	f7ff fe60 	bl	801ac00 <free_etharp_q>
    arp_table[i].q = NULL;
 801af40:	2300      	movs	r3, #0
 801af42:	f848 3009 	str.w	r3, [r8, r9]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801af46:	193b      	adds	r3, r7, r4
 801af48:	2200      	movs	r2, #0
 801af4a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801af4e:	751a      	strb	r2, [r3, #20]
 801af50:	e7c5      	b.n	801aede <etharp_find_entry.isra.0+0x86>
        return i;
 801af52:	b258      	sxtb	r0, r3
}
 801af54:	b003      	add	sp, #12
 801af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801af5a:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
      i = old_stable;
 801af5e:	fa5f f48e 	uxtb.w	r4, lr
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801af62:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d0df      	beq.n	801af2a <etharp_find_entry.isra.0+0xd2>
 801af6a:	4b08      	ldr	r3, [pc, #32]	; (801af8c <etharp_find_entry.isra.0+0x134>)
 801af6c:	f240 126f 	movw	r2, #367	; 0x16f
 801af70:	4909      	ldr	r1, [pc, #36]	; (801af98 <etharp_find_entry.isra.0+0x140>)
 801af72:	4808      	ldr	r0, [pc, #32]	; (801af94 <etharp_find_entry.isra.0+0x13c>)
 801af74:	f002 fb38 	bl	801d5e8 <iprintf>
 801af78:	e7d7      	b.n	801af2a <etharp_find_entry.isra.0+0xd2>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801af7a:	f1bc 0f20 	cmp.w	ip, #32
 801af7e:	d002      	beq.n	801af86 <etharp_find_entry.isra.0+0x12e>
      i = old_queue;
 801af80:	fa5f f48c 	uxtb.w	r4, ip
 801af84:	e7d1      	b.n	801af2a <etharp_find_entry.isra.0+0xd2>
    return (s8_t)ERR_MEM;
 801af86:	f04f 30ff 	mov.w	r0, #4294967295
 801af8a:	e7b6      	b.n	801aefa <etharp_find_entry.isra.0+0xa2>
 801af8c:	080398d8 	.word	0x080398d8
 801af90:	080397a4 	.word	0x080397a4
 801af94:	08021804 	.word	0x08021804
 801af98:	0803978c 	.word	0x0803978c
 801af9c:	200214b8 	.word	0x200214b8

0801afa0 <etharp_tmr>:
{
 801afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afa4:	4c1f      	ldr	r4, [pc, #124]	; (801b024 <etharp_tmr+0x84>)
 801afa6:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801afa8:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801afaa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801b02c <etharp_tmr+0x8c>
 801afae:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801afb2:	4f1d      	ldr	r7, [pc, #116]	; (801b028 <etharp_tmr+0x88>)
 801afb4:	e00a      	b.n	801afcc <etharp_tmr+0x2c>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801afb6:	2901      	cmp	r1, #1
 801afb8:	d020      	beq.n	801affc <etharp_tmr+0x5c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801afba:	2903      	cmp	r1, #3
 801afbc:	d02f      	beq.n	801b01e <etharp_tmr+0x7e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801afbe:	2904      	cmp	r1, #4
 801afc0:	d101      	bne.n	801afc6 <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801afc2:	2302      	movs	r3, #2
 801afc4:	7423      	strb	r3, [r4, #16]
 801afc6:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801afc8:	42ac      	cmp	r4, r5
 801afca:	d014      	beq.n	801aff6 <etharp_tmr+0x56>
    u8_t state = arp_table[i].state;
 801afcc:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801afce:	2900      	cmp	r1, #0
 801afd0:	d0f9      	beq.n	801afc6 <etharp_tmr+0x26>
      arp_table[i].ctime++;
 801afd2:	89e3      	ldrh	r3, [r4, #14]
 801afd4:	3301      	adds	r3, #1
 801afd6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801afd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801afdc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801afde:	d3ea      	bcc.n	801afb6 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801afe0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801afe4:	b118      	cbz	r0, 801afee <etharp_tmr+0x4e>
    free_etharp_q(arp_table[i].q);
 801afe6:	f7ff fe0b 	bl	801ac00 <free_etharp_q>
    arp_table[i].q = NULL;
 801afea:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801afee:	7426      	strb	r6, [r4, #16]
 801aff0:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aff2:	42ac      	cmp	r4, r5
 801aff4:	d1ea      	bne.n	801afcc <etharp_tmr+0x2c>
}
 801aff6:	b004      	add	sp, #16
 801aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801affc:	2b04      	cmp	r3, #4
 801affe:	d8ef      	bhi.n	801afe0 <etharp_tmr+0x40>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b000:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b002:	463a      	mov	r2, r7
 801b004:	9103      	str	r1, [sp, #12]
 801b006:	f100 0331 	add.w	r3, r0, #49	; 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b00a:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b00e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b012:	4619      	mov	r1, r3
 801b014:	f8cd c000 	str.w	ip, [sp]
 801b018:	f7ff fe2e 	bl	801ac78 <etharp_raw>
 801b01c:	e7d3      	b.n	801afc6 <etharp_tmr+0x26>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b01e:	2304      	movs	r3, #4
 801b020:	7423      	strb	r3, [r4, #16]
 801b022:	e7d0      	b.n	801afc6 <etharp_tmr+0x26>
 801b024:	200214bc 	.word	0x200214bc
 801b028:	08039c44 	.word	0x08039c44
 801b02c:	08039cb8 	.word	0x08039cb8

0801b030 <etharp_cleanup_netif>:
{
 801b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b032:	4c0d      	ldr	r4, [pc, #52]	; (801b068 <etharp_cleanup_netif+0x38>)
 801b034:	4606      	mov	r6, r0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b036:	2700      	movs	r7, #0
 801b038:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801b03c:	e002      	b.n	801b044 <etharp_cleanup_netif+0x14>
 801b03e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b040:	42ac      	cmp	r4, r5
 801b042:	d00f      	beq.n	801b064 <etharp_cleanup_netif+0x34>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b044:	7d23      	ldrb	r3, [r4, #20]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d0f9      	beq.n	801b03e <etharp_cleanup_netif+0xe>
 801b04a:	68a3      	ldr	r3, [r4, #8]
 801b04c:	42b3      	cmp	r3, r6
 801b04e:	d1f6      	bne.n	801b03e <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801b050:	6823      	ldr	r3, [r4, #0]
    free_etharp_q(arp_table[i].q);
 801b052:	4618      	mov	r0, r3
  if (arp_table[i].q != NULL) {
 801b054:	b113      	cbz	r3, 801b05c <etharp_cleanup_netif+0x2c>
    free_etharp_q(arp_table[i].q);
 801b056:	f7ff fdd3 	bl	801ac00 <free_etharp_q>
    arp_table[i].q = NULL;
 801b05a:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b05c:	7527      	strb	r7, [r4, #20]
 801b05e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b060:	42ac      	cmp	r4, r5
 801b062:	d1ef      	bne.n	801b044 <etharp_cleanup_netif+0x14>
}
 801b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b066:	bf00      	nop
 801b068:	200214b8 	.word	0x200214b8

0801b06c <etharp_input>:
{
 801b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b070:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b072:	2900      	cmp	r1, #0
 801b074:	f000 8096 	beq.w	801b1a4 <etharp_input+0x138>
  hdr = (struct etharp_hdr *)p->payload;
 801b078:	6845      	ldr	r5, [r0, #4]
 801b07a:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801b07c:	882b      	ldrh	r3, [r5, #0]
 801b07e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b082:	d102      	bne.n	801b08a <etharp_input+0x1e>
 801b084:	792b      	ldrb	r3, [r5, #4]
 801b086:	2b06      	cmp	r3, #6
 801b088:	d00c      	beq.n	801b0a4 <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801b08a:	4b5b      	ldr	r3, [pc, #364]	; (801b1f8 <etharp_input+0x18c>)
    pbuf_free(p);
 801b08c:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801b08e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b090:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801b092:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801b094:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801b096:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b098:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801b09a:	f7f9 fbd3 	bl	8014844 <pbuf_free>
}
 801b09e:	b009      	add	sp, #36	; 0x24
 801b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b0a4:	796b      	ldrb	r3, [r5, #5]
 801b0a6:	2b04      	cmp	r3, #4
 801b0a8:	d1ef      	bne.n	801b08a <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b0aa:	886b      	ldrh	r3, [r5, #2]
 801b0ac:	2b08      	cmp	r3, #8
 801b0ae:	d1ec      	bne.n	801b08a <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801b0b0:	f8df a144 	ldr.w	sl, [pc, #324]	; 801b1f8 <etharp_input+0x18c>
 801b0b4:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b0b6:	684a      	ldr	r2, [r1, #4]
 801b0b8:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801b0bc:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	f8aa 301a 	strh.w	r3, [sl, #26]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801b0c6:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801b0ca:	69ab      	ldr	r3, [r5, #24]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801b0cc:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b0ce:	2a00      	cmp	r2, #0
 801b0d0:	d072      	beq.n	801b1b8 <etharp_input+0x14c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b0d2:	429a      	cmp	r2, r3
 801b0d4:	f000 808c 	beq.w	801b1f0 <etharp_input+0x184>
    for_us = 0;
 801b0d8:	2300      	movs	r3, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b0da:	2702      	movs	r7, #2
    for_us = 0;
 801b0dc:	9305      	str	r3, [sp, #20]
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b0de:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 801b0e2:	2b06      	cmp	r3, #6
 801b0e4:	d007      	beq.n	801b0f6 <etharp_input+0x8a>
 801b0e6:	4b45      	ldr	r3, [pc, #276]	; (801b1fc <etharp_input+0x190>)
 801b0e8:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b0ec:	4944      	ldr	r1, [pc, #272]	; (801b200 <etharp_input+0x194>)
 801b0ee:	4845      	ldr	r0, [pc, #276]	; (801b204 <etharp_input+0x198>)
 801b0f0:	f002 fa7a 	bl	801d5e8 <iprintf>
 801b0f4:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	d045      	beq.n	801b186 <etharp_input+0x11a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0fa:	4631      	mov	r1, r6
 801b0fc:	f000 fde2 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801b100:	4683      	mov	fp, r0
 801b102:	2800      	cmp	r0, #0
 801b104:	d13f      	bne.n	801b186 <etharp_input+0x11a>
      ip4_addr_ismulticast(ipaddr)) {
 801b106:	9b07      	ldr	r3, [sp, #28]
 801b108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b10c:	2be0      	cmp	r3, #224	; 0xe0
 801b10e:	d03a      	beq.n	801b186 <etharp_input+0x11a>
  i = etharp_find_entry(ipaddr, flags, netif);
 801b110:	4639      	mov	r1, r7
 801b112:	a807      	add	r0, sp, #28
 801b114:	f7ff fea0 	bl	801ae58 <etharp_find_entry.isra.0>
  if (i < 0) {
 801b118:	2800      	cmp	r0, #0
 801b11a:	db34      	blt.n	801b186 <etharp_input+0x11a>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b11c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801b120:	4a39      	ldr	r2, [pc, #228]	; (801b208 <etharp_input+0x19c>)
 801b122:	2702      	movs	r7, #2
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b124:	2118      	movs	r1, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b126:	00db      	lsls	r3, r3, #3
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b128:	f04f 0c0c 	mov.w	ip, #12
 801b12c:	fb11 c100 	smlabb	r1, r1, r0, ip
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b130:	eb02 0803 	add.w	r8, r2, r3
 801b134:	f888 7014 	strb.w	r7, [r8, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b138:	1857      	adds	r7, r2, r1
  arp_table[i].netif = netif;
 801b13a:	f8c8 6008 	str.w	r6, [r8, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801b13e:	f8d9 0000 	ldr.w	r0, [r9]
 801b142:	5050      	str	r0, [r2, r1]
 801b144:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 801b148:	80b9      	strh	r1, [r7, #4]
  while (arp_table[i].q != NULL) {
 801b14a:	58d3      	ldr	r3, [r2, r3]
  arp_table[i].ctime = 0;
 801b14c:	f8a8 b012 	strh.w	fp, [r8, #18]
  while (arp_table[i].q != NULL) {
 801b150:	b1cb      	cbz	r3, 801b186 <etharp_input+0x11a>
 801b152:	f106 0b31 	add.w	fp, r6, #49	; 0x31
    arp_table[i].q = q->next;
 801b156:	681a      	ldr	r2, [r3, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801b158:	4619      	mov	r1, r3
    p = q->p;
 801b15a:	685f      	ldr	r7, [r3, #4]
    memp_free(MEMP_ARP_QUEUE, q);
 801b15c:	200b      	movs	r0, #11
    arp_table[i].q = q->next;
 801b15e:	f8c8 2000 	str.w	r2, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801b162:	f7f9 f977 	bl	8014454 <memp_free>
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b166:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b16a:	464b      	mov	r3, r9
 801b16c:	4639      	mov	r1, r7
 801b16e:	465a      	mov	r2, fp
 801b170:	9000      	str	r0, [sp, #0]
 801b172:	4630      	mov	r0, r6
 801b174:	f001 fb3a 	bl	801c7ec <ethernet_output>
    pbuf_free(p);
 801b178:	4638      	mov	r0, r7
 801b17a:	f7f9 fb63 	bl	8014844 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801b17e:	f8d8 3000 	ldr.w	r3, [r8]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d1e7      	bne.n	801b156 <etharp_input+0xea>
  switch (hdr->opcode) {
 801b186:	88eb      	ldrh	r3, [r5, #6]
 801b188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b18c:	d01d      	beq.n	801b1ca <etharp_input+0x15e>
 801b18e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b192:	d114      	bne.n	801b1be <etharp_input+0x152>
    dhcp_arp_reply(netif, &sipaddr);
 801b194:	4630      	mov	r0, r6
 801b196:	a907      	add	r1, sp, #28
 801b198:	f7ff fa40 	bl	801a61c <dhcp_arp_reply>
  pbuf_free(p);
 801b19c:	4620      	mov	r0, r4
 801b19e:	f7f9 fb51 	bl	8014844 <pbuf_free>
 801b1a2:	e77c      	b.n	801b09e <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b1a4:	4b15      	ldr	r3, [pc, #84]	; (801b1fc <etharp_input+0x190>)
 801b1a6:	f44f 7222 	mov.w	r2, #648	; 0x288
 801b1aa:	4918      	ldr	r1, [pc, #96]	; (801b20c <etharp_input+0x1a0>)
 801b1ac:	4815      	ldr	r0, [pc, #84]	; (801b204 <etharp_input+0x198>)
 801b1ae:	f002 fa1b 	bl	801d5e8 <iprintf>
}
 801b1b2:	b009      	add	sp, #36	; 0x24
 801b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for_us = 0;
 801b1b8:	9205      	str	r2, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b1ba:	2702      	movs	r7, #2
 801b1bc:	e78f      	b.n	801b0de <etharp_input+0x72>
    ETHARP_STATS_INC(etharp.err);
 801b1be:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801b1c2:	3301      	adds	r3, #1
 801b1c4:	f8aa 302c 	strh.w	r3, [sl, #44]	; 0x2c
    break;
 801b1c8:	e7e8      	b.n	801b19c <etharp_input+0x130>
    if (for_us) {
 801b1ca:	9b05      	ldr	r3, [sp, #20]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d0e5      	beq.n	801b19c <etharp_input+0x130>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b1d0:	f106 0331 	add.w	r3, r6, #49	; 0x31
      etharp_raw(netif,
 801b1d4:	2002      	movs	r0, #2
 801b1d6:	af07      	add	r7, sp, #28
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b1d8:	1d35      	adds	r5, r6, #4
      etharp_raw(netif,
 801b1da:	9003      	str	r0, [sp, #12]
 801b1dc:	464a      	mov	r2, r9
 801b1de:	f8cd 9004 	str.w	r9, [sp, #4]
 801b1e2:	4619      	mov	r1, r3
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	9702      	str	r7, [sp, #8]
 801b1e8:	9500      	str	r5, [sp, #0]
 801b1ea:	f7ff fd45 	bl	801ac78 <etharp_raw>
 801b1ee:	e7d5      	b.n	801b19c <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b1f4:	461f      	mov	r7, r3
 801b1f6:	e772      	b.n	801b0de <etharp_input+0x72>
 801b1f8:	20033a7c 	.word	0x20033a7c
 801b1fc:	080398d8 	.word	0x080398d8
 801b200:	080397f0 	.word	0x080397f0
 801b204:	08021804 	.word	0x08021804
 801b208:	200214b8 	.word	0x200214b8
 801b20c:	080217f4 	.word	0x080217f4

0801b210 <etharp_query>:
{
 801b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b214:	460d      	mov	r5, r1
 801b216:	b085      	sub	sp, #20
 801b218:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b21a:	4601      	mov	r1, r0
 801b21c:	6828      	ldr	r0, [r5, #0]
{
 801b21e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b220:	f000 fd50 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 801b224:	2800      	cmp	r0, #0
 801b226:	f040 8096 	bne.w	801b356 <etharp_query+0x146>
      ip4_addr_ismulticast(ipaddr) ||
 801b22a:	682b      	ldr	r3, [r5, #0]
 801b22c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801b230:	2ae0      	cmp	r2, #224	; 0xe0
 801b232:	f000 8090 	beq.w	801b356 <etharp_query+0x146>
 801b236:	2b00      	cmp	r3, #0
 801b238:	f000 808d 	beq.w	801b356 <etharp_query+0x146>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b23c:	2101      	movs	r1, #1
 801b23e:	4628      	mov	r0, r5
 801b240:	f7ff fe0a 	bl	801ae58 <etharp_find_entry.isra.0>
  if (i < 0) {
 801b244:	1e04      	subs	r4, r0, #0
 801b246:	db36      	blt.n	801b2b6 <etharp_query+0xa6>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b248:	ea4f 0944 	mov.w	r9, r4, lsl #1
 801b24c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801b414 <etharp_query+0x204>
 801b250:	eb09 0204 	add.w	r2, r9, r4
 801b254:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801b258:	7d13      	ldrb	r3, [r2, #20]
 801b25a:	b19b      	cbz	r3, 801b284 <etharp_query+0x74>
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801b25c:	f107 0a31 	add.w	sl, r7, #49	; 0x31
  if (is_new_entry || (q == NULL)) {
 801b260:	2e00      	cmp	r6, #0
 801b262:	f000 80ab 	beq.w	801b3bc <etharp_query+0x1ac>
  err_t result = ERR_MEM;
 801b266:	f04f 32ff 	mov.w	r2, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b26a:	eb09 0304 	add.w	r3, r9, r4
 801b26e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801b272:	7d1b      	ldrb	r3, [r3, #20]
 801b274:	2b01      	cmp	r3, #1
 801b276:	d827      	bhi.n	801b2c8 <etharp_query+0xb8>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b278:	d03b      	beq.n	801b2f2 <etharp_query+0xe2>
 801b27a:	4614      	mov	r4, r2
}
 801b27c:	4620      	mov	r0, r4
 801b27e:	b005      	add	sp, #20
 801b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b284:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801b288:	f107 0a31 	add.w	sl, r7, #49	; 0x31
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b28c:	495b      	ldr	r1, [pc, #364]	; (801b3fc <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b28e:	1d38      	adds	r0, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b290:	9502      	str	r5, [sp, #8]
 801b292:	4653      	mov	r3, sl
 801b294:	9101      	str	r1, [sp, #4]
 801b296:	4651      	mov	r1, sl
 801b298:	9000      	str	r0, [sp, #0]
 801b29a:	4638      	mov	r0, r7
 801b29c:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801b2a0:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b2a2:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b2a6:	4a56      	ldr	r2, [pc, #344]	; (801b400 <etharp_query+0x1f0>)
 801b2a8:	f7ff fce6 	bl	801ac78 <etharp_raw>
 801b2ac:	4602      	mov	r2, r0
    if (q == NULL) {
 801b2ae:	2e00      	cmp	r6, #0
 801b2b0:	d1db      	bne.n	801b26a <etharp_query+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	e004      	b.n	801b2c0 <etharp_query+0xb0>
    if (q) {
 801b2b6:	b11e      	cbz	r6, 801b2c0 <etharp_query+0xb0>
      ETHARP_STATS_INC(etharp.memerr);
 801b2b8:	4a52      	ldr	r2, [pc, #328]	; (801b404 <etharp_query+0x1f4>)
 801b2ba:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b2bc:	3301      	adds	r3, #1
 801b2be:	8493      	strh	r3, [r2, #36]	; 0x24
}
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	b005      	add	sp, #20
 801b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b2c8:	210c      	movs	r1, #12
 801b2ca:	2318      	movs	r3, #24
 801b2cc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    ETHARP_SET_HINT(netif, i);
 801b2d0:	4d4d      	ldr	r5, [pc, #308]	; (801b408 <etharp_query+0x1f8>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b2d2:	fb13 1304 	smlabb	r3, r3, r4, r1
 801b2d6:	4652      	mov	r2, sl
 801b2d8:	f8cd c000 	str.w	ip, [sp]
 801b2dc:	4631      	mov	r1, r6
    ETHARP_SET_HINT(netif, i);
 801b2de:	702c      	strb	r4, [r5, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b2e0:	4638      	mov	r0, r7
 801b2e2:	4443      	add	r3, r8
 801b2e4:	f001 fa82 	bl	801c7ec <ethernet_output>
 801b2e8:	4604      	mov	r4, r0
}
 801b2ea:	4620      	mov	r0, r4
 801b2ec:	b005      	add	sp, #20
 801b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2f2:	4635      	mov	r5, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b2f4:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b410 <etharp_query+0x200>
 801b2f8:	f8df a11c 	ldr.w	sl, [pc, #284]	; 801b418 <etharp_query+0x208>
 801b2fc:	e004      	b.n	801b308 <etharp_query+0xf8>
      if (p->type != PBUF_ROM) {
 801b2fe:	7b2b      	ldrb	r3, [r5, #12]
 801b300:	2b01      	cmp	r3, #1
 801b302:	d177      	bne.n	801b3f4 <etharp_query+0x1e4>
      p = p->next;
 801b304:	682d      	ldr	r5, [r5, #0]
    while (p) {
 801b306:	b34d      	cbz	r5, 801b35c <etharp_query+0x14c>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b308:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 801b30c:	896b      	ldrh	r3, [r5, #10]
 801b30e:	4563      	cmp	r3, ip
 801b310:	d1f5      	bne.n	801b2fe <etharp_query+0xee>
 801b312:	682f      	ldr	r7, [r5, #0]
 801b314:	465b      	mov	r3, fp
 801b316:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801b31a:	4651      	mov	r1, sl
 801b31c:	483b      	ldr	r0, [pc, #236]	; (801b40c <etharp_query+0x1fc>)
 801b31e:	b117      	cbz	r7, 801b326 <etharp_query+0x116>
 801b320:	f002 f962 	bl	801d5e8 <iprintf>
 801b324:	e7eb      	b.n	801b2fe <etharp_query+0xee>
      if (p->type != PBUF_ROM) {
 801b326:	7b2b      	ldrb	r3, [r5, #12]
 801b328:	2b01      	cmp	r3, #1
 801b32a:	d017      	beq.n	801b35c <etharp_query+0x14c>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801b32c:	4661      	mov	r1, ip
 801b32e:	2200      	movs	r2, #0
 801b330:	2002      	movs	r0, #2
 801b332:	f7f9 faf5 	bl	8014920 <pbuf_alloc>
      if (p != NULL) {
 801b336:	4605      	mov	r5, r0
 801b338:	b130      	cbz	r0, 801b348 <etharp_query+0x138>
        if (pbuf_copy(p, q) != ERR_OK) {
 801b33a:	4631      	mov	r1, r6
 801b33c:	f7f9 fcf4 	bl	8014d28 <pbuf_copy>
 801b340:	b180      	cbz	r0, 801b364 <etharp_query+0x154>
          pbuf_free(p);
 801b342:	4628      	mov	r0, r5
 801b344:	f7f9 fa7e 	bl	8014844 <pbuf_free>
      ETHARP_STATS_INC(etharp.memerr);
 801b348:	4a2e      	ldr	r2, [pc, #184]	; (801b404 <etharp_query+0x1f4>)
      result = ERR_MEM;
 801b34a:	f04f 34ff 	mov.w	r4, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801b34e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801b350:	3301      	adds	r3, #1
 801b352:	8493      	strh	r3, [r2, #36]	; 0x24
 801b354:	e7b4      	b.n	801b2c0 <etharp_query+0xb0>
    return ERR_ARG;
 801b356:	f06f 040f 	mvn.w	r4, #15
 801b35a:	e7b1      	b.n	801b2c0 <etharp_query+0xb0>
      pbuf_ref(p);
 801b35c:	4630      	mov	r0, r6
 801b35e:	4635      	mov	r5, r6
 801b360:	f7f9 fc70 	bl	8014c44 <pbuf_ref>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801b364:	f240 4207 	movw	r2, #1031	; 0x407
 801b368:	4929      	ldr	r1, [pc, #164]	; (801b410 <etharp_query+0x200>)
 801b36a:	200b      	movs	r0, #11
 801b36c:	f7f9 f84e 	bl	801440c <memp_malloc_fn>
      if (new_entry != NULL) {
 801b370:	2800      	cmp	r0, #0
 801b372:	d039      	beq.n	801b3e8 <etharp_query+0x1d8>
        if (arp_table[i].q != NULL) {
 801b374:	eb09 0304 	add.w	r3, r9, r4
        new_entry->next = 0;
 801b378:	2200      	movs	r2, #0
        new_entry->p = p;
 801b37a:	6045      	str	r5, [r0, #4]
        if (arp_table[i].q != NULL) {
 801b37c:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801b37e:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801b380:	f858 6003 	ldr.w	r6, [r8, r3]
 801b384:	b34e      	cbz	r6, 801b3da <etharp_query+0x1ca>
          while (r->next != NULL) {
 801b386:	6832      	ldr	r2, [r6, #0]
 801b388:	b35a      	cbz	r2, 801b3e2 <etharp_query+0x1d2>
          qlen++;
 801b38a:	2501      	movs	r5, #1
 801b38c:	e000      	b.n	801b390 <etharp_query+0x180>
 801b38e:	461a      	mov	r2, r3
          while (r->next != NULL) {
 801b390:	6813      	ldr	r3, [r2, #0]
            qlen++;
 801b392:	3501      	adds	r5, #1
          while (r->next != NULL) {
 801b394:	2b00      	cmp	r3, #0
 801b396:	d1fa      	bne.n	801b38e <etharp_query+0x17e>
        if (qlen >= ARP_QUEUE_LEN) {
 801b398:	2d1f      	cmp	r5, #31
          r->next = new_entry;
 801b39a:	6010      	str	r0, [r2, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801b39c:	d801      	bhi.n	801b3a2 <etharp_query+0x192>
        result = ERR_OK;
 801b39e:	461c      	mov	r4, r3
 801b3a0:	e78e      	b.n	801b2c0 <etharp_query+0xb0>
          arp_table[i].q = arp_table[i].q->next;
 801b3a2:	44a1      	add	r9, r4
        result = ERR_OK;
 801b3a4:	461c      	mov	r4, r3
          pbuf_free(old->p);
 801b3a6:	e9d6 2000 	ldrd	r2, r0, [r6]
          arp_table[i].q = arp_table[i].q->next;
 801b3aa:	f848 2039 	str.w	r2, [r8, r9, lsl #3]
          pbuf_free(old->p);
 801b3ae:	f7f9 fa49 	bl	8014844 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801b3b2:	4631      	mov	r1, r6
 801b3b4:	200b      	movs	r0, #11
 801b3b6:	f7f9 f84d 	bl	8014454 <memp_free>
 801b3ba:	e781      	b.n	801b2c0 <etharp_query+0xb0>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b3bc:	2101      	movs	r1, #1
 801b3be:	4b0f      	ldr	r3, [pc, #60]	; (801b3fc <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b3c0:	1d3a      	adds	r2, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b3c2:	4638      	mov	r0, r7
 801b3c4:	9301      	str	r3, [sp, #4]
 801b3c6:	4653      	mov	r3, sl
 801b3c8:	9200      	str	r2, [sp, #0]
 801b3ca:	4a0d      	ldr	r2, [pc, #52]	; (801b400 <etharp_query+0x1f0>)
 801b3cc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b3d0:	4651      	mov	r1, sl
 801b3d2:	f7ff fc51 	bl	801ac78 <etharp_raw>
 801b3d6:	4604      	mov	r4, r0
 801b3d8:	e772      	b.n	801b2c0 <etharp_query+0xb0>
          arp_table[i].q = new_entry;
 801b3da:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801b3de:	4634      	mov	r4, r6
 801b3e0:	e76e      	b.n	801b2c0 <etharp_query+0xb0>
          r->next = new_entry;
 801b3e2:	6030      	str	r0, [r6, #0]
        result = ERR_OK;
 801b3e4:	4614      	mov	r4, r2
 801b3e6:	e76b      	b.n	801b2c0 <etharp_query+0xb0>
        pbuf_free(p);
 801b3e8:	4628      	mov	r0, r5
        result = ERR_MEM;
 801b3ea:	f04f 34ff 	mov.w	r4, #4294967295
        pbuf_free(p);
 801b3ee:	f7f9 fa29 	bl	8014844 <pbuf_free>
 801b3f2:	e765      	b.n	801b2c0 <etharp_query+0xb0>
 801b3f4:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 801b3f8:	e798      	b.n	801b32c <etharp_query+0x11c>
 801b3fa:	bf00      	nop
 801b3fc:	08039cb8 	.word	0x08039cb8
 801b400:	08039c44 	.word	0x08039c44
 801b404:	20033a7c 	.word	0x20033a7c
 801b408:	200217b8 	.word	0x200217b8
 801b40c:	08021804 	.word	0x08021804
 801b410:	080398d8 	.word	0x080398d8
 801b414:	200214b8 	.word	0x200214b8
 801b418:	08039844 	.word	0x08039844

0801b41c <etharp_output>:
{
 801b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b41e:	460e      	mov	r6, r1
 801b420:	b085      	sub	sp, #20
 801b422:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b424:	4605      	mov	r5, r0
 801b426:	2800      	cmp	r0, #0
 801b428:	d072      	beq.n	801b510 <etharp_output+0xf4>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b42a:	2e00      	cmp	r6, #0
 801b42c:	d05f      	beq.n	801b4ee <etharp_output+0xd2>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b42e:	2c00      	cmp	r4, #0
 801b430:	d066      	beq.n	801b500 <etharp_output+0xe4>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b432:	4629      	mov	r1, r5
 801b434:	6820      	ldr	r0, [r4, #0]
 801b436:	f000 fc45 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 801b43a:	2800      	cmp	r0, #0
 801b43c:	d155      	bne.n	801b4ea <etharp_output+0xce>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b43e:	6823      	ldr	r3, [r4, #0]
 801b440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b444:	2ae0      	cmp	r2, #224	; 0xe0
 801b446:	d033      	beq.n	801b4b0 <etharp_output+0x94>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b448:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801b44c:	405a      	eors	r2, r3
 801b44e:	420a      	tst	r2, r1
 801b450:	d009      	beq.n	801b466 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 801b452:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b454:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801b458:	4293      	cmp	r3, r2
 801b45a:	d004      	beq.n	801b466 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b45c:	68eb      	ldr	r3, [r5, #12]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d070      	beq.n	801b544 <etharp_output+0x128>
            dst_addr = netif_ip4_gw(netif);
 801b462:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b466:	4f39      	ldr	r7, [pc, #228]	; (801b54c <etharp_output+0x130>)
 801b468:	4b39      	ldr	r3, [pc, #228]	; (801b550 <etharp_output+0x134>)
 801b46a:	783a      	ldrb	r2, [r7, #0]
 801b46c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801b470:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801b474:	7d19      	ldrb	r1, [r3, #20]
 801b476:	2901      	cmp	r1, #1
 801b478:	d903      	bls.n	801b482 <etharp_output+0x66>
 801b47a:	685b      	ldr	r3, [r3, #4]
 801b47c:	6821      	ldr	r1, [r4, #0]
 801b47e:	4299      	cmp	r1, r3
 801b480:	d057      	beq.n	801b532 <etharp_output+0x116>
 801b482:	4b33      	ldr	r3, [pc, #204]	; (801b550 <etharp_output+0x134>)
{
 801b484:	2200      	movs	r2, #0
 801b486:	e003      	b.n	801b490 <etharp_output+0x74>
 801b488:	3201      	adds	r2, #1
 801b48a:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b48c:	2a20      	cmp	r2, #32
 801b48e:	d049      	beq.n	801b524 <etharp_output+0x108>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b490:	7d19      	ldrb	r1, [r3, #20]
 801b492:	2901      	cmp	r1, #1
 801b494:	d9f8      	bls.n	801b488 <etharp_output+0x6c>
 801b496:	6820      	ldr	r0, [r4, #0]
 801b498:	6859      	ldr	r1, [r3, #4]
 801b49a:	4288      	cmp	r0, r1
 801b49c:	d1f4      	bne.n	801b488 <etharp_output+0x6c>
        ETHARP_SET_HINT(netif, i);
 801b49e:	b2d3      	uxtb	r3, r2
        return etharp_output_to_arp_index(netif, q, i);
 801b4a0:	4631      	mov	r1, r6
 801b4a2:	4628      	mov	r0, r5
 801b4a4:	461a      	mov	r2, r3
        ETHARP_SET_HINT(netif, i);
 801b4a6:	703b      	strb	r3, [r7, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b4a8:	f7ff fc68 	bl	801ad7c <etharp_output_to_arp_index>
}
 801b4ac:	b005      	add	sp, #20
 801b4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b4b0:	7863      	ldrb	r3, [r4, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b4b2:	2701      	movs	r7, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b4b4:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b4b6:	78a1      	ldrb	r1, [r4, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b4b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b4bc:	78e2      	ldrb	r2, [r4, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b4be:	f8ad 7008 	strh.w	r7, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b4c2:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801b4c6:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b4c8:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b4cc:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b4d0:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801b4d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801b4d8:	4631      	mov	r1, r6
 801b4da:	f105 0231 	add.w	r2, r5, #49	; 0x31
 801b4de:	9000      	str	r0, [sp, #0]
 801b4e0:	4628      	mov	r0, r5
 801b4e2:	f001 f983 	bl	801c7ec <ethernet_output>
}
 801b4e6:	b005      	add	sp, #20
 801b4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801b4ea:	4b1a      	ldr	r3, [pc, #104]	; (801b554 <etharp_output+0x138>)
 801b4ec:	e7f2      	b.n	801b4d4 <etharp_output+0xb8>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b4ee:	4b1a      	ldr	r3, [pc, #104]	; (801b558 <etharp_output+0x13c>)
 801b4f0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b4f4:	4919      	ldr	r1, [pc, #100]	; (801b55c <etharp_output+0x140>)
 801b4f6:	481a      	ldr	r0, [pc, #104]	; (801b560 <etharp_output+0x144>)
 801b4f8:	f002 f876 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b4fc:	2c00      	cmp	r4, #0
 801b4fe:	d198      	bne.n	801b432 <etharp_output+0x16>
 801b500:	4b15      	ldr	r3, [pc, #84]	; (801b558 <etharp_output+0x13c>)
 801b502:	f240 321d 	movw	r2, #797	; 0x31d
 801b506:	4917      	ldr	r1, [pc, #92]	; (801b564 <etharp_output+0x148>)
 801b508:	4815      	ldr	r0, [pc, #84]	; (801b560 <etharp_output+0x144>)
 801b50a:	f002 f86d 	bl	801d5e8 <iprintf>
 801b50e:	e790      	b.n	801b432 <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b510:	4b11      	ldr	r3, [pc, #68]	; (801b558 <etharp_output+0x13c>)
 801b512:	f240 321b 	movw	r2, #795	; 0x31b
 801b516:	4914      	ldr	r1, [pc, #80]	; (801b568 <etharp_output+0x14c>)
 801b518:	4811      	ldr	r0, [pc, #68]	; (801b560 <etharp_output+0x144>)
 801b51a:	f002 f865 	bl	801d5e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b51e:	2e00      	cmp	r6, #0
 801b520:	d185      	bne.n	801b42e <etharp_output+0x12>
 801b522:	e7e4      	b.n	801b4ee <etharp_output+0xd2>
    return etharp_query(netif, dst_addr, q);
 801b524:	4632      	mov	r2, r6
 801b526:	4621      	mov	r1, r4
 801b528:	4628      	mov	r0, r5
 801b52a:	f7ff fe71 	bl	801b210 <etharp_query>
}
 801b52e:	b005      	add	sp, #20
 801b530:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ETHARP_STATS_INC(etharp.cachehit);
 801b532:	4c0e      	ldr	r4, [pc, #56]	; (801b56c <etharp_output+0x150>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b534:	4631      	mov	r1, r6
 801b536:	4628      	mov	r0, r5
          ETHARP_STATS_INC(etharp.cachehit);
 801b538:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b53a:	3301      	adds	r3, #1
 801b53c:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b53e:	f7ff fc1d 	bl	801ad7c <etharp_output_to_arp_index>
 801b542:	e7d0      	b.n	801b4e6 <etharp_output+0xca>
            return ERR_RTE;
 801b544:	f06f 0003 	mvn.w	r0, #3
 801b548:	e7cd      	b.n	801b4e6 <etharp_output+0xca>
 801b54a:	bf00      	nop
 801b54c:	200217b8 	.word	0x200217b8
 801b550:	200214b8 	.word	0x200214b8
 801b554:	08039c44 	.word	0x08039c44
 801b558:	080398d8 	.word	0x080398d8
 801b55c:	08039910 	.word	0x08039910
 801b560:	08021804 	.word	0x08021804
 801b564:	080397d0 	.word	0x080397d0
 801b568:	080217f4 	.word	0x080217f4
 801b56c:	20033a7c 	.word	0x20033a7c

0801b570 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b570:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b572:	f100 0331 	add.w	r3, r0, #49	; 0x31
{
 801b576:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b578:	3204      	adds	r2, #4
{
 801b57a:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b57c:	2501      	movs	r5, #1
 801b57e:	4c05      	ldr	r4, [pc, #20]	; (801b594 <etharp_request+0x24>)
 801b580:	9102      	str	r1, [sp, #8]
 801b582:	4619      	mov	r1, r3
 801b584:	9200      	str	r2, [sp, #0]
 801b586:	4a04      	ldr	r2, [pc, #16]	; (801b598 <etharp_request+0x28>)
 801b588:	9503      	str	r5, [sp, #12]
 801b58a:	9401      	str	r4, [sp, #4]
 801b58c:	f7ff fb74 	bl	801ac78 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801b590:	b005      	add	sp, #20
 801b592:	bd30      	pop	{r4, r5, pc}
 801b594:	08039cb8 	.word	0x08039cb8
 801b598:	08039c44 	.word	0x08039c44

0801b59c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801b59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5a0:	4604      	mov	r4, r0
 801b5a2:	b087      	sub	sp, #28
 801b5a4:	4689      	mov	r9, r1
 801b5a6:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b5a8:	2124      	movs	r1, #36	; 0x24
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	2001      	movs	r0, #1
 801b5ae:	f7f9 f9b7 	bl	8014920 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801b5b2:	2800      	cmp	r0, #0
 801b5b4:	d047      	beq.n	801b646 <icmp_send_response.isra.0+0xaa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b5b6:	8943      	ldrh	r3, [r0, #10]
 801b5b8:	4606      	mov	r6, r0
 801b5ba:	2b23      	cmp	r3, #35	; 0x23
 801b5bc:	d946      	bls.n	801b64c <icmp_send_response.isra.0+0xb0>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b5be:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801b5c0:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b5c2:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b5c4:	af06      	add	r7, sp, #24
  icmphdr->code = code;
 801b5c6:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->type = type;
 801b5ca:	f884 9000 	strb.w	r9, [r4]
  icmphdr->id = 0;
 801b5ce:	7125      	strb	r5, [r4, #4]
 801b5d0:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 801b5d2:	71a5      	strb	r5, [r4, #6]
 801b5d4:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b5d6:	f8d3 c000 	ldr.w	ip, [r3]
 801b5da:	6858      	ldr	r0, [r3, #4]
 801b5dc:	689a      	ldr	r2, [r3, #8]
 801b5de:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801b5e2:	f8c4 c008 	str.w	ip, [r4, #8]
 801b5e6:	60e0      	str	r0, [r4, #12]
 801b5e8:	6122      	str	r2, [r4, #16]
 801b5ea:	f8c4 e014 	str.w	lr, [r4, #20]
 801b5ee:	6958      	ldr	r0, [r3, #20]
 801b5f0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801b5f4:	699a      	ldr	r2, [r3, #24]
 801b5f6:	61e0      	str	r0, [r4, #28]
 801b5f8:	f8c4 c018 	str.w	ip, [r4, #24]
 801b5fc:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801b5fe:	68db      	ldr	r3, [r3, #12]
 801b600:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b604:	4638      	mov	r0, r7
 801b606:	f000 f937 	bl	801b878 <ip4_route>
#endif
  if (netif != NULL) {
 801b60a:	4680      	mov	r8, r0
 801b60c:	b1c0      	cbz	r0, 801b640 <icmp_send_response.isra.0+0xa4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b60e:	70a5      	strb	r5, [r4, #2]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b610:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 801b612:	70e5      	strb	r5, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b614:	8971      	ldrh	r1, [r6, #10]
 801b616:	f7f8 fad1 	bl	8013bbc <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801b61a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801b668 <icmp_send_response.isra.0+0xcc>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b61e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b620:	2301      	movs	r3, #1
    ICMP_STATS_INC(icmp.xmit);
 801b622:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b626:	463a      	mov	r2, r7
 801b628:	f8cd 8008 	str.w	r8, [sp, #8]
 801b62c:	4629      	mov	r1, r5
    ICMP_STATS_INC(icmp.xmit);
 801b62e:	441c      	add	r4, r3
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b630:	4630      	mov	r0, r6
 801b632:	e9cd 5300 	strd	r5, r3, [sp]
 801b636:	23ff      	movs	r3, #255	; 0xff
    ICMP_STATS_INC(icmp.xmit);
 801b638:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b63c:	f000 fb30 	bl	801bca0 <ip4_output_if>
  }
  pbuf_free(q);
 801b640:	4630      	mov	r0, r6
 801b642:	f7f9 f8ff 	bl	8014844 <pbuf_free>
}
 801b646:	b007      	add	sp, #28
 801b648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b64c:	4b03      	ldr	r3, [pc, #12]	; (801b65c <icmp_send_response.isra.0+0xc0>)
 801b64e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801b652:	4903      	ldr	r1, [pc, #12]	; (801b660 <icmp_send_response.isra.0+0xc4>)
 801b654:	4803      	ldr	r0, [pc, #12]	; (801b664 <icmp_send_response.isra.0+0xc8>)
 801b656:	f001 ffc7 	bl	801d5e8 <iprintf>
 801b65a:	e7b0      	b.n	801b5be <icmp_send_response.isra.0+0x22>
 801b65c:	080399a8 	.word	0x080399a8
 801b660:	080399e0 	.word	0x080399e0
 801b664:	08021804 	.word	0x08021804
 801b668:	20033a7c 	.word	0x20033a7c

0801b66c <icmp_input>:
{
 801b66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ICMP_STATS_INC(icmp.recv);
 801b670:	4d74      	ldr	r5, [pc, #464]	; (801b844 <icmp_input+0x1d8>)
{
 801b672:	b084      	sub	sp, #16
  iphdr_in = ip4_current_header();
 801b674:	4f74      	ldr	r7, [pc, #464]	; (801b848 <icmp_input+0x1dc>)
{
 801b676:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 801b678:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801b67c:	f8d7 9008 	ldr.w	r9, [r7, #8]
  ICMP_STATS_INC(icmp.recv);
 801b680:	3301      	adds	r3, #1
 801b682:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL(iphdr_in) * 4;
 801b686:	f899 4000 	ldrb.w	r4, [r9]
 801b68a:	f004 040f 	and.w	r4, r4, #15
 801b68e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801b690:	2c13      	cmp	r4, #19
 801b692:	d953      	bls.n	801b73c <icmp_input+0xd0>
  if (p->len < sizeof(u16_t)*2) {
 801b694:	8943      	ldrh	r3, [r0, #10]
 801b696:	2b03      	cmp	r3, #3
 801b698:	d950      	bls.n	801b73c <icmp_input+0xd0>
  type = *((u8_t *)p->payload);
 801b69a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801b69c:	781b      	ldrb	r3, [r3, #0]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	f000 809a 	beq.w	801b7d8 <icmp_input+0x16c>
 801b6a4:	2b08      	cmp	r3, #8
 801b6a6:	f040 809d 	bne.w	801b7e4 <icmp_input+0x178>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b6aa:	6978      	ldr	r0, [r7, #20]
 801b6ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801b6b0:	2be0      	cmp	r3, #224	; 0xe0
 801b6b2:	d03a      	beq.n	801b72a <icmp_input+0xbe>
 801b6b4:	4688      	mov	r8, r1
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b6b6:	6839      	ldr	r1, [r7, #0]
 801b6b8:	f000 fb04 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 801b6bc:	2800      	cmp	r0, #0
 801b6be:	d134      	bne.n	801b72a <icmp_input+0xbe>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b6c0:	8933      	ldrh	r3, [r6, #8]
 801b6c2:	2b07      	cmp	r3, #7
 801b6c4:	d93a      	bls.n	801b73c <icmp_input+0xd0>
      if (inet_chksum_pbuf(p) != 0) {
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f7f8 fa7e 	bl	8013bc8 <inet_chksum_pbuf>
 801b6cc:	4682      	mov	sl, r0
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	f040 8098 	bne.w	801b804 <icmp_input+0x198>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801b6d4:	f104 010e 	add.w	r1, r4, #14
 801b6d8:	4630      	mov	r0, r6
 801b6da:	f7f9 f8ab 	bl	8014834 <pbuf_header>
 801b6de:	2800      	cmp	r0, #0
 801b6e0:	d037      	beq.n	801b752 <icmp_input+0xe6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801b6e2:	8931      	ldrh	r1, [r6, #8]
 801b6e4:	4652      	mov	r2, sl
 801b6e6:	2002      	movs	r0, #2
 801b6e8:	4421      	add	r1, r4
 801b6ea:	b289      	uxth	r1, r1
 801b6ec:	f7f9 f918 	bl	8014920 <pbuf_alloc>
      if (r == NULL) {
 801b6f0:	4682      	mov	sl, r0
 801b6f2:	b1d0      	cbz	r0, 801b72a <icmp_input+0xbe>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b6f4:	8942      	ldrh	r2, [r0, #10]
 801b6f6:	f104 0308 	add.w	r3, r4, #8
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	f0c0 808b 	bcc.w	801b816 <icmp_input+0x1aa>
      MEMCPY(r->payload, iphdr_in, hlen);
 801b700:	4649      	mov	r1, r9
 801b702:	4622      	mov	r2, r4
 801b704:	6840      	ldr	r0, [r0, #4]
 801b706:	f001 fc20 	bl	801cf4a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 801b70a:	4261      	negs	r1, r4
 801b70c:	4650      	mov	r0, sl
 801b70e:	f7f9 f891 	bl	8014834 <pbuf_header>
 801b712:	2800      	cmp	r0, #0
 801b714:	f000 808a 	beq.w	801b82c <icmp_input+0x1c0>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b718:	4b4c      	ldr	r3, [pc, #304]	; (801b84c <icmp_input+0x1e0>)
 801b71a:	22af      	movs	r2, #175	; 0xaf
 801b71c:	494c      	ldr	r1, [pc, #304]	; (801b850 <icmp_input+0x1e4>)
 801b71e:	484d      	ldr	r0, [pc, #308]	; (801b854 <icmp_input+0x1e8>)
 801b720:	f001 ff62 	bl	801d5e8 <iprintf>
        pbuf_free(r);
 801b724:	4650      	mov	r0, sl
 801b726:	f7f9 f88d 	bl	8014844 <pbuf_free>
  pbuf_free(p);
 801b72a:	4630      	mov	r0, r6
 801b72c:	f7f9 f88a 	bl	8014844 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801b730:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 801b734:	3301      	adds	r3, #1
 801b736:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
  return;
 801b73a:	e007      	b.n	801b74c <icmp_input+0xe0>
  pbuf_free(p);
 801b73c:	4630      	mov	r0, r6
 801b73e:	f7f9 f881 	bl	8014844 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801b742:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 801b746:	3301      	adds	r3, #1
 801b748:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
}
 801b74c:	b004      	add	sp, #16
 801b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801b752:	f64f 71f2 	movw	r1, #65522	; 0xfff2
 801b756:	4630      	mov	r0, r6
 801b758:	1b09      	subs	r1, r1, r4
 801b75a:	b209      	sxth	r1, r1
 801b75c:	f7f9 f86a 	bl	8014834 <pbuf_header>
 801b760:	2800      	cmp	r0, #0
 801b762:	d15c      	bne.n	801b81e <icmp_input+0x1b2>
    if (pbuf_header(p, (s16_t)hlen)) {
 801b764:	4621      	mov	r1, r4
 801b766:	4630      	mov	r0, r6
    iecho = (struct icmp_echo_hdr *)p->payload;
 801b768:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 801b76c:	f7f9 f862 	bl	8014834 <pbuf_header>
 801b770:	bb90      	cbnz	r0, 801b7d8 <icmp_input+0x16c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801b772:	f8d6 9004 	ldr.w	r9, [r6, #4]
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b776:	f64f 72f7 	movw	r2, #65527	; 0xfff7
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b77a:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
      IPH_CHKSUM_SET(iphdr, 0);
 801b77e:	2700      	movs	r7, #0
      ip4_addr_copy(iphdr->src, *src);
 801b780:	f8c9 100c 	str.w	r1, [r9, #12]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801b784:	4621      	mov	r1, r4
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b786:	f8c9 3010 	str.w	r3, [r9, #16]
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b78a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b78e:	f88a 0000 	strb.w	r0, [sl]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801b792:	4648      	mov	r0, r9
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b794:	4293      	cmp	r3, r2
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 801b796:	bf8c      	ite	hi
 801b798:	3309      	addhi	r3, #9
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 801b79a:	3308      	addls	r3, #8
 801b79c:	f8aa 3002 	strh.w	r3, [sl, #2]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801b7a0:	f04f 0aff 	mov.w	sl, #255	; 0xff
      IPH_CHKSUM_SET(iphdr, 0);
 801b7a4:	f889 700a 	strb.w	r7, [r9, #10]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801b7a8:	f889 a008 	strb.w	sl, [r9, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801b7ac:	f889 700b 	strb.w	r7, [r9, #11]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801b7b0:	f7f8 fa04 	bl	8013bbc <inet_chksum>
      ICMP_STATS_INC(icmp.xmit);
 801b7b4:	f8b5 4060 	ldrh.w	r4, [r5, #96]	; 0x60
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b7b8:	2101      	movs	r1, #1
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801b7ba:	f8a9 000a 	strh.w	r0, [r9, #10]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b7be:	4653      	mov	r3, sl
 801b7c0:	9700      	str	r7, [sp, #0]
      ICMP_STATS_INC(icmp.xmit);
 801b7c2:	440c      	add	r4, r1
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b7c4:	9101      	str	r1, [sp, #4]
 801b7c6:	463a      	mov	r2, r7
 801b7c8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b7cc:	4630      	mov	r0, r6
 801b7ce:	4922      	ldr	r1, [pc, #136]	; (801b858 <icmp_input+0x1ec>)
      ICMP_STATS_INC(icmp.xmit);
 801b7d0:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b7d4:	f000 fa64 	bl	801bca0 <ip4_output_if>
  pbuf_free(p);
 801b7d8:	4630      	mov	r0, r6
}
 801b7da:	b004      	add	sp, #16
 801b7dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 801b7e0:	f7f9 b830 	b.w	8014844 <pbuf_free>
    ICMP_STATS_INC(icmp.proterr);
 801b7e4:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
  pbuf_free(p);
 801b7e8:	4630      	mov	r0, r6
    ICMP_STATS_INC(icmp.drop);
 801b7ea:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    ICMP_STATS_INC(icmp.proterr);
 801b7ee:	3201      	adds	r2, #1
    ICMP_STATS_INC(icmp.drop);
 801b7f0:	3301      	adds	r3, #1
    ICMP_STATS_INC(icmp.proterr);
 801b7f2:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 801b7f6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
}
 801b7fa:	b004      	add	sp, #16
 801b7fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 801b800:	f7f9 b820 	b.w	8014844 <pbuf_free>
        pbuf_free(p);
 801b804:	4630      	mov	r0, r6
 801b806:	f7f9 f81d 	bl	8014844 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
 801b80a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b80e:	3301      	adds	r3, #1
 801b810:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
        return;
 801b814:	e79a      	b.n	801b74c <icmp_input+0xe0>
        pbuf_free(r);
 801b816:	4650      	mov	r0, sl
 801b818:	f7f9 f814 	bl	8014844 <pbuf_free>
        goto icmperr;
 801b81c:	e785      	b.n	801b72a <icmp_input+0xbe>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b81e:	4b0b      	ldr	r3, [pc, #44]	; (801b84c <icmp_input+0x1e0>)
 801b820:	22c0      	movs	r2, #192	; 0xc0
 801b822:	490e      	ldr	r1, [pc, #56]	; (801b85c <icmp_input+0x1f0>)
 801b824:	480b      	ldr	r0, [pc, #44]	; (801b854 <icmp_input+0x1e8>)
 801b826:	f001 fedf 	bl	801d5e8 <iprintf>
        goto icmperr;
 801b82a:	e77e      	b.n	801b72a <icmp_input+0xbe>
      if (pbuf_copy(r, p) != ERR_OK) {
 801b82c:	4631      	mov	r1, r6
 801b82e:	4650      	mov	r0, sl
 801b830:	f7f9 fa7a 	bl	8014d28 <pbuf_copy>
 801b834:	2800      	cmp	r0, #0
 801b836:	d1ee      	bne.n	801b816 <icmp_input+0x1aa>
      pbuf_free(p);
 801b838:	4630      	mov	r0, r6
 801b83a:	4656      	mov	r6, sl
 801b83c:	f7f9 f802 	bl	8014844 <pbuf_free>
 801b840:	e790      	b.n	801b764 <icmp_input+0xf8>
 801b842:	bf00      	nop
 801b844:	20033a7c 	.word	0x20033a7c
 801b848:	20025a2c 	.word	0x20025a2c
 801b84c:	080399a8 	.word	0x080399a8
 801b850:	0803993c 	.word	0x0803993c
 801b854:	08021804 	.word	0x08021804
 801b858:	20025a40 	.word	0x20025a40
 801b85c:	08039974 	.word	0x08039974

0801b860 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801b860:	460a      	mov	r2, r1
 801b862:	3004      	adds	r0, #4
 801b864:	2103      	movs	r1, #3
 801b866:	f7ff be99 	b.w	801b59c <icmp_send_response.isra.0>
 801b86a:	bf00      	nop

0801b86c <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 801b86c:	460a      	mov	r2, r1
 801b86e:	3004      	adds	r0, #4
 801b870:	210b      	movs	r1, #11
 801b872:	f7ff be93 	b.w	801b59c <icmp_send_response.isra.0>
 801b876:	bf00      	nop

0801b878 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801b878:	4b17      	ldr	r3, [pc, #92]	; (801b8d8 <ip4_route+0x60>)
{
 801b87a:	b430      	push	{r4, r5}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	b1ab      	cbz	r3, 801b8ac <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b880:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801b884:	07d4      	lsls	r4, r2, #31
 801b886:	d5f9      	bpl.n	801b87c <ip4_route+0x4>
 801b888:	0751      	lsls	r1, r2, #29
 801b88a:	d5f7      	bpl.n	801b87c <ip4_route+0x4>
 801b88c:	6859      	ldr	r1, [r3, #4]
 801b88e:	2900      	cmp	r1, #0
 801b890:	d0f4      	beq.n	801b87c <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b892:	6804      	ldr	r4, [r0, #0]
 801b894:	689d      	ldr	r5, [r3, #8]
 801b896:	4061      	eors	r1, r4
 801b898:	4229      	tst	r1, r5
 801b89a:	d004      	beq.n	801b8a6 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b89c:	0792      	lsls	r2, r2, #30
 801b89e:	d4ed      	bmi.n	801b87c <ip4_route+0x4>
 801b8a0:	68da      	ldr	r2, [r3, #12]
 801b8a2:	4294      	cmp	r4, r2
 801b8a4:	d1ea      	bne.n	801b87c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	bc30      	pop	{r4, r5}
 801b8aa:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b8ac:	4b0b      	ldr	r3, [pc, #44]	; (801b8dc <ip4_route+0x64>)
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	b143      	cbz	r3, 801b8c4 <ip4_route+0x4c>
 801b8b2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801b8b6:	f002 0205 	and.w	r2, r2, #5
 801b8ba:	2a05      	cmp	r2, #5
 801b8bc:	d102      	bne.n	801b8c4 <ip4_route+0x4c>
 801b8be:	685a      	ldr	r2, [r3, #4]
 801b8c0:	2a00      	cmp	r2, #0
 801b8c2:	d1f0      	bne.n	801b8a6 <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801b8c4:	4906      	ldr	r1, [pc, #24]	; (801b8e0 <ip4_route+0x68>)
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801b8cc:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801b8ce:	3201      	adds	r2, #1
}
 801b8d0:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801b8d2:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801b8d6:	4770      	bx	lr
 801b8d8:	20033a70 	.word	0x20033a70
 801b8dc:	20033a74 	.word	0x20033a74
 801b8e0:	20033a7c 	.word	0x20033a7c

0801b8e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801b8e8:	4c94      	ldr	r4, [pc, #592]	; (801bb3c <ip4_input+0x258>)
{
 801b8ea:	b083      	sub	sp, #12
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b8ec:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 801b8f0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801b8f4:	3301      	adds	r3, #1
 801b8f6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801b8fa:	f898 3000 	ldrb.w	r3, [r8]
 801b8fe:	091a      	lsrs	r2, r3, #4
 801b900:	2a04      	cmp	r2, #4
 801b902:	d00f      	beq.n	801b924 <ip4_input+0x40>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b904:	f7f8 ff9e 	bl	8014844 <pbuf_free>
    IP_STATS_INC(ip.err);
 801b908:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801b90c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801b910:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801b912:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801b914:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801b918:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801b91c:	2000      	movs	r0, #0
 801b91e:	b003      	add	sp, #12
 801b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL(iphdr);
 801b924:	f003 030f 	and.w	r3, r3, #15
 801b928:	4607      	mov	r7, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b92a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801b92e:	4689      	mov	r9, r1
  iphdr_hlen *= 4;
 801b930:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b932:	f7f7 fbdf 	bl	80130f4 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801b936:	893b      	ldrh	r3, [r7, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b938:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 801b93a:	4283      	cmp	r3, r0
 801b93c:	d84f      	bhi.n	801b9de <ip4_input+0xfa>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b93e:	897b      	ldrh	r3, [r7, #10]
 801b940:	42b3      	cmp	r3, r6
 801b942:	d339      	bcc.n	801b9b8 <ip4_input+0xd4>
 801b944:	893b      	ldrh	r3, [r7, #8]
 801b946:	42ab      	cmp	r3, r5
 801b948:	d336      	bcc.n	801b9b8 <ip4_input+0xd4>
 801b94a:	2e13      	cmp	r6, #19
 801b94c:	d934      	bls.n	801b9b8 <ip4_input+0xd4>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b94e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b952:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 801bb44 <ip4_input+0x260>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b956:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 801b95a:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b95e:	f8cb 2014 	str.w	r2, [fp, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b962:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b964:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b968:	f8cb 0010 	str.w	r0, [fp, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b96c:	f000 808a 	beq.w	801ba84 <ip4_input+0x1a0>
 801b970:	464d      	mov	r5, r9
    int first = 1;
 801b972:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 801b976:	4a72      	ldr	r2, [pc, #456]	; (801bb40 <ip4_input+0x25c>)
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b978:	07db      	lsls	r3, r3, #31
 801b97a:	d50c      	bpl.n	801b996 <ip4_input+0xb2>
 801b97c:	686b      	ldr	r3, [r5, #4]
 801b97e:	b153      	cbz	r3, 801b996 <ip4_input+0xb2>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b980:	f8db 0014 	ldr.w	r0, [fp, #20]
 801b984:	4283      	cmp	r3, r0
 801b986:	d078      	beq.n	801ba7a <ip4_input+0x196>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b988:	4629      	mov	r1, r5
 801b98a:	9201      	str	r2, [sp, #4]
 801b98c:	f000 f99a 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b990:	9a01      	ldr	r2, [sp, #4]
 801b992:	2800      	cmp	r0, #0
 801b994:	d171      	bne.n	801ba7a <ip4_input+0x196>
      if (first) {
 801b996:	f1ba 0f00 	cmp.w	sl, #0
 801b99a:	d01e      	beq.n	801b9da <ip4_input+0xf6>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801b99c:	f89b 3014 	ldrb.w	r3, [fp, #20]
 801b9a0:	2b7f      	cmp	r3, #127	; 0x7f
 801b9a2:	d021      	beq.n	801b9e8 <ip4_input+0x104>
        netif = netif_list;
 801b9a4:	6815      	ldr	r5, [r2, #0]
      if (netif == inp) {
 801b9a6:	454d      	cmp	r5, r9
        netif = netif->next;
 801b9a8:	bf08      	it	eq
 801b9aa:	682d      	ldreq	r5, [r5, #0]
    } while (netif != NULL);
 801b9ac:	b1e5      	cbz	r5, 801b9e8 <ip4_input+0x104>
 801b9ae:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801b9b2:	f04f 0a00 	mov.w	sl, #0
 801b9b6:	e7df      	b.n	801b978 <ip4_input+0x94>
    pbuf_free(p);
 801b9b8:	4638      	mov	r0, r7
 801b9ba:	f7f8 ff43 	bl	8014844 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801b9be:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801b9c2:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
}
 801b9c6:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801b9c8:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801b9ca:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801b9cc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801b9d0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
 801b9d4:	b003      	add	sp, #12
 801b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        netif = netif->next;
 801b9da:	682d      	ldr	r5, [r5, #0]
 801b9dc:	e7e3      	b.n	801b9a6 <ip4_input+0xc2>
    pbuf_realloc(p, iphdr_len);
 801b9de:	4601      	mov	r1, r0
 801b9e0:	4638      	mov	r0, r7
 801b9e2:	f7f9 f8ab 	bl	8014b3c <pbuf_realloc>
 801b9e6:	e7aa      	b.n	801b93e <ip4_input+0x5a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b9e8:	f898 3009 	ldrb.w	r3, [r8, #9]
 801b9ec:	2b11      	cmp	r3, #17
 801b9ee:	d03c      	beq.n	801ba6a <ip4_input+0x186>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b9f0:	f8db 0010 	ldr.w	r0, [fp, #16]
 801b9f4:	2800      	cmp	r0, #0
 801b9f6:	f000 8088 	beq.w	801bb0a <ip4_input+0x226>
 801b9fa:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b9fc:	4649      	mov	r1, r9
 801b9fe:	f000 f961 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 801ba02:	2800      	cmp	r0, #0
 801ba04:	d178      	bne.n	801baf8 <ip4_input+0x214>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ba06:	f8db 3010 	ldr.w	r3, [fp, #16]
 801ba0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba0e:	2be0      	cmp	r3, #224	; 0xe0
 801ba10:	d072      	beq.n	801baf8 <ip4_input+0x214>
  if (netif == NULL) {
 801ba12:	2d00      	cmp	r5, #0
 801ba14:	d079      	beq.n	801bb0a <ip4_input+0x226>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ba16:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801ba1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801ba1e:	b143      	cbz	r3, 801ba32 <ip4_input+0x14e>
    p = ip4_reass(p);
 801ba20:	4638      	mov	r0, r7
 801ba22:	f000 fb61 	bl	801c0e8 <ip4_reass>
    if (p == NULL) {
 801ba26:	4607      	mov	r7, r0
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	f43f af77 	beq.w	801b91c <ip4_input+0x38>
    iphdr = (struct ip_hdr *)p->payload;
 801ba2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 801ba32:	f8cb 5000 	str.w	r5, [fp]
  if (raw_input(p, inp) == 0)
 801ba36:	4649      	mov	r1, r9
  ip_data.current_input_netif = inp;
 801ba38:	f8cb 9004 	str.w	r9, [fp, #4]
  if (raw_input(p, inp) == 0)
 801ba3c:	4638      	mov	r0, r7
  ip_data.current_ip4_header = iphdr;
 801ba3e:	f8cb 8008 	str.w	r8, [fp, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801ba42:	f898 3000 	ldrb.w	r3, [r8]
 801ba46:	f003 030f 	and.w	r3, r3, #15
 801ba4a:	009b      	lsls	r3, r3, #2
 801ba4c:	f8ab 300c 	strh.w	r3, [fp, #12]
  if (raw_input(p, inp) == 0)
 801ba50:	f7f9 fb40 	bl	80150d4 <raw_input>
 801ba54:	b300      	cbz	r0, 801ba98 <ip4_input+0x1b4>
  ip_data.current_netif = NULL;
 801ba56:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801ba58:	e9cb 3300 	strd	r3, r3, [fp]
  ip_data.current_ip4_header = NULL;
 801ba5c:	f8cb 3008 	str.w	r3, [fp, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ba60:	f8ab 300c 	strh.w	r3, [fp, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ba64:	e9cb 3304 	strd	r3, r3, [fp, #16]
  return ERR_OK;
 801ba68:	e758      	b.n	801b91c <ip4_input+0x38>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ba6a:	eb08 0306 	add.w	r3, r8, r6
 801ba6e:	885b      	ldrh	r3, [r3, #2]
 801ba70:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801ba74:	d1bc      	bne.n	801b9f0 <ip4_input+0x10c>
 801ba76:	464d      	mov	r5, r9
 801ba78:	e7cd      	b.n	801ba16 <ip4_input+0x132>
 801ba7a:	f8db 0010 	ldr.w	r0, [fp, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ba7e:	2800      	cmp	r0, #0
 801ba80:	d0c9      	beq.n	801ba16 <ip4_input+0x132>
 801ba82:	e7bb      	b.n	801b9fc <ip4_input+0x118>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ba84:	07da      	lsls	r2, r3, #31
 801ba86:	d5af      	bpl.n	801b9e8 <ip4_input+0x104>
 801ba88:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d0ab      	beq.n	801b9e8 <ip4_input+0x104>
 801ba90:	464d      	mov	r5, r9
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ba92:	2800      	cmp	r0, #0
 801ba94:	d0bf      	beq.n	801ba16 <ip4_input+0x132>
 801ba96:	e7b1      	b.n	801b9fc <ip4_input+0x118>
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801ba98:	4271      	negs	r1, r6
 801ba9a:	4638      	mov	r0, r7
 801ba9c:	f7f8 feca 	bl	8014834 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 801baa0:	f898 3009 	ldrb.w	r3, [r8, #9]
 801baa4:	2b06      	cmp	r3, #6
 801baa6:	d043      	beq.n	801bb30 <ip4_input+0x24c>
 801baa8:	2b11      	cmp	r3, #17
 801baaa:	d03c      	beq.n	801bb26 <ip4_input+0x242>
 801baac:	2b01      	cmp	r3, #1
 801baae:	d035      	beq.n	801bb1c <ip4_input+0x238>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bab0:	4629      	mov	r1, r5
 801bab2:	f8db 0014 	ldr.w	r0, [fp, #20]
 801bab6:	f000 f905 	bl	801bcc4 <ip4_addr_isbroadcast_u32>
 801baba:	b978      	cbnz	r0, 801badc <ip4_input+0x1f8>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801babc:	f8db 3014 	ldr.w	r3, [fp, #20]
 801bac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bac4:	2be0      	cmp	r3, #224	; 0xe0
 801bac6:	d009      	beq.n	801badc <ip4_input+0x1f8>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801bac8:	4631      	mov	r1, r6
 801baca:	4638      	mov	r0, r7
 801bacc:	f7f8 feb6 	bl	801483c <pbuf_header_force>
        p->payload = iphdr;
 801bad0:	f8c7 8004 	str.w	r8, [r7, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bad4:	2102      	movs	r1, #2
 801bad6:	4638      	mov	r0, r7
 801bad8:	f7ff fec2 	bl	801b860 <icmp_dest_unreach>
      pbuf_free(p);
 801badc:	4638      	mov	r0, r7
 801bade:	f7f8 feb1 	bl	8014844 <pbuf_free>
      IP_STATS_INC(ip.proterr);
 801bae2:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 801bae6:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
      IP_STATS_INC(ip.proterr);
 801baea:	3201      	adds	r2, #1
      IP_STATS_INC(ip.drop);
 801baec:	3301      	adds	r3, #1
      IP_STATS_INC(ip.proterr);
 801baee:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 801baf2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801baf6:	e7ae      	b.n	801ba56 <ip4_input+0x172>
      pbuf_free(p);
 801baf8:	4638      	mov	r0, r7
 801bafa:	f7f8 fea3 	bl	8014844 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801bafe:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bb02:	3301      	adds	r3, #1
 801bb04:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      return ERR_OK;
 801bb08:	e708      	b.n	801b91c <ip4_input+0x38>
      IP_STATS_INC(ip.drop);
 801bb0a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801bb0e:	4638      	mov	r0, r7
      IP_STATS_INC(ip.drop);
 801bb10:	3301      	adds	r3, #1
 801bb12:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801bb16:	f7f8 fe95 	bl	8014844 <pbuf_free>
    return ERR_OK;
 801bb1a:	e6ff      	b.n	801b91c <ip4_input+0x38>
      icmp_input(p, inp);
 801bb1c:	4649      	mov	r1, r9
 801bb1e:	4638      	mov	r0, r7
 801bb20:	f7ff fda4 	bl	801b66c <icmp_input>
      break;
 801bb24:	e797      	b.n	801ba56 <ip4_input+0x172>
      udp_input(p, inp);
 801bb26:	4649      	mov	r1, r9
 801bb28:	4638      	mov	r0, r7
 801bb2a:	f7fd fa7b 	bl	8019024 <udp_input>
      break;
 801bb2e:	e792      	b.n	801ba56 <ip4_input+0x172>
      tcp_input(p, inp);
 801bb30:	4649      	mov	r1, r9
 801bb32:	4638      	mov	r0, r7
 801bb34:	f7fb fa3e 	bl	8016fb4 <tcp_input>
      break;
 801bb38:	e78d      	b.n	801ba56 <ip4_input+0x172>
 801bb3a:	bf00      	nop
 801bb3c:	20033a7c 	.word	0x20033a7c
 801bb40:	20033a70 	.word	0x20033a70
 801bb44:	20025a2c 	.word	0x20025a2c

0801bb48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb4c:	4698      	mov	r8, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bb4e:	89c3      	ldrh	r3, [r0, #14]
{
 801bb50:	b085      	sub	sp, #20
 801bb52:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bb54:	2b01      	cmp	r3, #1
{
 801bb56:	468a      	mov	sl, r1
 801bb58:	4616      	mov	r6, r2
 801bb5a:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801bb5e:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801bb62:	9f10      	ldr	r7, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bb64:	d161      	bne.n	801bc2a <ip4_output_if_src+0xe2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bb66:	2e00      	cmp	r6, #0
 801bb68:	d068      	beq.n	801bc3c <ip4_output_if_src+0xf4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801bb6a:	2114      	movs	r1, #20
 801bb6c:	4628      	mov	r0, r5
 801bb6e:	f7f8 fe61 	bl	8014834 <pbuf_header>
 801bb72:	2800      	cmp	r0, #0
 801bb74:	d17c      	bne.n	801bc70 <ip4_output_if_src+0x128>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bb76:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801bb78:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bb7a:	2b13      	cmp	r3, #19
 801bb7c:	d964      	bls.n	801bc48 <ip4_output_if_src+0x100>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bb7e:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801bb82:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801bb86:	f884 9009 	strb.w	r9, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bb8a:	f04f 0c45 	mov.w	ip, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 801bb8e:	6832      	ldr	r2, [r6, #0]
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801bb90:	ea4f 210b 	mov.w	r1, fp, lsl #8
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801bb94:	ea4f 2318 	mov.w	r3, r8, lsr #8
    IPH_TOS_SET(iphdr, tos);
 801bb98:	f884 b001 	strb.w	fp, [r4, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801bb9c:	0c10      	lsrs	r0, r2, #16
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801bb9e:	ea41 010c 	orr.w	r1, r1, ip
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801bba2:	ea43 2809 	orr.w	r8, r3, r9, lsl #8
    ip4_addr_copy(iphdr->dest, *dest);
 801bba6:	6122      	str	r2, [r4, #16]
 801bba8:	fa10 f382 	uxtah	r3, r0, r2
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bbac:	f884 c000 	strb.w	ip, [r4]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bbb0:	8928      	ldrh	r0, [r5, #8]
 801bbb2:	eb03 0901 	add.w	r9, r3, r1
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bbb6:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 801bc9c <ip4_output_if_src+0x154>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bbba:	f7f7 fa9b 	bl	80130f4 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801bbbe:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bbc0:	4601      	mov	r1, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bbc2:	f8bb 0000 	ldrh.w	r0, [fp]
    IPH_OFFSET_SET(iphdr, 0);
 801bbc6:	71a3      	strb	r3, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bbc8:	8061      	strh	r1, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 801bbca:	71e3      	strb	r3, [r4, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bbcc:	9101      	str	r1, [sp, #4]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bbce:	f7f7 fa91 	bl	80130f4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bbd2:	f8bb 2000 	ldrh.w	r2, [fp]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bbd6:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 801bbd8:	3201      	adds	r2, #1

    if (src == NULL) {
 801bbda:	9901      	ldr	r1, [sp, #4]
    ++ip_id;
 801bbdc:	f8ab 2000 	strh.w	r2, [fp]
    if (src == NULL) {
 801bbe0:	f1ba 0f00 	cmp.w	sl, #0
 801bbe4:	d038      	beq.n	801bc58 <ip4_output_if_src+0x110>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bbe6:	f8da 2000 	ldr.w	r2, [sl]
 801bbea:	60e2      	str	r2, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801bbec:	eb08 0309 	add.w	r3, r8, r9
 801bbf0:	440b      	add	r3, r1
 801bbf2:	4418      	add	r0, r3
 801bbf4:	fa10 f082 	uxtah	r0, r0, r2
 801bbf8:	eb00 4012 	add.w	r0, r0, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801bbfc:	b283      	uxth	r3, r0
 801bbfe:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801bc02:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801bc06:	43c0      	mvns	r0, r0
 801bc08:	8160      	strh	r0, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801bc0a:	4a1e      	ldr	r2, [pc, #120]	; (801bc84 <ip4_output_if_src+0x13c>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bc0c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
  IP_STATS_INC(ip.xmit);
 801bc0e:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801bc12:	3301      	adds	r3, #1
 801bc14:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801bc18:	4632      	mov	r2, r6
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bc1a:	bb09      	cbnz	r1, 801bc60 <ip4_output_if_src+0x118>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bc1c:	4629      	mov	r1, r5
 801bc1e:	697b      	ldr	r3, [r7, #20]
 801bc20:	4638      	mov	r0, r7
 801bc22:	4798      	blx	r3
}
 801bc24:	b005      	add	sp, #20
 801bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bc2a:	4b17      	ldr	r3, [pc, #92]	; (801bc88 <ip4_output_if_src+0x140>)
 801bc2c:	f240 3233 	movw	r2, #819	; 0x333
 801bc30:	4916      	ldr	r1, [pc, #88]	; (801bc8c <ip4_output_if_src+0x144>)
 801bc32:	4817      	ldr	r0, [pc, #92]	; (801bc90 <ip4_output_if_src+0x148>)
 801bc34:	f001 fcd8 	bl	801d5e8 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801bc38:	2e00      	cmp	r6, #0
 801bc3a:	d196      	bne.n	801bb6a <ip4_output_if_src+0x22>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bc3c:	686b      	ldr	r3, [r5, #4]
 801bc3e:	ae04      	add	r6, sp, #16
 801bc40:	691b      	ldr	r3, [r3, #16]
 801bc42:	f846 3d04 	str.w	r3, [r6, #-4]!
 801bc46:	e7e0      	b.n	801bc0a <ip4_output_if_src+0xc2>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bc48:	4b0f      	ldr	r3, [pc, #60]	; (801bc88 <ip4_output_if_src+0x140>)
 801bc4a:	f240 3261 	movw	r2, #865	; 0x361
 801bc4e:	4911      	ldr	r1, [pc, #68]	; (801bc94 <ip4_output_if_src+0x14c>)
 801bc50:	480f      	ldr	r0, [pc, #60]	; (801bc90 <ip4_output_if_src+0x148>)
 801bc52:	f001 fcc9 	bl	801d5e8 <iprintf>
 801bc56:	e792      	b.n	801bb7e <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bc58:	4b0f      	ldr	r3, [pc, #60]	; (801bc98 <ip4_output_if_src+0x150>)
 801bc5a:	681a      	ldr	r2, [r3, #0]
 801bc5c:	60e2      	str	r2, [r4, #12]
 801bc5e:	e7c5      	b.n	801bbec <ip4_output_if_src+0xa4>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bc60:	892b      	ldrh	r3, [r5, #8]
 801bc62:	428b      	cmp	r3, r1
 801bc64:	d9da      	bls.n	801bc1c <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 801bc66:	4639      	mov	r1, r7
 801bc68:	4628      	mov	r0, r5
 801bc6a:	f000 fc5d 	bl	801c528 <ip4_frag>
 801bc6e:	e7d9      	b.n	801bc24 <ip4_output_if_src+0xdc>
      IP_STATS_INC(ip.err);
 801bc70:	4a04      	ldr	r2, [pc, #16]	; (801bc84 <ip4_output_if_src+0x13c>)
      return ERR_BUF;
 801bc72:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801bc76:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801bc7a:	3301      	adds	r3, #1
 801bc7c:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801bc80:	e7d0      	b.n	801bc24 <ip4_output_if_src+0xdc>
 801bc82:	bf00      	nop
 801bc84:	20033a7c 	.word	0x20033a7c
 801bc88:	08039a0c 	.word	0x08039a0c
 801bc8c:	08039a40 	.word	0x08039a40
 801bc90:	08021804 	.word	0x08021804
 801bc94:	08039a4c 	.word	0x08039a4c
 801bc98:	08039ac4 	.word	0x08039ac4
 801bc9c:	200217ba 	.word	0x200217ba

0801bca0 <ip4_output_if>:
{
 801bca0:	b4f0      	push	{r4, r5, r6, r7}
 801bca2:	9c06      	ldr	r4, [sp, #24]
 801bca4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bca8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bcac:	b11a      	cbz	r2, 801bcb6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801bcae:	b109      	cbz	r1, 801bcb4 <ip4_output_if+0x14>
 801bcb0:	680f      	ldr	r7, [r1, #0]
 801bcb2:	b907      	cbnz	r7, 801bcb6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801bcb4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bcb6:	9504      	str	r5, [sp, #16]
 801bcb8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801bcbc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bcbe:	f7ff bf43 	b.w	801bb48 <ip4_output_if_src>
 801bcc2:	bf00      	nop

0801bcc4 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bcc4:	1e43      	subs	r3, r0, #1
 801bcc6:	3303      	adds	r3, #3
 801bcc8:	d814      	bhi.n	801bcf4 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bcca:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 801bcce:	f013 0302 	ands.w	r3, r3, #2
 801bcd2:	d00d      	beq.n	801bcf0 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bcd4:	684b      	ldr	r3, [r1, #4]
 801bcd6:	4283      	cmp	r3, r0
 801bcd8:	d00a      	beq.n	801bcf0 <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bcda:	688a      	ldr	r2, [r1, #8]
 801bcdc:	4043      	eors	r3, r0
 801bcde:	4213      	tst	r3, r2
 801bce0:	d106      	bne.n	801bcf0 <ip4_addr_isbroadcast_u32+0x2c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bce2:	43d2      	mvns	r2, r2
 801bce4:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 801bce8:	bf0c      	ite	eq
 801bcea:	2001      	moveq	r0, #1
 801bcec:	2000      	movne	r0, #0
 801bcee:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801bcf0:	2000      	movs	r0, #0
  }
}
 801bcf2:	4770      	bx	lr
    return 1;
 801bcf4:	2001      	movs	r0, #1
 801bcf6:	4770      	bx	lr

0801bcf8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801bcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 801bcfc:	7803      	ldrb	r3, [r0, #0]
{
 801bcfe:	460d      	mov	r5, r1
 801bd00:	b084      	sub	sp, #16
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801bd02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bd06:	b2d1      	uxtb	r1, r2
 801bd08:	2909      	cmp	r1, #9
 801bd0a:	d841      	bhi.n	801bd90 <ip4addr_aton+0x98>
  u32_t *pp = parts;
 801bd0c:	46ec      	mov	ip, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801bd0e:	f10d 0e0c 	add.w	lr, sp, #12
  u32_t *pp = parts;
 801bd12:	4667      	mov	r7, ip
    if (c == '0') {
 801bd14:	2b30      	cmp	r3, #48	; 0x30
 801bd16:	d040      	beq.n	801bd9a <ip4addr_aton+0xa2>
    base = 10;
 801bd18:	260a      	movs	r6, #10
        base = 8;
 801bd1a:	2400      	movs	r4, #0
 801bd1c:	e005      	b.n	801bd2a <ip4addr_aton+0x32>
        val = (val * base) + (u32_t)(c - '0');
 801bd1e:	f1a8 0430 	sub.w	r4, r8, #48	; 0x30
        c = *++cp;
 801bd22:	7843      	ldrb	r3, [r0, #1]
 801bd24:	3001      	adds	r0, #1
 801bd26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      if (isdigit(c)) {
 801bd2a:	b2d2      	uxtb	r2, r2
      } else if (base == 16 && isxdigit(c)) {
 801bd2c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
        val = (val * base) + (u32_t)(c - '0');
 801bd30:	fb04 3806 	mla	r8, r4, r6, r3
      if (isdigit(c)) {
 801bd34:	2a09      	cmp	r2, #9
      } else if (base == 16 && isxdigit(c)) {
 801bd36:	b2c9      	uxtb	r1, r1
      if (isdigit(c)) {
 801bd38:	d9f1      	bls.n	801bd1e <ip4addr_aton+0x26>
      } else if (base == 16 && isxdigit(c)) {
 801bd3a:	2e10      	cmp	r6, #16
 801bd3c:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801bd40:	f103 020a 	add.w	r2, r3, #10
 801bd44:	ea4f 1804 	mov.w	r8, r4, lsl #4
      } else if (base == 16 && isxdigit(c)) {
 801bd48:	d115      	bne.n	801bd76 <ip4addr_aton+0x7e>
 801bd4a:	2905      	cmp	r1, #5
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801bd4c:	f04f 0961 	mov.w	r9, #97	; 0x61
      } else if (base == 16 && isxdigit(c)) {
 801bd50:	d90c      	bls.n	801bd6c <ip4addr_aton+0x74>
 801bd52:	f1ba 0f05 	cmp.w	sl, #5
 801bd56:	d80e      	bhi.n	801bd76 <ip4addr_aton+0x7e>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801bd58:	291a      	cmp	r1, #26
 801bd5a:	bf28      	it	cs
 801bd5c:	f04f 0941 	movcs.w	r9, #65	; 0x41
 801bd60:	eba2 0409 	sub.w	r4, r2, r9
        c = *++cp;
 801bd64:	7843      	ldrb	r3, [r0, #1]
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801bd66:	ea44 0408 	orr.w	r4, r4, r8
 801bd6a:	e7db      	b.n	801bd24 <ip4addr_aton+0x2c>
 801bd6c:	ea4f 1804 	mov.w	r8, r4, lsl #4
 801bd70:	f103 020a 	add.w	r2, r3, #10
 801bd74:	e7f4      	b.n	801bd60 <ip4addr_aton+0x68>
    if (c == '.') {
 801bd76:	2b2e      	cmp	r3, #46	; 0x2e
 801bd78:	d11f      	bne.n	801bdba <ip4addr_aton+0xc2>
      if (pp >= parts + 3) {
 801bd7a:	4577      	cmp	r7, lr
 801bd7c:	d008      	beq.n	801bd90 <ip4addr_aton+0x98>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801bd7e:	7843      	ldrb	r3, [r0, #1]
 801bd80:	3001      	adds	r0, #1
      *pp++ = val;
 801bd82:	f847 4b04 	str.w	r4, [r7], #4
    if (!isdigit(c)) {
 801bd86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bd8a:	b2d1      	uxtb	r1, r2
 801bd8c:	2909      	cmp	r1, #9
 801bd8e:	d9c1      	bls.n	801bd14 <ip4addr_aton+0x1c>
      return 0;
 801bd90:	2300      	movs	r3, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801bd92:	4618      	mov	r0, r3
 801bd94:	b004      	add	sp, #16
 801bd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 801bd9a:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 801bd9c:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 801bda0:	2a58      	cmp	r2, #88	; 0x58
 801bda2:	d004      	beq.n	801bdae <ip4addr_aton+0xb6>
      c = *++cp;
 801bda4:	3001      	adds	r0, #1
        base = 8;
 801bda6:	2608      	movs	r6, #8
 801bda8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bdac:	e7b5      	b.n	801bd1a <ip4addr_aton+0x22>
        c = *++cp;
 801bdae:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 801bdb0:	2610      	movs	r6, #16
        c = *++cp;
 801bdb2:	3002      	adds	r0, #2
 801bdb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bdb8:	e7af      	b.n	801bd1a <ip4addr_aton+0x22>
  if (c != '\0' && !isspace(c)) {
 801bdba:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801bdbe:	d002      	beq.n	801bdc6 <ip4addr_aton+0xce>
 801bdc0:	3b09      	subs	r3, #9
 801bdc2:	2b04      	cmp	r3, #4
 801bdc4:	d8e4      	bhi.n	801bd90 <ip4addr_aton+0x98>
  switch (pp - parts + 1) {
 801bdc6:	eba7 030c 	sub.w	r3, r7, ip
 801bdca:	109b      	asrs	r3, r3, #2
 801bdcc:	3301      	adds	r3, #1
 801bdce:	2b04      	cmp	r3, #4
 801bdd0:	d841      	bhi.n	801be56 <ip4addr_aton+0x15e>
 801bdd2:	a201      	add	r2, pc, #4	; (adr r2, 801bdd8 <ip4addr_aton+0xe0>)
 801bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdd8:	0801bd93 	.word	0x0801bd93
 801bddc:	0801be0f 	.word	0x0801be0f
 801bde0:	0801be41 	.word	0x0801be41
 801bde4:	0801be21 	.word	0x0801be21
 801bde8:	0801bded 	.word	0x0801bded
    if (val > 0xff) {
 801bdec:	2cff      	cmp	r4, #255	; 0xff
 801bdee:	d8cf      	bhi.n	801bd90 <ip4addr_aton+0x98>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801bdf0:	9900      	ldr	r1, [sp, #0]
 801bdf2:	29ff      	cmp	r1, #255	; 0xff
 801bdf4:	d8cc      	bhi.n	801bd90 <ip4addr_aton+0x98>
 801bdf6:	9b01      	ldr	r3, [sp, #4]
 801bdf8:	2bff      	cmp	r3, #255	; 0xff
 801bdfa:	d8c9      	bhi.n	801bd90 <ip4addr_aton+0x98>
 801bdfc:	9a02      	ldr	r2, [sp, #8]
 801bdfe:	2aff      	cmp	r2, #255	; 0xff
 801be00:	d8c6      	bhi.n	801bd90 <ip4addr_aton+0x98>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801be02:	041b      	lsls	r3, r3, #16
 801be04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801be08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801be0c:	431c      	orrs	r4, r3
  if (addr) {
 801be0e:	b12d      	cbz	r5, 801be1c <ip4addr_aton+0x124>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801be10:	4620      	mov	r0, r4
 801be12:	f7f7 f973 	bl	80130fc <lwip_htonl>
  return 1;
 801be16:	2301      	movs	r3, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801be18:	6028      	str	r0, [r5, #0]
 801be1a:	e7ba      	b.n	801bd92 <ip4addr_aton+0x9a>
  return 1;
 801be1c:	2301      	movs	r3, #1
 801be1e:	e7b8      	b.n	801bd92 <ip4addr_aton+0x9a>
    if (val > 0xffff) {
 801be20:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801be24:	d2b4      	bcs.n	801bd90 <ip4addr_aton+0x98>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801be26:	9a00      	ldr	r2, [sp, #0]
 801be28:	2aff      	cmp	r2, #255	; 0xff
 801be2a:	d8b1      	bhi.n	801bd90 <ip4addr_aton+0x98>
 801be2c:	9b01      	ldr	r3, [sp, #4]
 801be2e:	2bff      	cmp	r3, #255	; 0xff
 801be30:	d8ae      	bhi.n	801bd90 <ip4addr_aton+0x98>
    val |= (parts[0] << 24) | (parts[1] << 16);
 801be32:	041b      	lsls	r3, r3, #16
 801be34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801be38:	431c      	orrs	r4, r3
  if (addr) {
 801be3a:	2d00      	cmp	r5, #0
 801be3c:	d1e8      	bne.n	801be10 <ip4addr_aton+0x118>
 801be3e:	e7ed      	b.n	801be1c <ip4addr_aton+0x124>
    if (val > 0xffffffUL) {
 801be40:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801be44:	d2a4      	bcs.n	801bd90 <ip4addr_aton+0x98>
    if (parts[0] > 0xff) {
 801be46:	9b00      	ldr	r3, [sp, #0]
 801be48:	2bff      	cmp	r3, #255	; 0xff
 801be4a:	d8a1      	bhi.n	801bd90 <ip4addr_aton+0x98>
    val |= parts[0] << 24;
 801be4c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 801be50:	2d00      	cmp	r5, #0
 801be52:	d1dd      	bne.n	801be10 <ip4addr_aton+0x118>
 801be54:	e7e2      	b.n	801be1c <ip4addr_aton+0x124>
    LWIP_ASSERT("unhandled", 0);
 801be56:	4b05      	ldr	r3, [pc, #20]	; (801be6c <ip4addr_aton+0x174>)
 801be58:	f240 1203 	movw	r2, #259	; 0x103
 801be5c:	4904      	ldr	r1, [pc, #16]	; (801be70 <ip4addr_aton+0x178>)
 801be5e:	4805      	ldr	r0, [pc, #20]	; (801be74 <ip4addr_aton+0x17c>)
 801be60:	f001 fbc2 	bl	801d5e8 <iprintf>
  if (addr) {
 801be64:	2d00      	cmp	r5, #0
 801be66:	d1d3      	bne.n	801be10 <ip4addr_aton+0x118>
 801be68:	e7d8      	b.n	801be1c <ip4addr_aton+0x124>
 801be6a:	bf00      	nop
 801be6c:	08039a7c 	.word	0x08039a7c
 801be70:	08039ab8 	.word	0x08039ab8
 801be74:	08021804 	.word	0x08021804

0801be78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801be78:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801be7a:	4b0f      	ldr	r3, [pc, #60]	; (801beb8 <ip_reass_dequeue_datagram+0x40>)
{
 801be7c:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801be7e:	681a      	ldr	r2, [r3, #0]
 801be80:	4282      	cmp	r2, r0
 801be82:	d009      	beq.n	801be98 <ip_reass_dequeue_datagram+0x20>
 801be84:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801be86:	b179      	cbz	r1, 801bea8 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801be88:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801be8a:	4621      	mov	r1, r4
 801be8c:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801be8e:	602b      	str	r3, [r5, #0]
}
 801be90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801be94:	f7f8 bade 	b.w	8014454 <memp_free>
    reassdatagrams = ipr->next;
 801be98:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801be9a:	4621      	mov	r1, r4
 801be9c:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801be9e:	601a      	str	r2, [r3, #0]
}
 801bea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801bea4:	f7f8 bad6 	b.w	8014454 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bea8:	4b04      	ldr	r3, [pc, #16]	; (801bebc <ip_reass_dequeue_datagram+0x44>)
 801beaa:	f240 1245 	movw	r2, #325	; 0x145
 801beae:	4904      	ldr	r1, [pc, #16]	; (801bec0 <ip_reass_dequeue_datagram+0x48>)
 801beb0:	4804      	ldr	r0, [pc, #16]	; (801bec4 <ip_reass_dequeue_datagram+0x4c>)
 801beb2:	f001 fb99 	bl	801d5e8 <iprintf>
 801beb6:	e7e7      	b.n	801be88 <ip_reass_dequeue_datagram+0x10>
 801beb8:	200217c0 	.word	0x200217c0
 801bebc:	08039b84 	.word	0x08039b84
 801bec0:	08039bc0 	.word	0x08039bc0
 801bec4:	08021804 	.word	0x08021804

0801bec8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801bec8:	4281      	cmp	r1, r0
{
 801beca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bece:	4606      	mov	r6, r0
 801bed0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801bed2:	d06b      	beq.n	801bfac <ip_reass_free_complete_datagram+0xe4>
  if (prev != NULL) {
 801bed4:	b147      	cbz	r7, 801bee8 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801bed6:	683b      	ldr	r3, [r7, #0]
 801bed8:	42b3      	cmp	r3, r6
 801beda:	d005      	beq.n	801bee8 <ip_reass_free_complete_datagram+0x20>
 801bedc:	4b37      	ldr	r3, [pc, #220]	; (801bfbc <ip_reass_free_complete_datagram+0xf4>)
 801bede:	22ad      	movs	r2, #173	; 0xad
 801bee0:	4937      	ldr	r1, [pc, #220]	; (801bfc0 <ip_reass_free_complete_datagram+0xf8>)
 801bee2:	4838      	ldr	r0, [pc, #224]	; (801bfc4 <ip_reass_free_complete_datagram+0xfc>)
 801bee4:	f001 fb80 	bl	801d5e8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801bee8:	6874      	ldr	r4, [r6, #4]
 801beea:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801beec:	889a      	ldrh	r2, [r3, #4]
 801beee:	2a00      	cmp	r2, #0
 801bef0:	d039      	beq.n	801bf66 <ip_reass_free_complete_datagram+0x9e>
  u16_t pbufs_freed = 0;
 801bef2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bef6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801bfbc <ip_reass_free_complete_datagram+0xf4>
 801befa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801bfd4 <ip_reass_free_complete_datagram+0x10c>
 801befe:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801bfc4 <ip_reass_free_complete_datagram+0xfc>
 801bf02:	e004      	b.n	801bf0e <ip_reass_free_complete_datagram+0x46>
    pbuf_free(pcur);
 801bf04:	4620      	mov	r0, r4
  while (p != NULL) {
 801bf06:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801bf08:	f7f8 fc9c 	bl	8014844 <pbuf_free>
  while (p != NULL) {
 801bf0c:	b1b5      	cbz	r5, 801bf3c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801bf0e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801bf10:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 801bf12:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 801bf14:	f7f8 fe8a 	bl	8014c2c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bf18:	4483      	add	fp, r0
 801bf1a:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed += clen;
 801bf1e:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bf22:	dbef      	blt.n	801bf04 <ip_reass_free_complete_datagram+0x3c>
 801bf24:	4653      	mov	r3, sl
 801bf26:	22cc      	movs	r2, #204	; 0xcc
 801bf28:	4649      	mov	r1, r9
 801bf2a:	4640      	mov	r0, r8
 801bf2c:	f001 fb5c 	bl	801d5e8 <iprintf>
    pbuf_free(pcur);
 801bf30:	4620      	mov	r0, r4
  while (p != NULL) {
 801bf32:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801bf34:	f7f8 fc86 	bl	8014844 <pbuf_free>
  while (p != NULL) {
 801bf38:	2d00      	cmp	r5, #0
 801bf3a:	d1e8      	bne.n	801bf0e <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801bf3c:	4c22      	ldr	r4, [pc, #136]	; (801bfc8 <ip_reass_free_complete_datagram+0x100>)
  ip_reass_dequeue_datagram(ipr, prev);
 801bf3e:	4639      	mov	r1, r7
 801bf40:	4630      	mov	r0, r6
 801bf42:	f7ff ff99 	bl	801be78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801bf46:	8823      	ldrh	r3, [r4, #0]
 801bf48:	455b      	cmp	r3, fp
 801bf4a:	d206      	bcs.n	801bf5a <ip_reass_free_complete_datagram+0x92>
 801bf4c:	4b1b      	ldr	r3, [pc, #108]	; (801bfbc <ip_reass_free_complete_datagram+0xf4>)
 801bf4e:	22d2      	movs	r2, #210	; 0xd2
 801bf50:	491e      	ldr	r1, [pc, #120]	; (801bfcc <ip_reass_free_complete_datagram+0x104>)
 801bf52:	481c      	ldr	r0, [pc, #112]	; (801bfc4 <ip_reass_free_complete_datagram+0xfc>)
 801bf54:	f001 fb48 	bl	801d5e8 <iprintf>
 801bf58:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount -= pbufs_freed;
 801bf5a:	eba3 030b 	sub.w	r3, r3, fp
}
 801bf5e:	4658      	mov	r0, fp
  ip_reass_pbufcount -= pbufs_freed;
 801bf60:	8023      	strh	r3, [r4, #0]
}
 801bf62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801bf66:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801bf68:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801bf6a:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801bf6c:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801bf6e:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801bf70:	f852 5f08 	ldr.w	r5, [r2, #8]!
 801bf74:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801bf78:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801bf7c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801bf80:	601d      	str	r5, [r3, #0]
 801bf82:	f8c3 8004 	str.w	r8, [r3, #4]
 801bf86:	f8c3 e008 	str.w	lr, [r3, #8]
 801bf8a:	f8c3 c00c 	str.w	ip, [r3, #12]
 801bf8e:	6915      	ldr	r5, [r2, #16]
 801bf90:	611d      	str	r5, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801bf92:	f7ff fc6b 	bl	801b86c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801bf96:	4620      	mov	r0, r4
 801bf98:	f7f8 fe48 	bl	8014c2c <pbuf_clen>
 801bf9c:	4683      	mov	fp, r0
    pbuf_free(p);
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	f7f8 fc50 	bl	8014844 <pbuf_free>
 801bfa4:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 801bfa6:	2c00      	cmp	r4, #0
 801bfa8:	d1a5      	bne.n	801bef6 <ip_reass_free_complete_datagram+0x2e>
 801bfaa:	e7c7      	b.n	801bf3c <ip_reass_free_complete_datagram+0x74>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801bfac:	4b03      	ldr	r3, [pc, #12]	; (801bfbc <ip_reass_free_complete_datagram+0xf4>)
 801bfae:	22ab      	movs	r2, #171	; 0xab
 801bfb0:	4907      	ldr	r1, [pc, #28]	; (801bfd0 <ip_reass_free_complete_datagram+0x108>)
 801bfb2:	4804      	ldr	r0, [pc, #16]	; (801bfc4 <ip_reass_free_complete_datagram+0xfc>)
 801bfb4:	f001 fb18 	bl	801d5e8 <iprintf>
 801bfb8:	e78c      	b.n	801bed4 <ip_reass_free_complete_datagram+0xc>
 801bfba:	bf00      	nop
 801bfbc:	08039b84 	.word	0x08039b84
 801bfc0:	08039be8 	.word	0x08039be8
 801bfc4:	08021804 	.word	0x08021804
 801bfc8:	200217bc 	.word	0x200217bc
 801bfcc:	08039c1c 	.word	0x08039c1c
 801bfd0:	08039bdc 	.word	0x08039bdc
 801bfd4:	08039bfc 	.word	0x08039bfc

0801bfd8 <ip_reass_remove_oldest_datagram>:
{
 801bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfdc:	4605      	mov	r5, r0
 801bfde:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801bfe0:	2700      	movs	r7, #0
 801bfe2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801c048 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801bfe6:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801bfea:	b1f3      	cbz	r3, 801c02a <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801bfec:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bfee:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801bff2:	4621      	mov	r1, r4
    prev = NULL;
 801bff4:	46a4      	mov	ip, r4
    oldest = NULL;
 801bff6:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bff8:	695a      	ldr	r2, [r3, #20]
 801bffa:	4572      	cmp	r2, lr
 801bffc:	d018      	beq.n	801c030 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801bffe:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801c000:	b120      	cbz	r0, 801c00c <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801c002:	f893 901f 	ldrb.w	r9, [r3, #31]
 801c006:	7fc2      	ldrb	r2, [r0, #31]
 801c008:	4591      	cmp	r9, r2
 801c00a:	d801      	bhi.n	801c010 <ip_reass_remove_oldest_datagram+0x38>
 801c00c:	4661      	mov	r1, ip
 801c00e:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801c010:	681a      	ldr	r2, [r3, #0]
 801c012:	469c      	mov	ip, r3
 801c014:	4613      	mov	r3, r2
 801c016:	2a00      	cmp	r2, #0
 801c018:	d1ee      	bne.n	801bff8 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801c01a:	b110      	cbz	r0, 801c022 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c01c:	f7ff ff54 	bl	801bec8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801c020:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c022:	42b7      	cmp	r7, r6
 801c024:	da01      	bge.n	801c02a <ip_reass_remove_oldest_datagram+0x52>
 801c026:	2c01      	cmp	r4, #1
 801c028:	dcdd      	bgt.n	801bfe6 <ip_reass_remove_oldest_datagram+0xe>
}
 801c02a:	4638      	mov	r0, r7
 801c02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c030:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801c034:	699a      	ldr	r2, [r3, #24]
 801c036:	454a      	cmp	r2, r9
 801c038:	d1e1      	bne.n	801bffe <ip_reass_remove_oldest_datagram+0x26>
 801c03a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801c03e:	88aa      	ldrh	r2, [r5, #4]
 801c040:	4591      	cmp	r9, r2
 801c042:	d1dc      	bne.n	801bffe <ip_reass_remove_oldest_datagram+0x26>
 801c044:	e7e4      	b.n	801c010 <ip_reass_remove_oldest_datagram+0x38>
 801c046:	bf00      	nop
 801c048:	200217c0 	.word	0x200217c0

0801c04c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801c04c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c04e:	4604      	mov	r4, r0
 801c050:	b128      	cbz	r0, 801c05e <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801c052:	4621      	mov	r1, r4
 801c054:	2006      	movs	r0, #6
}
 801c056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801c05a:	f7f8 b9fb 	b.w	8014454 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c05e:	4906      	ldr	r1, [pc, #24]	; (801c078 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c060:	f240 22ae 	movw	r2, #686	; 0x2ae
 801c064:	4b05      	ldr	r3, [pc, #20]	; (801c07c <ip_frag_free_pbuf_custom_ref+0x30>)
 801c066:	4806      	ldr	r0, [pc, #24]	; (801c080 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c068:	f001 fabe 	bl	801d5e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c06c:	4621      	mov	r1, r4
 801c06e:	2006      	movs	r0, #6
}
 801c070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801c074:	f7f8 b9ee 	b.w	8014454 <memp_free>
 801c078:	08039364 	.word	0x08039364
 801c07c:	08039b84 	.word	0x08039b84
 801c080:	08021804 	.word	0x08021804

0801c084 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c084:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c086:	4604      	mov	r4, r0
 801c088:	b140      	cbz	r0, 801c09c <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801c08a:	6960      	ldr	r0, [r4, #20]
 801c08c:	b108      	cbz	r0, 801c092 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801c08e:	f7f8 fbd9 	bl	8014844 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c092:	4620      	mov	r0, r4
}
 801c094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801c098:	f7ff bfd8 	b.w	801c04c <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c09c:	4b03      	ldr	r3, [pc, #12]	; (801c0ac <ipfrag_free_pbuf_custom+0x28>)
 801c09e:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801c0a2:	4903      	ldr	r1, [pc, #12]	; (801c0b0 <ipfrag_free_pbuf_custom+0x2c>)
 801c0a4:	4803      	ldr	r0, [pc, #12]	; (801c0b4 <ipfrag_free_pbuf_custom+0x30>)
 801c0a6:	f001 fa9f 	bl	801d5e8 <iprintf>
 801c0aa:	e7ee      	b.n	801c08a <ipfrag_free_pbuf_custom+0x6>
 801c0ac:	08039b84 	.word	0x08039b84
 801c0b0:	08039c38 	.word	0x08039c38
 801c0b4:	08021804 	.word	0x08021804

0801c0b8 <ip_reass_tmr>:
{
 801c0b8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801c0ba:	4b0a      	ldr	r3, [pc, #40]	; (801c0e4 <ip_reass_tmr+0x2c>)
 801c0bc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801c0be:	b180      	cbz	r0, 801c0e2 <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 801c0c0:	2500      	movs	r5, #0
 801c0c2:	e003      	b.n	801c0cc <ip_reass_tmr+0x14>
 801c0c4:	4605      	mov	r5, r0
      r->timer--;
 801c0c6:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	b154      	cbz	r4, 801c0e2 <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 801c0cc:	7fc3      	ldrb	r3, [r0, #31]
 801c0ce:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 801c0d0:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d1f6      	bne.n	801c0c4 <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801c0d6:	4629      	mov	r1, r5
 801c0d8:	f7ff fef6 	bl	801bec8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c0dc:	4620      	mov	r0, r4
 801c0de:	2c00      	cmp	r4, #0
 801c0e0:	d1f4      	bne.n	801c0cc <ip_reass_tmr+0x14>
}
 801c0e2:	bd38      	pop	{r3, r4, r5, pc}
 801c0e4:	200217c0 	.word	0x200217c0

0801c0e8 <ip4_reass>:
{
 801c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801c0ec:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 801c3d0 <ip4_reass+0x2e8>
{
 801c0f0:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr*)p->payload;
 801c0f2:	6845      	ldr	r5, [r0, #4]
{
 801c0f4:	4607      	mov	r7, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801c0f6:	f8b8 3032 	ldrh.w	r3, [r8, #50]	; 0x32
 801c0fa:	3301      	adds	r3, #1
 801c0fc:	f8a8 3032 	strh.w	r3, [r8, #50]	; 0x32
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801c100:	782b      	ldrb	r3, [r5, #0]
 801c102:	f003 030f 	and.w	r3, r3, #15
 801c106:	2b05      	cmp	r3, #5
 801c108:	f040 80fd 	bne.w	801c306 <ip4_reass+0x21e>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c10c:	88e8      	ldrh	r0, [r5, #6]
 801c10e:	f7f6 fff1 	bl	80130f4 <lwip_htons>
 801c112:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c116:	8868      	ldrh	r0, [r5, #2]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c118:	00db      	lsls	r3, r3, #3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c11a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 801c3d4 <ip4_reass+0x2ec>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c11e:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c120:	f7f6 ffe8 	bl	80130f4 <lwip_htons>
 801c124:	782b      	ldrb	r3, [r5, #0]
 801c126:	f003 030f 	and.w	r3, r3, #15
 801c12a:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
  clen = pbuf_clen(p);
 801c12e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c130:	b29b      	uxth	r3, r3
 801c132:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 801c134:	f7f8 fd7a 	bl	8014c2c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c138:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801c13c:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c13e:	4403      	add	r3, r0
 801c140:	2b0a      	cmp	r3, #10
 801c142:	f300 80b7 	bgt.w	801c2b4 <ip4_reass+0x1cc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c146:	4ba0      	ldr	r3, [pc, #640]	; (801c3c8 <ip4_reass+0x2e0>)
 801c148:	681c      	ldr	r4, [r3, #0]
 801c14a:	b354      	cbz	r4, 801c1a2 <ip4_reass+0xba>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c14c:	68ea      	ldr	r2, [r5, #12]
 801c14e:	e001      	b.n	801c154 <ip4_reass+0x6c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c150:	6824      	ldr	r4, [r4, #0]
 801c152:	b334      	cbz	r4, 801c1a2 <ip4_reass+0xba>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c154:	6963      	ldr	r3, [r4, #20]
 801c156:	4293      	cmp	r3, r2
 801c158:	d1fa      	bne.n	801c150 <ip4_reass+0x68>
 801c15a:	692b      	ldr	r3, [r5, #16]
 801c15c:	69a1      	ldr	r1, [r4, #24]
 801c15e:	4299      	cmp	r1, r3
 801c160:	d1f6      	bne.n	801c150 <ip4_reass+0x68>
 801c162:	89a1      	ldrh	r1, [r4, #12]
 801c164:	88ab      	ldrh	r3, [r5, #4]
 801c166:	4299      	cmp	r1, r3
 801c168:	d1f2      	bne.n	801c150 <ip4_reass+0x68>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801c16a:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
 801c16e:	3301      	adds	r3, #1
 801c170:	f8a8 3046 	strh.w	r3, [r8, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c174:	88e8      	ldrh	r0, [r5, #6]
 801c176:	f7f6 ffbd 	bl	80130f4 <lwip_htons>
 801c17a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c17e:	bb98      	cbnz	r0, 801c1e8 <ip4_reass+0x100>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c180:	89e0      	ldrh	r0, [r4, #14]
 801c182:	f7f6 ffb7 	bl	80130f4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c186:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c18a:	b368      	cbz	r0, 801c1e8 <ip4_reass+0x100>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c18c:	682a      	ldr	r2, [r5, #0]
 801c18e:	686e      	ldr	r6, [r5, #4]
 801c190:	68a8      	ldr	r0, [r5, #8]
 801c192:	68e9      	ldr	r1, [r5, #12]
 801c194:	60a2      	str	r2, [r4, #8]
 801c196:	60e6      	str	r6, [r4, #12]
 801c198:	6120      	str	r0, [r4, #16]
 801c19a:	6161      	str	r1, [r4, #20]
 801c19c:	692a      	ldr	r2, [r5, #16]
 801c19e:	61a2      	str	r2, [r4, #24]
 801c1a0:	e022      	b.n	801c1e8 <ip4_reass+0x100>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c1a2:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801c1a6:	4989      	ldr	r1, [pc, #548]	; (801c3cc <ip4_reass+0x2e4>)
 801c1a8:	2005      	movs	r0, #5
 801c1aa:	f7f8 f92f 	bl	801440c <memp_malloc_fn>
  if (ipr == NULL) {
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	f000 80ae 	beq.w	801c312 <ip4_reass+0x22a>
  ipr->next = reassdatagrams;
 801c1b6:	4984      	ldr	r1, [pc, #528]	; (801c3c8 <ip4_reass+0x2e0>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c1b8:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 801c1ba:	2603      	movs	r6, #3
  ipr->next = reassdatagrams;
 801c1bc:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c1be:	60a2      	str	r2, [r4, #8]
 801c1c0:	60e2      	str	r2, [r4, #12]
 801c1c2:	6122      	str	r2, [r4, #16]
 801c1c4:	6162      	str	r2, [r4, #20]
 801c1c6:	61a2      	str	r2, [r4, #24]
 801c1c8:	61e2      	str	r2, [r4, #28]
 801c1ca:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801c1cc:	77e6      	strb	r6, [r4, #31]
  ipr->next = reassdatagrams;
 801c1ce:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c1d0:	682b      	ldr	r3, [r5, #0]
 801c1d2:	68a9      	ldr	r1, [r5, #8]
 801c1d4:	686e      	ldr	r6, [r5, #4]
 801c1d6:	68ea      	ldr	r2, [r5, #12]
 801c1d8:	6121      	str	r1, [r4, #16]
 801c1da:	60a3      	str	r3, [r4, #8]
 801c1dc:	60e6      	str	r6, [r4, #12]
 801c1de:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 801c1e0:	4979      	ldr	r1, [pc, #484]	; (801c3c8 <ip4_reass+0x2e0>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c1e2:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 801c1e4:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c1e6:	61a3      	str	r3, [r4, #24]
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c1e8:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 801c1ea:	f013 0320 	ands.w	r3, r3, #32
 801c1ee:	9303      	str	r3, [sp, #12]
 801c1f0:	d109      	bne.n	801c206 <ip4_reass+0x11e>
    u16_t datagram_len = (u16_t)(offset + len);
 801c1f2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c1f6:	18d3      	adds	r3, r2, r3
 801c1f8:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c1fa:	429a      	cmp	r2, r3
 801c1fc:	d86a      	bhi.n	801c2d4 <ip4_reass+0x1ec>
 801c1fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c202:	4293      	cmp	r3, r2
 801c204:	d866      	bhi.n	801c2d4 <ip4_reass+0x1ec>
  fraghdr = (struct ip_hdr*)new_p->payload;
 801c206:	687e      	ldr	r6, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c208:	8870      	ldrh	r0, [r6, #2]
 801c20a:	f7f6 ff73 	bl	80130f4 <lwip_htons>
 801c20e:	7835      	ldrb	r5, [r6, #0]
 801c210:	f005 050f 	and.w	r5, r5, #15
 801c214:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c218:	88f0      	ldrh	r0, [r6, #6]
 801c21a:	f7f6 ff6b 	bl	80130f4 <lwip_htons>
 801c21e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801c222:	b2ad      	uxth	r5, r5
  iprh = (struct ip_reass_helper*)new_p->payload;
 801c224:	f8d7 9004 	ldr.w	r9, [r7, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801c228:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 801c22a:	2300      	movs	r3, #0
  iprh->end = offset + len;
 801c22c:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 801c230:	f889 3000 	strb.w	r3, [r9]
 801c234:	f889 3001 	strb.w	r3, [r9, #1]
 801c238:	f889 3002 	strb.w	r3, [r9, #2]
  iprh->end = offset + len;
 801c23c:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 801c240:	f889 3003 	strb.w	r3, [r9, #3]
  for (q = ipr->p; q != NULL;) {
 801c244:	6863      	ldr	r3, [r4, #4]
  iprh->end = offset + len;
 801c246:	f8a9 c006 	strh.w	ip, [r9, #6]
  iprh->start = offset;
 801c24a:	f8a9 0004 	strh.w	r0, [r9, #4]
  for (q = ipr->p; q != NULL;) {
 801c24e:	2b00      	cmp	r3, #0
 801c250:	f000 813c 	beq.w	801c4cc <ip4_reass+0x3e4>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801c254:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 801c256:	88aa      	ldrh	r2, [r5, #4]
 801c258:	4290      	cmp	r0, r2
 801c25a:	d36b      	bcc.n	801c334 <ip4_reass+0x24c>
    } else if (iprh->start == iprh_tmp->start) {
 801c25c:	d047      	beq.n	801c2ee <ip4_reass+0x206>
    } else if (iprh->start < iprh_tmp->end) {
 801c25e:	88eb      	ldrh	r3, [r5, #6]
 801c260:	4283      	cmp	r3, r0
 801c262:	d844      	bhi.n	801c2ee <ip4_reass+0x206>
    q = iprh_tmp->next_pbuf;
 801c264:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 801c266:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 801c268:	b17a      	cbz	r2, 801c28a <ip4_reass+0x1a2>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801c26a:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 801c26c:	8899      	ldrh	r1, [r3, #4]
 801c26e:	4288      	cmp	r0, r1
 801c270:	d371      	bcc.n	801c356 <ip4_reass+0x26e>
    } else if (iprh->start == iprh_tmp->start) {
 801c272:	d03c      	beq.n	801c2ee <ip4_reass+0x206>
    } else if (iprh->start < iprh_tmp->end) {
 801c274:	88da      	ldrh	r2, [r3, #6]
 801c276:	4282      	cmp	r2, r0
 801c278:	d839      	bhi.n	801c2ee <ip4_reass+0x206>
        if (iprh_prev->end != iprh_tmp->start) {
 801c27a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801c27c:	461d      	mov	r5, r3
 801c27e:	428a      	cmp	r2, r1
 801c280:	bf18      	it	ne
 801c282:	2600      	movne	r6, #0
    q = iprh_tmp->next_pbuf;
 801c284:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 801c286:	2a00      	cmp	r2, #0
 801c288:	d1ef      	bne.n	801c26a <ip4_reass+0x182>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c28a:	88eb      	ldrh	r3, [r5, #6]
 801c28c:	4298      	cmp	r0, r3
 801c28e:	f0c0 812a 	bcc.w	801c4e6 <ip4_reass+0x3fe>
      if (iprh_prev->end != iprh->start) {
 801c292:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 801c294:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 801c296:	d067      	beq.n	801c368 <ip4_reass+0x280>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c298:	9b03      	ldr	r3, [sp, #12]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	f000 80fc 	beq.w	801c498 <ip4_reass+0x3b0>
 801c2a0:	7fa3      	ldrb	r3, [r4, #30]
 801c2a2:	07da      	lsls	r2, r3, #31
 801c2a4:	d550      	bpl.n	801c348 <ip4_reass+0x260>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c2a6:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2aa:	449b      	add	fp, r3
 801c2ac:	f8aa b000 	strh.w	fp, [sl]
  return NULL;
 801c2b0:	2600      	movs	r6, #0
 801c2b2:	e018      	b.n	801c2e6 <ip4_reass+0x1fe>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c2b4:	4601      	mov	r1, r0
 801c2b6:	4628      	mov	r0, r5
 801c2b8:	f7ff fe8e 	bl	801bfd8 <ip_reass_remove_oldest_datagram>
 801c2bc:	b128      	cbz	r0, 801c2ca <ip4_reass+0x1e2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c2be:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2c2:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c2c4:	2b0a      	cmp	r3, #10
 801c2c6:	f77f af3e 	ble.w	801c146 <ip4_reass+0x5e>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801c2ca:	f8b8 303c 	ldrh.w	r3, [r8, #60]	; 0x3c
 801c2ce:	3301      	adds	r3, #1
 801c2d0:	f8a8 303c 	strh.w	r3, [r8, #60]	; 0x3c
  IPFRAG_STATS_INC(ip_frag.drop);
 801c2d4:	f8b8 3036 	ldrh.w	r3, [r8, #54]	; 0x36
  pbuf_free(p);
 801c2d8:	4638      	mov	r0, r7
  return NULL;
 801c2da:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801c2dc:	3301      	adds	r3, #1
 801c2de:	f8a8 3036 	strh.w	r3, [r8, #54]	; 0x36
  pbuf_free(p);
 801c2e2:	f7f8 faaf 	bl	8014844 <pbuf_free>
}
 801c2e6:	4630      	mov	r0, r6
 801c2e8:	b005      	add	sp, #20
 801c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801c2ee:	4638      	mov	r0, r7
 801c2f0:	f7f8 fc9c 	bl	8014c2c <pbuf_clen>
 801c2f4:	f8ba 3000 	ldrh.w	r3, [sl]
 801c2f8:	1a1b      	subs	r3, r3, r0
  pbuf_free(new_p);
 801c2fa:	4638      	mov	r0, r7
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801c2fc:	f8aa 3000 	strh.w	r3, [sl]
  pbuf_free(new_p);
 801c300:	f7f8 faa0 	bl	8014844 <pbuf_free>
 801c304:	e7e6      	b.n	801c2d4 <ip4_reass+0x1ec>
    IPFRAG_STATS_INC(ip_frag.err);
 801c306:	f8b8 3044 	ldrh.w	r3, [r8, #68]	; 0x44
 801c30a:	3301      	adds	r3, #1
 801c30c:	f8a8 3044 	strh.w	r3, [r8, #68]	; 0x44
    goto nullreturn;
 801c310:	e7e0      	b.n	801c2d4 <ip4_reass+0x1ec>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c312:	4659      	mov	r1, fp
 801c314:	4628      	mov	r0, r5
 801c316:	f7ff fe5f 	bl	801bfd8 <ip_reass_remove_oldest_datagram>
 801c31a:	4583      	cmp	fp, r0
 801c31c:	dcd5      	bgt.n	801c2ca <ip4_reass+0x1e2>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c31e:	f44f 7291 	mov.w	r2, #290	; 0x122
 801c322:	492a      	ldr	r1, [pc, #168]	; (801c3cc <ip4_reass+0x2e4>)
 801c324:	2005      	movs	r0, #5
 801c326:	f7f8 f871 	bl	801440c <memp_malloc_fn>
    if (ipr == NULL)
 801c32a:	4604      	mov	r4, r0
 801c32c:	2800      	cmp	r0, #0
 801c32e:	f47f af42 	bne.w	801c1b6 <ip4_reass+0xce>
 801c332:	e7ca      	b.n	801c2ca <ip4_reass+0x1e2>
        if (iprh->end > iprh_tmp->start) {
 801c334:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 801c336:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 801c33a:	d8d8      	bhi.n	801c2ee <ip4_reass+0x206>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c33c:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 801c33e:	6067      	str	r7, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c340:	b373      	cbz	r3, 801c3a0 <ip4_reass+0x2b8>
 801c342:	7fa3      	ldrb	r3, [r4, #30]
 801c344:	07db      	lsls	r3, r3, #31
 801c346:	d416      	bmi.n	801c376 <ip4_reass+0x28e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c348:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 801c34c:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c34e:	449b      	add	fp, r3
 801c350:	f8aa b000 	strh.w	fp, [sl]
 801c354:	e7c7      	b.n	801c2e6 <ip4_reass+0x1fe>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c356:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 801c358:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c35c:	88eb      	ldrh	r3, [r5, #6]
 801c35e:	d8c6      	bhi.n	801c2ee <ip4_reass+0x206>
 801c360:	4298      	cmp	r0, r3
 801c362:	d3c4      	bcc.n	801c2ee <ip4_reass+0x206>
        iprh_prev->next_pbuf = new_p;
 801c364:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 801c366:	d197      	bne.n	801c298 <ip4_reass+0x1b0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c368:	9b03      	ldr	r3, [sp, #12]
 801c36a:	b1bb      	cbz	r3, 801c39c <ip4_reass+0x2b4>
 801c36c:	7fa3      	ldrb	r3, [r4, #30]
 801c36e:	07d9      	lsls	r1, r3, #31
 801c370:	d5ea      	bpl.n	801c348 <ip4_reass+0x260>
    if (valid) {
 801c372:	2e00      	cmp	r6, #0
 801c374:	d097      	beq.n	801c2a6 <ip4_reass+0x1be>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c376:	6867      	ldr	r7, [r4, #4]
 801c378:	b9af      	cbnz	r7, 801c3a6 <ip4_reass+0x2be>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c37a:	f8ba 3000 	ldrh.w	r3, [sl]
 801c37e:	449b      	add	fp, r3
  if (is_last) {
 801c380:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c382:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801c386:	2b00      	cmp	r3, #0
 801c388:	d192      	bne.n	801c2b0 <ip4_reass+0x1c8>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c38a:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c38c:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c390:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801c394:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c396:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801c398:	83a2      	strh	r2, [r4, #28]
 801c39a:	e789      	b.n	801c2b0 <ip4_reass+0x1c8>
    if (valid) {
 801c39c:	2e00      	cmp	r6, #0
 801c39e:	d07b      	beq.n	801c498 <ip4_reass+0x3b0>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c3a0:	6867      	ldr	r7, [r4, #4]
 801c3a2:	2f00      	cmp	r7, #0
 801c3a4:	d078      	beq.n	801c498 <ip4_reass+0x3b0>
 801c3a6:	6878      	ldr	r0, [r7, #4]
 801c3a8:	8883      	ldrh	r3, [r0, #4]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d1e5      	bne.n	801c37a <ip4_reass+0x292>
        q = iprh->next_pbuf;
 801c3ae:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	f000 8086 	beq.w	801c4c4 <ip4_reass+0x3dc>
          iprh = (struct ip_reass_helper*)q->payload;
 801c3b8:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801c3ba:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801c3be:	88ab      	ldrh	r3, [r5, #4]
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d00f      	beq.n	801c3e4 <ip4_reass+0x2fc>
 801c3c4:	e7d9      	b.n	801c37a <ip4_reass+0x292>
 801c3c6:	bf00      	nop
 801c3c8:	200217c0 	.word	0x200217c0
 801c3cc:	08039b84 	.word	0x08039b84
 801c3d0:	20033a7c 	.word	0x20033a7c
 801c3d4:	200217bc 	.word	0x200217bc
          iprh = (struct ip_reass_helper*)q->payload;
 801c3d8:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801c3da:	88e9      	ldrh	r1, [r5, #6]
 801c3dc:	889a      	ldrh	r2, [r3, #4]
 801c3de:	461d      	mov	r5, r3
 801c3e0:	4291      	cmp	r1, r2
 801c3e2:	d1ca      	bne.n	801c37a <ip4_reass+0x292>
          q = iprh->next_pbuf;
 801c3e4:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1f6      	bne.n	801c3d8 <ip4_reass+0x2f0>
          LWIP_ASSERT("sanity check",
 801c3ea:	4285      	cmp	r5, r0
 801c3ec:	d10f      	bne.n	801c40e <ip4_reass+0x326>
 801c3ee:	4b48      	ldr	r3, [pc, #288]	; (801c510 <ip4_reass+0x428>)
 801c3f0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801c3f4:	4947      	ldr	r1, [pc, #284]	; (801c514 <ip4_reass+0x42c>)
 801c3f6:	4848      	ldr	r0, [pc, #288]	; (801c518 <ip4_reass+0x430>)
 801c3f8:	f001 f8f6 	bl	801d5e8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c3fc:	682b      	ldr	r3, [r5, #0]
 801c3fe:	b133      	cbz	r3, 801c40e <ip4_reass+0x326>
 801c400:	4b43      	ldr	r3, [pc, #268]	; (801c510 <ip4_reass+0x428>)
 801c402:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801c406:	4945      	ldr	r1, [pc, #276]	; (801c51c <ip4_reass+0x434>)
 801c408:	4843      	ldr	r0, [pc, #268]	; (801c518 <ip4_reass+0x430>)
 801c40a:	f001 f8ed 	bl	801d5e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c40e:	f8ba 3000 	ldrh.w	r3, [sl]
 801c412:	449b      	add	fp, r3
  if (is_last) {
 801c414:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c416:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d06e      	beq.n	801c4fc <ip4_reass+0x414>
 801c41e:	8ba2      	ldrh	r2, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c420:	4623      	mov	r3, r4
    ipr->datagram_len += IP_HLEN;
 801c422:	3214      	adds	r2, #20
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c424:	6861      	ldr	r1, [r4, #4]
    ipr->datagram_len += IP_HLEN;
 801c426:	83a2      	strh	r2, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c428:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c42c:	684f      	ldr	r7, [r1, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c42e:	685d      	ldr	r5, [r3, #4]
 801c430:	6898      	ldr	r0, [r3, #8]
 801c432:	68d9      	ldr	r1, [r3, #12]
 801c434:	607d      	str	r5, [r7, #4]
 801c436:	60f9      	str	r1, [r7, #12]
 801c438:	60b8      	str	r0, [r7, #8]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801c43a:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c43c:	603a      	str	r2, [r7, #0]
 801c43e:	691a      	ldr	r2, [r3, #16]
 801c440:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801c442:	8ba0      	ldrh	r0, [r4, #28]
 801c444:	f7f6 fe56 	bl	80130f4 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801c448:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801c44a:	8078      	strh	r0, [r7, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c44c:	2114      	movs	r1, #20
    IPH_OFFSET_SET(fraghdr, 0);
 801c44e:	71bb      	strb	r3, [r7, #6]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c450:	4638      	mov	r0, r7
    IPH_OFFSET_SET(fraghdr, 0);
 801c452:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c454:	72bb      	strb	r3, [r7, #10]
 801c456:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c458:	f7f7 fbb0 	bl	8013bbc <inet_chksum>
    p = ipr->p;
 801c45c:	6866      	ldr	r6, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801c45e:	8178      	strh	r0, [r7, #10]
    while (r != NULL) {
 801c460:	b165      	cbz	r5, 801c47c <ip4_reass+0x394>
      iprh = (struct ip_reass_helper*)r->payload;
 801c462:	686f      	ldr	r7, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 801c464:	f06f 0113 	mvn.w	r1, #19
 801c468:	4628      	mov	r0, r5
 801c46a:	f7f8 f9e3 	bl	8014834 <pbuf_header>
      pbuf_cat(p, r);
 801c46e:	4629      	mov	r1, r5
 801c470:	4630      	mov	r0, r6
 801c472:	f7f8 fbfb 	bl	8014c6c <pbuf_cat>
      r = iprh->next_pbuf;
 801c476:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 801c478:	2d00      	cmp	r5, #0
 801c47a:	d1f2      	bne.n	801c462 <ip4_reass+0x37a>
    if (ipr == reassdatagrams) {
 801c47c:	4b28      	ldr	r3, [pc, #160]	; (801c520 <ip4_reass+0x438>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	42a3      	cmp	r3, r4
 801c482:	d021      	beq.n	801c4c8 <ip4_reass+0x3e0>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c484:	b173      	cbz	r3, 801c4a4 <ip4_reass+0x3bc>
        if (ipr_prev->next == ipr) {
 801c486:	6819      	ldr	r1, [r3, #0]
 801c488:	428c      	cmp	r4, r1
 801c48a:	d00b      	beq.n	801c4a4 <ip4_reass+0x3bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c48c:	b159      	cbz	r1, 801c4a6 <ip4_reass+0x3be>
        if (ipr_prev->next == ipr) {
 801c48e:	680b      	ldr	r3, [r1, #0]
 801c490:	42a3      	cmp	r3, r4
 801c492:	d008      	beq.n	801c4a6 <ip4_reass+0x3be>
 801c494:	4619      	mov	r1, r3
 801c496:	e7f9      	b.n	801c48c <ip4_reass+0x3a4>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c498:	f8ba 3000 	ldrh.w	r3, [sl]
 801c49c:	449b      	add	fp, r3
 801c49e:	f8aa b000 	strh.w	fp, [sl]
 801c4a2:	e772      	b.n	801c38a <ip4_reass+0x2a2>
        if (ipr_prev->next == ipr) {
 801c4a4:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f7ff fce6 	bl	801be78 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 801c4ac:	4630      	mov	r0, r6
 801c4ae:	f7f8 fbbd 	bl	8014c2c <pbuf_clen>
 801c4b2:	f8ba 3000 	ldrh.w	r3, [sl]
 801c4b6:	1a18      	subs	r0, r3, r0
 801c4b8:	f8aa 0000 	strh.w	r0, [sl]
}
 801c4bc:	4630      	mov	r0, r6
 801c4be:	b005      	add	sp, #20
 801c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (q != NULL) {
 801c4c4:	464d      	mov	r5, r9
 801c4c6:	e790      	b.n	801c3ea <ip4_reass+0x302>
      ipr_prev = NULL;
 801c4c8:	2100      	movs	r1, #0
 801c4ca:	e7ec      	b.n	801c4a6 <ip4_reass+0x3be>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c4cc:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 801c4ce:	6067      	str	r7, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f43f af65 	beq.w	801c3a0 <ip4_reass+0x2b8>
 801c4d6:	7fa3      	ldrb	r3, [r4, #30]
 801c4d8:	07d8      	lsls	r0, r3, #31
 801c4da:	f57f af35 	bpl.w	801c348 <ip4_reass+0x260>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801c4de:	2f00      	cmp	r7, #0
 801c4e0:	f47f af61 	bne.w	801c3a6 <ip4_reass+0x2be>
 801c4e4:	e6df      	b.n	801c2a6 <ip4_reass+0x1be>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c4e6:	4b0a      	ldr	r3, [pc, #40]	; (801c510 <ip4_reass+0x428>)
 801c4e8:	f240 12ab 	movw	r2, #427	; 0x1ab
 801c4ec:	490d      	ldr	r1, [pc, #52]	; (801c524 <ip4_reass+0x43c>)
 801c4ee:	480a      	ldr	r0, [pc, #40]	; (801c518 <ip4_reass+0x430>)
 801c4f0:	f001 f87a 	bl	801d5e8 <iprintf>
 801c4f4:	88eb      	ldrh	r3, [r5, #6]
 801c4f6:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801c4fa:	e6ca      	b.n	801c292 <ip4_reass+0x1aa>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c4fc:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c4fe:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c502:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801c506:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c508:	77a3      	strb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801c50a:	b292      	uxth	r2, r2
 801c50c:	e788      	b.n	801c420 <ip4_reass+0x338>
 801c50e:	bf00      	nop
 801c510:	08039b84 	.word	0x08039b84
 801c514:	08039b50 	.word	0x08039b50
 801c518:	08021804 	.word	0x08021804
 801c51c:	08039b60 	.word	0x08039b60
 801c520:	200217c0 	.word	0x200217c0
 801c524:	08039b30 	.word	0x08039b30

0801c528 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c528:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
{
 801c52a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c52e:	f1b3 0614 	subs.w	r6, r3, #20
{
 801c532:	b08d      	sub	sp, #52	; 0x34
 801c534:	4605      	mov	r5, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c536:	bf48      	it	mi
 801c538:	f1a3 060d 	submi.w	r6, r3, #13
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c53c:	6843      	ldr	r3, [r0, #4]
{
 801c53e:	9106      	str	r1, [sp, #24]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c540:	f893 8000 	ldrb.w	r8, [r3]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c544:	10f6      	asrs	r6, r6, #3
  original_iphdr = (struct ip_hdr *)p->payload;
 801c546:	9303      	str	r3, [sp, #12]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c548:	f008 080f 	and.w	r8, r8, #15
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c54c:	b2b3      	uxth	r3, r6
{
 801c54e:	920b      	str	r2, [sp, #44]	; 0x2c
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c550:	ea4f 0888 	mov.w	r8, r8, lsl #2
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801c554:	930a      	str	r3, [sp, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c556:	f1b8 0f14 	cmp.w	r8, #20
 801c55a:	f040 80c7 	bne.w	801c6ec <ip4_frag+0x1c4>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c55e:	9b03      	ldr	r3, [sp, #12]
 801c560:	88d8      	ldrh	r0, [r3, #6]
 801c562:	f7f6 fdc7 	bl	80130f4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 801c566:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801c56a:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 801c56e:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801c570:	f040 80c6 	bne.w	801c700 <ip4_frag+0x1d8>

  left = p->tot_len - IP_HLEN;
 801c574:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801c578:	f1ab 0b14 	sub.w	fp, fp, #20
 801c57c:	fa1f f38b 	uxth.w	r3, fp
 801c580:	9304      	str	r3, [sp, #16]

  while (left) {
 801c582:	2b00      	cmp	r3, #0
 801c584:	f000 8096 	beq.w	801c6b4 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801c588:	b2b6      	uxth	r6, r6
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c58a:	f8df a198 	ldr.w	sl, [pc, #408]	; 801c724 <ip4_frag+0x1fc>
    fragsize = LWIP_MIN(left, nfb * 8);
 801c58e:	00f3      	lsls	r3, r6, #3
 801c590:	9308      	str	r3, [sp, #32]
 801c592:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c594:	2114      	movs	r1, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 801c596:	9a04      	ldr	r2, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c598:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 801c59a:	4293      	cmp	r3, r2
 801c59c:	bfa8      	it	ge
 801c59e:	4613      	movge	r3, r2
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c5a0:	2200      	movs	r2, #0
    fragsize = LWIP_MIN(left, nfb * 8);
 801c5a2:	461e      	mov	r6, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c5a4:	f7f8 f9bc 	bl	8014920 <pbuf_alloc>
    if (rambuf == NULL) {
 801c5a8:	4683      	mov	fp, r0
    fragsize = LWIP_MIN(left, nfb * 8);
 801c5aa:	b2b3      	uxth	r3, r6
 801c5ac:	9305      	str	r3, [sp, #20]
    if (rambuf == NULL) {
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	f000 8099 	beq.w	801c6e6 <ip4_frag+0x1be>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c5b4:	896b      	ldrh	r3, [r5, #10]
 801c5b6:	2b13      	cmp	r3, #19
 801c5b8:	f240 808d 	bls.w	801c6d6 <ip4_frag+0x1ae>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c5bc:	9903      	ldr	r1, [sp, #12]
 801c5be:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c5c2:	680a      	ldr	r2, [r1, #0]
 801c5c4:	684f      	ldr	r7, [r1, #4]
 801c5c6:	6888      	ldr	r0, [r1, #8]
 801c5c8:	68c9      	ldr	r1, [r1, #12]
 801c5ca:	601a      	str	r2, [r3, #0]
 801c5cc:	60d9      	str	r1, [r3, #12]
 801c5ce:	9903      	ldr	r1, [sp, #12]
 801c5d0:	605f      	str	r7, [r3, #4]
 801c5d2:	6098      	str	r0, [r3, #8]
 801c5d4:	690a      	ldr	r2, [r1, #16]
 801c5d6:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c5d8:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c5dc:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801c5de:	b37e      	cbz	r6, 801c640 <ip4_frag+0x118>
 801c5e0:	9e05      	ldr	r6, [sp, #20]
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801c5e2:	896c      	ldrh	r4, [r5, #10]
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801c5e4:	4651      	mov	r1, sl
 801c5e6:	f240 22a7 	movw	r2, #679	; 0x2a7
 801c5ea:	2006      	movs	r0, #6
      u16_t plen = p->len - poff;
 801c5ec:	eba4 0408 	sub.w	r4, r4, r8
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c5f0:	b2a4      	uxth	r4, r4
 801c5f2:	42b4      	cmp	r4, r6
 801c5f4:	bf28      	it	cs
 801c5f6:	4634      	movcs	r4, r6
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c5f8:	2c00      	cmp	r4, #0
 801c5fa:	d05d      	beq.n	801c6b8 <ip4_frag+0x190>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801c5fc:	f7f7 ff06 	bl	801440c <memp_malloc_fn>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c600:	2202      	movs	r2, #2
      if (pcr == NULL) {
 801c602:	4681      	mov	r9, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c604:	4621      	mov	r1, r4
 801c606:	4603      	mov	r3, r0
      if (pcr == NULL) {
 801c608:	2800      	cmp	r0, #0
 801c60a:	d05c      	beq.n	801c6c6 <ip4_frag+0x19e>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c60c:	9401      	str	r4, [sp, #4]
 801c60e:	2004      	movs	r0, #4
 801c610:	686f      	ldr	r7, [r5, #4]
 801c612:	4447      	add	r7, r8
 801c614:	9700      	str	r7, [sp, #0]
 801c616:	f7f8 f8d7 	bl	80147c8 <pbuf_alloced_custom>
        (u8_t*)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 801c61a:	4607      	mov	r7, r0
 801c61c:	2800      	cmp	r0, #0
 801c61e:	d04f      	beq.n	801c6c0 <ip4_frag+0x198>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801c620:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy -= newpbuflen;
 801c622:	1b36      	subs	r6, r6, r4
      pbuf_ref(p);
 801c624:	f7f8 fb0e 	bl	8014c44 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c628:	4b3a      	ldr	r3, [pc, #232]	; (801c714 <ip4_frag+0x1ec>)
      left_to_copy -= newpbuflen;
 801c62a:	b2b6      	uxth	r6, r6
      pcr->original = p;
 801c62c:	f8c9 5014 	str.w	r5, [r9, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c630:	f8c9 3010 	str.w	r3, [r9, #16]
      pbuf_cat(rambuf, newpbuf);
 801c634:	4639      	mov	r1, r7
 801c636:	4658      	mov	r0, fp
 801c638:	f7f8 fb18 	bl	8014c6c <pbuf_cat>
      if (left_to_copy) {
 801c63c:	2e00      	cmp	r6, #0
 801c63e:	d13b      	bne.n	801c6b8 <ip4_frag+0x190>
    }
    poff += newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c640:	9b06      	ldr	r3, [sp, #24]
    poff += newpbuflen;
 801c642:	44a0      	add	r8, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c644:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 801c646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    poff += newpbuflen;
 801c648:	fa1f f888 	uxth.w	r8, r8
    tmp = (IP_OFFMASK & (ofo));
 801c64c:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 801c650:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 801c652:	3b13      	subs	r3, #19
    if (!last) {
 801c654:	429a      	cmp	r2, r3
      tmp = tmp | IP_MF;
 801c656:	bfa8      	it	ge
 801c658:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c65c:	f7f6 fd4a 	bl	80130f4 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c660:	9f05      	ldr	r7, [sp, #20]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c662:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c664:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c666:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c668:	3314      	adds	r3, #20
 801c66a:	b298      	uxth	r0, r3
 801c66c:	f7f6 fd42 	bl	80130f4 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801c670:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801c672:	8070      	strh	r0, [r6, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c674:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 801c676:	72b3      	strb	r3, [r6, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c678:	4630      	mov	r0, r6
    IPH_CHKSUM_SET(iphdr, 0);
 801c67a:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c67c:	f7f7 fa9e 	bl	8013bbc <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c680:	9b06      	ldr	r3, [sp, #24]
 801c682:	4659      	mov	r1, fp
 801c684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c686:	695b      	ldr	r3, [r3, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801c688:	8170      	strh	r0, [r6, #10]
    netif->output(netif, rambuf, dest);
 801c68a:	9806      	ldr	r0, [sp, #24]
 801c68c:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801c68e:	4a22      	ldr	r2, [pc, #136]	; (801c718 <ip4_frag+0x1f0>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c690:	4658      	mov	r0, fp
    IPFRAG_STATS_INC(ip_frag.xmit);
 801c692:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801c694:	3301      	adds	r3, #1
 801c696:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801c698:	f7f8 f8d4 	bl	8014844 <pbuf_free>
    left -= fragsize;
 801c69c:	9b04      	ldr	r3, [sp, #16]
    ofo += nfb;
 801c69e:	9a07      	ldr	r2, [sp, #28]
 801c6a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    left -= fragsize;
 801c6a2:	1bdb      	subs	r3, r3, r7
    ofo += nfb;
 801c6a4:	440a      	add	r2, r1
    left -= fragsize;
 801c6a6:	b29b      	uxth	r3, r3
    ofo += nfb;
 801c6a8:	b292      	uxth	r2, r2
    left -= fragsize;
 801c6aa:	9304      	str	r3, [sp, #16]
    ofo += nfb;
 801c6ac:	9207      	str	r2, [sp, #28]
  while (left) {
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	f47f af6f 	bne.w	801c592 <ip4_frag+0x6a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c6b4:	2000      	movs	r0, #0
 801c6b6:	e00b      	b.n	801c6d0 <ip4_frag+0x1a8>
        p = p->next;
 801c6b8:	682d      	ldr	r5, [r5, #0]
 801c6ba:	f04f 0800 	mov.w	r8, #0
 801c6be:	e790      	b.n	801c5e2 <ip4_frag+0xba>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c6c0:	4648      	mov	r0, r9
 801c6c2:	f7ff fcc3 	bl	801c04c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c6c6:	4658      	mov	r0, fp
 801c6c8:	f7f8 f8bc 	bl	8014844 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c6cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c6d0:	b00d      	add	sp, #52	; 0x34
 801c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c6d6:	4653      	mov	r3, sl
 801c6d8:	f240 3209 	movw	r2, #777	; 0x309
 801c6dc:	490f      	ldr	r1, [pc, #60]	; (801c71c <ip4_frag+0x1f4>)
 801c6de:	4810      	ldr	r0, [pc, #64]	; (801c720 <ip4_frag+0x1f8>)
 801c6e0:	f000 ff82 	bl	801d5e8 <iprintf>
 801c6e4:	e76a      	b.n	801c5bc <ip4_frag+0x94>
  return ERR_MEM;
 801c6e6:	f04f 30ff 	mov.w	r0, #4294967295
 801c6ea:	e7f1      	b.n	801c6d0 <ip4_frag+0x1a8>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801c6ec:	4b0d      	ldr	r3, [pc, #52]	; (801c724 <ip4_frag+0x1fc>)
 801c6ee:	f240 22e1 	movw	r2, #737	; 0x2e1
 801c6f2:	490d      	ldr	r1, [pc, #52]	; (801c728 <ip4_frag+0x200>)
 801c6f4:	480a      	ldr	r0, [pc, #40]	; (801c720 <ip4_frag+0x1f8>)
 801c6f6:	f000 ff77 	bl	801d5e8 <iprintf>
 801c6fa:	f06f 0005 	mvn.w	r0, #5
 801c6fe:	e7e7      	b.n	801c6d0 <ip4_frag+0x1a8>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801c700:	4b08      	ldr	r3, [pc, #32]	; (801c724 <ip4_frag+0x1fc>)
 801c702:	f240 22e6 	movw	r2, #742	; 0x2e6
 801c706:	4909      	ldr	r1, [pc, #36]	; (801c72c <ip4_frag+0x204>)
 801c708:	4805      	ldr	r0, [pc, #20]	; (801c720 <ip4_frag+0x1f8>)
 801c70a:	f000 ff6d 	bl	801d5e8 <iprintf>
 801c70e:	f06f 0005 	mvn.w	r0, #5
 801c712:	e7dd      	b.n	801c6d0 <ip4_frag+0x1a8>
 801c714:	0801c085 	.word	0x0801c085
 801c718:	20033a7c 	.word	0x20033a7c
 801c71c:	08039b10 	.word	0x08039b10
 801c720:	08021804 	.word	0x08021804
 801c724:	08039b84 	.word	0x08039b84
 801c728:	08039acc 	.word	0x08039acc
 801c72c:	08039af4 	.word	0x08039af4

0801c730 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801c730:	8943      	ldrh	r3, [r0, #10]
 801c732:	2b0e      	cmp	r3, #14
{
 801c734:	b570      	push	{r4, r5, r6, lr}
 801c736:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801c738:	d915      	bls.n	801c766 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c73a:	6840      	ldr	r0, [r0, #4]
 801c73c:	460d      	mov	r5, r1

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c73e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801c740:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801c742:	07d9      	lsls	r1, r3, #31
 801c744:	d50a      	bpl.n	801c75c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c746:	2b01      	cmp	r3, #1
 801c748:	d03b      	beq.n	801c7c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c74a:	2206      	movs	r2, #6
 801c74c:	4925      	ldr	r1, [pc, #148]	; (801c7e4 <ethernet_input+0xb4>)
 801c74e:	f000 fbed 	bl	801cf2c <memcmp>
 801c752:	b918      	cbnz	r0, 801c75c <ethernet_input+0x2c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c754:	7b63      	ldrb	r3, [r4, #13]
 801c756:	f043 0308 	orr.w	r3, r3, #8
 801c75a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801c75c:	2e08      	cmp	r6, #8
 801c75e:	d020      	beq.n	801c7a2 <ethernet_input+0x72>
 801c760:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801c764:	d00b      	beq.n	801c77e <ethernet_input+0x4e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801c766:	4b20      	ldr	r3, [pc, #128]	; (801c7e8 <ethernet_input+0xb8>)
 801c768:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801c76a:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801c76c:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801c76e:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801c770:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801c772:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801c774:	4620      	mov	r0, r4
 801c776:	f7f8 f865 	bl	8014844 <pbuf_free>
  return ERR_OK;
}
 801c77a:	2000      	movs	r0, #0
 801c77c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c77e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801c782:	071b      	lsls	r3, r3, #28
 801c784:	d5f6      	bpl.n	801c774 <ethernet_input+0x44>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c786:	f06f 010d 	mvn.w	r1, #13
 801c78a:	4620      	mov	r0, r4
 801c78c:	f7f8 f852 	bl	8014834 <pbuf_header>
 801c790:	b310      	cbz	r0, 801c7d8 <ethernet_input+0xa8>
        ETHARP_STATS_INC(etharp.lenerr);
 801c792:	4b15      	ldr	r3, [pc, #84]	; (801c7e8 <ethernet_input+0xb8>)
 801c794:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801c796:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801c798:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801c79a:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801c79c:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801c79e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801c7a0:	e7e8      	b.n	801c774 <ethernet_input+0x44>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c7a2:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801c7a6:	071a      	lsls	r2, r3, #28
 801c7a8:	d5e4      	bpl.n	801c774 <ethernet_input+0x44>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c7aa:	f06f 010d 	mvn.w	r1, #13
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f7f8 f840 	bl	8014834 <pbuf_header>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	d1dd      	bne.n	801c774 <ethernet_input+0x44>
        ip4_input(p, netif);
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f7ff f892 	bl	801b8e4 <ip4_input>
      break;
 801c7c0:	e7db      	b.n	801c77a <ethernet_input+0x4a>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c7c2:	7843      	ldrb	r3, [r0, #1]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d1c9      	bne.n	801c75c <ethernet_input+0x2c>
 801c7c8:	7883      	ldrb	r3, [r0, #2]
 801c7ca:	2b5e      	cmp	r3, #94	; 0x5e
 801c7cc:	d1c6      	bne.n	801c75c <ethernet_input+0x2c>
        p->flags |= PBUF_FLAG_LLMCAST;
 801c7ce:	7b63      	ldrb	r3, [r4, #13]
 801c7d0:	f043 0310 	orr.w	r3, r3, #16
 801c7d4:	7363      	strb	r3, [r4, #13]
 801c7d6:	e7c1      	b.n	801c75c <ethernet_input+0x2c>
        etharp_input(p, netif);
 801c7d8:	4629      	mov	r1, r5
 801c7da:	4620      	mov	r0, r4
 801c7dc:	f7fe fc46 	bl	801b06c <etharp_input>
      break;
 801c7e0:	e7cb      	b.n	801c77a <ethernet_input+0x4a>
 801c7e2:	bf00      	nop
 801c7e4:	08039c44 	.word	0x08039c44
 801c7e8:	20033a7c 	.word	0x20033a7c

0801c7ec <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c7f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 801c7f8:	4616      	mov	r6, r2
 801c7fa:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801c7fc:	f7f6 fc7a 	bl	80130f4 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c800:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801c802:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c804:	4620      	mov	r0, r4
 801c806:	f7f8 f815 	bl	8014834 <pbuf_header>
 801c80a:	b9e0      	cbnz	r0, 801c846 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801c80c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801c80e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801c812:	683b      	ldr	r3, [r7, #0]
 801c814:	600b      	str	r3, [r1, #0]
 801c816:	88bb      	ldrh	r3, [r7, #4]
 801c818:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801c81a:	6833      	ldr	r3, [r6, #0]
 801c81c:	f8c1 3006 	str.w	r3, [r1, #6]
 801c820:	88b3      	ldrh	r3, [r6, #4]
 801c822:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c824:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801c828:	2b06      	cmp	r3, #6
 801c82a:	d006      	beq.n	801c83a <ethernet_output+0x4e>
 801c82c:	4b0a      	ldr	r3, [pc, #40]	; (801c858 <ethernet_output+0x6c>)
 801c82e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c832:	490a      	ldr	r1, [pc, #40]	; (801c85c <ethernet_output+0x70>)
 801c834:	480a      	ldr	r0, [pc, #40]	; (801c860 <ethernet_output+0x74>)
 801c836:	f000 fed7 	bl	801d5e8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c83a:	4621      	mov	r1, r4
 801c83c:	69ab      	ldr	r3, [r5, #24]
 801c83e:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801c840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801c844:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801c846:	4a07      	ldr	r2, [pc, #28]	; (801c864 <ethernet_output+0x78>)
}
 801c848:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801c84c:	8953      	ldrh	r3, [r2, #10]
 801c84e:	3301      	adds	r3, #1
 801c850:	8153      	strh	r3, [r2, #10]
}
 801c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c856:	bf00      	nop
 801c858:	08039c4c 	.word	0x08039c4c
 801c85c:	08039c84 	.word	0x08039c84
 801c860:	08021804 	.word	0x08021804
 801c864:	20033a7c 	.word	0x20033a7c

0801c868 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c868:	b510      	push	{r4, lr}
 801c86a:	b082      	sub	sp, #8
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c86c:	2304      	movs	r3, #4
{
 801c86e:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801c870:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c872:	4668      	mov	r0, sp
 801c874:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 801c876:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c878:	f7f3 f972 	bl	800fb60 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801c87c:	4a09      	ldr	r2, [pc, #36]	; (801c8a4 <sys_mbox_new+0x3c>)
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c87e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c880:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801c884:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801c888:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  if(*mbox == NULL)
 801c88c:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801c88e:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 801c890:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 801c892:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801c894:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801c896:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801c89a:	bf38      	it	cc
 801c89c:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 801c8a0:	b002      	add	sp, #8
 801c8a2:	bd10      	pop	{r4, pc}
 801c8a4:	20033a7c 	.word	0x20033a7c

0801c8a8 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801c8a8:	b538      	push	{r3, r4, r5, lr}
 801c8aa:	4605      	mov	r5, r0
 801c8ac:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c8b2:	4621      	mov	r1, r4
 801c8b4:	6828      	ldr	r0, [r5, #0]
 801c8b6:	f7f3 f959 	bl	800fb6c <osMessagePut>
 801c8ba:	2800      	cmp	r0, #0
 801c8bc:	d1f7      	bne.n	801c8ae <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801c8be:	bd38      	pop	{r3, r4, r5, pc}

0801c8c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c8c0:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c8c2:	6800      	ldr	r0, [r0, #0]
 801c8c4:	2200      	movs	r2, #0
 801c8c6:	f7f3 f951 	bl	800fb6c <osMessagePut>
 801c8ca:	b900      	cbnz	r0, 801c8ce <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801c8cc:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801c8ce:	4a04      	ldr	r2, [pc, #16]	; (801c8e0 <sys_mbox_trypost+0x20>)
    result = ERR_MEM;
 801c8d0:	f04f 30ff 	mov.w	r0, #4294967295
    lwip_stats.sys.mbox.err++;
 801c8d4:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 801c8d8:	3301      	adds	r3, #1
 801c8da:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 801c8de:	bd08      	pop	{r3, pc}
 801c8e0:	20033a7c 	.word	0x20033a7c

0801c8e4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8e6:	4615      	mov	r5, r2
 801c8e8:	b085      	sub	sp, #20
 801c8ea:	4606      	mov	r6, r0
 801c8ec:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c8ee:	f7f3 f863 	bl	800f9b8 <osKernelSysTick>
 801c8f2:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c8f4:	b15d      	cbz	r5, 801c90e <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c8f6:	462a      	mov	r2, r5
 801c8f8:	6831      	ldr	r1, [r6, #0]
 801c8fa:	a801      	add	r0, sp, #4
 801c8fc:	f7f3 f962 	bl	800fbc4 <osMessageGet>

    if(event.status == osEventMessage)
 801c900:	9b01      	ldr	r3, [sp, #4]
 801c902:	2b10      	cmp	r3, #16
 801c904:	d009      	beq.n	801c91a <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c906:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c90a:	b005      	add	sp, #20
 801c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801c90e:	6831      	ldr	r1, [r6, #0]
 801c910:	f04f 32ff 	mov.w	r2, #4294967295
 801c914:	a801      	add	r0, sp, #4
 801c916:	f7f3 f955 	bl	800fbc4 <osMessageGet>
    *msg = (void *)event.value.v;
 801c91a:	9b02      	ldr	r3, [sp, #8]
 801c91c:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801c91e:	f7f3 f84b 	bl	800f9b8 <osKernelSysTick>
 801c922:	1b00      	subs	r0, r0, r4
}
 801c924:	b005      	add	sp, #20
 801c926:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c928 <sys_mbox_valid>:
 801c928:	6800      	ldr	r0, [r0, #0]
 801c92a:	3000      	adds	r0, #0
 801c92c:	bf18      	it	ne
 801c92e:	2001      	movne	r0, #1
 801c930:	4770      	bx	lr
 801c932:	bf00      	nop

0801c934 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c934:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c936:	4803      	ldr	r0, [pc, #12]	; (801c944 <sys_init+0x10>)
 801c938:	f7f3 f878 	bl	800fa2c <osMutexCreate>
 801c93c:	4b02      	ldr	r3, [pc, #8]	; (801c948 <sys_init+0x14>)
 801c93e:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c940:	bd08      	pop	{r3, pc}
 801c942:	bf00      	nop
 801c944:	08039cc0 	.word	0x08039cc0
 801c948:	20033bdc 	.word	0x20033bdc

0801c94c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c94c:	b530      	push	{r4, r5, lr}
 801c94e:	b083      	sub	sp, #12

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c950:	2400      	movs	r4, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c952:	4605      	mov	r5, r0
  osMutexDef(MUTEX);
 801c954:	ab02      	add	r3, sp, #8
 801c956:	f843 4d04 	str.w	r4, [r3, #-4]!
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c95a:	4618      	mov	r0, r3
 801c95c:	f7f3 f866 	bl	800fa2c <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801c960:	4a0c      	ldr	r2, [pc, #48]	; (801c994 <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c962:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 801c964:	b170      	cbz	r0, 801c984 <sys_mutex_new+0x38>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801c966:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c96a:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801c96c:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 801c970:	3301      	adds	r3, #1
 801c972:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801c974:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 801c976:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801c97a:	bf38      	it	cc
 801c97c:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 801c980:	b003      	add	sp, #12
 801c982:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 801c984:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801c988:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 801c98c:	3301      	adds	r3, #1
 801c98e:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 801c992:	e7f5      	b.n	801c980 <sys_mutex_new+0x34>
 801c994:	20033a7c 	.word	0x20033a7c

0801c998 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c998:	6800      	ldr	r0, [r0, #0]
 801c99a:	f04f 31ff 	mov.w	r1, #4294967295
 801c99e:	f7f3 b849 	b.w	800fa34 <osMutexWait>
 801c9a2:	bf00      	nop

0801c9a4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801c9a4:	6800      	ldr	r0, [r0, #0]
 801c9a6:	f7f3 b871 	b.w	800fa8c <osMutexRelease>
 801c9aa:	bf00      	nop

0801c9ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c9ac:	b530      	push	{r4, r5, lr}
 801c9ae:	b087      	sub	sp, #28
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9b0:	2400      	movs	r4, #0
{
 801c9b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9b4:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 801c9b6:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9b8:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 801c9ba:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9bc:	9305      	str	r3, [sp, #20]
 801c9be:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c9c2:	9404      	str	r4, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 801c9c4:	f7f3 f800 	bl	800f9c8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c9c8:	b007      	add	sp, #28
 801c9ca:	bd30      	pop	{r4, r5, pc}

0801c9cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c9cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c9ce:	2200      	movs	r2, #0
 801c9d0:	4910      	ldr	r1, [pc, #64]	; (801ca14 <MX_USB_DEVICE_Init+0x48>)
 801c9d2:	4811      	ldr	r0, [pc, #68]	; (801ca18 <MX_USB_DEVICE_Init+0x4c>)
 801c9d4:	f7f2 fb7c 	bl	800f0d0 <USBD_Init>
 801c9d8:	b9c0      	cbnz	r0, 801ca0c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c9da:	4910      	ldr	r1, [pc, #64]	; (801ca1c <MX_USB_DEVICE_Init+0x50>)
 801c9dc:	480e      	ldr	r0, [pc, #56]	; (801ca18 <MX_USB_DEVICE_Init+0x4c>)
 801c9de:	f7f2 fb8d 	bl	800f0fc <USBD_RegisterClass>
 801c9e2:	b980      	cbnz	r0, 801ca06 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c9e4:	490e      	ldr	r1, [pc, #56]	; (801ca20 <MX_USB_DEVICE_Init+0x54>)
 801c9e6:	480c      	ldr	r0, [pc, #48]	; (801ca18 <MX_USB_DEVICE_Init+0x4c>)
 801c9e8:	f7f2 fb44 	bl	800f074 <USBD_CDC_RegisterInterface>
 801c9ec:	b940      	cbnz	r0, 801ca00 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c9ee:	480a      	ldr	r0, [pc, #40]	; (801ca18 <MX_USB_DEVICE_Init+0x4c>)
 801c9f0:	f7f2 fb8c 	bl	800f10c <USBD_Start>
 801c9f4:	b900      	cbnz	r0, 801c9f8 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c9f6:	bd08      	pop	{r3, pc}
 801c9f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801c9fc:	f7e4 bd90 	b.w	8001520 <Error_Handler>
    Error_Handler();
 801ca00:	f7e4 fd8e 	bl	8001520 <Error_Handler>
 801ca04:	e7f3      	b.n	801c9ee <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801ca06:	f7e4 fd8b 	bl	8001520 <Error_Handler>
 801ca0a:	e7eb      	b.n	801c9e4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801ca0c:	f7e4 fd88 	bl	8001520 <Error_Handler>
 801ca10:	e7e3      	b.n	801c9da <MX_USB_DEVICE_Init+0xe>
 801ca12:	bf00      	nop
 801ca14:	20000458 	.word	0x20000458
 801ca18:	20033be0 	.word	0x20033be0
 801ca1c:	2000032c 	.word	0x2000032c
 801ca20:	20000448 	.word	0x20000448

0801ca24 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801ca24:	2000      	movs	r0, #0
 801ca26:	4770      	bx	lr

0801ca28 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801ca28:	2000      	movs	r0, #0
 801ca2a:	4770      	bx	lr

0801ca2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ca2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ca2e:	4c05      	ldr	r4, [pc, #20]	; (801ca44 <CDC_Receive_FS+0x18>)
 801ca30:	4601      	mov	r1, r0
 801ca32:	4620      	mov	r0, r4
 801ca34:	f7f2 fb2e 	bl	800f094 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ca38:	4620      	mov	r0, r4
 801ca3a:	f7f2 fb31 	bl	800f0a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 801ca3e:	2000      	movs	r0, #0
 801ca40:	bd10      	pop	{r4, pc}
 801ca42:	bf00      	nop
 801ca44:	20033be0 	.word	0x20033be0

0801ca48 <CDC_Init_FS>:
{
 801ca48:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ca4a:	4c06      	ldr	r4, [pc, #24]	; (801ca64 <CDC_Init_FS+0x1c>)
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	4906      	ldr	r1, [pc, #24]	; (801ca68 <CDC_Init_FS+0x20>)
 801ca50:	4620      	mov	r0, r4
 801ca52:	f7f2 fb17 	bl	800f084 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ca56:	4620      	mov	r0, r4
 801ca58:	4904      	ldr	r1, [pc, #16]	; (801ca6c <CDC_Init_FS+0x24>)
 801ca5a:	f7f2 fb1b 	bl	800f094 <USBD_CDC_SetRxBuffer>
}
 801ca5e:	2000      	movs	r0, #0
 801ca60:	bd10      	pop	{r4, pc}
 801ca62:	bf00      	nop
 801ca64:	20033be0 	.word	0x20033be0
 801ca68:	2003467c 	.word	0x2003467c
 801ca6c:	20033e7c 	.word	0x20033e7c

0801ca70 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ca70:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801ca72:	4801      	ldr	r0, [pc, #4]	; (801ca78 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801ca74:	800b      	strh	r3, [r1, #0]
}
 801ca76:	4770      	bx	lr
 801ca78:	20000484 	.word	0x20000484

0801ca7c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ca7c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801ca7e:	4801      	ldr	r0, [pc, #4]	; (801ca84 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801ca80:	800b      	strh	r3, [r1, #0]
}
 801ca82:	4770      	bx	lr
 801ca84:	20000498 	.word	0x20000498

0801ca88 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801ca88:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801ca8a:	4801      	ldr	r0, [pc, #4]	; (801ca90 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 801ca8c:	800b      	strh	r3, [r1, #0]
}
 801ca8e:	4770      	bx	lr
 801ca90:	20000478 	.word	0x20000478

0801ca94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ca94:	3a01      	subs	r2, #1
 801ca96:	b430      	push	{r4, r5}
 801ca98:	b2d2      	uxtb	r2, r2
 801ca9a:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801ca9c:	2500      	movs	r5, #0
 801ca9e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 801caa2:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 801caa4:	704d      	strb	r5, [r1, #1]
 801caa6:	3102      	adds	r1, #2
    value = value << 4;
 801caa8:	0100      	lsls	r0, r0, #4
 801caaa:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 801caac:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801caae:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cab2:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801cab6:	bf94      	ite	ls
 801cab8:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cabc:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 801cac0:	428c      	cmp	r4, r1
 801cac2:	d1ee      	bne.n	801caa2 <IntToUnicode+0xe>
  }
}
 801cac4:	bc30      	pop	{r4, r5}
 801cac6:	4770      	bx	lr

0801cac8 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cac8:	480b      	ldr	r0, [pc, #44]	; (801caf8 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801caca:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cacc:	4b0b      	ldr	r3, [pc, #44]	; (801cafc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cace:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 801cad0:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 801cad2:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 801cad4:	18c0      	adds	r0, r0, r3
 801cad6:	d101      	bne.n	801cadc <USBD_FS_SerialStrDescriptor+0x14>
}
 801cad8:	4809      	ldr	r0, [pc, #36]	; (801cb00 <USBD_FS_SerialStrDescriptor+0x38>)
 801cada:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cadc:	4b09      	ldr	r3, [pc, #36]	; (801cb04 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cade:	2208      	movs	r2, #8
 801cae0:	4909      	ldr	r1, [pc, #36]	; (801cb08 <USBD_FS_SerialStrDescriptor+0x40>)
{
 801cae2:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cae4:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cae6:	f7ff ffd5 	bl	801ca94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801caea:	2204      	movs	r2, #4
 801caec:	4907      	ldr	r1, [pc, #28]	; (801cb0c <USBD_FS_SerialStrDescriptor+0x44>)
 801caee:	4620      	mov	r0, r4
 801caf0:	f7ff ffd0 	bl	801ca94 <IntToUnicode>
}
 801caf4:	4802      	ldr	r0, [pc, #8]	; (801cb00 <USBD_FS_SerialStrDescriptor+0x38>)
 801caf6:	bd10      	pop	{r4, pc}
 801caf8:	1ff0f420 	.word	0x1ff0f420
 801cafc:	1ff0f428 	.word	0x1ff0f428
 801cb00:	2000049c 	.word	0x2000049c
 801cb04:	1ff0f424 	.word	0x1ff0f424
 801cb08:	2000049e 	.word	0x2000049e
 801cb0c:	200004ae 	.word	0x200004ae

0801cb10 <USBD_FS_ManufacturerStrDescriptor>:
{
 801cb10:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cb12:	4c04      	ldr	r4, [pc, #16]	; (801cb24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801cb14:	460a      	mov	r2, r1
 801cb16:	4804      	ldr	r0, [pc, #16]	; (801cb28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801cb18:	4621      	mov	r1, r4
 801cb1a:	f7f2 feb5 	bl	800f888 <USBD_GetString>
}
 801cb1e:	4620      	mov	r0, r4
 801cb20:	bd10      	pop	{r4, pc}
 801cb22:	bf00      	nop
 801cb24:	20034e7c 	.word	0x20034e7c
 801cb28:	08039ce0 	.word	0x08039ce0

0801cb2c <USBD_FS_ProductStrDescriptor>:
{
 801cb2c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cb2e:	4c04      	ldr	r4, [pc, #16]	; (801cb40 <USBD_FS_ProductStrDescriptor+0x14>)
 801cb30:	460a      	mov	r2, r1
 801cb32:	4804      	ldr	r0, [pc, #16]	; (801cb44 <USBD_FS_ProductStrDescriptor+0x18>)
 801cb34:	4621      	mov	r1, r4
 801cb36:	f7f2 fea7 	bl	800f888 <USBD_GetString>
}
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	bd10      	pop	{r4, pc}
 801cb3e:	bf00      	nop
 801cb40:	20034e7c 	.word	0x20034e7c
 801cb44:	08039cf4 	.word	0x08039cf4

0801cb48 <USBD_FS_ConfigStrDescriptor>:
{
 801cb48:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cb4a:	4c04      	ldr	r4, [pc, #16]	; (801cb5c <USBD_FS_ConfigStrDescriptor+0x14>)
 801cb4c:	460a      	mov	r2, r1
 801cb4e:	4804      	ldr	r0, [pc, #16]	; (801cb60 <USBD_FS_ConfigStrDescriptor+0x18>)
 801cb50:	4621      	mov	r1, r4
 801cb52:	f7f2 fe99 	bl	800f888 <USBD_GetString>
}
 801cb56:	4620      	mov	r0, r4
 801cb58:	bd10      	pop	{r4, pc}
 801cb5a:	bf00      	nop
 801cb5c:	20034e7c 	.word	0x20034e7c
 801cb60:	08039cc4 	.word	0x08039cc4

0801cb64 <USBD_FS_InterfaceStrDescriptor>:
{
 801cb64:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cb66:	4c04      	ldr	r4, [pc, #16]	; (801cb78 <USBD_FS_InterfaceStrDescriptor+0x14>)
 801cb68:	460a      	mov	r2, r1
 801cb6a:	4804      	ldr	r0, [pc, #16]	; (801cb7c <USBD_FS_InterfaceStrDescriptor+0x18>)
 801cb6c:	4621      	mov	r1, r4
 801cb6e:	f7f2 fe8b 	bl	800f888 <USBD_GetString>
}
 801cb72:	4620      	mov	r0, r4
 801cb74:	bd10      	pop	{r4, pc}
 801cb76:	bf00      	nop
 801cb78:	20034e7c 	.word	0x20034e7c
 801cb7c:	08039cd0 	.word	0x08039cd0

0801cb80 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 801cb80:	6803      	ldr	r3, [r0, #0]
{
 801cb82:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 801cb84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801cb88:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cb8a:	f04f 0400 	mov.w	r4, #0
 801cb8e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801cb92:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801cb96:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 801cb98:	d001      	beq.n	801cb9e <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801cb9a:	b009      	add	sp, #36	; 0x24
 801cb9c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cb9e:	4d1e      	ldr	r5, [pc, #120]	; (801cc18 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cba0:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801cba2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cba6:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cba8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cbaa:	f043 0301 	orr.w	r3, r3, #1
 801cbae:	632b      	str	r3, [r5, #48]	; 0x30
 801cbb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cbb2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cbb4:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cbb6:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801cbba:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cbbc:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cbbe:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cbc0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cbc2:	4816      	ldr	r0, [pc, #88]	; (801cc1c <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cbc4:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cbc6:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cbc8:	f7ea fc00 	bl	80073cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801cbcc:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801cbd0:	a903      	add	r1, sp, #12
 801cbd2:	4812      	ldr	r0, [pc, #72]	; (801cc1c <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801cbd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cbd6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801cbda:	f7ea fbf7 	bl	80073cc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cbde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cbe0:	4622      	mov	r2, r4
 801cbe2:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cbe8:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cbea:	636b      	str	r3, [r5, #52]	; 0x34
 801cbec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801cbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cbf2:	9301      	str	r3, [sp, #4]
 801cbf4:	9b01      	ldr	r3, [sp, #4]
 801cbf6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801cbf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cbfc:	646b      	str	r3, [r5, #68]	; 0x44
 801cbfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801cc00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cc04:	9302      	str	r3, [sp, #8]
 801cc06:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801cc08:	f7e8 fa4c 	bl	80050a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801cc0c:	2043      	movs	r0, #67	; 0x43
 801cc0e:	f7e8 fa8f 	bl	8005130 <HAL_NVIC_EnableIRQ>
}
 801cc12:	b009      	add	sp, #36	; 0x24
 801cc14:	bd30      	pop	{r4, r5, pc}
 801cc16:	bf00      	nop
 801cc18:	40023800 	.word	0x40023800
 801cc1c:	40020000 	.word	0x40020000

0801cc20 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cc20:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801cc24:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cc28:	f7f2 ba88 	b.w	800f13c <USBD_LL_SetupStage>

0801cc2c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cc2c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801cc30:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cc34:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cc38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801cc3c:	f7f2 baae 	b.w	800f19c <USBD_LL_DataOutStage>

0801cc40 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cc40:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801cc44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801cc48:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cc4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cc4e:	f7f2 bae5 	b.w	800f21c <USBD_LL_DataInStage>
 801cc52:	bf00      	nop

0801cc54 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cc54:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cc58:	f7f2 bb78 	b.w	800f34c <USBD_LL_SOF>

0801cc5c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cc5c:	68c1      	ldr	r1, [r0, #12]
{
 801cc5e:	b510      	push	{r4, lr}
 801cc60:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cc62:	b121      	cbz	r1, 801cc6e <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cc64:	2902      	cmp	r1, #2
 801cc66:	d00c      	beq.n	801cc82 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801cc68:	f7e4 fc5a 	bl	8001520 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cc6c:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cc6e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 801cc72:	f7f2 fb55 	bl	800f320 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cc76:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 801cc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cc7e:	f7f2 bb27 	b.w	800f2d0 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 801cc82:	2101      	movs	r1, #1
 801cc84:	e7f3      	b.n	801cc6e <HAL_PCD_ResetCallback+0x12>
 801cc86:	bf00      	nop

0801cc88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cc88:	b510      	push	{r4, lr}
 801cc8a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cc8c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cc90:	f7f2 fb4a 	bl	800f328 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cc94:	6822      	ldr	r2, [r4, #0]
 801cc96:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801cc9a:	f043 0301 	orr.w	r3, r3, #1
 801cc9e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cca2:	6a23      	ldr	r3, [r4, #32]
 801cca4:	b123      	cbz	r3, 801ccb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cca6:	4a03      	ldr	r2, [pc, #12]	; (801ccb4 <HAL_PCD_SuspendCallback+0x2c>)
 801cca8:	6913      	ldr	r3, [r2, #16]
 801ccaa:	f043 0306 	orr.w	r3, r3, #6
 801ccae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ccb0:	bd10      	pop	{r4, pc}
 801ccb2:	bf00      	nop
 801ccb4:	e000ed00 	.word	0xe000ed00

0801ccb8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ccb8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801ccbc:	f7f2 bb3e 	b.w	800f33c <USBD_LL_Resume>

0801ccc0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ccc0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801ccc4:	f7f2 bb52 	b.w	800f36c <USBD_LL_IsoOUTIncomplete>

0801ccc8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ccc8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801cccc:	f7f2 bb4c 	b.w	800f368 <USBD_LL_IsoINIncomplete>

0801ccd0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ccd0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801ccd4:	f7f2 bb4c 	b.w	800f370 <USBD_LL_DevConnected>

0801ccd8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ccd8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801ccdc:	f7f2 bb4a 	b.w	800f374 <USBD_LL_DevDisconnected>

0801cce0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801cce0:	7802      	ldrb	r2, [r0, #0]
 801cce2:	b10a      	cbz	r2, 801cce8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 801cce4:	2000      	movs	r0, #0
 801cce6:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 801cce8:	4b15      	ldr	r3, [pc, #84]	; (801cd40 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801ccea:	2101      	movs	r1, #1
{
 801ccec:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ccee:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ccf0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801ccf4:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801ccf6:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801ccfa:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ccfe:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801cd00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801cd02:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801cd04:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801cd06:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801cd08:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801cd0c:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801cd10:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801cd14:	f7eb fab8 	bl	8008288 <HAL_PCD_Init>
 801cd18:	b978      	cbnz	r0, 801cd3a <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801cd1a:	2180      	movs	r1, #128	; 0x80
 801cd1c:	4808      	ldr	r0, [pc, #32]	; (801cd40 <USBD_LL_Init+0x60>)
 801cd1e:	f7ec f873 	bl	8008e08 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801cd22:	2240      	movs	r2, #64	; 0x40
 801cd24:	2100      	movs	r1, #0
 801cd26:	4806      	ldr	r0, [pc, #24]	; (801cd40 <USBD_LL_Init+0x60>)
 801cd28:	f7ec f84a 	bl	8008dc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801cd2c:	2280      	movs	r2, #128	; 0x80
 801cd2e:	2101      	movs	r1, #1
 801cd30:	4803      	ldr	r0, [pc, #12]	; (801cd40 <USBD_LL_Init+0x60>)
 801cd32:	f7ec f845 	bl	8008dc0 <HAL_PCDEx_SetTxFiFo>
}
 801cd36:	2000      	movs	r0, #0
 801cd38:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801cd3a:	f7e4 fbf1 	bl	8001520 <Error_Handler>
 801cd3e:	e7ec      	b.n	801cd1a <USBD_LL_Init+0x3a>
 801cd40:	2003507c 	.word	0x2003507c

0801cd44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cd44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801cd46:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801cd4a:	f7eb fb41 	bl	80083d0 <HAL_PCD_Start>
 801cd4e:	2803      	cmp	r0, #3
 801cd50:	d802      	bhi.n	801cd58 <USBD_LL_Start+0x14>
 801cd52:	4b02      	ldr	r3, [pc, #8]	; (801cd5c <USBD_LL_Start+0x18>)
 801cd54:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801cd56:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801cd58:	2002      	movs	r0, #2
}
 801cd5a:	bd08      	pop	{r3, pc}
 801cd5c:	08039d0c 	.word	0x08039d0c

0801cd60 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cd60:	b510      	push	{r4, lr}
 801cd62:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cd64:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801cd68:	4613      	mov	r3, r2
 801cd6a:	4622      	mov	r2, r4
 801cd6c:	f7eb fee4 	bl	8008b38 <HAL_PCD_EP_Open>
 801cd70:	2803      	cmp	r0, #3
 801cd72:	d802      	bhi.n	801cd7a <USBD_LL_OpenEP+0x1a>
 801cd74:	4b02      	ldr	r3, [pc, #8]	; (801cd80 <USBD_LL_OpenEP+0x20>)
 801cd76:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801cd78:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cd7a:	2002      	movs	r0, #2
}
 801cd7c:	bd10      	pop	{r4, pc}
 801cd7e:	bf00      	nop
 801cd80:	08039d0c 	.word	0x08039d0c

0801cd84 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cd84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801cd8a:	f7eb ff0f 	bl	8008bac <HAL_PCD_EP_Close>
 801cd8e:	2803      	cmp	r0, #3
 801cd90:	d802      	bhi.n	801cd98 <USBD_LL_CloseEP+0x14>
 801cd92:	4b02      	ldr	r3, [pc, #8]	; (801cd9c <USBD_LL_CloseEP+0x18>)
 801cd94:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801cd96:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801cd98:	2002      	movs	r0, #2
}
 801cd9a:	bd08      	pop	{r3, pc}
 801cd9c:	08039d0c 	.word	0x08039d0c

0801cda0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cda0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cda2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801cda6:	f7eb ff8b 	bl	8008cc0 <HAL_PCD_EP_SetStall>
 801cdaa:	2803      	cmp	r0, #3
 801cdac:	d802      	bhi.n	801cdb4 <USBD_LL_StallEP+0x14>
 801cdae:	4b02      	ldr	r3, [pc, #8]	; (801cdb8 <USBD_LL_StallEP+0x18>)
 801cdb0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801cdb2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801cdb4:	2002      	movs	r0, #2
}
 801cdb6:	bd08      	pop	{r3, pc}
 801cdb8:	08039d0c 	.word	0x08039d0c

0801cdbc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cdbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cdbe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801cdc2:	f7eb ffc1 	bl	8008d48 <HAL_PCD_EP_ClrStall>
 801cdc6:	2803      	cmp	r0, #3
 801cdc8:	d802      	bhi.n	801cdd0 <USBD_LL_ClearStallEP+0x14>
 801cdca:	4b02      	ldr	r3, [pc, #8]	; (801cdd4 <USBD_LL_ClearStallEP+0x18>)
 801cdcc:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801cdce:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cdd0:	2002      	movs	r0, #2
}
 801cdd2:	bd08      	pop	{r3, pc}
 801cdd4:	08039d0c 	.word	0x08039d0c

0801cdd8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801cdd8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801cdda:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 801cdde:	d406      	bmi.n	801cdee <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cde0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801cde4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801cde8:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 801cdec:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cdee:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801cdf2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801cdf6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801cdfa:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 801cdfe:	4770      	bx	lr

0801ce00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ce00:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ce02:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ce06:	f7eb fe83 	bl	8008b10 <HAL_PCD_SetAddress>
 801ce0a:	2803      	cmp	r0, #3
 801ce0c:	d802      	bhi.n	801ce14 <USBD_LL_SetUSBAddress+0x14>
 801ce0e:	4b02      	ldr	r3, [pc, #8]	; (801ce18 <USBD_LL_SetUSBAddress+0x18>)
 801ce10:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801ce12:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ce14:	2002      	movs	r0, #2
}
 801ce16:	bd08      	pop	{r3, pc}
 801ce18:	08039d0c 	.word	0x08039d0c

0801ce1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ce1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ce1e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ce22:	f7eb ff29 	bl	8008c78 <HAL_PCD_EP_Transmit>
 801ce26:	2803      	cmp	r0, #3
 801ce28:	d802      	bhi.n	801ce30 <USBD_LL_Transmit+0x14>
 801ce2a:	4b02      	ldr	r3, [pc, #8]	; (801ce34 <USBD_LL_Transmit+0x18>)
 801ce2c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801ce2e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ce30:	2002      	movs	r0, #2
}
 801ce32:	bd08      	pop	{r3, pc}
 801ce34:	08039d0c 	.word	0x08039d0c

0801ce38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ce38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ce3a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ce3e:	f7eb fee9 	bl	8008c14 <HAL_PCD_EP_Receive>
 801ce42:	2803      	cmp	r0, #3
 801ce44:	d802      	bhi.n	801ce4c <USBD_LL_PrepareReceive+0x14>
 801ce46:	4b02      	ldr	r3, [pc, #8]	; (801ce50 <USBD_LL_PrepareReceive+0x18>)
 801ce48:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801ce4a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ce4c:	2002      	movs	r0, #2
}
 801ce4e:	bd08      	pop	{r3, pc}
 801ce50:	08039d0c 	.word	0x08039d0c

0801ce54 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ce54:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ce58:	f7eb bf04 	b.w	8008c64 <HAL_PCD_EP_GetRxCount>

0801ce5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801ce5c:	b510      	push	{r4, lr}
 801ce5e:	4604      	mov	r4, r0
  switch (msg)
 801ce60:	b1a1      	cbz	r1, 801ce8c <HAL_PCDEx_LPM_Callback+0x30>
 801ce62:	2901      	cmp	r1, #1
 801ce64:	d111      	bne.n	801ce8a <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;

  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ce66:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801ce68:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ce6c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801ce70:	f043 0301 	orr.w	r3, r3, #1
 801ce74:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801ce78:	f7f2 fa56 	bl	800f328 <USBD_LL_Suspend>

    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 801ce7c:	6a23      	ldr	r3, [r4, #32]
 801ce7e:	b123      	cbz	r3, 801ce8a <HAL_PCDEx_LPM_Callback+0x2e>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ce80:	4a0d      	ldr	r2, [pc, #52]	; (801ceb8 <HAL_PCDEx_LPM_Callback+0x5c>)
 801ce82:	6913      	ldr	r3, [r2, #16]
 801ce84:	f043 0306 	orr.w	r3, r3, #6
 801ce88:	6113      	str	r3, [r2, #16]
    }
    break;
  }
}
 801ce8a:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801ce8c:	6a03      	ldr	r3, [r0, #32]
 801ce8e:	b133      	cbz	r3, 801ce9e <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801ce90:	f7e4 fb4e 	bl	8001530 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ce94:	4a08      	ldr	r2, [pc, #32]	; (801ceb8 <HAL_PCDEx_LPM_Callback+0x5c>)
 801ce96:	6913      	ldr	r3, [r2, #16]
 801ce98:	f023 0306 	bic.w	r3, r3, #6
 801ce9c:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801ce9e:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801cea0:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801cea4:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801cea8:	f023 0301 	bic.w	r3, r3, #1
}
 801ceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801ceb0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801ceb4:	f7f2 ba42 	b.w	800f33c <USBD_LL_Resume>
 801ceb8:	e000ed00 	.word	0xe000ed00

0801cebc <atoi>:
 801cebc:	220a      	movs	r2, #10
 801cebe:	2100      	movs	r1, #0
 801cec0:	f000 be0e 	b.w	801dae0 <strtol>

0801cec4 <__libc_init_array>:
 801cec4:	b570      	push	{r4, r5, r6, lr}
 801cec6:	4e0d      	ldr	r6, [pc, #52]	; (801cefc <__libc_init_array+0x38>)
 801cec8:	4c0d      	ldr	r4, [pc, #52]	; (801cf00 <__libc_init_array+0x3c>)
 801ceca:	1ba4      	subs	r4, r4, r6
 801cecc:	10a4      	asrs	r4, r4, #2
 801cece:	2500      	movs	r5, #0
 801ced0:	42a5      	cmp	r5, r4
 801ced2:	d109      	bne.n	801cee8 <__libc_init_array+0x24>
 801ced4:	4e0b      	ldr	r6, [pc, #44]	; (801cf04 <__libc_init_array+0x40>)
 801ced6:	4c0c      	ldr	r4, [pc, #48]	; (801cf08 <__libc_init_array+0x44>)
 801ced8:	f002 fc86 	bl	801f7e8 <_init>
 801cedc:	1ba4      	subs	r4, r4, r6
 801cede:	10a4      	asrs	r4, r4, #2
 801cee0:	2500      	movs	r5, #0
 801cee2:	42a5      	cmp	r5, r4
 801cee4:	d105      	bne.n	801cef2 <__libc_init_array+0x2e>
 801cee6:	bd70      	pop	{r4, r5, r6, pc}
 801cee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ceec:	4798      	blx	r3
 801ceee:	3501      	adds	r5, #1
 801cef0:	e7ee      	b.n	801ced0 <__libc_init_array+0xc>
 801cef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cef6:	4798      	blx	r3
 801cef8:	3501      	adds	r5, #1
 801cefa:	e7f2      	b.n	801cee2 <__libc_init_array+0x1e>
 801cefc:	08039fd4 	.word	0x08039fd4
 801cf00:	08039fd4 	.word	0x08039fd4
 801cf04:	08039fd4 	.word	0x08039fd4
 801cf08:	08039fd8 	.word	0x08039fd8

0801cf0c <malloc>:
 801cf0c:	4b02      	ldr	r3, [pc, #8]	; (801cf18 <malloc+0xc>)
 801cf0e:	4601      	mov	r1, r0
 801cf10:	6818      	ldr	r0, [r3, #0]
 801cf12:	f000 bb0f 	b.w	801d534 <_malloc_r>
 801cf16:	bf00      	nop
 801cf18:	200004b8 	.word	0x200004b8

0801cf1c <free>:
 801cf1c:	4b02      	ldr	r3, [pc, #8]	; (801cf28 <free+0xc>)
 801cf1e:	4601      	mov	r1, r0
 801cf20:	6818      	ldr	r0, [r3, #0]
 801cf22:	f000 bab9 	b.w	801d498 <_free_r>
 801cf26:	bf00      	nop
 801cf28:	200004b8 	.word	0x200004b8

0801cf2c <memcmp>:
 801cf2c:	b530      	push	{r4, r5, lr}
 801cf2e:	2400      	movs	r4, #0
 801cf30:	42a2      	cmp	r2, r4
 801cf32:	d101      	bne.n	801cf38 <memcmp+0xc>
 801cf34:	2000      	movs	r0, #0
 801cf36:	e007      	b.n	801cf48 <memcmp+0x1c>
 801cf38:	5d03      	ldrb	r3, [r0, r4]
 801cf3a:	3401      	adds	r4, #1
 801cf3c:	190d      	adds	r5, r1, r4
 801cf3e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801cf42:	42ab      	cmp	r3, r5
 801cf44:	d0f4      	beq.n	801cf30 <memcmp+0x4>
 801cf46:	1b58      	subs	r0, r3, r5
 801cf48:	bd30      	pop	{r4, r5, pc}

0801cf4a <memcpy>:
 801cf4a:	b510      	push	{r4, lr}
 801cf4c:	1e43      	subs	r3, r0, #1
 801cf4e:	440a      	add	r2, r1
 801cf50:	4291      	cmp	r1, r2
 801cf52:	d100      	bne.n	801cf56 <memcpy+0xc>
 801cf54:	bd10      	pop	{r4, pc}
 801cf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cf5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf5e:	e7f7      	b.n	801cf50 <memcpy+0x6>

0801cf60 <memset>:
 801cf60:	4402      	add	r2, r0
 801cf62:	4603      	mov	r3, r0
 801cf64:	4293      	cmp	r3, r2
 801cf66:	d100      	bne.n	801cf6a <memset+0xa>
 801cf68:	4770      	bx	lr
 801cf6a:	f803 1b01 	strb.w	r1, [r3], #1
 801cf6e:	e7f9      	b.n	801cf64 <memset+0x4>

0801cf70 <validate_structure>:
 801cf70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf72:	6801      	ldr	r1, [r0, #0]
 801cf74:	293b      	cmp	r1, #59	; 0x3b
 801cf76:	4604      	mov	r4, r0
 801cf78:	d911      	bls.n	801cf9e <validate_structure+0x2e>
 801cf7a:	223c      	movs	r2, #60	; 0x3c
 801cf7c:	4668      	mov	r0, sp
 801cf7e:	f001 f8d5 	bl	801e12c <div>
 801cf82:	9a01      	ldr	r2, [sp, #4]
 801cf84:	6863      	ldr	r3, [r4, #4]
 801cf86:	9900      	ldr	r1, [sp, #0]
 801cf88:	2a00      	cmp	r2, #0
 801cf8a:	440b      	add	r3, r1
 801cf8c:	6063      	str	r3, [r4, #4]
 801cf8e:	bfbb      	ittet	lt
 801cf90:	323c      	addlt	r2, #60	; 0x3c
 801cf92:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801cf96:	6022      	strge	r2, [r4, #0]
 801cf98:	6022      	strlt	r2, [r4, #0]
 801cf9a:	bfb8      	it	lt
 801cf9c:	6063      	strlt	r3, [r4, #4]
 801cf9e:	6861      	ldr	r1, [r4, #4]
 801cfa0:	293b      	cmp	r1, #59	; 0x3b
 801cfa2:	d911      	bls.n	801cfc8 <validate_structure+0x58>
 801cfa4:	223c      	movs	r2, #60	; 0x3c
 801cfa6:	4668      	mov	r0, sp
 801cfa8:	f001 f8c0 	bl	801e12c <div>
 801cfac:	9a01      	ldr	r2, [sp, #4]
 801cfae:	68a3      	ldr	r3, [r4, #8]
 801cfb0:	9900      	ldr	r1, [sp, #0]
 801cfb2:	2a00      	cmp	r2, #0
 801cfb4:	440b      	add	r3, r1
 801cfb6:	60a3      	str	r3, [r4, #8]
 801cfb8:	bfbb      	ittet	lt
 801cfba:	323c      	addlt	r2, #60	; 0x3c
 801cfbc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801cfc0:	6062      	strge	r2, [r4, #4]
 801cfc2:	6062      	strlt	r2, [r4, #4]
 801cfc4:	bfb8      	it	lt
 801cfc6:	60a3      	strlt	r3, [r4, #8]
 801cfc8:	68a1      	ldr	r1, [r4, #8]
 801cfca:	2917      	cmp	r1, #23
 801cfcc:	d911      	bls.n	801cff2 <validate_structure+0x82>
 801cfce:	2218      	movs	r2, #24
 801cfd0:	4668      	mov	r0, sp
 801cfd2:	f001 f8ab 	bl	801e12c <div>
 801cfd6:	9a01      	ldr	r2, [sp, #4]
 801cfd8:	68e3      	ldr	r3, [r4, #12]
 801cfda:	9900      	ldr	r1, [sp, #0]
 801cfdc:	2a00      	cmp	r2, #0
 801cfde:	440b      	add	r3, r1
 801cfe0:	60e3      	str	r3, [r4, #12]
 801cfe2:	bfbb      	ittet	lt
 801cfe4:	3218      	addlt	r2, #24
 801cfe6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801cfea:	60a2      	strge	r2, [r4, #8]
 801cfec:	60a2      	strlt	r2, [r4, #8]
 801cfee:	bfb8      	it	lt
 801cff0:	60e3      	strlt	r3, [r4, #12]
 801cff2:	6921      	ldr	r1, [r4, #16]
 801cff4:	290b      	cmp	r1, #11
 801cff6:	d911      	bls.n	801d01c <validate_structure+0xac>
 801cff8:	220c      	movs	r2, #12
 801cffa:	4668      	mov	r0, sp
 801cffc:	f001 f896 	bl	801e12c <div>
 801d000:	9a01      	ldr	r2, [sp, #4]
 801d002:	6963      	ldr	r3, [r4, #20]
 801d004:	9900      	ldr	r1, [sp, #0]
 801d006:	2a00      	cmp	r2, #0
 801d008:	440b      	add	r3, r1
 801d00a:	6163      	str	r3, [r4, #20]
 801d00c:	bfbb      	ittet	lt
 801d00e:	320c      	addlt	r2, #12
 801d010:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801d014:	6122      	strge	r2, [r4, #16]
 801d016:	6122      	strlt	r2, [r4, #16]
 801d018:	bfb8      	it	lt
 801d01a:	6163      	strlt	r3, [r4, #20]
 801d01c:	6963      	ldr	r3, [r4, #20]
 801d01e:	0799      	lsls	r1, r3, #30
 801d020:	d120      	bne.n	801d064 <validate_structure+0xf4>
 801d022:	2164      	movs	r1, #100	; 0x64
 801d024:	fb93 f2f1 	sdiv	r2, r3, r1
 801d028:	fb01 3212 	mls	r2, r1, r2, r3
 801d02c:	b9e2      	cbnz	r2, 801d068 <validate_structure+0xf8>
 801d02e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801d032:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d036:	fb93 f2f1 	sdiv	r2, r3, r1
 801d03a:	fb01 3312 	mls	r3, r1, r2, r3
 801d03e:	2b00      	cmp	r3, #0
 801d040:	bf14      	ite	ne
 801d042:	231c      	movne	r3, #28
 801d044:	231d      	moveq	r3, #29
 801d046:	68e2      	ldr	r2, [r4, #12]
 801d048:	2a00      	cmp	r2, #0
 801d04a:	dc0f      	bgt.n	801d06c <validate_structure+0xfc>
 801d04c:	4f34      	ldr	r7, [pc, #208]	; (801d120 <validate_structure+0x1b0>)
 801d04e:	260b      	movs	r6, #11
 801d050:	2064      	movs	r0, #100	; 0x64
 801d052:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801d056:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801d05a:	f1bc 0f00 	cmp.w	ip, #0
 801d05e:	dd14      	ble.n	801d08a <validate_structure+0x11a>
 801d060:	b003      	add	sp, #12
 801d062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d064:	231c      	movs	r3, #28
 801d066:	e7ee      	b.n	801d046 <validate_structure+0xd6>
 801d068:	231d      	movs	r3, #29
 801d06a:	e7ec      	b.n	801d046 <validate_structure+0xd6>
 801d06c:	4f2c      	ldr	r7, [pc, #176]	; (801d120 <validate_structure+0x1b0>)
 801d06e:	f04f 0c00 	mov.w	ip, #0
 801d072:	2564      	movs	r5, #100	; 0x64
 801d074:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801d078:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801d07c:	2a01      	cmp	r2, #1
 801d07e:	d02f      	beq.n	801d0e0 <validate_structure+0x170>
 801d080:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801d084:	4281      	cmp	r1, r0
 801d086:	dc2e      	bgt.n	801d0e6 <validate_structure+0x176>
 801d088:	e7ea      	b.n	801d060 <validate_structure+0xf0>
 801d08a:	6921      	ldr	r1, [r4, #16]
 801d08c:	3901      	subs	r1, #1
 801d08e:	6121      	str	r1, [r4, #16]
 801d090:	3101      	adds	r1, #1
 801d092:	d114      	bne.n	801d0be <validate_structure+0x14e>
 801d094:	6963      	ldr	r3, [r4, #20]
 801d096:	1e59      	subs	r1, r3, #1
 801d098:	078a      	lsls	r2, r1, #30
 801d09a:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801d09e:	d117      	bne.n	801d0d0 <validate_structure+0x160>
 801d0a0:	fb91 f2f0 	sdiv	r2, r1, r0
 801d0a4:	fb00 1112 	mls	r1, r0, r2, r1
 801d0a8:	b9a1      	cbnz	r1, 801d0d4 <validate_structure+0x164>
 801d0aa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801d0ae:	fb93 f2f5 	sdiv	r2, r3, r5
 801d0b2:	fb05 3312 	mls	r3, r5, r2, r3
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	bf14      	ite	ne
 801d0ba:	231c      	movne	r3, #28
 801d0bc:	231d      	moveq	r3, #29
 801d0be:	6922      	ldr	r2, [r4, #16]
 801d0c0:	2a01      	cmp	r2, #1
 801d0c2:	bf14      	ite	ne
 801d0c4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801d0c8:	461a      	moveq	r2, r3
 801d0ca:	4462      	add	r2, ip
 801d0cc:	60e2      	str	r2, [r4, #12]
 801d0ce:	e7c2      	b.n	801d056 <validate_structure+0xe6>
 801d0d0:	231c      	movs	r3, #28
 801d0d2:	e7f4      	b.n	801d0be <validate_structure+0x14e>
 801d0d4:	231d      	movs	r3, #29
 801d0d6:	e7f2      	b.n	801d0be <validate_structure+0x14e>
 801d0d8:	231c      	movs	r3, #28
 801d0da:	e7cd      	b.n	801d078 <validate_structure+0x108>
 801d0dc:	231d      	movs	r3, #29
 801d0de:	e7cb      	b.n	801d078 <validate_structure+0x108>
 801d0e0:	428b      	cmp	r3, r1
 801d0e2:	dabd      	bge.n	801d060 <validate_structure+0xf0>
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	3201      	adds	r2, #1
 801d0e8:	1a09      	subs	r1, r1, r0
 801d0ea:	2a0c      	cmp	r2, #12
 801d0ec:	60e1      	str	r1, [r4, #12]
 801d0ee:	6122      	str	r2, [r4, #16]
 801d0f0:	d1c2      	bne.n	801d078 <validate_structure+0x108>
 801d0f2:	6963      	ldr	r3, [r4, #20]
 801d0f4:	1c5a      	adds	r2, r3, #1
 801d0f6:	0791      	lsls	r1, r2, #30
 801d0f8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801d0fc:	d1ec      	bne.n	801d0d8 <validate_structure+0x168>
 801d0fe:	fb92 f1f5 	sdiv	r1, r2, r5
 801d102:	fb05 2211 	mls	r2, r5, r1, r2
 801d106:	2a00      	cmp	r2, #0
 801d108:	d1e8      	bne.n	801d0dc <validate_structure+0x16c>
 801d10a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801d10e:	fb93 f2f6 	sdiv	r2, r3, r6
 801d112:	fb06 3312 	mls	r3, r6, r2, r3
 801d116:	2b00      	cmp	r3, #0
 801d118:	bf14      	ite	ne
 801d11a:	231c      	movne	r3, #28
 801d11c:	231d      	moveq	r3, #29
 801d11e:	e7ab      	b.n	801d078 <validate_structure+0x108>
 801d120:	08039d14 	.word	0x08039d14

0801d124 <mktime>:
 801d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d128:	b089      	sub	sp, #36	; 0x24
 801d12a:	4606      	mov	r6, r0
 801d12c:	f001 f9d0 	bl	801e4d0 <__gettzinfo>
 801d130:	4680      	mov	r8, r0
 801d132:	4630      	mov	r0, r6
 801d134:	f7ff ff1c 	bl	801cf70 <validate_structure>
 801d138:	e9d6 3000 	ldrd	r3, r0, [r6]
 801d13c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801d140:	fb0a 3a00 	mla	sl, sl, r0, r3
 801d144:	68b0      	ldr	r0, [r6, #8]
 801d146:	4abe      	ldr	r2, [pc, #760]	; (801d440 <mktime+0x31c>)
 801d148:	6975      	ldr	r5, [r6, #20]
 801d14a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d14e:	fb03 aa00 	mla	sl, r3, r0, sl
 801d152:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 801d156:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801d15a:	3c01      	subs	r4, #1
 801d15c:	2b01      	cmp	r3, #1
 801d15e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801d162:	4414      	add	r4, r2
 801d164:	dd11      	ble.n	801d18a <mktime+0x66>
 801d166:	07a9      	lsls	r1, r5, #30
 801d168:	d10f      	bne.n	801d18a <mktime+0x66>
 801d16a:	2264      	movs	r2, #100	; 0x64
 801d16c:	fb95 f3f2 	sdiv	r3, r5, r2
 801d170:	fb02 5313 	mls	r3, r2, r3, r5
 801d174:	b943      	cbnz	r3, 801d188 <mktime+0x64>
 801d176:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801d17a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d17e:	fb91 f3f2 	sdiv	r3, r1, r2
 801d182:	fb02 1313 	mls	r3, r2, r3, r1
 801d186:	b903      	cbnz	r3, 801d18a <mktime+0x66>
 801d188:	3401      	adds	r4, #1
 801d18a:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801d18e:	3310      	adds	r3, #16
 801d190:	f644 6220 	movw	r2, #20000	; 0x4e20
 801d194:	4293      	cmp	r3, r2
 801d196:	61f4      	str	r4, [r6, #28]
 801d198:	f200 8179 	bhi.w	801d48e <mktime+0x36a>
 801d19c:	2d46      	cmp	r5, #70	; 0x46
 801d19e:	f340 8084 	ble.w	801d2aa <mktime+0x186>
 801d1a2:	2346      	movs	r3, #70	; 0x46
 801d1a4:	f240 176d 	movw	r7, #365	; 0x16d
 801d1a8:	2164      	movs	r1, #100	; 0x64
 801d1aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801d1ae:	079a      	lsls	r2, r3, #30
 801d1b0:	d175      	bne.n	801d29e <mktime+0x17a>
 801d1b2:	fb93 f2f1 	sdiv	r2, r3, r1
 801d1b6:	fb01 3212 	mls	r2, r1, r2, r3
 801d1ba:	2a00      	cmp	r2, #0
 801d1bc:	d172      	bne.n	801d2a4 <mktime+0x180>
 801d1be:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801d1c2:	fb9c f2f0 	sdiv	r2, ip, r0
 801d1c6:	fb00 c212 	mls	r2, r0, r2, ip
 801d1ca:	2a00      	cmp	r2, #0
 801d1cc:	bf14      	ite	ne
 801d1ce:	463a      	movne	r2, r7
 801d1d0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801d1d4:	3301      	adds	r3, #1
 801d1d6:	429d      	cmp	r5, r3
 801d1d8:	4414      	add	r4, r2
 801d1da:	d1e8      	bne.n	801d1ae <mktime+0x8a>
 801d1dc:	4b99      	ldr	r3, [pc, #612]	; (801d444 <mktime+0x320>)
 801d1de:	4363      	muls	r3, r4
 801d1e0:	eb1a 0103 	adds.w	r1, sl, r3
 801d1e4:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 801d1e8:	e9cd 1200 	strd	r1, r2, [sp]
 801d1ec:	f000 fd36 	bl	801dc5c <__tz_lock>
 801d1f0:	f000 fd36 	bl	801dc60 <_tzset_unlocked>
 801d1f4:	4b94      	ldr	r3, [pc, #592]	; (801d448 <mktime+0x324>)
 801d1f6:	f8d3 9000 	ldr.w	r9, [r3]
 801d1fa:	f1b9 0f00 	cmp.w	r9, #0
 801d1fe:	d045      	beq.n	801d28c <mktime+0x168>
 801d200:	f8d6 9020 	ldr.w	r9, [r6, #32]
 801d204:	6970      	ldr	r0, [r6, #20]
 801d206:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d20a:	464f      	mov	r7, r9
 801d20c:	2f01      	cmp	r7, #1
 801d20e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801d212:	bfa8      	it	ge
 801d214:	2701      	movge	r7, #1
 801d216:	4283      	cmp	r3, r0
 801d218:	f040 8089 	bne.w	801d32e <mktime+0x20a>
 801d21c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d220:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801d224:	460a      	mov	r2, r1
 801d226:	17cb      	asrs	r3, r1, #31
 801d228:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d22c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d230:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d234:	1a12      	subs	r2, r2, r0
 801d236:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801d23a:	4692      	mov	sl, r2
 801d23c:	469b      	mov	fp, r3
 801d23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d242:	4552      	cmp	r2, sl
 801d244:	eb73 0c0b 	sbcs.w	ip, r3, fp
 801d248:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801d24c:	da76      	bge.n	801d33c <mktime+0x218>
 801d24e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801d252:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d256:	ebb2 0a0a 	subs.w	sl, r2, sl
 801d25a:	eb63 0b0b 	sbc.w	fp, r3, fp
 801d25e:	f8d8 3000 	ldr.w	r3, [r8]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d079      	beq.n	801d35a <mktime+0x236>
 801d266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d26a:	4552      	cmp	r2, sl
 801d26c:	eb73 030b 	sbcs.w	r3, r3, fp
 801d270:	db07      	blt.n	801d282 <mktime+0x15e>
 801d272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d276:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d27a:	4592      	cmp	sl, r2
 801d27c:	eb7b 0303 	sbcs.w	r3, fp, r3
 801d280:	db71      	blt.n	801d366 <mktime+0x242>
 801d282:	f1b9 0f00 	cmp.w	r9, #0
 801d286:	f04f 0900 	mov.w	r9, #0
 801d28a:	da71      	bge.n	801d370 <mktime+0x24c>
 801d28c:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d290:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801d294:	eb1a 0a03 	adds.w	sl, sl, r3
 801d298:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801d29c:	e0b4      	b.n	801d408 <mktime+0x2e4>
 801d29e:	f240 126d 	movw	r2, #365	; 0x16d
 801d2a2:	e797      	b.n	801d1d4 <mktime+0xb0>
 801d2a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801d2a8:	e794      	b.n	801d1d4 <mktime+0xb0>
 801d2aa:	d097      	beq.n	801d1dc <mktime+0xb8>
 801d2ac:	2345      	movs	r3, #69	; 0x45
 801d2ae:	f240 176d 	movw	r7, #365	; 0x16d
 801d2b2:	2164      	movs	r1, #100	; 0x64
 801d2b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801d2b8:	e012      	b.n	801d2e0 <mktime+0x1bc>
 801d2ba:	bb62      	cbnz	r2, 801d316 <mktime+0x1f2>
 801d2bc:	fb93 f2f1 	sdiv	r2, r3, r1
 801d2c0:	fb01 3212 	mls	r2, r1, r2, r3
 801d2c4:	bb52      	cbnz	r2, 801d31c <mktime+0x1f8>
 801d2c6:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801d2ca:	fb9c f2f0 	sdiv	r2, ip, r0
 801d2ce:	fb00 c212 	mls	r2, r0, r2, ip
 801d2d2:	2a00      	cmp	r2, #0
 801d2d4:	bf14      	ite	ne
 801d2d6:	463a      	movne	r2, r7
 801d2d8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801d2dc:	1aa4      	subs	r4, r4, r2
 801d2de:	3b01      	subs	r3, #1
 801d2e0:	429d      	cmp	r5, r3
 801d2e2:	f003 0203 	and.w	r2, r3, #3
 801d2e6:	dbe8      	blt.n	801d2ba <mktime+0x196>
 801d2e8:	b9da      	cbnz	r2, 801d322 <mktime+0x1fe>
 801d2ea:	2264      	movs	r2, #100	; 0x64
 801d2ec:	fb95 f3f2 	sdiv	r3, r5, r2
 801d2f0:	fb02 5313 	mls	r3, r2, r3, r5
 801d2f4:	b9c3      	cbnz	r3, 801d328 <mktime+0x204>
 801d2f6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801d2fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d2fe:	fb91 f3f2 	sdiv	r3, r1, r2
 801d302:	fb02 1313 	mls	r3, r2, r3, r1
 801d306:	2b00      	cmp	r3, #0
 801d308:	f240 136d 	movw	r3, #365	; 0x16d
 801d30c:	bf08      	it	eq
 801d30e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801d312:	1ae4      	subs	r4, r4, r3
 801d314:	e762      	b.n	801d1dc <mktime+0xb8>
 801d316:	f240 126d 	movw	r2, #365	; 0x16d
 801d31a:	e7df      	b.n	801d2dc <mktime+0x1b8>
 801d31c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801d320:	e7dc      	b.n	801d2dc <mktime+0x1b8>
 801d322:	f240 136d 	movw	r3, #365	; 0x16d
 801d326:	e7f4      	b.n	801d312 <mktime+0x1ee>
 801d328:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801d32c:	e7f1      	b.n	801d312 <mktime+0x1ee>
 801d32e:	f000 fbed 	bl	801db0c <__tzcalc_limits>
 801d332:	2800      	cmp	r0, #0
 801d334:	f47f af72 	bne.w	801d21c <mktime+0xf8>
 801d338:	46b9      	mov	r9, r7
 801d33a:	e057      	b.n	801d3ec <mktime+0x2c8>
 801d33c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d344:	ebb2 020a 	subs.w	r2, r2, sl
 801d348:	eb63 030b 	sbc.w	r3, r3, fp
 801d34c:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d350:	4592      	cmp	sl, r2
 801d352:	eb7b 0303 	sbcs.w	r3, fp, r3
 801d356:	dbef      	blt.n	801d338 <mktime+0x214>
 801d358:	e779      	b.n	801d24e <mktime+0x12a>
 801d35a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d35e:	4552      	cmp	r2, sl
 801d360:	eb73 030b 	sbcs.w	r3, r3, fp
 801d364:	db85      	blt.n	801d272 <mktime+0x14e>
 801d366:	f1b9 0f00 	cmp.w	r9, #0
 801d36a:	db43      	blt.n	801d3f4 <mktime+0x2d0>
 801d36c:	f04f 0901 	mov.w	r9, #1
 801d370:	ea87 0709 	eor.w	r7, r7, r9
 801d374:	2f01      	cmp	r7, #1
 801d376:	d139      	bne.n	801d3ec <mktime+0x2c8>
 801d378:	1a40      	subs	r0, r0, r1
 801d37a:	f1b9 0f00 	cmp.w	r9, #0
 801d37e:	d100      	bne.n	801d382 <mktime+0x25e>
 801d380:	4240      	negs	r0, r0
 801d382:	6833      	ldr	r3, [r6, #0]
 801d384:	4403      	add	r3, r0
 801d386:	6033      	str	r3, [r6, #0]
 801d388:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d38c:	1812      	adds	r2, r2, r0
 801d38e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 801d392:	e9cd 2300 	strd	r2, r3, [sp]
 801d396:	4630      	mov	r0, r6
 801d398:	68f2      	ldr	r2, [r6, #12]
 801d39a:	9202      	str	r2, [sp, #8]
 801d39c:	f7ff fde8 	bl	801cf70 <validate_structure>
 801d3a0:	68f3      	ldr	r3, [r6, #12]
 801d3a2:	9a02      	ldr	r2, [sp, #8]
 801d3a4:	1a9b      	subs	r3, r3, r2
 801d3a6:	d021      	beq.n	801d3ec <mktime+0x2c8>
 801d3a8:	2b01      	cmp	r3, #1
 801d3aa:	dc40      	bgt.n	801d42e <mktime+0x30a>
 801d3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3b0:	bfa8      	it	ge
 801d3b2:	461f      	movge	r7, r3
 801d3b4:	69f3      	ldr	r3, [r6, #28]
 801d3b6:	443c      	add	r4, r7
 801d3b8:	18ff      	adds	r7, r7, r3
 801d3ba:	d547      	bpl.n	801d44c <mktime+0x328>
 801d3bc:	1e6a      	subs	r2, r5, #1
 801d3be:	0791      	lsls	r1, r2, #30
 801d3c0:	d138      	bne.n	801d434 <mktime+0x310>
 801d3c2:	2164      	movs	r1, #100	; 0x64
 801d3c4:	fb92 f3f1 	sdiv	r3, r2, r1
 801d3c8:	fb01 2313 	mls	r3, r1, r3, r2
 801d3cc:	bbab      	cbnz	r3, 801d43a <mktime+0x316>
 801d3ce:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 801d3d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d3d6:	fb95 f3f2 	sdiv	r3, r5, r2
 801d3da:	fb02 5513 	mls	r5, r2, r3, r5
 801d3de:	2d00      	cmp	r5, #0
 801d3e0:	f240 136d 	movw	r3, #365	; 0x16d
 801d3e4:	bf18      	it	ne
 801d3e6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801d3ea:	61f3      	str	r3, [r6, #28]
 801d3ec:	f1b9 0f01 	cmp.w	r9, #1
 801d3f0:	f47f af4c 	bne.w	801d28c <mktime+0x168>
 801d3f4:	e9dd ab00 	ldrd	sl, fp, [sp]
 801d3f8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 801d3fc:	eb1a 0a03 	adds.w	sl, sl, r3
 801d400:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801d404:	f04f 0901 	mov.w	r9, #1
 801d408:	f000 fc29 	bl	801dc5e <__tz_unlock>
 801d40c:	3404      	adds	r4, #4
 801d40e:	2307      	movs	r3, #7
 801d410:	fb94 f3f3 	sdiv	r3, r4, r3
 801d414:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d418:	1ae4      	subs	r4, r4, r3
 801d41a:	bf48      	it	mi
 801d41c:	3407      	addmi	r4, #7
 801d41e:	f8c6 9020 	str.w	r9, [r6, #32]
 801d422:	61b4      	str	r4, [r6, #24]
 801d424:	4650      	mov	r0, sl
 801d426:	4659      	mov	r1, fp
 801d428:	b009      	add	sp, #36	; 0x24
 801d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d42e:	f04f 37ff 	mov.w	r7, #4294967295
 801d432:	e7bf      	b.n	801d3b4 <mktime+0x290>
 801d434:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801d438:	e7d7      	b.n	801d3ea <mktime+0x2c6>
 801d43a:	f240 136d 	movw	r3, #365	; 0x16d
 801d43e:	e7d4      	b.n	801d3ea <mktime+0x2c6>
 801d440:	08039d44 	.word	0x08039d44
 801d444:	00015180 	.word	0x00015180
 801d448:	200217e8 	.word	0x200217e8
 801d44c:	07ab      	lsls	r3, r5, #30
 801d44e:	d118      	bne.n	801d482 <mktime+0x35e>
 801d450:	2264      	movs	r2, #100	; 0x64
 801d452:	fb95 f3f2 	sdiv	r3, r5, r2
 801d456:	fb02 5313 	mls	r3, r2, r3, r5
 801d45a:	b9ab      	cbnz	r3, 801d488 <mktime+0x364>
 801d45c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 801d460:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d464:	fb95 f3f2 	sdiv	r3, r5, r2
 801d468:	fb02 5513 	mls	r5, r2, r3, r5
 801d46c:	2d00      	cmp	r5, #0
 801d46e:	f240 136d 	movw	r3, #365	; 0x16d
 801d472:	bf08      	it	eq
 801d474:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801d478:	429f      	cmp	r7, r3
 801d47a:	bfa8      	it	ge
 801d47c:	1aff      	subge	r7, r7, r3
 801d47e:	61f7      	str	r7, [r6, #28]
 801d480:	e7b4      	b.n	801d3ec <mktime+0x2c8>
 801d482:	f240 136d 	movw	r3, #365	; 0x16d
 801d486:	e7f7      	b.n	801d478 <mktime+0x354>
 801d488:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801d48c:	e7f4      	b.n	801d478 <mktime+0x354>
 801d48e:	f04f 3aff 	mov.w	sl, #4294967295
 801d492:	f04f 3bff 	mov.w	fp, #4294967295
 801d496:	e7c5      	b.n	801d424 <mktime+0x300>

0801d498 <_free_r>:
 801d498:	b538      	push	{r3, r4, r5, lr}
 801d49a:	4605      	mov	r5, r0
 801d49c:	2900      	cmp	r1, #0
 801d49e:	d045      	beq.n	801d52c <_free_r+0x94>
 801d4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d4a4:	1f0c      	subs	r4, r1, #4
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	bfb8      	it	lt
 801d4aa:	18e4      	addlt	r4, r4, r3
 801d4ac:	f001 f8ae 	bl	801e60c <__malloc_lock>
 801d4b0:	4a1f      	ldr	r2, [pc, #124]	; (801d530 <_free_r+0x98>)
 801d4b2:	6813      	ldr	r3, [r2, #0]
 801d4b4:	4610      	mov	r0, r2
 801d4b6:	b933      	cbnz	r3, 801d4c6 <_free_r+0x2e>
 801d4b8:	6063      	str	r3, [r4, #4]
 801d4ba:	6014      	str	r4, [r2, #0]
 801d4bc:	4628      	mov	r0, r5
 801d4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d4c2:	f001 b8a4 	b.w	801e60e <__malloc_unlock>
 801d4c6:	42a3      	cmp	r3, r4
 801d4c8:	d90c      	bls.n	801d4e4 <_free_r+0x4c>
 801d4ca:	6821      	ldr	r1, [r4, #0]
 801d4cc:	1862      	adds	r2, r4, r1
 801d4ce:	4293      	cmp	r3, r2
 801d4d0:	bf04      	itt	eq
 801d4d2:	681a      	ldreq	r2, [r3, #0]
 801d4d4:	685b      	ldreq	r3, [r3, #4]
 801d4d6:	6063      	str	r3, [r4, #4]
 801d4d8:	bf04      	itt	eq
 801d4da:	1852      	addeq	r2, r2, r1
 801d4dc:	6022      	streq	r2, [r4, #0]
 801d4de:	6004      	str	r4, [r0, #0]
 801d4e0:	e7ec      	b.n	801d4bc <_free_r+0x24>
 801d4e2:	4613      	mov	r3, r2
 801d4e4:	685a      	ldr	r2, [r3, #4]
 801d4e6:	b10a      	cbz	r2, 801d4ec <_free_r+0x54>
 801d4e8:	42a2      	cmp	r2, r4
 801d4ea:	d9fa      	bls.n	801d4e2 <_free_r+0x4a>
 801d4ec:	6819      	ldr	r1, [r3, #0]
 801d4ee:	1858      	adds	r0, r3, r1
 801d4f0:	42a0      	cmp	r0, r4
 801d4f2:	d10b      	bne.n	801d50c <_free_r+0x74>
 801d4f4:	6820      	ldr	r0, [r4, #0]
 801d4f6:	4401      	add	r1, r0
 801d4f8:	1858      	adds	r0, r3, r1
 801d4fa:	4282      	cmp	r2, r0
 801d4fc:	6019      	str	r1, [r3, #0]
 801d4fe:	d1dd      	bne.n	801d4bc <_free_r+0x24>
 801d500:	6810      	ldr	r0, [r2, #0]
 801d502:	6852      	ldr	r2, [r2, #4]
 801d504:	605a      	str	r2, [r3, #4]
 801d506:	4401      	add	r1, r0
 801d508:	6019      	str	r1, [r3, #0]
 801d50a:	e7d7      	b.n	801d4bc <_free_r+0x24>
 801d50c:	d902      	bls.n	801d514 <_free_r+0x7c>
 801d50e:	230c      	movs	r3, #12
 801d510:	602b      	str	r3, [r5, #0]
 801d512:	e7d3      	b.n	801d4bc <_free_r+0x24>
 801d514:	6820      	ldr	r0, [r4, #0]
 801d516:	1821      	adds	r1, r4, r0
 801d518:	428a      	cmp	r2, r1
 801d51a:	bf04      	itt	eq
 801d51c:	6811      	ldreq	r1, [r2, #0]
 801d51e:	6852      	ldreq	r2, [r2, #4]
 801d520:	6062      	str	r2, [r4, #4]
 801d522:	bf04      	itt	eq
 801d524:	1809      	addeq	r1, r1, r0
 801d526:	6021      	streq	r1, [r4, #0]
 801d528:	605c      	str	r4, [r3, #4]
 801d52a:	e7c7      	b.n	801d4bc <_free_r+0x24>
 801d52c:	bd38      	pop	{r3, r4, r5, pc}
 801d52e:	bf00      	nop
 801d530:	200217c4 	.word	0x200217c4

0801d534 <_malloc_r>:
 801d534:	b570      	push	{r4, r5, r6, lr}
 801d536:	1ccd      	adds	r5, r1, #3
 801d538:	f025 0503 	bic.w	r5, r5, #3
 801d53c:	3508      	adds	r5, #8
 801d53e:	2d0c      	cmp	r5, #12
 801d540:	bf38      	it	cc
 801d542:	250c      	movcc	r5, #12
 801d544:	2d00      	cmp	r5, #0
 801d546:	4606      	mov	r6, r0
 801d548:	db01      	blt.n	801d54e <_malloc_r+0x1a>
 801d54a:	42a9      	cmp	r1, r5
 801d54c:	d903      	bls.n	801d556 <_malloc_r+0x22>
 801d54e:	230c      	movs	r3, #12
 801d550:	6033      	str	r3, [r6, #0]
 801d552:	2000      	movs	r0, #0
 801d554:	bd70      	pop	{r4, r5, r6, pc}
 801d556:	f001 f859 	bl	801e60c <__malloc_lock>
 801d55a:	4a21      	ldr	r2, [pc, #132]	; (801d5e0 <_malloc_r+0xac>)
 801d55c:	6814      	ldr	r4, [r2, #0]
 801d55e:	4621      	mov	r1, r4
 801d560:	b991      	cbnz	r1, 801d588 <_malloc_r+0x54>
 801d562:	4c20      	ldr	r4, [pc, #128]	; (801d5e4 <_malloc_r+0xb0>)
 801d564:	6823      	ldr	r3, [r4, #0]
 801d566:	b91b      	cbnz	r3, 801d570 <_malloc_r+0x3c>
 801d568:	4630      	mov	r0, r6
 801d56a:	f000 f951 	bl	801d810 <_sbrk_r>
 801d56e:	6020      	str	r0, [r4, #0]
 801d570:	4629      	mov	r1, r5
 801d572:	4630      	mov	r0, r6
 801d574:	f000 f94c 	bl	801d810 <_sbrk_r>
 801d578:	1c43      	adds	r3, r0, #1
 801d57a:	d124      	bne.n	801d5c6 <_malloc_r+0x92>
 801d57c:	230c      	movs	r3, #12
 801d57e:	6033      	str	r3, [r6, #0]
 801d580:	4630      	mov	r0, r6
 801d582:	f001 f844 	bl	801e60e <__malloc_unlock>
 801d586:	e7e4      	b.n	801d552 <_malloc_r+0x1e>
 801d588:	680b      	ldr	r3, [r1, #0]
 801d58a:	1b5b      	subs	r3, r3, r5
 801d58c:	d418      	bmi.n	801d5c0 <_malloc_r+0x8c>
 801d58e:	2b0b      	cmp	r3, #11
 801d590:	d90f      	bls.n	801d5b2 <_malloc_r+0x7e>
 801d592:	600b      	str	r3, [r1, #0]
 801d594:	50cd      	str	r5, [r1, r3]
 801d596:	18cc      	adds	r4, r1, r3
 801d598:	4630      	mov	r0, r6
 801d59a:	f001 f838 	bl	801e60e <__malloc_unlock>
 801d59e:	f104 000b 	add.w	r0, r4, #11
 801d5a2:	1d23      	adds	r3, r4, #4
 801d5a4:	f020 0007 	bic.w	r0, r0, #7
 801d5a8:	1ac3      	subs	r3, r0, r3
 801d5aa:	d0d3      	beq.n	801d554 <_malloc_r+0x20>
 801d5ac:	425a      	negs	r2, r3
 801d5ae:	50e2      	str	r2, [r4, r3]
 801d5b0:	e7d0      	b.n	801d554 <_malloc_r+0x20>
 801d5b2:	428c      	cmp	r4, r1
 801d5b4:	684b      	ldr	r3, [r1, #4]
 801d5b6:	bf16      	itet	ne
 801d5b8:	6063      	strne	r3, [r4, #4]
 801d5ba:	6013      	streq	r3, [r2, #0]
 801d5bc:	460c      	movne	r4, r1
 801d5be:	e7eb      	b.n	801d598 <_malloc_r+0x64>
 801d5c0:	460c      	mov	r4, r1
 801d5c2:	6849      	ldr	r1, [r1, #4]
 801d5c4:	e7cc      	b.n	801d560 <_malloc_r+0x2c>
 801d5c6:	1cc4      	adds	r4, r0, #3
 801d5c8:	f024 0403 	bic.w	r4, r4, #3
 801d5cc:	42a0      	cmp	r0, r4
 801d5ce:	d005      	beq.n	801d5dc <_malloc_r+0xa8>
 801d5d0:	1a21      	subs	r1, r4, r0
 801d5d2:	4630      	mov	r0, r6
 801d5d4:	f000 f91c 	bl	801d810 <_sbrk_r>
 801d5d8:	3001      	adds	r0, #1
 801d5da:	d0cf      	beq.n	801d57c <_malloc_r+0x48>
 801d5dc:	6025      	str	r5, [r4, #0]
 801d5de:	e7db      	b.n	801d598 <_malloc_r+0x64>
 801d5e0:	200217c4 	.word	0x200217c4
 801d5e4:	200217c8 	.word	0x200217c8

0801d5e8 <iprintf>:
 801d5e8:	b40f      	push	{r0, r1, r2, r3}
 801d5ea:	4b0a      	ldr	r3, [pc, #40]	; (801d614 <iprintf+0x2c>)
 801d5ec:	b513      	push	{r0, r1, r4, lr}
 801d5ee:	681c      	ldr	r4, [r3, #0]
 801d5f0:	b124      	cbz	r4, 801d5fc <iprintf+0x14>
 801d5f2:	69a3      	ldr	r3, [r4, #24]
 801d5f4:	b913      	cbnz	r3, 801d5fc <iprintf+0x14>
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	f000 fe9c 	bl	801e334 <__sinit>
 801d5fc:	ab05      	add	r3, sp, #20
 801d5fe:	9a04      	ldr	r2, [sp, #16]
 801d600:	68a1      	ldr	r1, [r4, #8]
 801d602:	9301      	str	r3, [sp, #4]
 801d604:	4620      	mov	r0, r4
 801d606:	f001 fb4f 	bl	801eca8 <_vfiprintf_r>
 801d60a:	b002      	add	sp, #8
 801d60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d610:	b004      	add	sp, #16
 801d612:	4770      	bx	lr
 801d614:	200004b8 	.word	0x200004b8

0801d618 <putchar>:
 801d618:	b538      	push	{r3, r4, r5, lr}
 801d61a:	4b08      	ldr	r3, [pc, #32]	; (801d63c <putchar+0x24>)
 801d61c:	681c      	ldr	r4, [r3, #0]
 801d61e:	4605      	mov	r5, r0
 801d620:	b124      	cbz	r4, 801d62c <putchar+0x14>
 801d622:	69a3      	ldr	r3, [r4, #24]
 801d624:	b913      	cbnz	r3, 801d62c <putchar+0x14>
 801d626:	4620      	mov	r0, r4
 801d628:	f000 fe84 	bl	801e334 <__sinit>
 801d62c:	68a2      	ldr	r2, [r4, #8]
 801d62e:	4629      	mov	r1, r5
 801d630:	4620      	mov	r0, r4
 801d632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d636:	f001 bf2d 	b.w	801f494 <_putc_r>
 801d63a:	bf00      	nop
 801d63c:	200004b8 	.word	0x200004b8

0801d640 <_puts_r>:
 801d640:	b570      	push	{r4, r5, r6, lr}
 801d642:	460e      	mov	r6, r1
 801d644:	4605      	mov	r5, r0
 801d646:	b118      	cbz	r0, 801d650 <_puts_r+0x10>
 801d648:	6983      	ldr	r3, [r0, #24]
 801d64a:	b90b      	cbnz	r3, 801d650 <_puts_r+0x10>
 801d64c:	f000 fe72 	bl	801e334 <__sinit>
 801d650:	69ab      	ldr	r3, [r5, #24]
 801d652:	68ac      	ldr	r4, [r5, #8]
 801d654:	b913      	cbnz	r3, 801d65c <_puts_r+0x1c>
 801d656:	4628      	mov	r0, r5
 801d658:	f000 fe6c 	bl	801e334 <__sinit>
 801d65c:	4b23      	ldr	r3, [pc, #140]	; (801d6ec <_puts_r+0xac>)
 801d65e:	429c      	cmp	r4, r3
 801d660:	d117      	bne.n	801d692 <_puts_r+0x52>
 801d662:	686c      	ldr	r4, [r5, #4]
 801d664:	89a3      	ldrh	r3, [r4, #12]
 801d666:	071b      	lsls	r3, r3, #28
 801d668:	d51d      	bpl.n	801d6a6 <_puts_r+0x66>
 801d66a:	6923      	ldr	r3, [r4, #16]
 801d66c:	b1db      	cbz	r3, 801d6a6 <_puts_r+0x66>
 801d66e:	3e01      	subs	r6, #1
 801d670:	68a3      	ldr	r3, [r4, #8]
 801d672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d676:	3b01      	subs	r3, #1
 801d678:	60a3      	str	r3, [r4, #8]
 801d67a:	b9e9      	cbnz	r1, 801d6b8 <_puts_r+0x78>
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	da2e      	bge.n	801d6de <_puts_r+0x9e>
 801d680:	4622      	mov	r2, r4
 801d682:	210a      	movs	r1, #10
 801d684:	4628      	mov	r0, r5
 801d686:	f000 fc6f 	bl	801df68 <__swbuf_r>
 801d68a:	3001      	adds	r0, #1
 801d68c:	d011      	beq.n	801d6b2 <_puts_r+0x72>
 801d68e:	200a      	movs	r0, #10
 801d690:	e011      	b.n	801d6b6 <_puts_r+0x76>
 801d692:	4b17      	ldr	r3, [pc, #92]	; (801d6f0 <_puts_r+0xb0>)
 801d694:	429c      	cmp	r4, r3
 801d696:	d101      	bne.n	801d69c <_puts_r+0x5c>
 801d698:	68ac      	ldr	r4, [r5, #8]
 801d69a:	e7e3      	b.n	801d664 <_puts_r+0x24>
 801d69c:	4b15      	ldr	r3, [pc, #84]	; (801d6f4 <_puts_r+0xb4>)
 801d69e:	429c      	cmp	r4, r3
 801d6a0:	bf08      	it	eq
 801d6a2:	68ec      	ldreq	r4, [r5, #12]
 801d6a4:	e7de      	b.n	801d664 <_puts_r+0x24>
 801d6a6:	4621      	mov	r1, r4
 801d6a8:	4628      	mov	r0, r5
 801d6aa:	f000 fcc1 	bl	801e030 <__swsetup_r>
 801d6ae:	2800      	cmp	r0, #0
 801d6b0:	d0dd      	beq.n	801d66e <_puts_r+0x2e>
 801d6b2:	f04f 30ff 	mov.w	r0, #4294967295
 801d6b6:	bd70      	pop	{r4, r5, r6, pc}
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	da04      	bge.n	801d6c6 <_puts_r+0x86>
 801d6bc:	69a2      	ldr	r2, [r4, #24]
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	dc06      	bgt.n	801d6d0 <_puts_r+0x90>
 801d6c2:	290a      	cmp	r1, #10
 801d6c4:	d004      	beq.n	801d6d0 <_puts_r+0x90>
 801d6c6:	6823      	ldr	r3, [r4, #0]
 801d6c8:	1c5a      	adds	r2, r3, #1
 801d6ca:	6022      	str	r2, [r4, #0]
 801d6cc:	7019      	strb	r1, [r3, #0]
 801d6ce:	e7cf      	b.n	801d670 <_puts_r+0x30>
 801d6d0:	4622      	mov	r2, r4
 801d6d2:	4628      	mov	r0, r5
 801d6d4:	f000 fc48 	bl	801df68 <__swbuf_r>
 801d6d8:	3001      	adds	r0, #1
 801d6da:	d1c9      	bne.n	801d670 <_puts_r+0x30>
 801d6dc:	e7e9      	b.n	801d6b2 <_puts_r+0x72>
 801d6de:	6823      	ldr	r3, [r4, #0]
 801d6e0:	200a      	movs	r0, #10
 801d6e2:	1c5a      	adds	r2, r3, #1
 801d6e4:	6022      	str	r2, [r4, #0]
 801d6e6:	7018      	strb	r0, [r3, #0]
 801d6e8:	e7e5      	b.n	801d6b6 <_puts_r+0x76>
 801d6ea:	bf00      	nop
 801d6ec:	08039dd0 	.word	0x08039dd0
 801d6f0:	08039df0 	.word	0x08039df0
 801d6f4:	08039db0 	.word	0x08039db0

0801d6f8 <puts>:
 801d6f8:	4b02      	ldr	r3, [pc, #8]	; (801d704 <puts+0xc>)
 801d6fa:	4601      	mov	r1, r0
 801d6fc:	6818      	ldr	r0, [r3, #0]
 801d6fe:	f7ff bf9f 	b.w	801d640 <_puts_r>
 801d702:	bf00      	nop
 801d704:	200004b8 	.word	0x200004b8

0801d708 <rand>:
 801d708:	b538      	push	{r3, r4, r5, lr}
 801d70a:	4b13      	ldr	r3, [pc, #76]	; (801d758 <rand+0x50>)
 801d70c:	681c      	ldr	r4, [r3, #0]
 801d70e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d710:	b97b      	cbnz	r3, 801d732 <rand+0x2a>
 801d712:	2018      	movs	r0, #24
 801d714:	f7ff fbfa 	bl	801cf0c <malloc>
 801d718:	4a10      	ldr	r2, [pc, #64]	; (801d75c <rand+0x54>)
 801d71a:	4b11      	ldr	r3, [pc, #68]	; (801d760 <rand+0x58>)
 801d71c:	63a0      	str	r0, [r4, #56]	; 0x38
 801d71e:	e9c0 2300 	strd	r2, r3, [r0]
 801d722:	4b10      	ldr	r3, [pc, #64]	; (801d764 <rand+0x5c>)
 801d724:	6083      	str	r3, [r0, #8]
 801d726:	230b      	movs	r3, #11
 801d728:	8183      	strh	r3, [r0, #12]
 801d72a:	2201      	movs	r2, #1
 801d72c:	2300      	movs	r3, #0
 801d72e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d732:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d734:	480c      	ldr	r0, [pc, #48]	; (801d768 <rand+0x60>)
 801d736:	690a      	ldr	r2, [r1, #16]
 801d738:	694b      	ldr	r3, [r1, #20]
 801d73a:	4c0c      	ldr	r4, [pc, #48]	; (801d76c <rand+0x64>)
 801d73c:	4350      	muls	r0, r2
 801d73e:	fb04 0003 	mla	r0, r4, r3, r0
 801d742:	fba2 2304 	umull	r2, r3, r2, r4
 801d746:	4403      	add	r3, r0
 801d748:	1c54      	adds	r4, r2, #1
 801d74a:	f143 0500 	adc.w	r5, r3, #0
 801d74e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801d752:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801d756:	bd38      	pop	{r3, r4, r5, pc}
 801d758:	200004b8 	.word	0x200004b8
 801d75c:	abcd330e 	.word	0xabcd330e
 801d760:	e66d1234 	.word	0xe66d1234
 801d764:	0005deec 	.word	0x0005deec
 801d768:	5851f42d 	.word	0x5851f42d
 801d76c:	4c957f2d 	.word	0x4c957f2d

0801d770 <realloc>:
 801d770:	4b02      	ldr	r3, [pc, #8]	; (801d77c <realloc+0xc>)
 801d772:	460a      	mov	r2, r1
 801d774:	4601      	mov	r1, r0
 801d776:	6818      	ldr	r0, [r3, #0]
 801d778:	f000 bf4a 	b.w	801e610 <_realloc_r>
 801d77c:	200004b8 	.word	0x200004b8

0801d780 <modf>:
 801d780:	ee10 1a90 	vmov	r1, s1
 801d784:	b570      	push	{r4, r5, r6, lr}
 801d786:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801d78a:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 801d78e:	2b13      	cmp	r3, #19
 801d790:	ee10 4a10 	vmov	r4, s0
 801d794:	dc1f      	bgt.n	801d7d6 <modf+0x56>
 801d796:	2b00      	cmp	r3, #0
 801d798:	da05      	bge.n	801d7a6 <modf+0x26>
 801d79a:	2200      	movs	r2, #0
 801d79c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d7a0:	e9c0 2300 	strd	r2, r3, [r0]
 801d7a4:	bd70      	pop	{r4, r5, r6, pc}
 801d7a6:	4d19      	ldr	r5, [pc, #100]	; (801d80c <modf+0x8c>)
 801d7a8:	411d      	asrs	r5, r3
 801d7aa:	ea01 0305 	and.w	r3, r1, r5
 801d7ae:	431c      	orrs	r4, r3
 801d7b0:	d107      	bne.n	801d7c2 <modf+0x42>
 801d7b2:	ed80 0b00 	vstr	d0, [r0]
 801d7b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d7ba:	4622      	mov	r2, r4
 801d7bc:	ec43 2b10 	vmov	d0, r2, r3
 801d7c0:	e7f0      	b.n	801d7a4 <modf+0x24>
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	ea21 0305 	bic.w	r3, r1, r5
 801d7c8:	ec43 2b17 	vmov	d7, r2, r3
 801d7cc:	e9c0 2300 	strd	r2, r3, [r0]
 801d7d0:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d7d4:	e7e6      	b.n	801d7a4 <modf+0x24>
 801d7d6:	2b33      	cmp	r3, #51	; 0x33
 801d7d8:	dd05      	ble.n	801d7e6 <modf+0x66>
 801d7da:	ed80 0b00 	vstr	d0, [r0]
 801d7de:	2200      	movs	r2, #0
 801d7e0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d7e4:	e7ea      	b.n	801d7bc <modf+0x3c>
 801d7e6:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 801d7ea:	f04f 35ff 	mov.w	r5, #4294967295
 801d7ee:	40dd      	lsrs	r5, r3
 801d7f0:	ea15 0604 	ands.w	r6, r5, r4
 801d7f4:	d105      	bne.n	801d802 <modf+0x82>
 801d7f6:	ed80 0b00 	vstr	d0, [r0]
 801d7fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d7fe:	4632      	mov	r2, r6
 801d800:	e7dc      	b.n	801d7bc <modf+0x3c>
 801d802:	ee10 3a90 	vmov	r3, s1
 801d806:	ea24 0205 	bic.w	r2, r4, r5
 801d80a:	e7dd      	b.n	801d7c8 <modf+0x48>
 801d80c:	000fffff 	.word	0x000fffff

0801d810 <_sbrk_r>:
 801d810:	b538      	push	{r3, r4, r5, lr}
 801d812:	4c06      	ldr	r4, [pc, #24]	; (801d82c <_sbrk_r+0x1c>)
 801d814:	2300      	movs	r3, #0
 801d816:	4605      	mov	r5, r0
 801d818:	4608      	mov	r0, r1
 801d81a:	6023      	str	r3, [r4, #0]
 801d81c:	f7e6 fa5c 	bl	8003cd8 <_sbrk>
 801d820:	1c43      	adds	r3, r0, #1
 801d822:	d102      	bne.n	801d82a <_sbrk_r+0x1a>
 801d824:	6823      	ldr	r3, [r4, #0]
 801d826:	b103      	cbz	r3, 801d82a <_sbrk_r+0x1a>
 801d828:	602b      	str	r3, [r5, #0]
 801d82a:	bd38      	pop	{r3, r4, r5, pc}
 801d82c:	20033bd8 	.word	0x20033bd8

0801d830 <siprintf>:
 801d830:	b40e      	push	{r1, r2, r3}
 801d832:	b500      	push	{lr}
 801d834:	b09c      	sub	sp, #112	; 0x70
 801d836:	ab1d      	add	r3, sp, #116	; 0x74
 801d838:	9002      	str	r0, [sp, #8]
 801d83a:	9006      	str	r0, [sp, #24]
 801d83c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d840:	4809      	ldr	r0, [pc, #36]	; (801d868 <siprintf+0x38>)
 801d842:	9107      	str	r1, [sp, #28]
 801d844:	9104      	str	r1, [sp, #16]
 801d846:	4909      	ldr	r1, [pc, #36]	; (801d86c <siprintf+0x3c>)
 801d848:	f853 2b04 	ldr.w	r2, [r3], #4
 801d84c:	9105      	str	r1, [sp, #20]
 801d84e:	6800      	ldr	r0, [r0, #0]
 801d850:	9301      	str	r3, [sp, #4]
 801d852:	a902      	add	r1, sp, #8
 801d854:	f000 ff5c 	bl	801e710 <_svfiprintf_r>
 801d858:	9b02      	ldr	r3, [sp, #8]
 801d85a:	2200      	movs	r2, #0
 801d85c:	701a      	strb	r2, [r3, #0]
 801d85e:	b01c      	add	sp, #112	; 0x70
 801d860:	f85d eb04 	ldr.w	lr, [sp], #4
 801d864:	b003      	add	sp, #12
 801d866:	4770      	bx	lr
 801d868:	200004b8 	.word	0x200004b8
 801d86c:	ffff0208 	.word	0xffff0208

0801d870 <siscanf>:
 801d870:	b40e      	push	{r1, r2, r3}
 801d872:	b530      	push	{r4, r5, lr}
 801d874:	b09c      	sub	sp, #112	; 0x70
 801d876:	ac1f      	add	r4, sp, #124	; 0x7c
 801d878:	f44f 7201 	mov.w	r2, #516	; 0x204
 801d87c:	f854 5b04 	ldr.w	r5, [r4], #4
 801d880:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d884:	9002      	str	r0, [sp, #8]
 801d886:	9006      	str	r0, [sp, #24]
 801d888:	f7e2 fce4 	bl	8000254 <strlen>
 801d88c:	4b0b      	ldr	r3, [pc, #44]	; (801d8bc <siscanf+0x4c>)
 801d88e:	9003      	str	r0, [sp, #12]
 801d890:	9007      	str	r0, [sp, #28]
 801d892:	930b      	str	r3, [sp, #44]	; 0x2c
 801d894:	480a      	ldr	r0, [pc, #40]	; (801d8c0 <siscanf+0x50>)
 801d896:	9401      	str	r4, [sp, #4]
 801d898:	2300      	movs	r3, #0
 801d89a:	930f      	str	r3, [sp, #60]	; 0x3c
 801d89c:	9314      	str	r3, [sp, #80]	; 0x50
 801d89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d8a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d8a6:	462a      	mov	r2, r5
 801d8a8:	4623      	mov	r3, r4
 801d8aa:	a902      	add	r1, sp, #8
 801d8ac:	6800      	ldr	r0, [r0, #0]
 801d8ae:	f001 f881 	bl	801e9b4 <__ssvfiscanf_r>
 801d8b2:	b01c      	add	sp, #112	; 0x70
 801d8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8b8:	b003      	add	sp, #12
 801d8ba:	4770      	bx	lr
 801d8bc:	0801d8e7 	.word	0x0801d8e7
 801d8c0:	200004b8 	.word	0x200004b8

0801d8c4 <__sread>:
 801d8c4:	b510      	push	{r4, lr}
 801d8c6:	460c      	mov	r4, r1
 801d8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8cc:	f001 fe18 	bl	801f500 <_read_r>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	bfab      	itete	ge
 801d8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d8d6:	89a3      	ldrhlt	r3, [r4, #12]
 801d8d8:	181b      	addge	r3, r3, r0
 801d8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d8de:	bfac      	ite	ge
 801d8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d8e2:	81a3      	strhlt	r3, [r4, #12]
 801d8e4:	bd10      	pop	{r4, pc}

0801d8e6 <__seofread>:
 801d8e6:	2000      	movs	r0, #0
 801d8e8:	4770      	bx	lr

0801d8ea <__swrite>:
 801d8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ee:	461f      	mov	r7, r3
 801d8f0:	898b      	ldrh	r3, [r1, #12]
 801d8f2:	05db      	lsls	r3, r3, #23
 801d8f4:	4605      	mov	r5, r0
 801d8f6:	460c      	mov	r4, r1
 801d8f8:	4616      	mov	r6, r2
 801d8fa:	d505      	bpl.n	801d908 <__swrite+0x1e>
 801d8fc:	2302      	movs	r3, #2
 801d8fe:	2200      	movs	r2, #0
 801d900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d904:	f000 fdfa 	bl	801e4fc <_lseek_r>
 801d908:	89a3      	ldrh	r3, [r4, #12]
 801d90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d912:	81a3      	strh	r3, [r4, #12]
 801d914:	4632      	mov	r2, r6
 801d916:	463b      	mov	r3, r7
 801d918:	4628      	mov	r0, r5
 801d91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d91e:	f000 bb75 	b.w	801e00c <_write_r>

0801d922 <__sseek>:
 801d922:	b510      	push	{r4, lr}
 801d924:	460c      	mov	r4, r1
 801d926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d92a:	f000 fde7 	bl	801e4fc <_lseek_r>
 801d92e:	1c43      	adds	r3, r0, #1
 801d930:	89a3      	ldrh	r3, [r4, #12]
 801d932:	bf15      	itete	ne
 801d934:	6560      	strne	r0, [r4, #84]	; 0x54
 801d936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d93e:	81a3      	strheq	r3, [r4, #12]
 801d940:	bf18      	it	ne
 801d942:	81a3      	strhne	r3, [r4, #12]
 801d944:	bd10      	pop	{r4, pc}

0801d946 <__sclose>:
 801d946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d94a:	f000 bbdf 	b.w	801e10c <_close_r>

0801d94e <strchr>:
 801d94e:	b2c9      	uxtb	r1, r1
 801d950:	4603      	mov	r3, r0
 801d952:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d956:	b11a      	cbz	r2, 801d960 <strchr+0x12>
 801d958:	428a      	cmp	r2, r1
 801d95a:	d1f9      	bne.n	801d950 <strchr+0x2>
 801d95c:	4618      	mov	r0, r3
 801d95e:	4770      	bx	lr
 801d960:	2900      	cmp	r1, #0
 801d962:	bf18      	it	ne
 801d964:	2300      	movne	r3, #0
 801d966:	e7f9      	b.n	801d95c <strchr+0xe>

0801d968 <strcpy>:
 801d968:	4603      	mov	r3, r0
 801d96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d96e:	f803 2b01 	strb.w	r2, [r3], #1
 801d972:	2a00      	cmp	r2, #0
 801d974:	d1f9      	bne.n	801d96a <strcpy+0x2>
 801d976:	4770      	bx	lr

0801d978 <strncmp>:
 801d978:	b510      	push	{r4, lr}
 801d97a:	b16a      	cbz	r2, 801d998 <strncmp+0x20>
 801d97c:	3901      	subs	r1, #1
 801d97e:	1884      	adds	r4, r0, r2
 801d980:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d984:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d988:	4293      	cmp	r3, r2
 801d98a:	d103      	bne.n	801d994 <strncmp+0x1c>
 801d98c:	42a0      	cmp	r0, r4
 801d98e:	d001      	beq.n	801d994 <strncmp+0x1c>
 801d990:	2b00      	cmp	r3, #0
 801d992:	d1f5      	bne.n	801d980 <strncmp+0x8>
 801d994:	1a98      	subs	r0, r3, r2
 801d996:	bd10      	pop	{r4, pc}
 801d998:	4610      	mov	r0, r2
 801d99a:	e7fc      	b.n	801d996 <strncmp+0x1e>

0801d99c <strncpy>:
 801d99c:	b570      	push	{r4, r5, r6, lr}
 801d99e:	3901      	subs	r1, #1
 801d9a0:	4604      	mov	r4, r0
 801d9a2:	b902      	cbnz	r2, 801d9a6 <strncpy+0xa>
 801d9a4:	bd70      	pop	{r4, r5, r6, pc}
 801d9a6:	4623      	mov	r3, r4
 801d9a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801d9ac:	f803 5b01 	strb.w	r5, [r3], #1
 801d9b0:	1e56      	subs	r6, r2, #1
 801d9b2:	b92d      	cbnz	r5, 801d9c0 <strncpy+0x24>
 801d9b4:	4414      	add	r4, r2
 801d9b6:	42a3      	cmp	r3, r4
 801d9b8:	d0f4      	beq.n	801d9a4 <strncpy+0x8>
 801d9ba:	f803 5b01 	strb.w	r5, [r3], #1
 801d9be:	e7fa      	b.n	801d9b6 <strncpy+0x1a>
 801d9c0:	461c      	mov	r4, r3
 801d9c2:	4632      	mov	r2, r6
 801d9c4:	e7ed      	b.n	801d9a2 <strncpy+0x6>

0801d9c6 <_strtol_l.isra.0>:
 801d9c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9ca:	4680      	mov	r8, r0
 801d9cc:	4689      	mov	r9, r1
 801d9ce:	4692      	mov	sl, r2
 801d9d0:	461e      	mov	r6, r3
 801d9d2:	460f      	mov	r7, r1
 801d9d4:	463d      	mov	r5, r7
 801d9d6:	9808      	ldr	r0, [sp, #32]
 801d9d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d9dc:	f000 fd7c 	bl	801e4d8 <__locale_ctype_ptr_l>
 801d9e0:	4420      	add	r0, r4
 801d9e2:	7843      	ldrb	r3, [r0, #1]
 801d9e4:	f013 0308 	ands.w	r3, r3, #8
 801d9e8:	d132      	bne.n	801da50 <_strtol_l.isra.0+0x8a>
 801d9ea:	2c2d      	cmp	r4, #45	; 0x2d
 801d9ec:	d132      	bne.n	801da54 <_strtol_l.isra.0+0x8e>
 801d9ee:	787c      	ldrb	r4, [r7, #1]
 801d9f0:	1cbd      	adds	r5, r7, #2
 801d9f2:	2201      	movs	r2, #1
 801d9f4:	2e00      	cmp	r6, #0
 801d9f6:	d05d      	beq.n	801dab4 <_strtol_l.isra.0+0xee>
 801d9f8:	2e10      	cmp	r6, #16
 801d9fa:	d109      	bne.n	801da10 <_strtol_l.isra.0+0x4a>
 801d9fc:	2c30      	cmp	r4, #48	; 0x30
 801d9fe:	d107      	bne.n	801da10 <_strtol_l.isra.0+0x4a>
 801da00:	782b      	ldrb	r3, [r5, #0]
 801da02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801da06:	2b58      	cmp	r3, #88	; 0x58
 801da08:	d14f      	bne.n	801daaa <_strtol_l.isra.0+0xe4>
 801da0a:	786c      	ldrb	r4, [r5, #1]
 801da0c:	2610      	movs	r6, #16
 801da0e:	3502      	adds	r5, #2
 801da10:	2a00      	cmp	r2, #0
 801da12:	bf14      	ite	ne
 801da14:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801da18:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801da1c:	2700      	movs	r7, #0
 801da1e:	fbb1 fcf6 	udiv	ip, r1, r6
 801da22:	4638      	mov	r0, r7
 801da24:	fb06 1e1c 	mls	lr, r6, ip, r1
 801da28:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801da2c:	2b09      	cmp	r3, #9
 801da2e:	d817      	bhi.n	801da60 <_strtol_l.isra.0+0x9a>
 801da30:	461c      	mov	r4, r3
 801da32:	42a6      	cmp	r6, r4
 801da34:	dd23      	ble.n	801da7e <_strtol_l.isra.0+0xb8>
 801da36:	1c7b      	adds	r3, r7, #1
 801da38:	d007      	beq.n	801da4a <_strtol_l.isra.0+0x84>
 801da3a:	4584      	cmp	ip, r0
 801da3c:	d31c      	bcc.n	801da78 <_strtol_l.isra.0+0xb2>
 801da3e:	d101      	bne.n	801da44 <_strtol_l.isra.0+0x7e>
 801da40:	45a6      	cmp	lr, r4
 801da42:	db19      	blt.n	801da78 <_strtol_l.isra.0+0xb2>
 801da44:	fb00 4006 	mla	r0, r0, r6, r4
 801da48:	2701      	movs	r7, #1
 801da4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da4e:	e7eb      	b.n	801da28 <_strtol_l.isra.0+0x62>
 801da50:	462f      	mov	r7, r5
 801da52:	e7bf      	b.n	801d9d4 <_strtol_l.isra.0+0xe>
 801da54:	2c2b      	cmp	r4, #43	; 0x2b
 801da56:	bf04      	itt	eq
 801da58:	1cbd      	addeq	r5, r7, #2
 801da5a:	787c      	ldrbeq	r4, [r7, #1]
 801da5c:	461a      	mov	r2, r3
 801da5e:	e7c9      	b.n	801d9f4 <_strtol_l.isra.0+0x2e>
 801da60:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801da64:	2b19      	cmp	r3, #25
 801da66:	d801      	bhi.n	801da6c <_strtol_l.isra.0+0xa6>
 801da68:	3c37      	subs	r4, #55	; 0x37
 801da6a:	e7e2      	b.n	801da32 <_strtol_l.isra.0+0x6c>
 801da6c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801da70:	2b19      	cmp	r3, #25
 801da72:	d804      	bhi.n	801da7e <_strtol_l.isra.0+0xb8>
 801da74:	3c57      	subs	r4, #87	; 0x57
 801da76:	e7dc      	b.n	801da32 <_strtol_l.isra.0+0x6c>
 801da78:	f04f 37ff 	mov.w	r7, #4294967295
 801da7c:	e7e5      	b.n	801da4a <_strtol_l.isra.0+0x84>
 801da7e:	1c7b      	adds	r3, r7, #1
 801da80:	d108      	bne.n	801da94 <_strtol_l.isra.0+0xce>
 801da82:	2322      	movs	r3, #34	; 0x22
 801da84:	f8c8 3000 	str.w	r3, [r8]
 801da88:	4608      	mov	r0, r1
 801da8a:	f1ba 0f00 	cmp.w	sl, #0
 801da8e:	d107      	bne.n	801daa0 <_strtol_l.isra.0+0xda>
 801da90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da94:	b102      	cbz	r2, 801da98 <_strtol_l.isra.0+0xd2>
 801da96:	4240      	negs	r0, r0
 801da98:	f1ba 0f00 	cmp.w	sl, #0
 801da9c:	d0f8      	beq.n	801da90 <_strtol_l.isra.0+0xca>
 801da9e:	b10f      	cbz	r7, 801daa4 <_strtol_l.isra.0+0xde>
 801daa0:	f105 39ff 	add.w	r9, r5, #4294967295
 801daa4:	f8ca 9000 	str.w	r9, [sl]
 801daa8:	e7f2      	b.n	801da90 <_strtol_l.isra.0+0xca>
 801daaa:	2430      	movs	r4, #48	; 0x30
 801daac:	2e00      	cmp	r6, #0
 801daae:	d1af      	bne.n	801da10 <_strtol_l.isra.0+0x4a>
 801dab0:	2608      	movs	r6, #8
 801dab2:	e7ad      	b.n	801da10 <_strtol_l.isra.0+0x4a>
 801dab4:	2c30      	cmp	r4, #48	; 0x30
 801dab6:	d0a3      	beq.n	801da00 <_strtol_l.isra.0+0x3a>
 801dab8:	260a      	movs	r6, #10
 801daba:	e7a9      	b.n	801da10 <_strtol_l.isra.0+0x4a>

0801dabc <_strtol_r>:
 801dabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dabe:	4c06      	ldr	r4, [pc, #24]	; (801dad8 <_strtol_r+0x1c>)
 801dac0:	4d06      	ldr	r5, [pc, #24]	; (801dadc <_strtol_r+0x20>)
 801dac2:	6824      	ldr	r4, [r4, #0]
 801dac4:	6a24      	ldr	r4, [r4, #32]
 801dac6:	2c00      	cmp	r4, #0
 801dac8:	bf08      	it	eq
 801daca:	462c      	moveq	r4, r5
 801dacc:	9400      	str	r4, [sp, #0]
 801dace:	f7ff ff7a 	bl	801d9c6 <_strtol_l.isra.0>
 801dad2:	b003      	add	sp, #12
 801dad4:	bd30      	pop	{r4, r5, pc}
 801dad6:	bf00      	nop
 801dad8:	200004b8 	.word	0x200004b8
 801dadc:	20000580 	.word	0x20000580

0801dae0 <strtol>:
 801dae0:	4b08      	ldr	r3, [pc, #32]	; (801db04 <strtol+0x24>)
 801dae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dae4:	681c      	ldr	r4, [r3, #0]
 801dae6:	4d08      	ldr	r5, [pc, #32]	; (801db08 <strtol+0x28>)
 801dae8:	6a23      	ldr	r3, [r4, #32]
 801daea:	2b00      	cmp	r3, #0
 801daec:	bf08      	it	eq
 801daee:	462b      	moveq	r3, r5
 801daf0:	9300      	str	r3, [sp, #0]
 801daf2:	4613      	mov	r3, r2
 801daf4:	460a      	mov	r2, r1
 801daf6:	4601      	mov	r1, r0
 801daf8:	4620      	mov	r0, r4
 801dafa:	f7ff ff64 	bl	801d9c6 <_strtol_l.isra.0>
 801dafe:	b003      	add	sp, #12
 801db00:	bd30      	pop	{r4, r5, pc}
 801db02:	bf00      	nop
 801db04:	200004b8 	.word	0x200004b8
 801db08:	20000580 	.word	0x20000580

0801db0c <__tzcalc_limits>:
 801db0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db10:	4680      	mov	r8, r0
 801db12:	f000 fcdd 	bl	801e4d0 <__gettzinfo>
 801db16:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801db1a:	4598      	cmp	r8, r3
 801db1c:	f340 8098 	ble.w	801dc50 <__tzcalc_limits+0x144>
 801db20:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801db24:	4443      	add	r3, r8
 801db26:	109b      	asrs	r3, r3, #2
 801db28:	f240 126d 	movw	r2, #365	; 0x16d
 801db2c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801db30:	fb02 3505 	mla	r5, r2, r5, r3
 801db34:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801db38:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801db3c:	fb93 f3f2 	sdiv	r3, r3, r2
 801db40:	441d      	add	r5, r3
 801db42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801db46:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801db4a:	fb98 f7f3 	sdiv	r7, r8, r3
 801db4e:	fb03 8717 	mls	r7, r3, r7, r8
 801db52:	4442      	add	r2, r8
 801db54:	fab7 fc87 	clz	ip, r7
 801db58:	fb92 f2f3 	sdiv	r2, r2, r3
 801db5c:	f008 0303 	and.w	r3, r8, #3
 801db60:	4415      	add	r5, r2
 801db62:	2264      	movs	r2, #100	; 0x64
 801db64:	f8c0 8004 	str.w	r8, [r0, #4]
 801db68:	fb98 f6f2 	sdiv	r6, r8, r2
 801db6c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801db70:	fb02 8616 	mls	r6, r2, r6, r8
 801db74:	4604      	mov	r4, r0
 801db76:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801db7a:	9300      	str	r3, [sp, #0]
 801db7c:	f04f 0e07 	mov.w	lr, #7
 801db80:	7a22      	ldrb	r2, [r4, #8]
 801db82:	6963      	ldr	r3, [r4, #20]
 801db84:	2a4a      	cmp	r2, #74	; 0x4a
 801db86:	d128      	bne.n	801dbda <__tzcalc_limits+0xce>
 801db88:	9900      	ldr	r1, [sp, #0]
 801db8a:	18ea      	adds	r2, r5, r3
 801db8c:	b901      	cbnz	r1, 801db90 <__tzcalc_limits+0x84>
 801db8e:	b906      	cbnz	r6, 801db92 <__tzcalc_limits+0x86>
 801db90:	bb0f      	cbnz	r7, 801dbd6 <__tzcalc_limits+0xca>
 801db92:	2b3b      	cmp	r3, #59	; 0x3b
 801db94:	bfd4      	ite	le
 801db96:	2300      	movle	r3, #0
 801db98:	2301      	movgt	r3, #1
 801db9a:	4413      	add	r3, r2
 801db9c:	1e5a      	subs	r2, r3, #1
 801db9e:	69a3      	ldr	r3, [r4, #24]
 801dba0:	492c      	ldr	r1, [pc, #176]	; (801dc54 <__tzcalc_limits+0x148>)
 801dba2:	fb01 3202 	mla	r2, r1, r2, r3
 801dba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801dba8:	4413      	add	r3, r2
 801dbaa:	461a      	mov	r2, r3
 801dbac:	17db      	asrs	r3, r3, #31
 801dbae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801dbb2:	3428      	adds	r4, #40	; 0x28
 801dbb4:	45a3      	cmp	fp, r4
 801dbb6:	d1e3      	bne.n	801db80 <__tzcalc_limits+0x74>
 801dbb8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801dbbc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801dbc0:	4294      	cmp	r4, r2
 801dbc2:	eb75 0303 	sbcs.w	r3, r5, r3
 801dbc6:	bfb4      	ite	lt
 801dbc8:	2301      	movlt	r3, #1
 801dbca:	2300      	movge	r3, #0
 801dbcc:	6003      	str	r3, [r0, #0]
 801dbce:	2001      	movs	r0, #1
 801dbd0:	b003      	add	sp, #12
 801dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	e7df      	b.n	801db9a <__tzcalc_limits+0x8e>
 801dbda:	2a44      	cmp	r2, #68	; 0x44
 801dbdc:	d101      	bne.n	801dbe2 <__tzcalc_limits+0xd6>
 801dbde:	18ea      	adds	r2, r5, r3
 801dbe0:	e7dd      	b.n	801db9e <__tzcalc_limits+0x92>
 801dbe2:	9a00      	ldr	r2, [sp, #0]
 801dbe4:	bb72      	cbnz	r2, 801dc44 <__tzcalc_limits+0x138>
 801dbe6:	2e00      	cmp	r6, #0
 801dbe8:	bf0c      	ite	eq
 801dbea:	46e1      	moveq	r9, ip
 801dbec:	f04f 0901 	movne.w	r9, #1
 801dbf0:	2230      	movs	r2, #48	; 0x30
 801dbf2:	fb02 f909 	mul.w	r9, r2, r9
 801dbf6:	68e2      	ldr	r2, [r4, #12]
 801dbf8:	9201      	str	r2, [sp, #4]
 801dbfa:	f04f 0800 	mov.w	r8, #0
 801dbfe:	462a      	mov	r2, r5
 801dc00:	f108 0801 	add.w	r8, r8, #1
 801dc04:	4914      	ldr	r1, [pc, #80]	; (801dc58 <__tzcalc_limits+0x14c>)
 801dc06:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 801dc0a:	448a      	add	sl, r1
 801dc0c:	9901      	ldr	r1, [sp, #4]
 801dc0e:	f85a ac04 	ldr.w	sl, [sl, #-4]
 801dc12:	4541      	cmp	r1, r8
 801dc14:	dc18      	bgt.n	801dc48 <__tzcalc_limits+0x13c>
 801dc16:	f102 0804 	add.w	r8, r2, #4
 801dc1a:	fb98 f9fe 	sdiv	r9, r8, lr
 801dc1e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801dc22:	eba8 0909 	sub.w	r9, r8, r9
 801dc26:	ebb3 0909 	subs.w	r9, r3, r9
 801dc2a:	6923      	ldr	r3, [r4, #16]
 801dc2c:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc30:	bf48      	it	mi
 801dc32:	f109 0907 	addmi.w	r9, r9, #7
 801dc36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801dc3a:	444b      	add	r3, r9
 801dc3c:	4553      	cmp	r3, sl
 801dc3e:	da05      	bge.n	801dc4c <__tzcalc_limits+0x140>
 801dc40:	441a      	add	r2, r3
 801dc42:	e7ac      	b.n	801db9e <__tzcalc_limits+0x92>
 801dc44:	46e1      	mov	r9, ip
 801dc46:	e7d3      	b.n	801dbf0 <__tzcalc_limits+0xe4>
 801dc48:	4452      	add	r2, sl
 801dc4a:	e7d9      	b.n	801dc00 <__tzcalc_limits+0xf4>
 801dc4c:	3b07      	subs	r3, #7
 801dc4e:	e7f5      	b.n	801dc3c <__tzcalc_limits+0x130>
 801dc50:	2000      	movs	r0, #0
 801dc52:	e7bd      	b.n	801dbd0 <__tzcalc_limits+0xc4>
 801dc54:	00015180 	.word	0x00015180
 801dc58:	08039e1c 	.word	0x08039e1c

0801dc5c <__tz_lock>:
 801dc5c:	4770      	bx	lr

0801dc5e <__tz_unlock>:
 801dc5e:	4770      	bx	lr

0801dc60 <_tzset_unlocked>:
 801dc60:	4b01      	ldr	r3, [pc, #4]	; (801dc68 <_tzset_unlocked+0x8>)
 801dc62:	6818      	ldr	r0, [r3, #0]
 801dc64:	f000 b802 	b.w	801dc6c <_tzset_unlocked_r>
 801dc68:	200004b8 	.word	0x200004b8

0801dc6c <_tzset_unlocked_r>:
 801dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc70:	b08d      	sub	sp, #52	; 0x34
 801dc72:	4607      	mov	r7, r0
 801dc74:	f000 fc2c 	bl	801e4d0 <__gettzinfo>
 801dc78:	49af      	ldr	r1, [pc, #700]	; (801df38 <_tzset_unlocked_r+0x2cc>)
 801dc7a:	4eb0      	ldr	r6, [pc, #704]	; (801df3c <_tzset_unlocked_r+0x2d0>)
 801dc7c:	4605      	mov	r5, r0
 801dc7e:	4638      	mov	r0, r7
 801dc80:	f000 fc1e 	bl	801e4c0 <_getenv_r>
 801dc84:	4604      	mov	r4, r0
 801dc86:	b970      	cbnz	r0, 801dca6 <_tzset_unlocked_r+0x3a>
 801dc88:	4bad      	ldr	r3, [pc, #692]	; (801df40 <_tzset_unlocked_r+0x2d4>)
 801dc8a:	4aae      	ldr	r2, [pc, #696]	; (801df44 <_tzset_unlocked_r+0x2d8>)
 801dc8c:	6018      	str	r0, [r3, #0]
 801dc8e:	4bae      	ldr	r3, [pc, #696]	; (801df48 <_tzset_unlocked_r+0x2dc>)
 801dc90:	6018      	str	r0, [r3, #0]
 801dc92:	4bae      	ldr	r3, [pc, #696]	; (801df4c <_tzset_unlocked_r+0x2e0>)
 801dc94:	6830      	ldr	r0, [r6, #0]
 801dc96:	e9c3 2200 	strd	r2, r2, [r3]
 801dc9a:	f7ff f93f 	bl	801cf1c <free>
 801dc9e:	6034      	str	r4, [r6, #0]
 801dca0:	b00d      	add	sp, #52	; 0x34
 801dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dca6:	6831      	ldr	r1, [r6, #0]
 801dca8:	2900      	cmp	r1, #0
 801dcaa:	d15f      	bne.n	801dd6c <_tzset_unlocked_r+0x100>
 801dcac:	6830      	ldr	r0, [r6, #0]
 801dcae:	f7ff f935 	bl	801cf1c <free>
 801dcb2:	4620      	mov	r0, r4
 801dcb4:	f7e2 face 	bl	8000254 <strlen>
 801dcb8:	1c41      	adds	r1, r0, #1
 801dcba:	4638      	mov	r0, r7
 801dcbc:	f7ff fc3a 	bl	801d534 <_malloc_r>
 801dcc0:	6030      	str	r0, [r6, #0]
 801dcc2:	2800      	cmp	r0, #0
 801dcc4:	d157      	bne.n	801dd76 <_tzset_unlocked_r+0x10a>
 801dcc6:	7823      	ldrb	r3, [r4, #0]
 801dcc8:	4aa1      	ldr	r2, [pc, #644]	; (801df50 <_tzset_unlocked_r+0x2e4>)
 801dcca:	49a2      	ldr	r1, [pc, #648]	; (801df54 <_tzset_unlocked_r+0x2e8>)
 801dccc:	2b3a      	cmp	r3, #58	; 0x3a
 801dcce:	bf08      	it	eq
 801dcd0:	3401      	addeq	r4, #1
 801dcd2:	ae0a      	add	r6, sp, #40	; 0x28
 801dcd4:	4633      	mov	r3, r6
 801dcd6:	4620      	mov	r0, r4
 801dcd8:	f7ff fdca 	bl	801d870 <siscanf>
 801dcdc:	2800      	cmp	r0, #0
 801dcde:	dddf      	ble.n	801dca0 <_tzset_unlocked_r+0x34>
 801dce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dce2:	18e7      	adds	r7, r4, r3
 801dce4:	5ce3      	ldrb	r3, [r4, r3]
 801dce6:	2b2d      	cmp	r3, #45	; 0x2d
 801dce8:	d149      	bne.n	801dd7e <_tzset_unlocked_r+0x112>
 801dcea:	3701      	adds	r7, #1
 801dcec:	f04f 34ff 	mov.w	r4, #4294967295
 801dcf0:	f10d 0a20 	add.w	sl, sp, #32
 801dcf4:	f10d 0b1e 	add.w	fp, sp, #30
 801dcf8:	f04f 0800 	mov.w	r8, #0
 801dcfc:	9603      	str	r6, [sp, #12]
 801dcfe:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801dd02:	f8cd b000 	str.w	fp, [sp]
 801dd06:	4633      	mov	r3, r6
 801dd08:	aa07      	add	r2, sp, #28
 801dd0a:	4993      	ldr	r1, [pc, #588]	; (801df58 <_tzset_unlocked_r+0x2ec>)
 801dd0c:	f8ad 801e 	strh.w	r8, [sp, #30]
 801dd10:	4638      	mov	r0, r7
 801dd12:	f8ad 8020 	strh.w	r8, [sp, #32]
 801dd16:	f7ff fdab 	bl	801d870 <siscanf>
 801dd1a:	4540      	cmp	r0, r8
 801dd1c:	ddc0      	ble.n	801dca0 <_tzset_unlocked_r+0x34>
 801dd1e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801dd22:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dd26:	f8df 923c 	ldr.w	r9, [pc, #572]	; 801df64 <_tzset_unlocked_r+0x2f8>
 801dd2a:	213c      	movs	r1, #60	; 0x3c
 801dd2c:	fb01 2203 	mla	r2, r1, r3, r2
 801dd30:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801dd34:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801dd38:	fb01 2303 	mla	r3, r1, r3, r2
 801dd3c:	435c      	muls	r4, r3
 801dd3e:	62ac      	str	r4, [r5, #40]	; 0x28
 801dd40:	4c82      	ldr	r4, [pc, #520]	; (801df4c <_tzset_unlocked_r+0x2e0>)
 801dd42:	4b83      	ldr	r3, [pc, #524]	; (801df50 <_tzset_unlocked_r+0x2e4>)
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd48:	4982      	ldr	r1, [pc, #520]	; (801df54 <_tzset_unlocked_r+0x2e8>)
 801dd4a:	441f      	add	r7, r3
 801dd4c:	464a      	mov	r2, r9
 801dd4e:	4633      	mov	r3, r6
 801dd50:	4638      	mov	r0, r7
 801dd52:	f7ff fd8d 	bl	801d870 <siscanf>
 801dd56:	4540      	cmp	r0, r8
 801dd58:	dc16      	bgt.n	801dd88 <_tzset_unlocked_r+0x11c>
 801dd5a:	6823      	ldr	r3, [r4, #0]
 801dd5c:	6063      	str	r3, [r4, #4]
 801dd5e:	4b78      	ldr	r3, [pc, #480]	; (801df40 <_tzset_unlocked_r+0x2d4>)
 801dd60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801dd62:	601a      	str	r2, [r3, #0]
 801dd64:	4b78      	ldr	r3, [pc, #480]	; (801df48 <_tzset_unlocked_r+0x2dc>)
 801dd66:	f8c3 8000 	str.w	r8, [r3]
 801dd6a:	e799      	b.n	801dca0 <_tzset_unlocked_r+0x34>
 801dd6c:	f7e2 fa68 	bl	8000240 <strcmp>
 801dd70:	2800      	cmp	r0, #0
 801dd72:	d095      	beq.n	801dca0 <_tzset_unlocked_r+0x34>
 801dd74:	e79a      	b.n	801dcac <_tzset_unlocked_r+0x40>
 801dd76:	4621      	mov	r1, r4
 801dd78:	f7ff fdf6 	bl	801d968 <strcpy>
 801dd7c:	e7a3      	b.n	801dcc6 <_tzset_unlocked_r+0x5a>
 801dd7e:	2b2b      	cmp	r3, #43	; 0x2b
 801dd80:	bf08      	it	eq
 801dd82:	3701      	addeq	r7, #1
 801dd84:	2401      	movs	r4, #1
 801dd86:	e7b3      	b.n	801dcf0 <_tzset_unlocked_r+0x84>
 801dd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd8a:	f8c4 9004 	str.w	r9, [r4, #4]
 801dd8e:	18fc      	adds	r4, r7, r3
 801dd90:	5cfb      	ldrb	r3, [r7, r3]
 801dd92:	2b2d      	cmp	r3, #45	; 0x2d
 801dd94:	f040 808b 	bne.w	801deae <_tzset_unlocked_r+0x242>
 801dd98:	3401      	adds	r4, #1
 801dd9a:	f04f 37ff 	mov.w	r7, #4294967295
 801dd9e:	2300      	movs	r3, #0
 801dda0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dda4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dda8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ddac:	930a      	str	r3, [sp, #40]	; 0x28
 801ddae:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ddb2:	e9cd b600 	strd	fp, r6, [sp]
 801ddb6:	4633      	mov	r3, r6
 801ddb8:	aa07      	add	r2, sp, #28
 801ddba:	4967      	ldr	r1, [pc, #412]	; (801df58 <_tzset_unlocked_r+0x2ec>)
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	f7ff fd57 	bl	801d870 <siscanf>
 801ddc2:	2800      	cmp	r0, #0
 801ddc4:	dc78      	bgt.n	801deb8 <_tzset_unlocked_r+0x24c>
 801ddc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801ddc8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801ddcc:	652b      	str	r3, [r5, #80]	; 0x50
 801ddce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddd0:	462f      	mov	r7, r5
 801ddd2:	441c      	add	r4, r3
 801ddd4:	f04f 0900 	mov.w	r9, #0
 801ddd8:	7823      	ldrb	r3, [r4, #0]
 801ddda:	2b2c      	cmp	r3, #44	; 0x2c
 801dddc:	bf08      	it	eq
 801ddde:	3401      	addeq	r4, #1
 801dde0:	f894 8000 	ldrb.w	r8, [r4]
 801dde4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801dde8:	d179      	bne.n	801dede <_tzset_unlocked_r+0x272>
 801ddea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801ddee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ddf2:	ab09      	add	r3, sp, #36	; 0x24
 801ddf4:	9300      	str	r3, [sp, #0]
 801ddf6:	9603      	str	r6, [sp, #12]
 801ddf8:	4633      	mov	r3, r6
 801ddfa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ddfe:	4957      	ldr	r1, [pc, #348]	; (801df5c <_tzset_unlocked_r+0x2f0>)
 801de00:	4620      	mov	r0, r4
 801de02:	f7ff fd35 	bl	801d870 <siscanf>
 801de06:	2803      	cmp	r0, #3
 801de08:	f47f af4a 	bne.w	801dca0 <_tzset_unlocked_r+0x34>
 801de0c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801de10:	1e4b      	subs	r3, r1, #1
 801de12:	2b0b      	cmp	r3, #11
 801de14:	f63f af44 	bhi.w	801dca0 <_tzset_unlocked_r+0x34>
 801de18:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801de1c:	1e53      	subs	r3, r2, #1
 801de1e:	2b04      	cmp	r3, #4
 801de20:	f63f af3e 	bhi.w	801dca0 <_tzset_unlocked_r+0x34>
 801de24:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801de28:	2b06      	cmp	r3, #6
 801de2a:	f63f af39 	bhi.w	801dca0 <_tzset_unlocked_r+0x34>
 801de2e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801de32:	f887 8008 	strb.w	r8, [r7, #8]
 801de36:	617b      	str	r3, [r7, #20]
 801de38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de3a:	eb04 0803 	add.w	r8, r4, r3
 801de3e:	2302      	movs	r3, #2
 801de40:	f8ad 301c 	strh.w	r3, [sp, #28]
 801de44:	2300      	movs	r3, #0
 801de46:	f8ad 301e 	strh.w	r3, [sp, #30]
 801de4a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801de4e:	930a      	str	r3, [sp, #40]	; 0x28
 801de50:	f898 3000 	ldrb.w	r3, [r8]
 801de54:	2b2f      	cmp	r3, #47	; 0x2f
 801de56:	d109      	bne.n	801de6c <_tzset_unlocked_r+0x200>
 801de58:	e9cd a602 	strd	sl, r6, [sp, #8]
 801de5c:	e9cd b600 	strd	fp, r6, [sp]
 801de60:	4633      	mov	r3, r6
 801de62:	aa07      	add	r2, sp, #28
 801de64:	493e      	ldr	r1, [pc, #248]	; (801df60 <_tzset_unlocked_r+0x2f4>)
 801de66:	4640      	mov	r0, r8
 801de68:	f7ff fd02 	bl	801d870 <siscanf>
 801de6c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801de70:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801de74:	213c      	movs	r1, #60	; 0x3c
 801de76:	fb01 2203 	mla	r2, r1, r3, r2
 801de7a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801de7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801de82:	fb01 2303 	mla	r3, r1, r3, r2
 801de86:	61bb      	str	r3, [r7, #24]
 801de88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801de8a:	3728      	adds	r7, #40	; 0x28
 801de8c:	4444      	add	r4, r8
 801de8e:	f1b9 0f00 	cmp.w	r9, #0
 801de92:	d021      	beq.n	801ded8 <_tzset_unlocked_r+0x26c>
 801de94:	6868      	ldr	r0, [r5, #4]
 801de96:	f7ff fe39 	bl	801db0c <__tzcalc_limits>
 801de9a:	4b29      	ldr	r3, [pc, #164]	; (801df40 <_tzset_unlocked_r+0x2d4>)
 801de9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801de9e:	601a      	str	r2, [r3, #0]
 801dea0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801dea2:	1a9b      	subs	r3, r3, r2
 801dea4:	4a28      	ldr	r2, [pc, #160]	; (801df48 <_tzset_unlocked_r+0x2dc>)
 801dea6:	bf18      	it	ne
 801dea8:	2301      	movne	r3, #1
 801deaa:	6013      	str	r3, [r2, #0]
 801deac:	e6f8      	b.n	801dca0 <_tzset_unlocked_r+0x34>
 801deae:	2b2b      	cmp	r3, #43	; 0x2b
 801deb0:	bf08      	it	eq
 801deb2:	3401      	addeq	r4, #1
 801deb4:	2701      	movs	r7, #1
 801deb6:	e772      	b.n	801dd9e <_tzset_unlocked_r+0x132>
 801deb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801debc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dec0:	213c      	movs	r1, #60	; 0x3c
 801dec2:	fb01 2203 	mla	r2, r1, r3, r2
 801dec6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801deca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801dece:	fb01 2303 	mla	r3, r1, r3, r2
 801ded2:	435f      	muls	r7, r3
 801ded4:	652f      	str	r7, [r5, #80]	; 0x50
 801ded6:	e77a      	b.n	801ddce <_tzset_unlocked_r+0x162>
 801ded8:	f04f 0901 	mov.w	r9, #1
 801dedc:	e77c      	b.n	801ddd8 <_tzset_unlocked_r+0x16c>
 801dede:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801dee2:	bf06      	itte	eq
 801dee4:	3401      	addeq	r4, #1
 801dee6:	4643      	moveq	r3, r8
 801dee8:	2344      	movne	r3, #68	; 0x44
 801deea:	220a      	movs	r2, #10
 801deec:	a90b      	add	r1, sp, #44	; 0x2c
 801deee:	4620      	mov	r0, r4
 801def0:	9305      	str	r3, [sp, #20]
 801def2:	f001 fbd5 	bl	801f6a0 <strtoul>
 801def6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801defa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801defe:	45a0      	cmp	r8, r4
 801df00:	9b05      	ldr	r3, [sp, #20]
 801df02:	d114      	bne.n	801df2e <_tzset_unlocked_r+0x2c2>
 801df04:	234d      	movs	r3, #77	; 0x4d
 801df06:	f1b9 0f00 	cmp.w	r9, #0
 801df0a:	d107      	bne.n	801df1c <_tzset_unlocked_r+0x2b0>
 801df0c:	722b      	strb	r3, [r5, #8]
 801df0e:	2103      	movs	r1, #3
 801df10:	2302      	movs	r3, #2
 801df12:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801df16:	f8c5 9014 	str.w	r9, [r5, #20]
 801df1a:	e790      	b.n	801de3e <_tzset_unlocked_r+0x1d2>
 801df1c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801df20:	220b      	movs	r2, #11
 801df22:	2301      	movs	r3, #1
 801df24:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801df28:	2300      	movs	r3, #0
 801df2a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801df2c:	e787      	b.n	801de3e <_tzset_unlocked_r+0x1d2>
 801df2e:	b280      	uxth	r0, r0
 801df30:	723b      	strb	r3, [r7, #8]
 801df32:	6178      	str	r0, [r7, #20]
 801df34:	e783      	b.n	801de3e <_tzset_unlocked_r+0x1d2>
 801df36:	bf00      	nop
 801df38:	08039d74 	.word	0x08039d74
 801df3c:	200217e4 	.word	0x200217e4
 801df40:	200217ec 	.word	0x200217ec
 801df44:	08039d77 	.word	0x08039d77
 801df48:	200217e8 	.word	0x200217e8
 801df4c:	2000051c 	.word	0x2000051c
 801df50:	200217d7 	.word	0x200217d7
 801df54:	08039d7b 	.word	0x08039d7b
 801df58:	08039d9e 	.word	0x08039d9e
 801df5c:	08039d8a 	.word	0x08039d8a
 801df60:	08039d9d 	.word	0x08039d9d
 801df64:	200217cc 	.word	0x200217cc

0801df68 <__swbuf_r>:
 801df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df6a:	460e      	mov	r6, r1
 801df6c:	4614      	mov	r4, r2
 801df6e:	4605      	mov	r5, r0
 801df70:	b118      	cbz	r0, 801df7a <__swbuf_r+0x12>
 801df72:	6983      	ldr	r3, [r0, #24]
 801df74:	b90b      	cbnz	r3, 801df7a <__swbuf_r+0x12>
 801df76:	f000 f9dd 	bl	801e334 <__sinit>
 801df7a:	4b21      	ldr	r3, [pc, #132]	; (801e000 <__swbuf_r+0x98>)
 801df7c:	429c      	cmp	r4, r3
 801df7e:	d12a      	bne.n	801dfd6 <__swbuf_r+0x6e>
 801df80:	686c      	ldr	r4, [r5, #4]
 801df82:	69a3      	ldr	r3, [r4, #24]
 801df84:	60a3      	str	r3, [r4, #8]
 801df86:	89a3      	ldrh	r3, [r4, #12]
 801df88:	071a      	lsls	r2, r3, #28
 801df8a:	d52e      	bpl.n	801dfea <__swbuf_r+0x82>
 801df8c:	6923      	ldr	r3, [r4, #16]
 801df8e:	b363      	cbz	r3, 801dfea <__swbuf_r+0x82>
 801df90:	6923      	ldr	r3, [r4, #16]
 801df92:	6820      	ldr	r0, [r4, #0]
 801df94:	1ac0      	subs	r0, r0, r3
 801df96:	6963      	ldr	r3, [r4, #20]
 801df98:	b2f6      	uxtb	r6, r6
 801df9a:	4283      	cmp	r3, r0
 801df9c:	4637      	mov	r7, r6
 801df9e:	dc04      	bgt.n	801dfaa <__swbuf_r+0x42>
 801dfa0:	4621      	mov	r1, r4
 801dfa2:	4628      	mov	r0, r5
 801dfa4:	f000 f95c 	bl	801e260 <_fflush_r>
 801dfa8:	bb28      	cbnz	r0, 801dff6 <__swbuf_r+0x8e>
 801dfaa:	68a3      	ldr	r3, [r4, #8]
 801dfac:	3b01      	subs	r3, #1
 801dfae:	60a3      	str	r3, [r4, #8]
 801dfb0:	6823      	ldr	r3, [r4, #0]
 801dfb2:	1c5a      	adds	r2, r3, #1
 801dfb4:	6022      	str	r2, [r4, #0]
 801dfb6:	701e      	strb	r6, [r3, #0]
 801dfb8:	6963      	ldr	r3, [r4, #20]
 801dfba:	3001      	adds	r0, #1
 801dfbc:	4283      	cmp	r3, r0
 801dfbe:	d004      	beq.n	801dfca <__swbuf_r+0x62>
 801dfc0:	89a3      	ldrh	r3, [r4, #12]
 801dfc2:	07db      	lsls	r3, r3, #31
 801dfc4:	d519      	bpl.n	801dffa <__swbuf_r+0x92>
 801dfc6:	2e0a      	cmp	r6, #10
 801dfc8:	d117      	bne.n	801dffa <__swbuf_r+0x92>
 801dfca:	4621      	mov	r1, r4
 801dfcc:	4628      	mov	r0, r5
 801dfce:	f000 f947 	bl	801e260 <_fflush_r>
 801dfd2:	b190      	cbz	r0, 801dffa <__swbuf_r+0x92>
 801dfd4:	e00f      	b.n	801dff6 <__swbuf_r+0x8e>
 801dfd6:	4b0b      	ldr	r3, [pc, #44]	; (801e004 <__swbuf_r+0x9c>)
 801dfd8:	429c      	cmp	r4, r3
 801dfda:	d101      	bne.n	801dfe0 <__swbuf_r+0x78>
 801dfdc:	68ac      	ldr	r4, [r5, #8]
 801dfde:	e7d0      	b.n	801df82 <__swbuf_r+0x1a>
 801dfe0:	4b09      	ldr	r3, [pc, #36]	; (801e008 <__swbuf_r+0xa0>)
 801dfe2:	429c      	cmp	r4, r3
 801dfe4:	bf08      	it	eq
 801dfe6:	68ec      	ldreq	r4, [r5, #12]
 801dfe8:	e7cb      	b.n	801df82 <__swbuf_r+0x1a>
 801dfea:	4621      	mov	r1, r4
 801dfec:	4628      	mov	r0, r5
 801dfee:	f000 f81f 	bl	801e030 <__swsetup_r>
 801dff2:	2800      	cmp	r0, #0
 801dff4:	d0cc      	beq.n	801df90 <__swbuf_r+0x28>
 801dff6:	f04f 37ff 	mov.w	r7, #4294967295
 801dffa:	4638      	mov	r0, r7
 801dffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dffe:	bf00      	nop
 801e000:	08039dd0 	.word	0x08039dd0
 801e004:	08039df0 	.word	0x08039df0
 801e008:	08039db0 	.word	0x08039db0

0801e00c <_write_r>:
 801e00c:	b538      	push	{r3, r4, r5, lr}
 801e00e:	4c07      	ldr	r4, [pc, #28]	; (801e02c <_write_r+0x20>)
 801e010:	4605      	mov	r5, r0
 801e012:	4608      	mov	r0, r1
 801e014:	4611      	mov	r1, r2
 801e016:	2200      	movs	r2, #0
 801e018:	6022      	str	r2, [r4, #0]
 801e01a:	461a      	mov	r2, r3
 801e01c:	f7e2 ff7a 	bl	8000f14 <_write>
 801e020:	1c43      	adds	r3, r0, #1
 801e022:	d102      	bne.n	801e02a <_write_r+0x1e>
 801e024:	6823      	ldr	r3, [r4, #0]
 801e026:	b103      	cbz	r3, 801e02a <_write_r+0x1e>
 801e028:	602b      	str	r3, [r5, #0]
 801e02a:	bd38      	pop	{r3, r4, r5, pc}
 801e02c:	20033bd8 	.word	0x20033bd8

0801e030 <__swsetup_r>:
 801e030:	4b32      	ldr	r3, [pc, #200]	; (801e0fc <__swsetup_r+0xcc>)
 801e032:	b570      	push	{r4, r5, r6, lr}
 801e034:	681d      	ldr	r5, [r3, #0]
 801e036:	4606      	mov	r6, r0
 801e038:	460c      	mov	r4, r1
 801e03a:	b125      	cbz	r5, 801e046 <__swsetup_r+0x16>
 801e03c:	69ab      	ldr	r3, [r5, #24]
 801e03e:	b913      	cbnz	r3, 801e046 <__swsetup_r+0x16>
 801e040:	4628      	mov	r0, r5
 801e042:	f000 f977 	bl	801e334 <__sinit>
 801e046:	4b2e      	ldr	r3, [pc, #184]	; (801e100 <__swsetup_r+0xd0>)
 801e048:	429c      	cmp	r4, r3
 801e04a:	d10f      	bne.n	801e06c <__swsetup_r+0x3c>
 801e04c:	686c      	ldr	r4, [r5, #4]
 801e04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e052:	b29a      	uxth	r2, r3
 801e054:	0715      	lsls	r5, r2, #28
 801e056:	d42c      	bmi.n	801e0b2 <__swsetup_r+0x82>
 801e058:	06d0      	lsls	r0, r2, #27
 801e05a:	d411      	bmi.n	801e080 <__swsetup_r+0x50>
 801e05c:	2209      	movs	r2, #9
 801e05e:	6032      	str	r2, [r6, #0]
 801e060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e064:	81a3      	strh	r3, [r4, #12]
 801e066:	f04f 30ff 	mov.w	r0, #4294967295
 801e06a:	e03e      	b.n	801e0ea <__swsetup_r+0xba>
 801e06c:	4b25      	ldr	r3, [pc, #148]	; (801e104 <__swsetup_r+0xd4>)
 801e06e:	429c      	cmp	r4, r3
 801e070:	d101      	bne.n	801e076 <__swsetup_r+0x46>
 801e072:	68ac      	ldr	r4, [r5, #8]
 801e074:	e7eb      	b.n	801e04e <__swsetup_r+0x1e>
 801e076:	4b24      	ldr	r3, [pc, #144]	; (801e108 <__swsetup_r+0xd8>)
 801e078:	429c      	cmp	r4, r3
 801e07a:	bf08      	it	eq
 801e07c:	68ec      	ldreq	r4, [r5, #12]
 801e07e:	e7e6      	b.n	801e04e <__swsetup_r+0x1e>
 801e080:	0751      	lsls	r1, r2, #29
 801e082:	d512      	bpl.n	801e0aa <__swsetup_r+0x7a>
 801e084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e086:	b141      	cbz	r1, 801e09a <__swsetup_r+0x6a>
 801e088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e08c:	4299      	cmp	r1, r3
 801e08e:	d002      	beq.n	801e096 <__swsetup_r+0x66>
 801e090:	4630      	mov	r0, r6
 801e092:	f7ff fa01 	bl	801d498 <_free_r>
 801e096:	2300      	movs	r3, #0
 801e098:	6363      	str	r3, [r4, #52]	; 0x34
 801e09a:	89a3      	ldrh	r3, [r4, #12]
 801e09c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e0a0:	81a3      	strh	r3, [r4, #12]
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	6063      	str	r3, [r4, #4]
 801e0a6:	6923      	ldr	r3, [r4, #16]
 801e0a8:	6023      	str	r3, [r4, #0]
 801e0aa:	89a3      	ldrh	r3, [r4, #12]
 801e0ac:	f043 0308 	orr.w	r3, r3, #8
 801e0b0:	81a3      	strh	r3, [r4, #12]
 801e0b2:	6923      	ldr	r3, [r4, #16]
 801e0b4:	b94b      	cbnz	r3, 801e0ca <__swsetup_r+0x9a>
 801e0b6:	89a3      	ldrh	r3, [r4, #12]
 801e0b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e0c0:	d003      	beq.n	801e0ca <__swsetup_r+0x9a>
 801e0c2:	4621      	mov	r1, r4
 801e0c4:	4630      	mov	r0, r6
 801e0c6:	f000 fa4f 	bl	801e568 <__smakebuf_r>
 801e0ca:	89a2      	ldrh	r2, [r4, #12]
 801e0cc:	f012 0301 	ands.w	r3, r2, #1
 801e0d0:	d00c      	beq.n	801e0ec <__swsetup_r+0xbc>
 801e0d2:	2300      	movs	r3, #0
 801e0d4:	60a3      	str	r3, [r4, #8]
 801e0d6:	6963      	ldr	r3, [r4, #20]
 801e0d8:	425b      	negs	r3, r3
 801e0da:	61a3      	str	r3, [r4, #24]
 801e0dc:	6923      	ldr	r3, [r4, #16]
 801e0de:	b953      	cbnz	r3, 801e0f6 <__swsetup_r+0xc6>
 801e0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801e0e8:	d1ba      	bne.n	801e060 <__swsetup_r+0x30>
 801e0ea:	bd70      	pop	{r4, r5, r6, pc}
 801e0ec:	0792      	lsls	r2, r2, #30
 801e0ee:	bf58      	it	pl
 801e0f0:	6963      	ldrpl	r3, [r4, #20]
 801e0f2:	60a3      	str	r3, [r4, #8]
 801e0f4:	e7f2      	b.n	801e0dc <__swsetup_r+0xac>
 801e0f6:	2000      	movs	r0, #0
 801e0f8:	e7f7      	b.n	801e0ea <__swsetup_r+0xba>
 801e0fa:	bf00      	nop
 801e0fc:	200004b8 	.word	0x200004b8
 801e100:	08039dd0 	.word	0x08039dd0
 801e104:	08039df0 	.word	0x08039df0
 801e108:	08039db0 	.word	0x08039db0

0801e10c <_close_r>:
 801e10c:	b538      	push	{r3, r4, r5, lr}
 801e10e:	4c06      	ldr	r4, [pc, #24]	; (801e128 <_close_r+0x1c>)
 801e110:	2300      	movs	r3, #0
 801e112:	4605      	mov	r5, r0
 801e114:	4608      	mov	r0, r1
 801e116:	6023      	str	r3, [r4, #0]
 801e118:	f7e5 fdd0 	bl	8003cbc <_close>
 801e11c:	1c43      	adds	r3, r0, #1
 801e11e:	d102      	bne.n	801e126 <_close_r+0x1a>
 801e120:	6823      	ldr	r3, [r4, #0]
 801e122:	b103      	cbz	r3, 801e126 <_close_r+0x1a>
 801e124:	602b      	str	r3, [r5, #0]
 801e126:	bd38      	pop	{r3, r4, r5, pc}
 801e128:	20033bd8 	.word	0x20033bd8

0801e12c <div>:
 801e12c:	2900      	cmp	r1, #0
 801e12e:	b510      	push	{r4, lr}
 801e130:	fb91 f4f2 	sdiv	r4, r1, r2
 801e134:	fb02 1314 	mls	r3, r2, r4, r1
 801e138:	db06      	blt.n	801e148 <div+0x1c>
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	da01      	bge.n	801e142 <div+0x16>
 801e13e:	3401      	adds	r4, #1
 801e140:	1a9b      	subs	r3, r3, r2
 801e142:	e9c0 4300 	strd	r4, r3, [r0]
 801e146:	bd10      	pop	{r4, pc}
 801e148:	2b00      	cmp	r3, #0
 801e14a:	bfc4      	itt	gt
 801e14c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e150:	189b      	addgt	r3, r3, r2
 801e152:	e7f6      	b.n	801e142 <div+0x16>

0801e154 <__sflush_r>:
 801e154:	898a      	ldrh	r2, [r1, #12]
 801e156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e15a:	4605      	mov	r5, r0
 801e15c:	0710      	lsls	r0, r2, #28
 801e15e:	460c      	mov	r4, r1
 801e160:	d458      	bmi.n	801e214 <__sflush_r+0xc0>
 801e162:	684b      	ldr	r3, [r1, #4]
 801e164:	2b00      	cmp	r3, #0
 801e166:	dc05      	bgt.n	801e174 <__sflush_r+0x20>
 801e168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	dc02      	bgt.n	801e174 <__sflush_r+0x20>
 801e16e:	2000      	movs	r0, #0
 801e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e176:	2e00      	cmp	r6, #0
 801e178:	d0f9      	beq.n	801e16e <__sflush_r+0x1a>
 801e17a:	2300      	movs	r3, #0
 801e17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e180:	682f      	ldr	r7, [r5, #0]
 801e182:	6a21      	ldr	r1, [r4, #32]
 801e184:	602b      	str	r3, [r5, #0]
 801e186:	d032      	beq.n	801e1ee <__sflush_r+0x9a>
 801e188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e18a:	89a3      	ldrh	r3, [r4, #12]
 801e18c:	075a      	lsls	r2, r3, #29
 801e18e:	d505      	bpl.n	801e19c <__sflush_r+0x48>
 801e190:	6863      	ldr	r3, [r4, #4]
 801e192:	1ac0      	subs	r0, r0, r3
 801e194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e196:	b10b      	cbz	r3, 801e19c <__sflush_r+0x48>
 801e198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e19a:	1ac0      	subs	r0, r0, r3
 801e19c:	2300      	movs	r3, #0
 801e19e:	4602      	mov	r2, r0
 801e1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e1a2:	6a21      	ldr	r1, [r4, #32]
 801e1a4:	4628      	mov	r0, r5
 801e1a6:	47b0      	blx	r6
 801e1a8:	1c43      	adds	r3, r0, #1
 801e1aa:	89a3      	ldrh	r3, [r4, #12]
 801e1ac:	d106      	bne.n	801e1bc <__sflush_r+0x68>
 801e1ae:	6829      	ldr	r1, [r5, #0]
 801e1b0:	291d      	cmp	r1, #29
 801e1b2:	d848      	bhi.n	801e246 <__sflush_r+0xf2>
 801e1b4:	4a29      	ldr	r2, [pc, #164]	; (801e25c <__sflush_r+0x108>)
 801e1b6:	40ca      	lsrs	r2, r1
 801e1b8:	07d6      	lsls	r6, r2, #31
 801e1ba:	d544      	bpl.n	801e246 <__sflush_r+0xf2>
 801e1bc:	2200      	movs	r2, #0
 801e1be:	6062      	str	r2, [r4, #4]
 801e1c0:	04d9      	lsls	r1, r3, #19
 801e1c2:	6922      	ldr	r2, [r4, #16]
 801e1c4:	6022      	str	r2, [r4, #0]
 801e1c6:	d504      	bpl.n	801e1d2 <__sflush_r+0x7e>
 801e1c8:	1c42      	adds	r2, r0, #1
 801e1ca:	d101      	bne.n	801e1d0 <__sflush_r+0x7c>
 801e1cc:	682b      	ldr	r3, [r5, #0]
 801e1ce:	b903      	cbnz	r3, 801e1d2 <__sflush_r+0x7e>
 801e1d0:	6560      	str	r0, [r4, #84]	; 0x54
 801e1d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1d4:	602f      	str	r7, [r5, #0]
 801e1d6:	2900      	cmp	r1, #0
 801e1d8:	d0c9      	beq.n	801e16e <__sflush_r+0x1a>
 801e1da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1de:	4299      	cmp	r1, r3
 801e1e0:	d002      	beq.n	801e1e8 <__sflush_r+0x94>
 801e1e2:	4628      	mov	r0, r5
 801e1e4:	f7ff f958 	bl	801d498 <_free_r>
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	6360      	str	r0, [r4, #52]	; 0x34
 801e1ec:	e7c0      	b.n	801e170 <__sflush_r+0x1c>
 801e1ee:	2301      	movs	r3, #1
 801e1f0:	4628      	mov	r0, r5
 801e1f2:	47b0      	blx	r6
 801e1f4:	1c41      	adds	r1, r0, #1
 801e1f6:	d1c8      	bne.n	801e18a <__sflush_r+0x36>
 801e1f8:	682b      	ldr	r3, [r5, #0]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d0c5      	beq.n	801e18a <__sflush_r+0x36>
 801e1fe:	2b1d      	cmp	r3, #29
 801e200:	d001      	beq.n	801e206 <__sflush_r+0xb2>
 801e202:	2b16      	cmp	r3, #22
 801e204:	d101      	bne.n	801e20a <__sflush_r+0xb6>
 801e206:	602f      	str	r7, [r5, #0]
 801e208:	e7b1      	b.n	801e16e <__sflush_r+0x1a>
 801e20a:	89a3      	ldrh	r3, [r4, #12]
 801e20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e210:	81a3      	strh	r3, [r4, #12]
 801e212:	e7ad      	b.n	801e170 <__sflush_r+0x1c>
 801e214:	690f      	ldr	r7, [r1, #16]
 801e216:	2f00      	cmp	r7, #0
 801e218:	d0a9      	beq.n	801e16e <__sflush_r+0x1a>
 801e21a:	0793      	lsls	r3, r2, #30
 801e21c:	680e      	ldr	r6, [r1, #0]
 801e21e:	bf08      	it	eq
 801e220:	694b      	ldreq	r3, [r1, #20]
 801e222:	600f      	str	r7, [r1, #0]
 801e224:	bf18      	it	ne
 801e226:	2300      	movne	r3, #0
 801e228:	eba6 0807 	sub.w	r8, r6, r7
 801e22c:	608b      	str	r3, [r1, #8]
 801e22e:	f1b8 0f00 	cmp.w	r8, #0
 801e232:	dd9c      	ble.n	801e16e <__sflush_r+0x1a>
 801e234:	4643      	mov	r3, r8
 801e236:	463a      	mov	r2, r7
 801e238:	6a21      	ldr	r1, [r4, #32]
 801e23a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e23c:	4628      	mov	r0, r5
 801e23e:	47b0      	blx	r6
 801e240:	2800      	cmp	r0, #0
 801e242:	dc06      	bgt.n	801e252 <__sflush_r+0xfe>
 801e244:	89a3      	ldrh	r3, [r4, #12]
 801e246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e24a:	81a3      	strh	r3, [r4, #12]
 801e24c:	f04f 30ff 	mov.w	r0, #4294967295
 801e250:	e78e      	b.n	801e170 <__sflush_r+0x1c>
 801e252:	4407      	add	r7, r0
 801e254:	eba8 0800 	sub.w	r8, r8, r0
 801e258:	e7e9      	b.n	801e22e <__sflush_r+0xda>
 801e25a:	bf00      	nop
 801e25c:	20400001 	.word	0x20400001

0801e260 <_fflush_r>:
 801e260:	b538      	push	{r3, r4, r5, lr}
 801e262:	690b      	ldr	r3, [r1, #16]
 801e264:	4605      	mov	r5, r0
 801e266:	460c      	mov	r4, r1
 801e268:	b1db      	cbz	r3, 801e2a2 <_fflush_r+0x42>
 801e26a:	b118      	cbz	r0, 801e274 <_fflush_r+0x14>
 801e26c:	6983      	ldr	r3, [r0, #24]
 801e26e:	b90b      	cbnz	r3, 801e274 <_fflush_r+0x14>
 801e270:	f000 f860 	bl	801e334 <__sinit>
 801e274:	4b0c      	ldr	r3, [pc, #48]	; (801e2a8 <_fflush_r+0x48>)
 801e276:	429c      	cmp	r4, r3
 801e278:	d109      	bne.n	801e28e <_fflush_r+0x2e>
 801e27a:	686c      	ldr	r4, [r5, #4]
 801e27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e280:	b17b      	cbz	r3, 801e2a2 <_fflush_r+0x42>
 801e282:	4621      	mov	r1, r4
 801e284:	4628      	mov	r0, r5
 801e286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e28a:	f7ff bf63 	b.w	801e154 <__sflush_r>
 801e28e:	4b07      	ldr	r3, [pc, #28]	; (801e2ac <_fflush_r+0x4c>)
 801e290:	429c      	cmp	r4, r3
 801e292:	d101      	bne.n	801e298 <_fflush_r+0x38>
 801e294:	68ac      	ldr	r4, [r5, #8]
 801e296:	e7f1      	b.n	801e27c <_fflush_r+0x1c>
 801e298:	4b05      	ldr	r3, [pc, #20]	; (801e2b0 <_fflush_r+0x50>)
 801e29a:	429c      	cmp	r4, r3
 801e29c:	bf08      	it	eq
 801e29e:	68ec      	ldreq	r4, [r5, #12]
 801e2a0:	e7ec      	b.n	801e27c <_fflush_r+0x1c>
 801e2a2:	2000      	movs	r0, #0
 801e2a4:	bd38      	pop	{r3, r4, r5, pc}
 801e2a6:	bf00      	nop
 801e2a8:	08039dd0 	.word	0x08039dd0
 801e2ac:	08039df0 	.word	0x08039df0
 801e2b0:	08039db0 	.word	0x08039db0

0801e2b4 <std>:
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	b510      	push	{r4, lr}
 801e2b8:	4604      	mov	r4, r0
 801e2ba:	e9c0 3300 	strd	r3, r3, [r0]
 801e2be:	6083      	str	r3, [r0, #8]
 801e2c0:	8181      	strh	r1, [r0, #12]
 801e2c2:	6643      	str	r3, [r0, #100]	; 0x64
 801e2c4:	81c2      	strh	r2, [r0, #14]
 801e2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e2ca:	6183      	str	r3, [r0, #24]
 801e2cc:	4619      	mov	r1, r3
 801e2ce:	2208      	movs	r2, #8
 801e2d0:	305c      	adds	r0, #92	; 0x5c
 801e2d2:	f7fe fe45 	bl	801cf60 <memset>
 801e2d6:	4b05      	ldr	r3, [pc, #20]	; (801e2ec <std+0x38>)
 801e2d8:	6263      	str	r3, [r4, #36]	; 0x24
 801e2da:	4b05      	ldr	r3, [pc, #20]	; (801e2f0 <std+0x3c>)
 801e2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 801e2de:	4b05      	ldr	r3, [pc, #20]	; (801e2f4 <std+0x40>)
 801e2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e2e2:	4b05      	ldr	r3, [pc, #20]	; (801e2f8 <std+0x44>)
 801e2e4:	6224      	str	r4, [r4, #32]
 801e2e6:	6323      	str	r3, [r4, #48]	; 0x30
 801e2e8:	bd10      	pop	{r4, pc}
 801e2ea:	bf00      	nop
 801e2ec:	0801d8c5 	.word	0x0801d8c5
 801e2f0:	0801d8eb 	.word	0x0801d8eb
 801e2f4:	0801d923 	.word	0x0801d923
 801e2f8:	0801d947 	.word	0x0801d947

0801e2fc <_cleanup_r>:
 801e2fc:	4901      	ldr	r1, [pc, #4]	; (801e304 <_cleanup_r+0x8>)
 801e2fe:	f000 b885 	b.w	801e40c <_fwalk_reent>
 801e302:	bf00      	nop
 801e304:	0801e261 	.word	0x0801e261

0801e308 <__sfmoreglue>:
 801e308:	b570      	push	{r4, r5, r6, lr}
 801e30a:	1e4a      	subs	r2, r1, #1
 801e30c:	2568      	movs	r5, #104	; 0x68
 801e30e:	4355      	muls	r5, r2
 801e310:	460e      	mov	r6, r1
 801e312:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e316:	f7ff f90d 	bl	801d534 <_malloc_r>
 801e31a:	4604      	mov	r4, r0
 801e31c:	b140      	cbz	r0, 801e330 <__sfmoreglue+0x28>
 801e31e:	2100      	movs	r1, #0
 801e320:	e9c0 1600 	strd	r1, r6, [r0]
 801e324:	300c      	adds	r0, #12
 801e326:	60a0      	str	r0, [r4, #8]
 801e328:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e32c:	f7fe fe18 	bl	801cf60 <memset>
 801e330:	4620      	mov	r0, r4
 801e332:	bd70      	pop	{r4, r5, r6, pc}

0801e334 <__sinit>:
 801e334:	6983      	ldr	r3, [r0, #24]
 801e336:	b510      	push	{r4, lr}
 801e338:	4604      	mov	r4, r0
 801e33a:	bb33      	cbnz	r3, 801e38a <__sinit+0x56>
 801e33c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801e340:	6503      	str	r3, [r0, #80]	; 0x50
 801e342:	4b12      	ldr	r3, [pc, #72]	; (801e38c <__sinit+0x58>)
 801e344:	4a12      	ldr	r2, [pc, #72]	; (801e390 <__sinit+0x5c>)
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	6282      	str	r2, [r0, #40]	; 0x28
 801e34a:	4298      	cmp	r0, r3
 801e34c:	bf04      	itt	eq
 801e34e:	2301      	moveq	r3, #1
 801e350:	6183      	streq	r3, [r0, #24]
 801e352:	f000 f81f 	bl	801e394 <__sfp>
 801e356:	6060      	str	r0, [r4, #4]
 801e358:	4620      	mov	r0, r4
 801e35a:	f000 f81b 	bl	801e394 <__sfp>
 801e35e:	60a0      	str	r0, [r4, #8]
 801e360:	4620      	mov	r0, r4
 801e362:	f000 f817 	bl	801e394 <__sfp>
 801e366:	2200      	movs	r2, #0
 801e368:	60e0      	str	r0, [r4, #12]
 801e36a:	2104      	movs	r1, #4
 801e36c:	6860      	ldr	r0, [r4, #4]
 801e36e:	f7ff ffa1 	bl	801e2b4 <std>
 801e372:	2201      	movs	r2, #1
 801e374:	2109      	movs	r1, #9
 801e376:	68a0      	ldr	r0, [r4, #8]
 801e378:	f7ff ff9c 	bl	801e2b4 <std>
 801e37c:	2202      	movs	r2, #2
 801e37e:	2112      	movs	r1, #18
 801e380:	68e0      	ldr	r0, [r4, #12]
 801e382:	f7ff ff97 	bl	801e2b4 <std>
 801e386:	2301      	movs	r3, #1
 801e388:	61a3      	str	r3, [r4, #24]
 801e38a:	bd10      	pop	{r4, pc}
 801e38c:	08039d10 	.word	0x08039d10
 801e390:	0801e2fd 	.word	0x0801e2fd

0801e394 <__sfp>:
 801e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e396:	4b1b      	ldr	r3, [pc, #108]	; (801e404 <__sfp+0x70>)
 801e398:	681e      	ldr	r6, [r3, #0]
 801e39a:	69b3      	ldr	r3, [r6, #24]
 801e39c:	4607      	mov	r7, r0
 801e39e:	b913      	cbnz	r3, 801e3a6 <__sfp+0x12>
 801e3a0:	4630      	mov	r0, r6
 801e3a2:	f7ff ffc7 	bl	801e334 <__sinit>
 801e3a6:	3648      	adds	r6, #72	; 0x48
 801e3a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	d503      	bpl.n	801e3b8 <__sfp+0x24>
 801e3b0:	6833      	ldr	r3, [r6, #0]
 801e3b2:	b133      	cbz	r3, 801e3c2 <__sfp+0x2e>
 801e3b4:	6836      	ldr	r6, [r6, #0]
 801e3b6:	e7f7      	b.n	801e3a8 <__sfp+0x14>
 801e3b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e3bc:	b16d      	cbz	r5, 801e3da <__sfp+0x46>
 801e3be:	3468      	adds	r4, #104	; 0x68
 801e3c0:	e7f4      	b.n	801e3ac <__sfp+0x18>
 801e3c2:	2104      	movs	r1, #4
 801e3c4:	4638      	mov	r0, r7
 801e3c6:	f7ff ff9f 	bl	801e308 <__sfmoreglue>
 801e3ca:	6030      	str	r0, [r6, #0]
 801e3cc:	2800      	cmp	r0, #0
 801e3ce:	d1f1      	bne.n	801e3b4 <__sfp+0x20>
 801e3d0:	230c      	movs	r3, #12
 801e3d2:	603b      	str	r3, [r7, #0]
 801e3d4:	4604      	mov	r4, r0
 801e3d6:	4620      	mov	r0, r4
 801e3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3da:	4b0b      	ldr	r3, [pc, #44]	; (801e408 <__sfp+0x74>)
 801e3dc:	6665      	str	r5, [r4, #100]	; 0x64
 801e3de:	e9c4 5500 	strd	r5, r5, [r4]
 801e3e2:	60a5      	str	r5, [r4, #8]
 801e3e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801e3e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801e3ec:	2208      	movs	r2, #8
 801e3ee:	4629      	mov	r1, r5
 801e3f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e3f4:	f7fe fdb4 	bl	801cf60 <memset>
 801e3f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e3fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e400:	e7e9      	b.n	801e3d6 <__sfp+0x42>
 801e402:	bf00      	nop
 801e404:	08039d10 	.word	0x08039d10
 801e408:	ffff0001 	.word	0xffff0001

0801e40c <_fwalk_reent>:
 801e40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e410:	4680      	mov	r8, r0
 801e412:	4689      	mov	r9, r1
 801e414:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e418:	2600      	movs	r6, #0
 801e41a:	b914      	cbnz	r4, 801e422 <_fwalk_reent+0x16>
 801e41c:	4630      	mov	r0, r6
 801e41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e422:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801e426:	3f01      	subs	r7, #1
 801e428:	d501      	bpl.n	801e42e <_fwalk_reent+0x22>
 801e42a:	6824      	ldr	r4, [r4, #0]
 801e42c:	e7f5      	b.n	801e41a <_fwalk_reent+0xe>
 801e42e:	89ab      	ldrh	r3, [r5, #12]
 801e430:	2b01      	cmp	r3, #1
 801e432:	d907      	bls.n	801e444 <_fwalk_reent+0x38>
 801e434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e438:	3301      	adds	r3, #1
 801e43a:	d003      	beq.n	801e444 <_fwalk_reent+0x38>
 801e43c:	4629      	mov	r1, r5
 801e43e:	4640      	mov	r0, r8
 801e440:	47c8      	blx	r9
 801e442:	4306      	orrs	r6, r0
 801e444:	3568      	adds	r5, #104	; 0x68
 801e446:	e7ee      	b.n	801e426 <_fwalk_reent+0x1a>

0801e448 <_findenv_r>:
 801e448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e44c:	4607      	mov	r7, r0
 801e44e:	468b      	mov	fp, r1
 801e450:	4690      	mov	r8, r2
 801e452:	f001 f982 	bl	801f75a <__env_lock>
 801e456:	4b19      	ldr	r3, [pc, #100]	; (801e4bc <_findenv_r+0x74>)
 801e458:	681d      	ldr	r5, [r3, #0]
 801e45a:	469a      	mov	sl, r3
 801e45c:	b13d      	cbz	r5, 801e46e <_findenv_r+0x26>
 801e45e:	465c      	mov	r4, fp
 801e460:	4623      	mov	r3, r4
 801e462:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e466:	b32a      	cbz	r2, 801e4b4 <_findenv_r+0x6c>
 801e468:	2a3d      	cmp	r2, #61	; 0x3d
 801e46a:	461c      	mov	r4, r3
 801e46c:	d1f8      	bne.n	801e460 <_findenv_r+0x18>
 801e46e:	4638      	mov	r0, r7
 801e470:	f001 f974 	bl	801f75c <__env_unlock>
 801e474:	2000      	movs	r0, #0
 801e476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e47a:	464d      	mov	r5, r9
 801e47c:	46a9      	mov	r9, r5
 801e47e:	f859 0b04 	ldr.w	r0, [r9], #4
 801e482:	2800      	cmp	r0, #0
 801e484:	d0f3      	beq.n	801e46e <_findenv_r+0x26>
 801e486:	4622      	mov	r2, r4
 801e488:	4659      	mov	r1, fp
 801e48a:	f7ff fa75 	bl	801d978 <strncmp>
 801e48e:	2800      	cmp	r0, #0
 801e490:	d1f3      	bne.n	801e47a <_findenv_r+0x32>
 801e492:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801e496:	191e      	adds	r6, r3, r4
 801e498:	5d1b      	ldrb	r3, [r3, r4]
 801e49a:	2b3d      	cmp	r3, #61	; 0x3d
 801e49c:	d1ed      	bne.n	801e47a <_findenv_r+0x32>
 801e49e:	f8da 3000 	ldr.w	r3, [sl]
 801e4a2:	1aed      	subs	r5, r5, r3
 801e4a4:	10ad      	asrs	r5, r5, #2
 801e4a6:	4638      	mov	r0, r7
 801e4a8:	f8c8 5000 	str.w	r5, [r8]
 801e4ac:	f001 f956 	bl	801f75c <__env_unlock>
 801e4b0:	1c70      	adds	r0, r6, #1
 801e4b2:	e7e0      	b.n	801e476 <_findenv_r+0x2e>
 801e4b4:	eba4 040b 	sub.w	r4, r4, fp
 801e4b8:	e7e0      	b.n	801e47c <_findenv_r+0x34>
 801e4ba:	bf00      	nop
 801e4bc:	200002b4 	.word	0x200002b4

0801e4c0 <_getenv_r>:
 801e4c0:	b507      	push	{r0, r1, r2, lr}
 801e4c2:	aa01      	add	r2, sp, #4
 801e4c4:	f7ff ffc0 	bl	801e448 <_findenv_r>
 801e4c8:	b003      	add	sp, #12
 801e4ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e4d0 <__gettzinfo>:
 801e4d0:	4800      	ldr	r0, [pc, #0]	; (801e4d4 <__gettzinfo+0x4>)
 801e4d2:	4770      	bx	lr
 801e4d4:	20000528 	.word	0x20000528

0801e4d8 <__locale_ctype_ptr_l>:
 801e4d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801e4dc:	4770      	bx	lr
	...

0801e4e0 <__locale_ctype_ptr>:
 801e4e0:	4b04      	ldr	r3, [pc, #16]	; (801e4f4 <__locale_ctype_ptr+0x14>)
 801e4e2:	4a05      	ldr	r2, [pc, #20]	; (801e4f8 <__locale_ctype_ptr+0x18>)
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	6a1b      	ldr	r3, [r3, #32]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	bf08      	it	eq
 801e4ec:	4613      	moveq	r3, r2
 801e4ee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801e4f2:	4770      	bx	lr
 801e4f4:	200004b8 	.word	0x200004b8
 801e4f8:	20000580 	.word	0x20000580

0801e4fc <_lseek_r>:
 801e4fc:	b538      	push	{r3, r4, r5, lr}
 801e4fe:	4c07      	ldr	r4, [pc, #28]	; (801e51c <_lseek_r+0x20>)
 801e500:	4605      	mov	r5, r0
 801e502:	4608      	mov	r0, r1
 801e504:	4611      	mov	r1, r2
 801e506:	2200      	movs	r2, #0
 801e508:	6022      	str	r2, [r4, #0]
 801e50a:	461a      	mov	r2, r3
 801e50c:	f7e5 fbe2 	bl	8003cd4 <_lseek>
 801e510:	1c43      	adds	r3, r0, #1
 801e512:	d102      	bne.n	801e51a <_lseek_r+0x1e>
 801e514:	6823      	ldr	r3, [r4, #0]
 801e516:	b103      	cbz	r3, 801e51a <_lseek_r+0x1e>
 801e518:	602b      	str	r3, [r5, #0]
 801e51a:	bd38      	pop	{r3, r4, r5, pc}
 801e51c:	20033bd8 	.word	0x20033bd8

0801e520 <__swhatbuf_r>:
 801e520:	b570      	push	{r4, r5, r6, lr}
 801e522:	460e      	mov	r6, r1
 801e524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e528:	2900      	cmp	r1, #0
 801e52a:	b096      	sub	sp, #88	; 0x58
 801e52c:	4614      	mov	r4, r2
 801e52e:	461d      	mov	r5, r3
 801e530:	da07      	bge.n	801e542 <__swhatbuf_r+0x22>
 801e532:	2300      	movs	r3, #0
 801e534:	602b      	str	r3, [r5, #0]
 801e536:	89b3      	ldrh	r3, [r6, #12]
 801e538:	061a      	lsls	r2, r3, #24
 801e53a:	d410      	bmi.n	801e55e <__swhatbuf_r+0x3e>
 801e53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e540:	e00e      	b.n	801e560 <__swhatbuf_r+0x40>
 801e542:	466a      	mov	r2, sp
 801e544:	f001 f90c 	bl	801f760 <_fstat_r>
 801e548:	2800      	cmp	r0, #0
 801e54a:	dbf2      	blt.n	801e532 <__swhatbuf_r+0x12>
 801e54c:	9a01      	ldr	r2, [sp, #4]
 801e54e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e556:	425a      	negs	r2, r3
 801e558:	415a      	adcs	r2, r3
 801e55a:	602a      	str	r2, [r5, #0]
 801e55c:	e7ee      	b.n	801e53c <__swhatbuf_r+0x1c>
 801e55e:	2340      	movs	r3, #64	; 0x40
 801e560:	2000      	movs	r0, #0
 801e562:	6023      	str	r3, [r4, #0]
 801e564:	b016      	add	sp, #88	; 0x58
 801e566:	bd70      	pop	{r4, r5, r6, pc}

0801e568 <__smakebuf_r>:
 801e568:	898b      	ldrh	r3, [r1, #12]
 801e56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e56c:	079d      	lsls	r5, r3, #30
 801e56e:	4606      	mov	r6, r0
 801e570:	460c      	mov	r4, r1
 801e572:	d507      	bpl.n	801e584 <__smakebuf_r+0x1c>
 801e574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e578:	6023      	str	r3, [r4, #0]
 801e57a:	6123      	str	r3, [r4, #16]
 801e57c:	2301      	movs	r3, #1
 801e57e:	6163      	str	r3, [r4, #20]
 801e580:	b002      	add	sp, #8
 801e582:	bd70      	pop	{r4, r5, r6, pc}
 801e584:	ab01      	add	r3, sp, #4
 801e586:	466a      	mov	r2, sp
 801e588:	f7ff ffca 	bl	801e520 <__swhatbuf_r>
 801e58c:	9900      	ldr	r1, [sp, #0]
 801e58e:	4605      	mov	r5, r0
 801e590:	4630      	mov	r0, r6
 801e592:	f7fe ffcf 	bl	801d534 <_malloc_r>
 801e596:	b948      	cbnz	r0, 801e5ac <__smakebuf_r+0x44>
 801e598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e59c:	059a      	lsls	r2, r3, #22
 801e59e:	d4ef      	bmi.n	801e580 <__smakebuf_r+0x18>
 801e5a0:	f023 0303 	bic.w	r3, r3, #3
 801e5a4:	f043 0302 	orr.w	r3, r3, #2
 801e5a8:	81a3      	strh	r3, [r4, #12]
 801e5aa:	e7e3      	b.n	801e574 <__smakebuf_r+0xc>
 801e5ac:	4b0d      	ldr	r3, [pc, #52]	; (801e5e4 <__smakebuf_r+0x7c>)
 801e5ae:	62b3      	str	r3, [r6, #40]	; 0x28
 801e5b0:	89a3      	ldrh	r3, [r4, #12]
 801e5b2:	6020      	str	r0, [r4, #0]
 801e5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e5b8:	81a3      	strh	r3, [r4, #12]
 801e5ba:	9b00      	ldr	r3, [sp, #0]
 801e5bc:	6163      	str	r3, [r4, #20]
 801e5be:	9b01      	ldr	r3, [sp, #4]
 801e5c0:	6120      	str	r0, [r4, #16]
 801e5c2:	b15b      	cbz	r3, 801e5dc <__smakebuf_r+0x74>
 801e5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5c8:	4630      	mov	r0, r6
 801e5ca:	f001 f8db 	bl	801f784 <_isatty_r>
 801e5ce:	b128      	cbz	r0, 801e5dc <__smakebuf_r+0x74>
 801e5d0:	89a3      	ldrh	r3, [r4, #12]
 801e5d2:	f023 0303 	bic.w	r3, r3, #3
 801e5d6:	f043 0301 	orr.w	r3, r3, #1
 801e5da:	81a3      	strh	r3, [r4, #12]
 801e5dc:	89a3      	ldrh	r3, [r4, #12]
 801e5de:	431d      	orrs	r5, r3
 801e5e0:	81a5      	strh	r5, [r4, #12]
 801e5e2:	e7cd      	b.n	801e580 <__smakebuf_r+0x18>
 801e5e4:	0801e2fd 	.word	0x0801e2fd

0801e5e8 <__ascii_mbtowc>:
 801e5e8:	b082      	sub	sp, #8
 801e5ea:	b901      	cbnz	r1, 801e5ee <__ascii_mbtowc+0x6>
 801e5ec:	a901      	add	r1, sp, #4
 801e5ee:	b142      	cbz	r2, 801e602 <__ascii_mbtowc+0x1a>
 801e5f0:	b14b      	cbz	r3, 801e606 <__ascii_mbtowc+0x1e>
 801e5f2:	7813      	ldrb	r3, [r2, #0]
 801e5f4:	600b      	str	r3, [r1, #0]
 801e5f6:	7812      	ldrb	r2, [r2, #0]
 801e5f8:	1c10      	adds	r0, r2, #0
 801e5fa:	bf18      	it	ne
 801e5fc:	2001      	movne	r0, #1
 801e5fe:	b002      	add	sp, #8
 801e600:	4770      	bx	lr
 801e602:	4610      	mov	r0, r2
 801e604:	e7fb      	b.n	801e5fe <__ascii_mbtowc+0x16>
 801e606:	f06f 0001 	mvn.w	r0, #1
 801e60a:	e7f8      	b.n	801e5fe <__ascii_mbtowc+0x16>

0801e60c <__malloc_lock>:
 801e60c:	4770      	bx	lr

0801e60e <__malloc_unlock>:
 801e60e:	4770      	bx	lr

0801e610 <_realloc_r>:
 801e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e612:	4607      	mov	r7, r0
 801e614:	4614      	mov	r4, r2
 801e616:	460e      	mov	r6, r1
 801e618:	b921      	cbnz	r1, 801e624 <_realloc_r+0x14>
 801e61a:	4611      	mov	r1, r2
 801e61c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e620:	f7fe bf88 	b.w	801d534 <_malloc_r>
 801e624:	b922      	cbnz	r2, 801e630 <_realloc_r+0x20>
 801e626:	f7fe ff37 	bl	801d498 <_free_r>
 801e62a:	4625      	mov	r5, r4
 801e62c:	4628      	mov	r0, r5
 801e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e630:	f001 f8d1 	bl	801f7d6 <_malloc_usable_size_r>
 801e634:	42a0      	cmp	r0, r4
 801e636:	d20f      	bcs.n	801e658 <_realloc_r+0x48>
 801e638:	4621      	mov	r1, r4
 801e63a:	4638      	mov	r0, r7
 801e63c:	f7fe ff7a 	bl	801d534 <_malloc_r>
 801e640:	4605      	mov	r5, r0
 801e642:	2800      	cmp	r0, #0
 801e644:	d0f2      	beq.n	801e62c <_realloc_r+0x1c>
 801e646:	4631      	mov	r1, r6
 801e648:	4622      	mov	r2, r4
 801e64a:	f7fe fc7e 	bl	801cf4a <memcpy>
 801e64e:	4631      	mov	r1, r6
 801e650:	4638      	mov	r0, r7
 801e652:	f7fe ff21 	bl	801d498 <_free_r>
 801e656:	e7e9      	b.n	801e62c <_realloc_r+0x1c>
 801e658:	4635      	mov	r5, r6
 801e65a:	e7e7      	b.n	801e62c <_realloc_r+0x1c>

0801e65c <__ssputs_r>:
 801e65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e660:	688e      	ldr	r6, [r1, #8]
 801e662:	429e      	cmp	r6, r3
 801e664:	4682      	mov	sl, r0
 801e666:	460c      	mov	r4, r1
 801e668:	4690      	mov	r8, r2
 801e66a:	4699      	mov	r9, r3
 801e66c:	d837      	bhi.n	801e6de <__ssputs_r+0x82>
 801e66e:	898a      	ldrh	r2, [r1, #12]
 801e670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e674:	d031      	beq.n	801e6da <__ssputs_r+0x7e>
 801e676:	6825      	ldr	r5, [r4, #0]
 801e678:	6909      	ldr	r1, [r1, #16]
 801e67a:	1a6f      	subs	r7, r5, r1
 801e67c:	6965      	ldr	r5, [r4, #20]
 801e67e:	2302      	movs	r3, #2
 801e680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e684:	fb95 f5f3 	sdiv	r5, r5, r3
 801e688:	f109 0301 	add.w	r3, r9, #1
 801e68c:	443b      	add	r3, r7
 801e68e:	429d      	cmp	r5, r3
 801e690:	bf38      	it	cc
 801e692:	461d      	movcc	r5, r3
 801e694:	0553      	lsls	r3, r2, #21
 801e696:	d530      	bpl.n	801e6fa <__ssputs_r+0x9e>
 801e698:	4629      	mov	r1, r5
 801e69a:	f7fe ff4b 	bl	801d534 <_malloc_r>
 801e69e:	4606      	mov	r6, r0
 801e6a0:	b950      	cbnz	r0, 801e6b8 <__ssputs_r+0x5c>
 801e6a2:	230c      	movs	r3, #12
 801e6a4:	f8ca 3000 	str.w	r3, [sl]
 801e6a8:	89a3      	ldrh	r3, [r4, #12]
 801e6aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6ae:	81a3      	strh	r3, [r4, #12]
 801e6b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6b8:	463a      	mov	r2, r7
 801e6ba:	6921      	ldr	r1, [r4, #16]
 801e6bc:	f7fe fc45 	bl	801cf4a <memcpy>
 801e6c0:	89a3      	ldrh	r3, [r4, #12]
 801e6c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6ca:	81a3      	strh	r3, [r4, #12]
 801e6cc:	6126      	str	r6, [r4, #16]
 801e6ce:	6165      	str	r5, [r4, #20]
 801e6d0:	443e      	add	r6, r7
 801e6d2:	1bed      	subs	r5, r5, r7
 801e6d4:	6026      	str	r6, [r4, #0]
 801e6d6:	60a5      	str	r5, [r4, #8]
 801e6d8:	464e      	mov	r6, r9
 801e6da:	454e      	cmp	r6, r9
 801e6dc:	d900      	bls.n	801e6e0 <__ssputs_r+0x84>
 801e6de:	464e      	mov	r6, r9
 801e6e0:	4632      	mov	r2, r6
 801e6e2:	4641      	mov	r1, r8
 801e6e4:	6820      	ldr	r0, [r4, #0]
 801e6e6:	f001 f85d 	bl	801f7a4 <memmove>
 801e6ea:	68a3      	ldr	r3, [r4, #8]
 801e6ec:	1b9b      	subs	r3, r3, r6
 801e6ee:	60a3      	str	r3, [r4, #8]
 801e6f0:	6823      	ldr	r3, [r4, #0]
 801e6f2:	441e      	add	r6, r3
 801e6f4:	6026      	str	r6, [r4, #0]
 801e6f6:	2000      	movs	r0, #0
 801e6f8:	e7dc      	b.n	801e6b4 <__ssputs_r+0x58>
 801e6fa:	462a      	mov	r2, r5
 801e6fc:	f7ff ff88 	bl	801e610 <_realloc_r>
 801e700:	4606      	mov	r6, r0
 801e702:	2800      	cmp	r0, #0
 801e704:	d1e2      	bne.n	801e6cc <__ssputs_r+0x70>
 801e706:	6921      	ldr	r1, [r4, #16]
 801e708:	4650      	mov	r0, sl
 801e70a:	f7fe fec5 	bl	801d498 <_free_r>
 801e70e:	e7c8      	b.n	801e6a2 <__ssputs_r+0x46>

0801e710 <_svfiprintf_r>:
 801e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e714:	461d      	mov	r5, r3
 801e716:	898b      	ldrh	r3, [r1, #12]
 801e718:	061f      	lsls	r7, r3, #24
 801e71a:	b09d      	sub	sp, #116	; 0x74
 801e71c:	4680      	mov	r8, r0
 801e71e:	460c      	mov	r4, r1
 801e720:	4616      	mov	r6, r2
 801e722:	d50f      	bpl.n	801e744 <_svfiprintf_r+0x34>
 801e724:	690b      	ldr	r3, [r1, #16]
 801e726:	b96b      	cbnz	r3, 801e744 <_svfiprintf_r+0x34>
 801e728:	2140      	movs	r1, #64	; 0x40
 801e72a:	f7fe ff03 	bl	801d534 <_malloc_r>
 801e72e:	6020      	str	r0, [r4, #0]
 801e730:	6120      	str	r0, [r4, #16]
 801e732:	b928      	cbnz	r0, 801e740 <_svfiprintf_r+0x30>
 801e734:	230c      	movs	r3, #12
 801e736:	f8c8 3000 	str.w	r3, [r8]
 801e73a:	f04f 30ff 	mov.w	r0, #4294967295
 801e73e:	e0c8      	b.n	801e8d2 <_svfiprintf_r+0x1c2>
 801e740:	2340      	movs	r3, #64	; 0x40
 801e742:	6163      	str	r3, [r4, #20]
 801e744:	2300      	movs	r3, #0
 801e746:	9309      	str	r3, [sp, #36]	; 0x24
 801e748:	2320      	movs	r3, #32
 801e74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e74e:	2330      	movs	r3, #48	; 0x30
 801e750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e754:	9503      	str	r5, [sp, #12]
 801e756:	f04f 0b01 	mov.w	fp, #1
 801e75a:	4637      	mov	r7, r6
 801e75c:	463d      	mov	r5, r7
 801e75e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e762:	b10b      	cbz	r3, 801e768 <_svfiprintf_r+0x58>
 801e764:	2b25      	cmp	r3, #37	; 0x25
 801e766:	d13e      	bne.n	801e7e6 <_svfiprintf_r+0xd6>
 801e768:	ebb7 0a06 	subs.w	sl, r7, r6
 801e76c:	d00b      	beq.n	801e786 <_svfiprintf_r+0x76>
 801e76e:	4653      	mov	r3, sl
 801e770:	4632      	mov	r2, r6
 801e772:	4621      	mov	r1, r4
 801e774:	4640      	mov	r0, r8
 801e776:	f7ff ff71 	bl	801e65c <__ssputs_r>
 801e77a:	3001      	adds	r0, #1
 801e77c:	f000 80a4 	beq.w	801e8c8 <_svfiprintf_r+0x1b8>
 801e780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e782:	4453      	add	r3, sl
 801e784:	9309      	str	r3, [sp, #36]	; 0x24
 801e786:	783b      	ldrb	r3, [r7, #0]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	f000 809d 	beq.w	801e8c8 <_svfiprintf_r+0x1b8>
 801e78e:	2300      	movs	r3, #0
 801e790:	f04f 32ff 	mov.w	r2, #4294967295
 801e794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e798:	9304      	str	r3, [sp, #16]
 801e79a:	9307      	str	r3, [sp, #28]
 801e79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e7a0:	931a      	str	r3, [sp, #104]	; 0x68
 801e7a2:	462f      	mov	r7, r5
 801e7a4:	2205      	movs	r2, #5
 801e7a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e7aa:	4850      	ldr	r0, [pc, #320]	; (801e8ec <_svfiprintf_r+0x1dc>)
 801e7ac:	f7e1 fd60 	bl	8000270 <memchr>
 801e7b0:	9b04      	ldr	r3, [sp, #16]
 801e7b2:	b9d0      	cbnz	r0, 801e7ea <_svfiprintf_r+0xda>
 801e7b4:	06d9      	lsls	r1, r3, #27
 801e7b6:	bf44      	itt	mi
 801e7b8:	2220      	movmi	r2, #32
 801e7ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e7be:	071a      	lsls	r2, r3, #28
 801e7c0:	bf44      	itt	mi
 801e7c2:	222b      	movmi	r2, #43	; 0x2b
 801e7c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e7c8:	782a      	ldrb	r2, [r5, #0]
 801e7ca:	2a2a      	cmp	r2, #42	; 0x2a
 801e7cc:	d015      	beq.n	801e7fa <_svfiprintf_r+0xea>
 801e7ce:	9a07      	ldr	r2, [sp, #28]
 801e7d0:	462f      	mov	r7, r5
 801e7d2:	2000      	movs	r0, #0
 801e7d4:	250a      	movs	r5, #10
 801e7d6:	4639      	mov	r1, r7
 801e7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7dc:	3b30      	subs	r3, #48	; 0x30
 801e7de:	2b09      	cmp	r3, #9
 801e7e0:	d94d      	bls.n	801e87e <_svfiprintf_r+0x16e>
 801e7e2:	b1b8      	cbz	r0, 801e814 <_svfiprintf_r+0x104>
 801e7e4:	e00f      	b.n	801e806 <_svfiprintf_r+0xf6>
 801e7e6:	462f      	mov	r7, r5
 801e7e8:	e7b8      	b.n	801e75c <_svfiprintf_r+0x4c>
 801e7ea:	4a40      	ldr	r2, [pc, #256]	; (801e8ec <_svfiprintf_r+0x1dc>)
 801e7ec:	1a80      	subs	r0, r0, r2
 801e7ee:	fa0b f000 	lsl.w	r0, fp, r0
 801e7f2:	4318      	orrs	r0, r3
 801e7f4:	9004      	str	r0, [sp, #16]
 801e7f6:	463d      	mov	r5, r7
 801e7f8:	e7d3      	b.n	801e7a2 <_svfiprintf_r+0x92>
 801e7fa:	9a03      	ldr	r2, [sp, #12]
 801e7fc:	1d11      	adds	r1, r2, #4
 801e7fe:	6812      	ldr	r2, [r2, #0]
 801e800:	9103      	str	r1, [sp, #12]
 801e802:	2a00      	cmp	r2, #0
 801e804:	db01      	blt.n	801e80a <_svfiprintf_r+0xfa>
 801e806:	9207      	str	r2, [sp, #28]
 801e808:	e004      	b.n	801e814 <_svfiprintf_r+0x104>
 801e80a:	4252      	negs	r2, r2
 801e80c:	f043 0302 	orr.w	r3, r3, #2
 801e810:	9207      	str	r2, [sp, #28]
 801e812:	9304      	str	r3, [sp, #16]
 801e814:	783b      	ldrb	r3, [r7, #0]
 801e816:	2b2e      	cmp	r3, #46	; 0x2e
 801e818:	d10c      	bne.n	801e834 <_svfiprintf_r+0x124>
 801e81a:	787b      	ldrb	r3, [r7, #1]
 801e81c:	2b2a      	cmp	r3, #42	; 0x2a
 801e81e:	d133      	bne.n	801e888 <_svfiprintf_r+0x178>
 801e820:	9b03      	ldr	r3, [sp, #12]
 801e822:	1d1a      	adds	r2, r3, #4
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	9203      	str	r2, [sp, #12]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	bfb8      	it	lt
 801e82c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e830:	3702      	adds	r7, #2
 801e832:	9305      	str	r3, [sp, #20]
 801e834:	4d2e      	ldr	r5, [pc, #184]	; (801e8f0 <_svfiprintf_r+0x1e0>)
 801e836:	7839      	ldrb	r1, [r7, #0]
 801e838:	2203      	movs	r2, #3
 801e83a:	4628      	mov	r0, r5
 801e83c:	f7e1 fd18 	bl	8000270 <memchr>
 801e840:	b138      	cbz	r0, 801e852 <_svfiprintf_r+0x142>
 801e842:	2340      	movs	r3, #64	; 0x40
 801e844:	1b40      	subs	r0, r0, r5
 801e846:	fa03 f000 	lsl.w	r0, r3, r0
 801e84a:	9b04      	ldr	r3, [sp, #16]
 801e84c:	4303      	orrs	r3, r0
 801e84e:	3701      	adds	r7, #1
 801e850:	9304      	str	r3, [sp, #16]
 801e852:	7839      	ldrb	r1, [r7, #0]
 801e854:	4827      	ldr	r0, [pc, #156]	; (801e8f4 <_svfiprintf_r+0x1e4>)
 801e856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e85a:	2206      	movs	r2, #6
 801e85c:	1c7e      	adds	r6, r7, #1
 801e85e:	f7e1 fd07 	bl	8000270 <memchr>
 801e862:	2800      	cmp	r0, #0
 801e864:	d038      	beq.n	801e8d8 <_svfiprintf_r+0x1c8>
 801e866:	4b24      	ldr	r3, [pc, #144]	; (801e8f8 <_svfiprintf_r+0x1e8>)
 801e868:	bb13      	cbnz	r3, 801e8b0 <_svfiprintf_r+0x1a0>
 801e86a:	9b03      	ldr	r3, [sp, #12]
 801e86c:	3307      	adds	r3, #7
 801e86e:	f023 0307 	bic.w	r3, r3, #7
 801e872:	3308      	adds	r3, #8
 801e874:	9303      	str	r3, [sp, #12]
 801e876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e878:	444b      	add	r3, r9
 801e87a:	9309      	str	r3, [sp, #36]	; 0x24
 801e87c:	e76d      	b.n	801e75a <_svfiprintf_r+0x4a>
 801e87e:	fb05 3202 	mla	r2, r5, r2, r3
 801e882:	2001      	movs	r0, #1
 801e884:	460f      	mov	r7, r1
 801e886:	e7a6      	b.n	801e7d6 <_svfiprintf_r+0xc6>
 801e888:	2300      	movs	r3, #0
 801e88a:	3701      	adds	r7, #1
 801e88c:	9305      	str	r3, [sp, #20]
 801e88e:	4619      	mov	r1, r3
 801e890:	250a      	movs	r5, #10
 801e892:	4638      	mov	r0, r7
 801e894:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e898:	3a30      	subs	r2, #48	; 0x30
 801e89a:	2a09      	cmp	r2, #9
 801e89c:	d903      	bls.n	801e8a6 <_svfiprintf_r+0x196>
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d0c8      	beq.n	801e834 <_svfiprintf_r+0x124>
 801e8a2:	9105      	str	r1, [sp, #20]
 801e8a4:	e7c6      	b.n	801e834 <_svfiprintf_r+0x124>
 801e8a6:	fb05 2101 	mla	r1, r5, r1, r2
 801e8aa:	2301      	movs	r3, #1
 801e8ac:	4607      	mov	r7, r0
 801e8ae:	e7f0      	b.n	801e892 <_svfiprintf_r+0x182>
 801e8b0:	ab03      	add	r3, sp, #12
 801e8b2:	9300      	str	r3, [sp, #0]
 801e8b4:	4622      	mov	r2, r4
 801e8b6:	4b11      	ldr	r3, [pc, #68]	; (801e8fc <_svfiprintf_r+0x1ec>)
 801e8b8:	a904      	add	r1, sp, #16
 801e8ba:	4640      	mov	r0, r8
 801e8bc:	f3af 8000 	nop.w
 801e8c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e8c4:	4681      	mov	r9, r0
 801e8c6:	d1d6      	bne.n	801e876 <_svfiprintf_r+0x166>
 801e8c8:	89a3      	ldrh	r3, [r4, #12]
 801e8ca:	065b      	lsls	r3, r3, #25
 801e8cc:	f53f af35 	bmi.w	801e73a <_svfiprintf_r+0x2a>
 801e8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8d2:	b01d      	add	sp, #116	; 0x74
 801e8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8d8:	ab03      	add	r3, sp, #12
 801e8da:	9300      	str	r3, [sp, #0]
 801e8dc:	4622      	mov	r2, r4
 801e8de:	4b07      	ldr	r3, [pc, #28]	; (801e8fc <_svfiprintf_r+0x1ec>)
 801e8e0:	a904      	add	r1, sp, #16
 801e8e2:	4640      	mov	r0, r8
 801e8e4:	f000 fb6c 	bl	801efc0 <_printf_i>
 801e8e8:	e7ea      	b.n	801e8c0 <_svfiprintf_r+0x1b0>
 801e8ea:	bf00      	nop
 801e8ec:	08039e7c 	.word	0x08039e7c
 801e8f0:	08039e82 	.word	0x08039e82
 801e8f4:	08039e86 	.word	0x08039e86
 801e8f8:	00000000 	.word	0x00000000
 801e8fc:	0801e65d 	.word	0x0801e65d

0801e900 <_sungetc_r>:
 801e900:	b538      	push	{r3, r4, r5, lr}
 801e902:	1c4b      	adds	r3, r1, #1
 801e904:	4614      	mov	r4, r2
 801e906:	d103      	bne.n	801e910 <_sungetc_r+0x10>
 801e908:	f04f 35ff 	mov.w	r5, #4294967295
 801e90c:	4628      	mov	r0, r5
 801e90e:	bd38      	pop	{r3, r4, r5, pc}
 801e910:	8993      	ldrh	r3, [r2, #12]
 801e912:	f023 0320 	bic.w	r3, r3, #32
 801e916:	8193      	strh	r3, [r2, #12]
 801e918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e91a:	6852      	ldr	r2, [r2, #4]
 801e91c:	b2cd      	uxtb	r5, r1
 801e91e:	b18b      	cbz	r3, 801e944 <_sungetc_r+0x44>
 801e920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e922:	4293      	cmp	r3, r2
 801e924:	dd08      	ble.n	801e938 <_sungetc_r+0x38>
 801e926:	6823      	ldr	r3, [r4, #0]
 801e928:	1e5a      	subs	r2, r3, #1
 801e92a:	6022      	str	r2, [r4, #0]
 801e92c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e930:	6863      	ldr	r3, [r4, #4]
 801e932:	3301      	adds	r3, #1
 801e934:	6063      	str	r3, [r4, #4]
 801e936:	e7e9      	b.n	801e90c <_sungetc_r+0xc>
 801e938:	4621      	mov	r1, r4
 801e93a:	f000 fec7 	bl	801f6cc <__submore>
 801e93e:	2800      	cmp	r0, #0
 801e940:	d0f1      	beq.n	801e926 <_sungetc_r+0x26>
 801e942:	e7e1      	b.n	801e908 <_sungetc_r+0x8>
 801e944:	6921      	ldr	r1, [r4, #16]
 801e946:	6823      	ldr	r3, [r4, #0]
 801e948:	b151      	cbz	r1, 801e960 <_sungetc_r+0x60>
 801e94a:	4299      	cmp	r1, r3
 801e94c:	d208      	bcs.n	801e960 <_sungetc_r+0x60>
 801e94e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e952:	42a9      	cmp	r1, r5
 801e954:	d104      	bne.n	801e960 <_sungetc_r+0x60>
 801e956:	3b01      	subs	r3, #1
 801e958:	3201      	adds	r2, #1
 801e95a:	6023      	str	r3, [r4, #0]
 801e95c:	6062      	str	r2, [r4, #4]
 801e95e:	e7d5      	b.n	801e90c <_sungetc_r+0xc>
 801e960:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e968:	6363      	str	r3, [r4, #52]	; 0x34
 801e96a:	2303      	movs	r3, #3
 801e96c:	63a3      	str	r3, [r4, #56]	; 0x38
 801e96e:	4623      	mov	r3, r4
 801e970:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e974:	6023      	str	r3, [r4, #0]
 801e976:	2301      	movs	r3, #1
 801e978:	e7dc      	b.n	801e934 <_sungetc_r+0x34>

0801e97a <__ssrefill_r>:
 801e97a:	b510      	push	{r4, lr}
 801e97c:	460c      	mov	r4, r1
 801e97e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e980:	b169      	cbz	r1, 801e99e <__ssrefill_r+0x24>
 801e982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e986:	4299      	cmp	r1, r3
 801e988:	d001      	beq.n	801e98e <__ssrefill_r+0x14>
 801e98a:	f7fe fd85 	bl	801d498 <_free_r>
 801e98e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e990:	6063      	str	r3, [r4, #4]
 801e992:	2000      	movs	r0, #0
 801e994:	6360      	str	r0, [r4, #52]	; 0x34
 801e996:	b113      	cbz	r3, 801e99e <__ssrefill_r+0x24>
 801e998:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e99a:	6023      	str	r3, [r4, #0]
 801e99c:	bd10      	pop	{r4, pc}
 801e99e:	6923      	ldr	r3, [r4, #16]
 801e9a0:	6023      	str	r3, [r4, #0]
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	6063      	str	r3, [r4, #4]
 801e9a6:	89a3      	ldrh	r3, [r4, #12]
 801e9a8:	f043 0320 	orr.w	r3, r3, #32
 801e9ac:	81a3      	strh	r3, [r4, #12]
 801e9ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e9b2:	e7f3      	b.n	801e99c <__ssrefill_r+0x22>

0801e9b4 <__ssvfiscanf_r>:
 801e9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9b8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e9bc:	460c      	mov	r4, r1
 801e9be:	2100      	movs	r1, #0
 801e9c0:	9144      	str	r1, [sp, #272]	; 0x110
 801e9c2:	9145      	str	r1, [sp, #276]	; 0x114
 801e9c4:	499f      	ldr	r1, [pc, #636]	; (801ec44 <__ssvfiscanf_r+0x290>)
 801e9c6:	91a0      	str	r1, [sp, #640]	; 0x280
 801e9c8:	f10d 0804 	add.w	r8, sp, #4
 801e9cc:	499e      	ldr	r1, [pc, #632]	; (801ec48 <__ssvfiscanf_r+0x294>)
 801e9ce:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801ec4c <__ssvfiscanf_r+0x298>
 801e9d2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e9d6:	4606      	mov	r6, r0
 801e9d8:	4692      	mov	sl, r2
 801e9da:	91a1      	str	r1, [sp, #644]	; 0x284
 801e9dc:	9300      	str	r3, [sp, #0]
 801e9de:	270a      	movs	r7, #10
 801e9e0:	f89a 3000 	ldrb.w	r3, [sl]
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	f000 812a 	beq.w	801ec3e <__ssvfiscanf_r+0x28a>
 801e9ea:	4655      	mov	r5, sl
 801e9ec:	f7ff fd78 	bl	801e4e0 <__locale_ctype_ptr>
 801e9f0:	f815 bb01 	ldrb.w	fp, [r5], #1
 801e9f4:	4458      	add	r0, fp
 801e9f6:	7843      	ldrb	r3, [r0, #1]
 801e9f8:	f013 0308 	ands.w	r3, r3, #8
 801e9fc:	d01c      	beq.n	801ea38 <__ssvfiscanf_r+0x84>
 801e9fe:	6863      	ldr	r3, [r4, #4]
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	dd12      	ble.n	801ea2a <__ssvfiscanf_r+0x76>
 801ea04:	f7ff fd6c 	bl	801e4e0 <__locale_ctype_ptr>
 801ea08:	6823      	ldr	r3, [r4, #0]
 801ea0a:	781a      	ldrb	r2, [r3, #0]
 801ea0c:	4410      	add	r0, r2
 801ea0e:	7842      	ldrb	r2, [r0, #1]
 801ea10:	0712      	lsls	r2, r2, #28
 801ea12:	d401      	bmi.n	801ea18 <__ssvfiscanf_r+0x64>
 801ea14:	46aa      	mov	sl, r5
 801ea16:	e7e3      	b.n	801e9e0 <__ssvfiscanf_r+0x2c>
 801ea18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ea1a:	3201      	adds	r2, #1
 801ea1c:	9245      	str	r2, [sp, #276]	; 0x114
 801ea1e:	6862      	ldr	r2, [r4, #4]
 801ea20:	3301      	adds	r3, #1
 801ea22:	3a01      	subs	r2, #1
 801ea24:	6062      	str	r2, [r4, #4]
 801ea26:	6023      	str	r3, [r4, #0]
 801ea28:	e7e9      	b.n	801e9fe <__ssvfiscanf_r+0x4a>
 801ea2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ea2c:	4621      	mov	r1, r4
 801ea2e:	4630      	mov	r0, r6
 801ea30:	4798      	blx	r3
 801ea32:	2800      	cmp	r0, #0
 801ea34:	d0e6      	beq.n	801ea04 <__ssvfiscanf_r+0x50>
 801ea36:	e7ed      	b.n	801ea14 <__ssvfiscanf_r+0x60>
 801ea38:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801ea3c:	f040 8082 	bne.w	801eb44 <__ssvfiscanf_r+0x190>
 801ea40:	9343      	str	r3, [sp, #268]	; 0x10c
 801ea42:	9341      	str	r3, [sp, #260]	; 0x104
 801ea44:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801ea48:	2b2a      	cmp	r3, #42	; 0x2a
 801ea4a:	d103      	bne.n	801ea54 <__ssvfiscanf_r+0xa0>
 801ea4c:	2310      	movs	r3, #16
 801ea4e:	9341      	str	r3, [sp, #260]	; 0x104
 801ea50:	f10a 0502 	add.w	r5, sl, #2
 801ea54:	46aa      	mov	sl, r5
 801ea56:	f815 1b01 	ldrb.w	r1, [r5], #1
 801ea5a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801ea5e:	2a09      	cmp	r2, #9
 801ea60:	d922      	bls.n	801eaa8 <__ssvfiscanf_r+0xf4>
 801ea62:	2203      	movs	r2, #3
 801ea64:	4879      	ldr	r0, [pc, #484]	; (801ec4c <__ssvfiscanf_r+0x298>)
 801ea66:	f7e1 fc03 	bl	8000270 <memchr>
 801ea6a:	b138      	cbz	r0, 801ea7c <__ssvfiscanf_r+0xc8>
 801ea6c:	eba0 0309 	sub.w	r3, r0, r9
 801ea70:	2001      	movs	r0, #1
 801ea72:	4098      	lsls	r0, r3
 801ea74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ea76:	4318      	orrs	r0, r3
 801ea78:	9041      	str	r0, [sp, #260]	; 0x104
 801ea7a:	46aa      	mov	sl, r5
 801ea7c:	f89a 3000 	ldrb.w	r3, [sl]
 801ea80:	2b67      	cmp	r3, #103	; 0x67
 801ea82:	f10a 0501 	add.w	r5, sl, #1
 801ea86:	d82b      	bhi.n	801eae0 <__ssvfiscanf_r+0x12c>
 801ea88:	2b65      	cmp	r3, #101	; 0x65
 801ea8a:	f080 809f 	bcs.w	801ebcc <__ssvfiscanf_r+0x218>
 801ea8e:	2b47      	cmp	r3, #71	; 0x47
 801ea90:	d810      	bhi.n	801eab4 <__ssvfiscanf_r+0x100>
 801ea92:	2b45      	cmp	r3, #69	; 0x45
 801ea94:	f080 809a 	bcs.w	801ebcc <__ssvfiscanf_r+0x218>
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d06c      	beq.n	801eb76 <__ssvfiscanf_r+0x1c2>
 801ea9c:	2b25      	cmp	r3, #37	; 0x25
 801ea9e:	d051      	beq.n	801eb44 <__ssvfiscanf_r+0x190>
 801eaa0:	2303      	movs	r3, #3
 801eaa2:	9347      	str	r3, [sp, #284]	; 0x11c
 801eaa4:	9742      	str	r7, [sp, #264]	; 0x108
 801eaa6:	e027      	b.n	801eaf8 <__ssvfiscanf_r+0x144>
 801eaa8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801eaaa:	fb07 1303 	mla	r3, r7, r3, r1
 801eaae:	3b30      	subs	r3, #48	; 0x30
 801eab0:	9343      	str	r3, [sp, #268]	; 0x10c
 801eab2:	e7cf      	b.n	801ea54 <__ssvfiscanf_r+0xa0>
 801eab4:	2b5b      	cmp	r3, #91	; 0x5b
 801eab6:	d06a      	beq.n	801eb8e <__ssvfiscanf_r+0x1da>
 801eab8:	d80c      	bhi.n	801ead4 <__ssvfiscanf_r+0x120>
 801eaba:	2b58      	cmp	r3, #88	; 0x58
 801eabc:	d1f0      	bne.n	801eaa0 <__ssvfiscanf_r+0xec>
 801eabe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801eac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eac4:	9241      	str	r2, [sp, #260]	; 0x104
 801eac6:	2210      	movs	r2, #16
 801eac8:	9242      	str	r2, [sp, #264]	; 0x108
 801eaca:	2b6e      	cmp	r3, #110	; 0x6e
 801eacc:	bf8c      	ite	hi
 801eace:	2304      	movhi	r3, #4
 801ead0:	2303      	movls	r3, #3
 801ead2:	e010      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801ead4:	2b63      	cmp	r3, #99	; 0x63
 801ead6:	d065      	beq.n	801eba4 <__ssvfiscanf_r+0x1f0>
 801ead8:	2b64      	cmp	r3, #100	; 0x64
 801eada:	d1e1      	bne.n	801eaa0 <__ssvfiscanf_r+0xec>
 801eadc:	9742      	str	r7, [sp, #264]	; 0x108
 801eade:	e7f4      	b.n	801eaca <__ssvfiscanf_r+0x116>
 801eae0:	2b70      	cmp	r3, #112	; 0x70
 801eae2:	d04b      	beq.n	801eb7c <__ssvfiscanf_r+0x1c8>
 801eae4:	d826      	bhi.n	801eb34 <__ssvfiscanf_r+0x180>
 801eae6:	2b6e      	cmp	r3, #110	; 0x6e
 801eae8:	d062      	beq.n	801ebb0 <__ssvfiscanf_r+0x1fc>
 801eaea:	d84c      	bhi.n	801eb86 <__ssvfiscanf_r+0x1d2>
 801eaec:	2b69      	cmp	r3, #105	; 0x69
 801eaee:	d1d7      	bne.n	801eaa0 <__ssvfiscanf_r+0xec>
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	9342      	str	r3, [sp, #264]	; 0x108
 801eaf4:	2303      	movs	r3, #3
 801eaf6:	9347      	str	r3, [sp, #284]	; 0x11c
 801eaf8:	6863      	ldr	r3, [r4, #4]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	dd68      	ble.n	801ebd0 <__ssvfiscanf_r+0x21c>
 801eafe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801eb00:	0659      	lsls	r1, r3, #25
 801eb02:	d407      	bmi.n	801eb14 <__ssvfiscanf_r+0x160>
 801eb04:	f7ff fcec 	bl	801e4e0 <__locale_ctype_ptr>
 801eb08:	6823      	ldr	r3, [r4, #0]
 801eb0a:	781a      	ldrb	r2, [r3, #0]
 801eb0c:	4410      	add	r0, r2
 801eb0e:	7842      	ldrb	r2, [r0, #1]
 801eb10:	0712      	lsls	r2, r2, #28
 801eb12:	d464      	bmi.n	801ebde <__ssvfiscanf_r+0x22a>
 801eb14:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801eb16:	2b02      	cmp	r3, #2
 801eb18:	dc73      	bgt.n	801ec02 <__ssvfiscanf_r+0x24e>
 801eb1a:	466b      	mov	r3, sp
 801eb1c:	4622      	mov	r2, r4
 801eb1e:	a941      	add	r1, sp, #260	; 0x104
 801eb20:	4630      	mov	r0, r6
 801eb22:	f000 fb5f 	bl	801f1e4 <_scanf_chars>
 801eb26:	2801      	cmp	r0, #1
 801eb28:	f000 8089 	beq.w	801ec3e <__ssvfiscanf_r+0x28a>
 801eb2c:	2802      	cmp	r0, #2
 801eb2e:	f47f af71 	bne.w	801ea14 <__ssvfiscanf_r+0x60>
 801eb32:	e01d      	b.n	801eb70 <__ssvfiscanf_r+0x1bc>
 801eb34:	2b75      	cmp	r3, #117	; 0x75
 801eb36:	d0d1      	beq.n	801eadc <__ssvfiscanf_r+0x128>
 801eb38:	2b78      	cmp	r3, #120	; 0x78
 801eb3a:	d0c0      	beq.n	801eabe <__ssvfiscanf_r+0x10a>
 801eb3c:	2b73      	cmp	r3, #115	; 0x73
 801eb3e:	d1af      	bne.n	801eaa0 <__ssvfiscanf_r+0xec>
 801eb40:	2302      	movs	r3, #2
 801eb42:	e7d8      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801eb44:	6863      	ldr	r3, [r4, #4]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	dd0c      	ble.n	801eb64 <__ssvfiscanf_r+0x1b0>
 801eb4a:	6823      	ldr	r3, [r4, #0]
 801eb4c:	781a      	ldrb	r2, [r3, #0]
 801eb4e:	455a      	cmp	r2, fp
 801eb50:	d175      	bne.n	801ec3e <__ssvfiscanf_r+0x28a>
 801eb52:	3301      	adds	r3, #1
 801eb54:	6862      	ldr	r2, [r4, #4]
 801eb56:	6023      	str	r3, [r4, #0]
 801eb58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801eb5a:	3a01      	subs	r2, #1
 801eb5c:	3301      	adds	r3, #1
 801eb5e:	6062      	str	r2, [r4, #4]
 801eb60:	9345      	str	r3, [sp, #276]	; 0x114
 801eb62:	e757      	b.n	801ea14 <__ssvfiscanf_r+0x60>
 801eb64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801eb66:	4621      	mov	r1, r4
 801eb68:	4630      	mov	r0, r6
 801eb6a:	4798      	blx	r3
 801eb6c:	2800      	cmp	r0, #0
 801eb6e:	d0ec      	beq.n	801eb4a <__ssvfiscanf_r+0x196>
 801eb70:	9844      	ldr	r0, [sp, #272]	; 0x110
 801eb72:	2800      	cmp	r0, #0
 801eb74:	d159      	bne.n	801ec2a <__ssvfiscanf_r+0x276>
 801eb76:	f04f 30ff 	mov.w	r0, #4294967295
 801eb7a:	e05c      	b.n	801ec36 <__ssvfiscanf_r+0x282>
 801eb7c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801eb7e:	f042 0220 	orr.w	r2, r2, #32
 801eb82:	9241      	str	r2, [sp, #260]	; 0x104
 801eb84:	e79b      	b.n	801eabe <__ssvfiscanf_r+0x10a>
 801eb86:	2308      	movs	r3, #8
 801eb88:	9342      	str	r3, [sp, #264]	; 0x108
 801eb8a:	2304      	movs	r3, #4
 801eb8c:	e7b3      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801eb8e:	4629      	mov	r1, r5
 801eb90:	4640      	mov	r0, r8
 801eb92:	f000 fcc7 	bl	801f524 <__sccl>
 801eb96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801eb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb9c:	9341      	str	r3, [sp, #260]	; 0x104
 801eb9e:	4605      	mov	r5, r0
 801eba0:	2301      	movs	r3, #1
 801eba2:	e7a8      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801eba4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801eba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ebaa:	9341      	str	r3, [sp, #260]	; 0x104
 801ebac:	2300      	movs	r3, #0
 801ebae:	e7a2      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801ebb0:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ebb2:	06c3      	lsls	r3, r0, #27
 801ebb4:	f53f af2e 	bmi.w	801ea14 <__ssvfiscanf_r+0x60>
 801ebb8:	9b00      	ldr	r3, [sp, #0]
 801ebba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ebbc:	1d19      	adds	r1, r3, #4
 801ebbe:	9100      	str	r1, [sp, #0]
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	07c0      	lsls	r0, r0, #31
 801ebc4:	bf4c      	ite	mi
 801ebc6:	801a      	strhmi	r2, [r3, #0]
 801ebc8:	601a      	strpl	r2, [r3, #0]
 801ebca:	e723      	b.n	801ea14 <__ssvfiscanf_r+0x60>
 801ebcc:	2305      	movs	r3, #5
 801ebce:	e792      	b.n	801eaf6 <__ssvfiscanf_r+0x142>
 801ebd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ebd2:	4621      	mov	r1, r4
 801ebd4:	4630      	mov	r0, r6
 801ebd6:	4798      	blx	r3
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	d090      	beq.n	801eafe <__ssvfiscanf_r+0x14a>
 801ebdc:	e7c8      	b.n	801eb70 <__ssvfiscanf_r+0x1bc>
 801ebde:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ebe0:	3201      	adds	r2, #1
 801ebe2:	9245      	str	r2, [sp, #276]	; 0x114
 801ebe4:	6862      	ldr	r2, [r4, #4]
 801ebe6:	3a01      	subs	r2, #1
 801ebe8:	2a00      	cmp	r2, #0
 801ebea:	6062      	str	r2, [r4, #4]
 801ebec:	dd02      	ble.n	801ebf4 <__ssvfiscanf_r+0x240>
 801ebee:	3301      	adds	r3, #1
 801ebf0:	6023      	str	r3, [r4, #0]
 801ebf2:	e787      	b.n	801eb04 <__ssvfiscanf_r+0x150>
 801ebf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ebf6:	4621      	mov	r1, r4
 801ebf8:	4630      	mov	r0, r6
 801ebfa:	4798      	blx	r3
 801ebfc:	2800      	cmp	r0, #0
 801ebfe:	d081      	beq.n	801eb04 <__ssvfiscanf_r+0x150>
 801ec00:	e7b6      	b.n	801eb70 <__ssvfiscanf_r+0x1bc>
 801ec02:	2b04      	cmp	r3, #4
 801ec04:	dc06      	bgt.n	801ec14 <__ssvfiscanf_r+0x260>
 801ec06:	466b      	mov	r3, sp
 801ec08:	4622      	mov	r2, r4
 801ec0a:	a941      	add	r1, sp, #260	; 0x104
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	f000 fb4d 	bl	801f2ac <_scanf_i>
 801ec12:	e788      	b.n	801eb26 <__ssvfiscanf_r+0x172>
 801ec14:	4b0e      	ldr	r3, [pc, #56]	; (801ec50 <__ssvfiscanf_r+0x29c>)
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	f43f aefc 	beq.w	801ea14 <__ssvfiscanf_r+0x60>
 801ec1c:	466b      	mov	r3, sp
 801ec1e:	4622      	mov	r2, r4
 801ec20:	a941      	add	r1, sp, #260	; 0x104
 801ec22:	4630      	mov	r0, r6
 801ec24:	f3af 8000 	nop.w
 801ec28:	e77d      	b.n	801eb26 <__ssvfiscanf_r+0x172>
 801ec2a:	89a3      	ldrh	r3, [r4, #12]
 801ec2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ec30:	bf18      	it	ne
 801ec32:	f04f 30ff 	movne.w	r0, #4294967295
 801ec36:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801ec3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ec40:	e7f9      	b.n	801ec36 <__ssvfiscanf_r+0x282>
 801ec42:	bf00      	nop
 801ec44:	0801e901 	.word	0x0801e901
 801ec48:	0801e97b 	.word	0x0801e97b
 801ec4c:	08039e82 	.word	0x08039e82
 801ec50:	00000000 	.word	0x00000000

0801ec54 <__sfputc_r>:
 801ec54:	6893      	ldr	r3, [r2, #8]
 801ec56:	3b01      	subs	r3, #1
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	b410      	push	{r4}
 801ec5c:	6093      	str	r3, [r2, #8]
 801ec5e:	da08      	bge.n	801ec72 <__sfputc_r+0x1e>
 801ec60:	6994      	ldr	r4, [r2, #24]
 801ec62:	42a3      	cmp	r3, r4
 801ec64:	db01      	blt.n	801ec6a <__sfputc_r+0x16>
 801ec66:	290a      	cmp	r1, #10
 801ec68:	d103      	bne.n	801ec72 <__sfputc_r+0x1e>
 801ec6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec6e:	f7ff b97b 	b.w	801df68 <__swbuf_r>
 801ec72:	6813      	ldr	r3, [r2, #0]
 801ec74:	1c58      	adds	r0, r3, #1
 801ec76:	6010      	str	r0, [r2, #0]
 801ec78:	7019      	strb	r1, [r3, #0]
 801ec7a:	4608      	mov	r0, r1
 801ec7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ec80:	4770      	bx	lr

0801ec82 <__sfputs_r>:
 801ec82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec84:	4606      	mov	r6, r0
 801ec86:	460f      	mov	r7, r1
 801ec88:	4614      	mov	r4, r2
 801ec8a:	18d5      	adds	r5, r2, r3
 801ec8c:	42ac      	cmp	r4, r5
 801ec8e:	d101      	bne.n	801ec94 <__sfputs_r+0x12>
 801ec90:	2000      	movs	r0, #0
 801ec92:	e007      	b.n	801eca4 <__sfputs_r+0x22>
 801ec94:	463a      	mov	r2, r7
 801ec96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec9a:	4630      	mov	r0, r6
 801ec9c:	f7ff ffda 	bl	801ec54 <__sfputc_r>
 801eca0:	1c43      	adds	r3, r0, #1
 801eca2:	d1f3      	bne.n	801ec8c <__sfputs_r+0xa>
 801eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eca8 <_vfiprintf_r>:
 801eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecac:	460c      	mov	r4, r1
 801ecae:	b09d      	sub	sp, #116	; 0x74
 801ecb0:	4617      	mov	r7, r2
 801ecb2:	461d      	mov	r5, r3
 801ecb4:	4606      	mov	r6, r0
 801ecb6:	b118      	cbz	r0, 801ecc0 <_vfiprintf_r+0x18>
 801ecb8:	6983      	ldr	r3, [r0, #24]
 801ecba:	b90b      	cbnz	r3, 801ecc0 <_vfiprintf_r+0x18>
 801ecbc:	f7ff fb3a 	bl	801e334 <__sinit>
 801ecc0:	4b7c      	ldr	r3, [pc, #496]	; (801eeb4 <_vfiprintf_r+0x20c>)
 801ecc2:	429c      	cmp	r4, r3
 801ecc4:	d158      	bne.n	801ed78 <_vfiprintf_r+0xd0>
 801ecc6:	6874      	ldr	r4, [r6, #4]
 801ecc8:	89a3      	ldrh	r3, [r4, #12]
 801ecca:	0718      	lsls	r0, r3, #28
 801eccc:	d55e      	bpl.n	801ed8c <_vfiprintf_r+0xe4>
 801ecce:	6923      	ldr	r3, [r4, #16]
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d05b      	beq.n	801ed8c <_vfiprintf_r+0xe4>
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	9309      	str	r3, [sp, #36]	; 0x24
 801ecd8:	2320      	movs	r3, #32
 801ecda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ecde:	2330      	movs	r3, #48	; 0x30
 801ece0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ece4:	9503      	str	r5, [sp, #12]
 801ece6:	f04f 0b01 	mov.w	fp, #1
 801ecea:	46b8      	mov	r8, r7
 801ecec:	4645      	mov	r5, r8
 801ecee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ecf2:	b10b      	cbz	r3, 801ecf8 <_vfiprintf_r+0x50>
 801ecf4:	2b25      	cmp	r3, #37	; 0x25
 801ecf6:	d154      	bne.n	801eda2 <_vfiprintf_r+0xfa>
 801ecf8:	ebb8 0a07 	subs.w	sl, r8, r7
 801ecfc:	d00b      	beq.n	801ed16 <_vfiprintf_r+0x6e>
 801ecfe:	4653      	mov	r3, sl
 801ed00:	463a      	mov	r2, r7
 801ed02:	4621      	mov	r1, r4
 801ed04:	4630      	mov	r0, r6
 801ed06:	f7ff ffbc 	bl	801ec82 <__sfputs_r>
 801ed0a:	3001      	adds	r0, #1
 801ed0c:	f000 80c2 	beq.w	801ee94 <_vfiprintf_r+0x1ec>
 801ed10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed12:	4453      	add	r3, sl
 801ed14:	9309      	str	r3, [sp, #36]	; 0x24
 801ed16:	f898 3000 	ldrb.w	r3, [r8]
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	f000 80ba 	beq.w	801ee94 <_vfiprintf_r+0x1ec>
 801ed20:	2300      	movs	r3, #0
 801ed22:	f04f 32ff 	mov.w	r2, #4294967295
 801ed26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ed2a:	9304      	str	r3, [sp, #16]
 801ed2c:	9307      	str	r3, [sp, #28]
 801ed2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ed32:	931a      	str	r3, [sp, #104]	; 0x68
 801ed34:	46a8      	mov	r8, r5
 801ed36:	2205      	movs	r2, #5
 801ed38:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ed3c:	485e      	ldr	r0, [pc, #376]	; (801eeb8 <_vfiprintf_r+0x210>)
 801ed3e:	f7e1 fa97 	bl	8000270 <memchr>
 801ed42:	9b04      	ldr	r3, [sp, #16]
 801ed44:	bb78      	cbnz	r0, 801eda6 <_vfiprintf_r+0xfe>
 801ed46:	06d9      	lsls	r1, r3, #27
 801ed48:	bf44      	itt	mi
 801ed4a:	2220      	movmi	r2, #32
 801ed4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed50:	071a      	lsls	r2, r3, #28
 801ed52:	bf44      	itt	mi
 801ed54:	222b      	movmi	r2, #43	; 0x2b
 801ed56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ed5a:	782a      	ldrb	r2, [r5, #0]
 801ed5c:	2a2a      	cmp	r2, #42	; 0x2a
 801ed5e:	d02a      	beq.n	801edb6 <_vfiprintf_r+0x10e>
 801ed60:	9a07      	ldr	r2, [sp, #28]
 801ed62:	46a8      	mov	r8, r5
 801ed64:	2000      	movs	r0, #0
 801ed66:	250a      	movs	r5, #10
 801ed68:	4641      	mov	r1, r8
 801ed6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed6e:	3b30      	subs	r3, #48	; 0x30
 801ed70:	2b09      	cmp	r3, #9
 801ed72:	d969      	bls.n	801ee48 <_vfiprintf_r+0x1a0>
 801ed74:	b360      	cbz	r0, 801edd0 <_vfiprintf_r+0x128>
 801ed76:	e024      	b.n	801edc2 <_vfiprintf_r+0x11a>
 801ed78:	4b50      	ldr	r3, [pc, #320]	; (801eebc <_vfiprintf_r+0x214>)
 801ed7a:	429c      	cmp	r4, r3
 801ed7c:	d101      	bne.n	801ed82 <_vfiprintf_r+0xda>
 801ed7e:	68b4      	ldr	r4, [r6, #8]
 801ed80:	e7a2      	b.n	801ecc8 <_vfiprintf_r+0x20>
 801ed82:	4b4f      	ldr	r3, [pc, #316]	; (801eec0 <_vfiprintf_r+0x218>)
 801ed84:	429c      	cmp	r4, r3
 801ed86:	bf08      	it	eq
 801ed88:	68f4      	ldreq	r4, [r6, #12]
 801ed8a:	e79d      	b.n	801ecc8 <_vfiprintf_r+0x20>
 801ed8c:	4621      	mov	r1, r4
 801ed8e:	4630      	mov	r0, r6
 801ed90:	f7ff f94e 	bl	801e030 <__swsetup_r>
 801ed94:	2800      	cmp	r0, #0
 801ed96:	d09d      	beq.n	801ecd4 <_vfiprintf_r+0x2c>
 801ed98:	f04f 30ff 	mov.w	r0, #4294967295
 801ed9c:	b01d      	add	sp, #116	; 0x74
 801ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eda2:	46a8      	mov	r8, r5
 801eda4:	e7a2      	b.n	801ecec <_vfiprintf_r+0x44>
 801eda6:	4a44      	ldr	r2, [pc, #272]	; (801eeb8 <_vfiprintf_r+0x210>)
 801eda8:	1a80      	subs	r0, r0, r2
 801edaa:	fa0b f000 	lsl.w	r0, fp, r0
 801edae:	4318      	orrs	r0, r3
 801edb0:	9004      	str	r0, [sp, #16]
 801edb2:	4645      	mov	r5, r8
 801edb4:	e7be      	b.n	801ed34 <_vfiprintf_r+0x8c>
 801edb6:	9a03      	ldr	r2, [sp, #12]
 801edb8:	1d11      	adds	r1, r2, #4
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	9103      	str	r1, [sp, #12]
 801edbe:	2a00      	cmp	r2, #0
 801edc0:	db01      	blt.n	801edc6 <_vfiprintf_r+0x11e>
 801edc2:	9207      	str	r2, [sp, #28]
 801edc4:	e004      	b.n	801edd0 <_vfiprintf_r+0x128>
 801edc6:	4252      	negs	r2, r2
 801edc8:	f043 0302 	orr.w	r3, r3, #2
 801edcc:	9207      	str	r2, [sp, #28]
 801edce:	9304      	str	r3, [sp, #16]
 801edd0:	f898 3000 	ldrb.w	r3, [r8]
 801edd4:	2b2e      	cmp	r3, #46	; 0x2e
 801edd6:	d10e      	bne.n	801edf6 <_vfiprintf_r+0x14e>
 801edd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801eddc:	2b2a      	cmp	r3, #42	; 0x2a
 801edde:	d138      	bne.n	801ee52 <_vfiprintf_r+0x1aa>
 801ede0:	9b03      	ldr	r3, [sp, #12]
 801ede2:	1d1a      	adds	r2, r3, #4
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	9203      	str	r2, [sp, #12]
 801ede8:	2b00      	cmp	r3, #0
 801edea:	bfb8      	it	lt
 801edec:	f04f 33ff 	movlt.w	r3, #4294967295
 801edf0:	f108 0802 	add.w	r8, r8, #2
 801edf4:	9305      	str	r3, [sp, #20]
 801edf6:	4d33      	ldr	r5, [pc, #204]	; (801eec4 <_vfiprintf_r+0x21c>)
 801edf8:	f898 1000 	ldrb.w	r1, [r8]
 801edfc:	2203      	movs	r2, #3
 801edfe:	4628      	mov	r0, r5
 801ee00:	f7e1 fa36 	bl	8000270 <memchr>
 801ee04:	b140      	cbz	r0, 801ee18 <_vfiprintf_r+0x170>
 801ee06:	2340      	movs	r3, #64	; 0x40
 801ee08:	1b40      	subs	r0, r0, r5
 801ee0a:	fa03 f000 	lsl.w	r0, r3, r0
 801ee0e:	9b04      	ldr	r3, [sp, #16]
 801ee10:	4303      	orrs	r3, r0
 801ee12:	f108 0801 	add.w	r8, r8, #1
 801ee16:	9304      	str	r3, [sp, #16]
 801ee18:	f898 1000 	ldrb.w	r1, [r8]
 801ee1c:	482a      	ldr	r0, [pc, #168]	; (801eec8 <_vfiprintf_r+0x220>)
 801ee1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ee22:	2206      	movs	r2, #6
 801ee24:	f108 0701 	add.w	r7, r8, #1
 801ee28:	f7e1 fa22 	bl	8000270 <memchr>
 801ee2c:	2800      	cmp	r0, #0
 801ee2e:	d037      	beq.n	801eea0 <_vfiprintf_r+0x1f8>
 801ee30:	4b26      	ldr	r3, [pc, #152]	; (801eecc <_vfiprintf_r+0x224>)
 801ee32:	bb1b      	cbnz	r3, 801ee7c <_vfiprintf_r+0x1d4>
 801ee34:	9b03      	ldr	r3, [sp, #12]
 801ee36:	3307      	adds	r3, #7
 801ee38:	f023 0307 	bic.w	r3, r3, #7
 801ee3c:	3308      	adds	r3, #8
 801ee3e:	9303      	str	r3, [sp, #12]
 801ee40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee42:	444b      	add	r3, r9
 801ee44:	9309      	str	r3, [sp, #36]	; 0x24
 801ee46:	e750      	b.n	801ecea <_vfiprintf_r+0x42>
 801ee48:	fb05 3202 	mla	r2, r5, r2, r3
 801ee4c:	2001      	movs	r0, #1
 801ee4e:	4688      	mov	r8, r1
 801ee50:	e78a      	b.n	801ed68 <_vfiprintf_r+0xc0>
 801ee52:	2300      	movs	r3, #0
 801ee54:	f108 0801 	add.w	r8, r8, #1
 801ee58:	9305      	str	r3, [sp, #20]
 801ee5a:	4619      	mov	r1, r3
 801ee5c:	250a      	movs	r5, #10
 801ee5e:	4640      	mov	r0, r8
 801ee60:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee64:	3a30      	subs	r2, #48	; 0x30
 801ee66:	2a09      	cmp	r2, #9
 801ee68:	d903      	bls.n	801ee72 <_vfiprintf_r+0x1ca>
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d0c3      	beq.n	801edf6 <_vfiprintf_r+0x14e>
 801ee6e:	9105      	str	r1, [sp, #20]
 801ee70:	e7c1      	b.n	801edf6 <_vfiprintf_r+0x14e>
 801ee72:	fb05 2101 	mla	r1, r5, r1, r2
 801ee76:	2301      	movs	r3, #1
 801ee78:	4680      	mov	r8, r0
 801ee7a:	e7f0      	b.n	801ee5e <_vfiprintf_r+0x1b6>
 801ee7c:	ab03      	add	r3, sp, #12
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	4622      	mov	r2, r4
 801ee82:	4b13      	ldr	r3, [pc, #76]	; (801eed0 <_vfiprintf_r+0x228>)
 801ee84:	a904      	add	r1, sp, #16
 801ee86:	4630      	mov	r0, r6
 801ee88:	f3af 8000 	nop.w
 801ee8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ee90:	4681      	mov	r9, r0
 801ee92:	d1d5      	bne.n	801ee40 <_vfiprintf_r+0x198>
 801ee94:	89a3      	ldrh	r3, [r4, #12]
 801ee96:	065b      	lsls	r3, r3, #25
 801ee98:	f53f af7e 	bmi.w	801ed98 <_vfiprintf_r+0xf0>
 801ee9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee9e:	e77d      	b.n	801ed9c <_vfiprintf_r+0xf4>
 801eea0:	ab03      	add	r3, sp, #12
 801eea2:	9300      	str	r3, [sp, #0]
 801eea4:	4622      	mov	r2, r4
 801eea6:	4b0a      	ldr	r3, [pc, #40]	; (801eed0 <_vfiprintf_r+0x228>)
 801eea8:	a904      	add	r1, sp, #16
 801eeaa:	4630      	mov	r0, r6
 801eeac:	f000 f888 	bl	801efc0 <_printf_i>
 801eeb0:	e7ec      	b.n	801ee8c <_vfiprintf_r+0x1e4>
 801eeb2:	bf00      	nop
 801eeb4:	08039dd0 	.word	0x08039dd0
 801eeb8:	08039e7c 	.word	0x08039e7c
 801eebc:	08039df0 	.word	0x08039df0
 801eec0:	08039db0 	.word	0x08039db0
 801eec4:	08039e82 	.word	0x08039e82
 801eec8:	08039e86 	.word	0x08039e86
 801eecc:	00000000 	.word	0x00000000
 801eed0:	0801ec83 	.word	0x0801ec83

0801eed4 <_printf_common>:
 801eed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eed8:	4691      	mov	r9, r2
 801eeda:	461f      	mov	r7, r3
 801eedc:	688a      	ldr	r2, [r1, #8]
 801eede:	690b      	ldr	r3, [r1, #16]
 801eee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eee4:	4293      	cmp	r3, r2
 801eee6:	bfb8      	it	lt
 801eee8:	4613      	movlt	r3, r2
 801eeea:	f8c9 3000 	str.w	r3, [r9]
 801eeee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eef2:	4606      	mov	r6, r0
 801eef4:	460c      	mov	r4, r1
 801eef6:	b112      	cbz	r2, 801eefe <_printf_common+0x2a>
 801eef8:	3301      	adds	r3, #1
 801eefa:	f8c9 3000 	str.w	r3, [r9]
 801eefe:	6823      	ldr	r3, [r4, #0]
 801ef00:	0699      	lsls	r1, r3, #26
 801ef02:	bf42      	ittt	mi
 801ef04:	f8d9 3000 	ldrmi.w	r3, [r9]
 801ef08:	3302      	addmi	r3, #2
 801ef0a:	f8c9 3000 	strmi.w	r3, [r9]
 801ef0e:	6825      	ldr	r5, [r4, #0]
 801ef10:	f015 0506 	ands.w	r5, r5, #6
 801ef14:	d107      	bne.n	801ef26 <_printf_common+0x52>
 801ef16:	f104 0a19 	add.w	sl, r4, #25
 801ef1a:	68e3      	ldr	r3, [r4, #12]
 801ef1c:	f8d9 2000 	ldr.w	r2, [r9]
 801ef20:	1a9b      	subs	r3, r3, r2
 801ef22:	42ab      	cmp	r3, r5
 801ef24:	dc28      	bgt.n	801ef78 <_printf_common+0xa4>
 801ef26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ef2a:	6822      	ldr	r2, [r4, #0]
 801ef2c:	3300      	adds	r3, #0
 801ef2e:	bf18      	it	ne
 801ef30:	2301      	movne	r3, #1
 801ef32:	0692      	lsls	r2, r2, #26
 801ef34:	d42d      	bmi.n	801ef92 <_printf_common+0xbe>
 801ef36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ef3a:	4639      	mov	r1, r7
 801ef3c:	4630      	mov	r0, r6
 801ef3e:	47c0      	blx	r8
 801ef40:	3001      	adds	r0, #1
 801ef42:	d020      	beq.n	801ef86 <_printf_common+0xb2>
 801ef44:	6823      	ldr	r3, [r4, #0]
 801ef46:	68e5      	ldr	r5, [r4, #12]
 801ef48:	f8d9 2000 	ldr.w	r2, [r9]
 801ef4c:	f003 0306 	and.w	r3, r3, #6
 801ef50:	2b04      	cmp	r3, #4
 801ef52:	bf08      	it	eq
 801ef54:	1aad      	subeq	r5, r5, r2
 801ef56:	68a3      	ldr	r3, [r4, #8]
 801ef58:	6922      	ldr	r2, [r4, #16]
 801ef5a:	bf0c      	ite	eq
 801ef5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef60:	2500      	movne	r5, #0
 801ef62:	4293      	cmp	r3, r2
 801ef64:	bfc4      	itt	gt
 801ef66:	1a9b      	subgt	r3, r3, r2
 801ef68:	18ed      	addgt	r5, r5, r3
 801ef6a:	f04f 0900 	mov.w	r9, #0
 801ef6e:	341a      	adds	r4, #26
 801ef70:	454d      	cmp	r5, r9
 801ef72:	d11a      	bne.n	801efaa <_printf_common+0xd6>
 801ef74:	2000      	movs	r0, #0
 801ef76:	e008      	b.n	801ef8a <_printf_common+0xb6>
 801ef78:	2301      	movs	r3, #1
 801ef7a:	4652      	mov	r2, sl
 801ef7c:	4639      	mov	r1, r7
 801ef7e:	4630      	mov	r0, r6
 801ef80:	47c0      	blx	r8
 801ef82:	3001      	adds	r0, #1
 801ef84:	d103      	bne.n	801ef8e <_printf_common+0xba>
 801ef86:	f04f 30ff 	mov.w	r0, #4294967295
 801ef8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef8e:	3501      	adds	r5, #1
 801ef90:	e7c3      	b.n	801ef1a <_printf_common+0x46>
 801ef92:	18e1      	adds	r1, r4, r3
 801ef94:	1c5a      	adds	r2, r3, #1
 801ef96:	2030      	movs	r0, #48	; 0x30
 801ef98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef9c:	4422      	add	r2, r4
 801ef9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801efa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801efa6:	3302      	adds	r3, #2
 801efa8:	e7c5      	b.n	801ef36 <_printf_common+0x62>
 801efaa:	2301      	movs	r3, #1
 801efac:	4622      	mov	r2, r4
 801efae:	4639      	mov	r1, r7
 801efb0:	4630      	mov	r0, r6
 801efb2:	47c0      	blx	r8
 801efb4:	3001      	adds	r0, #1
 801efb6:	d0e6      	beq.n	801ef86 <_printf_common+0xb2>
 801efb8:	f109 0901 	add.w	r9, r9, #1
 801efbc:	e7d8      	b.n	801ef70 <_printf_common+0x9c>
	...

0801efc0 <_printf_i>:
 801efc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801efc8:	460c      	mov	r4, r1
 801efca:	7e09      	ldrb	r1, [r1, #24]
 801efcc:	b085      	sub	sp, #20
 801efce:	296e      	cmp	r1, #110	; 0x6e
 801efd0:	4617      	mov	r7, r2
 801efd2:	4606      	mov	r6, r0
 801efd4:	4698      	mov	r8, r3
 801efd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efd8:	f000 80b3 	beq.w	801f142 <_printf_i+0x182>
 801efdc:	d822      	bhi.n	801f024 <_printf_i+0x64>
 801efde:	2963      	cmp	r1, #99	; 0x63
 801efe0:	d036      	beq.n	801f050 <_printf_i+0x90>
 801efe2:	d80a      	bhi.n	801effa <_printf_i+0x3a>
 801efe4:	2900      	cmp	r1, #0
 801efe6:	f000 80b9 	beq.w	801f15c <_printf_i+0x19c>
 801efea:	2958      	cmp	r1, #88	; 0x58
 801efec:	f000 8083 	beq.w	801f0f6 <_printf_i+0x136>
 801eff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801eff8:	e032      	b.n	801f060 <_printf_i+0xa0>
 801effa:	2964      	cmp	r1, #100	; 0x64
 801effc:	d001      	beq.n	801f002 <_printf_i+0x42>
 801effe:	2969      	cmp	r1, #105	; 0x69
 801f000:	d1f6      	bne.n	801eff0 <_printf_i+0x30>
 801f002:	6820      	ldr	r0, [r4, #0]
 801f004:	6813      	ldr	r3, [r2, #0]
 801f006:	0605      	lsls	r5, r0, #24
 801f008:	f103 0104 	add.w	r1, r3, #4
 801f00c:	d52a      	bpl.n	801f064 <_printf_i+0xa4>
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	6011      	str	r1, [r2, #0]
 801f012:	2b00      	cmp	r3, #0
 801f014:	da03      	bge.n	801f01e <_printf_i+0x5e>
 801f016:	222d      	movs	r2, #45	; 0x2d
 801f018:	425b      	negs	r3, r3
 801f01a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f01e:	486f      	ldr	r0, [pc, #444]	; (801f1dc <_printf_i+0x21c>)
 801f020:	220a      	movs	r2, #10
 801f022:	e039      	b.n	801f098 <_printf_i+0xd8>
 801f024:	2973      	cmp	r1, #115	; 0x73
 801f026:	f000 809d 	beq.w	801f164 <_printf_i+0x1a4>
 801f02a:	d808      	bhi.n	801f03e <_printf_i+0x7e>
 801f02c:	296f      	cmp	r1, #111	; 0x6f
 801f02e:	d020      	beq.n	801f072 <_printf_i+0xb2>
 801f030:	2970      	cmp	r1, #112	; 0x70
 801f032:	d1dd      	bne.n	801eff0 <_printf_i+0x30>
 801f034:	6823      	ldr	r3, [r4, #0]
 801f036:	f043 0320 	orr.w	r3, r3, #32
 801f03a:	6023      	str	r3, [r4, #0]
 801f03c:	e003      	b.n	801f046 <_printf_i+0x86>
 801f03e:	2975      	cmp	r1, #117	; 0x75
 801f040:	d017      	beq.n	801f072 <_printf_i+0xb2>
 801f042:	2978      	cmp	r1, #120	; 0x78
 801f044:	d1d4      	bne.n	801eff0 <_printf_i+0x30>
 801f046:	2378      	movs	r3, #120	; 0x78
 801f048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f04c:	4864      	ldr	r0, [pc, #400]	; (801f1e0 <_printf_i+0x220>)
 801f04e:	e055      	b.n	801f0fc <_printf_i+0x13c>
 801f050:	6813      	ldr	r3, [r2, #0]
 801f052:	1d19      	adds	r1, r3, #4
 801f054:	681b      	ldr	r3, [r3, #0]
 801f056:	6011      	str	r1, [r2, #0]
 801f058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f060:	2301      	movs	r3, #1
 801f062:	e08c      	b.n	801f17e <_printf_i+0x1be>
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	6011      	str	r1, [r2, #0]
 801f068:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f06c:	bf18      	it	ne
 801f06e:	b21b      	sxthne	r3, r3
 801f070:	e7cf      	b.n	801f012 <_printf_i+0x52>
 801f072:	6813      	ldr	r3, [r2, #0]
 801f074:	6825      	ldr	r5, [r4, #0]
 801f076:	1d18      	adds	r0, r3, #4
 801f078:	6010      	str	r0, [r2, #0]
 801f07a:	0628      	lsls	r0, r5, #24
 801f07c:	d501      	bpl.n	801f082 <_printf_i+0xc2>
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	e002      	b.n	801f088 <_printf_i+0xc8>
 801f082:	0668      	lsls	r0, r5, #25
 801f084:	d5fb      	bpl.n	801f07e <_printf_i+0xbe>
 801f086:	881b      	ldrh	r3, [r3, #0]
 801f088:	4854      	ldr	r0, [pc, #336]	; (801f1dc <_printf_i+0x21c>)
 801f08a:	296f      	cmp	r1, #111	; 0x6f
 801f08c:	bf14      	ite	ne
 801f08e:	220a      	movne	r2, #10
 801f090:	2208      	moveq	r2, #8
 801f092:	2100      	movs	r1, #0
 801f094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f098:	6865      	ldr	r5, [r4, #4]
 801f09a:	60a5      	str	r5, [r4, #8]
 801f09c:	2d00      	cmp	r5, #0
 801f09e:	f2c0 8095 	blt.w	801f1cc <_printf_i+0x20c>
 801f0a2:	6821      	ldr	r1, [r4, #0]
 801f0a4:	f021 0104 	bic.w	r1, r1, #4
 801f0a8:	6021      	str	r1, [r4, #0]
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	d13d      	bne.n	801f12a <_printf_i+0x16a>
 801f0ae:	2d00      	cmp	r5, #0
 801f0b0:	f040 808e 	bne.w	801f1d0 <_printf_i+0x210>
 801f0b4:	4665      	mov	r5, ip
 801f0b6:	2a08      	cmp	r2, #8
 801f0b8:	d10b      	bne.n	801f0d2 <_printf_i+0x112>
 801f0ba:	6823      	ldr	r3, [r4, #0]
 801f0bc:	07db      	lsls	r3, r3, #31
 801f0be:	d508      	bpl.n	801f0d2 <_printf_i+0x112>
 801f0c0:	6923      	ldr	r3, [r4, #16]
 801f0c2:	6862      	ldr	r2, [r4, #4]
 801f0c4:	429a      	cmp	r2, r3
 801f0c6:	bfde      	ittt	le
 801f0c8:	2330      	movle	r3, #48	; 0x30
 801f0ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f0ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f0d2:	ebac 0305 	sub.w	r3, ip, r5
 801f0d6:	6123      	str	r3, [r4, #16]
 801f0d8:	f8cd 8000 	str.w	r8, [sp]
 801f0dc:	463b      	mov	r3, r7
 801f0de:	aa03      	add	r2, sp, #12
 801f0e0:	4621      	mov	r1, r4
 801f0e2:	4630      	mov	r0, r6
 801f0e4:	f7ff fef6 	bl	801eed4 <_printf_common>
 801f0e8:	3001      	adds	r0, #1
 801f0ea:	d14d      	bne.n	801f188 <_printf_i+0x1c8>
 801f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f0f0:	b005      	add	sp, #20
 801f0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0f6:	4839      	ldr	r0, [pc, #228]	; (801f1dc <_printf_i+0x21c>)
 801f0f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801f0fc:	6813      	ldr	r3, [r2, #0]
 801f0fe:	6821      	ldr	r1, [r4, #0]
 801f100:	1d1d      	adds	r5, r3, #4
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	6015      	str	r5, [r2, #0]
 801f106:	060a      	lsls	r2, r1, #24
 801f108:	d50b      	bpl.n	801f122 <_printf_i+0x162>
 801f10a:	07ca      	lsls	r2, r1, #31
 801f10c:	bf44      	itt	mi
 801f10e:	f041 0120 	orrmi.w	r1, r1, #32
 801f112:	6021      	strmi	r1, [r4, #0]
 801f114:	b91b      	cbnz	r3, 801f11e <_printf_i+0x15e>
 801f116:	6822      	ldr	r2, [r4, #0]
 801f118:	f022 0220 	bic.w	r2, r2, #32
 801f11c:	6022      	str	r2, [r4, #0]
 801f11e:	2210      	movs	r2, #16
 801f120:	e7b7      	b.n	801f092 <_printf_i+0xd2>
 801f122:	064d      	lsls	r5, r1, #25
 801f124:	bf48      	it	mi
 801f126:	b29b      	uxthmi	r3, r3
 801f128:	e7ef      	b.n	801f10a <_printf_i+0x14a>
 801f12a:	4665      	mov	r5, ip
 801f12c:	fbb3 f1f2 	udiv	r1, r3, r2
 801f130:	fb02 3311 	mls	r3, r2, r1, r3
 801f134:	5cc3      	ldrb	r3, [r0, r3]
 801f136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f13a:	460b      	mov	r3, r1
 801f13c:	2900      	cmp	r1, #0
 801f13e:	d1f5      	bne.n	801f12c <_printf_i+0x16c>
 801f140:	e7b9      	b.n	801f0b6 <_printf_i+0xf6>
 801f142:	6813      	ldr	r3, [r2, #0]
 801f144:	6825      	ldr	r5, [r4, #0]
 801f146:	6961      	ldr	r1, [r4, #20]
 801f148:	1d18      	adds	r0, r3, #4
 801f14a:	6010      	str	r0, [r2, #0]
 801f14c:	0628      	lsls	r0, r5, #24
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	d501      	bpl.n	801f156 <_printf_i+0x196>
 801f152:	6019      	str	r1, [r3, #0]
 801f154:	e002      	b.n	801f15c <_printf_i+0x19c>
 801f156:	066a      	lsls	r2, r5, #25
 801f158:	d5fb      	bpl.n	801f152 <_printf_i+0x192>
 801f15a:	8019      	strh	r1, [r3, #0]
 801f15c:	2300      	movs	r3, #0
 801f15e:	6123      	str	r3, [r4, #16]
 801f160:	4665      	mov	r5, ip
 801f162:	e7b9      	b.n	801f0d8 <_printf_i+0x118>
 801f164:	6813      	ldr	r3, [r2, #0]
 801f166:	1d19      	adds	r1, r3, #4
 801f168:	6011      	str	r1, [r2, #0]
 801f16a:	681d      	ldr	r5, [r3, #0]
 801f16c:	6862      	ldr	r2, [r4, #4]
 801f16e:	2100      	movs	r1, #0
 801f170:	4628      	mov	r0, r5
 801f172:	f7e1 f87d 	bl	8000270 <memchr>
 801f176:	b108      	cbz	r0, 801f17c <_printf_i+0x1bc>
 801f178:	1b40      	subs	r0, r0, r5
 801f17a:	6060      	str	r0, [r4, #4]
 801f17c:	6863      	ldr	r3, [r4, #4]
 801f17e:	6123      	str	r3, [r4, #16]
 801f180:	2300      	movs	r3, #0
 801f182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f186:	e7a7      	b.n	801f0d8 <_printf_i+0x118>
 801f188:	6923      	ldr	r3, [r4, #16]
 801f18a:	462a      	mov	r2, r5
 801f18c:	4639      	mov	r1, r7
 801f18e:	4630      	mov	r0, r6
 801f190:	47c0      	blx	r8
 801f192:	3001      	adds	r0, #1
 801f194:	d0aa      	beq.n	801f0ec <_printf_i+0x12c>
 801f196:	6823      	ldr	r3, [r4, #0]
 801f198:	079b      	lsls	r3, r3, #30
 801f19a:	d413      	bmi.n	801f1c4 <_printf_i+0x204>
 801f19c:	68e0      	ldr	r0, [r4, #12]
 801f19e:	9b03      	ldr	r3, [sp, #12]
 801f1a0:	4298      	cmp	r0, r3
 801f1a2:	bfb8      	it	lt
 801f1a4:	4618      	movlt	r0, r3
 801f1a6:	e7a3      	b.n	801f0f0 <_printf_i+0x130>
 801f1a8:	2301      	movs	r3, #1
 801f1aa:	464a      	mov	r2, r9
 801f1ac:	4639      	mov	r1, r7
 801f1ae:	4630      	mov	r0, r6
 801f1b0:	47c0      	blx	r8
 801f1b2:	3001      	adds	r0, #1
 801f1b4:	d09a      	beq.n	801f0ec <_printf_i+0x12c>
 801f1b6:	3501      	adds	r5, #1
 801f1b8:	68e3      	ldr	r3, [r4, #12]
 801f1ba:	9a03      	ldr	r2, [sp, #12]
 801f1bc:	1a9b      	subs	r3, r3, r2
 801f1be:	42ab      	cmp	r3, r5
 801f1c0:	dcf2      	bgt.n	801f1a8 <_printf_i+0x1e8>
 801f1c2:	e7eb      	b.n	801f19c <_printf_i+0x1dc>
 801f1c4:	2500      	movs	r5, #0
 801f1c6:	f104 0919 	add.w	r9, r4, #25
 801f1ca:	e7f5      	b.n	801f1b8 <_printf_i+0x1f8>
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d1ac      	bne.n	801f12a <_printf_i+0x16a>
 801f1d0:	7803      	ldrb	r3, [r0, #0]
 801f1d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f1d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f1da:	e76c      	b.n	801f0b6 <_printf_i+0xf6>
 801f1dc:	08039e8d 	.word	0x08039e8d
 801f1e0:	08039e9e 	.word	0x08039e9e

0801f1e4 <_scanf_chars>:
 801f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1e8:	4615      	mov	r5, r2
 801f1ea:	688a      	ldr	r2, [r1, #8]
 801f1ec:	4680      	mov	r8, r0
 801f1ee:	460c      	mov	r4, r1
 801f1f0:	b932      	cbnz	r2, 801f200 <_scanf_chars+0x1c>
 801f1f2:	698a      	ldr	r2, [r1, #24]
 801f1f4:	2a00      	cmp	r2, #0
 801f1f6:	bf14      	ite	ne
 801f1f8:	f04f 32ff 	movne.w	r2, #4294967295
 801f1fc:	2201      	moveq	r2, #1
 801f1fe:	608a      	str	r2, [r1, #8]
 801f200:	6822      	ldr	r2, [r4, #0]
 801f202:	06d1      	lsls	r1, r2, #27
 801f204:	bf5f      	itttt	pl
 801f206:	681a      	ldrpl	r2, [r3, #0]
 801f208:	1d11      	addpl	r1, r2, #4
 801f20a:	6019      	strpl	r1, [r3, #0]
 801f20c:	6817      	ldrpl	r7, [r2, #0]
 801f20e:	2600      	movs	r6, #0
 801f210:	69a3      	ldr	r3, [r4, #24]
 801f212:	b1db      	cbz	r3, 801f24c <_scanf_chars+0x68>
 801f214:	2b01      	cmp	r3, #1
 801f216:	d107      	bne.n	801f228 <_scanf_chars+0x44>
 801f218:	682b      	ldr	r3, [r5, #0]
 801f21a:	6962      	ldr	r2, [r4, #20]
 801f21c:	781b      	ldrb	r3, [r3, #0]
 801f21e:	5cd3      	ldrb	r3, [r2, r3]
 801f220:	b9a3      	cbnz	r3, 801f24c <_scanf_chars+0x68>
 801f222:	2e00      	cmp	r6, #0
 801f224:	d132      	bne.n	801f28c <_scanf_chars+0xa8>
 801f226:	e006      	b.n	801f236 <_scanf_chars+0x52>
 801f228:	2b02      	cmp	r3, #2
 801f22a:	d007      	beq.n	801f23c <_scanf_chars+0x58>
 801f22c:	2e00      	cmp	r6, #0
 801f22e:	d12d      	bne.n	801f28c <_scanf_chars+0xa8>
 801f230:	69a3      	ldr	r3, [r4, #24]
 801f232:	2b01      	cmp	r3, #1
 801f234:	d12a      	bne.n	801f28c <_scanf_chars+0xa8>
 801f236:	2001      	movs	r0, #1
 801f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f23c:	f7ff f950 	bl	801e4e0 <__locale_ctype_ptr>
 801f240:	682b      	ldr	r3, [r5, #0]
 801f242:	781b      	ldrb	r3, [r3, #0]
 801f244:	4418      	add	r0, r3
 801f246:	7843      	ldrb	r3, [r0, #1]
 801f248:	071b      	lsls	r3, r3, #28
 801f24a:	d4ef      	bmi.n	801f22c <_scanf_chars+0x48>
 801f24c:	6823      	ldr	r3, [r4, #0]
 801f24e:	06da      	lsls	r2, r3, #27
 801f250:	bf5e      	ittt	pl
 801f252:	682b      	ldrpl	r3, [r5, #0]
 801f254:	781b      	ldrbpl	r3, [r3, #0]
 801f256:	703b      	strbpl	r3, [r7, #0]
 801f258:	682a      	ldr	r2, [r5, #0]
 801f25a:	686b      	ldr	r3, [r5, #4]
 801f25c:	f102 0201 	add.w	r2, r2, #1
 801f260:	602a      	str	r2, [r5, #0]
 801f262:	68a2      	ldr	r2, [r4, #8]
 801f264:	f103 33ff 	add.w	r3, r3, #4294967295
 801f268:	f102 32ff 	add.w	r2, r2, #4294967295
 801f26c:	606b      	str	r3, [r5, #4]
 801f26e:	f106 0601 	add.w	r6, r6, #1
 801f272:	bf58      	it	pl
 801f274:	3701      	addpl	r7, #1
 801f276:	60a2      	str	r2, [r4, #8]
 801f278:	b142      	cbz	r2, 801f28c <_scanf_chars+0xa8>
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	dcc8      	bgt.n	801f210 <_scanf_chars+0x2c>
 801f27e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f282:	4629      	mov	r1, r5
 801f284:	4640      	mov	r0, r8
 801f286:	4798      	blx	r3
 801f288:	2800      	cmp	r0, #0
 801f28a:	d0c1      	beq.n	801f210 <_scanf_chars+0x2c>
 801f28c:	6823      	ldr	r3, [r4, #0]
 801f28e:	f013 0310 	ands.w	r3, r3, #16
 801f292:	d105      	bne.n	801f2a0 <_scanf_chars+0xbc>
 801f294:	68e2      	ldr	r2, [r4, #12]
 801f296:	3201      	adds	r2, #1
 801f298:	60e2      	str	r2, [r4, #12]
 801f29a:	69a2      	ldr	r2, [r4, #24]
 801f29c:	b102      	cbz	r2, 801f2a0 <_scanf_chars+0xbc>
 801f29e:	703b      	strb	r3, [r7, #0]
 801f2a0:	6923      	ldr	r3, [r4, #16]
 801f2a2:	441e      	add	r6, r3
 801f2a4:	6126      	str	r6, [r4, #16]
 801f2a6:	2000      	movs	r0, #0
 801f2a8:	e7c6      	b.n	801f238 <_scanf_chars+0x54>
	...

0801f2ac <_scanf_i>:
 801f2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2b0:	469a      	mov	sl, r3
 801f2b2:	4b74      	ldr	r3, [pc, #464]	; (801f484 <_scanf_i+0x1d8>)
 801f2b4:	460c      	mov	r4, r1
 801f2b6:	4683      	mov	fp, r0
 801f2b8:	4616      	mov	r6, r2
 801f2ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f2be:	b087      	sub	sp, #28
 801f2c0:	ab03      	add	r3, sp, #12
 801f2c2:	68a7      	ldr	r7, [r4, #8]
 801f2c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f2c8:	4b6f      	ldr	r3, [pc, #444]	; (801f488 <_scanf_i+0x1dc>)
 801f2ca:	69a1      	ldr	r1, [r4, #24]
 801f2cc:	4a6f      	ldr	r2, [pc, #444]	; (801f48c <_scanf_i+0x1e0>)
 801f2ce:	2903      	cmp	r1, #3
 801f2d0:	bf08      	it	eq
 801f2d2:	461a      	moveq	r2, r3
 801f2d4:	1e7b      	subs	r3, r7, #1
 801f2d6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801f2da:	bf84      	itt	hi
 801f2dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f2e0:	60a3      	strhi	r3, [r4, #8]
 801f2e2:	6823      	ldr	r3, [r4, #0]
 801f2e4:	9200      	str	r2, [sp, #0]
 801f2e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f2ea:	bf88      	it	hi
 801f2ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f2f0:	f104 091c 	add.w	r9, r4, #28
 801f2f4:	6023      	str	r3, [r4, #0]
 801f2f6:	bf8c      	ite	hi
 801f2f8:	197f      	addhi	r7, r7, r5
 801f2fa:	2700      	movls	r7, #0
 801f2fc:	464b      	mov	r3, r9
 801f2fe:	f04f 0800 	mov.w	r8, #0
 801f302:	9301      	str	r3, [sp, #4]
 801f304:	6831      	ldr	r1, [r6, #0]
 801f306:	ab03      	add	r3, sp, #12
 801f308:	2202      	movs	r2, #2
 801f30a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f30e:	7809      	ldrb	r1, [r1, #0]
 801f310:	f7e0 ffae 	bl	8000270 <memchr>
 801f314:	9b01      	ldr	r3, [sp, #4]
 801f316:	b330      	cbz	r0, 801f366 <_scanf_i+0xba>
 801f318:	f1b8 0f01 	cmp.w	r8, #1
 801f31c:	d15a      	bne.n	801f3d4 <_scanf_i+0x128>
 801f31e:	6862      	ldr	r2, [r4, #4]
 801f320:	b92a      	cbnz	r2, 801f32e <_scanf_i+0x82>
 801f322:	6822      	ldr	r2, [r4, #0]
 801f324:	2108      	movs	r1, #8
 801f326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f32a:	6061      	str	r1, [r4, #4]
 801f32c:	6022      	str	r2, [r4, #0]
 801f32e:	6822      	ldr	r2, [r4, #0]
 801f330:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f334:	6022      	str	r2, [r4, #0]
 801f336:	68a2      	ldr	r2, [r4, #8]
 801f338:	1e51      	subs	r1, r2, #1
 801f33a:	60a1      	str	r1, [r4, #8]
 801f33c:	b19a      	cbz	r2, 801f366 <_scanf_i+0xba>
 801f33e:	6832      	ldr	r2, [r6, #0]
 801f340:	1c51      	adds	r1, r2, #1
 801f342:	6031      	str	r1, [r6, #0]
 801f344:	7812      	ldrb	r2, [r2, #0]
 801f346:	701a      	strb	r2, [r3, #0]
 801f348:	1c5d      	adds	r5, r3, #1
 801f34a:	6873      	ldr	r3, [r6, #4]
 801f34c:	3b01      	subs	r3, #1
 801f34e:	2b00      	cmp	r3, #0
 801f350:	6073      	str	r3, [r6, #4]
 801f352:	dc07      	bgt.n	801f364 <_scanf_i+0xb8>
 801f354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f358:	4631      	mov	r1, r6
 801f35a:	4658      	mov	r0, fp
 801f35c:	4798      	blx	r3
 801f35e:	2800      	cmp	r0, #0
 801f360:	f040 8086 	bne.w	801f470 <_scanf_i+0x1c4>
 801f364:	462b      	mov	r3, r5
 801f366:	f108 0801 	add.w	r8, r8, #1
 801f36a:	f1b8 0f03 	cmp.w	r8, #3
 801f36e:	d1c8      	bne.n	801f302 <_scanf_i+0x56>
 801f370:	6862      	ldr	r2, [r4, #4]
 801f372:	b90a      	cbnz	r2, 801f378 <_scanf_i+0xcc>
 801f374:	220a      	movs	r2, #10
 801f376:	6062      	str	r2, [r4, #4]
 801f378:	6862      	ldr	r2, [r4, #4]
 801f37a:	4945      	ldr	r1, [pc, #276]	; (801f490 <_scanf_i+0x1e4>)
 801f37c:	6960      	ldr	r0, [r4, #20]
 801f37e:	9301      	str	r3, [sp, #4]
 801f380:	1a89      	subs	r1, r1, r2
 801f382:	f000 f8cf 	bl	801f524 <__sccl>
 801f386:	9b01      	ldr	r3, [sp, #4]
 801f388:	f04f 0800 	mov.w	r8, #0
 801f38c:	461d      	mov	r5, r3
 801f38e:	68a3      	ldr	r3, [r4, #8]
 801f390:	6822      	ldr	r2, [r4, #0]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d03a      	beq.n	801f40c <_scanf_i+0x160>
 801f396:	6831      	ldr	r1, [r6, #0]
 801f398:	6960      	ldr	r0, [r4, #20]
 801f39a:	f891 c000 	ldrb.w	ip, [r1]
 801f39e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	d032      	beq.n	801f40c <_scanf_i+0x160>
 801f3a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f3aa:	d121      	bne.n	801f3f0 <_scanf_i+0x144>
 801f3ac:	0510      	lsls	r0, r2, #20
 801f3ae:	d51f      	bpl.n	801f3f0 <_scanf_i+0x144>
 801f3b0:	f108 0801 	add.w	r8, r8, #1
 801f3b4:	b117      	cbz	r7, 801f3bc <_scanf_i+0x110>
 801f3b6:	3301      	adds	r3, #1
 801f3b8:	3f01      	subs	r7, #1
 801f3ba:	60a3      	str	r3, [r4, #8]
 801f3bc:	6873      	ldr	r3, [r6, #4]
 801f3be:	3b01      	subs	r3, #1
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	6073      	str	r3, [r6, #4]
 801f3c4:	dd1b      	ble.n	801f3fe <_scanf_i+0x152>
 801f3c6:	6833      	ldr	r3, [r6, #0]
 801f3c8:	3301      	adds	r3, #1
 801f3ca:	6033      	str	r3, [r6, #0]
 801f3cc:	68a3      	ldr	r3, [r4, #8]
 801f3ce:	3b01      	subs	r3, #1
 801f3d0:	60a3      	str	r3, [r4, #8]
 801f3d2:	e7dc      	b.n	801f38e <_scanf_i+0xe2>
 801f3d4:	f1b8 0f02 	cmp.w	r8, #2
 801f3d8:	d1ad      	bne.n	801f336 <_scanf_i+0x8a>
 801f3da:	6822      	ldr	r2, [r4, #0]
 801f3dc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f3e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f3e4:	d1bf      	bne.n	801f366 <_scanf_i+0xba>
 801f3e6:	2110      	movs	r1, #16
 801f3e8:	6061      	str	r1, [r4, #4]
 801f3ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f3ee:	e7a1      	b.n	801f334 <_scanf_i+0x88>
 801f3f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f3f4:	6022      	str	r2, [r4, #0]
 801f3f6:	780b      	ldrb	r3, [r1, #0]
 801f3f8:	702b      	strb	r3, [r5, #0]
 801f3fa:	3501      	adds	r5, #1
 801f3fc:	e7de      	b.n	801f3bc <_scanf_i+0x110>
 801f3fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f402:	4631      	mov	r1, r6
 801f404:	4658      	mov	r0, fp
 801f406:	4798      	blx	r3
 801f408:	2800      	cmp	r0, #0
 801f40a:	d0df      	beq.n	801f3cc <_scanf_i+0x120>
 801f40c:	6823      	ldr	r3, [r4, #0]
 801f40e:	05d9      	lsls	r1, r3, #23
 801f410:	d50c      	bpl.n	801f42c <_scanf_i+0x180>
 801f412:	454d      	cmp	r5, r9
 801f414:	d908      	bls.n	801f428 <_scanf_i+0x17c>
 801f416:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f41e:	4632      	mov	r2, r6
 801f420:	4658      	mov	r0, fp
 801f422:	4798      	blx	r3
 801f424:	1e6f      	subs	r7, r5, #1
 801f426:	463d      	mov	r5, r7
 801f428:	454d      	cmp	r5, r9
 801f42a:	d029      	beq.n	801f480 <_scanf_i+0x1d4>
 801f42c:	6822      	ldr	r2, [r4, #0]
 801f42e:	f012 0210 	ands.w	r2, r2, #16
 801f432:	d113      	bne.n	801f45c <_scanf_i+0x1b0>
 801f434:	702a      	strb	r2, [r5, #0]
 801f436:	6863      	ldr	r3, [r4, #4]
 801f438:	9e00      	ldr	r6, [sp, #0]
 801f43a:	4649      	mov	r1, r9
 801f43c:	4658      	mov	r0, fp
 801f43e:	47b0      	blx	r6
 801f440:	f8da 3000 	ldr.w	r3, [sl]
 801f444:	6821      	ldr	r1, [r4, #0]
 801f446:	1d1a      	adds	r2, r3, #4
 801f448:	f8ca 2000 	str.w	r2, [sl]
 801f44c:	f011 0f20 	tst.w	r1, #32
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	d010      	beq.n	801f476 <_scanf_i+0x1ca>
 801f454:	6018      	str	r0, [r3, #0]
 801f456:	68e3      	ldr	r3, [r4, #12]
 801f458:	3301      	adds	r3, #1
 801f45a:	60e3      	str	r3, [r4, #12]
 801f45c:	eba5 0509 	sub.w	r5, r5, r9
 801f460:	44a8      	add	r8, r5
 801f462:	6925      	ldr	r5, [r4, #16]
 801f464:	4445      	add	r5, r8
 801f466:	6125      	str	r5, [r4, #16]
 801f468:	2000      	movs	r0, #0
 801f46a:	b007      	add	sp, #28
 801f46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f470:	f04f 0800 	mov.w	r8, #0
 801f474:	e7ca      	b.n	801f40c <_scanf_i+0x160>
 801f476:	07ca      	lsls	r2, r1, #31
 801f478:	bf4c      	ite	mi
 801f47a:	8018      	strhmi	r0, [r3, #0]
 801f47c:	6018      	strpl	r0, [r3, #0]
 801f47e:	e7ea      	b.n	801f456 <_scanf_i+0x1aa>
 801f480:	2001      	movs	r0, #1
 801f482:	e7f2      	b.n	801f46a <_scanf_i+0x1be>
 801f484:	0801fa5c 	.word	0x0801fa5c
 801f488:	0801dabd 	.word	0x0801dabd
 801f48c:	0801f67d 	.word	0x0801f67d
 801f490:	08039ebf 	.word	0x08039ebf

0801f494 <_putc_r>:
 801f494:	b570      	push	{r4, r5, r6, lr}
 801f496:	460d      	mov	r5, r1
 801f498:	4614      	mov	r4, r2
 801f49a:	4606      	mov	r6, r0
 801f49c:	b118      	cbz	r0, 801f4a6 <_putc_r+0x12>
 801f49e:	6983      	ldr	r3, [r0, #24]
 801f4a0:	b90b      	cbnz	r3, 801f4a6 <_putc_r+0x12>
 801f4a2:	f7fe ff47 	bl	801e334 <__sinit>
 801f4a6:	4b13      	ldr	r3, [pc, #76]	; (801f4f4 <_putc_r+0x60>)
 801f4a8:	429c      	cmp	r4, r3
 801f4aa:	d112      	bne.n	801f4d2 <_putc_r+0x3e>
 801f4ac:	6874      	ldr	r4, [r6, #4]
 801f4ae:	68a3      	ldr	r3, [r4, #8]
 801f4b0:	3b01      	subs	r3, #1
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	60a3      	str	r3, [r4, #8]
 801f4b6:	da16      	bge.n	801f4e6 <_putc_r+0x52>
 801f4b8:	69a2      	ldr	r2, [r4, #24]
 801f4ba:	4293      	cmp	r3, r2
 801f4bc:	db02      	blt.n	801f4c4 <_putc_r+0x30>
 801f4be:	b2eb      	uxtb	r3, r5
 801f4c0:	2b0a      	cmp	r3, #10
 801f4c2:	d110      	bne.n	801f4e6 <_putc_r+0x52>
 801f4c4:	4622      	mov	r2, r4
 801f4c6:	4629      	mov	r1, r5
 801f4c8:	4630      	mov	r0, r6
 801f4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f4ce:	f7fe bd4b 	b.w	801df68 <__swbuf_r>
 801f4d2:	4b09      	ldr	r3, [pc, #36]	; (801f4f8 <_putc_r+0x64>)
 801f4d4:	429c      	cmp	r4, r3
 801f4d6:	d101      	bne.n	801f4dc <_putc_r+0x48>
 801f4d8:	68b4      	ldr	r4, [r6, #8]
 801f4da:	e7e8      	b.n	801f4ae <_putc_r+0x1a>
 801f4dc:	4b07      	ldr	r3, [pc, #28]	; (801f4fc <_putc_r+0x68>)
 801f4de:	429c      	cmp	r4, r3
 801f4e0:	bf08      	it	eq
 801f4e2:	68f4      	ldreq	r4, [r6, #12]
 801f4e4:	e7e3      	b.n	801f4ae <_putc_r+0x1a>
 801f4e6:	6823      	ldr	r3, [r4, #0]
 801f4e8:	1c5a      	adds	r2, r3, #1
 801f4ea:	6022      	str	r2, [r4, #0]
 801f4ec:	701d      	strb	r5, [r3, #0]
 801f4ee:	b2e8      	uxtb	r0, r5
 801f4f0:	bd70      	pop	{r4, r5, r6, pc}
 801f4f2:	bf00      	nop
 801f4f4:	08039dd0 	.word	0x08039dd0
 801f4f8:	08039df0 	.word	0x08039df0
 801f4fc:	08039db0 	.word	0x08039db0

0801f500 <_read_r>:
 801f500:	b538      	push	{r3, r4, r5, lr}
 801f502:	4c07      	ldr	r4, [pc, #28]	; (801f520 <_read_r+0x20>)
 801f504:	4605      	mov	r5, r0
 801f506:	4608      	mov	r0, r1
 801f508:	4611      	mov	r1, r2
 801f50a:	2200      	movs	r2, #0
 801f50c:	6022      	str	r2, [r4, #0]
 801f50e:	461a      	mov	r2, r3
 801f510:	f7e4 fbc6 	bl	8003ca0 <_read>
 801f514:	1c43      	adds	r3, r0, #1
 801f516:	d102      	bne.n	801f51e <_read_r+0x1e>
 801f518:	6823      	ldr	r3, [r4, #0]
 801f51a:	b103      	cbz	r3, 801f51e <_read_r+0x1e>
 801f51c:	602b      	str	r3, [r5, #0]
 801f51e:	bd38      	pop	{r3, r4, r5, pc}
 801f520:	20033bd8 	.word	0x20033bd8

0801f524 <__sccl>:
 801f524:	b570      	push	{r4, r5, r6, lr}
 801f526:	780b      	ldrb	r3, [r1, #0]
 801f528:	2b5e      	cmp	r3, #94	; 0x5e
 801f52a:	bf13      	iteet	ne
 801f52c:	1c4a      	addne	r2, r1, #1
 801f52e:	1c8a      	addeq	r2, r1, #2
 801f530:	784b      	ldrbeq	r3, [r1, #1]
 801f532:	2100      	movne	r1, #0
 801f534:	bf08      	it	eq
 801f536:	2101      	moveq	r1, #1
 801f538:	1e44      	subs	r4, r0, #1
 801f53a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801f53e:	f804 1f01 	strb.w	r1, [r4, #1]!
 801f542:	42ac      	cmp	r4, r5
 801f544:	d1fb      	bne.n	801f53e <__sccl+0x1a>
 801f546:	b913      	cbnz	r3, 801f54e <__sccl+0x2a>
 801f548:	3a01      	subs	r2, #1
 801f54a:	4610      	mov	r0, r2
 801f54c:	bd70      	pop	{r4, r5, r6, pc}
 801f54e:	f081 0401 	eor.w	r4, r1, #1
 801f552:	54c4      	strb	r4, [r0, r3]
 801f554:	1c51      	adds	r1, r2, #1
 801f556:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801f55a:	2d2d      	cmp	r5, #45	; 0x2d
 801f55c:	f101 36ff 	add.w	r6, r1, #4294967295
 801f560:	460a      	mov	r2, r1
 801f562:	d006      	beq.n	801f572 <__sccl+0x4e>
 801f564:	2d5d      	cmp	r5, #93	; 0x5d
 801f566:	d0f0      	beq.n	801f54a <__sccl+0x26>
 801f568:	b90d      	cbnz	r5, 801f56e <__sccl+0x4a>
 801f56a:	4632      	mov	r2, r6
 801f56c:	e7ed      	b.n	801f54a <__sccl+0x26>
 801f56e:	462b      	mov	r3, r5
 801f570:	e7ef      	b.n	801f552 <__sccl+0x2e>
 801f572:	780e      	ldrb	r6, [r1, #0]
 801f574:	2e5d      	cmp	r6, #93	; 0x5d
 801f576:	d0fa      	beq.n	801f56e <__sccl+0x4a>
 801f578:	42b3      	cmp	r3, r6
 801f57a:	dcf8      	bgt.n	801f56e <__sccl+0x4a>
 801f57c:	3301      	adds	r3, #1
 801f57e:	429e      	cmp	r6, r3
 801f580:	54c4      	strb	r4, [r0, r3]
 801f582:	dcfb      	bgt.n	801f57c <__sccl+0x58>
 801f584:	3102      	adds	r1, #2
 801f586:	e7e6      	b.n	801f556 <__sccl+0x32>

0801f588 <_strtoul_l.isra.0>:
 801f588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f58c:	4680      	mov	r8, r0
 801f58e:	4689      	mov	r9, r1
 801f590:	4692      	mov	sl, r2
 801f592:	461e      	mov	r6, r3
 801f594:	460f      	mov	r7, r1
 801f596:	463d      	mov	r5, r7
 801f598:	9808      	ldr	r0, [sp, #32]
 801f59a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f59e:	f7fe ff9b 	bl	801e4d8 <__locale_ctype_ptr_l>
 801f5a2:	4420      	add	r0, r4
 801f5a4:	7843      	ldrb	r3, [r0, #1]
 801f5a6:	f013 0308 	ands.w	r3, r3, #8
 801f5aa:	d130      	bne.n	801f60e <_strtoul_l.isra.0+0x86>
 801f5ac:	2c2d      	cmp	r4, #45	; 0x2d
 801f5ae:	d130      	bne.n	801f612 <_strtoul_l.isra.0+0x8a>
 801f5b0:	787c      	ldrb	r4, [r7, #1]
 801f5b2:	1cbd      	adds	r5, r7, #2
 801f5b4:	2101      	movs	r1, #1
 801f5b6:	2e00      	cmp	r6, #0
 801f5b8:	d05c      	beq.n	801f674 <_strtoul_l.isra.0+0xec>
 801f5ba:	2e10      	cmp	r6, #16
 801f5bc:	d109      	bne.n	801f5d2 <_strtoul_l.isra.0+0x4a>
 801f5be:	2c30      	cmp	r4, #48	; 0x30
 801f5c0:	d107      	bne.n	801f5d2 <_strtoul_l.isra.0+0x4a>
 801f5c2:	782b      	ldrb	r3, [r5, #0]
 801f5c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f5c8:	2b58      	cmp	r3, #88	; 0x58
 801f5ca:	d14e      	bne.n	801f66a <_strtoul_l.isra.0+0xe2>
 801f5cc:	786c      	ldrb	r4, [r5, #1]
 801f5ce:	2610      	movs	r6, #16
 801f5d0:	3502      	adds	r5, #2
 801f5d2:	f04f 32ff 	mov.w	r2, #4294967295
 801f5d6:	2300      	movs	r3, #0
 801f5d8:	fbb2 f2f6 	udiv	r2, r2, r6
 801f5dc:	fb06 fc02 	mul.w	ip, r6, r2
 801f5e0:	ea6f 0c0c 	mvn.w	ip, ip
 801f5e4:	4618      	mov	r0, r3
 801f5e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f5ea:	2f09      	cmp	r7, #9
 801f5ec:	d817      	bhi.n	801f61e <_strtoul_l.isra.0+0x96>
 801f5ee:	463c      	mov	r4, r7
 801f5f0:	42a6      	cmp	r6, r4
 801f5f2:	dd23      	ble.n	801f63c <_strtoul_l.isra.0+0xb4>
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	db1e      	blt.n	801f636 <_strtoul_l.isra.0+0xae>
 801f5f8:	4282      	cmp	r2, r0
 801f5fa:	d31c      	bcc.n	801f636 <_strtoul_l.isra.0+0xae>
 801f5fc:	d101      	bne.n	801f602 <_strtoul_l.isra.0+0x7a>
 801f5fe:	45a4      	cmp	ip, r4
 801f600:	db19      	blt.n	801f636 <_strtoul_l.isra.0+0xae>
 801f602:	fb00 4006 	mla	r0, r0, r6, r4
 801f606:	2301      	movs	r3, #1
 801f608:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f60c:	e7eb      	b.n	801f5e6 <_strtoul_l.isra.0+0x5e>
 801f60e:	462f      	mov	r7, r5
 801f610:	e7c1      	b.n	801f596 <_strtoul_l.isra.0+0xe>
 801f612:	2c2b      	cmp	r4, #43	; 0x2b
 801f614:	bf04      	itt	eq
 801f616:	1cbd      	addeq	r5, r7, #2
 801f618:	787c      	ldrbeq	r4, [r7, #1]
 801f61a:	4619      	mov	r1, r3
 801f61c:	e7cb      	b.n	801f5b6 <_strtoul_l.isra.0+0x2e>
 801f61e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f622:	2f19      	cmp	r7, #25
 801f624:	d801      	bhi.n	801f62a <_strtoul_l.isra.0+0xa2>
 801f626:	3c37      	subs	r4, #55	; 0x37
 801f628:	e7e2      	b.n	801f5f0 <_strtoul_l.isra.0+0x68>
 801f62a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f62e:	2f19      	cmp	r7, #25
 801f630:	d804      	bhi.n	801f63c <_strtoul_l.isra.0+0xb4>
 801f632:	3c57      	subs	r4, #87	; 0x57
 801f634:	e7dc      	b.n	801f5f0 <_strtoul_l.isra.0+0x68>
 801f636:	f04f 33ff 	mov.w	r3, #4294967295
 801f63a:	e7e5      	b.n	801f608 <_strtoul_l.isra.0+0x80>
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	da09      	bge.n	801f654 <_strtoul_l.isra.0+0xcc>
 801f640:	2322      	movs	r3, #34	; 0x22
 801f642:	f8c8 3000 	str.w	r3, [r8]
 801f646:	f04f 30ff 	mov.w	r0, #4294967295
 801f64a:	f1ba 0f00 	cmp.w	sl, #0
 801f64e:	d107      	bne.n	801f660 <_strtoul_l.isra.0+0xd8>
 801f650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f654:	b101      	cbz	r1, 801f658 <_strtoul_l.isra.0+0xd0>
 801f656:	4240      	negs	r0, r0
 801f658:	f1ba 0f00 	cmp.w	sl, #0
 801f65c:	d0f8      	beq.n	801f650 <_strtoul_l.isra.0+0xc8>
 801f65e:	b10b      	cbz	r3, 801f664 <_strtoul_l.isra.0+0xdc>
 801f660:	f105 39ff 	add.w	r9, r5, #4294967295
 801f664:	f8ca 9000 	str.w	r9, [sl]
 801f668:	e7f2      	b.n	801f650 <_strtoul_l.isra.0+0xc8>
 801f66a:	2430      	movs	r4, #48	; 0x30
 801f66c:	2e00      	cmp	r6, #0
 801f66e:	d1b0      	bne.n	801f5d2 <_strtoul_l.isra.0+0x4a>
 801f670:	2608      	movs	r6, #8
 801f672:	e7ae      	b.n	801f5d2 <_strtoul_l.isra.0+0x4a>
 801f674:	2c30      	cmp	r4, #48	; 0x30
 801f676:	d0a4      	beq.n	801f5c2 <_strtoul_l.isra.0+0x3a>
 801f678:	260a      	movs	r6, #10
 801f67a:	e7aa      	b.n	801f5d2 <_strtoul_l.isra.0+0x4a>

0801f67c <_strtoul_r>:
 801f67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f67e:	4c06      	ldr	r4, [pc, #24]	; (801f698 <_strtoul_r+0x1c>)
 801f680:	4d06      	ldr	r5, [pc, #24]	; (801f69c <_strtoul_r+0x20>)
 801f682:	6824      	ldr	r4, [r4, #0]
 801f684:	6a24      	ldr	r4, [r4, #32]
 801f686:	2c00      	cmp	r4, #0
 801f688:	bf08      	it	eq
 801f68a:	462c      	moveq	r4, r5
 801f68c:	9400      	str	r4, [sp, #0]
 801f68e:	f7ff ff7b 	bl	801f588 <_strtoul_l.isra.0>
 801f692:	b003      	add	sp, #12
 801f694:	bd30      	pop	{r4, r5, pc}
 801f696:	bf00      	nop
 801f698:	200004b8 	.word	0x200004b8
 801f69c:	20000580 	.word	0x20000580

0801f6a0 <strtoul>:
 801f6a0:	4b08      	ldr	r3, [pc, #32]	; (801f6c4 <strtoul+0x24>)
 801f6a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f6a4:	681c      	ldr	r4, [r3, #0]
 801f6a6:	4d08      	ldr	r5, [pc, #32]	; (801f6c8 <strtoul+0x28>)
 801f6a8:	6a23      	ldr	r3, [r4, #32]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	bf08      	it	eq
 801f6ae:	462b      	moveq	r3, r5
 801f6b0:	9300      	str	r3, [sp, #0]
 801f6b2:	4613      	mov	r3, r2
 801f6b4:	460a      	mov	r2, r1
 801f6b6:	4601      	mov	r1, r0
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	f7ff ff65 	bl	801f588 <_strtoul_l.isra.0>
 801f6be:	b003      	add	sp, #12
 801f6c0:	bd30      	pop	{r4, r5, pc}
 801f6c2:	bf00      	nop
 801f6c4:	200004b8 	.word	0x200004b8
 801f6c8:	20000580 	.word	0x20000580

0801f6cc <__submore>:
 801f6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6d0:	460c      	mov	r4, r1
 801f6d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f6d8:	4299      	cmp	r1, r3
 801f6da:	d11d      	bne.n	801f718 <__submore+0x4c>
 801f6dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f6e0:	f7fd ff28 	bl	801d534 <_malloc_r>
 801f6e4:	b918      	cbnz	r0, 801f6ee <__submore+0x22>
 801f6e6:	f04f 30ff 	mov.w	r0, #4294967295
 801f6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f6f2:	63a3      	str	r3, [r4, #56]	; 0x38
 801f6f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f6f8:	6360      	str	r0, [r4, #52]	; 0x34
 801f6fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f6fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f702:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f706:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f70a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f70e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f712:	6020      	str	r0, [r4, #0]
 801f714:	2000      	movs	r0, #0
 801f716:	e7e8      	b.n	801f6ea <__submore+0x1e>
 801f718:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f71a:	0077      	lsls	r7, r6, #1
 801f71c:	463a      	mov	r2, r7
 801f71e:	f7fe ff77 	bl	801e610 <_realloc_r>
 801f722:	4605      	mov	r5, r0
 801f724:	2800      	cmp	r0, #0
 801f726:	d0de      	beq.n	801f6e6 <__submore+0x1a>
 801f728:	eb00 0806 	add.w	r8, r0, r6
 801f72c:	4601      	mov	r1, r0
 801f72e:	4632      	mov	r2, r6
 801f730:	4640      	mov	r0, r8
 801f732:	f7fd fc0a 	bl	801cf4a <memcpy>
 801f736:	f8c4 8000 	str.w	r8, [r4]
 801f73a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f73e:	e7e9      	b.n	801f714 <__submore+0x48>

0801f740 <__ascii_wctomb>:
 801f740:	b149      	cbz	r1, 801f756 <__ascii_wctomb+0x16>
 801f742:	2aff      	cmp	r2, #255	; 0xff
 801f744:	bf85      	ittet	hi
 801f746:	238a      	movhi	r3, #138	; 0x8a
 801f748:	6003      	strhi	r3, [r0, #0]
 801f74a:	700a      	strbls	r2, [r1, #0]
 801f74c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f750:	bf98      	it	ls
 801f752:	2001      	movls	r0, #1
 801f754:	4770      	bx	lr
 801f756:	4608      	mov	r0, r1
 801f758:	4770      	bx	lr

0801f75a <__env_lock>:
 801f75a:	4770      	bx	lr

0801f75c <__env_unlock>:
 801f75c:	4770      	bx	lr
	...

0801f760 <_fstat_r>:
 801f760:	b538      	push	{r3, r4, r5, lr}
 801f762:	4c07      	ldr	r4, [pc, #28]	; (801f780 <_fstat_r+0x20>)
 801f764:	2300      	movs	r3, #0
 801f766:	4605      	mov	r5, r0
 801f768:	4608      	mov	r0, r1
 801f76a:	4611      	mov	r1, r2
 801f76c:	6023      	str	r3, [r4, #0]
 801f76e:	f7e4 faa9 	bl	8003cc4 <_fstat>
 801f772:	1c43      	adds	r3, r0, #1
 801f774:	d102      	bne.n	801f77c <_fstat_r+0x1c>
 801f776:	6823      	ldr	r3, [r4, #0]
 801f778:	b103      	cbz	r3, 801f77c <_fstat_r+0x1c>
 801f77a:	602b      	str	r3, [r5, #0]
 801f77c:	bd38      	pop	{r3, r4, r5, pc}
 801f77e:	bf00      	nop
 801f780:	20033bd8 	.word	0x20033bd8

0801f784 <_isatty_r>:
 801f784:	b538      	push	{r3, r4, r5, lr}
 801f786:	4c06      	ldr	r4, [pc, #24]	; (801f7a0 <_isatty_r+0x1c>)
 801f788:	2300      	movs	r3, #0
 801f78a:	4605      	mov	r5, r0
 801f78c:	4608      	mov	r0, r1
 801f78e:	6023      	str	r3, [r4, #0]
 801f790:	f7e4 fa9e 	bl	8003cd0 <_isatty>
 801f794:	1c43      	adds	r3, r0, #1
 801f796:	d102      	bne.n	801f79e <_isatty_r+0x1a>
 801f798:	6823      	ldr	r3, [r4, #0]
 801f79a:	b103      	cbz	r3, 801f79e <_isatty_r+0x1a>
 801f79c:	602b      	str	r3, [r5, #0]
 801f79e:	bd38      	pop	{r3, r4, r5, pc}
 801f7a0:	20033bd8 	.word	0x20033bd8

0801f7a4 <memmove>:
 801f7a4:	4288      	cmp	r0, r1
 801f7a6:	b510      	push	{r4, lr}
 801f7a8:	eb01 0302 	add.w	r3, r1, r2
 801f7ac:	d807      	bhi.n	801f7be <memmove+0x1a>
 801f7ae:	1e42      	subs	r2, r0, #1
 801f7b0:	4299      	cmp	r1, r3
 801f7b2:	d00a      	beq.n	801f7ca <memmove+0x26>
 801f7b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f7b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f7bc:	e7f8      	b.n	801f7b0 <memmove+0xc>
 801f7be:	4283      	cmp	r3, r0
 801f7c0:	d9f5      	bls.n	801f7ae <memmove+0xa>
 801f7c2:	1881      	adds	r1, r0, r2
 801f7c4:	1ad2      	subs	r2, r2, r3
 801f7c6:	42d3      	cmn	r3, r2
 801f7c8:	d100      	bne.n	801f7cc <memmove+0x28>
 801f7ca:	bd10      	pop	{r4, pc}
 801f7cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f7d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f7d4:	e7f7      	b.n	801f7c6 <memmove+0x22>

0801f7d6 <_malloc_usable_size_r>:
 801f7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f7da:	1f18      	subs	r0, r3, #4
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	bfbc      	itt	lt
 801f7e0:	580b      	ldrlt	r3, [r1, r0]
 801f7e2:	18c0      	addlt	r0, r0, r3
 801f7e4:	4770      	bx	lr
	...

0801f7e8 <_init>:
 801f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7ea:	bf00      	nop
 801f7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f7ee:	bc08      	pop	{r3}
 801f7f0:	469e      	mov	lr, r3
 801f7f2:	4770      	bx	lr

0801f7f4 <_fini>:
 801f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7f6:	bf00      	nop
 801f7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f7fa:	bc08      	pop	{r3}
 801f7fc:	469e      	mov	lr, r3
 801f7fe:	4770      	bx	lr


my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a5c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d64c  0802a7c8  0802a7c8  0003a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047e14  08047e14  000606d4  2**0
                  CONTENTS
  4 .ARM          00000008  08047e14  08047e14  00057e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08047e1c  08047e1c  000606d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08047e1c  08047e1c  00057e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047e20  08047e20  00057e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d4  20000000  08047e24  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002fa34  200006d8  080484f8  000606d8  2**3
                  ALLOC
 10 ._user_heap_stack 0001e804  2003010c  080484f8  0007010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000920bd  00000000  00000000  00060702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013705  00000000  00000000  000f27bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00053dc7  00000000  00000000  00105ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037c8  00000000  00000000  00159c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009990  00000000  00000000  0015d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049d65  00000000  00000000  00166de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00092d6b  00000000  00000000  001b0b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a68f  00000000  00000000  002438b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0037df47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d88c  00000000  00000000  0037df98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006d8 	.word	0x200006d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0802a7b0 	.word	0x0802a7b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006dc 	.word	0x200006dc
 800023c:	0802a7b0 	.word	0x0802a7b0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000708 	.word	0x20000708
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	20000788 	.word	0x20000788

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	20000708 	.word	0x20000708
 8000708:	40000c00 	.word	0x40000c00
 800070c:	20000788 	.word	0x20000788

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f026 f8b2 	bl	802688c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f009 b85d 	b.w	80097ec <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802a9f4 	.word	0x0802a9f4

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219b      	movs	r1, #155	; 0x9b
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f005 f8e6 	bl	8005924 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219d      	movs	r1, #157	; 0x9d
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f005 f8da 	bl	8005924 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f00a f925 	bl	800aa70 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219c      	movs	r1, #156	; 0x9c
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f005 f864 	bl	8005924 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	0802aa0c 	.word	0x0802aa0c
 800086c:	20000298 	.word	0x20000298
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <ADC_Conv_complete+0x200>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <ADC_Conv_complete+0x204>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4980      	ldr	r1, [pc, #512]	; (8000a94 <ADC_Conv_complete+0x208>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ADC_Conv_complete+0x20c>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4880      	ldr	r0, [pc, #512]	; (8000a9c <ADC_Conv_complete+0x210>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681c      	ldr	r4, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ADC_Conv_complete+0x214>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7815      	ldrb	r5, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f504 64b8 	addeq.w	r4, r4, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60e3      	str	r3, [r4, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	022b      	lsls	r3, r5, #8
 80008b6:	9505      	str	r5, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460d      	mov	r5, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <ADC_Conv_complete+0x218>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a1      	str	r1, [r4, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8000af4 <ADC_Conv_complete+0x268>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	6063      	str	r3, [r4, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8d9 3000 	ldr.w	r3, [r9]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c9 3000 	str.w	r3, [r9]
	if (sigsuppress) {
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03c      	beq.n	8000972 <ADC_Conv_complete+0xe6>
		sigsend = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c9 3000 	str.w	r3, [r9]
	if (sigsend) {
 80008fe:	f8d9 3000 	ldr.w	r3, [r9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d02c      	beq.n	8000960 <ADC_Conv_complete+0xd4>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <ADC_Conv_complete+0x220>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f000 809d 	beq.w	8000a4a <ADC_Conv_complete+0x1be>
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <ADC_Conv_complete+0x208>)
		sigprev = 1;	// remember this trigger for next packet
 8000912:	2101      	movs	r1, #1
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000914:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000916:	6019      	str	r1, [r3, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000918:	440a      	add	r2, r1
		ledhang = 15;		// 15 x 10ms in Idle proc
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <ADC_Conv_complete+0x224>)
 800091c:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 800091e:	67c2      	str	r2, [r0, #124]	; 0x7c
		ledhang = 15;		// 15 x 10ms in Idle proc
 8000920:	6019      	str	r1, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000922:	4a64      	ldr	r2, [pc, #400]	; (8000ab4 <ADC_Conv_complete+0x228>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	d10b      	bne.n	8000948 <ADC_Conv_complete+0xbc>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <ADC_Conv_complete+0x22c>)
		adcbgbaseacc = 0;
 8000932:	2000      	movs	r0, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000934:	4d61      	ldr	r5, [pc, #388]	; (8000abc <ADC_Conv_complete+0x230>)
 8000936:	680b      	ldr	r3, [r1, #0]
		samplecnt = 0;
 8000938:	6010      	str	r0, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4c60      	ldr	r4, [pc, #384]	; (8000ac0 <ADC_Conv_complete+0x234>)
		adcbgbaseacc = 0;
 800093e:	6008      	str	r0, [r1, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000940:	fba5 2303 	umull	r2, r3, r5, r3
 8000944:	0b9b      	lsrs	r3, r3, #14
 8000946:	6023      	str	r3, [r4, #0]
	if (xTaskToNotify == NULL) {
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <ADC_Conv_complete+0x238>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	f000 8097 	beq.w	8000a80 <ADC_Conv_complete+0x1f4>
	} else if (sigsend) {
 8000952:	f8d9 2000 	ldr.w	r2, [r9]
 8000956:	2a00      	cmp	r2, #0
 8000958:	d17c      	bne.n	8000a54 <ADC_Conv_complete+0x1c8>
}
 800095a:	b007      	add	sp, #28
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ADC_Conv_complete+0x220>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	b112      	cbz	r2, 800096c <ADC_Conv_complete+0xe0>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <ADC_Conv_complete+0x23c>)
 8000968:	2101      	movs	r1, #1
 800096a:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7d7      	b.n	8000922 <ADC_Conv_complete+0x96>
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	469c      	mov	ip, r3
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <ADC_Conv_complete+0x240>)
 8000976:	340e      	adds	r4, #14
 8000978:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000af8 <ADC_Conv_complete+0x26c>
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <ADC_Conv_complete+0x244>)
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <ADC_Conv_complete+0x248>)
 8000984:	f8cd c010 	str.w	ip, [sp, #16]
 8000988:	881b      	ldrh	r3, [r3, #0]
				pretrigcnt++;
 800098a:	9400      	str	r4, [sp, #0]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <ADC_Conv_complete+0x250>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <ADC_Conv_complete+0x254>)
 800099c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <ADC_Conv_complete+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	9301      	str	r3, [sp, #4]
			lastmeanwindiff = abs(meanwindiff);
 80009a6:	2900      	cmp	r1, #0
			thissamp = (*adcbuf16)[i];
 80009a8:	9c00      	ldr	r4, [sp, #0]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009aa:	f00c 0a1f 	and.w	sl, ip, #31
			if (sigsend)
 80009ae:	f8d9 b000 	ldr.w	fp, [r9]
			lastmeanwindiff = abs(meanwindiff);
 80009b2:	bfb8      	it	lt
 80009b4:	4249      	neglt	r1, r1
			thissamp = (*adcbuf16)[i];
 80009b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 80009ba:	f10c 0c01 	add.w	ip, ip, #1
			lastmeanwindiff = abs(meanwindiff);
 80009be:	b28e      	uxth	r6, r1
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c0:	9903      	ldr	r1, [sp, #12]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009c2:	4418      	add	r0, r3
			adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80009c4:	441d      	add	r5, r3
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c6:	eb06 0e01 	add.w	lr, r6, r1
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009ca:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
			lastsamp[j] = thissamp;			// save last samples
 80009ce:	f828 301a 	strh.w	r3, [r8, sl, lsl #1]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009d2:	1a40      	subs	r0, r0, r1
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009d4:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
			thissamp = (*adcbuf16)[i];
 80009d8:	9400      	str	r4, [sp, #0]
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009da:	1a52      	subs	r2, r2, r1
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009dc:	f340 114f 	sbfx	r1, r0, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009e0:	9c02      	ldr	r4, [sp, #8]
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009e2:	1a5b      	subs	r3, r3, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009ea:	441a      	add	r2, r3
			meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 80009ec:	f342 114f 	sbfx	r1, r2, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
			windiff[j] = meanwindiff;	// store latest window mean of differences
 80009f4:	f847 102a 	str.w	r1, [r7, sl, lsl #2]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	eb03 0a04 	add.w	sl, r3, r4
 8000a02:	45f2      	cmp	sl, lr
 8000a04:	dd04      	ble.n	8000a10 <ADC_Conv_complete+0x184>
				pretrigcnt++;
 8000a06:	9c01      	ldr	r4, [sp, #4]
 8000a08:	3401      	adds	r4, #1
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	9404      	str	r4, [sp, #16]
			if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000a10:	4573      	cmp	r3, lr
 8000a12:	dd05      	ble.n	8000a20 <ADC_Conv_complete+0x194>
 8000a14:	f1bb 0f00 	cmp.w	fp, #0
 8000a18:	d102      	bne.n	8000a20 <ADC_Conv_complete+0x194>
				sigsend = 1; // the real trigger
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c9 3000 	str.w	r3, [r9]
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000a20:	f5bc 7f36 	cmp.w	ip, #728	; 0x2d8
 8000a24:	d1bf      	bne.n	80009a6 <ADC_Conv_complete+0x11a>
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <ADC_Conv_complete+0x250>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <ADC_Conv_complete+0x254>)
 8000a34:	8019      	strh	r1, [r3, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <ADC_Conv_complete+0x25c>)
 8000a38:	801e      	strh	r6, [r3, #0]
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af5e 	beq.w	80008fe <ADC_Conv_complete+0x72>
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <ADC_Conv_complete+0x258>)
 8000a44:	9a01      	ldr	r2, [sp, #4]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e759      	b.n	80008fe <ADC_Conv_complete+0x72>
			++adcbatchid; // start a new adc batch number
 8000a4a:	9a05      	ldr	r2, [sp, #20]
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	700a      	strb	r2, [r1, #0]
 8000a52:	e75d      	b.n	8000910 <ADC_Conv_complete+0x84>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a54:	4c25      	ldr	r4, [pc, #148]	; (8000aec <ADC_Conv_complete+0x260>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f017 fcd7 	bl	801840c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f43f af7a 	beq.w	800095a <ADC_Conv_complete+0xce>
 8000a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	b007      	add	sp, #28
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <ADC_Conv_complete+0x264>)
}
 8000a82:	b007      	add	sp, #28
 8000a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a88:	f025 bf00 	b.w	802688c <puts>
 8000a8c:	20000708 	.word	0x20000708
 8000a90:	200006f4 	.word	0x200006f4
 8000a94:	20003014 	.word	0x20003014
 8000a98:	20000764 	.word	0x20000764
 8000a9c:	20000704 	.word	0x20000704
 8000aa0:	20000788 	.word	0x20000788
 8000aa4:	2000076c 	.word	0x2000076c
 8000aa8:	20000780 	.word	0x20000780
 8000aac:	20000778 	.word	0x20000778
 8000ab0:	2000075c 	.word	0x2000075c
 8000ab4:	20000770 	.word	0x20000770
 8000ab8:	200006f8 	.word	0x200006f8
 8000abc:	16816817 	.word	0x16816817
 8000ac0:	2000070c 	.word	0x2000070c
 8000ac4:	20000818 	.word	0x20000818
 8000ac8:	20000774 	.word	0x20000774
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000790 	.word	0x20000790
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	20000810 	.word	0x20000810
 8000adc:	2000078c 	.word	0x2000078c
 8000ae0:	20000760 	.word	0x20000760
 8000ae4:	20000768 	.word	0x20000768
 8000ae8:	20000718 	.word	0x20000718
 8000aec:	20000814 	.word	0x20000814
 8000af0:	0802aa24 	.word	0x0802aa24
 8000af4:	2000077c 	.word	0x2000077c
 8000af8:	2000071c 	.word	0x2000071c

08000afc <startadc>:

void startadc() {
 8000afc:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000afe:	492b      	ldr	r1, [pc, #172]	; (8000bac <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000b00:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000b06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b08:	4d2b      	ldr	r5, [pc, #172]	; (8000bb8 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000b0e:	f025 febd 	bl	802688c <puts>
	osDelay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f015 fda0 	bl	8016658 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b18:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000b1c:	f018 f964 	bl	8018de8 <pvPortMalloc>
 8000b20:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d03d      	beq.n	8000ba2 <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000b26:	0783      	lsls	r3, r0, #30
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d128      	bne.n	8000b7e <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b2c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b30:	2155      	movs	r1, #85	; 0x55
 8000b32:	4620      	mov	r0, r4
 8000b34:	f024 fe70 	bl	8025818 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b38:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b3c:	21aa      	movs	r1, #170	; 0xaa
 8000b3e:	18a0      	adds	r0, r4, r2
 8000b40:	f024 fe6a 	bl	8025818 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b44:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b4a:	f104 0110 	add.w	r1, r4, #16
 8000b4e:	4c1c      	ldr	r4, [pc, #112]	; (8000bc0 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b50:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b54:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b58:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b5a:	f7ff fded 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <startadc+0xcc>)
 8000b60:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b64:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b66:	f008 fd93 	bl	8009690 <HAL_ADC_Start>
 8000b6a:	b9b0      	cbnz	r0, 8000b9a <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <startadc+0xd4>)
 8000b6e:	f008 fd8f 	bl	8009690 <HAL_ADC_Start>
 8000b72:	b970      	cbnz	r0, 8000b92 <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <startadc+0xc8>)
 8000b76:	f008 fd8b 	bl	8009690 <HAL_ADC_Start>
 8000b7a:	b928      	cbnz	r0, 8000b88 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <startadc+0xd8>)
 8000b80:	f025 fe84 	bl	802688c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b84:	682c      	ldr	r4, [r5, #0]
 8000b86:	e7d1      	b.n	8000b2c <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <startadc+0xdc>)
}
 8000b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b8e:	f025 be7d 	b.w	802688c <puts>
		printf("ADC2 failed start\r\n");
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <startadc+0xe0>)
 8000b94:	f025 fe7a 	bl	802688c <puts>
 8000b98:	e7ec      	b.n	8000b74 <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <startadc+0xe4>)
 8000b9c:	f025 fe76 	bl	802688c <puts>
 8000ba0:	e7e4      	b.n	8000b6c <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <startadc+0xe8>)
 8000ba4:	f025 fe72 	bl	802688c <puts>
		for (;;)
 8000ba8:	e7fe      	b.n	8000ba8 <startadc+0xac>
 8000baa:	bf00      	nop
 8000bac:	066ff300 	.word	0x066ff300
 8000bb0:	20003014 	.word	0x20003014
 8000bb4:	0802aa38 	.word	0x0802aa38
 8000bb8:	20000764 	.word	0x20000764
 8000bbc:	20000700 	.word	0x20000700
 8000bc0:	200006fc 	.word	0x200006fc
 8000bc4:	20002174 	.word	0x20002174
 8000bc8:	20000705 	.word	0x20000705
 8000bcc:	20002204 	.word	0x20002204
 8000bd0:	200021bc 	.word	0x200021bc
 8000bd4:	0802aa74 	.word	0x0802aa74
 8000bd8:	0802aad4 	.word	0x0802aad4
 8000bdc:	0802aac0 	.word	0x0802aac0
 8000be0:	0802aaac 	.word	0x0802aaac
 8000be4:	0802aa4c 	.word	0x0802aa4c

08000be8 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000be8:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bea:	b169      	cbz	r1, 8000c08 <xcrc32+0x20>
 8000bec:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bf2:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bf6:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bfa:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000c04:	d1f5      	bne.n	8000bf2 <xcrc32+0xa>
 8000c06:	4770      	bx	lr
  unsigned int crc = init;
 8000c08:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000c0a:	4770      	bx	lr
 8000c0c:	0802aae8 	.word	0x0802aae8

08000c10 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000c10:	b500      	push	{lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000c14:	4668      	mov	r0, sp
 8000c16:	f00b fdb7 	bl	800c788 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <stampboot+0x7c>)
 8000c1c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000c24:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c26:	d01b      	beq.n	8000c60 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c28:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c2c:	d015      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c2e:	f00b fbc7 	bl	800c3c0 <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c32:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c3a:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c3c:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c3e:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c40:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c42:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c46:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c48:	f00b fcc6 	bl	800c5d8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c4c:	b9c0      	cbnz	r0, 8000c80 <stampboot+0x70>
			printf("stampboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c4e:	f00b fbd3 	bl	800c3f8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c52:	b980      	cbnz	r0, 8000c76 <stampboot+0x66>
			printf("stampboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <stampboot+0x80>)
 8000c56:	f025 fe19 	bl	802688c <puts>
	}
}
 8000c5a:	b009      	add	sp, #36	; 0x24
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d0f9      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c66:	f00b fbab 	bl	800c3c0 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c6e:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c72:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c74:	e7e2      	b.n	8000c3c <stampboot+0x2c>
			printf("stampboot: failed to OBLaunch %d\n", res);
 8000c76:	4601      	mov	r1, r0
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <stampboot+0x84>)
 8000c7a:	f025 fd6b 	bl	8026754 <iprintf>
 8000c7e:	e7e9      	b.n	8000c54 <stampboot+0x44>
			printf("stampboot: failed to OBProgram %d\n", res);
 8000c80:	4601      	mov	r1, r0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <stampboot+0x88>)
 8000c84:	f025 fd66 	bl	8026754 <iprintf>
 8000c88:	e7e1      	b.n	8000c4e <stampboot+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	08000c11 	.word	0x08000c11
 8000c90:	0802af30 	.word	0x0802af30
 8000c94:	0802af0c 	.word	0x0802af0c
 8000c98:	0802aee8 	.word	0x0802aee8

08000c9c <printflasherr>:
void printflasherr() {
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c9e:	4d1e      	ldr	r5, [pc, #120]	; (8000d18 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000ca0:	4f1e      	ldr	r7, [pc, #120]	; (8000d1c <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000ca2:	4e1f      	ldr	r6, [pc, #124]	; (8000d20 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000ca4:	f00b fbd6 	bl	800c454 <HAL_FLASH_GetError>
	switch (err) {
 8000ca8:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000caa:	4604      	mov	r4, r0
	switch (err) {
 8000cac:	2b1e      	cmp	r3, #30
 8000cae:	d811      	bhi.n	8000cd4 <printflasherr+0x38>
 8000cb0:	e8df f003 	tbb	[pc, r3]
 8000cb4:	102f102b 	.word	0x102f102b
 8000cb8:	102d1010 	.word	0x102d1010
 8000cbc:	10101010 	.word	0x10101010
 8000cc0:	10291010 	.word	0x10291010
 8000cc4:	10101010 	.word	0x10101010
 8000cc8:	10101010 	.word	0x10101010
 8000ccc:	10101010 	.word	0x10101010
 8000cd0:	1010      	.short	0x1010
 8000cd2:	1d          	.byte	0x1d
 8000cd3:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <printflasherr+0x88>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f025 ff25 	bl	8026b28 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <printflasherr+0x8c>)
 8000ce2:	f025 fd37 	bl	8026754 <iprintf>
	res = HAL_FLASH_Lock();
 8000ce6:	f00b fb61 	bl	800c3ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cea:	b940      	cbnz	r0, 8000cfe <printflasherr+0x62>
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cee:	490f      	ldr	r1, [pc, #60]	; (8000d2c <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f025 fd2f 	bl	8026754 <iprintf>
	res = HAL_FLASH_Lock();
 8000cf6:	f00b fb59 	bl	800c3ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f6      	beq.n	8000cec <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printflasherr+0x94>)
 8000d00:	f025 fdc4 	bl	802688c <puts>
		printflasherr();
 8000d04:	e7ce      	b.n	8000ca4 <printflasherr+0x8>
		msg = "Write Protected";
 8000d06:	490b      	ldr	r1, [pc, #44]	; (8000d34 <printflasherr+0x98>)
		break;
 8000d08:	e7f2      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7f0      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Programming alignment";
 8000d0e:	4639      	mov	r1, r7
 8000d10:	e7ee      	b.n	8000cf0 <printflasherr+0x54>
	switch (err) {
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <printflasherr+0x9c>)
 8000d14:	e7ec      	b.n	8000cf0 <printflasherr+0x54>
 8000d16:	bf00      	nop
 8000d18:	0802afec 	.word	0x0802afec
 8000d1c:	0802af78 	.word	0x0802af78
 8000d20:	0802af64 	.word	0x0802af64
 8000d24:	0802afb8 	.word	0x0802afb8
 8000d28:	0802afcc 	.word	0x0802afcc
 8000d2c:	0802af58 	.word	0x0802af58
 8000d30:	0802b010 	.word	0x0802b010
 8000d34:	0802af90 	.word	0x0802af90
 8000d38:	0802afa0 	.word	0x0802afa0

08000d3c <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d3e:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d40:	4605      	mov	r5, r0
 8000d42:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d44:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4c:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	2002      	movs	r0, #2
 8000d54:	f00b fbb0 	bl	800c4b8 <HAL_FLASH_Program>
 8000d58:	b990      	cbnz	r0, 8000d80 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d68:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d100      	bne.n	8000d72 <WriteFlashWord.part.0+0x36>
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d72:	4632      	mov	r2, r6
 8000d74:	4629      	mov	r1, r5
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <WriteFlashWord.part.0+0x70>)
 8000d78:	f025 fcec 	bl	8026754 <iprintf>
		return (HAL_ERROR);
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d80:	f7ff ff8c 	bl	8000c9c <printflasherr>
			printflasherr();
 8000d84:	f7ff ff8a 	bl	8000c9c <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <WriteFlashWord.part.0+0x74>)
 8000d8e:	f025 fce1 	bl	8026754 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d92:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d94:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9a:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	0802b080 	.word	0x0802b080
 8000db0:	0802b050 	.word	0x0802b050

08000db4 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000dba:	f00b fae3 	bl	800c384 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d14f      	bne.n	8000e62 <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dc2:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dc6:	4d34      	ldr	r5, [pc, #208]	; (8000e98 <EraseFlash+0xe4>)
 8000dc8:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dca:	4626      	mov	r6, r4
 8000dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dd0:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dd2:	d041      	beq.n	8000e58 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000dda:	4930      	ldr	r1, [pc, #192]	; (8000e9c <EraseFlash+0xe8>)
 8000ddc:	1f23      	subs	r3, r4, #4
 8000dde:	4421      	add	r1, r4
 8000de0:	e001      	b.n	8000de6 <EraseFlash+0x32>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d006      	beq.n	8000df4 <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000de6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dea:	3201      	adds	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <EraseFlash+0x2e>
	if ((dirty) && (noterased)) {
 8000dee:	4f2c      	ldr	r7, [pc, #176]	; (8000ea0 <EraseFlash+0xec>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b92b      	cbnz	r3, 8000e00 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <EraseFlash+0xf0>)
 8000df6:	f025 fd49 	bl	802688c <puts>
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f015 fc28 	bl	8016658 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <EraseFlash+0xf4>)
 8000e0a:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000e0e:	f025 fca1 	bl	8026754 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e16:	a901      	add	r1, sp, #4
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e1a:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e22:	f00b fd1d 	bl	800c860 <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000e26:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e28:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e2a:	1c48      	adds	r0, r1, #1
 8000e2c:	d12d      	bne.n	8000e8a <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e2e:	bb25      	cbnz	r5, 8000e7a <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <EraseFlash+0xf8>)
 8000e32:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e36:	f025 fd29 	bl	802688c <puts>
			noterased = 0;
 8000e3a:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e3c:	e001      	b.n	8000e42 <EraseFlash+0x8e>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d0db      	beq.n	8000dfa <EraseFlash+0x46>
 8000e42:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e44:	3604      	adds	r6, #4
 8000e46:	680b      	ldr	r3, [r1, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <EraseFlash+0x8a>
				noterased = 1;
 8000e4c:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <EraseFlash+0xfc>)
				noterased = 1;
 8000e50:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e52:	f025 fc7f 	bl	8026754 <iprintf>
 8000e56:	e7d0      	b.n	8000dfa <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e60:	e7bb      	b.n	8000dda <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e62:	4601      	mov	r1, r0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <EraseFlash+0x100>)
 8000e66:	f025 fc75 	bl	8026754 <iprintf>
		printflasherr();
 8000e6a:	f7ff ff17 	bl	8000c9c <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <EraseFlash+0x104>)
 8000e70:	f025 fd0c 	bl	802688c <puts>
		printflasherr();
 8000e74:	f7ff ff12 	bl	8000c9c <printflasherr>
 8000e78:	e7a3      	b.n	8000dc2 <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EraseFlash+0x108>)
 8000e7c:	f025 fd06 	bl	802688c <puts>
			printflasherr();
 8000e80:	f7ff ff0c 	bl	8000c9c <printflasherr>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <EraseFlash+0x10c>)
 8000e8c:	f025 fc62 	bl	8026754 <iprintf>
		if (res != HAL_OK) {
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d0cd      	beq.n	8000e30 <EraseFlash+0x7c>
 8000e94:	e7f1      	b.n	8000e7a <EraseFlash+0xc6>
 8000e96:	bf00      	nop
 8000e98:	2000081c 	.word	0x2000081c
 8000e9c:	0007fffc 	.word	0x0007fffc
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	0802b15c 	.word	0x0802b15c
 8000ea8:	0802b0dc 	.word	0x0802b0dc
 8000eac:	0802b140 	.word	0x0802b140
 8000eb0:	0802b174 	.word	0x0802b174
 8000eb4:	0802b02c 	.word	0x0802b02c
 8000eb8:	0802b0c0 	.word	0x0802b0c0
 8000ebc:	0802b12c 	.word	0x0802b12c
 8000ec0:	0802b104 	.word	0x0802b104

08000ec4 <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000ec4:	b500      	push	{lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f00b fc5d 	bl	800c788 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ece:	f00b fa77 	bl	800c3c0 <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d008      	beq.n	8000eec <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	d009      	beq.n	8000ef8 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ee4:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ee6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000eea:	e007      	b.n	8000efc <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ef2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ef6:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000efc:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000efe:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000f00:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000f02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000f06:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000f08:	f00b fb66 	bl	800c5d8 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000f0c:	b990      	cbnz	r0, 8000f34 <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000f0e:	f00b fa73 	bl	800c3f8 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000f12:	b950      	cbnz	r0, 8000f2a <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("swapping boot....\n");
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <swapboot+0x7c>)
 8000f16:	f025 fcb9 	bl	802688c <puts>
	HAL_FLASH_OB_Lock();
 8000f1a:	f00b fa63 	bl	800c3e4 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <swapboot+0x80>)
 8000f20:	f025 fcb4 	bl	802688c <puts>
}
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <swapboot+0x84>)
 8000f2e:	f025 fc11 	bl	8026754 <iprintf>
 8000f32:	e7ef      	b.n	8000f14 <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f34:	4601      	mov	r1, r0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <swapboot+0x88>)
 8000f38:	f025 fc0c 	bl	8026754 <iprintf>
 8000f3c:	e7e7      	b.n	8000f0e <swapboot+0x4a>
 8000f3e:	bf00      	nop
 8000f40:	0802b21c 	.word	0x0802b21c
 8000f44:	0802b230 	.word	0x0802b230
 8000f48:	0802b1f8 	.word	0x0802b1f8
 8000f4c:	0802b1d4 	.word	0x0802b1d4

08000f50 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f50:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f52:	4d10      	ldr	r5, [pc, #64]	; (8000f94 <flash_writeword+0x44>)
 8000f54:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f56:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f5a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f5e:	d20a      	bcs.n	8000f76 <flash_writeword+0x26>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fee9 	bl	8000d3c <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f6a:	b938      	cbnz	r0, 8000f7c <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f6c:	6829      	ldr	r1, [r5, #0]
 8000f6e:	680b      	ldr	r3, [r1, #0]
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d109      	bne.n	8000f88 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <flash_writeword+0x48>)
 8000f78:	f025 fc88 	bl	802688c <puts>
		printf("memwrite: WriteFlash error\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <flash_writeword+0x4c>)
 8000f7e:	f025 fc85 	bl	802688c <puts>
		return (-1);
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <flash_writeword+0x50>)
 8000f8a:	f025 fbe3 	bl	8026754 <iprintf>
		return (-1);
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	2000085c 	.word	0x2000085c
 8000f98:	0802b1b0 	.word	0x0802b1b0
 8000f9c:	0802b240 	.word	0x0802b240
 8000fa0:	0802b25c 	.word	0x0802b25c

08000fa4 <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000fa8:	4e49      	ldr	r6, [pc, #292]	; (80010d0 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000faa:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (noterased)) {
 8000fac:	4949      	ldr	r1, [pc, #292]	; (80010d4 <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fae:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000fb0:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fb2:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (noterased)) {
 8000fb4:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (noterased)) {
 8000fba:	b92f      	cbnz	r7, 8000fc8 <flash_memwrite+0x24>
 8000fbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010e4 <flash_memwrite+0x140>
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d179      	bne.n	80010bc <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d071      	beq.n	80010b0 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fd0:	4f41      	ldr	r7, [pc, #260]	; (80010d8 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000fd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010e8 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fd6:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fd8:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fda:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fdc:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fde:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fe2:	dd1a      	ble.n	800101a <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	dd16      	ble.n	800101a <flash_memwrite+0x76>
 8000fec:	2201      	movs	r2, #1
 8000fee:	4e3b      	ldr	r6, [pc, #236]	; (80010dc <flash_memwrite+0x138>)
			data >>= 8;
 8000ff0:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000ff2:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000ff4:	3201      	adds	r2, #1
			data >>= 8;
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	f103 0e01 	add.w	lr, r3, #1
 8001000:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8001004:	f8cd e000 	str.w	lr, [sp]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800100e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	4299      	cmp	r1, r3
 8001014:	dcec      	bgt.n	8000ff0 <flash_memwrite+0x4c>
 8001016:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 800101a:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800101e:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8001020:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4419      	add	r1, r3
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	1aeb      	subs	r3, r5, r3
 800102c:	4299      	cmp	r1, r3
 800102e:	d229      	bcs.n	8001084 <flash_memwrite+0xe0>
 8001030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010ec <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 8001034:	f8d8 3000 	ldr.w	r3, [r8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc10      	bgt.n	8001062 <flash_memwrite+0xbe>
			data >>= 8;
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	9100      	str	r1, [sp, #0]
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001054:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddee      	ble.n	8001040 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 8001062:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 8001064:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001068:	f7ff ff72 	bl	8000f50 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 8001072:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001076:	4402      	add	r2, r0
 8001078:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 800107a:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800107c:	429a      	cmp	r2, r3
		flash_memptr += 4;
 800107e:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001082:	d3d7      	bcc.n	8001034 <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	429d      	cmp	r5, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	d90c      	bls.n	80010a8 <flash_memwrite+0x104>
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <flash_memwrite+0x138>)
 8001090:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	5ca2      	ldrb	r2, [r4, r2]
 8001098:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 800109a:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d3f4      	bcc.n	8001092 <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 80010a8:	4628      	mov	r0, r5
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4629      	mov	r1, r5
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash_memwrite+0x13c>)
 80010b6:	f025 fb4d 	bl	8026754 <iprintf>
 80010ba:	e787      	b.n	8000fcc <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 80010bc:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010ec <flash_memwrite+0x148>
 80010c0:	f8d9 0000 	ldr.w	r0, [r9]
 80010c4:	f7ff fe76 	bl	8000db4 <EraseFlash>
		noterased = 0;
 80010c8:	f8c8 7000 	str.w	r7, [r8]
 80010cc:	e77c      	b.n	8000fc8 <flash_memwrite+0x24>
 80010ce:	bf00      	nop
 80010d0:	20000858 	.word	0x20000858
 80010d4:	20000854 	.word	0x20000854
 80010d8:	20000874 	.word	0x20000874
 80010dc:	20000864 	.word	0x20000864
 80010e0:	0802b280 	.word	0x0802b280
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000860 	.word	0x20000860
 80010ec:	2000085c 	.word	0x2000085c

080010f0 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	noterased = 1;		// now assumed dirty
	if (flash_abort) {
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <memclose+0x13c>)
	noterased = 1;		// now assumed dirty
 80010f2:	2101      	movs	r1, #1
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <memclose+0x140>)
	if (flash_abort) {
 80010f6:	6818      	ldr	r0, [r3, #0]
	noterased = 1;		// now assumed dirty
 80010f8:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d173      	bne.n	80011e6 <memclose+0xf6>
		http_downloading = NOT_LOADING;
		down_total = 0;		// unfreeze main
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <memclose+0x144>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
void* memclose() {
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	b084      	sub	sp, #16
	if (q_index > 0) {			// unfinished residual write still needed
 800110a:	dd0b      	ble.n	8001124 <memclose+0x34>
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <memclose+0x148>)
 800110e:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 8001112:	f852 3b04 	ldr.w	r3, [r2], #4
 8001116:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 8001118:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 800111a:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 800111e:	d1f8      	bne.n	8001112 <memclose+0x22>
		}
		flash_writeword(residual);
 8001120:	f7ff ff16 	bl	8000f50 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 8001124:	4e45      	ldr	r6, [pc, #276]	; (800123c <memclose+0x14c>)
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <memclose+0x150>)
 8001128:	6832      	ldr	r2, [r6, #0]
 800112a:	4d46      	ldr	r5, [pc, #280]	; (8001244 <memclose+0x154>)
 800112c:	4f46      	ldr	r7, [pc, #280]	; (8001248 <memclose+0x158>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	4845      	ldr	r0, [pc, #276]	; (800124c <memclose+0x15c>)
 8001136:	682a      	ldr	r2, [r5, #0]
 8001138:	f025 fb0c 	bl	8026754 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f015 fa8a 	bl	8016658 <osDelay>
	res = HAL_FLASH_Lock();
 8001144:	f00b f932 	bl	800c3ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8001148:	4604      	mov	r4, r0
 800114a:	2800      	cmp	r0, #0
 800114c:	d152      	bne.n	80011f4 <memclose+0x104>
		printf("eeprom: flash2 failed\n");
		down_total = 0;		// unfreeze main
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 800114e:	682b      	ldr	r3, [r5, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001154:	f8d7 8000 	ldr.w	r8, [r7]
	crc = xcrc32(base, length, xinit);
 8001158:	4619      	mov	r1, r3
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	4640      	mov	r0, r8
 800115e:	f7ff fd43 	bl	8000be8 <xcrc32>
 8001162:	4605      	mov	r5, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	4642      	mov	r2, r8
 8001168:	4839      	ldr	r0, [pc, #228]	; (8001250 <memclose+0x160>)
 800116a:	4629      	mov	r1, r5
 800116c:	f025 faf2 	bl	8026754 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <memclose+0x164>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	1c53      	adds	r3, r2, #1
 8001176:	d008      	beq.n	800118a <memclose+0x9a>
 8001178:	42aa      	cmp	r2, r5
 800117a:	d006      	beq.n	800118a <memclose+0x9a>
		printf(
 800117c:	4623      	mov	r3, r4
 800117e:	4629      	mov	r1, r5
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <memclose+0x168>)
		down_total = 0;		// unfreeze main
 8001182:	6034      	str	r4, [r6, #0]
		printf(
 8001184:	f025 fae6 	bl	8026754 <iprintf>
 8001188:	e027      	b.n	80011da <memclose+0xea>
		osDelay(5);
 800118a:	2005      	movs	r0, #5
 800118c:	f015 fa64 	bl	8016658 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <memclose+0x16c>)
 8001192:	f00b faf9 	bl	800c788 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8001196:	f00b f913 	bl	800c3c0 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <memclose+0x16c>)
 800119e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011a2:	bf0b      	itete	eq
 80011a4:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80011a8:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 80011ac:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 80011b0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 80011b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 80011b8:	f00b fa0e 	bl	800c5d8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 80011bc:	bb78      	cbnz	r0, 800121e <memclose+0x12e>
		res = HAL_FLASH_OB_Launch();
 80011be:	f00b f91b 	bl	800c3f8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 80011c2:	bb28      	cbnz	r0, 8001210 <memclose+0x120>
		HAL_FLASH_OB_Lock();
 80011c4:	f00b f90e 	bl	800c3e4 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <memclose+0x170>)
 80011ca:	f025 fb5f 	bl	802688c <puts>
		osDelay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f015 fa42 	bl	8016658 <osDelay>
		rebootme(0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f002 fde7 	bl	8003da8 <rebootme>
	http_downloading = NOT_LOADING;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <memclose+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	b004      	add	sp, #16
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		flash_abort = 0;
 80011e6:	2200      	movs	r2, #0
		http_downloading = NOT_LOADING;
 80011e8:	481e      	ldr	r0, [pc, #120]	; (8001264 <memclose+0x174>)
		down_total = 0;		// unfreeze main
 80011ea:	4914      	ldr	r1, [pc, #80]	; (800123c <memclose+0x14c>)
		flash_abort = 0;
 80011ec:	601a      	str	r2, [r3, #0]
		http_downloading = NOT_LOADING;
 80011ee:	6002      	str	r2, [r0, #0]
		down_total = 0;		// unfreeze main
 80011f0:	600a      	str	r2, [r1, #0]
}
 80011f2:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <memclose+0x178>)
 80011f6:	f025 fb49 	bl	802688c <puts>
		printflasherr();
 80011fa:	f7ff fd4f 	bl	8000c9c <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <memclose+0x17c>)
 8001200:	f025 fb44 	bl	802688c <puts>
		down_total = 0;		// unfreeze main
 8001204:	2300      	movs	r3, #0
		return ((void*) 0);
 8001206:	4618      	mov	r0, r3
		down_total = 0;		// unfreeze main
 8001208:	6033      	str	r3, [r6, #0]
}
 800120a:	b004      	add	sp, #16
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 8001210:	4601      	mov	r1, r0
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <memclose+0x180>)
 8001214:	f025 fa9e 	bl	8026754 <iprintf>
			down_total = 0;		// unfreeze main
 8001218:	2300      	movs	r3, #0
 800121a:	6033      	str	r3, [r6, #0]
 800121c:	e7d2      	b.n	80011c4 <memclose+0xd4>
			printf("memclose: failed to OBProgram %d\n", res);
 800121e:	4601      	mov	r1, r0
 8001220:	4814      	ldr	r0, [pc, #80]	; (8001274 <memclose+0x184>)
 8001222:	f025 fa97 	bl	8026754 <iprintf>
			down_total = 0;		// unfreeze main
 8001226:	2300      	movs	r3, #0
 8001228:	6033      	str	r3, [r6, #0]
 800122a:	e7c8      	b.n	80011be <memclose+0xce>
 800122c:	20000854 	.word	0x20000854
 8001230:	20000008 	.word	0x20000008
 8001234:	20000874 	.word	0x20000874
 8001238:	20000864 	.word	0x20000864
 800123c:	20001670 	.word	0x20001670
 8001240:	2000085c 	.word	0x2000085c
 8001244:	20000858 	.word	0x20000858
 8001248:	20000004 	.word	0x20000004
 800124c:	0802b298 	.word	0x0802b298
 8001250:	0802b3f8 	.word	0x0802b3f8
 8001254:	20000850 	.word	0x20000850
 8001258:	0802b308 	.word	0x0802b308
 800125c:	20000830 	.word	0x20000830
 8001260:	0802b3bc 	.word	0x0802b3bc
 8001264:	200018bc 	.word	0x200018bc
 8001268:	0802b010 	.word	0x0802b010
 800126c:	0802b2f0 	.word	0x0802b2f0
 8001270:	0802b398 	.word	0x0802b398
 8001274:	0802b374 	.word	0x0802b374

08001278 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <vApplicationMallocFailedHook>:
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationGetIdleTaskMemory+0x18>)
{
 8001286:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001288:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800128e:	4c04      	ldr	r4, [pc, #16]	; (80012a0 <vApplicationGetIdleTaskMemory+0x1c>)
 8001290:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000c78 	.word	0x20000c78
 80012a0:	20000878 	.word	0x20000878

080012a4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <vApplicationGetTimerTaskMemory+0x18>)
{
 80012a6:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012a8:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80012ae:	4c04      	ldr	r4, [pc, #16]	; (80012c0 <vApplicationGetTimerTaskMemory+0x1c>)
 80012b0:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 80012b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000152c 	.word	0x2000152c
 80012c0:	20000d2c 	.word	0x20000d2c

080012c4 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	4770      	bx	lr

080012c8 <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80012c8:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 80012ca:	2000      	movs	r0, #0
	http_content_len = content_len;
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <RecvHttpHeaderCallback+0xc>)
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20001674 	.word	0x20001674

080012d8 <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012d8:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 80012da:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012dc:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 80012de:	b158      	cbz	r0, 80012f8 <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 80012e0:	1d21      	adds	r1, r4, #4
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d001      	beq.n	80012ea <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012ea:	8922      	ldrh	r2, [r4, #8]
 80012ec:	6820      	ldr	r0, [r4, #0]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <httpc_get_internal_addr+0x30>)
}
 80012f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012f4:	f01b be1e 	b.w	801cf34 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <httpc_get_internal_addr+0x34>)
 80012fa:	f240 1299 	movw	r2, #409	; 0x199
 80012fe:	4904      	ldr	r1, [pc, #16]	; (8001310 <httpc_get_internal_addr+0x38>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <httpc_get_internal_addr+0x3c>)
 8001302:	f025 fa27 	bl	8026754 <iprintf>
 8001306:	e7eb      	b.n	80012e0 <httpc_get_internal_addr+0x8>
 8001308:	08001749 	.word	0x08001749
 800130c:	0802b424 	.word	0x0802b424
 8001310:	0802b440 	.word	0x0802b440
 8001314:	0802b44c 	.word	0x0802b44c

08001318 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4604      	mov	r4, r0
	if (req->request != NULL) {
 800131c:	6900      	ldr	r0, [r0, #16]
 800131e:	b118      	cbz	r0, 8001328 <httpc_free_state+0x10>
		pbuf_free(req->request);
 8001320:	f01b f94e 	bl	801c5c0 <pbuf_free>
		req->request = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 8001328:	6960      	ldr	r0, [r4, #20]
 800132a:	b118      	cbz	r0, 8001334 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 800132c:	f01b f948 	bl	801c5c0 <pbuf_free>
		req->rx_hdrs = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8001334:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 8001336:	4620      	mov	r0, r4
 8001338:	f01a f896 	bl	801b468 <mem_free>
	if (tpcb != NULL) {
 800133c:	b1c5      	cbz	r5, 8001370 <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 800133e:	2100      	movs	r1, #0
 8001340:	4628      	mov	r0, r5
 8001342:	f01b fefd 	bl	801d140 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8001346:	2100      	movs	r1, #0
 8001348:	4628      	mov	r0, r5
 800134a:	f01b fefd 	bl	801d148 <tcp_recv>
		altcp_err(tpcb, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	4628      	mov	r0, r5
 8001352:	f01b ff31 	bl	801d1b8 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	4628      	mov	r0, r5
 800135a:	4611      	mov	r1, r2
 800135c:	f01b ff4e 	bl	801d1fc <tcp_poll>
		altcp_sent(tpcb, NULL);
 8001360:	4628      	mov	r0, r5
 8001362:	2100      	movs	r1, #0
 8001364:	f01b ff0c 	bl	801d180 <tcp_sent>
		r = altcp_close(tpcb);
 8001368:	4628      	mov	r0, r5
 800136a:	f01c fda5 	bl	801deb8 <tcp_close>
		if (r != ERR_OK) {
 800136e:	b908      	cbnz	r0, 8001374 <httpc_free_state+0x5c>
	return ERR_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001374:	4628      	mov	r0, r5
 8001376:	f01c fba7 	bl	801dac8 <tcp_abort>
			return ERR_ABRT;
 800137a:	f06f 000c 	mvn.w	r0, #12
}
 800137e:	bd38      	pop	{r3, r4, r5, pc}

08001380 <HttpClientFileReceiveCallback>:

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
}

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001380:	b510      	push	{r4, lr}
	char *buf;
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

	if (http_downloading == FLASH_LOADING) {
 8001382:	4c08      	ldr	r4, [pc, #32]	; (80013a4 <HttpClientFileReceiveCallback+0x24>)
 8001384:	6824      	ldr	r4, [r4, #0]
 8001386:	2c01      	cmp	r4, #1
 8001388:	d003      	beq.n	8001392 <HttpClientFileReceiveCallback+0x12>
		stm_rx_callback(arg, pcb, p, err);
	} else if (http_downloading == NXT_LOADING) {
 800138a:	2c03      	cmp	r4, #3
 800138c:	d005      	beq.n	800139a <HttpClientFileReceiveCallback+0x1a>
		nxt_rx_callback(arg, pcb, p, err);
	}

	return (0);
}
 800138e:	2000      	movs	r0, #0
 8001390:	bd10      	pop	{r4, pc}
		stm_rx_callback(arg, pcb, p, err);
 8001392:	f000 fdab 	bl	8001eec <stm_rx_callback>
}
 8001396:	2000      	movs	r0, #0
 8001398:	bd10      	pop	{r4, pc}
		nxt_rx_callback(arg, pcb, p, err);
 800139a:	f004 ff8b 	bl	80062b4 <nxt_rx_callback>
}
 800139e:	2000      	movs	r0, #0
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	200018bc 	.word	0x200018bc

080013a8 <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 80013a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	460c      	mov	r4, r1
 80013b0:	461d      	mov	r5, r3
 80013b2:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 80013b6:	b968      	cbnz	r0, 80013d4 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b8:	2900      	cmp	r1, #0
 80013ba:	d032      	beq.n	8001422 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013be:	462b      	mov	r3, r5
 80013c0:	4641      	mov	r1, r8
 80013c2:	4638      	mov	r0, r7
 80013c4:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 80013ca:	b004      	add	sp, #16
 80013cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013d0:	f025 bb76 	b.w	8026ac0 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013d4:	4616      	mov	r6, r2
 80013d6:	b1e1      	cbz	r1, 8001412 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 80013d8:	2e50      	cmp	r6, #80	; 0x50
 80013da:	d00d      	beq.n	80013f8 <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 80013dc:	4623      	mov	r3, r4
 80013de:	9403      	str	r4, [sp, #12]
 80013e0:	4c14      	ldr	r4, [pc, #80]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013e2:	4641      	mov	r1, r8
 80013e4:	4a15      	ldr	r2, [pc, #84]	; (800143c <httpc_create_request_string.constprop.0.isra.0+0x94>)
 80013e6:	4638      	mov	r0, r7
 80013e8:	9501      	str	r5, [sp, #4]
 80013ea:	9600      	str	r6, [sp, #0]
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	f025 fb67 	bl	8026ac0 <sniprintf>
}
 80013f2:	b004      	add	sp, #16
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013fa:	4641      	mov	r1, r8
 80013fc:	4623      	mov	r3, r4
 80013fe:	4638      	mov	r0, r7
 8001400:	9201      	str	r2, [sp, #4]
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8001404:	9402      	str	r4, [sp, #8]
 8001406:	9500      	str	r5, [sp, #0]
 8001408:	f025 fb5a 	bl	8026ac0 <sniprintf>
}
 800140c:	b004      	add	sp, #16
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001414:	f240 12db 	movw	r2, #475	; 0x1db
 8001418:	490b      	ldr	r1, [pc, #44]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800141c:	f025 f99a 	bl	8026754 <iprintf>
 8001420:	e7da      	b.n	80013d8 <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001424:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 800142c:	f025 f992 	bl	8026754 <iprintf>
 8001430:	e7c4      	b.n	80013bc <httpc_create_request_string.constprop.0.isra.0+0x14>
 8001432:	bf00      	nop
 8001434:	0802b4e4 	.word	0x0802b4e4
 8001438:	0802b574 	.word	0x0802b574
 800143c:	0802b488 	.word	0x0802b488
 8001440:	0802b51c 	.word	0x0802b51c
 8001444:	0802b424 	.word	0x0802b424
 8001448:	0802b474 	.word	0x0802b474
 800144c:	0802b44c 	.word	0x0802b44c

08001450 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	b085      	sub	sp, #20
 8001456:	460d      	mov	r5, r1
 8001458:	4690      	mov	r8, r2
 800145a:	461e      	mov	r6, r3
 800145c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8001460:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001462:	f1ba 0f00 	cmp.w	sl, #0
 8001466:	d063      	beq.n	8001530 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001468:	f04f 0900 	mov.w	r9, #0
 800146c:	4653      	mov	r3, sl
 800146e:	4632      	mov	r2, r6
 8001470:	4641      	mov	r1, r8
 8001472:	46b3      	mov	fp, r6
 8001474:	e9cd 9900 	strd	r9, r9, [sp]
 8001478:	79a8      	ldrb	r0, [r5, #6]
 800147a:	f7ff ff95 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 800147e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001482:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001484:	4298      	cmp	r0, r3
 8001486:	d861      	bhi.n	800154c <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 8001488:	2034      	movs	r0, #52	; 0x34
 800148a:	f01a f9a9 	bl	801b7e0 <mem_malloc>
	if (req == NULL) {
 800148e:	4604      	mov	r4, r0
 8001490:	2800      	cmp	r0, #0
 8001492:	d064      	beq.n	800155e <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001494:	4649      	mov	r1, r9
 8001496:	2234      	movs	r2, #52	; 0x34
 8001498:	f024 f9be 	bl	8025818 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 800149c:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 800149e:	2364      	movs	r3, #100	; 0x64
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014a0:	f107 0901 	add.w	r9, r7, #1
 80014a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80014a8:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 80014ac:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 80014ae:	f01a feb5 	bl	801c21c <pbuf_alloc>
 80014b2:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d043      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d140      	bne.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 80014c4:	f01c fc20 	bl	801dd08 <tcp_new>
 80014c8:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d038      	beq.n	8001540 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014ce:	79ab      	ldrb	r3, [r5, #6]
 80014d0:	bb63      	cbnz	r3, 800152c <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 80014d2:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014d4:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 80014d6:	f01b fe33 	bl	801d140 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 80014da:	4922      	ldr	r1, [pc, #136]	; (8001564 <httpc_init_connection_common.constprop.0+0x114>)
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f01b fe33 	bl	801d148 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 80014e2:	4921      	ldr	r1, [pc, #132]	; (8001568 <httpc_init_connection_common.constprop.0+0x118>)
 80014e4:	6820      	ldr	r0, [r4, #0]
 80014e6:	f01b fe67 	bl	801d1b8 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 80014ea:	2203      	movs	r2, #3
 80014ec:	491f      	ldr	r1, [pc, #124]	; (800156c <httpc_init_connection_common.constprop.0+0x11c>)
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	f01b fe84 	bl	801d1fc <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 80014f4:	491e      	ldr	r1, [pc, #120]	; (8001570 <httpc_init_connection_common.constprop.0+0x120>)
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f01b fe42 	bl	801d180 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014fc:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8001500:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001502:	4653      	mov	r3, sl
 8001504:	465a      	mov	r2, fp
 8001506:	4641      	mov	r1, r8
 8001508:	6840      	ldr	r0, [r0, #4]
 800150a:	9000      	str	r0, [sp, #0]
 800150c:	79a8      	ldrb	r0, [r5, #6]
 800150e:	f7ff ff4b 	bl	80013a8 <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 8001512:	4287      	cmp	r7, r0
 8001514:	d11d      	bne.n	8001552 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 8001516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 8001518:	2000      	movs	r0, #0
	req->conn_settings = settings;
 800151a:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 800151e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001520:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8001522:	9b03      	ldr	r3, [sp, #12]
 8001524:	601c      	str	r4, [r3, #0]
}
 8001526:	b005      	add	sp, #20
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 800152c:	88ae      	ldrh	r6, [r5, #4]
 800152e:	e7d0      	b.n	80014d2 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <httpc_init_connection_common.constprop.0+0x124>)
 8001532:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <httpc_init_connection_common.constprop.0+0x128>)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <httpc_init_connection_common.constprop.0+0x12c>)
 800153a:	f025 f90b 	bl	8026754 <iprintf>
 800153e:	e793      	b.n	8001468 <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fee9 	bl	8001318 <httpc_free_state>
		return ERR_MEM;
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	e7ec      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 800154c:	f06f 0005 	mvn.w	r0, #5
 8001550:	e7e9      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff fee0 	bl	8001318 <httpc_free_state>
		return ERR_VAL;
 8001558:	f06f 0005 	mvn.w	r0, #5
 800155c:	e7e3      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	e7e0      	b.n	8001526 <httpc_init_connection_common.constprop.0+0xd6>
 8001564:	080018d9 	.word	0x080018d9
 8001568:	08001615 	.word	0x08001615
 800156c:	0800189d 	.word	0x0800189d
 8001570:	080012c5 	.word	0x080012c5
 8001574:	0802b424 	.word	0x0802b424
 8001578:	0802b5c4 	.word	0x0802b5c4
 800157c:	0802b44c 	.word	0x0802b44c

08001580 <HttpClientPageResultCallback>:
		err_t err) {
 8001580:	b530      	push	{r4, r5, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 8001588:	b949      	cbnz	r1, 800159e <HttpClientPageResultCallback+0x1e>
	if (err != ERR_OK) {
 800158a:	b9d5      	cbnz	r5, 80015c2 <HttpClientPageResultCallback+0x42>
 800158c:	4c18      	ldr	r4, [pc, #96]	; (80015f0 <HttpClientPageResultCallback+0x70>)
	returnpage(rxbuffer, down_total, err);
 800158e:	462a      	mov	r2, r5
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <HttpClientPageResultCallback+0x74>)
}
 8001594:	b003      	add	sp, #12
 8001596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 800159a:	f007 bc87 	b.w	8008eac <returnpage>
 800159e:	2909      	cmp	r1, #9
 80015a0:	460c      	mov	r4, r1
	switch (err) {
 80015a2:	d823      	bhi.n	80015ec <HttpClientPageResultCallback+0x6c>
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HttpClientPageResultCallback+0x78>)
 80015a6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 80015aa:	4611      	mov	r1, r2
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <HttpClientPageResultCallback+0x7c>)
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	f025 f8d0 	bl	8026754 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015b4:	9a01      	ldr	r2, [sp, #4]
 80015b6:	4621      	mov	r1, r4
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HttpClientPageResultCallback+0x80>)
 80015ba:	f025 f8cb 	bl	8026754 <iprintf>
	if (err != ERR_OK) {
 80015be:	2d00      	cmp	r5, #0
 80015c0:	d0e4      	beq.n	800158c <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015c2:	f105 0310 	add.w	r3, r5, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d905      	bls.n	80015d8 <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80015cc:	4c08      	ldr	r4, [pc, #32]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HttpClientPageResultCallback+0x84>)
 80015d0:	6821      	ldr	r1, [r4, #0]
 80015d2:	f025 f8bf 	bl	8026754 <iprintf>
 80015d6:	e7da      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015d8:	4269      	negs	r1, r5
 80015da:	4c05      	ldr	r4, [pc, #20]	; (80015f0 <HttpClientPageResultCallback+0x70>)
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HttpClientPageResultCallback+0x88>)
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HttpClientPageResultCallback+0x8c>)
 80015e6:	f025 f8b5 	bl	8026754 <iprintf>
}
 80015ea:	e7d0      	b.n	800158e <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HttpClientPageResultCallback+0x90>)
 80015ee:	e7dc      	b.n	80015aa <HttpClientPageResultCallback+0x2a>
 80015f0:	20001670 	.word	0x20001670
 80015f4:	20001678 	.word	0x20001678
 80015f8:	0802b954 	.word	0x0802b954
 80015fc:	0802b5ec 	.word	0x0802b5ec
 8001600:	0802b600 	.word	0x0802b600
 8001604:	0802b628 	.word	0x0802b628
 8001608:	0802b97c 	.word	0x0802b97c
 800160c:	0802b648 	.word	0x0802b648
 8001610:	0802b5d0 	.word	0x0802b5d0

08001614 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 800161c:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 800161e:	f025 f899 	bl	8026754 <iprintf>
	if (req != NULL) {
 8001622:	b184      	cbz	r4, 8001646 <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001624:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 8001626:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001628:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800162a:	b132      	cbz	r2, 800163a <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800162c:	6896      	ldr	r6, [r2, #8]
 800162e:	b126      	cbz	r6, 800163a <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001630:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001632:	2104      	movs	r1, #4
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001638:	47b0      	blx	r6
		return httpc_free_state(req);
 800163a:	4620      	mov	r0, r4
}
 800163c:	b002      	add	sp, #8
 800163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001642:	f7ff be69 	b.w	8001318 <httpc_free_state>
}
 8001646:	b002      	add	sp, #8
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	0802b668 	.word	0x0802b668

08001650 <HttpClientFileResultCallback>:
		err_t err) {
 8001650:	b530      	push	{r4, r5, lr}
 8001652:	460c      	mov	r4, r1
 8001654:	b083      	sub	sp, #12
 8001656:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	nxt_sendres();		// upload any residual buffer to the LCD (dont care if this is stm firmware callback)
 800165a:	f004 fdf9 	bl	8006250 <nxt_sendres>
	if (httpc_result != HTTPC_RESULT_OK) {
 800165e:	b95c      	cbnz	r4, 8001678 <HttpClientFileResultCallback+0x28>
	if (err != ERR_OK) {
 8001660:	2d00      	cmp	r5, #0
 8001662:	d139      	bne.n	80016d8 <HttpClientFileResultCallback+0x88>
	if (flash_memptr != 0) {
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b10b      	cbz	r3, 800166e <HttpClientFileResultCallback+0x1e>
		memclose();
 800166a:	f7ff fd41 	bl	80010f0 <memclose>
	http_downloading = NOT_LOADING;		// whatever the result
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HttpClientFileResultCallback+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	b003      	add	sp, #12
 8001676:	bd30      	pop	{r4, r5, pc}
	switch (err) {
 8001678:	2c09      	cmp	r4, #9
 800167a:	d821      	bhi.n	80016c0 <HttpClientFileResultCallback+0x70>
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HttpClientFileResultCallback+0x94>)
 800167e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	printf("clientresult: %s\n", msg);
 8001682:	4611      	mov	r1, r2
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HttpClientFileResultCallback+0x98>)
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	f025 f864 	bl	8026754 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 800168c:	4621      	mov	r1, r4
 800168e:	9a01      	ldr	r2, [sp, #4]
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <HttpClientFileResultCallback+0x9c>)
 8001692:	f025 f85f 	bl	8026754 <iprintf>
		flash_memptr = 0;
 8001696:	4c11      	ldr	r4, [pc, #68]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 8001698:	2100      	movs	r1, #0
		nxt_abort = 1;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HttpClientFileResultCallback+0xa0>)
 800169c:	2201      	movs	r2, #1
		flash_memptr = 0;
 800169e:	6021      	str	r1, [r4, #0]
		nxt_abort = 1;
 80016a0:	601a      	str	r2, [r3, #0]
	if (err != ERR_OK) {
 80016a2:	2d00      	cmp	r5, #0
 80016a4:	d0e3      	beq.n	800166e <HttpClientFileResultCallback+0x1e>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80016a6:	f105 0310 	add.w	r3, r5, #16
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d909      	bls.n	80016c4 <HttpClientFileResultCallback+0x74>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <HttpClientFileResultCallback+0xa8>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f025 f84d 	bl	8026754 <iprintf>
		flash_memptr = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	6023      	str	r3, [r4, #0]
	if (flash_memptr != 0) {
 80016be:	e7d6      	b.n	800166e <HttpClientFileResultCallback+0x1e>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HttpClientFileResultCallback+0xac>)
 80016c2:	e7de      	b.n	8001682 <HttpClientFileResultCallback+0x32>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80016c4:	4269      	negs	r1, r5
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HttpClientFileResultCallback+0xb0>)
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HttpClientFileResultCallback+0xa4>)
 80016ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <HttpClientFileResultCallback+0xb4>)
 80016d2:	f025 f83f 	bl	8026754 <iprintf>
}
 80016d6:	e7f0      	b.n	80016ba <HttpClientFileResultCallback+0x6a>
 80016d8:	4c00      	ldr	r4, [pc, #0]	; (80016dc <HttpClientFileResultCallback+0x8c>)
 80016da:	e7e4      	b.n	80016a6 <HttpClientFileResultCallback+0x56>
 80016dc:	2000085c 	.word	0x2000085c
 80016e0:	200018bc 	.word	0x200018bc
 80016e4:	0802b954 	.word	0x0802b954
 80016e8:	0802b5ec 	.word	0x0802b5ec
 80016ec:	0802b67c 	.word	0x0802b67c
 80016f0:	200030e8 	.word	0x200030e8
 80016f4:	20001670 	.word	0x20001670
 80016f8:	0802b628 	.word	0x0802b628
 80016fc:	0802b5d0 	.word	0x0802b5d0
 8001700:	0802b97c 	.word	0x0802b97c
 8001704:	0802b648 	.word	0x0802b648

08001708 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	4614      	mov	r4, r2
 800170c:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 800170e:	b1b1      	cbz	r1, 800173e <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fde1 	bl	80012d8 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 8001716:	b180      	cbz	r0, 800173a <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001718:	2102      	movs	r1, #2
	if (req != NULL) {
 800171a:	b174      	cbz	r4, 800173a <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	b133      	cbz	r3, 800172e <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001720:	689d      	ldr	r5, [r3, #8]
 8001722:	b125      	cbz	r5, 800172e <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001724:	9000      	str	r0, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800172c:	47a8      	blx	r5
		return httpc_free_state(req);
 800172e:	4620      	mov	r0, r4
}
 8001730:	b003      	add	sp, #12
 8001732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 8001736:	f7ff bdef 	b.w	8001318 <httpc_free_state>
}
 800173a:	b003      	add	sp, #12
 800173c:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 800173e:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001740:	f06f 000f 	mvn.w	r0, #15
 8001744:	e7e9      	b.n	800171a <httpc_dns_found+0x12>
 8001746:	bf00      	nop

08001748 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001748:	6901      	ldr	r1, [r0, #16]
 800174a:	2301      	movs	r3, #1
 800174c:	894a      	ldrh	r2, [r1, #10]
 800174e:	6849      	ldr	r1, [r1, #4]
 8001750:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001752:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001754:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001756:	b082      	sub	sp, #8
 8001758:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f01e fac8 	bl	801fcf0 <tcp_write>
	if (r != ERR_OK) {
 8001760:	4605      	mov	r5, r0
 8001762:	b948      	cbnz	r0, 8001778 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 8001764:	6920      	ldr	r0, [r4, #16]
 8001766:	f01a ff2b 	bl	801c5c0 <pbuf_free>
	altcp_output(req->pcb);
 800176a:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 800176c:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 800176e:	f01f f8d9 	bl	8020924 <tcp_output>
}
 8001772:	4628      	mov	r0, r5
 8001774:	b002      	add	sp, #8
 8001776:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 8001778:	6a23      	ldr	r3, [r4, #32]
 800177a:	b13b      	cbz	r3, 800178c <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 800177c:	689e      	ldr	r6, [r3, #8]
 800177e:	b12e      	cbz	r6, 800178c <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001780:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001782:	2300      	movs	r3, #0
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	2107      	movs	r1, #7
 8001788:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800178a:	47b0      	blx	r6
		return httpc_free_state(req);
 800178c:	4620      	mov	r0, r4
}
 800178e:	b002      	add	sp, #8
 8001790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001794:	f7ff bdc0 	b.w	8001318 <httpc_free_state>

08001798 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d048      	beq.n	8001834 <HttpClientPageReceiveCallback+0x9c>
	if (err != ERR_OK) {
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14f      	bne.n	8001846 <HttpClientPageReceiveCallback+0xae>
 80017a6:	4688      	mov	r8, r1
 80017a8:	4617      	mov	r7, r2
 80017aa:	4614      	mov	r4, r2
 80017ac:	4d33      	ldr	r5, [pc, #204]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 80017ae:	4e34      	ldr	r6, [pc, #208]	; (8001880 <HttpClientPageReceiveCallback+0xe8>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80017b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001898 <HttpClientPageReceiveCallback+0x100>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 80017b4:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 80017b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 80017ba:	b1bb      	cbz	r3, 80017ec <HttpClientPageReceiveCallback+0x54>
 80017bc:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017be:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017c2:	469e      	mov	lr, r3
 80017c4:	e007      	b.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017c6:	602a      	str	r2, [r5, #0]
 80017c8:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 80017cc:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ce:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 80017d0:	8962      	ldrh	r2, [r4, #10]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	da0a      	bge.n	80017ec <HttpClientPageReceiveCallback+0x54>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017d6:	6828      	ldr	r0, [r5, #0]
 80017d8:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017da:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017de:	d9f2      	bls.n	80017c6 <HttpClientPageReceiveCallback+0x2e>
		for (i = 0; i < q->len; i++) {
 80017e0:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017e2:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 80017e6:	8962      	ldrh	r2, [r4, #10]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dbf4      	blt.n	80017d6 <HttpClientPageReceiveCallback+0x3e>
			}
		}

		altcp_recved(pcb, p->tot_len);
 80017ec:	8939      	ldrh	r1, [r7, #8]
 80017ee:	4640      	mov	r0, r8
 80017f0:	f01b fb66 	bl	801cec0 <tcp_recved>
		err = pbuf_free_callback(p);
 80017f4:	4638      	mov	r0, r7
 80017f6:	f017 fd13 	bl	8019220 <pbuf_free_callback>
		if (err != ERR_OK) {
 80017fa:	4682      	mov	sl, r0
 80017fc:	b920      	cbnz	r0, 8001808 <HttpClientPageReceiveCallback+0x70>
	for (q = p; q != NULL; q = q->next) {
 80017fe:	6824      	ldr	r4, [r4, #0]
 8001800:	2c00      	cmp	r4, #0
 8001802:	d1d7      	bne.n	80017b4 <HttpClientPageReceiveCallback+0x1c>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
}
 8001804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			putchar('!');
 8001808:	2021      	movs	r0, #33	; 0x21
 800180a:	f024 ffbb 	bl	8026784 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800180e:	f10a 0310 	add.w	r3, sl, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b10      	cmp	r3, #16
 8001816:	d904      	bls.n	8001822 <HttpClientPageReceiveCallback+0x8a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001818:	6829      	ldr	r1, [r5, #0]
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800181c:	f024 ff9a 	bl	8026754 <iprintf>
 8001820:	e7ed      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001822:	f1ca 0100 	rsb	r1, sl, #0
 8001826:	682a      	ldr	r2, [r5, #0]
 8001828:	4817      	ldr	r0, [pc, #92]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800182a:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 800182e:	f024 ff91 	bl	8026754 <iprintf>
}
 8001832:	e7e4      	b.n	80017fe <HttpClientPageReceiveCallback+0x66>
	LWIP_ASSERT("p != NULL", p != NULL);
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <HttpClientPageReceiveCallback+0xf4>)
 8001836:	f240 421b 	movw	r2, #1051	; 0x41b
 800183a:	4915      	ldr	r1, [pc, #84]	; (8001890 <HttpClientPageReceiveCallback+0xf8>)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <HttpClientPageReceiveCallback+0xfc>)
 800183e:	f024 ff89 	bl	8026754 <iprintf>
	if (err != ERR_OK) {
 8001842:	2c00      	cmp	r4, #0
 8001844:	d0de      	beq.n	8001804 <HttpClientPageReceiveCallback+0x6c>
		putchar('^');
 8001846:	205e      	movs	r0, #94	; 0x5e
 8001848:	f024 ff9c 	bl	8026784 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800184c:	f104 0310 	add.w	r3, r4, #16
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b10      	cmp	r3, #16
 8001854:	d906      	bls.n	8001864 <HttpClientPageReceiveCallback+0xcc>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <HttpClientPageReceiveCallback+0xec>)
 800185a:	6819      	ldr	r1, [r3, #0]
}
 800185c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001860:	f024 bf78 	b.w	8026754 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001864:	4261      	negs	r1, r4
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HttpClientPageReceiveCallback+0x100>)
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HttpClientPageReceiveCallback+0xe4>)
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <HttpClientPageReceiveCallback+0xf0>)
 800186c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001870:	6812      	ldr	r2, [r2, #0]
}
 8001872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001876:	f024 bf6d 	b.w	8026754 <iprintf>
 800187a:	bf00      	nop
 800187c:	20001670 	.word	0x20001670
 8001880:	20001678 	.word	0x20001678
 8001884:	0802b628 	.word	0x0802b628
 8001888:	0802b648 	.word	0x0802b648
 800188c:	0802b424 	.word	0x0802b424
 8001890:	08046d44 	.word	0x08046d44
 8001894:	0802b44c 	.word	0x0802b44c
 8001898:	0802b97c 	.word	0x0802b97c

0800189c <httpc_tcp_poll>:
	if (req != NULL) {
 800189c:	b1d0      	cbz	r0, 80018d4 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800189e:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 80018a0:	b530      	push	{r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 80018a6:	b12b      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 80018ac:	b113      	cbz	r3, 80018b4 <httpc_tcp_poll+0x18>
}
 80018ae:	2000      	movs	r0, #0
 80018b0:	b003      	add	sp, #12
 80018b2:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	b13b      	cbz	r3, 80018c8 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80018b8:	689d      	ldr	r5, [r3, #8]
 80018ba:	b12d      	cbz	r5, 80018c8 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80018bc:	2300      	movs	r3, #0
 80018be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c0:	2105      	movs	r1, #5
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018c6:	47a8      	blx	r5
		return httpc_free_state(req);
 80018c8:	4620      	mov	r0, r4
}
 80018ca:	b003      	add	sp, #12
 80018cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 80018d0:	f7ff bd22 	b.w	8001318 <httpc_free_state>
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	4604      	mov	r4, r0
 80018de:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 80018e0:	4615      	mov	r5, r2
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f000 80e2 	beq.w	8001aac <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80018e8:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 80018ec:	460e      	mov	r6, r1
 80018ee:	461f      	mov	r7, r3
 80018f0:	f1ba 0f02 	cmp.w	sl, #2
 80018f4:	f000 80c8 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 80018f8:	6940      	ldr	r0, [r0, #20]
 80018fa:	b190      	cbz	r0, 8001922 <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 80018fc:	4611      	mov	r1, r2
 80018fe:	f01a fe91 	bl	801c624 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001902:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001906:	f1ba 0f00 	cmp.w	sl, #0
 800190a:	d00e      	beq.n	800192a <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 800190c:	f1ba 0f01 	cmp.w	sl, #1
 8001910:	d06e      	beq.n	80019f0 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001912:	f1ba 0f02 	cmp.w	sl, #2
 8001916:	f000 80b7 	beq.w	8001a88 <httpc_tcp_recv+0x1b0>
}
 800191a:	2000      	movs	r0, #0
 800191c:	b009      	add	sp, #36	; 0x24
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 8001922:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001924:	f1ba 0f00 	cmp.w	sl, #0
 8001928:	d1f0      	bne.n	800190c <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 800192a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 800192e:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001932:	4653      	mov	r3, sl
 8001934:	2202      	movs	r2, #2
 8001936:	4989      	ldr	r1, [pc, #548]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001938:	4640      	mov	r0, r8
 800193a:	f01b f861 	bl	801ca00 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 800193e:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8001940:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 8001942:	f000 8105 	beq.w	8001b50 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001946:	4653      	mov	r3, sl
 8001948:	2201      	movs	r2, #1
 800194a:	4985      	ldr	r1, [pc, #532]	; (8001b60 <httpc_tcp_recv+0x288>)
 800194c:	4640      	mov	r0, r8
 800194e:	f01b f857 	bl	801ca00 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 8001952:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001954:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 8001956:	f000 80fb 	beq.w	8001b50 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 800195a:	4651      	mov	r1, sl
 800195c:	2305      	movs	r3, #5
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <httpc_tcp_recv+0x28c>)
 8001960:	4640      	mov	r0, r8
 8001962:	f01b f815 	bl	801c990 <pbuf_memcmp>
 8001966:	2800      	cmp	r0, #0
 8001968:	f040 80f2 	bne.w	8001b50 <httpc_tcp_recv+0x278>
 800196c:	2106      	movs	r1, #6
 800196e:	4640      	mov	r0, r8
 8001970:	f01a ffe2 	bl	801c938 <pbuf_get_at>
 8001974:	282e      	cmp	r0, #46	; 0x2e
 8001976:	f040 80eb 	bne.w	8001b50 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 800197a:	2105      	movs	r1, #5
 800197c:	4640      	mov	r0, r8
 800197e:	f01a ffdb 	bl	801c938 <pbuf_get_at>
 8001982:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001984:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001986:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 800198a:	4640      	mov	r0, r8
 800198c:	f01a ffd4 	bl	801c938 <pbuf_get_at>
 8001990:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001992:	f109 0301 	add.w	r3, r9, #1
 8001996:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001998:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800199c:	4970      	ldr	r1, [pc, #448]	; (8001b60 <httpc_tcp_recv+0x288>)
 800199e:	b29b      	uxth	r3, r3
				*http_version = version;
 80019a0:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80019a2:	4640      	mov	r0, r8
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	f01b f82b 	bl	801ca00 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 80019aa:	4558      	cmp	r0, fp
 80019ac:	9b02      	ldr	r3, [sp, #8]
 80019ae:	f000 80a2 	beq.w	8001af6 <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 80019b2:	eba0 0909 	sub.w	r9, r0, r9
 80019b6:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80019ba:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019bc:	4640      	mov	r0, r8
 80019be:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80019c0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80019c4:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019c8:	fa1f f289 	uxth.w	r2, r9
 80019cc:	f01a fe9c 	bl	801c708 <pbuf_copy_partial>
 80019d0:	4581      	cmp	r9, r0
 80019d2:	f040 80bd 	bne.w	8001b50 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 80019d6:	a804      	add	r0, sp, #16
 80019d8:	f023 fc98 	bl	802530c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 80019dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80019e0:	1e42      	subs	r2, r0, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f200 80b4 	bhi.w	8001b50 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019e8:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 80019ea:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80019f0:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019f4:	2300      	movs	r3, #0
 80019f6:	2204      	movs	r2, #4
 80019f8:	495b      	ldr	r1, [pc, #364]	; (8001b68 <httpc_tcp_recv+0x290>)
 80019fa:	4648      	mov	r0, r9
 80019fc:	f01b f800 	bl	801ca00 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 8001a00:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a04:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001a06:	4298      	cmp	r0, r3
 8001a08:	f200 80a5 	bhi.w	8001b56 <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a10:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a14:	2210      	movs	r2, #16
 8001a16:	4955      	ldr	r1, [pc, #340]	; (8001b6c <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a18:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a1a:	4648      	mov	r0, r9
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f01a ffef 	bl	801ca00 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001a22:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a24:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001a26:	d16e      	bne.n	8001b06 <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001a28:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001a2c:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001a2e:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001a30:	4629      	mov	r1, r5
 8001a32:	f01b fa45 	bl	801cec0 <tcp_recved>
				if (req->conn_settings) {
 8001a36:	6a23      	ldr	r3, [r4, #32]
 8001a38:	b1cb      	cbz	r3, 8001a6e <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001a3a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001a3e:	f1b8 0f00 	cmp.w	r8, #0
 8001a42:	d014      	beq.n	8001a6e <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a46:	4620      	mov	r0, r4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	6962      	ldr	r2, [r4, #20]
 8001a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a50:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001a52:	b160      	cbz	r0, 8001a6e <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001a54:	6a23      	ldr	r3, [r4, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d037      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001a5a:	689d      	ldr	r5, [r3, #8]
 8001a5c:	2d00      	cmp	r5, #0
 8001a5e:	d034      	beq.n	8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001a60:	8b63      	ldrh	r3, [r4, #26]
 8001a62:	2108      	movs	r1, #8
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a66:	9000      	str	r0, [sp, #0]
 8001a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a6a:	47a8      	blx	r5
 8001a6c:	e02d      	b.n	8001aca <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001a6e:	4629      	mov	r1, r5
 8001a70:	6960      	ldr	r0, [r4, #20]
 8001a72:	f01a fd89 	bl	801c588 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001a76:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a78:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001a7a:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a82:	2800      	cmp	r0, #0
 8001a84:	f43f af49 	beq.w	800191a <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001a88:	8929      	ldrh	r1, [r5, #8]
 8001a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a8c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001a90:	440b      	add	r3, r1
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a94:	f1be 0f00 	cmp.w	lr, #0
 8001a98:	d026      	beq.n	8001ae8 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	462a      	mov	r2, r5
 8001a9e:	4631      	mov	r1, r6
 8001aa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aa2:	46f4      	mov	ip, lr
}
 8001aa4:	b009      	add	sp, #36	; 0x24
 8001aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001aaa:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001aac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d010      	beq.n	8001ad6 <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001ab4:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001ab6:	6a23      	ldr	r3, [r4, #32]
 8001ab8:	b13b      	cbz	r3, 8001aca <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001aba:	689d      	ldr	r5, [r3, #8]
 8001abc:	b12d      	cbz	r5, 8001aca <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	8b63      	ldrh	r3, [r4, #26]
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001ac8:	47a8      	blx	r5
		return httpc_free_state(req);
 8001aca:	4620      	mov	r0, r4
}
 8001acc:	b009      	add	sp, #36	; 0x24
 8001ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001ad2:	f7ff bc21 	b.w	8001318 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001ad6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ad8:	1c4b      	adds	r3, r1, #1
 8001ada:	d012      	beq.n	8001b02 <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001adc:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001ade:	42a9      	cmp	r1, r5
 8001ae0:	bf14      	ite	ne
 8001ae2:	2109      	movne	r1, #9
 8001ae4:	2100      	moveq	r1, #0
 8001ae6:	e7e6      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f01b f9e9 	bl	801cec0 <tcp_recved>
			pbuf_free(p);
 8001aee:	4628      	mov	r0, r5
 8001af0:	f01a fd66 	bl	801c5c0 <pbuf_free>
 8001af4:	e711      	b.n	800191a <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001af6:	9a03      	ldr	r2, [sp, #12]
 8001af8:	eba2 0909 	sub.w	r9, r2, r9
 8001afc:	f109 39ff 	add.w	r9, r9, #4294967295
 8001b00:	e75b      	b.n	80019ba <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001b02:	4611      	mov	r1, r2
 8001b04:	e7d7      	b.n	8001ab6 <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b06:	4603      	mov	r3, r0
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <httpc_tcp_recv+0x284>)
 8001b0c:	4648      	mov	r0, r9
 8001b0e:	f01a ff77 	bl	801ca00 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b12:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b14:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b16:	d087      	beq.n	8001a28 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b18:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b20:	1b52      	subs	r2, r2, r5
 8001b22:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b24:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b28:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2a:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b2c:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b2e:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b32:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b36:	462a      	mov	r2, r5
 8001b38:	f01a fde6 	bl	801c708 <pbuf_copy_partial>
 8001b3c:	4285      	cmp	r5, r0
 8001b3e:	f47f af73 	bne.w	8001a28 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001b42:	a804      	add	r0, sp, #16
 8001b44:	f023 fbe2 	bl	802530c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001b48:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001b4a:	bfa8      	it	ge
 8001b4c:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001b4e:	e76b      	b.n	8001a28 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001b50:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b54:	e6da      	b.n	800190c <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b56:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b5a:	e6da      	b.n	8001912 <httpc_tcp_recv+0x3a>
 8001b5c:	0802b570 	.word	0x0802b570
 8001b60:	0802de50 	.word	0x0802de50
 8001b64:	0802b6a4 	.word	0x0802b6a4
 8001b68:	0802b6ac 	.word	0x0802b6ac
 8001b6c:	0802b6b4 	.word	0x0802b6b4

08001b70 <httpc_get_file_dns>:
		altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	bf18      	it	ne
 8001b7a:	2a00      	cmpne	r2, #0
 8001b7c:	d044      	beq.n	8001c08 <httpc_get_file_dns+0x98>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d041      	beq.n	8001c08 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001b84:	4610      	mov	r0, r2
 8001b86:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	9000      	str	r0, [sp, #0]
 8001b8e:	4631      	mov	r1, r6
 8001b90:	a807      	add	r0, sp, #28
 8001b92:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001b96:	4622      	mov	r2, r4
 8001b98:	f7ff fc5a 	bl	8001450 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b998      	cbnz	r0, 8001bc8 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001ba0:	79b3      	ldrb	r3, [r6, #6]
 8001ba2:	b9a3      	cbnz	r3, 8001bce <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001ba4:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001ba6:	b33e      	cbz	r6, 8001bf8 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001ba8:	1d31      	adds	r1, r6, #4
 8001baa:	4633      	mov	r3, r6
 8001bac:	4620      	mov	r0, r4
 8001bae:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <httpc_get_file_dns+0xac>)
 8001bb0:	9105      	str	r1, [sp, #20]
 8001bb2:	f019 f9dd 	bl	801af70 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001bb6:	9905      	ldr	r1, [sp, #20]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b1c0      	cbz	r0, 8001bee <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001bbc:	1d42      	adds	r2, r0, #5
 8001bbe:	d00d      	beq.n	8001bdc <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001bc0:	9807      	ldr	r0, [sp, #28]
		return err;
 8001bc2:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001bc4:	f7ff fba8 	bl	8001318 <httpc_free_state>
}
 8001bc8:	4628      	mov	r0, r5
 8001bca:	b008      	add	sp, #32
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001bce:	4631      	mov	r1, r6
 8001bd0:	9807      	ldr	r0, [sp, #28]
 8001bd2:	f7ff fb81 	bl	80012d8 <httpc_get_internal_addr>
 8001bd6:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f1      	bne.n	8001bc0 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f2      	beq.n	8001bc8 <httpc_get_file_dns+0x58>
		*connection = req;
 8001be2:	9b07      	ldr	r3, [sp, #28]
}
 8001be4:	4628      	mov	r0, r5
		*connection = req;
 8001be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	b008      	add	sp, #32
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fb72 	bl	80012d8 <httpc_get_internal_addr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	e7ef      	b.n	8001bd8 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001bfa:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001bfe:	4909      	ldr	r1, [pc, #36]	; (8001c24 <httpc_get_file_dns+0xb4>)
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c02:	f024 fda7 	bl	8026754 <iprintf>
 8001c06:	e7cf      	b.n	8001ba8 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <httpc_get_file_dns+0xb0>)
 8001c0a:	f240 2292 	movw	r2, #658	; 0x292
 8001c0e:	4907      	ldr	r1, [pc, #28]	; (8001c2c <httpc_get_file_dns+0xbc>)
 8001c10:	f06f 050f 	mvn.w	r5, #15
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <httpc_get_file_dns+0xb8>)
 8001c16:	f024 fd9d 	bl	8026754 <iprintf>
 8001c1a:	e7d5      	b.n	8001bc8 <httpc_get_file_dns+0x58>
 8001c1c:	08001709 	.word	0x08001709
 8001c20:	0802b424 	.word	0x0802b424
 8001c24:	0802b440 	.word	0x0802b440
 8001c28:	0802b44c 	.word	0x0802b44c
 8001c2c:	0802b6c8 	.word	0x0802b6c8

08001c30 <printlwiperr>:
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001c30:	f100 0310 	add.w	r3, r0, #16
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d904      	bls.n	8001c44 <printlwiperr+0x14>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <printlwiperr+0x28>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <printlwiperr+0x2c>)
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	f024 bd88 	b.w	8026754 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001c44:	4241      	negs	r1, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <printlwiperr+0x30>)
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <printlwiperr+0x28>)
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <printlwiperr+0x34>)
 8001c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f024 bd7f 	b.w	8026754 <iprintf>
 8001c56:	bf00      	nop
 8001c58:	20001670 	.word	0x20001670
 8001c5c:	0802b628 	.word	0x0802b628
 8001c60:	0802b97c 	.word	0x0802b97c
 8001c64:	0802b648 	.word	0x0802b648

08001c68 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001c6e:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001c70:	4c1d      	ldr	r4, [pc, #116]	; (8001ce8 <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c72:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c76:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001c78:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d10 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c7c:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001c82:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001c84:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001c86:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001c8a:	6025      	str	r5, [r4, #0]
 8001c8c:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001c8e:	f023 fdc3 	bl	8025818 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <http_dlclient+0x88>)
	settings1->result_fn = HttpClientFileResultCallback;

	connection1->timeout_ticks = 1;

	strcpy(domain_name, host);
 8001c94:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001c96:	4f17      	ldr	r7, [pc, #92]	; (8001cf4 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c98:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001c9a:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001c9c:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001c9e:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <http_dlclient+0x90>)
 8001ca2:	f024 fff7 	bl	8026c94 <strcpy>
	strcpy(rxbuffer, filename);
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	4814      	ldr	r0, [pc, #80]	; (8001cfc <http_dlclient+0x94>)
 8001caa:	f024 fff3 	bl	8026c94 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <http_dlclient+0x9c>)
 8001cb2:	4623      	mov	r3, r4
	expectedapage = 0;
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb6:	f8cd 8008 	str.w	r8, [sp, #8]
 8001cba:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001cbc:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cbe:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001cc2:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001cc4:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <http_dlclient+0x94>)
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <http_dlclient+0x90>)
 8001cca:	f7ff ff51 	bl	8001b70 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001cce:	b910      	cbnz	r0, 8001cd6 <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001cd0:	b004      	add	sp, #16
 8001cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <http_dlclient+0xa4>)
}
 8001cda:	b004      	add	sp, #16
 8001cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001ce0:	f024 bd38 	b.w	8026754 <iprintf>
 8001ce4:	200015e0 	.word	0x200015e0
 8001ce8:	20001894 	.word	0x20001894
 8001cec:	200018b4 	.word	0x200018b4
 8001cf0:	080012c9 	.word	0x080012c9
 8001cf4:	08001651 	.word	0x08001651
 8001cf8:	20001650 	.word	0x20001650
 8001cfc:	20001678 	.word	0x20001678
 8001d00:	20001670 	.word	0x20001670
 8001d04:	08001381 	.word	0x08001381
 8001d08:	20003488 	.word	0x20003488
 8001d0c:	0802b6dc 	.word	0x0802b6dc
 8001d10:	20001648 	.word	0x20001648

08001d14 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d18:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d1a:	4c28      	ldr	r4, [pc, #160]	; (8001dbc <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d1e:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d20:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d22:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d24:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d26:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d2a:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001de8 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d30:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d32:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d34:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d36:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d3a:	f023 fd6d 	bl	8025818 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d40:	4f22      	ldr	r7, [pc, #136]	; (8001dcc <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d42:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d44:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d46:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d48:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d4a:	4c21      	ldr	r4, [pc, #132]	; (8001dd0 <hc_open+0xbc>)
 8001d4c:	7833      	ldrb	r3, [r6, #0]
 8001d4e:	5ce2      	ldrb	r2, [r4, r3]
 8001d50:	0751      	lsls	r1, r2, #29
 8001d52:	d101      	bne.n	8001d58 <hc_open+0x44>
 8001d54:	2b2f      	cmp	r3, #47	; 0x2f
 8001d56:	d126      	bne.n	8001da6 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001d58:	4631      	mov	r1, r6
 8001d5a:	481e      	ldr	r0, [pc, #120]	; (8001dd4 <hc_open+0xc0>)
 8001d5c:	f024 ff9a 	bl	8026c94 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001d60:	782b      	ldrb	r3, [r5, #0]
 8001d62:	5ce2      	ldrb	r2, [r4, r3]
 8001d64:	0752      	lsls	r2, r2, #29
 8001d66:	d101      	bne.n	8001d6c <hc_open+0x58>
 8001d68:	2b2f      	cmp	r3, #47	; 0x2f
 8001d6a:	d118      	bne.n	8001d9e <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <hc_open+0xc4>)
 8001d70:	f024 ff90 	bl	8026c94 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
	expectedapage = 1;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <hc_open+0xc8>)
	down_total = 0;
 8001d76:	2400      	movs	r4, #0
 8001d78:	4819      	ldr	r0, [pc, #100]	; (8001de0 <hc_open+0xcc>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d7a:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001d7e:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <hc_open+0xa8>)
 8001d84:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001d88:	6004      	str	r4, [r0, #0]
	expectedapage = 1;
 8001d8a:	2401      	movs	r4, #1
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <hc_open+0xd0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <hc_open+0xc4>)
	expectedapage = 1;
 8001d90:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <hc_open+0xc0>)
 8001d94:	f7ff feec 	bl	8001b70 <httpc_get_file_dns>
			HttpClientPageResultCallback, &connection2);
}
 8001d98:	b004      	add	sp, #16
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <hc_open+0xc4>)
 8001da0:	222f      	movs	r2, #47	; 0x2f
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e7e6      	b.n	8001d74 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001da6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001dec <hc_open+0xd8>
 8001daa:	4e0a      	ldr	r6, [pc, #40]	; (8001dd4 <hc_open+0xc0>)
 8001dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001db0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001db2:	f8dc 3000 	ldr.w	r3, [ip]
 8001db6:	6033      	str	r3, [r6, #0]
 8001db8:	e7d2      	b.n	8001d60 <hc_open+0x4c>
 8001dba:	bf00      	nop
 8001dbc:	200018a4 	.word	0x200018a4
 8001dc0:	20001614 	.word	0x20001614
 8001dc4:	200018b8 	.word	0x200018b8
 8001dc8:	080012c9 	.word	0x080012c9
 8001dcc:	08001581 	.word	0x08001581
 8001dd0:	0804752d 	.word	0x0804752d
 8001dd4:	20001650 	.word	0x20001650
 8001dd8:	20001678 	.word	0x20001678
 8001ddc:	08001799 	.word	0x08001799
 8001de0:	20001670 	.word	0x20001670
 8001de4:	20003488 	.word	0x20003488
 8001de8:	2000164c 	.word	0x2000164c
 8001dec:	0802b704 	.word	0x0802b704

08001df0 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = NOT_LOADING;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df4:	461f      	mov	r7, r3
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <httploader+0xc0>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001df8:	b085      	sub	sp, #20
	dl_filecrc = 0;
 8001dfa:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001ee4 <httploader+0xf4>
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001dfe:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e02:	4605      	mov	r5, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4616      	mov	r6, r2
	addr = (uint32_t) httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e08:	9303      	str	r3, [sp, #12]
	dl_filecrc = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8cc 3000 	str.w	r3, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e16:	d040      	beq.n	8001e9a <httploader+0xaa>
 8001e18:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001ee8 <httploader+0xf8>
 8001e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e20:	f04f 0941 	mov.w	r9, #65	; 0x41
		dl_filecrc = crc1;
 8001e24:	f8cc 2000 	str.w	r2, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e28:	f8c8 3000 	str.w	r3, [r8]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	http_downloading = FLASH_LOADING;
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <httploader+0xc4>)
 8001e2e:	2201      	movs	r2, #1

	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e30:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <httploader+0xc8>)
	http_downloading = FLASH_LOADING;
 8001e32:	601a      	str	r2, [r3, #0]
	writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"DOWNLOADING NEW F/W\"");
 8001e34:	f000 fa38 	bl	80022a8 <writelcdcmd>
	writelcdcmd("xstr 5,136,470,48,2,BLACK,RED,0,1,1,\"DON'T SWITCH OFF...\"");
 8001e38:	4820      	ldr	r0, [pc, #128]	; (8001ebc <httploader+0xcc>)
 8001e3a:	f000 fa35 	bl	80022a8 <writelcdcmd>

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n", filename, host, crc1, crc2);
 8001e3e:	4633      	mov	r3, r6
 8001e40:	4622      	mov	r2, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	9700      	str	r7, [sp, #0]
 8001e46:	481e      	ldr	r0, [pc, #120]	; (8001ec0 <httploader+0xd0>)
 8001e48:	f024 fc84 	bl	8026754 <iprintf>

	flash_memptr = flash_load_address;
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e4c:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <httploader+0xd4>)
	flash_memptr = flash_load_address;
 8001e4e:	4e1e      	ldr	r6, [pc, #120]	; (8001ec8 <httploader+0xd8>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e50:	462a      	mov	r2, r5
	flash_memptr = flash_load_address;
 8001e52:	f8d8 1000 	ldr.w	r1, [r8]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e56:	464b      	mov	r3, r9
 8001e58:	6800      	ldr	r0, [r0, #0]
	flash_memptr = flash_load_address;
 8001e5a:	6031      	str	r1, [r6, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e5c:	9001      	str	r0, [sp, #4]
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <httploader+0xdc>)
	flash_filelength = 0;
 8001e60:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <httploader+0xe0>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e62:	6800      	ldr	r0, [r0, #0]
 8001e64:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e66:	2000      	movs	r0, #0
 8001e68:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <httploader+0xe4>)
 8001e6c:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <httploader+0xe8>)
 8001e6e:	f024 fe5b 	bl	8026b28 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename,
 8001e72:	4623      	mov	r3, r4
 8001e74:	6832      	ldr	r2, [r6, #0]
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <httploader+0xe8>)
 8001e78:	4818      	ldr	r0, [pc, #96]	; (8001edc <httploader+0xec>)
 8001e7a:	f024 fc6b 	bl	8026754 <iprintf>
			flash_memptr, host);
	writelcdcmd("\\r\\rDownloading new STM firmware....");
 8001e7e:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <httploader+0xf0>)
 8001e80:	f000 fa12 	bl	80022a8 <writelcdcmd>

	http_dlclient(newfilename, host, flash_memptr);
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <httploader+0xe8>)
 8001e86:	6832      	ldr	r2, [r6, #0]
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7ff feed 	bl	8001c68 <http_dlclient>
	osDelay(5);
 8001e8e:	2005      	movs	r0, #5
}
 8001e90:	b005      	add	sp, #20
 8001e92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(5);
 8001e96:	f014 bbdf 	b.w	8016658 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e9a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001ee8 <httploader+0xf8>
 8001e9e:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
		break;
 8001ea2:	f04f 0949 	mov.w	r9, #73	; 0x49
		dl_filecrc = crc2;
 8001ea6:	f8cc 7000 	str.w	r7, [ip]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001eaa:	f8c8 3000 	str.w	r3, [r8]
		break;
 8001eae:	e7bd      	b.n	8001e2c <httploader+0x3c>
 8001eb0:	08001df1 	.word	0x08001df1
 8001eb4:	200018bc 	.word	0x200018bc
 8001eb8:	0802b9c0 	.word	0x0802b9c0
 8001ebc:	0802b9fc 	.word	0x0802b9fc
 8001ec0:	0802ba38 	.word	0x0802ba38
 8001ec4:	20002ddc 	.word	0x20002ddc
 8001ec8:	2000085c 	.word	0x2000085c
 8001ecc:	20002160 	.word	0x20002160
 8001ed0:	20000858 	.word	0x20000858
 8001ed4:	0802ba6c 	.word	0x0802ba6c
 8001ed8:	200018c0 	.word	0x200018c0
 8001edc:	0802ba8c 	.word	0x0802ba8c
 8001ee0:	0802bae8 	.word	0x0802bae8
 8001ee4:	20000850 	.word	0x20000850
 8001ee8:	20000004 	.word	0x20000004

08001eec <stm_rx_callback>:

// http callback for stm firmware download
// this gets called for each downloaded chunk received
//
int stm_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("stm_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001ef2:	b362      	cbz	r2, 8001f4e <stm_rx_callback+0x62>
	if (err != ERR_OK) {
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d132      	bne.n	8001f5e <stm_rx_callback+0x72>
 8001ef8:	460f      	mov	r7, r1
 8001efa:	4615      	mov	r5, r2
 8001efc:	4614      	mov	r4, r2
 8001efe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001f9c <stm_rx_callback+0xb0>
	for (q = p; q != NULL; q = q->next) {
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f02:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001fa0 <stm_rx_callback+0xb4>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001f06:	4e20      	ldr	r6, [pc, #128]	; (8001f88 <stm_rx_callback+0x9c>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f08:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001f0c:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f10:	f1bb 0f00 	cmp.w	fp, #0
 8001f14:	d10b      	bne.n	8001f2e <stm_rx_callback+0x42>
 8001f16:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001f1e:	b133      	cbz	r3, 8001f2e <stm_rx_callback+0x42>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001f20:	6860      	ldr	r0, [r4, #4]
 8001f22:	f7ff f83f 	bl	8000fa4 <flash_memwrite>
 8001f26:	4582      	cmp	sl, r0
 8001f28:	d121      	bne.n	8001f6e <stm_rx_callback+0x82>
		down_total += q->len;
 8001f2a:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001f2e:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 8001f30:	4638      	mov	r0, r7
 8001f32:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 8001f34:	4453      	add	r3, sl
 8001f36:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8001f38:	f01a ffc2 	bl	801cec0 <tcp_recved>
		pbuf_free(p);
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f01a fb3f 	bl	801c5c0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8001f42:	6824      	ldr	r4, [r4, #0]
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d1df      	bne.n	8001f08 <stm_rx_callback+0x1c>

//		p = p->next;
//		printf("stm_rx_callback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
	return (0);
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <stm_rx_callback+0xa0>)
 8001f50:	2254      	movs	r2, #84	; 0x54
 8001f52:	490f      	ldr	r1, [pc, #60]	; (8001f90 <stm_rx_callback+0xa4>)
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <stm_rx_callback+0xa8>)
 8001f56:	f024 fbfd 	bl	8026754 <iprintf>
	if (err != ERR_OK) {
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d0f4      	beq.n	8001f48 <stm_rx_callback+0x5c>
		putchar('#');
 8001f5e:	2023      	movs	r0, #35	; 0x23
 8001f60:	f024 fc10 	bl	8026784 <putchar>
		printlwiperr(err);
 8001f64:	4620      	mov	r0, r4
}
 8001f66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8001f6a:	f7ff be61 	b.w	8001c30 <printlwiperr>
				flash_abort = 1;
 8001f6e:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <stm_rx_callback+0xac>)
				flash_memptr = 0;
 8001f72:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 8001f76:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 8001f7a:	f024 fc87 	bl	802688c <puts>
				return (-1);
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	20001670 	.word	0x20001670
 8001f8c:	0802bb10 	.word	0x0802bb10
 8001f90:	08046d44 	.word	0x08046d44
 8001f94:	0802b44c 	.word	0x0802b44c
 8001f98:	0802bb2c 	.word	0x0802bb2c
 8001f9c:	20000854 	.word	0x20000854
 8001fa0:	2000085c 	.word	0x2000085c

08001fa4 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001fa4:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001faa:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	2b95      	cmp	r3, #149	; 0x95
 8001fb0:	dc0d      	bgt.n	8001fce <wait_armtx+0x2a>
 8001fb2:	4c0e      	ldr	r4, [pc, #56]	; (8001fec <wait_armtx+0x48>)
 8001fb4:	e007      	b.n	8001fc6 <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001fb6:	9b01      	ldr	r3, [sp, #4]
 8001fb8:	4403      	add	r3, r0
 8001fba:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001fbc:	f014 fb4c 	bl	8016658 <osDelay>
	while (timeoutcnt < 150) {
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	2b95      	cmp	r3, #149	; 0x95
 8001fc4:	dc03      	bgt.n	8001fce <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001fc6:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d1f3      	bne.n	8001fb6 <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	2bf9      	cmp	r3, #249	; 0xf9
 8001fd2:	dc02      	bgt.n	8001fda <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <wait_armtx+0x4c>)
 8001fdc:	f024 fc56 	bl	802688c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <wait_armtx+0x48>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	601a      	str	r2, [r3, #0]
		return (-1);
 8001fea:	e7f4      	b.n	8001fd6 <wait_armtx+0x32>
 8001fec:	20002154 	.word	0x20002154
 8001ff0:	0802bb50 	.word	0x0802bb50

08001ff4 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_UART_TxCpltCallback+0x14>)
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d000      	beq.n	8002002 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8002000:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_UART_TxCpltCallback+0x18>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40005000 	.word	0x40005000
 8002010:	20002154 	.word	0x20002154

08002014 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8002014:	b570      	push	{r4, r5, r6, lr}
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8002016:	4c1a      	ldr	r4, [pc, #104]	; (8002080 <lcd_uart_init+0x6c>)
	lcdrxoutidx = 0;		// buffer consumer index
 8002018:	2500      	movs	r5, #0
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <lcd_uart_init+0x70>)
void lcd_uart_init(int baud) {
 800201c:	b082      	sub	sp, #8
 800201e:	4606      	mov	r6, r0
	HAL_UART_Abort(&huart5);
 8002020:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8002022:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8002024:	f011 f8d2 	bl	80131cc <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8002028:	4620      	mov	r0, r4
 800202a:	f011 f81d 	bl	8013068 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <lcd_uart_init+0x74>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002030:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002032:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8002034:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002038:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800203c:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002048:	f012 f8ba 	bl	80141c0 <HAL_UART_Init>
 800204c:	b958      	cbnz	r0, 8002066 <lcd_uart_init+0x52>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <lcd_uart_init+0x78>)
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <lcd_uart_init+0x6c>)
 8002054:	f012 faa4 	bl	80145a0 <HAL_UART_Receive_DMA>
 8002058:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 800205c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002060:	b933      	cbnz	r3, 8002070 <lcd_uart_init+0x5c>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8002062:	b002      	add	sp, #8
 8002064:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8002066:	4631      	mov	r1, r6
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <lcd_uart_init+0x7c>)
 800206a:	f024 fb73 	bl	8026754 <iprintf>
 800206e:	e7ee      	b.n	800204e <lcd_uart_init+0x3a>
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002070:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <lcd_uart_init+0x80>)
}
 8002076:	b002      	add	sp, #8
 8002078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_uart_init: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800207c:	f024 bb6a 	b.w	8026754 <iprintf>
 8002080:	20002ba0 	.word	0x20002ba0
 8002084:	20001b18 	.word	0x20001b18
 8002088:	40005000 	.word	0x40005000
 800208c:	20001950 	.word	0x20001950
 8002090:	0802bb64 	.word	0x0802bb64
 8002094:	0802bb94 	.word	0x0802bb94

08002098 <lcd_reset>:


// send reset command to LCD  (LCD's own init will start it again at 9600)
lcd_reset()
{
 8002098:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <lcd_reset+0x48>)
{
 800209c:	b083      	sub	sp, #12

	txdmadone = 0;	// TX is NOT free
 800209e:	4c11      	ldr	r4, [pc, #68]	; (80020e4 <lcd_reset+0x4c>)
 80020a0:	2500      	movs	r5, #0
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a2:	466b      	mov	r3, sp
	txdmadone = 0;	// TX is NOT free
 80020a4:	6025      	str	r5, [r4, #0]
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020a6:	e892 0003 	ldmia.w	r2, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020aa:	2207      	movs	r2, #7
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80020ac:	e883 0003 	stmia.w	r3, {r0, r1}
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020b0:	4619      	mov	r1, r3
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <lcd_reset+0x50>)
 80020b4:	f011 f834 	bl	8013120 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80020b8:	b118      	cbz	r0, 80020c2 <lcd_reset+0x2a>
 80020ba:	e00b      	b.n	80020d4 <lcd_reset+0x3c>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
	}
	while (!(txdmadone)) {
//		printf("lcd_reset: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 80020bc:	2001      	movs	r0, #1
 80020be:	f014 facb 	bl	8016658 <osDelay>
	while (!(txdmadone)) {
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f9      	beq.n	80020bc <lcd_reset+0x24>
	}
	osDelay(500);		// give it time to reset
 80020c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020cc:	f014 fac4 	bl	8016658 <osDelay>
}
 80020d0:	b003      	add	sp, #12
 80020d2:	bd30      	pop	{r4, r5, pc}
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020d4:	4601      	mov	r1, r0
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <lcd_reset+0x54>)
 80020d8:	f024 fb3c 	bl	8026754 <iprintf>
 80020dc:	e7f1      	b.n	80020c2 <lcd_reset+0x2a>
 80020de:	bf00      	nop
 80020e0:	0802bbf8 	.word	0x0802bbf8
 80020e4:	20002154 	.word	0x20002154
 80020e8:	20002ba0 	.word	0x20002ba0
 80020ec:	0802bbc8 	.word	0x0802bbc8

080020f0 <lcd_baud>:

// send baudrate command to LCD
lcd_baud(int baud) {
 80020f0:	b510      	push	{r4, lr}
 80020f2:	b088      	sub	sp, #32
	HAL_StatusTypeDef stat;
	char str[32];
	int i;

	txdmadone = 0;	// TX is NOT free
 80020f4:	2300      	movs	r3, #0
 80020f6:	4c0d      	ldr	r4, [pc, #52]	; (800212c <lcd_baud+0x3c>)
lcd_baud(int baud) {
 80020f8:	4602      	mov	r2, r0
	sprintf(str,"baud=%u\xff\xff\xff",baud);
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <lcd_baud+0x40>)
 80020fc:	4668      	mov	r0, sp
	txdmadone = 0;	// TX is NOT free
 80020fe:	6023      	str	r3, [r4, #0]
	sprintf(str,"baud=%u\xff\xff\xff",baud);
 8002100:	f024 fd12 	bl	8026b28 <siprintf>
	i = strlen(str);
 8002104:	4668      	mov	r0, sp
 8002106:	f7fe f8a5 	bl	8000254 <strlen>
 800210a:	4602      	mov	r2, r0

	stat = HAL_UART_Transmit_DMA(&huart5, str, i);		// if leading nulls on tx line
 800210c:	4669      	mov	r1, sp
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <lcd_baud+0x44>)
 8002110:	b292      	uxth	r2, r2
 8002112:	f011 f805 	bl	8013120 <HAL_UART_Transmit_DMA>
	while (!(txdmadone)) {
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	b92b      	cbnz	r3, 8002126 <lcd_baud+0x36>
//		printf("lcd_baud: waiting for txdmadone\n");
		osDelay(1);		// wait for comms to complete
 800211a:	2001      	movs	r0, #1
 800211c:	f014 fa9c 	bl	8016658 <osDelay>
	while (!(txdmadone)) {
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f9      	beq.n	800211a <lcd_baud+0x2a>
	}
}
 8002126:	b008      	add	sp, #32
 8002128:	bd10      	pop	{r4, pc}
 800212a:	bf00      	nop
 800212c:	20002154 	.word	0x20002154
 8002130:	0802bc00 	.word	0x0802bc00
 8002134:	20002ba0 	.word	0x20002ba0

08002138 <lcd_writeblock>:
	}
	return (stat);
}

// send a binary block to the LCD
int lcd_writeblock(uint8_t *buf, int len) {
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	460e      	mov	r6, r1
	HAL_StatusTypeDef stat;
	volatile int i;
	uint32_t reg;
	uint8_t by;

	if (wait_armtx() == -1)
 800213e:	f7ff ff31 	bl	8001fa4 <wait_armtx>
 8002142:	4604      	mov	r4, r0
 8002144:	3001      	adds	r0, #1
 8002146:	d009      	beq.n	800215c <lcd_writeblock+0x24>
		return (-1);
//	printf("lcd_writeblock: %d\n", len);
	txdmadone = 0;	// TX in progress
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <lcd_writeblock+0x34>)
 800214a:	2400      	movs	r4, #0

//	myhexDump("NXT:", buf, len);

	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 800214c:	b2b2      	uxth	r2, r6
 800214e:	4629      	mov	r1, r5
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <lcd_writeblock+0x38>)
	txdmadone = 0;	// TX in progress
 8002152:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002154:	f010 ffe4 	bl	8013120 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002158:	4604      	mov	r4, r0
	if (stat != HAL_OK) {
 800215a:	b908      	cbnz	r0, 8002160 <lcd_writeblock+0x28>
	}
	return (stat);
}
 800215c:	4620      	mov	r0, r4
 800215e:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002160:	4621      	mov	r1, r4
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <lcd_writeblock+0x3c>)
 8002164:	f024 faf6 	bl	8026754 <iprintf>
}
 8002168:	4620      	mov	r0, r4
 800216a:	bd70      	pop	{r4, r5, r6, pc}
 800216c:	20002154 	.word	0x20002154
 8002170:	20002ba0 	.word	0x20002ba0
 8002174:	0802bc0c 	.word	0x0802bc0c

08002178 <lcd_puts>:

// put a null terminated string
int lcd_puts(char *str) {
 8002178:	b530      	push	{r4, r5, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800217e:	f7ff ff11 	bl	8001fa4 <wait_armtx>
 8002182:	4605      	mov	r5, r0
 8002184:	3001      	adds	r0, #1
 8002186:	d01d      	beq.n	80021c4 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <lcd_puts+0x60>)
 800218c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	5ce3      	ldrb	r3, [r4, r3]
 8002192:	b153      	cbz	r3, 80021aa <lcd_puts+0x32>
		buffer[i] = str[i];
 8002194:	9901      	ldr	r1, [sp, #4]
 8002196:	9a01      	ldr	r2, [sp, #4]
		i++;
 8002198:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800219a:	5c61      	ldrb	r1, [r4, r1]
		i++;
 800219c:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800219e:	5481      	strb	r1, [r0, r2]
		i++;
 80021a0:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	5ce3      	ldrb	r3, [r4, r3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f4      	bne.n	8002194 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80021aa:	9901      	ldr	r1, [sp, #4]
 80021ac:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021ae:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80021b0:	4c0a      	ldr	r4, [pc, #40]	; (80021dc <lcd_puts+0x64>)
	buffer[i] = '\0';
 80021b2:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021b4:	b292      	uxth	r2, r2
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <lcd_puts+0x60>)
 80021b8:	4809      	ldr	r0, [pc, #36]	; (80021e0 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80021ba:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021bc:	f010 ffb0 	bl	8013120 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021c0:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80021c2:	b910      	cbnz	r0, 80021ca <lcd_puts+0x52>
	}
	return (stat);
}
 80021c4:	4628      	mov	r0, r5
 80021c6:	b003      	add	sp, #12
 80021c8:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021ca:	4629      	mov	r1, r5
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <lcd_puts+0x6c>)
 80021ce:	f024 fac1 	bl	8026754 <iprintf>
}
 80021d2:	4628      	mov	r0, r5
 80021d4:	b003      	add	sp, #12
 80021d6:	bd30      	pop	{r4, r5, pc}
 80021d8:	200018f0 	.word	0x200018f0
 80021dc:	20002154 	.word	0x20002154
 80021e0:	20002ba0 	.word	0x20002ba0
 80021e4:	0802bc40 	.word	0x0802bc40

080021e8 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 80021e8:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 80021ea:	2300      	movs	r3, #0
int lcd_rxdma() {
 80021ec:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <lcd_rxdma+0x64>)
	volatile int count = 0;
 80021f0:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 80021f2:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80021f4:	6953      	ldr	r3, [r2, #20]
 80021f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021fa:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 80021fc:	9a01      	ldr	r2, [sp, #4]
 80021fe:	2a80      	cmp	r2, #128	; 0x80
 8002200:	d016      	beq.n	8002230 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002202:	4d13      	ldr	r5, [pc, #76]	; (8002250 <lcd_rxdma+0x68>)
 8002204:	9a01      	ldr	r2, [sp, #4]
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <lcd_rxdma+0x42>
 800220c:	4c11      	ldr	r4, [pc, #68]	; (8002254 <lcd_rxdma+0x6c>)
 800220e:	4812      	ldr	r0, [pc, #72]	; (8002258 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002210:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8002212:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002214:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8002216:	3301      	adds	r3, #1
		count++;
 8002218:	3201      	adds	r2, #1
		return (0);
 800221a:	2b80      	cmp	r3, #128	; 0x80
		count++;
 800221c:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800221e:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8002220:	bfa8      	it	ge
 8002222:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002224:	429a      	cmp	r2, r3
 8002226:	d1f3      	bne.n	8002210 <lcd_rxdma+0x28>
 8002228:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 800222a:	9800      	ldr	r0, [sp, #0]
}
 800222c:	b003      	add	sp, #12
 800222e:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <lcd_rxdma+0x70>)
 8002232:	480a      	ldr	r0, [pc, #40]	; (800225c <lcd_rxdma+0x74>)
 8002234:	f012 f9b4 	bl	80145a0 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8002238:	b910      	cbnz	r0, 8002240 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 800223a:	2300      	movs	r3, #0
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	e7e0      	b.n	8002202 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002240:	4601      	mov	r1, r0
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <lcd_rxdma+0x78>)
 8002244:	f024 fa86 	bl	8026754 <iprintf>
 8002248:	e7f7      	b.n	800223a <lcd_rxdma+0x52>
 800224a:	bf00      	nop
 800224c:	40026000 	.word	0x40026000
 8002250:	20001b18 	.word	0x20001b18
 8002254:	20001a98 	.word	0x20001a98
 8002258:	20001950 	.word	0x20001950
 800225c:	20002ba0 	.word	0x20002ba0
 8002260:	0802bc70 	.word	0x0802bc70

08002264 <lcd_getc>:
int lcd_getc() {
	volatile static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <lcd_getc+0x34>)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <lcd_getc+0x38>)
 8002268:	6811      	ldr	r1, [r2, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4299      	cmp	r1, r3
 800226e:	d00f      	beq.n	8002290 <lcd_getc+0x2c>
		ch = lcdrxbuffer[lastidx];
 8002270:	6810      	ldr	r0, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002272:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002274:	490a      	ldr	r1, [pc, #40]	; (80022a0 <lcd_getc+0x3c>)
	if (++index >= limit)
 8002276:	3301      	adds	r3, #1
		return (0);
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	bfa8      	it	ge
 800227c:	2300      	movge	r3, #0
int lcd_getc() {
 800227e:	b410      	push	{r4}
		ch = lcdrxbuffer[lastidx];
 8002280:	4c08      	ldr	r4, [pc, #32]	; (80022a4 <lcd_getc+0x40>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002282:	6013      	str	r3, [r2, #0]
		rxtimeout = 100;
 8002284:	2364      	movs	r3, #100	; 0x64
		ch = lcdrxbuffer[lastidx];
 8002286:	5c20      	ldrb	r0, [r4, r0]
//  printf("lcd_getc() got %02x\n", ch);
	}

	return (ch);
}
 8002288:	f85d 4b04 	ldr.w	r4, [sp], #4
		rxtimeout = 100;
 800228c:	600b      	str	r3, [r1, #0]
}
 800228e:	4770      	bx	lr
	ch = -1;
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20001a60 	.word	0x20001a60
 800229c:	20001b18 	.word	0x20001b18
 80022a0:	20001f14 	.word	0x20001f14
 80022a4:	20001a98 	.word	0x20001a98

080022a8 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80022a8:	b510      	push	{r4, lr}
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	if (lcd_txblocked)
 80022aa:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <writelcdcmd+0x30>)
int writelcdcmd(char *str) {
 80022ac:	b098      	sub	sp, #96	; 0x60
	if (lcd_txblocked)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	b973      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (-1);

	strcpy(pkt, str);
 80022b2:	4601      	mov	r1, r0
 80022b4:	4668      	mov	r0, sp
 80022b6:	f024 fcc8 	bl	8026c4a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <writelcdcmd+0x34>)
	strcpy(pkt, str);
 80022bc:	4602      	mov	r2, r0
	if (!(lcd_txblocked))
 80022be:	6823      	ldr	r3, [r4, #0]
	strcat(pkt, "\xff\xff\xff");
 80022c0:	6808      	ldr	r0, [r1, #0]
 80022c2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022c4:	b923      	cbnz	r3, 80022d0 <writelcdcmd+0x28>
		return (lcd_puts(pkt));
 80022c6:	4668      	mov	r0, sp
 80022c8:	f7ff ff56 	bl	8002178 <lcd_puts>
	else
		return (-1);
}
 80022cc:	b018      	add	sp, #96	; 0x60
 80022ce:	bd10      	pop	{r4, pc}
		return (-1);
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e7fa      	b.n	80022cc <writelcdcmd+0x24>
 80022d6:	bf00      	nop
 80022d8:	20001a70 	.word	0x20001a70
 80022dc:	0802bbfc 	.word	0x0802bbfc

080022e0 <lcd_gps.part.0>:
//Application specific display stuff
//
//////////////////////////////////////////////////////////////

// send the GPS coords t2.txt Lat,Lon,Grid  t3.txt Sats
void lcd_gps(void) {
 80022e0:	b570      	push	{r4, r5, r6, lr}
	int sats, col;
	static int vis = 0;

	if (our_currentpage != 0)
		return;
	lat = statuspkt.NavPvt.lat / 10000000.0;
 80022e2:	4d4f      	ldr	r5, [pc, #316]	; (8002420 <lcd_gps.part.0+0x140>)
 80022e4:	ed95 7a08 	vldr	s14, [r5, #32]
	lon = statuspkt.NavPvt.lon / 10000000.0;
 80022e8:	ed95 6a07 	vldr	s12, [r5, #28]
	lat = statuspkt.NavPvt.lat / 10000000.0;
 80022ec:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	lon = statuspkt.NavPvt.lon / 10000000.0;
 80022f0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
	lat = statuspkt.NavPvt.lat / 10000000.0;
 80022f4:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8002418 <lcd_gps.part.0+0x138>
void lcd_gps(void) {
 80022f8:	ed2d 8b04 	vpush	{d8-d9}
 80022fc:	b0b4      	sub	sp, #208	; 0xd0
	lon = statuspkt.NavPvt.lon / 10000000.0;
 80022fe:	ee86 8b05 	vdiv.f64	d8, d6, d5
	calcLocator(gridsquare, lat, lon);
 8002302:	a808      	add	r0, sp, #32
	lat = statuspkt.NavPvt.lat / 10000000.0;
 8002304:	ee87 9b05 	vdiv.f64	d9, d7, d5
	calcLocator(gridsquare, lat, lon);
 8002308:	eeb0 1b48 	vmov.f64	d1, d8
 800230c:	eeb0 0b49 	vmov.f64	d0, d9
 8002310:	f003 fb3e 	bl	8005990 <calcLocator>

	if (gpslocked) {
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <lcd_gps.part.0+0x144>)
 8002316:	7819      	ldrb	r1, [r3, #0]
 8002318:	2900      	cmp	r1, #0
 800231a:	d033      	beq.n	8002384 <lcd_gps.part.0+0xa4>
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 800231c:	ae0c      	add	r6, sp, #48	; 0x30
 800231e:	a908      	add	r1, sp, #32
	sprintf(str, "%s=\"%s\"", id, string);
 8002320:	ac1c      	add	r4, sp, #112	; 0x70
		sprintf(str, "Lat: %.06f\\rLon: %.06f\\rGrid: %s", lat, lon, gridsquare);
 8002322:	9102      	str	r1, [sp, #8]
 8002324:	4630      	mov	r0, r6
 8002326:	4940      	ldr	r1, [pc, #256]	; (8002428 <lcd_gps.part.0+0x148>)
 8002328:	ec53 2b19 	vmov	r2, r3, d9
 800232c:	ed8d 8b00 	vstr	d8, [sp]
 8002330:	f024 fbfa 	bl	8026b28 <siprintf>
	volatile int result = 0;
 8002334:	2200      	movs	r2, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002336:	4633      	mov	r3, r6
 8002338:	493c      	ldr	r1, [pc, #240]	; (800242c <lcd_gps.part.0+0x14c>)
	volatile int result = 0;
 800233a:	9204      	str	r2, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 800233c:	4620      	mov	r0, r4
 800233e:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <lcd_gps.part.0+0x150>)
 8002340:	f024 fbf2 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ffaf 	bl	80022a8 <writelcdcmd>
 800234a:	9004      	str	r0, [sp, #16]
	return (result);
 800234c:	9b04      	ldr	r3, [sp, #16]
	} else {
		setlcdtext("t2.txt", "");
	}

	// number of satellites
	sats = statuspkt.NavPvt.numSV;
 800234e:	7eed      	ldrb	r5, [r5, #27]
	sprintf(str, "\\r\\rSats:%u", sats);
 8002350:	4630      	mov	r0, r6
 8002352:	4938      	ldr	r1, [pc, #224]	; (8002434 <lcd_gps.part.0+0x154>)
	sats = statuspkt.NavPvt.numSV;
 8002354:	b2ed      	uxtb	r5, r5
	sprintf(str, "\\r\\rSats:%u", sats);
 8002356:	462a      	mov	r2, r5
 8002358:	f024 fbe6 	bl	8026b28 <siprintf>
	volatile int result = 0;
 800235c:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800235e:	4633      	mov	r3, r6
 8002360:	4a35      	ldr	r2, [pc, #212]	; (8002438 <lcd_gps.part.0+0x158>)
	volatile int result = 0;
 8002362:	9106      	str	r1, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 8002364:	4620      	mov	r0, r4
 8002366:	4931      	ldr	r1, [pc, #196]	; (800242c <lcd_gps.part.0+0x14c>)
 8002368:	f024 fbde 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800236c:	4620      	mov	r0, r4
 800236e:	f7ff ff9b 	bl	80022a8 <writelcdcmd>
	setlcdtext("t4.txt", str);
	if (sats < 4)
 8002372:	2d03      	cmp	r5, #3
	result = writelcdcmd(str);
 8002374:	9006      	str	r0, [sp, #24]
	return (result);
 8002376:	9b06      	ldr	r3, [sp, #24]
	if (sats < 4)
 8002378:	dd13      	ble.n	80023a2 <lcd_gps.part.0+0xc2>
		col = 0xf800;		// red
	else if (sats < 6)
 800237a:	2d05      	cmp	r5, #5
 800237c:	dc36      	bgt.n	80023ec <lcd_gps.part.0+0x10c>
 800237e:	f24f 63c0 	movw	r3, #63168	; 0xf6c0
 8002382:	e010      	b.n	80023a6 <lcd_gps.part.0+0xc6>
	sprintf(str, "%s=\"%s\"", id, string);
 8002384:	ac1c      	add	r4, sp, #112	; 0x70
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <lcd_gps.part.0+0x15c>)
 8002388:	4a29      	ldr	r2, [pc, #164]	; (8002430 <lcd_gps.part.0+0x150>)
 800238a:	ae0c      	add	r6, sp, #48	; 0x30
	volatile int result = 0;
 800238c:	9105      	str	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 800238e:	4620      	mov	r0, r4
 8002390:	4926      	ldr	r1, [pc, #152]	; (800242c <lcd_gps.part.0+0x14c>)
 8002392:	f024 fbc9 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ff86 	bl	80022a8 <writelcdcmd>
 800239c:	9005      	str	r0, [sp, #20]
	return (result);
 800239e:	9b05      	ldr	r3, [sp, #20]
 80023a0:	e7d5      	b.n	800234e <lcd_gps.part.0+0x6e>
 80023a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	sprintf(buffer, "%s=%lu", id, value);
 80023a6:	4a26      	ldr	r2, [pc, #152]	; (8002440 <lcd_gps.part.0+0x160>)
 80023a8:	4620      	mov	r0, r4
 80023aa:	4926      	ldr	r1, [pc, #152]	; (8002444 <lcd_gps.part.0+0x164>)
 80023ac:	f024 fbbc 	bl	8026b28 <siprintf>
	result = writelcdcmd(buffer);
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff ff79 	bl	80022a8 <writelcdcmd>
 80023b6:	9007      	str	r0, [sp, #28]
	if (result == -1) {		// wait for response
 80023b8:	9b07      	ldr	r3, [sp, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	d026      	beq.n	800240c <lcd_gps.part.0+0x12c>
		col = 0xf6c0;		// dark yellow
	else
		col = 0xffff;		// white
	setlcdbin("t4.pco", col);

	if (sats < 5) {
 80023be:	2d04      	cmp	r5, #4
	return (result);
 80023c0:	9b07      	ldr	r3, [sp, #28]
	if (sats < 5) {
 80023c2:	dc05      	bgt.n	80023d0 <lcd_gps.part.0+0xf0>
		if (vis++ & 1)
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <lcd_gps.part.0+0x168>)
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	1c59      	adds	r1, r3, #1
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	6011      	str	r1, [r2, #0]
 80023ce:	d506      	bpl.n	80023de <lcd_gps.part.0+0xfe>
			writelcdcmd("vis t4,1");
 80023d0:	481e      	ldr	r0, [pc, #120]	; (800244c <lcd_gps.part.0+0x16c>)
 80023d2:	f7ff ff69 	bl	80022a8 <writelcdcmd>
		else
			writelcdcmd("vis t4,0");
	} else
		writelcdcmd("vis t4,1");
}
 80023d6:	b034      	add	sp, #208	; 0xd0
 80023d8:	ecbd 8b04 	vpop	{d8-d9}
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
			writelcdcmd("vis t4,0");
 80023de:	481c      	ldr	r0, [pc, #112]	; (8002450 <lcd_gps.part.0+0x170>)
 80023e0:	f7ff ff62 	bl	80022a8 <writelcdcmd>
}
 80023e4:	b034      	add	sp, #208	; 0xd0
 80023e6:	ecbd 8b04 	vpop	{d8-d9}
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
	sprintf(buffer, "%s=%lu", id, value);
 80023ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <lcd_gps.part.0+0x160>)
 80023f2:	4914      	ldr	r1, [pc, #80]	; (8002444 <lcd_gps.part.0+0x164>)
 80023f4:	4620      	mov	r0, r4
 80023f6:	f024 fb97 	bl	8026b28 <siprintf>
	result = writelcdcmd(buffer);
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff ff54 	bl	80022a8 <writelcdcmd>
 8002400:	9007      	str	r0, [sp, #28]
	if (result == -1) {		// wait for response
 8002402:	9b07      	ldr	r3, [sp, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	d001      	beq.n	800240c <lcd_gps.part.0+0x12c>
	return (result);
 8002408:	9b07      	ldr	r3, [sp, #28]
	if (sats < 5) {
 800240a:	e7e1      	b.n	80023d0 <lcd_gps.part.0+0xf0>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800240c:	4811      	ldr	r0, [pc, #68]	; (8002454 <lcd_gps.part.0+0x174>)
 800240e:	f024 f9a1 	bl	8026754 <iprintf>
 8002412:	e7d4      	b.n	80023be <lcd_gps.part.0+0xde>
 8002414:	f3af 8000 	nop.w
 8002418:	00000000 	.word	0x00000000
 800241c:	416312d0 	.word	0x416312d0
 8002420:	20003014 	.word	0x20003014
 8002424:	20003468 	.word	0x20003468
 8002428:	0802bca0 	.word	0x0802bca0
 800242c:	0802bccc 	.word	0x0802bccc
 8002430:	0802bcc4 	.word	0x0802bcc4
 8002434:	0802bcd4 	.word	0x0802bcd4
 8002438:	0802bce0 	.word	0x0802bce0
 800243c:	0802b6b0 	.word	0x0802b6b0
 8002440:	0802bce8 	.word	0x0802bce8
 8002444:	0802bcf0 	.word	0x0802bcf0
 8002448:	20002158 	.word	0x20002158
 800244c:	0802bd10 	.word	0x0802bd10
 8002450:	0802bd1c 	.word	0x0802bd1c
 8002454:	0802bcf8 	.word	0x0802bcf8

08002458 <lcd_clearrxbuf>:
lcd_clearrxbuf() {
 8002458:	b510      	push	{r4, lr}
	lcd_rxdma();			// clear the dma rx buffer
 800245a:	f7ff fec5 	bl	80021e8 <lcd_rxdma>
	if (lastidx != lcdrxoutidx) {		// something there
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <lcd_clearrxbuf+0x40>)
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <lcd_clearrxbuf+0x44>)
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	6809      	ldr	r1, [r1, #0]
 8002466:	428b      	cmp	r3, r1
 8002468:	d014      	beq.n	8002494 <lcd_clearrxbuf+0x3c>
		ch = lcdrxbuffer[lastidx];
 800246a:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 800246c:	2464      	movs	r4, #100	; 0x64
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800246e:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 8002470:	480b      	ldr	r0, [pc, #44]	; (80024a0 <lcd_clearrxbuf+0x48>)
	if (++index >= limit)
 8002472:	3301      	adds	r3, #1
		rxtimeout = 100;
 8002474:	6004      	str	r4, [r0, #0]
		return (0);
 8002476:	2b80      	cmp	r3, #128	; 0x80
 8002478:	bfa8      	it	ge
 800247a:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800247c:	6013      	str	r3, [r2, #0]
	while (result != -1) {
 800247e:	e006      	b.n	800248e <lcd_clearrxbuf+0x36>
		ch = lcdrxbuffer[lastidx];
 8002480:	6813      	ldr	r3, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002482:	6813      	ldr	r3, [r2, #0]
	if (++index >= limit)
 8002484:	3301      	adds	r3, #1
		return (0);
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	bfa8      	it	ge
 800248a:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800248c:	6013      	str	r3, [r2, #0]
	if (lastidx != lcdrxoutidx) {		// something there
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	4299      	cmp	r1, r3
 8002492:	d1f5      	bne.n	8002480 <lcd_clearrxbuf+0x28>
}
 8002494:	bd10      	pop	{r4, pc}
 8002496:	bf00      	nop
 8002498:	20001a60 	.word	0x20001a60
 800249c:	20001b18 	.word	0x20001b18
 80024a0:	20001f14 	.word	0x20001f14

080024a4 <isnexpkt>:
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80024a4:	b530      	push	{r4, r5, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <isnexpkt+0xd0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80024a8:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 80024aa:	4c33      	ldr	r4, [pc, #204]	; (8002578 <isnexpkt+0xd4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d05d      	beq.n	8002570 <isnexpkt+0xcc>
		ch = lcdrxbuffer[lastidx];
 80024b4:	6825      	ldr	r5, [r4, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80024b6:	6823      	ldr	r3, [r4, #0]
		rxtimeout = 100;
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <isnexpkt+0xd8>)
	if (++index >= limit)
 80024ba:	3301      	adds	r3, #1
		return (0);
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	bfa8      	it	ge
 80024c0:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80024c2:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 80024c4:	2364      	movs	r3, #100	; 0x64
		buffer[i++] = ch;
 80024c6:	4c2e      	ldr	r4, [pc, #184]	; (8002580 <isnexpkt+0xdc>)
		rxtimeout = 100;
 80024c8:	6013      	str	r3, [r2, #0]
		ch = lcdrxbuffer[lastidx];
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <isnexpkt+0xe0>)
 80024cc:	5d5b      	ldrb	r3, [r3, r5]
		ch = rawchar & 0xff;
 80024ce:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 80024d2:	7823      	ldrb	r3, [r4, #0]
 80024d4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80024d8:	54c5      	strb	r5, [r0, r3]
 80024da:	3301      	adds	r3, #1
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 80024dc:	4d2a      	ldr	r5, [pc, #168]	; (8002588 <isnexpkt+0xe4>)
		buffer[i++] = ch;
 80024de:	b2db      	uxtb	r3, r3
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 80024e0:	682d      	ldr	r5, [r5, #0]
		buffer[i++] = ch;
 80024e2:	7023      	strb	r3, [r4, #0]
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 80024e4:	2d03      	cmp	r5, #3
 80024e6:	d02c      	beq.n	8002542 <isnexpkt+0x9e>
		if (ch == 0xff) {
 80024e8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80024ec:	2dff      	cmp	r5, #255	; 0xff
 80024ee:	d02e      	beq.n	800254e <isnexpkt+0xaa>
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80024f0:	f89d c007 	ldrb.w	ip, [sp, #7]
 80024f4:	4d25      	ldr	r5, [pc, #148]	; (800258c <isnexpkt+0xe8>)
 80024f6:	f885 c000 	strb.w	ip, [r5]
			termcnt = 0;
 80024fa:	f04f 0c00 	mov.w	ip, #0
 80024fe:	4d24      	ldr	r5, [pc, #144]	; (8002590 <isnexpkt+0xec>)
 8002500:	f885 c000 	strb.w	ip, [r5]
		if (i == size) { // overrun
 8002504:	428b      	cmp	r3, r1
 8002506:	d102      	bne.n	800250e <isnexpkt+0x6a>
			i = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 800250c:	702b      	strb	r3, [r5, #0]
	if (rxtimeout > 0)
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	b97b      	cbnz	r3, 8002532 <isnexpkt+0x8e>
		termcnt = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <isnexpkt+0xec>)
		for (i = 0; i < size; buffer[i++] = 0)
 8002516:	4c1a      	ldr	r4, [pc, #104]	; (8002580 <isnexpkt+0xdc>)
		termcnt = 0;
 8002518:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800251a:	7023      	strb	r3, [r4, #0]
 800251c:	b119      	cbz	r1, 8002526 <isnexpkt+0x82>
 800251e:	460a      	mov	r2, r1
 8002520:	4619      	mov	r1, r3
 8002522:	f023 f979 	bl	8025818 <memset>
		i = 0;
 8002526:	2300      	movs	r3, #0
		return (-1);
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 800252c:	7023      	strb	r3, [r4, #0]
}
 800252e:	b003      	add	sp, #12
 8002530:	bd30      	pop	{r4, r5, pc}
		rxtimeout--;
 8002532:	3b01      	subs	r3, #1
 8002534:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0eb      	beq.n	8002512 <isnexpkt+0x6e>
	return (-2);  // no char available
 800253a:	f06f 0001 	mvn.w	r0, #1
}
 800253e:	b003      	add	sp, #12
 8002540:	bd30      	pop	{r4, r5, pc}
			if (ch == 0x05) {
 8002542:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002546:	2d05      	cmp	r5, #5
 8002548:	d1ce      	bne.n	80024e8 <isnexpkt+0x44>
				index = i;
 800254a:	4618      	mov	r0, r3
				return (index);
 800254c:	e7ef      	b.n	800252e <isnexpkt+0x8a>
			termcnt++;
 800254e:	4d10      	ldr	r5, [pc, #64]	; (8002590 <isnexpkt+0xec>)
 8002550:	f895 c000 	ldrb.w	ip, [r5]
 8002554:	f10c 0c01 	add.w	ip, ip, #1
 8002558:	fa5f fc8c 	uxtb.w	ip, ip
			if (termcnt == 3) {
 800255c:	f1bc 0f03 	cmp.w	ip, #3
			termcnt++;
 8002560:	f885 c000 	strb.w	ip, [r5]
			if (termcnt == 3) {
 8002564:	d1ce      	bne.n	8002504 <isnexpkt+0x60>
				i = 0;
 8002566:	2200      	movs	r2, #0
				index = i;
 8002568:	4618      	mov	r0, r3
				i = 0;
 800256a:	7022      	strb	r2, [r4, #0]
				termcnt = 0;
 800256c:	702a      	strb	r2, [r5, #0]
				return (index);
 800256e:	e7de      	b.n	800252e <isnexpkt+0x8a>
 8002570:	4a02      	ldr	r2, [pc, #8]	; (800257c <isnexpkt+0xd8>)
 8002572:	e7cc      	b.n	800250e <isnexpkt+0x6a>
 8002574:	20001b18 	.word	0x20001b18
 8002578:	20001a60 	.word	0x20001a60
 800257c:	20001f14 	.word	0x20001f14
 8002580:	20001a58 	.word	0x20001a58
 8002584:	20001a98 	.word	0x20001a98
 8002588:	200018bc 	.word	0x200018bc
 800258c:	20001f10 	.word	0x20001f10
 8002590:	20001f40 	.word	0x20001f40

08002594 <decode_lcdtype>:
	const char next[] = { "NX" };
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <decode_lcdtype+0x98>)
 8002596:	6813      	ldr	r3, [r2, #0]
int decode_lcdtype(char *str) {
 8002598:	b570      	push	{r4, r5, r6, lr}
	const char next[] = { "NX" };
 800259a:	0c1a      	lsrs	r2, r3, #16
int decode_lcdtype(char *str) {
 800259c:	b082      	sub	sp, #8
	nex_model[i] = '\0';
 800259e:	4e24      	ldr	r6, [pc, #144]	; (8002630 <decode_lcdtype+0x9c>)
 80025a0:	2400      	movs	r4, #0
	const char next[] = { "NX" };
 80025a2:	f88d 2006 	strb.w	r2, [sp, #6]
	nex_model[i] = '\0';
 80025a6:	7034      	strb	r4, [r6, #0]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 80025a8:	7802      	ldrb	r2, [r0, #0]
	const char next[] = { "NX" };
 80025aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 80025ae:	1e53      	subs	r3, r2, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2bfd      	cmp	r3, #253	; 0xfd
 80025b4:	d81a      	bhi.n	80025ec <decode_lcdtype+0x58>
 80025b6:	4605      	mov	r5, r0
 80025b8:	4601      	mov	r1, r0
 80025ba:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 80025be:	f1c0 0e01 	rsb	lr, r0, #1
 80025c2:	e00b      	b.n	80025dc <decode_lcdtype+0x48>
		if (str[i++] == next[j]) {
 80025c4:	f104 0308 	add.w	r3, r4, #8
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 80025c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (str[i++] == next[j]) {
 80025cc:	eb0d 0c03 	add.w	ip, sp, r3
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 80025d0:	1e53      	subs	r3, r2, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2bfd      	cmp	r3, #253	; 0xfd
 80025d6:	d809      	bhi.n	80025ec <decode_lcdtype+0x58>
		if (str[i++] == next[j]) {
 80025d8:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 80025dc:	eb0e 0301 	add.w	r3, lr, r1
 80025e0:	4594      	cmp	ip, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	d1ee      	bne.n	80025c4 <decode_lcdtype+0x30>
			if (j >= 2) {		// found N...X
 80025e6:	b924      	cbnz	r4, 80025f2 <decode_lcdtype+0x5e>
 80025e8:	2401      	movs	r4, #1
 80025ea:	e7eb      	b.n	80025c4 <decode_lcdtype+0x30>
	return (0);
 80025ec:	2000      	movs	r0, #0
}
 80025ee:	b002      	add	sp, #8
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
				nex_model[k++] = 'M';
 80025f2:	f645 024d 	movw	r2, #22605	; 0x584d
 80025f6:	8032      	strh	r2, [r6, #0]
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 80025f8:	5cea      	ldrb	r2, [r5, r3]
 80025fa:	442b      	add	r3, r5
 80025fc:	1e51      	subs	r1, r2, #1
 80025fe:	b2c9      	uxtb	r1, r1
 8002600:	29fd      	cmp	r1, #253	; 0xfd
 8002602:	d80f      	bhi.n	8002624 <decode_lcdtype+0x90>
 8002604:	2a2c      	cmp	r2, #44	; 0x2c
 8002606:	d00d      	beq.n	8002624 <decode_lcdtype+0x90>
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <decode_lcdtype+0xa0>)
 800260a:	e001      	b.n	8002610 <decode_lcdtype+0x7c>
 800260c:	2a2c      	cmp	r2, #44	; 0x2c
 800260e:	d009      	beq.n	8002624 <decode_lcdtype+0x90>
					nex_model[k++] = str[i++];
 8002610:	eb03 000e 	add.w	r0, r3, lr
 8002614:	f804 2f01 	strb.w	r2, [r4, #1]!
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002618:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800261c:	1e51      	subs	r1, r2, #1
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	29fd      	cmp	r1, #253	; 0xfd
 8002622:	d9f3      	bls.n	800260c <decode_lcdtype+0x78>
				nex_model[i] = '\0';
 8002624:	2300      	movs	r3, #0
 8002626:	5433      	strb	r3, [r6, r0]
}
 8002628:	b002      	add	sp, #8
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	0802bd2c 	.word	0x0802bd2c
 8002630:	20001b30 	.word	0x20001b30
 8002634:	20001b31 	.word	0x20001b31

08002638 <lcd_gps>:
	if (our_currentpage != 0)
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <lcd_gps+0xc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b103      	cbz	r3, 8002640 <lcd_gps+0x8>
}
 800263e:	4770      	bx	lr
 8002640:	f7ff be4e 	b.w	80022e0 <lcd_gps.part.0>
 8002644:	20001d28 	.word	0x20001d28

08002648 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8002648:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <lcd_time+0xac>)
 800264a:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800264e:	482a      	ldr	r0, [pc, #168]	; (80026f8 <lcd_time+0xb0>)
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	6852      	ldr	r2, [r2, #4]
 8002654:	185b      	adds	r3, r3, r1
 8002656:	f142 0200 	adc.w	r2, r2, #0
void lcd_time() {
 800265a:	b530      	push	{r4, r5, lr}
 800265c:	b09f      	sub	sp, #124	; 0x7c
	timeinfo = *localtime(&localepochtime);
 800265e:	4c27      	ldr	r4, [pc, #156]	; (80026fc <lcd_time+0xb4>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8002660:	2500      	movs	r5, #0
 8002662:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 8002666:	f022 ff77 	bl	8025558 <localtime>
 800266a:	4684      	mov	ip, r0
 800266c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	f8dc 1000 	ldr.w	r1, [ip]
 800267c:	4623      	mov	r3, r4
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 800267e:	4a20      	ldr	r2, [pc, #128]	; (8002700 <lcd_time+0xb8>)
	timeinfo = *localtime(&localepochtime);
 8002680:	f843 1920 	str.w	r1, [r3], #-32
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 8002684:	2128      	movs	r1, #40	; 0x28
 8002686:	481f      	ldr	r0, [pc, #124]	; (8002704 <lcd_time+0xbc>)
 8002688:	f025 f844 	bl	8027714 <strftime>
	sprintf(str, "%s=\"%s\"", id, string);
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <lcd_time+0xbc>)
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <lcd_time+0xc0>)
 8002690:	a806      	add	r0, sp, #24
 8002692:	491e      	ldr	r1, [pc, #120]	; (800270c <lcd_time+0xc4>)
	volatile int result = 0;
 8002694:	9500      	str	r5, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002696:	f024 fa47 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800269a:	a806      	add	r0, sp, #24
 800269c:	f7ff fe04 	bl	80022a8 <writelcdcmd>
	setlcdtext("t0.txt", sbuffer);

	if (gpslocked) {
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <lcd_time+0xc8>)
	result = writelcdcmd(str);
 80026a2:	9000      	str	r0, [sp, #0]
	if (gpslocked) {
 80026a4:	781c      	ldrb	r4, [r3, #0]
	return (result);
 80026a6:	9b00      	ldr	r3, [sp, #0]
	if (gpslocked) {
 80026a8:	b144      	cbz	r4, 80026bc <lcd_time+0x74>
		writelcdcmd("vis t3,0");	// hide warning
 80026aa:	481a      	ldr	r0, [pc, #104]	; (8002714 <lcd_time+0xcc>)
 80026ac:	f7ff fdfc 	bl	80022a8 <writelcdcmd>
		writelcdcmd("vis t1,1");	// show date
 80026b0:	4819      	ldr	r0, [pc, #100]	; (8002718 <lcd_time+0xd0>)
		writelcdcmd("vis t1,0");	// hide date
		sprintf(str, "UNLOCK GPS %d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80026b2:	b01f      	add	sp, #124	; 0x7c
 80026b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writelcdcmd("vis t1,1");	// show date
 80026b8:	f7ff bdf6 	b.w	80022a8 <writelcdcmd>
		writelcdcmd("vis t1,0");	// hide date
 80026bc:	4817      	ldr	r0, [pc, #92]	; (800271c <lcd_time+0xd4>)
 80026be:	f7ff fdf3 	bl	80022a8 <writelcdcmd>
		sprintf(str, "UNLOCK GPS %d", statuspkt.NavPvt.numSV);
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <lcd_time+0xd8>)
 80026c4:	4917      	ldr	r1, [pc, #92]	; (8002724 <lcd_time+0xdc>)
 80026c6:	a802      	add	r0, sp, #8
 80026c8:	7eda      	ldrb	r2, [r3, #27]
 80026ca:	f024 fa2d 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80026ce:	ab02      	add	r3, sp, #8
 80026d0:	4a15      	ldr	r2, [pc, #84]	; (8002728 <lcd_time+0xe0>)
 80026d2:	a806      	add	r0, sp, #24
 80026d4:	490d      	ldr	r1, [pc, #52]	; (800270c <lcd_time+0xc4>)
	volatile int result = 0;
 80026d6:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 80026d8:	f024 fa26 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80026dc:	a806      	add	r0, sp, #24
 80026de:	f7ff fde3 	bl	80022a8 <writelcdcmd>
 80026e2:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 80026e4:	4811      	ldr	r0, [pc, #68]	; (800272c <lcd_time+0xe4>)
	result = writelcdcmd(str);
 80026e6:	9301      	str	r3, [sp, #4]
	return (result);
 80026e8:	9b01      	ldr	r3, [sp, #4]
		writelcdcmd("vis t3,1");
 80026ea:	f7ff fddd 	bl	80022a8 <writelcdcmd>
}
 80026ee:	b01f      	add	sp, #124	; 0x7c
 80026f0:	bd30      	pop	{r4, r5, pc}
 80026f2:	bf00      	nop
 80026f4:	20002ec8 	.word	0x20002ec8
 80026f8:	20001b28 	.word	0x20001b28
 80026fc:	20001f44 	.word	0x20001f44
 8002700:	0802bd30 	.word	0x0802bd30
 8002704:	20001f18 	.word	0x20001f18
 8002708:	0802bd3c 	.word	0x0802bd3c
 800270c:	0802bccc 	.word	0x0802bccc
 8002710:	20003468 	.word	0x20003468
 8002714:	0802bd44 	.word	0x0802bd44
 8002718:	0802bd50 	.word	0x0802bd50
 800271c:	0802bd5c 	.word	0x0802bd5c
 8002720:	20003014 	.word	0x20003014
 8002724:	0802bd68 	.word	0x0802bd68
 8002728:	0802bd78 	.word	0x0802bd78
 800272c:	0802bd80 	.word	0x0802bd80

08002730 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <lcd_date+0x38>)
 8002732:	490e      	ldr	r1, [pc, #56]	; (800276c <lcd_date+0x3c>)
 8002734:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <lcd_date+0x40>)
void lcd_date() {
 8002738:	b510      	push	{r4, lr}
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 800273a:	4c0e      	ldr	r4, [pc, #56]	; (8002774 <lcd_date+0x44>)
void lcd_date() {
 800273c:	b09a      	sub	sp, #104	; 0x68
	lastday = timeinfo.tm_yday;
 800273e:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8002740:	2128      	movs	r1, #40	; 0x28
 8002742:	4620      	mov	r0, r4
 8002744:	f024 ffe6 	bl	8027714 <strftime>
	volatile int result = 0;
 8002748:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 800274a:	4623      	mov	r3, r4
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <lcd_date+0x48>)
 800274e:	490b      	ldr	r1, [pc, #44]	; (800277c <lcd_date+0x4c>)
	volatile int result = 0;
 8002750:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002752:	a802      	add	r0, sp, #8
 8002754:	f024 f9e8 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002758:	a802      	add	r0, sp, #8
 800275a:	f7ff fda5 	bl	80022a8 <writelcdcmd>
 800275e:	9001      	str	r0, [sp, #4]
	return (result);
 8002760:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", sbuffer);
}
 8002762:	b01a      	add	sp, #104	; 0x68
 8002764:	bd10      	pop	{r4, pc}
 8002766:	bf00      	nop
 8002768:	20001f44 	.word	0x20001f44
 800276c:	20001a5c 	.word	0x20001a5c
 8002770:	0802bd8c 	.word	0x0802bd8c
 8002774:	20001f18 	.word	0x20001f18
 8002778:	0802bd9c 	.word	0x0802bd9c
 800277c:	0802bccc 	.word	0x0802bccc

08002780 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8002780:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8002782:	4c9b      	ldr	r4, [pc, #620]	; (80029f0 <lcd_showvars+0x270>)
void lcd_showvars() {
 8002784:	b0c4      	sub	sp, #272	; 0x110
	switch (toggle) {
 8002786:	8823      	ldrh	r3, [r4, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d827      	bhi.n	80027dc <lcd_showvars+0x5c>
 800278c:	e8df f003 	tbb	[pc, r3]
 8002790:	0228509a 	.word	0x0228509a
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002794:	4b97      	ldr	r3, [pc, #604]	; (80029f4 <lcd_showvars+0x274>)
 8002796:	4998      	ldr	r1, [pc, #608]	; (80029f8 <lcd_showvars+0x278>)
 8002798:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 800279c:	6808      	ldr	r0, [r1, #0]
 800279e:	9204      	str	r2, [sp, #16]
 80027a0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80027a4:	9203      	str	r2, [sp, #12]
 80027a6:	f242 7230 	movw	r2, #10032	; 0x2730
 80027aa:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80027ae:	2312      	movs	r3, #18
 80027b0:	e9cd 2000 	strd	r2, r0, [sp]
 80027b4:	2200      	movs	r2, #0
 80027b6:	9102      	str	r1, [sp, #8]
 80027b8:	a814      	add	r0, sp, #80	; 0x50
 80027ba:	4990      	ldr	r1, [pc, #576]	; (80029fc <lcd_showvars+0x27c>)
	volatile int result = 0;
 80027bc:	4615      	mov	r5, r2
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 80027be:	f024 f9b3 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80027c2:	ab14      	add	r3, sp, #80	; 0x50
 80027c4:	4a8e      	ldr	r2, [pc, #568]	; (8002a00 <lcd_showvars+0x280>)
 80027c6:	498f      	ldr	r1, [pc, #572]	; (8002a04 <lcd_showvars+0x284>)
 80027c8:	a82c      	add	r0, sp, #176	; 0xb0
	volatile int result = 0;
 80027ca:	9513      	str	r5, [sp, #76]	; 0x4c
	sprintf(str, "%s=\"%s\"", id, string);
 80027cc:	f024 f9ac 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80027d0:	a82c      	add	r0, sp, #176	; 0xb0
 80027d2:	f7ff fd69 	bl	80022a8 <writelcdcmd>
 80027d6:	9013      	str	r0, [sp, #76]	; 0x4c
	return (result);
 80027d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
		toggle = 0;
 80027da:	8025      	strh	r5, [r4, #0]
		break;
	}
}
 80027dc:	b044      	add	sp, #272	; 0x110
 80027de:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80027e0:	4e89      	ldr	r6, [pc, #548]	; (8002a08 <lcd_showvars+0x288>)
	volatile int result = 0;
 80027e2:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80027e4:	4989      	ldr	r1, [pc, #548]	; (8002a0c <lcd_showvars+0x28c>)
 80027e6:	a814      	add	r0, sp, #80	; 0x50
 80027e8:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 80027ea:	f024 f99d 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80027ee:	ab14      	add	r3, sp, #80	; 0x50
 80027f0:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <lcd_showvars+0x290>)
 80027f2:	a82c      	add	r0, sp, #176	; 0xb0
 80027f4:	4983      	ldr	r1, [pc, #524]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 80027f6:	9512      	str	r5, [sp, #72]	; 0x48
	sprintf(str, "%s=\"%s\"", id, string);
 80027f8:	f024 f996 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80027fc:	a82c      	add	r0, sp, #176	; 0xb0
 80027fe:	f7ff fd53 	bl	80022a8 <writelcdcmd>
 8002802:	9012      	str	r0, [sp, #72]	; 0x48
	return (result);
 8002804:	9b12      	ldr	r3, [sp, #72]	; 0x48
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8002806:	a814      	add	r0, sp, #80	; 0x50
 8002808:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800280a:	4980      	ldr	r1, [pc, #512]	; (8002a0c <lcd_showvars+0x28c>)
 800280c:	f024 f98c 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002810:	ab14      	add	r3, sp, #80	; 0x50
 8002812:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <lcd_showvars+0x294>)
 8002814:	a82c      	add	r0, sp, #176	; 0xb0
 8002816:	497b      	ldr	r1, [pc, #492]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002818:	9511      	str	r5, [sp, #68]	; 0x44
	sprintf(str, "%s=\"%s\"", id, string);
 800281a:	f024 f985 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800281e:	a82c      	add	r0, sp, #176	; 0xb0
 8002820:	f7ff fd42 	bl	80022a8 <writelcdcmd>
		toggle = 3;
 8002824:	2303      	movs	r3, #3
	result = writelcdcmd(str);
 8002826:	9011      	str	r0, [sp, #68]	; 0x44
		toggle = 3;
 8002828:	8023      	strh	r3, [r4, #0]
	return (result);
 800282a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 800282c:	b044      	add	sp, #272	; 0x110
 800282e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8002830:	4e75      	ldr	r6, [pc, #468]	; (8002a08 <lcd_showvars+0x288>)
	volatile int result = 0;
 8002832:	2500      	movs	r5, #0
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8002834:	4975      	ldr	r1, [pc, #468]	; (8002a0c <lcd_showvars+0x28c>)
 8002836:	a814      	add	r0, sp, #80	; 0x50
 8002838:	7ef2      	ldrb	r2, [r6, #27]
 800283a:	f024 f975 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800283e:	ab14      	add	r3, sp, #80	; 0x50
 8002840:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <lcd_showvars+0x298>)
 8002842:	a82c      	add	r0, sp, #176	; 0xb0
 8002844:	496f      	ldr	r1, [pc, #444]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002846:	9510      	str	r5, [sp, #64]	; 0x40
	sprintf(str, "%s=\"%s\"", id, string);
 8002848:	f024 f96e 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800284c:	a82c      	add	r0, sp, #176	; 0xb0
 800284e:	f7ff fd2b 	bl	80022a8 <writelcdcmd>
 8002852:	9010      	str	r0, [sp, #64]	; 0x40
	return (result);
 8002854:	9b10      	ldr	r3, [sp, #64]	; 0x40
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8002856:	a814      	add	r0, sp, #80	; 0x50
 8002858:	6a32      	ldr	r2, [r6, #32]
 800285a:	496c      	ldr	r1, [pc, #432]	; (8002a0c <lcd_showvars+0x28c>)
 800285c:	f024 f964 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002860:	ab14      	add	r3, sp, #80	; 0x50
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <lcd_showvars+0x29c>)
 8002864:	a82c      	add	r0, sp, #176	; 0xb0
 8002866:	4967      	ldr	r1, [pc, #412]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002868:	950f      	str	r5, [sp, #60]	; 0x3c
	sprintf(str, "%s=\"%s\"", id, string);
 800286a:	f024 f95d 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800286e:	a82c      	add	r0, sp, #176	; 0xb0
 8002870:	f7ff fd1a 	bl	80022a8 <writelcdcmd>
 8002874:	900f      	str	r0, [sp, #60]	; 0x3c
	return (result);
 8002876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8002878:	a814      	add	r0, sp, #80	; 0x50
 800287a:	69f2      	ldr	r2, [r6, #28]
 800287c:	4963      	ldr	r1, [pc, #396]	; (8002a0c <lcd_showvars+0x28c>)
 800287e:	f024 f953 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002882:	ab14      	add	r3, sp, #80	; 0x50
 8002884:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <lcd_showvars+0x2a0>)
 8002886:	a82c      	add	r0, sp, #176	; 0xb0
 8002888:	495e      	ldr	r1, [pc, #376]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 800288a:	950e      	str	r5, [sp, #56]	; 0x38
	sprintf(str, "%s=\"%s\"", id, string);
 800288c:	f024 f94c 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002890:	a82c      	add	r0, sp, #176	; 0xb0
 8002892:	f7ff fd09 	bl	80022a8 <writelcdcmd>
 8002896:	900e      	str	r0, [sp, #56]	; 0x38
	return (result);
 8002898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800289a:	a814      	add	r0, sp, #80	; 0x50
 800289c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800289e:	495b      	ldr	r1, [pc, #364]	; (8002a0c <lcd_showvars+0x28c>)
 80028a0:	f024 f942 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028a4:	ab14      	add	r3, sp, #80	; 0x50
 80028a6:	4a5f      	ldr	r2, [pc, #380]	; (8002a24 <lcd_showvars+0x2a4>)
 80028a8:	a82c      	add	r0, sp, #176	; 0xb0
 80028aa:	4956      	ldr	r1, [pc, #344]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028ac:	950d      	str	r5, [sp, #52]	; 0x34
	sprintf(str, "%s=\"%s\"", id, string);
 80028ae:	f024 f93b 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80028b2:	a82c      	add	r0, sp, #176	; 0xb0
 80028b4:	f7ff fcf8 	bl	80022a8 <writelcdcmd>
		toggle = 2;
 80028b8:	2302      	movs	r3, #2
	result = writelcdcmd(str);
 80028ba:	900d      	str	r0, [sp, #52]	; 0x34
		toggle = 2;
 80028bc:	8023      	strh	r3, [r4, #0]
	return (result);
 80028be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 80028c0:	b044      	add	sp, #272	; 0x110
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <lcd_showvars+0x2a8>)
	volatile int result = 0;
 80028c6:	2500      	movs	r5, #0
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028c8:	a814      	add	r0, sp, #80	; 0x50
		sprintf(str, "%d", statuspkt.uid);
 80028ca:	4e4f      	ldr	r6, [pc, #316]	; (8002a08 <lcd_showvars+0x288>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	0e11      	lsrs	r1, r2, #24
 80028d0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80028d4:	e9cd 3100 	strd	r3, r1, [sp]
 80028d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80028dc:	4953      	ldr	r1, [pc, #332]	; (8002a2c <lcd_showvars+0x2ac>)
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f024 f922 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80028e4:	ab14      	add	r3, sp, #80	; 0x50
 80028e6:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <lcd_showvars+0x2b0>)
 80028e8:	a82c      	add	r0, sp, #176	; 0xb0
 80028ea:	4946      	ldr	r1, [pc, #280]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 80028ec:	950c      	str	r5, [sp, #48]	; 0x30
	sprintf(str, "%s=\"%s\"", id, string);
 80028ee:	f024 f91b 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80028f2:	a82c      	add	r0, sp, #176	; 0xb0
 80028f4:	f7ff fcd8 	bl	80022a8 <writelcdcmd>
 80028f8:	900c      	str	r0, [sp, #48]	; 0x30
	return (result);
 80028fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		sprintf(str, "%d", statuspkt.uid);
 80028fc:	a814      	add	r0, sp, #80	; 0x50
 80028fe:	f8b6 205c 	ldrh.w	r2, [r6, #92]	; 0x5c
 8002902:	4942      	ldr	r1, [pc, #264]	; (8002a0c <lcd_showvars+0x28c>)
 8002904:	b292      	uxth	r2, r2
 8002906:	f024 f90f 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 800290a:	ab14      	add	r3, sp, #80	; 0x50
 800290c:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <lcd_showvars+0x2b4>)
 800290e:	a82c      	add	r0, sp, #176	; 0xb0
 8002910:	493c      	ldr	r1, [pc, #240]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002912:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(str, "%s=\"%s\"", id, string);
 8002914:	f024 f908 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002918:	a82c      	add	r0, sp, #176	; 0xb0
 800291a:	f7ff fcc5 	bl	80022a8 <writelcdcmd>
 800291e:	900b      	str	r0, [sp, #44]	; 0x2c
	return (result);
 8002920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sprintf(str, "%d", statuspkt.adcpktssent);
 8002922:	a814      	add	r0, sp, #80	; 0x50
 8002924:	f8b6 205e 	ldrh.w	r2, [r6, #94]	; 0x5e
 8002928:	4938      	ldr	r1, [pc, #224]	; (8002a0c <lcd_showvars+0x28c>)
 800292a:	b292      	uxth	r2, r2
 800292c:	f024 f8fc 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002930:	ab14      	add	r3, sp, #80	; 0x50
 8002932:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <lcd_showvars+0x2b8>)
 8002934:	a82c      	add	r0, sp, #176	; 0xb0
 8002936:	4933      	ldr	r1, [pc, #204]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002938:	950a      	str	r5, [sp, #40]	; 0x28
	sprintf(str, "%s=\"%s\"", id, string);
 800293a:	f024 f8f5 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 800293e:	a82c      	add	r0, sp, #176	; 0xb0
 8002940:	f7ff fcb2 	bl	80022a8 <writelcdcmd>
 8002944:	900a      	str	r0, [sp, #40]	; 0x28
	return (result);
 8002946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 8002948:	a814      	add	r0, sp, #80	; 0x50
 800294a:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <lcd_showvars+0x2bc>)
 800294c:	492f      	ldr	r1, [pc, #188]	; (8002a0c <lcd_showvars+0x28c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002954:	f024 f8e8 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002958:	ab14      	add	r3, sp, #80	; 0x50
 800295a:	4a39      	ldr	r2, [pc, #228]	; (8002a40 <lcd_showvars+0x2c0>)
 800295c:	a82c      	add	r0, sp, #176	; 0xb0
 800295e:	4929      	ldr	r1, [pc, #164]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002960:	9509      	str	r5, [sp, #36]	; 0x24
	sprintf(str, "%s=\"%s\"", id, string);
 8002962:	f024 f8e1 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002966:	a82c      	add	r0, sp, #176	; 0xb0
 8002968:	f7ff fc9e 	bl	80022a8 <writelcdcmd>
 800296c:	9009      	str	r0, [sp, #36]	; 0x24
	return (result);
 800296e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002970:	a814      	add	r0, sp, #80	; 0x50
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <lcd_showvars+0x2c4>)
 8002974:	4925      	ldr	r1, [pc, #148]	; (8002a0c <lcd_showvars+0x28c>)
 8002976:	f9b3 2000 	ldrsh.w	r2, [r3]
 800297a:	2a00      	cmp	r2, #0
 800297c:	bfb8      	it	lt
 800297e:	4252      	neglt	r2, r2
 8002980:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002984:	f024 f8d0 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002988:	ab14      	add	r3, sp, #80	; 0x50
 800298a:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <lcd_showvars+0x2c8>)
 800298c:	a82c      	add	r0, sp, #176	; 0xb0
 800298e:	491d      	ldr	r1, [pc, #116]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 8002990:	9508      	str	r5, [sp, #32]
	sprintf(str, "%s=\"%s\"", id, string);
 8002992:	f024 f8c9 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002996:	a82c      	add	r0, sp, #176	; 0xb0
 8002998:	f7ff fc86 	bl	80022a8 <writelcdcmd>
 800299c:	9008      	str	r0, [sp, #32]
	return (result);
 800299e:	9b08      	ldr	r3, [sp, #32]
		sprintf(str, "%d", pgagain);	// gain
 80029a0:	a814      	add	r0, sp, #80	; 0x50
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <lcd_showvars+0x2cc>)
 80029a4:	4919      	ldr	r1, [pc, #100]	; (8002a0c <lcd_showvars+0x28c>)
 80029a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029aa:	f024 f8bd 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029ae:	ab14      	add	r3, sp, #80	; 0x50
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <lcd_showvars+0x2d0>)
 80029b2:	a82c      	add	r0, sp, #176	; 0xb0
 80029b4:	4913      	ldr	r1, [pc, #76]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029b6:	9507      	str	r5, [sp, #28]
	sprintf(str, "%s=\"%s\"", id, string);
 80029b8:	f024 f8b6 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80029bc:	a82c      	add	r0, sp, #176	; 0xb0
 80029be:	f7ff fc73 	bl	80022a8 <writelcdcmd>
 80029c2:	9007      	str	r0, [sp, #28]
	return (result);
 80029c4:	9b07      	ldr	r3, [sp, #28]
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 80029c6:	a814      	add	r0, sp, #80	; 0x50
 80029c8:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 80029ca:	4910      	ldr	r1, [pc, #64]	; (8002a0c <lcd_showvars+0x28c>)
 80029cc:	f024 f8ac 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 80029d0:	ab14      	add	r3, sp, #80	; 0x50
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <lcd_showvars+0x2d4>)
 80029d4:	a82c      	add	r0, sp, #176	; 0xb0
 80029d6:	490b      	ldr	r1, [pc, #44]	; (8002a04 <lcd_showvars+0x284>)
	volatile int result = 0;
 80029d8:	9506      	str	r5, [sp, #24]
	sprintf(str, "%s=\"%s\"", id, string);
 80029da:	f024 f8a5 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 80029de:	a82c      	add	r0, sp, #176	; 0xb0
 80029e0:	f7ff fc62 	bl	80022a8 <writelcdcmd>
		toggle = 1;
 80029e4:	2301      	movs	r3, #1
	result = writelcdcmd(str);
 80029e6:	9006      	str	r0, [sp, #24]
		toggle = 1;
 80029e8:	8023      	strh	r3, [r4, #0]
	return (result);
 80029ea:	9b06      	ldr	r3, [sp, #24]
}
 80029ec:	b044      	add	sp, #272	; 0x110
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	20001f68 	.word	0x20001f68
 80029f4:	1ff0f000 	.word	0x1ff0f000
 80029f8:	20002160 	.word	0x20002160
 80029fc:	0802bdf4 	.word	0x0802bdf4
 8002a00:	0802be20 	.word	0x0802be20
 8002a04:	0802bccc 	.word	0x0802bccc
 8002a08:	20003014 	.word	0x20003014
 8002a0c:	0802be58 	.word	0x0802be58
 8002a10:	0802bce0 	.word	0x0802bce0
 8002a14:	0802bdec 	.word	0x0802bdec
 8002a18:	0802bd3c 	.word	0x0802bd3c
 8002a1c:	0802bd9c 	.word	0x0802bd9c
 8002a20:	0802bcc4 	.word	0x0802bcc4
 8002a24:	0802bd78 	.word	0x0802bd78
 8002a28:	20002dd4 	.word	0x20002dd4
 8002a2c:	0802bda4 	.word	0x0802bda4
 8002a30:	0802bdb4 	.word	0x0802bdb4
 8002a34:	0802bdbc 	.word	0x0802bdbc
 8002a38:	0802bdc4 	.word	0x0802bdc4
 8002a3c:	2000070c 	.word	0x2000070c
 8002a40:	0802bdcc 	.word	0x0802bdcc
 8002a44:	20000760 	.word	0x20000760
 8002a48:	0802bdd4 	.word	0x0802bdd4
 8002a4c:	200033f0 	.word	0x200033f0
 8002a50:	0802bddc 	.word	0x0802bddc
 8002a54:	0802bde4 	.word	0x0802bde4

08002a58 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8002a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a5c:	b0a7      	sub	sp, #156	; 0x9c
	volatile int result = 0;
 8002a5e:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <lcd_trigcharts+0x130>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8002a62:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002a66:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <lcd_trigcharts+0x134>)
 8002a68:	a80e      	add	r0, sp, #56	; 0x38
 8002a6a:	4949      	ldr	r1, [pc, #292]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002a6c:	9405      	str	r4, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a6e:	f024 f85b 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002a72:	a80e      	add	r0, sp, #56	; 0x38
 8002a74:	4f47      	ldr	r7, [pc, #284]	; (8002b94 <lcd_trigcharts+0x13c>)
 8002a76:	f7ff fc17 	bl	80022a8 <writelcdcmd>
 8002a7a:	9005      	str	r0, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <lcd_trigcharts+0x130>)
 8002a7e:	a80e      	add	r0, sp, #56	; 0x38
 8002a80:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <lcd_trigcharts+0x140>)
	return (result);
 8002a82:	9905      	ldr	r1, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a84:	4942      	ldr	r1, [pc, #264]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002a86:	9404      	str	r4, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a88:	f024 f84e 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002a8c:	a80e      	add	r0, sp, #56	; 0x38
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002a8e:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002bd0 <lcd_trigcharts+0x178>
	result = writelcdcmd(str);
 8002a92:	f7ff fc09 	bl	80022a8 <writelcdcmd>
 8002a96:	9004      	str	r0, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <lcd_trigcharts+0x144>)
 8002a9a:	a80e      	add	r0, sp, #56	; 0x38
 8002a9c:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <lcd_trigcharts+0x148>)
	return (result);
 8002a9e:	9904      	ldr	r1, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aa0:	493b      	ldr	r1, [pc, #236]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002aa2:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aa4:	f024 f840 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002aa8:	a80e      	add	r0, sp, #56	; 0x38
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002aaa:	4e3e      	ldr	r6, [pc, #248]	; (8002ba4 <lcd_trigcharts+0x14c>)
	result = writelcdcmd(str);
 8002aac:	f7ff fbfc 	bl	80022a8 <writelcdcmd>
 8002ab0:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <lcd_trigcharts+0x144>)
 8002ab4:	a80e      	add	r0, sp, #56	; 0x38
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <lcd_trigcharts+0x150>)
	return (result);
 8002ab8:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002aba:	4935      	ldr	r1, [pc, #212]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002abc:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002abe:	f024 f833 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002ac2:	a80e      	add	r0, sp, #56	; 0x38
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002ac4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002bd4 <lcd_trigcharts+0x17c>
	result = writelcdcmd(str);
 8002ac8:	f7ff fbee 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <lcd_trigcharts+0x154>)
	result = writelcdcmd(str);
 8002ace:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002ad0:	a806      	add	r0, sp, #24
	return (result);
 8002ad2:	9a02      	ldr	r2, [sp, #8]
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002ad4:	4936      	ldr	r1, [pc, #216]	; (8002bb0 <lcd_trigcharts+0x158>)
 8002ad6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002ad8:	f024 f826 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002adc:	ab06      	add	r3, sp, #24
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <lcd_trigcharts+0x15c>)
 8002ae0:	a80e      	add	r0, sp, #56	; 0x38
 8002ae2:	492b      	ldr	r1, [pc, #172]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002ae4:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ae6:	f024 f81f 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002aea:	a80e      	add	r0, sp, #56	; 0x38
 8002aec:	f7ff fbdc 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <lcd_trigcharts+0x160>)
	result = writelcdcmd(str);
 8002af2:	9001      	str	r0, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002af4:	a806      	add	r0, sp, #24
 8002af6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002afa:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <lcd_trigcharts+0x158>)
 8002afc:	2a00      	cmp	r2, #0
	return (result);
 8002afe:	9b01      	ldr	r3, [sp, #4]
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002b00:	bfb8      	it	lt
 8002b02:	4252      	neglt	r2, r2
 8002b04:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002b08:	f024 f80e 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002b0c:	ab06      	add	r3, sp, #24
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <lcd_trigcharts+0x164>)
 8002b10:	a80e      	add	r0, sp, #56	; 0x38
 8002b12:	491f      	ldr	r1, [pc, #124]	; (8002b90 <lcd_trigcharts+0x138>)
	volatile int result = 0;
 8002b14:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002b16:	f024 f807 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002b1a:	a80e      	add	r0, sp, #56	; 0x38
 8002b1c:	f7ff fbc4 	bl	80022a8 <writelcdcmd>
 8002b20:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002b22:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <lcd_trigcharts+0x168>)
	result = writelcdcmd(str);
 8002b24:	9300      	str	r3, [sp, #0]
	return (result);
 8002b26:	9b00      	ldr	r3, [sp, #0]
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8002b28:	f7ff fbbe 	bl	80022a8 <writelcdcmd>
	buffi = trigindex;
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <lcd_trigcharts+0x16c>)
 8002b2e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002b30:	e01c      	b.n	8002b6c <lcd_trigcharts+0x114>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b32:	f819 2004 	ldrb.w	r2, [r9, r4]
 8002b36:	f023 fff7 	bl	8026b28 <siprintf>
		writelcdcmd(str);
 8002b3a:	a806      	add	r0, sp, #24
 8002b3c:	f7ff fbb4 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002b40:	200f      	movs	r0, #15
 8002b42:	f013 fd89 	bl	8016658 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002b46:	f818 2004 	ldrb.w	r2, [r8, r4]
 8002b4a:	491f      	ldr	r1, [pc, #124]	; (8002bc8 <lcd_trigcharts+0x170>)
 8002b4c:	a806      	add	r0, sp, #24
 8002b4e:	f023 ffeb 	bl	8026b28 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002b52:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002b54:	a806      	add	r0, sp, #24
 8002b56:	f7ff fba7 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f013 fd7c 	bl	8016658 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002b60:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002b64:	bfc8      	it	gt
 8002b66:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002b68:	3d01      	subs	r5, #1
 8002b6a:	d007      	beq.n	8002b7c <lcd_trigcharts+0x124>
		if (our_currentpage != 2)		// impatient user
 8002b6c:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002b6e:	4631      	mov	r1, r6
 8002b70:	a806      	add	r0, sp, #24
		if (our_currentpage != 2)		// impatient user
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d0dd      	beq.n	8002b32 <lcd_trigcharts+0xda>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002b76:	b027      	add	sp, #156	; 0x9c
 8002b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <lcd_trigcharts+0x174>)
 8002b7e:	f7ff fb93 	bl	80022a8 <writelcdcmd>
}
 8002b82:	b027      	add	sp, #156	; 0x9c
 8002b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b88:	0802be28 	.word	0x0802be28
 8002b8c:	0802bd78 	.word	0x0802bd78
 8002b90:	0802bccc 	.word	0x0802bccc
 8002b94:	20001d28 	.word	0x20001d28
 8002b98:	0802be34 	.word	0x0802be34
 8002b9c:	0802be3c 	.word	0x0802be3c
 8002ba0:	0802bce0 	.word	0x0802bce0
 8002ba4:	0802be50 	.word	0x0802be50
 8002ba8:	0802bd9c 	.word	0x0802bd9c
 8002bac:	20003014 	.word	0x20003014
 8002bb0:	0802be58 	.word	0x0802be58
 8002bb4:	0802bd3c 	.word	0x0802bd3c
 8002bb8:	20000760 	.word	0x20000760
 8002bbc:	0802bcc4 	.word	0x0802bcc4
 8002bc0:	0802be44 	.word	0x0802be44
 8002bc4:	20001f6c 	.word	0x20001f6c
 8002bc8:	0802be5c 	.word	0x0802be5c
 8002bcc:	0802be68 	.word	0x0802be68
 8002bd0:	20001f70 	.word	0x20001f70
 8002bd4:	20001b48 	.word	0x20001b48

08002bd8 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8002bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002bdc:	4956      	ldr	r1, [pc, #344]	; (8002d38 <lcd_trigplot+0x160>)
void lcd_trigplot() {
 8002bde:	b0a7      	sub	sp, #156	; 0x9c
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002be0:	4d56      	ldr	r5, [pc, #344]	; (8002d3c <lcd_trigplot+0x164>)
 8002be2:	680b      	ldr	r3, [r1, #0]
 8002be4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8002be6:	4e56      	ldr	r6, [pc, #344]	; (8002d40 <lcd_trigplot+0x168>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8002be8:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002bea:	4856      	ldr	r0, [pc, #344]	; (8002d44 <lcd_trigplot+0x16c>)
	val = abs(meanwindiff) & 0xfff;
 8002bec:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8002bf0:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8002bf2:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8002bf6:	4c54      	ldr	r4, [pc, #336]	; (8002d48 <lcd_trigplot+0x170>)
 8002bf8:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002bfa:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8002bfc:	4f53      	ldr	r7, [pc, #332]	; (8002d4c <lcd_trigplot+0x174>)
 8002bfe:	bfa8      	it	ge
 8002c00:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002c02:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002c04:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002d88 <lcd_trigplot+0x1b0>
	val = abs(meanwindiff) & 0xfff;
 8002c08:	bfb8      	it	lt
 8002c0a:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8002c0c:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002c10:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002c16:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002c18:	2b77      	cmp	r3, #119	; 0x77
 8002c1a:	bfa8      	it	ge
 8002c1c:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c1e:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002c20:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002c24:	d00c      	beq.n	8002c40 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002c26:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002c28:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8002c2c:	da03      	bge.n	8002c36 <lcd_trigplot+0x5e>
	trigindex++;
 8002c2e:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002c30:	b027      	add	sp, #156	; 0x9c
 8002c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		trigindex = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	6023      	str	r3, [r4, #0]
}
 8002c3a:	b027      	add	sp, #156	; 0x9c
 8002c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	volatile int result = 0;
 8002c40:	f04f 0900 	mov.w	r9, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002c44:	4b42      	ldr	r3, [pc, #264]	; (8002d50 <lcd_trigplot+0x178>)
 8002c46:	4a43      	ldr	r2, [pc, #268]	; (8002d54 <lcd_trigplot+0x17c>)
 8002c48:	a80e      	add	r0, sp, #56	; 0x38
 8002c4a:	4943      	ldr	r1, [pc, #268]	; (8002d58 <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c4c:	f8cd 9014 	str.w	r9, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c50:	f023 ff6a 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002c54:	a80e      	add	r0, sp, #56	; 0x38
 8002c56:	f7ff fb27 	bl	80022a8 <writelcdcmd>
 8002c5a:	9005      	str	r0, [sp, #20]
	return (result);
 8002c5c:	9b05      	ldr	r3, [sp, #20]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c5e:	a80e      	add	r0, sp, #56	; 0x38
 8002c60:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <lcd_trigplot+0x178>)
 8002c62:	4a3e      	ldr	r2, [pc, #248]	; (8002d5c <lcd_trigplot+0x184>)
 8002c64:	493c      	ldr	r1, [pc, #240]	; (8002d58 <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c66:	f8cd 9010 	str.w	r9, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c6a:	f023 ff5d 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002c6e:	a80e      	add	r0, sp, #56	; 0x38
 8002c70:	f7ff fb1a 	bl	80022a8 <writelcdcmd>
 8002c74:	9004      	str	r0, [sp, #16]
	return (result);
 8002c76:	9b04      	ldr	r3, [sp, #16]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c78:	a80e      	add	r0, sp, #56	; 0x38
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <lcd_trigplot+0x188>)
 8002c7c:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <lcd_trigplot+0x18c>)
 8002c7e:	4936      	ldr	r1, [pc, #216]	; (8002d58 <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c80:	f8cd 900c 	str.w	r9, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c84:	f023 ff50 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002c88:	a80e      	add	r0, sp, #56	; 0x38
 8002c8a:	f7ff fb0d 	bl	80022a8 <writelcdcmd>
 8002c8e:	9003      	str	r0, [sp, #12]
	return (result);
 8002c90:	9b03      	ldr	r3, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c92:	a80e      	add	r0, sp, #56	; 0x38
 8002c94:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <lcd_trigplot+0x188>)
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <lcd_trigplot+0x190>)
 8002c98:	492f      	ldr	r1, [pc, #188]	; (8002d58 <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002c9a:	f8cd 9008 	str.w	r9, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002c9e:	f023 ff43 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002ca2:	a80e      	add	r0, sp, #56	; 0x38
 8002ca4:	f7ff fb00 	bl	80022a8 <writelcdcmd>
 8002ca8:	9002      	str	r0, [sp, #8]
	return (result);
 8002caa:	9b02      	ldr	r3, [sp, #8]
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002cac:	a806      	add	r0, sp, #24
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	492e      	ldr	r1, [pc, #184]	; (8002d6c <lcd_trigplot+0x194>)
 8002cb2:	5cfa      	ldrb	r2, [r7, r3]
 8002cb4:	f023 ff38 	bl	8026b28 <siprintf>
		writelcdcmd(str);
 8002cb8:	a806      	add	r0, sp, #24
 8002cba:	f7ff faf5 	bl	80022a8 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	492b      	ldr	r1, [pc, #172]	; (8002d70 <lcd_trigplot+0x198>)
 8002cc2:	a806      	add	r0, sp, #24
 8002cc4:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002cc8:	f023 ff2e 	bl	8026b28 <siprintf>
		writelcdcmd(str);
 8002ccc:	a806      	add	r0, sp, #24
 8002cce:	f7ff faeb 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002cd2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002cd4:	4927      	ldr	r1, [pc, #156]	; (8002d74 <lcd_trigplot+0x19c>)
 8002cd6:	a806      	add	r0, sp, #24
 8002cd8:	f023 ff26 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002cdc:	ab06      	add	r3, sp, #24
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <lcd_trigplot+0x1a0>)
 8002ce0:	a80e      	add	r0, sp, #56	; 0x38
 8002ce2:	491d      	ldr	r1, [pc, #116]	; (8002d58 <lcd_trigplot+0x180>)
	volatile int result = 0;
 8002ce4:	f8cd 9004 	str.w	r9, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ce8:	f023 ff1e 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002cec:	a80e      	add	r0, sp, #56	; 0x38
 8002cee:	f7ff fadb 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002cf2:	f9b6 2000 	ldrsh.w	r2, [r6]
	result = writelcdcmd(str);
 8002cf6:	9001      	str	r0, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002cf8:	a806      	add	r0, sp, #24
 8002cfa:	2a00      	cmp	r2, #0
 8002cfc:	491d      	ldr	r1, [pc, #116]	; (8002d74 <lcd_trigplot+0x19c>)
	return (result);
 8002cfe:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002d00:	bfb8      	it	lt
 8002d02:	4252      	neglt	r2, r2
 8002d04:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002d08:	f023 ff0e 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002d0c:	4912      	ldr	r1, [pc, #72]	; (8002d58 <lcd_trigplot+0x180>)
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <lcd_trigplot+0x1a4>)
 8002d10:	ab06      	add	r3, sp, #24
 8002d12:	a80e      	add	r0, sp, #56	; 0x38
	volatile int result = 0;
 8002d14:	f8cd 9000 	str.w	r9, [sp]
	sprintf(str, "%s=\"%s\"", id, string);
 8002d18:	f023 ff06 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002d1c:	a80e      	add	r0, sp, #56	; 0x38
 8002d1e:	f7ff fac3 	bl	80022a8 <writelcdcmd>
 8002d22:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002d24:	4816      	ldr	r0, [pc, #88]	; (8002d80 <lcd_trigplot+0x1a8>)
	result = writelcdcmd(str);
 8002d26:	9300      	str	r3, [sp, #0]
	return (result);
 8002d28:	9b00      	ldr	r3, [sp, #0]
		writelcdcmd("vis t3,1");
 8002d2a:	f7ff fabd 	bl	80022a8 <writelcdcmd>
		writelcdcmd("vis t4,1");
 8002d2e:	4815      	ldr	r0, [pc, #84]	; (8002d84 <lcd_trigplot+0x1ac>)
 8002d30:	f7ff faba 	bl	80022a8 <writelcdcmd>
	trigindex++;
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	e776      	b.n	8002c26 <lcd_trigplot+0x4e>
 8002d38:	20001a64 	.word	0x20001a64
 8002d3c:	20003014 	.word	0x20003014
 8002d40:	20000760 	.word	0x20000760
 8002d44:	20001d28 	.word	0x20001d28
 8002d48:	20001f6c 	.word	0x20001f6c
 8002d4c:	20001f70 	.word	0x20001f70
 8002d50:	0802be28 	.word	0x0802be28
 8002d54:	0802bd78 	.word	0x0802bd78
 8002d58:	0802bccc 	.word	0x0802bccc
 8002d5c:	0802be34 	.word	0x0802be34
 8002d60:	0802be3c 	.word	0x0802be3c
 8002d64:	0802bce0 	.word	0x0802bce0
 8002d68:	0802bd9c 	.word	0x0802bd9c
 8002d6c:	0802be50 	.word	0x0802be50
 8002d70:	0802be5c 	.word	0x0802be5c
 8002d74:	0802be58 	.word	0x0802be58
 8002d78:	0802bd3c 	.word	0x0802bd3c
 8002d7c:	0802bcc4 	.word	0x0802bcc4
 8002d80:	0802bd80 	.word	0x0802bd80
 8002d84:	0802bd10 	.word	0x0802bd10
 8002d88:	20001b48 	.word	0x20001b48

08002d8c <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d90:	b0a4      	sub	sp, #144	; 0x90
	volatile int result = 0;
 8002d92:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <lcd_presscharts+0xbc>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002d96:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	sprintf(str, "%s=\"%s\"", id, string);
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <lcd_presscharts+0xc0>)
 8002d9c:	a80c      	add	r0, sp, #48	; 0x30
 8002d9e:	492c      	ldr	r1, [pc, #176]	; (8002e50 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002da0:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002da2:	f023 fec1 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002da6:	a80c      	add	r0, sp, #48	; 0x30
 8002da8:	4f2a      	ldr	r7, [pc, #168]	; (8002e54 <lcd_presscharts+0xc8>)
 8002daa:	f7ff fa7d 	bl	80022a8 <writelcdcmd>
 8002dae:	9003      	str	r0, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <lcd_presscharts+0xbc>)
 8002db2:	a80c      	add	r0, sp, #48	; 0x30
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <lcd_presscharts+0xcc>)
	return (result);
 8002db6:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002db8:	4925      	ldr	r1, [pc, #148]	; (8002e50 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002dba:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dbc:	f023 feb4 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002dc0:	a80c      	add	r0, sp, #48	; 0x30
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002dc2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002e7c <lcd_presscharts+0xf0>
	result = writelcdcmd(str);
 8002dc6:	f7ff fa6f 	bl	80022a8 <writelcdcmd>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <lcd_presscharts+0xd0>)
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <lcd_presscharts+0xd4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
	result = writelcdcmd(str);
 8002dd0:	9002      	str	r0, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dd2:	a804      	add	r0, sp, #16
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	089b      	lsrs	r3, r3, #2
	return (result);
 8002dd8:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002dda:	4922      	ldr	r1, [pc, #136]	; (8002e64 <lcd_presscharts+0xd8>)
 8002ddc:	f023 fea4 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002de0:	ab04      	add	r3, sp, #16
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <lcd_presscharts+0xdc>)
 8002de4:	a80c      	add	r0, sp, #48	; 0x30
 8002de6:	491a      	ldr	r1, [pc, #104]	; (8002e50 <lcd_presscharts+0xc4>)
	volatile int result = 0;
 8002de8:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002dea:	f023 fe9d 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002dee:	a80c      	add	r0, sp, #48	; 0x30
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002df0:	4e1e      	ldr	r6, [pc, #120]	; (8002e6c <lcd_presscharts+0xe0>)
	result = writelcdcmd(str);
 8002df2:	f7ff fa59 	bl	80022a8 <writelcdcmd>
 8002df6:	4603      	mov	r3, r0
	writelcdcmd("b2.bco=123");		// normal grey
 8002df8:	481d      	ldr	r0, [pc, #116]	; (8002e70 <lcd_presscharts+0xe4>)
	result = writelcdcmd(str);
 8002dfa:	9301      	str	r3, [sp, #4]
	return (result);
 8002dfc:	9b01      	ldr	r3, [sp, #4]
	writelcdcmd("b2.bco=123");		// normal grey
 8002dfe:	f7ff fa53 	bl	80022a8 <writelcdcmd>
	buffi = pressindex;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <lcd_presscharts+0xe8>)
 8002e04:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002e06:	e010      	b.n	8002e2a <lcd_presscharts+0x9e>
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e08:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002e0c:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e0e:	f023 fe8b 	bl	8026b28 <siprintf>
		writelcdcmd(str);
 8002e12:	a804      	add	r0, sp, #16
 8002e14:	f7ff fa48 	bl	80022a8 <writelcdcmd>
		osDelay(15);
 8002e18:	200f      	movs	r0, #15
 8002e1a:	f013 fc1d 	bl	8016658 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002e1e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002e22:	bfc8      	it	gt
 8002e24:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8002e26:	3d01      	subs	r5, #1
 8002e28:	d007      	beq.n	8002e3a <lcd_presscharts+0xae>
		if (our_currentpage != 3)		// impatient user
 8002e2a:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002e2c:	4631      	mov	r1, r6
 8002e2e:	a804      	add	r0, sp, #16
		if (our_currentpage != 3)		// impatient user
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d0e9      	beq.n	8002e08 <lcd_presscharts+0x7c>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8002e34:	b024      	add	sp, #144	; 0x90
 8002e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002e3a:	480f      	ldr	r0, [pc, #60]	; (8002e78 <lcd_presscharts+0xec>)
 8002e3c:	f7ff fa34 	bl	80022a8 <writelcdcmd>
}
 8002e40:	b024      	add	sp, #144	; 0x90
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e46:	bf00      	nop
 8002e48:	0802be78 	.word	0x0802be78
 8002e4c:	0802bd78 	.word	0x0802bd78
 8002e50:	0802bccc 	.word	0x0802bccc
 8002e54:	20001d28 	.word	0x20001d28
 8002e58:	0802be34 	.word	0x0802be34
 8002e5c:	200033f4 	.word	0x200033f4
 8002e60:	200033f8 	.word	0x200033f8
 8002e64:	0802be84 	.word	0x0802be84
 8002e68:	0802bd3c 	.word	0x0802bd3c
 8002e6c:	0802be50 	.word	0x0802be50
 8002e70:	0802be44 	.word	0x0802be44
 8002e74:	20001d2c 	.word	0x20001d2c
 8002e78:	0802be68 	.word	0x0802be68
 8002e7c:	20001d30 	.word	0x20001d30

08002e80 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8002e80:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e82:	4d31      	ldr	r5, [pc, #196]	; (8002f48 <lcd_pressplot+0xc8>)
void lcd_pressplot() {
 8002e84:	b0a4      	sub	sp, #144	; 0x90
	p = pressure;
 8002e86:	4c31      	ldr	r4, [pc, #196]	; (8002f4c <lcd_pressplot+0xcc>)

	p = pressure * 1000 + pf;
 8002e88:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e8c:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8002e8e:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e90:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8002e92:	482f      	ldr	r0, [pc, #188]	; (8002f50 <lcd_pressplot+0xd0>)
	p = pressure;
 8002e94:	9100      	str	r1, [sp, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002e96:	9201      	str	r2, [sp, #4]
	p = pressure * 1000 + pf;
 8002e98:	9b01      	ldr	r3, [sp, #4]
 8002e9a:	fb06 3301 	mla	r3, r6, r1, r3
 8002e9e:	9300      	str	r3, [sp, #0]
	if (p < 93000)
 8002ea0:	9b00      	ldr	r3, [sp, #0]
 8002ea2:	4283      	cmp	r3, r0
 8002ea4:	dc01      	bgt.n	8002eaa <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <lcd_pressplot+0xd4>)
 8002ea8:	9300      	str	r3, [sp, #0]
	if (p > 103000)
 8002eaa:	9a00      	ldr	r2, [sp, #0]
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <lcd_pressplot+0xd8>)
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dd00      	ble.n	8002eb4 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002eb2:	9b00      	ldr	r3, [sp, #0]

	p = p - 93000;
 8002eb4:	9900      	ldr	r1, [sp, #0]
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <lcd_pressplot+0xdc>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002eb8:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <lcd_pressplot+0xe0>)
	p = p - 93000;
 8002eba:	440b      	add	r3, r1
 8002ebc:	9300      	str	r3, [sp, #0]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002ebe:	9b00      	ldr	r3, [sp, #0]
 8002ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec4:	17db      	asrs	r3, r3, #31
 8002ec6:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002eca:	9302      	str	r3, [sp, #8]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002ecc:	9b02      	ldr	r3, [sp, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da01      	bge.n	8002ed6 <lcd_pressplot+0x56>
		val = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9302      	str	r3, [sp, #8]
	if (val >= 240)
 8002ed6:	9b02      	ldr	r3, [sp, #8]
 8002ed8:	2bef      	cmp	r3, #239	; 0xef
 8002eda:	dd01      	ble.n	8002ee0 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002edc:	23ef      	movs	r3, #239	; 0xef
 8002ede:	9302      	str	r3, [sp, #8]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ee0:	4920      	ldr	r1, [pc, #128]	; (8002f64 <lcd_pressplot+0xe4>)
	pressvec[pressindex] = val;
 8002ee2:	9a02      	ldr	r2, [sp, #8]
 8002ee4:	4e20      	ldr	r6, [pc, #128]	; (8002f68 <lcd_pressplot+0xe8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ee6:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002ee8:	6833      	ldr	r3, [r6, #0]
 8002eea:	4820      	ldr	r0, [pc, #128]	; (8002f6c <lcd_pressplot+0xec>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002eec:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002eee:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002ef0:	d007      	beq.n	8002f02 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002ef2:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002ef4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002ef8:	bfa8      	it	ge
 8002efa:	2300      	movge	r3, #0
 8002efc:	6033      	str	r3, [r6, #0]
}
 8002efe:	b024      	add	sp, #144	; 0x90
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	491a      	ldr	r1, [pc, #104]	; (8002f70 <lcd_pressplot+0xf0>)
 8002f06:	a804      	add	r0, sp, #16
 8002f08:	f023 fe0e 	bl	8026b28 <siprintf>
		writelcdcmd(str);
 8002f0c:	a804      	add	r0, sp, #16
 8002f0e:	f7ff f9cb 	bl	80022a8 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	a804      	add	r0, sp, #16
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	4916      	ldr	r1, [pc, #88]	; (8002f74 <lcd_pressplot+0xf4>)
 8002f1c:	f023 fe04 	bl	8026b28 <siprintf>
	volatile int result = 0;
 8002f20:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002f22:	ab04      	add	r3, sp, #16
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <lcd_pressplot+0xf8>)
	volatile int result = 0;
 8002f26:	9103      	str	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002f28:	a80c      	add	r0, sp, #48	; 0x30
 8002f2a:	4914      	ldr	r1, [pc, #80]	; (8002f7c <lcd_pressplot+0xfc>)
 8002f2c:	f023 fdfc 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002f30:	a80c      	add	r0, sp, #48	; 0x30
 8002f32:	f7ff f9b9 	bl	80022a8 <writelcdcmd>
 8002f36:	4603      	mov	r3, r0
		writelcdcmd("vis t3,1");
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <lcd_pressplot+0x100>)
	result = writelcdcmd(str);
 8002f3a:	9303      	str	r3, [sp, #12]
	return (result);
 8002f3c:	9b03      	ldr	r3, [sp, #12]
		writelcdcmd("vis t3,1");
 8002f3e:	f7ff f9b3 	bl	80022a8 <writelcdcmd>
	pressindex++;
 8002f42:	6833      	ldr	r3, [r6, #0]
 8002f44:	e7d5      	b.n	8002ef2 <lcd_pressplot+0x72>
 8002f46:	bf00      	nop
 8002f48:	200033f4 	.word	0x200033f4
 8002f4c:	200033f8 	.word	0x200033f8
 8002f50:	00016b47 	.word	0x00016b47
 8002f54:	00016b48 	.word	0x00016b48
 8002f58:	00019258 	.word	0x00019258
 8002f5c:	fffe94b8 	.word	0xfffe94b8
 8002f60:	63e7063f 	.word	0x63e7063f
 8002f64:	20001d28 	.word	0x20001d28
 8002f68:	20001d2c 	.word	0x20001d2c
 8002f6c:	20001d30 	.word	0x20001d30
 8002f70:	0802be50 	.word	0x0802be50
 8002f74:	0802be84 	.word	0x0802be84
 8002f78:	0802bd3c 	.word	0x0802bd3c
 8002f7c:	0802bccc 	.word	0x0802bccc
 8002f80:	0802bd80 	.word	0x0802bd80

08002f84 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8002f84:	b510      	push	{r4, lr}
	unsigned char str[48];

	osDelay(100);
 8002f86:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002f88:	b0a8      	sub	sp, #160	; 0xa0
	osDelay(100);
 8002f8a:	f013 fb65 	bl	8016658 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <lcd_controls+0x88>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d001      	beq.n	8002f9a <lcd_controls+0x16>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8002f96:	b028      	add	sp, #160	; 0xa0
 8002f98:	bd10      	pop	{r4, pc}
	volatile int result = 0;
 8002f9a:	2400      	movs	r4, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <lcd_controls+0x8c>)
 8002f9e:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <lcd_controls+0x90>)
 8002fa0:	a810      	add	r0, sp, #64	; 0x40
 8002fa2:	491d      	ldr	r1, [pc, #116]	; (8003018 <lcd_controls+0x94>)
	volatile int result = 0;
 8002fa4:	9403      	str	r4, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fa6:	f023 fdbf 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002faa:	a810      	add	r0, sp, #64	; 0x40
 8002fac:	f7ff f97c 	bl	80022a8 <writelcdcmd>
 8002fb0:	9003      	str	r0, [sp, #12]
	return (result);
 8002fb2:	9903      	ldr	r1, [sp, #12]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fb4:	a810      	add	r0, sp, #64	; 0x40
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <lcd_controls+0x98>)
 8002fb8:	4a19      	ldr	r2, [pc, #100]	; (8003020 <lcd_controls+0x9c>)
 8002fba:	4917      	ldr	r1, [pc, #92]	; (8003018 <lcd_controls+0x94>)
	volatile int result = 0;
 8002fbc:	9402      	str	r4, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fbe:	f023 fdb3 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002fc2:	a810      	add	r0, sp, #64	; 0x40
 8002fc4:	f7ff f970 	bl	80022a8 <writelcdcmd>
 8002fc8:	9002      	str	r0, [sp, #8]
	return (result);
 8002fca:	9902      	ldr	r1, [sp, #8]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fcc:	a810      	add	r0, sp, #64	; 0x40
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <lcd_controls+0xa0>)
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <lcd_controls+0xa4>)
 8002fd2:	4911      	ldr	r1, [pc, #68]	; (8003018 <lcd_controls+0x94>)
	volatile int result = 0;
 8002fd4:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002fd6:	f023 fda7 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002fda:	a810      	add	r0, sp, #64	; 0x40
 8002fdc:	f7ff f964 	bl	80022a8 <writelcdcmd>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <lcd_controls+0xa8>)
	result = writelcdcmd(str);
 8002fe2:	9001      	str	r0, [sp, #4]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fe4:	a804      	add	r0, sp, #16
 8002fe6:	4912      	ldr	r1, [pc, #72]	; (8003030 <lcd_controls+0xac>)
	return (result);
 8002fe8:	9b01      	ldr	r3, [sp, #4]
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002fea:	f023 fd9d 	bl	8026b28 <siprintf>
	sprintf(str, "%s=\"%s\"", id, string);
 8002fee:	ab04      	add	r3, sp, #16
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <lcd_controls+0xb0>)
 8002ff2:	4909      	ldr	r1, [pc, #36]	; (8003018 <lcd_controls+0x94>)
 8002ff4:	a810      	add	r0, sp, #64	; 0x40
	volatile int result = 0;
 8002ff6:	9400      	str	r4, [sp, #0]
	sprintf(str, "%s=\"%s\"", id, string);
 8002ff8:	f023 fd96 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8002ffc:	a810      	add	r0, sp, #64	; 0x40
 8002ffe:	f7ff f953 	bl	80022a8 <writelcdcmd>
 8003002:	9000      	str	r0, [sp, #0]
	return (result);
 8003004:	9b00      	ldr	r3, [sp, #0]
}
 8003006:	b028      	add	sp, #160	; 0xa0
 8003008:	bd10      	pop	{r4, pc}
 800300a:	bf00      	nop
 800300c:	20001d28 	.word	0x20001d28
 8003010:	0802be90 	.word	0x0802be90
 8003014:	0802bd3c 	.word	0x0802bd3c
 8003018:	0802bccc 	.word	0x0802bccc
 800301c:	0802be98 	.word	0x0802be98
 8003020:	0802bd9c 	.word	0x0802bd9c
 8003024:	0802bea0 	.word	0x0802bea0
 8003028:	0802bcc4 	.word	0x0802bcc4
 800302c:	200034d8 	.word	0x200034d8
 8003030:	0802beb0 	.word	0x0802beb0
 8003034:	0802bd78 	.word	0x0802bd78

08003038 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8003038:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 800303a:	4c23      	ldr	r4, [pc, #140]	; (80030c8 <lcd_pagechange+0x90>)
lcd_pagechange(uint8_t newpage) {
 800303c:	b09a      	sub	sp, #104	; 0x68
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 800303e:	7823      	ldrb	r3, [r4, #0]
 8003040:	4283      	cmp	r3, r0
 8003042:	d009      	beq.n	8003058 <lcd_pagechange+0x20>
	our_currentpage = newpage;
 8003044:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8003046:	2805      	cmp	r0, #5
 8003048:	d83a      	bhi.n	80030c0 <lcd_pagechange+0x88>
 800304a:	e8df f000 	tbb	[pc, r0]
 800304e:	030f      	.short	0x030f
 8003050:	0509332d 	.word	0x0509332d
		lcd_showvars();		// display vars on the lcd
 8003054:	f7ff fb94 	bl	8002780 <lcd_showvars>
	return (our_currentpage);
 8003058:	7820      	ldrb	r0, [r4, #0]
 800305a:	b2c0      	uxtb	r0, r0
}
 800305c:	b01a      	add	sp, #104	; 0x68
 800305e:	bd10      	pop	{r4, pc}
		lcd_controls();
 8003060:	f7ff ff90 	bl	8002f84 <lcd_controls>
	return (our_currentpage);
 8003064:	7820      	ldrb	r0, [r4, #0]
 8003066:	b2c0      	uxtb	r0, r0
}
 8003068:	b01a      	add	sp, #104	; 0x68
 800306a:	bd10      	pop	{r4, pc}
		lcd_time();
 800306c:	f7ff faec 	bl	8002648 <lcd_time>
	lastday = timeinfo.tm_yday;
 8003070:	4b16      	ldr	r3, [pc, #88]	; (80030cc <lcd_pagechange+0x94>)
 8003072:	4917      	ldr	r1, [pc, #92]	; (80030d0 <lcd_pagechange+0x98>)
 8003074:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <lcd_pagechange+0x9c>)
	lastday = timeinfo.tm_yday;
 8003078:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 800307a:	2128      	movs	r1, #40	; 0x28
 800307c:	4816      	ldr	r0, [pc, #88]	; (80030d8 <lcd_pagechange+0xa0>)
 800307e:	f024 fb49 	bl	8027714 <strftime>
	volatile int result = 0;
 8003082:	2100      	movs	r1, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <lcd_pagechange+0xa0>)
 8003086:	a802      	add	r0, sp, #8
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <lcd_pagechange+0xa4>)
	volatile int result = 0;
 800308a:	9101      	str	r1, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 800308c:	4914      	ldr	r1, [pc, #80]	; (80030e0 <lcd_pagechange+0xa8>)
 800308e:	f023 fd4b 	bl	8026b28 <siprintf>
	result = writelcdcmd(str);
 8003092:	a802      	add	r0, sp, #8
 8003094:	f7ff f908 	bl	80022a8 <writelcdcmd>
 8003098:	9001      	str	r0, [sp, #4]
	return (result);
 800309a:	9b01      	ldr	r3, [sp, #4]
	if (our_currentpage != 0)
 800309c:	7823      	ldrb	r3, [r4, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1da      	bne.n	8003058 <lcd_pagechange+0x20>
 80030a2:	f7ff f91d 	bl	80022e0 <lcd_gps.part.0>
 80030a6:	e7d7      	b.n	8003058 <lcd_pagechange+0x20>
		lcd_trigcharts();		// display chart
 80030a8:	f7ff fcd6 	bl	8002a58 <lcd_trigcharts>
	return (our_currentpage);
 80030ac:	7820      	ldrb	r0, [r4, #0]
 80030ae:	b2c0      	uxtb	r0, r0
}
 80030b0:	b01a      	add	sp, #104	; 0x68
 80030b2:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 80030b4:	f7ff fe6a 	bl	8002d8c <lcd_presscharts>
	return (our_currentpage);
 80030b8:	7820      	ldrb	r0, [r4, #0]
 80030ba:	b2c0      	uxtb	r0, r0
}
 80030bc:	b01a      	add	sp, #104	; 0x68
 80030be:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 80030c0:	4808      	ldr	r0, [pc, #32]	; (80030e4 <lcd_pagechange+0xac>)
 80030c2:	f023 fbe3 	bl	802688c <puts>
		break;
 80030c6:	e7c7      	b.n	8003058 <lcd_pagechange+0x20>
 80030c8:	20001d28 	.word	0x20001d28
 80030cc:	20001f44 	.word	0x20001f44
 80030d0:	20001a5c 	.word	0x20001a5c
 80030d4:	0802bd8c 	.word	0x0802bd8c
 80030d8:	20001f18 	.word	0x20001f18
 80030dc:	0802bd9c 	.word	0x0802bd9c
 80030e0:	0802bccc 	.word	0x0802bccc
 80030e4:	0802bec8 	.word	0x0802bec8

080030e8 <lcd_init>:

// try to set the baud to 230400
// only assumes it could be at 9600 to begin with
lcd_init(int rqbaud) {
 80030e8:	b570      	push	{r4, r5, r6, lr}
	lcduart_error = HAL_UART_ERROR_NONE;
 80030ea:	4d16      	ldr	r5, [pc, #88]	; (8003144 <lcd_init+0x5c>)
 80030ec:	2600      	movs	r6, #0
lcd_init(int rqbaud) {
 80030ee:	4604      	mov	r4, r0
	lcduart_error = HAL_UART_ERROR_NONE;
 80030f0:	602e      	str	r6, [r5, #0]

	lcd_reset();		// command LCD reset at the current baudrate - it should switch to 9600
 80030f2:	f7fe ffd1 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // command LCD to 9600 from current (unknown) speed
 80030f6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80030fa:	f7fe fff9 	bl	80020f0 <lcd_baud>
	lcd_uart_init(9600); // then change our uart baud to match
 80030fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003102:	f7fe ff87 	bl	8002014 <lcd_uart_init>
	lcd_reset();	// command LCD reset at the current baudrate - it should switch to 9600
 8003106:	f7fe ffc7 	bl	8002098 <lcd_reset>
	lcd_baud(9600);  // reset LCD (might be 2nd time or not)
 800310a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800310e:	f7fe ffef 	bl	80020f0 <lcd_baud>
	osDelay(600);
 8003112:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003116:	f013 fa9f 	bl	8016658 <osDelay>

	lcd_baud(rqbaud);  //  LCD *should* return in rqbuad baud
 800311a:	4620      	mov	r0, r4
 800311c:	f7fe ffe8 	bl	80020f0 <lcd_baud>
	osDelay(600);
 8003120:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003124:	f013 fa98 	bl	8016658 <osDelay>
	lcd_uart_init(rqbaud); // then change our baud to match
 8003128:	4620      	mov	r0, r4
 800312a:	f7fe ff73 	bl	8002014 <lcd_uart_init>

	osDelay(600);
 800312e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003132:	f013 fa91 	bl	8016658 <osDelay>
	lcduart_error = HAL_UART_ERROR_NONE;
 8003136:	602e      	str	r6, [r5, #0]
//	printf("nxt_baud:\n");
	writelcdcmd("page 0");
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <lcd_init+0x60>)
}
 800313a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	writelcdcmd("page 0");
 800313e:	f7ff b8b3 	b.w	80022a8 <writelcdcmd>
 8003142:	bf00      	nop
 8003144:	20001b20 	.word	0x20001b20
 8003148:	0802bedc 	.word	0x0802bedc

0800314c <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 800314c:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 800314e:	4d47      	ldr	r5, [pc, #284]	; (800326c <processnex+0x120>)
void processnex() {		// process Nextion - called at regular intervals
 8003150:	b08a      	sub	sp, #40	; 0x28
	switch (lcduart_error) {
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d05d      	beq.n	8003214 <processnex+0xc8>
 8003158:	2b08      	cmp	r3, #8
 800315a:	d056      	beq.n	800320a <processnex+0xbe>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d03f      	beq.n	80031e0 <processnex+0x94>
 8003160:	4c43      	ldr	r4, [pc, #268]	; (8003270 <processnex+0x124>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003162:	2600      	movs	r6, #0
 8003164:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d042      	beq.n	80031f2 <processnex+0xa6>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d06f      	beq.n	8003252 <processnex+0x106>
	if (lcd_initflag == 3) {	// uart only
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d059      	beq.n	800322c <processnex+0xe0>
	lcd_rxdma();		// get any new characters received
 8003178:	f7ff f836 	bl	80021e8 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 800317c:	f000 f9e2 	bl	8003544 <lcd_event_process>
	if (dimtimer > 50000) {
 8003180:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <processnex+0x128>)
 8003182:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8003186:	9000      	str	r0, [sp, #0]
	if (dimtimer > 50000) {
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	428b      	cmp	r3, r1
 800318c:	d903      	bls.n	8003196 <processnex+0x4a>
		dimtimer--;
 800318e:	3b01      	subs	r3, #1
 8003190:	6013      	str	r3, [r2, #0]
}
 8003192:	b00a      	add	sp, #40	; 0x28
 8003194:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8003196:	4838      	ldr	r0, [pc, #224]	; (8003278 <processnex+0x12c>)
		dimtimer = 60000;
 8003198:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800319c:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 800319e:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 80031a0:	6804      	ldr	r4, [r0, #0]
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	6802      	ldr	r2, [r0, #0]
 80031a6:	109b      	asrs	r3, r3, #2
 80031a8:	eb03 0364 	add.w	r3, r3, r4, asr #1
 80031ac:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80031b0:	1aca      	subs	r2, r1, r3
		if (i < 2)
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	dd35      	ble.n	8003222 <processnex+0xd6>
 80031b6:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 80031b8:	4930      	ldr	r1, [pc, #192]	; (800327c <processnex+0x130>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	bf28      	it	cs
 80031be:	2363      	movcs	r3, #99	; 0x63
 80031c0:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <processnex+0x134>)
 80031c4:	a802      	add	r0, sp, #8
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <processnex+0x138>)
 80031c8:	f023 fcae 	bl	8026b28 <siprintf>
	result = writelcdcmd(buffer);
 80031cc:	a802      	add	r0, sp, #8
 80031ce:	f7ff f86b 	bl	80022a8 <writelcdcmd>
 80031d2:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	3301      	adds	r3, #1
 80031d8:	d043      	beq.n	8003262 <processnex+0x116>
	return (result);
 80031da:	9b01      	ldr	r3, [sp, #4]
}
 80031dc:	b00a      	add	sp, #40	; 0x28
 80031de:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 80031e0:	4c23      	ldr	r4, [pc, #140]	; (8003270 <processnex+0x124>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80031e2:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 80031e4:	4828      	ldr	r0, [pc, #160]	; (8003288 <processnex+0x13c>)
 80031e6:	f023 fb51 	bl	802688c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 80031ea:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d1bc      	bne.n	800316c <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 80031f2:	4826      	ldr	r0, [pc, #152]	; (800328c <processnex+0x140>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80031f4:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 80031f6:	f023 fb49 	bl	802688c <puts>
		lcd_init(230400);		// try to reset LCD
 80031fa:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80031fe:	f7ff ff73 	bl	80030e8 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8003202:	2302      	movs	r3, #2
 8003204:	6023      	str	r3, [r4, #0]
}
 8003206:	b00a      	add	sp, #40	; 0x28
 8003208:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 800320a:	4821      	ldr	r0, [pc, #132]	; (8003290 <processnex+0x144>)
 800320c:	4c18      	ldr	r4, [pc, #96]	; (8003270 <processnex+0x124>)
 800320e:	f023 fb3d 	bl	802688c <puts>
 8003212:	e7a6      	b.n	8003162 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8003214:	481f      	ldr	r0, [pc, #124]	; (8003294 <processnex+0x148>)
 8003216:	f023 fb39 	bl	802688c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 800321a:	4c15      	ldr	r4, [pc, #84]	; (8003270 <processnex+0x124>)
 800321c:	2301      	movs	r3, #1
 800321e:	6023      	str	r3, [r4, #0]
		break;
 8003220:	e79f      	b.n	8003162 <processnex+0x16>
			i = 2;	// prevent black
 8003222:	2202      	movs	r2, #2
 8003224:	4915      	ldr	r1, [pc, #84]	; (800327c <processnex+0x130>)
 8003226:	4613      	mov	r3, r2
 8003228:	600a      	str	r2, [r1, #0]
 800322a:	e7ca      	b.n	80031c2 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 800322c:	481a      	ldr	r0, [pc, #104]	; (8003298 <processnex+0x14c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 800322e:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8003230:	f023 fb2c 	bl	802688c <puts>
		lcd_uart_init(230400);
 8003234:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003238:	f7fe feec 	bl	8002014 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 800323c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003240:	f7ff ff52 	bl	80030e8 <lcd_init>
		osDelay(100);
 8003244:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8003246:	6026      	str	r6, [r4, #0]
}
 8003248:	b00a      	add	sp, #40	; 0x28
 800324a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 800324e:	f013 ba03 	b.w	8016658 <osDelay>
		osDelay(500);
 8003252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003256:	f013 f9ff 	bl	8016658 <osDelay>
		lcd_initflag = 3;
 800325a:	2303      	movs	r3, #3
 800325c:	6023      	str	r3, [r4, #0]
}
 800325e:	b00a      	add	sp, #40	; 0x28
 8003260:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8003262:	480e      	ldr	r0, [pc, #56]	; (800329c <processnex+0x150>)
 8003264:	f023 fa76 	bl	8026754 <iprintf>
 8003268:	e7b7      	b.n	80031da <processnex+0x8e>
 800326a:	bf00      	nop
 800326c:	20001b20 	.word	0x20001b20
 8003270:	20001a6c 	.word	0x20001a6c
 8003274:	2000000c 	.word	0x2000000c
 8003278:	20000018 	.word	0x20000018
 800327c:	20001a54 	.word	0x20001a54
 8003280:	0802bd28 	.word	0x0802bd28
 8003284:	0802bcf0 	.word	0x0802bcf0
 8003288:	0802bee4 	.word	0x0802bee4
 800328c:	0802bf1c 	.word	0x0802bf1c
 8003290:	0802bf08 	.word	0x0802bf08
 8003294:	0802bef4 	.word	0x0802bef4
 8003298:	0802bf44 	.word	0x0802bf44
 800329c:	0802bcf8 	.word	0x0802bcf8

080032a0 <lcd_getlack>:
uint8_t lcd_getlack() {
 80032a0:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 80032a2:	4d11      	ldr	r5, [pc, #68]	; (80032e8 <lcd_getlack+0x48>)
	processnex();
 80032a4:	f7ff ff52 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 80032a8:	782b      	ldrb	r3, [r5, #0]
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d118      	bne.n	80032e0 <lcd_getlack+0x40>
 80032ae:	b2de      	uxtb	r6, r3
 80032b0:	4c0e      	ldr	r4, [pc, #56]	; (80032ec <lcd_getlack+0x4c>)
 80032b2:	e007      	b.n	80032c4 <lcd_getlack+0x24>
		trys++;
 80032b4:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80032b6:	f013 f9cf 	bl	8016658 <osDelay>
		processnex();
 80032ba:	f7ff ff47 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 80032be:	782b      	ldrb	r3, [r5, #0]
 80032c0:	2bff      	cmp	r3, #255	; 0xff
 80032c2:	d10d      	bne.n	80032e0 <lcd_getlack+0x40>
		if (trys > 1000) {
 80032c4:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80032c6:	2001      	movs	r0, #1
		if (trys > 1000) {
 80032c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80032cc:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80032d0:	d9f0      	bls.n	80032b4 <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80032d2:	4807      	ldr	r0, [pc, #28]	; (80032f0 <lcd_getlack+0x50>)
 80032d4:	f023 fa3e 	bl	8026754 <iprintf>
			trys = 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4630      	mov	r0, r6
			trys = 0;
 80032dc:	6023      	str	r3, [r4, #0]
}
 80032de:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 80032e0:	782e      	ldrb	r6, [r5, #0]
 80032e2:	b2f6      	uxtb	r6, r6
}
 80032e4:	4630      	mov	r0, r6
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	20001b1c 	.word	0x20001b1c
 80032ec:	20002150 	.word	0x20002150
 80032f0:	0802bf70 	.word	0x0802bf70

080032f4 <lcd_putsys0>:
void lcd_putsys0(uint32_t value) {
 80032f4:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 80032f6:	2301      	movs	r3, #1
void lcd_putsys0(uint32_t value) {
 80032f8:	b087      	sub	sp, #28
	lcd_txblocked = 1;
 80032fa:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <lcd_putsys0+0x34>)
	lcd_txblocked = 0;
 80032fc:	2500      	movs	r5, #0
void lcd_putsys0(uint32_t value) {
 80032fe:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 8003300:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 8003302:	f7ff f8a9 	bl	8002458 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <lcd_putsys0+0x38>)
 8003308:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "sys0=0x%08x", value);
 800330a:	9a01      	ldr	r2, [sp, #4]
 800330c:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 800330e:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "sys0=0x%08x", value);
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <lcd_putsys0+0x3c>)
 8003312:	f023 fc09 	bl	8026b28 <siprintf>
	writelcdcmd(cmd);
 8003316:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 8003318:	6025      	str	r5, [r4, #0]
	writelcdcmd(cmd);
 800331a:	f7fe ffc5 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response (none expected)
 800331e:	f7ff ffbf 	bl	80032a0 <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003322:	6025      	str	r5, [r4, #0]
}
 8003324:	b007      	add	sp, #28
 8003326:	bd30      	pop	{r4, r5, pc}
 8003328:	20001a70 	.word	0x20001a70
 800332c:	20001b1c 	.word	0x20001b1c
 8003330:	0802bfa0 	.word	0x0802bfa0

08003334 <lcd_startdl>:
void lcd_startdl(int filesize) {
 8003334:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 8003336:	4c0c      	ldr	r4, [pc, #48]	; (8003368 <lcd_startdl+0x34>)
void lcd_startdl(int filesize) {
 8003338:	b08b      	sub	sp, #44	; 0x2c
	lcd_txblocked = 1;
 800333a:	2501      	movs	r5, #1
void lcd_startdl(int filesize) {
 800333c:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 800333e:	6025      	str	r5, [r4, #0]
	lcd_clearrxbuf();
 8003340:	f7ff f88a 	bl	8002458 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <lcd_startdl+0x38>)
 8003346:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 8003348:	9a01      	ldr	r2, [sp, #4]
 800334a:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 800334c:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <lcd_startdl+0x3c>)
 8003350:	f023 fbea 	bl	8026b28 <siprintf>
	lcd_txblocked = 0;
 8003354:	2300      	movs	r3, #0
	writelcdcmd(cmd);
 8003356:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 8003358:	6023      	str	r3, [r4, #0]
	writelcdcmd(cmd);
 800335a:	f7fe ffa5 	bl	80022a8 <writelcdcmd>
	result = lcd_getlack();		// wait for a response
 800335e:	f7ff ff9f 	bl	80032a0 <lcd_getlack>
	lcd_txblocked = 1;		// keep LCD sending blocked
 8003362:	6025      	str	r5, [r4, #0]
}
 8003364:	b00b      	add	sp, #44	; 0x2c
 8003366:	bd30      	pop	{r4, r5, pc}
 8003368:	20001a70 	.word	0x20001a70
 800336c:	20001b1c 	.word	0x20001b1c
 8003370:	0802bfac 	.word	0x0802bfac

08003374 <lcd_getid>:
int lcd_getid(void) {
 8003374:	b570      	push	{r4, r5, r6, lr}
	lcd_txblocked = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	4e21      	ldr	r6, [pc, #132]	; (8003400 <lcd_getid+0x8c>)
int lcd_getid(void) {
 800337a:	b098      	sub	sp, #96	; 0x60
	lcdstatus = 0xff;
 800337c:	4d21      	ldr	r5, [pc, #132]	; (8003404 <lcd_getid+0x90>)
	lcd_txblocked = 0;
 800337e:	6033      	str	r3, [r6, #0]
	lcd_clearrxbuf();
 8003380:	f7ff f86a 	bl	8002458 <lcd_clearrxbuf>
	strcpy(pkt, str);
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <lcd_getid+0x94>)
	lcdstatus = 0xff;
 8003386:	21ff      	movs	r1, #255	; 0xff
	strcat(pkt, "\xff\xff\xff");
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <lcd_getid+0x98>)
	lcdstatus = 0xff;
 800338a:	7029      	strb	r1, [r5, #0]
	strcpy(pkt, str);
 800338c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003390:	9000      	str	r0, [sp, #0]
 8003392:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003394:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003396:	f8ad 1004 	strh.w	r1, [sp, #4]
	strcat(pkt, "\xff\xff\xff");
 800339a:	f8cd 0007 	str.w	r0, [sp, #7]
	return (lcd_puts(pkt));
 800339e:	4668      	mov	r0, sp
	strcpy(pkt, str);
 80033a0:	f88d 3006 	strb.w	r3, [sp, #6]
	return (lcd_puts(pkt));
 80033a4:	f7fe fee8 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 80033a8:	3001      	adds	r0, #1
 80033aa:	d025      	beq.n	80033f8 <lcd_getid+0x84>
	processnex();
 80033ac:	f7ff fece 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 80033b0:	782b      	ldrb	r3, [r5, #0]
 80033b2:	2bff      	cmp	r3, #255	; 0xff
 80033b4:	d11a      	bne.n	80033ec <lcd_getid+0x78>
 80033b6:	4c16      	ldr	r4, [pc, #88]	; (8003410 <lcd_getid+0x9c>)
 80033b8:	e007      	b.n	80033ca <lcd_getid+0x56>
		trys++;
 80033ba:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80033bc:	f013 f94c 	bl	8016658 <osDelay>
		processnex();
 80033c0:	f7ff fec4 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 80033c4:	782b      	ldrb	r3, [r5, #0]
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	d110      	bne.n	80033ec <lcd_getid+0x78>
		if (trys > 1000) {
 80033ca:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80033cc:	2001      	movs	r0, #1
		if (trys > 1000) {
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80033d2:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80033d6:	d9f0      	bls.n	80033ba <lcd_getid+0x46>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80033d8:	480e      	ldr	r0, [pc, #56]	; (8003414 <lcd_getid+0xa0>)
 80033da:	f023 f9bb 	bl	8026754 <iprintf>
			trys = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	20ff      	movs	r0, #255	; 0xff
 80033e2:	6023      	str	r3, [r4, #0]
	lcd_txblocked = 0;		// allow others sending to the LCD
 80033e4:	2300      	movs	r3, #0
 80033e6:	6033      	str	r3, [r6, #0]
}
 80033e8:	b018      	add	sp, #96	; 0x60
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 80033ec:	7828      	ldrb	r0, [r5, #0]
	lcd_txblocked = 0;		// allow others sending to the LCD
 80033ee:	2300      	movs	r3, #0
	return (lcdstatus);
 80033f0:	b2c0      	uxtb	r0, r0
	lcd_txblocked = 0;		// allow others sending to the LCD
 80033f2:	6033      	str	r3, [r6, #0]
}
 80033f4:	b018      	add	sp, #96	; 0x60
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
		printf("getid: Cmd failed\n\r");
 80033f8:	4807      	ldr	r0, [pc, #28]	; (8003418 <lcd_getid+0xa4>)
 80033fa:	f023 f9ab 	bl	8026754 <iprintf>
 80033fe:	e7d5      	b.n	80033ac <lcd_getid+0x38>
 8003400:	20001a70 	.word	0x20001a70
 8003404:	20001b1c 	.word	0x20001b1c
 8003408:	0802bfe8 	.word	0x0802bfe8
 800340c:	0802bbfc 	.word	0x0802bbfc
 8003410:	20002150 	.word	0x20002150
 8003414:	0802bf70 	.word	0x0802bf70
 8003418:	0802bff0 	.word	0x0802bff0

0800341c <getlcdpage>:
int getlcdpage(void) {
 800341c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003420:	2301      	movs	r3, #1
 8003422:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800353c <getlcdpage+0x120>
	strcpy(pkt, str);
 8003426:	4e3f      	ldr	r6, [pc, #252]	; (8003524 <getlcdpage+0x108>)
int getlcdpage(void) {
 8003428:	b09b      	sub	sp, #108	; 0x6c
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800342a:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 800342c:	f8c8 3000 	str.w	r3, [r8]
	strcat(pkt, "\xff\xff\xff");
 8003430:	4f3d      	ldr	r7, [pc, #244]	; (8003528 <getlcdpage+0x10c>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003432:	f013 f911 	bl	8016658 <osDelay>
	lcdstatus = 0xff;
 8003436:	4d3d      	ldr	r5, [pc, #244]	; (800352c <getlcdpage+0x110>)
 8003438:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 800343a:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 800343e:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8003440:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003442:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 8003444:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 8003448:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 800344c:	a802      	add	r0, sp, #8
 800344e:	f7fe fe93 	bl	8002178 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003452:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8003454:	9b01      	ldr	r3, [sp, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	d060      	beq.n	800351c <getlcdpage+0x100>
	processnex();
 800345a:	f7ff fe77 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 800345e:	782b      	ldrb	r3, [r5, #0]
 8003460:	2bff      	cmp	r3, #255	; 0xff
 8003462:	d121      	bne.n	80034a8 <getlcdpage+0x8c>
 8003464:	4c32      	ldr	r4, [pc, #200]	; (8003530 <getlcdpage+0x114>)
 8003466:	e007      	b.n	8003478 <getlcdpage+0x5c>
		trys++;
 8003468:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800346a:	f013 f8f5 	bl	8016658 <osDelay>
		processnex();
 800346e:	f7ff fe6d 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 8003472:	782b      	ldrb	r3, [r5, #0]
 8003474:	2bff      	cmp	r3, #255	; 0xff
 8003476:	d117      	bne.n	80034a8 <getlcdpage+0x8c>
		if (trys > 1000) {
 8003478:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800347a:	2001      	movs	r0, #1
		if (trys > 1000) {
 800347c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003480:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003484:	d9f0      	bls.n	8003468 <getlcdpage+0x4c>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003486:	482b      	ldr	r0, [pc, #172]	; (8003534 <getlcdpage+0x118>)
 8003488:	f023 f964 	bl	8026754 <iprintf>
			trys = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 8003492:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 8003494:	9b01      	ldr	r3, [sp, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	d00c      	beq.n	80034b4 <getlcdpage+0x98>
	lcd_txblocked = 0;		// allow others sending to the LCD
 800349a:	2300      	movs	r3, #0
 800349c:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 80034a0:	9801      	ldr	r0, [sp, #4]
}
 80034a2:	b01b      	add	sp, #108	; 0x6c
 80034a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 80034a8:	782b      	ldrb	r3, [r5, #0]
 80034aa:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 80034ac:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 80034ae:	9b01      	ldr	r3, [sp, #4]
 80034b0:	3301      	adds	r3, #1
 80034b2:	d1f2      	bne.n	800349a <getlcdpage+0x7e>
	strcat(pkt, "\xff\xff\xff");
 80034b4:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 80034b6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003540 <getlcdpage+0x124>
 80034ba:	4c1d      	ldr	r4, [pc, #116]	; (8003530 <getlcdpage+0x114>)
	strcat(pkt, "\xff\xff\xff");
 80034bc:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 80034c0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80034c4:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 80034c6:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 80034c8:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80034cc:	f7fe fe54 	bl	8002178 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80034d0:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80034d2:	9b01      	ldr	r3, [sp, #4]
 80034d4:	3301      	adds	r3, #1
 80034d6:	d10a      	bne.n	80034ee <getlcdpage+0xd2>
 80034d8:	e01c      	b.n	8003514 <getlcdpage+0xf8>
		if (trys > 1000) {
 80034da:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80034dc:	2001      	movs	r0, #1
		if (trys > 1000) {
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80034e2:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80034e6:	d80e      	bhi.n	8003506 <getlcdpage+0xea>
		trys++;
 80034e8:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80034ea:	f013 f8b5 	bl	8016658 <osDelay>
		processnex();
 80034ee:	f7ff fe2d 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 80034f2:	782b      	ldrb	r3, [r5, #0]
 80034f4:	2bff      	cmp	r3, #255	; 0xff
 80034f6:	d0f0      	beq.n	80034da <getlcdpage+0xbe>
	return (lcdstatus);
 80034f8:	782b      	ldrb	r3, [r5, #0]
 80034fa:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80034fc:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	3301      	adds	r3, #1
 8003502:	d0db      	beq.n	80034bc <getlcdpage+0xa0>
 8003504:	e7c9      	b.n	800349a <getlcdpage+0x7e>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003506:	480b      	ldr	r0, [pc, #44]	; (8003534 <getlcdpage+0x118>)
 8003508:	f023 f924 	bl	8026754 <iprintf>
			trys = 0;
 800350c:	2200      	movs	r2, #0
 800350e:	23ff      	movs	r3, #255	; 0xff
 8003510:	6022      	str	r2, [r4, #0]
			return (-1);
 8003512:	e7f3      	b.n	80034fc <getlcdpage+0xe0>
			printf("getlcdpage2: Cmd failed\n\r");
 8003514:	4648      	mov	r0, r9
 8003516:	f023 f91d 	bl	8026754 <iprintf>
 800351a:	e7e8      	b.n	80034ee <getlcdpage+0xd2>
		printf("getlcdpage: Cmd failed\n\r");
 800351c:	4806      	ldr	r0, [pc, #24]	; (8003538 <getlcdpage+0x11c>)
 800351e:	f023 f919 	bl	8026754 <iprintf>
 8003522:	e79a      	b.n	800345a <getlcdpage+0x3e>
 8003524:	0802c004 	.word	0x0802c004
 8003528:	0802bbfc 	.word	0x0802bbfc
 800352c:	20001b1c 	.word	0x20001b1c
 8003530:	20002150 	.word	0x20002150
 8003534:	0802bf70 	.word	0x0802bf70
 8003538:	0802c00c 	.word	0x0802c00c
 800353c:	20001a70 	.word	0x20001a70
 8003540:	0802c028 	.word	0x0802c028

08003544 <lcd_event_process>:
int lcd_event_process(void) {
 8003544:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8003546:	4c8d      	ldr	r4, [pc, #564]	; (800377c <lcd_event_process+0x238>)
int lcd_event_process(void) {
 8003548:	b08d      	sub	sp, #52	; 0x34
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800354a:	2160      	movs	r1, #96	; 0x60
 800354c:	4620      	mov	r0, r4
 800354e:	f7fe ffa9 	bl	80024a4 <isnexpkt>
 8003552:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8003554:	9b01      	ldr	r3, [sp, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	dd27      	ble.n	80035aa <lcd_event_process+0x66>
		lcdstatus = eventbuffer[0];
 800355a:	7821      	ldrb	r1, [r4, #0]
 800355c:	4b88      	ldr	r3, [pc, #544]	; (8003780 <lcd_event_process+0x23c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 800355e:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8003560:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8003562:	d91e      	bls.n	80035a2 <lcd_event_process+0x5e>
			switch (eventbuffer[0]) {
 8003564:	2924      	cmp	r1, #36	; 0x24
 8003566:	f000 80d5 	beq.w	8003714 <lcd_event_process+0x1d0>
 800356a:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800356e:	b2da      	uxtb	r2, r3
 8003570:	2a25      	cmp	r2, #37	; 0x25
 8003572:	d81d      	bhi.n	80035b0 <lcd_event_process+0x6c>
 8003574:	2b25      	cmp	r3, #37	; 0x25
 8003576:	d81b      	bhi.n	80035b0 <lcd_event_process+0x6c>
 8003578:	e8df f003 	tbb	[pc, r3]
 800357c:	6c961aa2 	.word	0x6c961aa2
 8003580:	1a1a1a1a 	.word	0x1a1a1a1a
 8003584:	1a1a1a1a 	.word	0x1a1a1a1a
 8003588:	1aae1a1a 	.word	0x1aae1a1a
 800358c:	1a1a1a1a 	.word	0x1a1a1a1a
 8003590:	1a1a1a1a 	.word	0x1a1a1a1a
 8003594:	1a1a1a1a 	.word	0x1a1a1a1a
 8003598:	1a1a1a1a 	.word	0x1a1a1a1a
 800359c:	1a1a1a1a 	.word	0x1a1a1a1a
 80035a0:	671a      	.short	0x671a
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 80035a2:	2901      	cmp	r1, #1
 80035a4:	d123      	bne.n	80035ee <lcd_event_process+0xaa>
}
 80035a6:	b00d      	add	sp, #52	; 0x34
 80035a8:	bd30      	pop	{r4, r5, pc}
		return (result);		// 0 = nothing found, -1 = timeout, -2=no char
 80035aa:	9801      	ldr	r0, [sp, #4]
}
 80035ac:	b00d      	add	sp, #52	; 0x34
 80035ae:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 80035b0:	4874      	ldr	r0, [pc, #464]	; (8003784 <lcd_event_process+0x240>)
 80035b2:	f023 f8cf 	bl	8026754 <iprintf>
				i = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	9304      	str	r3, [sp, #16]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80035ba:	9b04      	ldr	r3, [sp, #16]
 80035bc:	5ce3      	ldrb	r3, [r4, r3]
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d00f      	beq.n	80035e2 <lcd_event_process+0x9e>
					printf(" 0x%02x", eventbuffer[i++]);
 80035c2:	4d71      	ldr	r5, [pc, #452]	; (8003788 <lcd_event_process+0x244>)
 80035c4:	e009      	b.n	80035da <lcd_event_process+0x96>
 80035c6:	9b04      	ldr	r3, [sp, #16]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	5ce1      	ldrb	r1, [r4, r3]
 80035cc:	9204      	str	r2, [sp, #16]
 80035ce:	f023 f8c1 	bl	8026754 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80035d2:	9b04      	ldr	r3, [sp, #16]
 80035d4:	5ce3      	ldrb	r3, [r4, r3]
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d003      	beq.n	80035e2 <lcd_event_process+0x9e>
 80035da:	9b04      	ldr	r3, [sp, #16]
					printf(" 0x%02x", eventbuffer[i++]);
 80035dc:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 80035de:	2b5f      	cmp	r3, #95	; 0x5f
 80035e0:	d9f1      	bls.n	80035c6 <lcd_event_process+0x82>
				printf("\n");
 80035e2:	200a      	movs	r0, #10
 80035e4:	f023 f8ce 	bl	8026784 <putchar>
				return (-1);
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	e7db      	b.n	80035a6 <lcd_event_process+0x62>
				printf("Nextion reported: ");
 80035ee:	4867      	ldr	r0, [pc, #412]	; (800378c <lcd_event_process+0x248>)
 80035f0:	f023 f8b0 	bl	8026754 <iprintf>
				switch (eventbuffer[0]) {
 80035f4:	7821      	ldrb	r1, [r4, #0]
 80035f6:	2924      	cmp	r1, #36	; 0x24
 80035f8:	f200 8091 	bhi.w	800371e <lcd_event_process+0x1da>
 80035fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003600:	011d0122 	.word	0x011d0122
 8003604:	008f0118 	.word	0x008f0118
 8003608:	010e008f 	.word	0x010e008f
 800360c:	008f008f 	.word	0x008f008f
 8003610:	008f008f 	.word	0x008f008f
 8003614:	008f008f 	.word	0x008f008f
 8003618:	008f008f 	.word	0x008f008f
 800361c:	008f008f 	.word	0x008f008f
 8003620:	008f008f 	.word	0x008f008f
 8003624:	008f0106 	.word	0x008f0106
 8003628:	008f008f 	.word	0x008f008f
 800362c:	008f008f 	.word	0x008f008f
 8003630:	008f008f 	.word	0x008f008f
 8003634:	008f00fe 	.word	0x008f00fe
 8003638:	008f00f8 	.word	0x008f00f8
 800363c:	008f00f2 	.word	0x008f00f2
 8003640:	008f00ec 	.word	0x008f00ec
 8003644:	00b8008f 	.word	0x00b8008f
 8003648:	00b2      	.short	0x00b2
				printf("Nextion returned 0x88 - Ready!\n");
 800364a:	4851      	ldr	r0, [pc, #324]	; (8003790 <lcd_event_process+0x24c>)
 800364c:	f023 f91e 	bl	802688c <puts>
			return (0);
 8003650:	2000      	movs	r0, #0
				break;
 8003652:	e7a8      	b.n	80035a6 <lcd_event_process+0x62>
				setlcddim(lcdbright);
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <lcd_event_process+0x250>)
	dimtimer = DIMTIME;
 8003656:	f64e 2160 	movw	r1, #60000	; 0xea60
 800365a:	4a4f      	ldr	r2, [pc, #316]	; (8003798 <lcd_event_process+0x254>)
	sprintf(buffer, "%s=%lu", id, value);
 800365c:	a804      	add	r0, sp, #16
				setlcddim(lcdbright);
 800365e:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 8003660:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8003662:	2b63      	cmp	r3, #99	; 0x63
 8003664:	4a4d      	ldr	r2, [pc, #308]	; (800379c <lcd_event_process+0x258>)
 8003666:	494e      	ldr	r1, [pc, #312]	; (80037a0 <lcd_event_process+0x25c>)
 8003668:	bf28      	it	cs
 800366a:	2363      	movcs	r3, #99	; 0x63
 800366c:	f023 fa5c 	bl	8026b28 <siprintf>
	result = writelcdcmd(buffer);
 8003670:	a804      	add	r0, sp, #16
 8003672:	f7fe fe19 	bl	80022a8 <writelcdcmd>
 8003676:	9003      	str	r0, [sp, #12]
	if (result == -1) {		// wait for response
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	d06e      	beq.n	800375c <lcd_event_process+0x218>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 800367e:	7860      	ldrb	r0, [r4, #1]
	return (result);
 8003680:	9b03      	ldr	r3, [sp, #12]
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8003682:	f7ff fcd9 	bl	8003038 <lcd_pagechange>
 8003686:	2800      	cmp	r0, #0
 8003688:	db05      	blt.n	8003696 <lcd_event_process+0x152>
 800368a:	7860      	ldrb	r0, [r4, #1]
 800368c:	f7ff fcd4 	bl	8003038 <lcd_pagechange>
 8003690:	2805      	cmp	r0, #5
 8003692:	f340 80e0 	ble.w	8003856 <lcd_event_process+0x312>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8003696:	7860      	ldrb	r0, [r4, #1]
 8003698:	f7ff fcce 	bl	8003038 <lcd_pagechange>
 800369c:	4601      	mov	r1, r0
 800369e:	4841      	ldr	r0, [pc, #260]	; (80037a4 <lcd_event_process+0x260>)
 80036a0:	f023 f858 	bl	8026754 <iprintf>
			return (0);
 80036a4:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 80036a6:	e77e      	b.n	80035a6 <lcd_event_process+0x62>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 80036a8:	78e3      	ldrb	r3, [r4, #3]
 80036aa:	78a2      	ldrb	r2, [r4, #2]
 80036ac:	7861      	ldrb	r1, [r4, #1]
 80036ae:	483e      	ldr	r0, [pc, #248]	; (80037a8 <lcd_event_process+0x264>)
 80036b0:	f023 f850 	bl	8026754 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 80036b4:	7863      	ldrb	r3, [r4, #1]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d037      	beq.n	800372a <lcd_event_process+0x1e6>
			return (0);
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	b00d      	add	sp, #52	; 0x34
 80036be:	bd30      	pop	{r4, r5, pc}
				decode_lcdtype(eventbuffer);
 80036c0:	482e      	ldr	r0, [pc, #184]	; (800377c <lcd_event_process+0x238>)
 80036c2:	f7fe ff67 	bl	8002594 <decode_lcdtype>
				if (nex_model[0] != '\0') {
 80036c6:	4939      	ldr	r1, [pc, #228]	; (80037ac <lcd_event_process+0x268>)
 80036c8:	780b      	ldrb	r3, [r1, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f5      	beq.n	80036ba <lcd_event_process+0x176>
					printf("Nextion LCD Model: %s\n", nex_model);
 80036ce:	4838      	ldr	r0, [pc, #224]	; (80037b0 <lcd_event_process+0x26c>)
 80036d0:	f023 f840 	bl	8026754 <iprintf>
			return (0);
 80036d4:	2000      	movs	r0, #0
 80036d6:	e766      	b.n	80035a6 <lcd_event_process+0x62>
	if ((str[0] == 0x71) && (str[5] = 0xff) && (str[6] == 0xff) && (str[7] == 0xff)) {
 80036d8:	79a3      	ldrb	r3, [r4, #6]
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	79e1      	ldrb	r1, [r4, #7]
 80036de:	7162      	strb	r2, [r4, #5]
 80036e0:	400b      	ands	r3, r1
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f040 80b4 	bne.w	8003850 <lcd_event_process+0x30c>
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <lcd_event_process+0x238>)
	number = 0;
 80036ea:	2100      	movs	r1, #0
 80036ec:	1d10      	adds	r0, r2, #4
			number = number | (str[i] << 24);
 80036ee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80036f2:	061b      	lsls	r3, r3, #24
		for (i = 1; i < 5; i++) {
 80036f4:	4290      	cmp	r0, r2
			number = number | (str[i] << 24);
 80036f6:	ea43 2121 	orr.w	r1, r3, r1, asr #8
		for (i = 1; i < 5; i++) {
 80036fa:	d1f8      	bne.n	80036ee <lcd_event_process+0x1aa>
				if (nex_model[0] != '\0') {
 80036fc:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <lcd_event_process+0x268>)
				lcd_sys0 = decode_int(eventbuffer);
 80036fe:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <lcd_event_process+0x270>)
				if (nex_model[0] != '\0') {
 8003700:	7812      	ldrb	r2, [r2, #0]
				lcd_sys0 = decode_int(eventbuffer);
 8003702:	6019      	str	r1, [r3, #0]
				if (nex_model[0] != '\0') {
 8003704:	2a00      	cmp	r2, #0
 8003706:	d0d8      	beq.n	80036ba <lcd_event_process+0x176>
					printf("Nextion LCD's Firmware build: 0x%0x\n", lcd_sys0);
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	482b      	ldr	r0, [pc, #172]	; (80037b8 <lcd_event_process+0x274>)
 800370c:	f023 f822 	bl	8026754 <iprintf>
			return (0);
 8003710:	2000      	movs	r0, #0
 8003712:	e748      	b.n	80035a6 <lcd_event_process+0x62>
				printf("Serial Buffer Overflow!\n");
 8003714:	4829      	ldr	r0, [pc, #164]	; (80037bc <lcd_event_process+0x278>)
 8003716:	f023 f8b9 	bl	802688c <puts>
				return (1);
 800371a:	2001      	movs	r0, #1
 800371c:	e743      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <lcd_event_process+0x27c>)
 8003720:	f023 f818 	bl	8026754 <iprintf>
				return (-1);		// some kindof error
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8003728:	e73d      	b.n	80035a6 <lcd_event_process+0x62>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 800372a:	78a3      	ldrb	r3, [r4, #2]
 800372c:	2b06      	cmp	r3, #6
 800372e:	f000 80b1 	beq.w	8003894 <lcd_event_process+0x350>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8003732:	2b08      	cmp	r3, #8
 8003734:	f000 80d1 	beq.w	80038da <lcd_event_process+0x396>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8003738:	2b02      	cmp	r3, #2
 800373a:	f000 809a 	beq.w	8003872 <lcd_event_process+0x32e>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 800373e:	2b03      	cmp	r3, #3
 8003740:	d1bb      	bne.n	80036ba <lcd_event_process+0x176>
					if (eventbuffer[3] == 1) 		// sound on
 8003742:	78e3      	ldrb	r3, [r4, #3]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <lcd_event_process+0x280>)
 8003746:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 800374a:	481f      	ldr	r0, [pc, #124]	; (80037c8 <lcd_event_process+0x284>)
					if (eventbuffer[3] == 1) 		// sound on
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8003754:	f023 f89a 	bl	802688c <puts>
			return (0);
 8003758:	2000      	movs	r0, #0
 800375a:	e724      	b.n	80035a6 <lcd_event_process+0x62>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800375c:	481b      	ldr	r0, [pc, #108]	; (80037cc <lcd_event_process+0x288>)
 800375e:	f022 fff9 	bl	8026754 <iprintf>
 8003762:	e78c      	b.n	800367e <lcd_event_process+0x13a>
					printf("Ser Buffer overflow\n");
 8003764:	481a      	ldr	r0, [pc, #104]	; (80037d0 <lcd_event_process+0x28c>)
 8003766:	f023 f891 	bl	802688c <puts>
				return (-1);		// some kindof error
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800376e:	e71a      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Variable name too long\n");
 8003770:	4818      	ldr	r0, [pc, #96]	; (80037d4 <lcd_event_process+0x290>)
 8003772:	f023 f88b 	bl	802688c <puts>
				return (-1);		// some kindof error
 8003776:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800377a:	e714      	b.n	80035a6 <lcd_event_process+0x62>
 800377c:	200019d0 	.word	0x200019d0
 8003780:	20001b1c 	.word	0x20001b1c
 8003784:	0802c264 	.word	0x0802c264
 8003788:	0802c298 	.word	0x0802c298
 800378c:	0802c044 	.word	0x0802c044
 8003790:	0802c1bc 	.word	0x0802c1bc
 8003794:	20000018 	.word	0x20000018
 8003798:	2000000c 	.word	0x2000000c
 800379c:	0802bd28 	.word	0x0802bd28
 80037a0:	0802bcf0 	.word	0x0802bcf0
 80037a4:	0802c234 	.word	0x0802c234
 80037a8:	0802c1dc 	.word	0x0802c1dc
 80037ac:	20001b30 	.word	0x20001b30
 80037b0:	0802c17c 	.word	0x0802c17c
 80037b4:	20000014 	.word	0x20000014
 80037b8:	0802c194 	.word	0x0802c194
 80037bc:	0802c164 	.word	0x0802c164
 80037c0:	0802c14c 	.word	0x0802c14c
 80037c4:	2000028c 	.word	0x2000028c
 80037c8:	0802c228 	.word	0x0802c228
 80037cc:	0802bcf8 	.word	0x0802bcf8
 80037d0:	0802c094 	.word	0x0802c094
 80037d4:	0802c07c 	.word	0x0802c07c
					printf("Invalid escape char\n");
 80037d8:	4849      	ldr	r0, [pc, #292]	; (8003900 <lcd_event_process+0x3bc>)
 80037da:	f023 f857 	bl	802688c <puts>
				return (-1);		// some kindof error
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80037e2:	e6e0      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 80037e4:	4847      	ldr	r0, [pc, #284]	; (8003904 <lcd_event_process+0x3c0>)
 80037e6:	f023 f851 	bl	802688c <puts>
				return (-1);		// some kindof error
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80037ee:	e6da      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 80037f0:	4845      	ldr	r0, [pc, #276]	; (8003908 <lcd_event_process+0x3c4>)
 80037f2:	f023 f84b 	bl	802688c <puts>
				return (-1);		// some kindof error
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80037fa:	e6d4      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 80037fc:	4843      	ldr	r0, [pc, #268]	; (800390c <lcd_event_process+0x3c8>)
 80037fe:	f023 f845 	bl	802688c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 8003802:	f7ff fe0b 	bl	800341c <getlcdpage>
				return (-1);		// some kindof error
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800380a:	e6cc      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Invalid waveform ID\n");
 800380c:	4840      	ldr	r0, [pc, #256]	; (8003910 <lcd_event_process+0x3cc>)
 800380e:	f023 f83d 	bl	802688c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 8003812:	f7ff fe03 	bl	800341c <getlcdpage>
				return (-1);		// some kindof error
 8003816:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800381a:	e6c4      	b.n	80035a6 <lcd_event_process+0x62>
					if (http_downloading == NXT_LOADING) {	// return code 0x05 is good - block rcv'd
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <lcd_event_process+0x3d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d121      	bne.n	8003868 <lcd_event_process+0x324>
						nxt_blocksacked++;
 8003824:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <lcd_event_process+0x3d4>)
					return (0);
 8003826:	2000      	movs	r0, #0
						nxt_blocksacked++;
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e6ba      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Invalid Component ID\n");
 8003830:	483a      	ldr	r0, [pc, #232]	; (800391c <lcd_event_process+0x3d8>)
 8003832:	f023 f82b 	bl	802688c <puts>
					return (0);
 8003836:	2000      	movs	r0, #0
 8003838:	e6b5      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Successful execution\n");
 800383a:	4839      	ldr	r0, [pc, #228]	; (8003920 <lcd_event_process+0x3dc>)
 800383c:	f023 f826 	bl	802688c <puts>
					return (0);
 8003840:	2000      	movs	r0, #0
 8003842:	e6b0      	b.n	80035a6 <lcd_event_process+0x62>
					printf("Invalid command\n");
 8003844:	4837      	ldr	r0, [pc, #220]	; (8003924 <lcd_event_process+0x3e0>)
 8003846:	f023 f821 	bl	802688c <puts>
				return (-1);		// some kindof error
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800384e:	e6aa      	b.n	80035a6 <lcd_event_process+0x62>
		return (0xffffffff);
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	e752      	b.n	80036fc <lcd_event_process+0x1b8>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8003856:	7860      	ldrb	r0, [r4, #1]
 8003858:	f7ff fbee 	bl	8003038 <lcd_pagechange>
 800385c:	4603      	mov	r3, r0
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <lcd_event_process+0x3e4>)
			return (0);
 8003860:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8003862:	b2db      	uxtb	r3, r3
 8003864:	7013      	strb	r3, [r2, #0]
 8003866:	e69e      	b.n	80035a6 <lcd_event_process+0x62>
						printf("NXT Error 0x05\n");
 8003868:	4830      	ldr	r0, [pc, #192]	; (800392c <lcd_event_process+0x3e8>)
 800386a:	f023 f80f 	bl	802688c <puts>
					return (0);
 800386e:	2000      	movs	r0, #0
 8003870:	e699      	b.n	80035a6 <lcd_event_process+0x62>
					if (eventbuffer[3] == 1) 		// sound on
 8003872:	78e3      	ldrb	r3, [r4, #3]
 8003874:	4a2e      	ldr	r2, [pc, #184]	; (8003930 <lcd_event_process+0x3ec>)
 8003876:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 800387a:	482e      	ldr	r0, [pc, #184]	; (8003934 <lcd_event_process+0x3f0>)
					if (eventbuffer[3] == 1) 		// sound on
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8003884:	f023 f802 	bl	802688c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8003888:	7863      	ldrb	r3, [r4, #1]
 800388a:	2b04      	cmp	r3, #4
 800388c:	f47f af15 	bne.w	80036ba <lcd_event_process+0x176>
 8003890:	78a3      	ldrb	r3, [r4, #2]
 8003892:	e754      	b.n	800373e <lcd_event_process+0x1fa>
					lcdbright = eventbuffer[3];
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <lcd_event_process+0x3f4>)
 8003896:	78e2      	ldrb	r2, [r4, #3]
 8003898:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2a0d      	cmp	r2, #13
 800389e:	dc01      	bgt.n	80038a4 <lcd_event_process+0x360>
						lcdbright = 14;		// prevent black
 80038a0:	220e      	movs	r2, #14
 80038a2:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 80038a4:	681b      	ldr	r3, [r3, #0]
	dimtimer = DIMTIME;
 80038a6:	f64e 2160 	movw	r1, #60000	; 0xea60
 80038aa:	4a24      	ldr	r2, [pc, #144]	; (800393c <lcd_event_process+0x3f8>)
	sprintf(buffer, "%s=%lu", id, value);
 80038ac:	a804      	add	r0, sp, #16
 80038ae:	2b63      	cmp	r3, #99	; 0x63
	dimtimer = DIMTIME;
 80038b0:	6011      	str	r1, [r2, #0]
	sprintf(buffer, "%s=%lu", id, value);
 80038b2:	bf28      	it	cs
 80038b4:	2363      	movcs	r3, #99	; 0x63
 80038b6:	4a22      	ldr	r2, [pc, #136]	; (8003940 <lcd_event_process+0x3fc>)
 80038b8:	4922      	ldr	r1, [pc, #136]	; (8003944 <lcd_event_process+0x400>)
 80038ba:	f023 f935 	bl	8026b28 <siprintf>
	result = writelcdcmd(buffer);
 80038be:	a804      	add	r0, sp, #16
 80038c0:	f7fe fcf2 	bl	80022a8 <writelcdcmd>
 80038c4:	9002      	str	r0, [sp, #8]
	if (result == -1) {		// wait for response
 80038c6:	9b02      	ldr	r3, [sp, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	d014      	beq.n	80038f6 <lcd_event_process+0x3b2>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80038cc:	7863      	ldrb	r3, [r4, #1]
	return (result);
 80038ce:	9a02      	ldr	r2, [sp, #8]
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	f47f aef2 	bne.w	80036ba <lcd_event_process+0x176>
 80038d6:	78a3      	ldrb	r3, [r4, #2]
 80038d8:	e72b      	b.n	8003732 <lcd_event_process+0x1ee>
					printf("Reboot touch\n");
 80038da:	481b      	ldr	r0, [pc, #108]	; (8003948 <lcd_event_process+0x404>)
 80038dc:	f022 ffd6 	bl	802688c <puts>
					osDelay(100);
 80038e0:	2064      	movs	r0, #100	; 0x64
 80038e2:	f012 feb9 	bl	8016658 <osDelay>
					rebootme();
 80038e6:	f000 fa5f 	bl	8003da8 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80038ea:	7863      	ldrb	r3, [r4, #1]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	f47f aee4 	bne.w	80036ba <lcd_event_process+0x176>
 80038f2:	78a3      	ldrb	r3, [r4, #2]
 80038f4:	e720      	b.n	8003738 <lcd_event_process+0x1f4>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80038f6:	4815      	ldr	r0, [pc, #84]	; (800394c <lcd_event_process+0x408>)
 80038f8:	f022 ff2c 	bl	8026754 <iprintf>
 80038fc:	e7e6      	b.n	80038cc <lcd_event_process+0x388>
 80038fe:	bf00      	nop
 8003900:	0802c0c8 	.word	0x0802c0c8
 8003904:	0802c0a8 	.word	0x0802c0a8
 8003908:	0802c0dc 	.word	0x0802c0dc
 800390c:	0802c068 	.word	0x0802c068
 8003910:	0802c0f8 	.word	0x0802c0f8
 8003914:	200018bc 	.word	0x200018bc
 8003918:	200030ec 	.word	0x200030ec
 800391c:	0802c124 	.word	0x0802c124
 8003920:	0802c10c 	.word	0x0802c10c
 8003924:	0802c058 	.word	0x0802c058
 8003928:	20001a68 	.word	0x20001a68
 800392c:	0802c13c 	.word	0x0802c13c
 8003930:	20000292 	.word	0x20000292
 8003934:	0802c21c 	.word	0x0802c21c
 8003938:	20000018 	.word	0x20000018
 800393c:	2000000c 	.word	0x2000000c
 8003940:	0802bd28 	.word	0x0802bd28
 8003944:	0802bcf0 	.word	0x0802bcf0
 8003948:	0802c20c 	.word	0x0802c20c
 800394c:	0802bcf8 	.word	0x0802bcf8

08003950 <lcd_starting>:


// display starting up items
lcd_starting() {
 8003950:	b530      	push	{r4, r5, lr}
 8003952:	b097      	sub	sp, #92	; 0x5c
	static int i = 0;
	char str[82] = { "empty" };

		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
		switch (i & 3) {
 8003954:	4d2f      	ldr	r5, [pc, #188]	; (8003a14 <lcd_starting+0xc4>)
	char str[82] = { "empty" };
 8003956:	224c      	movs	r2, #76	; 0x4c
 8003958:	2100      	movs	r1, #0
 800395a:	f10d 000a 	add.w	r0, sp, #10
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800395e:	4c2e      	ldr	r4, [pc, #184]	; (8003a18 <lcd_starting+0xc8>)
	char str[82] = { "empty" };
 8003960:	f021 ff5a 	bl	8025818 <memset>
		switch (i & 3) {
 8003964:	682b      	ldr	r3, [r5, #0]
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003966:	f10d 0c04 	add.w	ip, sp, #4
		switch (i & 3) {
 800396a:	f003 0e03 	and.w	lr, r3, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800396e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003976:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800397a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
		switch (i & 3) {
 800397e:	f1be 0f02 	cmp.w	lr, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003982:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8003986:	f82c 3b02 	strh.w	r3, [ip], #2
 800398a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800398e:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 8003992:	d034      	beq.n	80039fe <lcd_starting+0xae>
 8003994:	f1be 0f03 	cmp.w	lr, #3
 8003998:	d026      	beq.n	80039e8 <lcd_starting+0x98>
 800399a:	f1be 0f01 	cmp.w	lr, #1
 800399e:	d01b      	beq.n	80039d8 <lcd_starting+0x88>
		case 0:
			writelcdcmd(strcat(str, ".\""));
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <lcd_starting+0xcc>)
 80039a2:	a801      	add	r0, sp, #4
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	789b      	ldrb	r3, [r3, #2]
 80039a8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80039ac:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80039b0:	f7fe fc7a 	bl	80022a8 <writelcdcmd>
			break;
		case 3:
			writelcdcmd(strcat(str, "....\""));
			break;
		}
		i++;
 80039b4:	682b      	ldr	r3, [r5, #0]
		osDelay(250);
 80039b6:	20fa      	movs	r0, #250	; 0xfa
		i++;
 80039b8:	3301      	adds	r3, #1
 80039ba:	602b      	str	r3, [r5, #0]
		osDelay(250);
 80039bc:	f012 fe4c 	bl	8016658 <osDelay>

		if (!(netif_is_link_up(&gnetif))) {
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <lcd_starting+0xd0>)
 80039c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c6:	075b      	lsls	r3, r3, #29
 80039c8:	d501      	bpl.n	80039ce <lcd_starting+0x7e>
	writelcdcmd("ref 0");		// refresh screen

	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd("page 0");
#endif
}
 80039ca:	b017      	add	sp, #92	; 0x5c
 80039cc:	bd30      	pop	{r4, r5, pc}
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 80039ce:	4815      	ldr	r0, [pc, #84]	; (8003a24 <lcd_starting+0xd4>)
 80039d0:	f7fe fc6a 	bl	80022a8 <writelcdcmd>
}
 80039d4:	b017      	add	sp, #92	; 0x5c
 80039d6:	bd30      	pop	{r4, r5, pc}
			writelcdcmd(strcat(str, "..\""));
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <lcd_starting+0xd8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 80039e0:	a801      	add	r0, sp, #4
 80039e2:	f7fe fc61 	bl	80022a8 <writelcdcmd>
			break;
 80039e6:	e7e5      	b.n	80039b4 <lcd_starting+0x64>
			writelcdcmd(strcat(str, "....\""));
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <lcd_starting+0xdc>)
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	889b      	ldrh	r3, [r3, #4]
 80039ee:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 80039f2:	a801      	add	r0, sp, #4
 80039f4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80039f8:	f7fe fc56 	bl	80022a8 <writelcdcmd>
			break;
 80039fc:	e7da      	b.n	80039b4 <lcd_starting+0x64>
			writelcdcmd(strcat(str, "...\""));
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <lcd_starting+0xe0>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	f8cd 0032 	str.w	r0, [sp, #50]	; 0x32
 8003a08:	a801      	add	r0, sp, #4
 8003a0a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8003a0e:	f7fe fc4b 	bl	80022a8 <writelcdcmd>
			break;
 8003a12:	e7cf      	b.n	80039b4 <lcd_starting+0x64>
 8003a14:	20001a50 	.word	0x20001a50
 8003a18:	0802c2a0 	.word	0x0802c2a0
 8003a1c:	0802c2d0 	.word	0x0802c2d0
 8003a20:	20003544 	.word	0x20003544
 8003a24:	0802c2e8 	.word	0x0802c2e8
 8003a28:	0802c2d4 	.word	0x0802c2d4
 8003a2c:	0802c2e0 	.word	0x0802c2e0
 8003a30:	0802c2d8 	.word	0x0802c2d8

08003a34 <init_nextion>:


init_nextion() {
	int i;
	char str[82] = { "empty" };
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <init_nextion+0x14c>)
 8003a36:	224c      	movs	r2, #76	; 0x4c
init_nextion() {
 8003a38:	b570      	push	{r4, r5, r6, lr}
	char str[82] = { "empty" };
 8003a3a:	e893 0003 	ldmia.w	r3, {r0, r1}
init_nextion() {
 8003a3e:	b0b0      	sub	sp, #192	; 0xc0

	lcduart_error = HAL_UART_ERROR_NONE;
 8003a40:	2400      	movs	r4, #0
 8003a42:	4d50      	ldr	r5, [pc, #320]	; (8003b84 <init_nextion+0x150>)
	char str[82] = { "empty" };
 8003a44:	9003      	str	r0, [sp, #12]
 8003a46:	f10d 0012 	add.w	r0, sp, #18
 8003a4a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f021 fee2 	bl	8025818 <memset>

	lcd_init(230400);
 8003a54:	f44f 3061 	mov.w	r0, #230400	; 0x38400
	osDelay(300);
	lcd_txblocked = 0;
 8003a58:	4e4b      	ldr	r6, [pc, #300]	; (8003b88 <init_nextion+0x154>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a5a:	602c      	str	r4, [r5, #0]
	lcd_init(230400);
 8003a5c:	f7ff fb44 	bl	80030e8 <lcd_init>
	osDelay(300);
 8003a60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a64:	f012 fdf8 	bl	8016658 <osDelay>
	writelcdcmd("cls BLACK");
 8003a68:	4848      	ldr	r0, [pc, #288]	; (8003b8c <init_nextion+0x158>)
	lcd_txblocked = 0;
 8003a6a:	6034      	str	r4, [r6, #0]
	writelcdcmd("cls BLACK");
 8003a6c:	f7fe fc1c 	bl	80022a8 <writelcdcmd>
	osDelay(300);
 8003a70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a74:	f012 fdf0 	bl	8016658 <osDelay>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8003a78:	f242 7330 	movw	r3, #10032	; 0x2730
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4944      	ldr	r1, [pc, #272]	; (8003b90 <init_nextion+0x15c>)
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	a803      	add	r0, sp, #12
 8003a84:	2312      	movs	r3, #18
 8003a86:	f023 f84f 	bl	8026b28 <siprintf>
	BUILD);
	lcduart_error = HAL_UART_ERROR_NONE;
	writelcdcmd(str);
 8003a8a:	a803      	add	r0, sp, #12
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a8c:	602c      	str	r4, [r5, #0]
	writelcdcmd(str);
 8003a8e:	f7fe fc0b 	bl	80022a8 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;

	osDelay(500);
 8003a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	lcduart_error = HAL_UART_ERROR_NONE;
 8003a96:	602c      	str	r4, [r5, #0]
	osDelay(500);
 8003a98:	f012 fdde 	bl	8016658 <osDelay>
	lcdstatus = 0xff;
 8003a9c:	4d3d      	ldr	r5, [pc, #244]	; (8003b94 <init_nextion+0x160>)
	lcd_txblocked = 0;
 8003a9e:	6034      	str	r4, [r6, #0]
	lcd_clearrxbuf();
 8003aa0:	f7fe fcda 	bl	8002458 <lcd_clearrxbuf>
	strcpy(pkt, str);
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <init_nextion+0x164>)
	lcdstatus = 0xff;
 8003aa6:	21ff      	movs	r1, #255	; 0xff
	strcat(pkt, "\xff\xff\xff");
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <init_nextion+0x168>)
	lcdstatus = 0xff;
 8003aaa:	7029      	strb	r1, [r5, #0]
	strcpy(pkt, str);
 8003aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ab0:	9018      	str	r0, [sp, #96]	; 0x60
 8003ab2:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 8003ab4:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 8003ab6:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
	strcat(pkt, "\xff\xff\xff");
 8003aba:	f8cd 0067 	str.w	r0, [sp, #103]	; 0x67
	return (lcd_puts(pkt));
 8003abe:	a818      	add	r0, sp, #96	; 0x60
	strcpy(pkt, str);
 8003ac0:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
	return (lcd_puts(pkt));
 8003ac4:	f7fe fb58 	bl	8002178 <lcd_puts>
	if (result == -1) {		// send err
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d054      	beq.n	8003b76 <init_nextion+0x142>
	processnex();
 8003acc:	f7ff fb3e 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 8003ad0:	782b      	ldrb	r3, [r5, #0]
 8003ad2:	2bff      	cmp	r3, #255	; 0xff
 8003ad4:	d116      	bne.n	8003b04 <init_nextion+0xd0>
 8003ad6:	4c32      	ldr	r4, [pc, #200]	; (8003ba0 <init_nextion+0x16c>)
 8003ad8:	e007      	b.n	8003aea <init_nextion+0xb6>
		trys++;
 8003ada:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003adc:	f012 fdbc 	bl	8016658 <osDelay>
		processnex();
 8003ae0:	f7ff fb34 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 8003ae4:	782b      	ldrb	r3, [r5, #0]
 8003ae6:	2bff      	cmp	r3, #255	; 0xff
 8003ae8:	d10c      	bne.n	8003b04 <init_nextion+0xd0>
		if (trys > 1000) {
 8003aea:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003aec:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003af2:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003af6:	d9f0      	bls.n	8003ada <init_nextion+0xa6>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003af8:	482a      	ldr	r0, [pc, #168]	; (8003ba4 <init_nextion+0x170>)
 8003afa:	f022 fe2b 	bl	8026754 <iprintf>
			trys = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	6023      	str	r3, [r4, #0]
			return (-1);
 8003b02:	e000      	b.n	8003b06 <init_nextion+0xd2>
	return (lcdstatus);
 8003b04:	782b      	ldrb	r3, [r5, #0]
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003b06:	2400      	movs	r4, #0
 8003b08:	6034      	str	r4, [r6, #0]
	lcd_getid();		// in the background
	processnex();
 8003b0a:	f7ff fb1f 	bl	800314c <processnex>

	osDelay(100);
 8003b0e:	2064      	movs	r0, #100	; 0x64
 8003b10:	f012 fda2 	bl	8016658 <osDelay>
	lcd_txblocked = 0;
 8003b14:	6034      	str	r4, [r6, #0]
	lcd_clearrxbuf();
 8003b16:	f7fe fc9f 	bl	8002458 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003b1a:	23ff      	movs	r3, #255	; 0xff
	result = writelcdcmd("get sys0");
 8003b1c:	4822      	ldr	r0, [pc, #136]	; (8003ba8 <init_nextion+0x174>)
	lcdstatus = 0xff;
 8003b1e:	702b      	strb	r3, [r5, #0]
	result = writelcdcmd("get sys0");
 8003b20:	f7fe fbc2 	bl	80022a8 <writelcdcmd>
	if (result == -1) {		// send err
 8003b24:	3001      	adds	r0, #1
 8003b26:	d022      	beq.n	8003b6e <init_nextion+0x13a>
	processnex();
 8003b28:	f7ff fb10 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 8003b2c:	782b      	ldrb	r3, [r5, #0]
 8003b2e:	2bff      	cmp	r3, #255	; 0xff
 8003b30:	d116      	bne.n	8003b60 <init_nextion+0x12c>
 8003b32:	4c1b      	ldr	r4, [pc, #108]	; (8003ba0 <init_nextion+0x16c>)
 8003b34:	e007      	b.n	8003b46 <init_nextion+0x112>
		trys++;
 8003b36:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003b38:	f012 fd8e 	bl	8016658 <osDelay>
		processnex();
 8003b3c:	f7ff fb06 	bl	800314c <processnex>
	while (lcdstatus == 0xff) {
 8003b40:	782b      	ldrb	r3, [r5, #0]
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d10c      	bne.n	8003b60 <init_nextion+0x12c>
		if (trys > 1000) {
 8003b46:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003b48:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003b4e:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003b52:	d9f0      	bls.n	8003b36 <init_nextion+0x102>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003b54:	4813      	ldr	r0, [pc, #76]	; (8003ba4 <init_nextion+0x170>)
 8003b56:	f022 fdfd 	bl	8026754 <iprintf>
			trys = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6023      	str	r3, [r4, #0]
			return (-1);
 8003b5e:	e000      	b.n	8003b62 <init_nextion+0x12e>
	return (lcdstatus);
 8003b60:	782b      	ldrb	r3, [r5, #0]
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003b62:	2300      	movs	r3, #0
 8003b64:	6033      	str	r3, [r6, #0]
	lcd_getsys0();
	processnex();
 8003b66:	f7ff faf1 	bl	800314c <processnex>

}
 8003b6a:	b030      	add	sp, #192	; 0xc0
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
		printf("getsys0: Cmd failed\n\r");
 8003b6e:	480f      	ldr	r0, [pc, #60]	; (8003bac <init_nextion+0x178>)
 8003b70:	f022 fdf0 	bl	8026754 <iprintf>
 8003b74:	e7d8      	b.n	8003b28 <init_nextion+0xf4>
		printf("getid: Cmd failed\n\r");
 8003b76:	480e      	ldr	r0, [pc, #56]	; (8003bb0 <init_nextion+0x17c>)
 8003b78:	f022 fdec 	bl	8026754 <iprintf>
 8003b7c:	e7a6      	b.n	8003acc <init_nextion+0x98>
 8003b7e:	bf00      	nop
 8003b80:	0802a7c8 	.word	0x0802a7c8
 8003b84:	20001b20 	.word	0x20001b20
 8003b88:	20001a70 	.word	0x20001a70
 8003b8c:	0802c324 	.word	0x0802c324
 8003b90:	0802c330 	.word	0x0802c330
 8003b94:	20001b1c 	.word	0x20001b1c
 8003b98:	0802bfe8 	.word	0x0802bfe8
 8003b9c:	0802bbfc 	.word	0x0802bbfc
 8003ba0:	20002150 	.word	0x20002150
 8003ba4:	0802bf70 	.word	0x0802bf70
 8003ba8:	0802bfc4 	.word	0x0802bfc4
 8003bac:	0802bfd0 	.word	0x0802bfd0
 8003bb0:	0802bff0 	.word	0x0802bff0

08003bb4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003bb4:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2107      	movs	r1, #7
 8003bba:	2026      	movs	r0, #38	; 0x26
 8003bbc:	f006 f83c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bc0:	2026      	movs	r0, #38	; 0x26
 8003bc2:	f006 f883 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2106      	movs	r1, #6
 8003bca:	2047      	movs	r0, #71	; 0x47
 8003bcc:	f006 f834 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003bd0:	2047      	movs	r0, #71	; 0x47
 8003bd2:	f006 f87b 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2106      	movs	r1, #6
 8003bda:	2012      	movs	r0, #18
 8003bdc:	f006 f82c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003be0:	2012      	movs	r0, #18
 8003be2:	f006 f873 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2106      	movs	r1, #6
 8003bea:	2028      	movs	r0, #40	; 0x28
 8003bec:	f006 f824 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bf0:	2028      	movs	r0, #40	; 0x28
 8003bf2:	f006 f86b 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003bf6:	202d      	movs	r0, #45	; 0x2d
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	f006 f81c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003c00:	202d      	movs	r0, #45	; 0x2d
}
 8003c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003c06:	f006 b861 	b.w	8009ccc <HAL_NVIC_EnableIRQ>
 8003c0a:	bf00      	nop

08003c0c <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <netif_status_callbk_fn+0x8>)
 8003c0e:	f022 be3d 	b.w	802688c <puts>
 8003c12:	bf00      	nop
 8003c14:	0802c380 	.word	0x0802c380

08003c18 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <Callback01+0x8>)
 8003c1a:	f022 be37 	b.w	802688c <puts>
 8003c1e:	bf00      	nop
 8003c20:	0802c398 	.word	0x0802c398

08003c24 <_write>:
	if (file == 1) {
 8003c24:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c28:	460c      	mov	r4, r1
 8003c2a:	4617      	mov	r7, r2
	if (file == 1) {
 8003c2c:	d00e      	beq.n	8003c4c <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	dd0a      	ble.n	8003c48 <_write+0x24>
 8003c32:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8003c34:	4d0b      	ldr	r5, [pc, #44]	; (8003c64 <_write+0x40>)
 8003c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f010 fa16 	bl	8014070 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d1f6      	bne.n	8003c36 <_write+0x12>
}
 8003c48:	4638      	mov	r0, r7
 8003c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c4c:	2a00      	cmp	r2, #0
 8003c4e:	ddfb      	ble.n	8003c48 <_write+0x24>
 8003c50:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8003c52:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003c56:	f001 fe67 	bl	8005928 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003c5a:	42ac      	cmp	r4, r5
 8003c5c:	d1f9      	bne.n	8003c52 <_write+0x2e>
}
 8003c5e:	4638      	mov	r0, r7
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20002ba0 	.word	0x20002ba0

08003c68 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c6c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <crc_rom+0x4c>)
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <crc_rom+0x50>)
 8003c74:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003c76:	bf2c      	ite	cs
 8003c78:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8003c7c:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c80:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 8003c86:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003c88:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 8003c8a:	460c      	mov	r4, r1
crc_rom() {
 8003c8c:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4620      	mov	r0, r4
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	f7fc ffa8 	bl	8000be8 <xcrc32>
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003c98:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003c9a:	4601      	mov	r1, r0
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4807      	ldr	r0, [pc, #28]	; (8003cbc <crc_rom+0x54>)
}
 8003ca0:	b002      	add	sp, #8
 8003ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("         CRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003ca6:	f022 bd55 	b.w	8026754 <iprintf>
 8003caa:	bf00      	nop
 8003cac:	08003bb5 	.word	0x08003bb5
 8003cb0:	200006d4 	.word	0x200006d4
 8003cb4:	08047e24 	.word	0x08047e24
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	0802c3a4 	.word	0x0802c3a4

08003cc0 <err_leds>:
err_leds(int why) {
 8003cc0:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003cc2:	4e37      	ldr	r6, [pc, #220]	; (8003da0 <err_leds+0xe0>)
err_leds(int why) {
 8003cc4:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003cc6:	4d37      	ldr	r5, [pc, #220]	; (8003da4 <err_leds+0xe4>)
 8003cc8:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003cca:	2c07      	cmp	r4, #7
 8003ccc:	d80f      	bhi.n	8003cee <err_leds+0x2e>
 8003cce:	e8df f004 	tbb	[pc, r4]
 8003cd2:	5c51      	.short	0x5c51
 8003cd4:	25303b46 	.word	0x25303b46
 8003cd8:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f009 f8ee 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f009 f8e9 	bl	800cec0 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	9b01      	ldr	r3, [sp, #4]
 8003cf4:	42ab      	cmp	r3, r5
 8003cf6:	dae8      	bge.n	8003cca <err_leds+0xa>
 8003cf8:	9b01      	ldr	r3, [sp, #4]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	9b01      	ldr	r3, [sp, #4]
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	dbf9      	blt.n	8003cf8 <err_leds+0x38>
 8003d04:	e7e1      	b.n	8003cca <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d06:	4630      	mov	r0, r6
 8003d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d0c:	f009 f8d8 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d14:	4630      	mov	r0, r6
 8003d16:	f009 f8d3 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d1a:	e7e8      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d22:	f009 f8cd 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f009 f8c8 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d30:	e7dd      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d32:	4630      	mov	r0, r6
 8003d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d38:	f009 f8c2 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d40:	4630      	mov	r0, r6
 8003d42:	f009 f8bd 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d46:	e7d2      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d4e:	f009 f8b7 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d56:	4630      	mov	r0, r6
 8003d58:	f009 f8b2 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d5c:	e7c7      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d64:	f009 f8ac 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f009 f8a7 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d72:	e7bc      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d74:	4630      	mov	r0, r6
 8003d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d7a:	f009 f8a1 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d82:	4630      	mov	r0, r6
 8003d84:	f009 f89c 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d88:	e7b1      	b.n	8003cee <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d90:	f009 f896 	bl	800cec0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f009 f891 	bl	800cec0 <HAL_GPIO_TogglePin>
			break;
 8003d9e:	e7a6      	b.n	8003cee <err_leds+0x2e>
 8003da0:	40020c00 	.word	0x40020c00
 8003da4:	003567e0 	.word	0x003567e0

08003da8 <rebootme>:
void rebootme(int why) {
 8003da8:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003daa:	b672      	cpsid	i
		err_leds(why);
 8003dac:	f7ff ff88 	bl	8003cc0 <err_leds>

08003db0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003db0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003db4:	074a      	lsls	r2, r1, #29
 8003db6:	d502      	bpl.n	8003dbe <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003db8:	4809      	ldr	r0, [pc, #36]	; (8003de0 <netif_link_callbk_fn+0x30>)
 8003dba:	f022 bccb 	b.w	8026754 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8003dc2:	4808      	ldr	r0, [pc, #32]	; (8003de4 <netif_link_callbk_fn+0x34>)
 8003dc4:	f022 fcc6 	bl	8026754 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003dc8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003dcc:	075b      	lsls	r3, r3, #29
 8003dce:	d500      	bpl.n	8003dd2 <netif_link_callbk_fn+0x22>
}
 8003dd0:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <netif_link_callbk_fn+0x38>)
 8003dd4:	f022 fd5a 	bl	802688c <puts>
			rebootme(1);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7ff ffe5 	bl	8003da8 <rebootme>
 8003dde:	bf00      	nop
 8003de0:	0802c3d0 	.word	0x0802c3d0
 8003de4:	0802c3f0 	.word	0x0802c3f0
 8003de8:	0802c410 	.word	0x0802c410

08003dec <StarLPTask>:
	char str[82] = { "empty" };
 8003dec:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <StarLPTask+0x140>)
 8003dee:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003df4:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003df8:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003dfa:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003f7c <StarLPTask+0x190>
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003dfe:	4f4c      	ldr	r7, [pc, #304]	; (8003f30 <StarLPTask+0x144>)
	char str[82] = { "empty" };
 8003e00:	9009      	str	r0, [sp, #36]	; 0x24
 8003e02:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8003e06:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f021 fd04 	bl	8025818 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003e10:	2200      	movs	r2, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003e12:	2101      	movs	r1, #1
 8003e14:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003e16:	f8c9 2078 	str.w	r2, [r9, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003e1a:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003e1e:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003e22:	f012 ff11 	bl	8016c48 <xQueueGenericCreate>
 8003e26:	6038      	str	r0, [r7, #0]
	if (consolerxq == NULL) {
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 83ba 	beq.w	80045a2 <StarLPTask+0x7b6>
	strcpy(udp_target, SERVER_DESTINATION);
 8003e2e:	4c41      	ldr	r4, [pc, #260]	; (8003f34 <StarLPTask+0x148>)
 8003e30:	4e41      	ldr	r6, [pc, #260]	; (8003f38 <StarLPTask+0x14c>)
	if (http_downloading) {		// don't go further
 8003e32:	4d42      	ldr	r5, [pc, #264]	; (8003f3c <StarLPTask+0x150>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e36:	6030      	str	r0, [r6, #0]
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	60f3      	str	r3, [r6, #12]
 8003e3c:	6071      	str	r1, [r6, #4]
 8003e3e:	60b2      	str	r2, [r6, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e40:	2201      	movs	r2, #1
 8003e42:	493f      	ldr	r1, [pc, #252]	; (8003f40 <StarLPTask+0x154>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003e44:	6130      	str	r0, [r6, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e46:	483f      	ldr	r0, [pc, #252]	; (8003f44 <StarLPTask+0x158>)
 8003e48:	f010 fb30 	bl	80144ac <HAL_UART_Receive_IT>
	osDelay(10);
 8003e4c:	200a      	movs	r0, #10
 8003e4e:	f012 fc03 	bl	8016658 <osDelay>
	if (http_downloading) {		// don't go further
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 8399 	bne.w	800458c <StarLPTask+0x7a0>
	while (main_init_done == 0)	 {
 8003e5a:	4c3b      	ldr	r4, [pc, #236]	; (8003f48 <StarLPTask+0x15c>)
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	b943      	cbnz	r3, 8003e72 <StarLPTask+0x86>
		HAL_IWDG_Refresh(&hiwdg);
 8003e60:	4d3a      	ldr	r5, [pc, #232]	; (8003f4c <StarLPTask+0x160>)
		lcd_starting();
 8003e62:	f7ff fd75 	bl	8003950 <lcd_starting>
		HAL_IWDG_Refresh(&hiwdg);
 8003e66:	4628      	mov	r0, r5
 8003e68:	f009 fe94 	bl	800db94 <HAL_IWDG_Refresh>
	while (main_init_done == 0)	 {
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f7      	beq.n	8003e62 <StarLPTask+0x76>
	int last3min = 0;
 8003e72:	2300      	movs	r3, #0
	writelcdcmd("page 0");		// redraw page0
 8003e74:	4836      	ldr	r0, [pc, #216]	; (8003f50 <StarLPTask+0x164>)
 8003e76:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003f80 <StarLPTask+0x194>
	int last3min = 0;
 8003e7a:	461e      	mov	r6, r3
 8003e7c:	9307      	str	r3, [sp, #28]
	writelcdcmd("page 0");		// redraw page0
 8003e7e:	f7fe fa13 	bl	80022a8 <writelcdcmd>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003e82:	4834      	ldr	r0, [pc, #208]	; (8003f54 <StarLPTask+0x168>)
 8003e84:	f00c fc80 	bl	8010788 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003e88:	46b2      	mov	sl, r6
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <StarLPTask+0x16c>)
 8003e8c:	2201      	movs	r2, #1
	gainchanged = 0;
 8003e8e:	9606      	str	r6, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003e90:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003e92:	482e      	ldr	r0, [pc, #184]	; (8003f4c <StarLPTask+0x160>)
		tenmstimer++;
 8003e94:	3601      	adds	r6, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003e96:	f009 fe7d 	bl	800db94 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003e9a:	200a      	movs	r0, #10
 8003e9c:	f012 fbdc 	bl	8016658 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <StarLPTask+0x170>)
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <StarLPTask+0x174>)
		tenmstimer++;
 8003ea4:	b2b6      	uxth	r6, r6
		globaladcnoise = abs(meanwindiff);
 8003ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bfb8      	it	lt
 8003eae:	425b      	neglt	r3, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003eb4:	09db      	lsrs	r3, r3, #7
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <StarLPTask+0x178>)
 8003eb8:	3304      	adds	r3, #4
 8003eba:	8013      	strh	r3, [r2, #0]
		if (sigsuppress) {
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <StarLPTask+0x17c>)
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	b10b      	cbz	r3, 8003ec6 <StarLPTask+0xda>
			sigsuppress--;		// decrement trigger suppression counter
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	6013      	str	r3, [r2, #0]
				agc = (agc) ? 0 : 1;
 8003ec6:	4d29      	ldr	r5, [pc, #164]	; (8003f6c <StarLPTask+0x180>)
				printf("AGC is ");
 8003ec8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003f84 <StarLPTask+0x198>
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f013 f8bc 	bl	8017050 <xQueueReceive>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d055      	beq.n	8003f88 <StarLPTask+0x19c>
			if (inch == 0x03) {		// control C
 8003edc:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003ee0:	2803      	cmp	r0, #3
 8003ee2:	d011      	beq.n	8003f08 <StarLPTask+0x11c>
			if ((isdigit(inch)) && (agc == 0)) {
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <StarLPTask+0x184>)
 8003ee6:	5cc3      	ldrb	r3, [r0, r3]
 8003ee8:	075b      	lsls	r3, r3, #29
 8003eea:	d501      	bpl.n	8003ef0 <StarLPTask+0x104>
 8003eec:	882b      	ldrh	r3, [r5, #0]
 8003eee:	b113      	cbz	r3, 8003ef6 <StarLPTask+0x10a>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 8003ef0:	f001 fd1a 	bl	8005928 <__io_putchar>
 8003ef4:	e7ea      	b.n	8003ecc <StarLPTask+0xe0>
				setpgagain(inch - '0');
 8003ef6:	3830      	subs	r0, #48	; 0x30
 8003ef8:	f002 fd5e 	bl	80069b8 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8003efc:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003f00:	481c      	ldr	r0, [pc, #112]	; (8003f74 <StarLPTask+0x188>)
 8003f02:	f022 fc27 	bl	8026754 <iprintf>
 8003f06:	e7e1      	b.n	8003ecc <StarLPTask+0xe0>
				agc = (agc) ? 0 : 1;
 8003f08:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8003f0a:	4640      	mov	r0, r8
				agc = (agc) ? 0 : 1;
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 8003f14:	f022 fc1e 	bl	8026754 <iprintf>
				if (agc)
 8003f18:	882b      	ldrh	r3, [r5, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 812c 	beq.w	8004178 <StarLPTask+0x38c>
					printf("ON\n");
 8003f20:	4815      	ldr	r0, [pc, #84]	; (8003f78 <StarLPTask+0x18c>)
 8003f22:	f022 fcb3 	bl	802688c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003f26:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8003f2a:	e7db      	b.n	8003ee4 <StarLPTask+0xf8>
 8003f2c:	0802a81c 	.word	0x0802a81c
 8003f30:	20002168 	.word	0x20002168
 8003f34:	0802b704 	.word	0x0802b704
 8003f38:	200034d8 	.word	0x200034d8
 8003f3c:	200018bc 	.word	0x200018bc
 8003f40:	20002164 	.word	0x20002164
 8003f44:	20002a14 	.word	0x20002a14
 8003f48:	20002dc4 	.word	0x20002dc4
 8003f4c:	20002668 	.word	0x20002668
 8003f50:	0802bedc 	.word	0x0802bedc
 8003f54:	200029c8 	.word	0x200029c8
 8003f58:	20002dc0 	.word	0x20002dc0
 8003f5c:	20000760 	.word	0x20000760
 8003f60:	20000710 	.word	0x20000710
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000780 	.word	0x20000780
 8003f6c:	2000002e 	.word	0x2000002e
 8003f70:	0804752d 	.word	0x0804752d
 8003f74:	0802c484 	.word	0x0802c484
 8003f78:	0802c47c 	.word	0x0802c47c
 8003f7c:	20003014 	.word	0x20003014
 8003f80:	20002df0 	.word	0x20002df0
 8003f84:	0802c474 	.word	0x0802c474
		if (!(ledsenabled)) {
 8003f88:	4baa      	ldr	r3, [pc, #680]	; (8004234 <StarLPTask+0x448>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80f8 	beq.w	8004184 <StarLPTask+0x398>
		} else if (ledhang) {	// trigger led
 8003f94:	4aa8      	ldr	r2, [pc, #672]	; (8004238 <StarLPTask+0x44c>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80f3 	beq.w	8004184 <StarLPTask+0x398>
			ledhang--;
 8003f9e:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa4:	48a5      	ldr	r0, [pc, #660]	; (800423c <StarLPTask+0x450>)
			ledhang--;
 8003fa6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f008 ff6f 	bl	800ce8c <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8003fae:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8003fb2:	f8db 3000 	ldr.w	r3, [fp]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	f040 80f1 	bne.w	800419e <StarLPTask+0x3b2>
		processnex();		// process Nextion
 8003fbc:	f7ff f8c6 	bl	800314c <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8003fc0:	4a9f      	ldr	r2, [pc, #636]	; (8004240 <StarLPTask+0x454>)
 8003fc2:	1cf3      	adds	r3, r6, #3
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	4a9e      	ldr	r2, [pc, #632]	; (8004244 <StarLPTask+0x458>)
 8003fca:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8003fce:	d31e      	bcc.n	800400e <StarLPTask+0x222>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8003fd0:	4c9d      	ldr	r4, [pc, #628]	; (8004248 <StarLPTask+0x45c>)
 8003fd2:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	f103 0219 	add.w	r2, r3, #25
 8003fdc:	4291      	cmp	r1, r2
 8003fde:	f200 8229 	bhi.w	8004434 <StarLPTask+0x648>
				if (jabbertimeout) {
 8003fe2:	4a9a      	ldr	r2, [pc, #616]	; (800424c <StarLPTask+0x460>)
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	b10b      	cbz	r3, 8003fec <StarLPTask+0x200>
					jabbertimeout--;		// de-arm count
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003fec:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8003ff0:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8003ff2:	9b06      	ldr	r3, [sp, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 823f 	beq.w	8004478 <StarLPTask+0x68c>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003ffa:	4b95      	ldr	r3, [pc, #596]	; (8004250 <StarLPTask+0x464>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 81ef 	beq.w	80043e2 <StarLPTask+0x5f6>
 8004004:	4b93      	ldr	r3, [pc, #588]	; (8004254 <StarLPTask+0x468>)
			} else if (lcd_currentpage == 1) {
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	f000 827f 	beq.w	800450c <StarLPTask+0x720>
				lcd_showvars();
 800400e:	4a92      	ldr	r2, [pc, #584]	; (8004258 <StarLPTask+0x46c>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8004010:	f106 030b 	add.w	r3, r6, #11
				lcd_showvars();
 8004014:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8004018:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800401c:	3a01      	subs	r2, #1
 800401e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8004022:	f080 80f9 	bcs.w	8004218 <StarLPTask+0x42c>
			lcd_trigplot();		// update lcd trigger and noise plots
 8004026:	4a8c      	ldr	r2, [pc, #560]	; (8004258 <StarLPTask+0x46c>)
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8004028:	f106 0332 	add.w	r3, r6, #50	; 0x32
			lcd_trigplot();		// update lcd trigger and noise plots
 800402c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 50) % 100 == 0) {		// every second	- offset
 8004030:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004034:	3a01      	subs	r2, #1
 8004036:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800403a:	d307      	bcc.n	800404c <StarLPTask+0x260>
			if ((lcd_sys0 >> 8) > 10029)
 800403c:	4b87      	ldr	r3, [pc, #540]	; (800425c <StarLPTask+0x470>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	f242 732d 	movw	r3, #10029	; 0x272d
 8004044:	ebb3 2f22 	cmp.w	r3, r2, asr #8
 8004048:	f2c0 822f 	blt.w	80044aa <StarLPTask+0x6be>
				lcd_gps();		// display the GPS on the LCD page 0
 800404c:	4a84      	ldr	r2, [pc, #528]	; (8004260 <StarLPTask+0x474>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 800404e:	f106 031b 	add.w	r3, r6, #27
				lcd_gps();		// display the GPS on the LCD page 0
 8004052:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8004056:	4a83      	ldr	r2, [pc, #524]	; (8004264 <StarLPTask+0x478>)
 8004058:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800405c:	d31a      	bcc.n	8004094 <StarLPTask+0x2a8>
			if (agc) {
 800405e:	4b82      	ldr	r3, [pc, #520]	; (8004268 <StarLPTask+0x47c>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 821b 	beq.w	800449e <StarLPTask+0x6b2>
				trigsin10sec = trigs - prevtrigs;
 8004068:	4c80      	ldr	r4, [pc, #512]	; (800426c <StarLPTask+0x480>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800406a:	4d81      	ldr	r5, [pc, #516]	; (8004270 <StarLPTask+0x484>)
				trigsin10sec = trigs - prevtrigs;
 800406c:	f8db 2000 	ldr.w	r2, [fp]
 8004070:	6823      	ldr	r3, [r4, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8004072:	8829      	ldrh	r1, [r5, #0]
				trigsin10sec = trigs - prevtrigs;
 8004074:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80042d8 <StarLPTask+0x4ec>
 8004078:	1ad3      	subs	r3, r2, r3
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800407a:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 800407c:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8004080:	d802      	bhi.n	8004088 <StarLPTask+0x29c>
					if (trigsin10sec < MINTRIGS10S)
 8004082:	2b01      	cmp	r3, #1
 8004084:	f240 826e 	bls.w	8004564 <StarLPTask+0x778>
				if (trigsin10sec > MAXTRIGS10S)
 8004088:	2b0a      	cmp	r3, #10
 800408a:	f200 8242 	bhi.w	8004512 <StarLPTask+0x726>
			gainchanged = 0;
 800408e:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8004090:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8004092:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8004094:	f640 338c 	movw	r3, #2956	; 0xb8c
 8004098:	429e      	cmp	r6, r3
 800409a:	d94d      	bls.n	8004138 <StarLPTask+0x34c>
			if (gpsgood == 0) {	// gps is not talking to us
 800409c:	4b75      	ldr	r3, [pc, #468]	; (8004274 <StarLPTask+0x488>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 81fe 	bne.w	80044a2 <StarLPTask+0x6b6>
				printf("GPS serial comms problem?\n");
 80040a6:	4874      	ldr	r0, [pc, #464]	; (8004278 <StarLPTask+0x48c>)
 80040a8:	f022 fbf0 	bl	802688c <puts>
				if (gpsbadcount++ > 9) {
 80040ac:	4973      	ldr	r1, [pc, #460]	; (800427c <StarLPTask+0x490>)
 80040ae:	680b      	ldr	r3, [r1, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	600a      	str	r2, [r1, #0]
 80040b6:	f300 825f 	bgt.w	8004578 <StarLPTask+0x78c>
			if (psensor == MPL115A2) {
 80040ba:	4b71      	ldr	r3, [pc, #452]	; (8004280 <StarLPTask+0x494>)
			gpsgood = 0;			// reset the good flag
 80040bc:	2200      	movs	r2, #0
 80040be:	496d      	ldr	r1, [pc, #436]	; (8004274 <StarLPTask+0x488>)
			if (psensor == MPL115A2) {
 80040c0:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80040c2:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f000 8218 	beq.w	80044fa <StarLPTask+0x70e>
			} else if (psensor == MPL3115A2) {
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f000 8237 	beq.w	800453e <StarLPTask+0x752>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <StarLPTask+0x498>)
			tenmstimer = 0;
 80040d2:	2600      	movs	r6, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80040d4:	f8b9 105c 	ldrh.w	r1, [r9, #92]	; 0x5c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b289      	uxth	r1, r1
 80040dc:	486a      	ldr	r0, [pc, #424]	; (8004288 <StarLPTask+0x49c>)
 80040de:	0e1a      	lsrs	r2, r3, #24
 80040e0:	9202      	str	r2, [sp, #8]
 80040e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80040e6:	9201      	str	r2, [sp, #4]
 80040e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	9200      	str	r2, [sp, #0]
 80040f0:	f242 7230 	movw	r2, #10032	; 0x2730
 80040f4:	f022 fb2e 	bl	8026754 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <StarLPTask+0x4a0>)
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <StarLPTask+0x4a4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8db 1000 	ldr.w	r1, [fp]
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	4863      	ldr	r0, [pc, #396]	; (8004294 <StarLPTask+0x4a8>)
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	9304      	str	r3, [sp, #16]
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <StarLPTask+0x4ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <StarLPTask+0x4b0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <StarLPTask+0x4b4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	4b53      	ldr	r3, [pc, #332]	; (8004270 <StarLPTask+0x484>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <StarLPTask+0x4b8>)
 8004128:	f9b3 2000 	ldrsh.w	r2, [r3]
 800412c:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <StarLPTask+0x4bc>)
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <StarLPTask+0x4c0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 fb0e 	bl	8026754 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8004138:	f10a 0315 	add.w	r3, sl, #21
 800413c:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <StarLPTask+0x4c4>)
 800413e:	b29b      	uxth	r3, r3
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	4a5b      	ldr	r2, [pc, #364]	; (80042b4 <StarLPTask+0x4c8>)
 8004146:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800414a:	d30b      	bcc.n	8004164 <StarLPTask+0x378>
 800414c:	9b07      	ldr	r3, [sp, #28]
 800414e:	459a      	cmp	sl, r3
 8004150:	d008      	beq.n	8004164 <StarLPTask+0x378>
			if (boosttrys > 0)	// timer for boost gain oscillating
 8004152:	4a59      	ldr	r2, [pc, #356]	; (80042b8 <StarLPTask+0x4cc>)
 8004154:	8813      	ldrh	r3, [r2, #0]
 8004156:	b10b      	cbz	r3, 800415c <StarLPTask+0x370>
				boosttrys--;
 8004158:	3b01      	subs	r3, #1
 800415a:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();	// add a point to the pressure plot
 800415c:	f7fe fe90 	bl	8002e80 <lcd_pressplot>
 8004160:	f8cd a01c 	str.w	sl, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8004164:	f240 3385 	movw	r3, #901	; 0x385
 8004168:	459a      	cmp	sl, r3
 800416a:	f47f ae92 	bne.w	8003e92 <StarLPTask+0xa6>
			onesectimer = 0;
 800416e:	f04f 0a00 	mov.w	sl, #0
			requestapisn();			//update s/n and udp target (reboot on fail)
 8004172:	f005 f8a7 	bl	80092c4 <requestapisn>
 8004176:	e68c      	b.n	8003e92 <StarLPTask+0xa6>
					printf("OFF\n");
 8004178:	4850      	ldr	r0, [pc, #320]	; (80042bc <StarLPTask+0x4d0>)
 800417a:	f022 fb87 	bl	802688c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 800417e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8004182:	e6af      	b.n	8003ee4 <StarLPTask+0xf8>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800418a:	482c      	ldr	r0, [pc, #176]	; (800423c <StarLPTask+0x450>)
 800418c:	f008 fe7e 	bl	800ce8c <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8004190:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
 8004194:	f8db 3000 	ldr.w	r3, [fp]
 8004198:	429a      	cmp	r2, r3
 800419a:	f43f af0f 	beq.w	8003fbc <StarLPTask+0x1d0>
			if (soundenabled) {
 800419e:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <StarLPTask+0x4d4>)
			trigs = statuspkt.trigcount;
 80041a0:	f8d9 207c 	ldr.w	r2, [r9, #124]	; 0x7c
			if (soundenabled) {
 80041a4:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80041a6:	f8cb 2000 	str.w	r2, [fp]
			if (soundenabled) {
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 8180 	bne.w	80044b0 <StarLPTask+0x6c4>
 80041b0:	4d44      	ldr	r5, [pc, #272]	; (80042c4 <StarLPTask+0x4d8>)
				printf("sem wait 1a\n");
 80041b2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80042dc <StarLPTask+0x4f0>
 80041b6:	e002      	b.n	80041be <StarLPTask+0x3d2>
 80041b8:	4640      	mov	r0, r8
 80041ba:	f022 fb67 	bl	802688c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80041be:	2101      	movs	r1, #1
 80041c0:	6828      	ldr	r0, [r5, #0]
 80041c2:	f013 f80d 	bl	80171e0 <xQueueSemaphoreTake>
 80041c6:	2801      	cmp	r0, #1
 80041c8:	d1f6      	bne.n	80041b8 <StarLPTask+0x3cc>
			strcpy(str, ctime(&epochtime));		// ctime
 80041ca:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80041ce:	483e      	ldr	r0, [pc, #248]	; (80042c8 <StarLPTask+0x4dc>)
 80041d0:	f021 f8a0 	bl	8025314 <ctime>
 80041d4:	4601      	mov	r1, r0
 80041d6:	4640      	mov	r0, r8
 80041d8:	f022 fd37 	bl	8026c4a <stpcpy>
			i = 0;
 80041dc:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 80041de:	eba0 0008 	sub.w	r0, r0, r8
 80041e2:	493a      	ldr	r1, [pc, #232]	; (80042cc <StarLPTask+0x4e0>)
 80041e4:	e008      	b.n	80041f8 <StarLPTask+0x40c>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80041e6:	f818 2003 	ldrb.w	r2, [r8, r3]
 80041ea:	2a0a      	cmp	r2, #10
 80041ec:	d003      	beq.n	80041f6 <StarLPTask+0x40a>
 80041ee:	2a0d      	cmp	r2, #13
 80041f0:	d001      	beq.n	80041f6 <StarLPTask+0x40a>
					trigtimestr[n++] = str[i];
 80041f2:	550a      	strb	r2, [r1, r4]
 80041f4:	3401      	adds	r4, #1
				i++;
 80041f6:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 80041f8:	4283      	cmp	r3, r0
 80041fa:	d3f4      	bcc.n	80041e6 <StarLPTask+0x3fa>
			trigtimestr[n] = '\0';
 80041fc:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80041fe:	6828      	ldr	r0, [r5, #0]
			trigtimestr[n] = '\0';
 8004200:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004202:	461a      	mov	r2, r3
 8004204:	4619      	mov	r1, r3
 8004206:	f012 fd51 	bl	8016cac <xQueueGenericSend>
 800420a:	2801      	cmp	r0, #1
 800420c:	f43f aed6 	beq.w	8003fbc <StarLPTask+0x1d0>
				printf("semaphore 1a release failed\n");
 8004210:	482f      	ldr	r0, [pc, #188]	; (80042d0 <StarLPTask+0x4e4>)
 8004212:	f022 fb3b 	bl	802688c <puts>
 8004216:	e6d1      	b.n	8003fbc <StarLPTask+0x1d0>
			if (ledsenabled)
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <StarLPTask+0x448>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800421a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800421e:	4807      	ldr	r0, [pc, #28]	; (800423c <StarLPTask+0x450>)
			if (ledsenabled)
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	2a00      	cmp	r2, #0
 8004224:	f000 814e 	beq.w	80044c4 <StarLPTask+0x6d8>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8004228:	f008 fe4a 	bl	800cec0 <HAL_GPIO_TogglePin>
 800422c:	4d25      	ldr	r5, [pc, #148]	; (80042c4 <StarLPTask+0x4d8>)
				printf("sem wait 1b\n");
 800422e:	4c29      	ldr	r4, [pc, #164]	; (80042d4 <StarLPTask+0x4e8>)
 8004230:	e059      	b.n	80042e6 <StarLPTask+0x4fa>
 8004232:	bf00      	nop
 8004234:	2000028c 	.word	0x2000028c
 8004238:	2000075c 	.word	0x2000075c
 800423c:	40020c00 	.word	0x40020c00
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	19999999 	.word	0x19999999
 8004248:	20002db0 	.word	0x20002db0
 800424c:	20000714 	.word	0x20000714
 8004250:	20001a6c 	.word	0x20001a6c
 8004254:	20001a68 	.word	0x20001a68
 8004258:	c28f5c29 	.word	0xc28f5c29
 800425c:	20000014 	.word	0x20000014
 8004260:	26e978d5 	.word	0x26e978d5
 8004264:	00418937 	.word	0x00418937
 8004268:	2000002e 	.word	0x2000002e
 800426c:	20002de0 	.word	0x20002de0
 8004270:	20000002 	.word	0x20000002
 8004274:	20002ed4 	.word	0x20002ed4
 8004278:	0802c638 	.word	0x0802c638
 800427c:	20002170 	.word	0x20002170
 8004280:	200033fc 	.word	0x200033fc
 8004284:	20002dd4 	.word	0x20002dd4
 8004288:	0802c694 	.word	0x0802c694
 800428c:	20003404 	.word	0x20003404
 8004290:	10624dd3 	.word	0x10624dd3
 8004294:	0802c6b0 	.word	0x0802c6b0
 8004298:	200033f4 	.word	0x200033f4
 800429c:	20003400 	.word	0x20003400
 80042a0:	200033f8 	.word	0x200033f8
 80042a4:	200033f0 	.word	0x200033f0
 80042a8:	20000070 	.word	0x20000070
 80042ac:	20000710 	.word	0x20000710
 80042b0:	a4fa4fa5 	.word	0xa4fa4fa5
 80042b4:	016c16c1 	.word	0x016c16c1
 80042b8:	20003370 	.word	0x20003370
 80042bc:	0802c480 	.word	0x0802c480
 80042c0:	20000292 	.word	0x20000292
 80042c4:	20002de8 	.word	0x20002de8
 80042c8:	20002ec8 	.word	0x20002ec8
 80042cc:	20000258 	.word	0x20000258
 80042d0:	0802c4b4 	.word	0x0802c4b4
 80042d4:	0802c4e0 	.word	0x0802c4e0
 80042d8:	20002df4 	.word	0x20002df4
 80042dc:	0802c4a8 	.word	0x0802c4a8
 80042e0:	4620      	mov	r0, r4
 80042e2:	f022 fad3 	bl	802688c <puts>
			while (!(xSemaphoreTake(
 80042e6:	2101      	movs	r1, #1
 80042e8:	6828      	ldr	r0, [r5, #0]
 80042ea:	f012 ff79 	bl	80171e0 <xQueueSemaphoreTake>
 80042ee:	2801      	cmp	r0, #1
 80042f0:	d1f6      	bne.n	80042e0 <StarLPTask+0x4f4>
			strcpy(str, ctime(&epochtime));
 80042f2:	48af      	ldr	r0, [pc, #700]	; (80045b0 <StarLPTask+0x7c4>)
 80042f4:	f021 f80e 	bl	8025314 <ctime>
 80042f8:	aa09      	add	r2, sp, #36	; 0x24
 80042fa:	4601      	mov	r1, r0
 80042fc:	4610      	mov	r0, r2
 80042fe:	f022 fca4 	bl	8026c4a <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8004302:	aa09      	add	r2, sp, #36	; 0x24
			sprintf(nowtimestr, "\"%s\"", str);
 8004304:	49ab      	ldr	r1, [pc, #684]	; (80045b4 <StarLPTask+0x7c8>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8004306:	1a80      	subs	r0, r0, r2
 8004308:	f100 0378 	add.w	r3, r0, #120	; 0x78
 800430c:	eb0d 0003 	add.w	r0, sp, r3
 8004310:	2300      	movs	r3, #0
 8004312:	f800 3c55 	strb.w	r3, [r0, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8004316:	48a8      	ldr	r0, [pc, #672]	; (80045b8 <StarLPTask+0x7cc>)
 8004318:	f022 fc06 	bl	8026b28 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 800431c:	4ba7      	ldr	r3, [pc, #668]	; (80045bc <StarLPTask+0x7d0>)
 800431e:	4aa8      	ldr	r2, [pc, #672]	; (80045c0 <StarLPTask+0x7d4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	49a7      	ldr	r1, [pc, #668]	; (80045c4 <StarLPTask+0x7d8>)
 8004326:	48a8      	ldr	r0, [pc, #672]	; (80045c8 <StarLPTask+0x7dc>)
 8004328:	f022 fbfe 	bl	8026b28 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 800432c:	4ba7      	ldr	r3, [pc, #668]	; (80045cc <StarLPTask+0x7e0>)
 800432e:	4aa8      	ldr	r2, [pc, #672]	; (80045d0 <StarLPTask+0x7e4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	49a3      	ldr	r1, [pc, #652]	; (80045c4 <StarLPTask+0x7d8>)
 8004336:	48a7      	ldr	r0, [pc, #668]	; (80045d4 <StarLPTask+0x7e8>)
 8004338:	f022 fbf6 	bl	8026b28 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800433c:	4ba6      	ldr	r3, [pc, #664]	; (80045d8 <StarLPTask+0x7ec>)
			sprintf(statstr,
 800433e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004342:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8004346:	49a5      	ldr	r1, [pc, #660]	; (80045dc <StarLPTask+0x7f0>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8004348:	2b00      	cmp	r3, #0
			sprintf(statstr,
 800434a:	48a5      	ldr	r0, [pc, #660]	; (80045e0 <StarLPTask+0x7f4>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800434c:	bfb8      	it	lt
 800434e:	425b      	neglt	r3, r3
			sprintf(statstr,
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	4ba3      	ldr	r3, [pc, #652]	; (80045e4 <StarLPTask+0x7f8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	9302      	str	r3, [sp, #8]
 8004360:	4ba1      	ldr	r3, [pc, #644]	; (80045e8 <StarLPTask+0x7fc>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4b9f      	ldr	r3, [pc, #636]	; (80045ec <StarLPTask+0x800>)
 800436e:	f022 fbdb 	bl	8026b28 <siprintf>
			if (gpslocked) {
 8004372:	4b9f      	ldr	r3, [pc, #636]	; (80045f0 <StarLPTask+0x804>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a7 	beq.w	80044ca <StarLPTask+0x6de>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 800437c:	f899 201b 	ldrb.w	r2, [r9, #27]
 8004380:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004384:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8004388:	489a      	ldr	r0, [pc, #616]	; (80045f4 <StarLPTask+0x808>)
 800438a:	9100      	str	r1, [sp, #0]
 800438c:	499a      	ldr	r1, [pc, #616]	; (80045f8 <StarLPTask+0x80c>)
 800438e:	f022 fbcb 	bl	8026b28 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004392:	2300      	movs	r3, #0
 8004394:	6828      	ldr	r0, [r5, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	4619      	mov	r1, r3
 800439a:	f012 fc87 	bl	8016cac <xQueueGenericSend>
 800439e:	2801      	cmp	r0, #1
 80043a0:	d002      	beq.n	80043a8 <StarLPTask+0x5bc>
				printf("semaphore 1b release failed\n");
 80043a2:	4896      	ldr	r0, [pc, #600]	; (80045fc <StarLPTask+0x810>)
 80043a4:	f022 fa72 	bl	802688c <puts>
			onesectimer++;
 80043a8:	f10a 0301 	add.w	r3, sl, #1
				printf("sem wait 1c\n");
 80043ac:	4c94      	ldr	r4, [pc, #592]	; (8004600 <StarLPTask+0x814>)
			onesectimer++;
 80043ae:	fa1f fa83 	uxth.w	sl, r3
			while (!(xSemaphoreTake(ssicontentHandle,
 80043b2:	e002      	b.n	80043ba <StarLPTask+0x5ce>
				printf("sem wait 1c\n");
 80043b4:	4620      	mov	r0, r4
 80043b6:	f022 fa69 	bl	802688c <puts>
			while (!(xSemaphoreTake(ssicontentHandle,
 80043ba:	2119      	movs	r1, #25
 80043bc:	6828      	ldr	r0, [r5, #0]
 80043be:	f012 ff0f 	bl	80171e0 <xQueueSemaphoreTake>
 80043c2:	2801      	cmp	r0, #1
 80043c4:	d1f6      	bne.n	80043b4 <StarLPTask+0x5c8>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80043c6:	2300      	movs	r3, #0
 80043c8:	6828      	ldr	r0, [r5, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	f012 fc6d 	bl	8016cac <xQueueGenericSend>
 80043d2:	2801      	cmp	r0, #1
 80043d4:	d002      	beq.n	80043dc <StarLPTask+0x5f0>
				printf("semaphore 1c release failed\n");
 80043d6:	488b      	ldr	r0, [pc, #556]	; (8004604 <StarLPTask+0x818>)
 80043d8:	f022 fa58 	bl	802688c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 80043dc:	f7fe fbfc 	bl	8002bd8 <lcd_trigplot>
 80043e0:	e621      	b.n	8004026 <StarLPTask+0x23a>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80043e2:	4c89      	ldr	r4, [pc, #548]	; (8004608 <StarLPTask+0x81c>)
 80043e4:	8823      	ldrh	r3, [r4, #0]
 80043e6:	4553      	cmp	r3, sl
 80043e8:	4b88      	ldr	r3, [pc, #544]	; (800460c <StarLPTask+0x820>)
 80043ea:	f43f ae0c 	beq.w	8004006 <StarLPTask+0x21a>
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	f47f ae08 	bne.w	8004006 <StarLPTask+0x21a>
				timeinfo = *localtime(&localepochtime);
 80043f6:	4886      	ldr	r0, [pc, #536]	; (8004610 <StarLPTask+0x824>)
 80043f8:	f021 f8ae 	bl	8025558 <localtime>
 80043fc:	4d85      	ldr	r5, [pc, #532]	; (8004614 <StarLPTask+0x828>)
 80043fe:	4684      	mov	ip, r0
 8004400:	46ae      	mov	lr, r5
 8004402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800440a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800440e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004412:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 8004416:	f8a4 a000 	strh.w	sl, [r4]
				timeinfo = *localtime(&localepochtime);
 800441a:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();		// display the clock on the LCD page 0
 800441e:	f7fe f913 	bl	8002648 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <StarLPTask+0x82c>)
 8004424:	69ea      	ldr	r2, [r5, #28]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	f43f adf0 	beq.w	800400e <StarLPTask+0x222>
					lcd_date();
 800442e:	f7fe f97f 	bl	8002730 <lcd_date>
 8004432:	e5ec      	b.n	800400e <StarLPTask+0x222>
				statuspkt.jabcnt++;
 8004434:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004438:	4878      	ldr	r0, [pc, #480]	; (800461c <StarLPTask+0x830>)
				statuspkt.jabcnt++;
 800443a:	3201      	adds	r2, #1
 800443c:	b292      	uxth	r2, r2
 800443e:	f8a9 2086 	strh.w	r2, [r9, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8004442:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8004444:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
 8004448:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 800444a:	4b75      	ldr	r3, [pc, #468]	; (8004620 <StarLPTask+0x834>)
 800444c:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800444e:	f022 f981 	bl	8026754 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8004452:	4b74      	ldr	r3, [pc, #464]	; (8004624 <StarLPTask+0x838>)
 8004454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004458:	b93b      	cbnz	r3, 800446a <StarLPTask+0x67e>
					if (trigthresh < 4095)
 800445a:	4a63      	ldr	r2, [pc, #396]	; (80045e8 <StarLPTask+0x7fc>)
 800445c:	f640 71fe 	movw	r1, #4094	; 0xffe
 8004460:	8813      	ldrh	r3, [r2, #0]
 8004462:	428b      	cmp	r3, r1
 8004464:	d801      	bhi.n	800446a <StarLPTask+0x67e>
						trigthresh++;
 8004466:	3301      	adds	r3, #1
 8004468:	8013      	strh	r3, [r2, #0]
				if (agc) {
 800446a:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <StarLPTask+0x83c>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d16e      	bne.n	8004550 <StarLPTask+0x764>
				jabtrigcnt = statuspkt.trigcount;
 8004472:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004476:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8004478:	4b6c      	ldr	r3, [pc, #432]	; (800462c <StarLPTask+0x840>)
 800447a:	4a6d      	ldr	r2, [pc, #436]	; (8004630 <StarLPTask+0x844>)
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8004482:	2b05      	cmp	r3, #5
 8004484:	dd30      	ble.n	80044e8 <StarLPTask+0x6fc>
					if (trigthresh < 4095)
 8004486:	4858      	ldr	r0, [pc, #352]	; (80045e8 <StarLPTask+0x7fc>)
 8004488:	f640 74fe 	movw	r4, #4094	; 0xffe
 800448c:	8803      	ldrh	r3, [r0, #0]
 800448e:	42a3      	cmp	r3, r4
 8004490:	d801      	bhi.n	8004496 <StarLPTask+0x6aa>
						trigthresh++;
 8004492:	3301      	adds	r3, #1
 8004494:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8004496:	2300      	movs	r3, #0
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	9306      	str	r3, [sp, #24]
 800449c:	e5ad      	b.n	8003ffa <StarLPTask+0x20e>
			gainchanged = 0;
 800449e:	9306      	str	r3, [sp, #24]
 80044a0:	e5f8      	b.n	8004094 <StarLPTask+0x2a8>
				gpsbadcount = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	4a63      	ldr	r2, [pc, #396]	; (8004634 <StarLPTask+0x848>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e607      	b.n	80040ba <StarLPTask+0x2ce>
				lcd_gps();		// display the GPS on the LCD page 0
 80044aa:	f7fe f8c5 	bl	8002638 <lcd_gps>
 80044ae:	e5cd      	b.n	800404c <StarLPTask+0x260>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80044b0:	2308      	movs	r3, #8
 80044b2:	4a61      	ldr	r2, [pc, #388]	; (8004638 <StarLPTask+0x84c>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	4861      	ldr	r0, [pc, #388]	; (800463c <StarLPTask+0x850>)
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80044be:	f005 fd13 	bl	8009ee8 <HAL_DAC_Start_DMA>
 80044c2:	e675      	b.n	80041b0 <StarLPTask+0x3c4>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80044c4:	f008 fce2 	bl	800ce8c <HAL_GPIO_WritePin>
 80044c8:	e6b0      	b.n	800422c <StarLPTask+0x440>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 80044ca:	f8df c188 	ldr.w	ip, [pc, #392]	; 8004654 <StarLPTask+0x868>
 80044ce:	4c49      	ldr	r4, [pc, #292]	; (80045f4 <StarLPTask+0x808>)
 80044d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80044d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80044da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044dc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80044e0:	f844 0b04 	str.w	r0, [r4], #4
 80044e4:	8021      	strh	r1, [r4, #0]
 80044e6:	e754      	b.n	8004392 <StarLPTask+0x5a6>
				if (n == 0) {		// no triggers in last 100mS
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1d4      	bne.n	8004496 <StarLPTask+0x6aa>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80044ec:	483e      	ldr	r0, [pc, #248]	; (80045e8 <StarLPTask+0x7fc>)
 80044ee:	8803      	ldrh	r3, [r0, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d9d0      	bls.n	8004496 <StarLPTask+0x6aa>
						trigthresh--;
 80044f4:	3b01      	subs	r3, #1
 80044f6:	8003      	strh	r3, [r0, #0]
 80044f8:	e7cd      	b.n	8004496 <StarLPTask+0x6aa>
				if (getpressure115() != HAL_OK) {
 80044fa:	f002 fb6f 	bl	8006bdc <getpressure115>
 80044fe:	2800      	cmp	r0, #0
 8004500:	f43f ade6 	beq.w	80040d0 <StarLPTask+0x2e4>
					printf("MPL115A2 error\n\r");
 8004504:	484e      	ldr	r0, [pc, #312]	; (8004640 <StarLPTask+0x854>)
 8004506:	f022 f925 	bl	8026754 <iprintf>
 800450a:	e5e1      	b.n	80040d0 <StarLPTask+0x2e4>
				lcd_showvars();
 800450c:	f7fe f938 	bl	8002780 <lcd_showvars>
 8004510:	e57d      	b.n	800400e <StarLPTask+0x222>
					gainchanged = bumppga(-1);
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	f002 fb1b 	bl	8006b50 <bumppga>
 800451a:	b203      	sxth	r3, r0
 800451c:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 800451e:	f8db 3000 	ldr.w	r3, [fp]
 8004522:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f77f adb4 	ble.w	8004094 <StarLPTask+0x2a8>
					if (trigthresh < (4095 - 10))
 800452c:	882b      	ldrh	r3, [r5, #0]
 800452e:	f640 72f4 	movw	r2, #4084	; 0xff4
 8004532:	4293      	cmp	r3, r2
 8004534:	f63f adae 	bhi.w	8004094 <StarLPTask+0x2a8>
						trigthresh += 5;
 8004538:	3305      	adds	r3, #5
 800453a:	802b      	strh	r3, [r5, #0]
 800453c:	e5aa      	b.n	8004094 <StarLPTask+0x2a8>
				if (getpressure3115() != HAL_OK) {
 800453e:	f002 fbfb 	bl	8006d38 <getpressure3115>
 8004542:	2800      	cmp	r0, #0
 8004544:	f43f adc4 	beq.w	80040d0 <StarLPTask+0x2e4>
					printf("MPL3115A2 error\n\r");
 8004548:	483e      	ldr	r0, [pc, #248]	; (8004644 <StarLPTask+0x858>)
 800454a:	f022 f903 	bl	8026754 <iprintf>
 800454e:	e5bf      	b.n	80040d0 <StarLPTask+0x2e4>
					gainchanged = bumppga(-1);	// decrease gain
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	f002 fafc 	bl	8006b50 <bumppga>
 8004558:	b203      	sxth	r3, r0
 800455a:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 800455c:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	e546      	b.n	8003ff2 <StarLPTask+0x206>
						gainchanged = bumppga(1);
 8004564:	2001      	movs	r0, #1
 8004566:	f002 faf3 	bl	8006b50 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 800456a:	f8d8 3000 	ldr.w	r3, [r8]
 800456e:	2b0a      	cmp	r3, #10
 8004570:	d8cf      	bhi.n	8004512 <StarLPTask+0x726>
						gainchanged = bumppga(1);
 8004572:	b203      	sxth	r3, r0
 8004574:	9306      	str	r3, [sp, #24]
 8004576:	e7d2      	b.n	800451e <StarLPTask+0x732>
					printf("GPS bad - rebooting...\n");
 8004578:	4833      	ldr	r0, [pc, #204]	; (8004648 <StarLPTask+0x85c>)
 800457a:	f022 f987 	bl	802688c <puts>
					osDelay(3000);
 800457e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004582:	f012 f869 	bl	8016658 <osDelay>
					rebootme(5);
 8004586:	2005      	movs	r0, #5
 8004588:	f7ff fc0e 	bl	8003da8 <rebootme>
			HAL_IWDG_Refresh(&hiwdg);
 800458c:	4c2f      	ldr	r4, [pc, #188]	; (800464c <StarLPTask+0x860>)
			osDelay(10);
 800458e:	200a      	movs	r0, #10
 8004590:	f012 f862 	bl	8016658 <osDelay>
			HAL_IWDG_Refresh(&hiwdg);
 8004594:	4620      	mov	r0, r4
 8004596:	f009 fafd 	bl	800db94 <HAL_IWDG_Refresh>
		while (http_downloading)  {
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f6      	bne.n	800458e <StarLPTask+0x7a2>
 80045a0:	e45b      	b.n	8003e5a <StarLPTask+0x6e>
 80045a2:	4604      	mov	r4, r0
		printf("Console Rx Queue not created... rebooting...\n");
 80045a4:	482a      	ldr	r0, [pc, #168]	; (8004650 <StarLPTask+0x864>)
 80045a6:	f022 f971 	bl	802688c <puts>
		rebootme(0);
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff fbfc 	bl	8003da8 <rebootme>
 80045b0:	20002ec8 	.word	0x20002ec8
 80045b4:	0802c4ec 	.word	0x0802c4ec
 80045b8:	20000070 	.word	0x20000070
 80045bc:	20003404 	.word	0x20003404
 80045c0:	20003400 	.word	0x20003400
 80045c4:	0802c4f4 	.word	0x0802c4f4
 80045c8:	2000024c 	.word	0x2000024c
 80045cc:	200033f4 	.word	0x200033f4
 80045d0:	200033f8 	.word	0x200033f8
 80045d4:	20000090 	.word	0x20000090
 80045d8:	20000760 	.word	0x20000760
 80045dc:	0802c4fc 	.word	0x0802c4fc
 80045e0:	20000144 	.word	0x20000144
 80045e4:	2000070c 	.word	0x2000070c
 80045e8:	20000002 	.word	0x20000002
 80045ec:	20000258 	.word	0x20000258
 80045f0:	20003468 	.word	0x20003468
 80045f4:	20000030 	.word	0x20000030
 80045f8:	0802c5a4 	.word	0x0802c5a4
 80045fc:	0802c5f4 	.word	0x0802c5f4
 8004600:	0802c610 	.word	0x0802c610
 8004604:	0802c61c 	.word	0x0802c61c
 8004608:	20000010 	.word	0x20000010
 800460c:	20001a68 	.word	0x20001a68
 8004610:	20001b28 	.word	0x20001b28
 8004614:	20001f44 	.word	0x20001f44
 8004618:	20001a5c 	.word	0x20001a5c
 800461c:	0802c4d0 	.word	0x0802c4d0
 8004620:	20000714 	.word	0x20000714
 8004624:	200033f0 	.word	0x200033f0
 8004628:	2000002e 	.word	0x2000002e
 800462c:	20000768 	.word	0x20000768
 8004630:	20002db8 	.word	0x20002db8
 8004634:	20002170 	.word	0x20002170
 8004638:	0802ca20 	.word	0x0802ca20
 800463c:	20002270 	.word	0x20002270
 8004640:	0802c66c 	.word	0x0802c66c
 8004644:	0802c680 	.word	0x0802c680
 8004648:	0802c654 	.word	0x0802c654
 800464c:	20002668 	.word	0x20002668
 8004650:	0802c444 	.word	0x0802c444
 8004654:	0802c5cc 	.word	0x0802c5cc

08004658 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8004658:	2100      	movs	r1, #0
 800465a:	f005 bce1 	b.w	800a020 <HAL_DAC_Stop_DMA>
 800465e:	bf00      	nop

08004660 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8004660:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == TIM2) {
 8004662:	6803      	ldr	r3, [r0, #0]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_TIM_IC_CaptureCallback+0x60>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d021      	beq.n	80046b4 <HAL_TIM_IC_CaptureCallback+0x54>
}
 8004670:	bd38      	pop	{r3, r4, r5, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004672:	4c14      	ldr	r4, [pc, #80]	; (80046c4 <HAL_TIM_IC_CaptureCallback+0x64>)
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_TIM_IC_CaptureCallback+0x68>)
 8004676:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_TIM_IC_CaptureCallback+0x6c>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800467a:	3101      	adds	r1, #1
 800467c:	4814      	ldr	r0, [pc, #80]	; (80046d0 <HAL_TIM_IC_CaptureCallback+0x70>)
		if (!(ledsenabled)) {
 800467e:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004680:	fba3 5301 	umull	r5, r3, r3, r1
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800468a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800468e:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8004692:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8004694:	480f      	ldr	r0, [pc, #60]	; (80046d4 <HAL_TIM_IC_CaptureCallback+0x74>)
		if (!(ledsenabled)) {
 8004696:	b152      	cbz	r2, 80046ae <HAL_TIM_IC_CaptureCallback+0x4e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8004698:	f008 fc12 	bl	800cec0 <HAL_GPIO_TogglePin>
		diff = lastcap;
 800469c:	4d0e      	ldr	r5, [pc, #56]	; (80046d8 <HAL_TIM_IC_CaptureCallback+0x78>)
		statuspkt.clktrim = movavg(diff);
 800469e:	6828      	ldr	r0, [r5, #0]
 80046a0:	f001 f960 	bl	8005964 <movavg>
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <HAL_TIM_IC_CaptureCallback+0x7c>)
		statuspkt.clktrim = movavg(diff);
 80046a6:	65a0      	str	r0, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	602b      	str	r3, [r5, #0]
}
 80046ac:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80046ae:	f008 fbed 	bl	800ce8c <HAL_GPIO_WritePin>
 80046b2:	e7f3      	b.n	800469c <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 80046b4:	480a      	ldr	r0, [pc, #40]	; (80046e0 <HAL_TIM_IC_CaptureCallback+0x80>)
}
 80046b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("Timer4 callback\n");
 80046ba:	f022 b8e7 	b.w	802688c <puts>
 80046be:	bf00      	nop
 80046c0:	40000800 	.word	0x40000800
 80046c4:	20003014 	.word	0x20003014
 80046c8:	88888889 	.word	0x88888889
 80046cc:	2000028c 	.word	0x2000028c
 80046d0:	2000076c 	.word	0x2000076c
 80046d4:	40020c00 	.word	0x40020c00
 80046d8:	20002db4 	.word	0x20002db4
 80046dc:	20000784 	.word	0x20000784
 80046e0:	0802c710 	.word	0x0802c710

080046e4 <getboardpcb>:
void getboardpcb() {
 80046e4:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 80046e6:	2101      	movs	r1, #1
 80046e8:	4804      	ldr	r0, [pc, #16]	; (80046fc <getboardpcb+0x18>)
 80046ea:	f008 fbbd 	bl	800ce68 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 80046ee:	2800      	cmp	r0, #0
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <getboardpcb+0x1c>)
 80046f2:	bf0c      	ite	eq
 80046f4:	2216      	moveq	r2, #22
 80046f6:	220b      	movne	r2, #11
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bd08      	pop	{r3, pc}
 80046fc:	40020800 	.word	0x40020800
 8004700:	20002160 	.word	0x20002160

08004704 <uart2_rxdone>:
void uart2_rxdone() {
 8004704:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 8004706:	4807      	ldr	r0, [pc, #28]	; (8004724 <uart2_rxdone+0x20>)
 8004708:	2300      	movs	r3, #0
 800470a:	4907      	ldr	r1, [pc, #28]	; (8004728 <uart2_rxdone+0x24>)
 800470c:	461a      	mov	r2, r3
 800470e:	6800      	ldr	r0, [r0, #0]
 8004710:	f012 fbcc 	bl	8016eac <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8004714:	2201      	movs	r2, #1
 8004716:	4904      	ldr	r1, [pc, #16]	; (8004728 <uart2_rxdone+0x24>)
 8004718:	4804      	ldr	r0, [pc, #16]	; (800472c <uart2_rxdone+0x28>)
}
 800471a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800471e:	f00f bec5 	b.w	80144ac <HAL_UART_Receive_IT>
 8004722:	bf00      	nop
 8004724:	20002168 	.word	0x20002168
 8004728:	20002164 	.word	0x20002164
 800472c:	20002a14 	.word	0x20002a14

08004730 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8004730:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004732:	6803      	ldr	r3, [r0, #0]
 8004734:	4293      	cmp	r3, r2
 8004736:	d029      	beq.n	800478c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02d      	beq.n	800479a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d02c      	beq.n	800479e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d030      	beq.n	80047ac <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 800474a:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d005      	beq.n	800475c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8004750:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8004756:	4821      	ldr	r0, [pc, #132]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004758:	f022 b898 	b.w	802688c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800475c:	b510      	push	{r4, lr}
		t1sec++;
 800475e:	4920      	ldr	r1, [pc, #128]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8004760:	4c20      	ldr	r4, [pc, #128]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8004762:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004764:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8004766:	4820      	ldr	r0, [pc, #128]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8004768:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800476a:	3301      	adds	r3, #1
		if (netup)
 800476c:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 800476e:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8004770:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8004772:	b110      	cbz	r0, 800477a <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8004774:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004776:	3301      	adds	r3, #1
 8004778:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b9c3      	cbnz	r3, 80047b2 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8004782:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8004784:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8004786:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 800478a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	6013      	str	r3, [r2, #0]
		return;
 8004794:	4770      	bx	lr
		HAL_IncTick();
 8004796:	f004 bdeb 	b.w	8009370 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 800479a:	f7fc b877 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80047a2:	4816      	ldr	r0, [pc, #88]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80047a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	f021 bfd4 	b.w	8026754 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80047ac:	4814      	ldr	r0, [pc, #80]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80047ae:	f022 b86d 	b.w	802688c <puts>
			statuspkt.gpsuptime++;
 80047b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80047b4:	3301      	adds	r3, #1
 80047b6:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 80047b8:	f001 f94e 	bl	8005a58 <calcepoch32>
				epochvalid = 1;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80047be:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 80047c0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 80047c4:	701a      	strb	r2, [r3, #0]
}
 80047c6:	bd10      	pop	{r4, pc}
 80047c8:	40002000 	.word	0x40002000
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40001000 	.word	0x40001000
 80047d8:	40001800 	.word	0x40001800
 80047dc:	0802c7b0 	.word	0x0802c7b0
 80047e0:	20002dec 	.word	0x20002dec
 80047e4:	20003014 	.word	0x20003014
 80047e8:	20000762 	.word	0x20000762
 80047ec:	20003468 	.word	0x20003468
 80047f0:	20003460 	.word	0x20003460
 80047f4:	20002de4 	.word	0x20002de4
 80047f8:	20000784 	.word	0x20000784
 80047fc:	0802c770 	.word	0x0802c770
 8004800:	0802c794 	.word	0x0802c794

08004804 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8004804:	4c02      	ldr	r4, [pc, #8]	; (8004810 <Error_Handler+0xc>)
void Error_Handler(void) {
 8004806:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8004808:	4620      	mov	r0, r4
 800480a:	f022 f83f 	bl	802688c <puts>
	while (1) {
 800480e:	e7fb      	b.n	8004808 <Error_Handler+0x4>
 8004810:	0802c7d8 	.word	0x0802c7d8

08004814 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004814:	b530      	push	{r4, r5, lr}
 8004816:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004818:	2234      	movs	r2, #52	; 0x34
 800481a:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800481c:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800481e:	a807      	add	r0, sp, #28
 8004820:	f020 fffa 	bl	8025818 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004824:	2300      	movs	r3, #0
 8004826:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800482a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800482e:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8004830:	f009 ff40 	bl	800e6b4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004836:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004838:	4b20      	ldr	r3, [pc, #128]	; (80048bc <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 800483a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800483c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004840:	6411      	str	r1, [r2, #64]	; 0x40
 8004842:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004844:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004848:	9200      	str	r2, [sp, #0]
 800484a:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004852:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8004854:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004856:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004858:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800485a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800485e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004860:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004862:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004868:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800486a:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800486e:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004874:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 8004876:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004878:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 800487a:	23d8      	movs	r3, #216	; 0xd8
 800487c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8004880:	2306      	movs	r3, #6
 8004882:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004884:	f009 ff58 	bl	800e738 <HAL_RCC_OscConfig>
 8004888:	b9a0      	cbnz	r0, 80048b4 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800488a:	f009 ff1b 	bl	800e6c4 <HAL_PWREx_EnableOverDrive>
 800488e:	4603      	mov	r3, r0
 8004890:	b980      	cbnz	r0, 80048b4 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004892:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004894:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8004898:	a802      	add	r0, sp, #8
 800489a:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800489c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048a4:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048a8:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80048aa:	f00a fa1b 	bl	800ece4 <HAL_RCC_ClockConfig>
 80048ae:	b908      	cbnz	r0, 80048b4 <SystemClock_Config+0xa0>
}
 80048b0:	b015      	add	sp, #84	; 0x54
 80048b2:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80048b4:	f7ff ffa6 	bl	8004804 <Error_Handler>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40007000 	.word	0x40007000

080048c0 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 80048c0:	b510      	push	{r4, lr}
 80048c2:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80048c4:	228c      	movs	r2, #140	; 0x8c
 80048c6:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80048c8:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80048ca:	a801      	add	r0, sp, #4
 80048cc:	f020 ffa4 	bl	8025818 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80048d0:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80048d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80048d6:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80048d8:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80048da:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80048dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80048e0:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048e2:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80048e4:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80048e6:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80048e8:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80048ea:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80048ee:	f00a fb5f 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 80048f2:	b908      	cbnz	r0, 80048f8 <PeriphCommonClock_Config+0x38>
}
 80048f4:	b024      	add	sp, #144	; 0x90
 80048f6:	bd10      	pop	{r4, pc}
		Error_Handler();
 80048f8:	f7ff ff84 	bl	8004804 <Error_Handler>

080048fc <main>:
int main(void) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 8004900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004904:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004908:	4bc2      	ldr	r3, [pc, #776]	; (8004c14 <main+0x318>)
 800490a:	2400      	movs	r4, #0
 800490c:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8004910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004914:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800491e:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8004920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004924:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004928:	4dbb      	ldr	r5, [pc, #748]	; (8004c18 <main+0x31c>)
	HAL_Init();
 800492a:	f004 fd0f 	bl	800934c <HAL_Init>
	SystemClock_Config();
 800492e:	f7ff ff71 	bl	8004814 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004932:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 8004934:	f7ff ffc4 	bl	80048c0 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004938:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 800493a:	4622      	mov	r2, r4
 800493c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004940:	48b6      	ldr	r0, [pc, #728]	; (8004c1c <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004942:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004946:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004948:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 800494c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004950:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8004954:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800495a:	f043 0310 	orr.w	r3, r3, #16
 800495e:	632b      	str	r3, [r5, #48]	; 0x30
 8004960:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	9303      	str	r3, [sp, #12]
 8004968:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800496a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	632b      	str	r3, [r5, #48]	; 0x30
 8004972:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	9304      	str	r3, [sp, #16]
 800497a:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800497c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	632b      	str	r3, [r5, #48]	; 0x30
 8004984:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800498e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	632b      	str	r3, [r5, #48]	; 0x30
 8004996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	9306      	str	r3, [sp, #24]
 800499e:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80049a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	632b      	str	r3, [r5, #48]	; 0x30
 80049a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	632b      	str	r3, [r5, #48]	; 0x30
 80049ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	9308      	str	r3, [sp, #32]
 80049c2:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80049c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ca:	632b      	str	r3, [r5, #48]	; 0x30
 80049cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	9309      	str	r3, [sp, #36]	; 0x24
 80049d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80049d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	632b      	str	r3, [r5, #48]	; 0x30
 80049de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	930a      	str	r3, [sp, #40]	; 0x28
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80049e8:	f008 fa50 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80049ec:	4622      	mov	r2, r4
 80049ee:	f644 0181 	movw	r1, #18561	; 0x4881
 80049f2:	488b      	ldr	r0, [pc, #556]	; (8004c20 <main+0x324>)
 80049f4:	f008 fa4a 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 80049f8:	4622      	mov	r2, r4
 80049fa:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 80049fe:	4889      	ldr	r0, [pc, #548]	; (8004c24 <main+0x328>)
 8004a00:	f008 fa44 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8004a04:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8004a08:	4887      	ldr	r0, [pc, #540]	; (8004c28 <main+0x32c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f008 fa3e 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004a10:	4622      	mov	r2, r4
 8004a12:	2144      	movs	r1, #68	; 0x44
 8004a14:	4885      	ldr	r0, [pc, #532]	; (8004c2c <main+0x330>)
 8004a16:	f008 fa39 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4882      	ldr	r0, [pc, #520]	; (8004c28 <main+0x32c>)
 8004a20:	f008 fa34 	bl	800ce8c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004a24:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a28:	a955      	add	r1, sp, #340	; 0x154
 8004a2a:	487e      	ldr	r0, [pc, #504]	; (8004c24 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004a2c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a2e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a32:	f007 ff7f 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a3a:	a955      	add	r1, sp, #340	; 0x154
 8004a3c:	487c      	ldr	r0, [pc, #496]	; (8004c30 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004a3e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a40:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a46:	f007 ff75 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a4a:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a4e:	a955      	add	r1, sp, #340	; 0x154
 8004a50:	4872      	ldr	r0, [pc, #456]	; (8004c1c <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004a52:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a54:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a58:	f007 ff6c 	bl	800c934 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a5c:	a955      	add	r1, sp, #340	; 0x154
 8004a5e:	486f      	ldr	r0, [pc, #444]	; (8004c1c <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8004a60:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a64:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a68:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004a6c:	f007 ff62 	bl	800c934 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a70:	a955      	add	r1, sp, #340	; 0x154
 8004a72:	486f      	ldr	r0, [pc, #444]	; (8004c30 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a74:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a76:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7a:	f007 ff5b 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a7e:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a80:	a955      	add	r1, sp, #340	; 0x154
 8004a82:	486c      	ldr	r0, [pc, #432]	; (8004c34 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a84:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8a:	f007 ff53 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a8e:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a92:	a955      	add	r1, sp, #340	; 0x154
 8004a94:	4862      	ldr	r0, [pc, #392]	; (8004c20 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8004a96:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	f007 ff49 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004aa2:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa4:	a955      	add	r1, sp, #340	; 0x154
 8004aa6:	485e      	ldr	r0, [pc, #376]	; (8004c20 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8004aa8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aae:	f007 ff41 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004ab2:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ab6:	a955      	add	r1, sp, #340	; 0x154
 8004ab8:	485c      	ldr	r0, [pc, #368]	; (8004c2c <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8004aba:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ac0:	f007 ff38 	bl	800c934 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac4:	a955      	add	r1, sp, #340	; 0x154
 8004ac6:	4857      	ldr	r0, [pc, #348]	; (8004c24 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac8:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aca:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ace:	f007 ff31 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004ad2:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ad6:	a955      	add	r1, sp, #340	; 0x154
 8004ad8:	4852      	ldr	r0, [pc, #328]	; (8004c24 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004ada:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004adc:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae0:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004ae2:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aea:	f007 ff23 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004aee:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004af2:	a955      	add	r1, sp, #340	; 0x154
 8004af4:	484c      	ldr	r0, [pc, #304]	; (8004c28 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004af6:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004afc:	f007 ff1a 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004b00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b04:	a955      	add	r1, sp, #340	; 0x154
 8004b06:	4848      	ldr	r0, [pc, #288]	; (8004c28 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004b08:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b10:	f007 ff10 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004b14:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b16:	a955      	add	r1, sp, #340	; 0x154
 8004b18:	4844      	ldr	r0, [pc, #272]	; (8004c2c <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004b1a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1c:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b22:	f007 ff07 	bl	800c934 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004b26:	a955      	add	r1, sp, #340	; 0x154
 8004b28:	4840      	ldr	r0, [pc, #256]	; (8004c2c <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004b2a:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004b32:	f007 feff 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004b36:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3a:	a955      	add	r1, sp, #340	; 0x154
 8004b3c:	483c      	ldr	r0, [pc, #240]	; (8004c30 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004b3e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b44:	f007 fef6 	bl	800c934 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	a955      	add	r1, sp, #340	; 0x154
 8004b4e:	4839      	ldr	r0, [pc, #228]	; (8004c34 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b50:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b52:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004b54:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5c:	f007 feea 	bl	800c934 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b60:	a955      	add	r1, sp, #340	; 0x154
 8004b62:	4831      	ldr	r0, [pc, #196]	; (8004c28 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b64:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b68:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004b6c:	f007 fee2 	bl	800c934 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b72:	4639      	mov	r1, r7
 8004b74:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b7a:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b7c:	632b      	str	r3, [r5, #48]	; 0x30
 8004b7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b8e:	632b      	str	r3, [r5, #48]	; 0x30
 8004b90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8004b92:	4d29      	ldr	r5, [pc, #164]	; (8004c38 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b98:	9302      	str	r3, [sp, #8]
 8004b9a:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8004b9c:	f005 f84c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ba0:	200b      	movs	r0, #11
 8004ba2:	f005 f893 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	2106      	movs	r1, #6
 8004baa:	4650      	mov	r0, sl
 8004bac:	f005 f844 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	f005 f88b 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	2106      	movs	r1, #6
 8004bba:	2010      	movs	r0, #16
 8004bbc:	f005 f83c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004bc0:	2010      	movs	r0, #16
 8004bc2:	f005 f883 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4639      	mov	r1, r7
 8004bca:	2011      	movs	r0, #17
 8004bcc:	f005 f834 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004bd0:	2011      	movs	r0, #17
 8004bd2:	f005 f87b 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4639      	mov	r1, r7
 8004bda:	202f      	movs	r0, #47	; 0x2f
 8004bdc:	f005 f82c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004be0:	202f      	movs	r0, #47	; 0x2f
 8004be2:	f005 f873 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8004be6:	4622      	mov	r2, r4
 8004be8:	2106      	movs	r1, #6
 8004bea:	2039      	movs	r0, #57	; 0x39
 8004bec:	f005 f824 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004bf0:	2039      	movs	r0, #57	; 0x39
 8004bf2:	f005 f86b 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	203c      	movs	r0, #60	; 0x3c
 8004bfc:	f005 f81c 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004c00:	203c      	movs	r0, #60	; 0x3c
 8004c02:	f005 f863 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004c06:	4622      	mov	r2, r4
 8004c08:	4639      	mov	r1, r7
 8004c0a:	2045      	movs	r0, #69	; 0x45
 8004c0c:	f005 f814 	bl	8009c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004c10:	2045      	movs	r0, #69	; 0x45
 8004c12:	e013      	b.n	8004c3c <main+0x340>
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40021400 	.word	0x40021400
 8004c20:	40020400 	.word	0x40020400
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40020c00 	.word	0x40020c00
 8004c2c:	40021800 	.word	0x40021800
 8004c30:	40020800 	.word	0x40020800
 8004c34:	40020000 	.word	0x40020000
 8004c38:	40004400 	.word	0x40004400
 8004c3c:	f005 f846 	bl	8009ccc <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004c40:	48bd      	ldr	r0, [pc, #756]	; (8004f38 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8004c42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c46:	4622      	mov	r2, r4
 8004c48:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004c4a:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004c4e:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004c50:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c54:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004c56:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c5a:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c5e:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8004c62:	f00f fcc5 	bl	80145f0 <HAL_RS485Ex_Init>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f040 844a 	bne.w	8005500 <main+0xc04>
	hadc1.Instance = ADC1;
 8004c6c:	4cb3      	ldr	r4, [pc, #716]	; (8004f3c <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c6e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004c72:	4bb3      	ldr	r3, [pc, #716]	; (8004f40 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c74:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c76:	9045      	str	r0, [sp, #276]	; 0x114
 8004c78:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c7a:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c7c:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c7e:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c82:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c84:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004c86:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004c88:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8004c8a:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c8c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c90:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c94:	4bab      	ldr	r3, [pc, #684]	; (8004f44 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8004c96:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004c9a:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004c9e:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ca0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004ca2:	f004 fb89 	bl	80093b8 <HAL_ADC_Init>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f040 842a 	bne.w	8005500 <main+0xc04>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8004cb0:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cb2:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004cb4:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8004cb6:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f004 ff3c 	bl	8009b38 <HAL_ADCEx_MultiModeConfigChannel>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f040 841d 	bne.w	8005500 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004cc6:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004cc8:	a945      	add	r1, sp, #276	; 0x114
 8004cca:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ccc:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004cd0:	f004 fe3e 	bl	8009950 <HAL_ADC_ConfigChannel>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f040 8413 	bne.w	8005500 <main+0xc04>
	hadc2.Instance = ADC2;
 8004cda:	4c9b      	ldr	r4, [pc, #620]	; (8004f48 <main+0x64c>)
 8004cdc:	4b9b      	ldr	r3, [pc, #620]	; (8004f4c <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004cde:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ce0:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ce4:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8004ce6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004cea:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004cec:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004cee:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004cf0:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004cf2:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8004cf6:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004cfa:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f004 fb5a 	bl	80093b8 <HAL_ADC_Init>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f040 83fb 	bne.w	8005500 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d0a:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004d0c:	a941      	add	r1, sp, #260	; 0x104
 8004d0e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d10:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004d14:	f004 fe1c 	bl	8009950 <HAL_ADC_ConfigChannel>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 83f1 	bne.w	8005500 <main+0xc04>
	hadc3.Instance = ADC3;
 8004d1e:	4c8c      	ldr	r4, [pc, #560]	; (8004f50 <main+0x654>)
 8004d20:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004d22:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004d24:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d28:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004d2a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004d2e:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004d30:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8004d32:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8004d34:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004d36:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004d3a:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004d3e:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8004d42:	4620      	mov	r0, r4
 8004d44:	f004 fb38 	bl	80093b8 <HAL_ADC_Init>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f040 83d9 	bne.w	8005500 <main+0xc04>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d4e:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d50:	a93d      	add	r1, sp, #244	; 0xf4
 8004d52:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d54:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004d58:	f004 fdfa 	bl	8009950 <HAL_ADC_ConfigChannel>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f040 83cf 	bne.w	8005500 <main+0xc04>
	hrng.Instance = RNG;
 8004d62:	487d      	ldr	r0, [pc, #500]	; (8004f58 <main+0x65c>)
 8004d64:	4b7d      	ldr	r3, [pc, #500]	; (8004f5c <main+0x660>)
 8004d66:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004d68:	f00a fe02 	bl	800f970 <HAL_RNG_Init>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f040 83c7 	bne.w	8005500 <main+0xc04>
	htim6.Instance = TIM6;
 8004d72:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8004d74:	f642 2230 	movw	r2, #10800	; 0x2a30
 8004d78:	497a      	ldr	r1, [pc, #488]	; (8004f64 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d7a:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d7c:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d7e:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8004d82:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8004d86:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d8a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d8e:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8004d90:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004d92:	f00c fbdd 	bl	8011550 <HAL_TIM_Base_Init>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f040 83b2 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004d9c:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004d9e:	a91f      	add	r1, sp, #124	; 0x7c
 8004da0:	486f      	ldr	r0, [pc, #444]	; (8004f60 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004da2:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8004da8:	f00e f83c 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f040 83a7 	bne.w	8005500 <main+0xc04>
	htim3.Instance = TIM3;
 8004db2:	4c6d      	ldr	r4, [pc, #436]	; (8004f68 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8004db4:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004db8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8004f8c <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dbc:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dbe:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004dc0:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004dc2:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc4:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc6:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004dc8:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dca:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8004dcc:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8004dd0:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004dd4:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004dd8:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004ddc:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004de0:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004de4:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004de8:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004dea:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004dec:	f00c fbb0 	bl	8011550 <HAL_TIM_Base_Init>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f040 8385 	bne.w	8005500 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004df6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004dfa:	a939      	add	r1, sp, #228	; 0xe4
 8004dfc:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfe:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004e00:	f00b fe3c 	bl	8010a7c <HAL_TIM_ConfigClockSource>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f040 837b 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f00c fd3c 	bl	8011888 <HAL_TIM_PWM_Init>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f040 8375 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e16:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004e18:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1a:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f00e f801 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	f040 836c 	bne.w	8005500 <main+0xc04>
	sConfigOC.Pulse = 10;
 8004e28:	230a      	movs	r3, #10
 8004e2a:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e2e:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e30:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e32:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e34:	a955      	add	r1, sp, #340	; 0x154
 8004e36:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004e38:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004e3c:	f00d f8a2 	bl	8011f84 <HAL_TIM_PWM_ConfigChannel>
 8004e40:	4605      	mov	r5, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	f040 835c 	bne.w	8005500 <main+0xc04>
	HAL_TIM_MspPostInit(&htim3);
 8004e48:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004e4a:	4c48      	ldr	r4, [pc, #288]	; (8004f6c <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004e4c:	f002 fe5e 	bl	8007b0c <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004e50:	4b47      	ldr	r3, [pc, #284]	; (8004f70 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e52:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e54:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8004e56:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004e58:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e5c:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004e5e:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e64:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004e68:	f00c fb72 	bl	8011550 <HAL_TIM_Base_Init>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f040 8347 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e72:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e74:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e76:	a919      	add	r1, sp, #100	; 0x64
 8004e78:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e7a:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8004e7c:	f00d ffd2 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f040 833d 	bne.w	8005500 <main+0xc04>
	htim1.Instance = TIM1;
 8004e86:	4c3b      	ldr	r4, [pc, #236]	; (8004f74 <main+0x678>)
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8a:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8004e8c:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8004e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e92:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8004e94:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004e96:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8004e9a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8004ea2:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ea6:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f00c fb50 	bl	8011550 <HAL_TIM_Base_Init>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f040 8325 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004eb6:	a935      	add	r1, sp, #212	; 0xd4
 8004eb8:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eba:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004ebc:	f00b fdde 	bl	8010a7c <HAL_TIM_ConfigClockSource>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f040 831d 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec6:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004ec8:	a916      	add	r1, sp, #88	; 0x58
 8004eca:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ecc:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ece:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004ed2:	f00d ffa7 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	f040 8311 	bne.w	8005500 <main+0xc04>
	hcrc.Instance = CRC;
 8004ede:	4827      	ldr	r0, [pc, #156]	; (8004f7c <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ee0:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004ee2:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004ee4:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004ee6:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004eea:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <main+0x684>)
 8004eec:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004eee:	f004 ff1b 	bl	8009d28 <HAL_CRC_Init>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f040 8304 	bne.w	8005500 <main+0xc04>
	htim2.Instance = TIM2;
 8004ef8:	4c22      	ldr	r4, [pc, #136]	; (8004f84 <main+0x688>)
 8004efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004efe:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f00:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8004f02:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f06:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f08:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f0a:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f0c:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f0e:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f10:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004f12:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8004f14:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f16:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004f1a:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004f1e:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004f22:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f26:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004f2a:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f00c fb0e 	bl	8011550 <HAL_TIM_Base_Init>
 8004f34:	e02c      	b.n	8004f90 <main+0x694>
 8004f36:	bf00      	nop
 8004f38:	20002a14 	.word	0x20002a14
 8004f3c:	20002174 	.word	0x20002174
 8004f40:	40012000 	.word	0x40012000
 8004f44:	0f000001 	.word	0x0f000001
 8004f48:	200021bc 	.word	0x200021bc
 8004f4c:	40012100 	.word	0x40012100
 8004f50:	20002204 	.word	0x20002204
 8004f54:	40012200 	.word	0x40012200
 8004f58:	20002678 	.word	0x20002678
 8004f5c:	50060800 	.word	0x50060800
 8004f60:	2000297c 	.word	0x2000297c
 8004f64:	40001000 	.word	0x40001000
 8004f68:	20002898 	.word	0x20002898
 8004f6c:	200029c8 	.word	0x200029c8
 8004f70:	40001400 	.word	0x40001400
 8004f74:	200027b4 	.word	0x200027b4
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	2000224c 	.word	0x2000224c
 8004f80:	40023000 	.word	0x40023000
 8004f84:	2000284c 	.word	0x2000284c
 8004f88:	ee6b2800 	.word	0xee6b2800
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	2800      	cmp	r0, #0
 8004f92:	f040 82b5 	bne.w	8005500 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004f9a:	a92d      	add	r1, sp, #180	; 0xb4
 8004f9c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f9e:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004fa0:	f00b fd6c 	bl	8010a7c <HAL_TIM_ConfigClockSource>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f040 82ab 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8004faa:	4620      	mov	r0, r4
 8004fac:	f00c fd3a 	bl	8011a24 <HAL_TIM_IC_Init>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 82a5 	bne.w	8005500 <main+0xc04>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004fb6:	2704      	movs	r7, #4
 8004fb8:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004fba:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fbc:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8004fbe:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fc0:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004fc2:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8004fc6:	f00c f833 	bl	8011030 <HAL_TIM_SlaveConfigSynchro>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f040 8298 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd0:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004fd2:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fd4:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f00d ff24 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f040 828e 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004fe4:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004fe6:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004fea:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f00d f9e8 	bl	80123c4 <HAL_TIM_IC_ConfigChannel>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	f040 8283 	bne.w	8005500 <main+0xc04>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004ffa:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004ffc:	463a      	mov	r2, r7
 8004ffe:	a931      	add	r1, sp, #196	; 0xc4
 8005000:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005002:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8005004:	f00d f9de 	bl	80123c4 <HAL_TIM_IC_ConfigChannel>
 8005008:	2800      	cmp	r0, #0
 800500a:	f040 8279 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800500e:	a931      	add	r1, sp, #196	; 0xc4
 8005010:	4620      	mov	r0, r4
 8005012:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005014:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8005016:	f00d f9d5 	bl	80123c4 <HAL_TIM_IC_ConfigChannel>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 8270 	bne.w	8005500 <main+0xc04>
	huart6.Instance = USART6;
 8005020:	48c1      	ldr	r0, [pc, #772]	; (8005328 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005022:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8005024:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8005028:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 800502a:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800502c:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800502e:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8005030:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005034:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8005038:	4bbc      	ldr	r3, [pc, #752]	; (800532c <main+0xa30>)
 800503a:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800503e:	2310      	movs	r3, #16
 8005040:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005046:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8005048:	f00f f8ba 	bl	80141c0 <HAL_UART_Init>
 800504c:	2800      	cmp	r0, #0
 800504e:	f040 8257 	bne.w	8005500 <main+0xc04>
	hdac.Instance = DAC;
 8005052:	4cb7      	ldr	r4, [pc, #732]	; (8005330 <main+0xa34>)
 8005054:	4bb7      	ldr	r3, [pc, #732]	; (8005334 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8005056:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800505a:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 800505c:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800505e:	f004 ff1f 	bl	8009ea0 <HAL_DAC_Init>
 8005062:	4602      	mov	r2, r0
 8005064:	2800      	cmp	r0, #0
 8005066:	f040 824b 	bne.w	8005500 <main+0xc04>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800506a:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800506c:	4620      	mov	r0, r4
 800506e:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005070:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8005072:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8005074:	f005 f870 	bl	800a158 <HAL_DAC_ConfigChannel>
 8005078:	4607      	mov	r7, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	f040 8240 	bne.w	8005500 <main+0xc04>
	MX_FATFS_Init();
 8005080:	f010 f912 	bl	80152a8 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8005084:	4cac      	ldr	r4, [pc, #688]	; (8005338 <main+0xa3c>)
 8005086:	4bad      	ldr	r3, [pc, #692]	; (800533c <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005088:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 800508a:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 800508c:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 800508e:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005092:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8005094:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8005098:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800509a:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 800509c:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050a0:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050a4:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80050a6:	f008 f925 	bl	800d2f4 <HAL_I2C_Init>
 80050aa:	4601      	mov	r1, r0
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f040 8227 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80050b2:	4620      	mov	r0, r4
 80050b4:	f008 fc76 	bl	800d9a4 <HAL_I2CEx_ConfigAnalogFilter>
 80050b8:	4601      	mov	r1, r0
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f040 8220 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80050c0:	4620      	mov	r0, r4
 80050c2:	f008 fcc1 	bl	800da48 <HAL_I2CEx_ConfigDigitalFilter>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	f040 8219 	bne.w	8005500 <main+0xc04>
	huart4.Instance = UART4;
 80050ce:	489c      	ldr	r0, [pc, #624]	; (8005340 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 80050d0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80050d4:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050d8:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80050da:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80050dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80050e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050e4:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 80050e8:	4b96      	ldr	r3, [pc, #600]	; (8005344 <main+0xa48>)
 80050ea:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80050ee:	f00f f867 	bl	80141c0 <HAL_UART_Init>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f040 8203 	bne.w	8005500 <main+0xc04>
	huart5.Instance = UART5;
 80050fa:	4893      	ldr	r0, [pc, #588]	; (8005348 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80050fc:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8005100:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005104:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005108:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800510c:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 800510e:	4b8f      	ldr	r3, [pc, #572]	; (800534c <main+0xa50>)
 8005110:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8005112:	f00f f855 	bl	80141c0 <HAL_UART_Init>
 8005116:	4602      	mov	r2, r0
 8005118:	2800      	cmp	r0, #0
 800511a:	f040 81f1 	bne.w	8005500 <main+0xc04>
	huart3.Instance = USART3;
 800511e:	488c      	ldr	r0, [pc, #560]	; (8005350 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8005120:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8005122:	4b8c      	ldr	r3, [pc, #560]	; (8005354 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8005124:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 8005126:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8005128:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 800512a:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800512c:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005130:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005134:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8005138:	f00f f8f0 	bl	801431c <HAL_MultiProcessor_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2800      	cmp	r0, #0
 8005140:	f040 81de 	bne.w	8005500 <main+0xc04>
	hspi4.Instance = SPI4;
 8005144:	4884      	ldr	r0, [pc, #528]	; (8005358 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8005146:	4a85      	ldr	r2, [pc, #532]	; (800535c <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005148:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800514a:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800514e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005152:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005156:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800515a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800515e:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005166:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8005168:	2307      	movs	r3, #7
 800516a:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800516c:	2308      	movs	r3, #8
 800516e:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8005170:	f00a fd34 	bl	800fbdc <HAL_SPI_Init>
 8005174:	2800      	cmp	r0, #0
 8005176:	f040 81c3 	bne.w	8005500 <main+0xc04>
	hspi3.Instance = SPI3;
 800517a:	4879      	ldr	r0, [pc, #484]	; (8005360 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 800517c:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800517e:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005182:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005184:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8005186:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8005188:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 800518a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800518c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005190:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005194:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005198:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 800519c:	4b71      	ldr	r3, [pc, #452]	; (8005364 <main+0xa68>)
 800519e:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80051a0:	f00a fd1c 	bl	800fbdc <HAL_SPI_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f040 81aa 	bne.w	8005500 <main+0xc04>
	hspi2.Instance = SPI2;
 80051ac:	486e      	ldr	r0, [pc, #440]	; (8005368 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80051ae:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8005398 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80051b2:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b4:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051b6:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80051b8:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 80051ba:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80051c0:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80051c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80051c8:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80051cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80051d0:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80051d2:	2338      	movs	r3, #56	; 0x38
 80051d4:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051d6:	2308      	movs	r3, #8
 80051d8:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80051da:	f00a fcff 	bl	800fbdc <HAL_SPI_Init>
 80051de:	2800      	cmp	r0, #0
 80051e0:	f040 818e 	bne.w	8005500 <main+0xc04>
	hi2c4.Instance = I2C4;
 80051e4:	4c61      	ldr	r4, [pc, #388]	; (800536c <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051e6:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 80051e8:	4b61      	ldr	r3, [pc, #388]	; (8005370 <main+0xa74>)
 80051ea:	4f62      	ldr	r7, [pc, #392]	; (8005374 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 80051ec:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ee:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051f0:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 80051f2:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051f6:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80051fa:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 80051fc:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8005200:	f008 f878 	bl	800d2f4 <HAL_I2C_Init>
 8005204:	4601      	mov	r1, r0
 8005206:	2800      	cmp	r0, #0
 8005208:	f040 817a 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800520c:	4620      	mov	r0, r4
 800520e:	f008 fbc9 	bl	800d9a4 <HAL_I2CEx_ConfigAnalogFilter>
 8005212:	4601      	mov	r1, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	f040 8173 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 800521a:	4620      	mov	r0, r4
 800521c:	f008 fc14 	bl	800da48 <HAL_I2CEx_ConfigDigitalFilter>
 8005220:	2800      	cmp	r0, #0
 8005222:	f040 816d 	bne.w	8005500 <main+0xc04>
	hi2c2.Instance = I2C2;
 8005226:	4c54      	ldr	r4, [pc, #336]	; (8005378 <main+0xa7c>)
 8005228:	4b54      	ldr	r3, [pc, #336]	; (800537c <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800522a:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 800522c:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 800522e:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8005230:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 8005234:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005238:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800523c:	4620      	mov	r0, r4
 800523e:	f008 f859 	bl	800d2f4 <HAL_I2C_Init>
 8005242:	4601      	mov	r1, r0
 8005244:	2800      	cmp	r0, #0
 8005246:	f040 815b 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800524a:	4620      	mov	r0, r4
 800524c:	f008 fbaa 	bl	800d9a4 <HAL_I2CEx_ConfigAnalogFilter>
 8005250:	4601      	mov	r1, r0
 8005252:	2800      	cmp	r0, #0
 8005254:	f040 8154 	bne.w	8005500 <main+0xc04>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8005258:	4620      	mov	r0, r4
 800525a:	f008 fbf5 	bl	800da48 <HAL_I2CEx_ConfigDigitalFilter>
 800525e:	2800      	cmp	r0, #0
 8005260:	f040 814e 	bne.w	8005500 <main+0xc04>
	htim4.Instance = TIM4;
 8005264:	4c46      	ldr	r4, [pc, #280]	; (8005380 <main+0xa84>)
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005268:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 800526a:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 800526c:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005270:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8005272:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005274:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005276:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005278:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800527a:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800527c:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800527e:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005282:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 8005286:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 800528a:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005292:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8005296:	4620      	mov	r0, r4
 8005298:	f00c f95a 	bl	8011550 <HAL_TIM_Base_Init>
 800529c:	2800      	cmp	r0, #0
 800529e:	f040 812f 	bne.w	8005500 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80052a6:	a929      	add	r1, sp, #164	; 0xa4
 80052a8:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052aa:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80052ac:	f00b fbe6 	bl	8010a7c <HAL_TIM_ConfigClockSource>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f040 8125 	bne.w	8005500 <main+0xc04>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80052b6:	4620      	mov	r0, r4
 80052b8:	f00c fa18 	bl	80116ec <HAL_TIM_OC_Init>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f040 811f 	bne.w	8005500 <main+0xc04>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80052c2:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c4:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80052c6:	a910      	add	r1, sp, #64	; 0x40
 80052c8:	482d      	ldr	r0, [pc, #180]	; (8005380 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80052ca:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80052cc:	f00d fdaa 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f040 8115 	bne.w	8005500 <main+0xc04>
	sConfigOC.Pulse = 550;
 80052d6:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052da:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052dc:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80052de:	2208      	movs	r2, #8
 80052e0:	a94e      	add	r1, sp, #312	; 0x138
 80052e2:	4827      	ldr	r0, [pc, #156]	; (8005380 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80052e4:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 80052e6:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80052e8:	f00c fcce 	bl	8011c88 <HAL_TIM_OC_ConfigChannel>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f040 8107 	bne.w	8005500 <main+0xc04>
	HAL_TIM_MspPostInit(&htim4);
 80052f2:	4823      	ldr	r0, [pc, #140]	; (8005380 <main+0xa84>)
 80052f4:	f002 fc0a 	bl	8007b0c <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 80052f8:	4823      	ldr	r0, [pc, #140]	; (8005388 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 80052fa:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80052fe:	4f23      	ldr	r7, [pc, #140]	; (800538c <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8005300:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005304:	2306      	movs	r3, #6
 8005306:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 800530a:	f008 fbed 	bl	800dae8 <HAL_IWDG_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	2800      	cmp	r0, #0
 8005312:	f040 80f5 	bne.w	8005500 <main+0xc04>
	htim14.Instance = TIM14;
 8005316:	481e      	ldr	r0, [pc, #120]	; (8005390 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005318:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800531c:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 800531e:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <main+0xa98>)
 8005320:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8005322:	f642 2330 	movw	r3, #10800	; 0x2a30
 8005326:	e039      	b.n	800539c <main+0xaa0>
 8005328:	20002c24 	.word	0x20002c24
 800532c:	40011400 	.word	0x40011400
 8005330:	20002270 	.word	0x20002270
 8005334:	40007400 	.word	0x40007400
 8005338:	20002584 	.word	0x20002584
 800533c:	40005400 	.word	0x40005400
 8005340:	20002b1c 	.word	0x20002b1c
 8005344:	40004c00 	.word	0x40004c00
 8005348:	20002ba0 	.word	0x20002ba0
 800534c:	40005000 	.word	0x40005000
 8005350:	20002a98 	.word	0x20002a98
 8005354:	40004800 	.word	0x40004800
 8005358:	20002750 	.word	0x20002750
 800535c:	40013400 	.word	0x40013400
 8005360:	200026ec 	.word	0x200026ec
 8005364:	40003c00 	.word	0x40003c00
 8005368:	20002688 	.word	0x20002688
 800536c:	2000261c 	.word	0x2000261c
 8005370:	40006000 	.word	0x40006000
 8005374:	20404768 	.word	0x20404768
 8005378:	200025d0 	.word	0x200025d0
 800537c:	40005800 	.word	0x40005800
 8005380:	200028e4 	.word	0x200028e4
 8005384:	40000800 	.word	0x40000800
 8005388:	20002668 	.word	0x20002668
 800538c:	40003000 	.word	0x40003000
 8005390:	20002800 	.word	0x20002800
 8005394:	40002000 	.word	0x40002000
 8005398:	40003800 	.word	0x40003800
 800539c:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80053a2:	f00c f8d5 	bl	8011550 <HAL_TIM_Base_Init>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f040 80aa 	bne.w	8005500 <main+0xc04>
	htim5.Instance = TIM5;
 80053ac:	4f55      	ldr	r7, [pc, #340]	; (8005504 <main+0xc08>)
	htim5.Init.Period = 4;
 80053ae:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 80053b0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8005538 <main+0xc3c>
	htim5.Init.Period = 4;
 80053b4:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 80053b8:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ba:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053bc:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80053be:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 80053c0:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80053c4:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 80053c8:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80053cc:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80053d0:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 80053d2:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80053d6:	f00c f8bb 	bl	8011550 <HAL_TIM_Base_Init>
 80053da:	2800      	cmp	r0, #0
 80053dc:	f040 8090 	bne.w	8005500 <main+0xc04>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053e4:	a925      	add	r1, sp, #148	; 0x94
 80053e6:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e8:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80053ea:	f00b fb47 	bl	8010a7c <HAL_TIM_ConfigClockSource>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f040 8085 	bne.w	8005500 <main+0xc04>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80053f6:	4638      	mov	r0, r7
 80053f8:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fa:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fc:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80053fe:	f00d fd11 	bl	8012e24 <HAL_TIMEx_MasterConfigSynchronization>
 8005402:	4603      	mov	r3, r0
 8005404:	2800      	cmp	r0, #0
 8005406:	d17b      	bne.n	8005500 <main+0xc04>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005408:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 800540c:	483e      	ldr	r0, [pc, #248]	; (8005508 <main+0xc0c>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 800540e:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8005412:	493e      	ldr	r1, [pc, #248]	; (800550c <main+0xc10>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8005414:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8005418:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 800541a:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800541e:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8005420:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8005424:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005428:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 800542c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005430:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8005434:	f00e fec4 	bl	80141c0 <HAL_UART_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2800      	cmp	r0, #0
 800543c:	d160      	bne.n	8005500 <main+0xc04>
	huart7.Instance = UART7;
 800543e:	4834      	ldr	r0, [pc, #208]	; (8005510 <main+0xc14>)
	huart7.Init.BaudRate = 115200;
 8005440:	4a34      	ldr	r2, [pc, #208]	; (8005514 <main+0xc18>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8005442:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005444:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005446:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005448:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 800544a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800544e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8005452:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005456:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800545a:	230c      	movs	r3, #12
 800545c:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800545e:	f00e feaf 	bl	80141c0 <HAL_UART_Init>
 8005462:	2800      	cmp	r0, #0
 8005464:	d14c      	bne.n	8005500 <main+0xc04>
	osMutexDef(myMutex01);
 8005466:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8005468:	f7fe fba4 	bl	8003bb4 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800546c:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 800546e:	4c2a      	ldr	r4, [pc, #168]	; (8005518 <main+0xc1c>)
	osMutexDef(myMutex01);
 8005470:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005474:	f011 f91a 	bl	80166ac <osMutexCreate>
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <main+0xc20>)
 800547a:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800547c:	2101      	movs	r1, #1
 800547e:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8005480:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8005484:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8005486:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800548a:	f011 f96b 	bl	8016764 <osSemaphoreCreate>
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <main+0xc24>)
 8005490:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8005492:	2101      	movs	r1, #1
 8005494:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8005496:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8005498:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800549a:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <main+0xc28>)
 800549e:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80054a0:	f011 f8e2 	bl	8016668 <osTimerCreate>
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <main+0xc2c>)
 80054a6:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 80054a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80054ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80054b0:	4631      	mov	r1, r6
 80054b2:	4628      	mov	r0, r5
 80054b4:	f011 f9d0 	bl	8016858 <osMessageCreate>
 80054b8:	4b1c      	ldr	r3, [pc, #112]	; (800552c <main+0xc30>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80054ba:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054bc:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80054be:	6018      	str	r0, [r3, #0]
	cycleleds();
 80054c0:	f001 fa08 	bl	80068d4 <cycleleds>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80054c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80054c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80054cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80054d0:	4631      	mov	r1, r6
 80054d2:	a84e      	add	r0, sp, #312	; 0x138
 80054d4:	f011 f88e 	bl	80165f4 <osThreadCreate>
 80054d8:	4b15      	ldr	r3, [pc, #84]	; (8005530 <main+0xc34>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054da:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80054dc:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80054de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80054e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 80054ea:	4631      	mov	r1, r6
 80054ec:	a855      	add	r0, sp, #340	; 0x154
 80054ee:	f011 f881 	bl	80165f4 <osThreadCreate>
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <main+0xc38>)
 80054f4:	6018      	str	r0, [r3, #0]
	vTaskSuspend(LPTaskHandle);			// don't allow it to autostart
 80054f6:	f012 fa3b 	bl	8017970 <vTaskSuspend>
	osKernelStart();
 80054fa:	f011 f86d 	bl	80165d8 <osKernelStart>
	while (1) {
 80054fe:	e7fe      	b.n	80054fe <main+0xc02>
		Error_Handler();
 8005500:	f7ff f980 	bl	8004804 <Error_Handler>
 8005504:	20002930 	.word	0x20002930
 8005508:	20002d2c 	.word	0x20002d2c
 800550c:	40007c00 	.word	0x40007c00
 8005510:	20002ca8 	.word	0x20002ca8
 8005514:	40007800 	.word	0x40007800
 8005518:	0802a870 	.word	0x0802a870
 800551c:	20002dc8 	.word	0x20002dc8
 8005520:	20002de8 	.word	0x20002de8
 8005524:	08003c19 	.word	0x08003c19
 8005528:	20002dd0 	.word	0x20002dd0
 800552c:	20002dcc 	.word	0x20002dcc
 8005530:	2000216c 	.word	0x2000216c
 8005534:	2000215c 	.word	0x2000215c
 8005538:	40000c00 	.word	0x40000c00

0800553c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 800553c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005540:	b087      	sub	sp, #28
	MX_USB_DEVICE_Init();
 8005542:	f01f fc4f 	bl	8024de4 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8005546:	f00f fed3 	bl	80152f0 <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 800554a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800554e:	48bd      	ldr	r0, [pc, #756]	; (8005844 <StartDefaultTask+0x308>)
 8005550:	f007 fc8a 	bl	800ce68 <HAL_GPIO_ReadPin>
 8005554:	2801      	cmp	r0, #1
 8005556:	f000 814c 	beq.w	80057f2 <StartDefaultTask+0x2b6>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 800555a:	f7fb fb59 	bl	8000c10 <stampboot>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800555e:	4dba      	ldr	r5, [pc, #744]	; (8005848 <StartDefaultTask+0x30c>)
	getboardpcb();		// find our daughterboard
 8005560:	f7ff f8c0 	bl	80046e4 <getboardpcb>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005564:	f8df 839c 	ldr.w	r8, [pc, #924]	; 8005904 <StartDefaultTask+0x3c8>
 8005568:	2712      	movs	r7, #18
	printf("%s----------------------------------------------------------------------------\n", str);
 800556a:	49b8      	ldr	r1, [pc, #736]	; (800584c <StartDefaultTask+0x310>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800556c:	f242 7630 	movw	r6, #10032	; 0x2730
	printf("%s----------------------------------------------------------------------------\n", str);
 8005570:	48b7      	ldr	r0, [pc, #732]	; (8005850 <StartDefaultTask+0x314>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005572:	2400      	movs	r4, #0
	printf("%s----------------------------------------------------------------------------\n", str);
 8005574:	f021 f8ee 	bl	8026754 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8005578:	f8d8 0000 	ldr.w	r0, [r8]
 800557c:	f505 6184 	add.w	r1, r5, #1056	; 0x420
 8005580:	c90e      	ldmia	r1, {r1, r2, r3}
 8005582:	9003      	str	r0, [sp, #12]
 8005584:	9400      	str	r4, [sp, #0]
 8005586:	48b3      	ldr	r0, [pc, #716]	; (8005854 <StartDefaultTask+0x318>)
 8005588:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800558c:	f021 f8e2 	bl	8026754 <iprintf>
	crc_rom();
 8005590:	f7fe fb6a 	bl	8003c68 <crc_rom>
	printf("%s----------------------------------------------------------------------------\n", str);
 8005594:	49b0      	ldr	r1, [pc, #704]	; (8005858 <StartDefaultTask+0x31c>)
 8005596:	48ae      	ldr	r0, [pc, #696]	; (8005850 <StartDefaultTask+0x314>)
 8005598:	f021 f8dc 	bl	8026754 <iprintf>
	cycleleds();
 800559c:	f001 f99a 	bl	80068d4 <cycleleds>
	init_nextion();			// initilise the LCD display
 80055a0:	f7fe fa48 	bl	8003a34 <init_nextion>
	if (!(netif_is_link_up(&gnetif))) {
 80055a4:	4bad      	ldr	r3, [pc, #692]	; (800585c <StartDefaultTask+0x320>)
 80055a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055aa:	075b      	lsls	r3, r3, #29
 80055ac:	d41e      	bmi.n	80055ec <StartDefaultTask+0xb0>
		printf("LAN interface appears disconnected\n\r");
 80055ae:	48ac      	ldr	r0, [pc, #688]	; (8005860 <StartDefaultTask+0x324>)
 80055b0:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80055b2:	4dac      	ldr	r5, [pc, #688]	; (8005864 <StartDefaultTask+0x328>)
		printf("LAN interface appears disconnected\n\r");
 80055b4:	f021 f8ce 	bl	8026754 <iprintf>
			osDelay(50);
 80055b8:	2032      	movs	r0, #50	; 0x32
 80055ba:	f011 f84d 	bl	8016658 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80055be:	2201      	movs	r2, #1
 80055c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c4:	4628      	mov	r0, r5
 80055c6:	f007 fc61 	bl	800ce8c <HAL_GPIO_WritePin>
			osDelay(50);
 80055ca:	2032      	movs	r0, #50	; 0x32
 80055cc:	f011 f844 	bl	8016658 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80055d0:	2200      	movs	r2, #0
 80055d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055d6:	4628      	mov	r0, r5
 80055d8:	f007 fc58 	bl	800ce8c <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 80055dc:	3c01      	subs	r4, #1
 80055de:	d1eb      	bne.n	80055b8 <StartDefaultTask+0x7c>
		printf("************* REBOOTING **************\n");
 80055e0:	48a1      	ldr	r0, [pc, #644]	; (8005868 <StartDefaultTask+0x32c>)
 80055e2:	f021 f953 	bl	802688c <puts>
		rebootme(0);
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7fe fbde 	bl	8003da8 <rebootme>
	netif = netif_default;
 80055ec:	4b9f      	ldr	r3, [pc, #636]	; (800586c <StartDefaultTask+0x330>)
 80055ee:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8005908 <StartDefaultTask+0x3cc>
 80055f2:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 80055f4:	4b9e      	ldr	r3, [pc, #632]	; (8005870 <StartDefaultTask+0x334>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055f6:	499f      	ldr	r1, [pc, #636]	; (8005874 <StartDefaultTask+0x338>)
	globalfreeze = 0;		// Allow UDP streaming
 80055f8:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 80055fa:	f8c9 0000 	str.w	r0, [r9]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80055fe:	f016 fcb5 	bl	801bf6c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8005602:	499d      	ldr	r1, [pc, #628]	; (8005878 <StartDefaultTask+0x33c>)
 8005604:	f8d9 0000 	ldr.w	r0, [r9]
 8005608:	f016 fc6c 	bl	801bee4 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 800560c:	4b9b      	ldr	r3, [pc, #620]	; (800587c <StartDefaultTask+0x340>)
 800560e:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005612:	f8d8 0000 	ldr.w	r0, [r8]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 8005616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 800561a:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 800561c:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8005620:	f883 7071 	strb.w	r7, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8005624:	f8a3 6084 	strh.w	r6, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 8005628:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 800562a:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 800562c:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 800562e:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8005630:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8005634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8005638:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800563a:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 800563c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8005640:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8005644:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005648:	f041 0101 	orr.w	r1, r1, #1
 800564c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005650:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005654:	498a      	ldr	r1, [pc, #552]	; (8005880 <StartDefaultTask+0x344>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 8005656:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800565a:	488a      	ldr	r0, [pc, #552]	; (8005884 <StartDefaultTask+0x348>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 800565c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8005660:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005664:	b292      	uxth	r2, r2
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005666:	9201      	str	r2, [sp, #4]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8005668:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800566c:	9202      	str	r2, [sp, #8]
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800566e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
	t2cap[0] = 44444444;
 8005672:	4a85      	ldr	r2, [pc, #532]	; (8005888 <StartDefaultTask+0x34c>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005674:	9303      	str	r3, [sp, #12]
	t2cap[0] = 44444444;
 8005676:	4b85      	ldr	r3, [pc, #532]	; (800588c <StartDefaultTask+0x350>)
 8005678:	601a      	str	r2, [r3, #0]
	newbuild = BUILDNO;				// init to the same
 800567a:	4b85      	ldr	r3, [pc, #532]	; (8005890 <StartDefaultTask+0x354>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800567c:	4a85      	ldr	r2, [pc, #532]	; (8005894 <StartDefaultTask+0x358>)
	newbuild = BUILDNO;				// init to the same
 800567e:	601e      	str	r6, [r3, #0]
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8005680:	4b85      	ldr	r3, [pc, #532]	; (8005898 <StartDefaultTask+0x35c>)
 8005682:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005686:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 8005690:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 8005694:	f021 fa48 	bl	8026b28 <siprintf>
	initsplat();
 8005698:	f001 fdce 	bl	8007238 <initsplat>
	stat = setupneo();
 800569c:	f000 fb10 	bl	8005cc0 <setupneo>
	if (stat != HAL_OK) {
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f040 80a9 	bne.w	80057f8 <StartDefaultTask+0x2bc>
	printf("Setting up timers\n");
 80056a6:	487d      	ldr	r0, [pc, #500]	; (800589c <StartDefaultTask+0x360>)
 80056a8:	f021 f8f0 	bl	802688c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80056ac:	2300      	movs	r3, #0
 80056ae:	487c      	ldr	r0, [pc, #496]	; (80058a0 <StartDefaultTask+0x364>)
 80056b0:	461a      	mov	r2, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	6800      	ldr	r0, [r0, #0]
 80056b6:	f011 faf9 	bl	8016cac <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80056ba:	487a      	ldr	r0, [pc, #488]	; (80058a4 <StartDefaultTask+0x368>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 80056bc:	4c7a      	ldr	r4, [pc, #488]	; (80058a8 <StartDefaultTask+0x36c>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 80056be:	f00b f91b 	bl	80108f8 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 80056c2:	2200      	movs	r2, #0
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	4611      	mov	r1, r2
 80056c8:	f00d f840 	bl	801274c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 80056cc:	2200      	movs	r2, #0
 80056ce:	2104      	movs	r1, #4
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	f00d f83b 	bl	801274c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 80056d6:	2200      	movs	r2, #0
 80056d8:	210c      	movs	r1, #12
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	f00d f836 	bl	801274c <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80056e0:	2100      	movs	r1, #0
 80056e2:	4620      	mov	r0, r4
 80056e4:	f00d fa80 	bl	8012be8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80056e8:	2104      	movs	r1, #4
 80056ea:	4620      	mov	r0, r4
 80056ec:	f00d fa7c 	bl	8012be8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80056f0:	210c      	movs	r1, #12
 80056f2:	4620      	mov	r0, r4
 80056f4:	f00d fa78 	bl	8012be8 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80056f8:	2301      	movs	r3, #1
 80056fa:	4a64      	ldr	r2, [pc, #400]	; (800588c <StartDefaultTask+0x350>)
 80056fc:	2108      	movs	r1, #8
 80056fe:	4620      	mov	r0, r4
 8005700:	f00d f882 	bl	8012808 <HAL_TIM_IC_Start_DMA>
 8005704:	b128      	cbz	r0, 8005712 <StartDefaultTask+0x1d6>
		printf("TIM_Base_Start_DMA err %i", err);
 8005706:	4601      	mov	r1, r0
 8005708:	4868      	ldr	r0, [pc, #416]	; (80058ac <StartDefaultTask+0x370>)
 800570a:	f021 f823 	bl	8026754 <iprintf>
		Error_Handler();
 800570e:	f7ff f879 	bl	8004804 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8005712:	6820      	ldr	r0, [r4, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	2108      	movs	r1, #8
	myip = ip.addr;
 8005718:	4c65      	ldr	r4, [pc, #404]	; (80058b0 <StartDefaultTask+0x374>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800571a:	f00d f817 	bl	801274c <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 800571e:	f8d9 3000 	ldr.w	r3, [r9]
	ip = dhcp->offered_ip_addr;
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8005726:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 8005728:	2b00      	cmp	r3, #0
 800572a:	d069      	beq.n	8005800 <StartDefaultTask+0x2c4>
	printf("*****************************************\n");
 800572c:	4861      	ldr	r0, [pc, #388]	; (80058b4 <StartDefaultTask+0x378>)
 800572e:	f021 f8ad 	bl	802688c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	4860      	ldr	r0, [pc, #384]	; (80058b8 <StartDefaultTask+0x37c>)
 8005736:	0e0a      	lsrs	r2, r1, #24
 8005738:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 800573c:	4c5f      	ldr	r4, [pc, #380]	; (80058bc <StartDefaultTask+0x380>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800573e:	9200      	str	r2, [sp, #0]
 8005740:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005744:	b2c9      	uxtb	r1, r1
 8005746:	f021 f805 	bl	8026754 <iprintf>
	printf("*****************************************\n");
 800574a:	485a      	ldr	r0, [pc, #360]	; (80058b4 <StartDefaultTask+0x378>)
 800574c:	f021 f89e 	bl	802688c <puts>
	HAL_IWDG_Refresh(&hiwdg);						// refresh the hardware watchdog reset system timer
 8005750:	485b      	ldr	r0, [pc, #364]	; (80058c0 <StartDefaultTask+0x384>)
 8005752:	f008 fa1f 	bl	800db94 <HAL_IWDG_Refresh>
	initialapisn();									// get initial s/n and UDP target from http server; reboots if fails
 8005756:	f003 fd33 	bl	80091c0 <initialapisn>
	osDelay(3000);		// wait for server to populate us (ZZZ)
 800575a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800575e:	f010 ff7b 	bl	8016658 <osDelay>
	if (http_downloading) {
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d154      	bne.n	8005812 <StartDefaultTask+0x2d6>
	nxt_update();		// check if LCD needs updating
 8005768:	f000 ff1e 	bl	80065a8 <nxt_update>
	if (http_downloading) {
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d163      	bne.n	800583a <StartDefaultTask+0x2fe>
	osDelay(3000);		// wait for server to respond
 8005772:	f640 30b8 	movw	r0, #3000	; 0xbb8
	uip = locateudp();
 8005776:	4d53      	ldr	r5, [pc, #332]	; (80058c4 <StartDefaultTask+0x388>)
	osDelay(3000);		// wait for server to respond
 8005778:	f010 ff6e 	bl	8016658 <osDelay>
	vTaskResume(LPTaskHandle);		// allow it to start
 800577c:	4b52      	ldr	r3, [pc, #328]	; (80058c8 <StartDefaultTask+0x38c>)
	while (lptask_init_done == 0)
 800577e:	4c53      	ldr	r4, [pc, #332]	; (80058cc <StartDefaultTask+0x390>)
	vTaskResume(LPTaskHandle);		// allow it to start
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	f012 f985 	bl	8017a90 <vTaskResume>
	printf("Starting httpd web server\n");
 8005786:	4852      	ldr	r0, [pc, #328]	; (80058d0 <StartDefaultTask+0x394>)
 8005788:	f021 f880 	bl	802688c <puts>
	httpd_init();		// start the www server
 800578c:	f014 fe5c 	bl	801a448 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8005790:	f003 fb1c 	bl	8008dcc <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8005794:	484f      	ldr	r0, [pc, #316]	; (80058d4 <StartDefaultTask+0x398>)
 8005796:	f021 f879 	bl	802688c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 800579a:	2008      	movs	r0, #8
 800579c:	4a4e      	ldr	r2, [pc, #312]	; (80058d8 <StartDefaultTask+0x39c>)
 800579e:	2100      	movs	r1, #0
 80057a0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80057a4:	9000      	str	r0, [sp, #0]
 80057a6:	484d      	ldr	r0, [pc, #308]	; (80058dc <StartDefaultTask+0x3a0>)
 80057a8:	f004 fb9e 	bl	8009ee8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 80057ac:	484c      	ldr	r0, [pc, #304]	; (80058e0 <StartDefaultTask+0x3a4>)
 80057ae:	f00a ffeb 	bl	8010788 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80057b2:	f012 fcab 	bl	801810c <xTaskGetCurrentTaskHandle>
 80057b6:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <StartDefaultTask+0x3a8>)
 80057b8:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 80057ba:	f002 ffbb 	bl	8008734 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <StartDefaultTask+0x3ac>)
 80057c0:	2201      	movs	r2, #1
	uip = locateudp();
 80057c2:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 80057c4:	4849      	ldr	r0, [pc, #292]	; (80058ec <StartDefaultTask+0x3b0>)
	main_init_done = 1; // let lptask now main has initialised
 80057c6:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 80057c8:	f021 f860 	bl	802688c <puts>
	while (lptask_init_done == 0)
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	b92b      	cbnz	r3, 80057dc <StartDefaultTask+0x2a0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 80057d0:	2064      	movs	r0, #100	; 0x64
 80057d2:	f010 ff41 	bl	8016658 <osDelay>
	while (lptask_init_done == 0)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f9      	beq.n	80057d0 <StartDefaultTask+0x294>
	startadc();		// start the ADC DMA loop
 80057dc:	f7fb f98e 	bl	8000afc <startadc>
		startudp(uip);	// should never return
 80057e0:	6828      	ldr	r0, [r5, #0]
 80057e2:	f002 ffdd 	bl	80087a0 <startudp>
		printf("UDP stream exited!!!\n\r");
 80057e6:	4842      	ldr	r0, [pc, #264]	; (80058f0 <StartDefaultTask+0x3b4>)
 80057e8:	f020 ffb4 	bl	8026754 <iprintf>
		rebootme(4);
 80057ec:	2004      	movs	r0, #4
 80057ee:	f7fe fadb 	bl	8003da8 <rebootme>
		swapboot();	//  swap the boot vector
 80057f2:	f7fb fb67 	bl	8000ec4 <swapboot>
 80057f6:	e6b2      	b.n	800555e <StartDefaultTask+0x22>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 80057f8:	483e      	ldr	r0, [pc, #248]	; (80058f4 <StartDefaultTask+0x3b8>)
 80057fa:	f020 ffab 	bl	8026754 <iprintf>
 80057fe:	e752      	b.n	80056a6 <StartDefaultTask+0x16a>
		printf("***** DHCP Failed ******\n");
 8005800:	483d      	ldr	r0, [pc, #244]	; (80058f8 <StartDefaultTask+0x3bc>)
 8005802:	f021 f843 	bl	802688c <puts>
		osDelay(200);
 8005806:	20c8      	movs	r0, #200	; 0xc8
 8005808:	f010 ff26 	bl	8016658 <osDelay>
		rebootme(1);
 800580c:	2001      	movs	r0, #1
 800580e:	f7fe facb 	bl	8003da8 <rebootme>
		printf("STM Downloading...\n");
 8005812:	483a      	ldr	r0, [pc, #232]	; (80058fc <StartDefaultTask+0x3c0>)
			HAL_IWDG_Refresh(&hiwdg);
 8005814:	4d2a      	ldr	r5, [pc, #168]	; (80058c0 <StartDefaultTask+0x384>)
		printf("STM Downloading...\n");
 8005816:	f021 f839 	bl	802688c <puts>
		while (http_downloading) {
 800581a:	e006      	b.n	800582a <StartDefaultTask+0x2ee>
			HAL_IWDG_Refresh(&hiwdg);
 800581c:	4628      	mov	r0, r5
 800581e:	f008 f9b9 	bl	800db94 <HAL_IWDG_Refresh>
			osDelay(1000);
 8005822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005826:	f010 ff17 	bl	8016658 <osDelay>
		while (http_downloading) {
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f5      	bne.n	800581c <StartDefaultTask+0x2e0>
		osDelay(5000);		// allow time for it to get to reboot if its going to
 8005830:	f241 3088 	movw	r0, #5000	; 0x1388
 8005834:	f010 ff10 	bl	8016658 <osDelay>
 8005838:	e796      	b.n	8005768 <StartDefaultTask+0x22c>
		printf("LCD Downloading...\n");
 800583a:	4831      	ldr	r0, [pc, #196]	; (8005900 <StartDefaultTask+0x3c4>)
			HAL_IWDG_Refresh(&hiwdg);
 800583c:	4d20      	ldr	r5, [pc, #128]	; (80058c0 <StartDefaultTask+0x384>)
		printf("LCD Downloading...\n");
 800583e:	f021 f825 	bl	802688c <puts>
		while (http_downloading) {
 8005842:	e06a      	b.n	800591a <StartDefaultTask+0x3de>
 8005844:	40020800 	.word	0x40020800
 8005848:	1ff0f000 	.word	0x1ff0f000
 800584c:	0802c7f0 	.word	0x0802c7f0
 8005850:	0802c720 	.word	0x0802c720
 8005854:	0802c7f4 	.word	0x0802c7f4
 8005858:	0802b6b0 	.word	0x0802b6b0
 800585c:	20003544 	.word	0x20003544
 8005860:	0802c834 	.word	0x0802c834
 8005864:	40020c00 	.word	0x40020c00
 8005868:	0802c85c 	.word	0x0802c85c
 800586c:	2002e434 	.word	0x2002e434
 8005870:	20003464 	.word	0x20003464
 8005874:	08003db1 	.word	0x08003db1
 8005878:	08003c0d 	.word	0x08003c0d
 800587c:	20003014 	.word	0x20003014
 8005880:	0802c884 	.word	0x0802c884
 8005884:	200000a0 	.word	0x200000a0
 8005888:	02a62b1c 	.word	0x02a62b1c
 800588c:	20000784 	.word	0x20000784
 8005890:	20002ddc 	.word	0x20002ddc
 8005894:	20003474 	.word	0x20003474
 8005898:	200034d8 	.word	0x200034d8
 800589c:	0802c8ec 	.word	0x0802c8ec
 80058a0:	20002de8 	.word	0x20002de8
 80058a4:	2000297c 	.word	0x2000297c
 80058a8:	2000284c 	.word	0x2000284c
 80058ac:	0802c900 	.word	0x0802c900
 80058b0:	20002dd4 	.word	0x20002dd4
 80058b4:	0802c938 	.word	0x0802c938
 80058b8:	0802c964 	.word	0x0802c964
 80058bc:	200018bc 	.word	0x200018bc
 80058c0:	20002668 	.word	0x20002668
 80058c4:	20002df8 	.word	0x20002df8
 80058c8:	2000215c 	.word	0x2000215c
 80058cc:	20002dc0 	.word	0x20002dc0
 80058d0:	0802c9a0 	.word	0x0802c9a0
 80058d4:	0802c9bc 	.word	0x0802c9bc
 80058d8:	0802ca20 	.word	0x0802ca20
 80058dc:	20002270 	.word	0x20002270
 80058e0:	200029c8 	.word	0x200029c8
 80058e4:	20000818 	.word	0x20000818
 80058e8:	20002dc4 	.word	0x20002dc4
 80058ec:	0802c9d8 	.word	0x0802c9d8
 80058f0:	0802ca08 	.word	0x0802ca08
 80058f4:	0802c8cc 	.word	0x0802c8cc
 80058f8:	0802c91c 	.word	0x0802c91c
 80058fc:	0802c98c 	.word	0x0802c98c
 8005900:	0802c9f4 	.word	0x0802c9f4
 8005904:	20002160 	.word	0x20002160
 8005908:	20002dd8 	.word	0x20002dd8
			HAL_IWDG_Refresh(&hiwdg);
 800590c:	4628      	mov	r0, r5
 800590e:	f008 f941 	bl	800db94 <HAL_IWDG_Refresh>
			osDelay(1000);
 8005912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005916:	f010 fe9f 	bl	8016658 <osDelay>
		while (http_downloading) {
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f5      	bne.n	800590c <StartDefaultTask+0x3d0>
 8005920:	e727      	b.n	8005772 <StartDefaultTask+0x236>
 8005922:	bf00      	nop

08005924 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8005928:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 800592a:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 800592c:	b083      	sub	sp, #12
 800592e:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8005930:	d009      	beq.n	8005946 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8005932:	230a      	movs	r3, #10
 8005934:	2201      	movs	r2, #1
 8005936:	a901      	add	r1, sp, #4
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <__io_putchar+0x34>)
 800593a:	f00e fb99 	bl	8014070 <HAL_UART_Transmit>

	return ch;
	}
}
 800593e:	9801      	ldr	r0, [sp, #4]
 8005940:	b003      	add	sp, #12
 8005942:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8005946:	4603      	mov	r3, r0
 8005948:	2202      	movs	r2, #2
 800594a:	4905      	ldr	r1, [pc, #20]	; (8005960 <__io_putchar+0x38>)
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <__io_putchar+0x34>)
 800594e:	f00e fb8f 	bl	8014070 <HAL_UART_Transmit>
}
 8005952:	9801      	ldr	r0, [sp, #4]
 8005954:	b003      	add	sp, #12
 8005956:	f85d fb04 	ldr.w	pc, [sp], #4
 800595a:	bf00      	nop
 800595c:	20002a14 	.word	0x20002a14
 8005960:	0802b570 	.word	0x0802b570

08005964 <movavg>:
}


// moving avg, used by:-
// clktrim
uint32_t movavg(uint32_t new) {
 8005964:	b410      	push	{r4}
 8005966:	4c08      	ldr	r4, [pc, #32]	; (8005988 <movavg+0x24>)
	static uint32_t data[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int i;
	uint32_t sum = 0;
 8005968:	2100      	movs	r1, #0
 800596a:	4623      	mov	r3, r4
 800596c:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c

	for (i = 0; i < 15; i++) {
		data[i] = data[i + 1];		// old data is low index
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8005976:	4563      	cmp	r3, ip
		sum += data[i];
 8005978:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 800597a:	d1f9      	bne.n	8005970 <movavg+0xc>
	}
	data[15] = new;		// new data at the end
	sum += new;
 800597c:	4401      	add	r1, r0
	data[15] = new;		// new data at the end
 800597e:	63e0      	str	r0, [r4, #60]	; 0x3c

	return (sum >> 4);
}
 8005980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005984:	0908      	lsrs	r0, r1, #4
 8005986:	4770      	bx	lr
 8005988:	20002dfc 	.word	0x20002dfc
 800598c:	ffffffff 	.word	0xffffffff

08005990 <calcLocator>:
void calcLocator(char *dst, double lat, double lon) {
  int o1, o2, o3;
  int a1, a2, a3;
  double remainder;
  // longitude
  remainder = lon + 180.0;
 8005990:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005a48 <calcLocator+0xb8>
  o1 = (int)(remainder / 20.0);
 8005994:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
  dst[1] = (char)a1 + 'A';
  dst[2] = (char)o2 + '0';
  dst[3] = (char)a2 + '0';
  dst[4] = (char)o3 + 'A';
  dst[5] = (char)a3 + 'A';
  dst[6] = (char)0;
 8005998:	2300      	movs	r3, #0
  a1 = (int)(remainder / 10.0);
 800599a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  remainder = lon + 180.0;
 800599e:	ee31 1b07 	vadd.f64	d1, d1, d7
  dst[6] = (char)0;
 80059a2:	7183      	strb	r3, [r0, #6]
  o2 = (int)(remainder / 2.0);
 80059a4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  remainder = remainder - 2.0 * (double)o2;
 80059a8:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
  o3 = (int)(12.0 * remainder);
 80059ac:	eeb2 4b08 	vmov.f64	d4, #40	; 0x41400000  12.0
  remainder = lat + 90.0;
 80059b0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8005a50 <calcLocator+0xc0>
void calcLocator(char *dst, double lat, double lon) {
 80059b4:	ed2d 8b02 	vpush	{d8}
  remainder = lat + 90.0;
 80059b8:	ee30 0b06 	vadd.f64	d0, d0, d6
  o1 = (int)(remainder / 20.0);
 80059bc:	ee81 6b02 	vdiv.f64	d6, d1, d2
 80059c0:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  remainder = remainder - (double)o1 * 20.0;
 80059c4:	eeb8 8bc6 	vcvt.f64.s32	d8, s12
  dst[0] = (char)o1 + 'A';
 80059c8:	ee16 3a10 	vmov	r3, s12
  a1 = (int)(remainder / 10.0);
 80059cc:	ee80 6b05 	vdiv.f64	d6, d0, d5
  dst[0] = (char)o1 + 'A';
 80059d0:	3341      	adds	r3, #65	; 0x41
 80059d2:	7003      	strb	r3, [r0, #0]
  remainder = remainder - (double)o1 * 20.0;
 80059d4:	eea8 1b42 	vfms.f64	d1, d8, d2
}
 80059d8:	ecbd 8b02 	vpop	{d8}
  o2 = (int)(remainder / 2.0);
 80059dc:	ee21 7b07 	vmul.f64	d7, d1, d7
 80059e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  remainder = remainder - 2.0 * (double)o2;
 80059e4:	eeb8 2bc7 	vcvt.f64.s32	d2, s14
  dst[2] = (char)o2 + '0';
 80059e8:	ee17 3a10 	vmov	r3, s14
  a3 = (int)(24.0 * remainder);
 80059ec:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  dst[2] = (char)o2 + '0';
 80059f0:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - 2.0 * (double)o2;
 80059f2:	eea2 1b43 	vfms.f64	d1, d2, d3
  dst[2] = (char)o2 + '0';
 80059f6:	7083      	strb	r3, [r0, #2]
  a1 = (int)(remainder / 10.0);
 80059f8:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  dst[1] = (char)a1 + 'A';
 80059fc:	ee16 3a10 	vmov	r3, s12
  o3 = (int)(12.0 * remainder);
 8005a00:	ee21 1b04 	vmul.f64	d1, d1, d4
  dst[1] = (char)a1 + 'A';
 8005a04:	3341      	adds	r3, #65	; 0x41
 8005a06:	7043      	strb	r3, [r0, #1]
  remainder = remainder - (double)a1 * 10.0;
 8005a08:	eeb8 4bc6 	vcvt.f64.s32	d4, s12
 8005a0c:	eea4 0b45 	vfms.f64	d0, d4, d5
  o3 = (int)(12.0 * remainder);
 8005a10:	eebd 1bc1 	vcvt.s32.f64	s2, d1
  dst[4] = (char)o3 + 'A';
 8005a14:	ee11 3a10 	vmov	r3, s2
 8005a18:	3341      	adds	r3, #65	; 0x41
  a2 = (int)(remainder);
 8005a1a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
  dst[4] = (char)o3 + 'A';
 8005a1e:	7103      	strb	r3, [r0, #4]
  remainder = remainder - (double)a2;
 8005a20:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  dst[3] = (char)a2 + '0';
 8005a24:	ee16 3a90 	vmov	r3, s13
 8005a28:	3330      	adds	r3, #48	; 0x30
  remainder = remainder - (double)a2;
 8005a2a:	ee30 0b45 	vsub.f64	d0, d0, d5
  dst[3] = (char)a2 + '0';
 8005a2e:	70c3      	strb	r3, [r0, #3]
  a3 = (int)(24.0 * remainder);
 8005a30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005a34:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  dst[5] = (char)a3 + 'A';
 8005a38:	ee10 3a10 	vmov	r3, s0
 8005a3c:	3341      	adds	r3, #65	; 0x41
 8005a3e:	7143      	strb	r3, [r0, #5]
}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	f3af 8000 	nop.w
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	40668000 	.word	0x40668000
 8005a50:	00000000 	.word	0x00000000
 8005a54:	40568000 	.word	0x40568000

08005a58 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <calcepoch32+0x40>)
 8005a5a:	4810      	ldr	r0, [pc, #64]	; (8005a9c <calcepoch32+0x44>)
 8005a5c:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8005a5e:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005a60:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a64:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a66:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a68:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005a6a:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a6c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005a70:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005a72:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005a74:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005a76:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8005a78:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8005a7a:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005a7c:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 8005a7e:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005a82:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 8005a84:	f01f ffa8 	bl	80259d8 <mktime>
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <calcepoch32+0x48>)
 8005a8a:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8005a8c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8005a90:	e9c2 3100 	strd	r3, r1, [r2]
}
 8005a94:	4418      	add	r0, r3
 8005a96:	bd10      	pop	{r4, pc}
 8005a98:	20003014 	.word	0x20003014
 8005a9c:	20002fe8 	.word	0x20002fe8
 8005aa0:	20002ec8 	.word	0x20002ec8

08005aa4 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8005aaa:	b33a      	cbz	r2, 8005afc <printPacket+0x58>
 8005aac:	4607      	mov	r7, r0
 8005aae:	4616      	mov	r6, r2
 8005ab0:	1e4d      	subs	r5, r1, #1
 8005ab2:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8005ab4:	f8df a054 	ldr.w	sl, [pc, #84]	; 8005b0c <printPacket+0x68>
 8005ab8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005b10 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8005abc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005b14 <printPacket+0x70>
 8005ac0:	e013      	b.n	8005aea <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8005ac2:	f8da 1000 	ldr.w	r1, [sl]
 8005ac6:	1c4b      	adds	r3, r1, #1
 8005ac8:	f8ca 3000 	str.w	r3, [sl]
 8005acc:	f020 fe42 	bl	8026754 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005ad0:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8005ad2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005ada:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005adc:	f021 f824 	bl	8026b28 <siprintf>
		printf(temp);
 8005ae0:	a801      	add	r0, sp, #4
 8005ae2:	f020 fe37 	bl	8026754 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d008      	beq.n	8005afc <printPacket+0x58>
		if (i % 16 == 0) {
 8005aea:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8005aee:	463a      	mov	r2, r7
 8005af0:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8005af2:	d0e6      	beq.n	8005ac2 <printPacket+0x1e>
			printf(" ");
 8005af4:	2020      	movs	r0, #32
 8005af6:	f020 fe45 	bl	8026784 <putchar>
 8005afa:	e7e9      	b.n	8005ad0 <printPacket+0x2c>
	}
	printf("\n\r");
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <printPacket+0x64>)
 8005afe:	f020 fe29 	bl	8026754 <iprintf>
}
 8005b02:	b002      	add	sp, #8
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	0802ca1c 	.word	0x0802ca1c
 8005b0c:	20002ec0 	.word	0x20002ec0
 8005b10:	0802d120 	.word	0x0802d120
 8005b14:	0802d12c 	.word	0x0802d12c

08005b18 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8005b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005b1c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005bbc <disableNmea+0xa4>
void disableNmea() {
 8005b20:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8005b22:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005b24:	4f24      	ldr	r7, [pc, #144]	; (8005bb8 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005b26:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8005b2a:	f10d 0904 	add.w	r9, sp, #4
 8005b2e:	ad04      	add	r5, sp, #16
 8005b30:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005b34:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005b38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005b3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005b40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005b44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005b48:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005b4c:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8005b50:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8005b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b58:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8005b5c:	f829 2b02 	strh.w	r2, [r9], #2
 8005b60:	0c12      	lsrs	r2, r2, #16
 8005b62:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005b66:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005b6a:	7829      	ldrb	r1, [r5, #0]
 8005b6c:	786a      	ldrb	r2, [r5, #1]
 8005b6e:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 8005b72:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005b74:	f88d 100a 	strb.w	r1, [sp, #10]
 8005b78:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005b7c:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8005b80:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b88:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005b8a:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005b8c:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 8005b90:	44e6      	add	lr, ip
 8005b92:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005b96:	d1f5      	bne.n	8005b84 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005b98:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005b9a:	2364      	movs	r3, #100	; 0x64
 8005b9c:	220b      	movs	r2, #11
 8005b9e:	a901      	add	r1, sp, #4
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f88d c00d 	strb.w	ip, [sp, #13]
 8005ba6:	f88d e00e 	strb.w	lr, [sp, #14]
 8005baa:	f00e fa61 	bl	8014070 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005bae:	4545      	cmp	r5, r8
 8005bb0:	d1d9      	bne.n	8005b66 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 8005bb2:	b00f      	add	sp, #60	; 0x3c
 8005bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bb8:	20002f5c 	.word	0x20002f5c
 8005bbc:	0802a8d8 	.word	0x0802a8d8

08005bc0 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005bc0:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 8005bc2:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005bc4:	db1c      	blt.n	8005c00 <isGoodChecksum+0x40>
 8005bc6:	4910      	ldr	r1, [pc, #64]	; (8005c08 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 8005bce:	4613      	mov	r3, r2
 8005bd0:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 8005bd2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005bd6:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005bd8:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005bda:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005bdc:	441a      	add	r2, r3
 8005bde:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005be0:	d1f7      	bne.n	8005bd2 <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005be2:	490a      	ldr	r1, [pc, #40]	; (8005c0c <isGoodChecksum+0x4c>)
 8005be4:	4408      	add	r0, r1
 8005be6:	7981      	ldrb	r1, [r0, #6]
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <isGoodChecksum+0x32>
 8005bec:	2000      	movs	r0, #0
}
 8005bee:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8005bf2:	79c0      	ldrb	r0, [r0, #7]
 8005bf4:	1a80      	subs	r0, r0, r2
 8005bf6:	fab0 f080 	clz	r0, r0
 8005bfa:	0940      	lsrs	r0, r0, #5
}
 8005bfc:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8005c00:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8005c02:	4613      	mov	r3, r2
 8005c04:	e7ed      	b.n	8005be2 <isGoodChecksum+0x22>
 8005c06:	bf00      	nop
 8005c08:	20002e41 	.word	0x20002e41
 8005c0c:	20002e40 	.word	0x20002e40

08005c10 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8005c10:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8005c12:	4c25      	ldr	r4, [pc, #148]	; (8005ca8 <IsPacketReady+0x98>)
 8005c14:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d814      	bhi.n	8005c44 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8005c1a:	4a24      	ldr	r2, [pc, #144]	; (8005cac <IsPacketReady+0x9c>)
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	5cd2      	ldrb	r2, [r2, r3]
 8005c20:	4282      	cmp	r2, r0
 8005c22:	d00a      	beq.n	8005c3a <IsPacketReady+0x2a>
 8005c24:	4a22      	ldr	r2, [pc, #136]	; (8005cb0 <IsPacketReady+0xa0>)
 8005c26:	5cd2      	ldrb	r2, [r2, r3]
 8005c28:	4282      	cmp	r2, r0
 8005c2a:	d006      	beq.n	8005c3a <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	4921      	ldr	r1, [pc, #132]	; (8005cb4 <IsPacketReady+0xa4>)
			p = 0;
 8005c30:	4613      	mov	r3, r2
			len = 0;
 8005c32:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8005c34:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8005c36:	70e3      	strb	r3, [r4, #3]
}
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <IsPacketReady+0xa8>)
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	5450      	strb	r0, [r2, r1]
 8005c42:	e7f7      	b.n	8005c34 <IsPacketReady+0x24>
		if (p < 6) {
 8005c44:	2b05      	cmp	r3, #5
 8005c46:	d917      	bls.n	8005c78 <IsPacketReady+0x68>
		if (p == 6) {
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d01b      	beq.n	8005c84 <IsPacketReady+0x74>
 8005c4c:	4d19      	ldr	r5, [pc, #100]	; (8005cb4 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8005c4e:	682a      	ldr	r2, [r5, #0]
 8005c50:	4619      	mov	r1, r3
 8005c52:	3207      	adds	r2, #7
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dbed      	blt.n	8005c34 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005c58:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8005c5a:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8005c5c:	4e16      	ldr	r6, [pc, #88]	; (8005cb8 <IsPacketReady+0xa8>)
 8005c5e:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8005c60:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8005c62:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d1e5      	bne.n	8005c34 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005c68:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005c6a:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005c6c:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 8005c6e:	f7ff ffa7 	bl	8005bc0 <isGoodChecksum>
 8005c72:	b998      	cbnz	r0, 8005c9c <IsPacketReady+0x8c>
				p = 0;
 8005c74:	4603      	mov	r3, r0
 8005c76:	e7dd      	b.n	8005c34 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005c78:	490f      	ldr	r1, [pc, #60]	; (8005cb8 <IsPacketReady+0xa8>)
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	54c8      	strb	r0, [r1, r3]
			return (0);
 8005c7e:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 8005c80:	70e2      	strb	r2, [r4, #3]
}
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <IsPacketReady+0xa8>)
 8005c86:	794d      	ldrb	r5, [r1, #5]
 8005c88:	790a      	ldrb	r2, [r1, #4]
 8005c8a:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8005c8e:	4d09      	ldr	r5, [pc, #36]	; (8005cb4 <IsPacketReady+0xa4>)
 8005c90:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8005c92:	682a      	ldr	r2, [r5, #0]
 8005c94:	2a7f      	cmp	r2, #127	; 0x7f
 8005c96:	d9da      	bls.n	8005c4e <IsPacketReady+0x3e>
				return 0;
 8005c98:	2000      	movs	r0, #0
}
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <IsPacketReady+0xac>)
 8005c9e:	2201      	movs	r2, #1
					return len;
 8005ca0:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000278 	.word	0x20000278
 8005cac:	0802d31c 	.word	0x0802d31c
 8005cb0:	0802d320 	.word	0x0802d320
 8005cb4:	20002fe0 	.word	0x20002fe0
 8005cb8:	20002e40 	.word	0x20002e40
 8005cbc:	20002ed4 	.word	0x20002ed4

08005cc0 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005cc0:	4b74      	ldr	r3, [pc, #464]	; (8005e94 <setupneo+0x1d4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc8:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005cca:	f000 80ba 	beq.w	8005e42 <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8005cce:	2284      	movs	r2, #132	; 0x84
 8005cd0:	4971      	ldr	r1, [pc, #452]	; (8005e98 <setupneo+0x1d8>)
 8005cd2:	4872      	ldr	r0, [pc, #456]	; (8005e9c <setupneo+0x1dc>)
 8005cd4:	f01f fd78 	bl	80257c8 <memcpy>
		gpsuarttx = huart6;
 8005cd8:	2284      	movs	r2, #132	; 0x84
 8005cda:	496f      	ldr	r1, [pc, #444]	; (8005e98 <setupneo+0x1d8>)
 8005cdc:	4870      	ldr	r0, [pc, #448]	; (8005ea0 <setupneo+0x1e0>)
 8005cde:	f01f fd73 	bl	80257c8 <memcpy>
		GPSUARTRX = USART6;
 8005ce2:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <setupneo+0x1e4>)
 8005ce4:	4a70      	ldr	r2, [pc, #448]	; (8005ea8 <setupneo+0x1e8>)
 8005ce6:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4970      	ldr	r1, [pc, #448]	; (8005eac <setupneo+0x1ec>)
 8005cec:	486b      	ldr	r0, [pc, #428]	; (8005e9c <setupneo+0x1dc>)
 8005cee:	f00e fc57 	bl	80145a0 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 809d 	bne.w	8005e34 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005cfa:	f7ff ff0d 	bl	8005b18 <disableNmea>
	osDelay(500);
 8005cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d02:	f010 fca9 	bl	8016658 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8005d06:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <setupneo+0x1f0>)
 8005d08:	ae01      	add	r6, sp, #4
 8005d0a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005d0e:	4d69      	ldr	r5, [pc, #420]	; (8005eb4 <setupneo+0x1f4>)
 8005d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d14:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8005d18:	4867      	ldr	r0, [pc, #412]	; (8005eb8 <setupneo+0x1f8>)
 8005d1a:	f020 fdb7 	bl	802688c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d1e:	2364      	movs	r3, #100	; 0x64
 8005d20:	2208      	movs	r2, #8
 8005d22:	4631      	mov	r1, r6
 8005d24:	485e      	ldr	r0, [pc, #376]	; (8005ea0 <setupneo+0x1e0>)
 8005d26:	f00e f9a3 	bl	8014070 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005d2a:	e004      	b.n	8005d36 <setupneo+0x76>
		i++;
		osDelay(1);
 8005d2c:	f010 fc94 	bl	8016658 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005d30:	3c01      	subs	r4, #1
 8005d32:	f000 80a5 	beq.w	8005e80 <setupneo+0x1c0>
 8005d36:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8005d38:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f6      	beq.n	8005d2c <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d3e:	4c5f      	ldr	r4, [pc, #380]	; (8005ebc <setupneo+0x1fc>)
 8005d40:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8005d42:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d4e:	2364      	movs	r3, #100	; 0x64
 8005d50:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d52:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d56:	4852      	ldr	r0, [pc, #328]	; (8005ea0 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8005d58:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	f00e f987 	bl	8014070 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8005d62:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005d66:	f010 fc77 	bl	8016658 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005d6a:	4855      	ldr	r0, [pc, #340]	; (8005ec0 <setupneo+0x200>)
 8005d6c:	f020 fcf2 	bl	8026754 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005d70:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005d74:	46b4      	mov	ip, r6
 8005d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d78:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d7c:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 8005d7e:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005d82:	220e      	movs	r2, #14
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	4846      	ldr	r0, [pc, #280]	; (8005ea0 <setupneo+0x1e0>)
 8005d88:	f00e f972 	bl	8014070 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005d8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d90:	f010 fc62 	bl	8016658 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005d94:	484b      	ldr	r0, [pc, #300]	; (8005ec4 <setupneo+0x204>)
 8005d96:	f020 fd79 	bl	802688c <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005d9a:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8005d9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005da4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005daa:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005dae:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8005db0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005db4:	4631      	mov	r1, r6
 8005db6:	222c      	movs	r2, #44	; 0x2c
 8005db8:	4839      	ldr	r0, [pc, #228]	; (8005ea0 <setupneo+0x1e0>)
 8005dba:	f00e f959 	bl	8014070 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8005dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005dc2:	f010 fc49 	bl	8016658 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005dc6:	4840      	ldr	r0, [pc, #256]	; (8005ec8 <setupneo+0x208>)
 8005dc8:	f020 fcc4 	bl	8026754 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005dcc:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8005dd0:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005dd2:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005dd4:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dd8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005ddc:	f82c 2b02 	strh.w	r2, [ip], #2
 8005de0:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005de2:	4631      	mov	r1, r6
 8005de4:	482e      	ldr	r0, [pc, #184]	; (8005ea0 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005de6:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005dea:	220b      	movs	r2, #11
 8005dec:	f00e f940 	bl	8014070 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8005df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005df4:	f010 fc30 	bl	8016658 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005df8:	46b4      	mov	ip, r6
 8005dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005e06:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005e0a:	2364      	movs	r3, #100	; 0x64
 8005e0c:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005e0e:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005e12:	4631      	mov	r1, r6
 8005e14:	4822      	ldr	r0, [pc, #136]	; (8005ea0 <setupneo+0x1e0>)
 8005e16:	f00e f92b 	bl	8014070 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8005e1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e1e:	f010 fc1b 	bl	8016658 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <setupneo+0x20c>)
 8005e24:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8005e26:	482a      	ldr	r0, [pc, #168]	; (8005ed0 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8005e28:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8005e2a:	f020 fc93 	bl	8026754 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8005e2e:	4638      	mov	r0, r7
 8005e30:	b00d      	add	sp, #52	; 0x34
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8005e34:	4601      	mov	r1, r0
 8005e36:	4827      	ldr	r0, [pc, #156]	; (8005ed4 <setupneo+0x214>)
 8005e38:	f020 fc8c 	bl	8026754 <iprintf>
}
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	b00d      	add	sp, #52	; 0x34
 8005e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8005e42:	4c25      	ldr	r4, [pc, #148]	; (8005ed8 <setupneo+0x218>)
 8005e44:	4620      	mov	r0, r4
 8005e46:	f00d faa7 	bl	8013398 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f00d f90c 	bl	8013068 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8005e50:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005e54:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8005e56:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8005e58:	f00e f9b2 	bl	80141c0 <HAL_UART_Init>
 8005e5c:	b968      	cbnz	r0, 8005e7a <setupneo+0x1ba>
		gpsuartrx = huart8;
 8005e5e:	2284      	movs	r2, #132	; 0x84
 8005e60:	491e      	ldr	r1, [pc, #120]	; (8005edc <setupneo+0x21c>)
 8005e62:	480e      	ldr	r0, [pc, #56]	; (8005e9c <setupneo+0x1dc>)
 8005e64:	f01f fcb0 	bl	80257c8 <memcpy>
		gpsuarttx = huart7;
 8005e68:	2284      	movs	r2, #132	; 0x84
 8005e6a:	491b      	ldr	r1, [pc, #108]	; (8005ed8 <setupneo+0x218>)
 8005e6c:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <setupneo+0x1e0>)
 8005e6e:	f01f fcab 	bl	80257c8 <memcpy>
		GPSUARTRX = UART8;
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <setupneo+0x1e4>)
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <setupneo+0x220>)
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e736      	b.n	8005ce8 <setupneo+0x28>
			Error_Handler();
 8005e7a:	f7fe fcc3 	bl	8004804 <Error_Handler>
 8005e7e:	e7ee      	b.n	8005e5e <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8005e80:	4818      	ldr	r0, [pc, #96]	; (8005ee4 <setupneo+0x224>)
 8005e82:	f020 fd03 	bl	802688c <puts>
		osDelay(200);
 8005e86:	20c8      	movs	r0, #200	; 0xc8
 8005e88:	f010 fbe6 	bl	8016658 <osDelay>
		rebootme(2);
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	f7fd ff8b 	bl	8003da8 <rebootme>
 8005e92:	e754      	b.n	8005d3e <setupneo+0x7e>
 8005e94:	20002160 	.word	0x20002160
 8005e98:	20002c24 	.word	0x20002c24
 8005e9c:	20002ed8 	.word	0x20002ed8
 8005ea0:	20002f5c 	.word	0x20002f5c
 8005ea4:	20002e3c 	.word	0x20002e3c
 8005ea8:	40011400 	.word	0x40011400
 8005eac:	2000300c 	.word	0x2000300c
 8005eb0:	0802a8d0 	.word	0x0802a8d0
 8005eb4:	20002fe4 	.word	0x20002fe4
 8005eb8:	0802d134 	.word	0x0802d134
 8005ebc:	0802a8b8 	.word	0x0802a8b8
 8005ec0:	0802d174 	.word	0x0802d174
 8005ec4:	0802d1a4 	.word	0x0802d1a4
 8005ec8:	0802d1cc 	.word	0x0802d1cc
 8005ecc:	20003014 	.word	0x20003014
 8005ed0:	0802d1f0 	.word	0x0802d1f0
 8005ed4:	0802d14c 	.word	0x0802d14c
 8005ed8:	20002ca8 	.word	0x20002ca8
 8005edc:	20002d2c 	.word	0x20002d2c
 8005ee0:	40007c00 	.word	0x40007c00
 8005ee4:	0802d218 	.word	0x0802d218

08005ee8 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005ee8:	4a2a      	ldr	r2, [pc, #168]	; (8005f94 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005eea:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	6803      	ldr	r3, [r0, #0]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d011      	beq.n	8005f18 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005ef4:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <HAL_UART_RxCpltCallback+0xb0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d024      	beq.n	8005f44 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005efa:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <HAL_UART_RxCpltCallback+0xb4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d025      	beq.n	8005f4c <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8005f00:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <HAL_UART_RxCpltCallback+0xb8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8005f06:	4827      	ldr	r0, [pc, #156]	; (8005fa4 <HAL_UART_RxCpltCallback+0xbc>)
}
 8005f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8005f0c:	f020 bcbe 	b.w	802688c <puts>
}
 8005f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8005f14:	f7fe bbf6 	b.w	8004704 <uart2_rxdone>
		data = rxdatabuf[0];
 8005f18:	4923      	ldr	r1, [pc, #140]	; (8005fa8 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8005f1a:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8005f1c:	4b23      	ldr	r3, [pc, #140]	; (8005fac <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8005f1e:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8005f20:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8005f22:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8005f24:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8005f26:	f7ff fe73 	bl	8005c10 <IsPacketReady>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	dd1c      	ble.n	8005f68 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8005f2e:	2854      	cmp	r0, #84	; 0x54
 8005f30:	d01b      	beq.n	8005f6a <HAL_UART_RxCpltCallback+0x82>
 8005f32:	2864      	cmp	r0, #100	; 0x64
 8005f34:	d00e      	beq.n	8005f54 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005f36:	b2c2      	uxtb	r2, r0
 8005f38:	491e      	ldr	r1, [pc, #120]	; (8005fb4 <HAL_UART_RxCpltCallback+0xcc>)
 8005f3a:	481f      	ldr	r0, [pc, #124]	; (8005fb8 <HAL_UART_RxCpltCallback+0xd0>)
}
 8005f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8005f40:	f7ff bdb0 	b.w	8005aa4 <printPacket>
}
 8005f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 8005f48:	f7fc b854 	b.w	8001ff4 <uart5_rxdone>
}
 8005f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8005f50:	f001 b868 	b.w	8007024 <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <HAL_UART_RxCpltCallback+0xd4>)
 8005f56:	481a      	ldr	r0, [pc, #104]	; (8005fc0 <HAL_UART_RxCpltCallback+0xd8>)
 8005f58:	f1a3 020a 	sub.w	r2, r3, #10
 8005f5c:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8005f60:	f020 fbf8 	bl	8026754 <iprintf>
				neoispresent = 1;
 8005f64:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <HAL_UART_RxCpltCallback+0xdc>)
 8005f66:	601c      	str	r4, [r3, #0]
}
 8005f68:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005f6a:	4d17      	ldr	r5, [pc, #92]	; (8005fc8 <HAL_UART_RxCpltCallback+0xe0>)
 8005f6c:	224e      	movs	r2, #78	; 0x4e
 8005f6e:	4917      	ldr	r1, [pc, #92]	; (8005fcc <HAL_UART_RxCpltCallback+0xe4>)
 8005f70:	1d28      	adds	r0, r5, #4
 8005f72:	f01f fc29 	bl	80257c8 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005f76:	f7ff fd6f 	bl	8005a58 <calcepoch32>
 8005f7a:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8005f7e:	7e6b      	ldrb	r3, [r5, #25]
 8005f80:	f013 0301 	ands.w	r3, r3, #1
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_UART_RxCpltCallback+0xe8>)
 8005f88:	701c      	strb	r4, [r3, #0]
}
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <HAL_UART_RxCpltCallback+0xe8>)
 8005f8e:	7013      	strb	r3, [r2, #0]
}
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	20002e3c 	.word	0x20002e3c
 8005f98:	40005000 	.word	0x40005000
 8005f9c:	40011400 	.word	0x40011400
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	0802d28c 	.word	0x0802d28c
 8005fa8:	2000300c 	.word	0x2000300c
 8005fac:	20002ec4 	.word	0x20002ec4
 8005fb0:	20002ed0 	.word	0x20002ed0
 8005fb4:	20002e40 	.word	0x20002e40
 8005fb8:	0802d270 	.word	0x0802d270
 8005fbc:	20002e6e 	.word	0x20002e6e
 8005fc0:	0802d244 	.word	0x0802d244
 8005fc4:	20002fe4 	.word	0x20002fe4
 8005fc8:	20003014 	.word	0x20003014
 8005fcc:	20002e46 	.word	0x20002e46
 8005fd0:	20003468 	.word	0x20003468

08005fd4 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fd4:	4926      	ldr	r1, [pc, #152]	; (8006070 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fd6:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fda:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005fdc:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fde:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005fe0:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005fe2:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005fe4:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005fe6:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005fe8:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005fea:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005fec:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8005fee:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005ff0:	d02b      	beq.n	800604a <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8005ff2:	4920      	ldr	r1, [pc, #128]	; (8006074 <HAL_UART_ErrorCallback+0xa0>)
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	d00f      	beq.n	8006018 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005ff8:	491f      	ldr	r1, [pc, #124]	; (8006078 <HAL_UART_ErrorCallback+0xa4>)
 8005ffa:	428b      	cmp	r3, r1
 8005ffc:	d000      	beq.n	8006000 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8006000:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8006004:	481d      	ldr	r0, [pc, #116]	; (800607c <HAL_UART_ErrorCallback+0xa8>)
 8006006:	f020 fba5 	bl	8026754 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	2202      	movs	r2, #2
 800600e:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8006010:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8006012:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8006014:	621d      	str	r5, [r3, #32]
}
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <HAL_UART_ErrorCallback+0xac>)
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	2a00      	cmp	r2, #0
 800601e:	d1ee      	bne.n	8005ffe <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8006020:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <HAL_UART_ErrorCallback+0xb0>)
 8006026:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8006028:	69da      	ldr	r2, [r3, #28]
 800602a:	0710      	lsls	r0, r2, #28
 800602c:	d500      	bpl.n	8006030 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 800602e:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <HAL_UART_ErrorCallback+0xa0>)
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	0751      	lsls	r1, r2, #29
 8006036:	d501      	bpl.n	800603c <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8006038:	2204      	movs	r2, #4
 800603a:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <HAL_UART_ErrorCallback+0xa0>)
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	0792      	lsls	r2, r2, #30
 8006042:	d5dc      	bpl.n	8005ffe <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8006044:	2202      	movs	r2, #2
 8006046:	621a      	str	r2, [r3, #32]
}
 8006048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 800604a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800604e:	480e      	ldr	r0, [pc, #56]	; (8006088 <HAL_UART_ErrorCallback+0xb4>)
 8006050:	f020 fb80 	bl	8026754 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8006054:	462a      	mov	r2, r5
 8006056:	490d      	ldr	r1, [pc, #52]	; (800608c <HAL_UART_ErrorCallback+0xb8>)
 8006058:	480d      	ldr	r0, [pc, #52]	; (8006090 <HAL_UART_ErrorCallback+0xbc>)
 800605a:	f00e faa1 	bl	80145a0 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 800605e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8006062:	d0cc      	beq.n	8005ffe <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8006064:	4601      	mov	r1, r0
 8006066:	480b      	ldr	r0, [pc, #44]	; (8006094 <HAL_UART_ErrorCallback+0xc0>)
}
 8006068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 800606c:	f020 bb72 	b.w	8026754 <iprintf>
 8006070:	20002e3c 	.word	0x20002e3c
 8006074:	40005000 	.word	0x40005000
 8006078:	40011400 	.word	0x40011400
 800607c:	0802d2f0 	.word	0x0802d2f0
 8006080:	20001a6c 	.word	0x20001a6c
 8006084:	20001b20 	.word	0x20001b20
 8006088:	0802d2a4 	.word	0x0802d2a4
 800608c:	2000300c 	.word	0x2000300c
 8006090:	20002ed8 	.word	0x20002ed8
 8006094:	0802d2c4 	.word	0x0802d2c4

08006098 <decnxtmodel>:
static int residual = 0;	// left over unsent to LCD bytes when block size overflowed
static int bytesinblocksent = 0; 		// byte count into current block
static char nxtbuffer[NXDL_BUFF_SIZE];
int nxt_abort = 0;			// 1 == abort

int decnxtmodel(char *nex_model) {
 8006098:	b510      	push	{r4, lr}
	char lcdmod;

	lcdmod = 'Z';

	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 800609a:	220a      	movs	r2, #10
 800609c:	4918      	ldr	r1, [pc, #96]	; (8006100 <decnxtmodel+0x68>)
int decnxtmodel(char *nex_model) {
 800609e:	4604      	mov	r4, r0
	if (!(strncmp(nex_model, "MX4832T035", 10))) {
 80060a0:	f021 fb3a 	bl	8027718 <strncmp>
 80060a4:	b138      	cbz	r0, 80060b6 <decnxtmodel+0x1e>
		lcdmod = 'A';
	} else if (!(strncmp(nex_model, "MX4832F035", 10))) {
 80060a6:	220a      	movs	r2, #10
 80060a8:	4916      	ldr	r1, [pc, #88]	; (8006104 <decnxtmodel+0x6c>)
 80060aa:	4620      	mov	r0, r4
 80060ac:	f021 fb34 	bl	8027718 <strncmp>
 80060b0:	b918      	cbnz	r0, 80060ba <decnxtmodel+0x22>
 80060b2:	2042      	movs	r0, #66	; 0x42
		lcdmod = 'E';
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
		lcdmod = 'F';
	}
	return (lcdmod);
}
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	2041      	movs	r0, #65	; 0x41
 80060b8:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX4832K035", 10))) {
 80060ba:	220a      	movs	r2, #10
 80060bc:	4912      	ldr	r1, [pc, #72]	; (8006108 <decnxtmodel+0x70>)
 80060be:	4620      	mov	r0, r4
 80060c0:	f021 fb2a 	bl	8027718 <strncmp>
 80060c4:	b168      	cbz	r0, 80060e2 <decnxtmodel+0x4a>
	} else if (!(strncmp(nex_model, "MX4024K032", 10))) {
 80060c6:	220a      	movs	r2, #10
 80060c8:	4910      	ldr	r1, [pc, #64]	; (800610c <decnxtmodel+0x74>)
 80060ca:	4620      	mov	r0, r4
 80060cc:	f021 fb24 	bl	8027718 <strncmp>
 80060d0:	b148      	cbz	r0, 80060e6 <decnxtmodel+0x4e>
	} else if (!(strncmp(nex_model, "MX4024T032", 10))) {
 80060d2:	220a      	movs	r2, #10
 80060d4:	490e      	ldr	r1, [pc, #56]	; (8006110 <decnxtmodel+0x78>)
 80060d6:	4620      	mov	r0, r4
 80060d8:	f021 fb1e 	bl	8027718 <strncmp>
 80060dc:	b928      	cbnz	r0, 80060ea <decnxtmodel+0x52>
 80060de:	2045      	movs	r0, #69	; 0x45
}
 80060e0:	bd10      	pop	{r4, pc}
 80060e2:	2043      	movs	r0, #67	; 0x43
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	2044      	movs	r0, #68	; 0x44
 80060e8:	bd10      	pop	{r4, pc}
	} else if (!(strncmp(nex_model, "MX3224F028", 10))) {
 80060ea:	220a      	movs	r2, #10
 80060ec:	4909      	ldr	r1, [pc, #36]	; (8006114 <decnxtmodel+0x7c>)
 80060ee:	4620      	mov	r0, r4
 80060f0:	f021 fb12 	bl	8027718 <strncmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	bf14      	ite	ne
 80060f8:	205a      	movne	r0, #90	; 0x5a
 80060fa:	2046      	moveq	r0, #70	; 0x46
}
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	bf00      	nop
 8006100:	0802d324 	.word	0x0802d324
 8006104:	0802d330 	.word	0x0802d330
 8006108:	0802d33c 	.word	0x0802d33c
 800610c:	0802d348 	.word	0x0802d348
 8006110:	0802d354 	.word	0x0802d354
 8006114:	0802d360 	.word	0x0802d360

08006118 <nxt_loader>:
	int i;
	char lcdmod;

//	printf("nextionloader:  fliename=%s, host=%s, len=%u\n", filename, host, nxtfilesize);

	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 8006118:	1e53      	subs	r3, r2, #1
 800611a:	3303      	adds	r3, #3
int nxt_loader(char filename[], char host[], uint32_t nxtfilesize) {
 800611c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006120:	b083      	sub	sp, #12
	if ((nxtfilesize == 0) || (nxtfilesize == -1)) {
 8006122:	d870      	bhi.n	8006206 <nxt_loader+0xee>

		printf("nxt_loader: nxt file length was bad\n");
		return (-1);
	}

	if (filename[0] == 0) {
 8006124:	7803      	ldrb	r3, [r0, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d067      	beq.n	80061fa <nxt_loader+0xe2>

		printf("nxt_loader: nxt file name was bad\n");
		return (-1);
	}

	if (host[0] == 0) {
 800612a:	780b      	ldrb	r3, [r1, #0]
 800612c:	460f      	mov	r7, r1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d05d      	beq.n	80061ee <nxt_loader+0xd6>

		printf("nxt_loader: nxt host name was bad\n");
		return (-1);
	}

	lcdmod = decnxtmodel(nex_model);
 8006132:	4838      	ldr	r0, [pc, #224]	; (8006214 <nxt_loader+0xfc>)
 8006134:	4690      	mov	r8, r2

	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006136:	4d38      	ldr	r5, [pc, #224]	; (8006218 <nxt_loader+0x100>)
	lcdmod = decnxtmodel(nex_model);
 8006138:	f7ff ffae 	bl	8006098 <decnxtmodel>
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 800613c:	2302      	movs	r3, #2
	sprintf(newfilename, "/firmware/%s-%04u-%c%u.tft", lcdfile, newbuild, lcdmod, lcdbuildno);
 800613e:	b2c0      	uxtb	r0, r0
 8006140:	4a36      	ldr	r2, [pc, #216]	; (800621c <nxt_loader+0x104>)
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
	osDelay(100);

	nxt_abort = 0;
	nxt_blocksacked = 0;
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006142:	f640 34b8 	movw	r4, #3000	; 0xbb8
	sprintf(newfilename, "/firmware/%s-%04u-%c%u.tft", lcdfile, newbuild, lcdmod, lcdbuildno);
 8006146:	9000      	str	r0, [sp, #0]
	http_downloading = NXT_PRELOADING;		// mode == getting ready for nextion download
 8006148:	602b      	str	r3, [r5, #0]
	sprintf(newfilename, "/firmware/%s-%04u-%c%u.tft", lcdfile, newbuild, lcdmod, lcdbuildno);
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	4b34      	ldr	r3, [pc, #208]	; (8006220 <nxt_loader+0x108>)
 800614e:	4935      	ldr	r1, [pc, #212]	; (8006224 <nxt_loader+0x10c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4835      	ldr	r0, [pc, #212]	; (8006228 <nxt_loader+0x110>)
 8006154:	9201      	str	r2, [sp, #4]
 8006156:	4a35      	ldr	r2, [pc, #212]	; (800622c <nxt_loader+0x114>)
 8006158:	f020 fce6 	bl	8026b28 <siprintf>
	printf("Attempting to download Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, host);
 800615c:	463a      	mov	r2, r7
 800615e:	4932      	ldr	r1, [pc, #200]	; (8006228 <nxt_loader+0x110>)
 8006160:	4833      	ldr	r0, [pc, #204]	; (8006230 <nxt_loader+0x118>)
 8006162:	f020 faf7 	bl	8026754 <iprintf>
	osDelay(100);
 8006166:	2064      	movs	r0, #100	; 0x64
 8006168:	f010 fa76 	bl	8016658 <osDelay>
	nxt_abort = 0;
 800616c:	4e31      	ldr	r6, [pc, #196]	; (8006234 <nxt_loader+0x11c>)
 800616e:	2200      	movs	r2, #0
	nxt_blocksacked = 0;
 8006170:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800624c <nxt_loader+0x134>
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 8006174:	4639      	mov	r1, r7
 8006176:	482c      	ldr	r0, [pc, #176]	; (8006228 <nxt_loader+0x110>)
	nxt_abort = 0;
 8006178:	6032      	str	r2, [r6, #0]
	nxt_blocksacked = 0;
 800617a:	f8c9 2000 	str.w	r2, [r9]
	http_dlclient(newfilename, host, (void*) 0);		// start the download
 800617e:	f7fb fd73 	bl	8001c68 <http_dlclient>

	for (i = 0; i < 3000; i++) {
 8006182:	e003      	b.n	800618c <nxt_loader+0x74>
		osDelay(1);
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	bb53      	cbnz	r3, 80061de <nxt_loader+0xc6>
	for (i = 0; i < 3000; i++) {
 8006188:	3c01      	subs	r4, #1
 800618a:	d008      	beq.n	800619e <nxt_loader+0x86>
		osDelay(1);
 800618c:	2001      	movs	r0, #1
 800618e:	f010 fa63 	bl	8016658 <osDelay>
		if ((http_downloading != NXT_PRELOADING) || (nxt_abort)) {
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d0f5      	beq.n	8006184 <nxt_loader+0x6c>
			break;
		}		// see if file downloader returned an error before starting LCD upload
	}
	if ((nxt_abort) || (http_downloading == NOT_LOADING)) {
 8006198:	6832      	ldr	r2, [r6, #0]
 800619a:	bb02      	cbnz	r2, 80061de <nxt_loader+0xc6>
 800619c:	b1fb      	cbz	r3, 80061de <nxt_loader+0xc6>
		printf("nxt_loader: Server aborted before sending NXT file\n");
		http_downloading = NOT_LOADING;
		return (-1);
	}
	http_downloading = NXT_LOADING;
 800619e:	2303      	movs	r3, #3
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 80061a0:	4640      	mov	r0, r8
	http_downloading = NXT_LOADING;
 80061a2:	602b      	str	r3, [r5, #0]
	lcd_startdl(nxtfilesize);	// put LCD into its download new user firmware mode
 80061a4:	f7fd f8c6 	bl	8003334 <lcd_startdl>
	osDelay(600);				// wait > half a second for LCD to Ack
 80061a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80061ac:	f010 fa54 	bl	8016658 <osDelay>
	if (nxt_blocksacked) {		// LCD acks the start, its now in DL mode
 80061b0:	f8d9 4000 	ldr.w	r4, [r9]
 80061b4:	b93c      	cbnz	r4, 80061c6 <nxt_loader+0xae>
		nxt_blocksacked = 0;		// reset counter
		http_dlclient(newfilename, host, (void*) 0);
	} else {
		http_downloading = NOT_LOADING;
		printf("nextionloader: Nextion download not acked start\n");
 80061b6:	4820      	ldr	r0, [pc, #128]	; (8006238 <nxt_loader+0x120>)
		http_downloading = NOT_LOADING;
 80061b8:	602c      	str	r4, [r5, #0]
		printf("nextionloader: Nextion download not acked start\n");
 80061ba:	f020 fb67 	bl	802688c <puts>

	// wait for transfer to complete
	// unblock http client

	return (0);
}
 80061be:	4620      	mov	r0, r4
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nxt_blocksacked = 0;		// reset counter
 80061c6:	2200      	movs	r2, #0
		http_dlclient(newfilename, host, (void*) 0);
 80061c8:	4639      	mov	r1, r7
 80061ca:	4817      	ldr	r0, [pc, #92]	; (8006228 <nxt_loader+0x110>)
	return (0);
 80061cc:	4614      	mov	r4, r2
		nxt_blocksacked = 0;		// reset counter
 80061ce:	f8c9 2000 	str.w	r2, [r9]
		http_dlclient(newfilename, host, (void*) 0);
 80061d2:	f7fb fd49 	bl	8001c68 <http_dlclient>
}
 80061d6:	4620      	mov	r0, r4
 80061d8:	b003      	add	sp, #12
 80061da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("nxt_loader: Server aborted before sending NXT file\n");
 80061de:	4817      	ldr	r0, [pc, #92]	; (800623c <nxt_loader+0x124>)
		return (-1);
 80061e0:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: Server aborted before sending NXT file\n");
 80061e4:	f020 fb52 	bl	802688c <puts>
		http_downloading = NOT_LOADING;
 80061e8:	2300      	movs	r3, #0
 80061ea:	602b      	str	r3, [r5, #0]
		return (-1);
 80061ec:	e7e7      	b.n	80061be <nxt_loader+0xa6>
		printf("nxt_loader: nxt host name was bad\n");
 80061ee:	4814      	ldr	r0, [pc, #80]	; (8006240 <nxt_loader+0x128>)
		return (-1);
 80061f0:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt host name was bad\n");
 80061f4:	f020 fb4a 	bl	802688c <puts>
		return (-1);
 80061f8:	e7e1      	b.n	80061be <nxt_loader+0xa6>
		printf("nxt_loader: nxt file name was bad\n");
 80061fa:	4812      	ldr	r0, [pc, #72]	; (8006244 <nxt_loader+0x12c>)
		return (-1);
 80061fc:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file name was bad\n");
 8006200:	f020 fb44 	bl	802688c <puts>
		return (-1);
 8006204:	e7db      	b.n	80061be <nxt_loader+0xa6>
		printf("nxt_loader: nxt file length was bad\n");
 8006206:	4810      	ldr	r0, [pc, #64]	; (8006248 <nxt_loader+0x130>)
		return (-1);
 8006208:	f04f 34ff 	mov.w	r4, #4294967295
		printf("nxt_loader: nxt file length was bad\n");
 800620c:	f020 fb3e 	bl	802688c <puts>
		return (-1);
 8006210:	e7d5      	b.n	80061be <nxt_loader+0xa6>
 8006212:	bf00      	nop
 8006214:	20001b30 	.word	0x20001b30
 8006218:	200018bc 	.word	0x200018bc
 800621c:	20002dbc 	.word	0x20002dbc
 8006220:	20002ddc 	.word	0x20002ddc
 8006224:	0802d3d8 	.word	0x0802d3d8
 8006228:	200030b8 	.word	0x200030b8
 800622c:	20001a74 	.word	0x20001a74
 8006230:	0802d3f4 	.word	0x0802d3f4
 8006234:	200030e8 	.word	0x200030e8
 8006238:	0802d480 	.word	0x0802d480
 800623c:	0802d44c 	.word	0x0802d44c
 8006240:	0802d3b4 	.word	0x0802d3b4
 8006244:	0802d390 	.word	0x0802d390
 8006248:	0802d36c 	.word	0x0802d36c
 800624c:	200030ec 	.word	0x200030ec

08006250 <nxt_sendres>:

// send residual buffer to the LCD
// gets called from rx_callback and from rx_complete
int nxt_sendres() {
 8006250:	b570      	push	{r4, r5, r6, lr}
	int res = 0;

	if ((residual) && (nxt_abort == 0)) {				// residual data from last call to send first
 8006252:	4d13      	ldr	r5, [pc, #76]	; (80062a0 <nxt_sendres+0x50>)
 8006254:	682c      	ldr	r4, [r5, #0]
 8006256:	b11c      	cbz	r4, 8006260 <nxt_sendres+0x10>
 8006258:	4e12      	ldr	r6, [pc, #72]	; (80062a4 <nxt_sendres+0x54>)
 800625a:	6833      	ldr	r3, [r6, #0]
 800625c:	b123      	cbz	r3, 8006268 <nxt_sendres+0x18>
	int res = 0;
 800625e:	2400      	movs	r4, #0
		} else {
			while (txdmadone == 0)		// tx in progress
				osDelay(1);
		}
	}
	residual = 0;
 8006260:	2300      	movs	r3, #0
	return (res);
}
 8006262:	4620      	mov	r0, r4
	residual = 0;
 8006264:	602b      	str	r3, [r5, #0]
}
 8006266:	bd70      	pop	{r4, r5, r6, pc}
		if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 8006268:	4621      	mov	r1, r4
 800626a:	480f      	ldr	r0, [pc, #60]	; (80062a8 <nxt_sendres+0x58>)
 800626c:	f7fb ff64 	bl	8002138 <lcd_writeblock>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	4604      	mov	r4, r0
 8006274:	d00d      	beq.n	8006292 <nxt_sendres+0x42>
			while (txdmadone == 0)		// tx in progress
 8006276:	4e0d      	ldr	r6, [pc, #52]	; (80062ac <nxt_sendres+0x5c>)
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f0      	bne.n	8006260 <nxt_sendres+0x10>
				osDelay(1);
 800627e:	2001      	movs	r0, #1
 8006280:	f010 f9ea 	bl	8016658 <osDelay>
			while (txdmadone == 0)		// tx in progress
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f9      	beq.n	800627e <nxt_sendres+0x2e>
	residual = 0;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4620      	mov	r0, r4
	residual = 0;
 800628e:	602b      	str	r3, [r5, #0]
}
 8006290:	bd70      	pop	{r4, r5, r6, pc}
			printf("nxt_sendres: failed\n");
 8006292:	4807      	ldr	r0, [pc, #28]	; (80062b0 <nxt_sendres+0x60>)
 8006294:	f020 fafa 	bl	802688c <puts>
			nxt_abort = 1;
 8006298:	2301      	movs	r3, #1
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	e7e0      	b.n	8006260 <nxt_sendres+0x10>
 800629e:	bf00      	nop
 80062a0:	2000334c 	.word	0x2000334c
 80062a4:	200030e8 	.word	0x200030e8
 80062a8:	200030f0 	.word	0x200030f0
 80062ac:	20002154 	.word	0x20002154
 80062b0:	0802d4b0 	.word	0x0802d4b0

080062b4 <nxt_rx_callback>:
//#define lcd_writeblock(nxtbuffer, residual) printf("%d ",residual)

// http callback for Nextion firmware download
// this gets called for each downloaded chunk received
//
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *buf;
	struct pbuf *q;
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 80062b8:	2000      	movs	r0, #0
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80062ba:	461c      	mov	r4, r3
	static int blockssent = 0;
	static int qlentot = 0, tot_sent = 0;

//	printf("nxt_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 80062bc:	4690      	mov	r8, r2
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 80062be:	ed2d 8b02 	vpush	{d8}
 80062c2:	b089      	sub	sp, #36	; 0x24
 80062c4:	ee08 1a10 	vmov	s16, r1
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 80062c8:	9005      	str	r0, [sp, #20]
 80062ca:	9006      	str	r0, [sp, #24]
	LWIP_ASSERT("p != NULL", p != NULL);
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	f000 80f0 	beq.w	80064b2 <nxt_rx_callback+0x1fe>
	if (err != ERR_OK) {
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	f040 80e2 	bne.w	800649c <nxt_rx_callback+0x1e8>
		return;
	}

//	printf("nxt_rx_callback1: nxt_abort=%d, blockssent=%d, nxt_blocksacked=%d, q->len=%d\n", nxt_abort, blockssent,	nxt_blocksacked, p->len);

	if (nxt_abort) {
 80062d8:	f8df b268 	ldr.w	fp, [pc, #616]	; 8006544 <nxt_rx_callback+0x290>
 80062dc:	f8db 3000 	ldr.w	r3, [fp]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d152      	bne.n	800638a <nxt_rx_callback+0xd6>
		http_downloading = NOT_LOADING;
	}

	if (http_downloading == NXT_PRELOADING) {
 80062e4:	4b86      	ldr	r3, [pc, #536]	; (8006500 <nxt_rx_callback+0x24c>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	2a02      	cmp	r2, #2
 80062ea:	d101      	bne.n	80062f0 <nxt_rx_callback+0x3c>
		http_downloading = NXT_LOADING;
 80062ec:	2203      	movs	r2, #3
 80062ee:	601a      	str	r2, [r3, #0]
	}

	i = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	9302      	str	r3, [sp, #8]

	for (q = p; q != NULL; q = q->next) {
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	f000 80bb 	beq.w	8006472 <nxt_rx_callback+0x1be>
 80062fc:	4b81      	ldr	r3, [pc, #516]	; (8006504 <nxt_rx_callback+0x250>)
 80062fe:	4644      	mov	r4, r8
 8006300:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8006548 <nxt_rx_callback+0x294>
 8006304:	4d80      	ldr	r5, [pc, #512]	; (8006508 <nxt_rx_callback+0x254>)
 8006306:	f1c3 0a02 	rsb	sl, r3, #2
 800630a:	4e80      	ldr	r6, [pc, #512]	; (800650c <nxt_rx_callback+0x258>)
 800630c:	e023      	b.n	8006356 <nxt_rx_callback+0xa2>
			if (nxt_sendres() == -1) {	// send residual (if any)
				return (-1);		// abort will now be set
			}
		}

		pktlen = q->len;
 800630e:	9303      	str	r3, [sp, #12]

		if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631a:	f300 8084 	bgt.w	8006426 <nxt_rx_callback+0x172>
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
			}

		} else {
			len = pktlen;		// just try to send what we have got
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	9306      	str	r3, [sp, #24]
		}

		tot_sent += len;
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	9a06      	ldr	r2, [sp, #24]
 8006326:	4413      	add	r3, r2
		if (nxt_abort == 0) {
 8006328:	f8db 2000 	ldr.w	r2, [fp]
		tot_sent += len;
 800632c:	602b      	str	r3, [r5, #0]
		if (nxt_abort == 0) {
 800632e:	2a00      	cmp	r2, #0
 8006330:	d02e      	beq.n	8006390 <nxt_rx_callback+0xdc>
				blockssent++;
			}
		}

//		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006332:	4a77      	ldr	r2, [pc, #476]	; (8006510 <nxt_rx_callback+0x25c>)
		altcp_recved(pcb, p->tot_len);
 8006334:	ee18 0a10 	vmov	r0, s16
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006338:	8963      	ldrh	r3, [r4, #10]
 800633a:	6817      	ldr	r7, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 800633c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
		down_total += q->len;		// downloaded but not necessarily all sent to lcd
 8006340:	443b      	add	r3, r7
 8006342:	6013      	str	r3, [r2, #0]
		altcp_recved(pcb, p->tot_len);
 8006344:	f016 fdbc 	bl	801cec0 <tcp_recved>
		pbuf_free(p);
 8006348:	4640      	mov	r0, r8
 800634a:	f016 f939 	bl	801c5c0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 800634e:	6824      	ldr	r4, [r4, #0]
 8006350:	2c00      	cmp	r4, #0
 8006352:	f000 808e 	beq.w	8006472 <nxt_rx_callback+0x1be>
		qlentot += q->len;
 8006356:	8963      	ldrh	r3, [r4, #10]
 8006358:	f8d9 2000 	ldr.w	r2, [r9]
 800635c:	441a      	add	r2, r3
 800635e:	f8c9 2000 	str.w	r2, [r9]
		tlen = q->tot_len;
 8006362:	8922      	ldrh	r2, [r4, #8]
 8006364:	9205      	str	r2, [sp, #20]
		if (residual > 0) {
 8006366:	4a6b      	ldr	r2, [pc, #428]	; (8006514 <nxt_rx_callback+0x260>)
		len = q->len;
 8006368:	9306      	str	r3, [sp, #24]
		if (residual > 0) {
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	2a00      	cmp	r2, #0
 800636e:	ddce      	ble.n	800630e <nxt_rx_callback+0x5a>
			tot_sent += residual;
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	4413      	add	r3, r2
 8006374:	602b      	str	r3, [r5, #0]
			bytesinblocksent += residual;
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	4413      	add	r3, r2
 800637a:	6033      	str	r3, [r6, #0]
			if (nxt_sendres() == -1) {	// send residual (if any)
 800637c:	f7ff ff68 	bl	8006250 <nxt_sendres>
 8006380:	1c42      	adds	r2, r0, #1
 8006382:	f000 809d 	beq.w	80064c0 <nxt_rx_callback+0x20c>
		pktlen = q->len;
 8006386:	8963      	ldrh	r3, [r4, #10]
 8006388:	e7c1      	b.n	800630e <nxt_rx_callback+0x5a>
		http_downloading = NOT_LOADING;
 800638a:	4b5d      	ldr	r3, [pc, #372]	; (8006500 <nxt_rx_callback+0x24c>)
 800638c:	601c      	str	r4, [r3, #0]
	if (http_downloading == NXT_PRELOADING) {
 800638e:	e7af      	b.n	80062f0 <nxt_rx_callback+0x3c>
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8006390:	9906      	ldr	r1, [sp, #24]
 8006392:	6860      	ldr	r0, [r4, #4]
 8006394:	f7fb fed0 	bl	8002138 <lcd_writeblock>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	d103      	bne.n	80063ac <nxt_rx_callback+0xf8>
 80063a4:	e093      	b.n	80064ce <nxt_rx_callback+0x21a>
				osDelay(1);
 80063a6:	2001      	movs	r0, #1
 80063a8:	f010 f956 	bl	8016658 <osDelay>
			while (txdmadone == 0)		// tx in progress
 80063ac:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <nxt_rx_callback+0x264>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f8      	beq.n	80063a6 <nxt_rx_callback+0xf2>
			bytesinblocksent += len;
 80063b4:	6832      	ldr	r2, [r6, #0]
 80063b6:	9b06      	ldr	r3, [sp, #24]
 80063b8:	4413      	add	r3, r2
			if (bytesinblocksent > 4096) {
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
			bytesinblocksent += len;
 80063be:	6033      	str	r3, [r6, #0]
			if (bytesinblocksent > 4096) {
 80063c0:	dc52      	bgt.n	8006468 <nxt_rx_callback+0x1b4>
			if (bytesinblocksent == 4096) {
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d1b4      	bne.n	8006332 <nxt_rx_callback+0x7e>
				lcd_rxdma();		// get any new characters received
 80063c8:	f7fb ff0e 	bl	80021e8 <lcd_rxdma>
				for (i = 0; i < 2000; i++) {
 80063cc:	2300      	movs	r3, #0
 80063ce:	9302      	str	r3, [sp, #8]
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063d6:	db07      	blt.n	80063e8 <nxt_rx_callback+0x134>
 80063d8:	e052      	b.n	8006480 <nxt_rx_callback+0x1cc>
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	3301      	adds	r3, #1
 80063de:	9302      	str	r3, [sp, #8]
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063e6:	da4b      	bge.n	8006480 <nxt_rx_callback+0x1cc>
					ch = lcd_getc();
 80063e8:	f7fb ff3c 	bl	8002264 <lcd_getc>
 80063ec:	4603      	mov	r3, r0
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80063ee:	484b      	ldr	r0, [pc, #300]	; (800651c <nxt_rx_callback+0x268>)
					ch = lcd_getc();
 80063f0:	9307      	str	r3, [sp, #28]
					if (ch >= 0) {
 80063f2:	9b07      	ldr	r3, [sp, #28]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	db05      	blt.n	8006404 <nxt_rx_callback+0x150>
						if (ch == 0x05) {
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d040      	beq.n	8006480 <nxt_rx_callback+0x1cc>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80063fe:	9907      	ldr	r1, [sp, #28]
 8006400:	f020 f9a8 	bl	8026754 <iprintf>
					osDelay(1);
 8006404:	2001      	movs	r0, #1
 8006406:	f010 f927 	bl	8016658 <osDelay>
					lcd_rxdma();		// get any new characters received
 800640a:	f7fb feed 	bl	80021e8 <lcd_rxdma>
					if (i == 1999) {
 800640e:	9a02      	ldr	r2, [sp, #8]
 8006410:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8006414:	429a      	cmp	r2, r3
 8006416:	d1e0      	bne.n	80063da <nxt_rx_callback+0x126>
						printf("MISSED ACK\n");
 8006418:	4841      	ldr	r0, [pc, #260]	; (8006520 <nxt_rx_callback+0x26c>)
 800641a:	f020 fa37 	bl	802688c <puts>
						ch = -1;
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	9307      	str	r3, [sp, #28]
 8006424:	e7d9      	b.n	80063da <nxt_rx_callback+0x126>
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 8006426:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
			buf = q->payload;
 800642a:	6860      	ldr	r0, [r4, #4]
			len = 4096 - bytesinblocksent;		// we only have to send len this time
 800642c:	9206      	str	r2, [sp, #24]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 800642e:	9b06      	ldr	r3, [sp, #24]
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	9a02      	ldr	r2, [sp, #8]
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	429a      	cmp	r2, r3
 8006438:	f6bf af73 	bge.w	8006322 <nxt_rx_callback+0x6e>
 800643c:	4b35      	ldr	r3, [pc, #212]	; (8006514 <nxt_rx_callback+0x260>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b30      	ldr	r3, [pc, #192]	; (8006504 <nxt_rx_callback+0x250>)
 8006442:	3a01      	subs	r2, #1
 8006444:	441a      	add	r2, r3
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8006446:	9b02      	ldr	r3, [sp, #8]
 8006448:	eb0a 0c02 	add.w	ip, sl, r2
 800644c:	5cc1      	ldrb	r1, [r0, r3]
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 800644e:	9b02      	ldr	r3, [sp, #8]
				nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8006450:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8006454:	3301      	adds	r3, #1
 8006456:	9302      	str	r3, [sp, #8]
 8006458:	9902      	ldr	r1, [sp, #8]
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	4299      	cmp	r1, r3
 800645e:	dbf2      	blt.n	8006446 <nxt_rx_callback+0x192>
 8006460:	4b2c      	ldr	r3, [pc, #176]	; (8006514 <nxt_rx_callback+0x260>)
 8006462:	f8c3 c000 	str.w	ip, [r3]
 8006466:	e75c      	b.n	8006322 <nxt_rx_callback+0x6e>
				printf("BLOCK OVERRUN\n");
 8006468:	482e      	ldr	r0, [pc, #184]	; (8006524 <nxt_rx_callback+0x270>)
 800646a:	f020 fa0f 	bl	802688c <puts>
			if (bytesinblocksent == 4096) {
 800646e:	6833      	ldr	r3, [r6, #0]
 8006470:	e7a7      	b.n	80063c2 <nxt_rx_callback+0x10e>
	}
//		p = p->next;
//		printf("nxt_rx_4: len=%d, tot=%d qlentot=%d\n",  len, down_total, qlentot);
	return (0);
 8006472:	2200      	movs	r2, #0
}
 8006474:	4610      	mov	r0, r2
 8006476:	b009      	add	sp, #36	; 0x24
 8006478:	ecbd 8b02 	vpop	{d8}
 800647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ch < 0) {		// error
 8006480:	9b07      	ldr	r3, [sp, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	db31      	blt.n	80064ea <nxt_rx_callback+0x236>
					nxt_blocksacked++;
 8006486:	4928      	ldr	r1, [pc, #160]	; (8006528 <nxt_rx_callback+0x274>)
				bytesinblocksent = 0;		// start new block
 8006488:	2300      	movs	r3, #0
				blockssent++;
 800648a:	4a28      	ldr	r2, [pc, #160]	; (800652c <nxt_rx_callback+0x278>)
				bytesinblocksent = 0;		// start new block
 800648c:	6033      	str	r3, [r6, #0]
					nxt_blocksacked++;
 800648e:	680b      	ldr	r3, [r1, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	600b      	str	r3, [r1, #0]
				blockssent++;
 8006494:	6813      	ldr	r3, [r2, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e74a      	b.n	8006332 <nxt_rx_callback+0x7e>
		putchar('@');
 800649c:	2040      	movs	r0, #64	; 0x40
 800649e:	f020 f971 	bl	8026784 <putchar>
		printlwiperr(err);
 80064a2:	4620      	mov	r0, r4
}
 80064a4:	b009      	add	sp, #36	; 0x24
 80064a6:	ecbd 8b02 	vpop	{d8}
 80064aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 80064ae:	f7fb bbbf 	b.w	8001c30 <printlwiperr>
	LWIP_ASSERT("p != NULL", p != NULL);
 80064b2:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <nxt_rx_callback+0x27c>)
 80064b4:	22a4      	movs	r2, #164	; 0xa4
 80064b6:	491f      	ldr	r1, [pc, #124]	; (8006534 <nxt_rx_callback+0x280>)
 80064b8:	481f      	ldr	r0, [pc, #124]	; (8006538 <nxt_rx_callback+0x284>)
 80064ba:	f020 f94b 	bl	8026754 <iprintf>
 80064be:	e708      	b.n	80062d2 <nxt_rx_callback+0x1e>
 80064c0:	4602      	mov	r2, r0
}
 80064c2:	4610      	mov	r0, r2
 80064c4:	b009      	add	sp, #36	; 0x24
 80064c6:	ecbd 8b02 	vpop	{d8}
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("NXT Write1 failed from http client\n");
 80064ce:	9001      	str	r0, [sp, #4]
 80064d0:	481a      	ldr	r0, [pc, #104]	; (800653c <nxt_rx_callback+0x288>)
 80064d2:	f020 f9db 	bl	802688c <puts>
				return (-1);
 80064d6:	9a01      	ldr	r2, [sp, #4]
				nxt_abort = 1;
 80064d8:	2301      	movs	r3, #1
}
 80064da:	4610      	mov	r0, r2
				nxt_abort = 1;
 80064dc:	f8cb 3000 	str.w	r3, [fp]
}
 80064e0:	b009      	add	sp, #36	; 0x24
 80064e2:	ecbd 8b02 	vpop	{d8}
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return (-1);
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295
					nxt_abort = 1;
 80064ee:	2301      	movs	r3, #1
					printf("ABORT ERR ON ACK\n");
 80064f0:	4813      	ldr	r0, [pc, #76]	; (8006540 <nxt_rx_callback+0x28c>)
					return (-1);
 80064f2:	9201      	str	r2, [sp, #4]
					nxt_abort = 1;
 80064f4:	f8cb 3000 	str.w	r3, [fp]
					printf("ABORT ERR ON ACK\n");
 80064f8:	f020 f9c8 	bl	802688c <puts>
					return (-1);
 80064fc:	9a01      	ldr	r2, [sp, #4]
 80064fe:	e7b9      	b.n	8006474 <nxt_rx_callback+0x1c0>
 8006500:	200018bc 	.word	0x200018bc
 8006504:	200030f0 	.word	0x200030f0
 8006508:	20003350 	.word	0x20003350
 800650c:	200030b4 	.word	0x200030b4
 8006510:	20001670 	.word	0x20001670
 8006514:	2000334c 	.word	0x2000334c
 8006518:	20002154 	.word	0x20002154
 800651c:	0802d514 	.word	0x0802d514
 8006520:	0802d528 	.word	0x0802d528
 8006524:	0802d504 	.word	0x0802d504
 8006528:	200030ec 	.word	0x200030ec
 800652c:	200030b0 	.word	0x200030b0
 8006530:	0802d4c4 	.word	0x0802d4c4
 8006534:	08046d44 	.word	0x08046d44
 8006538:	0802b44c 	.word	0x0802b44c
 800653c:	0802d4e0 	.word	0x0802d4e0
 8006540:	0802d534 	.word	0x0802d534
 8006544:	200030e8 	.word	0x200030e8
 8006548:	20003348 	.word	0x20003348

0800654c <nxt_check>:

// Get Nextion version and see if we are current
int nxt_check() {
 800654c:	b510      	push	{r4, lr}
	int res;

	if (nex_model[0] == '\0') {
 800654e:	4c13      	ldr	r4, [pc, #76]	; (800659c <nxt_check+0x50>)
 8006550:	7823      	ldrb	r3, [r4, #0]
 8006552:	b12b      	cbz	r3, 8006560 <nxt_check+0x14>
		if (nex_model[0] == '\0')
			return (-1);
	}

// find LCD sys0 value
	if (lcd_sys0 == -1) {
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <nxt_check+0x54>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	3201      	adds	r2, #1
 800655a:	d01b      	beq.n	8006594 <nxt_check+0x48>
//		printf("LCD Buildno was invalid\n");
		return (-2);
	}

	return (lcd_sys0);
 800655c:	6818      	ldr	r0, [r3, #0]
}
 800655e:	bd10      	pop	{r4, pc}
		lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8006560:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8006564:	f7fc fdc0 	bl	80030e8 <lcd_init>
		lcd_getid();	// try again to read its model number etc
 8006568:	f7fc ff04 	bl	8003374 <lcd_getid>
		printf("nxt_check: Trying to reset the LCD\n");
 800656c:	480d      	ldr	r0, [pc, #52]	; (80065a4 <nxt_check+0x58>)
 800656e:	f020 f98d 	bl	802688c <puts>
		osDelay(1500);
 8006572:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006576:	f010 f86f 	bl	8016658 <osDelay>
		lcd_init(230400);  // reset LCD to normal speed
 800657a:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 800657e:	f7fc fdb3 	bl	80030e8 <lcd_init>
		osDelay(100);
 8006582:	2064      	movs	r0, #100	; 0x64
 8006584:	f010 f868 	bl	8016658 <osDelay>
		if (nex_model[0] == '\0')
 8006588:	7823      	ldrb	r3, [r4, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e2      	bne.n	8006554 <nxt_check+0x8>
			return (-1);
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006592:	bd10      	pop	{r4, pc}
		return (-2);
 8006594:	f06f 0001 	mvn.w	r0, #1
}
 8006598:	bd10      	pop	{r4, pc}
 800659a:	bf00      	nop
 800659c:	20001b30 	.word	0x20001b30
 80065a0:	20000014 	.word	0x20000014
 80065a4:	0802d548 	.word	0x0802d548

080065a8 <nxt_update>:

///  Check if LCD needs updating and update it if so
nxt_update() {
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (nxt_check() == -1) {		// we could not identify LCD
 80065aa:	f7ff ffcf 	bl	800654c <nxt_check>
 80065ae:	3001      	adds	r0, #1
 80065b0:	d067      	beq.n	8006682 <nxt_update+0xda>
		printf("nxt_update: LCD not identified\n");
	} else {
		if (lcdbuildno == -2) {		// LCD user firmware might be corrupted
 80065b2:	4f38      	ldr	r7, [pc, #224]	; (8006694 <nxt_update+0xec>)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	3302      	adds	r3, #2
 80065b8:	d068      	beq.n	800668c <nxt_update+0xe4>
			printf("LCD firmware corrupted?\n");
		}
#if 1
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 80065ba:	4c37      	ldr	r4, [pc, #220]	; (8006698 <nxt_update+0xf0>)
 80065bc:	f242 7230 	movw	r2, #10032	; 0x2730
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 80065c6:	ea4f 2123 	mov.w	r1, r3, asr #8
 80065ca:	d04a      	beq.n	8006662 <nxt_update+0xba>
#else
		if (1)
#endif
		{

			if ((lcd_sys0 >> 8) != BUILDNO) {
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	f242 7130 	movw	r1, #10032	; 0x2730
 80065d2:	ebb1 2f23 	cmp.w	r1, r3, asr #8
 80065d6:	d139      	bne.n	800664c <nxt_update+0xa4>
				printf("nxt_update: Our STM build is %d, LCD is for STM build %d \n",  BUILDNO, (lcd_sys0 >> 8));
			}
			if ((lcd_sys0 & 0xff) != lcdbuildno) {
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4293      	cmp	r3, r2
 80065e0:	d12e      	bne.n	8006640 <nxt_update+0x98>
				printf("nxt_update: LCD's build is %d, server's LCD build is %d\n", lcd_sys0 & 0xff, lcdbuildno);
			}

			// do the load

			if (nxt_loader(fwfilename, loaderhost, lcdlen) == 0) {		// valid source file
 80065e2:	4b2e      	ldr	r3, [pc, #184]	; (800669c <nxt_update+0xf4>)
 80065e4:	492e      	ldr	r1, [pc, #184]	; (80066a0 <nxt_update+0xf8>)
 80065e6:	482f      	ldr	r0, [pc, #188]	; (80066a4 <nxt_update+0xfc>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	f7ff fd95 	bl	8006118 <nxt_loader>
 80065ee:	bb18      	cbnz	r0, 8006638 <nxt_update+0x90>
				while ((http_downloading) && (nxt_abort == 0)) {
 80065f0:	4c2d      	ldr	r4, [pc, #180]	; (80066a8 <nxt_update+0x100>)
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	b16b      	cbz	r3, 8006612 <nxt_update+0x6a>
 80065f6:	4e2d      	ldr	r6, [pc, #180]	; (80066ac <nxt_update+0x104>)
					HAL_IWDG_Refresh(&hiwdg);
 80065f8:	4d2d      	ldr	r5, [pc, #180]	; (80066b0 <nxt_update+0x108>)
 80065fa:	e006      	b.n	800660a <nxt_update+0x62>
 80065fc:	f007 faca 	bl	800db94 <HAL_IWDG_Refresh>
					osDelay(5);
 8006600:	2005      	movs	r0, #5
 8006602:	f010 f829 	bl	8016658 <osDelay>
				while ((http_downloading) && (nxt_abort == 0)) {
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	b11b      	cbz	r3, 8006612 <nxt_update+0x6a>
 800660a:	6833      	ldr	r3, [r6, #0]
					HAL_IWDG_Refresh(&hiwdg);
 800660c:	4628      	mov	r0, r5
				while ((http_downloading) && (nxt_abort == 0)) {
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f4      	beq.n	80065fc <nxt_update+0x54>
				}
				osDelay(2000);
 8006612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006616:	f010 f81f 	bl	8016658 <osDelay>
				printf("Attempting LCD re-sync\n");
 800661a:	4826      	ldr	r0, [pc, #152]	; (80066b4 <nxt_update+0x10c>)
 800661c:	f020 f936 	bl	802688c <puts>
				lcd_init(230400);	// resync hardware
 8006620:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8006624:	f7fc fd60 	bl	80030e8 <lcd_init>
				osDelay(200);
 8006628:	20c8      	movs	r0, #200	; 0xc8
 800662a:	f010 f815 	bl	8016658 <osDelay>
				lcd_putsys0((BUILDNO << 8) | (lcdbuildno & 0xff));//  write back this new lcd build ver (NON VOLATILE IN LCD)
 800662e:	783b      	ldrb	r3, [r7, #0]
 8006630:	4821      	ldr	r0, [pc, #132]	; (80066b8 <nxt_update+0x110>)
 8006632:	4318      	orrs	r0, r3
 8006634:	f7fc fe5e 	bl	80032f4 <lcd_putsys0>
			}
			lcd_txblocked = 0;		// unblock LCD sending blocked
 8006638:	4b20      	ldr	r3, [pc, #128]	; (80066bc <nxt_update+0x114>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
		} else {
			printf("LCD firmware matched stm firmware\n");
			http_downloading = NOT_LOADING;
		}
	}
}
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				printf("nxt_update: LCD's build is %d, server's LCD build is %d\n", lcd_sys0 & 0xff, lcdbuildno);
 8006640:	6821      	ldr	r1, [r4, #0]
 8006642:	481f      	ldr	r0, [pc, #124]	; (80066c0 <nxt_update+0x118>)
 8006644:	b2c9      	uxtb	r1, r1
 8006646:	f020 f885 	bl	8026754 <iprintf>
 800664a:	e7ca      	b.n	80065e2 <nxt_update+0x3a>
				printf("nxt_update: Our STM build is %d, LCD is for STM build %d \n",  BUILDNO, (lcd_sys0 >> 8));
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	481d      	ldr	r0, [pc, #116]	; (80066c4 <nxt_update+0x11c>)
 8006650:	1212      	asrs	r2, r2, #8
 8006652:	f020 f87f 	bl	8026754 <iprintf>
			if ((lcd_sys0 & 0xff) != lcdbuildno) {
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	4293      	cmp	r3, r2
 800665e:	d0c0      	beq.n	80065e2 <nxt_update+0x3a>
 8006660:	e7ee      	b.n	8006640 <nxt_update+0x98>
				(((lcd_sys0 & 0xff) != lcdbuildno)		// OR lcdbuildno != latest lcdbuildno  AND
 8006662:	6823      	ldr	r3, [r4, #0]
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 8006664:	683a      	ldr	r2, [r7, #0]
				(((lcd_sys0 & 0xff) != lcdbuildno)		// OR lcdbuildno != latest lcdbuildno  AND
 8006666:	b2db      	uxtb	r3, r3
		if (((lcd_sys0 >> 8) != BUILDNO) ||		// this LCD matches the wrong STM build number
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <nxt_update+0xcc>
				&& ((lcd_sys0 >> 8) == BUILDNO)))			// its the same buildno as the STM
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	ebb1 2f23 	cmp.w	r1, r3, asr #8
 8006672:	d0ab      	beq.n	80065cc <nxt_update+0x24>
			printf("LCD firmware matched stm firmware\n");
 8006674:	4814      	ldr	r0, [pc, #80]	; (80066c8 <nxt_update+0x120>)
 8006676:	f020 f909 	bl	802688c <puts>
			http_downloading = NOT_LOADING;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <nxt_update+0x100>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
}
 8006680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("nxt_update: LCD not identified\n");
 8006682:	4812      	ldr	r0, [pc, #72]	; (80066cc <nxt_update+0x124>)
}
 8006684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("nxt_update: LCD not identified\n");
 8006688:	f020 b900 	b.w	802688c <puts>
			printf("LCD firmware corrupted?\n");
 800668c:	4810      	ldr	r0, [pc, #64]	; (80066d0 <nxt_update+0x128>)
 800668e:	f020 f8fd 	bl	802688c <puts>
 8006692:	e792      	b.n	80065ba <nxt_update+0x12>
 8006694:	20002dbc 	.word	0x20002dbc
 8006698:	20000014 	.word	0x20000014
 800669c:	20001a94 	.word	0x20001a94
 80066a0:	2000001c 	.word	0x2000001c
 80066a4:	20001a30 	.word	0x20001a30
 80066a8:	200018bc 	.word	0x200018bc
 80066ac:	200030e8 	.word	0x200030e8
 80066b0:	20002668 	.word	0x20002668
 80066b4:	0802d61c 	.word	0x0802d61c
 80066b8:	00273000 	.word	0x00273000
 80066bc:	20001a70 	.word	0x20001a70
 80066c0:	0802d5e0 	.word	0x0802d5e0
 80066c4:	0802d5a4 	.word	0x0802d5a4
 80066c8:	0802d634 	.word	0x0802d634
 80066cc:	0802d56c 	.word	0x0802d56c
 80066d0:	0802d58c 	.word	0x0802d58c
 80066d4:	ffffffff 	.word	0xffffffff

080066d8 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 80066d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066dc:	ed2d 8b02 	vpush	{d8}
 80066e0:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 80066e2:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 80066e4:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80066e6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80066ea:	ae0c      	add	r6, sp, #48	; 0x30
 80066ec:	4f6e      	ldr	r7, [pc, #440]	; (80068a8 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80066ee:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80068d0 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 80066f2:	f00f ffb1 	bl	8016658 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80066f6:	2301      	movs	r3, #1
 80066f8:	9600      	str	r6, [sp, #0]
 80066fa:	b2aa      	uxth	r2, r5
 80066fc:	21c1      	movs	r1, #193	; 0xc1
 80066fe:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8006700:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8006702:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8006706:	f007 f85b 	bl	800d7c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800670a:	4604      	mov	r4, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	f040 80a6 	bne.w	800685e <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8006712:	3501      	adds	r5, #1
 8006714:	2d04      	cmp	r5, #4
 8006716:	d1ee      	bne.n	80066f6 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8006718:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800671c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8006720:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8006724:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8006728:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800672c:	485f      	ldr	r0, [pc, #380]	; (80068ac <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800672e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006732:	495f      	ldr	r1, [pc, #380]	; (80068b0 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8006734:	0992      	lsrs	r2, r2, #6
	t = tr;
 8006736:	099c      	lsrs	r4, r3, #6
	p = pr;
 8006738:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800673c:	4a5d      	ldr	r2, [pc, #372]	; (80068b4 <getpressure115.part.0+0x1dc>)
	t = tr;
 800673e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 8006742:	119d      	asrs	r5, r3, #6
	p = pr;
 8006744:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8006748:	2400      	movs	r4, #0
	t = tr;
 800674a:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800674e:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 8006752:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 8006756:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800675a:	ed9d 7b08 	vldr	d7, [sp, #32]
 800675e:	ed91 4b00 	vldr	d4, [r1]
 8006762:	4955      	ldr	r1, [pc, #340]	; (80068b8 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 8006764:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8006766:	eea1 4b07 	vfma.f64	d4, d1, d7
 800676a:	ed91 6b00 	vldr	d6, [r1]
 800676e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006772:	ed92 0b00 	vldr	d0, [r2]
 8006776:	eeb0 7b46 	vmov.f64	d7, d6
 800677a:	ed9d 2b08 	vldr	d2, [sp, #32]
 800677e:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8006782:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8006878 <getpressure115.part.0+0x1a0>
 8006786:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8006880 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800678a:	eea0 7b02 	vfma.f64	d7, d0, d2
 800678e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8006792:	ed9d 6b06 	vldr	d6, [sp, #24]
 8006796:	eea6 5b03 	vfma.f64	d5, d6, d3
 800679a:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 800679e:	ed9d 0b06 	vldr	d0, [sp, #24]
 80067a2:	f020 f923 	bl	80269ec <modf>
	t = tr * -0.1706 + 112.27; //C
 80067a6:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067aa:	4944      	ldr	r1, [pc, #272]	; (80068bc <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067ac:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 80067b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 80067b4:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 80067b6:	2264      	movs	r2, #100	; 0x64
 80067b8:	4842      	ldr	r0, [pc, #264]	; (80068c4 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 80067ba:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8006888 <getpressure115.part.0+0x1b0>
 80067be:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8006890 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 80067c2:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 80067c6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067ca:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8006898 <getpressure115.part.0+0x1c0>
 80067ce:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 80067d2:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067d6:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 80067da:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067de:	ed9f 2b30 	vldr	d2, [pc, #192]	; 80068a0 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067e2:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 80067e6:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 80067ea:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 80067ec:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80067f0:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067f4:	4935      	ldr	r1, [pc, #212]	; (80068cc <getpressure115.part.0+0x1f4>)
	temperature = t;
 80067f6:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80067fa:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80067fe:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8006802:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006806:	ed9d 7b06 	vldr	d7, [sp, #24]
 800680a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 800680e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006812:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8006816:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800681a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 800681e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006822:	feb8 7b47 	vrinta.f64	d7, d7
 8006826:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 800682a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800682e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006832:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8006836:	ee16 3a10 	vmov	r3, s12
 800683a:	fb02 f303 	mul.w	r3, r2, r3
 800683e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006840:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 8006844:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8006846:	ee17 2a10 	vmov	r2, s14
}
 800684a:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800684c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006854:	b00f      	add	sp, #60	; 0x3c
 8006856:	ecbd 8b02 	vpop	{d8}
 800685a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800685e:	4648      	mov	r0, r9
 8006860:	4621      	mov	r1, r4
 8006862:	f01f ff77 	bl	8026754 <iprintf>
			if (i == 3)
 8006866:	2d03      	cmp	r5, #3
 8006868:	f47f af53 	bne.w	8006712 <getpressure115.part.0+0x3a>
}
 800686c:	4620      	mov	r0, r4
 800686e:	b00f      	add	sp, #60	; 0x3c
 8006870:	ecbd 8b02 	vpop	{d8}
 8006874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006878:	04411044 	.word	0x04411044
 800687c:	3fb04411 	.word	0x3fb04411
 8006880:	00000000 	.word	0x00000000
 8006884:	40490000 	.word	0x40490000
 8006888:	86594af5 	.word	0x86594af5
 800688c:	bfc5d638 	.word	0xbfc5d638
 8006890:	ae147ae1 	.word	0xae147ae1
 8006894:	405c1147 	.word	0x405c1147
 8006898:	00000000 	.word	0x00000000
 800689c:	40590000 	.word	0x40590000
 80068a0:	00000000 	.word	0x00000000
 80068a4:	40af4000 	.word	0x40af4000
 80068a8:	20002584 	.word	0x20002584
 80068ac:	20003378 	.word	0x20003378
 80068b0:	20003360 	.word	0x20003360
 80068b4:	20003368 	.word	0x20003368
 80068b8:	20003358 	.word	0x20003358
 80068bc:	200033f4 	.word	0x200033f4
 80068c0:	200033f8 	.word	0x200033f8
 80068c4:	20003404 	.word	0x20003404
 80068c8:	20003400 	.word	0x20003400
 80068cc:	20003014 	.word	0x20003014
 80068d0:	0802d658 	.word	0x0802d658

080068d4 <cycleleds>:
void cycleleds(void) {
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	b084      	sub	sp, #16
	const uint16_t pattern[] = {
 80068da:	4a35      	ldr	r2, [pc, #212]	; (80069b0 <cycleleds+0xdc>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80068dc:	2700      	movs	r7, #0
 80068de:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80069b4 <cycleleds+0xe0>
 80068e2:	ac01      	add	r4, sp, #4
 80068e4:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 80068e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80068ea:	4623      	mov	r3, r4
 80068ec:	4626      	mov	r6, r4
 80068ee:	c303      	stmia	r3!, {r0, r1}
 80068f0:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80068f2:	2200      	movs	r2, #0
 80068f4:	f836 1b02 	ldrh.w	r1, [r6], #2
 80068f8:	4640      	mov	r0, r8
 80068fa:	f006 fac7 	bl	800ce8c <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 80068fe:	9700      	str	r7, [sp, #0]
 8006900:	9b00      	ldr	r3, [sp, #0]
 8006902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006906:	da06      	bge.n	8006916 <cycleleds+0x42>
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006914:	dbf8      	blt.n	8006908 <cycleleds+0x34>
	for (i = 0; i < 5; i++) {
 8006916:	42ae      	cmp	r6, r5
 8006918:	d1eb      	bne.n	80068f2 <cycleleds+0x1e>
	for (delay = 0; delay < 0xC00000; delay++)
 800691a:	2300      	movs	r3, #0
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006924:	da06      	bge.n	8006934 <cycleleds+0x60>
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006932:	dbf8      	blt.n	8006926 <cycleleds+0x52>
	const uint16_t pattern[] = {
 8006934:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8006936:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80069b4 <cycleleds+0xe0>
		for (delay = 0; delay < 0x400000; delay++)
 800693a:	2700      	movs	r7, #0
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800693c:	2201      	movs	r2, #1
 800693e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8006942:	4640      	mov	r0, r8
 8006944:	f006 faa2 	bl	800ce8c <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 8006948:	9700      	str	r7, [sp, #0]
 800694a:	9b00      	ldr	r3, [sp, #0]
 800694c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006950:	da06      	bge.n	8006960 <cycleleds+0x8c>
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	9b00      	ldr	r3, [sp, #0]
 800695a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800695e:	dbf8      	blt.n	8006952 <cycleleds+0x7e>
	for (i = 0; i < 5; i++) {
 8006960:	42ae      	cmp	r6, r5
 8006962:	d1eb      	bne.n	800693c <cycleleds+0x68>
	for (delay = 0; delay < 0xC00000; delay++)
 8006964:	2300      	movs	r3, #0
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	9b00      	ldr	r3, [sp, #0]
 800696a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800696e:	da06      	bge.n	800697e <cycleleds+0xaa>
 8006970:	9b00      	ldr	r3, [sp, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	9b00      	ldr	r3, [sp, #0]
 8006978:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800697c:	dbf8      	blt.n	8006970 <cycleleds+0x9c>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800697e:	2700      	movs	r7, #0
 8006980:	4e0c      	ldr	r6, [pc, #48]	; (80069b4 <cycleleds+0xe0>)
 8006982:	2200      	movs	r2, #0
 8006984:	f834 1b02 	ldrh.w	r1, [r4], #2
 8006988:	4630      	mov	r0, r6
 800698a:	f006 fa7f 	bl	800ce8c <HAL_GPIO_WritePin>
		for (delay = 0; delay < 0x400000; delay++)
 800698e:	9700      	str	r7, [sp, #0]
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006996:	da06      	bge.n	80069a6 <cycleleds+0xd2>
 8006998:	9b00      	ldr	r3, [sp, #0]
 800699a:	3301      	adds	r3, #1
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	9b00      	ldr	r3, [sp, #0]
 80069a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069a4:	dbf8      	blt.n	8006998 <cycleleds+0xc4>
	for (i = 0; i < 5; i++) {
 80069a6:	42ac      	cmp	r4, r5
 80069a8:	d1eb      	bne.n	8006982 <cycleleds+0xae>
}
 80069aa:	b004      	add	sp, #16
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	0802a998 	.word	0x0802a998
 80069b4:	40020c00 	.word	0x40020c00

080069b8 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	b082      	sub	sp, #8
	osDelay(5);
 80069be:	2005      	movs	r0, #5
 80069c0:	f00f fe4a 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80069c4:	2201      	movs	r2, #1
 80069c6:	2104      	movs	r1, #4
 80069c8:	482e      	ldr	r0, [pc, #184]	; (8006a84 <setpgagain+0xcc>)
 80069ca:	f006 fa5f 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 80069ce:	2005      	movs	r0, #5
 80069d0:	f00f fe42 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80069d4:	2200      	movs	r2, #0
 80069d6:	2104      	movs	r1, #4
 80069d8:	482a      	ldr	r0, [pc, #168]	; (8006a84 <setpgagain+0xcc>)
 80069da:	f006 fa57 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 80069de:	2005      	movs	r0, #5
 80069e0:	f00f fe3a 	bl	8016658 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80069e4:	4928      	ldr	r1, [pc, #160]	; (8006a88 <setpgagain+0xd0>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80069e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ea:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80069ec:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80069ee:	4827      	ldr	r0, [pc, #156]	; (8006a8c <setpgagain+0xd4>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80069f0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80069f4:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80069f8:	a901      	add	r1, sp, #4
 80069fa:	f009 fa4d 	bl	800fe98 <HAL_SPI_Transmit>
 80069fe:	bba0      	cbnz	r0, 8006a6a <setpgagain+0xb2>
	osDelay(5);
 8006a00:	2005      	movs	r0, #5
 8006a02:	f00f fe29 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006a06:	2201      	movs	r2, #1
 8006a08:	2104      	movs	r1, #4
 8006a0a:	481e      	ldr	r0, [pc, #120]	; (8006a84 <setpgagain+0xcc>)
 8006a0c:	f006 fa3e 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 8006a10:	2005      	movs	r0, #5
 8006a12:	f00f fe21 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006a16:	481b      	ldr	r0, [pc, #108]	; (8006a84 <setpgagain+0xcc>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2104      	movs	r1, #4
 8006a1c:	f006 fa36 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 8006a20:	2005      	movs	r0, #5
 8006a22:	f00f fe19 	bl	8016658 <osDelay>
	if (gain > 6) {		// might be a DC jump
 8006a26:	2c06      	cmp	r4, #6
 8006a28:	dd1c      	ble.n	8006a64 <setpgagain+0xac>
		sigsuppress = 8;		// prevent trigger for a while
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <setpgagain+0xd8>)
 8006a2c:	2208      	movs	r2, #8
	if (gain > 7) {
 8006a2e:	2c07      	cmp	r4, #7
		sigsuppress = 8;		// prevent trigger for a while
 8006a30:	601a      	str	r2, [r3, #0]
	if (gain > 7) {
 8006a32:	d017      	beq.n	8006a64 <setpgagain+0xac>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8006a34:	f244 1001 	movw	r0, #16641	; 0x4101
 8006a38:	f8ad 0004 	strh.w	r0, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8006a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a40:	2201      	movs	r2, #1
 8006a42:	a901      	add	r1, sp, #4
 8006a44:	4811      	ldr	r0, [pc, #68]	; (8006a8c <setpgagain+0xd4>)
 8006a46:	f009 fa27 	bl	800fe98 <HAL_SPI_Transmit>
 8006a4a:	b9a8      	cbnz	r0, 8006a78 <setpgagain+0xc0>
	osDelay(5);
 8006a4c:	2005      	movs	r0, #5
 8006a4e:	f00f fe03 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8006a52:	2201      	movs	r2, #1
 8006a54:	2104      	movs	r1, #4
 8006a56:	480b      	ldr	r0, [pc, #44]	; (8006a84 <setpgagain+0xcc>)
 8006a58:	f006 fa18 	bl	800ce8c <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <setpgagain+0xdc>)
 8006a5e:	801c      	strh	r4, [r3, #0]
}
 8006a60:	b002      	add	sp, #8
 8006a62:	bd10      	pop	{r4, pc}
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
 8006a64:	f44f 4082 	mov.w	r0, #16640	; 0x4100
 8006a68:	e7e6      	b.n	8006a38 <setpgagain+0x80>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006a70:	4809      	ldr	r0, [pc, #36]	; (8006a98 <setpgagain+0xe0>)
 8006a72:	f01f fe6f 	bl	8026754 <iprintf>
 8006a76:	e7c3      	b.n	8006a00 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8006a78:	4601      	mov	r1, r0
 8006a7a:	4808      	ldr	r0, [pc, #32]	; (8006a9c <setpgagain+0xe4>)
 8006a7c:	f01f fe6a 	bl	8026754 <iprintf>
 8006a80:	e7e4      	b.n	8006a4c <setpgagain+0x94>
 8006a82:	bf00      	nop
 8006a84:	40021800 	.word	0x40021800
 8006a88:	0802da9c 	.word	0x0802da9c
 8006a8c:	20002688 	.word	0x20002688
 8006a90:	20000780 	.word	0x20000780
 8006a94:	200033f0 	.word	0x200033f0
 8006a98:	0802d67c 	.word	0x0802d67c
 8006a9c:	0802d6a8 	.word	0x0802d6a8

08006aa0 <initpga>:
int initpga() {
 8006aa0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006aa2:	2201      	movs	r2, #1
int initpga() {
 8006aa4:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	4826      	ldr	r0, [pc, #152]	; (8006b44 <initpga+0xa4>)
 8006aaa:	f006 f9ef 	bl	800ce8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	4824      	ldr	r0, [pc, #144]	; (8006b44 <initpga+0xa4>)
 8006ab4:	f006 f9ea 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(50);
 8006ab8:	2032      	movs	r0, #50	; 0x32
 8006aba:	f00f fdcd 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8006abe:	2201      	movs	r2, #1
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	4820      	ldr	r0, [pc, #128]	; (8006b44 <initpga+0xa4>)
 8006ac4:	f006 f9e2 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 8006ac8:	2005      	movs	r0, #5
 8006aca:	f00f fdc5 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2104      	movs	r1, #4
 8006ad2:	481c      	ldr	r0, [pc, #112]	; (8006b44 <initpga+0xa4>)
 8006ad4:	f006 f9da 	bl	800ce8c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f8ad 0004 	strh.w	r0, [sp, #4]
 8006ae4:	a901      	add	r1, sp, #4
 8006ae6:	4818      	ldr	r0, [pc, #96]	; (8006b48 <initpga+0xa8>)
 8006ae8:	f009 f9d6 	bl	800fe98 <HAL_SPI_Transmit>
 8006aec:	4604      	mov	r4, r0
 8006aee:	bb08      	cbnz	r0, 8006b34 <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8006af0:	2104      	movs	r1, #4
 8006af2:	2201      	movs	r2, #1
 8006af4:	4813      	ldr	r0, [pc, #76]	; (8006b44 <initpga+0xa4>)
 8006af6:	f006 f9c9 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(5);
 8006afa:	2005      	movs	r0, #5
 8006afc:	f00f fdac 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8006b00:	4622      	mov	r2, r4
 8006b02:	2104      	movs	r1, #4
 8006b04:	480f      	ldr	r0, [pc, #60]	; (8006b44 <initpga+0xa4>)
 8006b06:	f006 f9c1 	bl	800ce8c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006b0a:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8006b0e:	2005      	movs	r0, #5
 8006b10:	f00f fda2 	bl	8016658 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8006b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b18:	2201      	movs	r2, #1
 8006b1a:	a901      	add	r1, sp, #4
 8006b1c:	480a      	ldr	r0, [pc, #40]	; (8006b48 <initpga+0xa8>)
 8006b1e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8006b22:	f009 f9b9 	bl	800fe98 <HAL_SPI_Transmit>
 8006b26:	4604      	mov	r4, r0
 8006b28:	b920      	cbnz	r0, 8006b34 <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8006b2a:	f7ff ff45 	bl	80069b8 <setpgagain>
	return (0);
 8006b2e:	4620      	mov	r0, r4
}
 8006b30:	b002      	add	sp, #8
 8006b32:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8006b34:	4621      	mov	r1, r4
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <initpga+0xac>)
 8006b38:	f01f fe0c 	bl	8026754 <iprintf>
		return (1);
 8006b3c:	2001      	movs	r0, #1
}
 8006b3e:	b002      	add	sp, #8
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	bf00      	nop
 8006b44:	40021800 	.word	0x40021800
 8006b48:	20002688 	.word	0x20002688
 8006b4c:	0802d6c4 	.word	0x0802d6c4

08006b50 <bumppga>:
int bumppga(int i) {
 8006b50:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8006b52:	4d1f      	ldr	r5, [pc, #124]	; (8006bd0 <bumppga+0x80>)
int bumppga(int i) {
 8006b54:	b083      	sub	sp, #12
 8006b56:	4604      	mov	r4, r0
	gain = pgagain;
 8006b58:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006b5c:	b28b      	uxth	r3, r1
	gain = pgagain;
 8006b5e:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8006b60:	2b09      	cmp	r3, #9
 8006b62:	d827      	bhi.n	8006bb4 <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006b64:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <bumppga+0x84>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b0b      	cmp	r3, #11
 8006b6a:	d00c      	beq.n	8006b86 <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006b6c:	2c00      	cmp	r4, #0
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	da01      	bge.n	8006b76 <bumppga+0x26>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd04      	ble.n	8006b80 <bumppga+0x30>
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	dd12      	ble.n	8006ba2 <bumppga+0x52>
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	dd10      	ble.n	8006ba2 <bumppga+0x52>
	return (0);
 8006b80:	2000      	movs	r0, #0
}
 8006b82:	b003      	add	sp, #12
 8006b84:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8006b86:	2907      	cmp	r1, #7
 8006b88:	dd01      	ble.n	8006b8e <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8006b8a:	2307      	movs	r3, #7
 8006b8c:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8006b8e:	2c00      	cmp	r4, #0
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	da01      	bge.n	8006b98 <bumppga+0x48>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	ddf3      	ble.n	8006b80 <bumppga+0x30>
 8006b98:	9b01      	ldr	r3, [sp, #4]
 8006b9a:	2b06      	cmp	r3, #6
 8006b9c:	dd01      	ble.n	8006ba2 <bumppga+0x52>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	dcee      	bgt.n	8006b80 <bumppga+0x30>
			gain = gain + i;
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	4423      	add	r3, r4
 8006ba6:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8006ba8:	9801      	ldr	r0, [sp, #4]
 8006baa:	f7ff ff05 	bl	80069b8 <setpgagain>
			return (i);
 8006bae:	4620      	mov	r0, r4
}
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8006bb4:	4808      	ldr	r0, [pc, #32]	; (8006bd8 <bumppga+0x88>)
 8006bb6:	f01f fdcd 	bl	8026754 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <bumppga+0x84>)
		pgagain = 0;
 8006bbc:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006bbe:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8006bc0:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8006bc2:	2b0b      	cmp	r3, #11
 8006bc4:	d0e3      	beq.n	8006b8e <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	dbd2      	blt.n	8006b72 <bumppga+0x22>
 8006bcc:	e7d3      	b.n	8006b76 <bumppga+0x26>
 8006bce:	bf00      	nop
 8006bd0:	200033f0 	.word	0x200033f0
 8006bd4:	20002160 	.word	0x20002160
 8006bd8:	0802d6e0 	.word	0x0802d6e0

08006bdc <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8006bdc:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006bde:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8006be0:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006be2:	2100      	movs	r1, #0
 8006be4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006be8:	f88d 000c 	strb.w	r0, [sp, #12]
 8006bec:	2302      	movs	r3, #2
 8006bee:	f88d 100d 	strb.w	r1, [sp, #13]
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	21c0      	movs	r1, #192	; 0xc0
 8006bf6:	4809      	ldr	r0, [pc, #36]	; (8006c1c <getpressure115+0x40>)
 8006bf8:	9400      	str	r4, [sp, #0]
 8006bfa:	f006 fc4d 	bl	800d498 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006bfe:	b928      	cbnz	r0, 8006c0c <getpressure115+0x30>
 8006c00:	f7ff fd6a 	bl	80066d8 <getpressure115.part.0>
 8006c04:	4604      	mov	r4, r0
}
 8006c06:	4620      	mov	r0, r4
 8006c08:	b004      	add	sp, #16
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006c0e:	4804      	ldr	r0, [pc, #16]	; (8006c20 <getpressure115+0x44>)
 8006c10:	f01f fda0 	bl	8026754 <iprintf>
}
 8006c14:	4620      	mov	r0, r4
 8006c16:	b004      	add	sp, #16
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20002584 	.word	0x20002584
 8006c20:	0802d718 	.word	0x0802d718

08006c24 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8006c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8006c2a:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006c2e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006c32:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8006c36:	ac06      	add	r4, sp, #24
 8006c38:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006c3c:	4f36      	ldr	r7, [pc, #216]	; (8006d18 <initpressure115+0xf4>)
 8006c3e:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8006c42:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8006c46:	eb09 0204 	add.w	r2, r9, r4
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	9400      	str	r4, [sp, #0]
 8006c4e:	21c0      	movs	r1, #192	; 0xc0
 8006c50:	b292      	uxth	r2, r2
 8006c52:	4638      	mov	r0, r7
 8006c54:	441c      	add	r4, r3
 8006c56:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8006c5a:	f006 fdb1 	bl	800d7c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006c5e:	4605      	mov	r5, r0
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d141      	bne.n	8006ce8 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8006c64:	45a2      	cmp	sl, r4
 8006c66:	d1ee      	bne.n	8006c46 <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8006c68:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006c6c:	2b5a      	cmp	r3, #90	; 0x5a
 8006c6e:	d04a      	beq.n	8006d06 <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8006c70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c74:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006c78:	badb      	revsh	r3, r3
 8006c7a:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8006c7e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006c82:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8006c84:	109b      	asrs	r3, r3, #2
 8006c86:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8006c88:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8006c8a:	ee06 2a10 	vmov	s12, r2
 8006c8e:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8006c92:	ee07 3a10 	vmov	s14, r3
 8006c96:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8006c9a:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8006c9c:	ee05 1a10 	vmov	s10, r1
 8006ca0:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006ca4:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8006ca6:	ee04 0a10 	vmov	s8, r0
 8006caa:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8006cae:	4b1c      	ldr	r3, [pc, #112]	; (8006d20 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8006cb0:	481c      	ldr	r0, [pc, #112]	; (8006d24 <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8006cb2:	491d      	ldr	r1, [pc, #116]	; (8006d28 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006cb4:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8006cb8:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006cbc:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8006cbe:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8006cc2:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8006cc6:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8006cca:	f88d 2014 	strb.w	r2, [sp, #20]
 8006cce:	2302      	movs	r3, #2
 8006cd0:	aa05      	add	r2, sp, #20
 8006cd2:	21c0      	movs	r1, #192	; 0xc0
 8006cd4:	4810      	ldr	r0, [pc, #64]	; (8006d18 <initpressure115+0xf4>)
 8006cd6:	f006 fbdf 	bl	800d498 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006cda:	b968      	cbnz	r0, 8006cf8 <initpressure115+0xd4>
 8006cdc:	f7ff fcfc 	bl	80066d8 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	b008      	add	sp, #32
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4810      	ldr	r0, [pc, #64]	; (8006d2c <initpressure115+0x108>)
 8006cec:	f01f fd32 	bl	8026754 <iprintf>
}
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	b008      	add	sp, #32
 8006cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <initpressure115+0x10c>)
 8006cfa:	f01f fd2b 	bl	8026754 <iprintf>
}
 8006cfe:	4628      	mov	r0, r5
 8006d00:	b008      	add	sp, #32
 8006d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8006d06:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8006d08:	480a      	ldr	r0, [pc, #40]	; (8006d34 <initpressure115+0x110>)
 8006d0a:	f01f fd23 	bl	8026754 <iprintf>
}
 8006d0e:	4628      	mov	r0, r5
 8006d10:	b008      	add	sp, #32
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	bf00      	nop
 8006d18:	20002584 	.word	0x20002584
 8006d1c:	20003378 	.word	0x20003378
 8006d20:	20003358 	.word	0x20003358
 8006d24:	20003360 	.word	0x20003360
 8006d28:	20003368 	.word	0x20003368
 8006d2c:	0802d73c 	.word	0x0802d73c
 8006d30:	0802d718 	.word	0x0802d718
 8006d34:	0802d76c 	.word	0x0802d76c

08006d38 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8006d3e:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8006d40:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d42:	4f46      	ldr	r7, [pc, #280]	; (8006e5c <getpressure3115+0x124>)
 8006d44:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006d46:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8006e7c <getpressure3115+0x144>
	data[0] = 0x55;
 8006d4a:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8006d4e:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8006d54:	f00f fc80 	bl	8016658 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d58:	2301      	movs	r3, #1
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	21c0      	movs	r1, #192	; 0xc0
 8006d5e:	4638      	mov	r0, r7
 8006d60:	9600      	str	r6, [sp, #0]
 8006d62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d66:	f006 fd2b 	bl	800d7c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d163      	bne.n	8006e38 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8006d70:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8006d74:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8006d76:	071b      	lsls	r3, r3, #28
 8006d78:	d401      	bmi.n	8006d7e <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8006d7a:	2d04      	cmp	r5, #4
 8006d7c:	d1e7      	bne.n	8006d4e <getpressure3115+0x16>
 8006d7e:	2501      	movs	r5, #1
 8006d80:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d82:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8006d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8006e5c <getpressure3115+0x124>
 8006d8a:	46a9      	mov	r9, r5
 8006d8c:	b2aa      	uxth	r2, r5
 8006d8e:	2301      	movs	r3, #1
 8006d90:	21c0      	movs	r1, #192	; 0xc0
 8006d92:	4640      	mov	r0, r8
 8006d94:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8006d96:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8006d98:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8006d9c:	f006 fd10 	bl	800d7c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8006da0:	4604      	mov	r4, r0
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d152      	bne.n	8006e4c <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8006da6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8006daa:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8006dac:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8006db0:	d1ec      	bne.n	8006d8c <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006db2:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8006db6:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006dba:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006dbe:	0209      	lsls	r1, r1, #8
 8006dc0:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8006dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dcc:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006dd0:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8006dd2:	4923      	ldr	r1, [pc, #140]	; (8006e60 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006dd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006dd8:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006dda:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8006ddc:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8006dde:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006de0:	9805      	ldr	r0, [sp, #20]
 8006de2:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8006de4:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8006de6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006dee:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8006df2:	9a04      	ldr	r2, [sp, #16]
 8006df4:	fba3 0202 	umull	r0, r2, r3, r2
 8006df8:	0a12      	lsrs	r2, r2, #8
 8006dfa:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006dfc:	9a04      	ldr	r2, [sp, #16]
 8006dfe:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006e02:	4819      	ldr	r0, [pc, #100]	; (8006e68 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8006e0a:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8006e0c:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8006e10:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8006e12:	9b06      	ldr	r3, [sp, #24]
 8006e14:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006e16:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8006e18:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8006e1a:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8006e1c:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8006e1e:	0912      	lsrs	r2, r2, #4
 8006e20:	4813      	ldr	r0, [pc, #76]	; (8006e70 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8006e22:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8006e26:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8006e28:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <getpressure3115+0x13c>)
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	6013      	str	r3, [r2, #0]
}
 8006e32:	b00c      	add	sp, #48	; 0x30
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8006e38:	4601      	mov	r1, r0
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f01f fc8a 	bl	8026754 <iprintf>
			if (trys == 3)
 8006e40:	2d03      	cmp	r5, #3
 8006e42:	d195      	bne.n	8006d70 <getpressure3115+0x38>
}
 8006e44:	4620      	mov	r0, r4
 8006e46:	b00c      	add	sp, #48	; 0x30
 8006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	480a      	ldr	r0, [pc, #40]	; (8006e78 <getpressure3115+0x140>)
 8006e50:	f01f fc80 	bl	8026754 <iprintf>
}
 8006e54:	4620      	mov	r0, r4
 8006e56:	b00c      	add	sp, #48	; 0x30
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	20002584 	.word	0x20002584
 8006e60:	20003014 	.word	0x20003014
 8006e64:	10624dd3 	.word	0x10624dd3
 8006e68:	200033f4 	.word	0x200033f4
 8006e6c:	200033f8 	.word	0x200033f8
 8006e70:	20003400 	.word	0x20003400
 8006e74:	20003404 	.word	0x20003404
 8006e78:	0802d7bc 	.word	0x0802d7bc
 8006e7c:	0802d794 	.word	0x0802d794

08006e80 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8006e84:	2501      	movs	r5, #1
 8006e86:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006e8a:	220c      	movs	r2, #12
 8006e8c:	a908      	add	r1, sp, #32
 8006e8e:	462b      	mov	r3, r5
 8006e90:	4832      	ldr	r0, [pc, #200]	; (8006f5c <initpressure3115+0xdc>)
 8006e92:	9100      	str	r1, [sp, #0]
 8006e94:	21c0      	movs	r1, #192	; 0xc0
 8006e96:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006e9a:	f006 fc91 	bl	800d7c0 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d145      	bne.n	8006f2e <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8006ea2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006ea6:	2bc4      	cmp	r3, #196	; 0xc4
 8006ea8:	d003      	beq.n	8006eb2 <initpressure3115+0x32>
		return (HAL_ERROR);
 8006eaa:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8006eac:	4620      	mov	r0, r4
 8006eae:	b00b      	add	sp, #44	; 0x2c
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8006eb2:	4f2b      	ldr	r7, [pc, #172]	; (8006f60 <initpressure3115+0xe0>)
 8006eb4:	aa05      	add	r2, sp, #20
 8006eb6:	21c0      	movs	r1, #192	; 0xc0
 8006eb8:	4828      	ldr	r0, [pc, #160]	; (8006f5c <initpressure3115+0xdc>)
 8006eba:	89bb      	ldrh	r3, [r7, #12]
 8006ebc:	9600      	str	r6, [sp, #0]
 8006ebe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	f006 fae8 	bl	800d498 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d136      	bne.n	8006f3c <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8006ece:	8a3b      	ldrh	r3, [r7, #16]
 8006ed0:	aa06      	add	r2, sp, #24
 8006ed2:	21c0      	movs	r1, #192	; 0xc0
 8006ed4:	4821      	ldr	r0, [pc, #132]	; (8006f5c <initpressure3115+0xdc>)
 8006ed6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006eda:	2302      	movs	r3, #2
 8006edc:	9600      	str	r6, [sp, #0]
 8006ede:	f006 fadb 	bl	800d498 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	bb70      	cbnz	r0, 8006f44 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8006ee6:	8aba      	ldrh	r2, [r7, #20]
 8006ee8:	2302      	movs	r3, #2
 8006eea:	21c0      	movs	r1, #192	; 0xc0
 8006eec:	481b      	ldr	r0, [pc, #108]	; (8006f5c <initpressure3115+0xdc>)
 8006eee:	f8ad 201c 	strh.w	r2, [sp, #28]
 8006ef2:	aa07      	add	r2, sp, #28
 8006ef4:	9600      	str	r6, [sp, #0]
 8006ef6:	f006 facf 	bl	800d498 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8006efa:	4604      	mov	r4, r0
 8006efc:	bb50      	cbnz	r0, 8006f54 <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006efe:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8006f00:	2064      	movs	r0, #100	; 0x64
 8006f02:	f00f fba9 	bl	8016658 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8006f06:	462b      	mov	r3, r5
 8006f08:	9400      	str	r4, [sp, #0]
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	21c0      	movs	r1, #192	; 0xc0
 8006f0e:	4813      	ldr	r0, [pc, #76]	; (8006f5c <initpressure3115+0xdc>)
 8006f10:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006f14:	f006 fc54 	bl	800d7c0 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8006f18:	4604      	mov	r4, r0
 8006f1a:	b9b8      	cbnz	r0, 8006f4c <initpressure3115+0xcc>
	result = getpressure3115();
 8006f1c:	f7ff ff0c 	bl	8006d38 <getpressure3115>
	if (result != HAL_OK) {
 8006f20:	4604      	mov	r4, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d0c2      	beq.n	8006eac <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8006f26:	480f      	ldr	r0, [pc, #60]	; (8006f64 <initpressure3115+0xe4>)
 8006f28:	f01f fc14 	bl	8026754 <iprintf>
 8006f2c:	e7be      	b.n	8006eac <initpressure3115+0x2c>
 8006f2e:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8006f30:	480d      	ldr	r0, [pc, #52]	; (8006f68 <initpressure3115+0xe8>)
 8006f32:	f01f fc0f 	bl	8026754 <iprintf>
}
 8006f36:	4620      	mov	r0, r4
 8006f38:	b00b      	add	sp, #44	; 0x2c
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8006f3c:	480b      	ldr	r0, [pc, #44]	; (8006f6c <initpressure3115+0xec>)
 8006f3e:	f01f fc09 	bl	8026754 <iprintf>
		return (result);
 8006f42:	e7b3      	b.n	8006eac <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8006f44:	480a      	ldr	r0, [pc, #40]	; (8006f70 <initpressure3115+0xf0>)
 8006f46:	f01f fc05 	bl	8026754 <iprintf>
		return (result);
 8006f4a:	e7af      	b.n	8006eac <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8006f4c:	4809      	ldr	r0, [pc, #36]	; (8006f74 <initpressure3115+0xf4>)
 8006f4e:	f01f fc01 	bl	8026754 <iprintf>
		return (result);
 8006f52:	e7ab      	b.n	8006eac <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8006f54:	4808      	ldr	r0, [pc, #32]	; (8006f78 <initpressure3115+0xf8>)
 8006f56:	f01f fbfd 	bl	8026754 <iprintf>
		return (result);
 8006f5a:	e7a7      	b.n	8006eac <initpressure3115+0x2c>
 8006f5c:	20002584 	.word	0x20002584
 8006f60:	0802a998 	.word	0x0802a998
 8006f64:	0802d854 	.word	0x0802d854
 8006f68:	0802d6fc 	.word	0x0802d6fc
 8006f6c:	0802d7e4 	.word	0x0802d7e4
 8006f70:	0802d800 	.word	0x0802d800
 8006f74:	0802d838 	.word	0x0802d838
 8006f78:	0802d81c 	.word	0x0802d81c

08006f7c <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8006f80:	4820      	ldr	r0, [pc, #128]	; (8007004 <init_esp+0x88>)
 8006f82:	f01f fc83 	bl	802688c <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8006f86:	2201      	movs	r2, #1
 8006f88:	491f      	ldr	r1, [pc, #124]	; (8007008 <init_esp+0x8c>)
 8006f8a:	4820      	ldr	r0, [pc, #128]	; (800700c <init_esp+0x90>)
 8006f8c:	f00d fb08 	bl	80145a0 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8006f90:	bb98      	cbnz	r0, 8006ffa <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006f92:	2200      	movs	r2, #0
 8006f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f98:	481d      	ldr	r0, [pc, #116]	; (8007010 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006f9a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8006f9e:	f005 ff75 	bl	800ce8c <HAL_GPIO_WritePin>
	osDelay(20);
 8006fa2:	4c1c      	ldr	r4, [pc, #112]	; (8007014 <init_esp+0x98>)
 8006fa4:	2014      	movs	r0, #20
 8006fa6:	4d1c      	ldr	r5, [pc, #112]	; (8007018 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8006fa8:	4e1c      	ldr	r6, [pc, #112]	; (800701c <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8006faa:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8006fae:	f00f fb53 	bl	8016658 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fb8:	4815      	ldr	r0, [pc, #84]	; (8007010 <init_esp+0x94>)
 8006fba:	f005 ff67 	bl	800ce8c <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	e006      	b.n	8006fd0 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8006fc2:	5cf0      	ldrb	r0, [r6, r3]
 8006fc4:	6021      	str	r1, [r4, #0]
 8006fc6:	f01f fbdd 	bl	8026784 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d810      	bhi.n	8006ff2 <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8006fd0:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8006fd2:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d1f4      	bne.n	8006fc2 <init_esp+0x46>
		osDelay(1);
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f00f fb3d 	bl	8016658 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8006fde:	3f01      	subs	r7, #1
 8006fe0:	d1ed      	bne.n	8006fbe <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8006fe2:	20c8      	movs	r0, #200	; 0xc8
 8006fe4:	f00f fb38 	bl	8016658 <osDelay>
	printf("\n");
 8006fe8:	200a      	movs	r0, #10
}
 8006fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8006fee:	f01f bbc9 	b.w	8026784 <putchar>
			espoutindex = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c4 8000 	str.w	r8, [r4]
 8006ff8:	e7ea      	b.n	8006fd0 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8006ffa:	4809      	ldr	r0, [pc, #36]	; (8007020 <init_esp+0xa4>)
 8006ffc:	f01f fc46 	bl	802688c <puts>
 8007000:	e7c7      	b.n	8006f92 <init_esp+0x16>
 8007002:	bf00      	nop
 8007004:	0802d874 	.word	0x0802d874
 8007008:	20003380 	.word	0x20003380
 800700c:	20002c24 	.word	0x20002c24
 8007010:	40021000 	.word	0x40021000
 8007014:	20003384 	.word	0x20003384
 8007018:	200033e8 	.word	0x200033e8
 800701c:	20003388 	.word	0x20003388
 8007020:	0802d888 	.word	0x0802d888

08007024 <uart6_rxdone>:
uart6_rxdone() {
 8007024:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8007026:	4c0b      	ldr	r4, [pc, #44]	; (8007054 <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <uart6_rxdone+0x34>)
	i = esprxindex;
 800702a:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 800702c:	7819      	ldrb	r1, [r3, #0]
 800702e:	1c6b      	adds	r3, r5, #1
 8007030:	4a0a      	ldr	r2, [pc, #40]	; (800705c <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8007032:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8007034:	5551      	strb	r1, [r2, r5]
 8007036:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8007038:	d902      	bls.n	8007040 <uart6_rxdone+0x1c>
		esprxindex = 0;
 800703a:	2200      	movs	r2, #0
 800703c:	4613      	mov	r3, r2
 800703e:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8007040:	4a07      	ldr	r2, [pc, #28]	; (8007060 <uart6_rxdone+0x3c>)
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d000      	beq.n	800704a <uart6_rxdone+0x26>
}
 8007048:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 800704a:	4806      	ldr	r0, [pc, #24]	; (8007064 <uart6_rxdone+0x40>)
 800704c:	f01f fc1e 	bl	802688c <puts>
		esprxindex = i;
 8007050:	6025      	str	r5, [r4, #0]
}
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	200033e8 	.word	0x200033e8
 8007058:	20003380 	.word	0x20003380
 800705c:	20003388 	.word	0x20003388
 8007060:	20003384 	.word	0x20003384
 8007064:	0802d8a0 	.word	0x0802d8a0

08007068 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8007068:	b510      	push	{r4, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 800706e:	ac02      	add	r4, sp, #8
 8007070:	4620      	mov	r0, r4
 8007072:	f01f fdea 	bl	8026c4a <stpcpy>
	strcat(txbuf, "\r\n");
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <esp_cmd+0x44>)
 8007078:	8819      	ldrh	r1, [r3, #0]
 800707a:	789a      	ldrb	r2, [r3, #2]
 800707c:	1b03      	subs	r3, r0, r4
 800707e:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8007080:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8007082:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8007084:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8007086:	480a      	ldr	r0, [pc, #40]	; (80070b0 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8007088:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 800708a:	f01f fb63 	bl	8026754 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 800708e:	9a01      	ldr	r2, [sp, #4]
 8007090:	4621      	mov	r1, r4
 8007092:	4808      	ldr	r0, [pc, #32]	; (80070b4 <esp_cmd+0x4c>)
 8007094:	b292      	uxth	r2, r2
 8007096:	f00c f843 	bl	8013120 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 800709a:	b908      	cbnz	r0, 80070a0 <esp_cmd+0x38>
}
 800709c:	b006      	add	sp, #24
 800709e:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 80070a0:	4601      	mov	r1, r0
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <esp_cmd+0x50>)
 80070a4:	f01f fb56 	bl	8026754 <iprintf>
}
 80070a8:	b006      	add	sp, #24
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	0802b570 	.word	0x0802b570
 80070b0:	0802d8bc 	.word	0x0802d8bc
 80070b4:	20002c24 	.word	0x20002c24
 80070b8:	0802d8d0 	.word	0x0802d8d0

080070bc <test_esp>:
void test_esp() {
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 80070c0:	4813      	ldr	r0, [pc, #76]	; (8007110 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 80070c2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 80070c6:	f01f fbe1 	bl	802688c <puts>
	osDelay(200);
 80070ca:	4c12      	ldr	r4, [pc, #72]	; (8007114 <test_esp+0x58>)
 80070cc:	20c8      	movs	r0, #200	; 0xc8
 80070ce:	4d12      	ldr	r5, [pc, #72]	; (8007118 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 80070d0:	4e12      	ldr	r6, [pc, #72]	; (800711c <test_esp+0x60>)
			espoutindex = 0;
 80070d2:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 80070d6:	f00f fabf 	bl	8016658 <osDelay>
	esp_cmd(getstatus);	// send the command
 80070da:	4811      	ldr	r0, [pc, #68]	; (8007120 <test_esp+0x64>)
 80070dc:	f7ff ffc4 	bl	8007068 <esp_cmd>
	while (espoutindex != esprxindex) {
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	e006      	b.n	80070f2 <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 80070e4:	5cf0      	ldrb	r0, [r6, r3]
 80070e6:	6021      	str	r1, [r4, #0]
 80070e8:	f01f fb4c 	bl	8026784 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	2b60      	cmp	r3, #96	; 0x60
 80070f0:	d80a      	bhi.n	8007108 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 80070f2:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 80070f4:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d1f4      	bne.n	80070e4 <test_esp+0x28>
		osDelay(1);
 80070fa:	2001      	movs	r0, #1
 80070fc:	f00f faac 	bl	8016658 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8007100:	3f01      	subs	r7, #1
 8007102:	d1ed      	bne.n	80070e0 <test_esp+0x24>
}
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	f8c4 8000 	str.w	r8, [r4]
 800710e:	e7f0      	b.n	80070f2 <test_esp+0x36>
 8007110:	0802d8f0 	.word	0x0802d8f0
 8007114:	20003384 	.word	0x20003384
 8007118:	200033e8 	.word	0x200033e8
 800711c:	20003388 	.word	0x20003388
 8007120:	20000284 	.word	0x20000284

08007124 <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 8007124:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 8007126:	4818      	ldr	r0, [pc, #96]	; (8007188 <init_ds2485+0x64>)
void init_ds2485(void) {
 8007128:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 800712a:	f01f fbaf 	bl	802688c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 800712e:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8007134:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 8007136:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 800713a:	2303      	movs	r3, #3
 800713c:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 800713e:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007142:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 8007144:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8007148:	aa02      	add	r2, sp, #8
 800714a:	4810      	ldr	r0, [pc, #64]	; (800718c <init_ds2485+0x68>)
 800714c:	f006 f9a4 	bl	800d498 <HAL_I2C_Master_Transmit>
 8007150:	b9a8      	cbnz	r0, 800717e <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8007152:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8007154:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8007158:	f00f fa7e 	bl	8016658 <osDelay>
		data[i] = 0xA5 + i;
 800715c:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800715e:	2181      	movs	r1, #129	; 0x81
 8007160:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 8007162:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8007166:	aa02      	add	r2, sp, #8
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <init_ds2485+0x68>)
 800716a:	9400      	str	r4, [sp, #0]
 800716c:	f006 fa5c 	bl	800d628 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8007170:	4601      	mov	r1, r0
 8007172:	b110      	cbz	r0, 800717a <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8007174:	4806      	ldr	r0, [pc, #24]	; (8007190 <init_ds2485+0x6c>)
 8007176:	f01f faed 	bl	8026754 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 800717a:	b006      	add	sp, #24
 800717c:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800717e:	4601      	mov	r1, r0
 8007180:	4803      	ldr	r0, [pc, #12]	; (8007190 <init_ds2485+0x6c>)
 8007182:	f01f fae7 	bl	8026754 <iprintf>
 8007186:	e7e4      	b.n	8007152 <init_ds2485+0x2e>
 8007188:	0802d918 	.word	0x0802d918
 800718c:	20002584 	.word	0x20002584
 8007190:	0802d924 	.word	0x0802d924

08007194 <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 800719a:	4821      	ldr	r0, [pc, #132]	; (8007220 <readp_ds2485+0x8c>)
 800719c:	f01f fb76 	bl	802688c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 80071a0:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80071a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 80071a6:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 80071a8:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 80071ac:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 80071b2:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80071b6:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 80071b8:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80071bc:	aa03      	add	r2, sp, #12
 80071be:	4819      	ldr	r0, [pc, #100]	; (8007224 <readp_ds2485+0x90>)
 80071c0:	f006 f96a 	bl	800d498 <HAL_I2C_Master_Transmit>
 80071c4:	bb18      	cbnz	r0, 800720e <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 80071c6:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80071c8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 80071cc:	f00f fa44 	bl	8016658 <osDelay>
		data[i] = 0x5A + i;
 80071d0:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80071d2:	b2a3      	uxth	r3, r4
 80071d4:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 80071d6:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80071da:	2181      	movs	r1, #129	; 0x81
 80071dc:	4811      	ldr	r0, [pc, #68]	; (8007224 <readp_ds2485+0x90>)
 80071de:	9500      	str	r5, [sp, #0]
 80071e0:	f006 fa22 	bl	800d628 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 80071e4:	b9b8      	cbnz	r0, 8007216 <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 80071e6:	4810      	ldr	r0, [pc, #64]	; (8007228 <readp_ds2485+0x94>)
 80071e8:	f10d 040b 	add.w	r4, sp, #11
 80071ec:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 80071f0:	4d0e      	ldr	r5, [pc, #56]	; (800722c <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 80071f2:	f01f faaf 	bl	8026754 <iprintf>
		printf("0x%02x ", data[i]);
 80071f6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80071fa:	4628      	mov	r0, r5
 80071fc:	f01f faaa 	bl	8026754 <iprintf>
	for (i = 0; i < 8; i++) {
 8007200:	42b4      	cmp	r4, r6
 8007202:	d1f8      	bne.n	80071f6 <readp_ds2485+0x62>
	}
	printf("\n");
 8007204:	200a      	movs	r0, #10
 8007206:	f01f fabd 	bl	8026784 <putchar>
}
 800720a:	b006      	add	sp, #24
 800720c:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 800720e:	4808      	ldr	r0, [pc, #32]	; (8007230 <readp_ds2485+0x9c>)
 8007210:	f01f faa0 	bl	8026754 <iprintf>
 8007214:	e7d7      	b.n	80071c6 <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 8007216:	4601      	mov	r1, r0
 8007218:	4806      	ldr	r0, [pc, #24]	; (8007234 <readp_ds2485+0xa0>)
 800721a:	f01f fa9b 	bl	8026754 <iprintf>
 800721e:	e7e2      	b.n	80071e6 <readp_ds2485+0x52>
 8007220:	0802d948 	.word	0x0802d948
 8007224:	20002584 	.word	0x20002584
 8007228:	0802d9a8 	.word	0x0802d9a8
 800722c:	0802d9d0 	.word	0x0802d9d0
 8007230:	0802d960 	.word	0x0802d960
 8007234:	0802d984 	.word	0x0802d984

08007238 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8007238:	b530      	push	{r4, r5, lr}
	int i, j, k;

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 800723a:	4c40      	ldr	r4, [pc, #256]	; (800733c <initsplat+0x104>)
void initsplat(void) {
 800723c:	b083      	sub	sp, #12
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	2b0b      	cmp	r3, #11
 8007242:	d062      	beq.n	800730a <initsplat+0xd2>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 8007244:	483e      	ldr	r0, [pc, #248]	; (8007340 <initsplat+0x108>)
 8007246:	f01f fb21 	bl	802688c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 800724a:	4d3e      	ldr	r5, [pc, #248]	; (8007344 <initsplat+0x10c>)
	initpga();
 800724c:	f7ff fc28 	bl	8006aa0 <initpga>
	osDelay(500);
 8007250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007254:	f00f fa00 	bl	8016658 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8007258:	483b      	ldr	r0, [pc, #236]	; (8007348 <initsplat+0x110>)
 800725a:	f01f fa7b 	bl	8026754 <iprintf>
	psensor = PNONE;
 800725e:	2300      	movs	r3, #0
 8007260:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8007262:	f7ff fe0d 	bl	8006e80 <initpressure3115>
 8007266:	b9d8      	cbnz	r0, 80072a0 <initsplat+0x68>
		printf("MPL3115A2 pressure sensor present\n\r");
 8007268:	4838      	ldr	r0, [pc, #224]	; (800734c <initsplat+0x114>)
 800726a:	f01f fa73 	bl	8026754 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 800726e:	4a38      	ldr	r2, [pc, #224]	; (8007350 <initsplat+0x118>)
		psensor = MPL3115A2;
 8007270:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007272:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8007276:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8007278:	f043 0310 	orr.w	r3, r3, #16
 800727c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8007280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007284:	f00f f9e8 	bl	8016658 <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	2b16      	cmp	r3, #22
 800728c:	d01e      	beq.n	80072cc <initsplat+0x94>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800728e:	2200      	movs	r2, #0
 8007290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007294:	482f      	ldr	r0, [pc, #188]	; (8007354 <initsplat+0x11c>)
}
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800729c:	f005 bdf6 	b.w	800ce8c <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 80072a0:	f7ff fcc0 	bl	8006c24 <initpressure115>
 80072a4:	bb68      	cbnz	r0, 8007302 <initsplat+0xca>
			printf("MPL115A2 pressure sensor present\n\r");
 80072a6:	482c      	ldr	r0, [pc, #176]	; (8007358 <initsplat+0x120>)
 80072a8:	f01f fa54 	bl	8026754 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 80072ac:	4a28      	ldr	r2, [pc, #160]	; (8007350 <initsplat+0x118>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80072ae:	2101      	movs	r1, #1
	osDelay(500);
 80072b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 80072b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80072b8:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 80072ba:	f043 0308 	orr.w	r3, r3, #8
 80072be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 80072c2:	f00f f9c9 	bl	8016658 <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	2b16      	cmp	r3, #22
 80072ca:	d1e0      	bne.n	800728e <initsplat+0x56>
		huart6.Init.BaudRate = 115200;
 80072cc:	4823      	ldr	r0, [pc, #140]	; (800735c <initsplat+0x124>)
 80072ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80072d2:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 80072d4:	f00c ff74 	bl	80141c0 <HAL_UART_Init>
 80072d8:	bb68      	cbnz	r0, 8007336 <initsplat+0xfe>
	init_ds2485();
 80072da:	f7ff ff23 	bl	8007124 <init_ds2485>
	osDelay(80);
 80072de:	2050      	movs	r0, #80	; 0x50
 80072e0:	f00f f9ba 	bl	8016658 <osDelay>
	readp_ds2485(8);
 80072e4:	2008      	movs	r0, #8
 80072e6:	f7ff ff55 	bl	8007194 <readp_ds2485>
		init_esp();
 80072ea:	f7ff fe47 	bl	8006f7c <init_esp>
		osDelay(500);
 80072ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072f2:	f00f f9b1 	bl	8016658 <osDelay>
		test_esp();
 80072f6:	f7ff fee1 	bl	80070bc <test_esp>
		osDelay(200);
 80072fa:	20c8      	movs	r0, #200	; 0xc8
 80072fc:	f00f f9ac 	bl	8016658 <osDelay>
 8007300:	e7c5      	b.n	800728e <initsplat+0x56>
			printf("NO pressure sensor present\n\r");
 8007302:	4817      	ldr	r0, [pc, #92]	; (8007360 <initsplat+0x128>)
 8007304:	f01f fa26 	bl	8026754 <iprintf>
 8007308:	e7ba      	b.n	8007280 <initsplat+0x48>
		printf("Initsplat: Dual Mux\n\r");
 800730a:	4816      	ldr	r0, [pc, #88]	; (8007364 <initsplat+0x12c>)
 800730c:	f01f fa22 	bl	8026754 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8007310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007314:	2301      	movs	r3, #1
 8007316:	4a14      	ldr	r2, [pc, #80]	; (8007368 <initsplat+0x130>)
 8007318:	9000      	str	r0, [sp, #0]
 800731a:	2188      	movs	r1, #136	; 0x88
 800731c:	4813      	ldr	r0, [pc, #76]	; (800736c <initsplat+0x134>)
 800731e:	f006 f8bb 	bl	800d498 <HAL_I2C_Master_Transmit>
 8007322:	b920      	cbnz	r0, 800732e <initsplat+0xf6>
		osDelay(500);
 8007324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007328:	f00f f996 	bl	8016658 <osDelay>
 800732c:	e78a      	b.n	8007244 <initsplat+0xc>
		printf("I2C HAL returned error 1\n\r");
 800732e:	4810      	ldr	r0, [pc, #64]	; (8007370 <initsplat+0x138>)
 8007330:	f01f fa10 	bl	8026754 <iprintf>
 8007334:	e7f6      	b.n	8007324 <initsplat+0xec>
			Error_Handler();
 8007336:	f7fd fa65 	bl	8004804 <Error_Handler>
 800733a:	e7ce      	b.n	80072da <initsplat+0xa2>
 800733c:	20002160 	.word	0x20002160
 8007340:	0802d9f0 	.word	0x0802d9f0
 8007344:	200033fc 	.word	0x200033fc
 8007348:	0802da14 	.word	0x0802da14
 800734c:	0802da34 	.word	0x0802da34
 8007350:	20003014 	.word	0x20003014
 8007354:	40021000 	.word	0x40021000
 8007358:	0802da58 	.word	0x0802da58
 800735c:	20002c24 	.word	0x20002c24
 8007360:	0802da7c 	.word	0x0802da7c
 8007364:	0802d9d8 	.word	0x0802d9d8
 8007368:	20000290 	.word	0x20000290
 800736c:	20002584 	.word	0x20002584
 8007370:	0802d6fc 	.word	0x0802d6fc

08007374 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007376:	2200      	movs	r2, #0
 8007378:	210f      	movs	r1, #15
 800737a:	f06f 0001 	mvn.w	r0, #1
{
 800737e:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007380:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8007382:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8007384:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007388:	641c      	str	r4, [r3, #64]	; 0x40
 800738a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800738c:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8007390:	9400      	str	r4, [sp, #0]
 8007392:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007394:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007396:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800739a:	645c      	str	r4, [r3, #68]	; 0x44
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80073a6:	f002 fc47 	bl	8009c38 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80073aa:	2200      	movs	r2, #0
 80073ac:	2106      	movs	r1, #6
 80073ae:	2005      	movs	r0, #5
 80073b0:	f002 fc42 	bl	8009c38 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80073b4:	2005      	movs	r0, #5
 80073b6:	f002 fc89 	bl	8009ccc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2106      	movs	r1, #6
 80073be:	2005      	movs	r0, #5
 80073c0:	f002 fc3a 	bl	8009c38 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80073c4:	2005      	movs	r0, #5
 80073c6:	f002 fc81 	bl	8009ccc <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80073ca:	2051      	movs	r0, #81	; 0x51
 80073cc:	2200      	movs	r2, #0
 80073ce:	2106      	movs	r1, #6
 80073d0:	f002 fc32 	bl	8009c38 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80073d4:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073d6:	b002      	add	sp, #8
 80073d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80073dc:	f002 bc76 	b.w	8009ccc <HAL_NVIC_EnableIRQ>
 80073e0:	40023800 	.word	0x40023800

080073e4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80073e4:	4a49      	ldr	r2, [pc, #292]	; (800750c <HAL_ADC_MspInit+0x128>)
 80073e6:	6803      	ldr	r3, [r0, #0]
{
 80073e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80073ea:	4293      	cmp	r3, r2
{
 80073ec:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ee:	f04f 0400 	mov.w	r4, #0
 80073f2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80073f6:	9409      	str	r4, [sp, #36]	; 0x24
 80073f8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80073fc:	d007      	beq.n	800740e <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80073fe:	4a44      	ldr	r2, [pc, #272]	; (8007510 <HAL_ADC_MspInit+0x12c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d045      	beq.n	8007490 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8007404:	4a43      	ldr	r2, [pc, #268]	; (8007514 <HAL_ADC_MspInit+0x130>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d05f      	beq.n	80074ca <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800740a:	b00d      	add	sp, #52	; 0x34
 800740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800740e:	4b42      	ldr	r3, [pc, #264]	; (8007518 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007410:	2703      	movs	r7, #3
 8007412:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007414:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007418:	4840      	ldr	r0, [pc, #256]	; (800751c <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800741a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 800741e:	4e40      	ldr	r6, [pc, #256]	; (8007520 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
 8007422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007424:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007428:	9201      	str	r2, [sp, #4]
 800742a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800743c:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800743e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007440:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007444:	f005 fa76 	bl	800c934 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800744a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800744e:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8007450:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007452:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8007456:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800745c:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800745e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007462:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007464:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007466:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800746a:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800746c:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800746e:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007476:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007478:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800747c:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007480:	f002 feec 	bl	800a25c <HAL_DMA_Init>
 8007484:	2800      	cmp	r0, #0
 8007486:	d13d      	bne.n	8007504 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007488:	63ae      	str	r6, [r5, #56]	; 0x38
 800748a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800748c:	b00d      	add	sp, #52	; 0x34
 800748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007490:	4b21      	ldr	r3, [pc, #132]	; (8007518 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007492:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007494:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007496:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800749e:	645a      	str	r2, [r3, #68]	; 0x44
 80074a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80074a6:	9203      	str	r2, [sp, #12]
 80074a8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074b4:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ba:	4818      	ldr	r0, [pc, #96]	; (800751c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074bc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c2:	f005 fa37 	bl	800c934 <HAL_GPIO_Init>
}
 80074c6:	b00d      	add	sp, #52	; 0x34
 80074c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074cc:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074ce:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 80074d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44
 80074da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074dc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80074e0:	9205      	str	r2, [sp, #20]
 80074e2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80074ee:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f4:	4809      	ldr	r0, [pc, #36]	; (800751c <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074f6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f8:	9306      	str	r3, [sp, #24]
 80074fa:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fc:	f005 fa1a 	bl	800c934 <HAL_GPIO_Init>
}
 8007500:	b00d      	add	sp, #52	; 0x34
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007504:	f7fd f97e 	bl	8004804 <Error_Handler>
 8007508:	e7be      	b.n	8007488 <HAL_ADC_MspInit+0xa4>
 800750a:	bf00      	nop
 800750c:	40012000 	.word	0x40012000
 8007510:	40012100 	.word	0x40012100
 8007514:	40012200 	.word	0x40012200
 8007518:	40023800 	.word	0x40023800
 800751c:	40020000 	.word	0x40020000
 8007520:	20002284 	.word	0x20002284
 8007524:	40026470 	.word	0x40026470

08007528 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <HAL_CRC_MspInit+0x28>)
 800752a:	6802      	ldr	r2, [r0, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d000      	beq.n	8007532 <HAL_CRC_MspInit+0xa>
 8007530:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007532:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800753a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800753c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800754c:	b002      	add	sp, #8
 800754e:	4770      	bx	lr
 8007550:	40023000 	.word	0x40023000

08007554 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8007554:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_DAC_MspInit+0xb0>)
 8007556:	6802      	ldr	r2, [r0, #0]
{
 8007558:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800755a:	429a      	cmp	r2, r3
{
 800755c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800755e:	f04f 0400 	mov.w	r4, #0
 8007562:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007566:	9405      	str	r4, [sp, #20]
 8007568:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 800756c:	d001      	beq.n	8007572 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800756e:	b008      	add	sp, #32
 8007570:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8007572:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007576:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007578:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800757a:	4e23      	ldr	r6, [pc, #140]	; (8007608 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800757c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
 8007584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007586:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800758a:	9201      	str	r2, [sp, #4]
 800758c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007596:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075a0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a2:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a4:	4819      	ldr	r0, [pc, #100]	; (800760c <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075aa:	f005 f9c3 	bl	800c934 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80075ae:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 80075b2:	4a17      	ldr	r2, [pc, #92]	; (8007610 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80075b4:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80075b6:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80075b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 80075bc:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075be:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80075c0:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80075c2:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075c4:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80075c6:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80075c8:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80075ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80075ce:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075d0:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075d2:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80075d4:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80075d6:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80075d8:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80075da:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80075de:	f002 fe3d 	bl	800a25c <HAL_DMA_Init>
 80075e2:	b958      	cbnz	r0, 80075fc <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075e4:	2200      	movs	r2, #0
 80075e6:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80075e8:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075ea:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80075ec:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80075ee:	f002 fb23 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80075f2:	2036      	movs	r0, #54	; 0x36
 80075f4:	f002 fb6a 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 80075f8:	b008      	add	sp, #32
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80075fc:	f7fd f902 	bl	8004804 <Error_Handler>
 8007600:	e7f0      	b.n	80075e4 <HAL_DAC_MspInit+0x90>
 8007602:	bf00      	nop
 8007604:	40007400 	.word	0x40007400
 8007608:	200022e4 	.word	0x200022e4
 800760c:	40020000 	.word	0x40020000
 8007610:	40026088 	.word	0x40026088

08007614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007614:	b530      	push	{r4, r5, lr}
 8007616:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007618:	2100      	movs	r1, #0
{
 800761a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800761c:	2290      	movs	r2, #144	; 0x90
 800761e:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007620:	910b      	str	r1, [sp, #44]	; 0x2c
 8007622:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8007626:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800762a:	f01e f8f5 	bl	8025818 <memset>
  if(hi2c->Instance==I2C1)
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	4a4a      	ldr	r2, [pc, #296]	; (800775c <HAL_I2C_MspInit+0x148>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d007      	beq.n	8007646 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8007636:	4a4a      	ldr	r2, [pc, #296]	; (8007760 <HAL_I2C_MspInit+0x14c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d030      	beq.n	800769e <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 800763c:	4a49      	ldr	r2, [pc, #292]	; (8007764 <HAL_I2C_MspInit+0x150>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d057      	beq.n	80076f2 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007642:	b031      	add	sp, #196	; 0xc4
 8007644:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800764a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800764c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800764e:	f007 fcaf 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007652:	2800      	cmp	r0, #0
 8007654:	d178      	bne.n	8007748 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007656:	4c44      	ldr	r4, [pc, #272]	; (8007768 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007658:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800765c:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800765e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007660:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007662:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	6323      	str	r3, [r4, #48]	; 0x30
 800766a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800766c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007670:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007674:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007676:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007678:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800767a:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767c:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007680:	483a      	ldr	r0, [pc, #232]	; (800776c <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007682:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007684:	f005 f956 	bl	800c934 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800768a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800768e:	6423      	str	r3, [r4, #64]	; 0x40
 8007690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007696:	9302      	str	r3, [sp, #8]
 8007698:	9b02      	ldr	r3, [sp, #8]
}
 800769a:	b031      	add	sp, #196	; 0xc4
 800769c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800769e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076a2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80076a4:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076a6:	f007 fc83 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d14f      	bne.n	800774e <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076ae:	4c2e      	ldr	r4, [pc, #184]	; (8007768 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076b0:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80076b2:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076b4:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076b8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076ba:	f043 0320 	orr.w	r3, r3, #32
 80076be:	6323      	str	r3, [r4, #48]	; 0x30
 80076c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076c2:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076c4:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076c8:	4829      	ldr	r0, [pc, #164]	; (8007770 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80076ce:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80076d6:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076d8:	f005 f92c 	bl	800c934 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80076dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076e2:	6423      	str	r3, [r4, #64]	; 0x40
 80076e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	9b04      	ldr	r3, [sp, #16]
}
 80076ee:	b031      	add	sp, #196	; 0xc4
 80076f0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80076f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076f6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80076f8:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076fa:	f007 fc59 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 80076fe:	bb48      	cbnz	r0, 8007754 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007700:	4c19      	ldr	r4, [pc, #100]	; (8007768 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007702:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007706:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007708:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800770a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800770c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800770e:	f043 0320 	orr.w	r3, r3, #32
 8007712:	6323      	str	r3, [r4, #48]	; 0x30
 8007714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007716:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800771a:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007720:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007722:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007724:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007726:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800772a:	4811      	ldr	r0, [pc, #68]	; (8007770 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800772c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800772e:	f005 f901 	bl	800c934 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007738:	6423      	str	r3, [r4, #64]	; 0x40
 800773a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800773c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007740:	9306      	str	r3, [sp, #24]
 8007742:	9b06      	ldr	r3, [sp, #24]
}
 8007744:	b031      	add	sp, #196	; 0xc4
 8007746:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8007748:	f7fd f85c 	bl	8004804 <Error_Handler>
 800774c:	e783      	b.n	8007656 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800774e:	f7fd f859 	bl	8004804 <Error_Handler>
 8007752:	e7ac      	b.n	80076ae <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8007754:	f7fd f856 	bl	8004804 <Error_Handler>
 8007758:	e7d2      	b.n	8007700 <HAL_I2C_MspInit+0xec>
 800775a:	bf00      	nop
 800775c:	40005400 	.word	0x40005400
 8007760:	40005800 	.word	0x40005800
 8007764:	40006000 	.word	0x40006000
 8007768:	40023800 	.word	0x40023800
 800776c:	40020400 	.word	0x40020400
 8007770:	40021400 	.word	0x40021400

08007774 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <HAL_RNG_MspInit+0x24>)
 8007776:	6802      	ldr	r2, [r0, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d000      	beq.n	800777e <HAL_RNG_MspInit+0xa>
 800777c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800777e:	4b07      	ldr	r3, [pc, #28]	; (800779c <HAL_RNG_MspInit+0x28>)
{
 8007780:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8007782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007788:	635a      	str	r2, [r3, #52]	; 0x34
 800778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007794:	b002      	add	sp, #8
 8007796:	4770      	bx	lr
 8007798:	50060800 	.word	0x50060800
 800779c:	40023800 	.word	0x40023800

080077a0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 80077a0:	4a52      	ldr	r2, [pc, #328]	; (80078ec <HAL_SPI_MspInit+0x14c>)
 80077a2:	6803      	ldr	r3, [r0, #0]
{
 80077a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 80077a6:	4293      	cmp	r3, r2
{
 80077a8:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077aa:	f04f 0400 	mov.w	r4, #0
 80077ae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80077b2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80077b6:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80077b8:	d007      	beq.n	80077ca <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80077ba:	4a4d      	ldr	r2, [pc, #308]	; (80078f0 <HAL_SPI_MspInit+0x150>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d038      	beq.n	8007832 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80077c0:	4a4c      	ldr	r2, [pc, #304]	; (80078f4 <HAL_SPI_MspInit+0x154>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d071      	beq.n	80078aa <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80077c6:	b00f      	add	sp, #60	; 0x3c
 80077c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077ca:	4b4b      	ldr	r3, [pc, #300]	; (80078f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80077ce:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80077d0:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077d4:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077d6:	4849      	ldr	r0, [pc, #292]	; (80078fc <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
 80077de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ea:	f042 0204 	orr.w	r2, r2, #4
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
 80077f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f2:	f002 0204 	and.w	r2, r2, #4
 80077f6:	9202      	str	r2, [sp, #8]
 80077f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007804:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007806:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800780a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800780c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007810:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007812:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007814:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007816:	f005 f88d 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800781a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800781c:	a909      	add	r1, sp, #36	; 0x24
 800781e:	4838      	ldr	r0, [pc, #224]	; (8007900 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007820:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007822:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007824:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007826:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800782a:	f005 f883 	bl	800c934 <HAL_GPIO_Init>
}
 800782e:	b00f      	add	sp, #60	; 0x3c
 8007830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007832:	4b31      	ldr	r3, [pc, #196]	; (80078f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007834:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007836:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007838:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 800783a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800783c:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800783e:	4831      	ldr	r0, [pc, #196]	; (8007904 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
 8007846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007848:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800784c:	9204      	str	r2, [sp, #16]
 800784e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007852:	4332      	orrs	r2, r6
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
 8007856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007858:	4032      	ands	r2, r6
 800785a:	9205      	str	r2, [sp, #20]
 800785c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800785e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007860:	430a      	orrs	r2, r1
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007866:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007868:	400b      	ands	r3, r1
 800786a:	9306      	str	r3, [sp, #24]
 800786c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800786e:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007870:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007874:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007876:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007878:	f005 f85c 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800787c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007880:	a909      	add	r1, sp, #36	; 0x24
 8007882:	481e      	ldr	r0, [pc, #120]	; (80078fc <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800788a:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800788e:	f005 f851 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007892:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007894:	a909      	add	r1, sp, #36	; 0x24
 8007896:	481b      	ldr	r0, [pc, #108]	; (8007904 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007898:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800789a:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800789c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800789e:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a2:	f005 f847 	bl	800c934 <HAL_GPIO_Init>
}
 80078a6:	b00f      	add	sp, #60	; 0x3c
 80078a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ac:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078ae:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b0:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80078b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078b4:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 80078b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
 80078bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80078c2:	9207      	str	r2, [sp, #28]
 80078c4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c8:	f042 0210 	orr.w	r2, r2, #16
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80078ce:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d2:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078d4:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078d8:	480b      	ldr	r0, [pc, #44]	; (8007908 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078da:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078dc:	9308      	str	r3, [sp, #32]
 80078de:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80078e0:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078e4:	f005 f826 	bl	800c934 <HAL_GPIO_Init>
}
 80078e8:	b00f      	add	sp, #60	; 0x3c
 80078ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ec:	40003800 	.word	0x40003800
 80078f0:	40003c00 	.word	0x40003c00
 80078f4:	40013400 	.word	0x40013400
 80078f8:	40023800 	.word	0x40023800
 80078fc:	40020800 	.word	0x40020800
 8007900:	40020c00 	.word	0x40020c00
 8007904:	40020400 	.word	0x40020400
 8007908:	40021000 	.word	0x40021000

0800790c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800790c:	4a73      	ldr	r2, [pc, #460]	; (8007adc <HAL_TIM_Base_MspInit+0x1d0>)
 800790e:	6803      	ldr	r3, [r0, #0]
{
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8007912:	4293      	cmp	r3, r2
{
 8007914:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007916:	f04f 0400 	mov.w	r4, #0
 800791a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800791e:	940d      	str	r4, [sp, #52]	; 0x34
 8007920:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8007924:	d021      	beq.n	800796a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d055      	beq.n	80079d8 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800792c:	4a6c      	ldr	r2, [pc, #432]	; (8007ae0 <HAL_TIM_Base_MspInit+0x1d4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d027      	beq.n	8007982 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007932:	4a6c      	ldr	r2, [pc, #432]	; (8007ae4 <HAL_TIM_Base_MspInit+0x1d8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d043      	beq.n	80079c0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8007938:	4a6b      	ldr	r2, [pc, #428]	; (8007ae8 <HAL_TIM_Base_MspInit+0x1dc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	f000 80a5 	beq.w	8007a8a <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8007940:	4a6a      	ldr	r2, [pc, #424]	; (8007aec <HAL_TIM_Base_MspInit+0x1e0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	f000 80b4 	beq.w	8007ab0 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8007948:	4a69      	ldr	r2, [pc, #420]	; (8007af0 <HAL_TIM_Base_MspInit+0x1e4>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d02d      	beq.n	80079aa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800794e:	4a69      	ldr	r2, [pc, #420]	; (8007af4 <HAL_TIM_Base_MspInit+0x1e8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d114      	bne.n	800797e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007954:	4b68      	ldr	r3, [pc, #416]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
 8007956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	930a      	str	r3, [sp, #40]	; 0x28
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007968:	e009      	b.n	800797e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800796a:	4b63      	ldr	r3, [pc, #396]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
 800796c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	645a      	str	r2, [r3, #68]	; 0x44
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	9b01      	ldr	r3, [sp, #4]
}
 800797e:	b011      	add	sp, #68	; 0x44
 8007980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007982:	4b5d      	ldr	r3, [pc, #372]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8007984:	4622      	mov	r2, r4
 8007986:	2106      	movs	r1, #6
 8007988:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800798a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800798c:	f044 0402 	orr.w	r4, r4, #2
 8007990:	641c      	str	r4, [r3, #64]	; 0x40
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800799c:	f002 f94c 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80079a0:	201d      	movs	r0, #29
 80079a2:	f002 f993 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 80079a6:	b011      	add	sp, #68	; 0x44
 80079a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80079aa:	4b53      	ldr	r3, [pc, #332]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
 80079ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ae:	f042 0220 	orr.w	r2, r2, #32
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	e7de      	b.n	800797e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80079c0:	4b4d      	ldr	r3, [pc, #308]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
 80079c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c4:	f042 0204 	orr.w	r2, r2, #4
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	9306      	str	r3, [sp, #24]
 80079d2:	9b06      	ldr	r3, [sp, #24]
}
 80079d4:	b011      	add	sp, #68	; 0x44
 80079d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079de:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e0:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e6:	4845      	ldr	r0, [pc, #276]	; (8007afc <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
 80079ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079f0:	f002 0201 	and.w	r2, r2, #1
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	f002 0201 	and.w	r2, r2, #1
 8007a06:	9203      	str	r2, [sp, #12]
 8007a08:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a0c:	f042 0202 	orr.w	r2, r2, #2
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a14:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a16:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007a1a:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007a1e:	2320      	movs	r3, #32
 8007a20:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a22:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a24:	f004 ff86 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007a28:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a2a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a2e:	4834      	ldr	r0, [pc, #208]	; (8007b00 <HAL_TIM_Base_MspInit+0x1f4>)
 8007a30:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a32:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a34:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a36:	4e33      	ldr	r6, [pc, #204]	; (8007b04 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a38:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a3c:	f004 ff7a 	bl	800c934 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a44:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007a46:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a48:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8007a4e:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8007a50:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a54:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007a56:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8007a5a:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8007a5c:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8007a5e:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a60:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8007a62:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a64:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8007a68:	f002 fbf8 	bl	800a25c <HAL_DMA_Init>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d132      	bne.n	8007ad6 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a70:	2200      	movs	r2, #0
 8007a72:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8007a74:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a76:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8007a78:	62ee      	str	r6, [r5, #44]	; 0x2c
 8007a7a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8007a7c:	f002 f8dc 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007a80:	201c      	movs	r0, #28
 8007a82:	f002 f923 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 8007a86:	b011      	add	sp, #68	; 0x44
 8007a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	2105      	movs	r1, #5
 8007a90:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a92:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007a94:	f044 0408 	orr.w	r4, r4, #8
 8007a98:	641c      	str	r4, [r3, #64]	; 0x40
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	9307      	str	r3, [sp, #28]
 8007aa2:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8007aa4:	f002 f8c8 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007aa8:	2032      	movs	r0, #50	; 0x32
 8007aaa:	f002 f90f 	bl	8009ccc <HAL_NVIC_EnableIRQ>
 8007aae:	e766      	b.n	800797e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007ab0:	4b11      	ldr	r3, [pc, #68]	; (8007af8 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	2106      	movs	r1, #6
 8007ab6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007ab8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007aba:	f044 0410 	orr.w	r4, r4, #16
 8007abe:	641c      	str	r4, [r3, #64]	; 0x40
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	9308      	str	r3, [sp, #32]
 8007ac8:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8007aca:	f002 f8b5 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ace:	2036      	movs	r0, #54	; 0x36
 8007ad0:	f002 f8fc 	bl	8009ccc <HAL_NVIC_EnableIRQ>
 8007ad4:	e753      	b.n	800797e <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 8007ad6:	f7fc fe95 	bl	8004804 <Error_Handler>
 8007ada:	e7c9      	b.n	8007a70 <HAL_TIM_Base_MspInit+0x164>
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40001000 	.word	0x40001000
 8007af0:	40001400 	.word	0x40001400
 8007af4:	40002000 	.word	0x40002000
 8007af8:	40023800 	.word	0x40023800
 8007afc:	40020000 	.word	0x40020000
 8007b00:	40020400 	.word	0x40020400
 8007b04:	20002344 	.word	0x20002344
 8007b08:	40026028 	.word	0x40026028

08007b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8007b0c:	491d      	ldr	r1, [pc, #116]	; (8007b84 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b0e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8007b10:	6802      	ldr	r2, [r0, #0]
{
 8007b12:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8007b14:	428a      	cmp	r2, r1
{
 8007b16:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007b1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b20:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8007b22:	d004      	beq.n	8007b2e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8007b24:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <HAL_TIM_MspPostInit+0x7c>)
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d016      	beq.n	8007b58 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007b2a:	b008      	add	sp, #32
 8007b2c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b30:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b32:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b34:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b38:	f042 0204 	orr.w	r2, r2, #4
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b40:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b42:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b46:	4812      	ldr	r0, [pc, #72]	; (8007b90 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b48:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b4e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b50:	f004 fef0 	bl	800c934 <HAL_GPIO_Init>
}
 8007b54:	b008      	add	sp, #32
 8007b56:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b58:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b5e:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b62:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b66:	4322      	orrs	r2, r4
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b6c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b6e:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b70:	4808      	ldr	r0, [pc, #32]	; (8007b94 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b72:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007b78:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b7a:	f004 fedb 	bl	800c934 <HAL_GPIO_Init>
}
 8007b7e:	b008      	add	sp, #32
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	40020800 	.word	0x40020800
 8007b94:	40020400 	.word	0x40020400

08007b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b9e:	2100      	movs	r1, #0
{
 8007ba0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ba2:	2290      	movs	r2, #144	; 0x90
 8007ba4:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba6:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ba8:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8007bac:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007bb0:	f01d fe32 	bl	8025818 <memset>
  if(huart->Instance==UART4)
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	4aa2      	ldr	r2, [pc, #648]	; (8007e40 <HAL_UART_MspInit+0x2a8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d070      	beq.n	8007c9e <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8007bbc:	4aa1      	ldr	r2, [pc, #644]	; (8007e44 <HAL_UART_MspInit+0x2ac>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	f000 80c1 	beq.w	8007d46 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8007bc4:	4aa0      	ldr	r2, [pc, #640]	; (8007e48 <HAL_UART_MspInit+0x2b0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	f000 815e 	beq.w	8007e88 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8007bcc:	4a9f      	ldr	r2, [pc, #636]	; (8007e4c <HAL_UART_MspInit+0x2b4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8007bd2:	4a9f      	ldr	r2, [pc, #636]	; (8007e50 <HAL_UART_MspInit+0x2b8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	f000 818e 	beq.w	8007ef6 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007bda:	4a9e      	ldr	r2, [pc, #632]	; (8007e54 <HAL_UART_MspInit+0x2bc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	f000 81b4 	beq.w	8007f4a <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007be2:	4a9d      	ldr	r2, [pc, #628]	; (8007e58 <HAL_UART_MspInit+0x2c0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	f000 81df 	beq.w	8007fa8 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007bea:	b03c      	add	sp, #240	; 0xf0
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bf4:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8007bf6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bf8:	f007 f9da 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 8261 	bne.w	80080c4 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8007c02:	4b96      	ldr	r3, [pc, #600]	; (8007e5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c04:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c06:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007c08:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8007c0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0c:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c0e:	4894      	ldr	r0, [pc, #592]	; (8007e60 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8007c10:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007c14:	6419      	str	r1, [r3, #64]	; 0x40
 8007c16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007c1c:	910a      	str	r1, [sp, #40]	; 0x28
 8007c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c22:	f041 0110 	orr.w	r1, r1, #16
 8007c26:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c28:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007c2c:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007c3a:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c3e:	f004 fe79 	bl	800c934 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c42:	4887      	ldr	r0, [pc, #540]	; (8007e60 <HAL_UART_MspInit+0x2c8>)
 8007c44:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007c46:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c48:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007c4c:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c50:	f004 fe70 	bl	800c934 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8007c54:	4d83      	ldr	r5, [pc, #524]	; (8007e64 <HAL_UART_MspInit+0x2cc>)
 8007c56:	4a84      	ldr	r2, [pc, #528]	; (8007e68 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007c58:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007c5c:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8007c5e:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007c62:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8007c6a:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c70:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c72:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c76:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c7a:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8007c7e:	f002 faed 	bl	800a25c <HAL_DMA_Init>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f040 8221 	bne.w	80080ca <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2103      	movs	r1, #3
 8007c8c:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8007c8e:	6725      	str	r5, [r4, #112]	; 0x70
 8007c90:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8007c92:	f001 ffd1 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8007c96:	2053      	movs	r0, #83	; 0x53
 8007c98:	f002 f818 	bl	8009ccc <HAL_NVIC_EnableIRQ>
 8007c9c:	e7a5      	b.n	8007bea <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ca2:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007ca4:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ca6:	f007 f983 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f040 8179 	bne.w	8007fa2 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8007cb0:	4b6a      	ldr	r3, [pc, #424]	; (8007e5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb4:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb6:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8007cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007cba:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cbc:	a913      	add	r1, sp, #76	; 0x4c
 8007cbe:	486b      	ldr	r0, [pc, #428]	; (8007e6c <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8007cc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8007cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cda:	f002 0201 	and.w	r2, r2, #1
 8007cde:	9202      	str	r2, [sp, #8]
 8007ce0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce4:	433a      	orrs	r2, r7
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cea:	403a      	ands	r2, r7
 8007cec:	9203      	str	r2, [sp, #12]
 8007cee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	f042 0204 	orr.w	r2, r2, #4
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cfa:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cfc:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d00:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007d04:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d08:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8007d0a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0c:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d10:	f004 fe10 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d18:	a913      	add	r1, sp, #76	; 0x4c
 8007d1a:	4855      	ldr	r0, [pc, #340]	; (8007e70 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007d1c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1e:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d22:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d26:	f004 fe05 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d2e:	a913      	add	r1, sp, #76	; 0x4c
 8007d30:	4850      	ldr	r0, [pc, #320]	; (8007e74 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d32:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d34:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007d36:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d38:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d3c:	f004 fdfa 	bl	800c934 <HAL_GPIO_Init>
}
 8007d40:	b03c      	add	sp, #240	; 0xf0
 8007d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d4a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007d4c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d4e:	f007 f92f 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f040 81b0 	bne.w	80080b8 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d58:	4b40      	ldr	r3, [pc, #256]	; (8007e5c <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d5a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007d5e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d64:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d68:	a913      	add	r1, sp, #76	; 0x4c
 8007d6a:	4841      	ldr	r0, [pc, #260]	; (8007e70 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8007d6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
 8007d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d78:	9205      	str	r2, [sp, #20]
 8007d7a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d7e:	4332      	orrs	r2, r6
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30
 8007d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d84:	4032      	ands	r2, r6
 8007d86:	9206      	str	r2, [sp, #24]
 8007d88:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8c:	f042 0204 	orr.w	r2, r2, #4
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d94:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	9307      	str	r3, [sp, #28]
 8007d9c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d9e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da0:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007da4:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007da8:	f004 fdc4 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dac:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dae:	4831      	ldr	r0, [pc, #196]	; (8007e74 <HAL_UART_MspInit+0x2dc>)
 8007db0:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db2:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007db4:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007db6:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007db8:	4e2f      	ldr	r6, [pc, #188]	; (8007e78 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007dba:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007dbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dc0:	f004 fdb8 	bl	800c934 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007dc4:	4a2d      	ldr	r2, [pc, #180]	; (8007e7c <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007dca:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dcc:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007dce:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007dd4:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dda:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ddc:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007de0:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007de4:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007de8:	f002 fa38 	bl	800a25c <HAL_DMA_Init>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f040 8160 	bne.w	80080b2 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007df2:	4d23      	ldr	r5, [pc, #140]	; (8007e80 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007df4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007df8:	4922      	ldr	r1, [pc, #136]	; (8007e84 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dfa:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8007dfc:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007e02:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e04:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007e06:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007e08:	6726      	str	r6, [r4, #112]	; 0x70
 8007e0a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e0c:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e0e:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e10:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e12:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e14:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e16:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e18:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007e1c:	f002 fa1e 	bl	800a25c <HAL_DMA_Init>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f040 8143 	bne.w	80080ac <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007e26:	2200      	movs	r2, #0
 8007e28:	2107      	movs	r1, #7
 8007e2a:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8007e2c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007e2e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8007e30:	f001 ff02 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007e34:	2035      	movs	r0, #53	; 0x35
 8007e36:	f001 ff49 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 8007e3a:	b03c      	add	sp, #240	; 0xf0
 8007e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e40:	40004c00 	.word	0x40004c00
 8007e44:	40005000 	.word	0x40005000
 8007e48:	40007800 	.word	0x40007800
 8007e4c:	40007c00 	.word	0x40007c00
 8007e50:	40004400 	.word	0x40004400
 8007e54:	40004800 	.word	0x40004800
 8007e58:	40011400 	.word	0x40011400
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	40021000 	.word	0x40021000
 8007e64:	20002464 	.word	0x20002464
 8007e68:	400260a0 	.word	0x400260a0
 8007e6c:	40020000 	.word	0x40020000
 8007e70:	40020400 	.word	0x40020400
 8007e74:	40020800 	.word	0x40020800
 8007e78:	200023a4 	.word	0x200023a4
 8007e7c:	40026010 	.word	0x40026010
 8007e80:	20002404 	.word	0x20002404
 8007e84:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e8c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8007e8e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e90:	f007 f88e 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f040 8112 	bne.w	80080be <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8007e9a:	4b8f      	ldr	r3, [pc, #572]	; (80080d8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007e9c:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007e9e:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea0:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8007ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ea4:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ea6:	488d      	ldr	r0, [pc, #564]	; (80080dc <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8007ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007eac:	641a      	str	r2, [r3, #64]	; 0x40
 8007eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007eb4:	9208      	str	r2, [sp, #32]
 8007eb6:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eba:	f042 0220 	orr.w	r2, r2, #32
 8007ebe:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec0:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ec4:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ec6:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ec8:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ecc:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ece:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ed4:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ed8:	f004 fd2c 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007edc:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007ede:	a913      	add	r1, sp, #76	; 0x4c
 8007ee0:	487e      	ldr	r0, [pc, #504]	; (80080dc <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ee2:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ee4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ee6:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007ee8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007eec:	f004 fd22 	bl	800c934 <HAL_GPIO_Init>
}
 8007ef0:	b03c      	add	sp, #240	; 0xf0
 8007ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007ef6:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ef8:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007efa:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007efc:	f007 f858 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 80e5 	bne.w	80080d0 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f06:	4b74      	ldr	r3, [pc, #464]	; (80080d8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f08:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007f0a:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0c:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f10:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40
 8007f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f1a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007f1e:	920c      	str	r2, [sp, #48]	; 0x30
 8007f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f24:	f042 0208 	orr.w	r2, r2, #8
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f2a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2e:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f30:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f34:	486a      	ldr	r0, [pc, #424]	; (80080e0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007f36:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f38:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f3a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f3e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f40:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f44:	f004 fcf6 	bl	800c934 <HAL_GPIO_Init>
 8007f48:	e64f      	b.n	8007bea <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f4e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f50:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f52:	f007 f82d 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f040 809c 	bne.w	8008094 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f5c:	4b5e      	ldr	r3, [pc, #376]	; (80080d8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f5e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007f60:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f64:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f68:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8007f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8007f76:	920e      	str	r2, [sp, #56]	; 0x38
 8007f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7c:	f042 0208 	orr.w	r2, r2, #8
 8007f80:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f82:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f86:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f88:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f8c:	4854      	ldr	r0, [pc, #336]	; (80080e0 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007f8e:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f90:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f92:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f96:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f98:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f9c:	f004 fcca 	bl	800c934 <HAL_GPIO_Init>
 8007fa0:	e623      	b.n	8007bea <HAL_UART_MspInit+0x52>
      Error_Handler();
 8007fa2:	f7fc fc2f 	bl	8004804 <Error_Handler>
 8007fa6:	e683      	b.n	8007cb0 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fac:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007fae:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fb0:	f006 fffe 	bl	800efb0 <HAL_RCCEx_PeriphCLKConfig>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d176      	bne.n	80080a6 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007fb8:	4b47      	ldr	r3, [pc, #284]	; (80080d8 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007fba:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fbc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fbe:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8007fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007fc2:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fc4:	4847      	ldr	r0, [pc, #284]	; (80080e4 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8007fc6:	f042 0220 	orr.w	r2, r2, #32
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
 8007fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fce:	f002 0220 	and.w	r2, r2, #32
 8007fd2:	9210      	str	r2, [sp, #64]	; 0x40
 8007fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd8:	f042 0204 	orr.w	r2, r2, #4
 8007fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8007fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fe0:	f002 0204 	and.w	r2, r2, #4
 8007fe4:	9211      	str	r2, [sp, #68]	; 0x44
 8007fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fea:	430a      	orrs	r2, r1
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff0:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ff2:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ff4:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007ff6:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ff8:	9312      	str	r3, [sp, #72]	; 0x48
 8007ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffc:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008000:	a913      	add	r1, sp, #76	; 0x4c
 8008002:	f004 fc97 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008006:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008008:	4837      	ldr	r0, [pc, #220]	; (80080e8 <HAL_UART_MspInit+0x550>)
 800800a:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800800c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800800e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008012:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008014:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8008016:	4e35      	ldr	r6, [pc, #212]	; (80080ec <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008018:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800801c:	f004 fc8a 	bl	800c934 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8008020:	4a33      	ldr	r2, [pc, #204]	; (80080f0 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008022:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008026:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008028:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800802c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008030:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8008034:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800803a:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800803e:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008042:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008046:	f002 f909 	bl	800a25c <HAL_DMA_Init>
 800804a:	bb48      	cbnz	r0, 80080a0 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800804c:	4d29      	ldr	r5, [pc, #164]	; (80080f4 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800804e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8008052:	4929      	ldr	r1, [pc, #164]	; (80080f8 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008054:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8008056:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008058:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800805c:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800805e:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008060:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008062:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008064:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008066:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800806a:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800806c:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800806e:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008070:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008072:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008074:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008076:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8008078:	6726      	str	r6, [r4, #112]	; 0x70
 800807a:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800807c:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8008080:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008084:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008088:	f002 f8e8 	bl	800a25c <HAL_DMA_Init>
 800808c:	b928      	cbnz	r0, 800809a <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800808e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8008090:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8008092:	e5aa      	b.n	8007bea <HAL_UART_MspInit+0x52>
      Error_Handler();
 8008094:	f7fc fbb6 	bl	8004804 <Error_Handler>
 8008098:	e760      	b.n	8007f5c <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800809a:	f7fc fbb3 	bl	8004804 <Error_Handler>
 800809e:	e7f6      	b.n	800808e <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 80080a0:	f7fc fbb0 	bl	8004804 <Error_Handler>
 80080a4:	e7d2      	b.n	800804c <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 80080a6:	f7fc fbad 	bl	8004804 <Error_Handler>
 80080aa:	e785      	b.n	8007fb8 <HAL_UART_MspInit+0x420>
      Error_Handler();
 80080ac:	f7fc fbaa 	bl	8004804 <Error_Handler>
 80080b0:	e6b9      	b.n	8007e26 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 80080b2:	f7fc fba7 	bl	8004804 <Error_Handler>
 80080b6:	e69c      	b.n	8007df2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 80080b8:	f7fc fba4 	bl	8004804 <Error_Handler>
 80080bc:	e64c      	b.n	8007d58 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80080be:	f7fc fba1 	bl	8004804 <Error_Handler>
 80080c2:	e6ea      	b.n	8007e9a <HAL_UART_MspInit+0x302>
      Error_Handler();
 80080c4:	f7fc fb9e 	bl	8004804 <Error_Handler>
 80080c8:	e59b      	b.n	8007c02 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 80080ca:	f7fc fb9b 	bl	8004804 <Error_Handler>
 80080ce:	e5db      	b.n	8007c88 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80080d0:	f7fc fb98 	bl	8004804 <Error_Handler>
 80080d4:	e717      	b.n	8007f06 <HAL_UART_MspInit+0x36e>
 80080d6:	bf00      	nop
 80080d8:	40023800 	.word	0x40023800
 80080dc:	40021400 	.word	0x40021400
 80080e0:	40020c00 	.word	0x40020c00
 80080e4:	40020800 	.word	0x40020800
 80080e8:	40021800 	.word	0x40021800
 80080ec:	200024c4 	.word	0x200024c4
 80080f0:	40026428 	.word	0x40026428
 80080f4:	20002524 	.word	0x20002524
 80080f8:	400264a0 	.word	0x400264a0

080080fc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 80080fc:	4a4f      	ldr	r2, [pc, #316]	; (800823c <HAL_UART_MspDeInit+0x140>)
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	4293      	cmp	r3, r2
{
 8008102:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8008104:	d025      	beq.n	8008152 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8008106:	4a4e      	ldr	r2, [pc, #312]	; (8008240 <HAL_UART_MspDeInit+0x144>)
 8008108:	4604      	mov	r4, r0
 800810a:	4293      	cmp	r3, r2
 800810c:	d038      	beq.n	8008180 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 800810e:	4a4d      	ldr	r2, [pc, #308]	; (8008244 <HAL_UART_MspDeInit+0x148>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d050      	beq.n	80081b6 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8008114:	4a4c      	ldr	r2, [pc, #304]	; (8008248 <HAL_UART_MspDeInit+0x14c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800811a:	4a4c      	ldr	r2, [pc, #304]	; (800824c <HAL_UART_MspDeInit+0x150>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d056      	beq.n	80081ce <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8008120:	4a4b      	ldr	r2, [pc, #300]	; (8008250 <HAL_UART_MspDeInit+0x154>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d062      	beq.n	80081ec <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8008126:	4a4b      	ldr	r2, [pc, #300]	; (8008254 <HAL_UART_MspDeInit+0x158>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d06c      	beq.n	8008206 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800812c:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 800812e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8008132:	2103      	movs	r1, #3
 8008134:	4848      	ldr	r0, [pc, #288]	; (8008258 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8008136:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800813c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 800813e:	f004 fd9f 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008142:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008144:	f002 fa36 	bl	800a5b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8008148:	2053      	movs	r0, #83	; 0x53
}
 800814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800814e:	f001 bdd1 	b.w	8009cf4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8008152:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8008156:	f248 0101 	movw	r1, #32769	; 0x8001
 800815a:	4840      	ldr	r0, [pc, #256]	; (800825c <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 800815c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800815e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008162:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8008164:	f004 fd8c 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8008168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800816c:	483c      	ldr	r0, [pc, #240]	; (8008260 <HAL_UART_MspDeInit+0x164>)
 800816e:	f004 fd87 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8008172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008176:	483b      	ldr	r0, [pc, #236]	; (8008264 <HAL_UART_MspDeInit+0x168>)
}
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 800817c:	f004 bd80 	b.w	800cc80 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8008180:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8008184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008188:	4835      	ldr	r0, [pc, #212]	; (8008260 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 800818a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800818c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008190:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8008192:	f004 fd75 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8008196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800819a:	4832      	ldr	r0, [pc, #200]	; (8008264 <HAL_UART_MspDeInit+0x168>)
 800819c:	f004 fd70 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80081a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80081a2:	f002 fa07 	bl	800a5b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80081a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80081a8:	f002 fa04 	bl	800a5b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80081ac:	2035      	movs	r0, #53	; 0x35
}
 80081ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80081b2:	f001 bd9f 	b.w	8009cf4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80081b6:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80081ba:	21c0      	movs	r1, #192	; 0xc0
 80081bc:	482a      	ldr	r0, [pc, #168]	; (8008268 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 80081be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 80081c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80081ca:	f004 bd59 	b.w	800cc80 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 80081ce:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80081d2:	4826      	ldr	r0, [pc, #152]	; (800826c <HAL_UART_MspDeInit+0x170>)
 80081d4:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 80081d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80081de:	f004 fd4f 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80081e2:	2026      	movs	r0, #38	; 0x26
}
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80081e8:	f001 bd84 	b.w	8009cf4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80081ec:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80081f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80081f4:	481d      	ldr	r0, [pc, #116]	; (800826c <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80081f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80081fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8008200:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8008202:	f004 bd3d 	b.w	800cc80 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8008206:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800820a:	2140      	movs	r1, #64	; 0x40
 800820c:	4815      	ldr	r0, [pc, #84]	; (8008264 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 800820e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008210:	f023 0320 	bic.w	r3, r3, #32
 8008214:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8008216:	f004 fd33 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800821a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800821e:	4814      	ldr	r0, [pc, #80]	; (8008270 <HAL_UART_MspDeInit+0x174>)
 8008220:	f004 fd2e 	bl	800cc80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008224:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008226:	f002 f9c5 	bl	800a5b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800822a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800822c:	f002 f9c2 	bl	800a5b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008230:	2047      	movs	r0, #71	; 0x47
}
 8008232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8008236:	f001 bd5d 	b.w	8009cf4 <HAL_NVIC_DisableIRQ>
 800823a:	bf00      	nop
 800823c:	40004c00 	.word	0x40004c00
 8008240:	40005000 	.word	0x40005000
 8008244:	40007800 	.word	0x40007800
 8008248:	40007c00 	.word	0x40007c00
 800824c:	40004400 	.word	0x40004400
 8008250:	40004800 	.word	0x40004800
 8008254:	40011400 	.word	0x40011400
 8008258:	40021000 	.word	0x40021000
 800825c:	40020000 	.word	0x40020000
 8008260:	40020400 	.word	0x40020400
 8008264:	40020800 	.word	0x40020800
 8008268:	40021400 	.word	0x40021400
 800826c:	40020c00 	.word	0x40020c00
 8008270:	40021800 	.word	0x40021800

08008274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008274:	b530      	push	{r4, r5, lr}
 8008276:	4601      	mov	r1, r0
 8008278:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800827a:	2200      	movs	r2, #0
 800827c:	202b      	movs	r0, #43	; 0x2b
 800827e:	f001 fcdb 	bl	8009c38 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008282:	202b      	movs	r0, #43	; 0x2b
 8008284:	f001 fd22 	bl	8009ccc <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800828a:	a901      	add	r1, sp, #4
 800828c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 800828e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8008290:	4c14      	ldr	r4, [pc, #80]	; (80082e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008296:	4d14      	ldr	r5, [pc, #80]	; (80082e8 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8008298:	641a      	str	r2, [r3, #64]	; 0x40
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80082a4:	f006 fe62 	bl	800ef6c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80082a8:	f006 fe40 	bl	800ef2c <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80082ac:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80082ae:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 80082b0:	490e      	ldr	r1, [pc, #56]	; (80082ec <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 80082b2:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80082b4:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082b6:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80082b8:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80082bc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 80082c0:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80082c2:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80082c4:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80082c6:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 80082c8:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80082ca:	f009 f941 	bl	8011550 <HAL_TIM_Base_Init>
 80082ce:	b110      	cbz	r0, 80082d6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80082d0:	2001      	movs	r0, #1
}
 80082d2:	b009      	add	sp, #36	; 0x24
 80082d4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f008 fb0e 	bl	80108f8 <HAL_TIM_Base_Start_IT>
}
 80082dc:	b009      	add	sp, #36	; 0x24
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	40023800 	.word	0x40023800
 80082e4:	20003408 	.word	0x20003408
 80082e8:	431bde83 	.word	0x431bde83
 80082ec:	40001800 	.word	0x40001800

080082f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop

080082f4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082f4:	e7fe      	b.n	80082f4 <HardFault_Handler>
 80082f6:	bf00      	nop

080082f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082f8:	e7fe      	b.n	80082f8 <MemManage_Handler>
 80082fa:	bf00      	nop

080082fc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082fc:	e7fe      	b.n	80082fc <BusFault_Handler>
 80082fe:	bf00      	nop

08008300 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008300:	e7fe      	b.n	8008300 <UsageFault_Handler>
 8008302:	bf00      	nop

08008304 <RCC_IRQHandler>:
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <DMA1_Stream0_IRQHandler+0x8>)
 800830a:	f002 babf 	b.w	800a88c <HAL_DMA_IRQHandler>
 800830e:	bf00      	nop
 8008310:	200023a4 	.word	0x200023a4

08008314 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <DMA1_Stream1_IRQHandler+0x8>)
 8008316:	f002 bab9 	b.w	800a88c <HAL_DMA_IRQHandler>
 800831a:	bf00      	nop
 800831c:	20002344 	.word	0x20002344

08008320 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <DMA1_Stream5_IRQHandler+0x8>)
 8008322:	f002 bab3 	b.w	800a88c <HAL_DMA_IRQHandler>
 8008326:	bf00      	nop
 8008328:	200022e4 	.word	0x200022e4

0800832c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <DMA1_Stream6_IRQHandler+0x8>)
 800832e:	f002 baad 	b.w	800a88c <HAL_DMA_IRQHandler>
 8008332:	bf00      	nop
 8008334:	20002464 	.word	0x20002464

08008338 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008338:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800833a:	4805      	ldr	r0, [pc, #20]	; (8008350 <ADC_IRQHandler+0x18>)
 800833c:	f001 fa58 	bl	80097f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008340:	4804      	ldr	r0, [pc, #16]	; (8008354 <ADC_IRQHandler+0x1c>)
 8008342:	f001 fa55 	bl	80097f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008346:	4804      	ldr	r0, [pc, #16]	; (8008358 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800834c:	f001 ba50 	b.w	80097f0 <HAL_ADC_IRQHandler>
 8008350:	20002174 	.word	0x20002174
 8008354:	200021bc 	.word	0x200021bc
 8008358:	20002204 	.word	0x20002204

0800835c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <TIM2_IRQHandler+0x8>)
 800835e:	f008 bf6f 	b.w	8011240 <HAL_TIM_IRQHandler>
 8008362:	bf00      	nop
 8008364:	2000284c 	.word	0x2000284c

08008368 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <TIM3_IRQHandler+0x8>)
 800836a:	f008 bf69 	b.w	8011240 <HAL_TIM_IRQHandler>
 800836e:	bf00      	nop
 8008370:	20002898 	.word	0x20002898

08008374 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <USART2_IRQHandler+0x8>)
 8008376:	f00b b9e7 	b.w	8013748 <HAL_UART_IRQHandler>
 800837a:	bf00      	nop
 800837c:	20002a14 	.word	0x20002a14

08008380 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8008380:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008384:	f004 bdb4 	b.w	800cef0 <HAL_GPIO_EXTI_IRQHandler>

08008388 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800838a:	f008 bf59 	b.w	8011240 <HAL_TIM_IRQHandler>
 800838e:	bf00      	nop
 8008390:	20003408 	.word	0x20003408

08008394 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8008396:	f008 bf53 	b.w	8011240 <HAL_TIM_IRQHandler>
 800839a:	bf00      	nop
 800839c:	20002800 	.word	0x20002800

080083a0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <DMA1_Stream7_IRQHandler+0x8>)
 80083a2:	f002 ba73 	b.w	800a88c <HAL_DMA_IRQHandler>
 80083a6:	bf00      	nop
 80083a8:	20002404 	.word	0x20002404

080083ac <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <TIM5_IRQHandler+0x8>)
 80083ae:	f008 bf47 	b.w	8011240 <HAL_TIM_IRQHandler>
 80083b2:	bf00      	nop
 80083b4:	20002930 	.word	0x20002930

080083b8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <UART5_IRQHandler+0x8>)
 80083ba:	f00b b9c5 	b.w	8013748 <HAL_UART_IRQHandler>
 80083be:	bf00      	nop
 80083c0:	20002ba0 	.word	0x20002ba0

080083c4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80083c4:	4804      	ldr	r0, [pc, #16]	; (80083d8 <TIM6_DAC_IRQHandler+0x14>)
{
 80083c6:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 80083c8:	f001 fe92 	bl	800a0f0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80083cc:	4803      	ldr	r0, [pc, #12]	; (80083dc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80083ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80083d2:	f008 bf35 	b.w	8011240 <HAL_TIM_IRQHandler>
 80083d6:	bf00      	nop
 80083d8:	20002270 	.word	0x20002270
 80083dc:	2000297c 	.word	0x2000297c

080083e0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <DMA2_Stream1_IRQHandler+0x8>)
 80083e2:	f002 ba53 	b.w	800a88c <HAL_DMA_IRQHandler>
 80083e6:	bf00      	nop
 80083e8:	200024c4 	.word	0x200024c4

080083ec <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <DMA2_Stream4_IRQHandler+0x8>)
 80083ee:	f002 ba4d 	b.w	800a88c <HAL_DMA_IRQHandler>
 80083f2:	bf00      	nop
 80083f4:	20002284 	.word	0x20002284

080083f8 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <ETH_IRQHandler+0x8>)
 80083fa:	f003 b9cb 	b.w	800b794 <HAL_ETH_IRQHandler>
 80083fe:	bf00      	nop
 8008400:	20006634 	.word	0x20006634

08008404 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <OTG_FS_IRQHandler+0x8>)
 8008406:	f005 bc91 	b.w	800dd2c <HAL_PCD_IRQHandler>
 800840a:	bf00      	nop
 800840c:	2002fcd0 	.word	0x2002fcd0

08008410 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <DMA2_Stream6_IRQHandler+0x8>)
 8008412:	f002 ba3b 	b.w	800a88c <HAL_DMA_IRQHandler>
 8008416:	bf00      	nop
 8008418:	20002524 	.word	0x20002524

0800841c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <USART6_IRQHandler+0x8>)
 800841e:	f00b b993 	b.w	8013748 <HAL_UART_IRQHandler>
 8008422:	bf00      	nop
 8008424:	20002c24 	.word	0x20002c24

08008428 <FPU_IRQHandler>:
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop

0800842c <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <UART8_IRQHandler+0x8>)
 800842e:	f00b b98b 	b.w	8013748 <HAL_UART_IRQHandler>
 8008432:	bf00      	nop
 8008434:	20002d2c 	.word	0x20002d2c

08008438 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8008438:	2001      	movs	r0, #1
 800843a:	4770      	bx	lr

0800843c <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 800843c:	4b02      	ldr	r3, [pc, #8]	; (8008448 <_kill+0xc>)
 800843e:	2216      	movs	r2, #22
	return -1;
}
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8008444:	601a      	str	r2, [r3, #0]
}
 8008446:	4770      	bx	lr
 8008448:	200300e4 	.word	0x200300e4

0800844c <_exit>:
	errno = EINVAL;
 800844c:	4b01      	ldr	r3, [pc, #4]	; (8008454 <_exit+0x8>)
 800844e:	2216      	movs	r2, #22
 8008450:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8008452:	e7fe      	b.n	8008452 <_exit+0x6>
 8008454:	200300e4 	.word	0x200300e4

08008458 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8008458:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800845a:	1e16      	subs	r6, r2, #0
 800845c:	dd07      	ble.n	800846e <_read+0x16>
 800845e:	460c      	mov	r4, r1
 8008460:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8008462:	f3af 8000 	nop.w
 8008466:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800846a:	42a5      	cmp	r5, r4
 800846c:	d1f9      	bne.n	8008462 <_read+0xa>
	}

	return len;
}
 800846e:	4630      	mov	r0, r6
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	bf00      	nop

08008474 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop

0800847c <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 800847c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8008480:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8008482:	604b      	str	r3, [r1, #4]
}
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8008488:	2001      	movs	r0, #1
 800848a:	4770      	bx	lr

0800848c <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 800848c:	2000      	movs	r0, #0
 800848e:	4770      	bx	lr

08008490 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8008490:	490d      	ldr	r1, [pc, #52]	; (80084c8 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8008492:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8008496:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8008498:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800849a:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <_sbrk+0x40>)
 800849c:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 800849e:	b170      	cbz	r0, 80084be <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80084a0:	4403      	add	r3, r0
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d803      	bhi.n	80084ae <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80084a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 80084aa:	600b      	str	r3, [r1, #0]
}
 80084ac:	4770      	bx	lr
		errno = ENOMEM;
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <_sbrk+0x44>)
 80084b0:	220c      	movs	r2, #12
		return (void*) -1;
 80084b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80084b6:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 80084ba:	601a      	str	r2, [r3, #0]
}
 80084bc:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80084be:	4c06      	ldr	r4, [pc, #24]	; (80084d8 <_sbrk+0x48>)
 80084c0:	4620      	mov	r0, r4
 80084c2:	600c      	str	r4, [r1, #0]
 80084c4:	e7ec      	b.n	80084a0 <_sbrk+0x10>
 80084c6:	bf00      	nop
 80084c8:	20003458 	.word	0x20003458
 80084cc:	20080000 	.word	0x20080000
 80084d0:	00007800 	.word	0x00007800
 80084d4:	200300e4 	.word	0x200300e4
 80084d8:	20030110 	.word	0x20030110

080084dc <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084dc:	4a0f      	ldr	r2, [pc, #60]	; (800851c <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084e0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80084e4:	490f      	ldr	r1, [pc, #60]	; (8008524 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084e6:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80084ea:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084ec:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80084f0:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	f040 0001 	orr.w	r0, r0, #1
 80084f8:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80084fa:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8008500:	4809      	ldr	r0, [pc, #36]	; (8008528 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8008502:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8008504:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8008506:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008508:	4808      	ldr	r0, [pc, #32]	; (800852c <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800850a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800850e:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8008510:	60dc      	str	r4, [r3, #12]

#endif
}
 8008512:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008516:	6090      	str	r0, [r2, #8]
}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	e000ed00 	.word	0xe000ed00
 8008520:	40023800 	.word	0x40023800
 8008524:	fef6ffff 	.word	0xfef6ffff
 8008528:	24003010 	.word	0x24003010
 800852c:	08000000 	.word	0x08000000

08008530 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8008530:	680b      	ldr	r3, [r1, #0]
 8008532:	4a03      	ldr	r2, [pc, #12]	; (8008540 <dnsfound+0x10>)
		ip_ready = -1;
 8008534:	2b00      	cmp	r3, #0
 8008536:	bf08      	it	eq
 8008538:	f04f 33ff 	moveq.w	r3, #4294967295
 800853c:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 800853e:	4770      	bx	lr
 8008540:	2000346c 	.word	0x2000346c

08008544 <myreboot>:
void myreboot(char *msg) {
 8008544:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8008546:	480a      	ldr	r0, [pc, #40]	; (8008570 <myreboot+0x2c>)
void myreboot(char *msg) {
 8008548:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800854a:	f01e f903 	bl	8026754 <iprintf>
	osDelay(2000);
 800854e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008552:	f00e f881 	bl	8016658 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 8008556:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800855a:	4906      	ldr	r1, [pc, #24]	; (8008574 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800855e:	68ca      	ldr	r2, [r1, #12]
 8008560:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008564:	4313      	orrs	r3, r2
 8008566:	60cb      	str	r3, [r1, #12]
 8008568:	f3bf 8f4f 	dsb	sy
    __NOP();
 800856c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800856e:	e7fd      	b.n	800856c <myreboot+0x28>
 8008570:	0802dac0 	.word	0x0802dac0
 8008574:	e000ed00 	.word	0xe000ed00
 8008578:	05fa0004 	.word	0x05fa0004

0800857c <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 800857c:	b500      	push	{lr}
 800857e:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008580:	f241 3388 	movw	r3, #5000	; 0x1388
 8008584:	4a16      	ldr	r2, [pc, #88]	; (80085e0 <sendudp+0x64>)
 8008586:	f019 f84f 	bl	8021628 <udp_sendto>
 800858a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 800858e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008592:	b943      	cbnz	r3, 80085a6 <sendudp+0x2a>
 8008594:	b25a      	sxtb	r2, r3
		busycount = 0;
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <sendudp+0x68>)
 8008598:	601a      	str	r2, [r3, #0]
	return (err);
 800859a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800859e:	b240      	sxtb	r0, r0
 80085a0:	b003      	add	sp, #12
 80085a2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 80085a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80085aa:	480f      	ldr	r0, [pc, #60]	; (80085e8 <sendudp+0x6c>)
 80085ac:	b249      	sxtb	r1, r1
 80085ae:	f01e f8d1 	bl	8026754 <iprintf>
		vTaskDelay(100); //some delay!
 80085b2:	2064      	movs	r0, #100	; 0x64
 80085b4:	f00f fc82 	bl	8017ebc <vTaskDelay>
		if (err == ERR_MEM) {
 80085b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085bc:	2bff      	cmp	r3, #255	; 0xff
 80085be:	d00c      	beq.n	80085da <sendudp+0x5e>
		if (err == ERR_USE) {
 80085c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80085c4:	2bf8      	cmp	r3, #248	; 0xf8
 80085c6:	d1e8      	bne.n	800859a <sendudp+0x1e>
			if (busycount++ > 10)
 80085c8:	4a06      	ldr	r2, [pc, #24]	; (80085e4 <sendudp+0x68>)
 80085ca:	6813      	ldr	r3, [r2, #0]
 80085cc:	1c59      	adds	r1, r3, #1
 80085ce:	2b0a      	cmp	r3, #10
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	dde2      	ble.n	800859a <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80085d4:	4805      	ldr	r0, [pc, #20]	; (80085ec <sendudp+0x70>)
 80085d6:	f7ff ffb5 	bl	8008544 <myreboot>
			myreboot("sendudp: out of mem");
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <sendudp+0x74>)
 80085dc:	f7ff ffb2 	bl	8008544 <myreboot>
 80085e0:	20003484 	.word	0x20003484
 80085e4:	2000345c 	.word	0x2000345c
 80085e8:	0802dad4 	.word	0x0802dad4
 80085ec:	0802dafc 	.word	0x0802dafc
 80085f0:	0802dae8 	.word	0x0802dae8

080085f4 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085f4:	4b25      	ldr	r3, [pc, #148]	; (800868c <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80085f6:	4684      	mov	ip, r0
 80085f8:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80085fa:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80085fe:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008600:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008604:	4c22      	ldr	r4, [pc, #136]	; (8008690 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8008606:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008608:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800860a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800860e:	4c21      	ldr	r4, [pc, #132]	; (8008694 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008610:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008614:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008618:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800861c:	4c1e      	ldr	r4, [pc, #120]	; (8008698 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800861e:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008622:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8008626:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800862a:	4a1c      	ldr	r2, [pc, #112]	; (800869c <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800862c:	bfc8      	it	gt
 800862e:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008632:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8008636:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8008638:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800863c:	1a9b      	subs	r3, r3, r2
 800863e:	4d18      	ldr	r5, [pc, #96]	; (80086a0 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008640:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008642:	2b00      	cmp	r3, #0
 8008644:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008646:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008648:	bfb8      	it	lt
 800864a:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800864c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800864e:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008650:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008652:	4d15      	ldr	r5, [pc, #84]	; (80086a8 <sendstatus+0xb4>)
 8008654:	b292      	uxth	r2, r2
 8008656:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008658:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800865c:	432a      	orrs	r2, r5
 800865e:	4d13      	ldr	r5, [pc, #76]	; (80086ac <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008660:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8008662:	4035      	ands	r5, r6
 8008664:	432a      	orrs	r2, r5
 8008666:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8008668:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800866c:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800866e:	4a10      	ldr	r2, [pc, #64]	; (80086b0 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8008670:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8008674:	f241 3388 	movw	r3, #5000	; 0x1388
 8008678:	f7ff ff80 	bl	800857c <sendudp>
 800867c:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	6023      	str	r3, [r4, #0]
}
 8008686:	b002      	add	sp, #8
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	bf00      	nop
 800868c:	20000760 	.word	0x20000760
 8008690:	2000070c 	.word	0x2000070c
 8008694:	200033f0 	.word	0x200033f0
 8008698:	20003014 	.word	0x20003014
 800869c:	20000718 	.word	0x20000718
 80086a0:	20000002 	.word	0x20000002
 80086a4:	20000714 	.word	0x20000714
 80086a8:	200006f4 	.word	0x200006f4
 80086ac:	ffff0000 	.word	0xffff0000
 80086b0:	20003484 	.word	0x20003484

080086b4 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	4604      	mov	r4, r0
 80086b8:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 80086ba:	4818      	ldr	r0, [pc, #96]	; (800871c <dnslookup+0x68>)
 80086bc:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 80086be:	4e18      	ldr	r6, [pc, #96]	; (8008720 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 80086c0:	f01e f848 	bl	8026754 <iprintf>
	ip_ready = 0;
 80086c4:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80086c6:	4620      	mov	r0, r4
 80086c8:	4a16      	ldr	r2, [pc, #88]	; (8008724 <dnslookup+0x70>)
 80086ca:	4639      	mov	r1, r7
	ip_ready = 0;
 80086cc:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80086ce:	f012 fc4f 	bl	801af70 <dns_gethostbyname>
 80086d2:	4604      	mov	r4, r0

	switch (err) {
 80086d4:	3005      	adds	r0, #5
 80086d6:	d005      	beq.n	80086e4 <dnslookup+0x30>
 80086d8:	b114      	cbz	r4, 80086e0 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80086da:	4813      	ldr	r0, [pc, #76]	; (8008728 <dnslookup+0x74>)
 80086dc:	f01e f83a 	bl	8026754 <iprintf>
		break;
	}
	return (err);
}
 80086e0:	4620      	mov	r0, r4
 80086e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80086e4:	4811      	ldr	r0, [pc, #68]	; (800872c <dnslookup+0x78>)
 80086e6:	2514      	movs	r5, #20
 80086e8:	f01e f834 	bl	8026754 <iprintf>
		for (i = 0; i < 20; i++) {
 80086ec:	e001      	b.n	80086f2 <dnslookup+0x3e>
 80086ee:	3d01      	subs	r5, #1
 80086f0:	d0f3      	beq.n	80086da <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80086f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086f6:	f00d ffaf 	bl	8016658 <osDelay>
			printf(".");
 80086fa:	202e      	movs	r0, #46	; 0x2e
 80086fc:	f01e f842 	bl	8026784 <putchar>
			if (ip_ready) {
 8008700:	6833      	ldr	r3, [r6, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f3      	beq.n	80086ee <dnslookup+0x3a>
				if (ip_ready == -1) {
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	d002      	beq.n	8008710 <dnslookup+0x5c>
				return (ERR_OK);
 800870a:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 800870c:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 800870e:	e7e7      	b.n	80086e0 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008712:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8008716:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8008718:	e7e2      	b.n	80086e0 <dnslookup+0x2c>
 800871a:	bf00      	nop
 800871c:	0802db18 	.word	0x0802db18
 8008720:	2000346c 	.word	0x2000346c
 8008724:	08008531 	.word	0x08008531
 8008728:	0802db54 	.word	0x0802db54
 800872c:	0802db2c 	.word	0x0802db2c
 8008730:	0802db48 	.word	0x0802db48

08008734 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8008734:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8008736:	4914      	ldr	r1, [pc, #80]	; (8008788 <locateudp+0x54>)
{
 8008738:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 800873a:	4814      	ldr	r0, [pc, #80]	; (800878c <locateudp+0x58>)
 800873c:	f01e f80a 	bl	8026754 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8008740:	4913      	ldr	r1, [pc, #76]	; (8008790 <locateudp+0x5c>)
 8008742:	4811      	ldr	r0, [pc, #68]	; (8008788 <locateudp+0x54>)
 8008744:	f7ff ffb6 	bl	80086b4 <dnslookup>
 8008748:	b240      	sxtb	r0, r0
 800874a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800874e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008752:	b9a3      	cbnz	r3, 800877e <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8008756:	490f      	ldr	r1, [pc, #60]	; (8008794 <locateudp+0x60>)
	ip = udpdestip.addr;
 8008758:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800875a:	480f      	ldr	r0, [pc, #60]	; (8008798 <locateudp+0x64>)
 800875c:	0e22      	lsrs	r2, r4, #24
 800875e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8008762:	e9cd 3200 	strd	r3, r2, [sp]
 8008766:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800876a:	b2e2      	uxtb	r2, r4
 800876c:	f01e f9dc 	bl	8026b28 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8008770:	4909      	ldr	r1, [pc, #36]	; (8008798 <locateudp+0x64>)
 8008772:	480a      	ldr	r0, [pc, #40]	; (800879c <locateudp+0x68>)
 8008774:	f01d ffee 	bl	8026754 <iprintf>
	return (ip);
}
 8008778:	4620      	mov	r0, r4
 800877a:	b004      	add	sp, #16
 800877c:	bd10      	pop	{r4, pc}
		rebootme(3);
 800877e:	2003      	movs	r0, #3
 8008780:	f7fb fb12 	bl	8003da8 <rebootme>
 8008784:	e7e6      	b.n	8008754 <locateudp+0x20>
 8008786:	bf00      	nop
 8008788:	200034d8 	.word	0x200034d8
 800878c:	0802db78 	.word	0x0802db78
 8008790:	20003484 	.word	0x20003484
 8008794:	0802db98 	.word	0x0802db98
 8008798:	20003474 	.word	0x20003474
 800879c:	0802dba8 	.word	0x0802dba8

080087a0 <startudp>:

void startudp(uint32_t ip) {
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	ed2d 8b02 	vpush	{d8}
 80087a8:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80087aa:	f00f fcaf 	bl	801810c <xTaskGetCurrentTaskHandle>
 80087ae:	4b75      	ldr	r3, [pc, #468]	; (8008984 <startudp+0x1e4>)
 80087b0:	4602      	mov	r2, r0
	osDelay(1000);
 80087b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80087b6:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 80087b8:	f00d ff4e 	bl	8016658 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 80087bc:	f019 f800 	bl	80217c0 <udp_new>
	if (pcb == NULL) {
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f000 80ce 	beq.w	8008962 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80087c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ca:	496f      	ldr	r1, [pc, #444]	; (8008988 <startudp+0x1e8>)
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	f018 fda6 	bl	8021320 <udp_bind>
 80087d4:	4605      	mov	r5, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f040 80bf 	bne.w	800895a <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087dc:	2241      	movs	r2, #65	; 0x41
 80087de:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80087e2:	2036      	movs	r0, #54	; 0x36
 80087e4:	f013 fd1a 	bl	801c21c <pbuf_alloc>

	if (p1 == NULL) {
 80087e8:	9000      	str	r0, [sp, #0]
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f000 80bd 	beq.w	800896a <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80087f0:	4c66      	ldr	r4, [pc, #408]	; (800898c <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087f2:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80087f6:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087f8:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80087fe:	2241      	movs	r2, #65	; 0x41
 8008800:	f013 fd0c 	bl	801c21c <pbuf_alloc>
	if (p2 == NULL) {
 8008804:	9001      	str	r0, [sp, #4]
 8008806:	2800      	cmp	r0, #0
 8008808:	f000 80b7 	beq.w	800897a <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 800880c:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800880e:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008810:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8008812:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8008814:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8008818:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800881a:	2201      	movs	r2, #1
 800881c:	f013 fcfe 	bl	801c21c <pbuf_alloc>
	if (ps == NULL) {
 8008820:	ee08 0a90 	vmov	s17, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	f000 80aa 	beq.w	800897e <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800882a:	4c59      	ldr	r4, [pc, #356]	; (8008990 <startudp+0x1f0>)
 800882c:	4f59      	ldr	r7, [pc, #356]	; (8008994 <startudp+0x1f4>)
 800882e:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8008830:	f241 3088 	movw	r0, #5000	; 0x1388
 8008834:	f00d ff10 	bl	8016658 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008838:	4b57      	ldr	r3, [pc, #348]	; (8008998 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 800883a:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 800883c:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 800883e:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8008840:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8008842:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8008846:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800884a:	4b54      	ldr	r3, [pc, #336]	; (800899c <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800884c:	4854      	ldr	r0, [pc, #336]	; (80089a0 <startudp+0x200>)
 800884e:	4e55      	ldr	r6, [pc, #340]	; (80089a4 <startudp+0x204>)
 8008850:	f8df b188 	ldr.w	fp, [pc, #392]	; 80089dc <startudp+0x23c>
 8008854:	f8df a188 	ldr.w	sl, [pc, #392]	; 80089e0 <startudp+0x240>
 8008858:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80089e4 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 800885c:	4d52      	ldr	r5, [pc, #328]	; (80089a8 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800885e:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8008860:	f01e f814 	bl	802688c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008868:	2001      	movs	r0, #1
 800886a:	f00f fd97 	bl	801839c <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800886e:	2800      	cmp	r0, #0
 8008870:	d05a      	beq.n	8008928 <startudp+0x188>
			sigsend = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8008876:	7833      	ldrb	r3, [r6, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f3      	beq.n	8008864 <startudp+0xc4>
 800887c:	f8db 3000 	ldr.w	r3, [fp]
 8008880:	f8da 2000 	ldr.w	r2, [sl]
 8008884:	4313      	orrs	r3, r2
 8008886:	d1ed      	bne.n	8008864 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008888:	4a48      	ldr	r2, [pc, #288]	; (80089ac <startudp+0x20c>)
 800888a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	2a00      	cmp	r2, #0
 8008892:	bf08      	it	eq
 8008894:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8008896:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8008898:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800889a:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 800889c:	6822      	ldr	r2, [r4, #0]
 800889e:	684b      	ldr	r3, [r1, #4]
 80088a0:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	684a      	ldr	r2, [r1, #4]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	684a      	ldr	r2, [r1, #4]
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 80088b2:	7b89      	ldrb	r1, [r1, #14]
 80088b4:	2901      	cmp	r1, #1
 80088b6:	d006      	beq.n	80088c6 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80088b8:	4628      	mov	r0, r5
 80088ba:	f01d ff4b 	bl	8026754 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 80088be:	f899 100e 	ldrb.w	r1, [r9, #14]
 80088c2:	2901      	cmp	r1, #1
 80088c4:	d1f8      	bne.n	80088b8 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 80088c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80088ca:	4649      	mov	r1, r9
 80088cc:	4a38      	ldr	r2, [pc, #224]	; (80089b0 <startudp+0x210>)
 80088ce:	ee18 0a10 	vmov	r0, s16
 80088d2:	f7ff fe53 	bl	800857c <sendudp>
 80088d6:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80088da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80088e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80088e8:	3301      	adds	r3, #1
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <startudp+0x214>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0b2      	beq.n	8008864 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80088fe:	492e      	ldr	r1, [pc, #184]	; (80089b8 <startudp+0x218>)
 8008900:	ee18 2a10 	vmov	r2, s16
 8008904:	2001      	movs	r0, #1
 8008906:	780b      	ldrb	r3, [r1, #0]
 8008908:	ee18 1a90 	vmov	r1, s17
 800890c:	f7ff fe72 	bl	80085f4 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8008910:	2300      	movs	r3, #0
 8008912:	4a28      	ldr	r2, [pc, #160]	; (80089b4 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008914:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008918:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800891a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 800891e:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8008920:	f00f fd3c 	bl	801839c <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8008924:	2800      	cmp	r0, #0
 8008926:	d1a4      	bne.n	8008872 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8008928:	4b24      	ldr	r3, [pc, #144]	; (80089bc <startudp+0x21c>)
 800892a:	f8d8 2000 	ldr.w	r2, [r8]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4293      	cmp	r3, r2
 8008932:	d097      	beq.n	8008864 <startudp+0xc4>
 8008934:	4a22      	ldr	r2, [pc, #136]	; (80089c0 <startudp+0x220>)
 8008936:	4923      	ldr	r1, [pc, #140]	; (80089c4 <startudp+0x224>)
 8008938:	fb02 f203 	mul.w	r2, r2, r3
 800893c:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8008940:	d390      	bcc.n	8008864 <startudp+0xc4>
		talive = t1sec;
 8008942:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8008946:	ee18 2a10 	vmov	r2, s16
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <startudp+0x218>)
 800894c:	ee18 1a90 	vmov	r1, s17
 8008950:	2002      	movs	r0, #2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	f7ff fe4e 	bl	80085f4 <sendstatus>
 8008958:	e784      	b.n	8008864 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 800895a:	481b      	ldr	r0, [pc, #108]	; (80089c8 <startudp+0x228>)
 800895c:	f01d ff96 	bl	802688c <puts>
		for (;;)
 8008960:	e7fe      	b.n	8008960 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8008962:	481a      	ldr	r0, [pc, #104]	; (80089cc <startudp+0x22c>)
 8008964:	f01d ff92 	bl	802688c <puts>
		for (;;)
 8008968:	e7fe      	b.n	8008968 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 800896a:	4819      	ldr	r0, [pc, #100]	; (80089d0 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 800896c:	b005      	add	sp, #20
 800896e:	ecbd 8b02 	vpop	{d8}
 8008972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8008976:	f01d bf89 	b.w	802688c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 800897a:	4816      	ldr	r0, [pc, #88]	; (80089d4 <startudp+0x234>)
 800897c:	e7f6      	b.n	800896c <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 800897e:	4816      	ldr	r0, [pc, #88]	; (80089d8 <startudp+0x238>)
 8008980:	e7f4      	b.n	800896c <startudp+0x1cc>
 8008982:	bf00      	nop
 8008984:	20000818 	.word	0x20000818
 8008988:	080472d0 	.word	0x080472d0
 800898c:	20000764 	.word	0x20000764
 8008990:	20003014 	.word	0x20003014
 8008994:	2000077c 	.word	0x2000077c
 8008998:	dec0edfe 	.word	0xdec0edfe
 800899c:	20000762 	.word	0x20000762
 80089a0:	0802dc54 	.word	0x0802dc54
 80089a4:	20003468 	.word	0x20003468
 80089a8:	0802dc88 	.word	0x0802dc88
 80089ac:	20000708 	.word	0x20000708
 80089b0:	20003484 	.word	0x20003484
 80089b4:	20000774 	.word	0x20000774
 80089b8:	200006f4 	.word	0x200006f4
 80089bc:	20002dec 	.word	0x20002dec
 80089c0:	eeeeeeef 	.word	0xeeeeeeef
 80089c4:	02222222 	.word	0x02222222
 80089c8:	0802dbd8 	.word	0x0802dbd8
 80089cc:	0802dbbc 	.word	0x0802dbbc
 80089d0:	0802dbf4 	.word	0x0802dbf4
 80089d4:	0802dc14 	.word	0x0802dc14
 80089d8:	0802dc34 	.word	0x0802dc34
 80089dc:	20003464 	.word	0x20003464
 80089e0:	20000714 	.word	0x20000714
 80089e4:	20003470 	.word	0x20003470

080089e8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80089ea:	4b52      	ldr	r3, [pc, #328]	; (8008b34 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089f0:	4851      	ldr	r0, [pc, #324]	; (8008b38 <tag_callback+0x150>)
	if (ledsenabled) {
 80089f2:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 80089f8:	b35a      	cbz	r2, 8008a52 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80089fa:	f004 fa61 	bl	800cec0 <HAL_GPIO_TogglePin>
 80089fe:	4c4f      	ldr	r4, [pc, #316]	; (8008b3c <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8008a00:	4d4f      	ldr	r5, [pc, #316]	; (8008b40 <tag_callback+0x158>)
 8008a02:	e001      	b.n	8008a08 <tag_callback+0x20>
 8008a04:	f01d ff42 	bl	802688c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	f00e fbe8 	bl	80171e0 <xQueueSemaphoreTake>
 8008a10:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8008a12:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d1f5      	bne.n	8008a04 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8008a18:	1f32      	subs	r2, r6, #4
 8008a1a:	2a07      	cmp	r2, #7
 8008a1c:	d81c      	bhi.n	8008a58 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8008a1e:	4949      	ldr	r1, [pc, #292]	; (8008b44 <tag_callback+0x15c>)
 8008a20:	4093      	lsls	r3, r2
 8008a22:	780a      	ldrb	r2, [r1, #0]
 8008a24:	4013      	ands	r3, r2
 8008a26:	4a48      	ldr	r2, [pc, #288]	; (8008b48 <tag_callback+0x160>)
 8008a28:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8008a2a:	bb5b      	cbnz	r3, 8008a84 <tag_callback+0x9c>
			strcpy(newstring, "0");
 8008a2c:	4b47      	ldr	r3, [pc, #284]	; (8008b4c <tag_callback+0x164>)
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8008a32:	2300      	movs	r3, #0
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f00e f937 	bl	8016cac <xQueueGenericSend>
 8008a3e:	2801      	cmp	r0, #1
 8008a40:	d002      	beq.n	8008a48 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8008a42:	4843      	ldr	r0, [pc, #268]	; (8008b50 <tag_callback+0x168>)
 8008a44:	f01d ff22 	bl	802688c <puts>
	}
	return (strlen(newstring));
 8008a48:	4638      	mov	r0, r7
}
 8008a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8008a4e:	f7f7 bc01 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8008a52:	f004 fa1b 	bl	800ce8c <HAL_GPIO_WritePin>
 8008a56:	e7d2      	b.n	80089fe <tag_callback+0x16>
		switch (index) {
 8008a58:	2e14      	cmp	r6, #20
 8008a5a:	d817      	bhi.n	8008a8c <tag_callback+0xa4>
 8008a5c:	e8df f006 	tbb	[pc, r6]
 8008a60:	0b655055 	.word	0x0b655055
 8008a64:	16161616 	.word	0x16161616
 8008a68:	16161616 	.word	0x16161616
 8008a6c:	343d5a61 	.word	0x343d5a61
 8008a70:	464b2429 	.word	0x464b2429
 8008a74:	1c          	.byte	0x1c
 8008a75:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8008a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008a7a:	482f      	ldr	r0, [pc, #188]	; (8008b38 <tag_callback+0x150>)
 8008a7c:	f004 f9f4 	bl	800ce68 <HAL_GPIO_ReadPin>
 8008a80:	2801      	cmp	r0, #1
 8008a82:	d1d3      	bne.n	8008a2c <tag_callback+0x44>
			strcpy(newstring, "1");
 8008a84:	4b33      	ldr	r3, [pc, #204]	; (8008b54 <tag_callback+0x16c>)
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	803b      	strh	r3, [r7, #0]
 8008a8a:	e7d2      	b.n	8008a32 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4932      	ldr	r1, [pc, #200]	; (8008b58 <tag_callback+0x170>)
 8008a90:	4638      	mov	r0, r7
 8008a92:	f01e f849 	bl	8026b28 <siprintf>
			break;
 8008a96:	e7cc      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8008a98:	4b30      	ldr	r3, [pc, #192]	; (8008b5c <tag_callback+0x174>)
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bf14      	ite	ne
 8008aa0:	2331      	movne	r3, #49	; 0x31
 8008aa2:	2330      	moveq	r3, #48	; 0x30
 8008aa4:	803b      	strh	r3, [r7, #0]
			break;
 8008aa6:	e7c4      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8008aa8:	492d      	ldr	r1, [pc, #180]	; (8008b60 <tag_callback+0x178>)
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f01e f8f2 	bl	8026c94 <strcpy>
			break;
 8008ab0:	e7bf      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8008ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ab6:	482b      	ldr	r0, [pc, #172]	; (8008b64 <tag_callback+0x17c>)
 8008ab8:	f004 f9d6 	bl	800ce68 <HAL_GPIO_ReadPin>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	bf14      	ite	ne
 8008ac0:	2330      	movne	r3, #48	; 0x30
 8008ac2:	2331      	moveq	r3, #49	; 0x31
 8008ac4:	803b      	strh	r3, [r7, #0]
			break;
 8008ac6:	e7b4      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8008ac8:	4b27      	ldr	r3, [pc, #156]	; (8008b68 <tag_callback+0x180>)
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	f013 0f04 	tst.w	r3, #4
 8008ad0:	bf14      	ite	ne
 8008ad2:	2331      	movne	r3, #49	; 0x31
 8008ad4:	2330      	moveq	r3, #48	; 0x30
 8008ad6:	803b      	strh	r3, [r7, #0]
			break;
 8008ad8:	e7ab      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8008ada:	4b23      	ldr	r3, [pc, #140]	; (8008b68 <tag_callback+0x180>)
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	f013 0f02 	tst.w	r3, #2
 8008ae2:	bf14      	ite	ne
 8008ae4:	2331      	movne	r3, #49	; 0x31
 8008ae6:	2330      	moveq	r3, #48	; 0x30
 8008ae8:	803b      	strh	r3, [r7, #0]
			break;
 8008aea:	e7a2      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8008aec:	491f      	ldr	r1, [pc, #124]	; (8008b6c <tag_callback+0x184>)
 8008aee:	4638      	mov	r0, r7
 8008af0:	f01e f8d0 	bl	8026c94 <strcpy>
			break;
 8008af4:	e79d      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 8008af6:	491e      	ldr	r1, [pc, #120]	; (8008b70 <tag_callback+0x188>)
 8008af8:	4638      	mov	r0, r7
 8008afa:	f01e f8cb 	bl	8026c94 <strcpy>
			break;
 8008afe:	e798      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8008b00:	491c      	ldr	r1, [pc, #112]	; (8008b74 <tag_callback+0x18c>)
 8008b02:	4638      	mov	r0, r7
 8008b04:	f01e f8c6 	bl	8026c94 <strcpy>
			break;
 8008b08:	e793      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 8008b0a:	491b      	ldr	r1, [pc, #108]	; (8008b78 <tag_callback+0x190>)
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f01e f8c1 	bl	8026c94 <strcpy>
			break;
 8008b12:	e78e      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8008b14:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <tag_callback+0x180>)
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	3330      	adds	r3, #48	; 0x30
 8008b1e:	803b      	strh	r3, [r7, #0]
			break;
 8008b20:	e787      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8008b22:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <tag_callback+0x194>)
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	803b      	strh	r3, [r7, #0]
			break;
 8008b28:	e783      	b.n	8008a32 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8008b2a:	4915      	ldr	r1, [pc, #84]	; (8008b80 <tag_callback+0x198>)
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f01e f8b1 	bl	8026c94 <strcpy>
			break;
 8008b32:	e77e      	b.n	8008a32 <tag_callback+0x4a>
 8008b34:	2000028c 	.word	0x2000028c
 8008b38:	40020c00 	.word	0x40020c00
 8008b3c:	20002de8 	.word	0x20002de8
 8008b40:	0802dd70 	.word	0x0802dd70
 8008b44:	20000290 	.word	0x20000290
 8008b48:	2000348c 	.word	0x2000348c
 8008b4c:	08046eac 	.word	0x08046eac
 8008b50:	0802dd9c 	.word	0x0802dd9c
 8008b54:	0802db50 	.word	0x0802db50
 8008b58:	0802dd7c 	.word	0x0802dd7c
 8008b5c:	2000002e 	.word	0x2000002e
 8008b60:	200000a0 	.word	0x200000a0
 8008b64:	40021000 	.word	0x40021000
 8008b68:	200033f0 	.word	0x200033f0
 8008b6c:	20000030 	.word	0x20000030
 8008b70:	20000144 	.word	0x20000144
 8008b74:	20000090 	.word	0x20000090
 8008b78:	2000024c 	.word	0x2000024c
 8008b7c:	08045290 	.word	0x08045290
 8008b80:	20000070 	.word	0x20000070

08008b84 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008b8e:	220a      	movs	r2, #10
 8008b90:	a903      	add	r1, sp, #12
 8008b92:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8008b94:	4699      	mov	r9, r3
 8008b96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8008b98:	f01e fe56 	bl	8027848 <strtol>
 8008b9c:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	4871      	ldr	r0, [pc, #452]	; (8008d68 <httpd_cgi_handler+0x1e4>)
 8008ba4:	4633      	mov	r3, r6
 8008ba6:	f01d fdd5 	bl	8026754 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	dd37      	ble.n	8008c1e <httpd_cgi_handler+0x9a>
 8008bae:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008bb0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8008d98 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008bb4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8008d9c <httpd_cgi_handler+0x218>
		switch (j) {
 8008bb8:	f1a6 030a 	sub.w	r3, r6, #10
 8008bbc:	2b0e      	cmp	r3, #14
 8008bbe:	f200 80cc 	bhi.w	8008d5a <httpd_cgi_handler+0x1d6>
 8008bc2:	e8df f003 	tbb	[pc, r3]
 8008bc6:	9eb6      	.short	0x9eb6
 8008bc8:	08080808 	.word	0x08080808
 8008bcc:	08080808 	.word	0x08080808
 8008bd0:	864d6073 	.word	0x864d6073
 8008bd4:	3a          	.byte	0x3a
 8008bd5:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008bd6:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008bd8:	2101      	movs	r1, #1
 8008bda:	f1a6 000c 	sub.w	r0, r6, #12
 8008bde:	4b63      	ldr	r3, [pc, #396]	; (8008d6c <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008be0:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8008be2:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008be6:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8008be8:	2a30      	cmp	r2, #48	; 0x30
 8008bea:	d01b      	beq.n	8008c24 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	4311      	orrs	r1, r2
 8008bf0:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008bf2:	f001 0202 	and.w	r2, r1, #2
 8008bf6:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008bf8:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8008bfa:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8008bfc:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8008c00:	f01d fda8 	bl	8026754 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8008c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4a58      	ldr	r2, [pc, #352]	; (8008d6c <httpd_cgi_handler+0x1e8>)
 8008c0c:	9100      	str	r1, [sp, #0]
 8008c0e:	2188      	movs	r1, #136	; 0x88
 8008c10:	4857      	ldr	r0, [pc, #348]	; (8008d70 <httpd_cgi_handler+0x1ec>)
 8008c12:	f004 fc41 	bl	800d498 <HAL_I2C_Master_Transmit>
 8008c16:	b960      	cbnz	r0, 8008c32 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c18:	3401      	adds	r4, #1
 8008c1a:	42a5      	cmp	r5, r4
 8008c1c:	d1cc      	bne.n	8008bb8 <httpd_cgi_handler+0x34>
}
 8008c1e:	b005      	add	sp, #20
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8008c24:	2101      	movs	r1, #1
 8008c26:	fa01 f600 	lsl.w	r6, r1, r0
 8008c2a:	7819      	ldrb	r1, [r3, #0]
 8008c2c:	ea21 0106 	bic.w	r1, r1, r6
 8008c30:	e7df      	b.n	8008bf2 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8008c32:	4850      	ldr	r0, [pc, #320]	; (8008d74 <httpd_cgi_handler+0x1f0>)
 8008c34:	f01d fd8e 	bl	8026754 <iprintf>
 8008c38:	e7ee      	b.n	8008c18 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	3c01      	subs	r4, #1
 8008c3e:	484e      	ldr	r0, [pc, #312]	; (8008d78 <httpd_cgi_handler+0x1f4>)
 8008c40:	440c      	add	r4, r1
 8008c42:	4623      	mov	r3, r4
 8008c44:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c48:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c4a:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c4c:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c50:	bf18      	it	ne
 8008c52:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c54:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8008c56:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c58:	dcf3      	bgt.n	8008c42 <httpd_cgi_handler+0xbe>
}
 8008c5a:	b005      	add	sp, #20
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	4e46      	ldr	r6, [pc, #280]	; (8008d7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c68:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c6a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8008c6c:	2b30      	cmp	r3, #48	; 0x30
 8008c6e:	bf0c      	ite	eq
 8008c70:	f020 0001 	biceq.w	r0, r0, #1
 8008c74:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8008c78:	f7fd fe9e 	bl	80069b8 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c7c:	42a5      	cmp	r5, r4
 8008c7e:	dcf0      	bgt.n	8008c62 <httpd_cgi_handler+0xde>
}
 8008c80:	b005      	add	sp, #20
 8008c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c86:	4e3d      	ldr	r6, [pc, #244]	; (8008d7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008c8e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008c90:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8008c92:	2b30      	cmp	r3, #48	; 0x30
 8008c94:	bf0c      	ite	eq
 8008c96:	f020 0002 	biceq.w	r0, r0, #2
 8008c9a:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8008c9e:	f7fd fe8b 	bl	80069b8 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008ca2:	42a5      	cmp	r5, r4
 8008ca4:	dcf0      	bgt.n	8008c88 <httpd_cgi_handler+0x104>
}
 8008ca6:	b005      	add	sp, #20
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	4e33      	ldr	r6, [pc, #204]	; (8008d7c <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	f9b6 0000 	ldrsh.w	r0, [r6]
 8008cb4:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cb6:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8008cb8:	2b30      	cmp	r3, #48	; 0x30
 8008cba:	bf0c      	ite	eq
 8008cbc:	f020 0004 	biceq.w	r0, r0, #4
 8008cc0:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8008cc4:	f7fd fe78 	bl	80069b8 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	dcf0      	bgt.n	8008cae <httpd_cgi_handler+0x12a>
}
 8008ccc:	b005      	add	sp, #20
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008cd4:	4e2a      	ldr	r6, [pc, #168]	; (8008d80 <httpd_cgi_handler+0x1fc>)
 8008cd6:	e004      	b.n	8008ce2 <httpd_cgi_handler+0x15e>
 8008cd8:	f004 f8d8 	bl	800ce8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cdc:	42a5      	cmp	r5, r4
 8008cde:	dd9e      	ble.n	8008c1e <httpd_cgi_handler+0x9a>
 8008ce0:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8008ce2:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008cea:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8008cec:	4423      	add	r3, r4
 8008cee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cf2:	2b31      	cmp	r3, #49	; 0x31
 8008cf4:	d1f0      	bne.n	8008cd8 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f004 f8c8 	bl	800ce8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008cfc:	42a5      	cmp	r5, r4
 8008cfe:	dcef      	bgt.n	8008ce0 <httpd_cgi_handler+0x15c>
 8008d00:	e78d      	b.n	8008c1e <httpd_cgi_handler+0x9a>
 8008d02:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008d04:	4e1f      	ldr	r6, [pc, #124]	; (8008d84 <httpd_cgi_handler+0x200>)
 8008d06:	e004      	b.n	8008d12 <httpd_cgi_handler+0x18e>
 8008d08:	f004 f8c0 	bl	800ce8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008d0c:	42ac      	cmp	r4, r5
 8008d0e:	da86      	bge.n	8008c1e <httpd_cgi_handler+0x9a>
 8008d10:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8008d12:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8008d14:	2201      	movs	r2, #1
 8008d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d1a:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8008d1c:	4423      	add	r3, r4
 8008d1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d22:	2b30      	cmp	r3, #48	; 0x30
 8008d24:	d1f0      	bne.n	8008d08 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8008d26:	2200      	movs	r2, #0
 8008d28:	f004 f8b0 	bl	800ce8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8008d2c:	42a5      	cmp	r5, r4
 8008d2e:	dcef      	bgt.n	8008d10 <httpd_cgi_handler+0x18c>
 8008d30:	e775      	b.n	8008c1e <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8008d32:	4815      	ldr	r0, [pc, #84]	; (8008d88 <httpd_cgi_handler+0x204>)
 8008d34:	f01d fdaa 	bl	802688c <puts>
			osDelay(500);
 8008d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d3c:	f00d fc8c 	bl	8016658 <osDelay>
 8008d40:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d44:	4911      	ldr	r1, [pc, #68]	; (8008d8c <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d48:	68ca      	ldr	r2, [r1, #12]
 8008d4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60cb      	str	r3, [r1, #12]
 8008d52:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008d56:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008d58:	e7fd      	b.n	8008d56 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8008d5a:	f8d9 1000 	ldr.w	r1, [r9]
 8008d5e:	480d      	ldr	r0, [pc, #52]	; (8008d94 <httpd_cgi_handler+0x210>)
 8008d60:	f01d fcf8 	bl	8026754 <iprintf>
			break;
 8008d64:	e758      	b.n	8008c18 <httpd_cgi_handler+0x94>
 8008d66:	bf00      	nop
 8008d68:	0802ddb4 	.word	0x0802ddb4
 8008d6c:	20000290 	.word	0x20000290
 8008d70:	20002584 	.word	0x20002584
 8008d74:	0802d6fc 	.word	0x0802d6fc
 8008d78:	2000002e 	.word	0x2000002e
 8008d7c:	200033f0 	.word	0x200033f0
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40020c00 	.word	0x40020c00
 8008d88:	0802dde0 	.word	0x0802dde0
 8008d8c:	e000ed00 	.word	0xe000ed00
 8008d90:	05fa0004 	.word	0x05fa0004
 8008d94:	0802de18 	.word	0x0802de18
 8008d98:	200033ec 	.word	0x200033ec
 8008d9c:	0802ddfc 	.word	0x0802ddfc

08008da0 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8008da0:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8008da2:	4802      	ldr	r0, [pc, #8]	; (8008dac <httpd_post_receive_data+0xc>)
 8008da4:	f01d fd72 	bl	802688c <puts>
}
 8008da8:	2000      	movs	r0, #0
 8008daa:	bd08      	pop	{r3, pc}
 8008dac:	0802de38 	.word	0x0802de38

08008db0 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8008db0:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8008db2:	4802      	ldr	r0, [pc, #8]	; (8008dbc <httpd_post_begin+0xc>)
 8008db4:	f01d fd6a 	bl	802688c <puts>
}
 8008db8:	2000      	movs	r0, #0
 8008dba:	bd08      	pop	{r3, pc}
 8008dbc:	0802de54 	.word	0x0802de54

08008dc0 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <httpd_post_finished+0x8>)
 8008dc2:	f01d bd63 	b.w	802688c <puts>
 8008dc6:	bf00      	nop
 8008dc8:	0802de68 	.word	0x0802de68

08008dcc <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <init_httpd_ssi+0x10>)
 8008dce:	2215      	movs	r2, #21
 8008dd0:	4903      	ldr	r1, [pc, #12]	; (8008de0 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8008dd2:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8008dd4:	f011 fb80 	bl	801a4d8 <http_set_ssi_handler>
}
 8008dd8:	bd08      	pop	{r3, pc}
 8008dda:	bf00      	nop
 8008ddc:	080089e9 	.word	0x080089e9
 8008de0:	2000029c 	.word	0x2000029c

08008de4 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8008de4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8008de6:	7804      	ldrb	r4, [r0, #0]
 8008de8:	b194      	cbz	r4, 8008e10 <parsep2+0x2c>
 8008dea:	2c7d      	cmp	r4, #125	; 0x7d
 8008dec:	d010      	beq.n	8008e10 <parsep2+0x2c>
	j = 0;
 8008dee:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8008df2:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8008df4:	f811 600e 	ldrb.w	r6, [r1, lr]
 8008df8:	f105 0c01 	add.w	ip, r5, #1
 8008dfc:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8008dfe:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8008e02:	d008      	beq.n	8008e16 <parsep2+0x32>
 8008e04:	4665      	mov	r5, ip
			j = 0;
 8008e06:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8008e0a:	b10c      	cbz	r4, 8008e10 <parsep2+0x2c>
 8008e0c:	2c7d      	cmp	r4, #125	; 0x7d
 8008e0e:	d1f1      	bne.n	8008df4 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e14:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8008e16:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8008e18:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8008e1c:	d001      	beq.n	8008e22 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8008e1e:	4665      	mov	r5, ip
 8008e20:	e7f3      	b.n	8008e0a <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8008e22:	2a01      	cmp	r2, #1
				i++;
 8008e24:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8008e28:	d005      	beq.n	8008e36 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8008e2a:	2a02      	cmp	r2, #2
 8008e2c:	d01a      	beq.n	8008e64 <parsep2+0x80>
				} else if (type == 3) { // uint32_t hex string
 8008e2e:	2a03      	cmp	r2, #3
 8008e30:	d022      	beq.n	8008e78 <parsep2+0x94>
	while ((buf[i]) && (buf[i] != '}')) {
 8008e32:	5d44      	ldrb	r4, [r0, r5]
 8008e34:	e7e9      	b.n	8008e0a <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008e36:	5d44      	ldrb	r4, [r0, r5]
 8008e38:	1941      	adds	r1, r0, r5
 8008e3a:	b36c      	cbz	r4, 8008e98 <parsep2+0xb4>
 8008e3c:	1e5d      	subs	r5, r3, #1
					j = 0;
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4e17      	ldr	r6, [pc, #92]	; (8008ea0 <parsep2+0xbc>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008e42:	5d30      	ldrb	r0, [r6, r4]
 8008e44:	0740      	lsls	r0, r0, #29
 8008e46:	d101      	bne.n	8008e4c <parsep2+0x68>
 8008e48:	2c2e      	cmp	r4, #46	; 0x2e
 8008e4a:	d11f      	bne.n	8008e8c <parsep2+0xa8>
						pch[j++] = buf[i++];
 8008e4c:	f805 4f01 	strb.w	r4, [r5, #1]!
 8008e50:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008e52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e56:	2c00      	cmp	r4, #0
 8008e58:	d1f3      	bne.n	8008e42 <parsep2+0x5e>
					pch[j] = 0;
 8008e5a:	4413      	add	r3, r2
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
}
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8008e64:	461a      	mov	r2, r3
 8008e66:	490f      	ldr	r1, [pc, #60]	; (8008ea4 <parsep2+0xc0>)
 8008e68:	4428      	add	r0, r5
 8008e6a:	f01d fe7d 	bl	8026b68 <siscanf>
 8008e6e:	3801      	subs	r0, #1
 8008e70:	bf18      	it	ne
 8008e72:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8008e78:	461a      	mov	r2, r3
 8008e7a:	490b      	ldr	r1, [pc, #44]	; (8008ea8 <parsep2+0xc4>)
 8008e7c:	4428      	add	r0, r5
 8008e7e:	f01d fe73 	bl	8026b68 <siscanf>
 8008e82:	3801      	subs	r0, #1
 8008e84:	bf18      	it	ne
 8008e86:	f04f 30ff 	movne.w	r0, #4294967295
}
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8008e8c:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8008e90:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8008e92:	0940      	lsrs	r0, r0, #5
 8008e94:	4240      	negs	r0, r0
 8008e96:	e7e2      	b.n	8008e5e <parsep2+0x7a>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e7df      	b.n	8008e5e <parsep2+0x7a>
 8008e9e:	bf00      	nop
 8008ea0:	0804752d 	.word	0x0804752d
 8008ea4:	0802de80 	.word	0x0802de80
 8008ea8:	0802de84 	.word	0x0802de84

08008eac <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile char p2[256];
	volatile char s1[16];
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8008eb0:	4e9f      	ldr	r6, [pc, #636]	; (8009130 <returnpage+0x284>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008eb2:	b0d2      	sub	sp, #328	; 0x148
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;
 8008eb4:	2500      	movs	r5, #0
	if (expectedapage) {
 8008eb6:	6833      	ldr	r3, [r6, #0]
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8008eb8:	f8ad 100e 	strh.w	r1, [sp, #14]
	volatile uint32_t crc1, crc2, n1 = 0,  n2 = 0;
 8008ebc:	950c      	str	r5, [sp, #48]	; 0x30
 8008ebe:	950d      	str	r5, [sp, #52]	; 0x34
		if (errorm == 0) {
 8008ec0:	b103      	cbz	r3, 8008ec4 <returnpage+0x18>
 8008ec2:	b122      	cbz	r2, 8008ece <returnpage+0x22>
					rebootme(0);
				}
			}
		}
	}
	expectedapage = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6033      	str	r3, [r6, #0]
}
 8008ec8:	b052      	add	sp, #328	; 0x148
 8008eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008ece:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8008ed2:	4604      	mov	r4, r0
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ed4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8008ed8:	af09      	add	r7, sp, #36	; 0x24
			printf("Server replied: \"%.*s\"\n", charcount, content);
 8008eda:	4602      	mov	r2, r0
 8008edc:	b289      	uxth	r1, r1
 8008ede:	4895      	ldr	r0, [pc, #596]	; (8009134 <returnpage+0x288>)
 8008ee0:	f01d fc38 	bl	8026754 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ee4:	4b94      	ldr	r3, [pc, #592]	; (8009138 <returnpage+0x28c>)
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	aa04      	add	r2, sp, #16
 8008eea:	4994      	ldr	r1, [pc, #592]	; (800913c <returnpage+0x290>)
			s1[0] = '\0';
 8008eec:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
			nconv = sscanf(content, "%5u%48s%u%255s", &sn, udp_target, &p1, &p2);
 8008ef0:	e9cd 7800 	strd	r7, r8, [sp]
 8008ef4:	f01d fe38 	bl	8026b68 <siscanf>
 8008ef8:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8008efa:	9b05      	ldr	r3, [sp, #20]
 8008efc:	3301      	adds	r3, #1
 8008efe:	f000 80de 	beq.w	80090be <returnpage+0x212>
				switch (nconv) {
 8008f02:	9b05      	ldr	r3, [sp, #20]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	f200 8100 	bhi.w	800910c <returnpage+0x260>
 8008f0c:	e8df f003 	tbb	[pc, r3]
 8008f10:	56025053 	.word	0x56025053
 8008f14:	f10d 0818 	add.w	r8, sp, #24
					if (p1 == 1) {		// reboot
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	f000 80eb 	beq.w	80090f6 <returnpage+0x24a>
					if (p1 == 2) {		// freeze the UDP streaming
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 8008f24:	4b86      	ldr	r3, [pc, #536]	; (8009140 <returnpage+0x294>)
					if (p1 == 2) {		// freeze the UDP streaming
 8008f26:	f000 80e0 	beq.w	80090ea <returnpage+0x23e>
						globalfreeze = 0;
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8008f2e:	4882      	ldr	r0, [pc, #520]	; (8009138 <returnpage+0x28c>)
 8008f30:	f7f7 f990 	bl	8000254 <strlen>
 8008f34:	2806      	cmp	r0, #6
 8008f36:	f240 80ca 	bls.w	80090ce <returnpage+0x222>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8008f3a:	497f      	ldr	r1, [pc, #508]	; (8009138 <returnpage+0x28c>)
 8008f3c:	4881      	ldr	r0, [pc, #516]	; (8009144 <returnpage+0x298>)
 8008f3e:	f01d fc09 	bl	8026754 <iprintf>
					if (statuspkt.uid != sn) {
 8008f42:	4c81      	ldr	r4, [pc, #516]	; (8009148 <returnpage+0x29c>)
 8008f44:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008f48:	9a04      	ldr	r2, [sp, #16]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <returnpage+0xb8>
						statuspkt.uid = sn;
 8008f50:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008f52:	487e      	ldr	r0, [pc, #504]	; (800914c <returnpage+0x2a0>)
						statuspkt.uid = sn;
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8008f5a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f5e:	b289      	uxth	r1, r1
 8008f60:	f01d fbf8 	bl	8026754 <iprintf>
			if (!res) {		// build changed?
 8008f64:	f8d8 3000 	ldr.w	r3, [r8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 80a0 	beq.w	80090ae <returnpage+0x202>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO) && (http_downloading == NOT_LOADING)) {// the stm firmware version advertised is different to this one running now
 8008f6e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008f72:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d0a3      	beq.n	8008ec4 <returnpage+0x18>
 8008f7c:	4a74      	ldr	r2, [pc, #464]	; (8009150 <returnpage+0x2a4>)
 8008f7e:	f242 7330 	movw	r3, #10032	; 0x2730
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d09d      	beq.n	8008ec4 <returnpage+0x18>
 8008f88:	4b72      	ldr	r3, [pc, #456]	; (8009154 <returnpage+0x2a8>)
 8008f8a:	681c      	ldr	r4, [r3, #0]
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	d199      	bne.n	8008ec4 <returnpage+0x18>
				if (lptask_init_done == 0) {		// if running, reboot before trying to load
 8008f90:	4b71      	ldr	r3, [pc, #452]	; (8009158 <returnpage+0x2ac>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 80a1 	bne.w	80090dc <returnpage+0x230>
					osDelay(1000);
 8008f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f9e:	f00d fb5b 	bl	8016658 <osDelay>
					httploader(fwfilename, loaderhost, crc1, crc2);
 8008fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa4:	496d      	ldr	r1, [pc, #436]	; (800915c <returnpage+0x2b0>)
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa8:	486d      	ldr	r0, [pc, #436]	; (8009160 <returnpage+0x2b4>)
 8008faa:	f7f8 ff21 	bl	8001df0 <httploader>
 8008fae:	e789      	b.n	8008ec4 <returnpage+0x18>
 8008fb0:	f10d 0818 	add.w	r8, sp, #24
 8008fb4:	e7bb      	b.n	8008f2e <returnpage+0x82>
 8008fb6:	f10d 0818 	add.w	r8, sp, #24
 8008fba:	e7c2      	b.n	8008f42 <returnpage+0x96>
					if (p2[0] == '{') {		// its the start of enclosed params
 8008fbc:	f898 3000 	ldrb.w	r3, [r8]
						res = 0;
 8008fc0:	f10d 0818 	add.w	r8, sp, #24
					if (p2[0] == '{') {		// its the start of enclosed params
 8008fc4:	2b7b      	cmp	r3, #123	; 0x7b
 8008fc6:	d1a7      	bne.n	8008f18 <returnpage+0x6c>
						res = 0;
 8008fc8:	2300      	movs	r3, #0
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4965      	ldr	r1, [pc, #404]	; (8009164 <returnpage+0x2b8>)
 8008fce:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res = 0;
 8008fd2:	f8c8 3000 	str.w	r3, [r8]
						res2 = 0;
 8008fd6:	9307      	str	r3, [sp, #28]
						res3 = 0;
 8008fd8:	9308      	str	r3, [sp, #32]
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fda:	4b61      	ldr	r3, [pc, #388]	; (8009160 <returnpage+0x2b4>)
 8008fdc:	f7ff ff02 	bl	8008de4 <parsep2>
 8008fe0:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	4960      	ldr	r1, [pc, #384]	; (8009168 <returnpage+0x2bc>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fe8:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008fea:	4b59      	ldr	r3, [pc, #356]	; (8009150 <returnpage+0x2a4>)
						res |= parsep2(&p2[1], "fw", 1, fwfilename);
 8008fec:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8008ff0:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8008ff4:	f7ff fef6 	bl	8008de4 <parsep2>
 8008ff8:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	495b      	ldr	r1, [pc, #364]	; (800916c <returnpage+0x2c0>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8009000:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8009002:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8009004:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8009008:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 800900c:	f7ff feea 	bl	8008de4 <parsep2>
 8009010:	f8d8 3000 	ldr.w	r3, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8009014:	2203      	movs	r2, #3
 8009016:	4956      	ldr	r1, [pc, #344]	; (8009170 <returnpage+0x2c4>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8009018:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 800901a:	ab0b      	add	r3, sp, #44	; 0x2c
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 800901c:	f8c8 0000 	str.w	r0, [r8]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8009020:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009024:	f7ff fede 	bl	8008de4 <parsep2>
 8009028:	f8d8 3000 	ldr.w	r3, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 800902c:	2201      	movs	r2, #1
 800902e:	4951      	ldr	r1, [pc, #324]	; (8009174 <returnpage+0x2c8>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8009030:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009032:	4b4a      	ldr	r3, [pc, #296]	; (800915c <returnpage+0x2b0>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8009034:	f8c8 0000 	str.w	r0, [r8]
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009038:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 800903c:	f7ff fed2 	bl	8008de4 <parsep2>
 8009040:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009042:	ab0d      	add	r3, sp, #52	; 0x34
 8009044:	494c      	ldr	r1, [pc, #304]	; (8009178 <returnpage+0x2cc>)
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 8009046:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8009048:	2203      	movs	r2, #3
						res2 |= parsep2(&p2[1], "srv", 1, &loaderhost);
 800904a:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800904c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009050:	f7ff fec8 	bl	8008de4 <parsep2>
 8009054:	9a07      	ldr	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009056:	ab0e      	add	r3, sp, #56	; 0x38
 8009058:	4948      	ldr	r1, [pc, #288]	; (800917c <returnpage+0x2d0>)
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800905a:	4310      	orrs	r0, r2
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 800905c:	2201      	movs	r2, #1
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800905e:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009060:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009064:	f7ff febe 	bl	8008de4 <parsep2>
 8009068:	9b07      	ldr	r3, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 800906a:	2201      	movs	r2, #1
 800906c:	4944      	ldr	r1, [pc, #272]	; (8009180 <returnpage+0x2d4>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 800906e:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009070:	4b44      	ldr	r3, [pc, #272]	; (8009184 <returnpage+0x2d8>)
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8009072:	9007      	str	r0, [sp, #28]
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009074:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8009078:	f7ff feb4 	bl	8008de4 <parsep2>
 800907c:	9b08      	ldr	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 800907e:	2202      	movs	r2, #2
 8009080:	4941      	ldr	r1, [pc, #260]	; (8009188 <returnpage+0x2dc>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009082:	4318      	orrs	r0, r3
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8009084:	4b41      	ldr	r3, [pc, #260]	; (800918c <returnpage+0x2e0>)
						res3 |= parsep2(&p2[1], "lcd", 1, lcdfile);
 8009086:	9008      	str	r0, [sp, #32]
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 8009088:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 800908c:	f7ff feaa 	bl	8008de4 <parsep2>
 8009090:	9a08      	ldr	r2, [sp, #32]
 8009092:	4603      	mov	r3, r0
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 8009094:	493e      	ldr	r1, [pc, #248]	; (8009190 <returnpage+0x2e4>)
 8009096:	f10d 0049 	add.w	r0, sp, #73	; 0x49
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 800909a:	4313      	orrs	r3, r2
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 800909c:	2202      	movs	r2, #2
						res3 |= parsep2(&p2[1], "lbl", 2, &lcdbuildno);
 800909e:	9308      	str	r3, [sp, #32]
						res3 |= parsep2(&p2[1], "siz", 2, &lcdlen);
 80090a0:	4b3c      	ldr	r3, [pc, #240]	; (8009194 <returnpage+0x2e8>)
 80090a2:	f7ff fe9f 	bl	8008de4 <parsep2>
 80090a6:	9b08      	ldr	r3, [sp, #32]
 80090a8:	4318      	orrs	r0, r3
 80090aa:	9008      	str	r0, [sp, #32]
 80090ac:	e734      	b.n	8008f18 <returnpage+0x6c>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 80090ae:	4b28      	ldr	r3, [pc, #160]	; (8009150 <returnpage+0x2a4>)
 80090b0:	f242 7130 	movw	r1, #10032	; 0x2730
 80090b4:	4838      	ldr	r0, [pc, #224]	; (8009198 <returnpage+0x2ec>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	f01d fb4c 	bl	8026754 <iprintf>
 80090bc:	e757      	b.n	8008f6e <returnpage+0xc2>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 80090be:	4629      	mov	r1, r5
 80090c0:	4836      	ldr	r0, [pc, #216]	; (800919c <returnpage+0x2f0>)
 80090c2:	f10d 0818 	add.w	r8, sp, #24
 80090c6:	4c20      	ldr	r4, [pc, #128]	; (8009148 <returnpage+0x29c>)
 80090c8:	f01d fb44 	bl	8026754 <iprintf>
 80090cc:	e74a      	b.n	8008f64 <returnpage+0xb8>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 80090ce:	4d34      	ldr	r5, [pc, #208]	; (80091a0 <returnpage+0x2f4>)
 80090d0:	4c19      	ldr	r4, [pc, #100]	; (8009138 <returnpage+0x28c>)
 80090d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	e72e      	b.n	8008f3a <returnpage+0x8e>
					printf("Rebooting before loading new firmware, wait...\n");
 80090dc:	4831      	ldr	r0, [pc, #196]	; (80091a4 <returnpage+0x2f8>)
 80090de:	f01d fbd5 	bl	802688c <puts>
					rebootme(0);
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7fa fe60 	bl	8003da8 <rebootme>
 80090e8:	e6ec      	b.n	8008ec4 <returnpage+0x18>
						globalfreeze = 1;
 80090ea:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 80090ec:	482e      	ldr	r0, [pc, #184]	; (80091a8 <returnpage+0x2fc>)
						globalfreeze = 1;
 80090ee:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 80090f0:	f01d fbcc 	bl	802688c <puts>
 80090f4:	e71b      	b.n	8008f2e <returnpage+0x82>
						printf("Server -> commands a reboot...\n");
 80090f6:	482d      	ldr	r0, [pc, #180]	; (80091ac <returnpage+0x300>)
 80090f8:	f01d fbc8 	bl	802688c <puts>
						osDelay(500);
 80090fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009100:	f00d faaa 	bl	8016658 <osDelay>
						rebootme(6);
 8009104:	2006      	movs	r0, #6
 8009106:	f7fa fe4f 	bl	8003da8 <rebootme>
 800910a:	e709      	b.n	8008f20 <returnpage+0x74>
					printf("Wrong number of params from Server -> %d\n", nconv);
 800910c:	9905      	ldr	r1, [sp, #20]
 800910e:	f10d 0818 	add.w	r8, sp, #24
 8009112:	4827      	ldr	r0, [pc, #156]	; (80091b0 <returnpage+0x304>)
 8009114:	f01d fb1e 	bl	8026754 <iprintf>
					down_total = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	4a26      	ldr	r2, [pc, #152]	; (80091b4 <returnpage+0x308>)
					nxt_abort = 1;
 800911c:	4926      	ldr	r1, [pc, #152]	; (80091b8 <returnpage+0x30c>)
					down_total = 0;
 800911e:	6013      	str	r3, [r2, #0]
					nxt_abort = 1;
 8009120:	2201      	movs	r2, #1
 8009122:	4c09      	ldr	r4, [pc, #36]	; (8009148 <returnpage+0x29c>)
 8009124:	600a      	str	r2, [r1, #0]
					flash_abort = 1;
 8009126:	4925      	ldr	r1, [pc, #148]	; (80091bc <returnpage+0x310>)
 8009128:	600a      	str	r2, [r1, #0]
					http_downloading = NOT_LOADING;
 800912a:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <returnpage+0x2a8>)
 800912c:	6013      	str	r3, [r2, #0]
					break;
 800912e:	e719      	b.n	8008f64 <returnpage+0xb8>
 8009130:	20003488 	.word	0x20003488
 8009134:	0802de88 	.word	0x0802de88
 8009138:	200034d8 	.word	0x200034d8
 800913c:	0802dea0 	.word	0x0802dea0
 8009140:	20003464 	.word	0x20003464
 8009144:	0802df28 	.word	0x0802df28
 8009148:	20003014 	.word	0x20003014
 800914c:	0802df48 	.word	0x0802df48
 8009150:	20002ddc 	.word	0x20002ddc
 8009154:	200018bc 	.word	0x200018bc
 8009158:	20002dc0 	.word	0x20002dc0
 800915c:	2000001c 	.word	0x2000001c
 8009160:	20001a30 	.word	0x20001a30
 8009164:	0802deb0 	.word	0x0802deb0
 8009168:	0802deb4 	.word	0x0802deb4
 800916c:	0802deb8 	.word	0x0802deb8
 8009170:	0802dec0 	.word	0x0802dec0
 8009174:	0802dec8 	.word	0x0802dec8
 8009178:	0802decc 	.word	0x0802decc
 800917c:	0802ded0 	.word	0x0802ded0
 8009180:	0802ded4 	.word	0x0802ded4
 8009184:	20001a74 	.word	0x20001a74
 8009188:	0802ded8 	.word	0x0802ded8
 800918c:	20002dbc 	.word	0x20002dbc
 8009190:	0802dedc 	.word	0x0802dedc
 8009194:	20001a94 	.word	0x20001a94
 8009198:	0802dfbc 	.word	0x0802dfbc
 800919c:	0802df94 	.word	0x0802df94
 80091a0:	0802b704 	.word	0x0802b704
 80091a4:	0802dff0 	.word	0x0802dff0
 80091a8:	0802df00 	.word	0x0802df00
 80091ac:	0802dee0 	.word	0x0802dee0
 80091b0:	0802df68 	.word	0x0802df68
 80091b4:	20001670 	.word	0x20001670
 80091b8:	200030e8 	.word	0x200030e8
 80091bc:	20000854 	.word	0x20000854

080091c0 <initialapisn>:
	int i, j;
	char localip[24];
	char params[48];

	j = 1;
	sprintf(localip,"%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,(myip & 0xFF000000) >> 24);
 80091c0:	4b35      	ldr	r3, [pc, #212]	; (8009298 <initialapisn+0xd8>)
 80091c2:	4936      	ldr	r1, [pc, #216]	; (800929c <initialapisn+0xdc>)
 80091c4:	681a      	ldr	r2, [r3, #0]
void initialapisn() {
 80091c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sprintf(localip,"%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,(myip & 0xFF000000) >> 24);
 80091ca:	0e13      	lsrs	r3, r2, #24
void initialapisn() {
 80091cc:	b096      	sub	sp, #88	; 0x58
	sprintf(params,"?bld=%d\&ip=%s",BUILDNO,localip);
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);

	strcat(stmuid,params);

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80091ce:	4d34      	ldr	r5, [pc, #208]	; (80092a0 <initialapisn+0xe0>)
	sprintf(localip,"%d:%d:%d:%d", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,(myip & 0xFF000000) >> 24);
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80091d6:	a804      	add	r0, sp, #16
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	f01d fca2 	bl	8026b28 <siprintf>
	sprintf(params,"?bld=%d\&ip=%s",BUILDNO,localip);
 80091e4:	ab04      	add	r3, sp, #16
 80091e6:	f242 7230 	movw	r2, #10032	; 0x2730
 80091ea:	492e      	ldr	r1, [pc, #184]	; (80092a4 <initialapisn+0xe4>)
 80091ec:	a80a      	add	r0, sp, #40	; 0x28
 80091ee:	f01d fc9b 	bl	8026b28 <siprintf>
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80091f2:	492d      	ldr	r1, [pc, #180]	; (80092a8 <initialapisn+0xe8>)
 80091f4:	482d      	ldr	r0, [pc, #180]	; (80092ac <initialapisn+0xec>)
 80091f6:	f8d1 3424 	ldr.w	r3, [r1, #1060]	; 0x424
 80091fa:	f8d1 2420 	ldr.w	r2, [r1, #1056]	; 0x420
 80091fe:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
 8009202:	9100      	str	r1, [sp, #0]
 8009204:	492a      	ldr	r1, [pc, #168]	; (80092b0 <initialapisn+0xf0>)
 8009206:	f01d fc8f 	bl	8026b28 <siprintf>
	strcat(stmuid,params);
 800920a:	a90a      	add	r1, sp, #40	; 0x28
 800920c:	4827      	ldr	r0, [pc, #156]	; (80092ac <initialapisn+0xec>)
 800920e:	f01d fd25 	bl	8026c5c <strcat>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8009212:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009216:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 800921a:	b29b      	uxth	r3, r3
 800921c:	4293      	cmp	r3, r2
 800921e:	d130      	bne.n	8009282 <initialapisn+0xc2>
	j = 1;
 8009220:	2701      	movs	r7, #1
	{
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT,j);
 8009222:	f8df a094 	ldr.w	sl, [pc, #148]	; 80092b8 <initialapisn+0xf8>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009226:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80092bc <initialapisn+0xfc>
 800922a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80092c0 <initialapisn+0x100>
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT,j);
 800922e:	463a      	mov	r2, r7
 8009230:	f641 7193 	movw	r1, #8083	; 0x1f93
 8009234:	4650      	mov	r0, sl
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8009236:	f241 3488 	movw	r4, #5000	; 0x1388
		printf("getting params from server on port %d Try=%d\n", DOWNLOAD_PORT,j);
 800923a:	f01d fa8b 	bl	8026754 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 800923e:	4641      	mov	r1, r8
 8009240:	4648      	mov	r0, r9
		getpage(stmuid);		// get sn and targ
		for (i = 0; i < 5000; i++) {
			if (statuspkt.uid != 0xfeed)
 8009242:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8009246:	f01d fa85 	bl	8026754 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 800924a:	2300      	movs	r3, #0
 800924c:	4917      	ldr	r1, [pc, #92]	; (80092ac <initialapisn+0xec>)
 800924e:	4640      	mov	r0, r8
 8009250:	461a      	mov	r2, r3
 8009252:	f7f8 fd5f 	bl	8001d14 <hc_open>
 8009256:	9003      	str	r0, [sp, #12]
		for (i = 0; i < 5000; i++) {
 8009258:	e003      	b.n	8009262 <initialapisn+0xa2>
				break;
			osDelay(1);
 800925a:	f00d f9fd 	bl	8016658 <osDelay>
		for (i = 0; i < 5000; i++) {
 800925e:	3c01      	subs	r4, #1
 8009260:	d005      	beq.n	800926e <initialapisn+0xae>
			if (statuspkt.uid != 0xfeed)
 8009262:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 8009266:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8009268:	b29b      	uxth	r3, r3
 800926a:	42b3      	cmp	r3, r6
 800926c:	d0f5      	beq.n	800925a <initialapisn+0x9a>
		}
		j++;
 800926e:	3701      	adds	r7, #1
		if (j > 5) {
 8009270:	2f05      	cmp	r7, #5
 8009272:	dc09      	bgt.n	8009288 <initialapisn+0xc8>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8009274:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009278:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 800927c:	b29b      	uxth	r3, r3
 800927e:	4293      	cmp	r3, r2
 8009280:	d0d5      	beq.n	800922e <initialapisn+0x6e>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 8009282:	b016      	add	sp, #88	; 0x58
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8009288:	480a      	ldr	r0, [pc, #40]	; (80092b4 <initialapisn+0xf4>)
 800928a:	f01d faff 	bl	802688c <puts>
			rebootme(8);
 800928e:	2008      	movs	r0, #8
 8009290:	f7fa fd8a 	bl	8003da8 <rebootme>
 8009294:	e7ee      	b.n	8009274 <initialapisn+0xb4>
 8009296:	bf00      	nop
 8009298:	20002dd4 	.word	0x20002dd4
 800929c:	0802e038 	.word	0x0802e038
 80092a0:	20003014 	.word	0x20003014
 80092a4:	0802e044 	.word	0x0802e044
 80092a8:	1ff0f000 	.word	0x1ff0f000
 80092ac:	20003490 	.word	0x20003490
 80092b0:	0802e054 	.word	0x0802e054
 80092b4:	0802e09c 	.word	0x0802e09c
 80092b8:	0802e06c 	.word	0x0802e06c
 80092bc:	0802b704 	.word	0x0802b704
 80092c0:	0802e020 	.word	0x0802e020

080092c4 <requestapisn>:

void requestapisn() {
 80092c4:	b510      	push	{r4, lr}
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80092c6:	4c0a      	ldr	r4, [pc, #40]	; (80092f0 <requestapisn+0x2c>)
void requestapisn() {
 80092c8:	b082      	sub	sp, #8
	printf("updating params from server on port %d\n",DOWNLOAD_PORT);
 80092ca:	f641 7193 	movw	r1, #8083	; 0x1f93
 80092ce:	4809      	ldr	r0, [pc, #36]	; (80092f4 <requestapisn+0x30>)
 80092d0:	f01d fa40 	bl	8026754 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 80092d4:	4621      	mov	r1, r4
 80092d6:	4808      	ldr	r0, [pc, #32]	; (80092f8 <requestapisn+0x34>)
 80092d8:	f01d fa3c 	bl	8026754 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80092dc:	2300      	movs	r3, #0
 80092de:	4907      	ldr	r1, [pc, #28]	; (80092fc <requestapisn+0x38>)
 80092e0:	4620      	mov	r0, r4
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 fd16 	bl	8001d14 <hc_open>
 80092e8:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 80092ea:	b002      	add	sp, #8
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	0802b704 	.word	0x0802b704
 80092f4:	0802e0c4 	.word	0x0802e0c4
 80092f8:	0802e020 	.word	0x0802e020
 80092fc:	20003490 	.word	0x20003490

08009300 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009302:	e003      	b.n	800930c <LoopCopyDataInit>

08009304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8009306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800930a:	3104      	adds	r1, #4

0800930c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800930c:	480a      	ldr	r0, [pc, #40]	; (8009338 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800930e:	4b0b      	ldr	r3, [pc, #44]	; (800933c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8009310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009314:	d3f6      	bcc.n	8009304 <CopyDataInit>
  ldr  r2, =_sbss
 8009316:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8009318:	e002      	b.n	8009320 <LoopFillZerobss>

0800931a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800931a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800931c:	f842 3b04 	str.w	r3, [r2], #4

08009320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009320:	4b08      	ldr	r3, [pc, #32]	; (8009344 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8009322:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009324:	d3f9      	bcc.n	800931a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009326:	f7ff f8d9 	bl	80084dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800932a:	f01c f8f1 	bl	8025510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800932e:	f7fb fae5 	bl	80048fc <main>
  bx  lr    
 8009332:	4770      	bx	lr
  ldr  r3, =_sidata
 8009334:	08047e24 	.word	0x08047e24
  ldr  r0, =_sdata
 8009338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800933c:	200006d4 	.word	0x200006d4
  ldr  r2, =_sbss
 8009340:	200006d8 	.word	0x200006d8
  ldr  r3, = _ebss
 8009344:	2003010c 	.word	0x2003010c

08009348 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009348:	e7fe      	b.n	8009348 <CAN1_RX0_IRQHandler>
 800934a:	Address 0x000000000800934a is out of bounds.


0800934c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800934c:	4a07      	ldr	r2, [pc, #28]	; (800936c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800934e:	2003      	movs	r0, #3
{
 8009350:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009358:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800935a:	f000 fc4f 	bl	8009bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800935e:	2000      	movs	r0, #0
 8009360:	f7fe ff88 	bl	8008274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009364:	f7fe f806 	bl	8007374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009368:	2000      	movs	r0, #0
 800936a:	bd08      	pop	{r3, pc}
 800936c:	40023c00 	.word	0x40023c00

08009370 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009370:	4a03      	ldr	r2, [pc, #12]	; (8009380 <HAL_IncTick+0x10>)
 8009372:	4b04      	ldr	r3, [pc, #16]	; (8009384 <HAL_IncTick+0x14>)
 8009374:	6811      	ldr	r1, [r2, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	440b      	add	r3, r1
 800937a:	6013      	str	r3, [r2, #0]
}
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20003518 	.word	0x20003518
 8009384:	200002f4 	.word	0x200002f4

08009388 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009388:	4b01      	ldr	r3, [pc, #4]	; (8009390 <HAL_GetTick+0x8>)
 800938a:	6818      	ldr	r0, [r3, #0]
}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	20003518 	.word	0x20003518

08009394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009398:	f7ff fff6 	bl	8009388 <HAL_GetTick>
 800939c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800939e:	1c63      	adds	r3, r4, #1
 80093a0:	d002      	beq.n	80093a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <HAL_Delay+0x20>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80093a8:	f7ff ffee 	bl	8009388 <HAL_GetTick>
 80093ac:	1b43      	subs	r3, r0, r5
 80093ae:	42a3      	cmp	r3, r4
 80093b0:	d3fa      	bcc.n	80093a8 <HAL_Delay+0x14>
  {
  }
}
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	200002f4 	.word	0x200002f4

080093b8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f000 8144 	beq.w	8009646 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	49a7      	ldr	r1, [pc, #668]	; (8009660 <HAL_ADC_Init+0x2a8>)
 80093c2:	4aa8      	ldr	r2, [pc, #672]	; (8009664 <HAL_ADC_Init+0x2ac>)
 80093c4:	428b      	cmp	r3, r1
 80093c6:	bf18      	it	ne
 80093c8:	4293      	cmpne	r3, r2
{
 80093ca:	b570      	push	{r4, r5, r6, lr}
 80093cc:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80093ce:	d003      	beq.n	80093d8 <HAL_ADC_Init+0x20>
 80093d0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d177      	bne.n	80094c8 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80093de:	d17c      	bne.n	80094da <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80093e0:	68a3      	ldr	r3, [r4, #8]
 80093e2:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80093e6:	f040 8082 	bne.w	80094ee <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d84e      	bhi.n	800948e <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80093f0:	69a3      	ldr	r3, [r4, #24]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d845      	bhi.n	8009482 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80093f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80093f8:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80093fc:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8009400:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8009404:	bf18      	it	ne
 8009406:	2900      	cmpne	r1, #0
 8009408:	bf14      	ite	ne
 800940a:	2301      	movne	r3, #1
 800940c:	2300      	moveq	r3, #0
 800940e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8009412:	bf0c      	ite	eq
 8009414:	2300      	moveq	r3, #0
 8009416:	f003 0301 	andne.w	r3, r3, #1
 800941a:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800941e:	bf0c      	ite	eq
 8009420:	2300      	moveq	r3, #0
 8009422:	f003 0301 	andne.w	r3, r3, #1
 8009426:	b123      	cbz	r3, 8009432 <HAL_ADC_Init+0x7a>
 8009428:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 800942c:	2a01      	cmp	r2, #1
 800942e:	f200 8111 	bhi.w	8009654 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8009432:	68e3      	ldr	r3, [r4, #12]
 8009434:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8009438:	d165      	bne.n	8009506 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800943a:	69e3      	ldr	r3, [r4, #28]
 800943c:	3b01      	subs	r3, #1
 800943e:	2b0f      	cmp	r3, #15
 8009440:	d85b      	bhi.n	80094fa <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8009442:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009446:	2b01      	cmp	r3, #1
 8009448:	d830      	bhi.n	80094ac <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800944a:	6963      	ldr	r3, [r4, #20]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d835      	bhi.n	80094bc <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8009450:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d823      	bhi.n	80094a0 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009458:	4b83      	ldr	r3, [pc, #524]	; (8009668 <HAL_ADC_Init+0x2b0>)
 800945a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800945c:	429a      	cmp	r2, r3
 800945e:	d004      	beq.n	800946a <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8009460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009462:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8009466:	f040 80e8 	bne.w	800963a <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800946a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800946c:	2d00      	cmp	r5, #0
 800946e:	f000 80d4 	beq.w	800961a <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009474:	06db      	lsls	r3, r3, #27
 8009476:	d54c      	bpl.n	8009512 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009478:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800947a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800947c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8009480:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009482:	f240 1151 	movw	r1, #337	; 0x151
 8009486:	4879      	ldr	r0, [pc, #484]	; (800966c <HAL_ADC_Init+0x2b4>)
 8009488:	f7fc fa4c 	bl	8005924 <assert_failed>
 800948c:	e7b3      	b.n	80093f6 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800948e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8009492:	4876      	ldr	r0, [pc, #472]	; (800966c <HAL_ADC_Init+0x2b4>)
 8009494:	f7fc fa46 	bl	8005924 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009498:	69a3      	ldr	r3, [r4, #24]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d9ab      	bls.n	80093f6 <HAL_ADC_Init+0x3e>
 800949e:	e7f0      	b.n	8009482 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80094a0:	f240 1157 	movw	r1, #343	; 0x157
 80094a4:	4871      	ldr	r0, [pc, #452]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094a6:	f7fc fa3d 	bl	8005924 <assert_failed>
 80094aa:	e7d5      	b.n	8009458 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80094ac:	f240 1155 	movw	r1, #341	; 0x155
 80094b0:	486e      	ldr	r0, [pc, #440]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094b2:	f7fc fa37 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80094b6:	6963      	ldr	r3, [r4, #20]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d9c9      	bls.n	8009450 <HAL_ADC_Init+0x98>
 80094bc:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80094c0:	486a      	ldr	r0, [pc, #424]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094c2:	f7fc fa2f 	bl	8005924 <assert_failed>
 80094c6:	e7c3      	b.n	8009450 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80094c8:	f240 114d 	movw	r1, #333	; 0x14d
 80094cc:	4867      	ldr	r0, [pc, #412]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094ce:	f7fc fa29 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80094d2:	6863      	ldr	r3, [r4, #4]
 80094d4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80094d8:	d082      	beq.n	80093e0 <HAL_ADC_Init+0x28>
 80094da:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80094de:	4863      	ldr	r0, [pc, #396]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094e0:	f7fc fa20 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80094ea:	f43f af7e 	beq.w	80093ea <HAL_ADC_Init+0x32>
 80094ee:	f240 114f 	movw	r1, #335	; 0x14f
 80094f2:	485e      	ldr	r0, [pc, #376]	; (800966c <HAL_ADC_Init+0x2b4>)
 80094f4:	f7fc fa16 	bl	8005924 <assert_failed>
 80094f8:	e777      	b.n	80093ea <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80094fa:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80094fe:	485b      	ldr	r0, [pc, #364]	; (800966c <HAL_ADC_Init+0x2b4>)
 8009500:	f7fc fa10 	bl	8005924 <assert_failed>
 8009504:	e79d      	b.n	8009442 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8009506:	f240 1153 	movw	r1, #339	; 0x153
 800950a:	4858      	ldr	r0, [pc, #352]	; (800966c <HAL_ADC_Init+0x2b4>)
 800950c:	f7fc fa0a 	bl	8005924 <assert_failed>
 8009510:	e793      	b.n	800943a <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8009512:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009514:	4b56      	ldr	r3, [pc, #344]	; (8009670 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009516:	4a57      	ldr	r2, [pc, #348]	; (8009674 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8009518:	400b      	ands	r3, r1
 800951a:	f043 0302 	orr.w	r3, r3, #2
 800951e:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009520:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009522:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8009524:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8009528:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800952a:	6851      	ldr	r1, [r2, #4]
 800952c:	6860      	ldr	r0, [r4, #4]
 800952e:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009530:	484d      	ldr	r0, [pc, #308]	; (8009668 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009532:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009534:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009536:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009538:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800953c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009544:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009546:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800954e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009550:	6859      	ldr	r1, [r3, #4]
 8009552:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009554:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009556:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009558:	6899      	ldr	r1, [r3, #8]
 800955a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800955e:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009560:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009562:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009564:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009566:	ea42 0205 	orr.w	r2, r2, r5
 800956a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800956c:	d05c      	beq.n	8009628 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800956e:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009570:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009572:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8009576:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	4311      	orrs	r1, r2
 800957c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800957e:	6899      	ldr	r1, [r3, #8]
 8009580:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8009584:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	432a      	orrs	r2, r5
 800958a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800958c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800958e:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009590:	f021 0102 	bic.w	r1, r1, #2
 8009594:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800959c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800959e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d051      	beq.n	800964a <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80095a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80095a8:	3a01      	subs	r2, #1
 80095aa:	2a07      	cmp	r2, #7
 80095ac:	d864      	bhi.n	8009678 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80095ae:	6859      	ldr	r1, [r3, #4]
 80095b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80095b4:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80095b6:	6859      	ldr	r1, [r3, #4]
 80095b8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80095bc:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80095be:	6859      	ldr	r1, [r3, #4]
 80095c0:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80095c4:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80095c8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095ca:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095d0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095d2:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095d8:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095dc:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095de:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80095e0:	6899      	ldr	r1, [r3, #8]
 80095e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80095e6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80095e8:	6899      	ldr	r1, [r3, #8]
 80095ea:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80095ee:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80095f2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80095f4:	6899      	ldr	r1, [r3, #8]
 80095f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80095fa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8009602:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8009604:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8009606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	f043 0301 	orr.w	r3, r3, #1
 8009610:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8009612:	2300      	movs	r3, #0
 8009614:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009618:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800961a:	4620      	mov	r0, r4
 800961c:	f7fd fee2 	bl	80073e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8009620:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8009622:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8009626:	e724      	b.n	8009472 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800962e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009636:	609a      	str	r2, [r3, #8]
 8009638:	e7a8      	b.n	800958c <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800963a:	f240 115b 	movw	r1, #347	; 0x15b
 800963e:	480b      	ldr	r0, [pc, #44]	; (800966c <HAL_ADC_Init+0x2b4>)
 8009640:	f7fc f970 	bl	8005924 <assert_failed>
 8009644:	e711      	b.n	800946a <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8009646:	2001      	movs	r0, #1
}
 8009648:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009650:	605a      	str	r2, [r3, #4]
 8009652:	e7b8      	b.n	80095c6 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8009654:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8009658:	4804      	ldr	r0, [pc, #16]	; (800966c <HAL_ADC_Init+0x2b4>)
 800965a:	f7fc f963 	bl	8005924 <assert_failed>
 800965e:	e6e8      	b.n	8009432 <HAL_ADC_Init+0x7a>
 8009660:	40012000 	.word	0x40012000
 8009664:	40012100 	.word	0x40012100
 8009668:	0f000001 	.word	0x0f000001
 800966c:	0802e0ec 	.word	0x0802e0ec
 8009670:	ffffeefd 	.word	0xffffeefd
 8009674:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8009678:	f240 71ac 	movw	r1, #1964	; 0x7ac
 800967c:	4803      	ldr	r0, [pc, #12]	; (800968c <HAL_ADC_Init+0x2d4>)
 800967e:	f7fc f951 	bl	8005924 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009682:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009684:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009686:	3a01      	subs	r2, #1
 8009688:	e791      	b.n	80095ae <HAL_ADC_Init+0x1f6>
 800968a:	bf00      	nop
 800968c:	0802e0ec 	.word	0x0802e0ec

08009690 <HAL_ADC_Start>:
{
 8009690:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8009692:	2300      	movs	r3, #0
{
 8009694:	b082      	sub	sp, #8
 8009696:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8009698:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800969a:	6983      	ldr	r3, [r0, #24]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d904      	bls.n	80096aa <HAL_ADC_Start+0x1a>
 80096a0:	f240 21df 	movw	r1, #735	; 0x2df
 80096a4:	4848      	ldr	r0, [pc, #288]	; (80097c8 <HAL_ADC_Start+0x138>)
 80096a6:	f7fc f93d 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80096aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096ac:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80096b0:	d174      	bne.n	800979c <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 80096b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d079      	beq.n	80097ae <HAL_ADC_Start+0x11e>
 80096ba:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80096bc:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80096be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80096c2:	6893      	ldr	r3, [r2, #8]
 80096c4:	07d8      	lsls	r0, r3, #31
 80096c6:	d414      	bmi.n	80096f2 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096c8:	4b40      	ldr	r3, [pc, #256]	; (80097cc <HAL_ADC_Start+0x13c>)
 80096ca:	4841      	ldr	r0, [pc, #260]	; (80097d0 <HAL_ADC_Start+0x140>)
 80096cc:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80096ce:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096d0:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80096d4:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096d8:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80096da:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80096dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80096e0:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	b12b      	cbz	r3, 80096f2 <HAL_ADC_Start+0x62>
      counter--;
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1f9      	bne.n	80096e6 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80096f2:	6890      	ldr	r0, [r2, #8]
 80096f4:	f010 0001 	ands.w	r0, r0, #1
 80096f8:	d02c      	beq.n	8009754 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80096fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096fc:	4b35      	ldr	r3, [pc, #212]	; (80097d4 <HAL_ADC_Start+0x144>)
 80096fe:	400b      	ands	r3, r1
 8009700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009704:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009706:	6853      	ldr	r3, [r2, #4]
 8009708:	0559      	lsls	r1, r3, #21
 800970a:	d505      	bpl.n	8009718 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800970c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800970e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009716:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800971a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800971e:	d02f      	beq.n	8009780 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009720:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009722:	f023 0306 	bic.w	r3, r3, #6
 8009726:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009728:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800972c:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800972e:	4b2a      	ldr	r3, [pc, #168]	; (80097d8 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8009730:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009734:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009736:	6858      	ldr	r0, [r3, #4]
 8009738:	f010 001f 	ands.w	r0, r0, #31
 800973c:	d114      	bne.n	8009768 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800973e:	6893      	ldr	r3, [r2, #8]
 8009740:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009744:	d10e      	bne.n	8009764 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009746:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8009748:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800974a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800974e:	6091      	str	r1, [r2, #8]
}
 8009750:	b002      	add	sp, #8
 8009752:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009756:	f043 0310 	orr.w	r3, r3, #16
 800975a:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800975c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	6463      	str	r3, [r4, #68]	; 0x44
}
 8009764:	b002      	add	sp, #8
 8009766:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009768:	481c      	ldr	r0, [pc, #112]	; (80097dc <HAL_ADC_Start+0x14c>)
 800976a:	4282      	cmp	r2, r0
 800976c:	d00a      	beq.n	8009784 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800976e:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009770:	06db      	lsls	r3, r3, #27
 8009772:	d402      	bmi.n	800977a <HAL_ADC_Start+0xea>
 8009774:	4c1a      	ldr	r4, [pc, #104]	; (80097e0 <HAL_ADC_Start+0x150>)
 8009776:	42a2      	cmp	r2, r4
 8009778:	d01c      	beq.n	80097b4 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800977a:	2000      	movs	r0, #0
}
 800977c:	b002      	add	sp, #8
 800977e:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8009780:	6463      	str	r3, [r4, #68]	; 0x44
 8009782:	e7d1      	b.n	8009728 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009784:	6893      	ldr	r3, [r2, #8]
 8009786:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800978a:	d103      	bne.n	8009794 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800978c:	6893      	ldr	r3, [r2, #8]
 800978e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009792:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009794:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8009796:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009798:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800979a:	e7e3      	b.n	8009764 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800979c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80097a0:	4809      	ldr	r0, [pc, #36]	; (80097c8 <HAL_ADC_Start+0x138>)
 80097a2:	f7fc f8bf 	bl	8005924 <assert_failed>
  __HAL_LOCK(hadc);
 80097a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d185      	bne.n	80096ba <HAL_ADC_Start+0x2a>
 80097ae:	2002      	movs	r0, #2
}
 80097b0:	b002      	add	sp, #8
 80097b2:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80097b4:	68a0      	ldr	r0, [r4, #8]
 80097b6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80097ba:	d1de      	bne.n	800977a <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7ce      	b.n	8009764 <HAL_ADC_Start+0xd4>
 80097c6:	bf00      	nop
 80097c8:	0802e0ec 	.word	0x0802e0ec
 80097cc:	20000298 	.word	0x20000298
 80097d0:	431bde83 	.word	0x431bde83
 80097d4:	fffff8fe 	.word	0xfffff8fe
 80097d8:	40012300 	.word	0x40012300
 80097dc:	40012000 	.word	0x40012000
 80097e0:	40012200 	.word	0x40012200

080097e4 <HAL_ADC_ConvCpltCallback>:
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop

080097e8 <HAL_ADC_LevelOutOfWindowCallback>:
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop

080097ec <HAL_ADC_ErrorCallback>:
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop

080097f0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097f0:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80097f2:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097f4:	2a01      	cmp	r2, #1
{
 80097f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80097f8:	681d      	ldr	r5, [r3, #0]
{
 80097fa:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80097fc:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80097fe:	d904      	bls.n	800980a <HAL_ADC_IRQHandler+0x1a>
 8009800:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8009804:	4851      	ldr	r0, [pc, #324]	; (800994c <HAL_ADC_IRQHandler+0x15c>)
 8009806:	f7fc f88d 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800980a:	69e3      	ldr	r3, [r4, #28]
 800980c:	3b01      	subs	r3, #1
 800980e:	2b0f      	cmp	r3, #15
 8009810:	f200 8086 	bhi.w	8009920 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009814:	6963      	ldr	r3, [r4, #20]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d87c      	bhi.n	8009914 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 800981a:	07ab      	lsls	r3, r5, #30
 800981c:	d52c      	bpl.n	8009878 <HAL_ADC_IRQHandler+0x88>
 800981e:	06b0      	lsls	r0, r6, #26
 8009820:	d52a      	bpl.n	8009878 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009824:	06d9      	lsls	r1, r3, #27
 8009826:	d403      	bmi.n	8009830 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800982a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800982e:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8009838:	d117      	bne.n	800986a <HAL_ADC_IRQHandler+0x7a>
 800983a:	69a2      	ldr	r2, [r4, #24]
 800983c:	b9aa      	cbnz	r2, 800986a <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009840:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8009844:	d002      	beq.n	800984c <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009846:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009848:	0552      	lsls	r2, r2, #21
 800984a:	d40e      	bmi.n	800986a <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	f022 0220 	bic.w	r2, r2, #32
 8009852:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800985a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800985c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800985e:	04d8      	lsls	r0, r3, #19
 8009860:	d403      	bmi.n	800986a <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009864:	f043 0301 	orr.w	r3, r3, #1
 8009868:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800986a:	4620      	mov	r0, r4
 800986c:	f7ff ffba 	bl	80097e4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	f06f 0212 	mvn.w	r2, #18
 8009876:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8009878:	0769      	lsls	r1, r5, #29
 800987a:	d530      	bpl.n	80098de <HAL_ADC_IRQHandler+0xee>
 800987c:	0632      	lsls	r2, r6, #24
 800987e:	d52e      	bpl.n	80098de <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009882:	06db      	lsls	r3, r3, #27
 8009884:	d403      	bmi.n	800988e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800988c:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8009896:	d11b      	bne.n	80098d0 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800989a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800989e:	d151      	bne.n	8009944 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80098a0:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80098a2:	0551      	lsls	r1, r2, #21
 80098a4:	d414      	bmi.n	80098d0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80098a6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80098a8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80098ac:	d110      	bne.n	80098d0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80098ae:	69a2      	ldr	r2, [r4, #24]
 80098b0:	b972      	cbnz	r2, 80098d0 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098b8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80098ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80098c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c4:	05da      	lsls	r2, r3, #23
 80098c6:	d403      	bmi.n	80098d0 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 f92f 	bl	8009b34 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	f06f 020c 	mvn.w	r2, #12
 80098dc:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80098de:	0673      	lsls	r3, r6, #25
 80098e0:	d505      	bpl.n	80098ee <HAL_ADC_IRQHandler+0xfe>
 80098e2:	07e8      	lsls	r0, r5, #31
 80098e4:	d503      	bpl.n	80098ee <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	07d9      	lsls	r1, r3, #31
 80098ec:	d41e      	bmi.n	800992c <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80098ee:	06aa      	lsls	r2, r5, #26
 80098f0:	d501      	bpl.n	80098f6 <HAL_ADC_IRQHandler+0x106>
 80098f2:	0173      	lsls	r3, r6, #5
 80098f4:	d400      	bmi.n	80098f8 <HAL_ADC_IRQHandler+0x108>
}
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80098f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80098fa:	f06f 0520 	mvn.w	r5, #32
 80098fe:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8009900:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009908:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800990a:	f7ff ff6f 	bl	80097ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	601d      	str	r5, [r3, #0]
}
 8009912:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8009914:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8009918:	480c      	ldr	r0, [pc, #48]	; (800994c <HAL_ADC_IRQHandler+0x15c>)
 800991a:	f7fc f803 	bl	8005924 <assert_failed>
 800991e:	e77c      	b.n	800981a <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8009920:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8009924:	4809      	ldr	r0, [pc, #36]	; (800994c <HAL_ADC_IRQHandler+0x15c>)
 8009926:	f7fb fffd 	bl	8005924 <assert_failed>
 800992a:	e773      	b.n	8009814 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800992c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800992e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009934:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009936:	f7ff ff57 	bl	80097e8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	f06f 0201 	mvn.w	r2, #1
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	e7d4      	b.n	80098ee <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009944:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009946:	0550      	lsls	r0, r2, #21
 8009948:	d4c2      	bmi.n	80098d0 <HAL_ADC_IRQHandler+0xe0>
 800994a:	e7a9      	b.n	80098a0 <HAL_ADC_IRQHandler+0xb0>
 800994c:	0802e0ec 	.word	0x0802e0ec

08009950 <HAL_ADC_ConfigChannel>:
{
 8009950:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8009952:	2300      	movs	r3, #0
{
 8009954:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8009956:	4a71      	ldr	r2, [pc, #452]	; (8009b1c <HAL_ADC_ConfigChannel+0x1cc>)
{
 8009958:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 800995a:	9301      	str	r3, [sp, #4]
{
 800995c:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800995e:	680b      	ldr	r3, [r1, #0]
 8009960:	4293      	cmp	r3, r2
 8009962:	bf18      	it	ne
 8009964:	2b12      	cmpne	r3, #18
 8009966:	d902      	bls.n	800996e <HAL_ADC_ConfigChannel+0x1e>
 8009968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800996c:	d142      	bne.n	80099f4 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800996e:	6863      	ldr	r3, [r4, #4]
 8009970:	3b01      	subs	r3, #1
 8009972:	2b0f      	cmp	r3, #15
 8009974:	d847      	bhi.n	8009a06 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	2b07      	cmp	r3, #7
 800997a:	d84c      	bhi.n	8009a16 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800997c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d051      	beq.n	8009a28 <HAL_ADC_ConfigChannel+0xd8>
 8009984:	2301      	movs	r3, #1
 8009986:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800998a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800998c:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800998e:	2809      	cmp	r0, #9
 8009990:	d94d      	bls.n	8009a2e <HAL_ADC_ConfigChannel+0xde>
 8009992:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009996:	d04a      	beq.n	8009a2e <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009998:	b281      	uxth	r1, r0
 800999a:	f04f 0c07 	mov.w	ip, #7
 800999e:	68de      	ldr	r6, [r3, #12]
 80099a0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80099a4:	4f5d      	ldr	r7, [pc, #372]	; (8009b1c <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80099a6:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80099a8:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80099aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80099ae:	ea26 060c 	bic.w	r6, r6, ip
 80099b2:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80099b4:	f000 8083 	beq.w	8009abe <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80099b8:	68a6      	ldr	r6, [r4, #8]
 80099ba:	4096      	lsls	r6, r2
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	4316      	orrs	r6, r2
 80099c0:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80099c2:	6862      	ldr	r2, [r4, #4]
 80099c4:	2a06      	cmp	r2, #6
 80099c6:	d846      	bhi.n	8009a56 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80099c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099cc:	241f      	movs	r4, #31
 80099ce:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099d0:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80099d2:	4094      	lsls	r4, r2
 80099d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099d6:	ea22 0204 	bic.w	r2, r2, r4
 80099da:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099de:	4311      	orrs	r1, r2
 80099e0:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80099e2:	4a4f      	ldr	r2, [pc, #316]	; (8009b20 <HAL_ADC_ConfigChannel+0x1d0>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d048      	beq.n	8009a7a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 80099e8:	2300      	movs	r3, #0
  return HAL_OK;
 80099ea:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80099ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80099f0:	b003      	add	sp, #12
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80099f4:	f240 618b 	movw	r1, #1675	; 0x68b
 80099f8:	484a      	ldr	r0, [pc, #296]	; (8009b24 <HAL_ADC_ConfigChannel+0x1d4>)
 80099fa:	f7fb ff93 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	2b0f      	cmp	r3, #15
 8009a04:	d9b7      	bls.n	8009976 <HAL_ADC_ConfigChannel+0x26>
 8009a06:	f240 618c 	movw	r1, #1676	; 0x68c
 8009a0a:	4846      	ldr	r0, [pc, #280]	; (8009b24 <HAL_ADC_ConfigChannel+0x1d4>)
 8009a0c:	f7fb ff8a 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	d9b2      	bls.n	800997c <HAL_ADC_ConfigChannel+0x2c>
 8009a16:	f240 618d 	movw	r1, #1677	; 0x68d
 8009a1a:	4842      	ldr	r0, [pc, #264]	; (8009b24 <HAL_ADC_ConfigChannel+0x1d4>)
 8009a1c:	f7fb ff82 	bl	8005924 <assert_failed>
  __HAL_LOCK(hadc);
 8009a20:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d1ad      	bne.n	8009984 <HAL_ADC_ConfigChannel+0x34>
 8009a28:	2002      	movs	r0, #2
}
 8009a2a:	b003      	add	sp, #12
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a2e:	b281      	uxth	r1, r0
 8009a30:	f04f 0c07 	mov.w	ip, #7
 8009a34:	691e      	ldr	r6, [r3, #16]
 8009a36:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a3a:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a3c:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a40:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a44:	ea26 060c 	bic.w	r6, r6, ip
 8009a48:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a4a:	691e      	ldr	r6, [r3, #16]
 8009a4c:	4332      	orrs	r2, r6
 8009a4e:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8009a50:	6862      	ldr	r2, [r4, #4]
 8009a52:	2a06      	cmp	r2, #6
 8009a54:	d9b8      	bls.n	80099c8 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8009a56:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8009a5c:	d81c      	bhi.n	8009a98 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a5e:	3a23      	subs	r2, #35	; 0x23
 8009a60:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a62:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009a64:	4094      	lsls	r4, r2
 8009a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a68:	ea22 0204 	bic.w	r2, r2, r4
 8009a6c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a70:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a72:	4a2b      	ldr	r2, [pc, #172]	; (8009b20 <HAL_ADC_ConfigChannel+0x1d0>)
 8009a74:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009a76:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009a78:	d1b6      	bne.n	80099e8 <HAL_ADC_ConfigChannel+0x98>
 8009a7a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009a7e:	d017      	beq.n	8009ab0 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a80:	2812      	cmp	r0, #18
 8009a82:	d123      	bne.n	8009acc <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8009a84:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <HAL_ADC_ConfigChannel+0x1d8>)
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009a8c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009a94:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a96:	e7a7      	b.n	80099e8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a98:	3a41      	subs	r2, #65	; 0x41
 8009a9a:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a9c:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a9e:	4094      	lsls	r4, r2
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	ea22 0204 	bic.w	r2, r2, r4
 8009aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4311      	orrs	r1, r2
 8009aac:	62d9      	str	r1, [r3, #44]	; 0x2c
 8009aae:	e798      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8009ab0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8009ab4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009ab8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009abc:	e794      	b.n	80099e8 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009abe:	68a1      	ldr	r1, [r4, #8]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009ac6:	2112      	movs	r1, #18
 8009ac8:	60da      	str	r2, [r3, #12]
 8009aca:	e77a      	b.n	80099c2 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009acc:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <HAL_ADC_ConfigChannel+0x1cc>)
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	d001      	beq.n	8009ad6 <HAL_ADC_ConfigChannel+0x186>
 8009ad2:	2811      	cmp	r0, #17
 8009ad4:	d188      	bne.n	80099e8 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009ad8:	4910      	ldr	r1, [pc, #64]	; (8009b1c <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009ada:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009adc:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8009ade:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8009ae2:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009aea:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009aec:	f47f af7c 	bne.w	80099e8 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <HAL_ADC_ConfigChannel+0x1dc>)
 8009af2:	4a0f      	ldr	r2, [pc, #60]	; (8009b30 <HAL_ADC_ConfigChannel+0x1e0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	fba2 2303 	umull	r2, r3, r2, r3
 8009afa:	0c9b      	lsrs	r3, r3, #18
 8009afc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f43f af6e 	beq.w	80099e8 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f9      	bne.n	8009b0c <HAL_ADC_ConfigChannel+0x1bc>
 8009b18:	e766      	b.n	80099e8 <HAL_ADC_ConfigChannel+0x98>
 8009b1a:	bf00      	nop
 8009b1c:	10000012 	.word	0x10000012
 8009b20:	40012000 	.word	0x40012000
 8009b24:	0802e0ec 	.word	0x0802e0ec
 8009b28:	40012300 	.word	0x40012300
 8009b2c:	20000298 	.word	0x20000298
 8009b30:	431bde83 	.word	0x431bde83

08009b34 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop

08009b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009b38:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009b3a:	680b      	ldr	r3, [r1, #0]
{
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009b40:	2b19      	cmp	r3, #25
 8009b42:	d93e      	bls.n	8009bc2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8009b44:	f240 31af 	movw	r1, #943	; 0x3af
 8009b48:	4829      	ldr	r0, [pc, #164]	; (8009bf0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009b4a:	f7fb feeb 	bl	8005924 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009b4e:	6863      	ldr	r3, [r4, #4]
 8009b50:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009b54:	d13e      	bne.n	8009bd4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009b56:	68a3      	ldr	r3, [r4, #8]
 8009b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b60:	bf18      	it	ne
 8009b62:	2b00      	cmpne	r3, #0
 8009b64:	bf14      	ite	ne
 8009b66:	2201      	movne	r2, #1
 8009b68:	2200      	moveq	r2, #0
 8009b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6e:	bf0c      	ite	eq
 8009b70:	2200      	moveq	r2, #0
 8009b72:	f002 0201 	andne.w	r2, r2, #1
 8009b76:	b112      	cbz	r2, 8009b7e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b7c:	d132      	bne.n	8009be4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b7e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d02c      	beq.n	8009be0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8009b86:	4b1b      	ldr	r3, [pc, #108]	; (8009bf4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	f022 021f 	bic.w	r2, r2, #31
 8009b8e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	6821      	ldr	r1, [r4, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b9e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	6861      	ldr	r1, [r4, #4]
 8009ba4:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009ba6:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8009ba8:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009bb0:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009bb2:	68a0      	ldr	r0, [r4, #8]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8009bb8:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8009bba:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8009bbc:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009bc2:	4a0d      	ldr	r2, [pc, #52]	; (8009bf8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc8:	07db      	lsls	r3, r3, #31
 8009bca:	d5bb      	bpl.n	8009b44 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8009bd2:	d0c0      	beq.n	8009b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009bd4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8009bd8:	4805      	ldr	r0, [pc, #20]	; (8009bf0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009bda:	f7fb fea3 	bl	8005924 <assert_failed>
 8009bde:	e7ba      	b.n	8009b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8009be0:	2002      	movs	r0, #2
}
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8009be4:	f240 31b1 	movw	r1, #945	; 0x3b1
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8009bea:	f7fb fe9b 	bl	8005924 <assert_failed>
 8009bee:	e7c6      	b.n	8009b7e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009bf0:	0802e124 	.word	0x0802e124
 8009bf4:	40012300 	.word	0x40012300
 8009bf8:	02e602e7 	.word	0x02e602e7

08009bfc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009bfc:	1ec3      	subs	r3, r0, #3
 8009bfe:	2b04      	cmp	r3, #4
{
 8009c00:	b510      	push	{r4, lr}
 8009c02:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009c04:	d80c      	bhi.n	8009c20 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c06:	4909      	ldr	r1, [pc, #36]	; (8009c2c <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c08:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c0a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8009c0e:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c10:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c12:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c16:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c18:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8009c1a:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8009c1c:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009c1e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009c20:	2191      	movs	r1, #145	; 0x91
 8009c22:	4804      	ldr	r0, [pc, #16]	; (8009c34 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8009c24:	f7fb fe7e 	bl	8005924 <assert_failed>
 8009c28:	e7ed      	b.n	8009c06 <HAL_NVIC_SetPriorityGrouping+0xa>
 8009c2a:	bf00      	nop
 8009c2c:	e000ed00 	.word	0xe000ed00
 8009c30:	05fa0000 	.word	0x05fa0000
 8009c34:	0802e160 	.word	0x0802e160

08009c38 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c38:	2a0f      	cmp	r2, #15
{ 
 8009c3a:	b570      	push	{r4, r5, r6, lr}
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	4605      	mov	r5, r0
 8009c40:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009c42:	d836      	bhi.n	8009cb2 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009c44:	2c0f      	cmp	r4, #15
 8009c46:	d82f      	bhi.n	8009ca8 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c48:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <HAL_NVIC_SetPriority+0x84>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c50:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c54:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c56:	2804      	cmp	r0, #4
 8009c58:	bf28      	it	cs
 8009c5a:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c5c:	2a06      	cmp	r2, #6
 8009c5e:	d918      	bls.n	8009c92 <HAL_NVIC_SetPriority+0x5a>
 8009c60:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	409a      	lsls	r2, r3
 8009c68:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c6c:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8009c70:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c72:	fa01 f100 	lsl.w	r1, r1, r0
 8009c76:	ea24 0401 	bic.w	r4, r4, r1
 8009c7a:	fa04 f403 	lsl.w	r4, r4, r3
 8009c7e:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8009c82:	db09      	blt.n	8009c98 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c84:	0124      	lsls	r4, r4, #4
 8009c86:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <HAL_NVIC_SetPriority+0x88>)
 8009c88:	b2e4      	uxtb	r4, r4
 8009c8a:	442b      	add	r3, r5
 8009c8c:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009c90:	bd70      	pop	{r4, r5, r6, pc}
 8009c92:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c94:	4633      	mov	r3, r6
 8009c96:	e7e9      	b.n	8009c6c <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c98:	f005 050f 	and.w	r5, r5, #15
 8009c9c:	0124      	lsls	r4, r4, #4
 8009c9e:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <HAL_NVIC_SetPriority+0x8c>)
 8009ca0:	b2e4      	uxtb	r4, r4
 8009ca2:	442b      	add	r3, r5
 8009ca4:	761c      	strb	r4, [r3, #24]
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009ca8:	21aa      	movs	r1, #170	; 0xaa
 8009caa:	4807      	ldr	r0, [pc, #28]	; (8009cc8 <HAL_NVIC_SetPriority+0x90>)
 8009cac:	f7fb fe3a 	bl	8005924 <assert_failed>
 8009cb0:	e7ca      	b.n	8009c48 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009cb2:	21a9      	movs	r1, #169	; 0xa9
 8009cb4:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <HAL_NVIC_SetPriority+0x90>)
 8009cb6:	f7fb fe35 	bl	8005924 <assert_failed>
 8009cba:	e7c3      	b.n	8009c44 <HAL_NVIC_SetPriority+0xc>
 8009cbc:	e000ed00 	.word	0xe000ed00
 8009cc0:	e000e100 	.word	0xe000e100
 8009cc4:	e000ecfc 	.word	0xe000ecfc
 8009cc8:	0802e160 	.word	0x0802e160

08009ccc <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	db08      	blt.n	8009ce2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cd0:	f000 011f 	and.w	r1, r0, #31
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	0940      	lsrs	r0, r0, #5
 8009cd8:	4a04      	ldr	r2, [pc, #16]	; (8009cec <HAL_NVIC_EnableIRQ+0x20>)
 8009cda:	408b      	lsls	r3, r1
 8009cdc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009ce0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009ce2:	21bd      	movs	r1, #189	; 0xbd
 8009ce4:	4802      	ldr	r0, [pc, #8]	; (8009cf0 <HAL_NVIC_EnableIRQ+0x24>)
 8009ce6:	f7fb be1d 	b.w	8005924 <assert_failed>
 8009cea:	bf00      	nop
 8009cec:	e000e100 	.word	0xe000e100
 8009cf0:	0802e160 	.word	0x0802e160

08009cf4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	db0e      	blt.n	8009d16 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cf8:	0943      	lsrs	r3, r0, #5
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f000 001f 	and.w	r0, r0, #31
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <HAL_NVIC_DisableIRQ+0x2c>)
 8009d02:	3320      	adds	r3, #32
 8009d04:	fa02 f000 	lsl.w	r0, r2, r0
 8009d08:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009d10:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009d14:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009d16:	21cd      	movs	r1, #205	; 0xcd
 8009d18:	4802      	ldr	r0, [pc, #8]	; (8009d24 <HAL_NVIC_DisableIRQ+0x30>)
 8009d1a:	f7fb be03 	b.w	8005924 <assert_failed>
 8009d1e:	bf00      	nop
 8009d20:	e000e100 	.word	0xe000e100
 8009d24:	0802e160 	.word	0x0802e160

08009d28 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d075      	beq.n	8009e18 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009d2c:	4b3b      	ldr	r3, [pc, #236]	; (8009e1c <HAL_CRC_Init+0xf4>)
 8009d2e:	6802      	ldr	r2, [r0, #0]
 8009d30:	429a      	cmp	r2, r3
{
 8009d32:	b510      	push	{r4, lr}
 8009d34:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009d36:	d003      	beq.n	8009d40 <HAL_CRC_Init+0x18>
 8009d38:	2170      	movs	r1, #112	; 0x70
 8009d3a:	4839      	ldr	r0, [pc, #228]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009d3c:	f7fb fdf2 	bl	8005924 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009d40:	7f63      	ldrb	r3, [r4, #29]
 8009d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d055      	beq.n	8009df6 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d4a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009d4c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d4e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009d50:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009d52:	d838      	bhi.n	8009dc6 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d13d      	bne.n	8009dd4 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	4a32      	ldr	r2, [pc, #200]	; (8009e24 <HAL_CRC_Init+0xfc>)
 8009d5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	f022 0218 	bic.w	r2, r2, #24
 8009d64:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009d66:	7963      	ldrb	r3, [r4, #5]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d83c      	bhi.n	8009de6 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009d6c:	b1e3      	cbz	r3, 8009da8 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009d6e:	6922      	ldr	r2, [r4, #16]
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009d74:	6962      	ldr	r2, [r4, #20]
 8009d76:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009d7a:	d11d      	bne.n	8009db8 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d7c:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d7e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d80:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8009d84:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d86:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009d8a:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009d8c:	d13d      	bne.n	8009e0a <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d8e:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d90:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d96:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d98:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d9a:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009d9c:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009d9e:	d82f      	bhi.n	8009e00 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009da0:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009da2:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8009da4:	7763      	strb	r3, [r4, #29]
}
 8009da6:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009da8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009db0:	6962      	ldr	r2, [r4, #20]
 8009db2:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8009db6:	d0e1      	beq.n	8009d7c <HAL_CRC_Init+0x54>
 8009db8:	219c      	movs	r1, #156	; 0x9c
 8009dba:	4819      	ldr	r0, [pc, #100]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009dbc:	f7fb fdb2 	bl	8005924 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009dc0:	6962      	ldr	r2, [r4, #20]
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	e7da      	b.n	8009d7c <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009dc6:	217e      	movs	r1, #126	; 0x7e
 8009dc8:	4815      	ldr	r0, [pc, #84]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009dca:	f7fb fdab 	bl	8005924 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009dce:	7923      	ldrb	r3, [r4, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0c1      	beq.n	8009d58 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009dda:	f000 f825 	bl	8009e28 <HAL_CRCEx_Polynomial_Set>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d0c1      	beq.n	8009d66 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8009de2:	2001      	movs	r0, #1
}
 8009de4:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009de6:	2190      	movs	r1, #144	; 0x90
 8009de8:	480d      	ldr	r0, [pc, #52]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009dea:	f7fb fd9b 	bl	8005924 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009dee:	7963      	ldrb	r3, [r4, #5]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1bc      	bne.n	8009d6e <HAL_CRC_Init+0x46>
 8009df4:	e7d8      	b.n	8009da8 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8009df6:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8009df8:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8009dfa:	f7fd fb95 	bl	8007528 <HAL_CRC_MspInit>
 8009dfe:	e7a4      	b.n	8009d4a <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009e00:	21a5      	movs	r1, #165	; 0xa5
 8009e02:	4807      	ldr	r0, [pc, #28]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009e04:	f7fb fd8e 	bl	8005924 <assert_failed>
 8009e08:	e7ca      	b.n	8009da0 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009e0a:	4805      	ldr	r0, [pc, #20]	; (8009e20 <HAL_CRC_Init+0xf8>)
 8009e0c:	21a0      	movs	r1, #160	; 0xa0
 8009e0e:	f7fb fd89 	bl	8005924 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	69a0      	ldr	r0, [r4, #24]
 8009e16:	e7ba      	b.n	8009d8e <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8009e18:	2001      	movs	r0, #1
}
 8009e1a:	4770      	bx	lr
 8009e1c:	40023000 	.word	0x40023000
 8009e20:	0802e19c 	.word	0x0802e19c
 8009e24:	04c11db7 	.word	0x04c11db7

08009e28 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009e28:	f032 0318 	bics.w	r3, r2, #24
{
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4616      	mov	r6, r2
 8009e30:	4605      	mov	r5, r0
 8009e32:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009e34:	d003      	beq.n	8009e3e <HAL_CRCEx_Polynomial_Set+0x16>
 8009e36:	215f      	movs	r1, #95	; 0x5f
 8009e38:	4818      	ldr	r0, [pc, #96]	; (8009e9c <HAL_CRCEx_Polynomial_Set+0x74>)
 8009e3a:	f7fb fd73 	bl	8005924 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009e3e:	231e      	movs	r3, #30
 8009e40:	e001      	b.n	8009e46 <HAL_CRCEx_Polynomial_Set+0x1e>
 8009e42:	3b01      	subs	r3, #1
 8009e44:	d315      	bcc.n	8009e72 <HAL_CRCEx_Polynomial_Set+0x4a>
 8009e46:	fa24 fc03 	lsr.w	ip, r4, r3
 8009e4a:	f01c 0f01 	tst.w	ip, #1
 8009e4e:	d0f8      	beq.n	8009e42 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8009e50:	2e18      	cmp	r6, #24
 8009e52:	d80f      	bhi.n	8009e74 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009e54:	e8df f006 	tbb	[pc, r6]
 8009e58:	0e0e0e12 	.word	0x0e0e0e12
 8009e5c:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e60:	0e0e0e1b 	.word	0x0e0e0e1b
 8009e64:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e68:	0e0e0e1e 	.word	0x0e0e0e1e
 8009e6c:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e70:	10          	.byte	0x10
 8009e71:	00          	.byte	0x00
 8009e72:	b11e      	cbz	r6, 8009e7c <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8009e74:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8009e78:	2b06      	cmp	r3, #6
 8009e7a:	d8fb      	bhi.n	8009e74 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e7c:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e7e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e80:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e82:	688b      	ldr	r3, [r1, #8]
 8009e84:	f023 0318 	bic.w	r3, r3, #24
 8009e88:	4333      	orrs	r3, r6
 8009e8a:	608b      	str	r3, [r1, #8]
}
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8009e8e:	2b0f      	cmp	r3, #15
 8009e90:	d9f4      	bls.n	8009e7c <HAL_CRCEx_Polynomial_Set+0x54>
 8009e92:	e7ef      	b.n	8009e74 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d9f1      	bls.n	8009e7c <HAL_CRCEx_Polynomial_Set+0x54>
 8009e98:	e7ec      	b.n	8009e74 <HAL_CRCEx_Polynomial_Set+0x4c>
 8009e9a:	bf00      	nop
 8009e9c:	0802e1d4 	.word	0x0802e1d4

08009ea0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8009ea0:	b1d8      	cbz	r0, 8009eda <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <HAL_DAC_Init+0x40>)
 8009ea4:	6802      	ldr	r2, [r0, #0]
 8009ea6:	429a      	cmp	r2, r3
{
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8009eac:	d004      	beq.n	8009eb8 <HAL_DAC_Init+0x18>
 8009eae:	f240 1115 	movw	r1, #277	; 0x115
 8009eb2:	480c      	ldr	r0, [pc, #48]	; (8009ee4 <HAL_DAC_Init+0x44>)
 8009eb4:	f7fb fd36 	bl	8005924 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009eb8:	7923      	ldrb	r3, [r4, #4]
 8009eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ebe:	b13b      	cbz	r3, 8009ed0 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009ec0:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ec2:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009ec4:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ec6:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8009ec8:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009eca:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8009ecc:	7122      	strb	r2, [r4, #4]
}
 8009ece:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8009ed0:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8009ed2:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8009ed4:	f7fd fb3e 	bl	8007554 <HAL_DAC_MspInit>
 8009ed8:	e7f2      	b.n	8009ec0 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8009eda:	2001      	movs	r0, #1
}
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	40007400 	.word	0x40007400
 8009ee4:	0802e210 	.word	0x0802e210

08009ee8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8009eee:	f031 0310 	bics.w	r3, r1, #16
{
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	4617      	mov	r7, r2
 8009ef8:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8009efa:	d16b      	bne.n	8009fd4 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8009efc:	f036 0304 	bics.w	r3, r6, #4
 8009f00:	d001      	beq.n	8009f06 <HAL_DAC_Start_DMA+0x1e>
 8009f02:	2e08      	cmp	r6, #8
 8009f04:	d15b      	bne.n	8009fbe <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8009f06:	7962      	ldrb	r2, [r4, #5]
 8009f08:	2a01      	cmp	r2, #1
 8009f0a:	d060      	beq.n	8009fce <HAL_DAC_Start_DMA+0xe6>
 8009f0c:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f0e:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8009f12:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f14:	2302      	movs	r3, #2
 8009f16:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8009f18:	bb35      	cbnz	r5, 8009f68 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f1a:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009f1c:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f1e:	4b39      	ldr	r3, [pc, #228]	; (800a004 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009f20:	4a39      	ldr	r2, [pc, #228]	; (800a008 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f22:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f24:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009f28:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009f2e:	4a37      	ldr	r2, [pc, #220]	; (800a00c <HAL_DAC_Start_DMA+0x124>)
 8009f30:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f32:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009f36:	d059      	beq.n	8009fec <HAL_DAC_Start_DMA+0x104>
 8009f38:	2e08      	cmp	r6, #8
 8009f3a:	d054      	beq.n	8009fe6 <HAL_DAC_Start_DMA+0xfe>
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	d04f      	beq.n	8009fe0 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f40:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f42:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f46:	4643      	mov	r3, r8
 8009f48:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f4a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8009f4e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f52:	f000 fbe3 	bl	800a71c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009f56:	2300      	movs	r3, #0
 8009f58:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8009f5a:	b330      	cbz	r0, 8009faa <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	f043 0304 	orr.w	r3, r3, #4
 8009f62:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f68:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8009f6a:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f6c:	4b28      	ldr	r3, [pc, #160]	; (800a010 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f6e:	4a29      	ldr	r2, [pc, #164]	; (800a014 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f70:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f72:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f76:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f7c:	4a26      	ldr	r2, [pc, #152]	; (800a018 <HAL_DAC_Start_DMA+0x130>)
 8009f7e:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f80:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8009f84:	d03b      	beq.n	8009ffe <HAL_DAC_Start_DMA+0x116>
 8009f86:	2e08      	cmp	r6, #8
 8009f88:	d036      	beq.n	8009ff8 <HAL_DAC_Start_DMA+0x110>
 8009f8a:	b396      	cbz	r6, 8009ff2 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f8c:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f8e:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f92:	4643      	mov	r3, r8
 8009f94:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f96:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8009f9a:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f9e:	f000 fbbd 	bl	800a71c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d1d8      	bne.n	8009f5c <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	f005 0110 	and.w	r1, r5, #16
 8009fb0:	2501      	movs	r5, #1
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	408d      	lsls	r5, r1
 8009fb6:	4315      	orrs	r5, r2
 8009fb8:	601d      	str	r5, [r3, #0]
}
 8009fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8009fbe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009fc2:	4816      	ldr	r0, [pc, #88]	; (800a01c <HAL_DAC_Start_DMA+0x134>)
 8009fc4:	f7fb fcae 	bl	8005924 <assert_failed>
  __HAL_LOCK(hdac);
 8009fc8:	7962      	ldrb	r2, [r4, #5]
 8009fca:	2a01      	cmp	r2, #1
 8009fcc:	d19e      	bne.n	8009f0c <HAL_DAC_Start_DMA+0x24>
 8009fce:	2002      	movs	r0, #2
}
 8009fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8009fd4:	f240 210f 	movw	r1, #527	; 0x20f
 8009fd8:	4810      	ldr	r0, [pc, #64]	; (800a01c <HAL_DAC_Start_DMA+0x134>)
 8009fda:	f7fb fca3 	bl	8005924 <assert_failed>
 8009fde:	e78d      	b.n	8009efc <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009fe0:	f10c 0208 	add.w	r2, ip, #8
        break;
 8009fe4:	e7ad      	b.n	8009f42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009fe6:	f10c 0210 	add.w	r2, ip, #16
        break;
 8009fea:	e7aa      	b.n	8009f42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009fec:	f10c 020c 	add.w	r2, ip, #12
        break;
 8009ff0:	e7a7      	b.n	8009f42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009ff2:	f10c 0214 	add.w	r2, ip, #20
        break;
 8009ff6:	e7ca      	b.n	8009f8e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009ff8:	f10c 021c 	add.w	r2, ip, #28
        break;
 8009ffc:	e7c7      	b.n	8009f8e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009ffe:	f10c 0218 	add.w	r2, ip, #24
        break;
 800a002:	e7c4      	b.n	8009f8e <HAL_DAC_Start_DMA+0xa6>
 800a004:	0800a0b1 	.word	0x0800a0b1
 800a008:	0800a0c5 	.word	0x0800a0c5
 800a00c:	0800a0d5 	.word	0x0800a0d5
 800a010:	0800a229 	.word	0x0800a229
 800a014:	0800a239 	.word	0x0800a239
 800a018:	0800a245 	.word	0x0800a245
 800a01c:	0802e210 	.word	0x0802e210

0800a020 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a020:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800a022:	f031 0310 	bics.w	r3, r1, #16
{
 800a026:	460d      	mov	r5, r1
 800a028:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 800a02a:	d11e      	bne.n	800a06a <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a02c:	6803      	ldr	r3, [r0, #0]
 800a02e:	f001 0e10 	and.w	lr, r1, #16
 800a032:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a036:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 800a03e:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a042:	ea20 000c 	bic.w	r0, r0, ip
 800a046:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	ea22 0201 	bic.w	r2, r2, r1
 800a04e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a050:	bb05      	cbnz	r5, 800a094 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800a052:	68a0      	ldr	r0, [r4, #8]
 800a054:	f000 fbbe 	bl	800a7d4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a058:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a05a:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a05c:	6813      	ldr	r3, [r2, #0]
 800a05e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a062:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a064:	2301      	movs	r3, #1
 800a066:	7123      	strb	r3, [r4, #4]
}
 800a068:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800a06a:	f240 218f 	movw	r1, #655	; 0x28f
 800a06e:	480f      	ldr	r0, [pc, #60]	; (800a0ac <HAL_DAC_Stop_DMA+0x8c>)
 800a070:	f7fb fc58 	bl	8005924 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a074:	f005 0510 	and.w	r5, r5, #16
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800a07e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 800a084:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a086:	ea22 0200 	bic.w	r2, r2, r0
 800a08a:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800a08c:	681d      	ldr	r5, [r3, #0]
 800a08e:	ea25 0501 	bic.w	r5, r5, r1
 800a092:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800a094:	68e0      	ldr	r0, [r4, #12]
 800a096:	f000 fb9d 	bl	800a7d4 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a09a:	6822      	ldr	r2, [r4, #0]
}
 800a09c:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a09e:	6813      	ldr	r3, [r2, #0]
 800a0a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0a4:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	7123      	strb	r3, [r4, #4]
}
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	0802e210 	.word	0x0802e210

0800a0b0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a0b0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7fa facf 	bl	8004658 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	7123      	strb	r3, [r4, #4]
}
 800a0be:	bd10      	pop	{r4, pc}

0800a0c0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop

0800a0c4 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a0c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a0c6:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a0c8:	f7ff fffa 	bl	800a0c0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a0cc:	bd08      	pop	{r3, pc}
 800a0ce:	bf00      	nop

0800a0d0 <HAL_DAC_ErrorCallbackCh1>:
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop

0800a0d4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a0d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0d6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a0d8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a0da:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a0dc:	f043 0304 	orr.w	r3, r3, #4
 800a0e0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a0e2:	f7ff fff5 	bl	800a0d0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	7123      	strb	r3, [r4, #4]
}
 800a0ea:	bd10      	pop	{r4, pc}

0800a0ec <HAL_DAC_DMAUnderrunCallbackCh1>:
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop

0800a0f0 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a0f0:	6803      	ldr	r3, [r0, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	0491      	lsls	r1, r2, #18
{
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800a0fa:	d502      	bpl.n	800a102 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800a0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0fe:	0492      	lsls	r2, r2, #18
 800a100:	d418      	bmi.n	800a134 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	0091      	lsls	r1, r2, #2
 800a106:	d502      	bpl.n	800a10e <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800a108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	d400      	bmi.n	800a110 <HAL_DAC_IRQHandler+0x20>
}
 800a10e:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800a110:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a112:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a116:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800a118:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800a11a:	6922      	ldr	r2, [r4, #16]
 800a11c:	f042 0202 	orr.w	r2, r2, #2
 800a120:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800a122:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800a12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a12e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800a130:	f000 b878 	b.w	800a224 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800a134:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800a13a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800a13c:	6902      	ldr	r2, [r0, #16]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800a144:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a14c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800a14e:	f7ff ffcd 	bl	800a0ec <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	e7d5      	b.n	800a102 <HAL_DAC_IRQHandler+0x12>
 800a156:	bf00      	nop

0800a158 <HAL_DAC_ConfigChannel>:
{
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a15c:	6808      	ldr	r0, [r1, #0]
{
 800a15e:	4616      	mov	r6, r2
 800a160:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a162:	f020 0308 	bic.w	r3, r0, #8
 800a166:	f020 0204 	bic.w	r2, r0, #4
 800a16a:	2b24      	cmp	r3, #36	; 0x24
 800a16c:	bf18      	it	ne
 800a16e:	2a00      	cmpne	r2, #0
 800a170:	f020 0210 	bic.w	r2, r0, #16
 800a174:	bf14      	ite	ne
 800a176:	2301      	movne	r3, #1
 800a178:	2300      	moveq	r3, #0
 800a17a:	283c      	cmp	r0, #60	; 0x3c
 800a17c:	bf0c      	ite	eq
 800a17e:	2300      	moveq	r3, #0
 800a180:	f003 0301 	andne.w	r3, r3, #1
 800a184:	2a0c      	cmp	r2, #12
 800a186:	bf0c      	ite	eq
 800a188:	2300      	moveq	r3, #0
 800a18a:	f003 0301 	andne.w	r3, r3, #1
 800a18e:	b11b      	cbz	r3, 800a198 <HAL_DAC_ConfigChannel+0x40>
 800a190:	f020 0020 	bic.w	r0, r0, #32
 800a194:	2814      	cmp	r0, #20
 800a196:	d137      	bne.n	800a208 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a198:	686b      	ldr	r3, [r5, #4]
 800a19a:	f033 0302 	bics.w	r3, r3, #2
 800a19e:	d12d      	bne.n	800a1fc <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 800a1a0:	f036 0310 	bics.w	r3, r6, #16
 800a1a4:	d120      	bne.n	800a1e8 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 800a1a6:	7963      	ldrb	r3, [r4, #5]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d025      	beq.n	800a1f8 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a1ac:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800a1b0:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a1b2:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800a1b6:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800a1b8:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a1ba:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a1be:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 800a1c2:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800a1c4:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 800a1c6:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a1c8:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800a1ca:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 800a1ce:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a1d0:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1d2:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 800a1d4:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1d6:	4082      	lsls	r2, r0
 800a1d8:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 800a1da:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a1dc:	ea23 0302 	bic.w	r3, r3, r2
 800a1e0:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a1e2:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800a1e4:	7165      	strb	r5, [r4, #5]
}
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800a1e8:	f240 31a6 	movw	r1, #934	; 0x3a6
 800a1ec:	4809      	ldr	r0, [pc, #36]	; (800a214 <HAL_DAC_ConfigChannel+0xbc>)
 800a1ee:	f7fb fb99 	bl	8005924 <assert_failed>
  __HAL_LOCK(hdac);
 800a1f2:	7963      	ldrb	r3, [r4, #5]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d1d9      	bne.n	800a1ac <HAL_DAC_ConfigChannel+0x54>
 800a1f8:	2002      	movs	r0, #2
}
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800a1fc:	f240 31a5 	movw	r1, #933	; 0x3a5
 800a200:	4804      	ldr	r0, [pc, #16]	; (800a214 <HAL_DAC_ConfigChannel+0xbc>)
 800a202:	f7fb fb8f 	bl	8005924 <assert_failed>
 800a206:	e7cb      	b.n	800a1a0 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800a208:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <HAL_DAC_ConfigChannel+0xbc>)
 800a20e:	f7fb fb89 	bl	8005924 <assert_failed>
 800a212:	e7c1      	b.n	800a198 <HAL_DAC_ConfigChannel+0x40>
 800a214:	0802e210 	.word	0x0802e210

0800a218 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop

0800a21c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <HAL_DACEx_ErrorCallbackCh2>:
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop

0800a224 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop

0800a228 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a228:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a22a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7ff fff3 	bl	800a218 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a232:	2301      	movs	r3, #1
 800a234:	7123      	strb	r3, [r4, #4]
}
 800a236:	bd10      	pop	{r4, pc}

0800a238 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a238:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a23a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a23c:	f7ff ffee 	bl	800a21c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a240:	bd08      	pop	{r3, pc}
 800a242:	bf00      	nop

0800a244 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a244:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a246:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a248:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a24a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a24c:	f043 0304 	orr.w	r3, r3, #4
 800a250:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a252:	f7ff ffe5 	bl	800a220 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a256:	2301      	movs	r3, #1
 800a258:	7123      	strb	r3, [r4, #4]
}
 800a25a:	bd10      	pop	{r4, pc}

0800a25c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800a260:	f7ff f892 	bl	8009388 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a264:	2c00      	cmp	r4, #0
 800a266:	f000 8156 	beq.w	800a516 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	4605      	mov	r5, r0
 800a26e:	4bad      	ldr	r3, [pc, #692]	; (800a524 <HAL_DMA_Init+0x2c8>)
 800a270:	49ad      	ldr	r1, [pc, #692]	; (800a528 <HAL_DMA_Init+0x2cc>)
 800a272:	429a      	cmp	r2, r3
 800a274:	bf18      	it	ne
 800a276:	428a      	cmpne	r2, r1
 800a278:	f101 0118 	add.w	r1, r1, #24
 800a27c:	bf14      	ite	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	2300      	moveq	r3, #0
 800a282:	428a      	cmp	r2, r1
 800a284:	bf0c      	ite	eq
 800a286:	2300      	moveq	r3, #0
 800a288:	f003 0301 	andne.w	r3, r3, #1
 800a28c:	3118      	adds	r1, #24
 800a28e:	428a      	cmp	r2, r1
 800a290:	bf0c      	ite	eq
 800a292:	2300      	moveq	r3, #0
 800a294:	f003 0301 	andne.w	r3, r3, #1
 800a298:	3118      	adds	r1, #24
 800a29a:	428a      	cmp	r2, r1
 800a29c:	bf0c      	ite	eq
 800a29e:	2300      	moveq	r3, #0
 800a2a0:	f003 0301 	andne.w	r3, r3, #1
 800a2a4:	3118      	adds	r1, #24
 800a2a6:	428a      	cmp	r2, r1
 800a2a8:	bf0c      	ite	eq
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	f003 0301 	andne.w	r3, r3, #1
 800a2b0:	3118      	adds	r1, #24
 800a2b2:	428a      	cmp	r2, r1
 800a2b4:	bf0c      	ite	eq
 800a2b6:	2300      	moveq	r3, #0
 800a2b8:	f003 0301 	andne.w	r3, r3, #1
 800a2bc:	3118      	adds	r1, #24
 800a2be:	428a      	cmp	r2, r1
 800a2c0:	bf0c      	ite	eq
 800a2c2:	2300      	moveq	r3, #0
 800a2c4:	f003 0301 	andne.w	r3, r3, #1
 800a2c8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2300      	moveq	r3, #0
 800a2d2:	f003 0301 	andne.w	r3, r3, #1
 800a2d6:	3118      	adds	r1, #24
 800a2d8:	428a      	cmp	r2, r1
 800a2da:	bf0c      	ite	eq
 800a2dc:	2300      	moveq	r3, #0
 800a2de:	f003 0301 	andne.w	r3, r3, #1
 800a2e2:	3118      	adds	r1, #24
 800a2e4:	428a      	cmp	r2, r1
 800a2e6:	bf0c      	ite	eq
 800a2e8:	2300      	moveq	r3, #0
 800a2ea:	f003 0301 	andne.w	r3, r3, #1
 800a2ee:	3118      	adds	r1, #24
 800a2f0:	428a      	cmp	r2, r1
 800a2f2:	bf0c      	ite	eq
 800a2f4:	2300      	moveq	r3, #0
 800a2f6:	f003 0301 	andne.w	r3, r3, #1
 800a2fa:	3118      	adds	r1, #24
 800a2fc:	428a      	cmp	r2, r1
 800a2fe:	bf0c      	ite	eq
 800a300:	2300      	moveq	r3, #0
 800a302:	f003 0301 	andne.w	r3, r3, #1
 800a306:	3118      	adds	r1, #24
 800a308:	428a      	cmp	r2, r1
 800a30a:	bf0c      	ite	eq
 800a30c:	2300      	moveq	r3, #0
 800a30e:	f003 0301 	andne.w	r3, r3, #1
 800a312:	3118      	adds	r1, #24
 800a314:	428a      	cmp	r2, r1
 800a316:	bf0c      	ite	eq
 800a318:	2300      	moveq	r3, #0
 800a31a:	f003 0301 	andne.w	r3, r3, #1
 800a31e:	b11b      	cbz	r3, 800a328 <HAL_DMA_Init+0xcc>
 800a320:	4b82      	ldr	r3, [pc, #520]	; (800a52c <HAL_DMA_Init+0x2d0>)
 800a322:	429a      	cmp	r2, r3
 800a324:	f040 8139 	bne.w	800a59a <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a32e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a332:	bf18      	it	ne
 800a334:	2b00      	cmpne	r3, #0
 800a336:	bf14      	ite	ne
 800a338:	2201      	movne	r2, #1
 800a33a:	2200      	moveq	r2, #0
 800a33c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a340:	bf0c      	ite	eq
 800a342:	2200      	moveq	r2, #0
 800a344:	f002 0201 	andne.w	r2, r2, #1
 800a348:	b11a      	cbz	r2, 800a352 <HAL_DMA_Init+0xf6>
 800a34a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a34e:	f040 8129 	bne.w	800a5a4 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a358:	d002      	beq.n	800a360 <HAL_DMA_Init+0x104>
 800a35a:	2b80      	cmp	r3, #128	; 0x80
 800a35c:	f040 80a8 	bne.w	800a4b0 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a360:	68e3      	ldr	r3, [r4, #12]
 800a362:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a366:	f040 80ac 	bne.w	800a4c2 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a370:	f040 80b0 	bne.w	800a4d4 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a374:	6963      	ldr	r3, [r4, #20]
 800a376:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a37a:	d003      	beq.n	800a384 <HAL_DMA_Init+0x128>
 800a37c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a380:	f040 8091 	bne.w	800a4a6 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a384:	69a3      	ldr	r3, [r4, #24]
 800a386:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800a38a:	d003      	beq.n	800a394 <HAL_DMA_Init+0x138>
 800a38c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a390:	f040 8084 	bne.w	800a49c <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a394:	69e3      	ldr	r3, [r4, #28]
 800a396:	f033 0220 	bics.w	r2, r3, #32
 800a39a:	d002      	beq.n	800a3a2 <HAL_DMA_Init+0x146>
 800a39c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a0:	d16f      	bne.n	800a482 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a3a2:	6a23      	ldr	r3, [r4, #32]
 800a3a4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a3a8:	d173      	bne.n	800a492 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ac:	f033 0204 	bics.w	r2, r3, #4
 800a3b0:	d15f      	bne.n	800a472 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d14d      	bne.n	800a452 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3b6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800a3b8:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3ba:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 800a3bc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3c0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	f022 0201 	bic.w	r2, r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3cc:	e006      	b.n	800a3dc <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3ce:	f7fe ffdb 	bl	8009388 <HAL_GetTick>
 800a3d2:	1b40      	subs	r0, r0, r5
 800a3d4:	2805      	cmp	r0, #5
 800a3d6:	f200 8082 	bhi.w	800a4de <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	07d1      	lsls	r1, r2, #31
 800a3e0:	d4f5      	bmi.n	800a3ce <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3e2:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 800a3e6:	68e1      	ldr	r1, [r4, #12]
 800a3e8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ea:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 800a3ec:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3f0:	6921      	ldr	r1, [r4, #16]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	6961      	ldr	r1, [r4, #20]
 800a3f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3f8:	69e1      	ldr	r1, [r4, #28]
 800a3fa:	4302      	orrs	r2, r0
 800a3fc:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3fe:	494c      	ldr	r1, [pc, #304]	; (800a530 <HAL_DMA_Init+0x2d4>)
 800a400:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a402:	6a25      	ldr	r5, [r4, #32]
 800a404:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a406:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a408:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a40a:	2904      	cmp	r1, #4
 800a40c:	d06e      	beq.n	800a4ec <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a40e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a410:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a412:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a416:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a418:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 800a41a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a41c:	4945      	ldr	r1, [pc, #276]	; (800a534 <HAL_DMA_Init+0x2d8>)
 800a41e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a420:	4845      	ldr	r0, [pc, #276]	; (800a538 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a422:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 800a426:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a428:	4a44      	ldr	r2, [pc, #272]	; (800a53c <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a42a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a42e:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a432:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a436:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a438:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a43c:	bf88      	it	hi
 800a43e:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a440:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a442:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a444:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a446:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800a448:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a44a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a44c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a450:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a454:	2b03      	cmp	r3, #3
 800a456:	d860      	bhi.n	800a51a <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a45a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800a45e:	d171      	bne.n	800a544 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800a460:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a462:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800a466:	d0a6      	beq.n	800a3b6 <HAL_DMA_Init+0x15a>
 800a468:	21c8      	movs	r1, #200	; 0xc8
 800a46a:	4835      	ldr	r0, [pc, #212]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a46c:	f7fb fa5a 	bl	8005924 <assert_failed>
 800a470:	e7a1      	b.n	800a3b6 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800a472:	21c1      	movs	r1, #193	; 0xc1
 800a474:	4832      	ldr	r0, [pc, #200]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a476:	f7fb fa55 	bl	8005924 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800a47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d09a      	beq.n	800a3b6 <HAL_DMA_Init+0x15a>
 800a480:	e7e7      	b.n	800a452 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800a482:	21bf      	movs	r1, #191	; 0xbf
 800a484:	482e      	ldr	r0, [pc, #184]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a486:	f7fb fa4d 	bl	8005924 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800a48a:	6a23      	ldr	r3, [r4, #32]
 800a48c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a490:	d08b      	beq.n	800a3aa <HAL_DMA_Init+0x14e>
 800a492:	21c0      	movs	r1, #192	; 0xc0
 800a494:	482a      	ldr	r0, [pc, #168]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a496:	f7fb fa45 	bl	8005924 <assert_failed>
 800a49a:	e786      	b.n	800a3aa <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800a49c:	21be      	movs	r1, #190	; 0xbe
 800a49e:	4828      	ldr	r0, [pc, #160]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a4a0:	f7fb fa40 	bl	8005924 <assert_failed>
 800a4a4:	e776      	b.n	800a394 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800a4a6:	21bd      	movs	r1, #189	; 0xbd
 800a4a8:	4825      	ldr	r0, [pc, #148]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a4aa:	f7fb fa3b 	bl	8005924 <assert_failed>
 800a4ae:	e769      	b.n	800a384 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800a4b0:	21ba      	movs	r1, #186	; 0xba
 800a4b2:	4823      	ldr	r0, [pc, #140]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a4b4:	f7fb fa36 	bl	8005924 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800a4b8:	68e3      	ldr	r3, [r4, #12]
 800a4ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a4be:	f43f af54 	beq.w	800a36a <HAL_DMA_Init+0x10e>
 800a4c2:	21bb      	movs	r1, #187	; 0xbb
 800a4c4:	481e      	ldr	r0, [pc, #120]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a4c6:	f7fb fa2d 	bl	8005924 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a4d0:	f43f af50 	beq.w	800a374 <HAL_DMA_Init+0x118>
 800a4d4:	21bc      	movs	r1, #188	; 0xbc
 800a4d6:	481a      	ldr	r0, [pc, #104]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a4d8:	f7fb fa24 	bl	8005924 <assert_failed>
 800a4dc:	e74a      	b.n	800a374 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4e0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800a4e2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4e4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a4ec:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800a4f0:	4329      	orrs	r1, r5
 800a4f2:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800a4f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800a4f6:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800a4f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4fa:	f021 0107 	bic.w	r1, r1, #7
 800a4fe:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800a500:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a504:	2d00      	cmp	r5, #0
 800a506:	d087      	beq.n	800a418 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a508:	bb08      	cbnz	r0, 800a54e <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 800a50a:	2a01      	cmp	r2, #1
 800a50c:	d040      	beq.n	800a590 <HAL_DMA_Init+0x334>
 800a50e:	f032 0202 	bics.w	r2, r2, #2
 800a512:	d181      	bne.n	800a418 <HAL_DMA_Init+0x1bc>
 800a514:	e023      	b.n	800a55e <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 800a516:	2001      	movs	r0, #1
}
 800a518:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800a51a:	21c6      	movs	r1, #198	; 0xc6
 800a51c:	4808      	ldr	r0, [pc, #32]	; (800a540 <HAL_DMA_Init+0x2e4>)
 800a51e:	f7fb fa01 	bl	8005924 <assert_failed>
 800a522:	e799      	b.n	800a458 <HAL_DMA_Init+0x1fc>
 800a524:	40026010 	.word	0x40026010
 800a528:	40026028 	.word	0x40026028
 800a52c:	400264b8 	.word	0x400264b8
 800a530:	e010803f 	.word	0xe010803f
 800a534:	aaaaaaab 	.word	0xaaaaaaab
 800a538:	0802e280 	.word	0x0802e280
 800a53c:	fffffc00 	.word	0xfffffc00
 800a540:	0802e248 	.word	0x0802e248
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800a544:	21c7      	movs	r1, #199	; 0xc7
 800a546:	481a      	ldr	r0, [pc, #104]	; (800a5b0 <HAL_DMA_Init+0x354>)
 800a548:	f7fb f9ec 	bl	8005924 <assert_failed>
 800a54c:	e788      	b.n	800a460 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a54e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a552:	d00e      	beq.n	800a572 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a554:	2a02      	cmp	r2, #2
 800a556:	d905      	bls.n	800a564 <HAL_DMA_Init+0x308>
 800a558:	2a03      	cmp	r2, #3
 800a55a:	f47f af5d 	bne.w	800a418 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a55e:	01ea      	lsls	r2, r5, #7
 800a560:	f57f af5a 	bpl.w	800a418 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 800a564:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a566:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800a568:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a56a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a56c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800a570:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800a572:	2a03      	cmp	r2, #3
 800a574:	f63f af50 	bhi.w	800a418 <HAL_DMA_Init+0x1bc>
 800a578:	a001      	add	r0, pc, #4	; (adr r0, 800a580 <HAL_DMA_Init+0x324>)
 800a57a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a565 	.word	0x0800a565
 800a584:	0800a55f 	.word	0x0800a55f
 800a588:	0800a565 	.word	0x0800a565
 800a58c:	0800a591 	.word	0x0800a591
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a590:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800a594:	f47f af40 	bne.w	800a418 <HAL_DMA_Init+0x1bc>
 800a598:	e7e4      	b.n	800a564 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a59a:	21b8      	movs	r1, #184	; 0xb8
 800a59c:	4804      	ldr	r0, [pc, #16]	; (800a5b0 <HAL_DMA_Init+0x354>)
 800a59e:	f7fb f9c1 	bl	8005924 <assert_failed>
 800a5a2:	e6c1      	b.n	800a328 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800a5a4:	21b9      	movs	r1, #185	; 0xb9
 800a5a6:	4802      	ldr	r0, [pc, #8]	; (800a5b0 <HAL_DMA_Init+0x354>)
 800a5a8:	f7fb f9bc 	bl	8005924 <assert_failed>
 800a5ac:	e6d1      	b.n	800a352 <HAL_DMA_Init+0xf6>
 800a5ae:	bf00      	nop
 800a5b0:	0802e248 	.word	0x0802e248

0800a5b4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f000 8097 	beq.w	800a6e8 <HAL_DMA_DeInit+0x134>
{
 800a5ba:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a5bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	b2d8      	uxtb	r0, r3
 800a5c6:	f000 808e 	beq.w	800a6e6 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	4b4b      	ldr	r3, [pc, #300]	; (800a6fc <HAL_DMA_DeInit+0x148>)
 800a5ce:	484c      	ldr	r0, [pc, #304]	; (800a700 <HAL_DMA_DeInit+0x14c>)
 800a5d0:	494c      	ldr	r1, [pc, #304]	; (800a704 <HAL_DMA_DeInit+0x150>)
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	bf18      	it	ne
 800a5d6:	4282      	cmpne	r2, r0
 800a5d8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a5dc:	bf14      	ite	ne
 800a5de:	2301      	movne	r3, #1
 800a5e0:	2300      	moveq	r3, #0
 800a5e2:	428a      	cmp	r2, r1
 800a5e4:	bf0c      	ite	eq
 800a5e6:	2300      	moveq	r3, #0
 800a5e8:	f003 0301 	andne.w	r3, r3, #1
 800a5ec:	3130      	adds	r1, #48	; 0x30
 800a5ee:	4282      	cmp	r2, r0
 800a5f0:	bf0c      	ite	eq
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	f003 0301 	andne.w	r3, r3, #1
 800a5f8:	3030      	adds	r0, #48	; 0x30
 800a5fa:	428a      	cmp	r2, r1
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2300      	moveq	r3, #0
 800a600:	f003 0301 	andne.w	r3, r3, #1
 800a604:	3130      	adds	r1, #48	; 0x30
 800a606:	4282      	cmp	r2, r0
 800a608:	bf0c      	ite	eq
 800a60a:	2300      	moveq	r3, #0
 800a60c:	f003 0301 	andne.w	r3, r3, #1
 800a610:	3030      	adds	r0, #48	; 0x30
 800a612:	428a      	cmp	r2, r1
 800a614:	bf0c      	ite	eq
 800a616:	2300      	moveq	r3, #0
 800a618:	f003 0301 	andne.w	r3, r3, #1
 800a61c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a620:	4282      	cmp	r2, r0
 800a622:	bf0c      	ite	eq
 800a624:	2300      	moveq	r3, #0
 800a626:	f003 0301 	andne.w	r3, r3, #1
 800a62a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a62e:	428a      	cmp	r2, r1
 800a630:	bf0c      	ite	eq
 800a632:	2300      	moveq	r3, #0
 800a634:	f003 0301 	andne.w	r3, r3, #1
 800a638:	3130      	adds	r1, #48	; 0x30
 800a63a:	4282      	cmp	r2, r0
 800a63c:	bf0c      	ite	eq
 800a63e:	2300      	moveq	r3, #0
 800a640:	f003 0301 	andne.w	r3, r3, #1
 800a644:	3030      	adds	r0, #48	; 0x30
 800a646:	428a      	cmp	r2, r1
 800a648:	bf0c      	ite	eq
 800a64a:	2300      	moveq	r3, #0
 800a64c:	f003 0301 	andne.w	r3, r3, #1
 800a650:	3130      	adds	r1, #48	; 0x30
 800a652:	4282      	cmp	r2, r0
 800a654:	bf0c      	ite	eq
 800a656:	2300      	moveq	r3, #0
 800a658:	f003 0301 	andne.w	r3, r3, #1
 800a65c:	3030      	adds	r0, #48	; 0x30
 800a65e:	428a      	cmp	r2, r1
 800a660:	bf0c      	ite	eq
 800a662:	2300      	moveq	r3, #0
 800a664:	f003 0301 	andne.w	r3, r3, #1
 800a668:	3130      	adds	r1, #48	; 0x30
 800a66a:	4282      	cmp	r2, r0
 800a66c:	bf0c      	ite	eq
 800a66e:	2300      	moveq	r3, #0
 800a670:	f003 0301 	andne.w	r3, r3, #1
 800a674:	428a      	cmp	r2, r1
 800a676:	bf0c      	ite	eq
 800a678:	2300      	moveq	r3, #0
 800a67a:	f003 0301 	andne.w	r3, r3, #1
 800a67e:	b113      	cbz	r3, 800a686 <HAL_DMA_DeInit+0xd2>
 800a680:	4b21      	ldr	r3, [pc, #132]	; (800a708 <HAL_DMA_DeInit+0x154>)
 800a682:	429a      	cmp	r2, r3
 800a684:	d132      	bne.n	800a6ec <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 800a686:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a688:	b2d3      	uxtb	r3, r2
 800a68a:	4920      	ldr	r1, [pc, #128]	; (800a70c <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 800a68c:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a690:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 800a692:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 800a694:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a696:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800a69a:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 800a69c:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800a69e:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 800a6a2:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a6a4:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 800a6a8:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 800a6aa:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 800a6ac:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800a6ae:	f04f 0021 	mov.w	r0, #33	; 0x21
 800a6b2:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a6b4:	4816      	ldr	r0, [pc, #88]	; (800a710 <HAL_DMA_DeInit+0x15c>)
 800a6b6:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6b8:	4916      	ldr	r1, [pc, #88]	; (800a714 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a6ba:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6bc:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6c0:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6c4:	bf88      	it	hi
 800a6c6:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6c8:	4082      	lsls	r2, r0
  return HAL_OK;
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6ce:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6d0:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800a6d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800a6d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 800a6da:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800a6de:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800a6e2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800a6e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a6e8:	2001      	movs	r0, #1
}
 800a6ea:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800a6ec:	f240 1149 	movw	r1, #329	; 0x149
 800a6f0:	4809      	ldr	r0, [pc, #36]	; (800a718 <HAL_DMA_DeInit+0x164>)
 800a6f2:	f7fb f917 	bl	8005924 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 800a6f6:	6822      	ldr	r2, [r4, #0]
 800a6f8:	e7c5      	b.n	800a686 <HAL_DMA_DeInit+0xd2>
 800a6fa:	bf00      	nop
 800a6fc:	40026010 	.word	0x40026010
 800a700:	40026028 	.word	0x40026028
 800a704:	40026040 	.word	0x40026040
 800a708:	400264b8 	.word	0x400264b8
 800a70c:	aaaaaaab 	.word	0xaaaaaaab
 800a710:	0802e280 	.word	0x0802e280
 800a714:	fffffc00 	.word	0xfffffc00
 800a718:	0802e248 	.word	0x0802e248

0800a71c <HAL_DMA_Start_IT>:
{
 800a71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a720:	461e      	mov	r6, r3
 800a722:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a724:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a728:	1e58      	subs	r0, r3, #1
 800a72a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 800a72e:	4688      	mov	r8, r1
 800a730:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a732:	4298      	cmp	r0, r3
 800a734:	d83b      	bhi.n	800a7ae <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 800a736:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d040      	beq.n	800a7c0 <HAL_DMA_Start_IT+0xa4>
 800a73e:	2301      	movs	r3, #1
 800a740:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a744:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d005      	beq.n	800a758 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a74c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800a74e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800a750:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a758:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a75a:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800a75c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a760:	2300      	movs	r3, #0
 800a762:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a76a:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a76c:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800a76e:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a770:	2b40      	cmp	r3, #64	; 0x40
 800a772:	d028      	beq.n	800a7c6 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 800a774:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 800a778:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a77a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a77c:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800a77e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a780:	408b      	lsls	r3, r1
 800a782:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	f043 0316 	orr.w	r3, r3, #22
 800a78c:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a78e:	696b      	ldr	r3, [r5, #20]
 800a790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a794:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a796:	b11a      	cbz	r2, 800a7a0 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	f043 0308 	orr.w	r3, r3, #8
 800a79e:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800a7a0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7a2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	602b      	str	r3, [r5, #0]
}
 800a7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800a7ae:	f240 11cd 	movw	r1, #461	; 0x1cd
 800a7b2:	4807      	ldr	r0, [pc, #28]	; (800a7d0 <HAL_DMA_Start_IT+0xb4>)
 800a7b4:	f7fb f8b6 	bl	8005924 <assert_failed>
  __HAL_LOCK(hdma);
 800a7b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d1be      	bne.n	800a73e <HAL_DMA_Start_IT+0x22>
 800a7c0:	2002      	movs	r0, #2
}
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 800a7c6:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a7c8:	f8c5 800c 	str.w	r8, [r5, #12]
 800a7cc:	e7d5      	b.n	800a77a <HAL_DMA_Start_IT+0x5e>
 800a7ce:	bf00      	nop
 800a7d0:	0802e248 	.word	0x0802e248

0800a7d4 <HAL_DMA_Abort>:
{
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800a7da:	f7fe fdd5 	bl	8009388 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a7de:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d006      	beq.n	800a7f4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7e6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800a7e8:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a7ea:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a7ec:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a7ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	f022 0216 	bic.w	r2, r2, #22
 800a7fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a806:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a808:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a80a:	b33a      	cbz	r2, 800a85c <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	f022 0208 	bic.w	r2, r2, #8
 800a812:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	f022 0201 	bic.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a81c:	e005      	b.n	800a82a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a81e:	f7fe fdb3 	bl	8009388 <HAL_GetTick>
 800a822:	1b43      	subs	r3, r0, r5
 800a824:	2b05      	cmp	r3, #5
 800a826:	d80f      	bhi.n	800a848 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f013 0301 	ands.w	r3, r3, #1
 800a830:	d1f5      	bne.n	800a81e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a832:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a834:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800a836:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a838:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800a83a:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a83c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800a83e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800a842:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a846:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a848:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a84a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800a84c:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a84e:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800a850:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a852:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a856:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a85c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a85e:	2a00      	cmp	r2, #0
 800a860:	d1d4      	bne.n	800a80c <HAL_DMA_Abort+0x38>
 800a862:	e7d7      	b.n	800a814 <HAL_DMA_Abort+0x40>

0800a864 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a864:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800a868:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a86a:	2a02      	cmp	r2, #2
 800a86c:	d003      	beq.n	800a876 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a86e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800a870:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a874:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a876:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a878:	2105      	movs	r1, #5
  return HAL_OK;
 800a87a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800a87c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	6013      	str	r3, [r2, #0]
}
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop

0800a88c <HAL_DMA_IRQHandler>:
{
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 800a890:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 800a892:	4b74      	ldr	r3, [pc, #464]	; (800aa64 <HAL_DMA_IRQHandler+0x1d8>)
{
 800a894:	b082      	sub	sp, #8
 800a896:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 800a898:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800a89a:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a89c:	2208      	movs	r2, #8
 800a89e:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800a8a2:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8a4:	409a      	lsls	r2, r3
 800a8a6:	4222      	tst	r2, r4
 800a8a8:	d004      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a8aa:	6801      	ldr	r1, [r0, #0]
 800a8ac:	680f      	ldr	r7, [r1, #0]
 800a8ae:	0778      	lsls	r0, r7, #29
 800a8b0:	f100 80ab 	bmi.w	800aa0a <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	409a      	lsls	r2, r3
 800a8b8:	4222      	tst	r2, r4
 800a8ba:	d005      	beq.n	800a8c8 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a8bc:	f8d8 1000 	ldr.w	r1, [r8]
 800a8c0:	6949      	ldr	r1, [r1, #20]
 800a8c2:	0609      	lsls	r1, r1, #24
 800a8c4:	f100 8099 	bmi.w	800a9fa <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	409a      	lsls	r2, r3
 800a8cc:	4222      	tst	r2, r4
 800a8ce:	d005      	beq.n	800a8dc <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a8d0:	f8d8 1000 	ldr.w	r1, [r8]
 800a8d4:	6809      	ldr	r1, [r1, #0]
 800a8d6:	078f      	lsls	r7, r1, #30
 800a8d8:	f100 8087 	bmi.w	800a9ea <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a8dc:	2210      	movs	r2, #16
 800a8de:	409a      	lsls	r2, r3
 800a8e0:	4222      	tst	r2, r4
 800a8e2:	d004      	beq.n	800a8ee <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a8e4:	f8d8 1000 	ldr.w	r1, [r8]
 800a8e8:	680f      	ldr	r7, [r1, #0]
 800a8ea:	0738      	lsls	r0, r7, #28
 800a8ec:	d468      	bmi.n	800a9c0 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	409a      	lsls	r2, r3
 800a8f2:	4222      	tst	r2, r4
 800a8f4:	d017      	beq.n	800a926 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a8f6:	f8d8 1000 	ldr.w	r1, [r8]
 800a8fa:	680c      	ldr	r4, [r1, #0]
 800a8fc:	06e0      	lsls	r0, r4, #27
 800a8fe:	d512      	bpl.n	800a926 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a900:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a902:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800a906:	2a05      	cmp	r2, #5
 800a908:	d039      	beq.n	800a97e <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a90a:	680b      	ldr	r3, [r1, #0]
 800a90c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a910:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a912:	f000 808d 	beq.w	800aa30 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a916:	0319      	lsls	r1, r3, #12
 800a918:	f140 8098 	bpl.w	800aa4c <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 800a91c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a920:	b10b      	cbz	r3, 800a926 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 800a922:	4640      	mov	r0, r8
 800a924:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a926:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d045      	beq.n	800a9ba <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a92e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a932:	07da      	lsls	r2, r3, #31
 800a934:	d51b      	bpl.n	800a96e <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 800a936:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800a93a:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800a93c:	494a      	ldr	r1, [pc, #296]	; (800aa68 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800a93e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a942:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a944:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800a948:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800a94c:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	e002      	b.n	800a958 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	07db      	lsls	r3, r3, #31
 800a956:	d504      	bpl.n	800a962 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	3301      	adds	r3, #1
 800a95c:	42ab      	cmp	r3, r5
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	d9f7      	bls.n	800a952 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 800a962:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800a964:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800a966:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a96a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800a96e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a972:	b313      	cbz	r3, 800a9ba <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 800a974:	4640      	mov	r0, r8
}
 800a976:	b002      	add	sp, #8
 800a978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800a97c:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a97e:	680a      	ldr	r2, [r1, #0]
 800a980:	f022 0216 	bic.w	r2, r2, #22
 800a984:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a986:	694a      	ldr	r2, [r1, #20]
 800a988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a98c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a98e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a992:	2a00      	cmp	r2, #0
 800a994:	d060      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a996:	680a      	ldr	r2, [r1, #0]
 800a998:	f022 0208 	bic.w	r2, r2, #8
 800a99c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a99e:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 800a9a0:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9a2:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800a9a6:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9a8:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800a9aa:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 800a9ae:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a9b2:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1dc      	bne.n	800a974 <HAL_DMA_IRQHandler+0xe8>
}
 800a9ba:	b002      	add	sp, #8
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9c0:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9c2:	680a      	ldr	r2, [r1, #0]
 800a9c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9c8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9ca:	d12a      	bne.n	800aa22 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a9cc:	05d7      	lsls	r7, r2, #23
 800a9ce:	d403      	bmi.n	800a9d8 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a9d0:	680a      	ldr	r2, [r1, #0]
 800a9d2:	f022 0208 	bic.w	r2, r2, #8
 800a9d6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800a9d8:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d086      	beq.n	800a8ee <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a9e4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a9e8:	e781      	b.n	800a8ee <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a9ea:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a9ec:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800a9f0:	f042 0204 	orr.w	r2, r2, #4
 800a9f4:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800a9f8:	e770      	b.n	800a8dc <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a9fa:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9fc:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800aa00:	f042 0202 	orr.w	r2, r2, #2
 800aa04:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800aa08:	e75e      	b.n	800a8c8 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa0a:	680f      	ldr	r7, [r1, #0]
 800aa0c:	f027 0704 	bic.w	r7, r7, #4
 800aa10:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa12:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa14:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800aa18:	f042 0201 	orr.w	r2, r2, #1
 800aa1c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800aa20:	e748      	b.n	800a8b4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa22:	0312      	lsls	r2, r2, #12
 800aa24:	d5d8      	bpl.n	800a9d8 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa26:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d1d8      	bne.n	800a9e0 <HAL_DMA_IRQHandler+0x154>
 800aa2e:	e75e      	b.n	800a8ee <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa30:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800aa34:	f47f af72 	bne.w	800a91c <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aa38:	680a      	ldr	r2, [r1, #0]
 800aa3a:	f022 0210 	bic.w	r2, r2, #16
 800aa3e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800aa40:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800aa42:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800aa46:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800aa4a:	e767      	b.n	800a91c <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800aa4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f47f af66 	bne.w	800a922 <HAL_DMA_IRQHandler+0x96>
 800aa56:	e766      	b.n	800a926 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa58:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	d19a      	bne.n	800a996 <HAL_DMA_IRQHandler+0x10a>
 800aa60:	e79d      	b.n	800a99e <HAL_DMA_IRQHandler+0x112>
 800aa62:	bf00      	nop
 800aa64:	20000298 	.word	0x20000298
 800aa68:	1b4e81b5 	.word	0x1b4e81b5

0800aa6c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800aa6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	9f08      	ldr	r7, [sp, #32]
 800aa76:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa78:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800aa7c:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa7e:	1e7d      	subs	r5, r7, #1
{
 800aa80:	4691      	mov	r9, r2
 800aa82:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800aa84:	4285      	cmp	r5, r0
 800aa86:	d85f      	bhi.n	800ab48 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aa88:	68a0      	ldr	r0, [r4, #8]
 800aa8a:	2880      	cmp	r0, #128	; 0x80
 800aa8c:	d063      	beq.n	800ab56 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800aa8e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	f000 8090 	beq.w	800abb8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa9e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d005      	beq.n	800aab2 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aaa6:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 800aaa8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800aaaa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800aaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800aab2:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aab4:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aab6:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800aab8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aabc:	f04f 0300 	mov.w	r3, #0
 800aac0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aac8:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800aaca:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 800aacc:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aace:	d06a      	beq.n	800aba6 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800aad0:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800aad4:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aad8:	4b93      	ldr	r3, [pc, #588]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800aada:	429d      	cmp	r5, r3
 800aadc:	d941      	bls.n	800ab62 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 800aade:	3b48      	subs	r3, #72	; 0x48
 800aae0:	4992      	ldr	r1, [pc, #584]	; (800ad2c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800aae2:	4a93      	ldr	r2, [pc, #588]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800aae4:	429d      	cmp	r5, r3
 800aae6:	bf18      	it	ne
 800aae8:	428d      	cmpne	r5, r1
 800aaea:	bf14      	ite	ne
 800aaec:	2301      	movne	r3, #1
 800aaee:	2300      	moveq	r3, #0
 800aaf0:	4295      	cmp	r5, r2
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2300      	moveq	r3, #0
 800aaf6:	f003 0301 	andne.w	r3, r3, #1
 800aafa:	b11b      	cbz	r3, 800ab04 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 800aafc:	4b8d      	ldr	r3, [pc, #564]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800aafe:	429d      	cmp	r5, r3
 800ab00:	f040 812e 	bne.w	800ad60 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800ab04:	4b8c      	ldr	r3, [pc, #560]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab06:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab08:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab0a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab0c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab0e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab10:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab12:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab14:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab16:	2201      	movs	r2, #1
 800ab18:	4b87      	ldr	r3, [pc, #540]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab1c:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab20:	f043 0316 	orr.w	r3, r3, #22
 800ab24:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ab26:	696b      	ldr	r3, [r5, #20]
 800ab28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2c:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	d03e      	beq.n	800abb0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	f043 0308 	orr.w	r3, r3, #8
 800ab38:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800ab3a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	602b      	str	r3, [r5, #0]
}
 800ab44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800ab48:	487c      	ldr	r0, [pc, #496]	; (800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800ab4a:	21a1      	movs	r1, #161	; 0xa1
 800ab4c:	f7fa feea 	bl	8005924 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ab50:	68a0      	ldr	r0, [r4, #8]
 800ab52:	2880      	cmp	r0, #128	; 0x80
 800ab54:	d19b      	bne.n	800aa8e <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800ab56:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800ab5a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800ab5c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab62:	4b77      	ldr	r3, [pc, #476]	; (800ad40 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 800ab64:	429d      	cmp	r5, r3
 800ab66:	d929      	bls.n	800abbc <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800ab68:	3ba8      	subs	r3, #168	; 0xa8
 800ab6a:	4976      	ldr	r1, [pc, #472]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800ab6c:	4a70      	ldr	r2, [pc, #448]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ab6e:	429d      	cmp	r5, r3
 800ab70:	bf18      	it	ne
 800ab72:	428d      	cmpne	r5, r1
 800ab74:	bf14      	ite	ne
 800ab76:	2301      	movne	r3, #1
 800ab78:	2300      	moveq	r3, #0
 800ab7a:	4295      	cmp	r5, r2
 800ab7c:	bf0c      	ite	eq
 800ab7e:	2300      	moveq	r3, #0
 800ab80:	f003 0301 	andne.w	r3, r3, #1
 800ab84:	b113      	cbz	r3, 800ab8c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800ab86:	4b6b      	ldr	r3, [pc, #428]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ab88:	429d      	cmp	r5, r3
 800ab8a:	d15a      	bne.n	800ac42 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800ab8c:	4b6a      	ldr	r3, [pc, #424]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800ab8e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab90:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ab92:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab94:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab96:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab98:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ab9a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab9c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4a65      	ldr	r2, [pc, #404]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800aba2:	6093      	str	r3, [r2, #8]
 800aba4:	e7ba      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 800aba6:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800abaa:	f8c5 800c 	str.w	r8, [r5, #12]
 800abae:	e793      	b.n	800aad8 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800abb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1bd      	bne.n	800ab32 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 800abb6:	e7c0      	b.n	800ab3a <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 800abb8:	2002      	movs	r0, #2
 800abba:	e778      	b.n	800aaae <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abbc:	4b62      	ldr	r3, [pc, #392]	; (800ad48 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800abbe:	429d      	cmp	r5, r3
 800abc0:	d91f      	bls.n	800ac02 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 800abc2:	3b48      	subs	r3, #72	; 0x48
 800abc4:	495f      	ldr	r1, [pc, #380]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800abc6:	4a5a      	ldr	r2, [pc, #360]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800abc8:	429d      	cmp	r5, r3
 800abca:	bf18      	it	ne
 800abcc:	428d      	cmpne	r5, r1
 800abce:	bf14      	ite	ne
 800abd0:	2301      	movne	r3, #1
 800abd2:	2300      	moveq	r3, #0
 800abd4:	4295      	cmp	r5, r2
 800abd6:	bf0c      	ite	eq
 800abd8:	2300      	moveq	r3, #0
 800abda:	f003 0301 	andne.w	r3, r3, #1
 800abde:	b11b      	cbz	r3, 800abe8 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800abe0:	4b54      	ldr	r3, [pc, #336]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800abe2:	429d      	cmp	r5, r3
 800abe4:	f040 8152 	bne.w	800ae8c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 800abe8:	4b58      	ldr	r3, [pc, #352]	; (800ad4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800abea:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abec:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800abee:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abf0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800abf2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abf4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800abf6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abf8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abfa:	2301      	movs	r3, #1
 800abfc:	4a53      	ldr	r2, [pc, #332]	; (800ad4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800abfe:	60d3      	str	r3, [r2, #12]
 800ac00:	e78c      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac02:	4b50      	ldr	r3, [pc, #320]	; (800ad44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800ac04:	4949      	ldr	r1, [pc, #292]	; (800ad2c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800ac06:	4a4a      	ldr	r2, [pc, #296]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800ac08:	429d      	cmp	r5, r3
 800ac0a:	bf18      	it	ne
 800ac0c:	428d      	cmpne	r5, r1
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	4295      	cmp	r5, r2
 800ac16:	bf0c      	ite	eq
 800ac18:	2300      	moveq	r3, #0
 800ac1a:	f003 0301 	andne.w	r3, r3, #1
 800ac1e:	b11b      	cbz	r3, 800ac28 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 800ac20:	4b44      	ldr	r3, [pc, #272]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800ac22:	429d      	cmp	r5, r3
 800ac24:	f040 80be 	bne.w	800ada4 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 800ac28:	4b48      	ldr	r3, [pc, #288]	; (800ad4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ac2a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac2c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac2e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac30:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac32:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac34:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac36:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ac38:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	4a43      	ldr	r2, [pc, #268]	; (800ad4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800ac3e:	6093      	str	r3, [r2, #8]
 800ac40:	e76c      	b.n	800ab1c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac42:	3b48      	subs	r3, #72	; 0x48
 800ac44:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ac48:	3218      	adds	r2, #24
 800ac4a:	429d      	cmp	r5, r3
 800ac4c:	bf18      	it	ne
 800ac4e:	428d      	cmpne	r5, r1
 800ac50:	bf14      	ite	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	2300      	moveq	r3, #0
 800ac56:	4295      	cmp	r5, r2
 800ac58:	bf0c      	ite	eq
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	f003 0301 	andne.w	r3, r3, #1
 800ac60:	b11b      	cbz	r3, 800ac6a <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 800ac62:	4b3b      	ldr	r3, [pc, #236]	; (800ad50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac64:	429d      	cmp	r5, r3
 800ac66:	f040 8210 	bne.w	800b08a <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 800ac6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac6e:	4b39      	ldr	r3, [pc, #228]	; (800ad54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800ac70:	4839      	ldr	r0, [pc, #228]	; (800ad58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac72:	4a31      	ldr	r2, [pc, #196]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac74:	429d      	cmp	r5, r3
 800ac76:	bf18      	it	ne
 800ac78:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ac7a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ac7c:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 800ac80:	bf14      	ite	ne
 800ac82:	2301      	movne	r3, #1
 800ac84:	2300      	moveq	r3, #0
 800ac86:	4295      	cmp	r5, r2
 800ac88:	bf0c      	ite	eq
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	f003 0301 	andne.w	r3, r3, #1
 800ac90:	b11b      	cbz	r3, 800ac9a <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 800ac92:	4b2f      	ldr	r3, [pc, #188]	; (800ad50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ac94:	429d      	cmp	r5, r3
 800ac96:	f040 8212 	bne.w	800b0be <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800ac9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ac9e:	4b2d      	ldr	r3, [pc, #180]	; (800ad54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800aca0:	482d      	ldr	r0, [pc, #180]	; (800ad58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aca2:	4925      	ldr	r1, [pc, #148]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aca4:	429d      	cmp	r5, r3
 800aca6:	bf18      	it	ne
 800aca8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800acaa:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acac:	bf14      	ite	ne
 800acae:	2301      	movne	r3, #1
 800acb0:	2300      	moveq	r3, #0
 800acb2:	4a2a      	ldr	r2, [pc, #168]	; (800ad5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800acb4:	4295      	cmp	r5, r2
 800acb6:	bf0c      	ite	eq
 800acb8:	2300      	moveq	r3, #0
 800acba:	f003 0301 	andne.w	r3, r3, #1
 800acbe:	b11b      	cbz	r3, 800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 800acc0:	4b23      	ldr	r3, [pc, #140]	; (800ad50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800acc2:	429d      	cmp	r5, r3
 800acc4:	f040 822b 	bne.w	800b11e <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800acc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800accc:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800acce:	4821      	ldr	r0, [pc, #132]	; (800ad54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acd0:	4919      	ldr	r1, [pc, #100]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acd2:	429d      	cmp	r5, r3
 800acd4:	bf18      	it	ne
 800acd6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800acd8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acda:	bf14      	ite	ne
 800acdc:	2301      	movne	r3, #1
 800acde:	2300      	moveq	r3, #0
 800ace0:	4a1e      	ldr	r2, [pc, #120]	; (800ad5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ace2:	4295      	cmp	r5, r2
 800ace4:	bf0c      	ite	eq
 800ace6:	2300      	moveq	r3, #0
 800ace8:	f003 0301 	andne.w	r3, r3, #1
 800acec:	b11b      	cbz	r3, 800acf6 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 800acee:	4b18      	ldr	r3, [pc, #96]	; (800ad50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800acf0:	429d      	cmp	r5, r3
 800acf2:	f040 81fc 	bne.w	800b0ee <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800acf6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800acfa:	4b17      	ldr	r3, [pc, #92]	; (800ad58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800acfc:	4815      	ldr	r0, [pc, #84]	; (800ad54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800acfe:	490e      	ldr	r1, [pc, #56]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad00:	429d      	cmp	r5, r3
 800ad02:	bf18      	it	ne
 800ad04:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad06:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ad08:	bf14      	ite	ne
 800ad0a:	2301      	movne	r3, #1
 800ad0c:	2300      	moveq	r3, #0
 800ad0e:	4a13      	ldr	r2, [pc, #76]	; (800ad5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800ad10:	4295      	cmp	r5, r2
 800ad12:	bf0c      	ite	eq
 800ad14:	2300      	moveq	r3, #0
 800ad16:	f003 0301 	andne.w	r3, r3, #1
 800ad1a:	b11b      	cbz	r3, 800ad24 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800ad1e:	429d      	cmp	r5, r3
 800ad20:	f040 8215 	bne.w	800b14e <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 800ad24:	2340      	movs	r3, #64	; 0x40
 800ad26:	e73b      	b.n	800aba0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 800ad28:	40026458 	.word	0x40026458
 800ad2c:	40026010 	.word	0x40026010
 800ad30:	40026070 	.word	0x40026070
 800ad34:	40026470 	.word	0x40026470
 800ad38:	40026400 	.word	0x40026400
 800ad3c:	0802e288 	.word	0x0802e288
 800ad40:	400260b8 	.word	0x400260b8
 800ad44:	40026410 	.word	0x40026410
 800ad48:	40026058 	.word	0x40026058
 800ad4c:	40026000 	.word	0x40026000
 800ad50:	40026488 	.word	0x40026488
 800ad54:	40026028 	.word	0x40026028
 800ad58:	40026428 	.word	0x40026428
 800ad5c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad60:	3b48      	subs	r3, #72	; 0x48
 800ad62:	3118      	adds	r1, #24
 800ad64:	3218      	adds	r2, #24
 800ad66:	429d      	cmp	r5, r3
 800ad68:	bf18      	it	ne
 800ad6a:	428d      	cmpne	r5, r1
 800ad6c:	bf14      	ite	ne
 800ad6e:	2301      	movne	r3, #1
 800ad70:	2300      	moveq	r3, #0
 800ad72:	4295      	cmp	r5, r2
 800ad74:	bf0c      	ite	eq
 800ad76:	2300      	moveq	r3, #0
 800ad78:	f003 0301 	andne.w	r3, r3, #1
 800ad7c:	b11b      	cbz	r3, 800ad86 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800ad7e:	4b7d      	ldr	r3, [pc, #500]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ad80:	429d      	cmp	r5, r3
 800ad82:	f040 8103 	bne.w	800af8c <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 800ad86:	4b7c      	ldr	r3, [pc, #496]	; (800af78 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800ad88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ad90:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad92:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ad96:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad98:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ad9c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ad9e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ada0:	2240      	movs	r2, #64	; 0x40
 800ada2:	e6b9      	b.n	800ab18 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ada4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800ada8:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800adac:	3218      	adds	r2, #24
 800adae:	429d      	cmp	r5, r3
 800adb0:	bf18      	it	ne
 800adb2:	428d      	cmpne	r5, r1
 800adb4:	bf14      	ite	ne
 800adb6:	2301      	movne	r3, #1
 800adb8:	2300      	moveq	r3, #0
 800adba:	4295      	cmp	r5, r2
 800adbc:	bf0c      	ite	eq
 800adbe:	2300      	moveq	r3, #0
 800adc0:	f003 0301 	andne.w	r3, r3, #1
 800adc4:	b11b      	cbz	r3, 800adce <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 800adc6:	4b6b      	ldr	r3, [pc, #428]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800adc8:	429d      	cmp	r5, r3
 800adca:	f040 81d8 	bne.w	800b17e <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 800adce:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800add2:	4b6a      	ldr	r3, [pc, #424]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800add4:	486a      	ldr	r0, [pc, #424]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800add6:	4a6b      	ldr	r2, [pc, #428]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800add8:	429d      	cmp	r5, r3
 800adda:	bf18      	it	ne
 800addc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800adde:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ade0:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800ade4:	bf14      	ite	ne
 800ade6:	2301      	movne	r3, #1
 800ade8:	2300      	moveq	r3, #0
 800adea:	4295      	cmp	r5, r2
 800adec:	bf0c      	ite	eq
 800adee:	2300      	moveq	r3, #0
 800adf0:	f003 0301 	andne.w	r3, r3, #1
 800adf4:	b11b      	cbz	r3, 800adfe <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800adf6:	4b5f      	ldr	r3, [pc, #380]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800adf8:	429d      	cmp	r5, r3
 800adfa:	f040 81d9 	bne.w	800b1b0 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800adfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae02:	4b5e      	ldr	r3, [pc, #376]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ae04:	485e      	ldr	r0, [pc, #376]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae06:	495f      	ldr	r1, [pc, #380]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae08:	429d      	cmp	r5, r3
 800ae0a:	bf18      	it	ne
 800ae0c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ae0e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae10:	bf14      	ite	ne
 800ae12:	2301      	movne	r3, #1
 800ae14:	2300      	moveq	r3, #0
 800ae16:	4a5c      	ldr	r2, [pc, #368]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae18:	4295      	cmp	r5, r2
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2300      	moveq	r3, #0
 800ae1e:	f003 0301 	andne.w	r3, r3, #1
 800ae22:	b11b      	cbz	r3, 800ae2c <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 800ae24:	4b53      	ldr	r3, [pc, #332]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae26:	429d      	cmp	r5, r3
 800ae28:	f040 822c 	bne.w	800b284 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800ae2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae30:	4b53      	ldr	r3, [pc, #332]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800ae32:	4852      	ldr	r0, [pc, #328]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae34:	4953      	ldr	r1, [pc, #332]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae36:	429d      	cmp	r5, r3
 800ae38:	bf18      	it	ne
 800ae3a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ae3c:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae3e:	bf14      	ite	ne
 800ae40:	2301      	movne	r3, #1
 800ae42:	2300      	moveq	r3, #0
 800ae44:	4a50      	ldr	r2, [pc, #320]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae46:	4295      	cmp	r5, r2
 800ae48:	bf0c      	ite	eq
 800ae4a:	2300      	moveq	r3, #0
 800ae4c:	f003 0301 	andne.w	r3, r3, #1
 800ae50:	b11b      	cbz	r3, 800ae5a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800ae52:	4b48      	ldr	r3, [pc, #288]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae54:	429d      	cmp	r5, r3
 800ae56:	f040 81db 	bne.w	800b210 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800ae5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae5e:	4b47      	ldr	r3, [pc, #284]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800ae60:	4847      	ldr	r0, [pc, #284]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae62:	4948      	ldr	r1, [pc, #288]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae64:	429d      	cmp	r5, r3
 800ae66:	bf18      	it	ne
 800ae68:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ae6a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ae6c:	bf14      	ite	ne
 800ae6e:	2301      	movne	r3, #1
 800ae70:	2300      	moveq	r3, #0
 800ae72:	4a45      	ldr	r2, [pc, #276]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800ae74:	4295      	cmp	r5, r2
 800ae76:	bf0c      	ite	eq
 800ae78:	2300      	moveq	r3, #0
 800ae7a:	f003 0301 	andne.w	r3, r3, #1
 800ae7e:	b11b      	cbz	r3, 800ae88 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800ae80:	4b3c      	ldr	r3, [pc, #240]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800ae82:	429d      	cmp	r5, r3
 800ae84:	f040 822d 	bne.w	800b2e2 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800ae88:	2340      	movs	r3, #64	; 0x40
 800ae8a:	e6d7      	b.n	800ac3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800ae8c:	3b48      	subs	r3, #72	; 0x48
 800ae8e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800ae92:	3218      	adds	r2, #24
 800ae94:	429d      	cmp	r5, r3
 800ae96:	bf18      	it	ne
 800ae98:	428d      	cmpne	r5, r1
 800ae9a:	bf14      	ite	ne
 800ae9c:	2301      	movne	r3, #1
 800ae9e:	2300      	moveq	r3, #0
 800aea0:	4295      	cmp	r5, r2
 800aea2:	bf0c      	ite	eq
 800aea4:	2300      	moveq	r3, #0
 800aea6:	f003 0301 	andne.w	r3, r3, #1
 800aeaa:	b11b      	cbz	r3, 800aeb4 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800aeac:	4b31      	ldr	r3, [pc, #196]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	f040 81d0 	bne.w	800b254 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 800aeb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aeb8:	4b31      	ldr	r3, [pc, #196]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800aeba:	4830      	ldr	r0, [pc, #192]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aebc:	4a31      	ldr	r2, [pc, #196]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aebe:	429d      	cmp	r5, r3
 800aec0:	bf18      	it	ne
 800aec2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800aec4:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aec6:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800aeca:	bf14      	ite	ne
 800aecc:	2301      	movne	r3, #1
 800aece:	2300      	moveq	r3, #0
 800aed0:	4295      	cmp	r5, r2
 800aed2:	bf0c      	ite	eq
 800aed4:	2300      	moveq	r3, #0
 800aed6:	f003 0301 	andne.w	r3, r3, #1
 800aeda:	b11b      	cbz	r3, 800aee4 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 800aedc:	4b25      	ldr	r3, [pc, #148]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800aede:	429d      	cmp	r5, r3
 800aee0:	f040 817e 	bne.w	800b1e0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800aee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aee8:	4b24      	ldr	r3, [pc, #144]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800aeea:	4825      	ldr	r0, [pc, #148]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aeec:	4925      	ldr	r1, [pc, #148]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aeee:	429d      	cmp	r5, r3
 800aef0:	bf18      	it	ne
 800aef2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aef4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aef6:	bf14      	ite	ne
 800aef8:	2301      	movne	r3, #1
 800aefa:	2300      	moveq	r3, #0
 800aefc:	4a22      	ldr	r2, [pc, #136]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800aefe:	4295      	cmp	r5, r2
 800af00:	bf0c      	ite	eq
 800af02:	2300      	moveq	r3, #0
 800af04:	f003 0301 	andne.w	r3, r3, #1
 800af08:	b11b      	cbz	r3, 800af12 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800af0a:	4b1a      	ldr	r3, [pc, #104]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800af0c:	429d      	cmp	r5, r3
 800af0e:	f040 81fe 	bne.w	800b30e <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800af12:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800af18:	4818      	ldr	r0, [pc, #96]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af1a:	491a      	ldr	r1, [pc, #104]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af1c:	429d      	cmp	r5, r3
 800af1e:	bf18      	it	ne
 800af20:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af22:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af24:	bf14      	ite	ne
 800af26:	2301      	movne	r3, #1
 800af28:	2300      	moveq	r3, #0
 800af2a:	4a17      	ldr	r2, [pc, #92]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800af2c:	4295      	cmp	r5, r2
 800af2e:	bf0c      	ite	eq
 800af30:	2300      	moveq	r3, #0
 800af32:	f003 0301 	andne.w	r3, r3, #1
 800af36:	b11b      	cbz	r3, 800af40 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800af38:	4b0e      	ldr	r3, [pc, #56]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800af3a:	429d      	cmp	r5, r3
 800af3c:	f040 81ba 	bne.w	800b2b4 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800af40:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af44:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800af46:	480d      	ldr	r0, [pc, #52]	; (800af7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af48:	490e      	ldr	r1, [pc, #56]	; (800af84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af4a:	429d      	cmp	r5, r3
 800af4c:	bf18      	it	ne
 800af4e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800af50:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800af52:	bf14      	ite	ne
 800af54:	2301      	movne	r3, #1
 800af56:	2300      	moveq	r3, #0
 800af58:	4a0b      	ldr	r2, [pc, #44]	; (800af88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800af5a:	4295      	cmp	r5, r2
 800af5c:	bf0c      	ite	eq
 800af5e:	2300      	moveq	r3, #0
 800af60:	f003 0301 	andne.w	r3, r3, #1
 800af64:	b11b      	cbz	r3, 800af6e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800af66:	4b03      	ldr	r3, [pc, #12]	; (800af74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800af68:	429d      	cmp	r5, r3
 800af6a:	f040 81e6 	bne.w	800b33a <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	e644      	b.n	800abfc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800af72:	bf00      	nop
 800af74:	40026488 	.word	0x40026488
 800af78:	40026400 	.word	0x40026400
 800af7c:	40026428 	.word	0x40026428
 800af80:	40026028 	.word	0x40026028
 800af84:	40026000 	.word	0x40026000
 800af88:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800af8c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800af90:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800af94:	3218      	adds	r2, #24
 800af96:	429d      	cmp	r5, r3
 800af98:	bf18      	it	ne
 800af9a:	428d      	cmpne	r5, r1
 800af9c:	bf14      	ite	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	2300      	moveq	r3, #0
 800afa2:	4295      	cmp	r5, r2
 800afa4:	bf0c      	ite	eq
 800afa6:	2300      	moveq	r3, #0
 800afa8:	f003 0301 	andne.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 81e6 	beq.w	800b37e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800afb2:	4ba3      	ldr	r3, [pc, #652]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800afb4:	429d      	cmp	r5, r3
 800afb6:	f000 81e2 	beq.w	800b37e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800afba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afbe:	4ba1      	ldr	r3, [pc, #644]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800afc0:	48a1      	ldr	r0, [pc, #644]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800afc2:	4aa2      	ldr	r2, [pc, #648]	; (800b24c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afc4:	429d      	cmp	r5, r3
 800afc6:	bf18      	it	ne
 800afc8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800afca:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800afcc:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800afd0:	bf14      	ite	ne
 800afd2:	2301      	movne	r3, #1
 800afd4:	2300      	moveq	r3, #0
 800afd6:	4295      	cmp	r5, r2
 800afd8:	bf0c      	ite	eq
 800afda:	2300      	moveq	r3, #0
 800afdc:	f003 0301 	andne.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 81c9 	beq.w	800b378 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800afe6:	4b96      	ldr	r3, [pc, #600]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800afe8:	429d      	cmp	r5, r3
 800afea:	f000 81c5 	beq.w	800b378 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800afee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aff2:	4b94      	ldr	r3, [pc, #592]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800aff4:	4894      	ldr	r0, [pc, #592]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800aff6:	4995      	ldr	r1, [pc, #596]	; (800b24c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800aff8:	429d      	cmp	r5, r3
 800affa:	bf18      	it	ne
 800affc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800affe:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b000:	bf14      	ite	ne
 800b002:	2301      	movne	r3, #1
 800b004:	2300      	moveq	r3, #0
 800b006:	4a92      	ldr	r2, [pc, #584]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b008:	4295      	cmp	r5, r2
 800b00a:	bf0c      	ite	eq
 800b00c:	2300      	moveq	r3, #0
 800b00e:	f003 0301 	andne.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 81ad 	beq.w	800b372 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800b018:	4b89      	ldr	r3, [pc, #548]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b01a:	429d      	cmp	r5, r3
 800b01c:	f000 81a9 	beq.w	800b372 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 800b020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b024:	4b87      	ldr	r3, [pc, #540]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b026:	4888      	ldr	r0, [pc, #544]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b028:	4988      	ldr	r1, [pc, #544]	; (800b24c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b02a:	429d      	cmp	r5, r3
 800b02c:	bf18      	it	ne
 800b02e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b030:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b032:	bf14      	ite	ne
 800b034:	2301      	movne	r3, #1
 800b036:	2300      	moveq	r3, #0
 800b038:	4a85      	ldr	r2, [pc, #532]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b03a:	4295      	cmp	r5, r2
 800b03c:	bf0c      	ite	eq
 800b03e:	2300      	moveq	r3, #0
 800b040:	f003 0301 	andne.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8191 	beq.w	800b36c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800b04a:	4b7d      	ldr	r3, [pc, #500]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b04c:	429d      	cmp	r5, r3
 800b04e:	f000 818d 	beq.w	800b36c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800b052:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b056:	4b7b      	ldr	r3, [pc, #492]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b058:	487b      	ldr	r0, [pc, #492]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b05a:	497c      	ldr	r1, [pc, #496]	; (800b24c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b05c:	429d      	cmp	r5, r3
 800b05e:	bf18      	it	ne
 800b060:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b062:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b064:	bf14      	ite	ne
 800b066:	2301      	movne	r3, #1
 800b068:	2300      	moveq	r3, #0
 800b06a:	4a79      	ldr	r2, [pc, #484]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b06c:	4295      	cmp	r5, r2
 800b06e:	bf0c      	ite	eq
 800b070:	2300      	moveq	r3, #0
 800b072:	f003 0301 	andne.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 8174 	beq.w	800b364 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800b07c:	4b70      	ldr	r3, [pc, #448]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b07e:	429d      	cmp	r5, r3
 800b080:	f000 8170 	beq.w	800b364 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800b084:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b088:	e546      	b.n	800ab18 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b08a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800b08e:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800b092:	3218      	adds	r2, #24
 800b094:	429d      	cmp	r5, r3
 800b096:	bf18      	it	ne
 800b098:	428d      	cmpne	r5, r1
 800b09a:	bf14      	ite	ne
 800b09c:	2301      	movne	r3, #1
 800b09e:	2300      	moveq	r3, #0
 800b0a0:	4295      	cmp	r5, r2
 800b0a2:	bf0c      	ite	eq
 800b0a4:	2300      	moveq	r3, #0
 800b0a6:	f003 0301 	andne.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f000 816d 	beq.w	800b38a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b0b0:	4b63      	ldr	r3, [pc, #396]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0b2:	429d      	cmp	r5, r3
 800b0b4:	f000 8169 	beq.w	800b38a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800b0b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b0bc:	e5d7      	b.n	800ac6e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b0be:	4b62      	ldr	r3, [pc, #392]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b0c0:	4960      	ldr	r1, [pc, #384]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b0c2:	4a63      	ldr	r2, [pc, #396]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	bf18      	it	ne
 800b0c8:	428d      	cmpne	r5, r1
 800b0ca:	bf14      	ite	ne
 800b0cc:	2301      	movne	r3, #1
 800b0ce:	2300      	moveq	r3, #0
 800b0d0:	4295      	cmp	r5, r2
 800b0d2:	bf0c      	ite	eq
 800b0d4:	2300      	moveq	r3, #0
 800b0d6:	f003 0301 	andne.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 815b 	beq.w	800b396 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b0e0:	4b57      	ldr	r3, [pc, #348]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b0e2:	429d      	cmp	r5, r3
 800b0e4:	f000 8157 	beq.w	800b396 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800b0e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b0ec:	e5d7      	b.n	800ac9e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b0ee:	4b55      	ldr	r3, [pc, #340]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b0f0:	4955      	ldr	r1, [pc, #340]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b0f2:	4a57      	ldr	r2, [pc, #348]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b0f4:	429d      	cmp	r5, r3
 800b0f6:	bf18      	it	ne
 800b0f8:	428d      	cmpne	r5, r1
 800b0fa:	bf14      	ite	ne
 800b0fc:	2301      	movne	r3, #1
 800b0fe:	2300      	moveq	r3, #0
 800b100:	4295      	cmp	r5, r2
 800b102:	bf0c      	ite	eq
 800b104:	2300      	moveq	r3, #0
 800b106:	f003 0301 	andne.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 8140 	beq.w	800b390 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b110:	4b4b      	ldr	r3, [pc, #300]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b112:	429d      	cmp	r5, r3
 800b114:	f000 813c 	beq.w	800b390 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800b118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b11c:	e5ed      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b11e:	4b49      	ldr	r3, [pc, #292]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b120:	4949      	ldr	r1, [pc, #292]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b122:	4a4b      	ldr	r2, [pc, #300]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b124:	429d      	cmp	r5, r3
 800b126:	bf18      	it	ne
 800b128:	428d      	cmpne	r5, r1
 800b12a:	bf14      	ite	ne
 800b12c:	2301      	movne	r3, #1
 800b12e:	2300      	moveq	r3, #0
 800b130:	4295      	cmp	r5, r2
 800b132:	bf0c      	ite	eq
 800b134:	2300      	moveq	r3, #0
 800b136:	f003 0301 	andne.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 812e 	beq.w	800b39c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b140:	4b3f      	ldr	r3, [pc, #252]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b142:	429d      	cmp	r5, r3
 800b144:	f000 812a 	beq.w	800b39c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800b148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b14c:	e5be      	b.n	800accc <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b14e:	4b3d      	ldr	r3, [pc, #244]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b150:	493d      	ldr	r1, [pc, #244]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b152:	4a3f      	ldr	r2, [pc, #252]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b154:	429d      	cmp	r5, r3
 800b156:	bf18      	it	ne
 800b158:	428d      	cmpne	r5, r1
 800b15a:	bf14      	ite	ne
 800b15c:	2301      	movne	r3, #1
 800b15e:	2300      	moveq	r3, #0
 800b160:	4295      	cmp	r5, r2
 800b162:	bf0c      	ite	eq
 800b164:	2300      	moveq	r3, #0
 800b166:	f003 0301 	andne.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 810a 	beq.w	800b384 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b170:	4b33      	ldr	r3, [pc, #204]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b172:	429d      	cmp	r5, r3
 800b174:	f000 8106 	beq.w	800b384 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 800b178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b17c:	e510      	b.n	800aba0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b17e:	3b48      	subs	r3, #72	; 0x48
 800b180:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800b184:	3218      	adds	r2, #24
 800b186:	429d      	cmp	r5, r3
 800b188:	bf18      	it	ne
 800b18a:	428d      	cmpne	r5, r1
 800b18c:	bf14      	ite	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	2300      	moveq	r3, #0
 800b192:	4295      	cmp	r5, r2
 800b194:	bf0c      	ite	eq
 800b196:	2300      	moveq	r3, #0
 800b198:	f003 0301 	andne.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 8112 	beq.w	800b3c6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b1a2:	4b27      	ldr	r3, [pc, #156]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b1a4:	429d      	cmp	r5, r3
 800b1a6:	f000 810e 	beq.w	800b3c6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b1aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b1ae:	e610      	b.n	800add2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b1b0:	4b24      	ldr	r3, [pc, #144]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b1b2:	4925      	ldr	r1, [pc, #148]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b1b4:	4a26      	ldr	r2, [pc, #152]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	bf18      	it	ne
 800b1ba:	428d      	cmpne	r5, r1
 800b1bc:	bf14      	ite	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	2300      	moveq	r3, #0
 800b1c2:	4295      	cmp	r5, r2
 800b1c4:	bf0c      	ite	eq
 800b1c6:	2300      	moveq	r3, #0
 800b1c8:	f003 0301 	andne.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80ee 	beq.w	800b3ae <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b1d2:	4b1b      	ldr	r3, [pc, #108]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	f000 80ea 	beq.w	800b3ae <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800b1da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b1de:	e610      	b.n	800ae02 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800b1e0:	4b19      	ldr	r3, [pc, #100]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b1e2:	4918      	ldr	r1, [pc, #96]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b1e4:	4a1a      	ldr	r2, [pc, #104]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	bf18      	it	ne
 800b1ea:	428d      	cmpne	r5, r1
 800b1ec:	bf14      	ite	ne
 800b1ee:	2301      	movne	r3, #1
 800b1f0:	2300      	moveq	r3, #0
 800b1f2:	4295      	cmp	r5, r2
 800b1f4:	bf0c      	ite	eq
 800b1f6:	2300      	moveq	r3, #0
 800b1f8:	f003 0301 	andne.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80e8 	beq.w	800b3d2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b202:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b204:	429d      	cmp	r5, r3
 800b206:	f000 80e4 	beq.w	800b3d2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b20a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b20e:	e66b      	b.n	800aee8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b210:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800b212:	490c      	ldr	r1, [pc, #48]	; (800b244 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800b214:	4a0e      	ldr	r2, [pc, #56]	; (800b250 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800b216:	429d      	cmp	r5, r3
 800b218:	bf18      	it	ne
 800b21a:	428d      	cmpne	r5, r1
 800b21c:	bf14      	ite	ne
 800b21e:	2301      	movne	r3, #1
 800b220:	2300      	moveq	r3, #0
 800b222:	4295      	cmp	r5, r2
 800b224:	bf0c      	ite	eq
 800b226:	2300      	moveq	r3, #0
 800b228:	f003 0301 	andne.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80bb 	beq.w	800b3a8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800b234:	429d      	cmp	r5, r3
 800b236:	f000 80b7 	beq.w	800b3a8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800b23a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b23e:	e60e      	b.n	800ae5e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800b240:	400264a0 	.word	0x400264a0
 800b244:	40026040 	.word	0x40026040
 800b248:	40026440 	.word	0x40026440
 800b24c:	40026400 	.word	0x40026400
 800b250:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b254:	3b48      	subs	r3, #72	; 0x48
 800b256:	3118      	adds	r1, #24
 800b258:	3218      	adds	r2, #24
 800b25a:	429d      	cmp	r5, r3
 800b25c:	bf18      	it	ne
 800b25e:	428d      	cmpne	r5, r1
 800b260:	bf14      	ite	ne
 800b262:	2301      	movne	r3, #1
 800b264:	2300      	moveq	r3, #0
 800b266:	4295      	cmp	r5, r2
 800b268:	bf0c      	ite	eq
 800b26a:	2300      	moveq	r3, #0
 800b26c:	f003 0301 	andne.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80ab 	beq.w	800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b276:	4b5a      	ldr	r3, [pc, #360]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b278:	429d      	cmp	r5, r3
 800b27a:	f000 80a7 	beq.w	800b3cc <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b27e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b282:	e619      	b.n	800aeb8 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b284:	4b57      	ldr	r3, [pc, #348]	; (800b3e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b286:	4958      	ldr	r1, [pc, #352]	; (800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b288:	4a58      	ldr	r2, [pc, #352]	; (800b3ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b28a:	429d      	cmp	r5, r3
 800b28c:	bf18      	it	ne
 800b28e:	428d      	cmpne	r5, r1
 800b290:	bf14      	ite	ne
 800b292:	2301      	movne	r3, #1
 800b294:	2300      	moveq	r3, #0
 800b296:	4295      	cmp	r5, r2
 800b298:	bf0c      	ite	eq
 800b29a:	2300      	moveq	r3, #0
 800b29c:	f003 0301 	andne.w	r3, r3, #1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 808a 	beq.w	800b3ba <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b2a6:	4b4e      	ldr	r3, [pc, #312]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2a8:	429d      	cmp	r5, r3
 800b2aa:	f000 8086 	beq.w	800b3ba <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800b2ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b2b2:	e5bd      	b.n	800ae30 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b2b4:	4b4c      	ldr	r3, [pc, #304]	; (800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b2b6:	494b      	ldr	r1, [pc, #300]	; (800b3e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b2b8:	4a4c      	ldr	r2, [pc, #304]	; (800b3ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b2ba:	429d      	cmp	r5, r3
 800b2bc:	bf18      	it	ne
 800b2be:	428d      	cmpne	r5, r1
 800b2c0:	bf14      	ite	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	4295      	cmp	r5, r2
 800b2c8:	bf0c      	ite	eq
 800b2ca:	2300      	moveq	r3, #0
 800b2cc:	f003 0301 	andne.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 8081 	beq.w	800b3d8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b2d6:	4b42      	ldr	r3, [pc, #264]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b2d8:	429d      	cmp	r5, r3
 800b2da:	d07d      	beq.n	800b3d8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800b2dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2e0:	e630      	b.n	800af44 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b2e2:	4b40      	ldr	r3, [pc, #256]	; (800b3e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b2e4:	4940      	ldr	r1, [pc, #256]	; (800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b2e6:	4a41      	ldr	r2, [pc, #260]	; (800b3ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b2e8:	429d      	cmp	r5, r3
 800b2ea:	bf18      	it	ne
 800b2ec:	428d      	cmpne	r5, r1
 800b2ee:	bf14      	ite	ne
 800b2f0:	2301      	movne	r3, #1
 800b2f2:	2300      	moveq	r3, #0
 800b2f4:	4295      	cmp	r5, r2
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2300      	moveq	r3, #0
 800b2fa:	f003 0301 	andne.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d058      	beq.n	800b3b4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b302:	4b37      	ldr	r3, [pc, #220]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b304:	429d      	cmp	r5, r3
 800b306:	d055      	beq.n	800b3b4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800b308:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b30c:	e496      	b.n	800ac3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b30e:	4b35      	ldr	r3, [pc, #212]	; (800b3e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b310:	4935      	ldr	r1, [pc, #212]	; (800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b312:	4a36      	ldr	r2, [pc, #216]	; (800b3ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b314:	429d      	cmp	r5, r3
 800b316:	bf18      	it	ne
 800b318:	428d      	cmpne	r5, r1
 800b31a:	bf14      	ite	ne
 800b31c:	2301      	movne	r3, #1
 800b31e:	2300      	moveq	r3, #0
 800b320:	4295      	cmp	r5, r2
 800b322:	bf0c      	ite	eq
 800b324:	2300      	moveq	r3, #0
 800b326:	f003 0301 	andne.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d048      	beq.n	800b3c0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b32e:	4b2c      	ldr	r3, [pc, #176]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b330:	429d      	cmp	r5, r3
 800b332:	d045      	beq.n	800b3c0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800b334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b338:	e5ed      	b.n	800af16 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b33a:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800b33c:	492a      	ldr	r1, [pc, #168]	; (800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800b33e:	4a2b      	ldr	r2, [pc, #172]	; (800b3ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800b340:	429d      	cmp	r5, r3
 800b342:	bf18      	it	ne
 800b344:	428d      	cmpne	r5, r1
 800b346:	bf14      	ite	ne
 800b348:	2301      	movne	r3, #1
 800b34a:	2300      	moveq	r3, #0
 800b34c:	4295      	cmp	r5, r2
 800b34e:	bf0c      	ite	eq
 800b350:	2300      	moveq	r3, #0
 800b352:	f003 0301 	andne.w	r3, r3, #1
 800b356:	b323      	cbz	r3, 800b3a2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b358:	4b21      	ldr	r3, [pc, #132]	; (800b3e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800b35a:	429d      	cmp	r5, r3
 800b35c:	d021      	beq.n	800b3a2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800b35e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b362:	e44b      	b.n	800abfc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800b364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b368:	f7ff bbd6 	b.w	800ab18 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b36c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b370:	e671      	b.n	800b056 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b372:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b376:	e655      	b.n	800b024 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b37c:	e639      	b.n	800aff2 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b382:	e61c      	b.n	800afbe <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b388:	e40a      	b.n	800aba0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b38a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b38e:	e46e      	b.n	800ac6e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b390:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b394:	e4b1      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b39a:	e480      	b.n	800ac9e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b39c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b3a0:	e494      	b.n	800accc <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b3a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3a6:	e429      	b.n	800abfc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b3a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b3ac:	e557      	b.n	800ae5e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b3ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3b2:	e526      	b.n	800ae02 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b3b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3b8:	e440      	b.n	800ac3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b3ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b3be:	e537      	b.n	800ae30 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800b3c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b3c4:	e5a7      	b.n	800af16 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3ca:	e502      	b.n	800add2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800b3cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3d0:	e572      	b.n	800aeb8 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b3d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3d6:	e587      	b.n	800aee8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b3d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b3dc:	e5b2      	b.n	800af44 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800b3de:	bf00      	nop
 800b3e0:	400264a0 	.word	0x400264a0
 800b3e4:	40026040 	.word	0x40026040
 800b3e8:	40026440 	.word	0x40026440
 800b3ec:	400260a0 	.word	0x400260a0

0800b3f0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	d15b      	bne.n	800b4b0 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800b3f8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800b3fc:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b3fe:	69e3      	ldr	r3, [r4, #28]
 800b400:	b90b      	cbnz	r3, 800b406 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800b402:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800b406:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b408:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b40a:	4b2e      	ldr	r3, [pc, #184]	; (800b4c4 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800b40c:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800b40e:	402b      	ands	r3, r5
 800b410:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800b412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800b416:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800b418:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b41a:	f7fd ffbb 	bl	8009394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800b41e:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b420:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b422:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800b424:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b426:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800b428:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800b42a:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b42c:	f7fd ffb2 	bl	8009394 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800b430:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b432:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b436:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800b438:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800b43a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800b43c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800b43e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800b440:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800b442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800b446:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800b448:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800b44a:	f7fd ffa3 	bl	8009394 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800b44e:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b450:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800b452:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800b454:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800b456:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b458:	f7fd ff9c 	bl	8009394 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800b45c:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b45e:	491a      	ldr	r1, [pc, #104]	; (800b4c8 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b460:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800b464:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b466:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800b468:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800b46a:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b46c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800b46e:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800b470:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800b472:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800b474:	f7fd ff8e 	bl	8009394 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800b478:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b47a:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b47c:	4a14      	ldr	r2, [pc, #80]	; (800b4d0 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800b47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b482:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800b484:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800b486:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800b488:	f7fd ff84 	bl	8009394 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800b48c:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b48e:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800b490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b494:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800b496:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800b498:	d103      	bne.n	800b4a2 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800b49a:	69d9      	ldr	r1, [r3, #28]
 800b49c:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <ETH_MACDMAConfig+0xe4>)
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b4a2:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800b4a6:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800b4a8:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800b4aa:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800b4ac:	645a      	str	r2, [r3, #68]	; 0x44
}
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800b4b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800b4b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4b8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800b4bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800b4c0:	e79d      	b.n	800b3fe <ETH_MACDMAConfig+0xe>
 800b4c2:	bf00      	nop
 800b4c4:	ff20810f 	.word	0xff20810f
 800b4c8:	f8de3f23 	.word	0xf8de3f23
 800b4cc:	02200004 	.word	0x02200004
 800b4d0:	02c12080 	.word	0x02c12080
 800b4d4:	00010040 	.word	0x00010040
 800b4d8:	40028000 	.word	0x40028000

0800b4dc <HAL_ETH_DMATxDescListInit>:
{
 800b4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800b4e2:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b4e6:	2801      	cmp	r0, #1
 800b4e8:	d03b      	beq.n	800b562 <HAL_ETH_DMATxDescListInit+0x86>
 800b4ea:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b4ee:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800b4f0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800b4f4:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b4f8:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800b4fc:	b31b      	cbz	r3, 800b546 <HAL_ETH_DMATxDescListInit+0x6a>
 800b4fe:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b500:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800b504:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b508:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b50a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800b50e:	f10c 36ff 	add.w	r6, ip, #4294967295
 800b512:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800b516:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800b518:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800b51a:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800b51c:	f1ba 0f00 	cmp.w	sl, #0
 800b520:	d103      	bne.n	800b52a <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800b522:	6817      	ldr	r7, [r2, #0]
 800b524:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800b528:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800b52a:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800b52c:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800b530:	bf34      	ite	cc
 800b532:	4675      	movcc	r5, lr
 800b534:	f102 0e20 	addcs.w	lr, r2, #32
 800b538:	4563      	cmp	r3, ip
 800b53a:	60d5      	str	r5, [r2, #12]
 800b53c:	f10c 0501 	add.w	r5, ip, #1
 800b540:	4672      	mov	r2, lr
 800b542:	46ac      	mov	ip, r5
 800b544:	d8e3      	bhi.n	800b50e <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b546:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800b54a:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b54c:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800b54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b552:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800b554:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800b558:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b55a:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800b55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800b562:	2002      	movs	r0, #2
}
 800b564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b568 <HAL_ETH_DMARxDescListInit>:
{
 800b568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56c:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800b56e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800b572:	2801      	cmp	r0, #1
 800b574:	d033      	beq.n	800b5de <HAL_ETH_DMARxDescListInit+0x76>
 800b576:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b57a:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800b57c:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800b57e:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b582:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800b586:	b1eb      	cbz	r3, 800b5c4 <HAL_ETH_DMARxDescListInit+0x5c>
 800b588:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800b58a:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b58e:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b590:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b594:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800b598:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800b59c:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800b59e:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800b5a0:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800b5a4:	45c6      	cmp	lr, r8
 800b5a6:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800b5aa:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b5ac:	bf34      	ite	cc
 800b5ae:	4675      	movcc	r5, lr
 800b5b0:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800b5b4:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800b5b6:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800b5b8:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800b5ba:	f10c 0501 	add.w	r5, ip, #1
 800b5be:	4672      	mov	r2, lr
 800b5c0:	46ac      	mov	ip, r5
 800b5c2:	d8e9      	bhi.n	800b598 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b5c4:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800b5c6:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800b5c8:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800b5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ce:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800b5d0:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800b5d4:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800b5d6:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800b5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800b5de:	2002      	movs	r0, #2
}
 800b5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5e4 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800b5e4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d078      	beq.n	800b6de <HAL_ETH_TransmitFrame+0xfa>
 800b5ec:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800b5f4:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800b5f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800b5fc:	2900      	cmp	r1, #0
 800b5fe:	d03c      	beq.n	800b67a <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b600:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	2800      	cmp	r0, #0
 800b606:	db60      	blt.n	800b6ca <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b608:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800b60c:	4281      	cmp	r1, r0
{
 800b60e:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800b610:	d93c      	bls.n	800b68c <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800b612:	4c34      	ldr	r4, [pc, #208]	; (800b6e4 <HAL_ETH_TransmitFrame+0x100>)
 800b614:	fba4 4c01 	umull	r4, ip, r4, r1
 800b618:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800b61c:	fb00 101c 	mls	r0, r0, ip, r1
 800b620:	2800      	cmp	r0, #0
 800b622:	d030      	beq.n	800b686 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800b624:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b628:	482f      	ldr	r0, [pc, #188]	; (800b6e8 <HAL_ETH_TransmitFrame+0x104>)
 800b62a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800b62e:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b630:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800b634:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800b638:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b63c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800b640:	e00f      	b.n	800b662 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800b642:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b644:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800b646:	d104      	bne.n	800b652 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b648:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800b64a:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800b64c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b650:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b652:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800b654:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b656:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800b65a:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b65c:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b65e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800b660:	d03b      	beq.n	800b6da <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800b668:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	d1e9      	bne.n	800b642 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b66e:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800b670:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800b672:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800b676:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800b678:	e7eb      	b.n	800b652 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800b67a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800b67c:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b680:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800b684:	4770      	bx	lr
  if (bufcount == 1)
 800b686:	f1bc 0f01 	cmp.w	ip, #1
 800b68a:	d1cd      	bne.n	800b628 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b68c:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b68e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b692:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b694:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800b698:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800b69a:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800b69c:	6819      	ldr	r1, [r3, #0]
 800b69e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b6a2:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800b6a4:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800b6a6:	6813      	ldr	r3, [r2, #0]
 800b6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ac:	6959      	ldr	r1, [r3, #20]
 800b6ae:	0749      	lsls	r1, r1, #29
 800b6b0:	d503      	bpl.n	800b6ba <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b6b2:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800b6b4:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800b6b6:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800b6b8:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800b6ba:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800b6bc:	2101      	movs	r1, #1
  return HAL_OK;
 800b6be:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b6c0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b6c4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800b6c8:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b6ca:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800b6cc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b6ce:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800b6d0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b6d4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800b6d8:	4770      	bx	lr
 800b6da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6dc:	e7e3      	b.n	800b6a6 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800b6de:	2002      	movs	r0, #2
}
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	ac02b00b 	.word	0xac02b00b
 800b6e8:	fffffa0c 	.word	0xfffffa0c

0800b6ec <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800b6ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d02f      	beq.n	800b754 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800b6f4:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b6f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b6f8:	4602      	mov	r2, r0
{
 800b6fa:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800b6fc:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800b6fe:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800b702:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b706:	6819      	ldr	r1, [r3, #0]
 800b708:	2900      	cmp	r1, #0
 800b70a:	db15      	blt.n	800b738 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800b70c:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b70e:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800b710:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800b712:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800b716:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b71a:	d016      	beq.n	800b74a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b71c:	6819      	ldr	r1, [r3, #0]
 800b71e:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800b722:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800b724:	d118      	bne.n	800b758 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b726:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800b728:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800b72a:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800b72c:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	2900      	cmp	r1, #0
 800b732:	db01      	blt.n	800b738 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800b734:	2804      	cmp	r0, #4
 800b736:	d1ea      	bne.n	800b70e <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800b738:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800b73a:	2100      	movs	r1, #0
  return HAL_ERROR;
 800b73c:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b73e:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800b742:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800b746:	bc30      	pop	{r4, r5}
 800b748:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b74a:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b74c:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800b74e:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b750:	6293      	str	r3, [r2, #40]	; 0x28
 800b752:	e7ec      	b.n	800b72e <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800b754:	2002      	movs	r0, #2
}
 800b756:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800b758:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800b75a:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b75c:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800b75e:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800b760:	d011      	beq.n	800b786 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b762:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b764:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800b766:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b768:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b76a:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b76c:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800b770:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800b772:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b774:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800b776:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800b778:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800b77c:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800b77e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800b780:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800b784:	e7df      	b.n	800b746 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800b786:	4618      	mov	r0, r3
 800b788:	6313      	str	r3, [r2, #48]	; 0x30
 800b78a:	e7eb      	b.n	800b764 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800b78c <HAL_ETH_TxCpltCallback>:
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop

0800b790 <HAL_ETH_ErrorCallback>:
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop

0800b794 <HAL_ETH_IRQHandler>:
{
 800b794:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b796:	6803      	ldr	r3, [r0, #0]
{
 800b798:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800b79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79e:	695d      	ldr	r5, [r3, #20]
 800b7a0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800b7a4:	d125      	bne.n	800b7f2 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800b7a6:	695a      	ldr	r2, [r3, #20]
 800b7a8:	07d2      	lsls	r2, r2, #31
 800b7aa:	d416      	bmi.n	800b7da <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800b7ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b7b0:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	041b      	lsls	r3, r3, #16
 800b7b6:	d400      	bmi.n	800b7ba <HAL_ETH_IRQHandler+0x26>
}
 800b7b8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f7ff ffe8 	bl	800b790 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800b7c6:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b7cc:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800b7ce:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b7d0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b7d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800b7da:	f7ff ffd7 	bl	800b78c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e6:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b7e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b7ec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b7f0:	e7dc      	b.n	800b7ac <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800b7f2:	f009 ff4f 	bl	8015694 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800b7fa:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800b800:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800b802:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800b804:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800b808:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b80c:	e7ce      	b.n	800b7ac <HAL_ETH_IRQHandler+0x18>
 800b80e:	bf00      	nop

0800b810 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b810:	8a03      	ldrh	r3, [r0, #16]
 800b812:	2b20      	cmp	r3, #32
{
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	4604      	mov	r4, r0
 800b818:	460e      	mov	r6, r1
 800b81a:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b81c:	d834      	bhi.n	800b888 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b81e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b822:	2b82      	cmp	r3, #130	; 0x82
 800b824:	d039      	beq.n	800b89a <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b826:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800b828:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b82a:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800b82c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b830:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b832:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b836:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b838:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b83a:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800b83e:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800b840:	430b      	orrs	r3, r1
 800b842:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800b844:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800b848:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b84a:	f7fd fd9d 	bl	8009388 <HAL_GetTick>
 800b84e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b850:	e004      	b.n	800b85c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b856:	f013 0301 	ands.w	r3, r3, #1
 800b85a:	d00d      	beq.n	800b878 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800b85c:	f7fd fd94 	bl	8009388 <HAL_GetTick>
 800b860:	1b83      	subs	r3, r0, r6
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b866:	d3f4      	bcc.n	800b852 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800b868:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b86a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b86c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b86e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b876:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b878:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800b87a:	2101      	movs	r1, #1
  return HAL_OK;
 800b87c:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b87e:	b292      	uxth	r2, r2
 800b880:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800b882:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800b886:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b888:	f240 5116 	movw	r1, #1302	; 0x516
 800b88c:	4804      	ldr	r0, [pc, #16]	; (800b8a0 <HAL_ETH_ReadPHYRegister+0x90>)
 800b88e:	f7fa f849 	bl	8005924 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800b892:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b896:	2b82      	cmp	r3, #130	; 0x82
 800b898:	d1c5      	bne.n	800b826 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800b89a:	2002      	movs	r0, #2
}
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	bf00      	nop
 800b8a0:	0802e2c4 	.word	0x0802e2c4

0800b8a4 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b8a4:	8a03      	ldrh	r3, [r0, #16]
 800b8a6:	2b20      	cmp	r3, #32
{
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b8b0:	d833      	bhi.n	800b91a <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b8b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8b6:	2b42      	cmp	r3, #66	; 0x42
 800b8b8:	d038      	beq.n	800b92c <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b8ba:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800b8bc:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8be:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800b8c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800b8c4:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8c6:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8c8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800b8cc:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8ce:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b8d0:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800b8d2:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800b8d6:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800b8d8:	430b      	orrs	r3, r1
 800b8da:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800b8dc:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800b8e0:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800b8e2:	f7fd fd51 	bl	8009388 <HAL_GetTick>
 800b8e6:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b8e8:	e004      	b.n	800b8f4 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b8ee:	f013 0301 	ands.w	r3, r3, #1
 800b8f2:	d00d      	beq.n	800b910 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800b8f4:	f7fd fd48 	bl	8009388 <HAL_GetTick>
 800b8f8:	1b43      	subs	r3, r0, r5
 800b8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8fe:	d3f4      	bcc.n	800b8ea <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800b900:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800b902:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b904:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800b906:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800b90a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800b910:	2201      	movs	r2, #1
  return HAL_OK; 
 800b912:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800b914:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800b918:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800b91a:	f240 515e 	movw	r1, #1374	; 0x55e
 800b91e:	4804      	ldr	r0, [pc, #16]	; (800b930 <HAL_ETH_WritePHYRegister+0x8c>)
 800b920:	f7fa f800 	bl	8005924 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800b924:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b928:	2b42      	cmp	r3, #66	; 0x42
 800b92a:	d1c6      	bne.n	800b8ba <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800b92c:	2002      	movs	r0, #2
}
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	0802e2c4 	.word	0x0802e2c4

0800b934 <HAL_ETH_Init>:
{
 800b934:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800b936:	2300      	movs	r3, #0
{
 800b938:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800b93a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f000 80f5 	beq.w	800bb2c <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800b942:	6843      	ldr	r3, [r0, #4]
 800b944:	4604      	mov	r4, r0
 800b946:	2b01      	cmp	r3, #1
 800b948:	f200 809c 	bhi.w	800ba84 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800b94c:	69a3      	ldr	r3, [r4, #24]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	f200 808f 	bhi.w	800ba72 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800b954:	69e3      	ldr	r3, [r4, #28]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d873      	bhi.n	800ba42 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800b95a:	6a23      	ldr	r3, [r4, #32]
 800b95c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800b960:	d177      	bne.n	800ba52 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800b962:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b966:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d07b      	beq.n	800ba66 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b96e:	4b91      	ldr	r3, [pc, #580]	; (800bbb4 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b970:	4a91      	ldr	r2, [pc, #580]	; (800bbb8 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b972:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b974:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b978:	6459      	str	r1, [r3, #68]	; 0x44
 800b97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b984:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b986:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b988:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b990:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b992:	6851      	ldr	r1, [r2, #4]
 800b994:	6a20      	ldr	r0, [r4, #32]
 800b996:	4301      	orrs	r1, r0
 800b998:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	f042 0201 	orr.w	r2, r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b9a2:	f7fd fcf1 	bl	8009388 <HAL_GetTick>
 800b9a6:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b9a8:	e005      	b.n	800b9b6 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b9aa:	f7fd fced 	bl	8009388 <HAL_GetTick>
 800b9ae:	1b43      	subs	r3, r0, r5
 800b9b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b9b4:	d86f      	bhi.n	800ba96 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800b9bc:	6812      	ldr	r2, [r2, #0]
 800b9be:	07d0      	lsls	r0, r2, #31
 800b9c0:	d4f3      	bmi.n	800b9aa <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800b9c2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800b9c4:	f003 faac 	bl	800ef20 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b9c8:	4b7c      	ldr	r3, [pc, #496]	; (800bbbc <HAL_ETH_Init+0x288>)
 800b9ca:	4a7d      	ldr	r2, [pc, #500]	; (800bbc0 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800b9cc:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800b9d0:	4403      	add	r3, r0
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d274      	bcs.n	800bac0 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b9d6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b9da:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b9dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800b9e4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b9e6:	f7ff ff5d 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d15c      	bne.n	800baaa <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800b9f0:	20ff      	movs	r0, #255	; 0xff
 800b9f2:	f7fd fccf 	bl	8009394 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b9f6:	6863      	ldr	r3, [r4, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d178      	bne.n	800baee <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ba02:	f040 809e 	bne.w	800bb42 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800ba06:	68e3      	ldr	r3, [r4, #12]
 800ba08:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800ba0c:	f040 8092 	bne.w	800bb34 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800ba10:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800ba12:	08db      	lsrs	r3, r3, #3
 800ba14:	2100      	movs	r1, #0
 800ba16:	4620      	mov	r0, r4
 800ba18:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	f7ff ff41 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d141      	bne.n	800baaa <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800ba26:	f640 70ff 	movw	r0, #4095	; 0xfff
 800ba2a:	f7fd fcb3 	bl	8009394 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800ba2e:	4620      	mov	r0, r4
 800ba30:	2100      	movs	r1, #0
 800ba32:	f7ff fcdd 	bl	800b3f0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800ba36:	2301      	movs	r3, #1
}
 800ba38:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800ba3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ba3e:	b003      	add	sp, #12
 800ba40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800ba42:	21e0      	movs	r1, #224	; 0xe0
 800ba44:	485f      	ldr	r0, [pc, #380]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800ba46:	f7f9 ff6d 	bl	8005924 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800ba4a:	6a23      	ldr	r3, [r4, #32]
 800ba4c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800ba50:	d087      	beq.n	800b962 <HAL_ETH_Init+0x2e>
 800ba52:	21e1      	movs	r1, #225	; 0xe1
 800ba54:	485b      	ldr	r0, [pc, #364]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800ba56:	f7f9 ff65 	bl	8005924 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800ba5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d183      	bne.n	800b96e <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800ba66:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800ba68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800ba6c:	f009 fd84 	bl	8015578 <HAL_ETH_MspInit>
 800ba70:	e77d      	b.n	800b96e <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800ba72:	21df      	movs	r1, #223	; 0xdf
 800ba74:	4853      	ldr	r0, [pc, #332]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800ba76:	f7f9 ff55 	bl	8005924 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800ba7a:	69e3      	ldr	r3, [r4, #28]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	f67f af6c 	bls.w	800b95a <HAL_ETH_Init+0x26>
 800ba82:	e7de      	b.n	800ba42 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800ba84:	21de      	movs	r1, #222	; 0xde
 800ba86:	484f      	ldr	r0, [pc, #316]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800ba88:	f7f9 ff4c 	bl	8005924 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800ba8c:	69a3      	ldr	r3, [r4, #24]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	f67f af60 	bls.w	800b954 <HAL_ETH_Init+0x20>
 800ba94:	e7ed      	b.n	800ba72 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800ba98:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800ba9a:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800ba9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800baa0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800baa4:	4628      	mov	r0, r5
 800baa6:	b003      	add	sp, #12
 800baa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800baaa:	4620      	mov	r0, r4
 800baac:	2101      	movs	r1, #1
 800baae:	f7ff fc9f 	bl	800b3f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800bab2:	2301      	movs	r3, #1
      return HAL_ERROR;
 800bab4:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800bab6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800baba:	4628      	mov	r0, r5
 800babc:	b003      	add	sp, #12
 800babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800bac0:	4b41      	ldr	r3, [pc, #260]	; (800bbc8 <HAL_ETH_Init+0x294>)
 800bac2:	4a42      	ldr	r2, [pc, #264]	; (800bbcc <HAL_ETH_Init+0x298>)
 800bac4:	4403      	add	r3, r0
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d90e      	bls.n	800bae8 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800baca:	4b41      	ldr	r3, [pc, #260]	; (800bbd0 <HAL_ETH_Init+0x29c>)
 800bacc:	4a41      	ldr	r2, [pc, #260]	; (800bbd4 <HAL_ETH_Init+0x2a0>)
 800bace:	4403      	add	r3, r0
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d382      	bcc.n	800b9da <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800bad4:	4b40      	ldr	r3, [pc, #256]	; (800bbd8 <HAL_ETH_Init+0x2a4>)
 800bad6:	4a41      	ldr	r2, [pc, #260]	; (800bbdc <HAL_ETH_Init+0x2a8>)
 800bad8:	4403      	add	r3, r0
 800bada:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800badc:	bf94      	ite	ls
 800bade:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800bae2:	f045 0510 	orrhi.w	r5, r5, #16
 800bae6:	e778      	b.n	800b9da <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800bae8:	f045 050c 	orr.w	r5, r5, #12
 800baec:	e775      	b.n	800b9da <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800baee:	f7fd fc4b 	bl	8009388 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800baf2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800baf6:	4606      	mov	r6, r0
 800baf8:	e002      	b.n	800bb00 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800bafa:	9b00      	ldr	r3, [sp, #0]
 800bafc:	0759      	lsls	r1, r3, #29
 800bafe:	d426      	bmi.n	800bb4e <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800bb00:	466a      	mov	r2, sp
 800bb02:	2101      	movs	r1, #1
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff fe83 	bl	800b810 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800bb0a:	f7fd fc3d 	bl	8009388 <HAL_GetTick>
 800bb0e:	1b80      	subs	r0, r0, r6
 800bb10:	42b8      	cmp	r0, r7
 800bb12:	d9f2      	bls.n	800bafa <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800bb14:	2101      	movs	r1, #1
 800bb16:	4620      	mov	r0, r4
 800bb18:	f7ff fc6a 	bl	800b3f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800bb1c:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800bb1e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800bb20:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800bb22:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800bb26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800bb2a:	e7bb      	b.n	800baa4 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800bb2c:	2501      	movs	r5, #1
}
 800bb2e:	4628      	mov	r0, r5
 800bb30:	b003      	add	sp, #12
 800bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800bb34:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800bb38:	4822      	ldr	r0, [pc, #136]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800bb3a:	f7f9 fef3 	bl	8005924 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800bb3e:	68e3      	ldr	r3, [r4, #12]
 800bb40:	e766      	b.n	800ba10 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bb42:	f240 11c5 	movw	r1, #453	; 0x1c5
 800bb46:	481f      	ldr	r0, [pc, #124]	; (800bbc4 <HAL_ETH_Init+0x290>)
 800bb48:	f7f9 feec 	bl	8005924 <assert_failed>
 800bb4c:	e75b      	b.n	800ba06 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800bb4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb52:	2100      	movs	r1, #0
 800bb54:	4620      	mov	r0, r4
 800bb56:	f7ff fea5 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1a5      	bne.n	800baaa <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800bb5e:	f7fd fc13 	bl	8009388 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800bb62:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bb66:	4606      	mov	r6, r0
 800bb68:	e002      	b.n	800bb70 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	069a      	lsls	r2, r3, #26
 800bb6e:	d40a      	bmi.n	800bb86 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800bb70:	466a      	mov	r2, sp
 800bb72:	2101      	movs	r1, #1
 800bb74:	4620      	mov	r0, r4
 800bb76:	f7ff fe4b 	bl	800b810 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800bb7a:	f7fd fc05 	bl	8009388 <HAL_GetTick>
 800bb7e:	1b80      	subs	r0, r0, r6
 800bb80:	42b8      	cmp	r0, r7
 800bb82:	d9f2      	bls.n	800bb6a <HAL_ETH_Init+0x236>
 800bb84:	e7c6      	b.n	800bb14 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800bb86:	466a      	mov	r2, sp
 800bb88:	2110      	movs	r1, #16
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff fe40 	bl	800b810 <HAL_ETH_ReadPHYRegister>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d18a      	bne.n	800baaa <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bb94:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800bb96:	f013 0204 	ands.w	r2, r3, #4
 800bb9a:	bf18      	it	ne
 800bb9c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800bba0:	079b      	lsls	r3, r3, #30
 800bba2:	60e2      	str	r2, [r4, #12]
 800bba4:	d501      	bpl.n	800bbaa <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800bba6:	60a0      	str	r0, [r4, #8]
 800bba8:	e741      	b.n	800ba2e <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800bbaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	e73d      	b.n	800ba2e <HAL_ETH_Init+0xfa>
 800bbb2:	bf00      	nop
 800bbb4:	40023800 	.word	0x40023800
 800bbb8:	40013800 	.word	0x40013800
 800bbbc:	feced300 	.word	0xfeced300
 800bbc0:	00e4e1c0 	.word	0x00e4e1c0
 800bbc4:	0802e2c4 	.word	0x0802e2c4
 800bbc8:	fde9f140 	.word	0xfde9f140
 800bbcc:	017d783f 	.word	0x017d783f
 800bbd0:	fc6c7900 	.word	0xfc6c7900
 800bbd4:	02625a00 	.word	0x02625a00
 800bbd8:	fa0a1f00 	.word	0xfa0a1f00
 800bbdc:	02faf07f 	.word	0x02faf07f

0800bbe0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800bbe0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d044      	beq.n	800bc72 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bbe8:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bbea:	2202      	movs	r2, #2
{  
 800bbec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800bbee:	2601      	movs	r6, #1
{  
 800bbf0:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800bbf2:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800bbf4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bbf8:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800bbfc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800bbfe:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc00:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	f042 0208 	orr.w	r2, r2, #8
 800bc08:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc0e:	f7fd fbc1 	bl	8009394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc12:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc14:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800bc1a:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	f042 0204 	orr.w	r2, r2, #4
 800bc22:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc28:	f7fd fbb4 	bl	8009394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bc2c:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc2e:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bc38:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc40:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc46:	f7fd fba5 	bl	8009394 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bc4a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800bc4c:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800bc4e:	9a01      	ldr	r2, [sp, #4]
 800bc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc54:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800bc56:	699a      	ldr	r2, [r3, #24]
 800bc58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc5c:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800bc5e:	699a      	ldr	r2, [r3, #24]
 800bc60:	f042 0202 	orr.w	r2, r2, #2
 800bc64:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800bc66:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bc6a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bc6e:	b004      	add	sp, #16
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bc72:	2002      	movs	r0, #2
}
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop

0800bc78 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800bc78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d046      	beq.n	800bd0e <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc80:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800bc82:	2102      	movs	r1, #2
{  
 800bc84:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc86:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800bc8a:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800bc8c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800bc90:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800bc92:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800bc96:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc98:	6991      	ldr	r1, [r2, #24]
 800bc9a:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc9c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800bc9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800bca2:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800bca4:	6991      	ldr	r1, [r2, #24]
 800bca6:	f021 0102 	bic.w	r1, r1, #2
 800bcaa:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bcac:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	f022 0204 	bic.w	r2, r2, #4
 800bcb4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcba:	f7fd fb6b 	bl	8009394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bcbe:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcc0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bcc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800bcca:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bcd2:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800bcd4:	699b      	ldr	r3, [r3, #24]
 800bcd6:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcd8:	f7fd fb5c 	bl	8009394 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800bcdc:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcde:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800bce0:	9902      	ldr	r1, [sp, #8]
 800bce2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800bce6:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800bce8:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	f022 0208 	bic.w	r2, r2, #8
 800bcf0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcf6:	f7fd fb4d 	bl	8009394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800bcfa:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800bcfc:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800bd02:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bd06:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800bd0a:	b004      	add	sp, #16
 800bd0c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800bd0e:	2002      	movs	r0, #2
}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800bd14:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	f000 8249 	beq.w	800c1b0 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd1e:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800bd20:	2202      	movs	r2, #2
{
 800bd22:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd24:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bd28:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800bd2a:	f04f 0101 	mov.w	r1, #1
 800bd2e:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800bd30:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800bd34:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800bd38:	f040 8207 	bne.w	800c14a <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bd3c:	68eb      	ldr	r3, [r5, #12]
 800bd3e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bd42:	f040 8114 	bne.w	800bf6e <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800bd46:	2c00      	cmp	r4, #0
 800bd48:	f000 8119 	beq.w	800bf7e <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800bd52:	f040 8139 	bne.w	800bfc8 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bd56:	6863      	ldr	r3, [r4, #4]
 800bd58:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bd5c:	f040 816b 	bne.w	800c036 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800bd66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd6a:	d002      	beq.n	800bd72 <HAL_ETH_ConfigMAC+0x5e>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 8221 	bne.w	800c1b4 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800bd78:	f040 8152 	bne.w	800c020 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bd82:	f040 8142 	bne.w	800c00a <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bd86:	6963      	ldr	r3, [r4, #20]
 800bd88:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bd8c:	f040 8132 	bne.w	800bff4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bd90:	69a3      	ldr	r3, [r4, #24]
 800bd92:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bd96:	f040 8122 	bne.w	800bfde <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bd9a:	69e3      	ldr	r3, [r4, #28]
 800bd9c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bda0:	f040 81a3 	bne.w	800c0ea <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800bda4:	6a23      	ldr	r3, [r4, #32]
 800bda6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bdaa:	f040 818e 	bne.w	800c0ca <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800bdae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb0:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800bdb4:	f040 8193 	bne.w	800c0de <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800bdb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bdba:	f033 0310 	bics.w	r3, r3, #16
 800bdbe:	f040 8179 	bne.w	800c0b4 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800bdc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bdc4:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800bdc8:	f040 819a 	bne.w	800c100 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800bdcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdce:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800bdd2:	d003      	beq.n	800bddc <HAL_ETH_ConfigMAC+0xc8>
 800bdd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdd8:	f040 81d8 	bne.w	800c18c <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800bddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bde2:	2a40      	cmp	r2, #64	; 0x40
 800bde4:	d002      	beq.n	800bdec <HAL_ETH_ConfigMAC+0xd8>
 800bde6:	2b80      	cmp	r3, #128	; 0x80
 800bde8:	f040 81ba 	bne.w	800c160 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bdec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdee:	f033 0320 	bics.w	r3, r3, #32
 800bdf2:	f040 80de 	bne.w	800bfb2 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bdf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdf8:	f033 0308 	bics.w	r3, r3, #8
 800bdfc:	f040 80cf 	bne.w	800bf9e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800be00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be02:	2b01      	cmp	r3, #1
 800be04:	f200 80a5 	bhi.w	800bf52 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800be08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800be0a:	f240 4204 	movw	r2, #1028	; 0x404
 800be0e:	4293      	cmp	r3, r2
 800be10:	bf18      	it	ne
 800be12:	2b10      	cmpne	r3, #16
 800be14:	d003      	beq.n	800be1e <HAL_ETH_ConfigMAC+0x10a>
 800be16:	f033 0304 	bics.w	r3, r3, #4
 800be1a:	f040 81c3 	bne.w	800c1a4 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800be1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800be20:	f033 0202 	bics.w	r2, r3, #2
 800be24:	d004      	beq.n	800be30 <HAL_ETH_ConfigMAC+0x11c>
 800be26:	f240 4202 	movw	r2, #1026	; 0x402
 800be2a:	4293      	cmp	r3, r2
 800be2c:	f040 81a3 	bne.w	800c176 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800be30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be36:	f080 816e 	bcs.w	800c116 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800be3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be3c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800be40:	f040 8173 	bne.w	800c12a <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800be44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800be46:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800be4a:	f040 8178 	bne.w	800c13e <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800be4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800be50:	f033 0308 	bics.w	r3, r3, #8
 800be54:	f040 8123 	bne.w	800c09e <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800be58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be5a:	f033 0304 	bics.w	r3, r3, #4
 800be5e:	f040 8113 	bne.w	800c088 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800be62:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be64:	f033 0302 	bics.w	r3, r3, #2
 800be68:	f040 8103 	bne.w	800c072 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800be6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be6e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800be72:	f040 80f3 	bne.w	800c05c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800be76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800be78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be7c:	f080 80e8 	bcs.w	800c050 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800be80:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800be82:	49b5      	ldr	r1, [pc, #724]	; (800c158 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800be84:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800be86:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800be88:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800be8a:	6860      	ldr	r0, [r4, #4]
 800be8c:	4303      	orrs	r3, r0
 800be8e:	68a0      	ldr	r0, [r4, #8]
 800be90:	4303      	orrs	r3, r0
 800be92:	68e0      	ldr	r0, [r4, #12]
 800be94:	4303      	orrs	r3, r0
 800be96:	6920      	ldr	r0, [r4, #16]
 800be98:	4303      	orrs	r3, r0
 800be9a:	6960      	ldr	r0, [r4, #20]
 800be9c:	4303      	orrs	r3, r0
 800be9e:	69a0      	ldr	r0, [r4, #24]
 800bea0:	4303      	orrs	r3, r0
 800bea2:	69e0      	ldr	r0, [r4, #28]
 800bea4:	4303      	orrs	r3, r0
 800bea6:	6a20      	ldr	r0, [r4, #32]
 800bea8:	4303      	orrs	r3, r0
 800beaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800beac:	4303      	orrs	r3, r0
 800beae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800beb0:	4303      	orrs	r3, r0
 800beb2:	68a8      	ldr	r0, [r5, #8]
 800beb4:	4303      	orrs	r3, r0
 800beb6:	68e8      	ldr	r0, [r5, #12]
 800beb8:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800beba:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800bebc:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bebe:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bec0:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bec2:	f7fd fa67 	bl	8009394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800bec6:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bec8:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800beca:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800bece:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800bed0:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800bed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed4:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800bed6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bed8:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800beda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bedc:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800bede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bee0:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800bee2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bee4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800bee6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bee8:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800beea:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800beec:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800beee:	f7fd fa51 	bl	8009394 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800bef2:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800bef4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800bef6:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800bef8:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800befa:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800befc:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800bf00:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800bf02:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800bf04:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800bf06:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800bf0a:	4303      	orrs	r3, r0
 800bf0c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bf0e:	4303      	orrs	r3, r0
 800bf10:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bf12:	4303      	orrs	r3, r0
 800bf14:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800bf16:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800bf18:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800bf1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf1e:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800bf20:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800bf22:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800bf24:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf26:	f7fd fa35 	bl	8009394 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800bf2a:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf2c:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bf2e:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800bf32:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800bf34:	430a      	orrs	r2, r1
 800bf36:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800bf38:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf3a:	f7fd fa2b 	bl	8009394 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800bf42:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800bf44:	2201      	movs	r2, #1
  return HAL_OK;  
 800bf46:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800bf48:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800bf4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800bf50:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bf52:	f240 6123 	movw	r1, #1571	; 0x623
 800bf56:	4881      	ldr	r0, [pc, #516]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bf58:	f7f9 fce4 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800bf5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bf5e:	f240 4204 	movw	r2, #1028	; 0x404
 800bf62:	4293      	cmp	r3, r2
 800bf64:	bf18      	it	ne
 800bf66:	2b10      	cmpne	r3, #16
 800bf68:	f47f af55 	bne.w	800be16 <HAL_ETH_ConfigMAC+0x102>
 800bf6c:	e757      	b.n	800be1e <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800bf6e:	f240 610e 	movw	r1, #1550	; 0x60e
 800bf72:	487a      	ldr	r0, [pc, #488]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bf74:	f7f9 fcd6 	bl	8005924 <assert_failed>
  if (macconf != NULL)
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	f47f aee7 	bne.w	800bd4c <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800bf7e:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf80:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf82:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800bf86:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf88:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800bf8a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800bf8e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800bf90:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800bf92:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf94:	f7fd f9fe 	bl	8009394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	601c      	str	r4, [r3, #0]
 800bf9c:	e7d1      	b.n	800bf42 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bf9e:	f240 6122 	movw	r1, #1570	; 0x622
 800bfa2:	486e      	ldr	r0, [pc, #440]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bfa4:	f7f9 fcbe 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800bfa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	f67f af2c 	bls.w	800be08 <HAL_ETH_ConfigMAC+0xf4>
 800bfb0:	e7cf      	b.n	800bf52 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800bfb2:	f240 6121 	movw	r1, #1569	; 0x621
 800bfb6:	4869      	ldr	r0, [pc, #420]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bfb8:	f7f9 fcb4 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800bfbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfbe:	f033 0308 	bics.w	r3, r3, #8
 800bfc2:	f43f af1d 	beq.w	800be00 <HAL_ETH_ConfigMAC+0xec>
 800bfc6:	e7ea      	b.n	800bf9e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800bfc8:	f240 6113 	movw	r1, #1555	; 0x613
 800bfcc:	4863      	ldr	r0, [pc, #396]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bfce:	f7f9 fca9 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800bfd2:	6863      	ldr	r3, [r4, #4]
 800bfd4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bfd8:	f43f aec2 	beq.w	800bd60 <HAL_ETH_ConfigMAC+0x4c>
 800bfdc:	e02b      	b.n	800c036 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bfde:	f240 6119 	movw	r1, #1561	; 0x619
 800bfe2:	485e      	ldr	r0, [pc, #376]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bfe4:	f7f9 fc9e 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800bfe8:	69e3      	ldr	r3, [r4, #28]
 800bfea:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bfee:	f43f aed9 	beq.w	800bda4 <HAL_ETH_ConfigMAC+0x90>
 800bff2:	e07a      	b.n	800c0ea <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800bff4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800bff8:	4858      	ldr	r0, [pc, #352]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800bffa:	f7f9 fc93 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800bffe:	69a3      	ldr	r3, [r4, #24]
 800c000:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800c004:	f43f aec9 	beq.w	800bd9a <HAL_ETH_ConfigMAC+0x86>
 800c008:	e7e9      	b.n	800bfde <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800c00a:	f240 6117 	movw	r1, #1559	; 0x617
 800c00e:	4853      	ldr	r0, [pc, #332]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c010:	f7f9 fc88 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800c014:	6963      	ldr	r3, [r4, #20]
 800c016:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c01a:	f43f aeb9 	beq.w	800bd90 <HAL_ETH_ConfigMAC+0x7c>
 800c01e:	e7e9      	b.n	800bff4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800c020:	f240 6116 	movw	r1, #1558	; 0x616
 800c024:	484d      	ldr	r0, [pc, #308]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c026:	f7f9 fc7d 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800c02a:	6923      	ldr	r3, [r4, #16]
 800c02c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c030:	f43f aea9 	beq.w	800bd86 <HAL_ETH_ConfigMAC+0x72>
 800c034:	e7e9      	b.n	800c00a <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800c036:	f240 6114 	movw	r1, #1556	; 0x614
 800c03a:	4848      	ldr	r0, [pc, #288]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c03c:	f7f9 fc72 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800c040:	68a3      	ldr	r3, [r4, #8]
 800c042:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800c046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c04a:	f47f ae8f 	bne.w	800bd6c <HAL_ETH_ConfigMAC+0x58>
 800c04e:	e690      	b.n	800bd72 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800c050:	f240 612d 	movw	r1, #1581	; 0x62d
 800c054:	4841      	ldr	r0, [pc, #260]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c056:	f7f9 fc65 	bl	8005924 <assert_failed>
 800c05a:	e711      	b.n	800be80 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800c05c:	f240 612c 	movw	r1, #1580	; 0x62c
 800c060:	483e      	ldr	r0, [pc, #248]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c062:	f7f9 fc5f 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800c066:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	f4ff af08 	bcc.w	800be80 <HAL_ETH_ConfigMAC+0x16c>
 800c070:	e7ee      	b.n	800c050 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800c072:	f240 612b 	movw	r1, #1579	; 0x62b
 800c076:	4839      	ldr	r0, [pc, #228]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c078:	f7f9 fc54 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800c07c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c07e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c082:	f43f aef8 	beq.w	800be76 <HAL_ETH_ConfigMAC+0x162>
 800c086:	e7e9      	b.n	800c05c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c088:	f240 612a 	movw	r1, #1578	; 0x62a
 800c08c:	4833      	ldr	r0, [pc, #204]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c08e:	f7f9 fc49 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800c092:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c094:	f033 0302 	bics.w	r3, r3, #2
 800c098:	f43f aee8 	beq.w	800be6c <HAL_ETH_ConfigMAC+0x158>
 800c09c:	e7e9      	b.n	800c072 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800c09e:	f240 6129 	movw	r1, #1577	; 0x629
 800c0a2:	482e      	ldr	r0, [pc, #184]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c0a4:	f7f9 fc3e 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800c0a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0aa:	f033 0304 	bics.w	r3, r3, #4
 800c0ae:	f43f aed8 	beq.w	800be62 <HAL_ETH_ConfigMAC+0x14e>
 800c0b2:	e7e9      	b.n	800c088 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800c0b4:	f240 611d 	movw	r1, #1565	; 0x61d
 800c0b8:	4828      	ldr	r0, [pc, #160]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c0ba:	f7f9 fc33 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c0be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0c0:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800c0c4:	f43f ae82 	beq.w	800bdcc <HAL_ETH_ConfigMAC+0xb8>
 800c0c8:	e01a      	b.n	800c100 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c0ca:	f240 611b 	movw	r1, #1563	; 0x61b
 800c0ce:	4823      	ldr	r0, [pc, #140]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c0d0:	f7f9 fc28 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800c0d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0d6:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800c0da:	f43f ae6d 	beq.w	800bdb8 <HAL_ETH_ConfigMAC+0xa4>
 800c0de:	f240 611c 	movw	r1, #1564	; 0x61c
 800c0e2:	481e      	ldr	r0, [pc, #120]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c0e4:	f7f9 fc1e 	bl	8005924 <assert_failed>
 800c0e8:	e666      	b.n	800bdb8 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800c0ea:	f240 611a 	movw	r1, #1562	; 0x61a
 800c0ee:	481b      	ldr	r0, [pc, #108]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c0f0:	f7f9 fc18 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800c0f4:	6a23      	ldr	r3, [r4, #32]
 800c0f6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c0fa:	f43f ae58 	beq.w	800bdae <HAL_ETH_ConfigMAC+0x9a>
 800c0fe:	e7e4      	b.n	800c0ca <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800c100:	f240 611e 	movw	r1, #1566	; 0x61e
 800c104:	4815      	ldr	r0, [pc, #84]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c106:	f7f9 fc0d 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c10a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c10c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800c110:	f47f ae60 	bne.w	800bdd4 <HAL_ETH_ConfigMAC+0xc0>
 800c114:	e662      	b.n	800bddc <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c116:	f240 6126 	movw	r1, #1574	; 0x626
 800c11a:	4810      	ldr	r0, [pc, #64]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c11c:	f7f9 fc02 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800c120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c122:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c126:	f43f ae8d 	beq.w	800be44 <HAL_ETH_ConfigMAC+0x130>
 800c12a:	f240 6127 	movw	r1, #1575	; 0x627
 800c12e:	480b      	ldr	r0, [pc, #44]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c130:	f7f9 fbf8 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800c134:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c136:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800c13a:	f43f ae88 	beq.w	800be4e <HAL_ETH_ConfigMAC+0x13a>
 800c13e:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800c142:	4806      	ldr	r0, [pc, #24]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c144:	f7f9 fbee 	bl	8005924 <assert_failed>
 800c148:	e681      	b.n	800be4e <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800c14a:	f240 610d 	movw	r1, #1549	; 0x60d
 800c14e:	4803      	ldr	r0, [pc, #12]	; (800c15c <HAL_ETH_ConfigMAC+0x448>)
 800c150:	f7f9 fbe8 	bl	8005924 <assert_failed>
 800c154:	e5f2      	b.n	800bd3c <HAL_ETH_ConfigMAC+0x28>
 800c156:	bf00      	nop
 800c158:	ff20810f 	.word	0xff20810f
 800c15c:	0802e2c4 	.word	0x0802e2c4
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c160:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800c164:	4816      	ldr	r0, [pc, #88]	; (800c1c0 <HAL_ETH_ConfigMAC+0x4ac>)
 800c166:	f7f9 fbdd 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800c16a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c16c:	f033 0320 	bics.w	r3, r3, #32
 800c170:	f43f ae41 	beq.w	800bdf6 <HAL_ETH_ConfigMAC+0xe2>
 800c174:	e71d      	b.n	800bfb2 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800c176:	f240 6125 	movw	r1, #1573	; 0x625
 800c17a:	4811      	ldr	r0, [pc, #68]	; (800c1c0 <HAL_ETH_ConfigMAC+0x4ac>)
 800c17c:	f7f9 fbd2 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800c180:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c186:	f4ff ae58 	bcc.w	800be3a <HAL_ETH_ConfigMAC+0x126>
 800c18a:	e7c4      	b.n	800c116 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800c18c:	f240 611f 	movw	r1, #1567	; 0x61f
 800c190:	480b      	ldr	r0, [pc, #44]	; (800c1c0 <HAL_ETH_ConfigMAC+0x4ac>)
 800c192:	f7f9 fbc7 	bl	8005924 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800c196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c198:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c19c:	2a40      	cmp	r2, #64	; 0x40
 800c19e:	f47f ae22 	bne.w	800bde6 <HAL_ETH_ConfigMAC+0xd2>
 800c1a2:	e623      	b.n	800bdec <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800c1a4:	f240 6124 	movw	r1, #1572	; 0x624
 800c1a8:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <HAL_ETH_ConfigMAC+0x4ac>)
 800c1aa:	f7f9 fbbb 	bl	8005924 <assert_failed>
 800c1ae:	e636      	b.n	800be1e <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800c1b0:	2002      	movs	r0, #2
}
 800c1b2:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800c1b4:	f240 6115 	movw	r1, #1557	; 0x615
 800c1b8:	4801      	ldr	r0, [pc, #4]	; (800c1c0 <HAL_ETH_ConfigMAC+0x4ac>)
 800c1ba:	f7f9 fbb3 	bl	8005924 <assert_failed>
 800c1be:	e5d8      	b.n	800bd72 <HAL_ETH_ConfigMAC+0x5e>
 800c1c0:	0802e2c4 	.word	0x0802e2c4

0800c1c4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c1c4:	4b18      	ldr	r3, [pc, #96]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	079b      	lsls	r3, r3, #30
 800c1ca:	d504      	bpl.n	800c1d6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c1cc:	4a17      	ldr	r2, [pc, #92]	; (800c22c <FLASH_SetErrorCode+0x68>)
 800c1ce:	6993      	ldr	r3, [r2, #24]
 800c1d0:	f043 0320 	orr.w	r3, r3, #32
 800c1d4:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c1d6:	4b14      	ldr	r3, [pc, #80]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	06d8      	lsls	r0, r3, #27
 800c1dc:	d504      	bpl.n	800c1e8 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c1de:	4a13      	ldr	r2, [pc, #76]	; (800c22c <FLASH_SetErrorCode+0x68>)
 800c1e0:	6993      	ldr	r3, [r2, #24]
 800c1e2:	f043 0310 	orr.w	r3, r3, #16
 800c1e6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	0699      	lsls	r1, r3, #26
 800c1ee:	d504      	bpl.n	800c1fa <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c1f0:	4a0e      	ldr	r2, [pc, #56]	; (800c22c <FLASH_SetErrorCode+0x68>)
 800c1f2:	6993      	ldr	r3, [r2, #24]
 800c1f4:	f043 0308 	orr.w	r3, r3, #8
 800c1f8:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c1fa:	4b0b      	ldr	r3, [pc, #44]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	065a      	lsls	r2, r3, #25
 800c200:	d504      	bpl.n	800c20c <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c202:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <FLASH_SetErrorCode+0x68>)
 800c204:	6993      	ldr	r3, [r2, #24]
 800c206:	f043 0304 	orr.w	r3, r3, #4
 800c20a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	061b      	lsls	r3, r3, #24
 800c212:	d504      	bpl.n	800c21e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800c214:	4a05      	ldr	r2, [pc, #20]	; (800c22c <FLASH_SetErrorCode+0x68>)
 800c216:	6993      	ldr	r3, [r2, #24]
 800c218:	f043 0302 	orr.w	r3, r3, #2
 800c21c:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c21e:	4b02      	ldr	r3, [pc, #8]	; (800c228 <FLASH_SetErrorCode+0x64>)
 800c220:	22f2      	movs	r2, #242	; 0xf2
 800c222:	60da      	str	r2, [r3, #12]
}
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	40023c00 	.word	0x40023c00
 800c22c:	2000351c 	.word	0x2000351c

0800c230 <FLASH_Program_Byte>:
{
 800c230:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c232:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c23a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c23e:	d304      	bcc.n	800c24a <FLASH_Program_Byte+0x1a>
 800c240:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <FLASH_Program_Byte+0x44>)
 800c242:	4403      	add	r3, r0
 800c244:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c248:	d20e      	bcs.n	800c268 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <FLASH_Program_Byte+0x48>)
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c252:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	f042 0201 	orr.w	r2, r2, #1
 800c25e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800c260:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800c262:	f3bf 8f4f 	dsb	sy
}
 800c266:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c268:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c26c:	4803      	ldr	r0, [pc, #12]	; (800c27c <FLASH_Program_Byte+0x4c>)
 800c26e:	f7f9 fb59 	bl	8005924 <assert_failed>
 800c272:	e7ea      	b.n	800c24a <FLASH_Program_Byte+0x1a>
 800c274:	e00f1000 	.word	0xe00f1000
 800c278:	40023c00 	.word	0x40023c00
 800c27c:	0802e2fc 	.word	0x0802e2fc

0800c280 <FLASH_Program_HalfWord>:
{
 800c280:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c282:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c286:	4604      	mov	r4, r0
 800c288:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c28a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c28e:	d304      	bcc.n	800c29a <FLASH_Program_HalfWord+0x1a>
 800c290:	4b0d      	ldr	r3, [pc, #52]	; (800c2c8 <FLASH_Program_HalfWord+0x48>)
 800c292:	4403      	add	r3, r0
 800c294:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c298:	d210      	bcs.n	800c2bc <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <FLASH_Program_HalfWord+0x4c>)
 800c29c:	691a      	ldr	r2, [r3, #16]
 800c29e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c2a2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c2a4:	691a      	ldr	r2, [r3, #16]
 800c2a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2aa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c2ac:	691a      	ldr	r2, [r3, #16]
 800c2ae:	f042 0201 	orr.w	r2, r2, #1
 800c2b2:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800c2b4:	8025      	strh	r5, [r4, #0]
 800c2b6:	f3bf 8f4f 	dsb	sy
}
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2bc:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c2c0:	4803      	ldr	r0, [pc, #12]	; (800c2d0 <FLASH_Program_HalfWord+0x50>)
 800c2c2:	f7f9 fb2f 	bl	8005924 <assert_failed>
 800c2c6:	e7e8      	b.n	800c29a <FLASH_Program_HalfWord+0x1a>
 800c2c8:	e00f1000 	.word	0xe00f1000
 800c2cc:	40023c00 	.word	0x40023c00
 800c2d0:	0802e2fc 	.word	0x0802e2fc

0800c2d4 <FLASH_Program_Word>:
{
 800c2d4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2d6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c2da:	4604      	mov	r4, r0
 800c2dc:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800c2de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e2:	d304      	bcc.n	800c2ee <FLASH_Program_Word+0x1a>
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <FLASH_Program_Word+0x48>)
 800c2e6:	4403      	add	r3, r0
 800c2e8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c2ec:	d210      	bcs.n	800c310 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800c2ee:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <FLASH_Program_Word+0x4c>)
 800c2f0:	691a      	ldr	r2, [r3, #16]
 800c2f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c2f6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c2f8:	691a      	ldr	r2, [r3, #16]
 800c2fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2fe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c300:	691a      	ldr	r2, [r3, #16]
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800c308:	6025      	str	r5, [r4, #0]
 800c30a:	f3bf 8f4f 	dsb	sy
}
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c310:	f240 21b3 	movw	r1, #691	; 0x2b3
 800c314:	4803      	ldr	r0, [pc, #12]	; (800c324 <FLASH_Program_Word+0x50>)
 800c316:	f7f9 fb05 	bl	8005924 <assert_failed>
 800c31a:	e7e8      	b.n	800c2ee <FLASH_Program_Word+0x1a>
 800c31c:	e00f1000 	.word	0xe00f1000
 800c320:	40023c00 	.word	0x40023c00
 800c324:	0802e2fc 	.word	0x0802e2fc

0800c328 <FLASH_Program_DoubleWord>:
{
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800c32c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800c330:	4604      	mov	r4, r0
 800c332:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800c334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c338:	d304      	bcc.n	800c344 <FLASH_Program_DoubleWord+0x1c>
 800c33a:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <FLASH_Program_DoubleWord+0x50>)
 800c33c:	4403      	add	r3, r0
 800c33e:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c342:	d213      	bcs.n	800c36c <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800c344:	490d      	ldr	r1, [pc, #52]	; (800c37c <FLASH_Program_DoubleWord+0x54>)
 800c346:	690b      	ldr	r3, [r1, #16]
 800c348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c34c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c34e:	690b      	ldr	r3, [r1, #16]
 800c350:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c354:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c356:	690b      	ldr	r3, [r1, #16]
 800c358:	f043 0301 	orr.w	r3, r3, #1
 800c35c:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c35e:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c360:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c364:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800c366:	f3bf 8f4f 	dsb	sy
}
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800c36c:	f240 218e 	movw	r1, #654	; 0x28e
 800c370:	4803      	ldr	r0, [pc, #12]	; (800c380 <FLASH_Program_DoubleWord+0x58>)
 800c372:	f7f9 fad7 	bl	8005924 <assert_failed>
 800c376:	e7e5      	b.n	800c344 <FLASH_Program_DoubleWord+0x1c>
 800c378:	e00f1000 	.word	0xe00f1000
 800c37c:	40023c00 	.word	0x40023c00
 800c380:	0802e2fc 	.word	0x0802e2fc

0800c384 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c384:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <HAL_FLASH_Unlock+0x1c>)
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	2a00      	cmp	r2, #0
 800c38a:	db01      	blt.n	800c390 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800c38c:	2000      	movs	r0, #0
}
 800c38e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c390:	4904      	ldr	r1, [pc, #16]	; (800c3a4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c392:	4a05      	ldr	r2, [pc, #20]	; (800c3a8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c394:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c396:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c398:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800c39a:	0fc0      	lsrs	r0, r0, #31
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	40023c00 	.word	0x40023c00
 800c3a4:	45670123 	.word	0x45670123
 800c3a8:	cdef89ab 	.word	0xcdef89ab

0800c3ac <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800c3ac:	4a03      	ldr	r2, [pc, #12]	; (800c3bc <HAL_FLASH_Lock+0x10>)
}
 800c3ae:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800c3b0:	6913      	ldr	r3, [r2, #16]
 800c3b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3b6:	6113      	str	r3, [r2, #16]
}
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	40023c00 	.word	0x40023c00

0800c3c0 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <HAL_FLASH_OB_Unlock+0x18>)
 800c3c2:	695a      	ldr	r2, [r3, #20]
 800c3c4:	07d2      	lsls	r2, r2, #31
 800c3c6:	d505      	bpl.n	800c3d4 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800c3ca:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c3cc:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c3ce:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c3d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800c3d2:	4770      	bx	lr
    return HAL_ERROR;
 800c3d4:	2001      	movs	r0, #1
}
 800c3d6:	4770      	bx	lr
 800c3d8:	40023c00 	.word	0x40023c00
 800c3dc:	08192a3b 	.word	0x08192a3b
 800c3e0:	4c5d6e7f 	.word	0x4c5d6e7f

0800c3e4 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c3e4:	4a03      	ldr	r2, [pc, #12]	; (800c3f4 <HAL_FLASH_OB_Lock+0x10>)
}
 800c3e6:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c3e8:	6953      	ldr	r3, [r2, #20]
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	6153      	str	r3, [r2, #20]
}
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	40023c00 	.word	0x40023c00

0800c3f8 <HAL_FLASH_OB_Launch>:
{
 800c3f8:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c3fa:	4c14      	ldr	r4, [pc, #80]	; (800c44c <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4a14      	ldr	r2, [pc, #80]	; (800c450 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c400:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800c404:	6963      	ldr	r3, [r4, #20]
 800c406:	f043 0302 	orr.w	r3, r3, #2
 800c40a:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c40c:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800c40e:	f7fc ffbb 	bl	8009388 <HAL_GetTick>
 800c412:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c414:	e004      	b.n	800c420 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c416:	f7fc ffb7 	bl	8009388 <HAL_GetTick>
 800c41a:	1b40      	subs	r0, r0, r5
 800c41c:	42b0      	cmp	r0, r6
 800c41e:	d80e      	bhi.n	800c43e <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c420:	68e3      	ldr	r3, [r4, #12]
 800c422:	03db      	lsls	r3, r3, #15
 800c424:	d4f7      	bmi.n	800c416 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c426:	68e2      	ldr	r2, [r4, #12]
 800c428:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c42c:	d109      	bne.n	800c442 <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c42e:	68e0      	ldr	r0, [r4, #12]
 800c430:	f010 0001 	ands.w	r0, r0, #1
 800c434:	d002      	beq.n	800c43c <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c436:	2301      	movs	r3, #1
  return HAL_OK;
 800c438:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c43a:	60e3      	str	r3, [r4, #12]
}
 800c43c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800c43e:	2003      	movs	r0, #3
}
 800c440:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c442:	f7ff febf 	bl	800c1c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c446:	2001      	movs	r0, #1
}
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	bf00      	nop
 800c44c:	40023c00 	.word	0x40023c00
 800c450:	2000351c 	.word	0x2000351c

0800c454 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800c454:	4b01      	ldr	r3, [pc, #4]	; (800c45c <HAL_FLASH_GetError+0x8>)
 800c456:	6998      	ldr	r0, [r3, #24]
}  
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	2000351c 	.word	0x2000351c

0800c460 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c460:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <FLASH_WaitForLastOperation+0x50>)
 800c462:	2200      	movs	r2, #0
{ 
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c468:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c46a:	4d12      	ldr	r5, [pc, #72]	; (800c4b4 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800c46c:	f7fc ff8c 	bl	8009388 <HAL_GetTick>
 800c470:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c472:	e001      	b.n	800c478 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800c474:	1c62      	adds	r2, r4, #1
 800c476:	d10e      	bne.n	800c496 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c478:	68eb      	ldr	r3, [r5, #12]
 800c47a:	03db      	lsls	r3, r3, #15
 800c47c:	d4fa      	bmi.n	800c474 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800c47e:	68ea      	ldr	r2, [r5, #12]
 800c480:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800c484:	d10f      	bne.n	800c4a6 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c486:	68e8      	ldr	r0, [r5, #12]
 800c488:	f010 0001 	ands.w	r0, r0, #1
 800c48c:	d002      	beq.n	800c494 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c48e:	2301      	movs	r3, #1
  return HAL_OK;
 800c490:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c492:	60eb      	str	r3, [r5, #12]
}  
 800c494:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c496:	b124      	cbz	r4, 800c4a2 <FLASH_WaitForLastOperation+0x42>
 800c498:	f7fc ff76 	bl	8009388 <HAL_GetTick>
 800c49c:	1b80      	subs	r0, r0, r6
 800c49e:	42a0      	cmp	r0, r4
 800c4a0:	d9ea      	bls.n	800c478 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800c4a2:	2003      	movs	r0, #3
}  
 800c4a4:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800c4a6:	f7ff fe8d 	bl	800c1c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c4aa:	2001      	movs	r0, #1
}  
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	bf00      	nop
 800c4b0:	2000351c 	.word	0x2000351c
 800c4b4:	40023c00 	.word	0x40023c00

0800c4b8 <HAL_FLASH_Program>:
{
 800c4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800c4bc:	4d23      	ldr	r5, [pc, #140]	; (800c54c <HAL_FLASH_Program+0x94>)
{
 800c4be:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800c4c0:	7d2a      	ldrb	r2, [r5, #20]
 800c4c2:	2a01      	cmp	r2, #1
 800c4c4:	d03a      	beq.n	800c53c <HAL_FLASH_Program+0x84>
 800c4c6:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c4c8:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800c4ca:	f04f 0301 	mov.w	r3, #1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c4d2:	d81d      	bhi.n	800c510 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4d8:	460e      	mov	r6, r1
 800c4da:	f7ff ffc1 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c4de:	b998      	cbnz	r0, 800c508 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800c4e0:	3c01      	subs	r4, #1
 800c4e2:	2c02      	cmp	r4, #2
 800c4e4:	d82d      	bhi.n	800c542 <HAL_FLASH_Program+0x8a>
 800c4e6:	e8df f004 	tbb	[pc, r4]
 800c4ea:	1e02      	.short	0x1e02
 800c4ec:	23          	.byte	0x23
 800c4ed:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c4ee:	b2b9      	uxth	r1, r7
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff fec5 	bl	800c280 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4fa:	f7ff ffb1 	bl	800c460 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800c4fe:	4a14      	ldr	r2, [pc, #80]	; (800c550 <HAL_FLASH_Program+0x98>)
 800c500:	6913      	ldr	r3, [r2, #16]
 800c502:	f023 0301 	bic.w	r3, r3, #1
 800c506:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800c508:	2300      	movs	r3, #0
 800c50a:	752b      	strb	r3, [r5, #20]
}
 800c50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c510:	4810      	ldr	r0, [pc, #64]	; (800c554 <HAL_FLASH_Program+0x9c>)
 800c512:	21aa      	movs	r1, #170	; 0xaa
 800c514:	f7f9 fa06 	bl	8005924 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c51c:	f7ff ffa0 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c520:	2800      	cmp	r0, #0
 800c522:	d1f1      	bne.n	800c508 <HAL_FLASH_Program+0x50>
 800c524:	e7e7      	b.n	800c4f6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800c526:	4639      	mov	r1, r7
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff fed3 	bl	800c2d4 <FLASH_Program_Word>
        break;
 800c52e:	e7e2      	b.n	800c4f6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800c530:	463a      	mov	r2, r7
 800c532:	4643      	mov	r3, r8
 800c534:	4630      	mov	r0, r6
 800c536:	f7ff fef7 	bl	800c328 <FLASH_Program_DoubleWord>
        break;
 800c53a:	e7dc      	b.n	800c4f6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800c53c:	2002      	movs	r0, #2
}
 800c53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800c542:	b2f9      	uxtb	r1, r7
 800c544:	4630      	mov	r0, r6
 800c546:	f7ff fe73 	bl	800c230 <FLASH_Program_Byte>
        break;
 800c54a:	e7d4      	b.n	800c4f6 <HAL_FLASH_Program+0x3e>
 800c54c:	2000351c 	.word	0x2000351c
 800c550:	40023c00 	.word	0x40023c00
 800c554:	0802e2fc 	.word	0x0802e2fc

0800c558 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c558:	2803      	cmp	r0, #3
{
 800c55a:	b538      	push	{r3, r4, r5, lr}
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c560:	d82f      	bhi.n	800c5c2 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800c562:	1e6b      	subs	r3, r5, #1
 800c564:	2b02      	cmp	r3, #2
 800c566:	d81c      	bhi.n	800c5a2 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800c568:	4b19      	ldr	r3, [pc, #100]	; (800c5d0 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800c56a:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800c56c:	691a      	ldr	r2, [r3, #16]
 800c56e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c572:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800c574:	d10e      	bne.n	800c594 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800c576:	6919      	ldr	r1, [r3, #16]
 800c578:	f248 0204 	movw	r2, #32772	; 0x8004
 800c57c:	430a      	orrs	r2, r1
 800c57e:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800c580:	4a13      	ldr	r2, [pc, #76]	; (800c5d0 <FLASH_MassErase+0x78>)
 800c582:	6910      	ldr	r0, [r2, #16]
 800c584:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800c588:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c58c:	6110      	str	r0, [r2, #16]
 800c58e:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800c592:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800c594:	2d02      	cmp	r5, #2
 800c596:	d10e      	bne.n	800c5b6 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800c598:	691a      	ldr	r2, [r3, #16]
 800c59a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c59e:	611a      	str	r2, [r3, #16]
 800c5a0:	e7ee      	b.n	800c580 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800c5a2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c5a6:	480b      	ldr	r0, [pc, #44]	; (800c5d4 <FLASH_MassErase+0x7c>)
 800c5a8:	f7f9 f9bc 	bl	8005924 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800c5ac:	4a08      	ldr	r2, [pc, #32]	; (800c5d0 <FLASH_MassErase+0x78>)
 800c5ae:	6913      	ldr	r3, [r2, #16]
 800c5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800c5b6:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <FLASH_MassErase+0x78>)
 800c5b8:	6913      	ldr	r3, [r2, #16]
 800c5ba:	f043 0304 	orr.w	r3, r3, #4
 800c5be:	6113      	str	r3, [r2, #16]
 800c5c0:	e7de      	b.n	800c580 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c5c2:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c5c6:	4803      	ldr	r0, [pc, #12]	; (800c5d4 <FLASH_MassErase+0x7c>)
 800c5c8:	f7f9 f9ac 	bl	8005924 <assert_failed>
 800c5cc:	e7c9      	b.n	800c562 <FLASH_MassErase+0xa>
 800c5ce:	bf00      	nop
 800c5d0:	40023c00 	.word	0x40023c00
 800c5d4:	0802e338 	.word	0x0802e338

0800c5d8 <HAL_FLASHEx_OBProgram>:
{
 800c5d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800c5da:	4d64      	ldr	r5, [pc, #400]	; (800c76c <HAL_FLASHEx_OBProgram+0x194>)
 800c5dc:	7d2b      	ldrb	r3, [r5, #20]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	f000 80bb 	beq.w	800c75a <HAL_FLASHEx_OBProgram+0x182>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c5ea:	6803      	ldr	r3, [r0, #0]
 800c5ec:	2b3f      	cmp	r3, #63	; 0x3f
 800c5ee:	f200 808c 	bhi.w	800c70a <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c5f2:	07d9      	lsls	r1, r3, #31
 800c5f4:	d40d      	bmi.n	800c612 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c5f6:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c5f8:	079a      	lsls	r2, r3, #30
 800c5fa:	d42c      	bmi.n	800c656 <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c5fc:	075e      	lsls	r6, r3, #29
 800c5fe:	d440      	bmi.n	800c682 <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c600:	0719      	lsls	r1, r3, #28
 800c602:	d44f      	bmi.n	800c6a4 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c604:	06da      	lsls	r2, r3, #27
 800c606:	d45b      	bmi.n	800c6c0 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c608:	069b      	lsls	r3, r3, #26
 800c60a:	d46c      	bmi.n	800c6e6 <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800c60c:	2300      	movs	r3, #0
 800c60e:	752b      	strb	r3, [r5, #20]
}
 800c610:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d905      	bls.n	800c624 <HAL_FLASHEx_OBProgram+0x4c>
 800c618:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800c61c:	4854      	ldr	r0, [pc, #336]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c61e:	f7f9 f981 	bl	8005924 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c622:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800c624:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c626:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c628:	4b52      	ldr	r3, [pc, #328]	; (800c774 <HAL_FLASHEx_OBProgram+0x19c>)
 800c62a:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800c62e:	d07f      	beq.n	800c730 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c630:	b903      	cbnz	r3, 800c634 <HAL_FLASHEx_OBProgram+0x5c>
 800c632:	b926      	cbnz	r6, 800c63e <HAL_FLASHEx_OBProgram+0x66>
 800c634:	f240 314f 	movw	r1, #847	; 0x34f
 800c638:	484d      	ldr	r0, [pc, #308]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c63a:	f7f9 f973 	bl	8005924 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c63e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c642:	f7ff ff0d 	bl	800c460 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c646:	b918      	cbnz	r0, 800c650 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800c648:	4b4b      	ldr	r3, [pc, #300]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c64a:	695a      	ldr	r2, [r3, #20]
 800c64c:	4316      	orrs	r6, r2
 800c64e:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	079a      	lsls	r2, r3, #30
 800c654:	d5d2      	bpl.n	800c5fc <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800c656:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800c658:	2eaa      	cmp	r6, #170	; 0xaa
 800c65a:	bf18      	it	ne
 800c65c:	2e55      	cmpne	r6, #85	; 0x55
 800c65e:	d006      	beq.n	800c66e <HAL_FLASHEx_OBProgram+0x96>
 800c660:	2ecc      	cmp	r6, #204	; 0xcc
 800c662:	d004      	beq.n	800c66e <HAL_FLASHEx_OBProgram+0x96>
 800c664:	f240 316e 	movw	r1, #878	; 0x36e
 800c668:	4841      	ldr	r0, [pc, #260]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c66a:	f7f9 f95b 	bl	8005924 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c66e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c672:	f7ff fef5 	bl	800c460 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800c676:	b908      	cbnz	r0, 800c67c <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800c678:	4b3f      	ldr	r3, [pc, #252]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c67a:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	075e      	lsls	r6, r3, #29
 800c680:	d5be      	bpl.n	800c600 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c682:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800c686:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c688:	f7ff feea 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c68c:	b938      	cbnz	r0, 800c69e <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c68e:	493a      	ldr	r1, [pc, #232]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c690:	4b3a      	ldr	r3, [pc, #232]	; (800c77c <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c692:	4a3b      	ldr	r2, [pc, #236]	; (800c780 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800c694:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800c696:	694e      	ldr	r6, [r1, #20]
 800c698:	4032      	ands	r2, r6
 800c69a:	4313      	orrs	r3, r2
 800c69c:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	0719      	lsls	r1, r3, #28
 800c6a2:	d5af      	bpl.n	800c604 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c6a4:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c6a6:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800c6aa:	d158      	bne.n	800c75e <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c6ac:	4932      	ldr	r1, [pc, #200]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6ae:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800c6b0:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800c6b2:	694a      	ldr	r2, [r1, #20]
 800c6b4:	f022 020c 	bic.w	r2, r2, #12
 800c6b8:	4332      	orrs	r2, r6
 800c6ba:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c6bc:	06da      	lsls	r2, r3, #27
 800c6be:	d5a3      	bpl.n	800c608 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800c6c0:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c6c2:	f248 0313 	movw	r3, #32787	; 0x8013
 800c6c6:	429e      	cmp	r6, r3
 800c6c8:	d826      	bhi.n	800c718 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6ce:	f7ff fec7 	bl	800c460 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800c6d2:	b928      	cbnz	r0, 800c6e0 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800c6d4:	4a28      	ldr	r2, [pc, #160]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6d6:	4b2b      	ldr	r3, [pc, #172]	; (800c784 <HAL_FLASHEx_OBProgram+0x1ac>)
 800c6d8:	6991      	ldr	r1, [r2, #24]
 800c6da:	400b      	ands	r3, r1
 800c6dc:	4333      	orrs	r3, r6
 800c6de:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	069b      	lsls	r3, r3, #26
 800c6e4:	d592      	bpl.n	800c60c <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800c6e6:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c6e8:	f248 0313 	movw	r3, #32787	; 0x8013
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	d819      	bhi.n	800c724 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6f4:	f7ff feb4 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d187      	bne.n	800c60c <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800c6fc:	4a1e      	ldr	r2, [pc, #120]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c6fe:	6993      	ldr	r3, [r2, #24]
 800c700:	b29b      	uxth	r3, r3
 800c702:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c706:	6193      	str	r3, [r2, #24]
 800c708:	e780      	b.n	800c60c <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800c70a:	f240 1125 	movw	r1, #293	; 0x125
 800c70e:	4818      	ldr	r0, [pc, #96]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c710:	f7f9 f908 	bl	8005924 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	e76c      	b.n	800c5f2 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800c718:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c71c:	4814      	ldr	r0, [pc, #80]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c71e:	f7f9 f901 	bl	8005924 <assert_failed>
 800c722:	e7d2      	b.n	800c6ca <HAL_FLASHEx_OBProgram+0xf2>
 800c724:	f240 31a9 	movw	r1, #937	; 0x3a9
 800c728:	4811      	ldr	r0, [pc, #68]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c72a:	f7f9 f8fb 	bl	8005924 <assert_failed>
 800c72e:	e7df      	b.n	800c6f0 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c730:	b96b      	cbnz	r3, 800c74e <HAL_FLASHEx_OBProgram+0x176>
 800c732:	b166      	cbz	r6, 800c74e <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c734:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c738:	f7ff fe92 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d187      	bne.n	800c650 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800c740:	4a0d      	ldr	r2, [pc, #52]	; (800c778 <HAL_FLASHEx_OBProgram+0x1a0>)
 800c742:	6953      	ldr	r3, [r2, #20]
 800c744:	ea23 0606 	bic.w	r6, r3, r6
 800c748:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	e754      	b.n	800c5f8 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800c74e:	f240 312b 	movw	r1, #811	; 0x32b
 800c752:	4807      	ldr	r0, [pc, #28]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c754:	f7f9 f8e6 	bl	8005924 <assert_failed>
 800c758:	e7ec      	b.n	800c734 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800c75a:	2002      	movs	r0, #2
}
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800c75e:	f44f 7162 	mov.w	r1, #904	; 0x388
 800c762:	4803      	ldr	r0, [pc, #12]	; (800c770 <HAL_FLASHEx_OBProgram+0x198>)
 800c764:	f7f9 f8de 	bl	8005924 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	e79f      	b.n	800c6ac <HAL_FLASHEx_OBProgram+0xd4>
 800c76c:	2000351c 	.word	0x2000351c
 800c770:	0802e338 	.word	0x0802e338
 800c774:	f000ffff 	.word	0xf000ffff
 800c778:	40023c00 	.word	0x40023c00
 800c77c:	f00000f0 	.word	0xf00000f0
 800c780:	0fffff0f 	.word	0x0fffff0f
 800c784:	ffff0000 	.word	0xffff0000

0800c788 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c788:	4a11      	ldr	r2, [pc, #68]	; (800c7d0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c78a:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c78c:	4b11      	ldr	r3, [pc, #68]	; (800c7d4 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800c78e:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800c790:	6951      	ldr	r1, [r2, #20]
 800c792:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800c794:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800c796:	7d51      	ldrb	r1, [r2, #21]
 800c798:	29aa      	cmp	r1, #170	; 0xaa
 800c79a:	b2cb      	uxtb	r3, r1
 800c79c:	d015      	beq.n	800c7ca <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800c79e:	7d53      	ldrb	r3, [r2, #21]
 800c7a0:	2bcc      	cmp	r3, #204	; 0xcc
 800c7a2:	bf0c      	ite	eq
 800c7a4:	22cc      	moveq	r2, #204	; 0xcc
 800c7a6:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c7a8:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800c7aa:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800c7ac:	4a0a      	ldr	r2, [pc, #40]	; (800c7d8 <HAL_FLASHEx_OBGetConfig+0x50>)
 800c7ae:	6959      	ldr	r1, [r3, #20]
 800c7b0:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800c7b2:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800c7b4:	695a      	ldr	r2, [r3, #20]
 800c7b6:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800c7ba:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800c7bc:	699a      	ldr	r2, [r3, #24]
 800c7be:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800c7c0:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800c7c6:	61c3      	str	r3, [r0, #28]
}
 800c7c8:	4770      	bx	lr
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	e7ec      	b.n	800c7a8 <HAL_FLASHEx_OBGetConfig+0x20>
 800c7ce:	bf00      	nop
 800c7d0:	40023c00 	.word	0x40023c00
 800c7d4:	0fff0000 	.word	0x0fff0000
 800c7d8:	f00000f0 	.word	0xf00000f0

0800c7dc <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800c7dc:	2817      	cmp	r0, #23
{
 800c7de:	b538      	push	{r3, r4, r5, lr}
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800c7e4:	d82b      	bhi.n	800c83e <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c7e6:	2c03      	cmp	r4, #3
 800c7e8:	d821      	bhi.n	800c82e <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c7ea:	b9dc      	cbnz	r4, 800c824 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800c7ec:	4b1a      	ldr	r3, [pc, #104]	; (800c858 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800c7ee:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800c7f0:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800c7f2:	bf88      	it	hi
 800c7f4:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800c7f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c7fa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800c7fc:	6919      	ldr	r1, [r3, #16]
 800c7fe:	430c      	orrs	r4, r1
 800c800:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c802:	691a      	ldr	r2, [r3, #16]
 800c804:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800c808:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c80a:	6918      	ldr	r0, [r3, #16]
 800c80c:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800c810:	f045 0502 	orr.w	r5, r5, #2
 800c814:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c816:	691a      	ldr	r2, [r3, #16]
 800c818:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c81c:	611a      	str	r2, [r3, #16]
 800c81e:	f3bf 8f4f 	dsb	sy
}
 800c822:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c824:	2c01      	cmp	r4, #1
 800c826:	d110      	bne.n	800c84a <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c828:	f44f 7480 	mov.w	r4, #256	; 0x100
 800c82c:	e7de      	b.n	800c7ec <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c82e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800c832:	480a      	ldr	r0, [pc, #40]	; (800c85c <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c834:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800c838:	f7f9 f874 	bl	8005924 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c83c:	e7d6      	b.n	800c7ec <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800c83e:	f240 11eb 	movw	r1, #491	; 0x1eb
 800c842:	4806      	ldr	r0, [pc, #24]	; (800c85c <FLASH_Erase_Sector+0x80>)
 800c844:	f7f9 f86e 	bl	8005924 <assert_failed>
 800c848:	e7cd      	b.n	800c7e6 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c84a:	2c02      	cmp	r4, #2
 800c84c:	bf0c      	ite	eq
 800c84e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800c852:	f44f 7440 	movne.w	r4, #768	; 0x300
 800c856:	e7c9      	b.n	800c7ec <FLASH_Erase_Sector+0x10>
 800c858:	40023c00 	.word	0x40023c00
 800c85c:	0802e338 	.word	0x0802e338

0800c860 <HAL_FLASHEx_Erase>:
{
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800c864:	4f2f      	ldr	r7, [pc, #188]	; (800c924 <HAL_FLASHEx_Erase+0xc4>)
 800c866:	7d3b      	ldrb	r3, [r7, #20]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d040      	beq.n	800c8ee <HAL_FLASHEx_Erase+0x8e>
 800c86c:	2301      	movs	r3, #1
 800c86e:	4604      	mov	r4, r0
 800c870:	4688      	mov	r8, r1
 800c872:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800c874:	6803      	ldr	r3, [r0, #0]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d903      	bls.n	800c882 <HAL_FLASHEx_Erase+0x22>
 800c87a:	21a5      	movs	r1, #165	; 0xa5
 800c87c:	482a      	ldr	r0, [pc, #168]	; (800c928 <HAL_FLASHEx_Erase+0xc8>)
 800c87e:	f7f9 f851 	bl	8005924 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c882:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c886:	f7ff fdeb 	bl	800c460 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c88a:	4606      	mov	r6, r0
 800c88c:	bb50      	cbnz	r0, 800c8e4 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295
 800c892:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d034      	beq.n	800c906 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c89c:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c8a0:	442b      	add	r3, r5
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	2a17      	cmp	r2, #23
 800c8a6:	d826      	bhi.n	800c8f6 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c8a8:	429d      	cmp	r5, r3
 800c8aa:	d21b      	bcs.n	800c8e4 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c8ac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800c92c <HAL_FLASHEx_Erase+0xcc>
 800c8b0:	e005      	b.n	800c8be <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c8b2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	4413      	add	r3, r2
 800c8ba:	42ab      	cmp	r3, r5
 800c8bc:	d912      	bls.n	800c8e4 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c8be:	4628      	mov	r0, r5
 800c8c0:	7c21      	ldrb	r1, [r4, #16]
 800c8c2:	f7ff ff8b 	bl	800c7dc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c8ca:	f7ff fdc9 	bl	800c460 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800c8ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c8d6:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0e9      	beq.n	800c8b2 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8de:	4606      	mov	r6, r0
          *SectorError = index;
 800c8e0:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800c8e8:	753b      	strb	r3, [r7, #20]
}
 800c8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800c8ee:	2602      	movs	r6, #2
}
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800c8f6:	21c1      	movs	r1, #193	; 0xc1
 800c8f8:	480b      	ldr	r0, [pc, #44]	; (800c928 <HAL_FLASHEx_Erase+0xc8>)
 800c8fa:	f7f9 f813 	bl	8005924 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c8fe:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800c902:	442b      	add	r3, r5
 800c904:	e7d0      	b.n	800c8a8 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c906:	6861      	ldr	r1, [r4, #4]
 800c908:	7c20      	ldrb	r0, [r4, #16]
 800c90a:	f7ff fe25 	bl	800c558 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c90e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c912:	f7ff fda5 	bl	800c460 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800c916:	4a05      	ldr	r2, [pc, #20]	; (800c92c <HAL_FLASHEx_Erase+0xcc>)
 800c918:	4b05      	ldr	r3, [pc, #20]	; (800c930 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c91a:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800c91c:	6911      	ldr	r1, [r2, #16]
 800c91e:	400b      	ands	r3, r1
 800c920:	6113      	str	r3, [r2, #16]
 800c922:	e7df      	b.n	800c8e4 <HAL_FLASHEx_Erase+0x84>
 800c924:	2000351c 	.word	0x2000351c
 800c928:	0802e338 	.word	0x0802e338
 800c92c:	40023c00 	.word	0x40023c00
 800c930:	ffff7ffb 	.word	0xffff7ffb

0800c934 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c934:	4bb9      	ldr	r3, [pc, #740]	; (800cc1c <HAL_GPIO_Init+0x2e8>)
 800c936:	4aba      	ldr	r2, [pc, #744]	; (800cc20 <HAL_GPIO_Init+0x2ec>)
 800c938:	4290      	cmp	r0, r2
 800c93a:	bf18      	it	ne
 800c93c:	4298      	cmpne	r0, r3
{
 800c93e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c942:	bf18      	it	ne
 800c944:	2301      	movne	r3, #1
{
 800c946:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c948:	bf08      	it	eq
 800c94a:	2300      	moveq	r3, #0
{
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	d026      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c954:	4bb3      	ldr	r3, [pc, #716]	; (800cc24 <HAL_GPIO_Init+0x2f0>)
 800c956:	4298      	cmp	r0, r3
 800c958:	d023      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c95a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95e:	4298      	cmp	r0, r3
 800c960:	d01f      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c966:	4298      	cmp	r0, r3
 800c968:	d01b      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c96a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c96e:	4298      	cmp	r0, r3
 800c970:	d017      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c976:	4298      	cmp	r0, r3
 800c978:	d013      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c97a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c97e:	4298      	cmp	r0, r3
 800c980:	d00f      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c982:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	4290      	cmp	r0, r2
 800c98c:	bf18      	it	ne
 800c98e:	4298      	cmpne	r0, r3
 800c990:	d007      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c996:	4298      	cmp	r0, r3
 800c998:	d003      	beq.n	800c9a2 <HAL_GPIO_Init+0x6e>
 800c99a:	21aa      	movs	r1, #170	; 0xaa
 800c99c:	48a2      	ldr	r0, [pc, #648]	; (800cc28 <HAL_GPIO_Init+0x2f4>)
 800c99e:	f7f8 ffc1 	bl	8005924 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800c9a2:	883b      	ldrh	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 811a 	beq.w	800cbde <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800c9b0:	bf18      	it	ne
 800c9b2:	2a03      	cmpne	r2, #3
 800c9b4:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800c9b8:	bf8c      	ite	hi
 800c9ba:	2301      	movhi	r3, #1
 800c9bc:	2300      	movls	r3, #0
 800c9be:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800c9c2:	bf0c      	ite	eq
 800c9c4:	2300      	moveq	r3, #0
 800c9c6:	f003 0301 	andne.w	r3, r3, #1
 800c9ca:	3a11      	subs	r2, #17
 800c9cc:	2a01      	cmp	r2, #1
 800c9ce:	bf94      	ite	ls
 800c9d0:	2300      	movls	r3, #0
 800c9d2:	f003 0301 	andhi.w	r3, r3, #1
 800c9d6:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800c9da:	bf0c      	ite	eq
 800c9dc:	2300      	moveq	r3, #0
 800c9de:	f003 0301 	andne.w	r3, r3, #1
 800c9e2:	b11b      	cbz	r3, 800c9ec <HAL_GPIO_Init+0xb8>
 800c9e4:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800c9e8:	f040 813e 	bne.w	800cc68 <HAL_GPIO_Init+0x334>
{
 800c9ec:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9ee:	f8df a260 	ldr.w	sl, [pc, #608]	; 800cc50 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c9f2:	46b8      	mov	r8, r7
 800c9f4:	e003      	b.n	800c9fe <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800c9f6:	3501      	adds	r5, #1
 800c9f8:	2d10      	cmp	r5, #16
 800c9fa:	f000 80b3 	beq.w	800cb64 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800c9fe:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ca00:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800ca04:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ca06:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800ca0a:	ea34 0303 	bics.w	r3, r4, r3
 800ca0e:	d1f2      	bne.n	800c9f6 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ca10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca14:	f001 0303 	and.w	r3, r1, #3
 800ca18:	1e5a      	subs	r2, r3, #1
 800ca1a:	2a01      	cmp	r2, #1
 800ca1c:	f240 80a5 	bls.w	800cb6a <HAL_GPIO_Init+0x236>
 800ca20:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ca22:	f04f 0b03 	mov.w	fp, #3
 800ca26:	fa0b fb07 	lsl.w	fp, fp, r7
 800ca2a:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d025      	beq.n	800ca7e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ca32:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ca36:	2802      	cmp	r0, #2
 800ca38:	f200 80b3 	bhi.w	800cba2 <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800ca3c:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ca3e:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca40:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ca42:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ca46:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800ca4a:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca4c:	d117      	bne.n	800ca7e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800ca4e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ca52:	280f      	cmp	r0, #15
 800ca54:	f200 80c8 	bhi.w	800cbe8 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800ca58:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ca5a:	f005 0e07 	and.w	lr, r5, #7
 800ca5e:	f04f 0c0f 	mov.w	ip, #15
 800ca62:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ca66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ca6a:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ca6c:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ca70:	fa0c fe0e 	lsl.w	lr, ip, lr
 800ca74:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ca78:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800ca7c:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800ca7e:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca80:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca82:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ca86:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ca8a:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800ca8e:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca90:	d0b1      	beq.n	800c9f6 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca92:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800ca96:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ca9a:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800caa2:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800caa4:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800caa8:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800caac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cab0:	9203      	str	r2, [sp, #12]
 800cab2:	4a5e      	ldr	r2, [pc, #376]	; (800cc2c <HAL_GPIO_Init+0x2f8>)
 800cab4:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800cab6:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cab8:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800caba:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cabc:	40a3      	lsls	r3, r4
 800cabe:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cac2:	4857      	ldr	r0, [pc, #348]	; (800cc20 <HAL_GPIO_Init+0x2ec>)
 800cac4:	4286      	cmp	r6, r0
 800cac6:	d025      	beq.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cac8:	9801      	ldr	r0, [sp, #4]
 800caca:	2800      	cmp	r0, #0
 800cacc:	d07d      	beq.n	800cbca <HAL_GPIO_Init+0x296>
 800cace:	4855      	ldr	r0, [pc, #340]	; (800cc24 <HAL_GPIO_Init+0x2f0>)
 800cad0:	4286      	cmp	r6, r0
 800cad2:	d07f      	beq.n	800cbd4 <HAL_GPIO_Init+0x2a0>
 800cad4:	4856      	ldr	r0, [pc, #344]	; (800cc30 <HAL_GPIO_Init+0x2fc>)
 800cad6:	4286      	cmp	r6, r0
 800cad8:	f000 8091 	beq.w	800cbfe <HAL_GPIO_Init+0x2ca>
 800cadc:	4855      	ldr	r0, [pc, #340]	; (800cc34 <HAL_GPIO_Init+0x300>)
 800cade:	4286      	cmp	r6, r0
 800cae0:	f000 8092 	beq.w	800cc08 <HAL_GPIO_Init+0x2d4>
 800cae4:	4854      	ldr	r0, [pc, #336]	; (800cc38 <HAL_GPIO_Init+0x304>)
 800cae6:	4286      	cmp	r6, r0
 800cae8:	f000 80b4 	beq.w	800cc54 <HAL_GPIO_Init+0x320>
 800caec:	4853      	ldr	r0, [pc, #332]	; (800cc3c <HAL_GPIO_Init+0x308>)
 800caee:	4286      	cmp	r6, r0
 800caf0:	f000 80b5 	beq.w	800cc5e <HAL_GPIO_Init+0x32a>
 800caf4:	4852      	ldr	r0, [pc, #328]	; (800cc40 <HAL_GPIO_Init+0x30c>)
 800caf6:	4286      	cmp	r6, r0
 800caf8:	f000 808b 	beq.w	800cc12 <HAL_GPIO_Init+0x2de>
 800cafc:	4851      	ldr	r0, [pc, #324]	; (800cc44 <HAL_GPIO_Init+0x310>)
 800cafe:	4286      	cmp	r6, r0
 800cb00:	f000 80b7 	beq.w	800cc72 <HAL_GPIO_Init+0x33e>
 800cb04:	4850      	ldr	r0, [pc, #320]	; (800cc48 <HAL_GPIO_Init+0x314>)
 800cb06:	4286      	cmp	r6, r0
 800cb08:	bf0c      	ite	eq
 800cb0a:	2009      	moveq	r0, #9
 800cb0c:	200a      	movne	r0, #10
 800cb0e:	fa00 f404 	lsl.w	r4, r0, r4
 800cb12:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800cb14:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800cb16:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800cb1a:	4b4c      	ldr	r3, [pc, #304]	; (800cc4c <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb1c:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800cb1e:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cb20:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800cb22:	4b4a      	ldr	r3, [pc, #296]	; (800cc4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb24:	bf54      	ite	pl
 800cb26:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb28:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cb2c:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800cb2e:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800cb30:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800cb32:	4b46      	ldr	r3, [pc, #280]	; (800cc4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb34:	bf54      	ite	pl
 800cb36:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb38:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cb3c:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800cb3e:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800cb40:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800cb42:	4b42      	ldr	r3, [pc, #264]	; (800cc4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb44:	bf54      	ite	pl
 800cb46:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800cb48:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800cb4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cb4e:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800cb50:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800cb52:	4a3e      	ldr	r2, [pc, #248]	; (800cc4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800cb54:	bf54      	ite	pl
 800cb56:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800cb58:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb5c:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800cb5e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cb60:	f47f af4d 	bne.w	800c9fe <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800cb64:	b005      	add	sp, #20
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cb6a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800cb6e:	2803      	cmp	r0, #3
 800cb70:	d820      	bhi.n	800cbb4 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800cb72:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb74:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb78:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb7c:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800cb80:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cb82:	ea20 000b 	bic.w	r0, r0, fp
 800cb86:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800cb8a:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800cb8e:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800cb90:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb92:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb96:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800cb9a:	40ac      	lsls	r4, r5
 800cb9c:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800cb9e:	6074      	str	r4, [r6, #4]
 800cba0:	e745      	b.n	800ca2e <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800cba2:	21ce      	movs	r1, #206	; 0xce
 800cba4:	4820      	ldr	r0, [pc, #128]	; (800cc28 <HAL_GPIO_Init+0x2f4>)
 800cba6:	f7f8 febd 	bl	8005924 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800cbaa:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbae:	f001 0303 	and.w	r3, r1, #3
 800cbb2:	e743      	b.n	800ca3c <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800cbb4:	21bd      	movs	r1, #189	; 0xbd
 800cbb6:	481c      	ldr	r0, [pc, #112]	; (800cc28 <HAL_GPIO_Init+0x2f4>)
 800cbb8:	f7f8 feb4 	bl	8005924 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cbbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cbc0:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cbc4:	f001 0303 	and.w	r3, r1, #3
 800cbc8:	e7d3      	b.n	800cb72 <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbca:	2001      	movs	r0, #1
 800cbcc:	fa00 f404 	lsl.w	r4, r0, r4
 800cbd0:	4323      	orrs	r3, r4
 800cbd2:	e79f      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cbd4:	2002      	movs	r0, #2
 800cbd6:	fa00 f404 	lsl.w	r4, r0, r4
 800cbda:	4323      	orrs	r3, r4
 800cbdc:	e79a      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800cbde:	21ab      	movs	r1, #171	; 0xab
 800cbe0:	4811      	ldr	r0, [pc, #68]	; (800cc28 <HAL_GPIO_Init+0x2f4>)
 800cbe2:	f7f8 fe9f 	bl	8005924 <assert_failed>
 800cbe6:	e6e0      	b.n	800c9aa <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800cbe8:	21db      	movs	r1, #219	; 0xdb
 800cbea:	480f      	ldr	r0, [pc, #60]	; (800cc28 <HAL_GPIO_Init+0x2f4>)
 800cbec:	f7f8 fe9a 	bl	8005924 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cbf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cbf4:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cbf8:	f001 0303 	and.w	r3, r1, #3
 800cbfc:	e72c      	b.n	800ca58 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cbfe:	2003      	movs	r0, #3
 800cc00:	fa00 f404 	lsl.w	r4, r0, r4
 800cc04:	4323      	orrs	r3, r4
 800cc06:	e785      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cc08:	2004      	movs	r0, #4
 800cc0a:	fa00 f404 	lsl.w	r4, r0, r4
 800cc0e:	4323      	orrs	r3, r4
 800cc10:	e780      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cc12:	2007      	movs	r0, #7
 800cc14:	fa00 f404 	lsl.w	r4, r0, r4
 800cc18:	4323      	orrs	r3, r4
 800cc1a:	e77b      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cc1c:	40020400 	.word	0x40020400
 800cc20:	40020000 	.word	0x40020000
 800cc24:	40020800 	.word	0x40020800
 800cc28:	0802e378 	.word	0x0802e378
 800cc2c:	40013800 	.word	0x40013800
 800cc30:	40020c00 	.word	0x40020c00
 800cc34:	40021000 	.word	0x40021000
 800cc38:	40021400 	.word	0x40021400
 800cc3c:	40021800 	.word	0x40021800
 800cc40:	40021c00 	.word	0x40021c00
 800cc44:	40022000 	.word	0x40022000
 800cc48:	40022400 	.word	0x40022400
 800cc4c:	40013c00 	.word	0x40013c00
 800cc50:	40023800 	.word	0x40023800
 800cc54:	2005      	movs	r0, #5
 800cc56:	fa00 f404 	lsl.w	r4, r0, r4
 800cc5a:	4323      	orrs	r3, r4
 800cc5c:	e75a      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cc5e:	2006      	movs	r0, #6
 800cc60:	fa00 f404 	lsl.w	r4, r0, r4
 800cc64:	4323      	orrs	r3, r4
 800cc66:	e755      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800cc68:	21ac      	movs	r1, #172	; 0xac
 800cc6a:	4804      	ldr	r0, [pc, #16]	; (800cc7c <HAL_GPIO_Init+0x348>)
 800cc6c:	f7f8 fe5a 	bl	8005924 <assert_failed>
 800cc70:	e6bc      	b.n	800c9ec <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cc72:	2008      	movs	r0, #8
 800cc74:	fa00 f404 	lsl.w	r4, r0, r4
 800cc78:	4323      	orrs	r3, r4
 800cc7a:	e74b      	b.n	800cb14 <HAL_GPIO_Init+0x1e0>
 800cc7c:	0802e378 	.word	0x0802e378

0800cc80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc84:	4f6b      	ldr	r7, [pc, #428]	; (800ce34 <HAL_GPIO_DeInit+0x1b4>)
{
 800cc86:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc88:	4b6b      	ldr	r3, [pc, #428]	; (800ce38 <HAL_GPIO_DeInit+0x1b8>)
{
 800cc8a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800cc8c:	42b8      	cmp	r0, r7
 800cc8e:	bf18      	it	ne
 800cc90:	4298      	cmpne	r0, r3
 800cc92:	bf14      	ite	ne
 800cc94:	2701      	movne	r7, #1
 800cc96:	2700      	moveq	r7, #0
 800cc98:	d027      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800cc9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc9e:	4298      	cmp	r0, r3
 800cca0:	d023      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800cca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca6:	4298      	cmp	r0, r3
 800cca8:	d01f      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccae:	4298      	cmp	r0, r3
 800ccb0:	d01b      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb6:	4298      	cmp	r0, r3
 800ccb8:	d017      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccbe:	4298      	cmp	r0, r3
 800ccc0:	d013      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc6:	4298      	cmp	r0, r3
 800ccc8:	d00f      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccca:	4a5c      	ldr	r2, [pc, #368]	; (800ce3c <HAL_GPIO_DeInit+0x1bc>)
 800cccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd0:	4290      	cmp	r0, r2
 800ccd2:	bf18      	it	ne
 800ccd4:	4298      	cmpne	r0, r3
 800ccd6:	d008      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800ccd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccdc:	4298      	cmp	r0, r3
 800ccde:	d004      	beq.n	800ccea <HAL_GPIO_DeInit+0x6a>
 800cce0:	f240 112b 	movw	r1, #299	; 0x12b
 800cce4:	4856      	ldr	r0, [pc, #344]	; (800ce40 <HAL_GPIO_DeInit+0x1c0>)
 800cce6:	f7f8 fe1d 	bl	8005924 <assert_failed>
{
 800ccea:	2300      	movs	r3, #0
 800ccec:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ce60 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800ccf0:	f8df a140 	ldr.w	sl, [pc, #320]	; 800ce34 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ccf4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800ce64 <HAL_GPIO_DeInit+0x1e4>
 800ccf8:	e002      	b.n	800cd00 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	2b10      	cmp	r3, #16
 800ccfe:	d07b      	beq.n	800cdf8 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800cd00:	2001      	movs	r0, #1
 800cd02:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800cd06:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800cd0a:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800cd0e:	d1f4      	bne.n	800ccfa <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800cd10:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cd14:	f003 0103 	and.w	r1, r3, #3
 800cd18:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cd1c:	4554      	cmp	r4, sl
 800cd1e:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cd20:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800cd24:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cd28:	fa0c fc01 	lsl.w	ip, ip, r1
 800cd2c:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cd30:	d01e      	beq.n	800cd70 <HAL_GPIO_DeInit+0xf0>
 800cd32:	2f00      	cmp	r7, #0
 800cd34:	d063      	beq.n	800cdfe <HAL_GPIO_DeInit+0x17e>
 800cd36:	4843      	ldr	r0, [pc, #268]	; (800ce44 <HAL_GPIO_DeInit+0x1c4>)
 800cd38:	4284      	cmp	r4, r0
 800cd3a:	d063      	beq.n	800ce04 <HAL_GPIO_DeInit+0x184>
 800cd3c:	4842      	ldr	r0, [pc, #264]	; (800ce48 <HAL_GPIO_DeInit+0x1c8>)
 800cd3e:	4284      	cmp	r4, r0
 800cd40:	d064      	beq.n	800ce0c <HAL_GPIO_DeInit+0x18c>
 800cd42:	4842      	ldr	r0, [pc, #264]	; (800ce4c <HAL_GPIO_DeInit+0x1cc>)
 800cd44:	4284      	cmp	r4, r0
 800cd46:	d065      	beq.n	800ce14 <HAL_GPIO_DeInit+0x194>
 800cd48:	4841      	ldr	r0, [pc, #260]	; (800ce50 <HAL_GPIO_DeInit+0x1d0>)
 800cd4a:	4284      	cmp	r4, r0
 800cd4c:	d066      	beq.n	800ce1c <HAL_GPIO_DeInit+0x19c>
 800cd4e:	4841      	ldr	r0, [pc, #260]	; (800ce54 <HAL_GPIO_DeInit+0x1d4>)
 800cd50:	4284      	cmp	r4, r0
 800cd52:	d053      	beq.n	800cdfc <HAL_GPIO_DeInit+0x17c>
 800cd54:	4840      	ldr	r0, [pc, #256]	; (800ce58 <HAL_GPIO_DeInit+0x1d8>)
 800cd56:	4284      	cmp	r4, r0
 800cd58:	d064      	beq.n	800ce24 <HAL_GPIO_DeInit+0x1a4>
 800cd5a:	4838      	ldr	r0, [pc, #224]	; (800ce3c <HAL_GPIO_DeInit+0x1bc>)
 800cd5c:	4284      	cmp	r4, r0
 800cd5e:	d065      	beq.n	800ce2c <HAL_GPIO_DeInit+0x1ac>
 800cd60:	483e      	ldr	r0, [pc, #248]	; (800ce5c <HAL_GPIO_DeInit+0x1dc>)
 800cd62:	4284      	cmp	r4, r0
 800cd64:	bf14      	ite	ne
 800cd66:	200a      	movne	r0, #10
 800cd68:	2009      	moveq	r0, #9
 800cd6a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd6e:	e000      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800cd70:	2100      	movs	r1, #0
 800cd72:	4588      	cmp	r8, r1
 800cd74:	d11b      	bne.n	800cdae <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cd76:	f8d9 1000 	ldr.w	r1, [r9]
 800cd7a:	ea21 010e 	bic.w	r1, r1, lr
 800cd7e:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cd82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd86:	ea21 010e 	bic.w	r1, r1, lr
 800cd8a:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd8e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800cd92:	ea21 010e 	bic.w	r1, r1, lr
 800cd96:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd9a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cd9e:	ea21 010e 	bic.w	r1, r1, lr
 800cda2:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800cda6:	68b1      	ldr	r1, [r6, #8]
 800cda8:	ea21 010c 	bic.w	r1, r1, ip
 800cdac:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cdae:	0059      	lsls	r1, r3, #1
 800cdb0:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdb2:	f003 0c07 	and.w	ip, r3, #7
 800cdb6:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cdb8:	fa00 f101 	lsl.w	r1, r0, r1
 800cdbc:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdbe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cdc2:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdc6:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cdca:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdcc:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800cdce:	3301      	adds	r3, #1
 800cdd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800cdd4:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cdd6:	6a06      	ldr	r6, [r0, #32]
 800cdd8:	ea26 060c 	bic.w	r6, r6, ip
 800cddc:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cdde:	68e0      	ldr	r0, [r4, #12]
 800cde0:	ea20 0001 	bic.w	r0, r0, r1
 800cde4:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cde6:	6860      	ldr	r0, [r4, #4]
 800cde8:	ea20 0202 	bic.w	r2, r0, r2
 800cdec:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cdee:	68a2      	ldr	r2, [r4, #8]
 800cdf0:	ea22 0101 	bic.w	r1, r2, r1
 800cdf4:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800cdf6:	d183      	bne.n	800cd00 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800cdf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800cdfc:	2006      	movs	r0, #6
 800cdfe:	fa00 f101 	lsl.w	r1, r0, r1
 800ce02:	e7b6      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce04:	2002      	movs	r0, #2
 800ce06:	fa00 f101 	lsl.w	r1, r0, r1
 800ce0a:	e7b2      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce0c:	2003      	movs	r0, #3
 800ce0e:	fa00 f101 	lsl.w	r1, r0, r1
 800ce12:	e7ae      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce14:	2004      	movs	r0, #4
 800ce16:	fa00 f101 	lsl.w	r1, r0, r1
 800ce1a:	e7aa      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce1c:	2005      	movs	r0, #5
 800ce1e:	fa00 f101 	lsl.w	r1, r0, r1
 800ce22:	e7a6      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce24:	2007      	movs	r0, #7
 800ce26:	fa00 f101 	lsl.w	r1, r0, r1
 800ce2a:	e7a2      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce2c:	2008      	movs	r0, #8
 800ce2e:	fa00 f101 	lsl.w	r1, r0, r1
 800ce32:	e79e      	b.n	800cd72 <HAL_GPIO_DeInit+0xf2>
 800ce34:	40020000 	.word	0x40020000
 800ce38:	40020400 	.word	0x40020400
 800ce3c:	40022000 	.word	0x40022000
 800ce40:	0802e378 	.word	0x0802e378
 800ce44:	40020800 	.word	0x40020800
 800ce48:	40020c00 	.word	0x40020c00
 800ce4c:	40021000 	.word	0x40021000
 800ce50:	40021400 	.word	0x40021400
 800ce54:	40021800 	.word	0x40021800
 800ce58:	40021c00 	.word	0x40021c00
 800ce5c:	40022400 	.word	0x40022400
 800ce60:	40013800 	.word	0x40013800
 800ce64:	40013c00 	.word	0x40013c00

0800ce68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	b129      	cbz	r1, 800ce7c <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce70:	692b      	ldr	r3, [r5, #16]
 800ce72:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800ce74:	bf14      	ite	ne
 800ce76:	2001      	movne	r0, #1
 800ce78:	2000      	moveq	r0, #0
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce7c:	f240 1177 	movw	r1, #375	; 0x177
 800ce80:	4801      	ldr	r0, [pc, #4]	; (800ce88 <HAL_GPIO_ReadPin+0x20>)
 800ce82:	f7f8 fd4f 	bl	8005924 <assert_failed>
 800ce86:	e7f3      	b.n	800ce70 <HAL_GPIO_ReadPin+0x8>
 800ce88:	0802e378 	.word	0x0802e378

0800ce8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce8c:	b570      	push	{r4, r5, r6, lr}
 800ce8e:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce90:	460c      	mov	r4, r1
{
 800ce92:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ce94:	b161      	cbz	r1, 800ceb0 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ce96:	2d01      	cmp	r5, #1
 800ce98:	d803      	bhi.n	800cea2 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800ce9a:	b905      	cbnz	r5, 800ce9e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ce9c:	0424      	lsls	r4, r4, #16
 800ce9e:	61b4      	str	r4, [r6, #24]
  }
}
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800cea2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800cea6:	4805      	ldr	r0, [pc, #20]	; (800cebc <HAL_GPIO_WritePin+0x30>)
 800cea8:	f7f8 fd3c 	bl	8005924 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ceac:	61b4      	str	r4, [r6, #24]
}
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ceb0:	f240 1197 	movw	r1, #407	; 0x197
 800ceb4:	4801      	ldr	r0, [pc, #4]	; (800cebc <HAL_GPIO_WritePin+0x30>)
 800ceb6:	f7f8 fd35 	bl	8005924 <assert_failed>
 800ceba:	e7ec      	b.n	800ce96 <HAL_GPIO_WritePin+0xa>
 800cebc:	0802e378 	.word	0x0802e378

0800cec0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800cec4:	460c      	mov	r4, r1
 800cec6:	b141      	cbz	r1, 800ceda <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cec8:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ceca:	ea04 0301 	and.w	r3, r4, r1
 800cece:	ea24 0401 	bic.w	r4, r4, r1
 800ced2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ced6:	61ac      	str	r4, [r5, #24]
}
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ceda:	f240 11af 	movw	r1, #431	; 0x1af
 800cede:	4802      	ldr	r0, [pc, #8]	; (800cee8 <HAL_GPIO_TogglePin+0x28>)
 800cee0:	f7f8 fd20 	bl	8005924 <assert_failed>
 800cee4:	e7f0      	b.n	800cec8 <HAL_GPIO_TogglePin+0x8>
 800cee6:	bf00      	nop
 800cee8:	0802e378 	.word	0x0802e378

0800ceec <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop

0800cef0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800cef0:	4a04      	ldr	r2, [pc, #16]	; (800cf04 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800cef2:	6951      	ldr	r1, [r2, #20]
 800cef4:	4201      	tst	r1, r0
 800cef6:	d100      	bne.n	800cefa <HAL_GPIO_EXTI_IRQHandler+0xa>
 800cef8:	4770      	bx	lr
{
 800cefa:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cefc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cefe:	f7ff fff5 	bl	800ceec <HAL_GPIO_EXTI_Callback>
}
 800cf02:	bd08      	pop	{r3, pc}
 800cf04:	40013c00 	.word	0x40013c00

0800cf08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf10:	4926      	ldr	r1, [pc, #152]	; (800cfac <I2C_TransferConfig+0xa4>)
{
 800cf12:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf14:	4a26      	ldr	r2, [pc, #152]	; (800cfb0 <I2C_TransferConfig+0xa8>)
{
 800cf16:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf18:	6803      	ldr	r3, [r0, #0]
{
 800cf1a:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	bf18      	it	ne
 800cf20:	428b      	cmpne	r3, r1
 800cf22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf26:	bf14      	ite	ne
 800cf28:	2201      	movne	r2, #1
 800cf2a:	2200      	moveq	r2, #0
 800cf2c:	428b      	cmp	r3, r1
 800cf2e:	bf0c      	ite	eq
 800cf30:	2200      	moveq	r2, #0
 800cf32:	f002 0201 	andne.w	r2, r2, #1
 800cf36:	b112      	cbz	r2, 800cf3e <I2C_TransferConfig+0x36>
 800cf38:	4a1e      	ldr	r2, [pc, #120]	; (800cfb4 <I2C_TransferConfig+0xac>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d123      	bne.n	800cf86 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cf3e:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800cf42:	d002      	beq.n	800cf4a <I2C_TransferConfig+0x42>
 800cf44:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800cf48:	d129      	bne.n	800cf9e <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <I2C_TransferConfig+0xb0>)
 800cf4c:	429f      	cmp	r7, r3
 800cf4e:	d005      	beq.n	800cf5c <I2C_TransferConfig+0x54>
 800cf50:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800cf54:	4a19      	ldr	r2, [pc, #100]	; (800cfbc <I2C_TransferConfig+0xb4>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d000      	beq.n	800cf5c <I2C_TransferConfig+0x54>
 800cf5a:	b9d7      	cbnz	r7, 800cf92 <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf5c:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf60:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf64:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800cf68:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf6c:	4a14      	ldr	r2, [pc, #80]	; (800cfc0 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf6e:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf70:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800cf74:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cf76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800cf7a:	ea27 0702 	bic.w	r7, r7, r2
 800cf7e:	433b      	orrs	r3, r7
 800cf80:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800cf86:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800cf8a:	480e      	ldr	r0, [pc, #56]	; (800cfc4 <I2C_TransferConfig+0xbc>)
 800cf8c:	f7f8 fcca 	bl	8005924 <assert_failed>
 800cf90:	e7d5      	b.n	800cf3e <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800cf92:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800cf96:	480b      	ldr	r0, [pc, #44]	; (800cfc4 <I2C_TransferConfig+0xbc>)
 800cf98:	f7f8 fcc4 	bl	8005924 <assert_failed>
 800cf9c:	e7de      	b.n	800cf5c <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800cf9e:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800cfa2:	4808      	ldr	r0, [pc, #32]	; (800cfc4 <I2C_TransferConfig+0xbc>)
 800cfa4:	f7f8 fcbe 	bl	8005924 <assert_failed>
 800cfa8:	e7cf      	b.n	800cf4a <I2C_TransferConfig+0x42>
 800cfaa:	bf00      	nop
 800cfac:	40005800 	.word	0x40005800
 800cfb0:	40005400 	.word	0x40005400
 800cfb4:	40006000 	.word	0x40006000
 800cfb8:	80004000 	.word	0x80004000
 800cfbc:	80002000 	.word	0x80002000
 800cfc0:	03ff63ff 	.word	0x03ff63ff
 800cfc4:	0802e3b4 	.word	0x0802e3b4

0800cfc8 <I2C_IsErrorOccurred>:
{
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800cfcc:	6803      	ldr	r3, [r0, #0]
{
 800cfce:	460d      	mov	r5, r1
 800cfd0:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800cfd2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cfd4:	f011 0110 	ands.w	r1, r1, #16
 800cfd8:	d045      	beq.n	800d066 <I2C_IsErrorOccurred+0x9e>
 800cfda:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800cfdc:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe0:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800cfe2:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cfe8:	699a      	ldr	r2, [r3, #24]
 800cfea:	0696      	lsls	r6, r2, #26
 800cfec:	f100 808d 	bmi.w	800d10a <I2C_IsErrorOccurred+0x142>
 800cff0:	f1b9 0f00 	cmp.w	r9, #0
 800cff4:	f040 808d 	bne.w	800d112 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800cff8:	1c6a      	adds	r2, r5, #1
 800cffa:	d152      	bne.n	800d0a2 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cffc:	699a      	ldr	r2, [r3, #24]
 800cffe:	0697      	lsls	r7, r2, #26
 800d000:	d5fc      	bpl.n	800cffc <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d002:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800d004:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800d006:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d00a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800d00c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d00e:	05d5      	lsls	r5, r2, #23
 800d010:	d42d      	bmi.n	800d06e <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d012:	0557      	lsls	r7, r2, #21
 800d014:	d53d      	bpl.n	800d092 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d016:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800d01a:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d01e:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d020:	0596      	lsls	r6, r2, #22
 800d022:	d504      	bpl.n	800d02e <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d024:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800d028:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d02c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d02e:	699a      	ldr	r2, [r3, #24]
 800d030:	0790      	lsls	r0, r2, #30
 800d032:	d501      	bpl.n	800d038 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800d034:	2200      	movs	r2, #0
 800d036:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d038:	699a      	ldr	r2, [r3, #24]
 800d03a:	07d2      	lsls	r2, r2, #31
 800d03c:	d524      	bpl.n	800d088 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800d03e:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d040:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800d042:	4835      	ldr	r0, [pc, #212]	; (800d118 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800d044:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800d048:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d04a:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800d04c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800d04e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800d050:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800d054:	4319      	orrs	r1, r3
 800d056:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d058:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d05c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800d060:	4648      	mov	r0, r9
 800d062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800d066:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800d068:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d06a:	05d5      	lsls	r5, r2, #23
 800d06c:	d5d1      	bpl.n	800d012 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d06e:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800d072:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d076:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d078:	0550      	lsls	r0, r2, #21
 800d07a:	d5d1      	bpl.n	800d020 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d07c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800d080:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d084:	61d8      	str	r0, [r3, #28]
 800d086:	e7cb      	b.n	800d020 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d088:	699a      	ldr	r2, [r3, #24]
 800d08a:	f042 0201 	orr.w	r2, r2, #1
 800d08e:	619a      	str	r2, [r3, #24]
 800d090:	e7d5      	b.n	800d03e <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d092:	0595      	lsls	r5, r2, #22
 800d094:	d4c6      	bmi.n	800d024 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800d096:	f1b9 0f00 	cmp.w	r9, #0
 800d09a:	d1c8      	bne.n	800d02e <I2C_IsErrorOccurred+0x66>
}
 800d09c:	4648      	mov	r0, r9
 800d09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0a2:	f7fc f971 	bl	8009388 <HAL_GetTick>
 800d0a6:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d0a8:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0aa:	42a8      	cmp	r0, r5
 800d0ac:	d801      	bhi.n	800d0b2 <I2C_IsErrorOccurred+0xea>
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	d19a      	bne.n	800cfe8 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d0b2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800d0b4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d0b8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800d0ba:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d0bc:	040e      	lsls	r6, r1, #16
 800d0be:	d50d      	bpl.n	800d0dc <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800d0c0:	0441      	lsls	r1, r0, #17
 800d0c2:	d40b      	bmi.n	800d0dc <I2C_IsErrorOccurred+0x114>
 800d0c4:	2a20      	cmp	r2, #32
 800d0c6:	d009      	beq.n	800d0dc <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d0c8:	685a      	ldr	r2, [r3, #4]
 800d0ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0ce:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800d0d0:	f7fc f95a 	bl	8009388 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0d4:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	e000      	b.n	800d0dc <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	699e      	ldr	r6, [r3, #24]
 800d0de:	f016 0620 	ands.w	r6, r6, #32
 800d0e2:	d181      	bne.n	800cfe8 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d0e4:	f7fc f950 	bl	8009388 <HAL_GetTick>
 800d0e8:	1bc0      	subs	r0, r0, r7
 800d0ea:	2819      	cmp	r0, #25
 800d0ec:	d9f5      	bls.n	800d0da <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800d0f0:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800d0f4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0f8:	f043 0320 	orr.w	r3, r3, #32
 800d0fc:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d0fe:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d102:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d104:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800d108:	e7e8      	b.n	800d0dc <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800d10a:	f1b9 0f00 	cmp.w	r9, #0
 800d10e:	f43f af78 	beq.w	800d002 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800d112:	2104      	movs	r1, #4
 800d114:	e7a8      	b.n	800d068 <I2C_IsErrorOccurred+0xa0>
 800d116:	bf00      	nop
 800d118:	fe00e800 	.word	0xfe00e800

0800d11c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	4604      	mov	r4, r0
 800d120:	460d      	mov	r5, r1
 800d122:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d124:	e004      	b.n	800d130 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d126:	f7ff ff4f 	bl	800cfc8 <I2C_IsErrorOccurred>
 800d12a:	b950      	cbnz	r0, 800d142 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800d12c:	1c6a      	adds	r2, r5, #1
 800d12e:	d10a      	bne.n	800d146 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d130:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d132:	4632      	mov	r2, r6
 800d134:	4629      	mov	r1, r5
 800d136:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	079b      	lsls	r3, r3, #30
 800d13c:	d5f3      	bpl.n	800d126 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800d13e:	2000      	movs	r0, #0
}
 800d140:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d142:	2001      	movs	r0, #1
}
 800d144:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d146:	f7fc f91f 	bl	8009388 <HAL_GetTick>
 800d14a:	1b80      	subs	r0, r0, r6
 800d14c:	42a8      	cmp	r0, r5
 800d14e:	d801      	bhi.n	800d154 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800d150:	2d00      	cmp	r5, #0
 800d152:	d1ed      	bne.n	800d130 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d154:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d156:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d158:	2200      	movs	r2, #0
        return HAL_ERROR;
 800d15a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d15c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d15e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d162:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d164:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d168:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	bf00      	nop

0800d170 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	4605      	mov	r5, r0
 800d174:	460c      	mov	r4, r1
 800d176:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d178:	e008      	b.n	800d18c <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d17a:	f7ff ff25 	bl	800cfc8 <I2C_IsErrorOccurred>
 800d17e:	b9d8      	cbnz	r0, 800d1b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d180:	f7fc f902 	bl	8009388 <HAL_GetTick>
 800d184:	1b80      	subs	r0, r0, r6
 800d186:	42a0      	cmp	r0, r4
 800d188:	d809      	bhi.n	800d19e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800d18a:	b144      	cbz	r4, 800d19e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d18c:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d18e:	4632      	mov	r2, r6
 800d190:	4621      	mov	r1, r4
 800d192:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	069b      	lsls	r3, r3, #26
 800d198:	d5ef      	bpl.n	800d17a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800d19a:	2000      	movs	r0, #0
}
 800d19c:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d19e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d1a0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1a2:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d1a4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1a6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d1a8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1ac:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d1ae:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1b2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d1b8:	2001      	movs	r0, #1
}
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}

0800d1bc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1c4:	e00c      	b.n	800d1e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1c6:	f7ff feff 	bl	800cfc8 <I2C_IsErrorOccurred>
 800d1ca:	b9e8      	cbnz	r0, 800d208 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	699a      	ldr	r2, [r3, #24]
 800d1d0:	0691      	lsls	r1, r2, #26
 800d1d2:	d41b      	bmi.n	800d20c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1d4:	f7fc f8d8 	bl	8009388 <HAL_GetTick>
 800d1d8:	1b80      	subs	r0, r0, r6
 800d1da:	42a8      	cmp	r0, r5
 800d1dc:	d809      	bhi.n	800d1f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800d1de:	b145      	cbz	r5, 800d1f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1e0:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1e8:	699b      	ldr	r3, [r3, #24]
 800d1ea:	075b      	lsls	r3, r3, #29
 800d1ec:	d5eb      	bpl.n	800d1c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800d1ee:	2000      	movs	r0, #0
}
 800d1f0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d1f4:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800d1f6:	2100      	movs	r1, #0
      return HAL_ERROR;
 800d1f8:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1fa:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800d1fc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d200:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d202:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800d206:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d208:	2001      	movs	r0, #1
}
 800d20a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d20c:	699a      	ldr	r2, [r3, #24]
 800d20e:	0752      	lsls	r2, r2, #29
 800d210:	d502      	bpl.n	800d218 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800d212:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d214:	2a00      	cmp	r2, #0
 800d216:	d1ea      	bne.n	800d1ee <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d218:	699a      	ldr	r2, [r3, #24]
 800d21a:	f012 0210 	ands.w	r2, r2, #16
 800d21e:	d012      	beq.n	800d246 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d220:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d222:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d224:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d226:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d228:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800d22a:	4808      	ldr	r0, [pc, #32]	; (800d24c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d22c:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d22e:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	4002      	ands	r2, r0
        return HAL_ERROR;
 800d234:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800d236:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d238:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800d23c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d244:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d246:	6462      	str	r2, [r4, #68]	; 0x44
 800d248:	e7ee      	b.n	800d228 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800d24a:	bf00      	nop
 800d24c:	fe00e800 	.word	0xfe00e800

0800d250 <I2C_RequestMemoryRead>:
{
 800d250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d254:	4c26      	ldr	r4, [pc, #152]	; (800d2f0 <I2C_RequestMemoryRead+0xa0>)
{
 800d256:	b083      	sub	sp, #12
 800d258:	4698      	mov	r8, r3
 800d25a:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d25c:	9400      	str	r4, [sp, #0]
{
 800d25e:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d260:	2300      	movs	r3, #0
 800d262:	fa5f f288 	uxtb.w	r2, r8
{
 800d266:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d26a:	f7ff fe4d 	bl	800cf08 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d26e:	4628      	mov	r0, r5
 800d270:	463a      	mov	r2, r7
 800d272:	4621      	mov	r1, r4
 800d274:	f7ff ff52 	bl	800d11c <I2C_WaitOnTXISFlagUntilTimeout>
 800d278:	b9e0      	cbnz	r0, 800d2b4 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d27a:	f1b8 0f01 	cmp.w	r8, #1
 800d27e:	4606      	mov	r6, r0
 800d280:	d10d      	bne.n	800d29e <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d282:	fa5f f389 	uxtb.w	r3, r9
 800d286:	682a      	ldr	r2, [r5, #0]
 800d288:	6293      	str	r3, [r2, #40]	; 0x28
 800d28a:	e001      	b.n	800d290 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800d28c:	1c61      	adds	r1, r4, #1
 800d28e:	d116      	bne.n	800d2be <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d290:	6993      	ldr	r3, [r2, #24]
 800d292:	065b      	lsls	r3, r3, #25
 800d294:	d5fa      	bpl.n	800d28c <I2C_RequestMemoryRead+0x3c>
}
 800d296:	4630      	mov	r0, r6
 800d298:	b003      	add	sp, #12
 800d29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d29e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800d2a2:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d2a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2aa:	463a      	mov	r2, r7
 800d2ac:	f7ff ff36 	bl	800d11c <I2C_WaitOnTXISFlagUntilTimeout>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d0e6      	beq.n	800d282 <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800d2b4:	2601      	movs	r6, #1
}
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	b003      	add	sp, #12
 800d2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2be:	f7fc f863 	bl	8009388 <HAL_GetTick>
 800d2c2:	1bc0      	subs	r0, r0, r7
 800d2c4:	4284      	cmp	r4, r0
 800d2c6:	d302      	bcc.n	800d2ce <I2C_RequestMemoryRead+0x7e>
 800d2c8:	b10c      	cbz	r4, 800d2ce <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2ca:	682a      	ldr	r2, [r5, #0]
 800d2cc:	e7e0      	b.n	800d290 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2d0:	2120      	movs	r1, #32
    return HAL_ERROR;
 800d2d2:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2d6:	430b      	orrs	r3, r1
}
 800d2d8:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800d2da:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2de:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2e0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2e4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d2e8:	b003      	add	sp, #12
 800d2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ee:	bf00      	nop
 800d2f0:	80002000 	.word	0x80002000

0800d2f4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f000 80c1 	beq.w	800d47c <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d2fa:	4b61      	ldr	r3, [pc, #388]	; (800d480 <HAL_I2C_Init+0x18c>)
 800d2fc:	6802      	ldr	r2, [r0, #0]
 800d2fe:	4961      	ldr	r1, [pc, #388]	; (800d484 <HAL_I2C_Init+0x190>)
{
 800d300:	b510      	push	{r4, lr}
 800d302:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d304:	4860      	ldr	r0, [pc, #384]	; (800d488 <HAL_I2C_Init+0x194>)
 800d306:	429a      	cmp	r2, r3
 800d308:	bf18      	it	ne
 800d30a:	4282      	cmpne	r2, r0
 800d30c:	bf14      	ite	ne
 800d30e:	2301      	movne	r3, #1
 800d310:	2300      	moveq	r3, #0
 800d312:	428a      	cmp	r2, r1
 800d314:	bf0c      	ite	eq
 800d316:	2300      	moveq	r3, #0
 800d318:	f003 0301 	andne.w	r3, r3, #1
 800d31c:	b11b      	cbz	r3, 800d326 <HAL_I2C_Init+0x32>
 800d31e:	4b5b      	ldr	r3, [pc, #364]	; (800d48c <HAL_I2C_Init+0x198>)
 800d320:	429a      	cmp	r2, r3
 800d322:	f040 80a5 	bne.w	800d470 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d326:	68a3      	ldr	r3, [r4, #8]
 800d328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d32c:	f080 809a 	bcs.w	800d464 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d330:	68e3      	ldr	r3, [r4, #12]
 800d332:	3b01      	subs	r3, #1
 800d334:	2b01      	cmp	r3, #1
 800d336:	d855      	bhi.n	800d3e4 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d338:	6923      	ldr	r3, [r4, #16]
 800d33a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d33e:	d15a      	bne.n	800d3f6 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d340:	6963      	ldr	r3, [r4, #20]
 800d342:	2bff      	cmp	r3, #255	; 0xff
 800d344:	d85f      	bhi.n	800d406 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d346:	69a3      	ldr	r3, [r4, #24]
 800d348:	2b07      	cmp	r3, #7
 800d34a:	d864      	bhi.n	800d416 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d34c:	69e3      	ldr	r3, [r4, #28]
 800d34e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d352:	d169      	bne.n	800d428 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d354:	6a23      	ldr	r3, [r4, #32]
 800d356:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d35a:	d16e      	bne.n	800d43a <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d35c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d364:	2b00      	cmp	r3, #0
 800d366:	d073      	beq.n	800d450 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800d368:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d36a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d36c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d36e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d372:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d378:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800d37a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d37e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800d380:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d382:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d384:	689a      	ldr	r2, [r3, #8]
 800d386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d38a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d38c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d38e:	d065      	beq.n	800d45c <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d390:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d394:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d396:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d398:	d102      	bne.n	800d3a0 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d39a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d39e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d3a0:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800d3a2:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d3a6:	493a      	ldr	r1, [pc, #232]	; (800d490 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3a8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d3aa:	4301      	orrs	r1, r0
 800d3ac:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d3ae:	68d9      	ldr	r1, [r3, #12]
 800d3b0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800d3b4:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d3b6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3ba:	4302      	orrs	r2, r0
 800d3bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3c0:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3c4:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3c6:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3c8:	4301      	orrs	r1, r0
  return HAL_OK;
 800d3ca:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3cc:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d3ce:	6819      	ldr	r1, [r3, #0]
 800d3d0:	f041 0101 	orr.w	r1, r1, #1
 800d3d4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3d6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d3d8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d3dc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d3e2:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d3e4:	f240 2117 	movw	r1, #535	; 0x217
 800d3e8:	482a      	ldr	r0, [pc, #168]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d3ea:	f7f8 fa9b 	bl	8005924 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d3ee:	6923      	ldr	r3, [r4, #16]
 800d3f0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800d3f4:	d0a4      	beq.n	800d340 <HAL_I2C_Init+0x4c>
 800d3f6:	f44f 7106 	mov.w	r1, #536	; 0x218
 800d3fa:	4826      	ldr	r0, [pc, #152]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d3fc:	f7f8 fa92 	bl	8005924 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d400:	6963      	ldr	r3, [r4, #20]
 800d402:	2bff      	cmp	r3, #255	; 0xff
 800d404:	d99f      	bls.n	800d346 <HAL_I2C_Init+0x52>
 800d406:	f240 2119 	movw	r1, #537	; 0x219
 800d40a:	4822      	ldr	r0, [pc, #136]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d40c:	f7f8 fa8a 	bl	8005924 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d410:	69a3      	ldr	r3, [r4, #24]
 800d412:	2b07      	cmp	r3, #7
 800d414:	d99a      	bls.n	800d34c <HAL_I2C_Init+0x58>
 800d416:	f240 211a 	movw	r1, #538	; 0x21a
 800d41a:	481e      	ldr	r0, [pc, #120]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d41c:	f7f8 fa82 	bl	8005924 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d420:	69e3      	ldr	r3, [r4, #28]
 800d422:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800d426:	d095      	beq.n	800d354 <HAL_I2C_Init+0x60>
 800d428:	f240 211b 	movw	r1, #539	; 0x21b
 800d42c:	4819      	ldr	r0, [pc, #100]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d42e:	f7f8 fa79 	bl	8005924 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d432:	6a23      	ldr	r3, [r4, #32]
 800d434:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800d438:	d090      	beq.n	800d35c <HAL_I2C_Init+0x68>
 800d43a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800d43e:	4815      	ldr	r0, [pc, #84]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d440:	f7f8 fa70 	bl	8005924 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d444:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d448:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d18b      	bne.n	800d368 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800d450:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800d452:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d456:	f7fa f8dd 	bl	8007614 <HAL_I2C_MspInit>
 800d45a:	e785      	b.n	800d368 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d45c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d460:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d462:	e79d      	b.n	800d3a0 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d464:	f240 2116 	movw	r1, #534	; 0x216
 800d468:	480a      	ldr	r0, [pc, #40]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d46a:	f7f8 fa5b 	bl	8005924 <assert_failed>
 800d46e:	e75f      	b.n	800d330 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d470:	f240 2115 	movw	r1, #533	; 0x215
 800d474:	4807      	ldr	r0, [pc, #28]	; (800d494 <HAL_I2C_Init+0x1a0>)
 800d476:	f7f8 fa55 	bl	8005924 <assert_failed>
 800d47a:	e754      	b.n	800d326 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800d47c:	2001      	movs	r0, #1
}
 800d47e:	4770      	bx	lr
 800d480:	40005400 	.word	0x40005400
 800d484:	40005c00 	.word	0x40005c00
 800d488:	40005800 	.word	0x40005800
 800d48c:	40006000 	.word	0x40006000
 800d490:	02008000 	.word	0x02008000
 800d494:	0802e3b4 	.word	0x0802e3b4

0800d498 <HAL_I2C_Master_Transmit>:
{
 800d498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d49c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d49e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d4a2:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4a4:	2b20      	cmp	r3, #32
{
 800d4a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4a8:	d16d      	bne.n	800d586 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800d4aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d068      	beq.n	800d586 <HAL_I2C_Master_Transmit+0xee>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	460f      	mov	r7, r1
 800d4b8:	4691      	mov	r9, r2
 800d4ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d4be:	f7fb ff63 	bl	8009388 <HAL_GetTick>
 800d4c2:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4c4:	e004      	b.n	800d4d0 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4c6:	f7fb ff5f 	bl	8009388 <HAL_GetTick>
 800d4ca:	1b80      	subs	r0, r0, r6
 800d4cc:	2819      	cmp	r0, #25
 800d4ce:	d85e      	bhi.n	800d58e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	6999      	ldr	r1, [r3, #24]
 800d4d4:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d4d8:	d1f5      	bne.n	800d4c6 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d4da:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800d4dc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d4e0:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d4e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d4e6:	2310      	movs	r3, #16
 800d4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4ec:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d4ee:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	2bff      	cmp	r3, #255	; 0xff
 800d4f8:	d86d      	bhi.n	800d5d6 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800d4fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	4b48      	ldr	r3, [pc, #288]	; (800d620 <HAL_I2C_Master_Transmit+0x188>)
 800d500:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d502:	b292      	uxth	r2, r2
 800d504:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d506:	b2d2      	uxtb	r2, r2
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d50e:	f7ff fcfb 	bl	800cf08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d512:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d516:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d51a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d51c:	4632      	mov	r2, r6
 800d51e:	4629      	mov	r1, r5
 800d520:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d522:	b29b      	uxth	r3, r3
 800d524:	b1eb      	cbz	r3, 800d562 <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d526:	f7ff fdf9 	bl	800d11c <I2C_WaitOnTXISFlagUntilTimeout>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d174      	bne.n	800d618 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d52e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d530:	6821      	ldr	r1, [r4, #0]
 800d532:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d536:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d538:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d53a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d53c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d53e:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d540:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d542:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d544:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d546:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d548:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d54a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d54c:	b292      	uxth	r2, r2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e3      	bne.n	800d51a <HAL_I2C_Master_Transmit+0x82>
 800d552:	bb6a      	cbnz	r2, 800d5b0 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800d554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d556:	4632      	mov	r2, r6
 800d558:	4629      	mov	r1, r5
 800d55a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1e1      	bne.n	800d526 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d562:	f7ff fe05 	bl	800d170 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d566:	2800      	cmp	r0, #0
 800d568:	d156      	bne.n	800d618 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d56e:	4d2d      	ldr	r5, [pc, #180]	; (800d624 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d570:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d572:	685a      	ldr	r2, [r3, #4]
 800d574:	402a      	ands	r2, r5
 800d576:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d578:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d57c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d580:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d584:	e000      	b.n	800d588 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800d586:	2002      	movs	r0, #2
}
 800d588:	b003      	add	sp, #12
 800d58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d58e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d590:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d592:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d594:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d596:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d598:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d59c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d59e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d5a6:	b003      	add	sp, #12
 800d5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800d5ac:	1c6a      	adds	r2, r5, #1
 800d5ae:	d11d      	bne.n	800d5ec <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5b0:	698b      	ldr	r3, [r1, #24]
 800d5b2:	061b      	lsls	r3, r3, #24
 800d5b4:	d5fa      	bpl.n	800d5ac <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	2bff      	cmp	r3, #255	; 0xff
 800d5bc:	d91f      	bls.n	800d5fe <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5be:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5c6:	22ff      	movs	r2, #255	; 0xff
 800d5c8:	4639      	mov	r1, r7
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f8cd 8000 	str.w	r8, [sp]
 800d5d0:	f7ff fc9a 	bl	800cf08 <I2C_TransferConfig>
 800d5d4:	e7a1      	b.n	800d51a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5d8:	4b11      	ldr	r3, [pc, #68]	; (800d620 <HAL_I2C_Master_Transmit+0x188>)
 800d5da:	4639      	mov	r1, r7
 800d5dc:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5e6:	f7ff fc8f 	bl	800cf08 <I2C_TransferConfig>
 800d5ea:	e792      	b.n	800d512 <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ec:	f7fb fecc 	bl	8009388 <HAL_GetTick>
 800d5f0:	1b80      	subs	r0, r0, r6
 800d5f2:	4285      	cmp	r5, r0
 800d5f4:	d3cb      	bcc.n	800d58e <HAL_I2C_Master_Transmit+0xf6>
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	d0c9      	beq.n	800d58e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5fa:	6821      	ldr	r1, [r4, #0]
 800d5fc:	e7d8      	b.n	800d5b0 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d5fe:	f8cd 8000 	str.w	r8, [sp]
 800d602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d606:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d608:	4639      	mov	r1, r7
 800d60a:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d60c:	b292      	uxth	r2, r2
 800d60e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d610:	b2d2      	uxtb	r2, r2
 800d612:	f7ff fc79 	bl	800cf08 <I2C_TransferConfig>
 800d616:	e780      	b.n	800d51a <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800d618:	2001      	movs	r0, #1
}
 800d61a:	b003      	add	sp, #12
 800d61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d620:	80002000 	.word	0x80002000
 800d624:	fe00e800 	.word	0xfe00e800

0800d628 <HAL_I2C_Master_Receive>:
{
 800d628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d62c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d62e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d632:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d634:	2b20      	cmp	r3, #32
{
 800d636:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d638:	f040 8088 	bne.w	800d74c <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800d63c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d640:	4604      	mov	r4, r0
 800d642:	2b01      	cmp	r3, #1
 800d644:	f000 8082 	beq.w	800d74c <HAL_I2C_Master_Receive+0x124>
 800d648:	2301      	movs	r3, #1
 800d64a:	460f      	mov	r7, r1
 800d64c:	4691      	mov	r9, r2
 800d64e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d652:	f7fb fe99 	bl	8009388 <HAL_GetTick>
 800d656:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d658:	e004      	b.n	800d664 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d65a:	f7fb fe95 	bl	8009388 <HAL_GetTick>
 800d65e:	1b80      	subs	r0, r0, r6
 800d660:	2819      	cmp	r0, #25
 800d662:	d87e      	bhi.n	800d762 <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	6999      	ldr	r1, [r3, #24]
 800d668:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800d66c:	d1f5      	bne.n	800d65a <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d66e:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800d670:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800d674:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d67a:	2310      	movs	r3, #16
 800d67c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d680:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d682:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d688:	b29b      	uxth	r3, r3
 800d68a:	2bff      	cmp	r3, #255	; 0xff
 800d68c:	d878      	bhi.n	800d780 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800d68e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d690:	4639      	mov	r1, r7
 800d692:	4b49      	ldr	r3, [pc, #292]	; (800d7b8 <HAL_I2C_Master_Receive+0x190>)
 800d694:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800d696:	b292      	uxth	r2, r2
 800d698:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d69a:	b2d2      	uxtb	r2, r2
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6a2:	f7ff fc31 	bl	800cf08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d6a6:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6aa:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800d6ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6b0:	4632      	mov	r2, r6
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d035      	beq.n	800d728 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6bc:	f7ff fd7e 	bl	800d1bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d175      	bne.n	800d7b0 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d6c4:	6822      	ldr	r2, [r4, #0]
 800d6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d6ca:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d6cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d6ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d6d0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d6d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d6d4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d6d6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d6d8:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d6da:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d6dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d6e0:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6e2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d6e4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e1      	bne.n	800d6ae <HAL_I2C_Master_Receive+0x86>
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d0df      	beq.n	800d6ae <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6ee:	6822      	ldr	r2, [r4, #0]
 800d6f0:	e001      	b.n	800d6f6 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800d6f2:	1c69      	adds	r1, r5, #1
 800d6f4:	d12e      	bne.n	800d754 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6f6:	6993      	ldr	r3, [r2, #24]
 800d6f8:	061b      	lsls	r3, r3, #24
 800d6fa:	d5fa      	bpl.n	800d6f2 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	2bff      	cmp	r3, #255	; 0xff
 800d702:	d948      	bls.n	800d796 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d708:	22ff      	movs	r2, #255	; 0xff
 800d70a:	4639      	mov	r1, r7
 800d70c:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d70e:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d712:	f8cd 8000 	str.w	r8, [sp]
 800d716:	f7ff fbf7 	bl	800cf08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d71a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d71c:	4632      	mov	r2, r6
 800d71e:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800d720:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d722:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1c9      	bne.n	800d6bc <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d728:	f7ff fd22 	bl	800d170 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d13f      	bne.n	800d7b0 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d734:	4d21      	ldr	r5, [pc, #132]	; (800d7bc <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d736:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d738:	685a      	ldr	r2, [r3, #4]
 800d73a:	402a      	ands	r2, r5
 800d73c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d73e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d742:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d746:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d74a:	e000      	b.n	800d74e <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800d74c:	2002      	movs	r0, #2
}
 800d74e:	b003      	add	sp, #12
 800d750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d754:	f7fb fe18 	bl	8009388 <HAL_GetTick>
 800d758:	1b80      	subs	r0, r0, r6
 800d75a:	4285      	cmp	r5, r0
 800d75c:	d301      	bcc.n	800d762 <HAL_I2C_Master_Receive+0x13a>
 800d75e:	2d00      	cmp	r5, #0
 800d760:	d1c5      	bne.n	800d6ee <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d762:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d764:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d766:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d768:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d76a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d76c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d770:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d772:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d776:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d77a:	b003      	add	sp, #12
 800d77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d780:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d782:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <HAL_I2C_Master_Receive+0x190>)
 800d784:	4639      	mov	r1, r7
 800d786:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d788:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d790:	f7ff fbba 	bl	800cf08 <I2C_TransferConfig>
 800d794:	e787      	b.n	800d6a6 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d796:	f8cd 8000 	str.w	r8, [sp]
 800d79a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d79e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	f7ff fbad 	bl	800cf08 <I2C_TransferConfig>
 800d7ae:	e77e      	b.n	800d6ae <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800d7b0:	2001      	movs	r0, #1
}
 800d7b2:	b003      	add	sp, #12
 800d7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7b8:	80002400 	.word	0x80002400
 800d7bc:	fe00e800 	.word	0xfe00e800

0800d7c0 <HAL_I2C_Mem_Read>:
{
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7c6:	3b01      	subs	r3, #1
{
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7cc:	2b01      	cmp	r3, #1
{
 800d7ce:	4688      	mov	r8, r1
 800d7d0:	4691      	mov	r9, r2
 800d7d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d7d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800d7d8:	d904      	bls.n	800d7e4 <HAL_I2C_Mem_Read+0x24>
 800d7da:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800d7de:	486e      	ldr	r0, [pc, #440]	; (800d998 <HAL_I2C_Mem_Read+0x1d8>)
 800d7e0:	f7f8 f8a0 	bl	8005924 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7e4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800d7e8:	2b20      	cmp	r3, #32
 800d7ea:	d17f      	bne.n	800d8ec <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800d7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d075      	beq.n	800d8de <HAL_I2C_Mem_Read+0x11e>
 800d7f2:	f1ba 0f00 	cmp.w	sl, #0
 800d7f6:	d072      	beq.n	800d8de <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800d7f8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d075      	beq.n	800d8ec <HAL_I2C_Mem_Read+0x12c>
 800d800:	2301      	movs	r3, #1
 800d802:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d806:	f7fb fdbf 	bl	8009388 <HAL_GetTick>
 800d80a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d80c:	e004      	b.n	800d818 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d80e:	f7fb fdbb 	bl	8009388 <HAL_GetTick>
 800d812:	1b80      	subs	r0, r0, r6
 800d814:	2819      	cmp	r0, #25
 800d816:	d874      	bhi.n	800d902 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d818:	682b      	ldr	r3, [r5, #0]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800d820:	d1f5      	bne.n	800d80e <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800d822:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d824:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800d826:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d82a:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800d82c:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d82e:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d830:	4628      	mov	r0, r5
 800d832:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d836:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d83a:	2140      	movs	r1, #64	; 0x40
 800d83c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d840:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d842:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800d846:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d84a:	f7ff fd01 	bl	800d250 <I2C_RequestMemoryRead>
 800d84e:	2800      	cmp	r0, #0
 800d850:	f040 8083 	bne.w	800d95a <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d854:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d856:	b29b      	uxth	r3, r3
 800d858:	2bff      	cmp	r3, #255	; 0xff
 800d85a:	f240 808e 	bls.w	800d97a <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d85e:	4b4f      	ldr	r3, [pc, #316]	; (800d99c <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d860:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d862:	4641      	mov	r1, r8
 800d864:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d866:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d86e:	f7ff fb4b 	bl	800cf08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d872:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d874:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d878:	682a      	ldr	r2, [r5, #0]
 800d87a:	e001      	b.n	800d880 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800d87c:	1c63      	adds	r3, r4, #1
 800d87e:	d139      	bne.n	800d8f4 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d880:	6993      	ldr	r3, [r2, #24]
 800d882:	0758      	lsls	r0, r3, #29
 800d884:	d5fa      	bpl.n	800d87c <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d888:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d88a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d88c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800d88e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800d890:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800d892:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800d894:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800d896:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800d898:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800d89a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d89c:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d89e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d8a0:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d8a2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d8a4:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d8a6:	b90b      	cbnz	r3, 800d8ac <HAL_I2C_Mem_Read+0xec>
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	d140      	bne.n	800d92e <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800d8ac:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e1      	bne.n	800d878 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f7ff fc59 	bl	800d170 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d168      	bne.n	800d994 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8c2:	682b      	ldr	r3, [r5, #0]
 800d8c4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d8c6:	4c36      	ldr	r4, [pc, #216]	; (800d9a0 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	4022      	ands	r2, r4
 800d8ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d8d0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d8d4:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d8d8:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800d8dc:	e003      	b.n	800d8e6 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d8de:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d8e2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d8e4:	646b      	str	r3, [r5, #68]	; 0x44
}
 800d8e6:	b003      	add	sp, #12
 800d8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800d8ec:	2002      	movs	r0, #2
}
 800d8ee:	b003      	add	sp, #12
 800d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8f4:	f7fb fd48 	bl	8009388 <HAL_GetTick>
 800d8f8:	1b80      	subs	r0, r0, r6
 800d8fa:	4284      	cmp	r4, r0
 800d8fc:	d301      	bcc.n	800d902 <HAL_I2C_Mem_Read+0x142>
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	d1ba      	bne.n	800d878 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d902:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d904:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d906:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d908:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d90a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d90c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d910:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d912:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d916:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d91a:	b003      	add	sp, #12
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d920:	f7fb fd32 	bl	8009388 <HAL_GetTick>
 800d924:	1b80      	subs	r0, r0, r6
 800d926:	4284      	cmp	r4, r0
 800d928:	d3eb      	bcc.n	800d902 <HAL_I2C_Mem_Read+0x142>
 800d92a:	2c00      	cmp	r4, #0
 800d92c:	d0e9      	beq.n	800d902 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d92e:	682a      	ldr	r2, [r5, #0]
 800d930:	e001      	b.n	800d936 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800d932:	1c61      	adds	r1, r4, #1
 800d934:	d1f4      	bne.n	800d920 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d936:	6993      	ldr	r3, [r2, #24]
 800d938:	061b      	lsls	r3, r3, #24
 800d93a:	d5fa      	bpl.n	800d932 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d93c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2bff      	cmp	r3, #255	; 0xff
 800d942:	d90e      	bls.n	800d962 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d944:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d94c:	22ff      	movs	r2, #255	; 0xff
 800d94e:	4641      	mov	r1, r8
 800d950:	4628      	mov	r0, r5
 800d952:	9700      	str	r7, [sp, #0]
 800d954:	f7ff fad8 	bl	800cf08 <I2C_TransferConfig>
 800d958:	e7a8      	b.n	800d8ac <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800d95a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d95c:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800d960:	e7c1      	b.n	800d8e6 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d962:	9700      	str	r7, [sp, #0]
 800d964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800d968:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d96a:	4641      	mov	r1, r8
 800d96c:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800d96e:	b292      	uxth	r2, r2
 800d970:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d972:	b2d2      	uxtb	r2, r2
 800d974:	f7ff fac8 	bl	800cf08 <I2C_TransferConfig>
 800d978:	e798      	b.n	800d8ac <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800d97a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d97c:	4641      	mov	r1, r8
 800d97e:	4b07      	ldr	r3, [pc, #28]	; (800d99c <HAL_I2C_Mem_Read+0x1dc>)
 800d980:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800d982:	b292      	uxth	r2, r2
 800d984:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d98e:	f7ff fabb 	bl	800cf08 <I2C_TransferConfig>
 800d992:	e76e      	b.n	800d872 <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800d994:	2001      	movs	r0, #1
 800d996:	e7a6      	b.n	800d8e6 <HAL_I2C_Mem_Read+0x126>
 800d998:	0802e3b4 	.word	0x0802e3b4
 800d99c:	80002400 	.word	0x80002400
 800d9a0:	fe00e800 	.word	0xfe00e800

0800d9a4 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9a4:	4b23      	ldr	r3, [pc, #140]	; (800da34 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800d9a6:	6802      	ldr	r2, [r0, #0]
{
 800d9a8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9aa:	4d23      	ldr	r5, [pc, #140]	; (800da38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800d9ac:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9ae:	4e23      	ldr	r6, [pc, #140]	; (800da3c <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	bf18      	it	ne
 800d9b4:	42aa      	cmpne	r2, r5
{
 800d9b6:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d9b8:	bf14      	ite	ne
 800d9ba:	2301      	movne	r3, #1
 800d9bc:	2300      	moveq	r3, #0
 800d9be:	42b2      	cmp	r2, r6
 800d9c0:	bf0c      	ite	eq
 800d9c2:	2300      	moveq	r3, #0
 800d9c4:	f003 0301 	andne.w	r3, r3, #1
 800d9c8:	b113      	cbz	r3, 800d9d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800d9ca:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d12c      	bne.n	800da2a <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800d9d0:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800d9d4:	d124      	bne.n	800da20 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d9da:	2b20      	cmp	r3, #32
 800d9dc:	b2de      	uxtb	r6, r3
 800d9de:	d11d      	bne.n	800da1c <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d019      	beq.n	800da1c <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9e8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9ea:	2224      	movs	r2, #36	; 0x24
 800d9ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	f022 0201 	bic.w	r2, r2, #1
 800d9f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da00:	6819      	ldr	r1, [r3, #0]
 800da02:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da04:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800da06:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800da08:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	f042 0201 	orr.w	r2, r2, #1
 800da10:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800da12:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800da16:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800da1c:	2002      	movs	r0, #2
}
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800da20:	215f      	movs	r1, #95	; 0x5f
 800da22:	4808      	ldr	r0, [pc, #32]	; (800da44 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800da24:	f7f7 ff7e 	bl	8005924 <assert_failed>
 800da28:	e7d5      	b.n	800d9d6 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da2a:	215e      	movs	r1, #94	; 0x5e
 800da2c:	4805      	ldr	r0, [pc, #20]	; (800da44 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800da2e:	f7f7 ff79 	bl	8005924 <assert_failed>
 800da32:	e7cd      	b.n	800d9d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800da34:	40005400 	.word	0x40005400
 800da38:	40005800 	.word	0x40005800
 800da3c:	40005c00 	.word	0x40005c00
 800da40:	40006000 	.word	0x40006000
 800da44:	0802e3ec 	.word	0x0802e3ec

0800da48 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da48:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800da4a:	6802      	ldr	r2, [r0, #0]
{
 800da4c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da4e:	4d22      	ldr	r5, [pc, #136]	; (800dad8 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800da50:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da52:	4e22      	ldr	r6, [pc, #136]	; (800dadc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800da54:	429a      	cmp	r2, r3
 800da56:	bf18      	it	ne
 800da58:	42aa      	cmpne	r2, r5
{
 800da5a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800da5c:	bf14      	ite	ne
 800da5e:	2301      	movne	r3, #1
 800da60:	2300      	moveq	r3, #0
 800da62:	42b2      	cmp	r2, r6
 800da64:	bf0c      	ite	eq
 800da66:	2300      	moveq	r3, #0
 800da68:	f003 0301 	andne.w	r3, r3, #1
 800da6c:	b113      	cbz	r3, 800da74 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800da6e:	4b1c      	ldr	r3, [pc, #112]	; (800dae0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800da70:	429a      	cmp	r2, r3
 800da72:	d12a      	bne.n	800daca <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800da74:	2d0f      	cmp	r5, #15
 800da76:	d823      	bhi.n	800dac0 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800da7c:	2b20      	cmp	r3, #32
 800da7e:	b2de      	uxtb	r6, r3
 800da80:	d11c      	bne.n	800dabc <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da82:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800da86:	2b01      	cmp	r3, #1
 800da88:	d018      	beq.n	800dabc <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da8a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800da8c:	2224      	movs	r2, #36	; 0x24
 800da8e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	f022 0201 	bic.w	r2, r2, #1
 800da98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da9a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da9c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800daa0:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daa4:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800daa6:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800daa8:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	f042 0201 	orr.w	r2, r2, #1
 800dab0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800dab2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dab6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800daba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800dabc:	2002      	movs	r0, #2
}
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800dac0:	218d      	movs	r1, #141	; 0x8d
 800dac2:	4808      	ldr	r0, [pc, #32]	; (800dae4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800dac4:	f7f7 ff2e 	bl	8005924 <assert_failed>
 800dac8:	e7d6      	b.n	800da78 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800daca:	218c      	movs	r1, #140	; 0x8c
 800dacc:	4805      	ldr	r0, [pc, #20]	; (800dae4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800dace:	f7f7 ff29 	bl	8005924 <assert_failed>
 800dad2:	e7cf      	b.n	800da74 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800dad4:	40005400 	.word	0x40005400
 800dad8:	40005800 	.word	0x40005800
 800dadc:	40005c00 	.word	0x40005c00
 800dae0:	40006000 	.word	0x40006000
 800dae4:	0802e3ec 	.word	0x0802e3ec

0800dae8 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800dae8:	2800      	cmp	r0, #0
 800daea:	d04c      	beq.n	800db86 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800daec:	6802      	ldr	r2, [r0, #0]
{
 800daee:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800daf0:	4b26      	ldr	r3, [pc, #152]	; (800db8c <HAL_IWDG_Init+0xa4>)
 800daf2:	4604      	mov	r4, r0
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d003      	beq.n	800db00 <HAL_IWDG_Init+0x18>
 800daf8:	21b5      	movs	r1, #181	; 0xb5
 800dafa:	4825      	ldr	r0, [pc, #148]	; (800db90 <HAL_IWDG_Init+0xa8>)
 800dafc:	f7f7 ff12 	bl	8005924 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800db00:	6863      	ldr	r3, [r4, #4]
 800db02:	2b06      	cmp	r3, #6
 800db04:	d835      	bhi.n	800db72 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db0c:	d22c      	bcs.n	800db68 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800db0e:	68e3      	ldr	r3, [r4, #12]
 800db10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db14:	d223      	bcs.n	800db5e <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800db16:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800db1a:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800db1c:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800db20:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800db22:	f245 5055 	movw	r0, #21845	; 0x5555
 800db26:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800db28:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800db2a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800db2c:	f7fb fc2c 	bl	8009388 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db30:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800db32:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	0751      	lsls	r1, r2, #29
 800db38:	d00a      	beq.n	800db50 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800db3a:	f7fb fc25 	bl	8009388 <HAL_GetTick>
 800db3e:	1b43      	subs	r3, r0, r5
 800db40:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db42:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800db44:	d9f6      	bls.n	800db34 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800db46:	68da      	ldr	r2, [r3, #12]
 800db48:	0752      	lsls	r2, r2, #29
 800db4a:	d0f3      	beq.n	800db34 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800db4c:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800db50:	6919      	ldr	r1, [r3, #16]
 800db52:	68e2      	ldr	r2, [r4, #12]
 800db54:	4291      	cmp	r1, r2
 800db56:	d011      	beq.n	800db7c <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800db58:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800db5a:	611a      	str	r2, [r3, #16]
}
 800db5c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800db5e:	21b8      	movs	r1, #184	; 0xb8
 800db60:	480b      	ldr	r0, [pc, #44]	; (800db90 <HAL_IWDG_Init+0xa8>)
 800db62:	f7f7 fedf 	bl	8005924 <assert_failed>
 800db66:	e7d6      	b.n	800db16 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800db68:	21b7      	movs	r1, #183	; 0xb7
 800db6a:	4809      	ldr	r0, [pc, #36]	; (800db90 <HAL_IWDG_Init+0xa8>)
 800db6c:	f7f7 feda 	bl	8005924 <assert_failed>
 800db70:	e7cd      	b.n	800db0e <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800db72:	21b6      	movs	r1, #182	; 0xb6
 800db74:	4806      	ldr	r0, [pc, #24]	; (800db90 <HAL_IWDG_Init+0xa8>)
 800db76:	f7f7 fed5 	bl	8005924 <assert_failed>
 800db7a:	e7c4      	b.n	800db06 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db7c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800db80:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db82:	601a      	str	r2, [r3, #0]
}
 800db84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db86:	2001      	movs	r0, #1
}
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	40003000 	.word	0x40003000
 800db90:	0802e428 	.word	0x0802e428

0800db94 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800db94:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db96:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800db9a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	601a      	str	r2, [r3, #0]
}
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop

0800dba4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f000 809d 	beq.w	800dce8 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800dbae:	6804      	ldr	r4, [r0, #0]
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800dbb6:	d003      	beq.n	800dbc0 <HAL_PCD_Init+0x1c>
 800dbb8:	4b4f      	ldr	r3, [pc, #316]	; (800dcf8 <HAL_PCD_Init+0x154>)
 800dbba:	429c      	cmp	r4, r3
 800dbbc:	f040 8081 	bne.w	800dcc2 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dbc0:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800dbc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 8086 	beq.w	800dcda <HAL_PCD_Init+0x136>
 800dbce:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbd0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbd2:	462e      	mov	r6, r5
 800dbd4:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbd6:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dbda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbdc:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dbde:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800dbe2:	bf08      	it	eq
 800dbe4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800dbe6:	f006 fe87 	bl	80148f8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbea:	f856 eb10 	ldr.w	lr, [r6], #16
 800dbee:	46b4      	mov	ip, r6
 800dbf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbfc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800dc00:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc04:	4670      	mov	r0, lr
 800dc06:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dc0a:	f006 fdb5 	bl	8014778 <USB_CoreInit>
 800dc0e:	4604      	mov	r4, r0
 800dc10:	b130      	cbz	r0, 800dc20 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800dc12:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dc14:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800dc16:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dc18:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800dc1c:	b00b      	add	sp, #44	; 0x2c
 800dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800dc20:	4601      	mov	r1, r0
 800dc22:	6828      	ldr	r0, [r5, #0]
 800dc24:	f006 fe70 	bl	8014908 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc28:	6868      	ldr	r0, [r5, #4]
 800dc2a:	b358      	cbz	r0, 800dc84 <HAL_PCD_Init+0xe0>
 800dc2c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dc2e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc32:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800dc34:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc38:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800dc3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800dc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dc44:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc48:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800dc4c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc50:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc52:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc56:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc58:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc5c:	d3ea      	bcc.n	800dc34 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800dc5e:	2200      	movs	r2, #0
 800dc60:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc64:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800dc66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800dc6a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc6e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800dc70:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc74:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dc76:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dc7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dc7e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc82:	d3ed      	bcc.n	800dc60 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dc84:	466c      	mov	r4, sp
 800dc86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc8e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dc92:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc96:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dc9a:	6828      	ldr	r0, [r5, #0]
 800dc9c:	f006 feb8 	bl	8014a10 <USB_DevInit>
 800dca0:	4604      	mov	r4, r0
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d1b5      	bne.n	800dc12 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800dca6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800dca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800dcaa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800dcae:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800dcb0:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800dcb4:	d01c      	beq.n	800dcf0 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800dcb6:	6828      	ldr	r0, [r5, #0]
 800dcb8:	f007 fa72 	bl	80151a0 <USB_DevDisconnect>
}
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	b00b      	add	sp, #44	; 0x2c
 800dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800dcc2:	2187      	movs	r1, #135	; 0x87
 800dcc4:	480d      	ldr	r0, [pc, #52]	; (800dcfc <HAL_PCD_Init+0x158>)
 800dcc6:	f7f7 fe2d 	bl	8005924 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dcca:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800dcce:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dcd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f47f af7a 	bne.w	800dbce <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800dcda:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800dcdc:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800dce0:	f017 f974 	bl	8024fcc <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800dce4:	6828      	ldr	r0, [r5, #0]
 800dce6:	e773      	b.n	800dbd0 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800dce8:	2401      	movs	r4, #1
}
 800dcea:	4620      	mov	r0, r4
 800dcec:	b00b      	add	sp, #44	; 0x2c
 800dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f000 fcc7 	bl	800e684 <HAL_PCDEx_ActivateLPM>
 800dcf6:	e7de      	b.n	800dcb6 <HAL_PCD_Init+0x112>
 800dcf8:	40040000 	.word	0x40040000
 800dcfc:	0802e464 	.word	0x0802e464

0800dd00 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800dd00:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d00f      	beq.n	800dd28 <HAL_PCD_Start+0x28>
 800dd08:	2301      	movs	r3, #1
{
 800dd0a:	b510      	push	{r4, lr}
 800dd0c:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800dd0e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800dd10:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800dd14:	f006 fde8 	bl	80148e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dd18:	6820      	ldr	r0, [r4, #0]
 800dd1a:	f007 fa31 	bl	8015180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd1e:	2300      	movs	r3, #0

  return HAL_OK;
 800dd20:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800dd22:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800dd26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800dd28:	2002      	movs	r0, #2
}
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd30:	6807      	ldr	r7, [r0, #0]
{
 800dd32:	b089      	sub	sp, #36	; 0x24
 800dd34:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800dd36:	4638      	mov	r0, r7
 800dd38:	f007 fa70 	bl	801521c <USB_GetMode>
 800dd3c:	b110      	cbz	r0, 800dd44 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800dd3e:	b009      	add	sp, #36	; 0x24
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800dd44:	4683      	mov	fp, r0
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	f007 fa3a 	bl	80151c0 <USB_ReadInterrupts>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d0f6      	beq.n	800dd3e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	f007 fa35 	bl	80151c0 <USB_ReadInterrupts>
 800dd56:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dd5a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800dd5c:	d003      	beq.n	800dd66 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800dd5e:	6943      	ldr	r3, [r0, #20]
 800dd60:	f003 0302 	and.w	r3, r3, #2
 800dd64:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dd66:	f007 fa2b 	bl	80151c0 <USB_ReadInterrupts>
 800dd6a:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd6e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800dd70:	d012      	beq.n	800dd98 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd72:	6983      	ldr	r3, [r0, #24]
 800dd74:	f023 0310 	bic.w	r3, r3, #16
 800dd78:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800dd7a:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dd7c:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800dd80:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	f000 8253 	beq.w	800e230 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800dd8a:	2b06      	cmp	r3, #6
 800dd8c:	f000 81b1 	beq.w	800e0f2 <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dd90:	6983      	ldr	r3, [r0, #24]
 800dd92:	f043 0310 	orr.w	r3, r3, #16
 800dd96:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dd98:	f007 fa12 	bl	80151c0 <USB_ReadInterrupts>
 800dd9c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800dda0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800dda2:	f040 80cf 	bne.w	800df44 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dda6:	f007 fa0b 	bl	80151c0 <USB_ReadInterrupts>
 800ddaa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ddae:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ddb0:	d175      	bne.n	800de9e <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ddb2:	f007 fa05 	bl	80151c0 <USB_ReadInterrupts>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	db5d      	blt.n	800de76 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ddba:	6820      	ldr	r0, [r4, #0]
 800ddbc:	f007 fa00 	bl	80151c0 <USB_ReadInterrupts>
 800ddc0:	0500      	lsls	r0, r0, #20
 800ddc2:	d44d      	bmi.n	800de60 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ddc4:	6820      	ldr	r0, [r4, #0]
 800ddc6:	f007 f9fb 	bl	80151c0 <USB_ReadInterrupts>
 800ddca:	0102      	lsls	r2, r0, #4
 800ddcc:	d514      	bpl.n	800ddf8 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ddce:	6822      	ldr	r2, [r4, #0]
 800ddd0:	6953      	ldr	r3, [r2, #20]
 800ddd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800ddd8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f040 8172 	bne.w	800e0c6 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800dde2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dde4:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800dde6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ddea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ddec:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800ddf0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ddf4:	f017 fa58 	bl	80252a8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ddf8:	6820      	ldr	r0, [r4, #0]
 800ddfa:	f007 f9e1 	bl	80151c0 <USB_ReadInterrupts>
 800ddfe:	04c3      	lsls	r3, r0, #19
 800de00:	f100 8116 	bmi.w	800e030 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	f007 f9db 	bl	80151c0 <USB_ReadInterrupts>
 800de0a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800de0e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800de10:	f040 80f7 	bne.w	800e002 <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800de14:	f007 f9d4 	bl	80151c0 <USB_ReadInterrupts>
 800de18:	0707      	lsls	r7, r0, #28
 800de1a:	f100 80e9 	bmi.w	800dff0 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800de1e:	6820      	ldr	r0, [r4, #0]
 800de20:	f007 f9ce 	bl	80151c0 <USB_ReadInterrupts>
 800de24:	02c6      	lsls	r6, r0, #11
 800de26:	f100 80d9 	bmi.w	800dfdc <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800de2a:	6820      	ldr	r0, [r4, #0]
 800de2c:	f007 f9c8 	bl	80151c0 <USB_ReadInterrupts>
 800de30:	0285      	lsls	r5, r0, #10
 800de32:	f100 80c9 	bmi.w	800dfc8 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800de36:	6820      	ldr	r0, [r4, #0]
 800de38:	f007 f9c2 	bl	80151c0 <USB_ReadInterrupts>
 800de3c:	0040      	lsls	r0, r0, #1
 800de3e:	f100 80ba 	bmi.w	800dfb6 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800de42:	6820      	ldr	r0, [r4, #0]
 800de44:	f007 f9bc 	bl	80151c0 <USB_ReadInterrupts>
 800de48:	0741      	lsls	r1, r0, #29
 800de4a:	f57f af78 	bpl.w	800dd3e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800de52:	076a      	lsls	r2, r5, #29
 800de54:	f100 820d 	bmi.w	800e272 <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	432a      	orrs	r2, r5
 800de5c:	605a      	str	r2, [r3, #4]
 800de5e:	e76e      	b.n	800dd3e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800de60:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800de64:	07d9      	lsls	r1, r3, #31
 800de66:	f100 8200 	bmi.w	800e26a <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800de6a:	6820      	ldr	r0, [r4, #0]
 800de6c:	6943      	ldr	r3, [r0, #20]
 800de6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de72:	6143      	str	r3, [r0, #20]
 800de74:	e7a7      	b.n	800ddc6 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800de76:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800de7a:	f022 0201 	bic.w	r2, r2, #1
 800de7e:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800de82:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800de86:	2b01      	cmp	r3, #1
 800de88:	f000 812c 	beq.w	800e0e4 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800de8c:	4620      	mov	r0, r4
 800de8e:	f017 f939 	bl	8025104 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800de92:	6820      	ldr	r0, [r4, #0]
 800de94:	6943      	ldr	r3, [r0, #20]
 800de96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de9a:	6143      	str	r3, [r0, #20]
 800de9c:	e78e      	b.n	800ddbc <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800de9e:	f007 f99b 	bl	80151d8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800dea2:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dea4:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800dea6:	f1b8 0f00 	cmp.w	r8, #0
 800deaa:	d082      	beq.n	800ddb2 <HAL_PCD_IRQHandler+0x86>
 800deac:	4626      	mov	r6, r4
 800deae:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800deb2:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800deb6:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800deba:	e009      	b.n	800ded0 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800debc:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800dec0:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800dec4:	f106 061c 	add.w	r6, r6, #28
 800dec8:	f109 0920 	add.w	r9, r9, #32
 800decc:	f000 8126 	beq.w	800e11c <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ded0:	f018 0f01 	tst.w	r8, #1
 800ded4:	d0f2      	beq.n	800debc <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ded6:	fa5f f78a 	uxtb.w	r7, sl
 800deda:	4639      	mov	r1, r7
 800dedc:	f007 f98e 	bl	80151fc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dee0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dee2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dee4:	d515      	bpl.n	800df12 <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dee6:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dee8:	f00a 030f 	and.w	r3, sl, #15
 800deec:	2201      	movs	r2, #1
 800deee:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800def0:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800def4:	ea23 0302 	bic.w	r3, r3, r2
 800def8:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800defc:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800defe:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800df00:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800df04:	4299      	cmp	r1, r3
 800df06:	f000 81b9 	beq.w	800e27c <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800df0a:	4639      	mov	r1, r7
 800df0c:	4620      	mov	r0, r4
 800df0e:	f017 f8bd 	bl	802508c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800df12:	0728      	lsls	r0, r5, #28
 800df14:	d502      	bpl.n	800df1c <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800df16:	2308      	movs	r3, #8
 800df18:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800df1c:	06e9      	lsls	r1, r5, #27
 800df1e:	d502      	bpl.n	800df26 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800df20:	2310      	movs	r3, #16
 800df22:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800df26:	066a      	lsls	r2, r5, #25
 800df28:	d502      	bpl.n	800df30 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800df2a:	2340      	movs	r3, #64	; 0x40
 800df2c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800df30:	07ab      	lsls	r3, r5, #30
 800df32:	d502      	bpl.n	800df3a <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800df34:	2302      	movs	r3, #2
 800df36:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800df3a:	062d      	lsls	r5, r5, #24
 800df3c:	f100 80f1 	bmi.w	800e122 <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800df40:	6820      	ldr	r0, [r4, #0]
 800df42:	e7bb      	b.n	800debc <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800df44:	f007 f940 	bl	80151c8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800df48:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df4a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800df4c:	2d00      	cmp	r5, #0
 800df4e:	f43f af2a 	beq.w	800dda6 <HAL_PCD_IRQHandler+0x7a>
 800df52:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800df56:	46a2      	mov	sl, r4
      epnum = 0U;
 800df58:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800df5c:	9703      	str	r7, [sp, #12]
 800df5e:	e008      	b.n	800df72 <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800df60:	086d      	lsrs	r5, r5, #1
        epnum++;
 800df62:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800df66:	f106 0620 	add.w	r6, r6, #32
 800df6a:	f10a 0a1c 	add.w	sl, sl, #28
 800df6e:	f000 80d3 	beq.w	800e118 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800df72:	07ef      	lsls	r7, r5, #31
 800df74:	d5f4      	bpl.n	800df60 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df76:	fa5f f788 	uxtb.w	r7, r8
 800df7a:	4639      	mov	r1, r7
 800df7c:	f007 f934 	bl	80151e8 <USB_ReadDevOutEPInterrupt>
 800df80:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800df82:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800df84:	f019 0f01 	tst.w	r9, #1
 800df88:	f040 8135 	bne.w	800e1f6 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800df8c:	f019 0f08 	tst.w	r9, #8
 800df90:	f040 8119 	bne.w	800e1c6 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800df94:	f019 0f10 	tst.w	r9, #16
 800df98:	d001      	beq.n	800df9e <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800df9a:	2310      	movs	r3, #16
 800df9c:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800df9e:	f019 0f20 	tst.w	r9, #32
 800dfa2:	d001      	beq.n	800dfa8 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800dfa8:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800dfac:	d0d8      	beq.n	800df60 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800dfae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfb2:	60b3      	str	r3, [r6, #8]
 800dfb4:	e7d4      	b.n	800df60 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f017 f8b0 	bl	802511c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dfbc:	6820      	ldr	r0, [r4, #0]
 800dfbe:	6943      	ldr	r3, [r0, #20]
 800dfc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dfc4:	6143      	str	r3, [r0, #20]
 800dfc6:	e73d      	b.n	800de44 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800dfc8:	4620      	mov	r0, r4
 800dfca:	2100      	movs	r1, #0
 800dfcc:	f017 f89e 	bl	802510c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dfd0:	6820      	ldr	r0, [r4, #0]
 800dfd2:	6943      	ldr	r3, [r0, #20]
 800dfd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfd8:	6143      	str	r3, [r0, #20]
 800dfda:	e72d      	b.n	800de38 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800dfdc:	4620      	mov	r0, r4
 800dfde:	2100      	movs	r1, #0
 800dfe0:	f017 f898 	bl	8025114 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800dfe4:	6820      	ldr	r0, [r4, #0]
 800dfe6:	6943      	ldr	r3, [r0, #20]
 800dfe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfec:	6143      	str	r3, [r0, #20]
 800dfee:	e71d      	b.n	800de2c <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800dff0:	4620      	mov	r0, r4
 800dff2:	f017 f855 	bl	80250a0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800dff6:	6820      	ldr	r0, [r4, #0]
 800dff8:	6943      	ldr	r3, [r0, #20]
 800dffa:	f003 0308 	and.w	r3, r3, #8
 800dffe:	6143      	str	r3, [r0, #20]
 800e000:	e70e      	b.n	800de20 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800e002:	f007 f90f 	bl	8015224 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e006:	6820      	ldr	r0, [r4, #0]
 800e008:	f006 fdc0 	bl	8014b8c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e00c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e00e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e010:	f000 ff86 	bl	800ef20 <HAL_RCC_GetHCLKFreq>
 800e014:	7b22      	ldrb	r2, [r4, #12]
 800e016:	4601      	mov	r1, r0
 800e018:	4628      	mov	r0, r5
 800e01a:	f006 fbeb 	bl	80147f4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800e01e:	4620      	mov	r0, r4
 800e020:	f017 f842 	bl	80250a8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e024:	6820      	ldr	r0, [r4, #0]
 800e026:	6943      	ldr	r3, [r0, #20]
 800e028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e02c:	6143      	str	r3, [r0, #20]
 800e02e:	e6f1      	b.n	800de14 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e030:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800e034:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e038:	2110      	movs	r1, #16
 800e03a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e03c:	f023 0301 	bic.w	r3, r3, #1
 800e040:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e042:	f006 fc97 	bl	8014974 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e046:	6860      	ldr	r0, [r4, #4]
 800e048:	b1e0      	cbz	r0, 800e084 <HAL_PCD_IRQHandler+0x358>
 800e04a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e04e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800e052:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e054:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e058:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e05a:	3320      	adds	r3, #32
 800e05c:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e05e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e062:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e066:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e06a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800e06e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800e072:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e076:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800e07a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e07e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e082:	d1e6      	bne.n	800e052 <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e084:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e086:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e088:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e08c:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e08e:	b9f2      	cbnz	r2, 800e0ce <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e090:	696a      	ldr	r2, [r5, #20]
 800e092:	f242 032b 	movw	r3, #8235	; 0x202b
 800e096:	4313      	orrs	r3, r2
 800e098:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e09a:	692b      	ldr	r3, [r5, #16]
 800e09c:	f043 030b 	orr.w	r3, r3, #11
 800e0a0:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e0a2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e0a6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e0aa:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e0ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e0b0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e0b2:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e0b6:	f007 f8cb 	bl	8015250 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	6943      	ldr	r3, [r0, #20]
 800e0be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e0c2:	6143      	str	r3, [r0, #20]
 800e0c4:	e69f      	b.n	800de06 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f017 f804 	bl	80250d4 <HAL_PCD_SuspendCallback>
 800e0cc:	e694      	b.n	800ddf8 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e0ce:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800e0d2:	f043 030b 	orr.w	r3, r3, #11
 800e0d6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e0da:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e0dc:	f043 030b 	orr.w	r3, r3, #11
 800e0e0:	646b      	str	r3, [r5, #68]	; 0x44
 800e0e2:	e7de      	b.n	800e0a2 <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800e0e4:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e0e6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800e0e8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e0ec:	f017 f8dc 	bl	80252a8 <HAL_PCDEx_LPM_Callback>
 800e0f0:	e6cf      	b.n	800de92 <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e0f2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e0f6:	2208      	movs	r2, #8
 800e0f8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800e0fc:	4638      	mov	r0, r7
 800e0fe:	f006 ffa9 	bl	8015054 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e102:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800e106:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e10a:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e10c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800e110:	440b      	add	r3, r1
 800e112:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800e116:	e63b      	b.n	800dd90 <HAL_PCD_IRQHandler+0x64>
 800e118:	9f03      	ldr	r7, [sp, #12]
 800e11a:	e644      	b.n	800dda6 <HAL_PCD_IRQHandler+0x7a>
 800e11c:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800e120:	e647      	b.n	800ddb2 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800e122:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e126:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800e12a:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e12c:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800e12e:	f63f aec5 	bhi.w	800debc <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e132:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800e136:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e138:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e13c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800e140:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800e142:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800e144:	428a      	cmp	r2, r1
 800e146:	bf28      	it	cs
 800e148:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e14a:	9905      	ldr	r1, [sp, #20]
 800e14c:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800e14e:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e150:	b289      	uxth	r1, r1
 800e152:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800e156:	f0c0 80bc 	bcc.w	800e2d2 <HAL_PCD_IRQHandler+0x5a6>
 800e15a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e15e:	46a0      	mov	r8, r4
 800e160:	9c05      	ldr	r4, [sp, #20]
 800e162:	e01a      	b.n	800e19a <HAL_PCD_IRQHandler+0x46e>
 800e164:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e166:	463a      	mov	r2, r7
 800e168:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800e16a:	4658      	mov	r0, fp
 800e16c:	429d      	cmp	r5, r3
 800e16e:	bf28      	it	cs
 800e170:	461d      	movcs	r5, r3
 800e172:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	b2ab      	uxth	r3, r5
 800e17a:	f006 ff55 	bl	8015028 <USB_WritePacket>
    ep->xfer_buff  += len;
 800e17e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e180:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800e182:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e184:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800e186:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800e188:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e18a:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800e18c:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e18e:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800e192:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e194:	f0c0 8096 	bcc.w	800e2c4 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e198:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800e19a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800e19c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e1a0:	d3e0      	bcc.n	800e164 <HAL_PCD_IRQHandler+0x438>
 800e1a2:	4644      	mov	r4, r8
 800e1a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e1a8:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e1ac:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e1ae:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e1b0:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e1b2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e1b6:	f00a 030f 	and.w	r3, sl, #15
 800e1ba:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e1bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e1be:	ea23 0302 	bic.w	r3, r3, r2
 800e1c2:	634b      	str	r3, [r1, #52]	; 0x34
 800e1c4:	e67a      	b.n	800debc <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e1c6:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1c8:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e1cc:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e1d2:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1d4:	485f      	ldr	r0, [pc, #380]	; (800e354 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1d6:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e1d8:	4282      	cmp	r2, r0
 800e1da:	d961      	bls.n	800e2a0 <HAL_PCD_IRQHandler+0x574>
 800e1dc:	040a      	lsls	r2, r1, #16
 800e1de:	d502      	bpl.n	800e1e6 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e1e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e1e4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f016 ff40 	bl	802506c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e1ec:	6921      	ldr	r1, [r4, #16]
 800e1ee:	2901      	cmp	r1, #1
 800e1f0:	d07f      	beq.n	800e2f2 <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e1f2:	6820      	ldr	r0, [r4, #0]
 800e1f4:	e6ce      	b.n	800df94 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e1f6:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800e1f8:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e1fa:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e1fc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800e200:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e202:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e206:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800e20a:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800e20c:	d04d      	beq.n	800e2aa <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e20e:	4952      	ldr	r1, [pc, #328]	; (800e358 <HAL_PCD_IRQHandler+0x62c>)
 800e210:	458c      	cmp	ip, r1
 800e212:	d062      	beq.n	800e2da <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e214:	f1b8 0f00 	cmp.w	r8, #0
 800e218:	d104      	bne.n	800e224 <HAL_PCD_IRQHandler+0x4f8>
 800e21a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e21e:	2a00      	cmp	r2, #0
 800e220:	f000 8092 	beq.w	800e348 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e224:	4620      	mov	r0, r4
 800e226:	4639      	mov	r1, r7
 800e228:	f016 ff26 	bl	8025078 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e22c:	6820      	ldr	r0, [r4, #0]
 800e22e:	e6ad      	b.n	800df8c <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e230:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e234:	421d      	tst	r5, r3
 800e236:	f43f adab 	beq.w	800dd90 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e23a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e23e:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800e242:	4638      	mov	r0, r7
 800e244:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e248:	4615      	mov	r5, r2
 800e24a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800e24e:	f006 ff01 	bl	8015054 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e252:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e256:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e258:	442b      	add	r3, r5
 800e25a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e25e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800e262:	442b      	add	r3, r5
 800e264:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800e268:	e592      	b.n	800dd90 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800e26a:	4620      	mov	r0, r4
 800e26c:	f016 ff32 	bl	80250d4 <HAL_PCD_SuspendCallback>
 800e270:	e5fb      	b.n	800de6a <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800e272:	4620      	mov	r0, r4
 800e274:	f016 ff56 	bl	8025124 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	e5ed      	b.n	800de58 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e27c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800e280:	4413      	add	r3, r2
 800e282:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e284:	f1ba 0f00 	cmp.w	sl, #0
 800e288:	f47f ae3f 	bne.w	800df0a <HAL_PCD_IRQHandler+0x1de>
 800e28c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f47f ae3b 	bne.w	800df0a <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e294:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	f006 ffd9 	bl	8015250 <USB_EP0_OutStart>
 800e29e:	e634      	b.n	800df0a <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f016 fee3 	bl	802506c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e2a6:	6820      	ldr	r0, [r4, #0]
 800e2a8:	e674      	b.n	800df94 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e2aa:	0719      	lsls	r1, r3, #28
 800e2ac:	d51c      	bpl.n	800e2e8 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2ae:	4929      	ldr	r1, [pc, #164]	; (800e354 <HAL_PCD_IRQHandler+0x628>)
 800e2b0:	458c      	cmp	ip, r1
 800e2b2:	f67f ae6b 	bls.w	800df8c <HAL_PCD_IRQHandler+0x260>
 800e2b6:	041f      	lsls	r7, r3, #16
 800e2b8:	f57f ae68 	bpl.w	800df8c <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e2bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c0:	6093      	str	r3, [r2, #8]
 800e2c2:	e663      	b.n	800df8c <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e2c4:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800e2c6:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e2c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e2cc:	f8d4 b000 	ldr.w	fp, [r4]
 800e2d0:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800e2d2:	42ab      	cmp	r3, r5
 800e2d4:	f4ff adf2 	bcc.w	800debc <HAL_PCD_IRQHandler+0x190>
 800e2d8:	e768      	b.n	800e1ac <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e2da:	0419      	lsls	r1, r3, #16
 800e2dc:	d4ee      	bmi.n	800e2bc <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e2de:	0699      	lsls	r1, r3, #26
 800e2e0:	d5a0      	bpl.n	800e224 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2e2:	2120      	movs	r1, #32
 800e2e4:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e2e6:	e79d      	b.n	800e224 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e2e8:	0699      	lsls	r1, r3, #26
 800e2ea:	d508      	bpl.n	800e2fe <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2ec:	2320      	movs	r3, #32
 800e2ee:	6093      	str	r3, [r2, #8]
 800e2f0:	e64c      	b.n	800df8c <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e2f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e2f6:	6820      	ldr	r0, [r4, #0]
 800e2f8:	f006 ffaa 	bl	8015250 <USB_EP0_OutStart>
 800e2fc:	e779      	b.n	800e1f2 <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e2fe:	f013 0f28 	tst.w	r3, #40	; 0x28
 800e302:	f47f ae43 	bne.w	800df8c <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e306:	4913      	ldr	r1, [pc, #76]	; (800e354 <HAL_PCD_IRQHandler+0x628>)
 800e308:	458c      	cmp	ip, r1
 800e30a:	d901      	bls.n	800e310 <HAL_PCD_IRQHandler+0x5e4>
 800e30c:	041b      	lsls	r3, r3, #16
 800e30e:	d4d5      	bmi.n	800e2bc <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e310:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800e312:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e316:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800e31a:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800e31c:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800e320:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800e324:	440a      	add	r2, r1
 800e326:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e32a:	f1b8 0f00 	cmp.w	r8, #0
 800e32e:	f47f af79 	bne.w	800e224 <HAL_PCD_IRQHandler+0x4f8>
 800e332:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800e336:	2a00      	cmp	r2, #0
 800e338:	f47f af74 	bne.w	800e224 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e33c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e340:	2101      	movs	r1, #1
 800e342:	f006 ff85 	bl	8015250 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e346:	e76d      	b.n	800e224 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e348:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e34c:	4641      	mov	r1, r8
 800e34e:	f006 ff7f 	bl	8015250 <USB_EP0_OutStart>
 800e352:	e767      	b.n	800e224 <HAL_PCD_IRQHandler+0x4f8>
 800e354:	4f54300a 	.word	0x4f54300a
 800e358:	4f54310a 	.word	0x4f54310a

0800e35c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800e35c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800e360:	2a01      	cmp	r2, #1
 800e362:	d00e      	beq.n	800e382 <HAL_PCD_SetAddress+0x26>
 800e364:	2201      	movs	r2, #1
{
 800e366:	b510      	push	{r4, lr}
 800e368:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e36a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800e36c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800e370:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e374:	f006 fef2 	bl	801515c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e378:	2300      	movs	r3, #0
  return HAL_OK;
 800e37a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e37c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e380:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800e382:	2002      	movs	r0, #2
}
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop

0800e388 <HAL_PCD_EP_Open>:
{
 800e388:	b510      	push	{r4, lr}
 800e38a:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800e38e:	0609      	lsls	r1, r1, #24
{
 800e390:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e392:	d427      	bmi.n	800e3e4 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e394:	f04f 0c1c 	mov.w	ip, #28
 800e398:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800e39c:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800e3a0:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800e3a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800e3ae:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800e3b0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3b2:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800e3b6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800e3b8:	b10a      	cbz	r2, 800e3be <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800e3ba:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d101      	bne.n	800e3c6 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800e3c6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d018      	beq.n	800e400 <HAL_PCD_EP_Open+0x78>
 800e3ce:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e3d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e3d2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e3d6:	f006 fbe5 	bl	8014ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e3da:	2300      	movs	r3, #0
  return ret;
 800e3dc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e3de:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e3e2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3e4:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800e3e6:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3ea:	fb00 400e 	mla	r0, r0, lr, r4
 800e3ee:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800e3f2:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800e3f6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800e3fa:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800e3fe:	e7d6      	b.n	800e3ae <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800e400:	2002      	movs	r0, #2
}
 800e402:	bd10      	pop	{r4, pc}

0800e404 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800e404:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e408:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e40c:	f04f 011c 	mov.w	r1, #28
{
 800e410:	b510      	push	{r4, lr}
 800e412:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e414:	d11a      	bne.n	800e44c <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e416:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e41a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e41e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e420:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e424:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e428:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e42c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e42e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e432:	2b01      	cmp	r3, #1
 800e434:	d019      	beq.n	800e46a <HAL_PCD_EP_Close+0x66>
 800e436:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e438:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e43a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e43e:	f006 fbf9 	bl	8014c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e442:	2300      	movs	r3, #0
  return HAL_OK;
 800e444:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e446:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e44a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e44c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e450:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800e454:	2001      	movs	r0, #1
 800e456:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e45a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e45c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e460:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e462:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e466:	2b01      	cmp	r3, #1
 800e468:	d1e5      	bne.n	800e436 <HAL_PCD_EP_Close+0x32>
 800e46a:	2002      	movs	r0, #2
}
 800e46c:	bd10      	pop	{r4, pc}
 800e46e:	bf00      	nop

0800e470 <HAL_PCD_EP_Receive>:
{
 800e470:	b510      	push	{r4, lr}
 800e472:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e476:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e478:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e47c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e480:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e484:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800e488:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800e48c:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e48e:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800e492:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800e496:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800e49a:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800e49e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4a0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e4a2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e4a4:	bf08      	it	eq
 800e4a6:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4aa:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e4ac:	b91c      	cbnz	r4, 800e4b6 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4ae:	f006 fd37 	bl	8014f20 <USB_EP0StartXfer>
}
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e4b6:	f006 fc1b 	bl	8014cf0 <USB_EPStartXfer>
}
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop

0800e4c0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e4c0:	f001 010f 	and.w	r1, r1, #15
 800e4c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e4c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800e4cc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop

0800e4d4 <HAL_PCD_EP_Transmit>:
{
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4da:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800e4dc:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4e0:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800e4e4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4e8:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800e4ea:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800e4ee:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800e4f0:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800e4f4:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800e4f8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4fa:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800e4fe:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800e502:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e504:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800e506:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800e508:	bf08      	it	eq
 800e50a:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e50e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e510:	b91c      	cbnz	r4, 800e51a <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e512:	f006 fd05 	bl	8014f20 <USB_EP0StartXfer>
}
 800e516:	2000      	movs	r0, #0
 800e518:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e51a:	f006 fbe9 	bl	8014cf0 <USB_EPStartXfer>
}
 800e51e:	2000      	movs	r0, #0
 800e520:	bd10      	pop	{r4, pc}
 800e522:	bf00      	nop

0800e524 <HAL_PCD_EP_SetStall>:
{
 800e524:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e526:	6843      	ldr	r3, [r0, #4]
 800e528:	f001 050f 	and.w	r5, r1, #15
 800e52c:	429d      	cmp	r5, r3
 800e52e:	d834      	bhi.n	800e59a <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800e530:	060b      	lsls	r3, r1, #24
 800e532:	4604      	mov	r4, r0
 800e534:	d41d      	bmi.n	800e572 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800e536:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800e538:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800e53c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800e540:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e544:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800e546:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e54a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800e54e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e550:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e552:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e554:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e558:	429a      	cmp	r2, r3
 800e55a:	d01c      	beq.n	800e596 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e55c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e55e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e562:	f006 fd9b 	bl	801509c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e566:	b1d5      	cbz	r5, 800e59e <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800e568:	2300      	movs	r3, #0
  return HAL_OK;
 800e56a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800e56c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800e570:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e572:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800e574:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800e578:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e57a:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800e57e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e582:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800e588:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800e58a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800e58c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800e58e:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800e592:	429a      	cmp	r2, r3
 800e594:	d1e2      	bne.n	800e55c <HAL_PCD_EP_SetStall+0x38>
 800e596:	2002      	movs	r0, #2
}
 800e598:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e59a:	2001      	movs	r0, #1
}
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e59e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800e5a2:	7c21      	ldrb	r1, [r4, #16]
 800e5a4:	6820      	ldr	r0, [r4, #0]
 800e5a6:	f006 fe53 	bl	8015250 <USB_EP0_OutStart>
 800e5aa:	e7dd      	b.n	800e568 <HAL_PCD_EP_SetStall+0x44>

0800e5ac <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e5ac:	6842      	ldr	r2, [r0, #4]
{
 800e5ae:	b538      	push	{r3, r4, r5, lr}
 800e5b0:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d832      	bhi.n	800e61e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800e5b8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e5bc:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5be:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800e5c2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800e5c6:	d119      	bne.n	800e5fc <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5c8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e5d2:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5d4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800e5d8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5dc:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e5de:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e5e0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d018      	beq.n	800e61a <HAL_PCD_EP_ClrStall+0x6e>
 800e5e8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e5ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e5ec:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e5f0:	f006 fd88 	bl	8015104 <USB_EPClearStall>
  return HAL_OK;
 800e5f4:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800e5f6:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800e5fa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5fc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800e600:	2001      	movs	r0, #1
 800e602:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800e606:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e608:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800e60a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800e60e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800e610:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800e612:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800e616:	2b01      	cmp	r3, #1
 800e618:	d1e6      	bne.n	800e5e8 <HAL_PCD_EP_ClrStall+0x3c>
 800e61a:	2002      	movs	r0, #2
}
 800e61c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e61e:	2001      	movs	r0, #1
}
 800e620:	bd38      	pop	{r3, r4, r5, pc}
 800e622:	bf00      	nop

0800e624 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e624:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e626:	6804      	ldr	r4, [r0, #0]
 800e628:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800e62a:	b931      	cbnz	r1, 800e63a <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e62c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e630:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800e632:	2000      	movs	r0, #0
 800e634:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e638:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e63a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800e63c:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e640:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e644:	d00b      	beq.n	800e65e <HAL_PCDEx_SetTxFiFo+0x3a>
 800e646:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e648:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800e64c:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e64e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800e652:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e654:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800e656:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e658:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800e65c:	d3f4      	bcc.n	800e648 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e65e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e662:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e666:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800e66a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e66e:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e672:	2000      	movs	r0, #0
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop

0800e678 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e678:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800e67a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6259      	str	r1, [r3, #36]	; 0x24
}
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop

0800e684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e684:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800e686:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e68a:	4909      	ldr	r1, [pc, #36]	; (800e6b0 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e68c:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800e68e:	4660      	mov	r0, ip
{
 800e690:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800e692:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800e694:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800e698:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e69c:	6993      	ldr	r3, [r2, #24]
}
 800e69e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e6a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e6a6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e6a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e6aa:	4319      	orrs	r1, r3
 800e6ac:	6551      	str	r1, [r2, #84]	; 0x54
}
 800e6ae:	4770      	bx	lr
 800e6b0:	10000003 	.word	0x10000003

0800e6b4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e6b4:	4a02      	ldr	r2, [pc, #8]	; (800e6c0 <HAL_PWR_EnableBkUpAccess+0xc>)
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6bc:	6013      	str	r3, [r2, #0]
}
 800e6be:	4770      	bx	lr
 800e6c0:	40007000 	.word	0x40007000

0800e6c4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800e6c4:	4b1a      	ldr	r3, [pc, #104]	; (800e730 <HAL_PWREx_EnableOverDrive+0x6c>)
 800e6c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800e6cc:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6ce:	641a      	str	r2, [r3, #64]	; 0x40
{
 800e6d0:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e6d4:	4c17      	ldr	r4, [pc, #92]	; (800e734 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6da:	9301      	str	r3, [sp, #4]
 800e6dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6e4:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e6e6:	f7fa fe4f 	bl	8009388 <HAL_GetTick>
 800e6ea:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e6ec:	e005      	b.n	800e6fa <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e6ee:	f7fa fe4b 	bl	8009388 <HAL_GetTick>
 800e6f2:	1b40      	subs	r0, r0, r5
 800e6f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e6f8:	d817      	bhi.n	800e72a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e6fa:	6863      	ldr	r3, [r4, #4]
 800e6fc:	03da      	lsls	r2, r3, #15
 800e6fe:	d5f6      	bpl.n	800e6ee <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e700:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e702:	4d0c      	ldr	r5, [pc, #48]	; (800e734 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e708:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e70a:	f7fa fe3d 	bl	8009388 <HAL_GetTick>
 800e70e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e710:	e005      	b.n	800e71e <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e712:	f7fa fe39 	bl	8009388 <HAL_GetTick>
 800e716:	1b00      	subs	r0, r0, r4
 800e718:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e71c:	d805      	bhi.n	800e72a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e71e:	686b      	ldr	r3, [r5, #4]
 800e720:	039b      	lsls	r3, r3, #14
 800e722:	d5f6      	bpl.n	800e712 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800e724:	2000      	movs	r0, #0
}
 800e726:	b003      	add	sp, #12
 800e728:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800e72a:	2003      	movs	r0, #3
}
 800e72c:	b003      	add	sp, #12
 800e72e:	bd30      	pop	{r4, r5, pc}
 800e730:	40023800 	.word	0x40023800
 800e734:	40007000 	.word	0x40007000

0800e738 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e738:	2800      	cmp	r0, #0
 800e73a:	f000 828c 	beq.w	800ec56 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e73e:	6803      	ldr	r3, [r0, #0]
 800e740:	2b0f      	cmp	r3, #15
{
 800e742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e746:	4604      	mov	r4, r0
 800e748:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e74a:	f200 8123 	bhi.w	800e994 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e74e:	07dd      	lsls	r5, r3, #31
 800e750:	d534      	bpl.n	800e7bc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e752:	6863      	ldr	r3, [r4, #4]
 800e754:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800e758:	d003      	beq.n	800e762 <HAL_RCC_OscConfig+0x2a>
 800e75a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e75e:	f040 8175 	bne.w	800ea4c <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e762:	4aa3      	ldr	r2, [pc, #652]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e764:	6893      	ldr	r3, [r2, #8]
 800e766:	f003 030c 	and.w	r3, r3, #12
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	d01d      	beq.n	800e7aa <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e76e:	6893      	ldr	r3, [r2, #8]
 800e770:	f003 030c 	and.w	r3, r3, #12
 800e774:	2b08      	cmp	r3, #8
 800e776:	d015      	beq.n	800e7a4 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e778:	6863      	ldr	r3, [r4, #4]
 800e77a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e77e:	f000 816b 	beq.w	800ea58 <HAL_RCC_OscConfig+0x320>
 800e782:	2b00      	cmp	r3, #0
 800e784:	f000 819c 	beq.w	800eac0 <HAL_RCC_OscConfig+0x388>
 800e788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e78c:	4b98      	ldr	r3, [pc, #608]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	f000 822d 	beq.w	800ebee <HAL_RCC_OscConfig+0x4b6>
 800e794:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e7a0:	601a      	str	r2, [r3, #0]
 800e7a2:	e15e      	b.n	800ea62 <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7a4:	6853      	ldr	r3, [r2, #4]
 800e7a6:	0258      	lsls	r0, r3, #9
 800e7a8:	d5e6      	bpl.n	800e778 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7aa:	4b91      	ldr	r3, [pc, #580]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	0399      	lsls	r1, r3, #14
 800e7b0:	d503      	bpl.n	800e7ba <HAL_RCC_OscConfig+0x82>
 800e7b2:	6863      	ldr	r3, [r4, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80ff 	beq.w	800e9b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	079f      	lsls	r7, r3, #30
 800e7be:	d531      	bpl.n	800e824 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e7c0:	68e3      	ldr	r3, [r4, #12]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	f200 80fc 	bhi.w	800e9c0 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	2b1f      	cmp	r3, #31
 800e7cc:	f200 8101 	bhi.w	800e9d2 <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e7d0:	4b87      	ldr	r3, [pc, #540]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	f012 0f0c 	tst.w	r2, #12
 800e7d8:	f000 80e7 	beq.w	800e9aa <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e7dc:	689a      	ldr	r2, [r3, #8]
 800e7de:	f002 020c 	and.w	r2, r2, #12
 800e7e2:	2a08      	cmp	r2, #8
 800e7e4:	f000 80dd 	beq.w	800e9a2 <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e7e8:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e7ea:	4d81      	ldr	r5, [pc, #516]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 819d 	beq.w	800eb2c <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800e7f2:	682b      	ldr	r3, [r5, #0]
 800e7f4:	f043 0301 	orr.w	r3, r3, #1
 800e7f8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7fa:	f7fa fdc5 	bl	8009388 <HAL_GetTick>
 800e7fe:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e800:	e005      	b.n	800e80e <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e802:	f7fa fdc1 	bl	8009388 <HAL_GetTick>
 800e806:	1b80      	subs	r0, r0, r6
 800e808:	2802      	cmp	r0, #2
 800e80a:	f200 8155 	bhi.w	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e80e:	682b      	ldr	r3, [r5, #0]
 800e810:	0798      	lsls	r0, r3, #30
 800e812:	d5f6      	bpl.n	800e802 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e814:	682b      	ldr	r3, [r5, #0]
 800e816:	6922      	ldr	r2, [r4, #16]
 800e818:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e81c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e820:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	071a      	lsls	r2, r3, #28
 800e826:	d42a      	bmi.n	800e87e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e828:	075e      	lsls	r6, r3, #29
 800e82a:	d544      	bpl.n	800e8b6 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e82c:	68a3      	ldr	r3, [r4, #8]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d906      	bls.n	800e840 <HAL_RCC_OscConfig+0x108>
 800e832:	2b05      	cmp	r3, #5
 800e834:	d004      	beq.n	800e840 <HAL_RCC_OscConfig+0x108>
 800e836:	f240 2106 	movw	r1, #518	; 0x206
 800e83a:	486e      	ldr	r0, [pc, #440]	; (800e9f4 <HAL_RCC_OscConfig+0x2bc>)
 800e83c:	f7f7 f872 	bl	8005924 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e840:	4b6b      	ldr	r3, [pc, #428]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e844:	00d5      	lsls	r5, r2, #3
 800e846:	f140 80ec 	bpl.w	800ea22 <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800e84a:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e84c:	4e6a      	ldr	r6, [pc, #424]	; (800e9f8 <HAL_RCC_OscConfig+0x2c0>)
 800e84e:	6833      	ldr	r3, [r6, #0]
 800e850:	05d8      	lsls	r0, r3, #23
 800e852:	f140 8121 	bpl.w	800ea98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e856:	68a3      	ldr	r3, [r4, #8]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	f000 8179 	beq.w	800eb50 <HAL_RCC_OscConfig+0x418>
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f000 8144 	beq.w	800eaec <HAL_RCC_OscConfig+0x3b4>
 800e864:	2b05      	cmp	r3, #5
 800e866:	4b62      	ldr	r3, [pc, #392]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e86a:	f000 81c8 	beq.w	800ebfe <HAL_RCC_OscConfig+0x4c6>
 800e86e:	f022 0201 	bic.w	r2, r2, #1
 800e872:	671a      	str	r2, [r3, #112]	; 0x70
 800e874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e876:	f022 0204 	bic.w	r2, r2, #4
 800e87a:	671a      	str	r2, [r3, #112]	; 0x70
 800e87c:	e16d      	b.n	800eb5a <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e87e:	6963      	ldr	r3, [r4, #20]
 800e880:	2b01      	cmp	r3, #1
 800e882:	f200 80c4 	bhi.w	800ea0e <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800e886:	4d5a      	ldr	r5, [pc, #360]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f000 80a8 	beq.w	800e9de <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800e88e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e890:	f043 0301 	orr.w	r3, r3, #1
 800e894:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e896:	f7fa fd77 	bl	8009388 <HAL_GetTick>
 800e89a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e89c:	e005      	b.n	800e8aa <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e89e:	f7fa fd73 	bl	8009388 <HAL_GetTick>
 800e8a2:	1b80      	subs	r0, r0, r6
 800e8a4:	2802      	cmp	r0, #2
 800e8a6:	f200 8107 	bhi.w	800eab8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e8aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e8ac:	079b      	lsls	r3, r3, #30
 800e8ae:	d5f6      	bpl.n	800e89e <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	075e      	lsls	r6, r3, #29
 800e8b4:	d4ba      	bmi.n	800e82c <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800e8b6:	69a0      	ldr	r0, [r4, #24]
 800e8b8:	2802      	cmp	r0, #2
 800e8ba:	f200 80bd 	bhi.w	800ea38 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d064      	beq.n	800e98c <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8c2:	4d4b      	ldr	r5, [pc, #300]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e8c4:	68ab      	ldr	r3, [r5, #8]
 800e8c6:	f003 030c 	and.w	r3, r3, #12
 800e8ca:	2b08      	cmp	r3, #8
 800e8cc:	f000 8158 	beq.w	800eb80 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e8d0:	2802      	cmp	r0, #2
 800e8d2:	f040 81ae 	bne.w	800ec32 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800e8d6:	69e3      	ldr	r3, [r4, #28]
 800e8d8:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800e8dc:	f040 81a3 	bne.w	800ec26 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800e8e0:	6a23      	ldr	r3, [r4, #32]
 800e8e2:	3b02      	subs	r3, #2
 800e8e4:	2b3d      	cmp	r3, #61	; 0x3d
 800e8e6:	f200 8198 	bhi.w	800ec1a <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800e8ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ec:	3b32      	subs	r3, #50	; 0x32
 800e8ee:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e8f2:	f200 818c 	bhi.w	800ec0e <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800e8f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8f8:	2b08      	cmp	r3, #8
 800e8fa:	f200 8172 	bhi.w	800ebe2 <HAL_RCC_OscConfig+0x4aa>
 800e8fe:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800e902:	fa22 f303 	lsr.w	r3, r2, r3
 800e906:	07d8      	lsls	r0, r3, #31
 800e908:	f140 816b 	bpl.w	800ebe2 <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800e90c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e90e:	3b02      	subs	r3, #2
 800e910:	2b0d      	cmp	r3, #13
 800e912:	f200 81a8 	bhi.w	800ec66 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800e916:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e918:	3b02      	subs	r3, #2
 800e91a:	2b05      	cmp	r3, #5
 800e91c:	f200 819d 	bhi.w	800ec5a <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e920:	4d33      	ldr	r5, [pc, #204]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e928:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e92a:	f7fa fd2d 	bl	8009388 <HAL_GetTick>
 800e92e:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e930:	e005      	b.n	800e93e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e932:	f7fa fd29 	bl	8009388 <HAL_GetTick>
 800e936:	1b80      	subs	r0, r0, r6
 800e938:	2802      	cmp	r0, #2
 800e93a:	f200 80bd 	bhi.w	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e93e:	682b      	ldr	r3, [r5, #0]
 800e940:	0199      	lsls	r1, r3, #6
 800e942:	d4f6      	bmi.n	800e932 <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e944:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800e948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e94a:	430b      	orrs	r3, r1
 800e94c:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e94e:	4e28      	ldr	r6, [pc, #160]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e950:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e954:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800e958:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e95c:	0852      	lsrs	r2, r2, #1
 800e95e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e962:	3a01      	subs	r2, #1
 800e964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e968:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800e96a:	682b      	ldr	r3, [r5, #0]
 800e96c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e970:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e972:	f7fa fd09 	bl	8009388 <HAL_GetTick>
 800e976:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e978:	e005      	b.n	800e986 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e97a:	f7fa fd05 	bl	8009388 <HAL_GetTick>
 800e97e:	1b00      	subs	r0, r0, r4
 800e980:	2802      	cmp	r0, #2
 800e982:	f200 8099 	bhi.w	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e986:	6833      	ldr	r3, [r6, #0]
 800e988:	019a      	lsls	r2, r3, #6
 800e98a:	d5f6      	bpl.n	800e97a <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800e98c:	2000      	movs	r0, #0
}
 800e98e:	b002      	add	sp, #8
 800e990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e994:	f240 1163 	movw	r1, #355	; 0x163
 800e998:	4816      	ldr	r0, [pc, #88]	; (800e9f4 <HAL_RCC_OscConfig+0x2bc>)
 800e99a:	f7f6 ffc3 	bl	8005924 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	e6d5      	b.n	800e74e <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	025e      	lsls	r6, r3, #9
 800e9a6:	f53f af1f 	bmi.w	800e7e8 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9aa:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <HAL_RCC_OscConfig+0x2b8>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	079d      	lsls	r5, r3, #30
 800e9b0:	d565      	bpl.n	800ea7e <HAL_RCC_OscConfig+0x346>
 800e9b2:	68e3      	ldr	r3, [r4, #12]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d062      	beq.n	800ea7e <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800e9b8:	2001      	movs	r0, #1
}
 800e9ba:	b002      	add	sp, #8
 800e9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e9c0:	f240 119b 	movw	r1, #411	; 0x19b
 800e9c4:	480b      	ldr	r0, [pc, #44]	; (800e9f4 <HAL_RCC_OscConfig+0x2bc>)
 800e9c6:	f7f6 ffad 	bl	8005924 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e9ca:	6923      	ldr	r3, [r4, #16]
 800e9cc:	2b1f      	cmp	r3, #31
 800e9ce:	f67f aeff 	bls.w	800e7d0 <HAL_RCC_OscConfig+0x98>
 800e9d2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800e9d6:	4807      	ldr	r0, [pc, #28]	; (800e9f4 <HAL_RCC_OscConfig+0x2bc>)
 800e9d8:	f7f6 ffa4 	bl	8005924 <assert_failed>
 800e9dc:	e6f8      	b.n	800e7d0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800e9de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e9e0:	f023 0301 	bic.w	r3, r3, #1
 800e9e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e9e6:	f7fa fccf 	bl	8009388 <HAL_GetTick>
 800e9ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9ec:	e00b      	b.n	800ea06 <HAL_RCC_OscConfig+0x2ce>
 800e9ee:	bf00      	nop
 800e9f0:	40023800 	.word	0x40023800
 800e9f4:	0802e49c 	.word	0x0802e49c
 800e9f8:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e9fc:	f7fa fcc4 	bl	8009388 <HAL_GetTick>
 800ea00:	1b80      	subs	r0, r0, r6
 800ea02:	2802      	cmp	r0, #2
 800ea04:	d858      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ea08:	079f      	lsls	r7, r3, #30
 800ea0a:	d4f7      	bmi.n	800e9fc <HAL_RCC_OscConfig+0x2c4>
 800ea0c:	e750      	b.n	800e8b0 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ea0e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800ea12:	4898      	ldr	r0, [pc, #608]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ea14:	f7f6 ff86 	bl	8005924 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea18:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800ea1a:	4d97      	ldr	r5, [pc, #604]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d0de      	beq.n	800e9de <HAL_RCC_OscConfig+0x2a6>
 800ea20:	e735      	b.n	800e88e <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800ea24:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ea2a:	641a      	str	r2, [r3, #64]	; 0x40
 800ea2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea32:	9301      	str	r3, [sp, #4]
 800ea34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ea36:	e709      	b.n	800e84c <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ea38:	488e      	ldr	r0, [pc, #568]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ea3a:	f240 214a 	movw	r1, #586	; 0x24a
 800ea3e:	f7f6 ff71 	bl	8005924 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea42:	69a0      	ldr	r0, [r4, #24]
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f47f af3c 	bne.w	800e8c2 <HAL_RCC_OscConfig+0x18a>
 800ea4a:	e79f      	b.n	800e98c <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ea4c:	f240 1169 	movw	r1, #361	; 0x169
 800ea50:	4888      	ldr	r0, [pc, #544]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ea52:	f7f6 ff67 	bl	8005924 <assert_failed>
 800ea56:	e684      	b.n	800e762 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea58:	4a87      	ldr	r2, [pc, #540]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ea62:	f7fa fc91 	bl	8009388 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea66:	4e84      	ldr	r6, [pc, #528]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800ea68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea6a:	e004      	b.n	800ea76 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea6c:	f7fa fc8c 	bl	8009388 <HAL_GetTick>
 800ea70:	1b40      	subs	r0, r0, r5
 800ea72:	2864      	cmp	r0, #100	; 0x64
 800ea74:	d820      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea76:	6833      	ldr	r3, [r6, #0]
 800ea78:	039a      	lsls	r2, r3, #14
 800ea7a:	d5f7      	bpl.n	800ea6c <HAL_RCC_OscConfig+0x334>
 800ea7c:	e69d      	b.n	800e7ba <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea7e:	4a7e      	ldr	r2, [pc, #504]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
 800ea80:	6921      	ldr	r1, [r4, #16]
 800ea82:	6813      	ldr	r3, [r2, #0]
 800ea84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ea88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ea8c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	071a      	lsls	r2, r3, #28
 800ea92:	f57f aec9 	bpl.w	800e828 <HAL_RCC_OscConfig+0xf0>
 800ea96:	e6f2      	b.n	800e87e <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800ea98:	6833      	ldr	r3, [r6, #0]
 800ea9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800eaa0:	f7fa fc72 	bl	8009388 <HAL_GetTick>
 800eaa4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eaa6:	6833      	ldr	r3, [r6, #0]
 800eaa8:	05d9      	lsls	r1, r3, #23
 800eaaa:	f53f aed4 	bmi.w	800e856 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eaae:	f7fa fc6b 	bl	8009388 <HAL_GetTick>
 800eab2:	1bc0      	subs	r0, r0, r7
 800eab4:	2864      	cmp	r0, #100	; 0x64
 800eab6:	d9f6      	bls.n	800eaa6 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800eab8:	2003      	movs	r0, #3
}
 800eaba:	b002      	add	sp, #8
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eac0:	4d6d      	ldr	r5, [pc, #436]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
 800eac2:	682b      	ldr	r3, [r5, #0]
 800eac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eac8:	602b      	str	r3, [r5, #0]
 800eaca:	682b      	ldr	r3, [r5, #0]
 800eacc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ead0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ead2:	f7fa fc59 	bl	8009388 <HAL_GetTick>
 800ead6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ead8:	e004      	b.n	800eae4 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eada:	f7fa fc55 	bl	8009388 <HAL_GetTick>
 800eade:	1b80      	subs	r0, r0, r6
 800eae0:	2864      	cmp	r0, #100	; 0x64
 800eae2:	d8e9      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	039b      	lsls	r3, r3, #14
 800eae8:	d4f7      	bmi.n	800eada <HAL_RCC_OscConfig+0x3a2>
 800eaea:	e666      	b.n	800e7ba <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaec:	4e62      	ldr	r6, [pc, #392]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaf2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800eaf4:	f023 0301 	bic.w	r3, r3, #1
 800eaf8:	6733      	str	r3, [r6, #112]	; 0x70
 800eafa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800eafc:	f023 0304 	bic.w	r3, r3, #4
 800eb00:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eb02:	f7fa fc41 	bl	8009388 <HAL_GetTick>
 800eb06:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb08:	e004      	b.n	800eb14 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb0a:	f7fa fc3d 	bl	8009388 <HAL_GetTick>
 800eb0e:	1bc0      	subs	r0, r0, r7
 800eb10:	4540      	cmp	r0, r8
 800eb12:	d8d1      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb14:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800eb16:	079b      	lsls	r3, r3, #30
 800eb18:	d4f7      	bmi.n	800eb0a <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	f43f aecb 	beq.w	800e8b6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb20:	4a55      	ldr	r2, [pc, #340]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
 800eb22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800eb24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb28:	6413      	str	r3, [r2, #64]	; 0x40
 800eb2a:	e6c4      	b.n	800e8b6 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800eb2c:	682b      	ldr	r3, [r5, #0]
 800eb2e:	f023 0301 	bic.w	r3, r3, #1
 800eb32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eb34:	f7fa fc28 	bl	8009388 <HAL_GetTick>
 800eb38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb3a:	e004      	b.n	800eb46 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb3c:	f7fa fc24 	bl	8009388 <HAL_GetTick>
 800eb40:	1b80      	subs	r0, r0, r6
 800eb42:	2802      	cmp	r0, #2
 800eb44:	d8b8      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb46:	682b      	ldr	r3, [r5, #0]
 800eb48:	0799      	lsls	r1, r3, #30
 800eb4a:	d4f7      	bmi.n	800eb3c <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	e669      	b.n	800e824 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb50:	4a49      	ldr	r2, [pc, #292]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
 800eb52:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800eb54:	f043 0301 	orr.w	r3, r3, #1
 800eb58:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eb5a:	f7fa fc15 	bl	8009388 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb5e:	4f46      	ldr	r7, [pc, #280]	; (800ec78 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb60:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800eb64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb66:	e004      	b.n	800eb72 <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb68:	f7fa fc0e 	bl	8009388 <HAL_GetTick>
 800eb6c:	1b80      	subs	r0, r0, r6
 800eb6e:	4540      	cmp	r0, r8
 800eb70:	d8a2      	bhi.n	800eab8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb74:	079a      	lsls	r2, r3, #30
 800eb76:	d5f7      	bpl.n	800eb68 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800eb78:	2d00      	cmp	r5, #0
 800eb7a:	f43f ae9c 	beq.w	800e8b6 <HAL_RCC_OscConfig+0x17e>
 800eb7e:	e7cf      	b.n	800eb20 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb80:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800eb82:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb84:	f43f af03 	beq.w	800e98e <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb8c:	69e1      	ldr	r1, [r4, #28]
 800eb8e:	428b      	cmp	r3, r1
 800eb90:	f47f af12 	bne.w	800e9b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eb94:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb98:	6a21      	ldr	r1, [r4, #32]
 800eb9a:	428b      	cmp	r3, r1
 800eb9c:	f47f af0c 	bne.w	800e9b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800eba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eba6:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eba8:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800ebac:	f47f af04 	bne.w	800e9b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ebb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebb2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800ebb6:	085b      	lsrs	r3, r3, #1
 800ebb8:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ebba:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800ebbe:	f47f aefb 	bne.w	800e9b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ebc2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800ebc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ebc8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800ebcc:	f47f aef4 	bne.w	800e9b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ebd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ebd2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ebd6:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800ebda:	bf14      	ite	ne
 800ebdc:	2001      	movne	r0, #1
 800ebde:	2000      	moveq	r0, #0
 800ebe0:	e6d5      	b.n	800e98e <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800ebe2:	f240 2156 	movw	r1, #598	; 0x256
 800ebe6:	4823      	ldr	r0, [pc, #140]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ebe8:	f7f6 fe9c 	bl	8005924 <assert_failed>
 800ebec:	e68e      	b.n	800e90c <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ebee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	e731      	b.n	800ea62 <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebfe:	f042 0204 	orr.w	r2, r2, #4
 800ec02:	671a      	str	r2, [r3, #112]	; 0x70
 800ec04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec06:	f042 0201 	orr.w	r2, r2, #1
 800ec0a:	671a      	str	r2, [r3, #112]	; 0x70
 800ec0c:	e7a5      	b.n	800eb5a <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ec0e:	f240 2155 	movw	r1, #597	; 0x255
 800ec12:	4818      	ldr	r0, [pc, #96]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ec14:	f7f6 fe86 	bl	8005924 <assert_failed>
 800ec18:	e66d      	b.n	800e8f6 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ec1a:	f44f 7115 	mov.w	r1, #596	; 0x254
 800ec1e:	4815      	ldr	r0, [pc, #84]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ec20:	f7f6 fe80 	bl	8005924 <assert_failed>
 800ec24:	e661      	b.n	800e8ea <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ec26:	f240 2153 	movw	r1, #595	; 0x253
 800ec2a:	4812      	ldr	r0, [pc, #72]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ec2c:	f7f6 fe7a 	bl	8005924 <assert_failed>
 800ec30:	e656      	b.n	800e8e0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ec3a:	f7fa fba5 	bl	8009388 <HAL_GetTick>
 800ec3e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec40:	e005      	b.n	800ec4e <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec42:	f7fa fba1 	bl	8009388 <HAL_GetTick>
 800ec46:	1b00      	subs	r0, r0, r4
 800ec48:	2802      	cmp	r0, #2
 800ec4a:	f63f af35 	bhi.w	800eab8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec4e:	682b      	ldr	r3, [r5, #0]
 800ec50:	019b      	lsls	r3, r3, #6
 800ec52:	d4f6      	bmi.n	800ec42 <HAL_RCC_OscConfig+0x50a>
 800ec54:	e69a      	b.n	800e98c <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800ec56:	2001      	movs	r0, #1
}
 800ec58:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ec5a:	f240 2159 	movw	r1, #601	; 0x259
 800ec5e:	4805      	ldr	r0, [pc, #20]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ec60:	f7f6 fe60 	bl	8005924 <assert_failed>
 800ec64:	e65c      	b.n	800e920 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ec66:	f240 2157 	movw	r1, #599	; 0x257
 800ec6a:	4802      	ldr	r0, [pc, #8]	; (800ec74 <HAL_RCC_OscConfig+0x53c>)
 800ec6c:	f7f6 fe5a 	bl	8005924 <assert_failed>
 800ec70:	e651      	b.n	800e916 <HAL_RCC_OscConfig+0x1de>
 800ec72:	bf00      	nop
 800ec74:	0802e49c 	.word	0x0802e49c
 800ec78:	40023800 	.word	0x40023800

0800ec7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec7c:	4916      	ldr	r1, [pc, #88]	; (800ecd8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800ec7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec80:	688b      	ldr	r3, [r1, #8]
 800ec82:	f003 030c 	and.w	r3, r3, #12
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	d01b      	beq.n	800ecc2 <HAL_RCC_GetSysClockFreq+0x46>
 800ec8a:	2b08      	cmp	r3, #8
 800ec8c:	d117      	bne.n	800ecbe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec8e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec90:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec96:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ec98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ec9c:	d113      	bne.n	800ecc6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ec9e:	480f      	ldr	r0, [pc, #60]	; (800ecdc <HAL_RCC_GetSysClockFreq+0x60>)
 800eca0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800eca4:	fba1 0100 	umull	r0, r1, r1, r0
 800eca8:	f7f1 fb82 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ecac:	4b0a      	ldr	r3, [pc, #40]	; (800ecd8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ecb8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ecbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ecbe:	4807      	ldr	r0, [pc, #28]	; (800ecdc <HAL_RCC_GetSysClockFreq+0x60>)
}
 800ecc0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ecc2:	4807      	ldr	r0, [pc, #28]	; (800ece0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ecc4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ecc6:	4806      	ldr	r0, [pc, #24]	; (800ece0 <HAL_RCC_GetSysClockFreq+0x64>)
 800ecc8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800eccc:	2300      	movs	r3, #0
 800ecce:	fba1 0100 	umull	r0, r1, r1, r0
 800ecd2:	f7f1 fb6d 	bl	80003b0 <__aeabi_uldivmod>
 800ecd6:	e7e9      	b.n	800ecac <HAL_RCC_GetSysClockFreq+0x30>
 800ecd8:	40023800 	.word	0x40023800
 800ecdc:	00f42400 	.word	0x00f42400
 800ece0:	007a1200 	.word	0x007a1200

0800ece4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ece4:	2800      	cmp	r0, #0
 800ece6:	f000 80f6 	beq.w	800eed6 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ecea:	6803      	ldr	r3, [r0, #0]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	2b0e      	cmp	r3, #14
{
 800ecf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ecf8:	f200 80d6 	bhi.w	800eea8 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ecfc:	2d0f      	cmp	r5, #15
 800ecfe:	f200 80c3 	bhi.w	800ee88 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ed02:	4a81      	ldr	r2, [pc, #516]	; (800ef08 <HAL_RCC_ClockConfig+0x224>)
 800ed04:	6813      	ldr	r3, [r2, #0]
 800ed06:	f003 030f 	and.w	r3, r3, #15
 800ed0a:	42ab      	cmp	r3, r5
 800ed0c:	d36f      	bcc.n	800edee <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	0798      	lsls	r0, r3, #30
 800ed12:	d530      	bpl.n	800ed76 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed14:	0759      	lsls	r1, r3, #29
 800ed16:	d504      	bpl.n	800ed22 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ed18:	497c      	ldr	r1, [pc, #496]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ed1a:	688a      	ldr	r2, [r1, #8]
 800ed1c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800ed20:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed22:	071a      	lsls	r2, r3, #28
 800ed24:	d504      	bpl.n	800ed30 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ed26:	4979      	ldr	r1, [pc, #484]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ed28:	688a      	ldr	r2, [r1, #8]
 800ed2a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800ed2e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ed30:	68a1      	ldr	r1, [r4, #8]
 800ed32:	f021 0220 	bic.w	r2, r1, #32
 800ed36:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800ed3a:	2a90      	cmp	r2, #144	; 0x90
 800ed3c:	bf18      	it	ne
 800ed3e:	2800      	cmpne	r0, #0
 800ed40:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800ed44:	bf14      	ite	ne
 800ed46:	2201      	movne	r2, #1
 800ed48:	2200      	moveq	r2, #0
 800ed4a:	29f0      	cmp	r1, #240	; 0xf0
 800ed4c:	bf0c      	ite	eq
 800ed4e:	2200      	moveq	r2, #0
 800ed50:	f002 0201 	andne.w	r2, r2, #1
 800ed54:	28a0      	cmp	r0, #160	; 0xa0
 800ed56:	bf0c      	ite	eq
 800ed58:	2200      	moveq	r2, #0
 800ed5a:	f002 0201 	andne.w	r2, r2, #1
 800ed5e:	b122      	cbz	r2, 800ed6a <HAL_RCC_ClockConfig+0x86>
 800ed60:	f021 0210 	bic.w	r2, r1, #16
 800ed64:	2ac0      	cmp	r2, #192	; 0xc0
 800ed66:	f040 80b8 	bne.w	800eeda <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed6a:	4868      	ldr	r0, [pc, #416]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ed6c:	6882      	ldr	r2, [r0, #8]
 800ed6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ed72:	4311      	orrs	r1, r2
 800ed74:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ed76:	07df      	lsls	r7, r3, #31
 800ed78:	d526      	bpl.n	800edc8 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ed7a:	6863      	ldr	r3, [r4, #4]
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	f200 80a1 	bhi.w	800eec4 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed82:	4a62      	ldr	r2, [pc, #392]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed84:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed86:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ed88:	f000 8098 	beq.w	800eebc <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	f000 8091 	beq.w	800eeb4 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed92:	0791      	lsls	r1, r2, #30
 800ed94:	d528      	bpl.n	800ede8 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed96:	4e5d      	ldr	r6, [pc, #372]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed9c:	68b2      	ldr	r2, [r6, #8]
 800ed9e:	f022 0203 	bic.w	r2, r2, #3
 800eda2:	4313      	orrs	r3, r2
 800eda4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800eda6:	f7fa faef 	bl	8009388 <HAL_GetTick>
 800edaa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800edac:	e005      	b.n	800edba <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800edae:	f7fa faeb 	bl	8009388 <HAL_GetTick>
 800edb2:	1bc0      	subs	r0, r0, r7
 800edb4:	4540      	cmp	r0, r8
 800edb6:	f200 808c 	bhi.w	800eed2 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800edba:	68b3      	ldr	r3, [r6, #8]
 800edbc:	6862      	ldr	r2, [r4, #4]
 800edbe:	f003 030c 	and.w	r3, r3, #12
 800edc2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800edc6:	d1f2      	bne.n	800edae <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800edc8:	4a4f      	ldr	r2, [pc, #316]	; (800ef08 <HAL_RCC_ClockConfig+0x224>)
 800edca:	6813      	ldr	r3, [r2, #0]
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	42ab      	cmp	r3, r5
 800edd2:	d91a      	bls.n	800ee0a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edd4:	6813      	ldr	r3, [r2, #0]
 800edd6:	f023 030f 	bic.w	r3, r3, #15
 800edda:	432b      	orrs	r3, r5
 800eddc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edde:	6813      	ldr	r3, [r2, #0]
 800ede0:	f003 030f 	and.w	r3, r3, #15
 800ede4:	42ab      	cmp	r3, r5
 800ede6:	d010      	beq.n	800ee0a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800ede8:	2001      	movs	r0, #1
}
 800edea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edee:	6813      	ldr	r3, [r2, #0]
 800edf0:	f023 030f 	bic.w	r3, r3, #15
 800edf4:	432b      	orrs	r3, r5
 800edf6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edf8:	6813      	ldr	r3, [r2, #0]
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	42ab      	cmp	r3, r5
 800ee00:	d1f2      	bne.n	800ede8 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee02:	6823      	ldr	r3, [r4, #0]
 800ee04:	0798      	lsls	r0, r3, #30
 800ee06:	d485      	bmi.n	800ed14 <HAL_RCC_ClockConfig+0x30>
 800ee08:	e7b5      	b.n	800ed76 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	075a      	lsls	r2, r3, #29
 800ee0e:	d512      	bpl.n	800ee36 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800ee10:	68e1      	ldr	r1, [r4, #12]
 800ee12:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800ee16:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800ee1a:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800ee1e:	bf18      	it	ne
 800ee20:	2a00      	cmpne	r2, #0
 800ee22:	d002      	beq.n	800ee2a <HAL_RCC_ClockConfig+0x146>
 800ee24:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800ee28:	d15f      	bne.n	800eeea <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ee2a:	4838      	ldr	r0, [pc, #224]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ee2c:	6882      	ldr	r2, [r0, #8]
 800ee2e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800ee32:	430a      	orrs	r2, r1
 800ee34:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee36:	071b      	lsls	r3, r3, #28
 800ee38:	d513      	bpl.n	800ee62 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ee3a:	6922      	ldr	r2, [r4, #16]
 800ee3c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800ee40:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800ee44:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800ee48:	bf18      	it	ne
 800ee4a:	2b00      	cmpne	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <HAL_RCC_ClockConfig+0x170>
 800ee4e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800ee52:	d152      	bne.n	800eefa <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ee54:	492d      	ldr	r1, [pc, #180]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ee56:	688b      	ldr	r3, [r1, #8]
 800ee58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ee5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ee60:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee62:	f7ff ff0b 	bl	800ec7c <HAL_RCC_GetSysClockFreq>
 800ee66:	4a29      	ldr	r2, [pc, #164]	; (800ef0c <HAL_RCC_ClockConfig+0x228>)
 800ee68:	4c29      	ldr	r4, [pc, #164]	; (800ef10 <HAL_RCC_ClockConfig+0x22c>)
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800ee6e:	4829      	ldr	r0, [pc, #164]	; (800ef14 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee70:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ee74:	4928      	ldr	r1, [pc, #160]	; (800ef18 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800ee76:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ee78:	5ca2      	ldrb	r2, [r4, r2]
 800ee7a:	40d3      	lsrs	r3, r2
 800ee7c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800ee7e:	f7f9 f9f9 	bl	8008274 <HAL_InitTick>
  return HAL_OK;
 800ee82:	2000      	movs	r0, #0
}
 800ee84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ee88:	f240 21de 	movw	r1, #734	; 0x2de
 800ee8c:	4823      	ldr	r0, [pc, #140]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800ee8e:	f7f6 fd49 	bl	8005924 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee92:	4b1d      	ldr	r3, [pc, #116]	; (800ef08 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800ee94:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee96:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee98:	6819      	ldr	r1, [r3, #0]
 800ee9a:	f021 010f 	bic.w	r1, r1, #15
 800ee9e:	430d      	orrs	r5, r1
 800eea0:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eea2:	681b      	ldr	r3, [r3, #0]
}
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800eea8:	f240 21dd 	movw	r1, #733	; 0x2dd
 800eeac:	481b      	ldr	r0, [pc, #108]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800eeae:	f7f6 fd39 	bl	8005924 <assert_failed>
 800eeb2:	e723      	b.n	800ecfc <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eeb4:	0190      	lsls	r0, r2, #6
 800eeb6:	f53f af6e 	bmi.w	800ed96 <HAL_RCC_ClockConfig+0xb2>
 800eeba:	e795      	b.n	800ede8 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eebc:	0396      	lsls	r6, r2, #14
 800eebe:	f53f af6a 	bmi.w	800ed96 <HAL_RCC_ClockConfig+0xb2>
 800eec2:	e791      	b.n	800ede8 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800eec4:	f240 3109 	movw	r1, #777	; 0x309
 800eec8:	4814      	ldr	r0, [pc, #80]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800eeca:	f7f6 fd2b 	bl	8005924 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	e757      	b.n	800ed82 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800eed2:	2003      	movs	r0, #3
 800eed4:	e789      	b.n	800edea <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800eed6:	2001      	movs	r0, #1
}
 800eed8:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800eeda:	f240 3102 	movw	r1, #770	; 0x302
 800eede:	480f      	ldr	r0, [pc, #60]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800eee0:	f7f6 fd20 	bl	8005924 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eee4:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	e73f      	b.n	800ed6a <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800eeea:	f240 3146 	movw	r1, #838	; 0x346
 800eeee:	480b      	ldr	r0, [pc, #44]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800eef0:	f7f6 fd18 	bl	8005924 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eef4:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	e797      	b.n	800ee2a <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800eefa:	f240 314d 	movw	r1, #845	; 0x34d
 800eefe:	4807      	ldr	r0, [pc, #28]	; (800ef1c <HAL_RCC_ClockConfig+0x238>)
 800ef00:	f7f6 fd10 	bl	8005924 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ef04:	6922      	ldr	r2, [r4, #16]
 800ef06:	e7a5      	b.n	800ee54 <HAL_RCC_ClockConfig+0x170>
 800ef08:	40023c00 	.word	0x40023c00
 800ef0c:	40023800 	.word	0x40023800
 800ef10:	0802daa8 	.word	0x0802daa8
 800ef14:	200002f8 	.word	0x200002f8
 800ef18:	20000298 	.word	0x20000298
 800ef1c:	0802e49c 	.word	0x0802e49c

0800ef20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800ef20:	4b01      	ldr	r3, [pc, #4]	; (800ef28 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800ef22:	6818      	ldr	r0, [r3, #0]
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	20000298 	.word	0x20000298

0800ef2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ef2c:	4b04      	ldr	r3, [pc, #16]	; (800ef40 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800ef2e:	4905      	ldr	r1, [pc, #20]	; (800ef44 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	4a05      	ldr	r2, [pc, #20]	; (800ef48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ef34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800ef38:	6808      	ldr	r0, [r1, #0]
 800ef3a:	5cd3      	ldrb	r3, [r2, r3]
}
 800ef3c:	40d8      	lsrs	r0, r3
 800ef3e:	4770      	bx	lr
 800ef40:	40023800 	.word	0x40023800
 800ef44:	20000298 	.word	0x20000298
 800ef48:	0802dab8 	.word	0x0802dab8

0800ef4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ef4c:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ef4e:	4905      	ldr	r1, [pc, #20]	; (800ef64 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	4a05      	ldr	r2, [pc, #20]	; (800ef68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ef54:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800ef58:	6808      	ldr	r0, [r1, #0]
 800ef5a:	5cd3      	ldrb	r3, [r2, r3]
}
 800ef5c:	40d8      	lsrs	r0, r3
 800ef5e:	4770      	bx	lr
 800ef60:	40023800 	.word	0x40023800
 800ef64:	20000298 	.word	0x20000298
 800ef68:	0802dab8 	.word	0x0802dab8

0800ef6c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef6c:	4b0e      	ldr	r3, [pc, #56]	; (800efa8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ef6e:	220f      	movs	r2, #15
 800ef70:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ef72:	689a      	ldr	r2, [r3, #8]
 800ef74:	f002 0203 	and.w	r2, r2, #3
 800ef78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ef7a:	689a      	ldr	r2, [r3, #8]
 800ef7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ef80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800ef88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	08db      	lsrs	r3, r3, #3
{
 800ef8e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef94:	4c05      	ldr	r4, [pc, #20]	; (800efac <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ef96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef98:	6823      	ldr	r3, [r4, #0]
}
 800ef9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ef9e:	f003 030f 	and.w	r3, r3, #15
 800efa2:	600b      	str	r3, [r1, #0]
}
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	40023800 	.word	0x40023800
 800efac:	40023c00 	.word	0x40023c00

0800efb0 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800efb0:	4a56      	ldr	r2, [pc, #344]	; (800f10c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800efb2:	6803      	ldr	r3, [r0, #0]
 800efb4:	401a      	ands	r2, r3
{
 800efb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efba:	4604      	mov	r4, r0
 800efbc:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	f000 833f 	beq.w	800f642 <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800efc4:	f013 0601 	ands.w	r6, r3, #1
 800efc8:	d00f      	beq.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800efca:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800efcc:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800efd0:	f040 8342 	bne.w	800f658 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800efd4:	4a4e      	ldr	r2, [pc, #312]	; (800f110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800efd6:	6891      	ldr	r1, [r2, #8]
 800efd8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800efdc:	6091      	str	r1, [r2, #8]
 800efde:	6891      	ldr	r1, [r2, #8]
 800efe0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800efe2:	fab6 f686 	clz	r6, r6
 800efe6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800efe8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800efea:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800efee:	d014      	beq.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800eff0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800eff2:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800eff6:	f040 838d 	bne.w	800f714 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800effa:	4945      	ldr	r1, [pc, #276]	; (800f110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800effc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f000:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800f004:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f008:	ea42 0205 	orr.w	r2, r2, r5
 800f00c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f010:	f000 831f 	beq.w	800f652 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f014:	fab5 f585 	clz	r5, r5
 800f018:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f01a:	02d9      	lsls	r1, r3, #11
 800f01c:	d514      	bpl.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f01e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f020:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800f024:	f040 837d 	bne.w	800f722 <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f028:	4839      	ldr	r0, [pc, #228]	; (800f110 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f02a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f02e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f032:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f036:	ea42 0201 	orr.w	r2, r2, r1
 800f03a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f03e:	f000 8306 	beq.w	800f64e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800f042:	2900      	cmp	r1, #0
 800f044:	bf08      	it	eq
 800f046:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800f048:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800f04c:	bf18      	it	ne
 800f04e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f050:	069a      	lsls	r2, r3, #26
 800f052:	f140 8099 	bpl.w	800f188 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f056:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f058:	482e      	ldr	r0, [pc, #184]	; (800f114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800f05a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f05e:	bf18      	it	ne
 800f060:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800f064:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800f068:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800f06c:	bf14      	ite	ne
 800f06e:	2301      	movne	r3, #1
 800f070:	2300      	moveq	r3, #0
 800f072:	4287      	cmp	r7, r0
 800f074:	bf0c      	ite	eq
 800f076:	2300      	moveq	r3, #0
 800f078:	f003 0301 	andne.w	r3, r3, #1
 800f07c:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800f080:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f084:	4287      	cmp	r7, r0
 800f086:	bf0c      	ite	eq
 800f088:	2300      	moveq	r3, #0
 800f08a:	f003 0301 	andne.w	r3, r3, #1
 800f08e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f092:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800f096:	4281      	cmp	r1, r0
 800f098:	bf0c      	ite	eq
 800f09a:	2300      	moveq	r3, #0
 800f09c:	f003 0301 	andne.w	r3, r3, #1
 800f0a0:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800f0a4:	4287      	cmp	r7, r0
 800f0a6:	bf0c      	ite	eq
 800f0a8:	2300      	moveq	r3, #0
 800f0aa:	f003 0301 	andne.w	r3, r3, #1
 800f0ae:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800f0b2:	4281      	cmp	r1, r0
 800f0b4:	bf0c      	ite	eq
 800f0b6:	2300      	moveq	r3, #0
 800f0b8:	f003 0301 	andne.w	r3, r3, #1
 800f0bc:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f0c0:	4281      	cmp	r1, r0
 800f0c2:	bf0c      	ite	eq
 800f0c4:	2300      	moveq	r3, #0
 800f0c6:	f003 0301 	andne.w	r3, r3, #1
 800f0ca:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800f0ce:	4281      	cmp	r1, r0
 800f0d0:	bf0c      	ite	eq
 800f0d2:	2300      	moveq	r3, #0
 800f0d4:	f003 0301 	andne.w	r3, r3, #1
 800f0d8:	b12b      	cbz	r3, 800f0e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f0da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f0de:	4b0e      	ldr	r3, [pc, #56]	; (800f118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	f040 8438 	bne.w	800f956 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	; (800f110 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f0e8:	4f0c      	ldr	r7, [pc, #48]	; (800f11c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800f0ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f0f0:	641a      	str	r2, [r3, #64]	; 0x40
 800f0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f102:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f104:	f7fa f940 	bl	8009388 <HAL_GetTick>
 800f108:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f10a:	e010      	b.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800f10c:	1dfffff9 	.word	0x1dfffff9
 800f110:	40023800 	.word	0x40023800
 800f114:	00020300 	.word	0x00020300
 800f118:	001c0300 	.word	0x001c0300
 800f11c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f120:	f7fa f932 	bl	8009388 <HAL_GetTick>
 800f124:	eba0 0008 	sub.w	r0, r0, r8
 800f128:	2864      	cmp	r0, #100	; 0x64
 800f12a:	f200 8286 	bhi.w	800f63a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	05db      	lsls	r3, r3, #23
 800f132:	d5f5      	bpl.n	800f120 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f134:	4fb0      	ldr	r7, [pc, #704]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f136:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f138:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f13a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f13e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800f142:	d011      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800f144:	4291      	cmp	r1, r2
 800f146:	d00f      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f148:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f14a:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f14c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800f150:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800f154:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f156:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800f158:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800f15c:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f15e:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f160:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f162:	07d0      	lsls	r0, r2, #31
 800f164:	f100 836c 	bmi.w	800f840 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f168:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800f16c:	f000 82c9 	beq.w	800f702 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800f170:	49a1      	ldr	r1, [pc, #644]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f172:	688a      	ldr	r2, [r1, #8]
 800f174:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f178:	608a      	str	r2, [r1, #8]
 800f17a:	4a9f      	ldr	r2, [pc, #636]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f17c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f180:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f182:	430b      	orrs	r3, r1
 800f184:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	06da      	lsls	r2, r3, #27
 800f18a:	d510      	bpl.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f18c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800f18e:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800f192:	f040 82db 	bne.w	800f74c <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f196:	4a98      	ldr	r2, [pc, #608]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f198:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800f19c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800f1a0:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800f1a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f1a8:	4339      	orrs	r1, r7
 800f1aa:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f1ae:	045f      	lsls	r7, r3, #17
 800f1b0:	d50f      	bpl.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f1b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f1b4:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800f1b8:	d003      	beq.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800f1ba:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800f1be:	f040 8299 	bne.w	800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f1c2:	488d      	ldr	r0, [pc, #564]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f1d2:	0418      	lsls	r0, r3, #16
 800f1d4:	d50f      	bpl.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f1d6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f1d8:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800f1dc:	d003      	beq.n	800f1e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800f1de:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800f1e2:	f040 826a 	bne.w	800f6ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f1e6:	4884      	ldr	r0, [pc, #528]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f1e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f1ec:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f1f0:	430a      	orrs	r2, r1
 800f1f2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f1f6:	03d9      	lsls	r1, r3, #15
 800f1f8:	d50f      	bpl.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f1fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f1fc:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800f200:	d003      	beq.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f202:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800f206:	f040 8260 	bne.w	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f20a:	487b      	ldr	r0, [pc, #492]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f20c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f210:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f214:	430a      	orrs	r2, r1
 800f216:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f21a:	039a      	lsls	r2, r3, #14
 800f21c:	d50f      	bpl.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f21e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800f220:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800f224:	d003      	beq.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800f226:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800f22a:	f040 825b 	bne.w	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f22e:	4872      	ldr	r0, [pc, #456]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f230:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f234:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f238:	430a      	orrs	r2, r1
 800f23a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f23e:	065f      	lsls	r7, r3, #25
 800f240:	d50b      	bpl.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f242:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f244:	2903      	cmp	r1, #3
 800f246:	f200 82b3 	bhi.w	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f24a:	486b      	ldr	r0, [pc, #428]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f24c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f250:	f022 0203 	bic.w	r2, r2, #3
 800f254:	430a      	orrs	r2, r1
 800f256:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f25a:	0618      	lsls	r0, r3, #24
 800f25c:	d50c      	bpl.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f25e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f260:	f031 020c 	bics.w	r2, r1, #12
 800f264:	f040 82b4 	bne.w	800f7d0 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f268:	4863      	ldr	r0, [pc, #396]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f26a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f26e:	f022 020c 	bic.w	r2, r2, #12
 800f272:	430a      	orrs	r2, r1
 800f274:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f278:	05d9      	lsls	r1, r3, #23
 800f27a:	d50c      	bpl.n	800f296 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f27c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f27e:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800f282:	f040 82ad 	bne.w	800f7e0 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f286:	485c      	ldr	r0, [pc, #368]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f288:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f28c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f290:	430a      	orrs	r2, r1
 800f292:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f296:	059a      	lsls	r2, r3, #22
 800f298:	d50c      	bpl.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f29a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800f29c:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800f2a0:	f040 82a6 	bne.w	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f2a4:	4854      	ldr	r0, [pc, #336]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f2b4:	055f      	lsls	r7, r3, #21
 800f2b6:	d50c      	bpl.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f2b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f2ba:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800f2be:	f040 829f 	bne.w	800f800 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f2c2:	484d      	ldr	r0, [pc, #308]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f2d2:	0518      	lsls	r0, r3, #20
 800f2d4:	d50c      	bpl.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f2d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f2d8:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800f2dc:	f040 8298 	bne.w	800f810 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f2e0:	4845      	ldr	r0, [pc, #276]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f2e2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f2e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f2ea:	430a      	orrs	r2, r1
 800f2ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f2f0:	04d9      	lsls	r1, r3, #19
 800f2f2:	d50c      	bpl.n	800f30e <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f2f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f2f6:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800f2fa:	f040 8291 	bne.w	800f820 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f2fe:	483e      	ldr	r0, [pc, #248]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f300:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f304:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f308:	430a      	orrs	r2, r1
 800f30a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f30e:	049a      	lsls	r2, r3, #18
 800f310:	d50c      	bpl.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f312:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f314:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800f318:	f040 828a 	bne.w	800f830 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f31c:	4836      	ldr	r0, [pc, #216]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f31e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f322:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f326:	430a      	orrs	r2, r1
 800f328:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f32c:	025f      	lsls	r7, r3, #9
 800f32e:	d50c      	bpl.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f330:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f332:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800f336:	f040 8222 	bne.w	800f77e <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f33a:	482f      	ldr	r0, [pc, #188]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f33c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f340:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f344:	430a      	orrs	r2, r1
 800f346:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f34a:	0298      	lsls	r0, r3, #10
 800f34c:	d510      	bpl.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f34e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800f350:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800f354:	f040 821b 	bne.w	800f78e <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f358:	4827      	ldr	r0, [pc, #156]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800f35a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f35e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800f362:	bf08      	it	eq
 800f364:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f366:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800f36a:	430a      	orrs	r2, r1
 800f36c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800f370:	f013 0f08 	tst.w	r3, #8
 800f374:	bf18      	it	ne
 800f376:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f378:	0359      	lsls	r1, r3, #13
 800f37a:	d50c      	bpl.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f37c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800f37e:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800f382:	f040 821d 	bne.w	800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f386:	481c      	ldr	r0, [pc, #112]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f388:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f38c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f390:	430a      	orrs	r2, r1
 800f392:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f396:	021a      	lsls	r2, r3, #8
 800f398:	d50d      	bpl.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f39a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f39e:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800f3a2:	f040 81fc 	bne.w	800f79e <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f3a6:	4814      	ldr	r0, [pc, #80]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f3a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f3ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f3b6:	015f      	lsls	r7, r3, #5
 800f3b8:	d50d      	bpl.n	800f3d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f3ba:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f3be:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800f3c2:	f040 81ca 	bne.w	800f75a <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f3c6:	480c      	ldr	r0, [pc, #48]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f3c8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800f3cc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f3d6:	0118      	lsls	r0, r3, #4
 800f3d8:	d510      	bpl.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f3da:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800f3de:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800f3e2:	f040 81c3 	bne.w	800f76c <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f3e6:	4804      	ldr	r0, [pc, #16]	; (800f3f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800f3e8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800f3ec:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800f3f0:	430a      	orrs	r2, r1
 800f3f2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800f3f6:	e001      	b.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800f3f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f3fc:	00d9      	lsls	r1, r3, #3
 800f3fe:	d50d      	bpl.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f400:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f404:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800f408:	f040 8198 	bne.w	800f73c <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f40c:	49b3      	ldr	r1, [pc, #716]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f40e:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800f412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f416:	4313      	orrs	r3, r2
 800f418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f41c:	2e01      	cmp	r6, #1
 800f41e:	d003      	beq.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	019a      	lsls	r2, r3, #6
 800f424:	f140 8083 	bpl.w	800f52e <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f428:	4eac      	ldr	r6, [pc, #688]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f42a:	6833      	ldr	r3, [r6, #0]
 800f42c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f430:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f432:	f7f9 ffa9 	bl	8009388 <HAL_GetTick>
 800f436:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f438:	e005      	b.n	800f446 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f43a:	f7f9 ffa5 	bl	8009388 <HAL_GetTick>
 800f43e:	1bc0      	subs	r0, r0, r7
 800f440:	2864      	cmp	r0, #100	; 0x64
 800f442:	f200 80fa 	bhi.w	800f63a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f446:	6833      	ldr	r3, [r6, #0]
 800f448:	011b      	lsls	r3, r3, #4
 800f44a:	d4f6      	bmi.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f44c:	6863      	ldr	r3, [r4, #4]
 800f44e:	3b32      	subs	r3, #50	; 0x32
 800f450:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f454:	f200 816c 	bhi.w	800f730 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	07df      	lsls	r7, r3, #31
 800f45c:	d517      	bpl.n	800f48e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f45e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f460:	b9aa      	cbnz	r2, 800f48e <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f462:	68a7      	ldr	r7, [r4, #8]
 800f464:	1eba      	subs	r2, r7, #2
 800f466:	2a05      	cmp	r2, #5
 800f468:	f200 820c 	bhi.w	800f884 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f46c:	499b      	ldr	r1, [pc, #620]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f46e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f470:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f474:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f478:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800f47c:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800f480:	4332      	orrs	r2, r6
 800f482:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f486:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800f48a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f48e:	031e      	lsls	r6, r3, #12
 800f490:	f100 80e9 	bmi.w	800f666 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800f494:	02d8      	lsls	r0, r3, #11
 800f496:	d504      	bpl.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f498:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f49a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f49e:	f000 80e7 	beq.w	800f670 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f4a2:	01d9      	lsls	r1, r3, #7
 800f4a4:	d514      	bpl.n	800f4d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f4a6:	6927      	ldr	r7, [r4, #16]
 800f4a8:	2f03      	cmp	r7, #3
 800f4aa:	f200 81f9 	bhi.w	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f4ae:	498b      	ldr	r1, [pc, #556]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f4b0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f4b2:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f4b6:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f4ba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f4be:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800f4c2:	4332      	orrs	r2, r6
 800f4c4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800f4c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f4cc:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f4d0:	019a      	lsls	r2, r3, #6
 800f4d2:	d51a      	bpl.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f4d4:	6923      	ldr	r3, [r4, #16]
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	f200 81dc 	bhi.w	800f894 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f4dc:	68a3      	ldr	r3, [r4, #8]
 800f4de:	3b02      	subs	r3, #2
 800f4e0:	2b05      	cmp	r3, #5
 800f4e2:	f200 81ec 	bhi.w	800f8be <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f4e6:	68e2      	ldr	r2, [r4, #12]
 800f4e8:	1e93      	subs	r3, r2, #2
 800f4ea:	2b0d      	cmp	r3, #13
 800f4ec:	f200 81e0 	bhi.w	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	6861      	ldr	r1, [r4, #4]
 800f4f4:	041b      	lsls	r3, r3, #16
 800f4f6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800f4fa:	68a1      	ldr	r1, [r4, #8]
 800f4fc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f500:	4976      	ldr	r1, [pc, #472]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f502:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f506:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f50a:	4e74      	ldr	r6, [pc, #464]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f512:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f514:	f7f9 ff38 	bl	8009388 <HAL_GetTick>
 800f518:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f51a:	e005      	b.n	800f528 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800f51c:	f7f9 ff34 	bl	8009388 <HAL_GetTick>
 800f520:	1bc0      	subs	r0, r0, r7
 800f522:	2864      	cmp	r0, #100	; 0x64
 800f524:	f200 8089 	bhi.w	800f63a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f528:	6833      	ldr	r3, [r6, #0]
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	d5f6      	bpl.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800f52e:	2d01      	cmp	r5, #1
 800f530:	d003      	beq.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800f532:	2000      	movs	r0, #0
}
 800f534:	b003      	add	sp, #12
 800f536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800f53a:	4d68      	ldr	r5, [pc, #416]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f542:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f544:	f7f9 ff20 	bl	8009388 <HAL_GetTick>
 800f548:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f54a:	e004      	b.n	800f556 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f54c:	f7f9 ff1c 	bl	8009388 <HAL_GetTick>
 800f550:	1b80      	subs	r0, r0, r6
 800f552:	2864      	cmp	r0, #100	; 0x64
 800f554:	d871      	bhi.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800f556:	682b      	ldr	r3, [r5, #0]
 800f558:	009f      	lsls	r7, r3, #2
 800f55a:	d4f7      	bmi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f55c:	6963      	ldr	r3, [r4, #20]
 800f55e:	3b32      	subs	r3, #50	; 0x32
 800f560:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800f564:	f200 81b9 	bhi.w	800f8da <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	031d      	lsls	r5, r3, #12
 800f56c:	f140 81ad 	bpl.w	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800f570:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f572:	2a00      	cmp	r2, #0
 800f574:	f040 81a9 	bne.w	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f578:	69a3      	ldr	r3, [r4, #24]
 800f57a:	3b02      	subs	r3, #2
 800f57c:	2b0d      	cmp	r3, #13
 800f57e:	f200 81d5 	bhi.w	800f92c <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f584:	1e59      	subs	r1, r3, #1
 800f586:	291f      	cmp	r1, #31
 800f588:	f200 81c8 	bhi.w	800f91c <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f58c:	4a53      	ldr	r2, [pc, #332]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f58e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f592:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800f596:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f59a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f59e:	4303      	orrs	r3, r0
 800f5a0:	6960      	ldr	r0, [r4, #20]
 800f5a2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f5a6:	69a0      	ldr	r0, [r4, #24]
 800f5a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f5ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f5b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f5b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800f5b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f5bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	0299      	lsls	r1, r3, #10
 800f5c4:	d504      	bpl.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800f5c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f5c8:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800f5cc:	f000 818b 	beq.w	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f5d0:	071a      	lsls	r2, r3, #28
 800f5d2:	d522      	bpl.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f5d4:	69e3      	ldr	r3, [r4, #28]
 800f5d6:	3b02      	subs	r3, #2
 800f5d8:	2b05      	cmp	r3, #5
 800f5da:	f200 8199 	bhi.w	800f910 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f5de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f5e0:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800f5e4:	f040 81a8 	bne.w	800f938 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f5e8:	4a3c      	ldr	r2, [pc, #240]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f5ea:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f5ec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800f5f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800f5f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800f5f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f5fc:	430b      	orrs	r3, r1
 800f5fe:	69e1      	ldr	r1, [r4, #28]
 800f600:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800f604:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800f608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f60c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f610:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800f614:	4303      	orrs	r3, r0
 800f616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800f61a:	4c30      	ldr	r4, [pc, #192]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f622:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800f624:	f7f9 feb0 	bl	8009388 <HAL_GetTick>
 800f628:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	d480      	bmi.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800f630:	f7f9 feaa 	bl	8009388 <HAL_GetTick>
 800f634:	1b40      	subs	r0, r0, r5
 800f636:	2864      	cmp	r0, #100	; 0x64
 800f638:	d9f7      	bls.n	800f62a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800f63a:	2003      	movs	r0, #3
}
 800f63c:	b003      	add	sp, #12
 800f63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f642:	2172      	movs	r1, #114	; 0x72
 800f644:	4826      	ldr	r0, [pc, #152]	; (800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f646:	f7f6 f96d 	bl	8005924 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	e4ba      	b.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800f64e:	2601      	movs	r6, #1
 800f650:	e4fa      	b.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800f652:	2500      	movs	r5, #0
      plli2sused = 1;
 800f654:	2601      	movs	r6, #1
 800f656:	e4e0      	b.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800f658:	2178      	movs	r1, #120	; 0x78
 800f65a:	4821      	ldr	r0, [pc, #132]	; (800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f65c:	f7f6 f962 	bl	8005924 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f660:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	e4b6      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f666:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f668:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f66c:	f47f af12 	bne.w	800f494 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f670:	68e3      	ldr	r3, [r4, #12]
 800f672:	3b02      	subs	r3, #2
 800f674:	2b0d      	cmp	r3, #13
 800f676:	f200 80f7 	bhi.w	800f868 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f67c:	1e59      	subs	r1, r3, #1
 800f67e:	291f      	cmp	r1, #31
 800f680:	f200 80f8 	bhi.w	800f874 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800f684:	4a15      	ldr	r2, [pc, #84]	; (800f6dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800f686:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f68a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800f68e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f692:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800f696:	4303      	orrs	r3, r0
 800f698:	6860      	ldr	r0, [r4, #4]
 800f69a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f69e:	68e0      	ldr	r0, [r4, #12]
 800f6a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f6a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f6a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f6ac:	f023 031f 	bic.w	r3, r3, #31
 800f6b0:	430b      	orrs	r3, r1
 800f6b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f6b6:	6823      	ldr	r3, [r4, #0]
 800f6b8:	e6f3      	b.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800f6ba:	f240 1105 	movw	r1, #261	; 0x105
 800f6be:	4808      	ldr	r0, [pc, #32]	; (800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f6c0:	f7f6 f930 	bl	8005924 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f6c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	e58d      	b.n	800f1e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800f6ca:	f240 110f 	movw	r1, #271	; 0x10f
 800f6ce:	4804      	ldr	r0, [pc, #16]	; (800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800f6d0:	f7f6 f928 	bl	8005924 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f6d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	e597      	b.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f6da:	bf00      	nop
 800f6dc:	40023800 	.word	0x40023800
 800f6e0:	0802e4d4 	.word	0x0802e4d4
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800f6e4:	f240 1119 	movw	r1, #281	; 0x119
 800f6e8:	489e      	ldr	r0, [pc, #632]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6ea:	f7f6 f91b 	bl	8005924 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f6ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	e59c      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800f6f4:	21fb      	movs	r1, #251	; 0xfb
 800f6f6:	489b      	ldr	r0, [pc, #620]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f6f8:	f7f6 f914 	bl	8005924 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f6fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	e55f      	b.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f702:	4899      	ldr	r0, [pc, #612]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f704:	4999      	ldr	r1, [pc, #612]	; (800f96c <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800f706:	6882      	ldr	r2, [r0, #8]
 800f708:	4019      	ands	r1, r3
 800f70a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f70e:	430a      	orrs	r2, r1
 800f710:	6082      	str	r2, [r0, #8]
 800f712:	e532      	b.n	800f17a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800f714:	2188      	movs	r1, #136	; 0x88
 800f716:	4893      	ldr	r0, [pc, #588]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f718:	f7f6 f904 	bl	8005924 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f71c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	e46b      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800f722:	219c      	movs	r1, #156	; 0x9c
 800f724:	488f      	ldr	r0, [pc, #572]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f726:	f7f6 f8fd 	bl	8005924 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f72a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	e47b      	b.n	800f028 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800f730:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800f734:	488b      	ldr	r0, [pc, #556]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f736:	f7f6 f8f5 	bl	8005924 <assert_failed>
 800f73a:	e68d      	b.n	800f458 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800f73c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800f740:	4888      	ldr	r0, [pc, #544]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f742:	f7f6 f8ef 	bl	8005924 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f746:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800f74a:	e65f      	b.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800f74c:	21f1      	movs	r1, #241	; 0xf1
 800f74e:	4885      	ldr	r0, [pc, #532]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f750:	f7f6 f8e8 	bl	8005924 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f754:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	e51d      	b.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800f75a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f75e:	4881      	ldr	r0, [pc, #516]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f760:	f7f6 f8e0 	bl	8005924 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800f764:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	e62c      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800f76c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800f770:	487c      	ldr	r0, [pc, #496]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f772:	f7f6 f8d7 	bl	8005924 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f776:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	e633      	b.n	800f3e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800f77e:	f240 1173 	movw	r1, #371	; 0x173
 800f782:	4878      	ldr	r0, [pc, #480]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f784:	f7f6 f8ce 	bl	8005924 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f788:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	e5d5      	b.n	800f33a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800f78e:	f240 117d 	movw	r1, #381	; 0x17d
 800f792:	4874      	ldr	r0, [pc, #464]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f794:	f7f6 f8c6 	bl	8005924 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f798:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	e5dc      	b.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800f79e:	f240 119f 	movw	r1, #415	; 0x19f
 800f7a2:	4870      	ldr	r0, [pc, #448]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7a4:	f7f6 f8be 	bl	8005924 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f7a8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	e5fa      	b.n	800f3a6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800f7b0:	f240 1123 	movw	r1, #291	; 0x123
 800f7b4:	486b      	ldr	r0, [pc, #428]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7b6:	f7f6 f8b5 	bl	8005924 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f7ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	e544      	b.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800f7c0:	f240 1195 	movw	r1, #405	; 0x195
 800f7c4:	4867      	ldr	r0, [pc, #412]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7c6:	f7f6 f8ad 	bl	8005924 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f7ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	e5da      	b.n	800f386 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800f7d0:	f240 112d 	movw	r1, #301	; 0x12d
 800f7d4:	4863      	ldr	r0, [pc, #396]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7d6:	f7f6 f8a5 	bl	8005924 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f7da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	e543      	b.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800f7e0:	f240 1137 	movw	r1, #311	; 0x137
 800f7e4:	485f      	ldr	r0, [pc, #380]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7e6:	f7f6 f89d 	bl	8005924 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f7ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f7ec:	6823      	ldr	r3, [r4, #0]
 800f7ee:	e54a      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800f7f0:	f240 1141 	movw	r1, #321	; 0x141
 800f7f4:	485b      	ldr	r0, [pc, #364]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f7f6:	f7f6 f895 	bl	8005924 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f7fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	e551      	b.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800f800:	f240 114b 	movw	r1, #331	; 0x14b
 800f804:	4857      	ldr	r0, [pc, #348]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f806:	f7f6 f88d 	bl	8005924 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f80a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800f80c:	6823      	ldr	r3, [r4, #0]
 800f80e:	e558      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800f810:	f240 1155 	movw	r1, #341	; 0x155
 800f814:	4853      	ldr	r0, [pc, #332]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f816:	f7f6 f885 	bl	8005924 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800f81a:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800f81c:	6823      	ldr	r3, [r4, #0]
 800f81e:	e55f      	b.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800f820:	f240 115f 	movw	r1, #351	; 0x15f
 800f824:	484f      	ldr	r0, [pc, #316]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f826:	f7f6 f87d 	bl	8005924 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800f82a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800f82c:	6823      	ldr	r3, [r4, #0]
 800f82e:	e566      	b.n	800f2fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800f830:	f240 1169 	movw	r1, #361	; 0x169
 800f834:	484b      	ldr	r0, [pc, #300]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f836:	f7f6 f875 	bl	8005924 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800f83a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	e56d      	b.n	800f31c <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800f840:	f7f9 fda2 	bl	8009388 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f844:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f848:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f84a:	e006      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f84c:	f7f9 fd9c 	bl	8009388 <HAL_GetTick>
 800f850:	eba0 0008 	sub.w	r0, r0, r8
 800f854:	4548      	cmp	r0, r9
 800f856:	f63f aef0 	bhi.w	800f63a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f85a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f85c:	0799      	lsls	r1, r3, #30
 800f85e:	d5f5      	bpl.n	800f84c <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f860:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f862:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800f866:	e47f      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f868:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800f86c:	483d      	ldr	r0, [pc, #244]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f86e:	f7f6 f859 	bl	8005924 <assert_failed>
 800f872:	e702      	b.n	800f67a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800f874:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800f878:	483a      	ldr	r0, [pc, #232]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f87a:	f7f6 f853 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f880:	1e59      	subs	r1, r3, #1
 800f882:	e6ff      	b.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f884:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800f888:	4836      	ldr	r0, [pc, #216]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f88a:	f7f6 f84b 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800f88e:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	e5eb      	b.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f894:	f44f 7105 	mov.w	r1, #532	; 0x214
 800f898:	4832      	ldr	r0, [pc, #200]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f89a:	f7f6 f843 	bl	8005924 <assert_failed>
 800f89e:	e61d      	b.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800f8a0:	f240 2105 	movw	r1, #517	; 0x205
 800f8a4:	482f      	ldr	r0, [pc, #188]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8a6:	f7f6 f83d 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800f8aa:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	e5fe      	b.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800f8b0:	f240 2116 	movw	r1, #534	; 0x216
 800f8b4:	482b      	ldr	r0, [pc, #172]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8b6:	f7f6 f835 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800f8ba:	68e2      	ldr	r2, [r4, #12]
 800f8bc:	e618      	b.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800f8be:	f240 2115 	movw	r1, #533	; 0x215
 800f8c2:	4828      	ldr	r0, [pc, #160]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8c4:	f7f6 f82e 	bl	8005924 <assert_failed>
 800f8c8:	e60d      	b.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800f8ca:	02d8      	lsls	r0, r3, #11
 800f8cc:	f57f ae79 	bpl.w	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800f8d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f8d2:	2a00      	cmp	r2, #0
 800f8d4:	f47f ae75 	bne.w	800f5c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800f8d8:	e64e      	b.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800f8da:	f44f 7111 	mov.w	r1, #580	; 0x244
 800f8de:	4821      	ldr	r0, [pc, #132]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f8e0:	f7f6 f820 	bl	8005924 <assert_failed>
 800f8e4:	e640      	b.n	800f568 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f8e6:	6a20      	ldr	r0, [r4, #32]
 800f8e8:	2803      	cmp	r0, #3
 800f8ea:	d82c      	bhi.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800f8ec:	491e      	ldr	r1, [pc, #120]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800f8ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800f8f2:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f8f6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800f8fa:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800f8fe:	432a      	orrs	r2, r5
 800f900:	6965      	ldr	r5, [r4, #20]
 800f902:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800f906:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f90a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800f90e:	e65f      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800f910:	f240 216f 	movw	r1, #623	; 0x26f
 800f914:	4813      	ldr	r0, [pc, #76]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f916:	f7f6 f805 	bl	8005924 <assert_failed>
 800f91a:	e660      	b.n	800f5de <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800f91c:	f240 214d 	movw	r1, #589	; 0x24d
 800f920:	4810      	ldr	r0, [pc, #64]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f922:	f7f5 ffff 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800f926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f928:	1e59      	subs	r1, r3, #1
 800f92a:	e62f      	b.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800f92c:	f240 214b 	movw	r1, #587	; 0x24b
 800f930:	480c      	ldr	r0, [pc, #48]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f932:	f7f5 fff7 	bl	8005924 <assert_failed>
 800f936:	e624      	b.n	800f582 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800f938:	480a      	ldr	r0, [pc, #40]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f93a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800f93e:	f7f5 fff1 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800f942:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f944:	e650      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800f946:	4807      	ldr	r0, [pc, #28]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f948:	f44f 7118 	mov.w	r1, #608	; 0x260
 800f94c:	f7f5 ffea 	bl	8005924 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800f950:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800f952:	6823      	ldr	r3, [r4, #0]
 800f954:	e7ca      	b.n	800f8ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f956:	21b7      	movs	r1, #183	; 0xb7
 800f958:	4802      	ldr	r0, [pc, #8]	; (800f964 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800f95a:	f7f5 ffe3 	bl	8005924 <assert_failed>
 800f95e:	f7ff bbc2 	b.w	800f0e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f962:	bf00      	nop
 800f964:	0802e4d4 	.word	0x0802e4d4
 800f968:	40023800 	.word	0x40023800
 800f96c:	0ffffcff 	.word	0x0ffffcff

0800f970 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f970:	b308      	cbz	r0, 800f9b6 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f972:	4b12      	ldr	r3, [pc, #72]	; (800f9bc <HAL_RNG_Init+0x4c>)
 800f974:	6802      	ldr	r2, [r0, #0]
 800f976:	429a      	cmp	r2, r3
{
 800f978:	b510      	push	{r4, lr}
 800f97a:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800f97c:	d003      	beq.n	800f986 <HAL_RNG_Init+0x16>
 800f97e:	21a3      	movs	r1, #163	; 0xa3
 800f980:	480f      	ldr	r0, [pc, #60]	; (800f9c0 <HAL_RNG_Init+0x50>)
 800f982:	f7f5 ffcf 	bl	8005924 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f986:	7963      	ldrb	r3, [r4, #5]
 800f988:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f98c:	b173      	cbz	r3, 800f9ac <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f98e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800f990:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f992:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800f994:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800f998:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800f99a:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800f99c:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800f99e:	f043 0304 	orr.w	r3, r3, #4
 800f9a2:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800f9a4:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f9a8:	60a2      	str	r2, [r4, #8]
}
 800f9aa:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800f9ac:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800f9ae:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800f9b0:	f7f7 fee0 	bl	8007774 <HAL_RNG_MspInit>
 800f9b4:	e7eb      	b.n	800f98e <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800f9b6:	2001      	movs	r0, #1
}
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	50060800 	.word	0x50060800
 800f9c0:	0802e510 	.word	0x0802e510

0800f9c4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	4615      	mov	r5, r2
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f9ce:	4425      	add	r5, r4
 800f9d0:	f7f9 fcda 	bl	8009388 <HAL_GetTick>
 800f9d4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800f9d6:	f7f9 fcd7 	bl	8009388 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f9da:	4b25      	ldr	r3, [pc, #148]	; (800fa70 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800f9dc:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800f9e4:	fb05 f303 	mul.w	r3, r5, r3
 800f9e8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9ea:	6832      	ldr	r2, [r6, #0]
 800f9ec:	e001      	b.n	800f9f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f9ee:	1c63      	adds	r3, r4, #1
 800f9f0:	d106      	bne.n	800fa00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9f2:	6893      	ldr	r3, [r2, #8]
 800f9f4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800f9f8:	d1f9      	bne.n	800f9ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800f9fa:	4618      	mov	r0, r3
}
 800f9fc:	b003      	add	sp, #12
 800f9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fa00:	f7f9 fcc2 	bl	8009388 <HAL_GetTick>
 800fa04:	1bc0      	subs	r0, r0, r7
 800fa06:	42a8      	cmp	r0, r5
 800fa08:	d208      	bcs.n	800fa1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800fa0a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800fa0c:	2b00      	cmp	r3, #0
      count--;
 800fa0e:	9b01      	ldr	r3, [sp, #4]
 800fa10:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800fa14:	bf08      	it	eq
 800fa16:	2500      	moveq	r5, #0
      count--;
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	e7e6      	b.n	800f9ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa1c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa20:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa22:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa2a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa2c:	d014      	beq.n	800fa58 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa2e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800fa30:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fa34:	d007      	beq.n	800fa46 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800fa36:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800fa38:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800fa3a:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800fa3c:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800fa40:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800fa44:	e7da      	b.n	800f9fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa4c:	601a      	str	r2, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	e7ee      	b.n	800fa36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa58:	68b2      	ldr	r2, [r6, #8]
 800fa5a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fa5e:	d002      	beq.n	800fa66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800fa60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fa64:	d1e3      	bne.n	800fa2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	e7de      	b.n	800fa2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800fa70:	20000298 	.word	0x20000298

0800fa74 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa78:	4615      	mov	r5, r2
 800fa7a:	4698      	mov	r8, r3
 800fa7c:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fa7e:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa80:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa82:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800fa84:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800fa88:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fa8a:	f7f9 fc7d 	bl	8009388 <HAL_GetTick>
 800fa8e:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800fa92:	f7f9 fc79 	bl	8009388 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa96:	4b2e      	ldr	r3, [pc, #184]	; (800fb50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fa98:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800fa9c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fa9e:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800faa0:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800faa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800faa6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800faaa:	0d1b      	lsrs	r3, r3, #20
 800faac:	fb07 f303 	mul.w	r3, r7, r3
 800fab0:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800fab2:	e00b      	b.n	800facc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fab4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800fab8:	d106      	bne.n	800fac8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800faba:	f899 300c 	ldrb.w	r3, [r9, #12]
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fac4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fac8:	1c6b      	adds	r3, r5, #1
 800faca:	d106      	bne.n	800fada <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800facc:	6893      	ldr	r3, [r2, #8]
 800face:	4023      	ands	r3, r4
 800fad0:	d1f0      	bne.n	800fab4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800fad2:	4618      	mov	r0, r3
}
 800fad4:	b003      	add	sp, #12
 800fad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fada:	f7f9 fc55 	bl	8009388 <HAL_GetTick>
 800fade:	eba0 0008 	sub.w	r0, r0, r8
 800fae2:	42b8      	cmp	r0, r7
 800fae4:	d209      	bcs.n	800fafa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800fae6:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800fae8:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800faea:	2b00      	cmp	r3, #0
      count--;
 800faec:	9b01      	ldr	r3, [sp, #4]
 800faee:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800faf2:	bf08      	it	eq
 800faf4:	2700      	moveq	r7, #0
      count--;
 800faf6:	9301      	str	r3, [sp, #4]
 800faf8:	e7e8      	b.n	800facc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fafa:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fafe:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb00:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fb08:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb0a:	d014      	beq.n	800fb36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fb0c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800fb0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fb12:	d007      	beq.n	800fb24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800fb14:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800fb16:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800fb18:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800fb1a:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800fb1e:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800fb22:	e7d7      	b.n	800fad4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fb2a:	601a      	str	r2, [r3, #0]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	e7ee      	b.n	800fb14 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb36:	68b2      	ldr	r2, [r6, #8]
 800fb38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fb3c:	d002      	beq.n	800fb44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800fb3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fb42:	d1e3      	bne.n	800fb0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb4a:	601a      	str	r2, [r3, #0]
 800fb4c:	e7de      	b.n	800fb0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800fb4e:	bf00      	nop
 800fb50:	20000298 	.word	0x20000298

0800fb54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	4613      	mov	r3, r2
 800fb5a:	460e      	mov	r6, r1
 800fb5c:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb5e:	9201      	str	r2, [sp, #4]
 800fb60:	460a      	mov	r2, r1
 800fb62:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fb66:	f7ff ff85 	bl	800fa74 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	bb58      	cbnz	r0, 800fbc6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb6e:	4919      	ldr	r1, [pc, #100]	; (800fbd4 <SPI_EndRxTxTransaction+0x80>)
 800fb70:	4a19      	ldr	r2, [pc, #100]	; (800fbd8 <SPI_EndRxTxTransaction+0x84>)
 800fb72:	6808      	ldr	r0, [r1, #0]
 800fb74:	fba2 2000 	umull	r2, r0, r2, r0
 800fb78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb7c:	0d40      	lsrs	r0, r0, #21
 800fb7e:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb82:	686a      	ldr	r2, [r5, #4]
 800fb84:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fb88:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb8a:	d107      	bne.n	800fb9c <SPI_EndRxTxTransaction+0x48>
 800fb8c:	e012      	b.n	800fbb4 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800fb8e:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb90:	682a      	ldr	r2, [r5, #0]
      count--;
 800fb92:	3c01      	subs	r4, #1
 800fb94:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb96:	6894      	ldr	r4, [r2, #8]
 800fb98:	0622      	lsls	r2, r4, #24
 800fb9a:	d502      	bpl.n	800fba2 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800fb9c:	9c03      	ldr	r4, [sp, #12]
 800fb9e:	2c00      	cmp	r4, #0
 800fba0:	d1f5      	bne.n	800fb8e <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fba2:	4632      	mov	r2, r6
 800fba4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f7ff ff63 	bl	800fa74 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800fbae:	b950      	cbnz	r0, 800fbc6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800fbb0:	b004      	add	sp, #16
 800fbb2:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4628      	mov	r0, r5
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	f7ff ff02 	bl	800f9c4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800fbc0:	9b01      	ldr	r3, [sp, #4]
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	d0ed      	beq.n	800fba2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbc6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800fbc8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbca:	f043 0320 	orr.w	r3, r3, #32
 800fbce:	662b      	str	r3, [r5, #96]	; 0x60
}
 800fbd0:	b004      	add	sp, #16
 800fbd2:	bd70      	pop	{r4, r5, r6, pc}
 800fbd4:	20000298 	.word	0x20000298
 800fbd8:	165e9f81 	.word	0x165e9f81

0800fbdc <HAL_SPI_Init>:
  if (hspi == NULL)
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f000 8128 	beq.w	800fe32 <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fbe2:	6802      	ldr	r2, [r0, #0]
 800fbe4:	4ba7      	ldr	r3, [pc, #668]	; (800fe84 <HAL_SPI_Init+0x2a8>)
 800fbe6:	49a8      	ldr	r1, [pc, #672]	; (800fe88 <HAL_SPI_Init+0x2ac>)
{
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fbec:	48a7      	ldr	r0, [pc, #668]	; (800fe8c <HAL_SPI_Init+0x2b0>)
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	bf18      	it	ne
 800fbf2:	4282      	cmpne	r2, r0
 800fbf4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800fbf8:	bf14      	ite	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	2300      	moveq	r3, #0
 800fbfe:	428a      	cmp	r2, r1
 800fc00:	bf0c      	ite	eq
 800fc02:	2300      	moveq	r3, #0
 800fc04:	f003 0301 	andne.w	r3, r3, #1
 800fc08:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800fc0c:	4282      	cmp	r2, r0
 800fc0e:	bf0c      	ite	eq
 800fc10:	2300      	moveq	r3, #0
 800fc12:	f003 0301 	andne.w	r3, r3, #1
 800fc16:	428a      	cmp	r2, r1
 800fc18:	bf0c      	ite	eq
 800fc1a:	2300      	moveq	r3, #0
 800fc1c:	f003 0301 	andne.w	r3, r3, #1
 800fc20:	b11b      	cbz	r3, 800fc2a <HAL_SPI_Init+0x4e>
 800fc22:	4b9b      	ldr	r3, [pc, #620]	; (800fe90 <HAL_SPI_Init+0x2b4>)
 800fc24:	429a      	cmp	r2, r3
 800fc26:	f040 80fe 	bne.w	800fe26 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fc2a:	6863      	ldr	r3, [r4, #4]
 800fc2c:	b11b      	cbz	r3, 800fc36 <HAL_SPI_Init+0x5a>
 800fc2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc32:	f040 80cd 	bne.w	800fdd0 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fc36:	68a3      	ldr	r3, [r4, #8]
 800fc38:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800fc3c:	d003      	beq.n	800fc46 <HAL_SPI_Init+0x6a>
 800fc3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc42:	f040 80db 	bne.w	800fdfc <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fc46:	68e2      	ldr	r2, [r4, #12]
 800fc48:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800fc4c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800fc50:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800fc54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800fc58:	bf18      	it	ne
 800fc5a:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800fc5e:	bf14      	ite	ne
 800fc60:	2301      	movne	r3, #1
 800fc62:	2300      	moveq	r3, #0
 800fc64:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800fc68:	bf0c      	ite	eq
 800fc6a:	2300      	moveq	r3, #0
 800fc6c:	f003 0301 	andne.w	r3, r3, #1
 800fc70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fc74:	bf0c      	ite	eq
 800fc76:	2300      	moveq	r3, #0
 800fc78:	f003 0301 	andne.w	r3, r3, #1
 800fc7c:	b12b      	cbz	r3, 800fc8a <HAL_SPI_Init+0xae>
 800fc7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc82:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fc86:	f040 80f7 	bne.w	800fe78 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fc8a:	69a3      	ldr	r3, [r4, #24]
 800fc8c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800fc90:	d003      	beq.n	800fc9a <HAL_SPI_Init+0xbe>
 800fc92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fc96:	f040 80a1 	bne.w	800fddc <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fc9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc9c:	f033 0308 	bics.w	r3, r3, #8
 800fca0:	f040 80a6 	bne.w	800fdf0 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fca4:	69e3      	ldr	r3, [r4, #28]
 800fca6:	f023 0318 	bic.w	r3, r3, #24
 800fcaa:	2b20      	cmp	r3, #32
 800fcac:	d002      	beq.n	800fcb4 <HAL_SPI_Init+0xd8>
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f040 80d6 	bne.w	800fe60 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fcb4:	6a23      	ldr	r3, [r4, #32]
 800fcb6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800fcba:	f040 80a8 	bne.w	800fe0e <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fcbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcc0:	f033 0210 	bics.w	r2, r3, #16
 800fcc4:	d17b      	bne.n	800fdbe <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d16e      	bne.n	800fda8 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fcca:	6923      	ldr	r3, [r4, #16]
 800fccc:	f033 0302 	bics.w	r3, r3, #2
 800fcd0:	f040 80c0 	bne.w	800fe54 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800fcd4:	6963      	ldr	r3, [r4, #20]
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d904      	bls.n	800fce4 <HAL_SPI_Init+0x108>
 800fcda:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800fcde:	486d      	ldr	r0, [pc, #436]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fce0:	f7f5 fe20 	bl	8005924 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fce4:	6863      	ldr	r3, [r4, #4]
 800fce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcea:	f000 80a4 	beq.w	800fe36 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fcf2:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcf4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fcf8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fcfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f000 808b 	beq.w	800fe1a <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800fd04:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fd06:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd08:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fd0a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800fd0e:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fd10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800fd14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fd18:	bf8c      	ite	hi
 800fd1a:	f04f 0c00 	movhi.w	ip, #0
 800fd1e:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800fd22:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fd24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd28:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800fd2c:	d16c      	bne.n	800fe08 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fd30:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800fd34:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd36:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800fd40:	68a1      	ldr	r1, [r4, #8]
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	69a6      	ldr	r6, [r4, #24]
 800fd48:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800fd4c:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd50:	431a      	orrs	r2, r3
 800fd52:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd54:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd58:	f003 0301 	and.w	r3, r3, #1
 800fd5c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd60:	f003 0310 	and.w	r3, r3, #16
 800fd64:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd66:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd68:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd6c:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800fd70:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd74:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd76:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd7a:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd82:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd84:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd88:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd8c:	430a      	orrs	r2, r1
 800fd8e:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd90:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fd92:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800fd94:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fd96:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fd98:	69eb      	ldr	r3, [r5, #28]
 800fd9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd9e:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fda0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fda2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800fda6:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fda8:	69e3      	ldr	r3, [r4, #28]
 800fdaa:	f023 0318 	bic.w	r3, r3, #24
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	d001      	beq.n	800fdb6 <HAL_SPI_Init+0x1da>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d15a      	bne.n	800fe6c <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fdb6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fdb8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800fdbc:	e799      	b.n	800fcf2 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fdbe:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800fdc2:	4834      	ldr	r0, [pc, #208]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fdc4:	f7f5 fdae 	bl	8005924 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fdc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1ec      	bne.n	800fda8 <HAL_SPI_Init+0x1cc>
 800fdce:	e77c      	b.n	800fcca <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fdd0:	f240 1147 	movw	r1, #327	; 0x147
 800fdd4:	482f      	ldr	r0, [pc, #188]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fdd6:	f7f5 fda5 	bl	8005924 <assert_failed>
 800fdda:	e72c      	b.n	800fc36 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fddc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800fde0:	482c      	ldr	r0, [pc, #176]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fde2:	f7f5 fd9f 	bl	8005924 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800fde6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fde8:	f033 0308 	bics.w	r3, r3, #8
 800fdec:	f43f af5a 	beq.w	800fca4 <HAL_SPI_Init+0xc8>
 800fdf0:	f240 114b 	movw	r1, #331	; 0x14b
 800fdf4:	4827      	ldr	r0, [pc, #156]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fdf6:	f7f5 fd95 	bl	8005924 <assert_failed>
 800fdfa:	e753      	b.n	800fca4 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800fdfc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fe00:	4824      	ldr	r0, [pc, #144]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe02:	f7f5 fd8f 	bl	8005924 <assert_failed>
 800fe06:	e71e      	b.n	800fc46 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fe08:	2000      	movs	r0, #0
 800fe0a:	62a0      	str	r0, [r4, #40]	; 0x28
 800fe0c:	e792      	b.n	800fd34 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fe0e:	f240 114d 	movw	r1, #333	; 0x14d
 800fe12:	4820      	ldr	r0, [pc, #128]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe14:	f7f5 fd86 	bl	8005924 <assert_failed>
 800fe18:	e751      	b.n	800fcbe <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800fe1a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800fe1c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800fe20:	f7f7 fcbe 	bl	80077a0 <HAL_SPI_MspInit>
 800fe24:	e76e      	b.n	800fd04 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fe26:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800fe2a:	481a      	ldr	r0, [pc, #104]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe2c:	f7f5 fd7a 	bl	8005924 <assert_failed>
 800fe30:	e6fb      	b.n	800fc2a <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800fe32:	2001      	movs	r0, #1
}
 800fe34:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe36:	69e3      	ldr	r3, [r4, #28]
 800fe38:	f023 0318 	bic.w	r3, r3, #24
 800fe3c:	2b20      	cmp	r3, #32
 800fe3e:	f43f af58 	beq.w	800fcf2 <HAL_SPI_Init+0x116>
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f43f af55 	beq.w	800fcf2 <HAL_SPI_Init+0x116>
 800fe48:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800fe4c:	4811      	ldr	r0, [pc, #68]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe4e:	f7f5 fd69 	bl	8005924 <assert_failed>
 800fe52:	e74e      	b.n	800fcf2 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fe54:	f240 1151 	movw	r1, #337	; 0x151
 800fe58:	480e      	ldr	r0, [pc, #56]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe5a:	f7f5 fd63 	bl	8005924 <assert_failed>
 800fe5e:	e739      	b.n	800fcd4 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe60:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800fe64:	480b      	ldr	r0, [pc, #44]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe66:	f7f5 fd5d 	bl	8005924 <assert_failed>
 800fe6a:	e723      	b.n	800fcb4 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fe6c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800fe70:	4808      	ldr	r0, [pc, #32]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe72:	f7f5 fd57 	bl	8005924 <assert_failed>
 800fe76:	e79e      	b.n	800fdb6 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800fe78:	f240 1149 	movw	r1, #329	; 0x149
 800fe7c:	4805      	ldr	r0, [pc, #20]	; (800fe94 <HAL_SPI_Init+0x2b8>)
 800fe7e:	f7f5 fd51 	bl	8005924 <assert_failed>
 800fe82:	e702      	b.n	800fc8a <HAL_SPI_Init+0xae>
 800fe84:	40013000 	.word	0x40013000
 800fe88:	40003c00 	.word	0x40003c00
 800fe8c:	40003800 	.word	0x40003800
 800fe90:	40015400 	.word	0x40015400
 800fe94:	0802e548 	.word	0x0802e548

0800fe98 <HAL_SPI_Transmit>:
{
 800fe98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fe9e:	6883      	ldr	r3, [r0, #8]
{
 800fea0:	b082      	sub	sp, #8
 800fea2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fea4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800fea8:	460f      	mov	r7, r1
 800feaa:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800feac:	d171      	bne.n	800ff92 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800feae:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d076      	beq.n	800ffa4 <HAL_SPI_Transmit+0x10c>
 800feb6:	2301      	movs	r3, #1
 800feb8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800febc:	f7f9 fa64 	bl	8009388 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800fec0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800fec4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	b2d8      	uxtb	r0, r3
 800feca:	d009      	beq.n	800fee0 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800fecc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fece:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fed0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fed2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800fed6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800feda:	b002      	add	sp, #8
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fee0:	2f00      	cmp	r7, #0
 800fee2:	d0f4      	beq.n	800fece <HAL_SPI_Transmit+0x36>
 800fee4:	fab8 f388 	clz	r3, r8
 800fee8:	095b      	lsrs	r3, r3, #5
 800feea:	f1b8 0f00 	cmp.w	r8, #0
 800feee:	d0ee      	beq.n	800fece <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fef0:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fef2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fef4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fef8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fefc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fefe:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800ff02:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ff06:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ff08:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800ff0c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff10:	68a3      	ldr	r3, [r4, #8]
 800ff12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800ff16:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff18:	d07a      	beq.n	8010010 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	0652      	lsls	r2, r2, #25
 800ff1e:	d403      	bmi.n	800ff28 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ff26:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff28:	68e2      	ldr	r2, [r4, #12]
 800ff2a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff2e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff30:	d93c      	bls.n	800ffac <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff32:	b112      	cbz	r2, 800ff3a <HAL_SPI_Transmit+0xa2>
 800ff34:	f1b8 0f01 	cmp.w	r8, #1
 800ff38:	d107      	bne.n	800ff4a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff3a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ff3e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800ff40:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff42:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800ff44:	3a01      	subs	r2, #1
 800ff46:	b292      	uxth	r2, r2
 800ff48:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff4a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ff4c:	b292      	uxth	r2, r2
 800ff4e:	b992      	cbnz	r2, 800ff76 <HAL_SPI_Transmit+0xde>
 800ff50:	e072      	b.n	8010038 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff54:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ff58:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800ff5a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff5e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ff60:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff64:	fa1f fc8c 	uxth.w	ip, ip
 800ff68:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ff6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d061      	beq.n	8010038 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	0797      	lsls	r7, r2, #30
 800ff7a:	d4ea      	bmi.n	800ff52 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff7c:	f7f9 fa04 	bl	8009388 <HAL_GetTick>
 800ff80:	1b80      	subs	r0, r0, r6
 800ff82:	42a8      	cmp	r0, r5
 800ff84:	d301      	bcc.n	800ff8a <HAL_SPI_Transmit+0xf2>
 800ff86:	1c68      	adds	r0, r5, #1
 800ff88:	d101      	bne.n	800ff8e <HAL_SPI_Transmit+0xf6>
 800ff8a:	2d00      	cmp	r5, #0
 800ff8c:	d1ee      	bne.n	800ff6c <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800ff8e:	2003      	movs	r0, #3
 800ff90:	e79d      	b.n	800fece <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ff92:	f240 313d 	movw	r1, #829	; 0x33d
 800ff96:	4838      	ldr	r0, [pc, #224]	; (8010078 <HAL_SPI_Transmit+0x1e0>)
 800ff98:	f7f5 fcc4 	bl	8005924 <assert_failed>
  __HAL_LOCK(hspi);
 800ff9c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d188      	bne.n	800feb6 <HAL_SPI_Transmit+0x1e>
 800ffa4:	2002      	movs	r0, #2
}
 800ffa6:	b002      	add	sp, #8
 800ffa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ffac:	b112      	cbz	r2, 800ffb4 <HAL_SPI_Transmit+0x11c>
 800ffae:	f1b8 0f01 	cmp.w	r8, #1
 800ffb2:	d10b      	bne.n	800ffcc <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800ffb4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ffb6:	b292      	uxth	r2, r2
 800ffb8:	2a01      	cmp	r2, #1
 800ffba:	d953      	bls.n	8010064 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffbc:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ffc0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800ffc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffc4:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ffc6:	3b02      	subs	r3, #2
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ffcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	b983      	cbnz	r3, 800fff4 <HAL_SPI_Transmit+0x15c>
 800ffd2:	e031      	b.n	8010038 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800ffd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d922      	bls.n	8010022 <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ffdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffde:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ffe2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ffe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffe6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ffe8:	3b02      	subs	r3, #2
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ffee:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800fff0:	b289      	uxth	r1, r1
 800fff2:	b309      	cbz	r1, 8010038 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fff4:	6822      	ldr	r2, [r4, #0]
 800fff6:	6893      	ldr	r3, [r2, #8]
 800fff8:	0799      	lsls	r1, r3, #30
 800fffa:	d4eb      	bmi.n	800ffd4 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fffc:	f7f9 f9c4 	bl	8009388 <HAL_GetTick>
 8010000:	1b80      	subs	r0, r0, r6
 8010002:	42a8      	cmp	r0, r5
 8010004:	d301      	bcc.n	801000a <HAL_SPI_Transmit+0x172>
 8010006:	1c6b      	adds	r3, r5, #1
 8010008:	d1c1      	bne.n	800ff8e <HAL_SPI_Transmit+0xf6>
 801000a:	2d00      	cmp	r5, #0
 801000c:	d1ef      	bne.n	800ffee <HAL_SPI_Transmit+0x156>
 801000e:	e7be      	b.n	800ff8e <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010016:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801001e:	601a      	str	r2, [r3, #0]
 8010020:	e77b      	b.n	800ff1a <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8010028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 801002a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 801002c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 801002e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8010030:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8010032:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8010034:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010036:	e7da      	b.n	800ffee <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010038:	4632      	mov	r2, r6
 801003a:	4629      	mov	r1, r5
 801003c:	4620      	mov	r0, r4
 801003e:	f7ff fd89 	bl	800fb54 <SPI_EndRxTxTransaction>
 8010042:	b108      	cbz	r0, 8010048 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010044:	2320      	movs	r3, #32
 8010046:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010048:	68a3      	ldr	r3, [r4, #8]
 801004a:	b933      	cbnz	r3, 801005a <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801004c:	6822      	ldr	r2, [r4, #0]
 801004e:	9301      	str	r3, [sp, #4]
 8010050:	68d3      	ldr	r3, [r2, #12]
 8010052:	9301      	str	r3, [sp, #4]
 8010054:	6893      	ldr	r3, [r2, #8]
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801005a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 801005c:	3800      	subs	r0, #0
 801005e:	bf18      	it	ne
 8010060:	2001      	movne	r0, #1
error:
 8010062:	e734      	b.n	800fece <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010064:	783a      	ldrb	r2, [r7, #0]
 8010066:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8010068:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 801006a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801006c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 801006e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8010070:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8010072:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8010074:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8010076:	e7a9      	b.n	800ffcc <HAL_SPI_Transmit+0x134>
 8010078:	0802e548 	.word	0x0802e548

0801007c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801007c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801007e:	4a12      	ldr	r2, [pc, #72]	; (80100c8 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8010084:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010086:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8010088:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801008a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 801008c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801008e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010092:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8010094:	680d      	ldr	r5, [r1, #0]
 8010096:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010098:	688d      	ldr	r5, [r1, #8]
 801009a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801009e:	4d0b      	ldr	r5, [pc, #44]	; (80100cc <TIM_OC5_SetConfig+0x50>)
 80100a0:	42a8      	cmp	r0, r5
 80100a2:	d00a      	beq.n	80100ba <TIM_OC5_SetConfig+0x3e>
 80100a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80100a8:	42a8      	cmp	r0, r5
 80100aa:	d006      	beq.n	80100ba <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80100ac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80100ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80100b0:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80100b2:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100b4:	6203      	str	r3, [r0, #32]
}
 80100b6:	bc30      	pop	{r4, r5}
 80100b8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 80100ba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80100be:	694d      	ldr	r5, [r1, #20]
 80100c0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80100c4:	e7f2      	b.n	80100ac <TIM_OC5_SetConfig+0x30>
 80100c6:	bf00      	nop
 80100c8:	fffeff8f 	.word	0xfffeff8f
 80100cc:	40010000 	.word	0x40010000

080100d0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100d2:	4a12      	ldr	r2, [pc, #72]	; (801011c <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80100d8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80100dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80100de:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80100e0:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80100e6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100e8:	680d      	ldr	r5, [r1, #0]
 80100ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100ee:	688d      	ldr	r5, [r1, #8]
 80100f0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f4:	4d0a      	ldr	r5, [pc, #40]	; (8010120 <TIM_OC6_SetConfig+0x50>)
 80100f6:	42a8      	cmp	r0, r5
 80100f8:	d00a      	beq.n	8010110 <TIM_OC6_SetConfig+0x40>
 80100fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80100fe:	42a8      	cmp	r0, r5
 8010100:	d006      	beq.n	8010110 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010102:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010104:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8010106:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8010108:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801010a:	6203      	str	r3, [r0, #32]
}
 801010c:	bc30      	pop	{r4, r5}
 801010e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010110:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010114:	694d      	ldr	r5, [r1, #20]
 8010116:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 801011a:	e7f2      	b.n	8010102 <TIM_OC6_SetConfig+0x32>
 801011c:	feff8fff 	.word	0xfeff8fff
 8010120:	40010000 	.word	0x40010000

08010124 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010124:	6a03      	ldr	r3, [r0, #32]
 8010126:	f023 0301 	bic.w	r3, r3, #1
{
 801012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801012e:	6203      	str	r3, [r0, #32]
{
 8010130:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8010132:	6a05      	ldr	r5, [r0, #32]
{
 8010134:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8010136:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801013a:	4b27      	ldr	r3, [pc, #156]	; (80101d8 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 801013c:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 8010140:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8010142:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010144:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 8010146:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 8010148:	688b      	ldr	r3, [r1, #8]
 801014a:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801014c:	4b23      	ldr	r3, [pc, #140]	; (80101dc <TIM_OC1_SetConfig+0xb8>)
 801014e:	4298      	cmp	r0, r3
 8010150:	d00b      	beq.n	801016a <TIM_OC1_SetConfig+0x46>
 8010152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010156:	4298      	cmp	r0, r3
 8010158:	d007      	beq.n	801016a <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 801015a:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 801015c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010160:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8010162:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8010164:	6225      	str	r5, [r4, #32]
}
 8010166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801016a:	68f3      	ldr	r3, [r6, #12]
 801016c:	f033 0208 	bics.w	r2, r3, #8
 8010170:	d120      	bne.n	80101b4 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 8010172:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8010176:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010178:	69b3      	ldr	r3, [r6, #24]
 801017a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 801017e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010182:	d11e      	bne.n	80101c2 <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010184:	6973      	ldr	r3, [r6, #20]
 8010186:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801018a:	d106      	bne.n	801019a <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801018c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 8010190:	69b1      	ldr	r1, [r6, #24]
 8010192:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 8010194:	ea42 0803 	orr.w	r8, r2, r3
 8010198:	e7df      	b.n	801015a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801019a:	f641 316d 	movw	r1, #7021	; 0x1b6d
 801019e:	4810      	ldr	r0, [pc, #64]	; (80101e0 <TIM_OC1_SetConfig+0xbc>)
 80101a0:	f7f5 fbc0 	bl	8005924 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80101a4:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 80101a8:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 80101aa:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 80101ac:	430a      	orrs	r2, r1
 80101ae:	ea42 0803 	orr.w	r8, r2, r3
 80101b2:	e7d2      	b.n	801015a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80101b4:	f641 315f 	movw	r1, #7007	; 0x1b5f
 80101b8:	4809      	ldr	r0, [pc, #36]	; (80101e0 <TIM_OC1_SetConfig+0xbc>)
 80101ba:	f7f5 fbb3 	bl	8005924 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 80101be:	68f3      	ldr	r3, [r6, #12]
 80101c0:	e7d7      	b.n	8010172 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80101c2:	f641 316c 	movw	r1, #7020	; 0x1b6c
 80101c6:	4806      	ldr	r0, [pc, #24]	; (80101e0 <TIM_OC1_SetConfig+0xbc>)
 80101c8:	f7f5 fbac 	bl	8005924 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80101cc:	6973      	ldr	r3, [r6, #20]
 80101ce:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80101d2:	d0db      	beq.n	801018c <TIM_OC1_SetConfig+0x68>
 80101d4:	e7e1      	b.n	801019a <TIM_OC1_SetConfig+0x76>
 80101d6:	bf00      	nop
 80101d8:	fffeff8c 	.word	0xfffeff8c
 80101dc:	40010000 	.word	0x40010000
 80101e0:	0802e580 	.word	0x0802e580

080101e4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101e4:	6a03      	ldr	r3, [r0, #32]
 80101e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80101ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80101ee:	6203      	str	r3, [r0, #32]
{
 80101f0:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 80101f2:	6a05      	ldr	r5, [r0, #32]
{
 80101f4:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80101f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80101fa:	4b29      	ldr	r3, [pc, #164]	; (80102a0 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 80101fc:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 8010200:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 8010202:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010204:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 8010206:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010208:	688b      	ldr	r3, [r1, #8]
 801020a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801020e:	4b25      	ldr	r3, [pc, #148]	; (80102a4 <TIM_OC3_SetConfig+0xc0>)
 8010210:	4298      	cmp	r0, r3
 8010212:	d00b      	beq.n	801022c <TIM_OC3_SetConfig+0x48>
 8010214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010218:	4298      	cmp	r0, r3
 801021a:	d007      	beq.n	801022c <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 801021c:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 801021e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010222:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8010224:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8010226:	6225      	str	r5, [r4, #32]
}
 8010228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801022c:	68f3      	ldr	r3, [r6, #12]
 801022e:	f033 0208 	bics.w	r2, r3, #8
 8010232:	d123      	bne.n	801027c <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 8010234:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010238:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801023c:	69b3      	ldr	r3, [r6, #24]
 801023e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 8010242:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010246:	d120      	bne.n	801028a <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010248:	6973      	ldr	r3, [r6, #20]
 801024a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801024e:	d107      	bne.n	8010260 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010250:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010254:	69b1      	ldr	r1, [r6, #24]
 8010256:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801025a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 801025e:	e7dd      	b.n	801021c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010260:	f641 4103 	movw	r1, #7171	; 0x1c03
 8010264:	4810      	ldr	r0, [pc, #64]	; (80102a8 <TIM_OC3_SetConfig+0xc4>)
 8010266:	f7f5 fb5d 	bl	8005924 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801026a:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801026e:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010270:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010272:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8010276:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 801027a:	e7cf      	b.n	801021c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801027c:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 8010280:	4809      	ldr	r0, [pc, #36]	; (80102a8 <TIM_OC3_SetConfig+0xc4>)
 8010282:	f7f5 fb4f 	bl	8005924 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010286:	68f3      	ldr	r3, [r6, #12]
 8010288:	e7d4      	b.n	8010234 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 801028a:	f641 4102 	movw	r1, #7170	; 0x1c02
 801028e:	4806      	ldr	r0, [pc, #24]	; (80102a8 <TIM_OC3_SetConfig+0xc4>)
 8010290:	f7f5 fb48 	bl	8005924 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010294:	6973      	ldr	r3, [r6, #20]
 8010296:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801029a:	d0d9      	beq.n	8010250 <TIM_OC3_SetConfig+0x6c>
 801029c:	e7e0      	b.n	8010260 <TIM_OC3_SetConfig+0x7c>
 801029e:	bf00      	nop
 80102a0:	fffeff8c 	.word	0xfffeff8c
 80102a4:	40010000 	.word	0x40010000
 80102a8:	0802e580 	.word	0x0802e580

080102ac <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102ac:	6a03      	ldr	r3, [r0, #32]
 80102ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80102b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102b4:	6203      	str	r3, [r0, #32]
{
 80102b6:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 80102b8:	6a06      	ldr	r6, [r0, #32]
{
 80102ba:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 80102bc:	6842      	ldr	r2, [r0, #4]
{
 80102be:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 80102c0:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80102c2:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102c6:	4b16      	ldr	r3, [pc, #88]	; (8010320 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102c8:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102ca:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102cc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80102d0:	68ab      	ldr	r3, [r5, #8]
 80102d2:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102d6:	4b13      	ldr	r3, [pc, #76]	; (8010324 <TIM_OC4_SetConfig+0x78>)
 80102d8:	4298      	cmp	r0, r3
 80102da:	d00a      	beq.n	80102f2 <TIM_OC4_SetConfig+0x46>
 80102dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80102e0:	4298      	cmp	r0, r3
 80102e2:	d006      	beq.n	80102f2 <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 80102e4:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80102e6:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80102e8:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80102ea:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80102ec:	6226      	str	r6, [r4, #32]
}
 80102ee:	b003      	add	sp, #12
 80102f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80102f2:	696b      	ldr	r3, [r5, #20]
 80102f4:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 80102f8:	d104      	bne.n	8010304 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80102fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102fe:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8010302:	e7ef      	b.n	80102e4 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010304:	f641 4141 	movw	r1, #7233	; 0x1c41
 8010308:	4807      	ldr	r0, [pc, #28]	; (8010328 <TIM_OC4_SetConfig+0x7c>)
 801030a:	9201      	str	r2, [sp, #4]
 801030c:	f7f5 fb0a 	bl	8005924 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010310:	9a01      	ldr	r2, [sp, #4]
 8010312:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010318:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 801031c:	e7e2      	b.n	80102e4 <TIM_OC4_SetConfig+0x38>
 801031e:	bf00      	nop
 8010320:	feff8cff 	.word	0xfeff8cff
 8010324:	40010000 	.word	0x40010000
 8010328:	0802e580 	.word	0x0802e580

0801032c <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801032c:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801032e:	684a      	ldr	r2, [r1, #4]
{
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 8010334:	6899      	ldr	r1, [r3, #8]
{
 8010336:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010338:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 801033a:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 801033e:	4980      	ldr	r1, [pc, #512]	; (8010540 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010340:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010342:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010346:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801034a:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 801034e:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8010350:	f000 8104 	beq.w	801055c <TIM_SlaveTimer_SetConfig+0x230>
 8010354:	d953      	bls.n	80103fe <TIM_SlaveTimer_SetConfig+0xd2>
 8010356:	2a60      	cmp	r2, #96	; 0x60
 8010358:	f000 816b 	beq.w	8010632 <TIM_SlaveTimer_SetConfig+0x306>
 801035c:	2a70      	cmp	r2, #112	; 0x70
 801035e:	d151      	bne.n	8010404 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010360:	4a78      	ldr	r2, [pc, #480]	; (8010544 <TIM_SlaveTimer_SetConfig+0x218>)
 8010362:	4979      	ldr	r1, [pc, #484]	; (8010548 <TIM_SlaveTimer_SetConfig+0x21c>)
 8010364:	4293      	cmp	r3, r2
 8010366:	bf18      	it	ne
 8010368:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801036c:	bf14      	ite	ne
 801036e:	2201      	movne	r2, #1
 8010370:	2200      	moveq	r2, #0
 8010372:	428b      	cmp	r3, r1
 8010374:	bf0c      	ite	eq
 8010376:	2200      	moveq	r2, #0
 8010378:	f002 0201 	andne.w	r2, r2, #1
 801037c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010380:	428b      	cmp	r3, r1
 8010382:	bf0c      	ite	eq
 8010384:	2200      	moveq	r2, #0
 8010386:	f002 0201 	andne.w	r2, r2, #1
 801038a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801038e:	428b      	cmp	r3, r1
 8010390:	bf0c      	ite	eq
 8010392:	2200      	moveq	r2, #0
 8010394:	f002 0201 	andne.w	r2, r2, #1
 8010398:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801039c:	428b      	cmp	r3, r1
 801039e:	bf0c      	ite	eq
 80103a0:	2200      	moveq	r2, #0
 80103a2:	f002 0201 	andne.w	r2, r2, #1
 80103a6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80103aa:	428b      	cmp	r3, r1
 80103ac:	bf0c      	ite	eq
 80103ae:	2200      	moveq	r2, #0
 80103b0:	f002 0201 	andne.w	r2, r2, #1
 80103b4:	b11a      	cbz	r2, 80103be <TIM_SlaveTimer_SetConfig+0x92>
 80103b6:	4a65      	ldr	r2, [pc, #404]	; (801054c <TIM_SlaveTimer_SetConfig+0x220>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	f040 81bb 	bne.w	8010734 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80103be:	68e3      	ldr	r3, [r4, #12]
 80103c0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80103c4:	f040 819e 	bne.w	8010704 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103ce:	bf18      	it	ne
 80103d0:	2b0a      	cmpne	r3, #10
 80103d2:	d003      	beq.n	80103dc <TIM_SlaveTimer_SetConfig+0xb0>
 80103d4:	f033 0302 	bics.w	r3, r3, #2
 80103d8:	f040 81a6 	bne.w	8010728 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80103dc:	6921      	ldr	r1, [r4, #16]
 80103de:	290f      	cmp	r1, #15
 80103e0:	f200 8175 	bhi.w	80106ce <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80103e4:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103e6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 80103ea:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103ec:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80103ee:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80103f4:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103fa:	60ab      	str	r3, [r5, #8]
}
 80103fc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80103fe:	2a40      	cmp	r2, #64	; 0x40
 8010400:	d03a      	beq.n	8010478 <TIM_SlaveTimer_SetConfig+0x14c>
 8010402:	d901      	bls.n	8010408 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 8010404:	2001      	movs	r0, #1
}
 8010406:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8010408:	2a20      	cmp	r2, #32
 801040a:	d002      	beq.n	8010412 <TIM_SlaveTimer_SetConfig+0xe6>
 801040c:	d930      	bls.n	8010470 <TIM_SlaveTimer_SetConfig+0x144>
 801040e:	2a30      	cmp	r2, #48	; 0x30
 8010410:	d1f8      	bne.n	8010404 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010412:	4a4c      	ldr	r2, [pc, #304]	; (8010544 <TIM_SlaveTimer_SetConfig+0x218>)
 8010414:	484c      	ldr	r0, [pc, #304]	; (8010548 <TIM_SlaveTimer_SetConfig+0x21c>)
 8010416:	4293      	cmp	r3, r2
 8010418:	bf18      	it	ne
 801041a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801041e:	494c      	ldr	r1, [pc, #304]	; (8010550 <TIM_SlaveTimer_SetConfig+0x224>)
 8010420:	4c4c      	ldr	r4, [pc, #304]	; (8010554 <TIM_SlaveTimer_SetConfig+0x228>)
 8010422:	bf14      	ite	ne
 8010424:	2201      	movne	r2, #1
 8010426:	2200      	moveq	r2, #0
 8010428:	4283      	cmp	r3, r0
 801042a:	bf0c      	ite	eq
 801042c:	2200      	moveq	r2, #0
 801042e:	f002 0201 	andne.w	r2, r2, #1
 8010432:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8010436:	428b      	cmp	r3, r1
 8010438:	bf0c      	ite	eq
 801043a:	2200      	moveq	r2, #0
 801043c:	f002 0201 	andne.w	r2, r2, #1
 8010440:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8010444:	42a3      	cmp	r3, r4
 8010446:	bf0c      	ite	eq
 8010448:	2200      	moveq	r2, #0
 801044a:	f002 0201 	andne.w	r2, r2, #1
 801044e:	4283      	cmp	r3, r0
 8010450:	bf0c      	ite	eq
 8010452:	2200      	moveq	r2, #0
 8010454:	f002 0201 	andne.w	r2, r2, #1
 8010458:	428b      	cmp	r3, r1
 801045a:	bf0c      	ite	eq
 801045c:	2200      	moveq	r2, #0
 801045e:	f002 0201 	andne.w	r2, r2, #1
 8010462:	b11a      	cbz	r2, 801046c <TIM_SlaveTimer_SetConfig+0x140>
 8010464:	4a39      	ldr	r2, [pc, #228]	; (801054c <TIM_SlaveTimer_SetConfig+0x220>)
 8010466:	4293      	cmp	r3, r2
 8010468:	f040 816a 	bne.w	8010740 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 801046c:	2000      	movs	r0, #0
}
 801046e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8010470:	f032 0210 	bics.w	r2, r2, #16
 8010474:	d1c6      	bne.n	8010404 <TIM_SlaveTimer_SetConfig+0xd8>
 8010476:	e7cc      	b.n	8010412 <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010478:	4a32      	ldr	r2, [pc, #200]	; (8010544 <TIM_SlaveTimer_SetConfig+0x218>)
 801047a:	4933      	ldr	r1, [pc, #204]	; (8010548 <TIM_SlaveTimer_SetConfig+0x21c>)
 801047c:	4293      	cmp	r3, r2
 801047e:	bf18      	it	ne
 8010480:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010484:	bf14      	ite	ne
 8010486:	2201      	movne	r2, #1
 8010488:	2200      	moveq	r2, #0
 801048a:	428b      	cmp	r3, r1
 801048c:	bf0c      	ite	eq
 801048e:	2200      	moveq	r2, #0
 8010490:	f002 0201 	andne.w	r2, r2, #1
 8010494:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010498:	428b      	cmp	r3, r1
 801049a:	bf0c      	ite	eq
 801049c:	2200      	moveq	r2, #0
 801049e:	f002 0201 	andne.w	r2, r2, #1
 80104a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104a6:	428b      	cmp	r3, r1
 80104a8:	bf0c      	ite	eq
 80104aa:	2200      	moveq	r2, #0
 80104ac:	f002 0201 	andne.w	r2, r2, #1
 80104b0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80104b4:	428b      	cmp	r3, r1
 80104b6:	bf0c      	ite	eq
 80104b8:	2200      	moveq	r2, #0
 80104ba:	f002 0201 	andne.w	r2, r2, #1
 80104be:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80104c2:	428b      	cmp	r3, r1
 80104c4:	bf0c      	ite	eq
 80104c6:	2200      	moveq	r2, #0
 80104c8:	f002 0201 	andne.w	r2, r2, #1
 80104cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104d0:	428b      	cmp	r3, r1
 80104d2:	bf0c      	ite	eq
 80104d4:	2200      	moveq	r2, #0
 80104d6:	f002 0201 	andne.w	r2, r2, #1
 80104da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104de:	428b      	cmp	r3, r1
 80104e0:	bf0c      	ite	eq
 80104e2:	2200      	moveq	r2, #0
 80104e4:	f002 0201 	andne.w	r2, r2, #1
 80104e8:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80104ec:	428b      	cmp	r3, r1
 80104ee:	bf0c      	ite	eq
 80104f0:	2200      	moveq	r2, #0
 80104f2:	f002 0201 	andne.w	r2, r2, #1
 80104f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80104fa:	428b      	cmp	r3, r1
 80104fc:	bf0c      	ite	eq
 80104fe:	2200      	moveq	r2, #0
 8010500:	f002 0201 	andne.w	r2, r2, #1
 8010504:	b11a      	cbz	r2, 801050e <TIM_SlaveTimer_SetConfig+0x1e2>
 8010506:	4a14      	ldr	r2, [pc, #80]	; (8010558 <TIM_SlaveTimer_SetConfig+0x22c>)
 8010508:	4293      	cmp	r3, r2
 801050a:	f040 8126 	bne.w	801075a <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 801050e:	6923      	ldr	r3, [r4, #16]
 8010510:	2b0f      	cmp	r3, #15
 8010512:	f200 80ea 	bhi.w	80106ea <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	2b05      	cmp	r3, #5
 801051a:	f43f af73 	beq.w	8010404 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 801051e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010520:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010522:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 8010524:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010526:	6a19      	ldr	r1, [r3, #32]
 8010528:	f021 0101 	bic.w	r1, r1, #1
 801052c:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801052e:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010530:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010534:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8010538:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801053a:	621c      	str	r4, [r3, #32]
}
 801053c:	bd70      	pop	{r4, r5, r6, pc}
 801053e:	bf00      	nop
 8010540:	fffefff8 	.word	0xfffefff8
 8010544:	40010000 	.word	0x40010000
 8010548:	40000400 	.word	0x40000400
 801054c:	40001800 	.word	0x40001800
 8010550:	40000800 	.word	0x40000800
 8010554:	40000c00 	.word	0x40000c00
 8010558:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801055c:	4a85      	ldr	r2, [pc, #532]	; (8010774 <TIM_SlaveTimer_SetConfig+0x448>)
 801055e:	4986      	ldr	r1, [pc, #536]	; (8010778 <TIM_SlaveTimer_SetConfig+0x44c>)
 8010560:	4293      	cmp	r3, r2
 8010562:	bf18      	it	ne
 8010564:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010568:	bf14      	ite	ne
 801056a:	2201      	movne	r2, #1
 801056c:	2200      	moveq	r2, #0
 801056e:	428b      	cmp	r3, r1
 8010570:	bf0c      	ite	eq
 8010572:	2200      	moveq	r2, #0
 8010574:	f002 0201 	andne.w	r2, r2, #1
 8010578:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801057c:	428b      	cmp	r3, r1
 801057e:	bf0c      	ite	eq
 8010580:	2200      	moveq	r2, #0
 8010582:	f002 0201 	andne.w	r2, r2, #1
 8010586:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801058a:	428b      	cmp	r3, r1
 801058c:	bf0c      	ite	eq
 801058e:	2200      	moveq	r2, #0
 8010590:	f002 0201 	andne.w	r2, r2, #1
 8010594:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010598:	428b      	cmp	r3, r1
 801059a:	bf0c      	ite	eq
 801059c:	2200      	moveq	r2, #0
 801059e:	f002 0201 	andne.w	r2, r2, #1
 80105a2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80105a6:	428b      	cmp	r3, r1
 80105a8:	bf0c      	ite	eq
 80105aa:	2200      	moveq	r2, #0
 80105ac:	f002 0201 	andne.w	r2, r2, #1
 80105b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105b4:	428b      	cmp	r3, r1
 80105b6:	bf0c      	ite	eq
 80105b8:	2200      	moveq	r2, #0
 80105ba:	f002 0201 	andne.w	r2, r2, #1
 80105be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105c2:	428b      	cmp	r3, r1
 80105c4:	bf0c      	ite	eq
 80105c6:	2200      	moveq	r2, #0
 80105c8:	f002 0201 	andne.w	r2, r2, #1
 80105cc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80105d0:	428b      	cmp	r3, r1
 80105d2:	bf0c      	ite	eq
 80105d4:	2200      	moveq	r2, #0
 80105d6:	f002 0201 	andne.w	r2, r2, #1
 80105da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80105de:	428b      	cmp	r3, r1
 80105e0:	bf0c      	ite	eq
 80105e2:	2200      	moveq	r2, #0
 80105e4:	f002 0201 	andne.w	r2, r2, #1
 80105e8:	b11a      	cbz	r2, 80105f2 <TIM_SlaveTimer_SetConfig+0x2c6>
 80105ea:	4a64      	ldr	r2, [pc, #400]	; (801077c <TIM_SlaveTimer_SetConfig+0x450>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	f040 80ba 	bne.w	8010766 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80105f2:	68a3      	ldr	r3, [r4, #8]
 80105f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105f8:	bf18      	it	ne
 80105fa:	2b0a      	cmpne	r3, #10
 80105fc:	d003      	beq.n	8010606 <TIM_SlaveTimer_SetConfig+0x2da>
 80105fe:	f033 0302 	bics.w	r3, r3, #2
 8010602:	f040 808b 	bne.w	801071c <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8010606:	6926      	ldr	r6, [r4, #16]
 8010608:	2e0f      	cmp	r6, #15
 801060a:	d874      	bhi.n	80106f6 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 8010610:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010612:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010614:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010618:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 801061c:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 801061e:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010620:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010622:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010624:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010628:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 801062c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801062e:	6219      	str	r1, [r3, #32]
}
 8010630:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010632:	4a50      	ldr	r2, [pc, #320]	; (8010774 <TIM_SlaveTimer_SetConfig+0x448>)
 8010634:	4950      	ldr	r1, [pc, #320]	; (8010778 <TIM_SlaveTimer_SetConfig+0x44c>)
 8010636:	4293      	cmp	r3, r2
 8010638:	bf18      	it	ne
 801063a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801063e:	bf14      	ite	ne
 8010640:	2201      	movne	r2, #1
 8010642:	2200      	moveq	r2, #0
 8010644:	428b      	cmp	r3, r1
 8010646:	bf0c      	ite	eq
 8010648:	2200      	moveq	r2, #0
 801064a:	f002 0201 	andne.w	r2, r2, #1
 801064e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010652:	428b      	cmp	r3, r1
 8010654:	bf0c      	ite	eq
 8010656:	2200      	moveq	r2, #0
 8010658:	f002 0201 	andne.w	r2, r2, #1
 801065c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010660:	428b      	cmp	r3, r1
 8010662:	bf0c      	ite	eq
 8010664:	2200      	moveq	r2, #0
 8010666:	f002 0201 	andne.w	r2, r2, #1
 801066a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801066e:	428b      	cmp	r3, r1
 8010670:	bf0c      	ite	eq
 8010672:	2200      	moveq	r2, #0
 8010674:	f002 0201 	andne.w	r2, r2, #1
 8010678:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801067c:	428b      	cmp	r3, r1
 801067e:	bf0c      	ite	eq
 8010680:	2200      	moveq	r2, #0
 8010682:	f002 0201 	andne.w	r2, r2, #1
 8010686:	b112      	cbz	r2, 801068e <TIM_SlaveTimer_SetConfig+0x362>
 8010688:	4a3d      	ldr	r2, [pc, #244]	; (8010780 <TIM_SlaveTimer_SetConfig+0x454>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d15f      	bne.n	801074e <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801068e:	68a3      	ldr	r3, [r4, #8]
 8010690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010694:	bf18      	it	ne
 8010696:	2b0a      	cmpne	r3, #10
 8010698:	d002      	beq.n	80106a0 <TIM_SlaveTimer_SetConfig+0x374>
 801069a:	f033 0302 	bics.w	r3, r3, #2
 801069e:	d137      	bne.n	8010710 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106a0:	6926      	ldr	r6, [r4, #16]
 80106a2:	2e0f      	cmp	r6, #15
 80106a4:	d81a      	bhi.n	80106dc <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106aa:	6a18      	ldr	r0, [r3, #32]
 80106ac:	f020 0010 	bic.w	r0, r0, #16
 80106b0:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80106b2:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 80106b4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80106b6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106c0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80106c4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80106c8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80106ca:	621a      	str	r2, [r3, #32]
}
 80106cc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106ce:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 80106d2:	482c      	ldr	r0, [pc, #176]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 80106d4:	f7f5 f926 	bl	8005924 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80106d8:	6921      	ldr	r1, [r4, #16]
 80106da:	e683      	b.n	80103e4 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106dc:	f641 511f 	movw	r1, #7455	; 0x1d1f
 80106e0:	4828      	ldr	r0, [pc, #160]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 80106e2:	f7f5 f91f 	bl	8005924 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80106e6:	6926      	ldr	r6, [r4, #16]
 80106e8:	e7dd      	b.n	80106a6 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106ea:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 80106ee:	4825      	ldr	r0, [pc, #148]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 80106f0:	f7f5 f918 	bl	8005924 <assert_failed>
 80106f4:	e70f      	b.n	8010516 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80106f6:	f641 5111 	movw	r1, #7441	; 0x1d11
 80106fa:	4822      	ldr	r0, [pc, #136]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 80106fc:	f7f5 f912 	bl	8005924 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010700:	6926      	ldr	r6, [r4, #16]
 8010702:	e783      	b.n	801060c <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8010704:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 8010708:	481e      	ldr	r0, [pc, #120]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 801070a:	f7f5 f90b 	bl	8005924 <assert_failed>
 801070e:	e65b      	b.n	80103c8 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010710:	f641 511e 	movw	r1, #7454	; 0x1d1e
 8010714:	481b      	ldr	r0, [pc, #108]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 8010716:	f7f5 f905 	bl	8005924 <assert_failed>
 801071a:	e7c1      	b.n	80106a0 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 801071c:	f641 5110 	movw	r1, #7440	; 0x1d10
 8010720:	4818      	ldr	r0, [pc, #96]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 8010722:	f7f5 f8ff 	bl	8005924 <assert_failed>
 8010726:	e76e      	b.n	8010606 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8010728:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 801072c:	4815      	ldr	r0, [pc, #84]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 801072e:	f7f5 f8f9 	bl	8005924 <assert_failed>
 8010732:	e653      	b.n	80103dc <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010734:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 8010738:	4812      	ldr	r0, [pc, #72]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 801073a:	f7f5 f8f3 	bl	8005924 <assert_failed>
 801073e:	e63e      	b.n	80103be <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010740:	f641 512e 	movw	r1, #7470	; 0x1d2e
 8010744:	480f      	ldr	r0, [pc, #60]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 8010746:	f7f5 f8ed 	bl	8005924 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 801074a:	2000      	movs	r0, #0
}
 801074c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801074e:	f641 511d 	movw	r1, #7453	; 0x1d1d
 8010752:	480c      	ldr	r0, [pc, #48]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 8010754:	f7f5 f8e6 	bl	8005924 <assert_failed>
 8010758:	e799      	b.n	801068e <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801075a:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 801075e:	4809      	ldr	r0, [pc, #36]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 8010760:	f7f5 f8e0 	bl	8005924 <assert_failed>
 8010764:	e6d3      	b.n	801050e <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010766:	f641 510f 	movw	r1, #7439	; 0x1d0f
 801076a:	4806      	ldr	r0, [pc, #24]	; (8010784 <TIM_SlaveTimer_SetConfig+0x458>)
 801076c:	f7f5 f8da 	bl	8005924 <assert_failed>
 8010770:	e73f      	b.n	80105f2 <TIM_SlaveTimer_SetConfig+0x2c6>
 8010772:	bf00      	nop
 8010774:	40010000 	.word	0x40010000
 8010778:	40000400 	.word	0x40000400
 801077c:	40002000 	.word	0x40002000
 8010780:	40001800 	.word	0x40001800
 8010784:	0802e580 	.word	0x0802e580

08010788 <HAL_TIM_Base_Start>:
{
 8010788:	b538      	push	{r3, r4, r5, lr}
 801078a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801078c:	4b52      	ldr	r3, [pc, #328]	; (80108d8 <HAL_TIM_Base_Start+0x150>)
 801078e:	4d53      	ldr	r5, [pc, #332]	; (80108dc <HAL_TIM_Base_Start+0x154>)
 8010790:	6822      	ldr	r2, [r4, #0]
 8010792:	4953      	ldr	r1, [pc, #332]	; (80108e0 <HAL_TIM_Base_Start+0x158>)
 8010794:	429a      	cmp	r2, r3
 8010796:	bf18      	it	ne
 8010798:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801079c:	4851      	ldr	r0, [pc, #324]	; (80108e4 <HAL_TIM_Base_Start+0x15c>)
 801079e:	bf14      	ite	ne
 80107a0:	2301      	movne	r3, #1
 80107a2:	2300      	moveq	r3, #0
 80107a4:	42aa      	cmp	r2, r5
 80107a6:	bf0c      	ite	eq
 80107a8:	2300      	moveq	r3, #0
 80107aa:	f003 0301 	andne.w	r3, r3, #1
 80107ae:	428a      	cmp	r2, r1
 80107b0:	bf0c      	ite	eq
 80107b2:	2300      	moveq	r3, #0
 80107b4:	f003 0301 	andne.w	r3, r3, #1
 80107b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107bc:	4282      	cmp	r2, r0
 80107be:	bf0c      	ite	eq
 80107c0:	2300      	moveq	r3, #0
 80107c2:	f003 0301 	andne.w	r3, r3, #1
 80107c6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80107ca:	428a      	cmp	r2, r1
 80107cc:	bf0c      	ite	eq
 80107ce:	2300      	moveq	r3, #0
 80107d0:	f003 0301 	andne.w	r3, r3, #1
 80107d4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80107d8:	4282      	cmp	r2, r0
 80107da:	bf0c      	ite	eq
 80107dc:	2300      	moveq	r3, #0
 80107de:	f003 0301 	andne.w	r3, r3, #1
 80107e2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80107e6:	428a      	cmp	r2, r1
 80107e8:	bf0c      	ite	eq
 80107ea:	2300      	moveq	r3, #0
 80107ec:	f003 0301 	andne.w	r3, r3, #1
 80107f0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80107f4:	4282      	cmp	r2, r0
 80107f6:	bf0c      	ite	eq
 80107f8:	2300      	moveq	r3, #0
 80107fa:	f003 0301 	andne.w	r3, r3, #1
 80107fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010802:	428a      	cmp	r2, r1
 8010804:	bf0c      	ite	eq
 8010806:	2300      	moveq	r3, #0
 8010808:	f003 0301 	andne.w	r3, r3, #1
 801080c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010810:	4282      	cmp	r2, r0
 8010812:	bf0c      	ite	eq
 8010814:	2300      	moveq	r3, #0
 8010816:	f003 0301 	andne.w	r3, r3, #1
 801081a:	428a      	cmp	r2, r1
 801081c:	bf0c      	ite	eq
 801081e:	2300      	moveq	r3, #0
 8010820:	f003 0301 	andne.w	r3, r3, #1
 8010824:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010828:	428a      	cmp	r2, r1
 801082a:	bf0c      	ite	eq
 801082c:	2300      	moveq	r3, #0
 801082e:	f003 0301 	andne.w	r3, r3, #1
 8010832:	b113      	cbz	r3, 801083a <HAL_TIM_Base_Start+0xb2>
 8010834:	4b2c      	ldr	r3, [pc, #176]	; (80108e8 <HAL_TIM_Base_Start+0x160>)
 8010836:	429a      	cmp	r2, r3
 8010838:	d143      	bne.n	80108c2 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 801083a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801083e:	2b01      	cmp	r3, #1
 8010840:	d13b      	bne.n	80108ba <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010842:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010844:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010846:	4b24      	ldr	r3, [pc, #144]	; (80108d8 <HAL_TIM_Base_Start+0x150>)
 8010848:	4d24      	ldr	r5, [pc, #144]	; (80108dc <HAL_TIM_Base_Start+0x154>)
 801084a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801084e:	bf18      	it	ne
 8010850:	429a      	cmpne	r2, r3
 8010852:	4923      	ldr	r1, [pc, #140]	; (80108e0 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 8010854:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010858:	bf0c      	ite	eq
 801085a:	2301      	moveq	r3, #1
 801085c:	2300      	movne	r3, #0
 801085e:	4c21      	ldr	r4, [pc, #132]	; (80108e4 <HAL_TIM_Base_Start+0x15c>)
 8010860:	42aa      	cmp	r2, r5
 8010862:	bf08      	it	eq
 8010864:	f043 0301 	orreq.w	r3, r3, #1
 8010868:	4820      	ldr	r0, [pc, #128]	; (80108ec <HAL_TIM_Base_Start+0x164>)
 801086a:	428a      	cmp	r2, r1
 801086c:	bf08      	it	eq
 801086e:	f043 0301 	orreq.w	r3, r3, #1
 8010872:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8010876:	42a2      	cmp	r2, r4
 8010878:	bf08      	it	eq
 801087a:	f043 0301 	orreq.w	r3, r3, #1
 801087e:	4282      	cmp	r2, r0
 8010880:	bf08      	it	eq
 8010882:	f043 0301 	orreq.w	r3, r3, #1
 8010886:	428a      	cmp	r2, r1
 8010888:	bf08      	it	eq
 801088a:	f043 0301 	orreq.w	r3, r3, #1
 801088e:	b933      	cbnz	r3, 801089e <HAL_TIM_Base_Start+0x116>
 8010890:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010894:	1a10      	subs	r0, r2, r0
 8010896:	fab0 f080 	clz	r0, r0
 801089a:	0940      	lsrs	r0, r0, #5
 801089c:	b1b8      	cbz	r0, 80108ce <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801089e:	6891      	ldr	r1, [r2, #8]
 80108a0:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <HAL_TIM_Base_Start+0x168>)
 80108a2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108a4:	2b06      	cmp	r3, #6
 80108a6:	d00a      	beq.n	80108be <HAL_TIM_Base_Start+0x136>
 80108a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108ac:	d007      	beq.n	80108be <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 80108ae:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80108b0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80108b2:	f043 0301 	orr.w	r3, r3, #1
 80108b6:	6013      	str	r3, [r2, #0]
}
 80108b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80108ba:	2001      	movs	r0, #1
}
 80108bc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80108be:	2000      	movs	r0, #0
}
 80108c0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80108c2:	f240 1197 	movw	r1, #407	; 0x197
 80108c6:	480b      	ldr	r0, [pc, #44]	; (80108f4 <HAL_TIM_Base_Start+0x16c>)
 80108c8:	f7f5 f82c 	bl	8005924 <assert_failed>
 80108cc:	e7b5      	b.n	801083a <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80108ce:	6813      	ldr	r3, [r2, #0]
 80108d0:	f043 0301 	orr.w	r3, r3, #1
 80108d4:	6013      	str	r3, [r2, #0]
}
 80108d6:	bd38      	pop	{r3, r4, r5, pc}
 80108d8:	40010000 	.word	0x40010000
 80108dc:	40000400 	.word	0x40000400
 80108e0:	40000800 	.word	0x40000800
 80108e4:	40000c00 	.word	0x40000c00
 80108e8:	40002000 	.word	0x40002000
 80108ec:	40010400 	.word	0x40010400
 80108f0:	00010007 	.word	0x00010007
 80108f4:	0802e580 	.word	0x0802e580

080108f8 <HAL_TIM_Base_Start_IT>:
{
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80108fc:	4b54      	ldr	r3, [pc, #336]	; (8010a50 <HAL_TIM_Base_Start_IT+0x158>)
 80108fe:	4d55      	ldr	r5, [pc, #340]	; (8010a54 <HAL_TIM_Base_Start_IT+0x15c>)
 8010900:	6822      	ldr	r2, [r4, #0]
 8010902:	4955      	ldr	r1, [pc, #340]	; (8010a58 <HAL_TIM_Base_Start_IT+0x160>)
 8010904:	429a      	cmp	r2, r3
 8010906:	bf18      	it	ne
 8010908:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801090c:	4853      	ldr	r0, [pc, #332]	; (8010a5c <HAL_TIM_Base_Start_IT+0x164>)
 801090e:	bf14      	ite	ne
 8010910:	2301      	movne	r3, #1
 8010912:	2300      	moveq	r3, #0
 8010914:	42aa      	cmp	r2, r5
 8010916:	bf0c      	ite	eq
 8010918:	2300      	moveq	r3, #0
 801091a:	f003 0301 	andne.w	r3, r3, #1
 801091e:	428a      	cmp	r2, r1
 8010920:	bf0c      	ite	eq
 8010922:	2300      	moveq	r3, #0
 8010924:	f003 0301 	andne.w	r3, r3, #1
 8010928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801092c:	4282      	cmp	r2, r0
 801092e:	bf0c      	ite	eq
 8010930:	2300      	moveq	r3, #0
 8010932:	f003 0301 	andne.w	r3, r3, #1
 8010936:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801093a:	428a      	cmp	r2, r1
 801093c:	bf0c      	ite	eq
 801093e:	2300      	moveq	r3, #0
 8010940:	f003 0301 	andne.w	r3, r3, #1
 8010944:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010948:	4282      	cmp	r2, r0
 801094a:	bf0c      	ite	eq
 801094c:	2300      	moveq	r3, #0
 801094e:	f003 0301 	andne.w	r3, r3, #1
 8010952:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010956:	428a      	cmp	r2, r1
 8010958:	bf0c      	ite	eq
 801095a:	2300      	moveq	r3, #0
 801095c:	f003 0301 	andne.w	r3, r3, #1
 8010960:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010964:	4282      	cmp	r2, r0
 8010966:	bf0c      	ite	eq
 8010968:	2300      	moveq	r3, #0
 801096a:	f003 0301 	andne.w	r3, r3, #1
 801096e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010972:	428a      	cmp	r2, r1
 8010974:	bf0c      	ite	eq
 8010976:	2300      	moveq	r3, #0
 8010978:	f003 0301 	andne.w	r3, r3, #1
 801097c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010980:	4282      	cmp	r2, r0
 8010982:	bf0c      	ite	eq
 8010984:	2300      	moveq	r3, #0
 8010986:	f003 0301 	andne.w	r3, r3, #1
 801098a:	428a      	cmp	r2, r1
 801098c:	bf0c      	ite	eq
 801098e:	2300      	moveq	r3, #0
 8010990:	f003 0301 	andne.w	r3, r3, #1
 8010994:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010998:	428a      	cmp	r2, r1
 801099a:	bf0c      	ite	eq
 801099c:	2300      	moveq	r3, #0
 801099e:	f003 0301 	andne.w	r3, r3, #1
 80109a2:	b113      	cbz	r3, 80109aa <HAL_TIM_Base_Start_IT+0xb2>
 80109a4:	4b2e      	ldr	r3, [pc, #184]	; (8010a60 <HAL_TIM_Base_Start_IT+0x168>)
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d147      	bne.n	8010a3a <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 80109aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d13f      	bne.n	8010a32 <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109b2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80109b4:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109b6:	4b26      	ldr	r3, [pc, #152]	; (8010a50 <HAL_TIM_Base_Start_IT+0x158>)
 80109b8:	4d26      	ldr	r5, [pc, #152]	; (8010a54 <HAL_TIM_Base_Start_IT+0x15c>)
 80109ba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80109be:	bf18      	it	ne
 80109c0:	429a      	cmpne	r2, r3
 80109c2:	4825      	ldr	r0, [pc, #148]	; (8010a58 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 80109c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109c8:	bf0c      	ite	eq
 80109ca:	2301      	moveq	r3, #1
 80109cc:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109ce:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109d0:	42aa      	cmp	r2, r5
 80109d2:	bf08      	it	eq
 80109d4:	f043 0301 	orreq.w	r3, r3, #1
 80109d8:	4c20      	ldr	r4, [pc, #128]	; (8010a5c <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109da:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109de:	4282      	cmp	r2, r0
 80109e0:	bf08      	it	eq
 80109e2:	f043 0301 	orreq.w	r3, r3, #1
 80109e6:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80109ea:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109ec:	42a2      	cmp	r2, r4
 80109ee:	bf08      	it	eq
 80109f0:	f043 0301 	orreq.w	r3, r3, #1
 80109f4:	491b      	ldr	r1, [pc, #108]	; (8010a64 <HAL_TIM_Base_Start_IT+0x16c>)
 80109f6:	4282      	cmp	r2, r0
 80109f8:	bf08      	it	eq
 80109fa:	f043 0301 	orreq.w	r3, r3, #1
 80109fe:	428a      	cmp	r2, r1
 8010a00:	bf08      	it	eq
 8010a02:	f043 0301 	orreq.w	r3, r3, #1
 8010a06:	b933      	cbnz	r3, 8010a16 <HAL_TIM_Base_Start_IT+0x11e>
 8010a08:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8010a0c:	1a10      	subs	r0, r2, r0
 8010a0e:	fab0 f080 	clz	r0, r0
 8010a12:	0940      	lsrs	r0, r0, #5
 8010a14:	b1b8      	cbz	r0, 8010a46 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a16:	6891      	ldr	r1, [r2, #8]
 8010a18:	4b13      	ldr	r3, [pc, #76]	; (8010a68 <HAL_TIM_Base_Start_IT+0x170>)
 8010a1a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a1c:	2b06      	cmp	r3, #6
 8010a1e:	d00a      	beq.n	8010a36 <HAL_TIM_Base_Start_IT+0x13e>
 8010a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a24:	d007      	beq.n	8010a36 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 8010a26:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8010a28:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8010a2a:	f043 0301 	orr.w	r3, r3, #1
 8010a2e:	6013      	str	r3, [r2, #0]
}
 8010a30:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010a32:	2001      	movs	r0, #1
}
 8010a34:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8010a36:	2000      	movs	r0, #0
}
 8010a38:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010a3a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8010a3e:	480b      	ldr	r0, [pc, #44]	; (8010a6c <HAL_TIM_Base_Start_IT+0x174>)
 8010a40:	f7f4 ff70 	bl	8005924 <assert_failed>
 8010a44:	e7b1      	b.n	80109aa <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 8010a46:	6813      	ldr	r3, [r2, #0]
 8010a48:	f043 0301 	orr.w	r3, r3, #1
 8010a4c:	6013      	str	r3, [r2, #0]
}
 8010a4e:	bd38      	pop	{r3, r4, r5, pc}
 8010a50:	40010000 	.word	0x40010000
 8010a54:	40000400 	.word	0x40000400
 8010a58:	40000800 	.word	0x40000800
 8010a5c:	40000c00 	.word	0x40000c00
 8010a60:	40002000 	.word	0x40002000
 8010a64:	40014000 	.word	0x40014000
 8010a68:	00010007 	.word	0x00010007
 8010a6c:	0802e580 	.word	0x0802e580

08010a70 <HAL_TIM_OC_MspInit>:
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop

08010a74 <HAL_TIM_PWM_MspInit>:
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop

08010a78 <HAL_TIM_IC_MspInit>:
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop

08010a7c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010a7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	f000 8151 	beq.w	8010d28 <HAL_TIM_ConfigClockSource+0x2ac>
 8010a86:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8010a88:	2302      	movs	r3, #2
{
 8010a8a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8010a8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010a90:	460d      	mov	r5, r1
 8010a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010a96:	4604      	mov	r4, r0
 8010a98:	680b      	ldr	r3, [r1, #0]
 8010a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a9e:	bf18      	it	ne
 8010aa0:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 8010aa4:	bf14      	ite	ne
 8010aa6:	2201      	movne	r2, #1
 8010aa8:	2200      	moveq	r2, #0
 8010aaa:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 8010aae:	f002 0201 	and.w	r2, r2, #1
 8010ab2:	bf08      	it	eq
 8010ab4:	2200      	moveq	r2, #0
 8010ab6:	b112      	cbz	r2, 8010abe <HAL_TIM_ConfigClockSource+0x42>
 8010ab8:	2940      	cmp	r1, #64	; 0x40
 8010aba:	f040 8267 	bne.w	8010f8c <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 8010abe:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 8010ac0:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010ac2:	499a      	ldr	r1, [pc, #616]	; (8010d2c <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 8010ac4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010ac6:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 8010aca:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010acc:	f000 8138 	beq.w	8010d40 <HAL_TIM_ConfigClockSource+0x2c4>
 8010ad0:	d84f      	bhi.n	8010b72 <HAL_TIM_ConfigClockSource+0xf6>
 8010ad2:	2b40      	cmp	r3, #64	; 0x40
 8010ad4:	f000 81d7 	beq.w	8010e86 <HAL_TIM_ConfigClockSource+0x40a>
 8010ad8:	f240 80a2 	bls.w	8010c20 <HAL_TIM_ConfigClockSource+0x1a4>
 8010adc:	2b50      	cmp	r3, #80	; 0x50
 8010ade:	f040 8097 	bne.w	8010c10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010ae2:	4b93      	ldr	r3, [pc, #588]	; (8010d30 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010ae4:	4993      	ldr	r1, [pc, #588]	; (8010d34 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	bf18      	it	ne
 8010aea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010aee:	bf14      	ite	ne
 8010af0:	2301      	movne	r3, #1
 8010af2:	2300      	moveq	r3, #0
 8010af4:	428a      	cmp	r2, r1
 8010af6:	bf0c      	ite	eq
 8010af8:	2300      	moveq	r3, #0
 8010afa:	f003 0301 	andne.w	r3, r3, #1
 8010afe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b02:	428a      	cmp	r2, r1
 8010b04:	bf0c      	ite	eq
 8010b06:	2300      	moveq	r3, #0
 8010b08:	f003 0301 	andne.w	r3, r3, #1
 8010b0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010b10:	428a      	cmp	r2, r1
 8010b12:	bf0c      	ite	eq
 8010b14:	2300      	moveq	r3, #0
 8010b16:	f003 0301 	andne.w	r3, r3, #1
 8010b1a:	b11b      	cbz	r3, 8010b24 <HAL_TIM_ConfigClockSource+0xa8>
 8010b1c:	4b86      	ldr	r3, [pc, #536]	; (8010d38 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	f040 8222 	bne.w	8010f68 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010b24:	686b      	ldr	r3, [r5, #4]
 8010b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b2a:	bf18      	it	ne
 8010b2c:	2b0a      	cmpne	r3, #10
 8010b2e:	d003      	beq.n	8010b38 <HAL_TIM_ConfigClockSource+0xbc>
 8010b30:	f033 0302 	bics.w	r3, r3, #2
 8010b34:	f040 81fe 	bne.w	8010f34 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010b38:	68ee      	ldr	r6, [r5, #12]
 8010b3a:	2e0f      	cmp	r6, #15
 8010b3c:	f200 8242 	bhi.w	8010fc4 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010b44:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b46:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b48:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b4c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010b50:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010b52:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b54:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b56:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b5c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b62:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010b64:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b6a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010b6e:	609a      	str	r2, [r3, #8]
}
 8010b70:	e04f      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b76:	f000 812c 	beq.w	8010dd2 <HAL_TIM_ConfigClockSource+0x356>
 8010b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b7e:	d17e      	bne.n	8010c7e <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010b80:	4b6b      	ldr	r3, [pc, #428]	; (8010d30 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010b82:	496c      	ldr	r1, [pc, #432]	; (8010d34 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010b84:	429a      	cmp	r2, r3
 8010b86:	bf18      	it	ne
 8010b88:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010b8c:	bf14      	ite	ne
 8010b8e:	2301      	movne	r3, #1
 8010b90:	2300      	moveq	r3, #0
 8010b92:	428a      	cmp	r2, r1
 8010b94:	bf0c      	ite	eq
 8010b96:	2300      	moveq	r3, #0
 8010b98:	f003 0301 	andne.w	r3, r3, #1
 8010b9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ba0:	428a      	cmp	r2, r1
 8010ba2:	bf0c      	ite	eq
 8010ba4:	2300      	moveq	r3, #0
 8010ba6:	f003 0301 	andne.w	r3, r3, #1
 8010baa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010bae:	428a      	cmp	r2, r1
 8010bb0:	bf0c      	ite	eq
 8010bb2:	2300      	moveq	r3, #0
 8010bb4:	f003 0301 	andne.w	r3, r3, #1
 8010bb8:	b11b      	cbz	r3, 8010bc2 <HAL_TIM_ConfigClockSource+0x146>
 8010bba:	4b5f      	ldr	r3, [pc, #380]	; (8010d38 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	f040 81c5 	bne.w	8010f4c <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010bc2:	68ab      	ldr	r3, [r5, #8]
 8010bc4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010bc8:	f040 8210 	bne.w	8010fec <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010bcc:	686b      	ldr	r3, [r5, #4]
 8010bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bd2:	bf18      	it	ne
 8010bd4:	2b0a      	cmpne	r3, #10
 8010bd6:	d003      	beq.n	8010be0 <HAL_TIM_ConfigClockSource+0x164>
 8010bd8:	f033 0302 	bics.w	r3, r3, #2
 8010bdc:	f040 81a4 	bne.w	8010f28 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010be0:	68ee      	ldr	r6, [r5, #12]
 8010be2:	2e0f      	cmp	r6, #15
 8010be4:	f200 81d9 	bhi.w	8010f9a <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 8010be8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010bea:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010bee:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010bf0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010bf2:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010bf4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010bf8:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010bfa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010bfe:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c00:	6893      	ldr	r3, [r2, #8]
 8010c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010c06:	6093      	str	r3, [r2, #8]
      break;
 8010c08:	e003      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010c0a:	f033 0110 	bics.w	r1, r3, #16
 8010c0e:	d00c      	beq.n	8010c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8010c10:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8010c12:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8010c14:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010c16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010c1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8010c20:	2b20      	cmp	r3, #32
 8010c22:	d002      	beq.n	8010c2a <HAL_TIM_ConfigClockSource+0x1ae>
 8010c24:	d9f1      	bls.n	8010c0a <HAL_TIM_ConfigClockSource+0x18e>
 8010c26:	2b30      	cmp	r3, #48	; 0x30
 8010c28:	d1f2      	bne.n	8010c10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010c2a:	4941      	ldr	r1, [pc, #260]	; (8010d30 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010c2c:	4841      	ldr	r0, [pc, #260]	; (8010d34 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010c2e:	428a      	cmp	r2, r1
 8010c30:	bf18      	it	ne
 8010c32:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c36:	bf14      	ite	ne
 8010c38:	2101      	movne	r1, #1
 8010c3a:	2100      	moveq	r1, #0
 8010c3c:	4282      	cmp	r2, r0
 8010c3e:	bf0c      	ite	eq
 8010c40:	2100      	moveq	r1, #0
 8010c42:	f001 0101 	andne.w	r1, r1, #1
 8010c46:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010c4a:	4282      	cmp	r2, r0
 8010c4c:	bf0c      	ite	eq
 8010c4e:	2100      	moveq	r1, #0
 8010c50:	f001 0101 	andne.w	r1, r1, #1
 8010c54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8010c58:	4282      	cmp	r2, r0
 8010c5a:	bf0c      	ite	eq
 8010c5c:	2100      	moveq	r1, #0
 8010c5e:	f001 0101 	andne.w	r1, r1, #1
 8010c62:	b119      	cbz	r1, 8010c6c <HAL_TIM_ConfigClockSource+0x1f0>
 8010c64:	4934      	ldr	r1, [pc, #208]	; (8010d38 <HAL_TIM_ConfigClockSource+0x2bc>)
 8010c66:	428a      	cmp	r2, r1
 8010c68:	f040 8176 	bne.w	8010f58 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 8010c6c:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010c6e:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c70:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c74:	430b      	orrs	r3, r1
 8010c76:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8010c7a:	6093      	str	r3, [r2, #8]
}
 8010c7c:	e7c9      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 8010c7e:	2b70      	cmp	r3, #112	; 0x70
 8010c80:	d1c6      	bne.n	8010c10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010c82:	4b2b      	ldr	r3, [pc, #172]	; (8010d30 <HAL_TIM_ConfigClockSource+0x2b4>)
 8010c84:	492b      	ldr	r1, [pc, #172]	; (8010d34 <HAL_TIM_ConfigClockSource+0x2b8>)
 8010c86:	429a      	cmp	r2, r3
 8010c88:	bf18      	it	ne
 8010c8a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010c8e:	bf14      	ite	ne
 8010c90:	2301      	movne	r3, #1
 8010c92:	2300      	moveq	r3, #0
 8010c94:	428a      	cmp	r2, r1
 8010c96:	bf0c      	ite	eq
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	f003 0301 	andne.w	r3, r3, #1
 8010c9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ca2:	428a      	cmp	r2, r1
 8010ca4:	bf0c      	ite	eq
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	f003 0301 	andne.w	r3, r3, #1
 8010cac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010cb0:	428a      	cmp	r2, r1
 8010cb2:	bf0c      	ite	eq
 8010cb4:	2300      	moveq	r3, #0
 8010cb6:	f003 0301 	andne.w	r3, r3, #1
 8010cba:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010cbe:	428a      	cmp	r2, r1
 8010cc0:	bf0c      	ite	eq
 8010cc2:	2300      	moveq	r3, #0
 8010cc4:	f003 0301 	andne.w	r3, r3, #1
 8010cc8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010ccc:	428a      	cmp	r2, r1
 8010cce:	bf0c      	ite	eq
 8010cd0:	2300      	moveq	r3, #0
 8010cd2:	f003 0301 	andne.w	r3, r3, #1
 8010cd6:	b11b      	cbz	r3, 8010ce0 <HAL_TIM_ConfigClockSource+0x264>
 8010cd8:	4b18      	ldr	r3, [pc, #96]	; (8010d3c <HAL_TIM_ConfigClockSource+0x2c0>)
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	f040 818c 	bne.w	8010ff8 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010ce0:	68ab      	ldr	r3, [r5, #8]
 8010ce2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010ce6:	f040 817b 	bne.w	8010fe0 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010cea:	686b      	ldr	r3, [r5, #4]
 8010cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cf0:	bf18      	it	ne
 8010cf2:	2b0a      	cmpne	r3, #10
 8010cf4:	d003      	beq.n	8010cfe <HAL_TIM_ConfigClockSource+0x282>
 8010cf6:	f033 0302 	bics.w	r3, r3, #2
 8010cfa:	f040 8121 	bne.w	8010f40 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010cfe:	68ee      	ldr	r6, [r5, #12]
 8010d00:	2e0f      	cmp	r6, #15
 8010d02:	f200 8166 	bhi.w	8010fd2 <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 8010d06:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010d08:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8010d0c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d0e:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010d10:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010d12:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8010d16:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d18:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 8010d1c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010d1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010d24:	6093      	str	r3, [r2, #8]
      break;
 8010d26:	e774      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 8010d28:	2002      	movs	r0, #2
}
 8010d2a:	4770      	bx	lr
 8010d2c:	fffe0088 	.word	0xfffe0088
 8010d30:	40010000 	.word	0x40010000
 8010d34:	40000400 	.word	0x40000400
 8010d38:	40010400 	.word	0x40010400
 8010d3c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010d40:	4bb0      	ldr	r3, [pc, #704]	; (8011004 <HAL_TIM_ConfigClockSource+0x588>)
 8010d42:	49b1      	ldr	r1, [pc, #708]	; (8011008 <HAL_TIM_ConfigClockSource+0x58c>)
 8010d44:	429a      	cmp	r2, r3
 8010d46:	bf18      	it	ne
 8010d48:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010d4c:	bf14      	ite	ne
 8010d4e:	2301      	movne	r3, #1
 8010d50:	2300      	moveq	r3, #0
 8010d52:	428a      	cmp	r2, r1
 8010d54:	bf0c      	ite	eq
 8010d56:	2300      	moveq	r3, #0
 8010d58:	f003 0301 	andne.w	r3, r3, #1
 8010d5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d60:	428a      	cmp	r2, r1
 8010d62:	bf0c      	ite	eq
 8010d64:	2300      	moveq	r3, #0
 8010d66:	f003 0301 	andne.w	r3, r3, #1
 8010d6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010d6e:	428a      	cmp	r2, r1
 8010d70:	bf0c      	ite	eq
 8010d72:	2300      	moveq	r3, #0
 8010d74:	f003 0301 	andne.w	r3, r3, #1
 8010d78:	b11b      	cbz	r3, 8010d82 <HAL_TIM_ConfigClockSource+0x306>
 8010d7a:	4ba4      	ldr	r3, [pc, #656]	; (801100c <HAL_TIM_ConfigClockSource+0x590>)
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	f040 80ff 	bne.w	8010f80 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010d82:	686b      	ldr	r3, [r5, #4]
 8010d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d88:	bf18      	it	ne
 8010d8a:	2b0a      	cmpne	r3, #10
 8010d8c:	d003      	beq.n	8010d96 <HAL_TIM_ConfigClockSource+0x31a>
 8010d8e:	f033 0302 	bics.w	r3, r3, #2
 8010d92:	f040 80c3 	bne.w	8010f1c <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010d96:	68ee      	ldr	r6, [r5, #12]
 8010d98:	2e0f      	cmp	r6, #15
 8010d9a:	f200 810c 	bhi.w	8010fb6 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d9e:	6823      	ldr	r3, [r4, #0]
 8010da0:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010da2:	6a18      	ldr	r0, [r3, #32]
 8010da4:	f020 0010 	bic.w	r0, r0, #16
 8010da8:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8010daa:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 8010dac:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010dae:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010db0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010db4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010db8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8010dbc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010dc0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010dc2:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010dc4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010dc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010dca:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010dce:	609a      	str	r2, [r3, #8]
}
 8010dd0:	e71f      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010dd2:	4b8c      	ldr	r3, [pc, #560]	; (8011004 <HAL_TIM_ConfigClockSource+0x588>)
 8010dd4:	488c      	ldr	r0, [pc, #560]	; (8011008 <HAL_TIM_ConfigClockSource+0x58c>)
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	bf18      	it	ne
 8010dda:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010dde:	498c      	ldr	r1, [pc, #560]	; (8011010 <HAL_TIM_ConfigClockSource+0x594>)
 8010de0:	bf14      	ite	ne
 8010de2:	2301      	movne	r3, #1
 8010de4:	2300      	moveq	r3, #0
 8010de6:	4282      	cmp	r2, r0
 8010de8:	bf0c      	ite	eq
 8010dea:	2300      	moveq	r3, #0
 8010dec:	f003 0301 	andne.w	r3, r3, #1
 8010df0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010df4:	428a      	cmp	r2, r1
 8010df6:	bf0c      	ite	eq
 8010df8:	2300      	moveq	r3, #0
 8010dfa:	f003 0301 	andne.w	r3, r3, #1
 8010dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e02:	4282      	cmp	r2, r0
 8010e04:	bf0c      	ite	eq
 8010e06:	2300      	moveq	r3, #0
 8010e08:	f003 0301 	andne.w	r3, r3, #1
 8010e0c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010e10:	428a      	cmp	r2, r1
 8010e12:	bf0c      	ite	eq
 8010e14:	2300      	moveq	r3, #0
 8010e16:	f003 0301 	andne.w	r3, r3, #1
 8010e1a:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010e1e:	4282      	cmp	r2, r0
 8010e20:	bf0c      	ite	eq
 8010e22:	2300      	moveq	r3, #0
 8010e24:	f003 0301 	andne.w	r3, r3, #1
 8010e28:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	bf0c      	ite	eq
 8010e30:	2300      	moveq	r3, #0
 8010e32:	f003 0301 	andne.w	r3, r3, #1
 8010e36:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010e3a:	4282      	cmp	r2, r0
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	f003 0301 	andne.w	r3, r3, #1
 8010e44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010e48:	428a      	cmp	r2, r1
 8010e4a:	bf0c      	ite	eq
 8010e4c:	2300      	moveq	r3, #0
 8010e4e:	f003 0301 	andne.w	r3, r3, #1
 8010e52:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010e56:	4282      	cmp	r2, r0
 8010e58:	bf0c      	ite	eq
 8010e5a:	2300      	moveq	r3, #0
 8010e5c:	f003 0301 	andne.w	r3, r3, #1
 8010e60:	428a      	cmp	r2, r1
 8010e62:	bf0c      	ite	eq
 8010e64:	2300      	moveq	r3, #0
 8010e66:	f003 0301 	andne.w	r3, r3, #1
 8010e6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e6e:	428a      	cmp	r2, r1
 8010e70:	bf0c      	ite	eq
 8010e72:	2300      	moveq	r3, #0
 8010e74:	f003 0301 	andne.w	r3, r3, #1
 8010e78:	b11b      	cbz	r3, 8010e82 <HAL_TIM_ConfigClockSource+0x406>
 8010e7a:	4b66      	ldr	r3, [pc, #408]	; (8011014 <HAL_TIM_ConfigClockSource+0x598>)
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	f040 80cd 	bne.w	801101c <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 8010e82:	2000      	movs	r0, #0
 8010e84:	e6c5      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010e86:	4b5f      	ldr	r3, [pc, #380]	; (8011004 <HAL_TIM_ConfigClockSource+0x588>)
 8010e88:	495f      	ldr	r1, [pc, #380]	; (8011008 <HAL_TIM_ConfigClockSource+0x58c>)
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	bf18      	it	ne
 8010e8e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010e92:	bf14      	ite	ne
 8010e94:	2301      	movne	r3, #1
 8010e96:	2300      	moveq	r3, #0
 8010e98:	428a      	cmp	r2, r1
 8010e9a:	bf0c      	ite	eq
 8010e9c:	2300      	moveq	r3, #0
 8010e9e:	f003 0301 	andne.w	r3, r3, #1
 8010ea2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ea6:	428a      	cmp	r2, r1
 8010ea8:	bf0c      	ite	eq
 8010eaa:	2300      	moveq	r3, #0
 8010eac:	f003 0301 	andne.w	r3, r3, #1
 8010eb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010eb4:	428a      	cmp	r2, r1
 8010eb6:	bf0c      	ite	eq
 8010eb8:	2300      	moveq	r3, #0
 8010eba:	f003 0301 	andne.w	r3, r3, #1
 8010ebe:	b113      	cbz	r3, 8010ec6 <HAL_TIM_ConfigClockSource+0x44a>
 8010ec0:	4b52      	ldr	r3, [pc, #328]	; (801100c <HAL_TIM_ConfigClockSource+0x590>)
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d156      	bne.n	8010f74 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010ec6:	686b      	ldr	r3, [r5, #4]
 8010ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ecc:	bf18      	it	ne
 8010ece:	2b0a      	cmpne	r3, #10
 8010ed0:	d002      	beq.n	8010ed8 <HAL_TIM_ConfigClockSource+0x45c>
 8010ed2:	f033 0302 	bics.w	r3, r3, #2
 8010ed6:	d11b      	bne.n	8010f10 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010ed8:	68ee      	ldr	r6, [r5, #12]
 8010eda:	2e0f      	cmp	r6, #15
 8010edc:	d864      	bhi.n	8010fa8 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8010ee2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ee4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ee6:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eea:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8010eee:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010ef0:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ef2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ef4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ef6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010efa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8010efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f00:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010f02:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010f04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010f08:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010f0c:	609a      	str	r2, [r3, #8]
}
 8010f0e:	e680      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f10:	f241 51a6 	movw	r1, #5542	; 0x15a6
 8010f14:	4840      	ldr	r0, [pc, #256]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f16:	f7f4 fd05 	bl	8005924 <assert_failed>
 8010f1a:	e7dd      	b.n	8010ed8 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f1c:	f241 5196 	movw	r1, #5526	; 0x1596
 8010f20:	483d      	ldr	r0, [pc, #244]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f22:	f7f4 fcff 	bl	8005924 <assert_failed>
 8010f26:	e736      	b.n	8010d96 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f28:	f241 5173 	movw	r1, #5491	; 0x1573
 8010f2c:	483a      	ldr	r0, [pc, #232]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f2e:	f7f4 fcf9 	bl	8005924 <assert_failed>
 8010f32:	e655      	b.n	8010be0 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f34:	f241 5186 	movw	r1, #5510	; 0x1586
 8010f38:	4837      	ldr	r0, [pc, #220]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f3a:	f7f4 fcf3 	bl	8005924 <assert_failed>
 8010f3e:	e5fb      	b.n	8010b38 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010f40:	f241 515b 	movw	r1, #5467	; 0x155b
 8010f44:	4834      	ldr	r0, [pc, #208]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f46:	f7f4 fced 	bl	8005924 <assert_failed>
 8010f4a:	e6d8      	b.n	8010cfe <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8010f4c:	f241 516f 	movw	r1, #5487	; 0x156f
 8010f50:	4831      	ldr	r0, [pc, #196]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f52:	f7f4 fce7 	bl	8005924 <assert_failed>
 8010f56:	e634      	b.n	8010bc2 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010f58:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8010f5c:	482e      	ldr	r0, [pc, #184]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f5e:	f7f4 fce1 	bl	8005924 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010f62:	6822      	ldr	r2, [r4, #0]
 8010f64:	682b      	ldr	r3, [r5, #0]
 8010f66:	e681      	b.n	8010c6c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f68:	f241 5183 	movw	r1, #5507	; 0x1583
 8010f6c:	482a      	ldr	r0, [pc, #168]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f6e:	f7f4 fcd9 	bl	8005924 <assert_failed>
 8010f72:	e5d7      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f74:	f241 51a3 	movw	r1, #5539	; 0x15a3
 8010f78:	4827      	ldr	r0, [pc, #156]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f7a:	f7f4 fcd3 	bl	8005924 <assert_failed>
 8010f7e:	e7a2      	b.n	8010ec6 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010f80:	f241 5193 	movw	r1, #5523	; 0x1593
 8010f84:	4824      	ldr	r0, [pc, #144]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f86:	f7f4 fccd 	bl	8005924 <assert_failed>
 8010f8a:	e6fa      	b.n	8010d82 <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8010f8c:	f241 5144 	movw	r1, #5444	; 0x1544
 8010f90:	4821      	ldr	r0, [pc, #132]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010f92:	f7f4 fcc7 	bl	8005924 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 8010f96:	682b      	ldr	r3, [r5, #0]
 8010f98:	e591      	b.n	8010abe <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010f9a:	f241 5174 	movw	r1, #5492	; 0x1574
 8010f9e:	481e      	ldr	r0, [pc, #120]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fa0:	f7f4 fcc0 	bl	8005924 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010fa4:	68ee      	ldr	r6, [r5, #12]
 8010fa6:	e61f      	b.n	8010be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fa8:	f241 51a7 	movw	r1, #5543	; 0x15a7
 8010fac:	481a      	ldr	r0, [pc, #104]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fae:	f7f4 fcb9 	bl	8005924 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010fb2:	68ee      	ldr	r6, [r5, #12]
 8010fb4:	e793      	b.n	8010ede <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fb6:	f241 5197 	movw	r1, #5527	; 0x1597
 8010fba:	4817      	ldr	r0, [pc, #92]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fbc:	f7f4 fcb2 	bl	8005924 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010fc0:	68ee      	ldr	r6, [r5, #12]
 8010fc2:	e6ec      	b.n	8010d9e <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fc4:	f241 5187 	movw	r1, #5511	; 0x1587
 8010fc8:	4813      	ldr	r0, [pc, #76]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fca:	f7f4 fcab 	bl	8005924 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010fce:	68ee      	ldr	r6, [r5, #12]
 8010fd0:	e5b6      	b.n	8010b40 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010fd2:	f241 515c 	movw	r1, #5468	; 0x155c
 8010fd6:	4810      	ldr	r0, [pc, #64]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fd8:	f7f4 fca4 	bl	8005924 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010fdc:	68ee      	ldr	r6, [r5, #12]
 8010fde:	e692      	b.n	8010d06 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010fe0:	f241 515a 	movw	r1, #5466	; 0x155a
 8010fe4:	480c      	ldr	r0, [pc, #48]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010fe6:	f7f4 fc9d 	bl	8005924 <assert_failed>
 8010fea:	e67e      	b.n	8010cea <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010fec:	f241 5172 	movw	r1, #5490	; 0x1572
 8010ff0:	4809      	ldr	r0, [pc, #36]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010ff2:	f7f4 fc97 	bl	8005924 <assert_failed>
 8010ff6:	e5e9      	b.n	8010bcc <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8010ff8:	f241 5157 	movw	r1, #5463	; 0x1557
 8010ffc:	4806      	ldr	r0, [pc, #24]	; (8011018 <HAL_TIM_ConfigClockSource+0x59c>)
 8010ffe:	f7f4 fc91 	bl	8005924 <assert_failed>
 8011002:	e66d      	b.n	8010ce0 <HAL_TIM_ConfigClockSource+0x264>
 8011004:	40010000 	.word	0x40010000
 8011008:	40000400 	.word	0x40000400
 801100c:	40010400 	.word	0x40010400
 8011010:	40000800 	.word	0x40000800
 8011014:	40002000 	.word	0x40002000
 8011018:	0802e580 	.word	0x0802e580
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 801101c:	4803      	ldr	r0, [pc, #12]	; (801102c <HAL_TIM_ConfigClockSource+0x5b0>)
 801101e:	f241 5150 	movw	r1, #5456	; 0x1550
 8011022:	f7f4 fc7f 	bl	8005924 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 8011026:	2000      	movs	r0, #0
 8011028:	e5f3      	b.n	8010c12 <HAL_TIM_ConfigClockSource+0x196>
 801102a:	bf00      	nop
 801102c:	0802e580 	.word	0x0802e580

08011030 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011030:	6802      	ldr	r2, [r0, #0]
{
 8011032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011034:	4b39      	ldr	r3, [pc, #228]	; (801111c <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 8011036:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011038:	4f39      	ldr	r7, [pc, #228]	; (8011120 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 801103a:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 801103c:	429a      	cmp	r2, r3
 801103e:	bf18      	it	ne
 8011040:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8011044:	4e37      	ldr	r6, [pc, #220]	; (8011124 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 8011046:	4938      	ldr	r1, [pc, #224]	; (8011128 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 8011048:	bf14      	ite	ne
 801104a:	2301      	movne	r3, #1
 801104c:	2300      	moveq	r3, #0
 801104e:	42ba      	cmp	r2, r7
 8011050:	bf0c      	ite	eq
 8011052:	2300      	moveq	r3, #0
 8011054:	f003 0301 	andne.w	r3, r3, #1
 8011058:	42b2      	cmp	r2, r6
 801105a:	bf0c      	ite	eq
 801105c:	2300      	moveq	r3, #0
 801105e:	f003 0301 	andne.w	r3, r3, #1
 8011062:	428a      	cmp	r2, r1
 8011064:	bf0c      	ite	eq
 8011066:	2300      	moveq	r3, #0
 8011068:	f003 0301 	andne.w	r3, r3, #1
 801106c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8011070:	428a      	cmp	r2, r1
 8011072:	bf0c      	ite	eq
 8011074:	2300      	moveq	r3, #0
 8011076:	f003 0301 	andne.w	r3, r3, #1
 801107a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801107e:	428a      	cmp	r2, r1
 8011080:	bf0c      	ite	eq
 8011082:	2300      	moveq	r3, #0
 8011084:	f003 0301 	andne.w	r3, r3, #1
 8011088:	b113      	cbz	r3, 8011090 <HAL_TIM_SlaveConfigSynchro+0x60>
 801108a:	4b28      	ldr	r3, [pc, #160]	; (801112c <HAL_TIM_SlaveConfigSynchro+0xfc>)
 801108c:	429a      	cmp	r2, r3
 801108e:	d138      	bne.n	8011102 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	1f1a      	subs	r2, r3, #4
 8011094:	2a03      	cmp	r2, #3
 8011096:	d902      	bls.n	801109e <HAL_TIM_SlaveConfigSynchro+0x6e>
 8011098:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 801109c:	d12b      	bne.n	80110f6 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 801109e:	686b      	ldr	r3, [r5, #4]
 80110a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80110a4:	2b40      	cmp	r3, #64	; 0x40
 80110a6:	d000      	beq.n	80110aa <HAL_TIM_SlaveConfigSynchro+0x7a>
 80110a8:	bb8b      	cbnz	r3, 801110e <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 80110aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d01f      	beq.n	80110f2 <HAL_TIM_SlaveConfigSynchro+0xc2>
 80110b2:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80110b4:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80110b6:	4629      	mov	r1, r5
 80110b8:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 80110ba:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80110be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80110c2:	f7ff f933 	bl	801032c <TIM_SlaveTimer_SetConfig>
 80110c6:	b968      	cbnz	r0, 80110e4 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110d0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80110d2:	68da      	ldr	r2, [r3, #12]
 80110d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80110d8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80110da:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80110de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80110e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 80110e4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80110e6:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 80110e8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80110ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80110f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80110f2:	2002      	movs	r0, #2
}
 80110f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 80110f6:	f241 51f7 	movw	r1, #5623	; 0x15f7
 80110fa:	480d      	ldr	r0, [pc, #52]	; (8011130 <HAL_TIM_SlaveConfigSynchro+0x100>)
 80110fc:	f7f4 fc12 	bl	8005924 <assert_failed>
 8011100:	e7cd      	b.n	801109e <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8011102:	f241 51f6 	movw	r1, #5622	; 0x15f6
 8011106:	480a      	ldr	r0, [pc, #40]	; (8011130 <HAL_TIM_SlaveConfigSynchro+0x100>)
 8011108:	f7f4 fc0c 	bl	8005924 <assert_failed>
 801110c:	e7c0      	b.n	8011090 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 801110e:	f241 51f8 	movw	r1, #5624	; 0x15f8
 8011112:	4807      	ldr	r0, [pc, #28]	; (8011130 <HAL_TIM_SlaveConfigSynchro+0x100>)
 8011114:	f7f4 fc06 	bl	8005924 <assert_failed>
 8011118:	e7c7      	b.n	80110aa <HAL_TIM_SlaveConfigSynchro+0x7a>
 801111a:	bf00      	nop
 801111c:	40010000 	.word	0x40010000
 8011120:	40000400 	.word	0x40000400
 8011124:	40000800 	.word	0x40000800
 8011128:	40000c00 	.word	0x40000c00
 801112c:	40001800 	.word	0x40001800
 8011130:	0802e580 	.word	0x0802e580

08011134 <HAL_TIM_OC_DelayElapsedCallback>:
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop

08011138 <TIM_DMACaptureCplt>:
{
 8011138:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801113a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801113c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801113e:	4283      	cmp	r3, r0
 8011140:	d01e      	beq.n	8011180 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011144:	4283      	cmp	r3, r0
 8011146:	d00b      	beq.n	8011160 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801114a:	4283      	cmp	r3, r0
 801114c:	d027      	beq.n	801119e <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801114e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011150:	4283      	cmp	r3, r0
 8011152:	d02f      	beq.n	80111b4 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8011154:	4620      	mov	r0, r4
 8011156:	f7f3 fa83 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801115a:	2300      	movs	r3, #0
 801115c:	7723      	strb	r3, [r4, #28]
}
 801115e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011160:	2202      	movs	r2, #2
 8011162:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011164:	69db      	ldr	r3, [r3, #28]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1f4      	bne.n	8011154 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801116a:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 801116c:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801116e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 8011176:	f7f3 fa73 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801117a:	2300      	movs	r3, #0
 801117c:	7723      	strb	r3, [r4, #28]
}
 801117e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011180:	2201      	movs	r2, #1
 8011182:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8011184:	69db      	ldr	r3, [r3, #28]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1e4      	bne.n	8011154 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801118a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 801118e:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011190:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8011194:	f7f3 fa64 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011198:	2300      	movs	r3, #0
 801119a:	7723      	strb	r3, [r4, #28]
}
 801119c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801119e:	2204      	movs	r2, #4
 80111a0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80111a2:	69db      	ldr	r3, [r3, #28]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1d5      	bne.n	8011154 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111a8:	2301      	movs	r3, #1
 80111aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80111b2:	e7cf      	b.n	8011154 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111b4:	2208      	movs	r2, #8
 80111b6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80111b8:	69db      	ldr	r3, [r3, #28]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1ca      	bne.n	8011154 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111be:	2301      	movs	r3, #1
 80111c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111c4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80111c8:	e7c4      	b.n	8011154 <TIM_DMACaptureCplt+0x1c>
 80111ca:	bf00      	nop

080111cc <HAL_TIM_IC_CaptureHalfCpltCallback>:
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop

080111d0 <TIM_DMACaptureHalfCplt>:
{
 80111d0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80111d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111d6:	4283      	cmp	r3, r0
 80111d8:	d016      	beq.n	8011208 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80111da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80111dc:	4283      	cmp	r3, r0
 80111de:	d00b      	beq.n	80111f8 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80111e2:	4283      	cmp	r3, r0
 80111e4:	d018      	beq.n	8011218 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111e8:	4283      	cmp	r3, r0
 80111ea:	d01d      	beq.n	8011228 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111ec:	4620      	mov	r0, r4
 80111ee:	f7ff ffed 	bl	80111cc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111f2:	2300      	movs	r3, #0
 80111f4:	7723      	strb	r3, [r4, #28]
}
 80111f6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111f8:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111fa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111fc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80111fe:	f7ff ffe5 	bl	80111cc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011202:	2300      	movs	r3, #0
 8011204:	7723      	strb	r3, [r4, #28]
}
 8011206:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011208:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801120a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801120c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801120e:	f7ff ffdd 	bl	80111cc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011212:	2300      	movs	r3, #0
 8011214:	7723      	strb	r3, [r4, #28]
}
 8011216:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011218:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801121a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801121c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801121e:	f7ff ffd5 	bl	80111cc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011222:	2300      	movs	r3, #0
 8011224:	7723      	strb	r3, [r4, #28]
}
 8011226:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011228:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801122a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801122c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801122e:	f7ff ffcd 	bl	80111cc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011232:	2300      	movs	r3, #0
 8011234:	7723      	strb	r3, [r4, #28]
}
 8011236:	bd10      	pop	{r4, pc}

08011238 <HAL_TIM_PWM_PulseFinishedCallback>:
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop

0801123c <HAL_TIM_TriggerCallback>:
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop

08011240 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011240:	6803      	ldr	r3, [r0, #0]
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	0791      	lsls	r1, r2, #30
{
 8011246:	b510      	push	{r4, lr}
 8011248:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801124a:	d502      	bpl.n	8011252 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801124c:	68da      	ldr	r2, [r3, #12]
 801124e:	0792      	lsls	r2, r2, #30
 8011250:	d468      	bmi.n	8011324 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	0752      	lsls	r2, r2, #29
 8011256:	d502      	bpl.n	801125e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011258:	68da      	ldr	r2, [r3, #12]
 801125a:	0750      	lsls	r0, r2, #29
 801125c:	d44f      	bmi.n	80112fe <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801125e:	691a      	ldr	r2, [r3, #16]
 8011260:	0711      	lsls	r1, r2, #28
 8011262:	d502      	bpl.n	801126a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011264:	68da      	ldr	r2, [r3, #12]
 8011266:	0712      	lsls	r2, r2, #28
 8011268:	d437      	bmi.n	80112da <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801126a:	691a      	ldr	r2, [r3, #16]
 801126c:	06d0      	lsls	r0, r2, #27
 801126e:	d502      	bpl.n	8011276 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011270:	68da      	ldr	r2, [r3, #12]
 8011272:	06d1      	lsls	r1, r2, #27
 8011274:	d41e      	bmi.n	80112b4 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011276:	691a      	ldr	r2, [r3, #16]
 8011278:	07d2      	lsls	r2, r2, #31
 801127a:	d502      	bpl.n	8011282 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	07d0      	lsls	r0, r2, #31
 8011280:	d469      	bmi.n	8011356 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011282:	691a      	ldr	r2, [r3, #16]
 8011284:	0611      	lsls	r1, r2, #24
 8011286:	d502      	bpl.n	801128e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011288:	68da      	ldr	r2, [r3, #12]
 801128a:	0612      	lsls	r2, r2, #24
 801128c:	d46b      	bmi.n	8011366 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801128e:	691a      	ldr	r2, [r3, #16]
 8011290:	05d0      	lsls	r0, r2, #23
 8011292:	d502      	bpl.n	801129a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011294:	68da      	ldr	r2, [r3, #12]
 8011296:	0611      	lsls	r1, r2, #24
 8011298:	d46d      	bmi.n	8011376 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801129a:	691a      	ldr	r2, [r3, #16]
 801129c:	0652      	lsls	r2, r2, #25
 801129e:	d502      	bpl.n	80112a6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80112a0:	68da      	ldr	r2, [r3, #12]
 80112a2:	0650      	lsls	r0, r2, #25
 80112a4:	d46f      	bmi.n	8011386 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80112a6:	691a      	ldr	r2, [r3, #16]
 80112a8:	0691      	lsls	r1, r2, #26
 80112aa:	d502      	bpl.n	80112b2 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80112ac:	68da      	ldr	r2, [r3, #12]
 80112ae:	0692      	lsls	r2, r2, #26
 80112b0:	d449      	bmi.n	8011346 <HAL_TIM_IRQHandler+0x106>
}
 80112b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80112b4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80112b8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80112ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80112bc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80112be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80112c0:	69db      	ldr	r3, [r3, #28]
 80112c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80112c6:	d16f      	bne.n	80113a8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112c8:	f7ff ff34 	bl	8011134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112cc:	4620      	mov	r0, r4
 80112ce:	f7ff ffb3 	bl	8011238 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112d2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80112d4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112d6:	7722      	strb	r2, [r4, #28]
 80112d8:	e7cd      	b.n	8011276 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80112da:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112de:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80112e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80112e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	079b      	lsls	r3, r3, #30
 80112ea:	d15a      	bne.n	80113a2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112ec:	f7ff ff22 	bl	8011134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7ff ffa1 	bl	8011238 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80112f8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112fa:	7722      	strb	r2, [r4, #28]
 80112fc:	e7b5      	b.n	801126a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80112fe:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011302:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8011304:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011306:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011308:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801130a:	699b      	ldr	r3, [r3, #24]
 801130c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011310:	d144      	bne.n	801139c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011312:	f7ff ff0f 	bl	8011134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011316:	4620      	mov	r0, r4
 8011318:	f7ff ff8e 	bl	8011238 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801131c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801131e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011320:	7722      	strb	r2, [r4, #28]
 8011322:	e79c      	b.n	801125e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011324:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011328:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801132a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801132c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801132e:	699b      	ldr	r3, [r3, #24]
 8011330:	0799      	lsls	r1, r3, #30
 8011332:	d130      	bne.n	8011396 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011334:	f7ff fefe 	bl	8011134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011338:	4620      	mov	r0, r4
 801133a:	f7ff ff7d 	bl	8011238 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801133e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011340:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011342:	7722      	strb	r2, [r4, #28]
 8011344:	e785      	b.n	8011252 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011346:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801134a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801134c:	611a      	str	r2, [r3, #16]
}
 801134e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8011352:	f001 be53 	b.w	8012ffc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011356:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801135a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801135c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801135e:	f7f3 f9e7 	bl	8004730 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011362:	6823      	ldr	r3, [r4, #0]
 8011364:	e78d      	b.n	8011282 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011366:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 801136a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801136c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801136e:	f001 fe47 	bl	8013000 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	e78b      	b.n	801128e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011376:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801137a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801137c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801137e:	f001 fe41 	bl	8013004 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	e789      	b.n	801129a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011386:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801138a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801138c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801138e:	f7ff ff55 	bl	801123c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011392:	6823      	ldr	r3, [r4, #0]
 8011394:	e787      	b.n	80112a6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8011396:	f7f3 f963 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 801139a:	e7d0      	b.n	801133e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 801139c:	f7f3 f960 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80113a0:	e7bc      	b.n	801131c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80113a2:	f7f3 f95d 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80113a6:	e7a6      	b.n	80112f6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80113a8:	f7f3 f95a 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80113ac:	e791      	b.n	80112d2 <HAL_TIM_IRQHandler+0x92>
 80113ae:	bf00      	nop

080113b0 <HAL_TIM_ErrorCallback>:
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop

080113b4 <TIM_DMAError>:
{
 80113b4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80113b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ba:	4283      	cmp	r3, r0
 80113bc:	d01c      	beq.n	80113f8 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80113be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113c0:	4283      	cmp	r3, r0
 80113c2:	d00e      	beq.n	80113e2 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80113c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80113c6:	4283      	cmp	r3, r0
 80113c8:	d020      	beq.n	801140c <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80113ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80113cc:	4283      	cmp	r3, r0
 80113ce:	d028      	beq.n	8011422 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 80113d0:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80113d2:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 80113d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 80113d8:	f7ff ffea 	bl	80113b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113dc:	2300      	movs	r3, #0
 80113de:	7723      	strb	r3, [r4, #28]
}
 80113e0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80113e2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113e4:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 80113e6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80113e8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80113ec:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80113ee:	f7ff ffdf 	bl	80113b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80113f2:	2300      	movs	r3, #0
 80113f4:	7723      	strb	r3, [r4, #28]
}
 80113f6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80113f8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80113fa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80113fc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80113fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8011402:	f7ff ffd5 	bl	80113b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011406:	2300      	movs	r3, #0
 8011408:	7723      	strb	r3, [r4, #28]
}
 801140a:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801140c:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801140e:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 8011410:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011412:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011416:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8011418:	f7ff ffca 	bl	80113b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801141c:	2300      	movs	r3, #0
 801141e:	7723      	strb	r3, [r4, #28]
}
 8011420:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011422:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011424:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 8011426:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011428:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801142c:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 801142e:	f7ff ffbf 	bl	80113b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011432:	2300      	movs	r3, #0
 8011434:	7723      	strb	r3, [r4, #28]
}
 8011436:	bd10      	pop	{r4, pc}

08011438 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011438:	4a3c      	ldr	r2, [pc, #240]	; (801152c <TIM_Base_SetConfig+0xf4>)
 801143a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 801143e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011440:	eba0 0202 	sub.w	r2, r0, r2
 8011444:	fab2 f282 	clz	r2, r2
{
 8011448:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801144a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801144e:	d010      	beq.n	8011472 <TIM_Base_SetConfig+0x3a>
 8011450:	b97a      	cbnz	r2, 8011472 <TIM_Base_SetConfig+0x3a>
 8011452:	4d37      	ldr	r5, [pc, #220]	; (8011530 <TIM_Base_SetConfig+0xf8>)
 8011454:	4c37      	ldr	r4, [pc, #220]	; (8011534 <TIM_Base_SetConfig+0xfc>)
 8011456:	42a0      	cmp	r0, r4
 8011458:	bf18      	it	ne
 801145a:	42a8      	cmpne	r0, r5
 801145c:	d12b      	bne.n	80114b6 <TIM_Base_SetConfig+0x7e>
 801145e:	4c36      	ldr	r4, [pc, #216]	; (8011538 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011464:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011466:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8011468:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801146a:	fab4 f484 	clz	r4, r4
 801146e:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011470:	e008      	b.n	8011484 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8011472:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011478:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801147a:	4c2f      	ldr	r4, [pc, #188]	; (8011538 <TIM_Base_SetConfig+0x100>)
 801147c:	1b04      	subs	r4, r0, r4
 801147e:	fab4 f484 	clz	r4, r4
 8011482:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011484:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801148a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801148c:	694d      	ldr	r5, [r1, #20]
 801148e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011492:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011494:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011496:	688b      	ldr	r3, [r1, #8]
 8011498:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801149a:	680b      	ldr	r3, [r1, #0]
 801149c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801149e:	b922      	cbnz	r2, 80114aa <TIM_Base_SetConfig+0x72>
 80114a0:	b91c      	cbnz	r4, 80114aa <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 80114a2:	2301      	movs	r3, #1
}
 80114a4:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80114a6:	6143      	str	r3, [r0, #20]
}
 80114a8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80114aa:	690b      	ldr	r3, [r1, #16]
 80114ac:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80114ae:	2301      	movs	r3, #1
}
 80114b0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80114b2:	6143      	str	r3, [r0, #20]
}
 80114b4:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80114ba:	42a0      	cmp	r0, r4
 80114bc:	d024      	beq.n	8011508 <TIM_Base_SetConfig+0xd0>
 80114be:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80114c2:	42a0      	cmp	r0, r4
 80114c4:	d020      	beq.n	8011508 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114c6:	4c1d      	ldr	r4, [pc, #116]	; (801153c <TIM_Base_SetConfig+0x104>)
 80114c8:	4d1d      	ldr	r5, [pc, #116]	; (8011540 <TIM_Base_SetConfig+0x108>)
 80114ca:	42a0      	cmp	r0, r4
 80114cc:	bf18      	it	ne
 80114ce:	42a8      	cmpne	r0, r5
 80114d0:	bf0c      	ite	eq
 80114d2:	2401      	moveq	r4, #1
 80114d4:	2400      	movne	r4, #0
 80114d6:	d027      	beq.n	8011528 <TIM_Base_SetConfig+0xf0>
 80114d8:	4e1a      	ldr	r6, [pc, #104]	; (8011544 <TIM_Base_SetConfig+0x10c>)
 80114da:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 80114de:	42a8      	cmp	r0, r5
 80114e0:	bf18      	it	ne
 80114e2:	42b0      	cmpne	r0, r6
 80114e4:	d0ce      	beq.n	8011484 <TIM_Base_SetConfig+0x4c>
 80114e6:	4c18      	ldr	r4, [pc, #96]	; (8011548 <TIM_Base_SetConfig+0x110>)
 80114e8:	42a0      	cmp	r0, r4
 80114ea:	d01d      	beq.n	8011528 <TIM_Base_SetConfig+0xf0>
 80114ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80114f0:	42a0      	cmp	r0, r4
 80114f2:	d019      	beq.n	8011528 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114f4:	694d      	ldr	r5, [r1, #20]
 80114f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114fa:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80114fc:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114fe:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8011500:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011502:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011504:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011506:	e7cc      	b.n	80114a2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8011508:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801150a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801150e:	4c0a      	ldr	r4, [pc, #40]	; (8011538 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 8011510:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011512:	4d0e      	ldr	r5, [pc, #56]	; (801154c <TIM_Base_SetConfig+0x114>)
 8011514:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011516:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011518:	fab4 f484 	clz	r4, r4
 801151c:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011520:	d0b0      	beq.n	8011484 <TIM_Base_SetConfig+0x4c>
 8011522:	2c00      	cmp	r4, #0
 8011524:	d1ae      	bne.n	8011484 <TIM_Base_SetConfig+0x4c>
 8011526:	e7ce      	b.n	80114c6 <TIM_Base_SetConfig+0x8e>
 8011528:	2400      	movs	r4, #0
 801152a:	e7ab      	b.n	8011484 <TIM_Base_SetConfig+0x4c>
 801152c:	40010000 	.word	0x40010000
 8011530:	40000400 	.word	0x40000400
 8011534:	40000800 	.word	0x40000800
 8011538:	40010400 	.word	0x40010400
 801153c:	40014400 	.word	0x40014400
 8011540:	40014000 	.word	0x40014000
 8011544:	40014800 	.word	0x40014800
 8011548:	40001c00 	.word	0x40001c00
 801154c:	40000c00 	.word	0x40000c00

08011550 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8011550:	2800      	cmp	r0, #0
 8011552:	f000 80b8 	beq.w	80116c6 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011556:	6802      	ldr	r2, [r0, #0]
 8011558:	4b5f      	ldr	r3, [pc, #380]	; (80116d8 <HAL_TIM_Base_Init+0x188>)
 801155a:	4960      	ldr	r1, [pc, #384]	; (80116dc <HAL_TIM_Base_Init+0x18c>)
 801155c:	429a      	cmp	r2, r3
 801155e:	bf18      	it	ne
 8011560:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011564:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011566:	bf14      	ite	ne
 8011568:	2301      	movne	r3, #1
 801156a:	2300      	moveq	r3, #0
 801156c:	4604      	mov	r4, r0
 801156e:	485c      	ldr	r0, [pc, #368]	; (80116e0 <HAL_TIM_Base_Init+0x190>)
 8011570:	4282      	cmp	r2, r0
 8011572:	bf0c      	ite	eq
 8011574:	2300      	moveq	r3, #0
 8011576:	f003 0301 	andne.w	r3, r3, #1
 801157a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801157e:	428a      	cmp	r2, r1
 8011580:	bf0c      	ite	eq
 8011582:	2300      	moveq	r3, #0
 8011584:	f003 0301 	andne.w	r3, r3, #1
 8011588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801158c:	4282      	cmp	r2, r0
 801158e:	bf0c      	ite	eq
 8011590:	2300      	moveq	r3, #0
 8011592:	f003 0301 	andne.w	r3, r3, #1
 8011596:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801159a:	428a      	cmp	r2, r1
 801159c:	bf0c      	ite	eq
 801159e:	2300      	moveq	r3, #0
 80115a0:	f003 0301 	andne.w	r3, r3, #1
 80115a4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80115a8:	4282      	cmp	r2, r0
 80115aa:	bf0c      	ite	eq
 80115ac:	2300      	moveq	r3, #0
 80115ae:	f003 0301 	andne.w	r3, r3, #1
 80115b2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80115b6:	428a      	cmp	r2, r1
 80115b8:	bf0c      	ite	eq
 80115ba:	2300      	moveq	r3, #0
 80115bc:	f003 0301 	andne.w	r3, r3, #1
 80115c0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80115c4:	4282      	cmp	r2, r0
 80115c6:	bf0c      	ite	eq
 80115c8:	2300      	moveq	r3, #0
 80115ca:	f003 0301 	andne.w	r3, r3, #1
 80115ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80115d2:	428a      	cmp	r2, r1
 80115d4:	bf0c      	ite	eq
 80115d6:	2300      	moveq	r3, #0
 80115d8:	f003 0301 	andne.w	r3, r3, #1
 80115dc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80115e0:	4282      	cmp	r2, r0
 80115e2:	bf0c      	ite	eq
 80115e4:	2300      	moveq	r3, #0
 80115e6:	f003 0301 	andne.w	r3, r3, #1
 80115ea:	428a      	cmp	r2, r1
 80115ec:	bf0c      	ite	eq
 80115ee:	2300      	moveq	r3, #0
 80115f0:	f003 0301 	andne.w	r3, r3, #1
 80115f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80115f8:	428a      	cmp	r2, r1
 80115fa:	bf0c      	ite	eq
 80115fc:	2300      	moveq	r3, #0
 80115fe:	f003 0301 	andne.w	r3, r3, #1
 8011602:	b113      	cbz	r3, 801160a <HAL_TIM_Base_Init+0xba>
 8011604:	4b37      	ldr	r3, [pc, #220]	; (80116e4 <HAL_TIM_Base_Init+0x194>)
 8011606:	429a      	cmp	r2, r3
 8011608:	d15f      	bne.n	80116ca <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801160a:	68a3      	ldr	r3, [r4, #8]
 801160c:	f023 0210 	bic.w	r2, r3, #16
 8011610:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011614:	2920      	cmp	r1, #32
 8011616:	bf18      	it	ne
 8011618:	2a00      	cmpne	r2, #0
 801161a:	d001      	beq.n	8011620 <HAL_TIM_Base_Init+0xd0>
 801161c:	2b40      	cmp	r3, #64	; 0x40
 801161e:	d14c      	bne.n	80116ba <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011620:	6923      	ldr	r3, [r4, #16]
 8011622:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011626:	d002      	beq.n	801162e <HAL_TIM_Base_Init+0xde>
 8011628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801162c:	d12b      	bne.n	8011686 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801162e:	69a3      	ldr	r3, [r4, #24]
 8011630:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011634:	d130      	bne.n	8011698 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011636:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801163a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801163e:	b3b3      	cbz	r3, 80116ae <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011640:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011642:	2302      	movs	r3, #2
 8011644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011648:	f851 0b04 	ldr.w	r0, [r1], #4
 801164c:	f7ff fef4 	bl	8011438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011650:	2301      	movs	r3, #1
  return HAL_OK;
 8011652:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011654:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011658:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801165c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011660:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801166c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011678:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801167c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011680:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011684:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011686:	f44f 718c 	mov.w	r1, #280	; 0x118
 801168a:	4817      	ldr	r0, [pc, #92]	; (80116e8 <HAL_TIM_Base_Init+0x198>)
 801168c:	f7f4 f94a 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011690:	69a3      	ldr	r3, [r4, #24]
 8011692:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011696:	d0ce      	beq.n	8011636 <HAL_TIM_Base_Init+0xe6>
 8011698:	f240 1119 	movw	r1, #281	; 0x119
 801169c:	4812      	ldr	r0, [pc, #72]	; (80116e8 <HAL_TIM_Base_Init+0x198>)
 801169e:	f7f4 f941 	bl	8005924 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80116a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80116a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1c8      	bne.n	8011640 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 80116ae:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80116b0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80116b4:	f7f6 f92a 	bl	800790c <HAL_TIM_Base_MspInit>
 80116b8:	e7c2      	b.n	8011640 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80116ba:	f240 1117 	movw	r1, #279	; 0x117
 80116be:	480a      	ldr	r0, [pc, #40]	; (80116e8 <HAL_TIM_Base_Init+0x198>)
 80116c0:	f7f4 f930 	bl	8005924 <assert_failed>
 80116c4:	e7ac      	b.n	8011620 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 80116c6:	2001      	movs	r0, #1
}
 80116c8:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80116ca:	f44f 718b 	mov.w	r1, #278	; 0x116
 80116ce:	4806      	ldr	r0, [pc, #24]	; (80116e8 <HAL_TIM_Base_Init+0x198>)
 80116d0:	f7f4 f928 	bl	8005924 <assert_failed>
 80116d4:	e799      	b.n	801160a <HAL_TIM_Base_Init+0xba>
 80116d6:	bf00      	nop
 80116d8:	40010000 	.word	0x40010000
 80116dc:	40000800 	.word	0x40000800
 80116e0:	40000400 	.word	0x40000400
 80116e4:	40002000 	.word	0x40002000
 80116e8:	0802e580 	.word	0x0802e580

080116ec <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80116ec:	2800      	cmp	r0, #0
 80116ee:	f000 80b8 	beq.w	8011862 <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80116f2:	6802      	ldr	r2, [r0, #0]
 80116f4:	4b5f      	ldr	r3, [pc, #380]	; (8011874 <HAL_TIM_OC_Init+0x188>)
 80116f6:	4960      	ldr	r1, [pc, #384]	; (8011878 <HAL_TIM_OC_Init+0x18c>)
 80116f8:	429a      	cmp	r2, r3
 80116fa:	bf18      	it	ne
 80116fc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011700:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011702:	bf14      	ite	ne
 8011704:	2301      	movne	r3, #1
 8011706:	2300      	moveq	r3, #0
 8011708:	4604      	mov	r4, r0
 801170a:	485c      	ldr	r0, [pc, #368]	; (801187c <HAL_TIM_OC_Init+0x190>)
 801170c:	4282      	cmp	r2, r0
 801170e:	bf0c      	ite	eq
 8011710:	2300      	moveq	r3, #0
 8011712:	f003 0301 	andne.w	r3, r3, #1
 8011716:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801171a:	428a      	cmp	r2, r1
 801171c:	bf0c      	ite	eq
 801171e:	2300      	moveq	r3, #0
 8011720:	f003 0301 	andne.w	r3, r3, #1
 8011724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011728:	4282      	cmp	r2, r0
 801172a:	bf0c      	ite	eq
 801172c:	2300      	moveq	r3, #0
 801172e:	f003 0301 	andne.w	r3, r3, #1
 8011732:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011736:	428a      	cmp	r2, r1
 8011738:	bf0c      	ite	eq
 801173a:	2300      	moveq	r3, #0
 801173c:	f003 0301 	andne.w	r3, r3, #1
 8011740:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011744:	4282      	cmp	r2, r0
 8011746:	bf0c      	ite	eq
 8011748:	2300      	moveq	r3, #0
 801174a:	f003 0301 	andne.w	r3, r3, #1
 801174e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011752:	428a      	cmp	r2, r1
 8011754:	bf0c      	ite	eq
 8011756:	2300      	moveq	r3, #0
 8011758:	f003 0301 	andne.w	r3, r3, #1
 801175c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011760:	4282      	cmp	r2, r0
 8011762:	bf0c      	ite	eq
 8011764:	2300      	moveq	r3, #0
 8011766:	f003 0301 	andne.w	r3, r3, #1
 801176a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801176e:	428a      	cmp	r2, r1
 8011770:	bf0c      	ite	eq
 8011772:	2300      	moveq	r3, #0
 8011774:	f003 0301 	andne.w	r3, r3, #1
 8011778:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801177c:	4282      	cmp	r2, r0
 801177e:	bf0c      	ite	eq
 8011780:	2300      	moveq	r3, #0
 8011782:	f003 0301 	andne.w	r3, r3, #1
 8011786:	428a      	cmp	r2, r1
 8011788:	bf0c      	ite	eq
 801178a:	2300      	moveq	r3, #0
 801178c:	f003 0301 	andne.w	r3, r3, #1
 8011790:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011794:	428a      	cmp	r2, r1
 8011796:	bf0c      	ite	eq
 8011798:	2300      	moveq	r3, #0
 801179a:	f003 0301 	andne.w	r3, r3, #1
 801179e:	b113      	cbz	r3, 80117a6 <HAL_TIM_OC_Init+0xba>
 80117a0:	4b37      	ldr	r3, [pc, #220]	; (8011880 <HAL_TIM_OC_Init+0x194>)
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d15f      	bne.n	8011866 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80117a6:	68a3      	ldr	r3, [r4, #8]
 80117a8:	f023 0210 	bic.w	r2, r3, #16
 80117ac:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80117b0:	2920      	cmp	r1, #32
 80117b2:	bf18      	it	ne
 80117b4:	2a00      	cmpne	r2, #0
 80117b6:	d001      	beq.n	80117bc <HAL_TIM_OC_Init+0xd0>
 80117b8:	2b40      	cmp	r3, #64	; 0x40
 80117ba:	d14c      	bne.n	8011856 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80117c2:	d002      	beq.n	80117ca <HAL_TIM_OC_Init+0xde>
 80117c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117c8:	d12b      	bne.n	8011822 <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80117ca:	69a3      	ldr	r3, [r4, #24]
 80117cc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80117d0:	d130      	bne.n	8011834 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80117d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80117d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80117da:	b3b3      	cbz	r3, 801184a <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80117dc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80117de:	2302      	movs	r3, #2
 80117e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80117e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80117e8:	f7ff fe26 	bl	8011438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117ec:	2301      	movs	r3, #1
  return HAL_OK;
 80117ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80117f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80117fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011800:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801180c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011814:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011818:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801181c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011820:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011822:	f240 2197 	movw	r1, #663	; 0x297
 8011826:	4817      	ldr	r0, [pc, #92]	; (8011884 <HAL_TIM_OC_Init+0x198>)
 8011828:	f7f4 f87c 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801182c:	69a3      	ldr	r3, [r4, #24]
 801182e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011832:	d0ce      	beq.n	80117d2 <HAL_TIM_OC_Init+0xe6>
 8011834:	f44f 7126 	mov.w	r1, #664	; 0x298
 8011838:	4812      	ldr	r0, [pc, #72]	; (8011884 <HAL_TIM_OC_Init+0x198>)
 801183a:	f7f4 f873 	bl	8005924 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801183e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011842:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1c8      	bne.n	80117dc <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 801184a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801184c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8011850:	f7ff f90e 	bl	8010a70 <HAL_TIM_OC_MspInit>
 8011854:	e7c2      	b.n	80117dc <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011856:	f240 2196 	movw	r1, #662	; 0x296
 801185a:	480a      	ldr	r0, [pc, #40]	; (8011884 <HAL_TIM_OC_Init+0x198>)
 801185c:	f7f4 f862 	bl	8005924 <assert_failed>
 8011860:	e7ac      	b.n	80117bc <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 8011862:	2001      	movs	r0, #1
}
 8011864:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011866:	f240 2195 	movw	r1, #661	; 0x295
 801186a:	4806      	ldr	r0, [pc, #24]	; (8011884 <HAL_TIM_OC_Init+0x198>)
 801186c:	f7f4 f85a 	bl	8005924 <assert_failed>
 8011870:	e799      	b.n	80117a6 <HAL_TIM_OC_Init+0xba>
 8011872:	bf00      	nop
 8011874:	40010000 	.word	0x40010000
 8011878:	40000800 	.word	0x40000800
 801187c:	40000400 	.word	0x40000400
 8011880:	40002000 	.word	0x40002000
 8011884:	0802e580 	.word	0x0802e580

08011888 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8011888:	2800      	cmp	r0, #0
 801188a:	f000 80b8 	beq.w	80119fe <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801188e:	6802      	ldr	r2, [r0, #0]
 8011890:	4b5f      	ldr	r3, [pc, #380]	; (8011a10 <HAL_TIM_PWM_Init+0x188>)
 8011892:	4960      	ldr	r1, [pc, #384]	; (8011a14 <HAL_TIM_PWM_Init+0x18c>)
 8011894:	429a      	cmp	r2, r3
 8011896:	bf18      	it	ne
 8011898:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 801189c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801189e:	bf14      	ite	ne
 80118a0:	2301      	movne	r3, #1
 80118a2:	2300      	moveq	r3, #0
 80118a4:	4604      	mov	r4, r0
 80118a6:	485c      	ldr	r0, [pc, #368]	; (8011a18 <HAL_TIM_PWM_Init+0x190>)
 80118a8:	4282      	cmp	r2, r0
 80118aa:	bf0c      	ite	eq
 80118ac:	2300      	moveq	r3, #0
 80118ae:	f003 0301 	andne.w	r3, r3, #1
 80118b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80118b6:	428a      	cmp	r2, r1
 80118b8:	bf0c      	ite	eq
 80118ba:	2300      	moveq	r3, #0
 80118bc:	f003 0301 	andne.w	r3, r3, #1
 80118c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118c4:	4282      	cmp	r2, r0
 80118c6:	bf0c      	ite	eq
 80118c8:	2300      	moveq	r3, #0
 80118ca:	f003 0301 	andne.w	r3, r3, #1
 80118ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80118d2:	428a      	cmp	r2, r1
 80118d4:	bf0c      	ite	eq
 80118d6:	2300      	moveq	r3, #0
 80118d8:	f003 0301 	andne.w	r3, r3, #1
 80118dc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80118e0:	4282      	cmp	r2, r0
 80118e2:	bf0c      	ite	eq
 80118e4:	2300      	moveq	r3, #0
 80118e6:	f003 0301 	andne.w	r3, r3, #1
 80118ea:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80118ee:	428a      	cmp	r2, r1
 80118f0:	bf0c      	ite	eq
 80118f2:	2300      	moveq	r3, #0
 80118f4:	f003 0301 	andne.w	r3, r3, #1
 80118f8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80118fc:	4282      	cmp	r2, r0
 80118fe:	bf0c      	ite	eq
 8011900:	2300      	moveq	r3, #0
 8011902:	f003 0301 	andne.w	r3, r3, #1
 8011906:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801190a:	428a      	cmp	r2, r1
 801190c:	bf0c      	ite	eq
 801190e:	2300      	moveq	r3, #0
 8011910:	f003 0301 	andne.w	r3, r3, #1
 8011914:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011918:	4282      	cmp	r2, r0
 801191a:	bf0c      	ite	eq
 801191c:	2300      	moveq	r3, #0
 801191e:	f003 0301 	andne.w	r3, r3, #1
 8011922:	428a      	cmp	r2, r1
 8011924:	bf0c      	ite	eq
 8011926:	2300      	moveq	r3, #0
 8011928:	f003 0301 	andne.w	r3, r3, #1
 801192c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011930:	428a      	cmp	r2, r1
 8011932:	bf0c      	ite	eq
 8011934:	2300      	moveq	r3, #0
 8011936:	f003 0301 	andne.w	r3, r3, #1
 801193a:	b113      	cbz	r3, 8011942 <HAL_TIM_PWM_Init+0xba>
 801193c:	4b37      	ldr	r3, [pc, #220]	; (8011a1c <HAL_TIM_PWM_Init+0x194>)
 801193e:	429a      	cmp	r2, r3
 8011940:	d15f      	bne.n	8011a02 <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011942:	68a3      	ldr	r3, [r4, #8]
 8011944:	f023 0210 	bic.w	r2, r3, #16
 8011948:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801194c:	2920      	cmp	r1, #32
 801194e:	bf18      	it	ne
 8011950:	2a00      	cmpne	r2, #0
 8011952:	d001      	beq.n	8011958 <HAL_TIM_PWM_Init+0xd0>
 8011954:	2b40      	cmp	r3, #64	; 0x40
 8011956:	d14c      	bne.n	80119f2 <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801195e:	d002      	beq.n	8011966 <HAL_TIM_PWM_Init+0xde>
 8011960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011964:	d12b      	bne.n	80119be <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011966:	69a3      	ldr	r3, [r4, #24]
 8011968:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801196c:	d130      	bne.n	80119d0 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801196e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011976:	b3b3      	cbz	r3, 80119e6 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011978:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801197a:	2302      	movs	r3, #2
 801197c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011980:	f851 0b04 	ldr.w	r0, [r1], #4
 8011984:	f7ff fd58 	bl	8011438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011988:	2301      	movs	r3, #1
  return HAL_OK;
 801198a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801198c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011994:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011998:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801199c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80119a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80119ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80119b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80119b4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80119b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80119bc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80119be:	f240 5132 	movw	r1, #1330	; 0x532
 80119c2:	4817      	ldr	r0, [pc, #92]	; (8011a20 <HAL_TIM_PWM_Init+0x198>)
 80119c4:	f7f3 ffae 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80119c8:	69a3      	ldr	r3, [r4, #24]
 80119ca:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80119ce:	d0ce      	beq.n	801196e <HAL_TIM_PWM_Init+0xe6>
 80119d0:	f240 5133 	movw	r1, #1331	; 0x533
 80119d4:	4812      	ldr	r0, [pc, #72]	; (8011a20 <HAL_TIM_PWM_Init+0x198>)
 80119d6:	f7f3 ffa5 	bl	8005924 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80119da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80119de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d1c8      	bne.n	8011978 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 80119e6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80119e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80119ec:	f7ff f842 	bl	8010a74 <HAL_TIM_PWM_MspInit>
 80119f0:	e7c2      	b.n	8011978 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80119f2:	f240 5131 	movw	r1, #1329	; 0x531
 80119f6:	480a      	ldr	r0, [pc, #40]	; (8011a20 <HAL_TIM_PWM_Init+0x198>)
 80119f8:	f7f3 ff94 	bl	8005924 <assert_failed>
 80119fc:	e7ac      	b.n	8011958 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 80119fe:	2001      	movs	r0, #1
}
 8011a00:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011a02:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8011a06:	4806      	ldr	r0, [pc, #24]	; (8011a20 <HAL_TIM_PWM_Init+0x198>)
 8011a08:	f7f3 ff8c 	bl	8005924 <assert_failed>
 8011a0c:	e799      	b.n	8011942 <HAL_TIM_PWM_Init+0xba>
 8011a0e:	bf00      	nop
 8011a10:	40010000 	.word	0x40010000
 8011a14:	40000800 	.word	0x40000800
 8011a18:	40000400 	.word	0x40000400
 8011a1c:	40002000 	.word	0x40002000
 8011a20:	0802e580 	.word	0x0802e580

08011a24 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8011a24:	2800      	cmp	r0, #0
 8011a26:	f000 80b8 	beq.w	8011b9a <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011a2a:	6802      	ldr	r2, [r0, #0]
 8011a2c:	4b5f      	ldr	r3, [pc, #380]	; (8011bac <HAL_TIM_IC_Init+0x188>)
 8011a2e:	4960      	ldr	r1, [pc, #384]	; (8011bb0 <HAL_TIM_IC_Init+0x18c>)
 8011a30:	429a      	cmp	r2, r3
 8011a32:	bf18      	it	ne
 8011a34:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8011a38:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011a3a:	bf14      	ite	ne
 8011a3c:	2301      	movne	r3, #1
 8011a3e:	2300      	moveq	r3, #0
 8011a40:	4604      	mov	r4, r0
 8011a42:	485c      	ldr	r0, [pc, #368]	; (8011bb4 <HAL_TIM_IC_Init+0x190>)
 8011a44:	4282      	cmp	r2, r0
 8011a46:	bf0c      	ite	eq
 8011a48:	2300      	moveq	r3, #0
 8011a4a:	f003 0301 	andne.w	r3, r3, #1
 8011a4e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a52:	428a      	cmp	r2, r1
 8011a54:	bf0c      	ite	eq
 8011a56:	2300      	moveq	r3, #0
 8011a58:	f003 0301 	andne.w	r3, r3, #1
 8011a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a60:	4282      	cmp	r2, r0
 8011a62:	bf0c      	ite	eq
 8011a64:	2300      	moveq	r3, #0
 8011a66:	f003 0301 	andne.w	r3, r3, #1
 8011a6a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011a6e:	428a      	cmp	r2, r1
 8011a70:	bf0c      	ite	eq
 8011a72:	2300      	moveq	r3, #0
 8011a74:	f003 0301 	andne.w	r3, r3, #1
 8011a78:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8011a7c:	4282      	cmp	r2, r0
 8011a7e:	bf0c      	ite	eq
 8011a80:	2300      	moveq	r3, #0
 8011a82:	f003 0301 	andne.w	r3, r3, #1
 8011a86:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8011a8a:	428a      	cmp	r2, r1
 8011a8c:	bf0c      	ite	eq
 8011a8e:	2300      	moveq	r3, #0
 8011a90:	f003 0301 	andne.w	r3, r3, #1
 8011a94:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8011a98:	4282      	cmp	r2, r0
 8011a9a:	bf0c      	ite	eq
 8011a9c:	2300      	moveq	r3, #0
 8011a9e:	f003 0301 	andne.w	r3, r3, #1
 8011aa2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011aa6:	428a      	cmp	r2, r1
 8011aa8:	bf0c      	ite	eq
 8011aaa:	2300      	moveq	r3, #0
 8011aac:	f003 0301 	andne.w	r3, r3, #1
 8011ab0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8011ab4:	4282      	cmp	r2, r0
 8011ab6:	bf0c      	ite	eq
 8011ab8:	2300      	moveq	r3, #0
 8011aba:	f003 0301 	andne.w	r3, r3, #1
 8011abe:	428a      	cmp	r2, r1
 8011ac0:	bf0c      	ite	eq
 8011ac2:	2300      	moveq	r3, #0
 8011ac4:	f003 0301 	andne.w	r3, r3, #1
 8011ac8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011acc:	428a      	cmp	r2, r1
 8011ace:	bf0c      	ite	eq
 8011ad0:	2300      	moveq	r3, #0
 8011ad2:	f003 0301 	andne.w	r3, r3, #1
 8011ad6:	b113      	cbz	r3, 8011ade <HAL_TIM_IC_Init+0xba>
 8011ad8:	4b37      	ldr	r3, [pc, #220]	; (8011bb8 <HAL_TIM_IC_Init+0x194>)
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d15f      	bne.n	8011b9e <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011ade:	68a3      	ldr	r3, [r4, #8]
 8011ae0:	f023 0210 	bic.w	r2, r3, #16
 8011ae4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011ae8:	2920      	cmp	r1, #32
 8011aea:	bf18      	it	ne
 8011aec:	2a00      	cmpne	r2, #0
 8011aee:	d001      	beq.n	8011af4 <HAL_TIM_IC_Init+0xd0>
 8011af0:	2b40      	cmp	r3, #64	; 0x40
 8011af2:	d14c      	bne.n	8011b8e <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011afa:	d002      	beq.n	8011b02 <HAL_TIM_IC_Init+0xde>
 8011afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b00:	d12b      	bne.n	8011b5a <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011b02:	69a3      	ldr	r3, [r4, #24]
 8011b04:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011b08:	d130      	bne.n	8011b6c <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011b0a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011b0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011b12:	b3b3      	cbz	r3, 8011b82 <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b14:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8011b16:	2302      	movs	r3, #2
 8011b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011b20:	f7ff fc8a 	bl	8011438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b24:	2301      	movs	r3, #1
  return HAL_OK;
 8011b26:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8011b30:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8011b34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011b38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b4c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8011b50:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8011b54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011b58:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8011b5a:	f240 71cc 	movw	r1, #1996	; 0x7cc
 8011b5e:	4817      	ldr	r0, [pc, #92]	; (8011bbc <HAL_TIM_IC_Init+0x198>)
 8011b60:	f7f3 fee0 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8011b64:	69a3      	ldr	r3, [r4, #24]
 8011b66:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011b6a:	d0ce      	beq.n	8011b0a <HAL_TIM_IC_Init+0xe6>
 8011b6c:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8011b70:	4812      	ldr	r0, [pc, #72]	; (8011bbc <HAL_TIM_IC_Init+0x198>)
 8011b72:	f7f3 fed7 	bl	8005924 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8011b76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8011b7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d1c8      	bne.n	8011b14 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8011b82:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8011b84:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8011b88:	f7fe ff76 	bl	8010a78 <HAL_TIM_IC_MspInit>
 8011b8c:	e7c2      	b.n	8011b14 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8011b8e:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8011b92:	480a      	ldr	r0, [pc, #40]	; (8011bbc <HAL_TIM_IC_Init+0x198>)
 8011b94:	f7f3 fec6 	bl	8005924 <assert_failed>
 8011b98:	e7ac      	b.n	8011af4 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 8011b9a:	2001      	movs	r0, #1
}
 8011b9c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8011b9e:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8011ba2:	4806      	ldr	r0, [pc, #24]	; (8011bbc <HAL_TIM_IC_Init+0x198>)
 8011ba4:	f7f3 febe 	bl	8005924 <assert_failed>
 8011ba8:	e799      	b.n	8011ade <HAL_TIM_IC_Init+0xba>
 8011baa:	bf00      	nop
 8011bac:	40010000 	.word	0x40010000
 8011bb0:	40000800 	.word	0x40000800
 8011bb4:	40000400 	.word	0x40000400
 8011bb8:	40002000 	.word	0x40002000
 8011bbc:	0802e580 	.word	0x0802e580

08011bc0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bc0:	6a03      	ldr	r3, [r0, #32]
 8011bc2:	f023 0310 	bic.w	r3, r3, #16
{
 8011bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bca:	6203      	str	r3, [r0, #32]
{
 8011bcc:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8011bce:	6a05      	ldr	r5, [r0, #32]
{
 8011bd0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8011bd2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011bd6:	4b29      	ldr	r3, [pc, #164]	; (8011c7c <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 8011bd8:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 8011bdc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011bde:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011be0:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011be2:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011be6:	688b      	ldr	r3, [r1, #8]
 8011be8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011bec:	4b24      	ldr	r3, [pc, #144]	; (8011c80 <TIM_OC2_SetConfig+0xc0>)
 8011bee:	4298      	cmp	r0, r3
 8011bf0:	d00b      	beq.n	8011c0a <TIM_OC2_SetConfig+0x4a>
 8011bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011bf6:	4298      	cmp	r0, r3
 8011bf8:	d007      	beq.n	8011c0a <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 8011bfa:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8011bfc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011c00:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011c02:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011c04:	6225      	str	r5, [r4, #32]
}
 8011c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011c0a:	68f3      	ldr	r3, [r6, #12]
 8011c0c:	f033 0208 	bics.w	r2, r3, #8
 8011c10:	d123      	bne.n	8011c5a <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8011c12:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011c16:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011c1a:	69b3      	ldr	r3, [r6, #24]
 8011c1c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8011c20:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011c24:	d120      	bne.n	8011c68 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c26:	6973      	ldr	r3, [r6, #20]
 8011c28:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011c2c:	d107      	bne.n	8011c3e <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011c2e:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c32:	69b1      	ldr	r1, [r6, #24]
 8011c34:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011c38:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011c3c:	e7dd      	b.n	8011bfa <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c3e:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8011c42:	4810      	ldr	r0, [pc, #64]	; (8011c84 <TIM_OC2_SetConfig+0xc4>)
 8011c44:	f7f3 fe6e 	bl	8005924 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011c48:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c4c:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011c4e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011c50:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011c54:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8011c58:	e7cf      	b.n	8011bfa <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8011c5a:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8011c5e:	4809      	ldr	r0, [pc, #36]	; (8011c84 <TIM_OC2_SetConfig+0xc4>)
 8011c60:	f7f3 fe60 	bl	8005924 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011c64:	68f3      	ldr	r3, [r6, #12]
 8011c66:	e7d4      	b.n	8011c12 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8011c68:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8011c6c:	4805      	ldr	r0, [pc, #20]	; (8011c84 <TIM_OC2_SetConfig+0xc4>)
 8011c6e:	f7f3 fe59 	bl	8005924 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8011c72:	6973      	ldr	r3, [r6, #20]
 8011c74:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8011c78:	d0d9      	beq.n	8011c2e <TIM_OC2_SetConfig+0x6e>
 8011c7a:	e7e0      	b.n	8011c3e <TIM_OC2_SetConfig+0x7e>
 8011c7c:	feff8cff 	.word	0xfeff8cff
 8011c80:	40010000 	.word	0x40010000
 8011c84:	0802e580 	.word	0x0802e580

08011c88 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c88:	2a14      	cmp	r2, #20
{
 8011c8a:	b570      	push	{r4, r5, r6, lr}
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	4605      	mov	r5, r0
 8011c90:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011c92:	d937      	bls.n	8011d04 <HAL_TIM_OC_ConfigChannel+0x7c>
 8011c94:	2a3c      	cmp	r2, #60	; 0x3c
 8011c96:	d139      	bne.n	8011d0c <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011c98:	6833      	ldr	r3, [r6, #0]
 8011c9a:	f023 0210 	bic.w	r2, r3, #16
 8011c9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011ca2:	2a40      	cmp	r2, #64	; 0x40
 8011ca4:	bf18      	it	ne
 8011ca6:	2b00      	cmpne	r3, #0
 8011ca8:	d003      	beq.n	8011cb2 <HAL_TIM_OC_ConfigChannel+0x2a>
 8011caa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011cae:	f040 8138 	bne.w	8011f22 <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011cb2:	68b3      	ldr	r3, [r6, #8]
 8011cb4:	f033 0302 	bics.w	r3, r3, #2
 8011cb8:	d12e      	bne.n	8011d18 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8011cba:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d033      	beq.n	8011d2a <HAL_TIM_OC_ConfigChannel+0xa2>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011cc8:	2c14      	cmp	r4, #20
 8011cca:	d816      	bhi.n	8011cfa <HAL_TIM_OC_ConfigChannel+0x72>
 8011ccc:	e8df f014 	tbh	[pc, r4, lsl #1]
 8011cd0:	0015002f 	.word	0x0015002f
 8011cd4:	00150015 	.word	0x00150015
 8011cd8:	00150080 	.word	0x00150080
 8011cdc:	00150015 	.word	0x00150015
 8011ce0:	001500b5 	.word	0x001500b5
 8011ce4:	00150015 	.word	0x00150015
 8011ce8:	001500db 	.word	0x001500db
 8011cec:	00150015 	.word	0x00150015
 8011cf0:	00150101 	.word	0x00150101
 8011cf4:	00150015 	.word	0x00150015
 8011cf8:	010e      	.short	0x010e
 8011cfa:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8011d02:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8011d04:	4b98      	ldr	r3, [pc, #608]	; (8011f68 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8011d06:	40d3      	lsrs	r3, r2
 8011d08:	07db      	lsls	r3, r3, #31
 8011d0a:	d4c5      	bmi.n	8011c98 <HAL_TIM_OC_ConfigChannel+0x10>
 8011d0c:	f640 71df 	movw	r1, #4063	; 0xfdf
 8011d10:	4896      	ldr	r0, [pc, #600]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011d12:	f7f3 fe07 	bl	8005924 <assert_failed>
 8011d16:	e7bf      	b.n	8011c98 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011d18:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8011d1c:	4893      	ldr	r0, [pc, #588]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011d1e:	f7f3 fe01 	bl	8005924 <assert_failed>
  __HAL_LOCK(htim);
 8011d22:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d1cb      	bne.n	8011cc2 <HAL_TIM_OC_ConfigChannel+0x3a>
 8011d2a:	2002      	movs	r0, #2
}
 8011d2c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011d2e:	6828      	ldr	r0, [r5, #0]
 8011d30:	4b8f      	ldr	r3, [pc, #572]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011d32:	4a90      	ldr	r2, [pc, #576]	; (8011f74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011d34:	4298      	cmp	r0, r3
 8011d36:	bf18      	it	ne
 8011d38:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011d3c:	bf14      	ite	ne
 8011d3e:	2301      	movne	r3, #1
 8011d40:	2300      	moveq	r3, #0
 8011d42:	4290      	cmp	r0, r2
 8011d44:	bf0c      	ite	eq
 8011d46:	2300      	moveq	r3, #0
 8011d48:	f003 0301 	andne.w	r3, r3, #1
 8011d4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d50:	4290      	cmp	r0, r2
 8011d52:	bf0c      	ite	eq
 8011d54:	2300      	moveq	r3, #0
 8011d56:	f003 0301 	andne.w	r3, r3, #1
 8011d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d5e:	4290      	cmp	r0, r2
 8011d60:	bf0c      	ite	eq
 8011d62:	2300      	moveq	r3, #0
 8011d64:	f003 0301 	andne.w	r3, r3, #1
 8011d68:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011d6c:	4290      	cmp	r0, r2
 8011d6e:	bf0c      	ite	eq
 8011d70:	2300      	moveq	r3, #0
 8011d72:	f003 0301 	andne.w	r3, r3, #1
 8011d76:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011d7a:	4290      	cmp	r0, r2
 8011d7c:	bf0c      	ite	eq
 8011d7e:	2300      	moveq	r3, #0
 8011d80:	f003 0301 	andne.w	r3, r3, #1
 8011d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d88:	4290      	cmp	r0, r2
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2300      	moveq	r3, #0
 8011d8e:	f003 0301 	andne.w	r3, r3, #1
 8011d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d96:	4290      	cmp	r0, r2
 8011d98:	bf0c      	ite	eq
 8011d9a:	2300      	moveq	r3, #0
 8011d9c:	f003 0301 	andne.w	r3, r3, #1
 8011da0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011da4:	4290      	cmp	r0, r2
 8011da6:	bf0c      	ite	eq
 8011da8:	2300      	moveq	r3, #0
 8011daa:	f003 0301 	andne.w	r3, r3, #1
 8011dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011db2:	4290      	cmp	r0, r2
 8011db4:	bf0c      	ite	eq
 8011db6:	2300      	moveq	r3, #0
 8011db8:	f003 0301 	andne.w	r3, r3, #1
 8011dbc:	b11b      	cbz	r3, 8011dc6 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011dbe:	4b6e      	ldr	r3, [pc, #440]	; (8011f78 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8011dc0:	4298      	cmp	r0, r3
 8011dc2:	f040 80c9 	bne.w	8011f58 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	f7fe f9ac 	bl	8010124 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011dcc:	2000      	movs	r0, #0
      break;
 8011dce:	e795      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011dd0:	6828      	ldr	r0, [r5, #0]
 8011dd2:	4b67      	ldr	r3, [pc, #412]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011dd4:	4a67      	ldr	r2, [pc, #412]	; (8011f74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011dd6:	4298      	cmp	r0, r3
 8011dd8:	bf18      	it	ne
 8011dda:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011dde:	bf14      	ite	ne
 8011de0:	2301      	movne	r3, #1
 8011de2:	2300      	moveq	r3, #0
 8011de4:	4290      	cmp	r0, r2
 8011de6:	bf0c      	ite	eq
 8011de8:	2300      	moveq	r3, #0
 8011dea:	f003 0301 	andne.w	r3, r3, #1
 8011dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011df2:	4290      	cmp	r0, r2
 8011df4:	bf0c      	ite	eq
 8011df6:	2300      	moveq	r3, #0
 8011df8:	f003 0301 	andne.w	r3, r3, #1
 8011dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e00:	4290      	cmp	r0, r2
 8011e02:	bf0c      	ite	eq
 8011e04:	2300      	moveq	r3, #0
 8011e06:	f003 0301 	andne.w	r3, r3, #1
 8011e0a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011e0e:	4290      	cmp	r0, r2
 8011e10:	bf0c      	ite	eq
 8011e12:	2300      	moveq	r3, #0
 8011e14:	f003 0301 	andne.w	r3, r3, #1
 8011e18:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011e1c:	4290      	cmp	r0, r2
 8011e1e:	bf0c      	ite	eq
 8011e20:	2300      	moveq	r3, #0
 8011e22:	f003 0301 	andne.w	r3, r3, #1
 8011e26:	b11b      	cbz	r3, 8011e30 <HAL_TIM_OC_ConfigChannel+0x1a8>
 8011e28:	4b54      	ldr	r3, [pc, #336]	; (8011f7c <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8011e2a:	4298      	cmp	r0, r3
 8011e2c:	f040 808d 	bne.w	8011f4a <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011e30:	4631      	mov	r1, r6
 8011e32:	f7ff fec5 	bl	8011bc0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e36:	2000      	movs	r0, #0
      break;
 8011e38:	e760      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011e3a:	6828      	ldr	r0, [r5, #0]
 8011e3c:	4b4c      	ldr	r3, [pc, #304]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e3e:	4a4d      	ldr	r2, [pc, #308]	; (8011f74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011e40:	4298      	cmp	r0, r3
 8011e42:	bf18      	it	ne
 8011e44:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e48:	bf14      	ite	ne
 8011e4a:	2301      	movne	r3, #1
 8011e4c:	2300      	moveq	r3, #0
 8011e4e:	4290      	cmp	r0, r2
 8011e50:	bf0c      	ite	eq
 8011e52:	2300      	moveq	r3, #0
 8011e54:	f003 0301 	andne.w	r3, r3, #1
 8011e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e5c:	4290      	cmp	r0, r2
 8011e5e:	bf0c      	ite	eq
 8011e60:	2300      	moveq	r3, #0
 8011e62:	f003 0301 	andne.w	r3, r3, #1
 8011e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e6a:	4290      	cmp	r0, r2
 8011e6c:	bf0c      	ite	eq
 8011e6e:	2300      	moveq	r3, #0
 8011e70:	f003 0301 	andne.w	r3, r3, #1
 8011e74:	b113      	cbz	r3, 8011e7c <HAL_TIM_OC_ConfigChannel+0x1f4>
 8011e76:	4b42      	ldr	r3, [pc, #264]	; (8011f80 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011e78:	4298      	cmp	r0, r3
 8011e7a:	d15f      	bne.n	8011f3c <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011e7c:	4631      	mov	r1, r6
 8011e7e:	f7fe f9b1 	bl	80101e4 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011e82:	2000      	movs	r0, #0
      break;
 8011e84:	e73a      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011e86:	6828      	ldr	r0, [r5, #0]
 8011e88:	4b39      	ldr	r3, [pc, #228]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011e8a:	4a3a      	ldr	r2, [pc, #232]	; (8011f74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8011e8c:	4298      	cmp	r0, r3
 8011e8e:	bf18      	it	ne
 8011e90:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011e94:	bf14      	ite	ne
 8011e96:	2301      	movne	r3, #1
 8011e98:	2300      	moveq	r3, #0
 8011e9a:	4290      	cmp	r0, r2
 8011e9c:	bf0c      	ite	eq
 8011e9e:	2300      	moveq	r3, #0
 8011ea0:	f003 0301 	andne.w	r3, r3, #1
 8011ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ea8:	4290      	cmp	r0, r2
 8011eaa:	bf0c      	ite	eq
 8011eac:	2300      	moveq	r3, #0
 8011eae:	f003 0301 	andne.w	r3, r3, #1
 8011eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011eb6:	4290      	cmp	r0, r2
 8011eb8:	bf0c      	ite	eq
 8011eba:	2300      	moveq	r3, #0
 8011ebc:	f003 0301 	andne.w	r3, r3, #1
 8011ec0:	b113      	cbz	r3, 8011ec8 <HAL_TIM_OC_ConfigChannel+0x240>
 8011ec2:	4b2f      	ldr	r3, [pc, #188]	; (8011f80 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8011ec4:	4298      	cmp	r0, r3
 8011ec6:	d132      	bne.n	8011f2e <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011ec8:	4631      	mov	r1, r6
 8011eca:	f7fe f9ef 	bl	80102ac <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011ece:	2000      	movs	r0, #0
      break;
 8011ed0:	e714      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011ed2:	6828      	ldr	r0, [r5, #0]
 8011ed4:	4b26      	ldr	r3, [pc, #152]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011ed6:	4298      	cmp	r0, r3
 8011ed8:	d003      	beq.n	8011ee2 <HAL_TIM_OC_ConfigChannel+0x25a>
 8011eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ede:	4298      	cmp	r0, r3
 8011ee0:	d118      	bne.n	8011f14 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	f7fe f8ca 	bl	801007c <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011ee8:	2000      	movs	r0, #0
      break;
 8011eea:	e707      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011eec:	6828      	ldr	r0, [r5, #0]
 8011eee:	4b20      	ldr	r3, [pc, #128]	; (8011f70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8011ef0:	4298      	cmp	r0, r3
 8011ef2:	d003      	beq.n	8011efc <HAL_TIM_OC_ConfigChannel+0x274>
 8011ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ef8:	4298      	cmp	r0, r3
 8011efa:	d104      	bne.n	8011f06 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011efc:	4631      	mov	r1, r6
 8011efe:	f7fe f8e7 	bl	80100d0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011f02:	2000      	movs	r0, #0
      break;
 8011f04:	e6fa      	b.n	8011cfc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8011f06:	4819      	ldr	r0, [pc, #100]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f08:	f241 011d 	movw	r1, #4125	; 0x101d
 8011f0c:	f7f3 fd0a 	bl	8005924 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011f10:	6828      	ldr	r0, [r5, #0]
 8011f12:	e7f3      	b.n	8011efc <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8011f14:	4815      	ldr	r0, [pc, #84]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f16:	f241 0113 	movw	r1, #4115	; 0x1013
 8011f1a:	f7f3 fd03 	bl	8005924 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011f1e:	6828      	ldr	r0, [r5, #0]
 8011f20:	e7df      	b.n	8011ee2 <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8011f22:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8011f26:	4811      	ldr	r0, [pc, #68]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f28:	f7f3 fcfc 	bl	8005924 <assert_failed>
 8011f2c:	e6c1      	b.n	8011cb2 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8011f2e:	480f      	ldr	r0, [pc, #60]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f30:	f241 0109 	movw	r1, #4105	; 0x1009
 8011f34:	f7f3 fcf6 	bl	8005924 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f38:	6828      	ldr	r0, [r5, #0]
 8011f3a:	e7c5      	b.n	8011ec8 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011f3c:	480b      	ldr	r0, [pc, #44]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f3e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8011f42:	f7f3 fcef 	bl	8005924 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f46:	6828      	ldr	r0, [r5, #0]
 8011f48:	e798      	b.n	8011e7c <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8011f4a:	4808      	ldr	r0, [pc, #32]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f4c:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011f50:	f7f3 fce8 	bl	8005924 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f54:	6828      	ldr	r0, [r5, #0]
 8011f56:	e76b      	b.n	8011e30 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011f58:	4804      	ldr	r0, [pc, #16]	; (8011f6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8011f5a:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8011f5e:	f7f3 fce1 	bl	8005924 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f62:	6828      	ldr	r0, [r5, #0]
 8011f64:	e72f      	b.n	8011dc6 <HAL_TIM_OC_ConfigChannel+0x13e>
 8011f66:	bf00      	nop
 8011f68:	00111111 	.word	0x00111111
 8011f6c:	0802e580 	.word	0x0802e580
 8011f70:	40010000 	.word	0x40010000
 8011f74:	40000400 	.word	0x40000400
 8011f78:	40002000 	.word	0x40002000
 8011f7c:	40001800 	.word	0x40001800
 8011f80:	40010400 	.word	0x40010400

08011f84 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f84:	2a14      	cmp	r2, #20
{
 8011f86:	b570      	push	{r4, r5, r6, lr}
 8011f88:	4616      	mov	r6, r2
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8011f8e:	d933      	bls.n	8011ff8 <HAL_TIM_PWM_ConfigChannel+0x74>
 8011f90:	2a3c      	cmp	r2, #60	; 0x3c
 8011f92:	d135      	bne.n	8012000 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8011f94:	6822      	ldr	r2, [r4, #0]
 8011f96:	4b90      	ldr	r3, [pc, #576]	; (80121d8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8011f98:	4013      	ands	r3, r2
 8011f9a:	2b60      	cmp	r3, #96	; 0x60
 8011f9c:	d004      	beq.n	8011fa8 <HAL_TIM_PWM_ConfigChannel+0x24>
 8011f9e:	f022 0210 	bic.w	r2, r2, #16
 8011fa2:	4b8e      	ldr	r3, [pc, #568]	; (80121dc <HAL_TIM_PWM_ConfigChannel+0x258>)
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d147      	bne.n	8012038 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8011fa8:	68a3      	ldr	r3, [r4, #8]
 8011faa:	f033 0302 	bics.w	r3, r3, #2
 8011fae:	d13d      	bne.n	801202c <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8011fb0:	6923      	ldr	r3, [r4, #16]
 8011fb2:	f033 0304 	bics.w	r3, r3, #4
 8011fb6:	d12e      	bne.n	8012016 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8011fb8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d033      	beq.n	8012028 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8011fc6:	2e14      	cmp	r6, #20
 8011fc8:	d820      	bhi.n	801200c <HAL_TIM_PWM_ConfigChannel+0x88>
 8011fca:	e8df f016 	tbh	[pc, r6, lsl #1]
 8011fce:	00a7      	.short	0x00a7
 8011fd0:	001f001f 	.word	0x001f001f
 8011fd4:	0115001f 	.word	0x0115001f
 8011fd8:	001f001f 	.word	0x001f001f
 8011fdc:	0157001f 	.word	0x0157001f
 8011fe0:	001f001f 	.word	0x001f001f
 8011fe4:	0057001f 	.word	0x0057001f
 8011fe8:	001f001f 	.word	0x001f001f
 8011fec:	008c001f 	.word	0x008c001f
 8011ff0:	001f001f 	.word	0x001f001f
 8011ff4:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8011ff8:	4b79      	ldr	r3, [pc, #484]	; (80121e0 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8011ffa:	40d3      	lsrs	r3, r2
 8011ffc:	07db      	lsls	r3, r3, #31
 8011ffe:	d4c9      	bmi.n	8011f94 <HAL_TIM_PWM_ConfigChannel+0x10>
 8012000:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8012004:	4877      	ldr	r0, [pc, #476]	; (80121e4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8012006:	f7f3 fc8d 	bl	8005924 <assert_failed>
 801200a:	e7c3      	b.n	8011f94 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 801200c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 801200e:	2300      	movs	r3, #0
 8012010:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8012014:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8012016:	f241 01aa 	movw	r1, #4266	; 0x10aa
 801201a:	4872      	ldr	r0, [pc, #456]	; (80121e4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 801201c:	f7f3 fc82 	bl	8005924 <assert_failed>
  __HAL_LOCK(htim);
 8012020:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8012024:	2b01      	cmp	r3, #1
 8012026:	d1cb      	bne.n	8011fc0 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8012028:	2002      	movs	r0, #2
}
 801202a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 801202c:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8012030:	486c      	ldr	r0, [pc, #432]	; (80121e4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8012032:	f7f3 fc77 	bl	8005924 <assert_failed>
 8012036:	e7bb      	b.n	8011fb0 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8012038:	f241 01a8 	movw	r1, #4264	; 0x10a8
 801203c:	4869      	ldr	r0, [pc, #420]	; (80121e4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 801203e:	f7f3 fc71 	bl	8005924 <assert_failed>
 8012042:	e7b1      	b.n	8011fa8 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8012044:	6828      	ldr	r0, [r5, #0]
 8012046:	4b68      	ldr	r3, [pc, #416]	; (80121e8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012048:	4298      	cmp	r0, r3
 801204a:	d004      	beq.n	8012056 <HAL_TIM_PWM_ConfigChannel+0xd2>
 801204c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012050:	4298      	cmp	r0, r3
 8012052:	f040 814d 	bne.w	80122f0 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012056:	4621      	mov	r1, r4
 8012058:	f7fe f83a 	bl	80100d0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801205c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801205e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012062:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8012066:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801206a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801206e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012072:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8012076:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012078:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801207a:	e7c8      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801207c:	6828      	ldr	r0, [r5, #0]
 801207e:	4b5a      	ldr	r3, [pc, #360]	; (80121e8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012080:	4a5a      	ldr	r2, [pc, #360]	; (80121ec <HAL_TIM_PWM_ConfigChannel+0x268>)
 8012082:	4298      	cmp	r0, r3
 8012084:	bf18      	it	ne
 8012086:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801208a:	bf14      	ite	ne
 801208c:	2301      	movne	r3, #1
 801208e:	2300      	moveq	r3, #0
 8012090:	4290      	cmp	r0, r2
 8012092:	bf0c      	ite	eq
 8012094:	2300      	moveq	r3, #0
 8012096:	f003 0301 	andne.w	r3, r3, #1
 801209a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801209e:	4290      	cmp	r0, r2
 80120a0:	bf0c      	ite	eq
 80120a2:	2300      	moveq	r3, #0
 80120a4:	f003 0301 	andne.w	r3, r3, #1
 80120a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120ac:	4290      	cmp	r0, r2
 80120ae:	bf0c      	ite	eq
 80120b0:	2300      	moveq	r3, #0
 80120b2:	f003 0301 	andne.w	r3, r3, #1
 80120b6:	b11b      	cbz	r3, 80120c0 <HAL_TIM_PWM_ConfigChannel+0x13c>
 80120b8:	4b4d      	ldr	r3, [pc, #308]	; (80121f0 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80120ba:	4298      	cmp	r0, r3
 80120bc:	f040 811f 	bne.w	80122fe <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120c0:	4621      	mov	r1, r4
 80120c2:	f7fe f8f3 	bl	80102ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120c6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120c8:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120ca:	69d9      	ldr	r1, [r3, #28]
 80120cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80120d0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80120d2:	69d9      	ldr	r1, [r3, #28]
 80120d4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80120d8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120da:	69da      	ldr	r2, [r3, #28]
 80120dc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80120e0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120e2:	61da      	str	r2, [r3, #28]
      break;
 80120e4:	e793      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80120e6:	6828      	ldr	r0, [r5, #0]
 80120e8:	4b3f      	ldr	r3, [pc, #252]	; (80121e8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80120ea:	4298      	cmp	r0, r3
 80120ec:	d004      	beq.n	80120f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 80120ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120f2:	4298      	cmp	r0, r3
 80120f4:	f040 80f5 	bne.w	80122e2 <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80120f8:	4621      	mov	r1, r4
 80120fa:	f7fd ffbf 	bl	801007c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80120fe:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012100:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012102:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012104:	f041 0108 	orr.w	r1, r1, #8
 8012108:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801210a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801210c:	f021 0104 	bic.w	r1, r1, #4
 8012110:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012114:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012116:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801211a:	e778      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801211c:	6828      	ldr	r0, [r5, #0]
 801211e:	4b32      	ldr	r3, [pc, #200]	; (80121e8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8012120:	4a32      	ldr	r2, [pc, #200]	; (80121ec <HAL_TIM_PWM_ConfigChannel+0x268>)
 8012122:	4298      	cmp	r0, r3
 8012124:	bf18      	it	ne
 8012126:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801212a:	bf14      	ite	ne
 801212c:	2301      	movne	r3, #1
 801212e:	2300      	moveq	r3, #0
 8012130:	4290      	cmp	r0, r2
 8012132:	bf0c      	ite	eq
 8012134:	2300      	moveq	r3, #0
 8012136:	f003 0301 	andne.w	r3, r3, #1
 801213a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801213e:	4290      	cmp	r0, r2
 8012140:	bf0c      	ite	eq
 8012142:	2300      	moveq	r3, #0
 8012144:	f003 0301 	andne.w	r3, r3, #1
 8012148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801214c:	4290      	cmp	r0, r2
 801214e:	bf0c      	ite	eq
 8012150:	2300      	moveq	r3, #0
 8012152:	f003 0301 	andne.w	r3, r3, #1
 8012156:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801215a:	4290      	cmp	r0, r2
 801215c:	bf0c      	ite	eq
 801215e:	2300      	moveq	r3, #0
 8012160:	f003 0301 	andne.w	r3, r3, #1
 8012164:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012168:	4290      	cmp	r0, r2
 801216a:	bf0c      	ite	eq
 801216c:	2300      	moveq	r3, #0
 801216e:	f003 0301 	andne.w	r3, r3, #1
 8012172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012176:	4290      	cmp	r0, r2
 8012178:	bf0c      	ite	eq
 801217a:	2300      	moveq	r3, #0
 801217c:	f003 0301 	andne.w	r3, r3, #1
 8012180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012184:	4290      	cmp	r0, r2
 8012186:	bf0c      	ite	eq
 8012188:	2300      	moveq	r3, #0
 801218a:	f003 0301 	andne.w	r3, r3, #1
 801218e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012192:	4290      	cmp	r0, r2
 8012194:	bf0c      	ite	eq
 8012196:	2300      	moveq	r3, #0
 8012198:	f003 0301 	andne.w	r3, r3, #1
 801219c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80121a0:	4290      	cmp	r0, r2
 80121a2:	bf0c      	ite	eq
 80121a4:	2300      	moveq	r3, #0
 80121a6:	f003 0301 	andne.w	r3, r3, #1
 80121aa:	b11b      	cbz	r3, 80121b4 <HAL_TIM_PWM_ConfigChannel+0x230>
 80121ac:	4b11      	ldr	r3, [pc, #68]	; (80121f4 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80121ae:	4298      	cmp	r0, r3
 80121b0:	f040 80ba 	bne.w	8012328 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80121b4:	4621      	mov	r1, r4
 80121b6:	f7fd ffb5 	bl	8010124 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80121ba:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121bc:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80121be:	6999      	ldr	r1, [r3, #24]
 80121c0:	f041 0108 	orr.w	r1, r1, #8
 80121c4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80121c6:	6999      	ldr	r1, [r3, #24]
 80121c8:	f021 0104 	bic.w	r1, r1, #4
 80121cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121ce:	699a      	ldr	r2, [r3, #24]
 80121d0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80121d2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80121d4:	619a      	str	r2, [r3, #24]
      break;
 80121d6:	e71a      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
 80121d8:	fffeffef 	.word	0xfffeffef
 80121dc:	00010040 	.word	0x00010040
 80121e0:	00111111 	.word	0x00111111
 80121e4:	0802e580 	.word	0x0802e580
 80121e8:	40010000 	.word	0x40010000
 80121ec:	40000400 	.word	0x40000400
 80121f0:	40010400 	.word	0x40010400
 80121f4:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80121f8:	6828      	ldr	r0, [r5, #0]
 80121fa:	4b4f      	ldr	r3, [pc, #316]	; (8012338 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80121fc:	4a4f      	ldr	r2, [pc, #316]	; (801233c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 80121fe:	4298      	cmp	r0, r3
 8012200:	bf18      	it	ne
 8012202:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012206:	bf14      	ite	ne
 8012208:	2301      	movne	r3, #1
 801220a:	2300      	moveq	r3, #0
 801220c:	4290      	cmp	r0, r2
 801220e:	bf0c      	ite	eq
 8012210:	2300      	moveq	r3, #0
 8012212:	f003 0301 	andne.w	r3, r3, #1
 8012216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801221a:	4290      	cmp	r0, r2
 801221c:	bf0c      	ite	eq
 801221e:	2300      	moveq	r3, #0
 8012220:	f003 0301 	andne.w	r3, r3, #1
 8012224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012228:	4290      	cmp	r0, r2
 801222a:	bf0c      	ite	eq
 801222c:	2300      	moveq	r3, #0
 801222e:	f003 0301 	andne.w	r3, r3, #1
 8012232:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012236:	4290      	cmp	r0, r2
 8012238:	bf0c      	ite	eq
 801223a:	2300      	moveq	r3, #0
 801223c:	f003 0301 	andne.w	r3, r3, #1
 8012240:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012244:	4290      	cmp	r0, r2
 8012246:	bf0c      	ite	eq
 8012248:	2300      	moveq	r3, #0
 801224a:	f003 0301 	andne.w	r3, r3, #1
 801224e:	b113      	cbz	r3, 8012256 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8012250:	4b3b      	ldr	r3, [pc, #236]	; (8012340 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8012252:	4298      	cmp	r0, r3
 8012254:	d161      	bne.n	801231a <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012256:	4621      	mov	r1, r4
 8012258:	f7ff fcb2 	bl	8011bc0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801225c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801225e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012260:	6999      	ldr	r1, [r3, #24]
 8012262:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8012266:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012268:	6999      	ldr	r1, [r3, #24]
 801226a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801226e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012270:	699a      	ldr	r2, [r3, #24]
 8012272:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8012276:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012278:	619a      	str	r2, [r3, #24]
      break;
 801227a:	e6c8      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801227c:	6828      	ldr	r0, [r5, #0]
 801227e:	4b2e      	ldr	r3, [pc, #184]	; (8012338 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8012280:	4a2e      	ldr	r2, [pc, #184]	; (801233c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8012282:	4298      	cmp	r0, r3
 8012284:	bf18      	it	ne
 8012286:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801228a:	bf14      	ite	ne
 801228c:	2301      	movne	r3, #1
 801228e:	2300      	moveq	r3, #0
 8012290:	4290      	cmp	r0, r2
 8012292:	bf0c      	ite	eq
 8012294:	2300      	moveq	r3, #0
 8012296:	f003 0301 	andne.w	r3, r3, #1
 801229a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801229e:	4290      	cmp	r0, r2
 80122a0:	bf0c      	ite	eq
 80122a2:	2300      	moveq	r3, #0
 80122a4:	f003 0301 	andne.w	r3, r3, #1
 80122a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80122ac:	4290      	cmp	r0, r2
 80122ae:	bf0c      	ite	eq
 80122b0:	2300      	moveq	r3, #0
 80122b2:	f003 0301 	andne.w	r3, r3, #1
 80122b6:	b113      	cbz	r3, 80122be <HAL_TIM_PWM_ConfigChannel+0x33a>
 80122b8:	4b22      	ldr	r3, [pc, #136]	; (8012344 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 80122ba:	4298      	cmp	r0, r3
 80122bc:	d126      	bne.n	801230c <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80122be:	4621      	mov	r1, r4
 80122c0:	f7fd ff90 	bl	80101e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122c4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122c6:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122c8:	69d9      	ldr	r1, [r3, #28]
 80122ca:	f041 0108 	orr.w	r1, r1, #8
 80122ce:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80122d0:	69d9      	ldr	r1, [r3, #28]
 80122d2:	f021 0104 	bic.w	r1, r1, #4
 80122d6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122d8:	69da      	ldr	r2, [r3, #28]
 80122da:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80122dc:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122de:	61da      	str	r2, [r3, #28]
      break;
 80122e0:	e695      	b.n	801200e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80122e2:	4819      	ldr	r0, [pc, #100]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122e4:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80122e8:	f7f3 fb1c 	bl	8005924 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80122ec:	6828      	ldr	r0, [r5, #0]
 80122ee:	e703      	b.n	80120f8 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80122f0:	4815      	ldr	r0, [pc, #84]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80122f2:	f241 1109 	movw	r1, #4361	; 0x1109
 80122f6:	f7f3 fb15 	bl	8005924 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80122fa:	6828      	ldr	r0, [r5, #0]
 80122fc:	e6ab      	b.n	8012056 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80122fe:	4812      	ldr	r0, [pc, #72]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8012300:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8012304:	f7f3 fb0e 	bl	8005924 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012308:	6828      	ldr	r0, [r5, #0]
 801230a:	e6d9      	b.n	80120c0 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801230c:	480e      	ldr	r0, [pc, #56]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801230e:	f241 01d6 	movw	r1, #4310	; 0x10d6
 8012312:	f7f3 fb07 	bl	8005924 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012316:	6828      	ldr	r0, [r5, #0]
 8012318:	e7d1      	b.n	80122be <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801231a:	480b      	ldr	r0, [pc, #44]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801231c:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8012320:	f7f3 fb00 	bl	8005924 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012324:	6828      	ldr	r0, [r5, #0]
 8012326:	e796      	b.n	8012256 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012328:	4807      	ldr	r0, [pc, #28]	; (8012348 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801232a:	f241 01b4 	movw	r1, #4276	; 0x10b4
 801232e:	f7f3 faf9 	bl	8005924 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012332:	6828      	ldr	r0, [r5, #0]
 8012334:	e73e      	b.n	80121b4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8012336:	bf00      	nop
 8012338:	40010000 	.word	0x40010000
 801233c:	40000400 	.word	0x40000400
 8012340:	40001800 	.word	0x40001800
 8012344:	40010400 	.word	0x40010400
 8012348:	0802e580 	.word	0x0802e580

0801234c <TIM_TI1_SetConfig>:
{
 801234c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801234e:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012350:	4e1b      	ldr	r6, [pc, #108]	; (80123c0 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012352:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012356:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012358:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801235a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 801235c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801235e:	d01d      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 8012360:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012364:	d01a      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 8012366:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 801236a:	42b0      	cmp	r0, r6
 801236c:	d016      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 801236e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012372:	42b0      	cmp	r0, r6
 8012374:	d012      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 8012376:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801237a:	42b0      	cmp	r0, r6
 801237c:	d00e      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 801237e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8012382:	42b0      	cmp	r0, r6
 8012384:	d00a      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 8012386:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 801238a:	42b0      	cmp	r0, r6
 801238c:	d006      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
 801238e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8012392:	42b0      	cmp	r0, r6
 8012394:	d002      	beq.n	801239c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012396:	f044 0201 	orr.w	r2, r4, #1
 801239a:	e002      	b.n	80123a2 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801239c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80123a0:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80123a2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80123a4:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80123a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80123ac:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80123b0:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80123b2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80123b4:	4313      	orrs	r3, r2
}
 80123b6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 80123b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80123ba:	6201      	str	r1, [r0, #32]
}
 80123bc:	4770      	bx	lr
 80123be:	bf00      	nop
 80123c0:	40010000 	.word	0x40010000

080123c4 <HAL_TIM_IC_ConfigChannel>:
{
 80123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123c6:	4ba8      	ldr	r3, [pc, #672]	; (8012668 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 80123c8:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123ca:	6801      	ldr	r1, [r0, #0]
{
 80123cc:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123ce:	4fa7      	ldr	r7, [pc, #668]	; (801266c <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 80123d0:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80123d2:	4299      	cmp	r1, r3
 80123d4:	bf18      	it	ne
 80123d6:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 80123da:	4aa5      	ldr	r2, [pc, #660]	; (8012670 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 80123dc:	bf14      	ite	ne
 80123de:	2301      	movne	r3, #1
 80123e0:	2300      	moveq	r3, #0
 80123e2:	42b9      	cmp	r1, r7
 80123e4:	bf0c      	ite	eq
 80123e6:	2300      	moveq	r3, #0
 80123e8:	f003 0301 	andne.w	r3, r3, #1
 80123ec:	4291      	cmp	r1, r2
 80123ee:	bf0c      	ite	eq
 80123f0:	2300      	moveq	r3, #0
 80123f2:	f003 0301 	andne.w	r3, r3, #1
 80123f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123fa:	4291      	cmp	r1, r2
 80123fc:	bf0c      	ite	eq
 80123fe:	2300      	moveq	r3, #0
 8012400:	f003 0301 	andne.w	r3, r3, #1
 8012404:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012408:	4291      	cmp	r1, r2
 801240a:	bf0c      	ite	eq
 801240c:	2300      	moveq	r3, #0
 801240e:	f003 0301 	andne.w	r3, r3, #1
 8012412:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012416:	4291      	cmp	r1, r2
 8012418:	bf0c      	ite	eq
 801241a:	2300      	moveq	r3, #0
 801241c:	f003 0301 	andne.w	r3, r3, #1
 8012420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012424:	4291      	cmp	r1, r2
 8012426:	bf0c      	ite	eq
 8012428:	2300      	moveq	r3, #0
 801242a:	f003 0301 	andne.w	r3, r3, #1
 801242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012432:	4291      	cmp	r1, r2
 8012434:	bf0c      	ite	eq
 8012436:	2300      	moveq	r3, #0
 8012438:	f003 0301 	andne.w	r3, r3, #1
 801243c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012440:	4291      	cmp	r1, r2
 8012442:	bf0c      	ite	eq
 8012444:	2300      	moveq	r3, #0
 8012446:	f003 0301 	andne.w	r3, r3, #1
 801244a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801244e:	4291      	cmp	r1, r2
 8012450:	bf0c      	ite	eq
 8012452:	2300      	moveq	r3, #0
 8012454:	f003 0301 	andne.w	r3, r3, #1
 8012458:	b11b      	cbz	r3, 8012462 <HAL_TIM_IC_ConfigChannel+0x9e>
 801245a:	4b86      	ldr	r3, [pc, #536]	; (8012674 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 801245c:	4299      	cmp	r1, r3
 801245e:	f040 8158 	bne.w	8012712 <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8012462:	6823      	ldr	r3, [r4, #0]
 8012464:	f033 0202 	bics.w	r2, r3, #2
 8012468:	d001      	beq.n	801246e <HAL_TIM_IC_ConfigChannel+0xaa>
 801246a:	2b0a      	cmp	r3, #10
 801246c:	d11e      	bne.n	80124ac <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801246e:	6863      	ldr	r3, [r4, #4]
 8012470:	3b01      	subs	r3, #1
 8012472:	2b02      	cmp	r3, #2
 8012474:	d823      	bhi.n	80124be <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8012476:	68a3      	ldr	r3, [r4, #8]
 8012478:	f033 030c 	bics.w	r3, r3, #12
 801247c:	d128      	bne.n	80124d0 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 801247e:	68e3      	ldr	r3, [r4, #12]
 8012480:	2b0f      	cmp	r3, #15
 8012482:	d82d      	bhi.n	80124e0 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8012484:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8012488:	2b01      	cmp	r3, #1
 801248a:	d032      	beq.n	80124f2 <HAL_TIM_IC_ConfigChannel+0x12e>
 801248c:	2001      	movs	r0, #1
 801248e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8012492:	b386      	cbz	r6, 80124f6 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8012494:	2e04      	cmp	r6, #4
 8012496:	d042      	beq.n	801251e <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8012498:	2e08      	cmp	r6, #8
 801249a:	f000 80f3 	beq.w	8012684 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 801249e:	2e0c      	cmp	r6, #12
 80124a0:	f000 8095 	beq.w	80125ce <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 80124a4:	2300      	movs	r3, #0
 80124a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80124aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80124ac:	f241 0141 	movw	r1, #4161	; 0x1041
 80124b0:	4871      	ldr	r0, [pc, #452]	; (8012678 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124b2:	f7f3 fa37 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80124b6:	6863      	ldr	r3, [r4, #4]
 80124b8:	3b01      	subs	r3, #1
 80124ba:	2b02      	cmp	r3, #2
 80124bc:	d9db      	bls.n	8012476 <HAL_TIM_IC_ConfigChannel+0xb2>
 80124be:	f241 0142 	movw	r1, #4162	; 0x1042
 80124c2:	486d      	ldr	r0, [pc, #436]	; (8012678 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124c4:	f7f3 fa2e 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80124c8:	68a3      	ldr	r3, [r4, #8]
 80124ca:	f033 030c 	bics.w	r3, r3, #12
 80124ce:	d0d6      	beq.n	801247e <HAL_TIM_IC_ConfigChannel+0xba>
 80124d0:	f241 0143 	movw	r1, #4163	; 0x1043
 80124d4:	4868      	ldr	r0, [pc, #416]	; (8012678 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124d6:	f7f3 fa25 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80124da:	68e3      	ldr	r3, [r4, #12]
 80124dc:	2b0f      	cmp	r3, #15
 80124de:	d9d1      	bls.n	8012484 <HAL_TIM_IC_ConfigChannel+0xc0>
 80124e0:	f241 0144 	movw	r1, #4164	; 0x1044
 80124e4:	4864      	ldr	r0, [pc, #400]	; (8012678 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80124e6:	f7f3 fa1d 	bl	8005924 <assert_failed>
  __HAL_LOCK(htim);
 80124ea:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d1cc      	bne.n	801248c <HAL_TIM_IC_ConfigChannel+0xc8>
 80124f2:	2002      	movs	r0, #2
}
 80124f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80124f6:	e9d4 1200 	ldrd	r1, r2, [r4]
 80124fa:	68e3      	ldr	r3, [r4, #12]
 80124fc:	6828      	ldr	r0, [r5, #0]
 80124fe:	f7ff ff25 	bl	801234c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012502:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8012504:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012506:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012508:	6999      	ldr	r1, [r3, #24]
 801250a:	f021 010c 	bic.w	r1, r1, #12
 801250e:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8012510:	699a      	ldr	r2, [r3, #24]
 8012512:	4322      	orrs	r2, r4
 8012514:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8012516:	2300      	movs	r3, #0
 8012518:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 801251c:	e7c5      	b.n	80124aa <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801251e:	682a      	ldr	r2, [r5, #0]
 8012520:	4b51      	ldr	r3, [pc, #324]	; (8012668 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8012522:	4952      	ldr	r1, [pc, #328]	; (801266c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8012524:	429a      	cmp	r2, r3
 8012526:	bf18      	it	ne
 8012528:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801252c:	bf14      	ite	ne
 801252e:	2301      	movne	r3, #1
 8012530:	2300      	moveq	r3, #0
 8012532:	428a      	cmp	r2, r1
 8012534:	bf0c      	ite	eq
 8012536:	2300      	moveq	r3, #0
 8012538:	f003 0301 	andne.w	r3, r3, #1
 801253c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012540:	428a      	cmp	r2, r1
 8012542:	bf0c      	ite	eq
 8012544:	2300      	moveq	r3, #0
 8012546:	f003 0301 	andne.w	r3, r3, #1
 801254a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801254e:	428a      	cmp	r2, r1
 8012550:	bf0c      	ite	eq
 8012552:	2300      	moveq	r3, #0
 8012554:	f003 0301 	andne.w	r3, r3, #1
 8012558:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801255c:	428a      	cmp	r2, r1
 801255e:	bf0c      	ite	eq
 8012560:	2300      	moveq	r3, #0
 8012562:	f003 0301 	andne.w	r3, r3, #1
 8012566:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801256a:	428a      	cmp	r2, r1
 801256c:	bf0c      	ite	eq
 801256e:	2300      	moveq	r3, #0
 8012570:	f003 0301 	andne.w	r3, r3, #1
 8012574:	b11b      	cbz	r3, 801257e <HAL_TIM_IC_ConfigChannel+0x1ba>
 8012576:	4b41      	ldr	r3, [pc, #260]	; (801267c <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8012578:	429a      	cmp	r2, r3
 801257a:	f040 80d7 	bne.w	801272c <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801257e:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8012580:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012582:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012586:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8012588:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801258c:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801258e:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8012590:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012592:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8012594:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012596:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801259a:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801259e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80125a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80125a6:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 80125a8:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80125aa:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80125ac:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80125b0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80125b2:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80125b4:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80125b6:	6991      	ldr	r1, [r2, #24]
 80125b8:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80125bc:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80125be:	6993      	ldr	r3, [r2, #24]
 80125c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80125c4:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80125c6:	2300      	movs	r3, #0
 80125c8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80125cc:	e76d      	b.n	80124aa <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80125ce:	682b      	ldr	r3, [r5, #0]
 80125d0:	4a25      	ldr	r2, [pc, #148]	; (8012668 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80125d2:	4926      	ldr	r1, [pc, #152]	; (801266c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	bf18      	it	ne
 80125d8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80125dc:	bf14      	ite	ne
 80125de:	2201      	movne	r2, #1
 80125e0:	2200      	moveq	r2, #0
 80125e2:	428b      	cmp	r3, r1
 80125e4:	bf0c      	ite	eq
 80125e6:	2200      	moveq	r2, #0
 80125e8:	f002 0201 	andne.w	r2, r2, #1
 80125ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80125f0:	428b      	cmp	r3, r1
 80125f2:	bf0c      	ite	eq
 80125f4:	2200      	moveq	r2, #0
 80125f6:	f002 0201 	andne.w	r2, r2, #1
 80125fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80125fe:	428b      	cmp	r3, r1
 8012600:	bf0c      	ite	eq
 8012602:	2200      	moveq	r2, #0
 8012604:	f002 0201 	andne.w	r2, r2, #1
 8012608:	b142      	cbz	r2, 801261c <HAL_TIM_IC_ConfigChannel+0x258>
 801260a:	4a1d      	ldr	r2, [pc, #116]	; (8012680 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d005      	beq.n	801261c <HAL_TIM_IC_ConfigChannel+0x258>
 8012610:	f241 017a 	movw	r1, #4218	; 0x107a
 8012614:	4818      	ldr	r0, [pc, #96]	; (8012678 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8012616:	f7f3 f985 	bl	8005924 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 801261a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801261c:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 801261e:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012620:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012624:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 8012626:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801262a:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801262c:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 801262e:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012630:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012632:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012634:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012638:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801263c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012640:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012644:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8012646:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8012648:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801264a:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801264e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8012650:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 8012652:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012654:	69d9      	ldr	r1, [r3, #28]
 8012656:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 801265a:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801265c:	69da      	ldr	r2, [r3, #28]
 801265e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8012662:	61da      	str	r2, [r3, #28]
 8012664:	e71e      	b.n	80124a4 <HAL_TIM_IC_ConfigChannel+0xe0>
 8012666:	bf00      	nop
 8012668:	40010000 	.word	0x40010000
 801266c:	40000400 	.word	0x40000400
 8012670:	40000800 	.word	0x40000800
 8012674:	40002000 	.word	0x40002000
 8012678:	0802e580 	.word	0x0802e580
 801267c:	40001800 	.word	0x40001800
 8012680:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8012684:	682b      	ldr	r3, [r5, #0]
 8012686:	4a2d      	ldr	r2, [pc, #180]	; (801273c <HAL_TIM_IC_ConfigChannel+0x378>)
 8012688:	492d      	ldr	r1, [pc, #180]	; (8012740 <HAL_TIM_IC_ConfigChannel+0x37c>)
 801268a:	4293      	cmp	r3, r2
 801268c:	bf18      	it	ne
 801268e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012692:	bf14      	ite	ne
 8012694:	2201      	movne	r2, #1
 8012696:	2200      	moveq	r2, #0
 8012698:	428b      	cmp	r3, r1
 801269a:	bf0c      	ite	eq
 801269c:	2200      	moveq	r2, #0
 801269e:	f002 0201 	andne.w	r2, r2, #1
 80126a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80126a6:	428b      	cmp	r3, r1
 80126a8:	bf0c      	ite	eq
 80126aa:	2200      	moveq	r2, #0
 80126ac:	f002 0201 	andne.w	r2, r2, #1
 80126b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80126b4:	428b      	cmp	r3, r1
 80126b6:	bf0c      	ite	eq
 80126b8:	2200      	moveq	r2, #0
 80126ba:	f002 0201 	andne.w	r2, r2, #1
 80126be:	b112      	cbz	r2, 80126c6 <HAL_TIM_IC_ConfigChannel+0x302>
 80126c0:	4a20      	ldr	r2, [pc, #128]	; (8012744 <HAL_TIM_IC_ConfigChannel+0x380>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d12b      	bne.n	801271e <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126c6:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 80126c8:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126ca:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126ce:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 80126d0:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126d4:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126d6:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80126d8:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126da:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80126dc:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80126de:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126e2:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 80126e6:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80126e8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80126ec:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80126ee:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80126f0:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 80126f4:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80126f6:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80126f8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80126fa:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80126fc:	69d9      	ldr	r1, [r3, #28]
 80126fe:	f021 010c 	bic.w	r1, r1, #12
 8012702:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8012704:	69da      	ldr	r2, [r3, #28]
 8012706:	4322      	orrs	r2, r4
 8012708:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 801270a:	2300      	movs	r3, #0
 801270c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8012710:	e6cb      	b.n	80124aa <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8012712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8012716:	480c      	ldr	r0, [pc, #48]	; (8012748 <HAL_TIM_IC_ConfigChannel+0x384>)
 8012718:	f7f3 f904 	bl	8005924 <assert_failed>
 801271c:	e6a1      	b.n	8012462 <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801271e:	f241 016a 	movw	r1, #4202	; 0x106a
 8012722:	4809      	ldr	r0, [pc, #36]	; (8012748 <HAL_TIM_IC_ConfigChannel+0x384>)
 8012724:	f7f3 f8fe 	bl	8005924 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 8012728:	682b      	ldr	r3, [r5, #0]
 801272a:	e7cc      	b.n	80126c6 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801272c:	f241 015a 	movw	r1, #4186	; 0x105a
 8012730:	4805      	ldr	r0, [pc, #20]	; (8012748 <HAL_TIM_IC_ConfigChannel+0x384>)
 8012732:	f7f3 f8f7 	bl	8005924 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 8012736:	682a      	ldr	r2, [r5, #0]
 8012738:	e721      	b.n	801257e <HAL_TIM_IC_ConfigChannel+0x1ba>
 801273a:	bf00      	nop
 801273c:	40010000 	.word	0x40010000
 8012740:	40000400 	.word	0x40000400
 8012744:	40010400 	.word	0x40010400
 8012748:	0802e580 	.word	0x0802e580

0801274c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 801274c:	4b2b      	ldr	r3, [pc, #172]	; (80127fc <TIM_CCxChannelCmd+0xb0>)
 801274e:	4298      	cmp	r0, r3
{
 8012750:	b530      	push	{r4, r5, lr}
 8012752:	4604      	mov	r4, r0
 8012754:	b083      	sub	sp, #12
 8012756:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8012758:	d031      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 801275a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801275e:	d02e      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012760:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8012764:	4298      	cmp	r0, r3
 8012766:	d02a      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801276c:	4298      	cmp	r0, r3
 801276e:	d026      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012774:	4298      	cmp	r0, r3
 8012776:	d022      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012778:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 801277c:	4298      	cmp	r0, r3
 801277e:	d01e      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012780:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8012784:	4298      	cmp	r0, r3
 8012786:	d01a      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801278c:	4298      	cmp	r0, r3
 801278e:	d016      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012794:	4298      	cmp	r0, r3
 8012796:	d012      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 8012798:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 801279c:	4298      	cmp	r0, r3
 801279e:	d00e      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 80127a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127a4:	4298      	cmp	r0, r3
 80127a6:	d00a      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 80127a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127ac:	4298      	cmp	r0, r3
 80127ae:	d006      	beq.n	80127be <TIM_CCxChannelCmd+0x72>
 80127b0:	f641 6199 	movw	r1, #7833	; 0x1e99
 80127b4:	4812      	ldr	r0, [pc, #72]	; (8012800 <TIM_CCxChannelCmd+0xb4>)
 80127b6:	9201      	str	r2, [sp, #4]
 80127b8:	f7f3 f8b4 	bl	8005924 <assert_failed>
 80127bc:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 80127be:	2d14      	cmp	r5, #20
 80127c0:	d90f      	bls.n	80127e2 <TIM_CCxChannelCmd+0x96>
 80127c2:	2d3c      	cmp	r5, #60	; 0x3c
 80127c4:	d111      	bne.n	80127ea <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127c6:	f005 051f 	and.w	r5, r5, #31
 80127ca:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80127cc:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80127ce:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127d0:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80127d2:	ea23 0301 	bic.w	r3, r3, r1
 80127d6:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80127d8:	6a25      	ldr	r5, [r4, #32]
 80127da:	4315      	orrs	r5, r2
 80127dc:	6225      	str	r5, [r4, #32]
}
 80127de:	b003      	add	sp, #12
 80127e0:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80127e2:	4b08      	ldr	r3, [pc, #32]	; (8012804 <TIM_CCxChannelCmd+0xb8>)
 80127e4:	40eb      	lsrs	r3, r5
 80127e6:	07db      	lsls	r3, r3, #31
 80127e8:	d4ed      	bmi.n	80127c6 <TIM_CCxChannelCmd+0x7a>
 80127ea:	f641 619a 	movw	r1, #7834	; 0x1e9a
 80127ee:	4804      	ldr	r0, [pc, #16]	; (8012800 <TIM_CCxChannelCmd+0xb4>)
 80127f0:	9201      	str	r2, [sp, #4]
 80127f2:	f7f3 f897 	bl	8005924 <assert_failed>
 80127f6:	9a01      	ldr	r2, [sp, #4]
 80127f8:	e7e5      	b.n	80127c6 <TIM_CCxChannelCmd+0x7a>
 80127fa:	bf00      	nop
 80127fc:	40010000 	.word	0x40010000
 8012800:	0802e580 	.word	0x0802e580
 8012804:	00111111 	.word	0x00111111

08012808 <HAL_TIM_IC_Start_DMA>:
{
 8012808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801280c:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801280e:	460d      	mov	r5, r1
{
 8012810:	4617      	mov	r7, r2
 8012812:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012814:	2900      	cmp	r1, #0
 8012816:	f040 8087 	bne.w	8012928 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801281a:	6803      	ldr	r3, [r0, #0]
 801281c:	4aa4      	ldr	r2, [pc, #656]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801281e:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012822:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012824:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012828:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801282a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801282e:	d037      	beq.n	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012834:	d034      	beq.n	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012836:	4a9f      	ldr	r2, [pc, #636]	; (8012ab4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d031      	beq.n	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 801283c:	4a9e      	ldr	r2, [pc, #632]	; (8012ab8 <HAL_TIM_IC_Start_DMA+0x2b0>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d066      	beq.n	8012910 <HAL_TIM_IC_Start_DMA+0x108>
 8012842:	4a9e      	ldr	r2, [pc, #632]	; (8012abc <HAL_TIM_IC_Start_DMA+0x2b4>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d063      	beq.n	8012910 <HAL_TIM_IC_Start_DMA+0x108>
 8012848:	4a9d      	ldr	r2, [pc, #628]	; (8012ac0 <HAL_TIM_IC_Start_DMA+0x2b8>)
 801284a:	4293      	cmp	r3, r2
 801284c:	f040 80f7 	bne.w	8012a3e <HAL_TIM_IC_Start_DMA+0x236>
 8012850:	2d14      	cmp	r5, #20
 8012852:	d862      	bhi.n	801291a <HAL_TIM_IC_Start_DMA+0x112>
 8012854:	4a9b      	ldr	r2, [pc, #620]	; (8012ac4 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8012856:	40ea      	lsrs	r2, r5
 8012858:	07d2      	lsls	r2, r2, #31
 801285a:	d55e      	bpl.n	801291a <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801285c:	4994      	ldr	r1, [pc, #592]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 801285e:	4a95      	ldr	r2, [pc, #596]	; (8012ab4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8012860:	428b      	cmp	r3, r1
 8012862:	bf18      	it	ne
 8012864:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8012868:	bf14      	ite	ne
 801286a:	2101      	movne	r1, #1
 801286c:	2100      	moveq	r1, #0
 801286e:	4293      	cmp	r3, r2
 8012870:	bf0c      	ite	eq
 8012872:	2100      	moveq	r1, #0
 8012874:	f001 0101 	andne.w	r1, r1, #1
 8012878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801287c:	4293      	cmp	r3, r2
 801287e:	bf0c      	ite	eq
 8012880:	2100      	moveq	r1, #0
 8012882:	f001 0101 	andne.w	r1, r1, #1
 8012886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801288a:	4293      	cmp	r3, r2
 801288c:	bf0c      	ite	eq
 801288e:	2100      	moveq	r1, #0
 8012890:	f001 0101 	andne.w	r1, r1, #1
 8012894:	b121      	cbz	r1, 80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012896:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801289a:	4293      	cmp	r3, r2
 801289c:	f040 80c5 	bne.w	8012a2a <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80128a0:	2e02      	cmp	r6, #2
 80128a2:	d06a      	beq.n	801297a <HAL_TIM_IC_Start_DMA+0x172>
 80128a4:	f1b9 0f02 	cmp.w	r9, #2
 80128a8:	d067      	beq.n	801297a <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80128aa:	2e01      	cmp	r6, #1
 80128ac:	d106      	bne.n	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
 80128ae:	f1b9 0f01 	cmp.w	r9, #1
 80128b2:	d103      	bne.n	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 80128b4:	b92f      	cbnz	r7, 80128c2 <HAL_TIM_IC_Start_DMA+0xba>
 80128b6:	f1b8 0f00 	cmp.w	r8, #0
 80128ba:	d002      	beq.n	80128c2 <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 80128bc:	2001      	movs	r0, #1
}
 80128be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128c2:	2302      	movs	r3, #2
 80128c4:	2d00      	cmp	r5, #0
 80128c6:	d05b      	beq.n	8012980 <HAL_TIM_IC_Start_DMA+0x178>
 80128c8:	2d04      	cmp	r5, #4
 80128ca:	f000 8119 	beq.w	8012b00 <HAL_TIM_IC_Start_DMA+0x2f8>
 80128ce:	2d08      	cmp	r5, #8
 80128d0:	f000 8141 	beq.w	8012b56 <HAL_TIM_IC_Start_DMA+0x34e>
 80128d4:	2d0c      	cmp	r5, #12
 80128d6:	f000 815d 	beq.w	8012b94 <HAL_TIM_IC_Start_DMA+0x38c>
 80128da:	2d10      	cmp	r5, #16
 80128dc:	f000 812f 	beq.w	8012b3e <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128e0:	4629      	mov	r1, r5
  switch (Channel)
 80128e2:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128e8:	2201      	movs	r2, #1
 80128ea:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128ec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128f0:	f7ff ff2c 	bl	801274c <TIM_CCxChannelCmd>
  switch (Channel)
 80128f4:	2d08      	cmp	r5, #8
 80128f6:	f200 812b 	bhi.w	8012b50 <HAL_TIM_IC_Start_DMA+0x348>
 80128fa:	e8df f015 	tbh	[pc, r5, lsl #1]
 80128fe:	010a      	.short	0x010a
 8012900:	01290129 	.word	0x01290129
 8012904:	01350129 	.word	0x01350129
 8012908:	01290129 	.word	0x01290129
 801290c:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012910:	f035 0204 	bics.w	r2, r5, #4
 8012914:	d0a2      	beq.n	801285c <HAL_TIM_IC_Start_DMA+0x54>
 8012916:	2a08      	cmp	r2, #8
 8012918:	d0a0      	beq.n	801285c <HAL_TIM_IC_Start_DMA+0x54>
 801291a:	f640 114a 	movw	r1, #2378	; 0x94a
 801291e:	486a      	ldr	r0, [pc, #424]	; (8012ac8 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8012920:	f7f3 f800 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	e799      	b.n	801285c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012928:	2904      	cmp	r1, #4
 801292a:	f000 8090 	beq.w	8012a4e <HAL_TIM_IC_Start_DMA+0x246>
 801292e:	2908      	cmp	r1, #8
 8012930:	f000 80e0 	beq.w	8012af4 <HAL_TIM_IC_Start_DMA+0x2ec>
 8012934:	290c      	cmp	r1, #12
 8012936:	d07e      	beq.n	8012a36 <HAL_TIM_IC_Start_DMA+0x22e>
 8012938:	2910      	cmp	r1, #16
 801293a:	f000 814a 	beq.w	8012bd2 <HAL_TIM_IC_Start_DMA+0x3ca>
 801293e:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 8012942:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	4a5a      	ldr	r2, [pc, #360]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012948:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801294c:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801294e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012952:	f000 8098 	beq.w	8012a86 <HAL_TIM_IC_Start_DMA+0x27e>
 8012956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801295a:	f000 8088 	beq.w	8012a6e <HAL_TIM_IC_Start_DMA+0x266>
 801295e:	4a55      	ldr	r2, [pc, #340]	; (8012ab4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8012960:	4293      	cmp	r3, r2
 8012962:	f47f af6b 	bne.w	801283c <HAL_TIM_IC_Start_DMA+0x34>
 8012966:	f035 020c 	bics.w	r2, r5, #12
 801296a:	d099      	beq.n	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 801296c:	4a57      	ldr	r2, [pc, #348]	; (8012acc <HAL_TIM_IC_Start_DMA+0x2c4>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d1d3      	bne.n	801291a <HAL_TIM_IC_Start_DMA+0x112>
 8012972:	2d00      	cmp	r5, #0
 8012974:	f43f af72 	beq.w	801285c <HAL_TIM_IC_Start_DMA+0x54>
 8012978:	e7cf      	b.n	801291a <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 801297a:	2002      	movs	r0, #2
}
 801297c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012984:	4629      	mov	r1, r5
 8012986:	2201      	movs	r2, #1
 8012988:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801298a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801298e:	f7ff fedd 	bl	801274c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8012992:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012994:	494e      	ldr	r1, [pc, #312]	; (8012ad0 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8012996:	4643      	mov	r3, r8
 8012998:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801299a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801299c:	494d      	ldr	r1, [pc, #308]	; (8012ad4 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801299e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80129a0:	494d      	ldr	r1, [pc, #308]	; (8012ad8 <HAL_TIM_IC_Start_DMA+0x2d0>)
 80129a2:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80129a4:	6821      	ldr	r1, [r4, #0]
 80129a6:	3134      	adds	r1, #52	; 0x34
 80129a8:	f7f7 feb8 	bl	800a71c <HAL_DMA_Start_IT>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d185      	bne.n	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80129b0:	6822      	ldr	r2, [r4, #0]
 80129b2:	68d3      	ldr	r3, [r2, #12]
 80129b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80129b8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80129ba:	4b3d      	ldr	r3, [pc, #244]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80129bc:	4c3d      	ldr	r4, [pc, #244]	; (8012ab4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80129be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80129c2:	bf18      	it	ne
 80129c4:	429a      	cmpne	r2, r3
 80129c6:	493c      	ldr	r1, [pc, #240]	; (8012ab8 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80129c8:	bf0c      	ite	eq
 80129ca:	2301      	moveq	r3, #1
 80129cc:	2300      	movne	r3, #0
 80129ce:	42a2      	cmp	r2, r4
 80129d0:	bf08      	it	eq
 80129d2:	f043 0301 	orreq.w	r3, r3, #1
 80129d6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80129da:	428a      	cmp	r2, r1
 80129dc:	bf08      	it	eq
 80129de:	f043 0301 	orreq.w	r3, r3, #1
 80129e2:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80129e6:	42a2      	cmp	r2, r4
 80129e8:	bf08      	it	eq
 80129ea:	f043 0301 	orreq.w	r3, r3, #1
 80129ee:	428a      	cmp	r2, r1
 80129f0:	bf08      	it	eq
 80129f2:	f043 0301 	orreq.w	r3, r3, #1
 80129f6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80129fa:	428a      	cmp	r2, r1
 80129fc:	bf08      	it	eq
 80129fe:	f043 0301 	orreq.w	r3, r3, #1
 8012a02:	b913      	cbnz	r3, 8012a0a <HAL_TIM_IC_Start_DMA+0x202>
 8012a04:	4b35      	ldr	r3, [pc, #212]	; (8012adc <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d109      	bne.n	8012a1e <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a0a:	6891      	ldr	r1, [r2, #8]
 8012a0c:	4b34      	ldr	r3, [pc, #208]	; (8012ae0 <HAL_TIM_IC_Start_DMA+0x2d8>)
 8012a0e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a10:	2b06      	cmp	r3, #6
 8012a12:	f43f af54 	beq.w	80128be <HAL_TIM_IC_Start_DMA+0xb6>
 8012a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a1a:	f43f af50 	beq.w	80128be <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 8012a1e:	6813      	ldr	r3, [r2, #0]
 8012a20:	f043 0301 	orr.w	r3, r3, #1
 8012a24:	6013      	str	r3, [r2, #0]
}
 8012a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012a2a:	f640 114b 	movw	r1, #2379	; 0x94b
 8012a2e:	4826      	ldr	r0, [pc, #152]	; (8012ac8 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8012a30:	f7f2 ff78 	bl	8005924 <assert_failed>
 8012a34:	e734      	b.n	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a36:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 8012a3a:	b2f6      	uxtb	r6, r6
 8012a3c:	e782      	b.n	8012944 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a3e:	4a29      	ldr	r2, [pc, #164]	; (8012ae4 <HAL_TIM_IC_Start_DMA+0x2dc>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d128      	bne.n	8012a96 <HAL_TIM_IC_Start_DMA+0x28e>
 8012a44:	f035 0204 	bics.w	r2, r5, #4
 8012a48:	f47f af67 	bne.w	801291a <HAL_TIM_IC_Start_DMA+0x112>
 8012a4c:	e706      	b.n	801285c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a4e:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a52:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012a56:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a58:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012a5a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012a5e:	4a14      	ldr	r2, [pc, #80]	; (8012ab0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	f43f af1d 	beq.w	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a6a:	f47f af78 	bne.w	801295e <HAL_TIM_IC_Start_DMA+0x156>
 8012a6e:	f035 020c 	bics.w	r2, r5, #12
 8012a72:	f43f af15 	beq.w	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012a76:	4a1c      	ldr	r2, [pc, #112]	; (8012ae8 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	f47f af77 	bne.w	801296c <HAL_TIM_IC_Start_DMA+0x164>
 8012a7e:	2d00      	cmp	r5, #0
 8012a80:	f43f aeec 	beq.w	801285c <HAL_TIM_IC_Start_DMA+0x54>
 8012a84:	e749      	b.n	801291a <HAL_TIM_IC_Start_DMA+0x112>
 8012a86:	f025 0204 	bic.w	r2, r5, #4
 8012a8a:	2a08      	cmp	r2, #8
 8012a8c:	f43f af08 	beq.w	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012a90:	2a10      	cmp	r2, #16
 8012a92:	f43f af05 	beq.w	80128a0 <HAL_TIM_IC_Start_DMA+0x98>
 8012a96:	4a15      	ldr	r2, [pc, #84]	; (8012aec <HAL_TIM_IC_Start_DMA+0x2e4>)
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	f43f af6a 	beq.w	8012972 <HAL_TIM_IC_Start_DMA+0x16a>
 8012a9e:	4a14      	ldr	r2, [pc, #80]	; (8012af0 <HAL_TIM_IC_Start_DMA+0x2e8>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	f43f af66 	beq.w	8012972 <HAL_TIM_IC_Start_DMA+0x16a>
 8012aa6:	4a0d      	ldr	r2, [pc, #52]	; (8012adc <HAL_TIM_IC_Start_DMA+0x2d4>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d0cb      	beq.n	8012a44 <HAL_TIM_IC_Start_DMA+0x23c>
 8012aac:	e7e3      	b.n	8012a76 <HAL_TIM_IC_Start_DMA+0x26e>
 8012aae:	bf00      	nop
 8012ab0:	40010000 	.word	0x40010000
 8012ab4:	40000400 	.word	0x40000400
 8012ab8:	40000800 	.word	0x40000800
 8012abc:	40000c00 	.word	0x40000c00
 8012ac0:	40010400 	.word	0x40010400
 8012ac4:	00111111 	.word	0x00111111
 8012ac8:	0802e580 	.word	0x0802e580
 8012acc:	40002000 	.word	0x40002000
 8012ad0:	08011139 	.word	0x08011139
 8012ad4:	080111d1 	.word	0x080111d1
 8012ad8:	080113b5 	.word	0x080113b5
 8012adc:	40001800 	.word	0x40001800
 8012ae0:	00010007 	.word	0x00010007
 8012ae4:	40014000 	.word	0x40014000
 8012ae8:	40001c00 	.word	0x40001c00
 8012aec:	40014400 	.word	0x40014400
 8012af0:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012af4:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012af8:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012afc:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012afe:	e7ab      	b.n	8012a58 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b00:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b04:	4629      	mov	r1, r5
 8012b06:	2201      	movs	r2, #1
 8012b08:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b0e:	f7ff fe1d 	bl	801274c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012b14:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b16:	4931      	ldr	r1, [pc, #196]	; (8012bdc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012b18:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b1a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b1c:	4930      	ldr	r1, [pc, #192]	; (8012be0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b1e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012b20:	4930      	ldr	r1, [pc, #192]	; (8012be4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b22:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8012b24:	6821      	ldr	r1, [r4, #0]
 8012b26:	3138      	adds	r1, #56	; 0x38
 8012b28:	f7f7 fdf8 	bl	800a71c <HAL_DMA_Start_IT>
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	f47f aec5 	bne.w	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012b32:	6822      	ldr	r2, [r4, #0]
 8012b34:	68d3      	ldr	r3, [r2, #12]
 8012b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012b3a:	60d3      	str	r3, [r2, #12]
      break;
 8012b3c:	e73d      	b.n	80129ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b42:	2201      	movs	r2, #1
 8012b44:	4629      	mov	r1, r5
 8012b46:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b48:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b4c:	f7ff fdfe 	bl	801274c <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b50:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 8012b52:	2001      	movs	r0, #1
 8012b54:	e731      	b.n	80129ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b5a:	4629      	mov	r1, r5
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b64:	f7ff fdf2 	bl	801274c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b6a:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b6c:	491b      	ldr	r1, [pc, #108]	; (8012bdc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b6e:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8012b70:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012b72:	491b      	ldr	r1, [pc, #108]	; (8012be0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012b74:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012b76:	491b      	ldr	r1, [pc, #108]	; (8012be4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012b78:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8012b7a:	6821      	ldr	r1, [r4, #0]
 8012b7c:	313c      	adds	r1, #60	; 0x3c
 8012b7e:	f7f7 fdcd 	bl	800a71c <HAL_DMA_Start_IT>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	f47f ae9a 	bne.w	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012b88:	6822      	ldr	r2, [r4, #0]
 8012b8a:	68d3      	ldr	r3, [r2, #12]
 8012b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012b90:	60d3      	str	r3, [r2, #12]
      break;
 8012b92:	e712      	b.n	80129ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012b98:	4629      	mov	r1, r5
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b9e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ba2:	f7ff fdd3 	bl	801274c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012ba6:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012ba8:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012baa:	490c      	ldr	r1, [pc, #48]	; (8012bdc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012bac:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8012bae:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8012bb0:	490b      	ldr	r1, [pc, #44]	; (8012be0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8012bb2:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012bb4:	490b      	ldr	r1, [pc, #44]	; (8012be4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8012bb6:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8012bb8:	6821      	ldr	r1, [r4, #0]
 8012bba:	3140      	adds	r1, #64	; 0x40
 8012bbc:	f7f7 fdae 	bl	800a71c <HAL_DMA_Start_IT>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f47f ae7b 	bne.w	80128bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012bc6:	6822      	ldr	r2, [r4, #0]
 8012bc8:	68d3      	ldr	r3, [r2, #12]
 8012bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012bce:	60d3      	str	r3, [r2, #12]
      break;
 8012bd0:	e6f3      	b.n	80129ba <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012bd2:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8012bd6:	b2f6      	uxtb	r6, r6
 8012bd8:	e6b4      	b.n	8012944 <HAL_TIM_IC_Start_DMA+0x13c>
 8012bda:	bf00      	nop
 8012bdc:	08011139 	.word	0x08011139
 8012be0:	080111d1 	.word	0x080111d1
 8012be4:	080113b5 	.word	0x080113b5

08012be8 <HAL_TIM_IC_Stop_DMA>:
{
 8012be8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bea:	4b82      	ldr	r3, [pc, #520]	; (8012df4 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8012bec:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bee:	6800      	ldr	r0, [r0, #0]
{
 8012bf0:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012bf2:	4298      	cmp	r0, r3
 8012bf4:	f000 80cc 	beq.w	8012d90 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012bfc:	d056      	beq.n	8012cac <HAL_TIM_IC_Stop_DMA+0xc4>
 8012bfe:	4b7e      	ldr	r3, [pc, #504]	; (8012df8 <HAL_TIM_IC_Stop_DMA+0x210>)
 8012c00:	4298      	cmp	r0, r3
 8012c02:	d053      	beq.n	8012cac <HAL_TIM_IC_Stop_DMA+0xc4>
 8012c04:	4b7d      	ldr	r3, [pc, #500]	; (8012dfc <HAL_TIM_IC_Stop_DMA+0x214>)
 8012c06:	4298      	cmp	r0, r3
 8012c08:	d050      	beq.n	8012cac <HAL_TIM_IC_Stop_DMA+0xc4>
 8012c0a:	4b7d      	ldr	r3, [pc, #500]	; (8012e00 <HAL_TIM_IC_Stop_DMA+0x218>)
 8012c0c:	4298      	cmp	r0, r3
 8012c0e:	d04d      	beq.n	8012cac <HAL_TIM_IC_Stop_DMA+0xc4>
 8012c10:	4b7c      	ldr	r3, [pc, #496]	; (8012e04 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012c12:	4298      	cmp	r0, r3
 8012c14:	f000 80bc 	beq.w	8012d90 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8012c18:	4b7b      	ldr	r3, [pc, #492]	; (8012e08 <HAL_TIM_IC_Stop_DMA+0x220>)
 8012c1a:	4298      	cmp	r0, r3
 8012c1c:	d00c      	beq.n	8012c38 <HAL_TIM_IC_Stop_DMA+0x50>
 8012c1e:	4b7b      	ldr	r3, [pc, #492]	; (8012e0c <HAL_TIM_IC_Stop_DMA+0x224>)
 8012c20:	4298      	cmp	r0, r3
 8012c22:	f000 80d9 	beq.w	8012dd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012c26:	4b7a      	ldr	r3, [pc, #488]	; (8012e10 <HAL_TIM_IC_Stop_DMA+0x228>)
 8012c28:	4298      	cmp	r0, r3
 8012c2a:	f000 80d5 	beq.w	8012dd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012c2e:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012c32:	4298      	cmp	r0, r3
 8012c34:	f040 80c9 	bne.w	8012dca <HAL_TIM_IC_Stop_DMA+0x1e2>
 8012c38:	f035 0304 	bics.w	r3, r5, #4
 8012c3c:	f000 80cf 	beq.w	8012dde <HAL_TIM_IC_Stop_DMA+0x1f6>
 8012c40:	4874      	ldr	r0, [pc, #464]	; (8012e14 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012c42:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8012c46:	f7f2 fe6d 	bl	8005924 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012c4a:	6820      	ldr	r0, [r4, #0]
 8012c4c:	4b69      	ldr	r3, [pc, #420]	; (8012df4 <HAL_TIM_IC_Stop_DMA+0x20c>)
 8012c4e:	4a6a      	ldr	r2, [pc, #424]	; (8012df8 <HAL_TIM_IC_Stop_DMA+0x210>)
 8012c50:	4298      	cmp	r0, r3
 8012c52:	bf18      	it	ne
 8012c54:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8012c58:	bf14      	ite	ne
 8012c5a:	2301      	movne	r3, #1
 8012c5c:	2300      	moveq	r3, #0
 8012c5e:	4290      	cmp	r0, r2
 8012c60:	bf0c      	ite	eq
 8012c62:	2300      	moveq	r3, #0
 8012c64:	f003 0301 	andne.w	r3, r3, #1
 8012c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c6c:	4290      	cmp	r0, r2
 8012c6e:	bf0c      	ite	eq
 8012c70:	2300      	moveq	r3, #0
 8012c72:	f003 0301 	andne.w	r3, r3, #1
 8012c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012c7a:	4290      	cmp	r0, r2
 8012c7c:	bf0c      	ite	eq
 8012c7e:	2300      	moveq	r3, #0
 8012c80:	f003 0301 	andne.w	r3, r3, #1
 8012c84:	b11b      	cbz	r3, 8012c8e <HAL_TIM_IC_Stop_DMA+0xa6>
 8012c86:	4b5f      	ldr	r3, [pc, #380]	; (8012e04 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8012c88:	4298      	cmp	r0, r3
 8012c8a:	f040 80a8 	bne.w	8012dde <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012c8e:	2200      	movs	r2, #0
 8012c90:	4629      	mov	r1, r5
 8012c92:	f7ff fd5b 	bl	801274c <TIM_CCxChannelCmd>
  switch (Channel)
 8012c96:	2d0c      	cmp	r5, #12
 8012c98:	d80c      	bhi.n	8012cb4 <HAL_TIM_IC_Stop_DMA+0xcc>
 8012c9a:	e8df f005 	tbb	[pc, r5]
 8012c9e:	0b0d      	.short	0x0b0d
 8012ca0:	0b640b0b 	.word	0x0b640b0b
 8012ca4:	0b4a0b0b 	.word	0x0b4a0b0b
 8012ca8:	0b0b      	.short	0x0b0b
 8012caa:	22          	.byte	0x22
 8012cab:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012cac:	f035 030c 	bics.w	r3, r5, #12
 8012cb0:	d1c6      	bne.n	8012c40 <HAL_TIM_IC_Stop_DMA+0x58>
 8012cb2:	e7ec      	b.n	8012c8e <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8012cb4:	2001      	movs	r0, #1
}
 8012cb6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012cb8:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012cba:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012cbc:	68d3      	ldr	r3, [r2, #12]
 8012cbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012cc2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012cc4:	f7f7 fdce 	bl	800a864 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cc8:	6823      	ldr	r3, [r4, #0]
 8012cca:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cce:	6a19      	ldr	r1, [r3, #32]
 8012cd0:	4211      	tst	r1, r2
 8012cd2:	d06c      	beq.n	8012dae <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012ce2:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012ce4:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012ce6:	68d3      	ldr	r3, [r2, #12]
 8012ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cec:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012cee:	f7f7 fdb9 	bl	800a864 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	f241 1211 	movw	r2, #4369	; 0x1111
 8012cf8:	6a19      	ldr	r1, [r3, #32]
 8012cfa:	4211      	tst	r1, r2
 8012cfc:	d161      	bne.n	8012dc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012cfe:	6a19      	ldr	r1, [r3, #32]
 8012d00:	f240 4244 	movw	r2, #1092	; 0x444
 8012d04:	4211      	tst	r1, r2
 8012d06:	d15c      	bne.n	8012dc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012d08:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d0a:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8012d0c:	f022 0201 	bic.w	r2, r2, #1
 8012d10:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d12:	d036      	beq.n	8012d82 <HAL_TIM_IC_Stop_DMA+0x19a>
 8012d14:	2d08      	cmp	r5, #8
 8012d16:	d01f      	beq.n	8012d58 <HAL_TIM_IC_Stop_DMA+0x170>
 8012d18:	2d0c      	cmp	r5, #12
 8012d1a:	d052      	beq.n	8012dc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8012d1c:	2d10      	cmp	r5, #16
 8012d1e:	f04f 0301 	mov.w	r3, #1
 8012d22:	d063      	beq.n	8012dec <HAL_TIM_IC_Stop_DMA+0x204>
 8012d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d28:	2301      	movs	r3, #1
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012d32:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012d34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012d36:	68d3      	ldr	r3, [r2, #12]
 8012d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d3c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012d3e:	f7f7 fd91 	bl	800a864 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012d42:	6823      	ldr	r3, [r4, #0]
 8012d44:	f241 1211 	movw	r2, #4369	; 0x1111
 8012d48:	6a19      	ldr	r1, [r3, #32]
 8012d4a:	4211      	tst	r1, r2
 8012d4c:	d104      	bne.n	8012d58 <HAL_TIM_IC_Stop_DMA+0x170>
 8012d4e:	6a19      	ldr	r1, [r3, #32]
 8012d50:	f240 4244 	movw	r2, #1092	; 0x444
 8012d54:	4211      	tst	r1, r2
 8012d56:	d0d7      	beq.n	8012d08 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d58:	2301      	movs	r3, #1
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8012d64:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012d66:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012d68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012d6a:	68d3      	ldr	r3, [r2, #12]
 8012d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012d70:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012d72:	f7f7 fd77 	bl	800a864 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	f241 1211 	movw	r2, #4369	; 0x1111
 8012d7c:	6a19      	ldr	r1, [r3, #32]
 8012d7e:	4211      	tst	r1, r2
 8012d80:	d00f      	beq.n	8012da2 <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d82:	2301      	movs	r3, #1
 8012d84:	2000      	movs	r0, #0
 8012d86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012d90:	2d14      	cmp	r5, #20
 8012d92:	f63f af55 	bhi.w	8012c40 <HAL_TIM_IC_Stop_DMA+0x58>
 8012d96:	4b20      	ldr	r3, [pc, #128]	; (8012e18 <HAL_TIM_IC_Stop_DMA+0x230>)
 8012d98:	40eb      	lsrs	r3, r5
 8012d9a:	07db      	lsls	r3, r3, #31
 8012d9c:	f53f af77 	bmi.w	8012c8e <HAL_TIM_IC_Stop_DMA+0xa6>
 8012da0:	e74e      	b.n	8012c40 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8012da2:	6a19      	ldr	r1, [r3, #32]
 8012da4:	f240 4244 	movw	r2, #1092	; 0x444
 8012da8:	4211      	tst	r1, r2
 8012daa:	d0ad      	beq.n	8012d08 <HAL_TIM_IC_Stop_DMA+0x120>
 8012dac:	e7e9      	b.n	8012d82 <HAL_TIM_IC_Stop_DMA+0x19a>
 8012dae:	6a19      	ldr	r1, [r3, #32]
 8012db0:	f240 4244 	movw	r2, #1092	; 0x444
 8012db4:	4211      	tst	r1, r2
 8012db6:	d18d      	bne.n	8012cd4 <HAL_TIM_IC_Stop_DMA+0xec>
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	f022 0201 	bic.w	r2, r2, #1
 8012dbe:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012dc0:	e788      	b.n	8012cd4 <HAL_TIM_IC_Stop_DMA+0xec>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012dc8:	e7ae      	b.n	8012d28 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8012dca:	4b14      	ldr	r3, [pc, #80]	; (8012e1c <HAL_TIM_IC_Stop_DMA+0x234>)
 8012dcc:	4298      	cmp	r0, r3
 8012dce:	d003      	beq.n	8012dd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8012dd0:	4b13      	ldr	r3, [pc, #76]	; (8012e20 <HAL_TIM_IC_Stop_DMA+0x238>)
 8012dd2:	4298      	cmp	r0, r3
 8012dd4:	f47f af34 	bne.w	8012c40 <HAL_TIM_IC_Stop_DMA+0x58>
 8012dd8:	2d00      	cmp	r5, #0
 8012dda:	f47f af31 	bne.w	8012c40 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8012dde:	480d      	ldr	r0, [pc, #52]	; (8012e14 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8012de0:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8012de4:	f7f2 fd9e 	bl	8005924 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012de8:	6820      	ldr	r0, [r4, #0]
 8012dea:	e750      	b.n	8012c8e <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012df0:	e79a      	b.n	8012d28 <HAL_TIM_IC_Stop_DMA+0x140>
 8012df2:	bf00      	nop
 8012df4:	40010000 	.word	0x40010000
 8012df8:	40000400 	.word	0x40000400
 8012dfc:	40000800 	.word	0x40000800
 8012e00:	40000c00 	.word	0x40000c00
 8012e04:	40010400 	.word	0x40010400
 8012e08:	40014000 	.word	0x40014000
 8012e0c:	40014400 	.word	0x40014400
 8012e10:	40014800 	.word	0x40014800
 8012e14:	0802e580 	.word	0x0802e580
 8012e18:	00111111 	.word	0x00111111
 8012e1c:	40001c00 	.word	0x40001c00
 8012e20:	40002000 	.word	0x40002000

08012e24 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e24:	6802      	ldr	r2, [r0, #0]
{
 8012e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e2a:	4b6d      	ldr	r3, [pc, #436]	; (8012fe0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8012e2c:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e2e:	4f6d      	ldr	r7, [pc, #436]	; (8012fe4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8012e30:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012e32:	429a      	cmp	r2, r3
 8012e34:	bf18      	it	ne
 8012e36:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8012e3a:	4e6b      	ldr	r6, [pc, #428]	; (8012fe8 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8012e3c:	496b      	ldr	r1, [pc, #428]	; (8012fec <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8012e3e:	bf14      	ite	ne
 8012e40:	2301      	movne	r3, #1
 8012e42:	2300      	moveq	r3, #0
 8012e44:	42ba      	cmp	r2, r7
 8012e46:	bf0c      	ite	eq
 8012e48:	2300      	moveq	r3, #0
 8012e4a:	f003 0301 	andne.w	r3, r3, #1
 8012e4e:	42b2      	cmp	r2, r6
 8012e50:	bf0c      	ite	eq
 8012e52:	2300      	moveq	r3, #0
 8012e54:	f003 0301 	andne.w	r3, r3, #1
 8012e58:	428a      	cmp	r2, r1
 8012e5a:	bf0c      	ite	eq
 8012e5c:	2300      	moveq	r3, #0
 8012e5e:	f003 0301 	andne.w	r3, r3, #1
 8012e62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e66:	428a      	cmp	r2, r1
 8012e68:	bf0c      	ite	eq
 8012e6a:	2300      	moveq	r3, #0
 8012e6c:	f003 0301 	andne.w	r3, r3, #1
 8012e70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012e74:	428a      	cmp	r2, r1
 8012e76:	bf0c      	ite	eq
 8012e78:	2300      	moveq	r3, #0
 8012e7a:	f003 0301 	andne.w	r3, r3, #1
 8012e7e:	b11b      	cbz	r3, 8012e88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8012e80:	4b5b      	ldr	r3, [pc, #364]	; (8012ff0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8012e82:	429a      	cmp	r2, r3
 8012e84:	f040 808c 	bne.w	8012fa0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012e88:	682b      	ldr	r3, [r5, #0]
 8012e8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8012e8e:	2b40      	cmp	r3, #64	; 0x40
 8012e90:	d002      	beq.n	8012e98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f040 808a 	bne.w	8012fac <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012e98:	68ab      	ldr	r3, [r5, #8]
 8012e9a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8012e9e:	d173      	bne.n	8012f88 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8012ea0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d078      	beq.n	8012f9a <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ea8:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8012eaa:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eac:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8012fe0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8012eb0:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eb2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8012ff0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8012eb6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012eba:	eba2 0009 	sub.w	r0, r2, r9
 8012ebe:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8012ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012ec6:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8012eca:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012ecc:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8012ed0:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012ed2:	0940      	lsrs	r0, r0, #5
 8012ed4:	0949      	lsrs	r1, r1, #5
 8012ed6:	ea50 0301 	orrs.w	r3, r0, r1
 8012eda:	d135      	bne.n	8012f48 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8012edc:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ede:	430b      	orrs	r3, r1
 8012ee0:	4940      	ldr	r1, [pc, #256]	; (8012fe4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ee2:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ee6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012eea:	bf08      	it	eq
 8012eec:	f043 0301 	orreq.w	r3, r3, #1
 8012ef0:	428a      	cmp	r2, r1
 8012ef2:	bf08      	it	eq
 8012ef4:	f043 0301 	orreq.w	r3, r3, #1
 8012ef8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012efc:	428a      	cmp	r2, r1
 8012efe:	bf08      	it	eq
 8012f00:	f043 0301 	orreq.w	r3, r3, #1
 8012f04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012f08:	428a      	cmp	r2, r1
 8012f0a:	bf08      	it	eq
 8012f0c:	f043 0301 	orreq.w	r3, r3, #1
 8012f10:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8012f14:	428a      	cmp	r2, r1
 8012f16:	bf08      	it	eq
 8012f18:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012f1c:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f1e:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012f20:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8012f22:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f24:	b913      	cbnz	r3, 8012f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012f26:	4b33      	ldr	r3, [pc, #204]	; (8012ff4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d104      	bne.n	8012f36 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012f2c:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012f2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012f32:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012f34:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8012f36:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8012f38:	2201      	movs	r2, #1

  return HAL_OK;
 8012f3a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8012f3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8012f40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8012f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012f48:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8012f4c:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8012f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012f54:	bf18      	it	ne
 8012f56:	2b00      	cmpne	r3, #0
 8012f58:	bf14      	ite	ne
 8012f5a:	f04f 0c01 	movne.w	ip, #1
 8012f5e:	f04f 0c00 	moveq.w	ip, #0
 8012f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f66:	bf0c      	ite	eq
 8012f68:	f04f 0c00 	moveq.w	ip, #0
 8012f6c:	f00c 0c01 	andne.w	ip, ip, #1
 8012f70:	f1bc 0f00 	cmp.w	ip, #0
 8012f74:	d002      	beq.n	8012f7c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012f76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012f7a:	d11d      	bne.n	8012fb8 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012f7c:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012f80:	4603      	mov	r3, r0
 8012f82:	ea47 070e 	orr.w	r7, r7, lr
 8012f86:	e7aa      	b.n	8012ede <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8012f88:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8012f8c:	481a      	ldr	r0, [pc, #104]	; (8012ff8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012f8e:	f7f2 fcc9 	bl	8005924 <assert_failed>
  __HAL_LOCK(htim);
 8012f92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d186      	bne.n	8012ea8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8012f9a:	2002      	movs	r0, #2
}
 8012f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012fa0:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8012fa4:	4814      	ldr	r0, [pc, #80]	; (8012ff8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012fa6:	f7f2 fcbd 	bl	8005924 <assert_failed>
 8012faa:	e76d      	b.n	8012e88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012fac:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8012fb0:	4811      	ldr	r0, [pc, #68]	; (8012ff8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012fb2:	f7f2 fcb7 	bl	8005924 <assert_failed>
 8012fb6:	e76f      	b.n	8012e98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8012fb8:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8012fbc:	480e      	ldr	r0, [pc, #56]	; (8012ff8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8012fbe:	f7f2 fcb1 	bl	8005924 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8012fc2:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012fc4:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012fc8:	eba2 0309 	sub.w	r3, r2, r9
 8012fcc:	eba2 0c08 	sub.w	ip, r2, r8
 8012fd0:	4258      	negs	r0, r3
 8012fd2:	4158      	adcs	r0, r3
 8012fd4:	f1dc 0100 	rsbs	r1, ip, #0
 8012fd8:	eb41 010c 	adc.w	r1, r1, ip
 8012fdc:	e7ce      	b.n	8012f7c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8012fde:	bf00      	nop
 8012fe0:	40010000 	.word	0x40010000
 8012fe4:	40000400 	.word	0x40000400
 8012fe8:	40000800 	.word	0x40000800
 8012fec:	40000c00 	.word	0x40000c00
 8012ff0:	40010400 	.word	0x40010400
 8012ff4:	40001800 	.word	0x40001800
 8012ff8:	0802e5b8 	.word	0x0802e5b8

08012ffc <HAL_TIMEx_CommutCallback>:
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop

08013000 <HAL_TIMEx_BreakCallback>:
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop

08013004 <HAL_TIMEx_Break2Callback>:
 8013004:	4770      	bx	lr
 8013006:	bf00      	nop

08013008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013008:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801300a:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801300e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013012:	e842 3100 	strex	r1, r3, [r2]
 8013016:	2900      	cmp	r1, #0
 8013018:	d1f7      	bne.n	801300a <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301a:	f102 0308 	add.w	r3, r2, #8
 801301e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013022:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013026:	f102 0c08 	add.w	ip, r2, #8
 801302a:	e84c 3100 	strex	r1, r3, [ip]
 801302e:	2900      	cmp	r1, #0
 8013030:	d1f3      	bne.n	801301a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013032:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013034:	2b01      	cmp	r3, #1
 8013036:	d005      	beq.n	8013044 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013038:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801303a:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801303c:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 801303e:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013040:	6603      	str	r3, [r0, #96]	; 0x60
}
 8013042:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013044:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013048:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801304c:	e842 3100 	strex	r1, r3, [r2]
 8013050:	2900      	cmp	r1, #0
 8013052:	d0f1      	beq.n	8013038 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013054:	e852 3f00 	ldrex	r3, [r2]
 8013058:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801305c:	e842 3100 	strex	r1, r3, [r2]
 8013060:	2900      	cmp	r1, #0
 8013062:	d1ef      	bne.n	8013044 <UART_EndRxTransfer+0x3c>
 8013064:	e7e8      	b.n	8013038 <UART_EndRxTransfer+0x30>
 8013066:	bf00      	nop

08013068 <HAL_UART_DeInit>:
  if (huart == NULL)
 8013068:	2800      	cmp	r0, #0
 801306a:	d046      	beq.n	80130fa <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 801306c:	6802      	ldr	r2, [r0, #0]
 801306e:	4927      	ldr	r1, [pc, #156]	; (801310c <HAL_UART_DeInit+0xa4>)
{
 8013070:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8013072:	4b27      	ldr	r3, [pc, #156]	; (8013110 <HAL_UART_DeInit+0xa8>)
 8013074:	4604      	mov	r4, r0
 8013076:	4827      	ldr	r0, [pc, #156]	; (8013114 <HAL_UART_DeInit+0xac>)
 8013078:	429a      	cmp	r2, r3
 801307a:	bf18      	it	ne
 801307c:	4282      	cmpne	r2, r0
 801307e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8013082:	bf14      	ite	ne
 8013084:	2301      	movne	r3, #1
 8013086:	2300      	moveq	r3, #0
 8013088:	428a      	cmp	r2, r1
 801308a:	bf0c      	ite	eq
 801308c:	2300      	moveq	r3, #0
 801308e:	f003 0301 	andne.w	r3, r3, #1
 8013092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013096:	4282      	cmp	r2, r0
 8013098:	bf0c      	ite	eq
 801309a:	2300      	moveq	r3, #0
 801309c:	f003 0301 	andne.w	r3, r3, #1
 80130a0:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80130a4:	428a      	cmp	r2, r1
 80130a6:	bf0c      	ite	eq
 80130a8:	2300      	moveq	r3, #0
 80130aa:	f003 0301 	andne.w	r3, r3, #1
 80130ae:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80130b2:	4282      	cmp	r2, r0
 80130b4:	bf0c      	ite	eq
 80130b6:	2300      	moveq	r3, #0
 80130b8:	f003 0301 	andne.w	r3, r3, #1
 80130bc:	428a      	cmp	r2, r1
 80130be:	bf0c      	ite	eq
 80130c0:	2300      	moveq	r3, #0
 80130c2:	f003 0301 	andne.w	r3, r3, #1
 80130c6:	b113      	cbz	r3, 80130ce <HAL_UART_DeInit+0x66>
 80130c8:	4b13      	ldr	r3, [pc, #76]	; (8013118 <HAL_UART_DeInit+0xb0>)
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d117      	bne.n	80130fe <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 80130ce:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 80130d0:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 80130d2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80130d4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80130d6:	6813      	ldr	r3, [r2, #0]
 80130d8:	f023 0301 	bic.w	r3, r3, #1
 80130dc:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 80130de:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 80130e0:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 80130e2:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 80130e4:	f7f5 f80a 	bl	80080fc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130e8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 80130ec:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 80130ee:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80130f0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80130f4:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130f6:	6625      	str	r5, [r4, #96]	; 0x60
}
 80130f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80130fa:	2001      	movs	r0, #1
}
 80130fc:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80130fe:	f240 2167 	movw	r1, #615	; 0x267
 8013102:	4806      	ldr	r0, [pc, #24]	; (801311c <HAL_UART_DeInit+0xb4>)
 8013104:	f7f2 fc0e 	bl	8005924 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8013108:	6822      	ldr	r2, [r4, #0]
 801310a:	e7e0      	b.n	80130ce <HAL_UART_DeInit+0x66>
 801310c:	40004800 	.word	0x40004800
 8013110:	40011000 	.word	0x40011000
 8013114:	40004400 	.word	0x40004400
 8013118:	40007c00 	.word	0x40007c00
 801311c:	0802e5f4 	.word	0x0802e5f4

08013120 <HAL_UART_Transmit_DMA>:
{
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8013122:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8013124:	2f20      	cmp	r7, #32
 8013126:	d141      	bne.n	80131ac <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8013128:	2900      	cmp	r1, #0
 801312a:	d03d      	beq.n	80131a8 <HAL_UART_Transmit_DMA+0x88>
 801312c:	fab2 f682 	clz	r6, r2
 8013130:	0976      	lsrs	r6, r6, #5
 8013132:	2a00      	cmp	r2, #0
 8013134:	d038      	beq.n	80131a8 <HAL_UART_Transmit_DMA+0x88>
 8013136:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8013138:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 801313c:	2801      	cmp	r0, #1
 801313e:	d035      	beq.n	80131ac <HAL_UART_Transmit_DMA+0x8c>
 8013140:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013142:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8013144:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8013146:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 801314a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801314c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8013150:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8013154:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013158:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 801315a:	b190      	cbz	r0, 8013182 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801315c:	f8df c060 	ldr.w	ip, [pc, #96]	; 80131c0 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013160:	4613      	mov	r3, r2
 8013162:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013164:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013168:	f8df c058 	ldr.w	ip, [pc, #88]	; 80131c4 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801316c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 801316e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013170:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013174:	f8df c050 	ldr.w	ip, [pc, #80]	; 80131c8 <HAL_UART_Transmit_DMA+0xa8>
 8013178:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801317c:	f7f7 face 	bl	800a71c <HAL_DMA_Start_IT>
 8013180:	b9b0      	cbnz	r0, 80131b0 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013182:	6822      	ldr	r2, [r4, #0]
 8013184:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8013186:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013188:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 801318a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801318e:	f102 0308 	add.w	r3, r2, #8
 8013192:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801319a:	f102 0108 	add.w	r1, r2, #8
 801319e:	e841 3000 	strex	r0, r3, [r1]
 80131a2:	2800      	cmp	r0, #0
 80131a4:	d1f3      	bne.n	801318e <HAL_UART_Transmit_DMA+0x6e>
}
 80131a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80131a8:	2001      	movs	r0, #1
}
 80131aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80131ac:	2002      	movs	r0, #2
}
 80131ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80131b0:	2310      	movs	r3, #16
        return HAL_ERROR;
 80131b2:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80131b4:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80131b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80131bc:	67a7      	str	r7, [r4, #120]	; 0x78
}
 80131be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c0:	080132d1 	.word	0x080132d1
 80131c4:	08013319 	.word	0x08013319
 80131c8:	08013329 	.word	0x08013329

080131cc <HAL_UART_Abort>:
{
 80131cc:	b538      	push	{r3, r4, r5, lr}
 80131ce:	4604      	mov	r4, r0
 80131d0:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131d2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80131d6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131da:	e843 2100 	strex	r1, r2, [r3]
 80131de:	2900      	cmp	r1, #0
 80131e0:	d1f7      	bne.n	80131d2 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131e2:	f103 0208 	add.w	r2, r3, #8
 80131e6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131ea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131ee:	f103 0008 	add.w	r0, r3, #8
 80131f2:	e840 2100 	strex	r1, r2, [r0]
 80131f6:	2900      	cmp	r1, #0
 80131f8:	d1f3      	bne.n	80131e2 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80131fa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80131fc:	2a01      	cmp	r2, #1
 80131fe:	d043      	beq.n	8013288 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013200:	6899      	ldr	r1, [r3, #8]
 8013202:	461a      	mov	r2, r3
 8013204:	0608      	lsls	r0, r1, #24
 8013206:	d42a      	bmi.n	801325e <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013208:	6899      	ldr	r1, [r3, #8]
 801320a:	0649      	lsls	r1, r1, #25
 801320c:	d514      	bpl.n	8013238 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801320e:	f103 0208 	add.w	r2, r3, #8
 8013212:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801321a:	f103 0008 	add.w	r0, r3, #8
 801321e:	e840 2100 	strex	r1, r2, [r0]
 8013222:	2900      	cmp	r1, #0
 8013224:	d1f3      	bne.n	801320e <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8013226:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8013228:	2800      	cmp	r0, #0
 801322a:	d03e      	beq.n	80132aa <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 801322c:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801322e:	f7f7 fad1 	bl	800a7d4 <HAL_DMA_Abort>
 8013232:	2800      	cmp	r0, #0
 8013234:	d145      	bne.n	80132c2 <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013236:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8013238:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801323a:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 801323c:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 801323e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8013242:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8013244:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013248:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801324a:	6991      	ldr	r1, [r2, #24]
 801324c:	f041 0108 	orr.w	r1, r1, #8
 8013250:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8013252:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013254:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013256:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013258:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 801325c:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801325e:	f103 0208 	add.w	r2, r3, #8
 8013262:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801326a:	f103 0008 	add.w	r0, r3, #8
 801326e:	e840 2100 	strex	r1, r2, [r0]
 8013272:	2900      	cmp	r1, #0
 8013274:	d1f3      	bne.n	801325e <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8013276:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013278:	b120      	cbz	r0, 8013284 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 801327a:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801327c:	f7f7 faaa 	bl	800a7d4 <HAL_DMA_Abort>
 8013280:	b9a8      	cbnz	r0, 80132ae <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	461a      	mov	r2, r3
 8013286:	e7bf      	b.n	8013208 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013288:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801328c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013290:	e843 2100 	strex	r1, r2, [r3]
 8013294:	2900      	cmp	r1, #0
 8013296:	d0b3      	beq.n	8013200 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013298:	e853 2f00 	ldrex	r2, [r3]
 801329c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132a0:	e843 2100 	strex	r1, r2, [r3]
 80132a4:	2900      	cmp	r1, #0
 80132a6:	d1ef      	bne.n	8013288 <HAL_UART_Abort+0xbc>
 80132a8:	e7aa      	b.n	8013200 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80132aa:	461a      	mov	r2, r3
 80132ac:	e7c4      	b.n	8013238 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80132ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80132b0:	f7f7 fbdc 	bl	800aa6c <HAL_DMA_GetError>
 80132b4:	2820      	cmp	r0, #32
 80132b6:	d1e4      	bne.n	8013282 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132b8:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 80132ba:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80132c0:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80132c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80132c4:	f7f7 fbd2 	bl	800aa6c <HAL_DMA_GetError>
 80132c8:	2820      	cmp	r0, #32
 80132ca:	d1b4      	bne.n	8013236 <HAL_UART_Abort+0x6a>
 80132cc:	e7f4      	b.n	80132b8 <HAL_UART_Abort+0xec>
 80132ce:	bf00      	nop

080132d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80132d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132d2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132da:	d018      	beq.n	801330e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 80132dc:	2300      	movs	r3, #0
 80132de:	6802      	ldr	r2, [r0, #0]
 80132e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132e4:	f102 0308 	add.w	r3, r2, #8
 80132e8:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80132ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132f0:	f102 0008 	add.w	r0, r2, #8
 80132f4:	e840 3100 	strex	r1, r3, [r0]
 80132f8:	2900      	cmp	r1, #0
 80132fa:	d1f3      	bne.n	80132e4 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132fc:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013304:	e842 3100 	strex	r1, r3, [r2]
 8013308:	2900      	cmp	r1, #0
 801330a:	d1f7      	bne.n	80132fc <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801330c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 801330e:	f7ee fe73 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 8013312:	bd08      	pop	{r3, pc}

08013314 <HAL_UART_TxHalfCpltCallback>:
 8013314:	4770      	bx	lr
 8013316:	bf00      	nop

08013318 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013318:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801331a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 801331c:	f7ff fffa 	bl	8013314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013320:	bd08      	pop	{r3, pc}
 8013322:	bf00      	nop

08013324 <HAL_UART_RxHalfCpltCallback>:
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop

08013328 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013328:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801332a:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801332c:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 801332e:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013330:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013332:	6893      	ldr	r3, [r2, #8]
 8013334:	061b      	lsls	r3, r3, #24
 8013336:	d501      	bpl.n	801333c <UART_DMAError+0x14>
 8013338:	2921      	cmp	r1, #33	; 0x21
 801333a:	d00d      	beq.n	8013358 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801333c:	6893      	ldr	r3, [r2, #8]
 801333e:	065b      	lsls	r3, r3, #25
 8013340:	d501      	bpl.n	8013346 <UART_DMAError+0x1e>
 8013342:	2c22      	cmp	r4, #34	; 0x22
 8013344:	d016      	beq.n	8013374 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013346:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801334a:	f043 0310 	orr.w	r3, r3, #16
 801334e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013352:	f7f2 fe3f 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013356:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8013358:	2300      	movs	r3, #0
 801335a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013362:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013366:	e842 3100 	strex	r1, r3, [r2]
 801336a:	2900      	cmp	r1, #0
 801336c:	d1f7      	bne.n	801335e <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 801336e:	2320      	movs	r3, #32
 8013370:	6783      	str	r3, [r0, #120]	; 0x78
}
 8013372:	e7e3      	b.n	801333c <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8013374:	2300      	movs	r3, #0
 8013376:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801337a:	f7ff fe45 	bl	8013008 <UART_EndRxTransfer>
 801337e:	e7e2      	b.n	8013346 <UART_DMAError+0x1e>

08013380 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013380:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013382:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8013384:	2300      	movs	r3, #0
 8013386:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801338a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801338e:	f7f2 fe21 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013392:	bd08      	pop	{r3, pc}

08013394 <HAL_UART_AbortCpltCallback>:
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop

08013398 <HAL_UART_Abort_IT>:
{
 8013398:	b570      	push	{r4, r5, r6, lr}
 801339a:	6803      	ldr	r3, [r0, #0]
 801339c:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801339e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80133a2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133a6:	e843 2100 	strex	r1, r2, [r3]
 80133aa:	2900      	cmp	r1, #0
 80133ac:	d1f7      	bne.n	801339e <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ae:	f103 0208 	add.w	r2, r3, #8
 80133b2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80133b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ba:	f103 0008 	add.w	r0, r3, #8
 80133be:	e840 2100 	strex	r1, r2, [r0]
 80133c2:	2900      	cmp	r1, #0
 80133c4:	d1f3      	bne.n	80133ae <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133c6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80133c8:	2a01      	cmp	r2, #1
 80133ca:	d05e      	beq.n	801348a <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 80133cc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d071      	beq.n	80134b6 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80133d2:	689a      	ldr	r2, [r3, #8]
 80133d4:	461c      	mov	r4, r3
 80133d6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80133da:	bf18      	it	ne
 80133dc:	4a3b      	ldrne	r2, [pc, #236]	; (80134cc <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 80133de:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80133e0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80133e2:	b129      	cbz	r1, 80133f0 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133e4:	689a      	ldr	r2, [r3, #8]
 80133e6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80133ea:	bf18      	it	ne
 80133ec:	4a38      	ldrne	r2, [pc, #224]	; (80134d0 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 80133ee:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80133f0:	689a      	ldr	r2, [r3, #8]
 80133f2:	0612      	lsls	r2, r2, #24
 80133f4:	d430      	bmi.n	8013458 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133f6:	689a      	ldr	r2, [r3, #8]
 80133f8:	0656      	lsls	r6, r2, #25
 80133fa:	d515      	bpl.n	8013428 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80133fc:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133fe:	f103 0208 	add.w	r2, r3, #8
 8013402:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801340a:	f103 0008 	add.w	r0, r3, #8
 801340e:	e840 2600 	strex	r6, r2, [r0]
 8013412:	2e00      	cmp	r6, #0
 8013414:	d1f3      	bne.n	80133fe <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8013416:	2900      	cmp	r1, #0
 8013418:	d04f      	beq.n	80134ba <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801341a:	4608      	mov	r0, r1
 801341c:	f7f7 fa22 	bl	800a864 <HAL_DMA_Abort_IT>
 8013420:	b1c0      	cbz	r0, 8013454 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8013422:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013424:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 8013426:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8013428:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801342a:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 801342c:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 801342e:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8013430:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8013434:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 8013436:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 801343a:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801343c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013440:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013442:	69a2      	ldr	r2, [r4, #24]
 8013444:	f042 0208 	orr.w	r2, r2, #8
 8013448:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 801344a:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 801344c:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801344e:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8013450:	f7ff ffa0 	bl	8013394 <HAL_UART_AbortCpltCallback>
}
 8013454:	2000      	movs	r0, #0
 8013456:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013458:	f103 0208 	add.w	r2, r3, #8
 801345c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013464:	f103 0608 	add.w	r6, r3, #8
 8013468:	e846 2400 	strex	r4, r2, [r6]
 801346c:	2c00      	cmp	r4, #0
 801346e:	d1f3      	bne.n	8013458 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8013470:	b1e0      	cbz	r0, 80134ac <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8013472:	f7f7 f9f7 	bl	800a864 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013476:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8013478:	b318      	cbz	r0, 80134c2 <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 801347a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801347c:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 801347e:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013480:	461c      	mov	r4, r3
 8013482:	0651      	lsls	r1, r2, #25
 8013484:	d5d0      	bpl.n	8013428 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8013486:	2401      	movs	r4, #1
 8013488:	e01e      	b.n	80134c8 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801348a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801348e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013492:	e843 2100 	strex	r1, r2, [r3]
 8013496:	2900      	cmp	r1, #0
 8013498:	d098      	beq.n	80133cc <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801349a:	e853 2f00 	ldrex	r2, [r3]
 801349e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134a2:	e843 2100 	strex	r1, r2, [r3]
 80134a6:	2900      	cmp	r1, #0
 80134a8:	d1ef      	bne.n	801348a <HAL_UART_Abort_IT+0xf2>
 80134aa:	e78f      	b.n	80133cc <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80134ac:	689a      	ldr	r2, [r3, #8]
 80134ae:	461c      	mov	r4, r3
 80134b0:	0652      	lsls	r2, r2, #25
 80134b2:	d5b9      	bpl.n	8013428 <HAL_UART_Abort_IT+0x90>
 80134b4:	e7a2      	b.n	80133fc <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80134b6:	461c      	mov	r4, r3
 80134b8:	e792      	b.n	80133e0 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 80134ba:	2c01      	cmp	r4, #1
 80134bc:	d1ca      	bne.n	8013454 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134be:	461c      	mov	r4, r3
 80134c0:	e7b2      	b.n	8013428 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80134c2:	689a      	ldr	r2, [r3, #8]
 80134c4:	0650      	lsls	r0, r2, #25
 80134c6:	d5c5      	bpl.n	8013454 <HAL_UART_Abort_IT+0xbc>
 80134c8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80134ca:	e798      	b.n	80133fe <HAL_UART_Abort_IT+0x66>
 80134cc:	08013515 	.word	0x08013515
 80134d0:	080134d5 	.word	0x080134d5

080134d4 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80134d4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 80134d6:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80134d8:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 80134dc:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 80134de:	b113      	cbz	r3, 80134e6 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80134e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134e2:	b103      	cbz	r3, 80134e6 <UART_DMARxAbortCallback+0x12>
 80134e4:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80134e6:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134e8:	6802      	ldr	r2, [r0, #0]
 80134ea:	210f      	movs	r1, #15
{
 80134ec:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80134ee:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80134f2:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 80134f4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80134fc:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80134fe:	6991      	ldr	r1, [r2, #24]
 8013500:	f041 0108 	orr.w	r1, r1, #8
 8013504:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8013506:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013508:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801350a:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801350c:	f7ff ff42 	bl	8013394 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013510:	bd10      	pop	{r4, pc}
 8013512:	bf00      	nop

08013514 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013514:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8013516:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8013518:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 801351c:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801351e:	b113      	cbz	r3, 8013526 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8013520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013522:	b103      	cbz	r3, 8013526 <UART_DMATxAbortCallback+0x12>
 8013524:	4770      	bx	lr
{
 8013526:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8013528:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 801352a:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801352c:	6801      	ldr	r1, [r0, #0]
 801352e:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8013530:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8013534:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013538:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801353c:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 801353e:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013540:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013542:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8013544:	f7ff ff26 	bl	8013394 <HAL_UART_AbortCpltCallback>
}
 8013548:	bd10      	pop	{r4, pc}
 801354a:	bf00      	nop

0801354c <HAL_UARTEx_RxEventCallback>:
}
 801354c:	4770      	bx	lr
 801354e:	bf00      	nop

08013550 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013550:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013552:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8013554:	2b22      	cmp	r3, #34	; 0x22
 8013556:	d005      	beq.n	8013564 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013558:	6802      	ldr	r2, [r0, #0]
 801355a:	6993      	ldr	r3, [r2, #24]
 801355c:	f043 0308 	orr.w	r3, r3, #8
 8013560:	6193      	str	r3, [r2, #24]
  }
}
 8013562:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013564:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013566:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801356c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801356e:	400b      	ands	r3, r1
 8013570:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8013572:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8013576:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013578:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 801357a:	3201      	adds	r2, #1
    huart->RxXferCount--;
 801357c:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 801357e:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8013580:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013584:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8013588:	b29b      	uxth	r3, r3
 801358a:	2b00      	cmp	r3, #0
 801358c:	d1e9      	bne.n	8013562 <UART_RxISR_8BIT+0x12>
 801358e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013590:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013594:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013598:	e843 2100 	strex	r1, r2, [r3]
 801359c:	2900      	cmp	r1, #0
 801359e:	d1f7      	bne.n	8013590 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a0:	f103 0208 	add.w	r2, r3, #8
 80135a4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135ac:	f103 0c08 	add.w	ip, r3, #8
 80135b0:	e84c 2100 	strex	r1, r2, [ip]
 80135b4:	2900      	cmp	r1, #0
 80135b6:	d1f3      	bne.n	80135a0 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 80135b8:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80135ba:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80135bc:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135be:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80135c0:	2a01      	cmp	r2, #1
 80135c2:	d112      	bne.n	80135ea <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135c4:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135ce:	e843 2100 	strex	r1, r2, [r3]
 80135d2:	2900      	cmp	r1, #0
 80135d4:	d1f7      	bne.n	80135c6 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80135d6:	69da      	ldr	r2, [r3, #28]
 80135d8:	06d2      	lsls	r2, r2, #27
 80135da:	d501      	bpl.n	80135e0 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80135dc:	2210      	movs	r2, #16
 80135de:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80135e0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80135e4:	f7ff ffb2 	bl	801354c <HAL_UARTEx_RxEventCallback>
}
 80135e8:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80135ea:	f7f2 fc7d 	bl	8005ee8 <HAL_UART_RxCpltCallback>
}
 80135ee:	bd08      	pop	{r3, pc}

080135f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80135f0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80135f2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80135f4:	2b22      	cmp	r3, #34	; 0x22
 80135f6:	d005      	beq.n	8013604 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80135f8:	6802      	ldr	r2, [r0, #0]
 80135fa:	6993      	ldr	r3, [r2, #24]
 80135fc:	f043 0308 	orr.w	r3, r3, #8
 8013600:	6193      	str	r3, [r2, #24]
  }
}
 8013602:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013604:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8013606:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801360a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 801360c:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801360e:	ea02 020c 	and.w	r2, r2, ip
 8013612:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8013616:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 801361a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801361c:	3a01      	subs	r2, #1
 801361e:	b292      	uxth	r2, r2
 8013620:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8013624:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8013628:	b292      	uxth	r2, r2
 801362a:	2a00      	cmp	r2, #0
 801362c:	d1e9      	bne.n	8013602 <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801362e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013636:	e843 2100 	strex	r1, r2, [r3]
 801363a:	2900      	cmp	r1, #0
 801363c:	d1f7      	bne.n	801362e <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801363e:	f103 0208 	add.w	r2, r3, #8
 8013642:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013646:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801364a:	f103 0c08 	add.w	ip, r3, #8
 801364e:	e84c 2100 	strex	r1, r2, [ip]
 8013652:	2900      	cmp	r1, #0
 8013654:	d1f3      	bne.n	801363e <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8013656:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8013658:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 801365a:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801365c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801365e:	2a01      	cmp	r2, #1
 8013660:	d112      	bne.n	8013688 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013662:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013664:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013668:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801366c:	e843 2100 	strex	r1, r2, [r3]
 8013670:	2900      	cmp	r1, #0
 8013672:	d1f7      	bne.n	8013664 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013674:	69da      	ldr	r2, [r3, #28]
 8013676:	06d2      	lsls	r2, r2, #27
 8013678:	d501      	bpl.n	801367e <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801367a:	2210      	movs	r2, #16
 801367c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801367e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8013682:	f7ff ff63 	bl	801354c <HAL_UARTEx_RxEventCallback>
}
 8013686:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8013688:	f7f2 fc2e 	bl	8005ee8 <HAL_UART_RxCpltCallback>
}
 801368c:	bd08      	pop	{r3, pc}
 801368e:	bf00      	nop

08013690 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013690:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8013692:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013694:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8013696:	2b01      	cmp	r3, #1
 8013698:	d002      	beq.n	80136a0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 801369a:	f7ff fe43 	bl	8013324 <HAL_UART_RxHalfCpltCallback>
}
 801369e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80136a0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80136a4:	0849      	lsrs	r1, r1, #1
 80136a6:	f7ff ff51 	bl	801354c <HAL_UARTEx_RxEventCallback>
}
 80136aa:	bd08      	pop	{r3, pc}

080136ac <UART_DMAReceiveCplt>:
{
 80136ac:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80136ae:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80136b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80136b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136b6:	d028      	beq.n	801370a <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 80136b8:	2200      	movs	r2, #0
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80136c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136c8:	e843 2100 	strex	r1, r2, [r3]
 80136cc:	2900      	cmp	r1, #0
 80136ce:	d1f7      	bne.n	80136c0 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d0:	f103 0208 	add.w	r2, r3, #8
 80136d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136d8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136dc:	f103 0c08 	add.w	ip, r3, #8
 80136e0:	e84c 2100 	strex	r1, r2, [ip]
 80136e4:	2900      	cmp	r1, #0
 80136e6:	d1f3      	bne.n	80136d0 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e8:	f103 0208 	add.w	r2, r3, #8
 80136ec:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136f4:	f103 0c08 	add.w	ip, r3, #8
 80136f8:	e84c 2100 	strex	r1, r2, [ip]
 80136fc:	2900      	cmp	r1, #0
 80136fe:	d1f3      	bne.n	80136e8 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8013700:	2220      	movs	r2, #32
 8013702:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013704:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013706:	2a01      	cmp	r2, #1
 8013708:	d005      	beq.n	8013716 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801370a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801370c:	2b01      	cmp	r3, #1
 801370e:	d013      	beq.n	8013738 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8013710:	f7f2 fbea 	bl	8005ee8 <HAL_UART_RxCpltCallback>
}
 8013714:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013716:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801371a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801371e:	e843 2100 	strex	r1, r2, [r3]
 8013722:	2900      	cmp	r1, #0
 8013724:	d0f1      	beq.n	801370a <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013726:	e853 2f00 	ldrex	r2, [r3]
 801372a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801372e:	e843 2100 	strex	r1, r2, [r3]
 8013732:	2900      	cmp	r1, #0
 8013734:	d1ef      	bne.n	8013716 <UART_DMAReceiveCplt+0x6a>
 8013736:	e7e8      	b.n	801370a <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013738:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801373c:	f7ff ff06 	bl	801354c <HAL_UARTEx_RxEventCallback>
}
 8013740:	bd08      	pop	{r3, pc}
 8013742:	bf00      	nop

08013744 <HAL_UARTEx_WakeupCallback>:
}
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop

08013748 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013748:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801374a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801374e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013750:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8013752:	ea12 0f0c 	tst.w	r2, ip
{
 8013756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801375a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801375c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 801375e:	d17d      	bne.n	801385c <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013760:	0697      	lsls	r7, r2, #26
 8013762:	d502      	bpl.n	801376a <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013764:	068e      	lsls	r6, r1, #26
 8013766:	f100 80f4 	bmi.w	8013952 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801376a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801376c:	2801      	cmp	r0, #1
 801376e:	d024      	beq.n	80137ba <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013770:	02d0      	lsls	r0, r2, #11
 8013772:	d502      	bpl.n	801377a <HAL_UART_IRQHandler+0x32>
 8013774:	026f      	lsls	r7, r5, #9
 8013776:	f100 80f1 	bmi.w	801395c <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 801377a:	0616      	lsls	r6, r2, #24
 801377c:	d414      	bmi.n	80137a8 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801377e:	0650      	lsls	r0, r2, #25
 8013780:	d501      	bpl.n	8013786 <HAL_UART_IRQHandler+0x3e>
 8013782:	064a      	lsls	r2, r1, #25
 8013784:	d401      	bmi.n	801378a <HAL_UART_IRQHandler+0x42>
}
 8013786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013792:	e843 2100 	strex	r1, r2, [r3]
 8013796:	2900      	cmp	r1, #0
 8013798:	d1f7      	bne.n	801378a <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 801379a:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 801379c:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801379e:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 80137a0:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 80137a2:	f7ee fc29 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 80137a6:	e7ee      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80137a8:	060d      	lsls	r5, r1, #24
 80137aa:	d5e8      	bpl.n	801377e <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 80137ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d0e9      	beq.n	8013786 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 80137b2:	4620      	mov	r0, r4
}
 80137b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80137b8:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80137ba:	06d7      	lsls	r7, r2, #27
 80137bc:	d5d8      	bpl.n	8013770 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80137be:	06ce      	lsls	r6, r1, #27
 80137c0:	d5d6      	bpl.n	8013770 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80137c2:	2210      	movs	r2, #16
 80137c4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137c6:	689a      	ldr	r2, [r3, #8]
 80137c8:	0655      	lsls	r5, r2, #25
 80137ca:	f140 80d9 	bpl.w	8013980 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80137ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80137d0:	6802      	ldr	r2, [r0, #0]
 80137d2:	6852      	ldr	r2, [r2, #4]
 80137d4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80137d6:	2a00      	cmp	r2, #0
 80137d8:	d0d5      	beq.n	8013786 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80137da:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80137de:	4291      	cmp	r1, r2
 80137e0:	d9d1      	bls.n	8013786 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 80137e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80137e6:	69c2      	ldr	r2, [r0, #28]
 80137e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80137ec:	d02e      	beq.n	801384c <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ee:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80137f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137f6:	e843 2100 	strex	r1, r2, [r3]
 80137fa:	2900      	cmp	r1, #0
 80137fc:	d1f7      	bne.n	80137ee <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137fe:	f103 0208 	add.w	r2, r3, #8
 8013802:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013806:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801380a:	f103 0508 	add.w	r5, r3, #8
 801380e:	e845 2100 	strex	r1, r2, [r5]
 8013812:	2900      	cmp	r1, #0
 8013814:	d1f3      	bne.n	80137fe <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013816:	f103 0208 	add.w	r2, r3, #8
 801381a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801381e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013822:	f103 0508 	add.w	r5, r3, #8
 8013826:	e845 2100 	strex	r1, r2, [r5]
 801382a:	2900      	cmp	r1, #0
 801382c:	d1f3      	bne.n	8013816 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 801382e:	2220      	movs	r2, #32
 8013830:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013832:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013834:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013838:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801383c:	e843 2100 	strex	r1, r2, [r3]
 8013840:	2900      	cmp	r1, #0
 8013842:	d1f7      	bne.n	8013834 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013844:	f7f6 ffc6 	bl	800a7d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013848:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801384c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8013850:	4620      	mov	r0, r4
 8013852:	1ac9      	subs	r1, r1, r3
 8013854:	b289      	uxth	r1, r1
 8013856:	f7ff fe79 	bl	801354c <HAL_UARTEx_RxEventCallback>
 801385a:	e794      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801385c:	4864      	ldr	r0, [pc, #400]	; (80139f0 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 801385e:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013862:	4008      	ands	r0, r1
 8013864:	4330      	orrs	r0, r6
 8013866:	d080      	beq.n	801376a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013868:	07d5      	lsls	r5, r2, #31
 801386a:	461f      	mov	r7, r3
 801386c:	d509      	bpl.n	8013882 <HAL_UART_IRQHandler+0x13a>
 801386e:	05c8      	lsls	r0, r1, #23
 8013870:	d507      	bpl.n	8013882 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013872:	2001      	movs	r0, #1
 8013874:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013876:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801387a:	f040 0001 	orr.w	r0, r0, #1
 801387e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013882:	0795      	lsls	r5, r2, #30
 8013884:	d560      	bpl.n	8013948 <HAL_UART_IRQHandler+0x200>
 8013886:	b18e      	cbz	r6, 80138ac <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013888:	2002      	movs	r0, #2
 801388a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801388c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8013890:	f040 0004 	orr.w	r0, r0, #4
 8013894:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013898:	0750      	lsls	r0, r2, #29
 801389a:	d507      	bpl.n	80138ac <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801389c:	2004      	movs	r0, #4
 801389e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80138a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80138a4:	f040 0002 	orr.w	r0, r0, #2
 80138a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80138ac:	0710      	lsls	r0, r2, #28
 80138ae:	d50b      	bpl.n	80138c8 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80138b0:	f001 0020 	and.w	r0, r1, #32
 80138b4:	4330      	orrs	r0, r6
 80138b6:	d007      	beq.n	80138c8 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80138b8:	2008      	movs	r0, #8
 80138ba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80138bc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80138c0:	f040 0008 	orr.w	r0, r0, #8
 80138c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80138c8:	0516      	lsls	r6, r2, #20
 80138ca:	d50a      	bpl.n	80138e2 <HAL_UART_IRQHandler+0x19a>
 80138cc:	014d      	lsls	r5, r1, #5
 80138ce:	d508      	bpl.n	80138e2 <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80138d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80138d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80138da:	f043 0320 	orr.w	r3, r3, #32
 80138de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80138e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f43f af4d 	beq.w	8013786 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80138ec:	0690      	lsls	r0, r2, #26
 80138ee:	d501      	bpl.n	80138f4 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80138f0:	0689      	lsls	r1, r1, #26
 80138f2:	d43e      	bmi.n	8013972 <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80138f4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80138f8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80138fa:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80138fc:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013904:	431d      	orrs	r5, r3
 8013906:	d06e      	beq.n	80139e6 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8013908:	f7ff fb7e 	bl	8013008 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801390c:	6823      	ldr	r3, [r4, #0]
 801390e:	689a      	ldr	r2, [r3, #8]
 8013910:	0652      	lsls	r2, r2, #25
 8013912:	d52a      	bpl.n	801396a <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013914:	f103 0208 	add.w	r2, r3, #8
 8013918:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801391c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013920:	f103 0008 	add.w	r0, r3, #8
 8013924:	e840 2100 	strex	r1, r2, [r0]
 8013928:	2900      	cmp	r1, #0
 801392a:	d1f3      	bne.n	8013914 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 801392c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801392e:	b1e0      	cbz	r0, 801396a <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013930:	4b30      	ldr	r3, [pc, #192]	; (80139f4 <HAL_UART_IRQHandler+0x2ac>)
 8013932:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013934:	f7f6 ff96 	bl	800a864 <HAL_DMA_Abort_IT>
 8013938:	2800      	cmp	r0, #0
 801393a:	f43f af24 	beq.w	8013786 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801393e:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8013940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013944:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013946:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013948:	0755      	lsls	r5, r2, #29
 801394a:	d5af      	bpl.n	80138ac <HAL_UART_IRQHandler+0x164>
 801394c:	2e00      	cmp	r6, #0
 801394e:	d1a5      	bne.n	801389c <HAL_UART_IRQHandler+0x154>
 8013950:	e7ac      	b.n	80138ac <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8013952:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8013954:	2b00      	cmp	r3, #0
 8013956:	f47f af2d 	bne.w	80137b4 <HAL_UART_IRQHandler+0x6c>
 801395a:	e714      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801395c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8013960:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013962:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8013964:	f7ff feee 	bl	8013744 <HAL_UARTEx_WakeupCallback>
    return;
 8013968:	e70d      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 801396a:	4620      	mov	r0, r4
 801396c:	f7f2 fb32 	bl	8005fd4 <HAL_UART_ErrorCallback>
 8013970:	e709      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8013972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013974:	2b00      	cmp	r3, #0
 8013976:	d0bd      	beq.n	80138f4 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8013978:	4620      	mov	r0, r4
 801397a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801397c:	6827      	ldr	r7, [r4, #0]
 801397e:	e7b9      	b.n	80138f4 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013980:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8013984:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8013988:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801398c:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801398e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013990:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8013992:	2900      	cmp	r1, #0
 8013994:	f43f aef7 	beq.w	8013786 <HAL_UART_IRQHandler+0x3e>
 8013998:	2a00      	cmp	r2, #0
 801399a:	f43f aef4 	beq.w	8013786 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801399e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80139a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139a6:	e843 2000 	strex	r0, r2, [r3]
 80139aa:	2800      	cmp	r0, #0
 80139ac:	d1f7      	bne.n	801399e <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ae:	f103 0208 	add.w	r2, r3, #8
 80139b2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ba:	f103 0508 	add.w	r5, r3, #8
 80139be:	e845 2000 	strex	r0, r2, [r5]
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d1f3      	bne.n	80139ae <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 80139c6:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80139c8:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80139ca:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139cc:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ce:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139d6:	e843 2000 	strex	r0, r2, [r3]
 80139da:	2800      	cmp	r0, #0
 80139dc:	d1f7      	bne.n	80139ce <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80139de:	4620      	mov	r0, r4
 80139e0:	f7ff fdb4 	bl	801354c <HAL_UARTEx_RxEventCallback>
 80139e4:	e6cf      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 80139e6:	f7f2 faf5 	bl	8005fd4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139ea:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80139ee:	e6ca      	b.n	8013786 <HAL_UART_IRQHandler+0x3e>
 80139f0:	04000120 	.word	0x04000120
 80139f4:	08013381 	.word	0x08013381

080139f8 <UART_SetConfig>:
{
 80139f8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80139fa:	6842      	ldr	r2, [r0, #4]
{
 80139fc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80139fe:	4bac      	ldr	r3, [pc, #688]	; (8013cb0 <UART_SetConfig+0x2b8>)
 8013a00:	429a      	cmp	r2, r3
 8013a02:	f200 80bb 	bhi.w	8013b7c <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8013a06:	68a3      	ldr	r3, [r4, #8]
 8013a08:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8013a0c:	d002      	beq.n	8013a14 <UART_SetConfig+0x1c>
 8013a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013a12:	d179      	bne.n	8013b08 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013a14:	68e3      	ldr	r3, [r4, #12]
 8013a16:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8013a1a:	d17e      	bne.n	8013b1a <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013a1c:	6a23      	ldr	r3, [r4, #32]
 8013a1e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8013a22:	f040 8084 	bne.w	8013b2e <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8013a26:	6923      	ldr	r3, [r4, #16]
 8013a28:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8013a2c:	d002      	beq.n	8013a34 <UART_SetConfig+0x3c>
 8013a2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013a32:	d163      	bne.n	8013afc <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013a34:	6963      	ldr	r3, [r4, #20]
 8013a36:	f033 020c 	bics.w	r2, r3, #12
 8013a3a:	d146      	bne.n	8013aca <UART_SetConfig+0xd2>
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d044      	beq.n	8013aca <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013a40:	69a3      	ldr	r3, [r4, #24]
 8013a42:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013a46:	d149      	bne.n	8013adc <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013a48:	69e0      	ldr	r0, [r4, #28]
 8013a4a:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8013a4e:	d14e      	bne.n	8013aee <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a50:	6921      	ldr	r1, [r4, #16]
 8013a52:	68a2      	ldr	r2, [r4, #8]
 8013a54:	6823      	ldr	r3, [r4, #0]
 8013a56:	430a      	orrs	r2, r1
 8013a58:	6961      	ldr	r1, [r4, #20]
 8013a5a:	681d      	ldr	r5, [r3, #0]
 8013a5c:	430a      	orrs	r2, r1
 8013a5e:	4995      	ldr	r1, [pc, #596]	; (8013cb4 <UART_SetConfig+0x2bc>)
 8013a60:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a62:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a64:	430a      	orrs	r2, r1
 8013a66:	4302      	orrs	r2, r0
 8013a68:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a6a:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013a6c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a6e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8013a72:	4329      	orrs	r1, r5
 8013a74:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8013a76:	6a21      	ldr	r1, [r4, #32]
 8013a78:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a7a:	6899      	ldr	r1, [r3, #8]
 8013a7c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8013a80:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a82:	498d      	ldr	r1, [pc, #564]	; (8013cb8 <UART_SetConfig+0x2c0>)
 8013a84:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a86:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a88:	d07e      	beq.n	8013b88 <UART_SetConfig+0x190>
 8013a8a:	4a8c      	ldr	r2, [pc, #560]	; (8013cbc <UART_SetConfig+0x2c4>)
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	d054      	beq.n	8013b3a <UART_SetConfig+0x142>
 8013a90:	4a8b      	ldr	r2, [pc, #556]	; (8013cc0 <UART_SetConfig+0x2c8>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	f000 812a 	beq.w	8013cec <UART_SetConfig+0x2f4>
 8013a98:	4a8a      	ldr	r2, [pc, #552]	; (8013cc4 <UART_SetConfig+0x2cc>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	f000 8137 	beq.w	8013d0e <UART_SetConfig+0x316>
 8013aa0:	4a89      	ldr	r2, [pc, #548]	; (8013cc8 <UART_SetConfig+0x2d0>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	f000 809e 	beq.w	8013be4 <UART_SetConfig+0x1ec>
 8013aa8:	4a88      	ldr	r2, [pc, #544]	; (8013ccc <UART_SetConfig+0x2d4>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	f000 80d1 	beq.w	8013c52 <UART_SetConfig+0x25a>
 8013ab0:	4a87      	ldr	r2, [pc, #540]	; (8013cd0 <UART_SetConfig+0x2d8>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	f000 8151 	beq.w	8013d5a <UART_SetConfig+0x362>
 8013ab8:	4a86      	ldr	r2, [pc, #536]	; (8013cd4 <UART_SetConfig+0x2dc>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	f000 8164 	beq.w	8013d88 <UART_SetConfig+0x390>
    switch (clocksource)
 8013ac0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8013ac2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013ac4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013ac8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8013aca:	f640 3176 	movw	r1, #2934	; 0xb76
 8013ace:	4882      	ldr	r0, [pc, #520]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013ad0:	f7f1 ff28 	bl	8005924 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8013ad4:	69a3      	ldr	r3, [r4, #24]
 8013ad6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8013ada:	d0b5      	beq.n	8013a48 <UART_SetConfig+0x50>
 8013adc:	487e      	ldr	r0, [pc, #504]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013ade:	f640 3177 	movw	r1, #2935	; 0xb77
 8013ae2:	f7f1 ff1f 	bl	8005924 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8013ae6:	69e0      	ldr	r0, [r4, #28]
 8013ae8:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8013aec:	d0b0      	beq.n	8013a50 <UART_SetConfig+0x58>
 8013aee:	487a      	ldr	r0, [pc, #488]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013af0:	f640 3178 	movw	r1, #2936	; 0xb78
 8013af4:	f7f1 ff16 	bl	8005924 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013af8:	69e0      	ldr	r0, [r4, #28]
 8013afa:	e7a9      	b.n	8013a50 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8013afc:	f640 3175 	movw	r1, #2933	; 0xb75
 8013b00:	4875      	ldr	r0, [pc, #468]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013b02:	f7f1 ff0f 	bl	8005924 <assert_failed>
 8013b06:	e795      	b.n	8013a34 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8013b08:	f640 3171 	movw	r1, #2929	; 0xb71
 8013b0c:	4872      	ldr	r0, [pc, #456]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013b0e:	f7f1 ff09 	bl	8005924 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8013b12:	68e3      	ldr	r3, [r4, #12]
 8013b14:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8013b18:	d080      	beq.n	8013a1c <UART_SetConfig+0x24>
 8013b1a:	f640 3172 	movw	r1, #2930	; 0xb72
 8013b1e:	486e      	ldr	r0, [pc, #440]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013b20:	f7f1 ff00 	bl	8005924 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8013b24:	6a23      	ldr	r3, [r4, #32]
 8013b26:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8013b2a:	f43f af7c 	beq.w	8013a26 <UART_SetConfig+0x2e>
 8013b2e:	f640 3173 	movw	r1, #2931	; 0xb73
 8013b32:	4869      	ldr	r0, [pc, #420]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013b34:	f7f1 fef6 	bl	8005924 <assert_failed>
 8013b38:	e775      	b.n	8013a26 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b3a:	4b68      	ldr	r3, [pc, #416]	; (8013cdc <UART_SetConfig+0x2e4>)
 8013b3c:	4a68      	ldr	r2, [pc, #416]	; (8013ce0 <UART_SetConfig+0x2e8>)
 8013b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b42:	f003 030c 	and.w	r3, r3, #12
 8013b46:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b4c:	d033      	beq.n	8013bb6 <UART_SetConfig+0x1be>
    switch (clocksource)
 8013b4e:	2b08      	cmp	r3, #8
 8013b50:	d8b6      	bhi.n	8013ac0 <UART_SetConfig+0xc8>
 8013b52:	a201      	add	r2, pc, #4	; (adr r2, 8013b58 <UART_SetConfig+0x160>)
 8013b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b58:	08013c13 	.word	0x08013c13
 8013b5c:	08013b9f 	.word	0x08013b9f
 8013b60:	08013c69 	.word	0x08013c69
 8013b64:	08013ac1 	.word	0x08013ac1
 8013b68:	08013c07 	.word	0x08013c07
 8013b6c:	08013ac1 	.word	0x08013ac1
 8013b70:	08013ac1 	.word	0x08013ac1
 8013b74:	08013ac1 	.word	0x08013ac1
 8013b78:	08013c29 	.word	0x08013c29
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8013b7c:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8013b80:	4855      	ldr	r0, [pc, #340]	; (8013cd8 <UART_SetConfig+0x2e0>)
 8013b82:	f7f1 fecf 	bl	8005924 <assert_failed>
 8013b86:	e73e      	b.n	8013a06 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b88:	4b54      	ldr	r3, [pc, #336]	; (8013cdc <UART_SetConfig+0x2e4>)
 8013b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b8e:	f003 0303 	and.w	r3, r3, #3
 8013b92:	3b01      	subs	r3, #1
 8013b94:	2b02      	cmp	r3, #2
 8013b96:	d90b      	bls.n	8013bb0 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013b9c:	d066      	beq.n	8013c6c <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013b9e:	f7fb f9d5 	bl	800ef4c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	d142      	bne.n	8013c2c <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8013baa:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013bae:	bd38      	pop	{r3, r4, r5, pc}
 8013bb0:	4a4c      	ldr	r2, [pc, #304]	; (8013ce4 <UART_SetConfig+0x2ec>)
 8013bb2:	5cd3      	ldrb	r3, [r2, r3]
 8013bb4:	e7c8      	b.n	8013b48 <UART_SetConfig+0x150>
    switch (clocksource)
 8013bb6:	2b08      	cmp	r3, #8
 8013bb8:	d882      	bhi.n	8013ac0 <UART_SetConfig+0xc8>
 8013bba:	a201      	add	r2, pc, #4	; (adr r2, 8013bc0 <UART_SetConfig+0x1c8>)
 8013bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc0:	08013ca9 	.word	0x08013ca9
 8013bc4:	08013c6d 	.word	0x08013c6d
 8013bc8:	08013d51 	.word	0x08013d51
 8013bcc:	08013ac1 	.word	0x08013ac1
 8013bd0:	08013ca3 	.word	0x08013ca3
 8013bd4:	08013ac1 	.word	0x08013ac1
 8013bd8:	08013ac1 	.word	0x08013ac1
 8013bdc:	08013ac1 	.word	0x08013ac1
 8013be0:	08013d55 	.word	0x08013d55
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013be4:	4b3d      	ldr	r3, [pc, #244]	; (8013cdc <UART_SetConfig+0x2e4>)
 8013be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013bf2:	d036      	beq.n	8013c62 <UART_SetConfig+0x26a>
 8013bf4:	d810      	bhi.n	8013c18 <UART_SetConfig+0x220>
 8013bf6:	b14b      	cbz	r3, 8013c0c <UART_SetConfig+0x214>
 8013bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bfc:	f47f af60 	bne.w	8013ac0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c04:	d04d      	beq.n	8013ca2 <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8013c06:	f7fb f839 	bl	800ec7c <HAL_RCC_GetSysClockFreq>
        break;
 8013c0a:	e7ca      	b.n	8013ba2 <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c10:	d04a      	beq.n	8013ca8 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013c12:	f7fb f98b 	bl	800ef2c <HAL_RCC_GetPCLK1Freq>
        break;
 8013c16:	e7c4      	b.n	8013ba2 <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c1c:	f47f af50 	bne.w	8013ac0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c24:	f000 8096 	beq.w	8013d54 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 8013c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013c2c:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c2e:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013c32:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8013c36:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c3a:	f1a3 0110 	sub.w	r1, r3, #16
 8013c3e:	4291      	cmp	r1, r2
 8013c40:	f63f af3e 	bhi.w	8013ac0 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013c44:	6822      	ldr	r2, [r4, #0]
 8013c46:	2000      	movs	r0, #0
 8013c48:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8013c4a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8013c4c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8013c50:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013c52:	4b22      	ldr	r3, [pc, #136]	; (8013cdc <UART_SetConfig+0x2e4>)
 8013c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c60:	d168      	bne.n	8013d34 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013c66:	d073      	beq.n	8013d50 <UART_SetConfig+0x358>
    switch (clocksource)
 8013c68:	481f      	ldr	r0, [pc, #124]	; (8013ce8 <UART_SetConfig+0x2f0>)
 8013c6a:	e7df      	b.n	8013c2c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013c6c:	f7fb f96e 	bl	800ef4c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d098      	beq.n	8013ba6 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013c74:	0043      	lsls	r3, r0, #1
 8013c76:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c78:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013c7c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013c80:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c84:	f1a3 0210 	sub.w	r2, r3, #16
 8013c88:	428a      	cmp	r2, r1
 8013c8a:	f63f af19 	bhi.w	8013ac0 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c8e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013c92:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8013c96:	6821      	ldr	r1, [r4, #0]
 8013c98:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c9a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	60cb      	str	r3, [r1, #12]
 8013ca0:	e70f      	b.n	8013ac2 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8013ca2:	f7fa ffeb 	bl	800ec7c <HAL_RCC_GetSysClockFreq>
        break;
 8013ca6:	e7e3      	b.n	8013c70 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ca8:	f7fb f940 	bl	800ef2c <HAL_RCC_GetPCLK1Freq>
        break;
 8013cac:	e7e0      	b.n	8013c70 <UART_SetConfig+0x278>
 8013cae:	bf00      	nop
 8013cb0:	019bfcc0 	.word	0x019bfcc0
 8013cb4:	efff69f3 	.word	0xefff69f3
 8013cb8:	40011000 	.word	0x40011000
 8013cbc:	40004400 	.word	0x40004400
 8013cc0:	40004800 	.word	0x40004800
 8013cc4:	40004c00 	.word	0x40004c00
 8013cc8:	40005000 	.word	0x40005000
 8013ccc:	40011400 	.word	0x40011400
 8013cd0:	40007800 	.word	0x40007800
 8013cd4:	40007c00 	.word	0x40007c00
 8013cd8:	0802e5f4 	.word	0x0802e5f4
 8013cdc:	40023800 	.word	0x40023800
 8013ce0:	0802e634 	.word	0x0802e634
 8013ce4:	0802e630 	.word	0x0802e630
 8013ce8:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cec:	4b32      	ldr	r3, [pc, #200]	; (8013db8 <UART_SetConfig+0x3c0>)
 8013cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013cf6:	2b20      	cmp	r3, #32
 8013cf8:	d0b3      	beq.n	8013c62 <UART_SetConfig+0x26a>
 8013cfa:	d805      	bhi.n	8013d08 <UART_SetConfig+0x310>
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d085      	beq.n	8013c0c <UART_SetConfig+0x214>
 8013d00:	2b10      	cmp	r3, #16
 8013d02:	f43f af7d 	beq.w	8013c00 <UART_SetConfig+0x208>
 8013d06:	e6db      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d08:	2b30      	cmp	r3, #48	; 0x30
 8013d0a:	d089      	beq.n	8013c20 <UART_SetConfig+0x228>
 8013d0c:	e6d8      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d0e:	4b2a      	ldr	r3, [pc, #168]	; (8013db8 <UART_SetConfig+0x3c0>)
 8013d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013d18:	2b80      	cmp	r3, #128	; 0x80
 8013d1a:	d0a2      	beq.n	8013c62 <UART_SetConfig+0x26a>
 8013d1c:	d806      	bhi.n	8013d2c <UART_SetConfig+0x334>
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f43f af74 	beq.w	8013c0c <UART_SetConfig+0x214>
 8013d24:	2b40      	cmp	r3, #64	; 0x40
 8013d26:	f43f af6b 	beq.w	8013c00 <UART_SetConfig+0x208>
 8013d2a:	e6c9      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8013d2e:	f43f af77 	beq.w	8013c20 <UART_SetConfig+0x228>
 8013d32:	e6c5      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d34:	d807      	bhi.n	8013d46 <UART_SetConfig+0x34e>
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f43f af2e 	beq.w	8013b98 <UART_SetConfig+0x1a0>
 8013d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d40:	f43f af5e 	beq.w	8013c00 <UART_SetConfig+0x208>
 8013d44:	e6bc      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013d4a:	f43f af69 	beq.w	8013c20 <UART_SetConfig+0x228>
 8013d4e:	e6b7      	b.n	8013ac0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d50:	4b1a      	ldr	r3, [pc, #104]	; (8013dbc <UART_SetConfig+0x3c4>)
 8013d52:	e790      	b.n	8013c76 <UART_SetConfig+0x27e>
    switch (clocksource)
 8013d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013d58:	e78d      	b.n	8013c76 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d5a:	4b17      	ldr	r3, [pc, #92]	; (8013db8 <UART_SetConfig+0x3c0>)
 8013d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d68:	f43f af7b 	beq.w	8013c62 <UART_SetConfig+0x26a>
 8013d6c:	d807      	bhi.n	8013d7e <UART_SetConfig+0x386>
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	f43f af4c 	beq.w	8013c0c <UART_SetConfig+0x214>
 8013d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d78:	f43f af42 	beq.w	8013c00 <UART_SetConfig+0x208>
 8013d7c:	e6a0      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013d82:	f43f af4d 	beq.w	8013c20 <UART_SetConfig+0x228>
 8013d86:	e69b      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013d88:	4b0b      	ldr	r3, [pc, #44]	; (8013db8 <UART_SetConfig+0x3c0>)
 8013d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d96:	f43f af64 	beq.w	8013c62 <UART_SetConfig+0x26a>
 8013d9a:	d807      	bhi.n	8013dac <UART_SetConfig+0x3b4>
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f43f af35 	beq.w	8013c0c <UART_SetConfig+0x214>
 8013da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013da6:	f43f af2b 	beq.w	8013c00 <UART_SetConfig+0x208>
 8013daa:	e689      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013dac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013db0:	f43f af36 	beq.w	8013c20 <UART_SetConfig+0x228>
 8013db4:	e684      	b.n	8013ac0 <UART_SetConfig+0xc8>
 8013db6:	bf00      	nop
 8013db8:	40023800 	.word	0x40023800
 8013dbc:	01e84800 	.word	0x01e84800

08013dc0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013dc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013dc2:	2bff      	cmp	r3, #255	; 0xff
{
 8013dc4:	b510      	push	{r4, lr}
 8013dc6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013dc8:	d87b      	bhi.n	8013ec2 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013dca:	07da      	lsls	r2, r3, #31
 8013dcc:	d50a      	bpl.n	8013de4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013dce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013dd0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8013dd4:	f040 808e 	bne.w	8013ef4 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013dd8:	6820      	ldr	r0, [r4, #0]
 8013dda:	6842      	ldr	r2, [r0, #4]
 8013ddc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013de0:	430a      	orrs	r2, r1
 8013de2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013de4:	0798      	lsls	r0, r3, #30
 8013de6:	d50a      	bpl.n	8013dfe <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013de8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013dea:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8013dee:	f040 8089 	bne.w	8013f04 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013df2:	6820      	ldr	r0, [r4, #0]
 8013df4:	6842      	ldr	r2, [r0, #4]
 8013df6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013dfa:	430a      	orrs	r2, r1
 8013dfc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013dfe:	0759      	lsls	r1, r3, #29
 8013e00:	d50a      	bpl.n	8013e18 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013e04:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8013e08:	f040 8084 	bne.w	8013f14 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013e0c:	6820      	ldr	r0, [r4, #0]
 8013e0e:	6842      	ldr	r2, [r0, #4]
 8013e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013e14:	430a      	orrs	r2, r1
 8013e16:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013e18:	071a      	lsls	r2, r3, #28
 8013e1a:	d509      	bpl.n	8013e30 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e1e:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8013e22:	d17f      	bne.n	8013f24 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013e24:	6820      	ldr	r0, [r4, #0]
 8013e26:	6842      	ldr	r2, [r0, #4]
 8013e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013e2c:	430a      	orrs	r2, r1
 8013e2e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013e30:	06d8      	lsls	r0, r3, #27
 8013e32:	d509      	bpl.n	8013e48 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013e34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013e36:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8013e3a:	d17b      	bne.n	8013f34 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013e3c:	6820      	ldr	r0, [r4, #0]
 8013e3e:	6882      	ldr	r2, [r0, #8]
 8013e40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013e44:	430a      	orrs	r2, r1
 8013e46:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013e48:	0699      	lsls	r1, r3, #26
 8013e4a:	d509      	bpl.n	8013e60 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013e4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013e4e:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8013e52:	d177      	bne.n	8013f44 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013e54:	6820      	ldr	r0, [r4, #0]
 8013e56:	6882      	ldr	r2, [r0, #8]
 8013e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013e5c:	430a      	orrs	r2, r1
 8013e5e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013e60:	065a      	lsls	r2, r3, #25
 8013e62:	d521      	bpl.n	8013ea8 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013e64:	4b46      	ldr	r3, [pc, #280]	; (8013f80 <UART_AdvFeatureConfig+0x1c0>)
 8013e66:	6822      	ldr	r2, [r4, #0]
 8013e68:	4846      	ldr	r0, [pc, #280]	; (8013f84 <UART_AdvFeatureConfig+0x1c4>)
 8013e6a:	4947      	ldr	r1, [pc, #284]	; (8013f88 <UART_AdvFeatureConfig+0x1c8>)
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	bf18      	it	ne
 8013e70:	4282      	cmpne	r2, r0
 8013e72:	bf14      	ite	ne
 8013e74:	2301      	movne	r3, #1
 8013e76:	2300      	moveq	r3, #0
 8013e78:	428a      	cmp	r2, r1
 8013e7a:	bf0c      	ite	eq
 8013e7c:	2300      	moveq	r3, #0
 8013e7e:	f003 0301 	andne.w	r3, r3, #1
 8013e82:	b113      	cbz	r3, 8013e8a <UART_AdvFeatureConfig+0xca>
 8013e84:	4b41      	ldr	r3, [pc, #260]	; (8013f8c <UART_AdvFeatureConfig+0x1cc>)
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d16b      	bne.n	8013f62 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013e8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013e8c:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8013e90:	d160      	bne.n	8013f54 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e92:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e94:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e98:	684b      	ldr	r3, [r1, #4]
 8013e9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013e9e:	ea43 0302 	orr.w	r3, r3, r2
 8013ea2:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013ea4:	d014      	beq.n	8013ed0 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ea8:	061b      	lsls	r3, r3, #24
 8013eaa:	d509      	bpl.n	8013ec0 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013eac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013eae:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8013eb2:	d118      	bne.n	8013ee6 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013eb4:	6821      	ldr	r1, [r4, #0]
 8013eb6:	684b      	ldr	r3, [r1, #4]
 8013eb8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	604b      	str	r3, [r1, #4]
}
 8013ec0:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8013ec2:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8013ec6:	4832      	ldr	r0, [pc, #200]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013ec8:	f7f1 fd2c 	bl	8005924 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ece:	e77c      	b.n	8013dca <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013ed0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013ed2:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8013ed6:	d14a      	bne.n	8013f6e <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013ed8:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013edc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8013ee0:	4302      	orrs	r2, r0
 8013ee2:	604a      	str	r2, [r1, #4]
 8013ee4:	e7e0      	b.n	8013ea8 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8013ee6:	f640 4136 	movw	r1, #3126	; 0xc36
 8013eea:	4829      	ldr	r0, [pc, #164]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013eec:	f7f1 fd1a 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013ef0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8013ef2:	e7df      	b.n	8013eb4 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8013ef4:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8013ef8:	4825      	ldr	r0, [pc, #148]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013efa:	f7f1 fd13 	bl	8005924 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013efe:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8013f02:	e769      	b.n	8013dd8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8013f04:	f640 4105 	movw	r1, #3077	; 0xc05
 8013f08:	4821      	ldr	r0, [pc, #132]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f0a:	f7f1 fd0b 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013f0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f12:	e76e      	b.n	8013df2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8013f14:	f640 410c 	movw	r1, #3084	; 0xc0c
 8013f18:	481d      	ldr	r0, [pc, #116]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f1a:	f7f1 fd03 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013f1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f22:	e773      	b.n	8013e0c <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8013f24:	f640 4113 	movw	r1, #3091	; 0xc13
 8013f28:	4819      	ldr	r0, [pc, #100]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f2a:	f7f1 fcfb 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f32:	e777      	b.n	8013e24 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8013f34:	f640 411a 	movw	r1, #3098	; 0xc1a
 8013f38:	4815      	ldr	r0, [pc, #84]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f3a:	f7f1 fcf3 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013f3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f42:	e77b      	b.n	8013e3c <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8013f44:	f640 4121 	movw	r1, #3105	; 0xc21
 8013f48:	4811      	ldr	r0, [pc, #68]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f4a:	f7f1 fceb 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013f4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f52:	e77f      	b.n	8013e54 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8013f54:	f640 4129 	movw	r1, #3113	; 0xc29
 8013f58:	480d      	ldr	r0, [pc, #52]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f5a:	f7f1 fce3 	bl	8005924 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013f5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013f60:	e797      	b.n	8013e92 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8013f62:	f640 4128 	movw	r1, #3112	; 0xc28
 8013f66:	480a      	ldr	r0, [pc, #40]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f68:	f7f1 fcdc 	bl	8005924 <assert_failed>
 8013f6c:	e78d      	b.n	8013e8a <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8013f6e:	f640 412e 	movw	r1, #3118	; 0xc2e
 8013f72:	4807      	ldr	r0, [pc, #28]	; (8013f90 <UART_AdvFeatureConfig+0x1d0>)
 8013f74:	f7f1 fcd6 	bl	8005924 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013f78:	6821      	ldr	r1, [r4, #0]
 8013f7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013f7c:	e7ac      	b.n	8013ed8 <UART_AdvFeatureConfig+0x118>
 8013f7e:	bf00      	nop
 8013f80:	40011000 	.word	0x40011000
 8013f84:	40004400 	.word	0x40004400
 8013f88:	40004800 	.word	0x40004800
 8013f8c:	40011400 	.word	0x40011400
 8013f90:	0802e5f4 	.word	0x0802e5f4

08013f94 <UART_WaitOnFlagUntilTimeout>:
{
 8013f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f9c:	4681      	mov	r9, r0
 8013f9e:	460f      	mov	r7, r1
 8013fa0:	4616      	mov	r6, r2
 8013fa2:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013fa4:	6805      	ldr	r5, [r0, #0]
 8013fa6:	e002      	b.n	8013fae <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8013fa8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013fac:	d10c      	bne.n	8013fc8 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013fae:	69ec      	ldr	r4, [r5, #28]
 8013fb0:	ea37 0304 	bics.w	r3, r7, r4
 8013fb4:	bf0c      	ite	eq
 8013fb6:	f04f 0c01 	moveq.w	ip, #1
 8013fba:	f04f 0c00 	movne.w	ip, #0
 8013fbe:	45b4      	cmp	ip, r6
 8013fc0:	d0f2      	beq.n	8013fa8 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8013fc2:	2000      	movs	r0, #0
}
 8013fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013fc8:	f7f5 f9de 	bl	8009388 <HAL_GetTick>
 8013fcc:	eba0 000a 	sub.w	r0, r0, sl
 8013fd0:	4540      	cmp	r0, r8
 8013fd2:	d82d      	bhi.n	8014030 <UART_WaitOnFlagUntilTimeout+0x9c>
 8013fd4:	f1b8 0f00 	cmp.w	r8, #0
 8013fd8:	d02a      	beq.n	8014030 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013fda:	f8d9 5000 	ldr.w	r5, [r9]
 8013fde:	682b      	ldr	r3, [r5, #0]
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	0759      	lsls	r1, r3, #29
 8013fe4:	d5e3      	bpl.n	8013fae <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013fe6:	69eb      	ldr	r3, [r5, #28]
 8013fe8:	051b      	lsls	r3, r3, #20
 8013fea:	d5e0      	bpl.n	8013fae <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013ff0:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ff2:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ffa:	e842 3100 	strex	r1, r3, [r2]
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d1f7      	bne.n	8013ff2 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014002:	f102 0308 	add.w	r3, r2, #8
 8014006:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801400a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801400e:	f102 0008 	add.w	r0, r2, #8
 8014012:	e840 3100 	strex	r1, r3, [r0]
 8014016:	2900      	cmp	r1, #0
 8014018:	d1f3      	bne.n	8014002 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 801401a:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 801401c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 801401e:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8014022:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8014026:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801402a:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 801402e:	e7c9      	b.n	8013fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8014030:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014034:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801403c:	e842 3100 	strex	r1, r3, [r2]
 8014040:	2900      	cmp	r1, #0
 8014042:	d1f7      	bne.n	8014034 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014044:	f102 0308 	add.w	r3, r2, #8
 8014048:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801404c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014050:	f102 0008 	add.w	r0, r2, #8
 8014054:	e840 3100 	strex	r1, r3, [r0]
 8014058:	2900      	cmp	r1, #0
 801405a:	d1f3      	bne.n	8014044 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 801405c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 801405e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8014060:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8014064:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8014068:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 801406c:	e7aa      	b.n	8013fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 801406e:	bf00      	nop

08014070 <HAL_UART_Transmit>:
{
 8014070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014074:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8014076:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8014078:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801407a:	2b20      	cmp	r3, #32
 801407c:	d14b      	bne.n	8014116 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 801407e:	460d      	mov	r5, r1
 8014080:	2900      	cmp	r1, #0
 8014082:	d044      	beq.n	801410e <HAL_UART_Transmit+0x9e>
 8014084:	fab2 f982 	clz	r9, r2
 8014088:	4617      	mov	r7, r2
 801408a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801408e:	2a00      	cmp	r2, #0
 8014090:	d03d      	beq.n	801410e <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8014092:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8014096:	4604      	mov	r4, r0
 8014098:	2b01      	cmp	r3, #1
 801409a:	d03c      	beq.n	8014116 <HAL_UART_Transmit+0xa6>
 801409c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801409e:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 80140a2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80140a6:	2321      	movs	r3, #33	; 0x21
 80140a8:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80140aa:	f7f5 f96d 	bl	8009388 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140ae:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80140b0:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 80140b2:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80140ba:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140be:	d040      	beq.n	8014142 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 80140c0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 80140c4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80140c6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80140c8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80140cc:	b973      	cbnz	r3, 80140ec <HAL_UART_Transmit+0x7c>
 80140ce:	e02a      	b.n	8014126 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80140d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80140d8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80140dc:	3a01      	subs	r2, #1
 80140de:	b292      	uxth	r2, r2
 80140e0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80140e4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80140e8:	b292      	uxth	r2, r2
 80140ea:	b1e2      	cbz	r2, 8014126 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80140ec:	4643      	mov	r3, r8
 80140ee:	2200      	movs	r2, #0
 80140f0:	2180      	movs	r1, #128	; 0x80
 80140f2:	4620      	mov	r0, r4
 80140f4:	9600      	str	r6, [sp, #0]
 80140f6:	f7ff ff4d 	bl	8013f94 <UART_WaitOnFlagUntilTimeout>
 80140fa:	b980      	cbnz	r0, 801411e <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80140fc:	2d00      	cmp	r5, #0
 80140fe:	d1e7      	bne.n	80140d0 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014100:	f839 3b02 	ldrh.w	r3, [r9], #2
 8014104:	6822      	ldr	r2, [r4, #0]
 8014106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801410a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 801410c:	e7e4      	b.n	80140d8 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 801410e:	2001      	movs	r0, #1
}
 8014110:	b003      	add	sp, #12
 8014112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8014116:	2002      	movs	r0, #2
}
 8014118:	b003      	add	sp, #12
 801411a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 801411e:	2003      	movs	r0, #3
}
 8014120:	b003      	add	sp, #12
 8014122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014126:	4643      	mov	r3, r8
 8014128:	2200      	movs	r2, #0
 801412a:	2140      	movs	r1, #64	; 0x40
 801412c:	4620      	mov	r0, r4
 801412e:	9600      	str	r6, [sp, #0]
 8014130:	f7ff ff30 	bl	8013f94 <UART_WaitOnFlagUntilTimeout>
 8014134:	2800      	cmp	r0, #0
 8014136:	d1f2      	bne.n	801411e <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8014138:	2320      	movs	r3, #32
 801413a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 801413c:	b003      	add	sp, #12
 801413e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014142:	6923      	ldr	r3, [r4, #16]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1bb      	bne.n	80140c0 <HAL_UART_Transmit+0x50>
 8014148:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 801414a:	461d      	mov	r5, r3
 801414c:	e7b8      	b.n	80140c0 <HAL_UART_Transmit+0x50>
 801414e:	bf00      	nop

08014150 <UART_CheckIdleState>:
{
 8014150:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014152:	2600      	movs	r6, #0
{
 8014154:	4604      	mov	r4, r0
 8014156:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014158:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 801415c:	f7f5 f914 	bl	8009388 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014160:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8014162:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	0712      	lsls	r2, r2, #28
 8014168:	d40c      	bmi.n	8014184 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	075b      	lsls	r3, r3, #29
 801416e:	d418      	bmi.n	80141a2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014170:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8014172:	2220      	movs	r2, #32
  return HAL_OK;
 8014174:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8014176:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8014178:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 801417c:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801417e:	6623      	str	r3, [r4, #96]	; 0x60
}
 8014180:	b002      	add	sp, #8
 8014182:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014184:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8014188:	4603      	mov	r3, r0
 801418a:	4632      	mov	r2, r6
 801418c:	4620      	mov	r0, r4
 801418e:	9100      	str	r1, [sp, #0]
 8014190:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014194:	f7ff fefe 	bl	8013f94 <UART_WaitOnFlagUntilTimeout>
 8014198:	b978      	cbnz	r0, 80141ba <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	075b      	lsls	r3, r3, #29
 80141a0:	d5e6      	bpl.n	8014170 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80141a2:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 80141a6:	462b      	mov	r3, r5
 80141a8:	2200      	movs	r2, #0
 80141aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80141ae:	9000      	str	r0, [sp, #0]
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7ff feef 	bl	8013f94 <UART_WaitOnFlagUntilTimeout>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	d0da      	beq.n	8014170 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80141ba:	2003      	movs	r0, #3
}
 80141bc:	b002      	add	sp, #8
 80141be:	bd70      	pop	{r4, r5, r6, pc}

080141c0 <HAL_UART_Init>:
  if (huart == NULL)
 80141c0:	2800      	cmp	r0, #0
 80141c2:	f000 8099 	beq.w	80142f8 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80141c6:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80141c8:	6802      	ldr	r2, [r0, #0]
{
 80141ca:	b510      	push	{r4, lr}
 80141cc:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d051      	beq.n	8014276 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80141d2:	4b4d      	ldr	r3, [pc, #308]	; (8014308 <HAL_UART_Init+0x148>)
 80141d4:	484d      	ldr	r0, [pc, #308]	; (801430c <HAL_UART_Init+0x14c>)
 80141d6:	494e      	ldr	r1, [pc, #312]	; (8014310 <HAL_UART_Init+0x150>)
 80141d8:	429a      	cmp	r2, r3
 80141da:	bf18      	it	ne
 80141dc:	4282      	cmpne	r2, r0
 80141de:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80141e2:	bf14      	ite	ne
 80141e4:	2301      	movne	r3, #1
 80141e6:	2300      	moveq	r3, #0
 80141e8:	428a      	cmp	r2, r1
 80141ea:	bf0c      	ite	eq
 80141ec:	2300      	moveq	r3, #0
 80141ee:	f003 0301 	andne.w	r3, r3, #1
 80141f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141f6:	4282      	cmp	r2, r0
 80141f8:	bf0c      	ite	eq
 80141fa:	2300      	moveq	r3, #0
 80141fc:	f003 0301 	andne.w	r3, r3, #1
 8014200:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8014204:	428a      	cmp	r2, r1
 8014206:	bf0c      	ite	eq
 8014208:	2300      	moveq	r3, #0
 801420a:	f003 0301 	andne.w	r3, r3, #1
 801420e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8014212:	4282      	cmp	r2, r0
 8014214:	bf0c      	ite	eq
 8014216:	2300      	moveq	r3, #0
 8014218:	f003 0301 	andne.w	r3, r3, #1
 801421c:	428a      	cmp	r2, r1
 801421e:	bf0c      	ite	eq
 8014220:	2300      	moveq	r3, #0
 8014222:	f003 0301 	andne.w	r3, r3, #1
 8014226:	b113      	cbz	r3, 801422e <HAL_UART_Init+0x6e>
 8014228:	4b3a      	ldr	r3, [pc, #232]	; (8014314 <HAL_UART_Init+0x154>)
 801422a:	429a      	cmp	r2, r3
 801422c:	d166      	bne.n	80142fc <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 801422e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014230:	2b00      	cmp	r3, #0
 8014232:	d057      	beq.n	80142e4 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8014234:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8014236:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014238:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801423a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 801423c:	6813      	ldr	r3, [r2, #0]
 801423e:	f023 0301 	bic.w	r3, r3, #1
 8014242:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014244:	f7ff fbd8 	bl	80139f8 <UART_SetConfig>
 8014248:	2801      	cmp	r0, #1
 801424a:	d049      	beq.n	80142e0 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801424c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801424e:	2b00      	cmp	r3, #0
 8014250:	d14e      	bne.n	80142f0 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014252:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8014254:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014256:	685a      	ldr	r2, [r3, #4]
 8014258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801425c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801425e:	689a      	ldr	r2, [r3, #8]
 8014260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014264:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	f042 0201 	orr.w	r2, r2, #1
}
 801426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8014270:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8014272:	f7ff bf6d 	b.w	8014150 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8014276:	4b24      	ldr	r3, [pc, #144]	; (8014308 <HAL_UART_Init+0x148>)
 8014278:	4824      	ldr	r0, [pc, #144]	; (801430c <HAL_UART_Init+0x14c>)
 801427a:	4925      	ldr	r1, [pc, #148]	; (8014310 <HAL_UART_Init+0x150>)
 801427c:	429a      	cmp	r2, r3
 801427e:	bf18      	it	ne
 8014280:	4282      	cmpne	r2, r0
 8014282:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8014286:	bf14      	ite	ne
 8014288:	2301      	movne	r3, #1
 801428a:	2300      	moveq	r3, #0
 801428c:	428a      	cmp	r2, r1
 801428e:	bf0c      	ite	eq
 8014290:	2300      	moveq	r3, #0
 8014292:	f003 0301 	andne.w	r3, r3, #1
 8014296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801429a:	4282      	cmp	r2, r0
 801429c:	bf0c      	ite	eq
 801429e:	2300      	moveq	r3, #0
 80142a0:	f003 0301 	andne.w	r3, r3, #1
 80142a4:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80142a8:	428a      	cmp	r2, r1
 80142aa:	bf0c      	ite	eq
 80142ac:	2300      	moveq	r3, #0
 80142ae:	f003 0301 	andne.w	r3, r3, #1
 80142b2:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80142b6:	4282      	cmp	r2, r0
 80142b8:	bf0c      	ite	eq
 80142ba:	2300      	moveq	r3, #0
 80142bc:	f003 0301 	andne.w	r3, r3, #1
 80142c0:	428a      	cmp	r2, r1
 80142c2:	bf0c      	ite	eq
 80142c4:	2300      	moveq	r3, #0
 80142c6:	f003 0301 	andne.w	r3, r3, #1
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d0af      	beq.n	801422e <HAL_UART_Init+0x6e>
 80142ce:	4b11      	ldr	r3, [pc, #68]	; (8014314 <HAL_UART_Init+0x154>)
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d0ac      	beq.n	801422e <HAL_UART_Init+0x6e>
 80142d4:	f240 1131 	movw	r1, #305	; 0x131
 80142d8:	480f      	ldr	r0, [pc, #60]	; (8014318 <HAL_UART_Init+0x158>)
 80142da:	f7f1 fb23 	bl	8005924 <assert_failed>
 80142de:	e7a6      	b.n	801422e <HAL_UART_Init+0x6e>
}
 80142e0:	2001      	movs	r0, #1
 80142e2:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 80142e4:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80142e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80142ea:	f7f3 fc55 	bl	8007b98 <HAL_UART_MspInit>
 80142ee:	e7a1      	b.n	8014234 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 80142f0:	4620      	mov	r0, r4
 80142f2:	f7ff fd65 	bl	8013dc0 <UART_AdvFeatureConfig>
 80142f6:	e7ac      	b.n	8014252 <HAL_UART_Init+0x92>
}
 80142f8:	2001      	movs	r0, #1
 80142fa:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80142fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8014300:	4805      	ldr	r0, [pc, #20]	; (8014318 <HAL_UART_Init+0x158>)
 8014302:	f7f1 fb0f 	bl	8005924 <assert_failed>
 8014306:	e792      	b.n	801422e <HAL_UART_Init+0x6e>
 8014308:	40011000 	.word	0x40011000
 801430c:	40004400 	.word	0x40004400
 8014310:	40004800 	.word	0x40004800
 8014314:	40007c00 	.word	0x40007c00
 8014318:	0802e5f4 	.word	0x0802e5f4

0801431c <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 801431c:	2800      	cmp	r0, #0
 801431e:	d04a      	beq.n	80143b6 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8014320:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	460e      	mov	r6, r1
 8014328:	4604      	mov	r4, r0
 801432a:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 801432c:	d13d      	bne.n	80143aa <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 801432e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014330:	2b00      	cmp	r3, #0
 8014332:	d034      	beq.n	801439e <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8014334:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8014336:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014338:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801433a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 801433c:	6813      	ldr	r3, [r2, #0]
 801433e:	f023 0301 	bic.w	r3, r3, #1
 8014342:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014344:	f7ff fb58 	bl	80139f8 <UART_SetConfig>
 8014348:	2801      	cmp	r0, #1
 801434a:	d026      	beq.n	801439a <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801434c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801434e:	bb03      	cbnz	r3, 8014392 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014350:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8014352:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014356:	685a      	ldr	r2, [r3, #4]
 8014358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801435c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801435e:	689a      	ldr	r2, [r3, #8]
 8014360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014364:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8014366:	d00d      	beq.n	8014384 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8014368:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801436a:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 801436c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014370:	4315      	orrs	r5, r2
 8014372:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8014374:	681a      	ldr	r2, [r3, #0]
 8014376:	f042 0201 	orr.w	r2, r2, #1
}
 801437a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 801437e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8014380:	f7ff bee6 	b.w	8014150 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8014384:	6859      	ldr	r1, [r3, #4]
 8014386:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801438a:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801438e:	605e      	str	r6, [r3, #4]
 8014390:	e7ea      	b.n	8014368 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8014392:	4620      	mov	r0, r4
 8014394:	f7ff fd14 	bl	8013dc0 <UART_AdvFeatureConfig>
 8014398:	e7da      	b.n	8014350 <HAL_MultiProcessor_Init+0x34>
}
 801439a:	2001      	movs	r0, #1
 801439c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801439e:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80143a0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80143a4:	f7f3 fbf8 	bl	8007b98 <HAL_UART_MspInit>
 80143a8:	e7c4      	b.n	8014334 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80143aa:	f240 211d 	movw	r1, #541	; 0x21d
 80143ae:	4803      	ldr	r0, [pc, #12]	; (80143bc <HAL_MultiProcessor_Init+0xa0>)
 80143b0:	f7f1 fab8 	bl	8005924 <assert_failed>
 80143b4:	e7bb      	b.n	801432e <HAL_MultiProcessor_Init+0x12>
}
 80143b6:	2001      	movs	r0, #1
 80143b8:	4770      	bx	lr
 80143ba:	bf00      	nop
 80143bc:	0802e5f4 	.word	0x0802e5f4

080143c0 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80143c0:	6883      	ldr	r3, [r0, #8]
{
 80143c2:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80143c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80143c8:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 80143cc:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80143ce:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80143d2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80143d6:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80143d8:	d04f      	beq.n	801447a <UART_Start_Receive_IT+0xba>
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d043      	beq.n	8014466 <UART_Start_Receive_IT+0xa6>
 80143de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80143e2:	d057      	beq.n	8014494 <UART_Start_Receive_IT+0xd4>
 80143e4:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143e8:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80143ea:	2322      	movs	r3, #34	; 0x22
 80143ec:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143ee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80143f2:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143f4:	f102 0308 	add.w	r3, r2, #8
 80143f8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143fc:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014400:	f102 0408 	add.w	r4, r2, #8
 8014404:	e844 3100 	strex	r1, r3, [r4]
 8014408:	2900      	cmp	r1, #0
 801440a:	d1f3      	bne.n	80143f4 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801440c:	6883      	ldr	r3, [r0, #8]
 801440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014412:	d011      	beq.n	8014438 <UART_Start_Receive_IT+0x78>
 8014414:	4c23      	ldr	r4, [pc, #140]	; (80144a4 <UART_Start_Receive_IT+0xe4>)
 8014416:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8014418:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 801441c:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801441e:	b18b      	cbz	r3, 8014444 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014420:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014424:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014428:	e842 3100 	strex	r1, r3, [r2]
 801442c:	2900      	cmp	r1, #0
 801442e:	d1f7      	bne.n	8014420 <UART_Start_Receive_IT+0x60>
}
 8014430:	2000      	movs	r0, #0
 8014432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014436:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014438:	6903      	ldr	r3, [r0, #16]
 801443a:	bb33      	cbnz	r3, 801448a <UART_Start_Receive_IT+0xca>
 801443c:	491a      	ldr	r1, [pc, #104]	; (80144a8 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 801443e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8014442:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014444:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014448:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801444c:	e842 3100 	strex	r1, r3, [r2]
 8014450:	2900      	cmp	r1, #0
 8014452:	d0ed      	beq.n	8014430 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014454:	e852 3f00 	ldrex	r3, [r2]
 8014458:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801445c:	e842 3100 	strex	r1, r3, [r2]
 8014460:	2900      	cmp	r1, #0
 8014462:	d1ef      	bne.n	8014444 <UART_Start_Receive_IT+0x84>
 8014464:	e7e4      	b.n	8014430 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8014466:	6903      	ldr	r3, [r0, #16]
 8014468:	b91b      	cbnz	r3, 8014472 <UART_Start_Receive_IT+0xb2>
 801446a:	23ff      	movs	r3, #255	; 0xff
 801446c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014470:	e7ba      	b.n	80143e8 <UART_Start_Receive_IT+0x28>
 8014472:	237f      	movs	r3, #127	; 0x7f
 8014474:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014478:	e7b6      	b.n	80143e8 <UART_Start_Receive_IT+0x28>
 801447a:	6903      	ldr	r3, [r0, #16]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d1f4      	bne.n	801446a <UART_Start_Receive_IT+0xaa>
 8014480:	f240 13ff 	movw	r3, #511	; 0x1ff
 8014484:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014488:	e7ae      	b.n	80143e8 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 801448a:	4b06      	ldr	r3, [pc, #24]	; (80144a4 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 801448c:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8014490:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014492:	e7c5      	b.n	8014420 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8014494:	6903      	ldr	r3, [r0, #16]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d0eb      	beq.n	8014472 <UART_Start_Receive_IT+0xb2>
 801449a:	233f      	movs	r3, #63	; 0x3f
 801449c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80144a0:	e7a2      	b.n	80143e8 <UART_Start_Receive_IT+0x28>
 80144a2:	bf00      	nop
 80144a4:	08013551 	.word	0x08013551
 80144a8:	080135f1 	.word	0x080135f1

080144ac <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80144ac:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80144ae:	2b20      	cmp	r3, #32
 80144b0:	d11e      	bne.n	80144f0 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 80144b2:	b1d9      	cbz	r1, 80144ec <HAL_UART_Receive_IT+0x40>
 80144b4:	fab2 f382 	clz	r3, r2
 80144b8:	095b      	lsrs	r3, r3, #5
 80144ba:	b1ba      	cbz	r2, 80144ec <HAL_UART_Receive_IT+0x40>
{
 80144bc:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80144be:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80144c2:	2c01      	cmp	r4, #1
 80144c4:	d016      	beq.n	80144f4 <HAL_UART_Receive_IT+0x48>
 80144c6:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80144c8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144ca:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80144cc:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80144d0:	6863      	ldr	r3, [r4, #4]
 80144d2:	021b      	lsls	r3, r3, #8
 80144d4:	d507      	bpl.n	80144e6 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144d6:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80144da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144de:	e844 3500 	strex	r5, r3, [r4]
 80144e2:	2d00      	cmp	r5, #0
 80144e4:	d1f7      	bne.n	80144d6 <HAL_UART_Receive_IT+0x2a>
}
 80144e6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80144e8:	f7ff bf6a 	b.w	80143c0 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80144ec:	2001      	movs	r0, #1
}
 80144ee:	4770      	bx	lr
    return HAL_BUSY;
 80144f0:	2002      	movs	r0, #2
 80144f2:	4770      	bx	lr
 80144f4:	2002      	movs	r0, #2
}
 80144f6:	bc30      	pop	{r4, r5}
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop

080144fc <UART_Start_Receive_DMA>:
{
 80144fc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144fe:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014500:	2500      	movs	r5, #0
{
 8014502:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8014504:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014506:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 801450a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801450e:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8014510:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014512:	b168      	cbz	r0, 8014530 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014514:	4e1f      	ldr	r6, [pc, #124]	; (8014594 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014516:	4613      	mov	r3, r2
 8014518:	460a      	mov	r2, r1
 801451a:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801451c:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801451e:	4e1e      	ldr	r6, [pc, #120]	; (8014598 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014520:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8014522:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014524:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014526:	4e1d      	ldr	r6, [pc, #116]	; (801459c <UART_Start_Receive_DMA+0xa0>)
 8014528:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801452a:	f7f6 f8f7 	bl	800a71c <HAL_DMA_Start_IT>
 801452e:	bb40      	cbnz	r0, 8014582 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8014530:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014532:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8014534:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014538:	b14b      	cbz	r3, 801454e <UART_Start_Receive_DMA+0x52>
 801453a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801453c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014544:	e843 2100 	strex	r1, r2, [r3]
 8014548:	2900      	cmp	r1, #0
 801454a:	d1f7      	bne.n	801453c <UART_Start_Receive_DMA+0x40>
 801454c:	e000      	b.n	8014550 <UART_Start_Receive_DMA+0x54>
 801454e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014550:	f103 0208 	add.w	r2, r3, #8
 8014554:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014558:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801455c:	f103 0008 	add.w	r0, r3, #8
 8014560:	e840 2100 	strex	r1, r2, [r0]
 8014564:	2900      	cmp	r1, #0
 8014566:	d1f3      	bne.n	8014550 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014568:	f103 0208 	add.w	r2, r3, #8
 801456c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014574:	f103 0108 	add.w	r1, r3, #8
 8014578:	e841 2000 	strex	r0, r2, [r1]
 801457c:	2800      	cmp	r0, #0
 801457e:	d1f3      	bne.n	8014568 <UART_Start_Receive_DMA+0x6c>
}
 8014580:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014582:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8014584:	2320      	movs	r3, #32
      return HAL_ERROR;
 8014586:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8014588:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801458c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8014590:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8014592:	bd70      	pop	{r4, r5, r6, pc}
 8014594:	080136ad 	.word	0x080136ad
 8014598:	08013691 	.word	0x08013691
 801459c:	08013329 	.word	0x08013329

080145a0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80145a0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80145a2:	2b20      	cmp	r3, #32
 80145a4:	d11e      	bne.n	80145e4 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 80145a6:	b1d9      	cbz	r1, 80145e0 <HAL_UART_Receive_DMA+0x40>
 80145a8:	fab2 f382 	clz	r3, r2
 80145ac:	095b      	lsrs	r3, r3, #5
 80145ae:	b1ba      	cbz	r2, 80145e0 <HAL_UART_Receive_DMA+0x40>
{
 80145b0:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80145b2:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80145b6:	2c01      	cmp	r4, #1
 80145b8:	d016      	beq.n	80145e8 <HAL_UART_Receive_DMA+0x48>
 80145ba:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145bc:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145be:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80145c0:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145c4:	6863      	ldr	r3, [r4, #4]
 80145c6:	021b      	lsls	r3, r3, #8
 80145c8:	d507      	bpl.n	80145da <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ca:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145d2:	e844 3500 	strex	r5, r3, [r4]
 80145d6:	2d00      	cmp	r5, #0
 80145d8:	d1f7      	bne.n	80145ca <HAL_UART_Receive_DMA+0x2a>
}
 80145da:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80145dc:	f7ff bf8e 	b.w	80144fc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80145e0:	2001      	movs	r0, #1
}
 80145e2:	4770      	bx	lr
    return HAL_BUSY;
 80145e4:	2002      	movs	r0, #2
 80145e6:	4770      	bx	lr
 80145e8:	2002      	movs	r0, #2
}
 80145ea:	bc30      	pop	{r4, r5}
 80145ec:	4770      	bx	lr
 80145ee:	bf00      	nop

080145f0 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80145f0:	2800      	cmp	r0, #0
 80145f2:	f000 808a 	beq.w	801470a <HAL_RS485Ex_Init+0x11a>
{
 80145f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80145fa:	4c47      	ldr	r4, [pc, #284]	; (8014718 <HAL_RS485Ex_Init+0x128>)
 80145fc:	4617      	mov	r7, r2
 80145fe:	461d      	mov	r5, r3
 8014600:	4a46      	ldr	r2, [pc, #280]	; (801471c <HAL_RS485Ex_Init+0x12c>)
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	460e      	mov	r6, r1
 8014606:	4680      	mov	r8, r0
 8014608:	42a3      	cmp	r3, r4
 801460a:	bf18      	it	ne
 801460c:	4293      	cmpne	r3, r2
 801460e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014612:	bf14      	ite	ne
 8014614:	2401      	movne	r4, #1
 8014616:	2400      	moveq	r4, #0
 8014618:	4293      	cmp	r3, r2
 801461a:	bf0c      	ite	eq
 801461c:	2400      	moveq	r4, #0
 801461e:	f004 0401 	andne.w	r4, r4, #1
 8014622:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014626:	4293      	cmp	r3, r2
 8014628:	bf0c      	ite	eq
 801462a:	2400      	moveq	r4, #0
 801462c:	f004 0401 	andne.w	r4, r4, #1
 8014630:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014634:	4293      	cmp	r3, r2
 8014636:	bf0c      	ite	eq
 8014638:	2400      	moveq	r4, #0
 801463a:	f004 0401 	andne.w	r4, r4, #1
 801463e:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8014642:	4293      	cmp	r3, r2
 8014644:	bf0c      	ite	eq
 8014646:	2400      	moveq	r4, #0
 8014648:	f004 0401 	andne.w	r4, r4, #1
 801464c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8014650:	4293      	cmp	r3, r2
 8014652:	bf0c      	ite	eq
 8014654:	2400      	moveq	r4, #0
 8014656:	f004 0401 	andne.w	r4, r4, #1
 801465a:	b11c      	cbz	r4, 8014664 <HAL_RS485Ex_Init+0x74>
 801465c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014660:	4293      	cmp	r3, r2
 8014662:	d154      	bne.n	801470e <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8014664:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8014668:	d14a      	bne.n	8014700 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801466a:	2f1f      	cmp	r7, #31
 801466c:	d843      	bhi.n	80146f6 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 801466e:	2d1f      	cmp	r5, #31
 8014670:	d83c      	bhi.n	80146ec <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8014672:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8014676:	b39b      	cbz	r3, 80146e0 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8014678:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 801467c:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801467e:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8014680:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8014684:	6813      	ldr	r3, [r2, #0]
 8014686:	f023 0301 	bic.w	r3, r3, #1
 801468a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801468c:	f7ff f9b4 	bl	80139f8 <UART_SetConfig>
 8014690:	2801      	cmp	r0, #1
 8014692:	d022      	beq.n	80146da <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014694:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014698:	b9db      	cbnz	r3, 80146d2 <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801469a:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801469e:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80146a0:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80146a2:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80146a4:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80146a8:	4d1d      	ldr	r5, [pc, #116]	; (8014720 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80146aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80146ae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80146b0:	6899      	ldr	r1, [r3, #8]
 80146b2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80146b6:	430e      	orrs	r6, r1
 80146b8:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	4015      	ands	r5, r2
 80146be:	432f      	orrs	r7, r5
 80146c0:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	f042 0201 	orr.w	r2, r2, #1
}
 80146c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 80146cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80146ce:	f7ff bd3f 	b.w	8014150 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80146d2:	4640      	mov	r0, r8
 80146d4:	f7ff fb74 	bl	8013dc0 <UART_AdvFeatureConfig>
 80146d8:	e7df      	b.n	801469a <HAL_RS485Ex_Init+0xaa>
}
 80146da:	2001      	movs	r0, #1
 80146dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 80146e0:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 80146e2:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80146e6:	f7f3 fa57 	bl	8007b98 <HAL_UART_MspInit>
 80146ea:	e7c5      	b.n	8014678 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80146ec:	21aa      	movs	r1, #170	; 0xaa
 80146ee:	480d      	ldr	r0, [pc, #52]	; (8014724 <HAL_RS485Ex_Init+0x134>)
 80146f0:	f7f1 f918 	bl	8005924 <assert_failed>
 80146f4:	e7bd      	b.n	8014672 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80146f6:	21a7      	movs	r1, #167	; 0xa7
 80146f8:	480a      	ldr	r0, [pc, #40]	; (8014724 <HAL_RS485Ex_Init+0x134>)
 80146fa:	f7f1 f913 	bl	8005924 <assert_failed>
 80146fe:	e7b6      	b.n	801466e <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8014700:	21a4      	movs	r1, #164	; 0xa4
 8014702:	4808      	ldr	r0, [pc, #32]	; (8014724 <HAL_RS485Ex_Init+0x134>)
 8014704:	f7f1 f90e 	bl	8005924 <assert_failed>
 8014708:	e7af      	b.n	801466a <HAL_RS485Ex_Init+0x7a>
}
 801470a:	2001      	movs	r0, #1
 801470c:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 801470e:	21a1      	movs	r1, #161	; 0xa1
 8014710:	4804      	ldr	r0, [pc, #16]	; (8014724 <HAL_RS485Ex_Init+0x134>)
 8014712:	f7f1 f907 	bl	8005924 <assert_failed>
 8014716:	e7a5      	b.n	8014664 <HAL_RS485Ex_Init+0x74>
 8014718:	40011000 	.word	0x40011000
 801471c:	40004400 	.word	0x40004400
 8014720:	fc00ffff 	.word	0xfc00ffff
 8014724:	0802e644 	.word	0x0802e644

08014728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014728:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801472a:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801472c:	4a11      	ldr	r2, [pc, #68]	; (8014774 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 801472e:	9301      	str	r3, [sp, #4]
 8014730:	e002      	b.n	8014738 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014732:	6903      	ldr	r3, [r0, #16]
 8014734:	2b00      	cmp	r3, #0
 8014736:	db07      	blt.n	8014748 <USB_CoreReset+0x20>
    if (++count > 200000U)
 8014738:	9b01      	ldr	r3, [sp, #4]
 801473a:	3301      	adds	r3, #1
 801473c:	4293      	cmp	r3, r2
 801473e:	9301      	str	r3, [sp, #4]
 8014740:	d9f7      	bls.n	8014732 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8014742:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8014744:	b002      	add	sp, #8
 8014746:	4770      	bx	lr
  count = 0U;
 8014748:	2300      	movs	r3, #0
    if (++count > 200000U)
 801474a:	4a0a      	ldr	r2, [pc, #40]	; (8014774 <USB_CoreReset+0x4c>)
  count = 0U;
 801474c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801474e:	6903      	ldr	r3, [r0, #16]
 8014750:	f043 0301 	orr.w	r3, r3, #1
 8014754:	6103      	str	r3, [r0, #16]
 8014756:	e003      	b.n	8014760 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014758:	6903      	ldr	r3, [r0, #16]
 801475a:	f013 0301 	ands.w	r3, r3, #1
 801475e:	d005      	beq.n	801476c <USB_CoreReset+0x44>
    if (++count > 200000U)
 8014760:	9b01      	ldr	r3, [sp, #4]
 8014762:	3301      	adds	r3, #1
 8014764:	4293      	cmp	r3, r2
 8014766:	9301      	str	r3, [sp, #4]
 8014768:	d9f6      	bls.n	8014758 <USB_CoreReset+0x30>
 801476a:	e7ea      	b.n	8014742 <USB_CoreReset+0x1a>
  return HAL_OK;
 801476c:	4618      	mov	r0, r3
}
 801476e:	b002      	add	sp, #8
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	00030d40 	.word	0x00030d40

08014778 <USB_CoreInit>:
{
 8014778:	b084      	sub	sp, #16
 801477a:	b510      	push	{r4, lr}
 801477c:	f10d 0c0c 	add.w	ip, sp, #12
 8014780:	4604      	mov	r4, r0
 8014782:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014786:	9b08      	ldr	r3, [sp, #32]
 8014788:	2b01      	cmp	r3, #1
 801478a:	d122      	bne.n	80147d2 <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801478c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801478e:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8014792:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014794:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8014798:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801479a:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801479c:	68c2      	ldr	r2, [r0, #12]
 801479e:	ea03 0302 	and.w	r3, r3, r2
 80147a2:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80147a4:	68c3      	ldr	r3, [r0, #12]
 80147a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80147aa:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80147ac:	d01c      	beq.n	80147e8 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 80147ae:	4620      	mov	r0, r4
 80147b0:	f7ff ffba 	bl	8014728 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80147b4:	9b06      	ldr	r3, [sp, #24]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d107      	bne.n	80147ca <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80147ba:	68a3      	ldr	r3, [r4, #8]
 80147bc:	f043 0306 	orr.w	r3, r3, #6
 80147c0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80147c2:	68a3      	ldr	r3, [r4, #8]
 80147c4:	f043 0320 	orr.w	r3, r3, #32
 80147c8:	60a3      	str	r3, [r4, #8]
}
 80147ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ce:	b004      	add	sp, #16
 80147d0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80147d2:	68c3      	ldr	r3, [r0, #12]
 80147d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147d8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80147da:	f7ff ffa5 	bl	8014728 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80147de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80147e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80147e6:	e7e5      	b.n	80147b4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80147e8:	68c3      	ldr	r3, [r0, #12]
 80147ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80147ee:	60c3      	str	r3, [r0, #12]
 80147f0:	e7dd      	b.n	80147ae <USB_CoreInit+0x36>
 80147f2:	bf00      	nop

080147f4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80147f4:	2a02      	cmp	r2, #2
{
 80147f6:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80147f8:	d00b      	beq.n	8014812 <USB_SetTurnaroundTime+0x1e>
 80147fa:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80147fe:	68d9      	ldr	r1, [r3, #12]
}
 8014800:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014802:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8014806:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014808:	68da      	ldr	r2, [r3, #12]
 801480a:	ea42 020c 	orr.w	r2, r2, ip
 801480e:	60da      	str	r2, [r3, #12]
}
 8014810:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014812:	4a23      	ldr	r2, [pc, #140]	; (80148a0 <USB_SetTurnaroundTime+0xac>)
 8014814:	4823      	ldr	r0, [pc, #140]	; (80148a4 <USB_SetTurnaroundTime+0xb0>)
 8014816:	440a      	add	r2, r1
 8014818:	4282      	cmp	r2, r0
 801481a:	d92c      	bls.n	8014876 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801481c:	4a22      	ldr	r2, [pc, #136]	; (80148a8 <USB_SetTurnaroundTime+0xb4>)
 801481e:	4823      	ldr	r0, [pc, #140]	; (80148ac <USB_SetTurnaroundTime+0xb8>)
 8014820:	440a      	add	r2, r1
 8014822:	4282      	cmp	r2, r0
 8014824:	d92a      	bls.n	801487c <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014826:	4a22      	ldr	r2, [pc, #136]	; (80148b0 <USB_SetTurnaroundTime+0xbc>)
 8014828:	4822      	ldr	r0, [pc, #136]	; (80148b4 <USB_SetTurnaroundTime+0xc0>)
 801482a:	440a      	add	r2, r1
 801482c:	4282      	cmp	r2, r0
 801482e:	d928      	bls.n	8014882 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014830:	4a21      	ldr	r2, [pc, #132]	; (80148b8 <USB_SetTurnaroundTime+0xc4>)
 8014832:	4822      	ldr	r0, [pc, #136]	; (80148bc <USB_SetTurnaroundTime+0xc8>)
 8014834:	440a      	add	r2, r1
 8014836:	4282      	cmp	r2, r0
 8014838:	d326      	bcc.n	8014888 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801483a:	4a21      	ldr	r2, [pc, #132]	; (80148c0 <USB_SetTurnaroundTime+0xcc>)
 801483c:	4821      	ldr	r0, [pc, #132]	; (80148c4 <USB_SetTurnaroundTime+0xd0>)
 801483e:	440a      	add	r2, r1
 8014840:	4282      	cmp	r2, r0
 8014842:	d924      	bls.n	801488e <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014844:	4a20      	ldr	r2, [pc, #128]	; (80148c8 <USB_SetTurnaroundTime+0xd4>)
 8014846:	4821      	ldr	r0, [pc, #132]	; (80148cc <USB_SetTurnaroundTime+0xd8>)
 8014848:	440a      	add	r2, r1
 801484a:	4282      	cmp	r2, r0
 801484c:	d322      	bcc.n	8014894 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801484e:	4a20      	ldr	r2, [pc, #128]	; (80148d0 <USB_SetTurnaroundTime+0xdc>)
 8014850:	4820      	ldr	r0, [pc, #128]	; (80148d4 <USB_SetTurnaroundTime+0xe0>)
 8014852:	440a      	add	r2, r1
 8014854:	4282      	cmp	r2, r0
 8014856:	d3d0      	bcc.n	80147fa <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014858:	4a1f      	ldr	r2, [pc, #124]	; (80148d8 <USB_SetTurnaroundTime+0xe4>)
 801485a:	4820      	ldr	r0, [pc, #128]	; (80148dc <USB_SetTurnaroundTime+0xe8>)
 801485c:	440a      	add	r2, r1
 801485e:	4282      	cmp	r2, r0
 8014860:	d31b      	bcc.n	801489a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014862:	4a1f      	ldr	r2, [pc, #124]	; (80148e0 <USB_SetTurnaroundTime+0xec>)
 8014864:	481f      	ldr	r0, [pc, #124]	; (80148e4 <USB_SetTurnaroundTime+0xf0>)
 8014866:	440a      	add	r2, r1
 8014868:	4282      	cmp	r2, r0
 801486a:	bf34      	ite	cc
 801486c:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8014870:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8014874:	e7c3      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 8014876:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 801487a:	e7c0      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 801487c:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8014880:	e7bd      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 8014882:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8014886:	e7ba      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 8014888:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 801488c:	e7b7      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 801488e:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8014892:	e7b4      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 8014894:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8014898:	e7b1      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 801489a:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801489e:	e7ae      	b.n	80147fe <USB_SetTurnaroundTime+0xa>
 80148a0:	ff275340 	.word	0xff275340
 80148a4:	000c34ff 	.word	0x000c34ff
 80148a8:	ff1b1e40 	.word	0xff1b1e40
 80148ac:	000f423f 	.word	0x000f423f
 80148b0:	ff0bdc00 	.word	0xff0bdc00
 80148b4:	00124f7f 	.word	0x00124f7f
 80148b8:	fef98c80 	.word	0xfef98c80
 80148bc:	0013d620 	.word	0x0013d620
 80148c0:	fee5b660 	.word	0xfee5b660
 80148c4:	0016e35f 	.word	0x0016e35f
 80148c8:	feced300 	.word	0xfeced300
 80148cc:	001b7740 	.word	0x001b7740
 80148d0:	feb35bc0 	.word	0xfeb35bc0
 80148d4:	002191c0 	.word	0x002191c0
 80148d8:	fe91ca00 	.word	0xfe91ca00
 80148dc:	00387520 	.word	0x00387520
 80148e0:	fe5954e0 	.word	0xfe5954e0
 80148e4:	00419ce0 	.word	0x00419ce0

080148e8 <USB_EnableGlobalInt>:
{
 80148e8:	4603      	mov	r3, r0
}
 80148ea:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80148ec:	689a      	ldr	r2, [r3, #8]
 80148ee:	f042 0201 	orr.w	r2, r2, #1
 80148f2:	609a      	str	r2, [r3, #8]
}
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop

080148f8 <USB_DisableGlobalInt>:
{
 80148f8:	4603      	mov	r3, r0
}
 80148fa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80148fc:	689a      	ldr	r2, [r3, #8]
 80148fe:	f022 0201 	bic.w	r2, r2, #1
 8014902:	609a      	str	r2, [r3, #8]
}
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop

08014908 <USB_SetCurrentMode>:
{
 8014908:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801490a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801490c:	2901      	cmp	r1, #1
{
 801490e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014910:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014914:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8014916:	d017      	beq.n	8014948 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8014918:	b9a1      	cbnz	r1, 8014944 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801491a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801491c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801491e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014922:	60c3      	str	r3, [r0, #12]
 8014924:	e001      	b.n	801492a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014926:	2c32      	cmp	r4, #50	; 0x32
 8014928:	d00c      	beq.n	8014944 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 801492a:	2001      	movs	r0, #1
      ms++;
 801492c:	4404      	add	r4, r0
      HAL_Delay(1U);
 801492e:	f7f4 fd31 	bl	8009394 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8014932:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014934:	07db      	lsls	r3, r3, #31
 8014936:	d4f6      	bmi.n	8014926 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8014938:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801493c:	fab0 f080 	clz	r0, r0
 8014940:	0940      	lsrs	r0, r0, #5
}
 8014942:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8014944:	2001      	movs	r0, #1
}
 8014946:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014948:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801494a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801494c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014950:	60c3      	str	r3, [r0, #12]
 8014952:	e001      	b.n	8014958 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014954:	2c32      	cmp	r4, #50	; 0x32
 8014956:	d0f5      	beq.n	8014944 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8014958:	2001      	movs	r0, #1
      ms++;
 801495a:	4404      	add	r4, r0
      HAL_Delay(1U);
 801495c:	f7f4 fd1a 	bl	8009394 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8014960:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014962:	07da      	lsls	r2, r3, #31
 8014964:	d5f6      	bpl.n	8014954 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8014966:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801496a:	fab0 f080 	clz	r0, r0
 801496e:	0940      	lsrs	r0, r0, #5
 8014970:	e7e7      	b.n	8014942 <USB_SetCurrentMode+0x3a>
 8014972:	bf00      	nop

08014974 <USB_FlushTxFifo>:
{
 8014974:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8014976:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014978:	4a11      	ldr	r2, [pc, #68]	; (80149c0 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801497a:	9301      	str	r3, [sp, #4]
 801497c:	e002      	b.n	8014984 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801497e:	6903      	ldr	r3, [r0, #16]
 8014980:	2b00      	cmp	r3, #0
 8014982:	db07      	blt.n	8014994 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8014984:	9b01      	ldr	r3, [sp, #4]
 8014986:	3301      	adds	r3, #1
 8014988:	4293      	cmp	r3, r2
 801498a:	9301      	str	r3, [sp, #4]
 801498c:	d9f7      	bls.n	801497e <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801498e:	2003      	movs	r0, #3
}
 8014990:	b002      	add	sp, #8
 8014992:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014994:	0189      	lsls	r1, r1, #6
  count = 0U;
 8014996:	2300      	movs	r3, #0
    if (++count > 200000U)
 8014998:	4a09      	ldr	r2, [pc, #36]	; (80149c0 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801499a:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801499e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80149a0:	6101      	str	r1, [r0, #16]
 80149a2:	e003      	b.n	80149ac <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80149a4:	6903      	ldr	r3, [r0, #16]
 80149a6:	f013 0320 	ands.w	r3, r3, #32
 80149aa:	d005      	beq.n	80149b8 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 80149ac:	9b01      	ldr	r3, [sp, #4]
 80149ae:	3301      	adds	r3, #1
 80149b0:	4293      	cmp	r3, r2
 80149b2:	9301      	str	r3, [sp, #4]
 80149b4:	d9f6      	bls.n	80149a4 <USB_FlushTxFifo+0x30>
 80149b6:	e7ea      	b.n	801498e <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 80149b8:	4618      	mov	r0, r3
}
 80149ba:	b002      	add	sp, #8
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop
 80149c0:	00030d40 	.word	0x00030d40

080149c4 <USB_FlushRxFifo>:
{
 80149c4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80149c6:	2300      	movs	r3, #0
    if (++count > 200000U)
 80149c8:	4a10      	ldr	r2, [pc, #64]	; (8014a0c <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	e002      	b.n	80149d4 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80149ce:	6903      	ldr	r3, [r0, #16]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	db07      	blt.n	80149e4 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 80149d4:	9b01      	ldr	r3, [sp, #4]
 80149d6:	3301      	adds	r3, #1
 80149d8:	4293      	cmp	r3, r2
 80149da:	9301      	str	r3, [sp, #4]
 80149dc:	d9f7      	bls.n	80149ce <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 80149de:	2003      	movs	r0, #3
}
 80149e0:	b002      	add	sp, #8
 80149e2:	4770      	bx	lr
  count = 0U;
 80149e4:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80149e6:	2310      	movs	r3, #16
    if (++count > 200000U)
 80149e8:	4a08      	ldr	r2, [pc, #32]	; (8014a0c <USB_FlushRxFifo+0x48>)
  count = 0U;
 80149ea:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80149ec:	6103      	str	r3, [r0, #16]
 80149ee:	e003      	b.n	80149f8 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80149f0:	6903      	ldr	r3, [r0, #16]
 80149f2:	f013 0310 	ands.w	r3, r3, #16
 80149f6:	d005      	beq.n	8014a04 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80149f8:	9b01      	ldr	r3, [sp, #4]
 80149fa:	3301      	adds	r3, #1
 80149fc:	4293      	cmp	r3, r2
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	d9f6      	bls.n	80149f0 <USB_FlushRxFifo+0x2c>
 8014a02:	e7ec      	b.n	80149de <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8014a04:	4618      	mov	r0, r3
}
 8014a06:	b002      	add	sp, #8
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop
 8014a0c:	00030d40 	.word	0x00030d40

08014a10 <USB_DevInit>:
{
 8014a10:	b084      	sub	sp, #16
 8014a12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a16:	ad09      	add	r5, sp, #36	; 0x24
 8014a18:	4604      	mov	r4, r0
 8014a1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014a1c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8014a20:	2300      	movs	r3, #0
 8014a22:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 8014a24:	4619      	mov	r1, r3
 8014a26:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8014a2a:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8014a2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8014a30:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8014a32:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8014a34:	d1f7      	bne.n	8014a26 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8014a36:	2e00      	cmp	r6, #0
 8014a38:	f040 8092 	bne.w	8014b60 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014a3c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8014a40:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8014a44:	f043 0302 	orr.w	r3, r3, #2
 8014a48:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014a50:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a58:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014a5a:	6823      	ldr	r3, [r4, #0]
 8014a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a60:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8014a62:	2300      	movs	r3, #0
 8014a64:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a6e:	2b01      	cmp	r3, #1
 8014a70:	d07d      	beq.n	8014b6e <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	f043 0303 	orr.w	r3, r3, #3
 8014a78:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014a7a:	2110      	movs	r1, #16
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7ff ff79 	bl	8014974 <USB_FlushTxFifo>
 8014a82:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a84:	4620      	mov	r0, r4
 8014a86:	f7ff ff9d 	bl	80149c4 <USB_FlushRxFifo>
 8014a8a:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a8e:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014a90:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8014a92:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8014a94:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8014a96:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014a98:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8014a9a:	bf18      	it	ne
 8014a9c:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014a9e:	b1ed      	cbz	r5, 8014adc <USB_DevInit+0xcc>
 8014aa0:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014aa4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014aa8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8014aac:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014aae:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014ab2:	e009      	b.n	8014ac8 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8014ab4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ab8:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014aba:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014abe:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ac2:	3320      	adds	r3, #32
 8014ac4:	4295      	cmp	r5, r2
 8014ac6:	d02c      	beq.n	8014b22 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ac8:	6819      	ldr	r1, [r3, #0]
 8014aca:	2900      	cmp	r1, #0
 8014acc:	daf2      	bge.n	8014ab4 <USB_DevInit+0xa4>
      if (i == 0U)
 8014ace:	b112      	cbz	r2, 8014ad6 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014ad0:	f8c3 8000 	str.w	r8, [r3]
 8014ad4:	e7f0      	b.n	8014ab8 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014ad6:	f8c3 9000 	str.w	r9, [r3]
 8014ada:	e7ed      	b.n	8014ab8 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014adc:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8014ade:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ae4:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014ae6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8014aea:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014aec:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8014aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af0:	b91b      	cbnz	r3, 8014afa <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014af2:	69a3      	ldr	r3, [r4, #24]
 8014af4:	f043 0310 	orr.w	r3, r3, #16
 8014af8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014afa:	69a2      	ldr	r2, [r4, #24]
 8014afc:	4b21      	ldr	r3, [pc, #132]	; (8014b84 <USB_DevInit+0x174>)
 8014afe:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8014b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014b02:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8014b04:	b11a      	cbz	r2, 8014b0e <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014b06:	69a3      	ldr	r3, [r4, #24]
 8014b08:	f043 0308 	orr.w	r3, r3, #8
 8014b0c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8014b0e:	2e01      	cmp	r6, #1
 8014b10:	d103      	bne.n	8014b1a <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014b12:	69a2      	ldr	r2, [r4, #24]
 8014b14:	4b1c      	ldr	r3, [pc, #112]	; (8014b88 <USB_DevInit+0x178>)
 8014b16:	4313      	orrs	r3, r2
 8014b18:	61a3      	str	r3, [r4, #24]
}
 8014b1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b1e:	b004      	add	sp, #16
 8014b20:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b22:	2200      	movs	r2, #0
 8014b24:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014b28:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014b2c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014b30:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014b32:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8014b36:	e009      	b.n	8014b4c <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014b38:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b3c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014b3e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014b42:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014b46:	3320      	adds	r3, #32
 8014b48:	4295      	cmp	r5, r2
 8014b4a:	d0c7      	beq.n	8014adc <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b4c:	6819      	ldr	r1, [r3, #0]
 8014b4e:	2900      	cmp	r1, #0
 8014b50:	daf2      	bge.n	8014b38 <USB_DevInit+0x128>
      if (i == 0U)
 8014b52:	b112      	cbz	r2, 8014b5a <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014b54:	f8c3 8000 	str.w	r8, [r3]
 8014b58:	e7f0      	b.n	8014b3c <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014b5a:	f8c3 9000 	str.w	r9, [r3]
 8014b5e:	e7ed      	b.n	8014b3c <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014b62:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b6c:	e779      	b.n	8014a62 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8014b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b70:	b913      	cbnz	r3, 8014b78 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014b76:	e780      	b.n	8014a7a <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	f043 0301 	orr.w	r3, r3, #1
 8014b7e:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8014b80:	e77b      	b.n	8014a7a <USB_DevInit+0x6a>
 8014b82:	bf00      	nop
 8014b84:	803c3800 	.word	0x803c3800
 8014b88:	40000004 	.word	0x40000004

08014b8c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014b8c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014b90:	f013 0006 	ands.w	r0, r3, #6
 8014b94:	d004      	beq.n	8014ba0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8014b96:	f013 0f02 	tst.w	r3, #2
 8014b9a:	bf14      	ite	ne
 8014b9c:	2002      	movne	r0, #2
 8014b9e:	200f      	moveq	r0, #15
}
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop

08014ba4 <USB_ActivateEndpoint>:
{
 8014ba4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8014ba6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014ba8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	d020      	beq.n	8014bf0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014bae:	f002 0c0f 	and.w	ip, r2, #15
 8014bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014bb6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014bba:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014bbe:	fa03 f30c 	lsl.w	r3, r3, ip
 8014bc2:	4323      	orrs	r3, r4
 8014bc4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014bc8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8014bcc:	041b      	lsls	r3, r3, #16
 8014bce:	d40c      	bmi.n	8014bea <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014bd0:	688b      	ldr	r3, [r1, #8]
 8014bd2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 8014bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014bda:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014bdc:	4914      	ldr	r1, [pc, #80]	; (8014c30 <USB_ActivateEndpoint+0x8c>)
 8014bde:	4323      	orrs	r3, r4
 8014be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8014be4:	4319      	orrs	r1, r3
 8014be6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8014bea:	2000      	movs	r0, #0
 8014bec:	bc30      	pop	{r4, r5}
 8014bee:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014bf0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8014bf4:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014bf8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014bfc:	40ab      	lsls	r3, r5
 8014bfe:	69e5      	ldr	r5, [r4, #28]
 8014c00:	432b      	orrs	r3, r5
 8014c02:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014c04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014c08:	041c      	lsls	r4, r3, #16
 8014c0a:	d4ee      	bmi.n	8014bea <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014c0c:	688b      	ldr	r3, [r1, #8]
 8014c0e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8014c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014c16:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014c18:	4905      	ldr	r1, [pc, #20]	; (8014c30 <USB_ActivateEndpoint+0x8c>)
 8014c1a:	432b      	orrs	r3, r5
 8014c1c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8014c20:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8014c24:	4311      	orrs	r1, r2
}
 8014c26:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014c28:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	4770      	bx	lr
 8014c30:	10008000 	.word	0x10008000

08014c34 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8014c34:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014c36:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8014c38:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c3a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8014c3e:	d02a      	beq.n	8014c96 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014c40:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c44:	2a00      	cmp	r2, #0
 8014c46:	db19      	blt.n	8014c7c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014c4c:	f003 030f 	and.w	r3, r3, #15
 8014c50:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014c54:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014c58:	4a23      	ldr	r2, [pc, #140]	; (8014ce8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c5a:	ea21 0103 	bic.w	r1, r1, r3
 8014c5e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014c62:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014c66:	ea21 0303 	bic.w	r3, r1, r3
 8014c6a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014c6e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014c70:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014c74:	401a      	ands	r2, r3
 8014c76:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8014c7a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014c7c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c80:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014c84:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014c88:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8014c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014c90:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8014c94:	e7d8      	b.n	8014c48 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c96:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014c9a:	2a00      	cmp	r2, #0
 8014c9c:	da0b      	bge.n	8014cb6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014c9e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014ca2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8014ca6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014caa:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8014cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8014cb2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014cb6:	f003 020f 	and.w	r2, r3, #15
 8014cba:	2301      	movs	r3, #1
 8014cbc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8014cc0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014cc2:	4a0a      	ldr	r2, [pc, #40]	; (8014cec <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014cc4:	ea21 0103 	bic.w	r1, r1, r3
 8014cc8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014ccc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8014cd0:	ea21 0303 	bic.w	r3, r1, r3
 8014cd4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8014cd8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014cda:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8014cde:	401a      	ands	r2, r3
 8014ce0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop
 8014ce8:	eff37800 	.word	0xeff37800
 8014cec:	ec337800 	.word	0xec337800

08014cf0 <USB_EPStartXfer>:
{
 8014cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8014cf4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014cf6:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d051      	beq.n	8014da2 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014cfe:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8014d02:	4c84      	ldr	r4, [pc, #528]	; (8014f14 <USB_EPStartXfer+0x224>)
 8014d04:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8014d08:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8014d0c:	402c      	ands	r4, r5
 8014d0e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d10:	4c81      	ldr	r4, [pc, #516]	; (8014f18 <USB_EPStartXfer+0x228>)
 8014d12:	691d      	ldr	r5, [r3, #16]
 8014d14:	402c      	ands	r4, r5
 8014d16:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8014d18:	694c      	ldr	r4, [r1, #20]
 8014d1a:	b384      	cbz	r4, 8014d7e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d1c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8014d1e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d20:	4e7e      	ldr	r6, [pc, #504]	; (8014f1c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d22:	442c      	add	r4, r5
 8014d24:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d28:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d2c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8014d30:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d32:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d36:	691d      	ldr	r5, [r3, #16]
 8014d38:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d3c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014d40:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014d42:	691d      	ldr	r5, [r3, #16]
 8014d44:	ea44 0405 	orr.w	r4, r4, r5
 8014d48:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d4a:	d025      	beq.n	8014d98 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8014d4c:	78cb      	ldrb	r3, [r1, #3]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d10c      	bne.n	8014d6c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014d52:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014d56:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014d5a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014d5e:	bf0c      	ite	eq
 8014d60:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014d64:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014d68:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014d6c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8014d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014d74:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8014d78:	2000      	movs	r0, #0
 8014d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d7e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8014d80:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d82:	691d      	ldr	r5, [r3, #16]
 8014d84:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8014d88:	ea44 0405 	orr.w	r4, r4, r5
 8014d8c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d8e:	691c      	ldr	r4, [r3, #16]
 8014d90:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8014d94:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014d96:	d1d9      	bne.n	8014d4c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d98:	68ca      	ldr	r2, [r1, #12]
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	d0d6      	beq.n	8014d4c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014d9e:	615a      	str	r2, [r3, #20]
 8014da0:	e7d4      	b.n	8014d4c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8014da2:	694d      	ldr	r5, [r1, #20]
 8014da4:	2d00      	cmp	r5, #0
 8014da6:	d03d      	beq.n	8014e24 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014da8:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8014dac:	4e59      	ldr	r6, [pc, #356]	; (8014f14 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014dae:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014db2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014db6:	4f58      	ldr	r7, [pc, #352]	; (8014f18 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014db8:	ea08 0606 	and.w	r6, r8, r6
 8014dbc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014dc0:	eb05 060e 	add.w	r6, r5, lr
 8014dc4:	3e01      	subs	r6, #1
 8014dc6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014dca:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8014dce:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014dd0:	4e52      	ldr	r6, [pc, #328]	; (8014f1c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014dd2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014dd6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8014dda:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014dde:	433e      	orrs	r6, r7
 8014de0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014de4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8014de8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8014dec:	433e      	orrs	r6, r7
 8014dee:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014df2:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8014df6:	f891 e003 	ldrb.w	lr, [r1, #3]
 8014dfa:	f1be 0f01 	cmp.w	lr, #1
 8014dfe:	d057      	beq.n	8014eb0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8014e00:	2a01      	cmp	r2, #1
 8014e02:	d072      	beq.n	8014eea <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e04:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014e08:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e0c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014e10:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e14:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014e18:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8014e1c:	4313      	orrs	r3, r2
 8014e1e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8014e22:	e7a9      	b.n	8014d78 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e24:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8014e28:	4e3b      	ldr	r6, [pc, #236]	; (8014f18 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e2a:	4c3a      	ldr	r4, [pc, #232]	; (8014f14 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8014e2c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e2e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8014e32:	ea06 0607 	and.w	r6, r6, r7
 8014e36:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014e3a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014e3e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014e42:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e46:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8014e4a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014e4e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014e52:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8014e56:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8014e5a:	d03a      	beq.n	8014ed2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e5c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014e60:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e64:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8014e68:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014e6c:	d184      	bne.n	8014d78 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e6e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014e72:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014e76:	6833      	ldr	r3, [r6, #0]
 8014e78:	bf0c      	ite	eq
 8014e7a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014e7e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014e82:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8014e84:	2a00      	cmp	r2, #0
 8014e86:	f47f af77 	bne.w	8014d78 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8014e8a:	b2ad      	uxth	r5, r5
 8014e8c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8014e8e:	08ad      	lsrs	r5, r5, #2
 8014e90:	f43f af72 	beq.w	8014d78 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014e94:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014e96:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8014e9a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8014e9e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8014ea2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8014ea6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014ea8:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8014eac:	d1f9      	bne.n	8014ea2 <USB_EPStartXfer+0x1b2>
 8014eae:	e763      	b.n	8014d78 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014eb0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8014eb2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014eb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014eb8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014eba:	6933      	ldr	r3, [r6, #16]
 8014ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ec0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8014ec2:	d017      	beq.n	8014ef4 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ec4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8014ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ecc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8014ed0:	e7cd      	b.n	8014e6e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8014ed2:	690b      	ldr	r3, [r1, #16]
 8014ed4:	b963      	cbnz	r3, 8014ef0 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8014ed6:	f1be 0f01 	cmp.w	lr, #1
 8014eda:	d00e      	beq.n	8014efa <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014edc:	6833      	ldr	r3, [r6, #0]
}
 8014ede:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ee4:	6033      	str	r3, [r6, #0]
}
 8014ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8014eea:	690b      	ldr	r3, [r1, #16]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d0f5      	beq.n	8014edc <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014ef0:	6173      	str	r3, [r6, #20]
 8014ef2:	e7f0      	b.n	8014ed6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8014ef4:	690b      	ldr	r3, [r1, #16]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1fa      	bne.n	8014ef0 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014efa:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8014efe:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014f02:	6833      	ldr	r3, [r6, #0]
 8014f04:	bf0c      	ite	eq
 8014f06:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014f0a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014f0e:	6033      	str	r3, [r6, #0]
 8014f10:	e7e4      	b.n	8014edc <USB_EPStartXfer+0x1ec>
 8014f12:	bf00      	nop
 8014f14:	fff80000 	.word	0xfff80000
 8014f18:	e007ffff 	.word	0xe007ffff
 8014f1c:	1ff80000 	.word	0x1ff80000

08014f20 <USB_EP0StartXfer>:
{
 8014f20:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8014f22:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8014f24:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d027      	beq.n	8014f7a <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014f2a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8014f2e:	4c3c      	ldr	r4, [pc, #240]	; (8015020 <USB_EP0StartXfer+0x100>)
 8014f30:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8014f34:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8014f38:	402c      	ands	r4, r5
 8014f3a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014f3c:	4c39      	ldr	r4, [pc, #228]	; (8015024 <USB_EP0StartXfer+0x104>)
 8014f3e:	691d      	ldr	r5, [r3, #16]
 8014f40:	402c      	ands	r4, r5
 8014f42:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8014f44:	694c      	ldr	r4, [r1, #20]
 8014f46:	b9ac      	cbnz	r4, 8014f74 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8014f48:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014f4a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014f4c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8014f50:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014f52:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014f56:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014f58:	691d      	ldr	r5, [r3, #16]
 8014f5a:	ea44 0405 	orr.w	r4, r4, r5
 8014f5e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8014f60:	d03e      	beq.n	8014fe0 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014f6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8014f6e:	2000      	movs	r0, #0
 8014f70:	bcf0      	pop	{r4, r5, r6, r7}
 8014f72:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8014f74:	688c      	ldr	r4, [r1, #8]
 8014f76:	614c      	str	r4, [r1, #20]
 8014f78:	e7e7      	b.n	8014f4a <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f7a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8014f7e:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8014f84:	2d00      	cmp	r5, #0
 8014f86:	d030      	beq.n	8014fea <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014f88:	691f      	ldr	r7, [r3, #16]
 8014f8a:	4e25      	ldr	r6, [pc, #148]	; (8015020 <USB_EP0StartXfer+0x100>)
 8014f8c:	403e      	ands	r6, r7
 8014f8e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014f90:	4e24      	ldr	r6, [pc, #144]	; (8015024 <USB_EP0StartXfer+0x104>)
 8014f92:	691f      	ldr	r7, [r3, #16]
 8014f94:	403e      	ands	r6, r7
 8014f96:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8014f98:	688e      	ldr	r6, [r1, #8]
 8014f9a:	42b5      	cmp	r5, r6
 8014f9c:	d901      	bls.n	8014fa2 <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8014f9e:	4635      	mov	r5, r6
 8014fa0:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014fa2:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014fa4:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8014fa8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014faa:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8014fae:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014fb0:	691e      	ldr	r6, [r3, #16]
 8014fb2:	ea45 0506 	orr.w	r5, r5, r6
 8014fb6:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8014fb8:	d027      	beq.n	801500a <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014fba:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014fbc:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014fbe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8014fc2:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8014fc4:	2900      	cmp	r1, #0
 8014fc6:	d0d2      	beq.n	8014f6e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014fc8:	f004 020f 	and.w	r2, r4, #15
 8014fcc:	2401      	movs	r4, #1
 8014fce:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8014fd2:	4094      	lsls	r4, r2
 8014fd4:	431c      	orrs	r4, r3
 8014fd6:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8014fda:	2000      	movs	r0, #0
 8014fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8014fde:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8014fe0:	68ca      	ldr	r2, [r1, #12]
 8014fe2:	2a00      	cmp	r2, #0
 8014fe4:	d0bd      	beq.n	8014f62 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014fe6:	615a      	str	r2, [r3, #20]
 8014fe8:	e7bb      	b.n	8014f62 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014fea:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8014fec:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014fee:	4d0d      	ldr	r5, [pc, #52]	; (8015024 <USB_EP0StartXfer+0x104>)
 8014ff0:	ea05 0506 	and.w	r5, r5, r6
 8014ff4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014ff6:	691d      	ldr	r5, [r3, #16]
 8014ff8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8014ffc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ffe:	4d08      	ldr	r5, [pc, #32]	; (8015020 <USB_EP0StartXfer+0x100>)
 8015000:	691e      	ldr	r6, [r3, #16]
 8015002:	ea05 0506 	and.w	r5, r5, r6
 8015006:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8015008:	d1d7      	bne.n	8014fba <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 801500a:	690a      	ldr	r2, [r1, #16]
 801500c:	b102      	cbz	r2, 8015010 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801500e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015010:	681a      	ldr	r2, [r3, #0]
}
 8015012:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015014:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8015018:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801501a:	601a      	str	r2, [r3, #0]
}
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	fff80000 	.word	0xfff80000
 8015024:	e007ffff 	.word	0xe007ffff

08015028 <USB_WritePacket>:
{
 8015028:	b410      	push	{r4}
 801502a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 801502e:	b964      	cbnz	r4, 801504a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8015030:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8015032:	089b      	lsrs	r3, r3, #2
 8015034:	d009      	beq.n	801504a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015036:	3201      	adds	r2, #1
 8015038:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801503c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8015040:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8015044:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015046:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8015048:	d1fa      	bne.n	8015040 <USB_WritePacket+0x18>
}
 801504a:	2000      	movs	r0, #0
 801504c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop

08015054 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8015054:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8015058:	b570      	push	{r4, r5, r6, lr}
 801505a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 801505c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8015060:	d01a      	beq.n	8015098 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015062:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8015066:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8015068:	2300      	movs	r3, #0
 801506a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801506c:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8015070:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015072:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8015076:	d1f8      	bne.n	801506a <USB_ReadPacket+0x16>
    pDest++;
 8015078:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 801507c:	b15e      	cbz	r6, 8015096 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801507e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8015082:	4406      	add	r6, r0
 8015084:	2200      	movs	r2, #0
 8015086:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015088:	fa21 f302 	lsr.w	r3, r1, r2
 801508c:	3208      	adds	r2, #8
 801508e:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8015092:	42b0      	cmp	r0, r6
 8015094:	d1f8      	bne.n	8015088 <USB_ReadPacket+0x34>
}
 8015096:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8015098:	4608      	mov	r0, r1
 801509a:	e7ef      	b.n	801507c <USB_ReadPacket+0x28>

0801509c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 801509c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801509e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80150a0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150a2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80150a6:	d00c      	beq.n	80150c2 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150a8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80150ac:	b10b      	cbz	r3, 80150b2 <USB_EPSetStall+0x16>
 80150ae:	2a00      	cmp	r2, #0
 80150b0:	da14      	bge.n	80150dc <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80150b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80150b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150ba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80150be:	2000      	movs	r0, #0
 80150c0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150c2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80150c6:	2a00      	cmp	r2, #0
 80150c8:	db00      	blt.n	80150cc <USB_EPSetStall+0x30>
 80150ca:	b973      	cbnz	r3, 80150ea <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150cc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150d4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80150d8:	2000      	movs	r0, #0
 80150da:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80150dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80150e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80150e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80150e8:	e7e3      	b.n	80150b2 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80150ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80150f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80150fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80150fe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8015102:	e7e9      	b.n	80150d8 <USB_EPSetStall+0x3c>

08015104 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8015104:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8015106:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8015108:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801510a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801510e:	d013      	beq.n	8015138 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015110:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015118:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801511c:	78cb      	ldrb	r3, [r1, #3]
 801511e:	3b02      	subs	r3, #2
 8015120:	2b01      	cmp	r3, #1
 8015122:	d901      	bls.n	8015128 <USB_EPClearStall+0x24>
}
 8015124:	2000      	movs	r0, #0
 8015126:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015128:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801512c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015130:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8015134:	2000      	movs	r0, #0
 8015136:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015138:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801513c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015140:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015144:	78cb      	ldrb	r3, [r1, #3]
 8015146:	3b02      	subs	r3, #2
 8015148:	2b01      	cmp	r3, #1
 801514a:	d8eb      	bhi.n	8015124 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801514c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8015150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015154:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8015158:	2000      	movs	r0, #0
 801515a:	4770      	bx	lr

0801515c <USB_SetDevAddress>:
{
 801515c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801515e:	0109      	lsls	r1, r1, #4
}
 8015160:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015162:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015166:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801516a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 801516e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015172:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8015176:	4311      	orrs	r1, r2
 8015178:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop

08015180 <USB_DevConnect>:
{
 8015180:	4603      	mov	r3, r0
}
 8015182:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015184:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015188:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801518c:	f022 0203 	bic.w	r2, r2, #3
 8015190:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015194:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8015198:	f023 0302 	bic.w	r3, r3, #2
 801519c:	604b      	str	r3, [r1, #4]
}
 801519e:	4770      	bx	lr

080151a0 <USB_DevDisconnect>:
{
 80151a0:	4603      	mov	r3, r0
}
 80151a2:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80151a4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80151a8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80151ac:	f022 0203 	bic.w	r2, r2, #3
 80151b0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80151b4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80151b8:	f043 0302 	orr.w	r3, r3, #2
 80151bc:	604b      	str	r3, [r1, #4]
}
 80151be:	4770      	bx	lr

080151c0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80151c0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80151c2:	6980      	ldr	r0, [r0, #24]
}
 80151c4:	4010      	ands	r0, r2
 80151c6:	4770      	bx	lr

080151c8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80151c8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151cc:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80151d0:	4018      	ands	r0, r3
}
 80151d2:	0c00      	lsrs	r0, r0, #16
 80151d4:	4770      	bx	lr
 80151d6:	bf00      	nop

080151d8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80151d8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80151dc:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 80151e0:	4018      	ands	r0, r3
}
 80151e2:	b280      	uxth	r0, r0
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop

080151e8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80151e8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80151ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80151f0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80151f4:	6940      	ldr	r0, [r0, #20]
}
 80151f6:	4010      	ands	r0, r2
 80151f8:	4770      	bx	lr
 80151fa:	bf00      	nop

080151fc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80151fc:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015200:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015204:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015208:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801520c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015210:	40cb      	lsrs	r3, r1
 8015212:	01db      	lsls	r3, r3, #7
 8015214:	b2db      	uxtb	r3, r3
 8015216:	4313      	orrs	r3, r2
}
 8015218:	4018      	ands	r0, r3
 801521a:	4770      	bx	lr

0801521c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 801521c:	6940      	ldr	r0, [r0, #20]
}
 801521e:	f000 0001 	and.w	r0, r0, #1
 8015222:	4770      	bx	lr

08015224 <USB_ActivateSetup>:
{
 8015224:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015226:	4a09      	ldr	r2, [pc, #36]	; (801524c <USB_ActivateSetup+0x28>)
}
 8015228:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801522a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 801522e:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015230:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8015234:	4022      	ands	r2, r4
}
 8015236:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801523a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801523e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8015242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015246:	604b      	str	r3, [r1, #4]
}
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop
 801524c:	fffff800 	.word	0xfffff800

08015250 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015250:	4b14      	ldr	r3, [pc, #80]	; (80152a4 <USB_EP0_OutStart+0x54>)
{
 8015252:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015254:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015256:	429c      	cmp	r4, r3
 8015258:	d81a      	bhi.n	8015290 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801525a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801525e:	2300      	movs	r3, #0
  if (dma == 1U)
 8015260:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015262:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015264:	6903      	ldr	r3, [r0, #16]
 8015266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801526a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801526c:	6903      	ldr	r3, [r0, #16]
 801526e:	f043 0318 	orr.w	r3, r3, #24
 8015272:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015274:	6903      	ldr	r3, [r0, #16]
 8015276:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801527a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 801527c:	d104      	bne.n	8015288 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801527e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015286:	6003      	str	r3, [r0, #0]
}
 8015288:	2000      	movs	r0, #0
 801528a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801528e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015290:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8015294:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8015298:	2b00      	cmp	r3, #0
 801529a:	dae0      	bge.n	801525e <USB_EP0_OutStart+0xe>
}
 801529c:	2000      	movs	r0, #0
 801529e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152a2:	4770      	bx	lr
 80152a4:	4f54300a 	.word	0x4f54300a

080152a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80152a8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80152aa:	4903      	ldr	r1, [pc, #12]	; (80152b8 <MX_FATFS_Init+0x10>)
 80152ac:	4803      	ldr	r0, [pc, #12]	; (80152bc <MX_FATFS_Init+0x14>)
 80152ae:	f001 f96f 	bl	8016590 <FATFS_LinkDriver>
 80152b2:	4b03      	ldr	r3, [pc, #12]	; (80152c0 <MX_FATFS_Init+0x18>)
 80152b4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80152b6:	bd08      	pop	{r3, pc}
 80152b8:	20003538 	.word	0x20003538
 80152bc:	20000300 	.word	0x20000300
 80152c0:	2000353c 	.word	0x2000353c

080152c4 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80152c4:	4b02      	ldr	r3, [pc, #8]	; (80152d0 <USER_initialize+0xc>)
 80152c6:	2201      	movs	r2, #1
 80152c8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80152ca:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	200002fc 	.word	0x200002fc

080152d4 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80152d4:	2000      	movs	r0, #0
 80152d6:	4770      	bx	lr

080152d8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80152d8:	2001      	movs	r0, #1
 80152da:	4770      	bx	lr

080152dc <USER_write>:
 80152dc:	2000      	movs	r0, #0
 80152de:	4770      	bx	lr

080152e0 <USER_status>:
 80152e0:	4b02      	ldr	r3, [pc, #8]	; (80152ec <USER_status+0xc>)
 80152e2:	2201      	movs	r2, #1
 80152e4:	701a      	strb	r2, [r3, #0]
 80152e6:	7818      	ldrb	r0, [r3, #0]
 80152e8:	4770      	bx	lr
 80152ea:	bf00      	nop
 80152ec:	200002fc 	.word	0x200002fc

080152f0 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80152f0:	2100      	movs	r1, #0
{
 80152f2:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 80152f4:	4608      	mov	r0, r1
{
 80152f6:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 80152f8:	f003 ff4c 	bl	8019194 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80152fc:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 80152fe:	4b1f      	ldr	r3, [pc, #124]	; (801537c <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8015300:	491f      	ldr	r1, [pc, #124]	; (8015380 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8015302:	4a20      	ldr	r2, [pc, #128]	; (8015384 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8015304:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8015306:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8015308:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 801530a:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801530c:	481e      	ldr	r0, [pc, #120]	; (8015388 <MX_LWIP_Init+0x98>)
 801530e:	4d1f      	ldr	r5, [pc, #124]	; (801538c <MX_LWIP_Init+0x9c>)
 8015310:	9002      	str	r0, [sp, #8]
 8015312:	481f      	ldr	r0, [pc, #124]	; (8015390 <MX_LWIP_Init+0xa0>)
 8015314:	9001      	str	r0, [sp, #4]
 8015316:	4628      	mov	r0, r5
 8015318:	f006 fcea 	bl	801bcf0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801531c:	4628      	mov	r0, r5
 801531e:	f006 fd95 	bl	801be4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8015322:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8015326:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8015328:	075b      	lsls	r3, r3, #29
 801532a:	d524      	bpl.n	8015376 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 801532c:	f006 fd94 	bl	801be58 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8015330:	4918      	ldr	r1, [pc, #96]	; (8015394 <MX_LWIP_Init+0xa4>)
 8015332:	4816      	ldr	r0, [pc, #88]	; (801538c <MX_LWIP_Init+0x9c>)
 8015334:	f006 fe1a 	bl	801bf6c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8015338:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801533a:	2101      	movs	r1, #1
 801533c:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 801533e:	4e16      	ldr	r6, [pc, #88]	; (8015398 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015340:	4c16      	ldr	r4, [pc, #88]	; (801539c <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8015342:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8015346:	f001 fa0d 	bl	8016764 <osSemaphoreCreate>
 801534a:	4b15      	ldr	r3, [pc, #84]	; (80153a0 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 801534c:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801534e:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8015352:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8015354:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8015356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801535c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015360:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8015364:	4631      	mov	r1, r6
 8015366:	a807      	add	r0, sp, #28
 8015368:	f001 f944 	bl	80165f4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801536c:	4807      	ldr	r0, [pc, #28]	; (801538c <MX_LWIP_Init+0x9c>)
 801536e:	f00d fd87 	bl	8022e80 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8015372:	b00e      	add	sp, #56	; 0x38
 8015374:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8015376:	f006 fd91 	bl	801be9c <netif_set_down>
 801537a:	e7d9      	b.n	8015330 <MX_LWIP_Init+0x40>
 801537c:	20003580 	.word	0x20003580
 8015380:	20003584 	.word	0x20003584
 8015384:	20003590 	.word	0x20003590
 8015388:	0801910d 	.word	0x0801910d
 801538c:	20003544 	.word	0x20003544
 8015390:	080156a1 	.word	0x080156a1
 8015394:	08015881 	.word	0x08015881
 8015398:	20003588 	.word	0x20003588
 801539c:	0802a9b0 	.word	0x0802a9b0
 80153a0:	20003540 	.word	0x20003540

080153a4 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80153a4:	4b2c      	ldr	r3, [pc, #176]	; (8015458 <low_level_output+0xb4>)
{
 80153a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80153aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 80153ac:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80153ae:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80153b0:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 80153b2:	2900      	cmp	r1, #0
 80153b4:	d04d      	beq.n	8015452 <low_level_output+0xae>
  bufferoffset = 0;
 80153b6:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153b8:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 80153bc:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153be:	6822      	ldr	r2, [r4, #0]
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	db1b      	blt.n	80153fc <low_level_output+0x58>
      byteslefttocopy = q->len;
 80153c4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153c8:	1995      	adds	r5, r2, r6
 80153ca:	454d      	cmp	r5, r9
 80153cc:	d93c      	bls.n	8015448 <low_level_output+0xa4>
      payloadoffset = 0;
 80153ce:	2700      	movs	r7, #0
 80153d0:	e002      	b.n	80153d8 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153d2:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80153d4:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80153d6:	d921      	bls.n	801541c <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80153d8:	eba9 0a06 	sub.w	sl, r9, r6
 80153dc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80153e0:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 80153e2:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80153e4:	4439      	add	r1, r7
 80153e6:	4652      	mov	r2, sl
 80153e8:	f010 f9ee 	bl	80257c8 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80153ec:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80153ee:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80153f2:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153f4:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80153f6:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80153f8:	42b3      	cmp	r3, r6
 80153fa:	daea      	bge.n	80153d2 <low_level_output+0x2e>
        errval = ERR_USE;
 80153fc:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8015400:	4b15      	ldr	r3, [pc, #84]	; (8015458 <low_level_output+0xb4>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015408:	695a      	ldr	r2, [r3, #20]
 801540a:	0692      	lsls	r2, r2, #26
 801540c:	d503      	bpl.n	8015416 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801540e:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8015410:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8015412:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8015414:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8015416:	b003      	add	sp, #12
 8015418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801541c:	4618      	mov	r0, r3
 801541e:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015420:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015424:	462a      	mov	r2, r5
 8015426:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8015428:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801542a:	4439      	add	r1, r7
 801542c:	f010 f9cc 	bl	80257c8 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8015430:	f8db b000 	ldr.w	fp, [fp]
 8015434:	9b01      	ldr	r3, [sp, #4]
 8015436:	f1bb 0f00 	cmp.w	fp, #0
 801543a:	d1c0      	bne.n	80153be <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 801543c:	4641      	mov	r1, r8
 801543e:	4806      	ldr	r0, [pc, #24]	; (8015458 <low_level_output+0xb4>)
 8015440:	f7f6 f8d0 	bl	800b5e4 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8015444:	2000      	movs	r0, #0
 8015446:	e7db      	b.n	8015400 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8015448:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 801544a:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801544c:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 801544e:	4615      	mov	r5, r2
 8015450:	e7e6      	b.n	8015420 <low_level_output+0x7c>
  uint32_t framelength = 0;
 8015452:	4688      	mov	r8, r1
 8015454:	e7f2      	b.n	801543c <low_level_output+0x98>
 8015456:	bf00      	nop
 8015458:	20006634 	.word	0x20006634

0801545c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015460:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8015574 <ethernetif_input+0x118>
 8015464:	b083      	sub	sp, #12
 8015466:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015468:	4b40      	ldr	r3, [pc, #256]	; (801556c <ethernetif_input+0x110>)
 801546a:	f04f 31ff 	mov.w	r1, #4294967295
 801546e:	6818      	ldr	r0, [r3, #0]
 8015470:	f001 f99e 	bl	80167b0 <osSemaphoreWait>
 8015474:	2800      	cmp	r0, #0
 8015476:	d1f7      	bne.n	8015468 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8015478:	483d      	ldr	r0, [pc, #244]	; (8015570 <ethernetif_input+0x114>)
 801547a:	f00f fc95 	bl	8024da8 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801547e:	483d      	ldr	r0, [pc, #244]	; (8015574 <ethernetif_input+0x118>)
 8015480:	f7f6 f934 	bl	800b6ec <HAL_ETH_GetReceivedFrame_IT>
 8015484:	4604      	mov	r4, r0
 8015486:	2800      	cmp	r0, #0
 8015488:	d168      	bne.n	801555c <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 801548a:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801548e:	bb51      	cbnz	r1, 80154e6 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8015490:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015494:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015498:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801549c:	b140      	cbz	r0, 80154b0 <ethernetif_input+0x54>
 801549e:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80154a0:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80154a2:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80154a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80154a8:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80154aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80154ac:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80154ae:	d1f7      	bne.n	80154a0 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80154b0:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 80154b4:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80154b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 80154ba:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80154be:	695a      	ldr	r2, [r3, #20]
 80154c0:	0612      	lsls	r2, r2, #24
 80154c2:	d503      	bpl.n	80154cc <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80154c4:	2280      	movs	r2, #128	; 0x80
 80154c6:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 80154c8:	2200      	movs	r2, #0
 80154ca:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 80154cc:	f1ba 0f00 	cmp.w	sl, #0
 80154d0:	d044      	beq.n	801555c <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 80154d2:	9901      	ldr	r1, [sp, #4]
 80154d4:	4650      	mov	r0, sl
 80154d6:	690b      	ldr	r3, [r1, #16]
 80154d8:	4798      	blx	r3
 80154da:	2800      	cmp	r0, #0
 80154dc:	d142      	bne.n	8015564 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 80154de:	4824      	ldr	r0, [pc, #144]	; (8015570 <ethernetif_input+0x114>)
 80154e0:	f00f fc68 	bl	8024db4 <sys_mutex_unlock>
      } while(p!=NULL);
 80154e4:	e7c8      	b.n	8015478 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80154e6:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80154ea:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80154ee:	f006 fe95 	bl	801c21c <pbuf_alloc>
  if (p != NULL)
 80154f2:	4682      	mov	sl, r0
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d0cb      	beq.n	8015490 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80154f8:	4683      	mov	fp, r0
    bufferoffset = 0;
 80154fa:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80154fc:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015500:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8015504:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015508:	1854      	adds	r4, r2, r1
 801550a:	4544      	cmp	r4, r8
 801550c:	d923      	bls.n	8015556 <ethernetif_input+0xfa>
      payloadoffset = 0;
 801550e:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015510:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015514:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8015518:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801551c:	4439      	add	r1, r7
 801551e:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8015520:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8015522:	f010 f951 	bl	80257c8 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8015526:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015528:	4544      	cmp	r4, r8
        bufferoffset = 0;
 801552a:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801552e:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015530:	d8ee      	bhi.n	8015510 <ethernetif_input+0xb4>
 8015532:	4639      	mov	r1, r7
 8015534:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8015536:	f8db 0004 	ldr.w	r0, [fp, #4]
 801553a:	4428      	add	r0, r5
 801553c:	f010 f944 	bl	80257c8 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8015540:	f8db b000 	ldr.w	fp, [fp]
 8015544:	f1bb 0f00 	cmp.w	fp, #0
 8015548:	d0a4      	beq.n	8015494 <ethernetif_input+0x38>
 801554a:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 801554c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8015550:	1854      	adds	r4, r2, r1
 8015552:	4544      	cmp	r4, r8
 8015554:	d8db      	bhi.n	801550e <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8015556:	4439      	add	r1, r7
      payloadoffset = 0;
 8015558:	2500      	movs	r5, #0
 801555a:	e7ec      	b.n	8015536 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 801555c:	4804      	ldr	r0, [pc, #16]	; (8015570 <ethernetif_input+0x114>)
 801555e:	f00f fc29 	bl	8024db4 <sys_mutex_unlock>
      } while(p!=NULL);
 8015562:	e781      	b.n	8015468 <ethernetif_input+0xc>
            pbuf_free(p);
 8015564:	4650      	mov	r0, sl
 8015566:	f007 f82b 	bl	801c5c0 <pbuf_free>
 801556a:	e7b8      	b.n	80154de <ethernetif_input+0x82>
 801556c:	2000667c 	.word	0x2000667c
 8015570:	2001e93c 	.word	0x2001e93c
 8015574:	20006634 	.word	0x20006634

08015578 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8015578:	4b41      	ldr	r3, [pc, #260]	; (8015680 <HAL_ETH_MspInit+0x108>)
 801557a:	6802      	ldr	r2, [r0, #0]
{
 801557c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801557e:	429a      	cmp	r2, r3
{
 8015580:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015582:	f04f 0400 	mov.w	r4, #0
 8015586:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801558a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801558e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8015590:	d001      	beq.n	8015596 <HAL_ETH_MspInit+0x1e>
}
 8015592:	b00d      	add	sp, #52	; 0x34
 8015594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8015596:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801559a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801559c:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801559e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80155a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80155a2:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80155a4:	4837      	ldr	r0, [pc, #220]	; (8015684 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80155a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80155aa:	631a      	str	r2, [r3, #48]	; 0x30
 80155ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155ae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80155b2:	9200      	str	r2, [sp, #0]
 80155b4:	9a00      	ldr	r2, [sp, #0]
 80155b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80155bc:	631a      	str	r2, [r3, #48]	; 0x30
 80155be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155c0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80155c4:	9201      	str	r2, [sp, #4]
 80155c6:	9a01      	ldr	r2, [sp, #4]
 80155c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155ca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80155ce:	631a      	str	r2, [r3, #48]	; 0x30
 80155d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80155d6:	9202      	str	r2, [sp, #8]
 80155d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80155da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155dc:	f042 0204 	orr.w	r2, r2, #4
 80155e0:	631a      	str	r2, [r3, #48]	; 0x30
 80155e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155e4:	f002 0204 	and.w	r2, r2, #4
 80155e8:	9203      	str	r2, [sp, #12]
 80155ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80155ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155ee:	f042 0201 	orr.w	r2, r2, #1
 80155f2:	631a      	str	r2, [r3, #48]	; 0x30
 80155f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155f6:	f002 0201 	and.w	r2, r2, #1
 80155fa:	9204      	str	r2, [sp, #16]
 80155fc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80155fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015600:	433a      	orrs	r2, r7
 8015602:	631a      	str	r2, [r3, #48]	; 0x30
 8015604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015606:	403a      	ands	r2, r7
 8015608:	9205      	str	r2, [sp, #20]
 801560a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801560c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801560e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015612:	631a      	str	r2, [r3, #48]	; 0x30
 8015614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015616:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015618:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801561c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801561e:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015622:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015624:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015626:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015628:	f7f7 f984 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801562c:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801562e:	a907      	add	r1, sp, #28
 8015630:	4815      	ldr	r0, [pc, #84]	; (8015688 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015632:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015634:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015638:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801563c:	f7f7 f97a 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015644:	a907      	add	r1, sp, #28
 8015646:	4811      	ldr	r0, [pc, #68]	; (801568c <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015648:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801564a:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801564e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015652:	f7f7 f96f 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8015656:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801565a:	a907      	add	r1, sp, #28
 801565c:	480c      	ldr	r0, [pc, #48]	; (8015690 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801565e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015660:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015662:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015664:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015668:	f7f7 f964 	bl	800c934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 801566c:	4622      	mov	r2, r4
 801566e:	2106      	movs	r1, #6
 8015670:	203d      	movs	r0, #61	; 0x3d
 8015672:	f7f4 fae1 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8015676:	203d      	movs	r0, #61	; 0x3d
 8015678:	f7f4 fb28 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 801567c:	b00d      	add	sp, #52	; 0x34
 801567e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015680:	40028000 	.word	0x40028000
 8015684:	40020800 	.word	0x40020800
 8015688:	40020000 	.word	0x40020000
 801568c:	40020400 	.word	0x40020400
 8015690:	40021800 	.word	0x40021800

08015694 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8015694:	4b01      	ldr	r3, [pc, #4]	; (801569c <HAL_ETH_RxCpltCallback+0x8>)
 8015696:	6818      	ldr	r0, [r3, #0]
 8015698:	f001 b8b6 	b.w	8016808 <osSemaphoreRelease>
 801569c:	2000667c 	.word	0x2000667c

080156a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80156a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80156a2:	4604      	mov	r4, r0
{
 80156a4:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80156a6:	2800      	cmp	r0, #0
 80156a8:	f000 809e 	beq.w	80157e8 <ethernetif_init+0x148>
  heth.Instance = ETH;
 80156ac:	4d52      	ldr	r5, [pc, #328]	; (80157f8 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 80156ae:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80156b0:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80156b4:	4b51      	ldr	r3, [pc, #324]	; (80157fc <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 80156b6:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 80156b8:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 80156ba:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 80156be:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80156c2:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 80156c4:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 80156c6:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 80156c8:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80156cc:	494c      	ldr	r1, [pc, #304]	; (8015800 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 80156ce:	4a4d      	ldr	r2, [pc, #308]	; (8015804 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 80156d0:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 80156d2:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80156d4:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80156d6:	494c      	ldr	r1, [pc, #304]	; (8015808 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 80156d8:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80156dc:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 80156de:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80156e0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 80156e4:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80156e8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80156ec:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80156f0:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80156f2:	4042      	eors	r2, r0
 80156f4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80156f8:	404a      	eors	r2, r1
 80156fa:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80156fe:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8015702:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8015706:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 801570a:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801570e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8015712:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8015714:	404b      	eors	r3, r1
 8015716:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801571a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801571e:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 8015722:	ab01      	add	r3, sp, #4
 8015724:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8015726:	f7f6 f905 	bl	800b934 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801572a:	b928      	cbnz	r0, 8015738 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801572c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8015730:	f043 0304 	orr.w	r3, r3, #4
 8015734:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8015738:	2304      	movs	r3, #4
 801573a:	4a34      	ldr	r2, [pc, #208]	; (801580c <ethernetif_init+0x16c>)
 801573c:	4934      	ldr	r1, [pc, #208]	; (8015810 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 801573e:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8015740:	482d      	ldr	r0, [pc, #180]	; (80157f8 <ethernetif_init+0x158>)
 8015742:	f7f5 fecb 	bl	800b4dc <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8015746:	2304      	movs	r3, #4
 8015748:	4a32      	ldr	r2, [pc, #200]	; (8015814 <ethernetif_init+0x174>)
 801574a:	4933      	ldr	r1, [pc, #204]	; (8015818 <ethernetif_init+0x178>)
 801574c:	482a      	ldr	r0, [pc, #168]	; (80157f8 <ethernetif_init+0x158>)
 801574e:	f7f5 ff0b 	bl	800b568 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015752:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015754:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015756:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 801575a:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801575e:	4e2f      	ldr	r6, [pc, #188]	; (801581c <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015760:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015764:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015768:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801576a:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801576c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8015770:	7858      	ldrb	r0, [r3, #1]
 8015772:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8015776:	7898      	ldrb	r0, [r3, #2]
 8015778:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801577c:	78d8      	ldrb	r0, [r3, #3]
 801577e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8015782:	7918      	ldrb	r0, [r3, #4]
 8015784:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8015788:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801578a:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 801578c:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801578e:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015790:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015794:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8015798:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801579c:	f000 ffe2 	bl	8016764 <osSemaphoreCreate>
 80157a0:	4b1f      	ldr	r3, [pc, #124]	; (8015820 <ethernetif_init+0x180>)
 80157a2:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80157a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80157a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80157ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80157b0:	4621      	mov	r1, r4
 80157b2:	a805      	add	r0, sp, #20
 80157b4:	f000 ff1e 	bl	80165f4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 80157b8:	480f      	ldr	r0, [pc, #60]	; (80157f8 <ethernetif_init+0x158>)
 80157ba:	f7f6 fa11 	bl	800bbe0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80157be:	466a      	mov	r2, sp
 80157c0:	211d      	movs	r1, #29
 80157c2:	480d      	ldr	r0, [pc, #52]	; (80157f8 <ethernetif_init+0x158>)
 80157c4:	f7f6 f824 	bl	800b810 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80157c8:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80157ca:	211d      	movs	r1, #29
 80157cc:	480a      	ldr	r0, [pc, #40]	; (80157f8 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 80157ce:	f042 020b 	orr.w	r2, r2, #11
 80157d2:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80157d4:	f7f6 f866 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80157d8:	466a      	mov	r2, sp
 80157da:	211d      	movs	r1, #29
 80157dc:	4806      	ldr	r0, [pc, #24]	; (80157f8 <ethernetif_init+0x158>)
 80157de:	f7f6 f817 	bl	800b810 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80157e2:	4638      	mov	r0, r7
 80157e4:	b00d      	add	sp, #52	; 0x34
 80157e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80157e8:	4b0e      	ldr	r3, [pc, #56]	; (8015824 <ethernetif_init+0x184>)
 80157ea:	f240 223a 	movw	r2, #570	; 0x23a
 80157ee:	490e      	ldr	r1, [pc, #56]	; (8015828 <ethernetif_init+0x188>)
 80157f0:	480e      	ldr	r0, [pc, #56]	; (801582c <ethernetif_init+0x18c>)
 80157f2:	f010 ffaf 	bl	8026754 <iprintf>
 80157f6:	e759      	b.n	80156ac <ethernetif_init+0xc>
 80157f8:	20006634 	.word	0x20006634
 80157fc:	1ff0f000 	.word	0x1ff0f000
 8015800:	08023a01 	.word	0x08023a01
 8015804:	40028000 	.word	0x40028000
 8015808:	080153a5 	.word	0x080153a5
 801580c:	20004e64 	.word	0x20004e64
 8015810:	20003614 	.word	0x20003614
 8015814:	20003694 	.word	0x20003694
 8015818:	20003594 	.word	0x20003594
 801581c:	0802a9cc 	.word	0x0802a9cc
 8015820:	2000667c 	.word	0x2000667c
 8015824:	0802e690 	.word	0x0802e690
 8015828:	0802e6ac 	.word	0x0802e6ac
 801582c:	0802b44c 	.word	0x0802b44c

08015830 <sys_now>:
 8015830:	f7f3 bdaa 	b.w	8009388 <HAL_GetTick>

08015834 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8015834:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8015836:	2300      	movs	r3, #0
{
 8015838:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801583a:	4d0f      	ldr	r5, [pc, #60]	; (8015878 <ethernetif_set_link+0x44>)
{
 801583c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 801583e:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8015840:	e003      	b.n	801584a <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8015842:	b1b3      	cbz	r3, 8015872 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8015844:	20c8      	movs	r0, #200	; 0xc8
 8015846:	f000 ff07 	bl	8016658 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801584a:	aa01      	add	r2, sp, #4
 801584c:	2101      	movs	r1, #1
 801584e:	4628      	mov	r0, r5
 8015850:	f7f5 ffde 	bl	800b810 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015854:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8015856:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015858:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 801585c:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015860:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8015862:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8015864:	d4ed      	bmi.n	8015842 <ethernetif_set_link+0xe>
 8015866:	b113      	cbz	r3, 801586e <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8015868:	f006 fb40 	bl	801beec <netif_set_link_up>
 801586c:	e7ea      	b.n	8015844 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801586e:	0753      	lsls	r3, r2, #29
 8015870:	d5e8      	bpl.n	8015844 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8015872:	f006 fb61 	bl	801bf38 <netif_set_link_down>
 8015876:	e7e5      	b.n	8015844 <ethernetif_set_link+0x10>
 8015878:	20006634 	.word	0x20006634

0801587c <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop

08015880 <ethernetif_update_config>:
{
 8015880:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8015882:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8015886:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8015888:	2100      	movs	r1, #0
{
 801588a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 801588c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801588e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8015890:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8015892:	d538      	bpl.n	8015906 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015894:	4c32      	ldr	r4, [pc, #200]	; (8015960 <ethernetif_update_config+0xe0>)
 8015896:	6863      	ldr	r3, [r4, #4]
 8015898:	b9e3      	cbnz	r3, 80158d4 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801589a:	68a3      	ldr	r3, [r4, #8]
 801589c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80158a0:	d140      	bne.n	8015924 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80158a2:	68e2      	ldr	r2, [r4, #12]
 80158a4:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80158a8:	d135      	bne.n	8015916 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80158aa:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80158ac:	08d2      	lsrs	r2, r2, #3
 80158ae:	2100      	movs	r1, #0
 80158b0:	482b      	ldr	r0, [pc, #172]	; (8015960 <ethernetif_update_config+0xe0>)
 80158b2:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 80158b6:	b292      	uxth	r2, r2
 80158b8:	f7f5 fff4 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80158bc:	2100      	movs	r1, #0
 80158be:	4828      	ldr	r0, [pc, #160]	; (8015960 <ethernetif_update_config+0xe0>)
 80158c0:	f7f6 fa28 	bl	800bd14 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 80158c4:	4826      	ldr	r0, [pc, #152]	; (8015960 <ethernetif_update_config+0xe0>)
 80158c6:	f7f6 f98b 	bl	800bbe0 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 80158ca:	4628      	mov	r0, r5
 80158cc:	f7ff ffd6 	bl	801587c <ethernetif_notify_conn_changed>
}
 80158d0:	b003      	add	sp, #12
 80158d2:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80158d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80158d8:	4620      	mov	r0, r4
 80158da:	f7f5 ffe3 	bl	800b8a4 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80158de:	f7f3 fd53 	bl	8009388 <HAL_GetTick>
 80158e2:	9000      	str	r0, [sp, #0]
 80158e4:	e002      	b.n	80158ec <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80158e6:	9b01      	ldr	r3, [sp, #4]
 80158e8:	069a      	lsls	r2, r3, #26
 80158ea:	d425      	bmi.n	8015938 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80158ec:	aa01      	add	r2, sp, #4
 80158ee:	2101      	movs	r1, #1
 80158f0:	4620      	mov	r0, r4
 80158f2:	f7f5 ff8d 	bl	800b810 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80158f6:	f7f3 fd47 	bl	8009388 <HAL_GetTick>
 80158fa:	9b00      	ldr	r3, [sp, #0]
 80158fc:	1ac3      	subs	r3, r0, r3
 80158fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015902:	d9f0      	bls.n	80158e6 <ethernetif_update_config+0x66>
 8015904:	e7c9      	b.n	801589a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8015906:	4816      	ldr	r0, [pc, #88]	; (8015960 <ethernetif_update_config+0xe0>)
 8015908:	f7f6 f9b6 	bl	800bc78 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 801590c:	4628      	mov	r0, r5
 801590e:	f7ff ffb5 	bl	801587c <ethernetif_notify_conn_changed>
}
 8015912:	b003      	add	sp, #12
 8015914:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8015916:	f240 21e3 	movw	r1, #739	; 0x2e3
 801591a:	4812      	ldr	r0, [pc, #72]	; (8015964 <ethernetif_update_config+0xe4>)
 801591c:	f7f0 f802 	bl	8005924 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015920:	68e2      	ldr	r2, [r4, #12]
 8015922:	e7c2      	b.n	80158aa <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8015924:	f240 21e2 	movw	r1, #738	; 0x2e2
 8015928:	480e      	ldr	r0, [pc, #56]	; (8015964 <ethernetif_update_config+0xe4>)
 801592a:	f7ef fffb 	bl	8005924 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801592e:	68e2      	ldr	r2, [r4, #12]
 8015930:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8015934:	d0b9      	beq.n	80158aa <ethernetif_update_config+0x2a>
 8015936:	e7ee      	b.n	8015916 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8015938:	aa01      	add	r2, sp, #4
 801593a:	2110      	movs	r1, #16
 801593c:	4808      	ldr	r0, [pc, #32]	; (8015960 <ethernetif_update_config+0xe0>)
 801593e:	f7f5 ff67 	bl	800b810 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8015942:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8015944:	f013 0204 	ands.w	r2, r3, #4
 8015948:	bf18      	it	ne
 801594a:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 801594e:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8015950:	bf4c      	ite	mi
 8015952:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8015954:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8015958:	60e2      	str	r2, [r4, #12]
 801595a:	60a3      	str	r3, [r4, #8]
 801595c:	e7ae      	b.n	80158bc <ethernetif_update_config+0x3c>
 801595e:	bf00      	nop
 8015960:	20006634 	.word	0x20006634
 8015964:	0802e690 	.word	0x0802e690

08015968 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015968:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801596c:	b183      	cbz	r3, 8015990 <USBD_CDC_EP0_RxReady+0x28>
{
 801596e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015970:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015974:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8015978:	28ff      	cmp	r0, #255	; 0xff
 801597a:	d007      	beq.n	801598c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801597c:	689b      	ldr	r3, [r3, #8]
 801597e:	4621      	mov	r1, r4
 8015980:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8015984:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8015986:	23ff      	movs	r3, #255	; 0xff
 8015988:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801598c:	2000      	movs	r0, #0
 801598e:	bd10      	pop	{r4, pc}
 8015990:	2000      	movs	r0, #0
 8015992:	4770      	bx	lr

08015994 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015994:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015996:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8015998:	4801      	ldr	r0, [pc, #4]	; (80159a0 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801599a:	801a      	strh	r2, [r3, #0]
}
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop
 80159a0:	2000034c 	.word	0x2000034c

080159a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80159a4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80159a6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 80159a8:	4801      	ldr	r0, [pc, #4]	; (80159b0 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80159aa:	801a      	strh	r2, [r3, #0]
}
 80159ac:	4770      	bx	lr
 80159ae:	bf00      	nop
 80159b0:	20000390 	.word	0x20000390

080159b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80159b4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80159b6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80159b8:	4801      	ldr	r0, [pc, #4]	; (80159c0 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80159ba:	801a      	strh	r2, [r3, #0]
}
 80159bc:	4770      	bx	lr
 80159be:	bf00      	nop
 80159c0:	200003e0 	.word	0x200003e0

080159c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80159c4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80159c6:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 80159c8:	4801      	ldr	r0, [pc, #4]	; (80159d0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80159ca:	801a      	strh	r2, [r3, #0]
}
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	200003d4 	.word	0x200003d4

080159d4 <USBD_CDC_DataOut>:
{
 80159d4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80159d6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80159da:	b17d      	cbz	r5, 80159fc <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159dc:	4604      	mov	r4, r0
 80159de:	f00f fc5f 	bl	80252a0 <USBD_LL_GetRxDataSize>
 80159e2:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159e4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80159e8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80159ec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80159f0:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159f2:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159f6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80159f8:	2000      	movs	r0, #0
}
 80159fa:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80159fc:	2003      	movs	r0, #3
}
 80159fe:	bd38      	pop	{r3, r4, r5, pc}

08015a00 <USBD_CDC_DataIn>:
{
 8015a00:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8015a02:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8015a06:	b34d      	cbz	r5, 8015a5c <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015a08:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8015a0c:	4686      	mov	lr, r0
 8015a0e:	460a      	mov	r2, r1
 8015a10:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8015a14:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8015a18:	b15b      	cbz	r3, 8015a32 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015a1a:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8015a1e:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8015a22:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8015a26:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8015a28:	fbb3 f6f4 	udiv	r6, r3, r4
 8015a2c:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015a30:	b164      	cbz	r4, 8015a4c <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a32:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8015a36:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a38:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8015a3c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8015a40:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8015a42:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a46:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8015a48:	4620      	mov	r0, r4
}
 8015a4a:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a4c:	4623      	mov	r3, r4
 8015a4e:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8015a50:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a54:	f00f fc08 	bl	8025268 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8015a58:	4620      	mov	r0, r4
}
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 8015a5c:	2003      	movs	r0, #3
}
 8015a5e:	bd70      	pop	{r4, r5, r6, pc}

08015a60 <USBD_CDC_Setup>:
{
 8015a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a62:	f891 c000 	ldrb.w	ip, [r1]
{
 8015a66:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8015a68:	2300      	movs	r3, #0
{
 8015a6a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a6c:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8015a70:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015a72:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8015a76:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8015a7a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a7e:	d01c      	beq.n	8015aba <USBD_CDC_Setup+0x5a>
 8015a80:	2e20      	cmp	r6, #32
 8015a82:	d112      	bne.n	8015aaa <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8015a84:	88ca      	ldrh	r2, [r1, #6]
 8015a86:	2a00      	cmp	r2, #0
 8015a88:	d036      	beq.n	8015af8 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8015a8a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8015a8e:	d055      	beq.n	8015b3c <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8015a90:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015a92:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8015a96:	4639      	mov	r1, r7
 8015a98:	7860      	ldrb	r0, [r4, #1]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015a9e:	88e2      	ldrh	r2, [r4, #6]
 8015aa0:	4639      	mov	r1, r7
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f000 fd2c 	bl	8016500 <USBD_CtlSendData>
 8015aa8:	e004      	b.n	8015ab4 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8015aaa:	4621      	mov	r1, r4
 8015aac:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8015aae:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8015ab0:	f000 fcf0 	bl	8016494 <USBD_CtlError>
}
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	b003      	add	sp, #12
 8015ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8015aba:	784b      	ldrb	r3, [r1, #1]
 8015abc:	2b0b      	cmp	r3, #11
 8015abe:	d8f4      	bhi.n	8015aaa <USBD_CDC_Setup+0x4a>
 8015ac0:	a201      	add	r2, pc, #4	; (adr r2, 8015ac8 <USBD_CDC_Setup+0x68>)
 8015ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ac6:	bf00      	nop
 8015ac8:	08015b0b 	.word	0x08015b0b
 8015acc:	08015ab5 	.word	0x08015ab5
 8015ad0:	08015aab 	.word	0x08015aab
 8015ad4:	08015aab 	.word	0x08015aab
 8015ad8:	08015aab 	.word	0x08015aab
 8015adc:	08015aab 	.word	0x08015aab
 8015ae0:	08015aab 	.word	0x08015aab
 8015ae4:	08015aab 	.word	0x08015aab
 8015ae8:	08015aab 	.word	0x08015aab
 8015aec:	08015aab 	.word	0x08015aab
 8015af0:	08015b29 	.word	0x08015b29
 8015af4:	08015b1f 	.word	0x08015b1f
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015af8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8015afc:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015afe:	7848      	ldrb	r0, [r1, #1]
 8015b00:	689b      	ldr	r3, [r3, #8]
 8015b02:	4798      	blx	r3
}
 8015b04:	4630      	mov	r0, r6
 8015b06:	b003      	add	sp, #12
 8015b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b0a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015b0e:	2a03      	cmp	r2, #3
 8015b10:	d01e      	beq.n	8015b50 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 8015b12:	4621      	mov	r1, r4
 8015b14:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8015b16:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8015b18:	f000 fcbc 	bl	8016494 <USBD_CtlError>
        ret = USBD_FAIL;
 8015b1c:	e7ca      	b.n	8015ab4 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015b22:	2b03      	cmp	r3, #3
 8015b24:	d0c6      	beq.n	8015ab4 <USBD_CDC_Setup+0x54>
 8015b26:	e7f4      	b.n	8015b12 <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b28:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015b2c:	2b03      	cmp	r3, #3
 8015b2e:	d1f0      	bne.n	8015b12 <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b30:	2201      	movs	r2, #1
 8015b32:	f10d 0105 	add.w	r1, sp, #5
 8015b36:	f000 fce3 	bl	8016500 <USBD_CtlSendData>
 8015b3a:	e7bb      	b.n	8015ab4 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8015b3c:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b3e:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8015b40:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8015b44:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015b48:	4639      	mov	r1, r7
 8015b4a:	f000 fcf1 	bl	8016530 <USBD_CtlPrepareRx>
 8015b4e:	e7b1      	b.n	8015ab4 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b50:	2202      	movs	r2, #2
 8015b52:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8015b56:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b58:	f000 fcd2 	bl	8016500 <USBD_CtlSendData>
 8015b5c:	e7aa      	b.n	8015ab4 <USBD_CDC_Setup+0x54>
 8015b5e:	bf00      	nop

08015b60 <USBD_CDC_DeInit>:
{
 8015b60:	b538      	push	{r3, r4, r5, lr}
 8015b62:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015b64:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015b66:	2181      	movs	r1, #129	; 0x81
 8015b68:	f00f fb32 	bl	80251d0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015b70:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015b72:	f00f fb2d 	bl	80251d0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015b76:	2182      	movs	r1, #130	; 0x82
 8015b78:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015b7a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015b7e:	f00f fb27 	bl	80251d0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8015b82:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015b86:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8015b88:	b14b      	cbz	r3, 8015b9e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015b8a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8015b92:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8015b96:	f00f fdff 	bl	8025798 <free>
    pdev->pClassData = NULL;
 8015b9a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8015b9e:	2000      	movs	r0, #0
 8015ba0:	bd38      	pop	{r3, r4, r5, pc}
 8015ba2:	bf00      	nop

08015ba4 <USBD_CDC_Init>:
{
 8015ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba8:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015baa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015bae:	f00f fdeb 	bl	8025788 <malloc>
  if (hcdc == NULL)
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d04c      	beq.n	8015c52 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bb8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8015bba:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bbe:	b393      	cbz	r3, 8015c26 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015bc0:	2340      	movs	r3, #64	; 0x40
 8015bc2:	2202      	movs	r2, #2
 8015bc4:	2181      	movs	r1, #129	; 0x81
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f00f faf0 	bl	80251ac <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015bcc:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015bce:	2340      	movs	r3, #64	; 0x40
 8015bd0:	4631      	mov	r1, r6
 8015bd2:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015bd4:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f00f fae8 	bl	80251ac <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015bdc:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bde:	2203      	movs	r2, #3
 8015be0:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015be2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015be6:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015be8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bec:	2308      	movs	r3, #8
 8015bee:	f00f fadd 	bl	80251ac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015bf2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015bf6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8015bfa:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015bfc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c04:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8015c06:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8015c0a:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c0e:	b9ae      	cbnz	r6, 8015c3c <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c14:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015c18:	4641      	mov	r1, r8
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f00f fb32 	bl	8025284 <USBD_LL_PrepareReceive>
}
 8015c20:	4630      	mov	r0, r6
 8015c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c2a:	2202      	movs	r2, #2
 8015c2c:	2181      	movs	r1, #129	; 0x81
 8015c2e:	4620      	mov	r0, r4
 8015c30:	f00f fabc 	bl	80251ac <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015c34:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c3a:	e7c9      	b.n	8015bd0 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8015c3c:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c3e:	2340      	movs	r3, #64	; 0x40
 8015c40:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8015c44:	4641      	mov	r1, r8
 8015c46:	4620      	mov	r0, r4
 8015c48:	f00f fb1c 	bl	8025284 <USBD_LL_PrepareReceive>
}
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8015c52:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8015c54:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015c58:	e7e2      	b.n	8015c20 <USBD_CDC_Init+0x7c>
 8015c5a:	bf00      	nop

08015c5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015c5c:	4603      	mov	r3, r0
  if (fops == NULL)
 8015c5e:	b119      	cbz	r1, 8015c68 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8015c60:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8015c62:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8015c66:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8015c68:	2003      	movs	r0, #3
}
 8015c6a:	4770      	bx	lr

08015c6c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c6c:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8015c6e:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8015c74:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015c78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8015c7c:	4770      	bx	lr
 8015c7e:	bf00      	nop

08015c80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c80:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8015c82:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8015c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015c88:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8015c8c:	4770      	bx	lr
 8015c8e:	bf00      	nop

08015c90 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015c90:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8015c94:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8015c96:	b19a      	cbz	r2, 8015cc0 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c98:	7c04      	ldrb	r4, [r0, #16]
 8015c9a:	b144      	cbz	r4, 8015cae <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c9c:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015c9e:	2340      	movs	r3, #64	; 0x40
 8015ca0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	f00f faed 	bl	8025284 <USBD_LL_PrepareReceive>
}
 8015caa:	4620      	mov	r0, r4
 8015cac:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015cb2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8015cb6:	2101      	movs	r1, #1
 8015cb8:	f00f fae4 	bl	8025284 <USBD_LL_PrepareReceive>
}
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8015cc0:	2403      	movs	r4, #3
}
 8015cc2:	4620      	mov	r0, r4
 8015cc4:	bd10      	pop	{r4, pc}
 8015cc6:	bf00      	nop

08015cc8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015cc8:	b1a0      	cbz	r0, 8015cf4 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015cca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015cce:	b113      	cbz	r3, 8015cd6 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015cd6:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8015cda:	b113      	cbz	r3, 8015ce2 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015ce2:	b109      	cbz	r1, 8015ce8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8015ce4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ce8:	2301      	movs	r3, #1
  pdev->id = id;
 8015cea:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015cec:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015cf0:	f00f ba1c 	b.w	802512c <USBD_LL_Init>

  return ret;
}
 8015cf4:	2003      	movs	r0, #3
 8015cf6:	4770      	bx	lr

08015cf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015cf8:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8015cfa:	2400      	movs	r4, #0
{
 8015cfc:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8015cfe:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8015d02:	b159      	cbz	r1, 8015d1c <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015d04:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015d06:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8015d08:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8015d0c:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015d10:	4798      	blx	r3
 8015d12:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8015d16:	4620      	mov	r0, r4
 8015d18:	b003      	add	sp, #12
 8015d1a:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8015d1c:	2403      	movs	r4, #3
}
 8015d1e:	4620      	mov	r0, r4
 8015d20:	b003      	add	sp, #12
 8015d22:	bd30      	pop	{r4, r5, pc}

08015d24 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015d24:	f00f ba34 	b.w	8025190 <USBD_LL_Start>

08015d28 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8015d28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d2c:	b10b      	cbz	r3, 8015d32 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4718      	bx	r3
  }

  return ret;
}
 8015d32:	2003      	movs	r0, #3
 8015d34:	4770      	bx	lr
 8015d36:	bf00      	nop

08015d38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015d38:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015d3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015d3e:	b10b      	cbz	r3, 8015d44 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	4798      	blx	r3
  }

  return USBD_OK;
}
 8015d44:	2000      	movs	r0, #0
 8015d46:	bd08      	pop	{r3, pc}

08015d48 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015d48:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015d4a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8015d4e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015d50:	4628      	mov	r0, r5
 8015d52:	f000 fb93 	bl	801647c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015d56:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8015d58:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8015d5c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8015d60:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8015d64:	f001 031f 	and.w	r3, r1, #31
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d009      	beq.n	8015d80 <USBD_LL_SetupStage+0x38>
 8015d6c:	2b02      	cmp	r3, #2
 8015d6e:	d013      	beq.n	8015d98 <USBD_LL_SetupStage+0x50>
 8015d70:	b163      	cbz	r3, 8015d8c <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015d72:	4620      	mov	r0, r4
 8015d74:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8015d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015d7c:	f00f ba36 	b.w	80251ec <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d80:	4629      	mov	r1, r5
 8015d82:	4620      	mov	r0, r4
}
 8015d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015d88:	f000 ba9e 	b.w	80162c8 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	4620      	mov	r0, r4
}
 8015d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015d94:	f000 b8fa 	b.w	8015f8c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015d98:	4629      	mov	r1, r5
 8015d9a:	4620      	mov	r0, r4
}
 8015d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015da0:	f000 baca 	b.w	8016338 <USBD_StdEPReq>

08015da4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015da8:	b939      	cbnz	r1, 8015dba <USBD_LL_DataOutStage+0x16>
 8015daa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015dac:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8015db0:	460c      	mov	r4, r1
 8015db2:	2a03      	cmp	r2, #3
 8015db4:	d00e      	beq.n	8015dd4 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015db6:	2000      	movs	r0, #0
}
 8015db8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8015dba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015dbe:	699b      	ldr	r3, [r3, #24]
 8015dc0:	b133      	cbz	r3, 8015dd0 <USBD_LL_DataOutStage+0x2c>
 8015dc2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015dc6:	2a03      	cmp	r2, #3
 8015dc8:	d102      	bne.n	8015dd0 <USBD_LL_DataOutStage+0x2c>
}
 8015dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015dce:	4718      	bx	r3
    return USBD_FAIL;
 8015dd0:	2003      	movs	r0, #3
}
 8015dd2:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015dd4:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8015dd8:	4291      	cmp	r1, r2
 8015dda:	d80d      	bhi.n	8015df8 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015ddc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015de0:	691b      	ldr	r3, [r3, #16]
 8015de2:	b123      	cbz	r3, 8015dee <USBD_LL_DataOutStage+0x4a>
 8015de4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015de8:	2a03      	cmp	r2, #3
 8015dea:	d100      	bne.n	8015dee <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8015dec:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8015dee:	4628      	mov	r0, r5
 8015df0:	f000 fbb6 	bl	8016560 <USBD_CtlSendStatus>
  return USBD_OK;
 8015df4:	2000      	movs	r0, #0
 8015df6:	e7df      	b.n	8015db8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8015df8:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015dfa:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8015dfc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015e00:	bf28      	it	cs
 8015e02:	460a      	movcs	r2, r1
 8015e04:	4619      	mov	r1, r3
 8015e06:	f000 fba1 	bl	801654c <USBD_CtlContinueRx>
  return USBD_OK;
 8015e0a:	4620      	mov	r0, r4
}
 8015e0c:	bd70      	pop	{r4, r5, r6, pc}
 8015e0e:	bf00      	nop

08015e10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015e10:	b570      	push	{r4, r5, r6, lr}
 8015e12:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015e14:	b949      	cbnz	r1, 8015e2a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015e16:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8015e1a:	2b02      	cmp	r3, #2
 8015e1c:	d012      	beq.n	8015e44 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015e1e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015e22:	2b01      	cmp	r3, #1
 8015e24:	d027      	beq.n	8015e76 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8015e26:	2000      	movs	r0, #0
}
 8015e28:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015e2e:	695b      	ldr	r3, [r3, #20]
 8015e30:	b133      	cbz	r3, 8015e40 <USBD_LL_DataInStage+0x30>
 8015e32:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015e36:	2a03      	cmp	r2, #3
 8015e38:	d102      	bne.n	8015e40 <USBD_LL_DataInStage+0x30>
}
 8015e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015e3e:	4718      	bx	r3
    return USBD_FAIL;
 8015e40:	2003      	movs	r0, #3
}
 8015e42:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8015e44:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8015e48:	460d      	mov	r5, r1
 8015e4a:	42b3      	cmp	r3, r6
 8015e4c:	d818      	bhi.n	8015e80 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8015e4e:	d027      	beq.n	8015ea0 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015e50:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	b11b      	cbz	r3, 8015e60 <USBD_LL_DataInStage+0x50>
 8015e58:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8015e5c:	2a03      	cmp	r2, #3
 8015e5e:	d01c      	beq.n	8015e9a <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e60:	2180      	movs	r1, #128	; 0x80
 8015e62:	4620      	mov	r0, r4
 8015e64:	f00f f9c2 	bl	80251ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f000 fb85 	bl	8016578 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8015e6e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8015e72:	2b01      	cmp	r3, #1
 8015e74:	d1d7      	bne.n	8015e26 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8015e76:	2300      	movs	r3, #0
  return USBD_OK;
 8015e78:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8015e7a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8015e7e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8015e80:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e82:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8015e84:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015e86:	461a      	mov	r2, r3
 8015e88:	f000 fb48 	bl	801651c <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e8c:	462b      	mov	r3, r5
 8015e8e:	462a      	mov	r2, r5
 8015e90:	4629      	mov	r1, r5
 8015e92:	4620      	mov	r0, r4
 8015e94:	f00f f9f6 	bl	8025284 <USBD_LL_PrepareReceive>
 8015e98:	e7c1      	b.n	8015e1e <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	4798      	blx	r3
 8015e9e:	e7df      	b.n	8015e60 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8015ea0:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d8d4      	bhi.n	8015e50 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8015ea6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d2d0      	bcs.n	8015e50 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015eae:	460a      	mov	r2, r1
 8015eb0:	f000 fb34 	bl	801651c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015eb4:	462b      	mov	r3, r5
 8015eb6:	462a      	mov	r2, r5
 8015eb8:	4629      	mov	r1, r5
 8015eba:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8015ebc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ec0:	f00f f9e0 	bl	8025284 <USBD_LL_PrepareReceive>
 8015ec4:	e7ab      	b.n	8015e1e <USBD_LL_DataInStage+0xe>
 8015ec6:	bf00      	nop

08015ec8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ec8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015eca:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8015ecc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ed4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ed8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8015edc:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ede:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8015ee2:	b11b      	cbz	r3, 8015eec <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015ee4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015eec:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015eee:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ef0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	462b      	mov	r3, r5
 8015ef6:	4611      	mov	r1, r2
 8015ef8:	f00f f958 	bl	80251ac <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015efc:	462b      	mov	r3, r5
 8015efe:	2200      	movs	r2, #0
 8015f00:	2180      	movs	r1, #128	; 0x80
 8015f02:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015f04:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f08:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f0c:	f00f f94e 	bl	80251ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8015f10:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015f12:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f14:	6225      	str	r5, [r4, #32]
}
 8015f16:	bd70      	pop	{r4, r5, r6, pc}

08015f18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015f18:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8015f1a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8015f1c:	7419      	strb	r1, [r3, #16]
}
 8015f1e:	4770      	bx	lr

08015f20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015f20:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f22:	2104      	movs	r1, #4

  return USBD_OK;
}
 8015f24:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8015f26:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f2a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8015f2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8015f32:	4770      	bx	lr

08015f34 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015f38:	2b04      	cmp	r3, #4
 8015f3a:	d103      	bne.n	8015f44 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f3c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8015f40:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8015f44:	2000      	movs	r0, #0
 8015f46:	4770      	bx	lr

08015f48 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f48:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8015f4c:	2a03      	cmp	r2, #3
 8015f4e:	d001      	beq.n	8015f54 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8015f50:	2000      	movs	r0, #0
 8015f52:	4770      	bx	lr
{
 8015f54:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8015f56:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8015f5a:	69db      	ldr	r3, [r3, #28]
 8015f5c:	b103      	cbz	r3, 8015f60 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8015f5e:	4798      	blx	r3
}
 8015f60:	2000      	movs	r0, #0
 8015f62:	bd08      	pop	{r3, pc}

08015f64 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8015f64:	2000      	movs	r0, #0
 8015f66:	4770      	bx	lr

08015f68 <USBD_LL_IsoOUTIncomplete>:
 8015f68:	2000      	movs	r0, #0
 8015f6a:	4770      	bx	lr

08015f6c <USBD_LL_DevConnected>:
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	4770      	bx	lr

08015f70 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f70:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8015f72:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f76:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8015f7a:	b12a      	cbz	r2, 8015f88 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f7c:	6852      	ldr	r2, [r2, #4]
 8015f7e:	7901      	ldrb	r1, [r0, #4]
{
 8015f80:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015f82:	4790      	blx	r2
  }

  return USBD_OK;
}
 8015f84:	2000      	movs	r0, #0
 8015f86:	bd08      	pop	{r3, pc}
 8015f88:	2000      	movs	r0, #0
 8015f8a:	4770      	bx	lr

08015f8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f8c:	b570      	push	{r4, r5, r6, lr}
 8015f8e:	780c      	ldrb	r4, [r1, #0]
 8015f90:	b082      	sub	sp, #8
 8015f92:	460e      	mov	r6, r1
 8015f94:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f96:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8015f9a:	2c20      	cmp	r4, #32
 8015f9c:	d00e      	beq.n	8015fbc <USBD_StdDevReq+0x30>
 8015f9e:	2c40      	cmp	r4, #64	; 0x40
 8015fa0:	d00c      	beq.n	8015fbc <USBD_StdDevReq+0x30>
 8015fa2:	b1a4      	cbz	r4, 8015fce <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015fa4:	2180      	movs	r1, #128	; 0x80
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f00f f920 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015fac:	2100      	movs	r1, #0
 8015fae:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8015fb0:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8015fb2:	f00f f91b 	bl	80251ec <USBD_LL_StallEP>
}
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	b002      	add	sp, #8
 8015fba:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015fbc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8015fc0:	4631      	mov	r1, r6
 8015fc2:	4628      	mov	r0, r5
 8015fc4:	689b      	ldr	r3, [r3, #8]
}
 8015fc6:	b002      	add	sp, #8
 8015fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015fcc:	4718      	bx	r3
    switch (req->bRequest)
 8015fce:	784b      	ldrb	r3, [r1, #1]
 8015fd0:	2b09      	cmp	r3, #9
 8015fd2:	d8e7      	bhi.n	8015fa4 <USBD_StdDevReq+0x18>
 8015fd4:	a201      	add	r2, pc, #4	; (adr r2, 8015fdc <USBD_StdDevReq+0x50>)
 8015fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fda:	bf00      	nop
 8015fdc:	0801603b 	.word	0x0801603b
 8015fe0:	08016069 	.word	0x08016069
 8015fe4:	08015fa5 	.word	0x08015fa5
 8015fe8:	08016087 	.word	0x08016087
 8015fec:	08015fa5 	.word	0x08015fa5
 8015ff0:	0801608f 	.word	0x0801608f
 8015ff4:	080160c7 	.word	0x080160c7
 8015ff8:	08015fa5 	.word	0x08015fa5
 8015ffc:	080160eb 	.word	0x080160eb
 8016000:	08016005 	.word	0x08016005
  cfgidx = (uint8_t)(req->wValue);
 8016004:	7889      	ldrb	r1, [r1, #2]
 8016006:	4eaa      	ldr	r6, [pc, #680]	; (80162b0 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016008:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 801600a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801600c:	f200 8146 	bhi.w	801629c <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8016010:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016014:	2b02      	cmp	r3, #2
 8016016:	f000 8130 	beq.w	801627a <USBD_StdDevReq+0x2ee>
 801601a:	2b03      	cmp	r3, #3
 801601c:	f000 810c 	beq.w	8016238 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016020:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8016022:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016024:	f00f f8e2 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016028:	2100      	movs	r1, #0
 801602a:	4628      	mov	r0, r5
 801602c:	f00f f8de 	bl	80251ec <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016030:	7831      	ldrb	r1, [r6, #0]
 8016032:	4628      	mov	r0, r5
 8016034:	f7ff fe80 	bl	8015d38 <USBD_ClrClassConfig>
    break;
 8016038:	e7bd      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801603a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801603e:	3a01      	subs	r2, #1
 8016040:	2a02      	cmp	r2, #2
 8016042:	d868      	bhi.n	8016116 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8016044:	88ca      	ldrh	r2, [r1, #6]
 8016046:	2a02      	cmp	r2, #2
 8016048:	d165      	bne.n	8016116 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801604a:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 801604c:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016050:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8016052:	b10a      	cbz	r2, 8016058 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016054:	2203      	movs	r2, #3
 8016056:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016058:	2202      	movs	r2, #2
 801605a:	f105 010c 	add.w	r1, r5, #12
 801605e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8016060:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016062:	f000 fa4d 	bl	8016500 <USBD_CtlSendData>
    break;
 8016066:	e7a6      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8016068:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801606c:	3b01      	subs	r3, #1
 801606e:	2b02      	cmp	r3, #2
 8016070:	d851      	bhi.n	8016116 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016072:	884b      	ldrh	r3, [r1, #2]
 8016074:	2b01      	cmp	r3, #1
 8016076:	d19e      	bne.n	8015fb6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8016078:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 801607a:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 801607c:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016080:	f000 fa6e 	bl	8016560 <USBD_CtlSendStatus>
 8016084:	e797      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016086:	884b      	ldrh	r3, [r1, #2]
 8016088:	2b01      	cmp	r3, #1
 801608a:	d194      	bne.n	8015fb6 <USBD_StdDevReq+0x2a>
 801608c:	e7f5      	b.n	801607a <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801608e:	888b      	ldrh	r3, [r1, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d140      	bne.n	8016116 <USBD_StdDevReq+0x18a>
 8016094:	88cb      	ldrh	r3, [r1, #6]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d13d      	bne.n	8016116 <USBD_StdDevReq+0x18a>
 801609a:	884e      	ldrh	r6, [r1, #2]
 801609c:	2e7f      	cmp	r6, #127	; 0x7f
 801609e:	d83a      	bhi.n	8016116 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80160a4:	2b03      	cmp	r3, #3
 80160a6:	d036      	beq.n	8016116 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80160a8:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80160aa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80160ae:	f00f f8cd 	bl	802524c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80160b2:	4628      	mov	r0, r5
 80160b4:	f000 fa54 	bl	8016560 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80160b8:	2e00      	cmp	r6, #0
 80160ba:	f040 80da 	bne.w	8016272 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80160be:	2301      	movs	r3, #1
 80160c0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80160c4:	e777      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 80160c6:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 80160c8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80160ca:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80160ce:	0a13      	lsrs	r3, r2, #8
 80160d0:	3b01      	subs	r3, #1
 80160d2:	2b0e      	cmp	r3, #14
 80160d4:	d81f      	bhi.n	8016116 <USBD_StdDevReq+0x18a>
 80160d6:	e8df f003 	tbb	[pc, r3]
 80160da:	6b77      	.short	0x6b77
 80160dc:	4f1e1e59 	.word	0x4f1e1e59
 80160e0:	1e1e1e43 	.word	0x1e1e1e43
 80160e4:	1e1e1e1e 	.word	0x1e1e1e1e
 80160e8:	29          	.byte	0x29
 80160e9:	00          	.byte	0x00
  if (req->wLength != 1U)
 80160ea:	88ca      	ldrh	r2, [r1, #6]
 80160ec:	2a01      	cmp	r2, #1
 80160ee:	d112      	bne.n	8016116 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 80160f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	f200 8098 	bhi.w	801622a <USBD_StdDevReq+0x29e>
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f43f af52 	beq.w	8015fa4 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8016100:	4601      	mov	r1, r0
 8016102:	2300      	movs	r3, #0
 8016104:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016108:	f000 f9fa 	bl	8016500 <USBD_CtlSendData>
      break;
 801610c:	e753      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801610e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016112:	699b      	ldr	r3, [r3, #24]
 8016114:	b97b      	cbnz	r3, 8016136 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016116:	2180      	movs	r1, #128	; 0x80
 8016118:	4628      	mov	r0, r5
 801611a:	f00f f867 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801611e:	2100      	movs	r1, #0
 8016120:	4628      	mov	r0, r5
 8016122:	f00f f863 	bl	80251ec <USBD_LL_StallEP>
}
 8016126:	4620      	mov	r0, r4
 8016128:	b002      	add	sp, #8
 801612a:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 801612c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016130:	69db      	ldr	r3, [r3, #28]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d0ef      	beq.n	8016116 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016136:	f10d 0106 	add.w	r1, sp, #6
 801613a:	7c28      	ldrb	r0, [r5, #16]
 801613c:	4798      	blx	r3
    if (req->wLength != 0U)
 801613e:	88f2      	ldrh	r2, [r6, #6]
 8016140:	2a00      	cmp	r2, #0
 8016142:	d06e      	beq.n	8016222 <USBD_StdDevReq+0x296>
      if (len != 0U)
 8016144:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d0e4      	beq.n	8016116 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 801614c:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801614e:	4601      	mov	r1, r0
 8016150:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8016152:	bf28      	it	cs
 8016154:	461a      	movcs	r2, r3
 8016156:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801615a:	f000 f9d1 	bl	8016500 <USBD_CtlSendData>
 801615e:	e72a      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016160:	7c03      	ldrb	r3, [r0, #16]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d1d7      	bne.n	8016116 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016166:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801616a:	f10d 0006 	add.w	r0, sp, #6
 801616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016170:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016172:	2307      	movs	r3, #7
 8016174:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8016176:	e7e2      	b.n	801613e <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016178:	7c03      	ldrb	r3, [r0, #16]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d1cb      	bne.n	8016116 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801617e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8016182:	f10d 0006 	add.w	r0, sp, #6
 8016186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016188:	4798      	blx	r3
  if (err != 0U)
 801618a:	e7d8      	b.n	801613e <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 801618c:	b2d2      	uxtb	r2, r2
 801618e:	2a05      	cmp	r2, #5
 8016190:	d8c1      	bhi.n	8016116 <USBD_StdDevReq+0x18a>
 8016192:	a301      	add	r3, pc, #4	; (adr r3, 8016198 <USBD_StdDevReq+0x20c>)
 8016194:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8016198:	08016209 	.word	0x08016209
 801619c:	080161fd 	.word	0x080161fd
 80161a0:	080161f1 	.word	0x080161f1
 80161a4:	080161e5 	.word	0x080161e5
 80161a8:	080161d9 	.word	0x080161d9
 80161ac:	0801610f 	.word	0x0801610f
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161b0:	7c03      	ldrb	r3, [r0, #16]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d17e      	bne.n	80162b4 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80161b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80161ba:	f10d 0006 	add.w	r0, sp, #6
 80161be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161c0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80161c2:	2302      	movs	r3, #2
 80161c4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80161c6:	e7ba      	b.n	801613e <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80161c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161cc:	f10d 0106 	add.w	r1, sp, #6
 80161d0:	7c00      	ldrb	r0, [r0, #16]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4798      	blx	r3
  if (err != 0U)
 80161d6:	e7b2      	b.n	801613e <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80161d8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161dc:	695b      	ldr	r3, [r3, #20]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d1a9      	bne.n	8016136 <USBD_StdDevReq+0x1aa>
 80161e2:	e798      	b.n	8016116 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80161e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161e8:	691b      	ldr	r3, [r3, #16]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d1a3      	bne.n	8016136 <USBD_StdDevReq+0x1aa>
 80161ee:	e792      	b.n	8016116 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80161f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d19d      	bne.n	8016136 <USBD_StdDevReq+0x1aa>
 80161fa:	e78c      	b.n	8016116 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80161fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8016200:	689b      	ldr	r3, [r3, #8]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d197      	bne.n	8016136 <USBD_StdDevReq+0x1aa>
 8016206:	e786      	b.n	8016116 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016208:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d191      	bne.n	8016136 <USBD_StdDevReq+0x1aa>
 8016212:	e780      	b.n	8016116 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016214:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8016216:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016218:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801621a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801621e:	f7ff fd8b 	bl	8015d38 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016222:	4628      	mov	r0, r5
 8016224:	f000 f99c 	bl	8016560 <USBD_CtlSendStatus>
 8016228:	e6c5      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 801622a:	2b03      	cmp	r3, #3
 801622c:	f47f aeba 	bne.w	8015fa4 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016230:	1d01      	adds	r1, r0, #4
 8016232:	f000 f965 	bl	8016500 <USBD_CtlSendData>
      break;
 8016236:	e6be      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8016238:	2900      	cmp	r1, #0
 801623a:	d0eb      	beq.n	8016214 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 801623c:	6841      	ldr	r1, [r0, #4]
 801623e:	2901      	cmp	r1, #1
 8016240:	d0ef      	beq.n	8016222 <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016242:	b2c9      	uxtb	r1, r1
 8016244:	f7ff fd78 	bl	8015d38 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016248:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801624a:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 801624c:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801624e:	f7ff fd6b 	bl	8015d28 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8016252:	4606      	mov	r6, r0
 8016254:	2800      	cmp	r0, #0
 8016256:	d0e4      	beq.n	8016222 <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016258:	2180      	movs	r1, #128	; 0x80
 801625a:	4628      	mov	r0, r5
 801625c:	f00e ffc6 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016260:	2100      	movs	r1, #0
 8016262:	4628      	mov	r0, r5
 8016264:	4634      	mov	r4, r6
 8016266:	f00e ffc1 	bl	80251ec <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801626a:	7929      	ldrb	r1, [r5, #4]
 801626c:	4628      	mov	r0, r5
 801626e:	f7ff fd63 	bl	8015d38 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016272:	2302      	movs	r3, #2
 8016274:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8016278:	e69d      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 801627a:	2900      	cmp	r1, #0
 801627c:	d0d1      	beq.n	8016222 <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 801627e:	2101      	movs	r1, #1
 8016280:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8016282:	f7ff fd51 	bl	8015d28 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8016286:	4604      	mov	r4, r0
 8016288:	2800      	cmp	r0, #0
 801628a:	f47f af44 	bne.w	8016116 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 801628e:	4628      	mov	r0, r5
 8016290:	f000 f966 	bl	8016560 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016294:	2303      	movs	r3, #3
 8016296:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801629a:	e68c      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801629c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801629e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162a0:	f00e ffa4 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162a4:	2100      	movs	r1, #0
 80162a6:	4628      	mov	r0, r5
 80162a8:	f00e ffa0 	bl	80251ec <USBD_LL_StallEP>
}
 80162ac:	e683      	b.n	8015fb6 <USBD_StdDevReq+0x2a>
 80162ae:	bf00      	nop
 80162b0:	20006680 	.word	0x20006680
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80162b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80162b8:	f10d 0006 	add.w	r0, sp, #6
 80162bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162be:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80162c0:	2302      	movs	r3, #2
 80162c2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80162c4:	e73b      	b.n	801613e <USBD_StdDevReq+0x1b2>
 80162c6:	bf00      	nop

080162c8 <USBD_StdItfReq>:
{
 80162c8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162ca:	780b      	ldrb	r3, [r1, #0]
{
 80162cc:	460d      	mov	r5, r1
 80162ce:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80162d4:	2a40      	cmp	r2, #64	; 0x40
 80162d6:	d00b      	beq.n	80162f0 <USBD_StdItfReq+0x28>
 80162d8:	065b      	lsls	r3, r3, #25
 80162da:	d509      	bpl.n	80162f0 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80162dc:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162de:	2180      	movs	r1, #128	; 0x80
 80162e0:	f00e ff84 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162e4:	4620      	mov	r0, r4
 80162e6:	4629      	mov	r1, r5
 80162e8:	f00e ff80 	bl	80251ec <USBD_LL_StallEP>
}
 80162ec:	4628      	mov	r0, r5
 80162ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80162f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80162f4:	3b01      	subs	r3, #1
 80162f6:	2b02      	cmp	r3, #2
 80162f8:	d812      	bhi.n	8016320 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80162fa:	792b      	ldrb	r3, [r5, #4]
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	d80f      	bhi.n	8016320 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016300:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8016304:	4629      	mov	r1, r5
 8016306:	4620      	mov	r0, r4
 8016308:	689b      	ldr	r3, [r3, #8]
 801630a:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 801630c:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801630e:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8016310:	2b00      	cmp	r3, #0
 8016312:	d1eb      	bne.n	80162ec <USBD_StdItfReq+0x24>
 8016314:	2800      	cmp	r0, #0
 8016316:	d1e9      	bne.n	80162ec <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8016318:	4620      	mov	r0, r4
 801631a:	f000 f921 	bl	8016560 <USBD_CtlSendStatus>
 801631e:	e7e5      	b.n	80162ec <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016320:	2180      	movs	r1, #128	; 0x80
 8016322:	4620      	mov	r0, r4
 8016324:	f00e ff62 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016328:	2100      	movs	r1, #0
 801632a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 801632c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801632e:	f00e ff5d 	bl	80251ec <USBD_LL_StallEP>
}
 8016332:	4628      	mov	r0, r5
 8016334:	bd38      	pop	{r3, r4, r5, pc}
 8016336:	bf00      	nop

08016338 <USBD_StdEPReq>:
{
 8016338:	b570      	push	{r4, r5, r6, lr}
 801633a:	780b      	ldrb	r3, [r1, #0]
 801633c:	460d      	mov	r5, r1
 801633e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016344:	2b20      	cmp	r3, #32
 8016346:	d00c      	beq.n	8016362 <USBD_StdEPReq+0x2a>
 8016348:	2b40      	cmp	r3, #64	; 0x40
 801634a:	d00a      	beq.n	8016362 <USBD_StdEPReq+0x2a>
 801634c:	b18b      	cbz	r3, 8016372 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801634e:	2180      	movs	r1, #128	; 0x80
 8016350:	4620      	mov	r0, r4
 8016352:	f00e ff4b 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016356:	2100      	movs	r1, #0
 8016358:	4620      	mov	r0, r4
 801635a:	f00e ff47 	bl	80251ec <USBD_LL_StallEP>
}
 801635e:	2000      	movs	r0, #0
 8016360:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016362:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8016366:	4629      	mov	r1, r5
 8016368:	4620      	mov	r0, r4
 801636a:	689b      	ldr	r3, [r3, #8]
}
 801636c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016370:	4718      	bx	r3
    switch (req->bRequest)
 8016372:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8016374:	888a      	ldrh	r2, [r1, #4]
 8016376:	2b01      	cmp	r3, #1
 8016378:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801637a:	d036      	beq.n	80163ea <USBD_StdEPReq+0xb2>
 801637c:	2b03      	cmp	r3, #3
 801637e:	d023      	beq.n	80163c8 <USBD_StdEPReq+0x90>
 8016380:	2b00      	cmp	r3, #0
 8016382:	d1e4      	bne.n	801634e <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8016384:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8016388:	2b02      	cmp	r3, #2
 801638a:	d04c      	beq.n	8016426 <USBD_StdEPReq+0xee>
 801638c:	2b03      	cmp	r3, #3
 801638e:	d1de      	bne.n	801634e <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016390:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8016394:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016396:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801639a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801639e:	d453      	bmi.n	8016448 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80163a0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d0d2      	beq.n	801634e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80163ac:	2514      	movs	r5, #20
 80163ae:	fb05 0503 	mla	r5, r5, r3, r0
 80163b2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d152      	bne.n	8016460 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 80163ba:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80163bc:	2202      	movs	r2, #2
 80163be:	4629      	mov	r1, r5
 80163c0:	4620      	mov	r0, r4
 80163c2:	f000 f89d 	bl	8016500 <USBD_CtlSendData>
          break;
 80163c6:	e7ca      	b.n	801635e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80163c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80163cc:	2b02      	cmp	r3, #2
 80163ce:	d021      	beq.n	8016414 <USBD_StdEPReq+0xdc>
 80163d0:	2b03      	cmp	r3, #3
 80163d2:	d1bc      	bne.n	801634e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80163d4:	886b      	ldrh	r3, [r5, #2]
 80163d6:	b923      	cbnz	r3, 80163e2 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80163d8:	064a      	lsls	r2, r1, #25
 80163da:	d002      	beq.n	80163e2 <USBD_StdEPReq+0xaa>
 80163dc:	88eb      	ldrh	r3, [r5, #6]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d049      	beq.n	8016476 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 80163e2:	4620      	mov	r0, r4
 80163e4:	f000 f8bc 	bl	8016560 <USBD_CtlSendStatus>
        break;
 80163e8:	e7b9      	b.n	801635e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80163ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d010      	beq.n	8016414 <USBD_StdEPReq+0xdc>
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d1ab      	bne.n	801634e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80163f6:	886b      	ldrh	r3, [r5, #2]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d1b0      	bne.n	801635e <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80163fc:	064e      	lsls	r6, r1, #25
 80163fe:	d135      	bne.n	801646c <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8016400:	4620      	mov	r0, r4
 8016402:	f000 f8ad 	bl	8016560 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016406:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801640a:	4629      	mov	r1, r5
 801640c:	4620      	mov	r0, r4
 801640e:	689b      	ldr	r3, [r3, #8]
 8016410:	4798      	blx	r3
 8016412:	e7a4      	b.n	801635e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016414:	064b      	lsls	r3, r1, #25
 8016416:	d09a      	beq.n	801634e <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016418:	f00e fee8 	bl	80251ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801641c:	2180      	movs	r1, #128	; 0x80
 801641e:	4620      	mov	r0, r4
 8016420:	f00e fee4 	bl	80251ec <USBD_LL_StallEP>
 8016424:	e79b      	b.n	801635e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016426:	0648      	lsls	r0, r1, #25
 8016428:	d191      	bne.n	801634e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801642a:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 801642c:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016430:	f04f 0202 	mov.w	r2, #2
 8016434:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016436:	bf4c      	ite	mi
 8016438:	f104 0114 	addmi.w	r1, r4, #20
 801643c:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8016440:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016442:	f000 f85d 	bl	8016500 <USBD_CtlSendData>
        break;
 8016446:	e78a      	b.n	801635e <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801644a:	2b00      	cmp	r3, #0
 801644c:	f43f af7f 	beq.w	801634e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016450:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8016454:	1c5d      	adds	r5, r3, #1
 8016456:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801645a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801645e:	e7aa      	b.n	80163b6 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016460:	4620      	mov	r0, r4
 8016462:	f00e fedf 	bl	8025224 <USBD_LL_IsStallEP>
 8016466:	b120      	cbz	r0, 8016472 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8016468:	2301      	movs	r3, #1
 801646a:	e7a6      	b.n	80163ba <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801646c:	f00e fecc 	bl	8025208 <USBD_LL_ClearStallEP>
 8016470:	e7c6      	b.n	8016400 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8016472:	6028      	str	r0, [r5, #0]
 8016474:	e7a2      	b.n	80163bc <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8016476:	f00e feb9 	bl	80251ec <USBD_LL_StallEP>
 801647a:	e7b2      	b.n	80163e2 <USBD_StdEPReq+0xaa>

0801647c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 801647c:	780b      	ldrb	r3, [r1, #0]
 801647e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8016480:	784b      	ldrb	r3, [r1, #1]
 8016482:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8016484:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8016486:	8043      	strh	r3, [r0, #2]
 8016488:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 801648a:	8083      	strh	r3, [r0, #4]
 801648c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801648e:	80c3      	strh	r3, [r0, #6]
}
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop

08016494 <USBD_CtlError>:
{
 8016494:	b510      	push	{r4, lr}
 8016496:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016498:	2180      	movs	r1, #128	; 0x80
 801649a:	f00e fea7 	bl	80251ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801649e:	2100      	movs	r1, #0
 80164a0:	4620      	mov	r0, r4
}
 80164a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80164a6:	f00e bea1 	b.w	80251ec <USBD_LL_StallEP>
 80164aa:	bf00      	nop

080164ac <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80164ac:	b318      	cbz	r0, 80164f6 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80164ae:	7803      	ldrb	r3, [r0, #0]
{
 80164b0:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80164b2:	b30b      	cbz	r3, 80164f8 <USBD_GetString+0x4c>
 80164b4:	4604      	mov	r4, r0
 80164b6:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80164ba:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80164be:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	2d00      	cmp	r5, #0
 80164c6:	d1f8      	bne.n	80164ba <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80164c8:	3301      	adds	r3, #1
 80164ca:	005b      	lsls	r3, r3, #1
 80164cc:	b2dc      	uxtb	r4, r3
 80164ce:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80164d0:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80164d2:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80164d4:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80164d6:	7804      	ldrb	r4, [r0, #0]
 80164d8:	b15c      	cbz	r4, 80164f2 <USBD_GetString+0x46>
  idx++;
 80164da:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80164dc:	2500      	movs	r5, #0
    idx++;
 80164de:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80164e0:	54cc      	strb	r4, [r1, r3]
    idx++;
 80164e2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80164e4:	b2d2      	uxtb	r2, r2
    idx++;
 80164e6:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80164e8:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80164ea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80164ee:	2c00      	cmp	r4, #0
 80164f0:	d1f5      	bne.n	80164de <USBD_GetString+0x32>
}
 80164f2:	bc30      	pop	{r4, r5}
 80164f4:	4770      	bx	lr
 80164f6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80164f8:	2402      	movs	r4, #2
 80164fa:	4623      	mov	r3, r4
 80164fc:	e7e7      	b.n	80164ce <USBD_GetString+0x22>
 80164fe:	bf00      	nop

08016500 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016500:	b510      	push	{r4, lr}
 8016502:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016504:	2402      	movs	r4, #2
{
 8016506:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016508:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801650a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 801650e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016512:	f00e fea9 	bl	8025268 <USBD_LL_Transmit>

  return USBD_OK;
}
 8016516:	2000      	movs	r0, #0
 8016518:	bd10      	pop	{r4, pc}
 801651a:	bf00      	nop

0801651c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801651c:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801651e:	2100      	movs	r1, #0
{
 8016520:	b508      	push	{r3, lr}
 8016522:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016524:	4662      	mov	r2, ip
 8016526:	f00e fe9f 	bl	8025268 <USBD_LL_Transmit>

  return USBD_OK;
}
 801652a:	2000      	movs	r0, #0
 801652c:	bd08      	pop	{r3, pc}
 801652e:	bf00      	nop

08016530 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016530:	b510      	push	{r4, lr}
 8016532:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016534:	2403      	movs	r4, #3
{
 8016536:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016538:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801653a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 801653e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016542:	f00e fe9f 	bl	8025284 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8016546:	2000      	movs	r0, #0
 8016548:	bd10      	pop	{r4, pc}
 801654a:	bf00      	nop

0801654c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801654c:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801654e:	2100      	movs	r1, #0
{
 8016550:	b508      	push	{r3, lr}
 8016552:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016554:	4662      	mov	r2, ip
 8016556:	f00e fe95 	bl	8025284 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801655a:	2000      	movs	r0, #0
 801655c:	bd08      	pop	{r3, pc}
 801655e:	bf00      	nop

08016560 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016560:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016562:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016564:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016566:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801656a:	461a      	mov	r2, r3
 801656c:	4619      	mov	r1, r3
 801656e:	f00e fe7b 	bl	8025268 <USBD_LL_Transmit>

  return USBD_OK;
}
 8016572:	2000      	movs	r0, #0
 8016574:	bd08      	pop	{r3, pc}
 8016576:	bf00      	nop

08016578 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016578:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801657a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801657c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801657e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016582:	461a      	mov	r2, r3
 8016584:	4619      	mov	r1, r3
 8016586:	f00e fe7d 	bl	8025284 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801658a:	2000      	movs	r0, #0
 801658c:	bd08      	pop	{r3, pc}
 801658e:	bf00      	nop

08016590 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8016590:	4b10      	ldr	r3, [pc, #64]	; (80165d4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016592:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8016594:	7a5c      	ldrb	r4, [r3, #9]
 8016596:	b9cc      	cbnz	r4, 80165cc <FATFS_LinkDriver+0x3c>
 8016598:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 801659a:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 801659e:	7a5c      	ldrb	r4, [r3, #9]
 80165a0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80165a2:	7a5c      	ldrb	r4, [r3, #9]
 80165a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80165a8:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80165aa:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80165ac:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80165ae:	441c      	add	r4, r3
 80165b0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80165b2:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80165b4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80165b6:	b2e4      	uxtb	r4, r4
 80165b8:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80165ba:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80165bc:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80165be:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80165c0:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80165c2:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80165c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80165c8:	708b      	strb	r3, [r1, #2]
}
 80165ca:	4770      	bx	lr
  uint8_t ret = 1;
 80165cc:	2001      	movs	r0, #1
}
 80165ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165d2:	4770      	bx	lr
 80165d4:	20006684 	.word	0x20006684

080165d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80165d8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80165da:	f001 faad 	bl	8017b38 <vTaskStartScheduler>
  
  return osOK;
}
 80165de:	2000      	movs	r0, #0
 80165e0:	bd08      	pop	{r3, pc}
 80165e2:	bf00      	nop

080165e4 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165e4:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80165e8:	b10b      	cbz	r3, 80165ee <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80165ea:	f001 bb07 	b.w	8017bfc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80165ee:	f001 baff 	b.w	8017bf0 <xTaskGetTickCount>
 80165f2:	bf00      	nop

080165f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80165f4:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80165f6:	6944      	ldr	r4, [r0, #20]
{
 80165f8:	b086      	sub	sp, #24
 80165fa:	4684      	mov	ip, r0
 80165fc:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80165fe:	b1ac      	cbz	r4, 801662c <osThreadCreate+0x38>
 8016600:	6986      	ldr	r6, [r0, #24]
 8016602:	b19e      	cbz	r6, 801662c <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016604:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016608:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 801660c:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016610:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8016614:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 8016616:	bf14      	ite	ne
 8016618:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801661c:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801661e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8016622:	9500      	str	r5, [sp, #0]
 8016624:	f001 f932 	bl	801788c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8016628:	b006      	add	sp, #24
 801662a:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801662c:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8016630:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8016634:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8016636:	bf14      	ite	ne
 8016638:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801663a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801663c:	e9dc 1000 	ldrd	r1, r0, [ip]
 8016640:	9400      	str	r4, [sp, #0]
 8016642:	ac05      	add	r4, sp, #20
 8016644:	9401      	str	r4, [sp, #4]
 8016646:	f001 f961 	bl	801790c <xTaskCreate>
 801664a:	2801      	cmp	r0, #1
  return handle;
 801664c:	bf0c      	ite	eq
 801664e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8016650:	2000      	movne	r0, #0
}
 8016652:	b006      	add	sp, #24
 8016654:	bd70      	pop	{r4, r5, r6, pc}
 8016656:	bf00      	nop

08016658 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016658:	2801      	cmp	r0, #1
{
 801665a:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801665c:	bf38      	it	cc
 801665e:	2001      	movcc	r0, #1
 8016660:	f001 fc2c 	bl	8017ebc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016664:	2000      	movs	r0, #0
 8016666:	bd08      	pop	{r3, pc}

08016668 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8016668:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 801666a:	6844      	ldr	r4, [r0, #4]
{
 801666c:	b082      	sub	sp, #8
 801666e:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8016670:	b16c      	cbz	r4, 801668e <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8016672:	f1a1 0201 	sub.w	r2, r1, #1
 8016676:	6800      	ldr	r0, [r0, #0]
 8016678:	2101      	movs	r1, #1
 801667a:	fab2 f282 	clz	r2, r2
 801667e:	0952      	lsrs	r2, r2, #5
 8016680:	e9cd 0400 	strd	r0, r4, [sp]
 8016684:	4808      	ldr	r0, [pc, #32]	; (80166a8 <osTimerCreate+0x40>)
 8016686:	f001 ffcd 	bl	8018624 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 801668a:	b002      	add	sp, #8
 801668c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 801668e:	f1a1 0201 	sub.w	r2, r1, #1
 8016692:	6804      	ldr	r4, [r0, #0]
 8016694:	2101      	movs	r1, #1
 8016696:	4804      	ldr	r0, [pc, #16]	; (80166a8 <osTimerCreate+0x40>)
 8016698:	fab2 f282 	clz	r2, r2
 801669c:	9400      	str	r4, [sp, #0]
 801669e:	0952      	lsrs	r2, r2, #5
 80166a0:	f001 ff90 	bl	80185c4 <xTimerCreate>
}
 80166a4:	b002      	add	sp, #8
 80166a6:	bd10      	pop	{r4, pc}
 80166a8:	0802b6b0 	.word	0x0802b6b0

080166ac <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80166ac:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80166ae:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 80166b0:	b109      	cbz	r1, 80166b6 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80166b2:	f000 bbc9 	b.w	8016e48 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80166b6:	f000 bbdf 	b.w	8016e78 <xQueueCreateMutex>
 80166ba:	bf00      	nop

080166bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80166bc:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80166be:	2400      	movs	r4, #0
{
 80166c0:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80166c2:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80166c4:	b310      	cbz	r0, 801670c <osMutexWait+0x50>
 80166c6:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80166ca:	b933      	cbnz	r3, 80166da <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80166cc:	f000 fd88 	bl	80171e0 <xQueueSemaphoreTake>
 80166d0:	2801      	cmp	r0, #1
 80166d2:	d118      	bne.n	8016706 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80166d4:	2000      	movs	r0, #0
}
 80166d6:	b002      	add	sp, #8
 80166d8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80166da:	aa01      	add	r2, sp, #4
 80166dc:	4621      	mov	r1, r4
 80166de:	f000 fe63 	bl	80173a8 <xQueueReceiveFromISR>
 80166e2:	2801      	cmp	r0, #1
 80166e4:	d10f      	bne.n	8016706 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80166e6:	9b01      	ldr	r3, [sp, #4]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d0f3      	beq.n	80166d4 <osMutexWait+0x18>
 80166ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80166f8:	f3bf 8f4f 	dsb	sy
 80166fc:	f3bf 8f6f 	isb	sy
  return osOK;
 8016700:	4620      	mov	r0, r4
}
 8016702:	b002      	add	sp, #8
 8016704:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8016706:	20ff      	movs	r0, #255	; 0xff
}
 8016708:	b002      	add	sp, #8
 801670a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801670c:	2080      	movs	r0, #128	; 0x80
}
 801670e:	b002      	add	sp, #8
 8016710:	bd10      	pop	{r4, pc}
 8016712:	bf00      	nop

08016714 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8016714:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8016716:	2400      	movs	r4, #0
{
 8016718:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 801671a:	9401      	str	r4, [sp, #4]
 801671c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8016720:	b19b      	cbz	r3, 801674a <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016722:	a901      	add	r1, sp, #4
 8016724:	f000 fc34 	bl	8016f90 <xQueueGiveFromISR>
 8016728:	2801      	cmp	r0, #1
 801672a:	d114      	bne.n	8016756 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801672c:	9b01      	ldr	r3, [sp, #4]
 801672e:	b1ab      	cbz	r3, 801675c <osMutexRelease+0x48>
 8016730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016738:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801673c:	f3bf 8f4f 	dsb	sy
 8016740:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8016744:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8016746:	b002      	add	sp, #8
 8016748:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801674a:	461a      	mov	r2, r3
 801674c:	4619      	mov	r1, r3
 801674e:	f000 faad 	bl	8016cac <xQueueGenericSend>
 8016752:	2801      	cmp	r0, #1
 8016754:	d002      	beq.n	801675c <osMutexRelease+0x48>
    result = osErrorOS;
 8016756:	20ff      	movs	r0, #255	; 0xff
}
 8016758:	b002      	add	sp, #8
 801675a:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 801675c:	2000      	movs	r0, #0
}
 801675e:	b002      	add	sp, #8
 8016760:	bd10      	pop	{r4, pc}
 8016762:	bf00      	nop

08016764 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016764:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8016766:	6844      	ldr	r4, [r0, #4]
{ 
 8016768:	b083      	sub	sp, #12
 801676a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 801676c:	b184      	cbz	r4, 8016790 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801676e:	2901      	cmp	r1, #1
 8016770:	d003      	beq.n	801677a <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8016772:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8016774:	4620      	mov	r0, r4
 8016776:	b003      	add	sp, #12
 8016778:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801677a:	2200      	movs	r2, #0
 801677c:	2503      	movs	r5, #3
 801677e:	4623      	mov	r3, r4
 8016780:	4611      	mov	r1, r2
 8016782:	9500      	str	r5, [sp, #0]
 8016784:	f000 fa08 	bl	8016b98 <xQueueGenericCreateStatic>
 8016788:	4604      	mov	r4, r0
}
 801678a:	4620      	mov	r0, r4
 801678c:	b003      	add	sp, #12
 801678e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8016790:	2901      	cmp	r1, #1
 8016792:	d1ef      	bne.n	8016774 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8016794:	4621      	mov	r1, r4
 8016796:	2203      	movs	r2, #3
 8016798:	f000 fa56 	bl	8016c48 <xQueueGenericCreate>
 801679c:	4604      	mov	r4, r0
 801679e:	2800      	cmp	r0, #0
 80167a0:	d0e8      	beq.n	8016774 <osSemaphoreCreate+0x10>
 80167a2:	2300      	movs	r3, #0
 80167a4:	461a      	mov	r2, r3
 80167a6:	4619      	mov	r1, r3
 80167a8:	f000 fa80 	bl	8016cac <xQueueGenericSend>
 80167ac:	e7e2      	b.n	8016774 <osSemaphoreCreate+0x10>
 80167ae:	bf00      	nop

080167b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80167b0:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80167b2:	2400      	movs	r4, #0
{
 80167b4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80167b6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80167b8:	b310      	cbz	r0, 8016800 <osSemaphoreWait+0x50>
 80167ba:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80167be:	b933      	cbnz	r3, 80167ce <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80167c0:	f000 fd0e 	bl	80171e0 <xQueueSemaphoreTake>
 80167c4:	2801      	cmp	r0, #1
 80167c6:	d118      	bne.n	80167fa <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80167c8:	2000      	movs	r0, #0
}
 80167ca:	b002      	add	sp, #8
 80167cc:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80167ce:	aa01      	add	r2, sp, #4
 80167d0:	4621      	mov	r1, r4
 80167d2:	f000 fde9 	bl	80173a8 <xQueueReceiveFromISR>
 80167d6:	2801      	cmp	r0, #1
 80167d8:	d10f      	bne.n	80167fa <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80167da:	9b01      	ldr	r3, [sp, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d0f3      	beq.n	80167c8 <osSemaphoreWait+0x18>
 80167e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80167e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80167ec:	f3bf 8f4f 	dsb	sy
 80167f0:	f3bf 8f6f 	isb	sy
  return osOK;
 80167f4:	4620      	mov	r0, r4
}
 80167f6:	b002      	add	sp, #8
 80167f8:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80167fa:	20ff      	movs	r0, #255	; 0xff
}
 80167fc:	b002      	add	sp, #8
 80167fe:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8016800:	2080      	movs	r0, #128	; 0x80
}
 8016802:	b002      	add	sp, #8
 8016804:	bd10      	pop	{r4, pc}
 8016806:	bf00      	nop

08016808 <osSemaphoreRelease>:
 8016808:	b510      	push	{r4, lr}
 801680a:	2400      	movs	r4, #0
 801680c:	b082      	sub	sp, #8
 801680e:	9401      	str	r4, [sp, #4]
 8016810:	f3ef 8305 	mrs	r3, IPSR
 8016814:	b19b      	cbz	r3, 801683e <osSemaphoreRelease+0x36>
 8016816:	a901      	add	r1, sp, #4
 8016818:	f000 fbba 	bl	8016f90 <xQueueGiveFromISR>
 801681c:	2801      	cmp	r0, #1
 801681e:	d114      	bne.n	801684a <osSemaphoreRelease+0x42>
 8016820:	9b01      	ldr	r3, [sp, #4]
 8016822:	b1ab      	cbz	r3, 8016850 <osSemaphoreRelease+0x48>
 8016824:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801682c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016830:	f3bf 8f4f 	dsb	sy
 8016834:	f3bf 8f6f 	isb	sy
 8016838:	4620      	mov	r0, r4
 801683a:	b002      	add	sp, #8
 801683c:	bd10      	pop	{r4, pc}
 801683e:	461a      	mov	r2, r3
 8016840:	4619      	mov	r1, r3
 8016842:	f000 fa33 	bl	8016cac <xQueueGenericSend>
 8016846:	2801      	cmp	r0, #1
 8016848:	d002      	beq.n	8016850 <osSemaphoreRelease+0x48>
 801684a:	20ff      	movs	r0, #255	; 0xff
 801684c:	b002      	add	sp, #8
 801684e:	bd10      	pop	{r4, pc}
 8016850:	2000      	movs	r0, #0
 8016852:	b002      	add	sp, #8
 8016854:	bd10      	pop	{r4, pc}
 8016856:	bf00      	nop

08016858 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016858:	6882      	ldr	r2, [r0, #8]
 801685a:	b15a      	cbz	r2, 8016874 <osMessageCreate+0x1c>
 801685c:	68c3      	ldr	r3, [r0, #12]
 801685e:	b14b      	cbz	r3, 8016874 <osMessageCreate+0x1c>
{
 8016860:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016862:	2400      	movs	r4, #0
{
 8016864:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016866:	e9d0 0100 	ldrd	r0, r1, [r0]
 801686a:	9400      	str	r4, [sp, #0]
 801686c:	f000 f994 	bl	8016b98 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8016870:	b002      	add	sp, #8
 8016872:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016874:	2200      	movs	r2, #0
 8016876:	e9d0 0100 	ldrd	r0, r1, [r0]
 801687a:	f000 b9e5 	b.w	8016c48 <xQueueGenericCreate>
 801687e:	bf00      	nop

08016880 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016880:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8016882:	2400      	movs	r4, #0
{
 8016884:	b084      	sub	sp, #16
 8016886:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016888:	9403      	str	r4, [sp, #12]
 801688a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801688e:	b15b      	cbz	r3, 80168a8 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016890:	4623      	mov	r3, r4
 8016892:	aa03      	add	r2, sp, #12
 8016894:	a901      	add	r1, sp, #4
 8016896:	f000 fb09 	bl	8016eac <xQueueGenericSendFromISR>
 801689a:	2801      	cmp	r0, #1
 801689c:	d10c      	bne.n	80168b8 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801689e:	9b03      	ldr	r3, [sp, #12]
 80168a0:	b96b      	cbnz	r3, 80168be <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80168a2:	2000      	movs	r0, #0
}
 80168a4:	b004      	add	sp, #16
 80168a6:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80168a8:	2a01      	cmp	r2, #1
 80168aa:	a901      	add	r1, sp, #4
 80168ac:	bf38      	it	cc
 80168ae:	2201      	movcc	r2, #1
 80168b0:	f000 f9fc 	bl	8016cac <xQueueGenericSend>
 80168b4:	2801      	cmp	r0, #1
 80168b6:	d0f4      	beq.n	80168a2 <osMessagePut+0x22>
      return osErrorOS;
 80168b8:	20ff      	movs	r0, #255	; 0xff
}
 80168ba:	b004      	add	sp, #16
 80168bc:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80168be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80168c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	f3bf 8f6f 	isb	sy
  return osOK;
 80168d2:	4620      	mov	r0, r4
}
 80168d4:	b004      	add	sp, #16
 80168d6:	bd10      	pop	{r4, pc}

080168d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80168d8:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80168da:	2600      	movs	r6, #0
{
 80168dc:	b084      	sub	sp, #16
 80168de:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 80168e0:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80168e4:	b379      	cbz	r1, 8016946 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80168e6:	460b      	mov	r3, r1
 80168e8:	9600      	str	r6, [sp, #0]
 80168ea:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80168ee:	b991      	cbnz	r1, 8016916 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80168f0:	a902      	add	r1, sp, #8
 80168f2:	4618      	mov	r0, r3
 80168f4:	4615      	mov	r5, r2
 80168f6:	f000 fbab 	bl	8017050 <xQueueReceive>
 80168fa:	2801      	cmp	r0, #1
 80168fc:	d02d      	beq.n	801695a <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80168fe:	2d00      	cmp	r5, #0
 8016900:	bf18      	it	ne
 8016902:	2540      	movne	r5, #64	; 0x40
 8016904:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8016906:	ab04      	add	r3, sp, #16
 8016908:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801690c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016910:	4620      	mov	r0, r4
 8016912:	b004      	add	sp, #16
 8016914:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016916:	466a      	mov	r2, sp
 8016918:	4618      	mov	r0, r3
 801691a:	a902      	add	r1, sp, #8
 801691c:	f000 fd44 	bl	80173a8 <xQueueReceiveFromISR>
      event.status = osOK;
 8016920:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8016922:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8016924:	bf0c      	ite	eq
 8016926:	2210      	moveq	r2, #16
 8016928:	2200      	movne	r2, #0
 801692a:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801692c:	2b00      	cmp	r3, #0
 801692e:	d0ea      	beq.n	8016906 <osMessageGet+0x2e>
 8016930:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016938:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801693c:	f3bf 8f4f 	dsb	sy
 8016940:	f3bf 8f6f 	isb	sy
 8016944:	e7df      	b.n	8016906 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8016946:	2380      	movs	r3, #128	; 0x80
 8016948:	9301      	str	r3, [sp, #4]
    return event;
 801694a:	ab04      	add	r3, sp, #16
 801694c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016954:	4620      	mov	r0, r4
 8016956:	b004      	add	sp, #16
 8016958:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801695a:	2310      	movs	r3, #16
 801695c:	9301      	str	r3, [sp, #4]
 801695e:	e7d2      	b.n	8016906 <osMessageGet+0x2e>

08016960 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016960:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016964:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016968:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801696a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801696c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801696e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016970:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016974:	4770      	bx	lr
 8016976:	bf00      	nop

08016978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016978:	2300      	movs	r3, #0
 801697a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop

08016980 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8016980:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8016982:	6802      	ldr	r2, [r0, #0]
{
 8016984:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016986:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8016988:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 801698a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801698c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801698e:	689c      	ldr	r4, [r3, #8]
 8016990:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016992:	6099      	str	r1, [r3, #8]
}
 8016994:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8016998:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801699a:	6002      	str	r2, [r0, #0]
}
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop

080169a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80169a0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80169a2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80169a4:	1c6b      	adds	r3, r5, #1
 80169a6:	d010      	beq.n	80169ca <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80169a8:	f100 0308 	add.w	r3, r0, #8
 80169ac:	461c      	mov	r4, r3
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	42aa      	cmp	r2, r5
 80169b4:	d9fa      	bls.n	80169ac <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80169b6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80169b8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80169ba:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80169bc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80169be:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80169c0:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80169c2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80169c4:	6002      	str	r2, [r0, #0]
}
 80169c6:	bc30      	pop	{r4, r5}
 80169c8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80169ca:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	e7f2      	b.n	80169b6 <vListInsert+0x16>

080169d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80169d0:	6903      	ldr	r3, [r0, #16]
{
 80169d2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80169d4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169d6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80169da:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80169dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169e0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80169e2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80169e4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80169e8:	bf08      	it	eq
 80169ea:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80169ec:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80169ee:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80169f0:	3a01      	subs	r2, #1
 80169f2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80169f4:	6818      	ldr	r0, [r3, #0]
}
 80169f6:	4770      	bx	lr

080169f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80169f8:	b570      	push	{r4, r5, r6, lr}
 80169fa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80169fe:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a00:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016a02:	b92a      	cbnz	r2, 8016a10 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016a04:	6805      	ldr	r5, [r0, #0]
 8016a06:	b365      	cbz	r5, 8016a62 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a08:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a0a:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a0c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8016a0e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8016a10:	b97d      	cbnz	r5, 8016a32 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016a12:	6840      	ldr	r0, [r0, #4]
 8016a14:	f00e fed8 	bl	80257c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a18:	6863      	ldr	r3, [r4, #4]
 8016a1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016a1c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a1e:	68a2      	ldr	r2, [r4, #8]
 8016a20:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a22:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a24:	d319      	bcc.n	8016a5a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a26:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a28:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a2a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a2c:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a2e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a30:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a32:	68c0      	ldr	r0, [r0, #12]
 8016a34:	f00e fec8 	bl	80257c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016a3a:	68e3      	ldr	r3, [r4, #12]
 8016a3c:	4251      	negs	r1, r2
 8016a3e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a40:	6822      	ldr	r2, [r4, #0]
 8016a42:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a44:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a46:	d202      	bcs.n	8016a4e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a48:	68a3      	ldr	r3, [r4, #8]
 8016a4a:	440b      	add	r3, r1
 8016a4c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8016a4e:	2d02      	cmp	r5, #2
 8016a50:	d00d      	beq.n	8016a6e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a52:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a54:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a56:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a58:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a5a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a5c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a5e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8016a60:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a62:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a64:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016a66:	f001 fbbf 	bl	80181e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a6a:	60a5      	str	r5, [r4, #8]
 8016a6c:	e7ce      	b.n	8016a0c <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a6e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8016a70:	f04f 0000 	mov.w	r0, #0
 8016a74:	bf38      	it	cc
 8016a76:	2601      	movcc	r6, #1
 8016a78:	e7c8      	b.n	8016a0c <prvCopyDataToQueue+0x14>
 8016a7a:	bf00      	nop

08016a7c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016a7c:	b570      	push	{r4, r5, r6, lr}
 8016a7e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016a80:	f002 f848 	bl	8018b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016a84:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8016a88:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a8a:	2c00      	cmp	r4, #0
 8016a8c:	dd14      	ble.n	8016ab8 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a8e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8016a92:	e003      	b.n	8016a9c <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016a94:	1e63      	subs	r3, r4, #1
 8016a96:	b2da      	uxtb	r2, r3
 8016a98:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016a9a:	b16a      	cbz	r2, 8016ab8 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a9e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016aa0:	b153      	cbz	r3, 8016ab8 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016aa2:	f001 fa89 	bl	8017fb8 <xTaskRemoveFromEventList>
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	d0f4      	beq.n	8016a94 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8016aaa:	f001 fb29 	bl	8018100 <vTaskMissedYield>
			--cTxLock;
 8016aae:	1e63      	subs	r3, r4, #1
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	d1f1      	bne.n	8016a9c <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016ab8:	23ff      	movs	r3, #255	; 0xff
 8016aba:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016abe:	f002 f84f 	bl	8018b60 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016ac2:	f002 f827 	bl	8018b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016ac6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8016aca:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016acc:	2c00      	cmp	r4, #0
 8016ace:	dd14      	ble.n	8016afa <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ad0:	f105 0610 	add.w	r6, r5, #16
 8016ad4:	e003      	b.n	8016ade <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016ad6:	1e63      	subs	r3, r4, #1
 8016ad8:	b2da      	uxtb	r2, r3
 8016ada:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016adc:	b16a      	cbz	r2, 8016afa <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ade:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ae0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ae2:	b153      	cbz	r3, 8016afa <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ae4:	f001 fa68 	bl	8017fb8 <xTaskRemoveFromEventList>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0f4      	beq.n	8016ad6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8016aec:	f001 fb08 	bl	8018100 <vTaskMissedYield>
				--cRxLock;
 8016af0:	1e63      	subs	r3, r4, #1
 8016af2:	b2da      	uxtb	r2, r3
 8016af4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	d1f1      	bne.n	8016ade <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016afa:	23ff      	movs	r3, #255	; 0xff
 8016afc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8016b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8016b04:	f002 b82c 	b.w	8018b60 <vPortExitCritical>

08016b08 <xQueueGenericReset>:
{
 8016b08:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8016b0a:	b1e0      	cbz	r0, 8016b46 <xQueueGenericReset+0x3e>
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8016b10:	f002 f800 	bl	8018b14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b14:	6822      	ldr	r2, [r4, #0]
 8016b16:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016b1a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b1c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b20:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b22:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b24:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b26:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016b28:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8016b2a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b2c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016b2e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8016b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8016b38:	b985      	cbnz	r5, 8016b5c <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b3a:	6923      	ldr	r3, [r4, #16]
 8016b3c:	b9d3      	cbnz	r3, 8016b74 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 8016b3e:	f002 f80f 	bl	8018b60 <vPortExitCritical>
}
 8016b42:	2001      	movs	r0, #1
 8016b44:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016b46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b4a:	b672      	cpsid	i
 8016b4c:	f383 8811 	msr	BASEPRI, r3
 8016b50:	f3bf 8f6f 	isb	sy
 8016b54:	f3bf 8f4f 	dsb	sy
 8016b58:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016b5a:	e7fe      	b.n	8016b5a <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016b5c:	f104 0010 	add.w	r0, r4, #16
 8016b60:	f7ff fefe 	bl	8016960 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016b64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016b68:	f7ff fefa 	bl	8016960 <vListInitialise>
	taskEXIT_CRITICAL();
 8016b6c:	f001 fff8 	bl	8018b60 <vPortExitCritical>
}
 8016b70:	2001      	movs	r0, #1
 8016b72:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b74:	f104 0010 	add.w	r0, r4, #16
 8016b78:	f001 fa1e 	bl	8017fb8 <xTaskRemoveFromEventList>
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	d0de      	beq.n	8016b3e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8016b80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b8c:	f3bf 8f4f 	dsb	sy
 8016b90:	f3bf 8f6f 	isb	sy
 8016b94:	e7d3      	b.n	8016b3e <xQueueGenericReset+0x36>
 8016b96:	bf00      	nop

08016b98 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b98:	b950      	cbnz	r0, 8016bb0 <xQueueGenericCreateStatic+0x18>
 8016b9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b9e:	b672      	cpsid	i
 8016ba0:	f383 8811 	msr	BASEPRI, r3
 8016ba4:	f3bf 8f6f 	isb	sy
 8016ba8:	f3bf 8f4f 	dsb	sy
 8016bac:	b662      	cpsie	i
 8016bae:	e7fe      	b.n	8016bae <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8016bb0:	b17b      	cbz	r3, 8016bd2 <xQueueGenericCreateStatic+0x3a>
	{
 8016bb2:	b510      	push	{r4, lr}
 8016bb4:	460c      	mov	r4, r1
 8016bb6:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016bb8:	b33a      	cbz	r2, 8016c0a <xQueueGenericCreateStatic+0x72>
 8016bba:	b9a9      	cbnz	r1, 8016be8 <xQueueGenericCreateStatic+0x50>
 8016bbc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bc0:	b672      	cpsid	i
 8016bc2:	f383 8811 	msr	BASEPRI, r3
 8016bc6:	f3bf 8f6f 	isb	sy
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	b662      	cpsie	i
 8016bd0:	e7fe      	b.n	8016bd0 <xQueueGenericCreateStatic+0x38>
 8016bd2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bd6:	b672      	cpsid	i
 8016bd8:	f383 8811 	msr	BASEPRI, r3
 8016bdc:	f3bf 8f6f 	isb	sy
 8016be0:	f3bf 8f4f 	dsb	sy
 8016be4:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8016be6:	e7fe      	b.n	8016be6 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016be8:	b17a      	cbz	r2, 8016c0a <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016bea:	2148      	movs	r1, #72	; 0x48
 8016bec:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016bee:	9903      	ldr	r1, [sp, #12]
 8016bf0:	2948      	cmp	r1, #72	; 0x48
 8016bf2:	d017      	beq.n	8016c24 <xQueueGenericCreateStatic+0x8c>
 8016bf4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bf8:	b672      	cpsid	i
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	b662      	cpsie	i
 8016c08:	e7fe      	b.n	8016c08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016c0a:	2c00      	cmp	r4, #0
 8016c0c:	d0ed      	beq.n	8016bea <xQueueGenericCreateStatic+0x52>
 8016c0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c12:	b672      	cpsid	i
 8016c14:	f383 8811 	msr	BASEPRI, r3
 8016c18:	f3bf 8f6f 	isb	sy
 8016c1c:	f3bf 8f4f 	dsb	sy
 8016c20:	b662      	cpsie	i
 8016c22:	e7fe      	b.n	8016c22 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c24:	2c00      	cmp	r4, #0
 8016c26:	bf08      	it	eq
 8016c28:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c2a:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8016c2c:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c2e:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016c30:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8016c34:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8016c36:	641c      	str	r4, [r3, #64]	; 0x40
 8016c38:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016c3a:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c3c:	f7ff ff64 	bl	8016b08 <xQueueGenericReset>
	}
 8016c40:	9b01      	ldr	r3, [sp, #4]
 8016c42:	4618      	mov	r0, r3
 8016c44:	b004      	add	sp, #16
 8016c46:	bd10      	pop	{r4, pc}

08016c48 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016c48:	b950      	cbnz	r0, 8016c60 <xQueueGenericCreate+0x18>
 8016c4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c4e:	b672      	cpsid	i
 8016c50:	f383 8811 	msr	BASEPRI, r3
 8016c54:	f3bf 8f6f 	isb	sy
 8016c58:	f3bf 8f4f 	dsb	sy
 8016c5c:	b662      	cpsie	i
 8016c5e:	e7fe      	b.n	8016c5e <xQueueGenericCreate+0x16>
	{
 8016c60:	b570      	push	{r4, r5, r6, lr}
 8016c62:	4605      	mov	r5, r0
 8016c64:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8016c66:	b979      	cbnz	r1, 8016c88 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c68:	2048      	movs	r0, #72	; 0x48
 8016c6a:	f002 f8bd 	bl	8018de8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c6e:	4604      	mov	r4, r0
 8016c70:	b1c0      	cbz	r0, 8016ca4 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c72:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016c76:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c78:	2101      	movs	r1, #1
 8016c7a:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8016c7c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016c80:	f7ff ff42 	bl	8016b08 <xQueueGenericReset>
	}
 8016c84:	4620      	mov	r0, r4
 8016c86:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c88:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016c8c:	3048      	adds	r0, #72	; 0x48
 8016c8e:	f002 f8ab 	bl	8018de8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016c92:	4604      	mov	r4, r0
 8016c94:	b130      	cbz	r0, 8016ca4 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c96:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c98:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016c9c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016ca0:	6003      	str	r3, [r0, #0]
 8016ca2:	e7e9      	b.n	8016c78 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016ca4:	2400      	movs	r4, #0
	}
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	bd70      	pop	{r4, r5, r6, pc}
 8016caa:	bf00      	nop

08016cac <xQueueGenericSend>:
{
 8016cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cb0:	b085      	sub	sp, #20
 8016cb2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	f000 8083 	beq.w	8016dc0 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cba:	460f      	mov	r7, r1
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	461e      	mov	r6, r3
 8016cc0:	2900      	cmp	r1, #0
 8016cc2:	d06b      	beq.n	8016d9c <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016cc4:	2e02      	cmp	r6, #2
 8016cc6:	d10d      	bne.n	8016ce4 <xQueueGenericSend+0x38>
 8016cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016cca:	2b01      	cmp	r3, #1
 8016ccc:	d00a      	beq.n	8016ce4 <xQueueGenericSend+0x38>
 8016cce:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016cd2:	b672      	cpsid	i
 8016cd4:	f383 8811 	msr	BASEPRI, r3
 8016cd8:	f3bf 8f6f 	isb	sy
 8016cdc:	f3bf 8f4f 	dsb	sy
 8016ce0:	b662      	cpsie	i
 8016ce2:	e7fe      	b.n	8016ce2 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ce4:	f001 fa18 	bl	8018118 <xTaskGetSchedulerState>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	d074      	beq.n	8016dd6 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cec:	f1a6 0802 	sub.w	r8, r6, #2
 8016cf0:	2500      	movs	r5, #0
 8016cf2:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8016cf6:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cf8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016cfc:	e007      	b.n	8016d0e <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8016cfe:	f001 ff2f 	bl	8018b60 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8016d02:	4620      	mov	r0, r4
 8016d04:	f7ff feba 	bl	8016a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d08:	f001 f8c6 	bl	8017e98 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016d0c:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8016d0e:	f001 ff01 	bl	8018b14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016d12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016d14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016d16:	4290      	cmp	r0, r2
 8016d18:	d36b      	bcc.n	8016df2 <xQueueGenericSend+0x146>
 8016d1a:	f1b8 0f00 	cmp.w	r8, #0
 8016d1e:	d168      	bne.n	8016df2 <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d20:	9b01      	ldr	r3, [sp, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d07d      	beq.n	8016e22 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8016d26:	2d00      	cmp	r5, #0
 8016d28:	d046      	beq.n	8016db8 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8016d2a:	f001 ff19 	bl	8018b60 <vPortExitCritical>
		vTaskSuspendAll();
 8016d2e:	f000 ff57 	bl	8017be0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d32:	f001 feef 	bl	8018b14 <vPortEnterCritical>
 8016d36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d3a:	2bff      	cmp	r3, #255	; 0xff
 8016d3c:	d101      	bne.n	8016d42 <xQueueGenericSend+0x96>
 8016d3e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8016d42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016d46:	2bff      	cmp	r3, #255	; 0xff
 8016d48:	d101      	bne.n	8016d4e <xQueueGenericSend+0xa2>
 8016d4a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8016d4e:	f001 ff07 	bl	8018b60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d52:	a901      	add	r1, sp, #4
 8016d54:	a802      	add	r0, sp, #8
 8016d56:	f001 f987 	bl	8018068 <xTaskCheckForTimeOut>
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	d165      	bne.n	8016e2a <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8016d5e:	f001 fed9 	bl	8018b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d1c9      	bne.n	8016cfe <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8016d6a:	f001 fef9 	bl	8018b60 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d6e:	9901      	ldr	r1, [sp, #4]
 8016d70:	f104 0010 	add.w	r0, r4, #16
 8016d74:	f001 f8e4 	bl	8017f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7ff fe7f 	bl	8016a7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016d7e:	f001 f88b 	bl	8017e98 <xTaskResumeAll>
 8016d82:	2800      	cmp	r0, #0
 8016d84:	d1c2      	bne.n	8016d0c <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8016d86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	f3bf 8f6f 	isb	sy
 8016d9a:	e7b7      	b.n	8016d0c <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d090      	beq.n	8016cc4 <xQueueGenericSend+0x18>
 8016da2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016da6:	b672      	cpsid	i
 8016da8:	f383 8811 	msr	BASEPRI, r3
 8016dac:	f3bf 8f6f 	isb	sy
 8016db0:	f3bf 8f4f 	dsb	sy
 8016db4:	b662      	cpsie	i
 8016db6:	e7fe      	b.n	8016db6 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016db8:	a802      	add	r0, sp, #8
 8016dba:	f001 f949 	bl	8018050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016dbe:	e7b4      	b.n	8016d2a <xQueueGenericSend+0x7e>
 8016dc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dc4:	b672      	cpsid	i
 8016dc6:	f383 8811 	msr	BASEPRI, r3
 8016dca:	f3bf 8f6f 	isb	sy
 8016dce:	f3bf 8f4f 	dsb	sy
 8016dd2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016dd4:	e7fe      	b.n	8016dd4 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016dd6:	9b01      	ldr	r3, [sp, #4]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d087      	beq.n	8016cec <xQueueGenericSend+0x40>
 8016ddc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016de0:	b672      	cpsid	i
 8016de2:	f383 8811 	msr	BASEPRI, r3
 8016de6:	f3bf 8f6f 	isb	sy
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	b662      	cpsie	i
 8016df0:	e7fe      	b.n	8016df0 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016df2:	4632      	mov	r2, r6
 8016df4:	4639      	mov	r1, r7
 8016df6:	4620      	mov	r0, r4
 8016df8:	f7ff fdfe 	bl	80169f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dfe:	b9db      	cbnz	r3, 8016e38 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8016e00:	b148      	cbz	r0, 8016e16 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8016e02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016e0e:	f3bf 8f4f 	dsb	sy
 8016e12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8016e16:	f001 fea3 	bl	8018b60 <vPortExitCritical>
				return pdPASS;
 8016e1a:	2001      	movs	r0, #1
}
 8016e1c:	b005      	add	sp, #20
 8016e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8016e22:	f001 fe9d 	bl	8018b60 <vPortExitCritical>
					return errQUEUE_FULL;
 8016e26:	4640      	mov	r0, r8
 8016e28:	e7f8      	b.n	8016e1c <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f7ff fe26 	bl	8016a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e30:	f001 f832 	bl	8017e98 <xTaskResumeAll>
			return errQUEUE_FULL;
 8016e34:	2000      	movs	r0, #0
 8016e36:	e7f1      	b.n	8016e1c <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016e3c:	f001 f8bc 	bl	8017fb8 <xTaskRemoveFromEventList>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d0e8      	beq.n	8016e16 <xQueueGenericSend+0x16a>
 8016e44:	e7dd      	b.n	8016e02 <xQueueGenericSend+0x156>
 8016e46:	bf00      	nop

08016e48 <xQueueCreateMutexStatic>:
	{
 8016e48:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016e4a:	2200      	movs	r2, #0
	{
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	b082      	sub	sp, #8
 8016e50:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016e52:	2001      	movs	r0, #1
 8016e54:	4611      	mov	r1, r2
 8016e56:	9400      	str	r4, [sp, #0]
 8016e58:	f7ff fe9e 	bl	8016b98 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	b138      	cbz	r0, 8016e70 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e60:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e62:	461a      	mov	r2, r3
 8016e64:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e66:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016e68:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016e6a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e6c:	f7ff ff1e 	bl	8016cac <xQueueGenericSend>
	}
 8016e70:	4620      	mov	r0, r4
 8016e72:	b002      	add	sp, #8
 8016e74:	bd10      	pop	{r4, pc}
 8016e76:	bf00      	nop

08016e78 <xQueueCreateMutex>:
	{
 8016e78:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016e7a:	2048      	movs	r0, #72	; 0x48
 8016e7c:	f001 ffb4 	bl	8018de8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8016e80:	4604      	mov	r4, r0
 8016e82:	b188      	cbz	r0, 8016ea8 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e84:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8016e86:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016e88:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e8a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8016e8e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016e92:	f7ff fe39 	bl	8016b08 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016e96:	462b      	mov	r3, r5
 8016e98:	462a      	mov	r2, r5
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016e9e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016ea0:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016ea2:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016ea4:	f7ff ff02 	bl	8016cac <xQueueGenericSend>
	}
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	bd38      	pop	{r3, r4, r5, pc}

08016eac <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d053      	beq.n	8016f58 <xQueueGenericSendFromISR+0xac>
{
 8016eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb4:	460e      	mov	r6, r1
 8016eb6:	4604      	mov	r4, r0
 8016eb8:	4617      	mov	r7, r2
 8016eba:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016ebc:	b359      	cbz	r1, 8016f16 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016ebe:	2d02      	cmp	r5, #2
 8016ec0:	d10d      	bne.n	8016ede <xQueueGenericSendFromISR+0x32>
 8016ec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d00a      	beq.n	8016ede <xQueueGenericSendFromISR+0x32>
 8016ec8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ecc:	b672      	cpsid	i
 8016ece:	f383 8811 	msr	BASEPRI, r3
 8016ed2:	f3bf 8f6f 	isb	sy
 8016ed6:	f3bf 8f4f 	dsb	sy
 8016eda:	b662      	cpsie	i
 8016edc:	e7fe      	b.n	8016edc <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ede:	f001 ff1f 	bl	8018d20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016ee2:	f3ef 8811 	mrs	r8, BASEPRI
 8016ee6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016eea:	b672      	cpsid	i
 8016eec:	f383 8811 	msr	BASEPRI, r3
 8016ef0:	f3bf 8f6f 	isb	sy
 8016ef4:	f3bf 8f4f 	dsb	sy
 8016ef8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016efa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016efc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d317      	bcc.n	8016f32 <xQueueGenericSendFromISR+0x86>
 8016f02:	f1a5 0002 	sub.w	r0, r5, #2
 8016f06:	fab0 f080 	clz	r0, r0
 8016f0a:	0940      	lsrs	r0, r0, #5
 8016f0c:	b988      	cbnz	r0, 8016f32 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016f0e:	f388 8811 	msr	BASEPRI, r8
}
 8016f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d0d0      	beq.n	8016ebe <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8016f1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f20:	b672      	cpsid	i
 8016f22:	f383 8811 	msr	BASEPRI, r3
 8016f26:	f3bf 8f6f 	isb	sy
 8016f2a:	f3bf 8f4f 	dsb	sy
 8016f2e:	b662      	cpsie	i
 8016f30:	e7fe      	b.n	8016f30 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f32:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f38:	4631      	mov	r1, r6
 8016f3a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8016f3c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f3e:	f7ff fd5b 	bl	80169f8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8016f42:	1c6b      	adds	r3, r5, #1
 8016f44:	d013      	beq.n	8016f6e <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f46:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8016f48:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f4a:	b25b      	sxtb	r3, r3
 8016f4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8016f50:	f388 8811 	msr	BASEPRI, r8
}
 8016f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8016f58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f5c:	b672      	cpsid	i
 8016f5e:	f383 8811 	msr	BASEPRI, r3
 8016f62:	f3bf 8f6f 	isb	sy
 8016f66:	f3bf 8f4f 	dsb	sy
 8016f6a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016f6c:	e7fe      	b.n	8016f6c <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f70:	b90b      	cbnz	r3, 8016f76 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8016f72:	2001      	movs	r0, #1
 8016f74:	e7cb      	b.n	8016f0e <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016f7a:	f001 f81d 	bl	8017fb8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	d0f7      	beq.n	8016f72 <xQueueGenericSendFromISR+0xc6>
 8016f82:	2f00      	cmp	r7, #0
 8016f84:	d0f5      	beq.n	8016f72 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f86:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8016f88:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f8a:	603b      	str	r3, [r7, #0]
 8016f8c:	e7bf      	b.n	8016f0e <xQueueGenericSendFromISR+0x62>
 8016f8e:	bf00      	nop

08016f90 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8016f90:	b380      	cbz	r0, 8016ff4 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f92:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8016f94:	b570      	push	{r4, r5, r6, lr}
 8016f96:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f98:	b153      	cbz	r3, 8016fb0 <xQueueGiveFromISR+0x20>
 8016f9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f9e:	b672      	cpsid	i
 8016fa0:	f383 8811 	msr	BASEPRI, r3
 8016fa4:	f3bf 8f6f 	isb	sy
 8016fa8:	f3bf 8f4f 	dsb	sy
 8016fac:	b662      	cpsie	i
 8016fae:	e7fe      	b.n	8016fae <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016fb0:	6803      	ldr	r3, [r0, #0]
 8016fb2:	460d      	mov	r5, r1
 8016fb4:	b34b      	cbz	r3, 801700a <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016fb6:	f001 feb3 	bl	8018d20 <vPortValidateInterruptPriority>
	__asm volatile
 8016fba:	f3ef 8611 	mrs	r6, BASEPRI
 8016fbe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fc2:	b672      	cpsid	i
 8016fc4:	f383 8811 	msr	BASEPRI, r3
 8016fc8:	f3bf 8f6f 	isb	sy
 8016fcc:	f3bf 8f4f 	dsb	sy
 8016fd0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016fd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d925      	bls.n	8017026 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fda:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016fde:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8016fe0:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016fe2:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fe4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8016fe6:	d022      	beq.n	801702e <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fe8:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8016fea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016fec:	b25b      	sxtb	r3, r3
 8016fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ff2:	e019      	b.n	8017028 <xQueueGiveFromISR+0x98>
	__asm volatile
 8016ff4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ff8:	b672      	cpsid	i
 8016ffa:	f383 8811 	msr	BASEPRI, r3
 8016ffe:	f3bf 8f6f 	isb	sy
 8017002:	f3bf 8f4f 	dsb	sy
 8017006:	b662      	cpsie	i
	configASSERT( pxQueue );
 8017008:	e7fe      	b.n	8017008 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801700a:	6883      	ldr	r3, [r0, #8]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d0d2      	beq.n	8016fb6 <xQueueGiveFromISR+0x26>
 8017010:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017014:	b672      	cpsid	i
 8017016:	f383 8811 	msr	BASEPRI, r3
 801701a:	f3bf 8f6f 	isb	sy
 801701e:	f3bf 8f4f 	dsb	sy
 8017022:	b662      	cpsie	i
 8017024:	e7fe      	b.n	8017024 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8017026:	2000      	movs	r0, #0
	__asm volatile
 8017028:	f386 8811 	msr	BASEPRI, r6
}
 801702c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017030:	b90b      	cbnz	r3, 8017036 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8017032:	2001      	movs	r0, #1
 8017034:	e7f8      	b.n	8017028 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017036:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801703a:	f000 ffbd 	bl	8017fb8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801703e:	2d00      	cmp	r5, #0
 8017040:	d0f7      	beq.n	8017032 <xQueueGiveFromISR+0xa2>
 8017042:	2800      	cmp	r0, #0
 8017044:	d0f5      	beq.n	8017032 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017046:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8017048:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 801704a:	602b      	str	r3, [r5, #0]
 801704c:	e7ec      	b.n	8017028 <xQueueGiveFromISR+0x98>
 801704e:	bf00      	nop

08017050 <xQueueReceive>:
{
 8017050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017054:	b085      	sub	sp, #20
 8017056:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8017058:	2800      	cmp	r0, #0
 801705a:	f000 80a4 	beq.w	80171a6 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801705e:	460d      	mov	r5, r1
 8017060:	4604      	mov	r4, r0
 8017062:	2900      	cmp	r1, #0
 8017064:	d047      	beq.n	80170f6 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017066:	f001 f857 	bl	8018118 <xTaskGetSchedulerState>
 801706a:	2800      	cmp	r0, #0
 801706c:	d051      	beq.n	8017112 <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 801706e:	f001 fd51 	bl	8018b14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017072:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017074:	2e00      	cmp	r6, #0
 8017076:	d16b      	bne.n	8017150 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8017078:	9b01      	ldr	r3, [sp, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d035      	beq.n	80170ea <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 801707e:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017080:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8017084:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017088:	a802      	add	r0, sp, #8
 801708a:	f000 ffe1 	bl	8018050 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801708e:	f001 fd67 	bl	8018b60 <vPortExitCritical>
		vTaskSuspendAll();
 8017092:	f000 fda5 	bl	8017be0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017096:	f001 fd3d 	bl	8018b14 <vPortEnterCritical>
 801709a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801709e:	2bff      	cmp	r3, #255	; 0xff
 80170a0:	d101      	bne.n	80170a6 <xQueueReceive+0x56>
 80170a2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80170a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80170aa:	2bff      	cmp	r3, #255	; 0xff
 80170ac:	d101      	bne.n	80170b2 <xQueueReceive+0x62>
 80170ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80170b2:	f001 fd55 	bl	8018b60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80170b6:	a901      	add	r1, sp, #4
 80170b8:	a802      	add	r0, sp, #8
 80170ba:	f000 ffd5 	bl	8018068 <xTaskCheckForTimeOut>
 80170be:	2800      	cmp	r0, #0
 80170c0:	d135      	bne.n	801712e <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 80170c2:	f001 fd27 	bl	8018b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80170c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d056      	beq.n	801717a <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 80170cc:	f001 fd48 	bl	8018b60 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80170d0:	4620      	mov	r0, r4
 80170d2:	f7ff fcd3 	bl	8016a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80170d6:	f000 fedf 	bl	8017e98 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80170da:	f001 fd1b 	bl	8018b14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80170e0:	2e00      	cmp	r6, #0
 80170e2:	d135      	bne.n	8017150 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 80170e4:	9b01      	ldr	r3, [sp, #4]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d1d1      	bne.n	801708e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 80170ea:	f001 fd39 	bl	8018b60 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80170ee:	2000      	movs	r0, #0
}
 80170f0:	b005      	add	sp, #20
 80170f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d0b4      	beq.n	8017066 <xQueueReceive+0x16>
	__asm volatile
 80170fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017100:	b672      	cpsid	i
 8017102:	f383 8811 	msr	BASEPRI, r3
 8017106:	f3bf 8f6f 	isb	sy
 801710a:	f3bf 8f4f 	dsb	sy
 801710e:	b662      	cpsie	i
 8017110:	e7fe      	b.n	8017110 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017112:	9b01      	ldr	r3, [sp, #4]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d0aa      	beq.n	801706e <xQueueReceive+0x1e>
 8017118:	f04f 0330 	mov.w	r3, #48	; 0x30
 801711c:	b672      	cpsid	i
 801711e:	f383 8811 	msr	BASEPRI, r3
 8017122:	f3bf 8f6f 	isb	sy
 8017126:	f3bf 8f4f 	dsb	sy
 801712a:	b662      	cpsie	i
 801712c:	e7fe      	b.n	801712c <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 801712e:	4620      	mov	r0, r4
 8017130:	f7ff fca4 	bl	8016a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017134:	f000 feb0 	bl	8017e98 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8017138:	f001 fcec 	bl	8018b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801713c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801713e:	2b00      	cmp	r3, #0
 8017140:	d0d3      	beq.n	80170ea <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8017142:	f001 fd0d 	bl	8018b60 <vPortExitCritical>
		taskENTER_CRITICAL();
 8017146:	f001 fce5 	bl	8018b14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801714a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801714c:	2e00      	cmp	r6, #0
 801714e:	d0c9      	beq.n	80170e4 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017150:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8017152:	b152      	cbz	r2, 801716a <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017154:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017156:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017158:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801715a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801715c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801715e:	d301      	bcc.n	8017164 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017160:	6821      	ldr	r1, [r4, #0]
 8017162:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017164:	4628      	mov	r0, r5
 8017166:	f00e fb2f 	bl	80257c8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801716a:	3e01      	subs	r6, #1
 801716c:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801716e:	6923      	ldr	r3, [r4, #16]
 8017170:	bb23      	cbnz	r3, 80171bc <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8017172:	f001 fcf5 	bl	8018b60 <vPortExitCritical>
				return pdPASS;
 8017176:	2001      	movs	r0, #1
 8017178:	e7ba      	b.n	80170f0 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 801717a:	f001 fcf1 	bl	8018b60 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801717e:	9901      	ldr	r1, [sp, #4]
 8017180:	4640      	mov	r0, r8
 8017182:	f000 fedd 	bl	8017f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017186:	4620      	mov	r0, r4
 8017188:	f7ff fc78 	bl	8016a7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801718c:	f000 fe84 	bl	8017e98 <xTaskResumeAll>
 8017190:	2800      	cmp	r0, #0
 8017192:	d1d8      	bne.n	8017146 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8017194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017198:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80171a4:	e7cf      	b.n	8017146 <xQueueReceive+0xf6>
 80171a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171aa:	b672      	cpsid	i
 80171ac:	f383 8811 	msr	BASEPRI, r3
 80171b0:	f3bf 8f6f 	isb	sy
 80171b4:	f3bf 8f4f 	dsb	sy
 80171b8:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80171ba:	e7fe      	b.n	80171ba <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80171bc:	f104 0010 	add.w	r0, r4, #16
 80171c0:	f000 fefa 	bl	8017fb8 <xTaskRemoveFromEventList>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d0d4      	beq.n	8017172 <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 80171c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80171cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80171d4:	f3bf 8f4f 	dsb	sy
 80171d8:	f3bf 8f6f 	isb	sy
 80171dc:	e7c9      	b.n	8017172 <xQueueReceive+0x122>
 80171de:	bf00      	nop

080171e0 <xQueueSemaphoreTake>:
{
 80171e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171e2:	b085      	sub	sp, #20
 80171e4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d057      	beq.n	801729a <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 80171ea:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80171ec:	4604      	mov	r4, r0
 80171ee:	b156      	cbz	r6, 8017206 <xQueueSemaphoreTake+0x26>
 80171f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171f4:	b672      	cpsid	i
 80171f6:	f383 8811 	msr	BASEPRI, r3
 80171fa:	f3bf 8f6f 	isb	sy
 80171fe:	f3bf 8f4f 	dsb	sy
 8017202:	b662      	cpsie	i
 8017204:	e7fe      	b.n	8017204 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017206:	f000 ff87 	bl	8018118 <xTaskGetSchedulerState>
 801720a:	4605      	mov	r5, r0
 801720c:	2800      	cmp	r0, #0
 801720e:	d04f      	beq.n	80172b0 <xQueueSemaphoreTake+0xd0>
 8017210:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8017212:	f001 fc7f 	bl	8018b14 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8017218:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801721a:	bb8b      	cbnz	r3, 8017280 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 801721c:	9b01      	ldr	r3, [sp, #4]
 801721e:	2b00      	cmp	r3, #0
 8017220:	f000 809f 	beq.w	8017362 <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8017224:	2d00      	cmp	r5, #0
 8017226:	d05d      	beq.n	80172e4 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8017228:	f001 fc9a 	bl	8018b60 <vPortExitCritical>
		vTaskSuspendAll();
 801722c:	f000 fcd8 	bl	8017be0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017230:	f001 fc70 	bl	8018b14 <vPortEnterCritical>
 8017234:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017238:	2bff      	cmp	r3, #255	; 0xff
 801723a:	d101      	bne.n	8017240 <xQueueSemaphoreTake+0x60>
 801723c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8017240:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017244:	2bff      	cmp	r3, #255	; 0xff
 8017246:	d101      	bne.n	801724c <xQueueSemaphoreTake+0x6c>
 8017248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801724c:	f001 fc88 	bl	8018b60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017250:	a901      	add	r1, sp, #4
 8017252:	a802      	add	r0, sp, #8
 8017254:	f000 ff08 	bl	8018068 <xTaskCheckForTimeOut>
 8017258:	2800      	cmp	r0, #0
 801725a:	d137      	bne.n	80172cc <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 801725c:	f001 fc5a 	bl	8018b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017262:	2b00      	cmp	r3, #0
 8017264:	d042      	beq.n	80172ec <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8017266:	f001 fc7b 	bl	8018b60 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801726a:	4620      	mov	r0, r4
 801726c:	f7ff fc06 	bl	8016a7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017270:	f000 fe12 	bl	8017e98 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8017274:	f001 fc4e 	bl	8018b14 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801727a:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801727c:	2b00      	cmp	r3, #0
 801727e:	d0cd      	beq.n	801721c <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017280:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017282:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017284:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017286:	2a00      	cmp	r2, #0
 8017288:	f000 8089 	beq.w	801739e <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801728c:	6923      	ldr	r3, [r4, #16]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d174      	bne.n	801737c <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8017292:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8017294:	f001 fc64 	bl	8018b60 <vPortExitCritical>
				return pdPASS;
 8017298:	e046      	b.n	8017328 <xQueueSemaphoreTake+0x148>
 801729a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801729e:	b672      	cpsid	i
 80172a0:	f383 8811 	msr	BASEPRI, r3
 80172a4:	f3bf 8f6f 	isb	sy
 80172a8:	f3bf 8f4f 	dsb	sy
 80172ac:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80172ae:	e7fe      	b.n	80172ae <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80172b0:	9b01      	ldr	r3, [sp, #4]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d03b      	beq.n	801732e <xQueueSemaphoreTake+0x14e>
 80172b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172ba:	b672      	cpsid	i
 80172bc:	f383 8811 	msr	BASEPRI, r3
 80172c0:	f3bf 8f6f 	isb	sy
 80172c4:	f3bf 8f4f 	dsb	sy
 80172c8:	b662      	cpsie	i
 80172ca:	e7fe      	b.n	80172ca <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 80172cc:	4620      	mov	r0, r4
 80172ce:	f7ff fbd5 	bl	8016a7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80172d2:	f000 fde1 	bl	8017e98 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80172d6:	f001 fc1d 	bl	8018b14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80172da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172dc:	b30b      	cbz	r3, 8017322 <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 80172de:	f001 fc3f 	bl	8018b60 <vPortExitCritical>
	return xReturn;
 80172e2:	e7c7      	b.n	8017274 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172e4:	a802      	add	r0, sp, #8
 80172e6:	f000 feb3 	bl	8018050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80172ea:	e79d      	b.n	8017228 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 80172ec:	f001 fc38 	bl	8018b60 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80172f0:	6823      	ldr	r3, [r4, #0]
 80172f2:	b36b      	cbz	r3, 8017350 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80172f4:	9901      	ldr	r1, [sp, #4]
 80172f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80172fa:	f000 fe21 	bl	8017f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80172fe:	4620      	mov	r0, r4
 8017300:	f7ff fbbc 	bl	8016a7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017304:	f000 fdc8 	bl	8017e98 <xTaskResumeAll>
 8017308:	2800      	cmp	r0, #0
 801730a:	d1b3      	bne.n	8017274 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 801730c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017314:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	f3bf 8f6f 	isb	sy
 8017320:	e7a8      	b.n	8017274 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8017322:	f001 fc1d 	bl	8018b60 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8017326:	b926      	cbnz	r6, 8017332 <xQueueSemaphoreTake+0x152>
}
 8017328:	4630      	mov	r0, r6
 801732a:	b005      	add	sp, #20
 801732c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801732e:	4606      	mov	r6, r0
 8017330:	e76f      	b.n	8017212 <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8017332:	f001 fbef 	bl	8018b14 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017336:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017338:	b119      	cbz	r1, 8017342 <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801733a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801733c:	6819      	ldr	r1, [r3, #0]
 801733e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017342:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8017344:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017346:	f000 ffaf 	bl	80182a8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801734a:	f001 fc09 	bl	8018b60 <vPortExitCritical>
 801734e:	e7eb      	b.n	8017328 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8017350:	f001 fbe0 	bl	8018b14 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017354:	68a0      	ldr	r0, [r4, #8]
 8017356:	f000 feef 	bl	8018138 <xTaskPriorityInherit>
 801735a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801735c:	f001 fc00 	bl	8018b60 <vPortExitCritical>
 8017360:	e7c8      	b.n	80172f4 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017362:	2e00      	cmp	r6, #0
 8017364:	d0f1      	beq.n	801734a <xQueueSemaphoreTake+0x16a>
 8017366:	f04f 0330 	mov.w	r3, #48	; 0x30
 801736a:	b672      	cpsid	i
 801736c:	f383 8811 	msr	BASEPRI, r3
 8017370:	f3bf 8f6f 	isb	sy
 8017374:	f3bf 8f4f 	dsb	sy
 8017378:	b662      	cpsie	i
 801737a:	e7fe      	b.n	801737a <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801737c:	f104 0010 	add.w	r0, r4, #16
 8017380:	f000 fe1a 	bl	8017fb8 <xTaskRemoveFromEventList>
 8017384:	2800      	cmp	r0, #0
 8017386:	d084      	beq.n	8017292 <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8017388:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801738c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017390:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017394:	f3bf 8f4f 	dsb	sy
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	e779      	b.n	8017292 <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801739e:	f000 fff1 	bl	8018384 <pvTaskIncrementMutexHeldCount>
 80173a2:	60a0      	str	r0, [r4, #8]
 80173a4:	e772      	b.n	801728c <xQueueSemaphoreTake+0xac>
 80173a6:	bf00      	nop

080173a8 <xQueueReceiveFromISR>:
{
 80173a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80173ac:	b330      	cbz	r0, 80173fc <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173ae:	460e      	mov	r6, r1
 80173b0:	4604      	mov	r4, r0
 80173b2:	4617      	mov	r7, r2
 80173b4:	b1a1      	cbz	r1, 80173e0 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80173b6:	f001 fcb3 	bl	8018d20 <vPortValidateInterruptPriority>
	__asm volatile
 80173ba:	f3ef 8911 	mrs	r9, BASEPRI
 80173be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173c2:	b672      	cpsid	i
 80173c4:	f383 8811 	msr	BASEPRI, r3
 80173c8:	f3bf 8f6f 	isb	sy
 80173cc:	f3bf 8f4f 	dsb	sy
 80173d0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80173d4:	b9ed      	cbnz	r5, 8017412 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 80173d6:	4628      	mov	r0, r5
	__asm volatile
 80173d8:	f389 8811 	msr	BASEPRI, r9
}
 80173dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d0e7      	beq.n	80173b6 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80173e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173ea:	b672      	cpsid	i
 80173ec:	f383 8811 	msr	BASEPRI, r3
 80173f0:	f3bf 8f6f 	isb	sy
 80173f4:	f3bf 8f4f 	dsb	sy
 80173f8:	b662      	cpsie	i
 80173fa:	e7fe      	b.n	80173fa <xQueueReceiveFromISR+0x52>
 80173fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017400:	b672      	cpsid	i
 8017402:	f383 8811 	msr	BASEPRI, r3
 8017406:	f3bf 8f6f 	isb	sy
 801740a:	f3bf 8f4f 	dsb	sy
 801740e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8017410:	e7fe      	b.n	8017410 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8017412:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017416:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8017418:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801741c:	b142      	cbz	r2, 8017430 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801741e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017420:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017422:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017424:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017426:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017428:	d215      	bcs.n	8017456 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801742a:	4630      	mov	r0, r6
 801742c:	f00e f9cc 	bl	80257c8 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017430:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8017432:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017436:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8017438:	d009      	beq.n	801744e <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801743a:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 801743e:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017440:	b25b      	sxtb	r3, r3
 8017442:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8017446:	f389 8811 	msr	BASEPRI, r9
}
 801744a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801744e:	6923      	ldr	r3, [r4, #16]
 8017450:	b923      	cbnz	r3, 801745c <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8017452:	2001      	movs	r0, #1
 8017454:	e7c0      	b.n	80173d8 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017456:	6821      	ldr	r1, [r4, #0]
 8017458:	60e1      	str	r1, [r4, #12]
 801745a:	e7e6      	b.n	801742a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801745c:	f104 0010 	add.w	r0, r4, #16
 8017460:	f000 fdaa 	bl	8017fb8 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8017464:	2f00      	cmp	r7, #0
 8017466:	d0f4      	beq.n	8017452 <xQueueReceiveFromISR+0xaa>
 8017468:	2800      	cmp	r0, #0
 801746a:	d0f2      	beq.n	8017452 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801746c:	2301      	movs	r3, #1
			xReturn = pdPASS;
 801746e:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017470:	603b      	str	r3, [r7, #0]
 8017472:	e7b1      	b.n	80173d8 <xQueueReceiveFromISR+0x30>

08017474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017474:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017476:	2300      	movs	r3, #0
 8017478:	4c08      	ldr	r4, [pc, #32]	; (801749c <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801747a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 801747e:	b12a      	cbz	r2, 801748c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017480:	3301      	adds	r3, #1
 8017482:	2b08      	cmp	r3, #8
 8017484:	d1f9      	bne.n	801747a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801748a:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 801748c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017490:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8017494:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017498:	6050      	str	r0, [r2, #4]
	}
 801749a:	4770      	bx	lr
 801749c:	20006690 	.word	0x20006690

080174a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80174a0:	b570      	push	{r4, r5, r6, lr}
 80174a2:	4604      	mov	r4, r0
 80174a4:	460e      	mov	r6, r1
 80174a6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80174a8:	f001 fb34 	bl	8018b14 <vPortEnterCritical>
 80174ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80174b0:	2bff      	cmp	r3, #255	; 0xff
 80174b2:	d102      	bne.n	80174ba <vQueueWaitForMessageRestricted+0x1a>
 80174b4:	2300      	movs	r3, #0
 80174b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80174ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80174be:	2bff      	cmp	r3, #255	; 0xff
 80174c0:	d102      	bne.n	80174c8 <vQueueWaitForMessageRestricted+0x28>
 80174c2:	2300      	movs	r3, #0
 80174c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80174c8:	f001 fb4a 	bl	8018b60 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80174cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80174ce:	b123      	cbz	r3, 80174da <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80174d0:	4620      	mov	r0, r4
	}
 80174d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80174d6:	f7ff bad1 	b.w	8016a7c <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80174da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80174de:	462a      	mov	r2, r5
 80174e0:	4631      	mov	r1, r6
 80174e2:	f000 fd49 	bl	8017f78 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80174e6:	4620      	mov	r0, r4
	}
 80174e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80174ec:	f7ff bac6 	b.w	8016a7c <prvUnlockQueue>

080174f0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80174f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174f4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80174f6:	f001 fb0d 	bl	8018b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80174fa:	4a35      	ldr	r2, [pc, #212]	; (80175d0 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80174fc:	4d35      	ldr	r5, [pc, #212]	; (80175d4 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80174fe:	6813      	ldr	r3, [r2, #0]
 8017500:	3301      	adds	r3, #1
 8017502:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017504:	682b      	ldr	r3, [r5, #0]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d034      	beq.n	8017574 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801750a:	4e33      	ldr	r6, [pc, #204]	; (80175d8 <prvAddNewTaskToReadyList+0xe8>)
 801750c:	6833      	ldr	r3, [r6, #0]
 801750e:	b343      	cbz	r3, 8017562 <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017512:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80175fc <prvAddNewTaskToReadyList+0x10c>
 8017516:	2201      	movs	r2, #1
		uxTaskNumber++;
 8017518:	4f30      	ldr	r7, [pc, #192]	; (80175dc <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 801751a:	4931      	ldr	r1, [pc, #196]	; (80175e0 <prvAddNewTaskToReadyList+0xf0>)
 801751c:	409a      	lsls	r2, r3
 801751e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017522:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	3301      	adds	r3, #1
 801752a:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801752c:	680b      	ldr	r3, [r1, #0]
 801752e:	431a      	orrs	r2, r3
 8017530:	600a      	str	r2, [r1, #0]
 8017532:	1d21      	adds	r1, r4, #4
 8017534:	f7ff fa24 	bl	8016980 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017538:	f001 fb12 	bl	8018b60 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801753c:	6833      	ldr	r3, [r6, #0]
 801753e:	b173      	cbz	r3, 801755e <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017540:	682a      	ldr	r2, [r5, #0]
 8017542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017546:	429a      	cmp	r2, r3
 8017548:	d209      	bcs.n	801755e <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801754a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801754e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017552:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017556:	f3bf 8f4f 	dsb	sy
 801755a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017562:	682a      	ldr	r2, [r5, #0]
 8017564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017566:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8017568:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80175fc <prvAddNewTaskToReadyList+0x10c>
 801756c:	429a      	cmp	r2, r3
 801756e:	d8d2      	bhi.n	8017516 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8017570:	602c      	str	r4, [r5, #0]
 8017572:	e7d0      	b.n	8017516 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8017574:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017576:	6813      	ldr	r3, [r2, #0]
 8017578:	2b01      	cmp	r3, #1
 801757a:	d004      	beq.n	8017586 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 801757c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801757e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80175fc <prvAddNewTaskToReadyList+0x10c>
 8017582:	4e15      	ldr	r6, [pc, #84]	; (80175d8 <prvAddNewTaskToReadyList+0xe8>)
 8017584:	e7c7      	b.n	8017516 <prvAddNewTaskToReadyList+0x26>
 8017586:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80175fc <prvAddNewTaskToReadyList+0x10c>
 801758a:	4646      	mov	r6, r8
 801758c:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017590:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017592:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017594:	f7ff f9e4 	bl	8016960 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017598:	42b7      	cmp	r7, r6
 801759a:	d1f9      	bne.n	8017590 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 801759c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8017600 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 80175a0:	4f10      	ldr	r7, [pc, #64]	; (80175e4 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80175a2:	4648      	mov	r0, r9
 80175a4:	4e0c      	ldr	r6, [pc, #48]	; (80175d8 <prvAddNewTaskToReadyList+0xe8>)
 80175a6:	f7ff f9db 	bl	8016960 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80175aa:	4638      	mov	r0, r7
 80175ac:	f7ff f9d8 	bl	8016960 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80175b0:	480d      	ldr	r0, [pc, #52]	; (80175e8 <prvAddNewTaskToReadyList+0xf8>)
 80175b2:	f7ff f9d5 	bl	8016960 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80175b6:	480d      	ldr	r0, [pc, #52]	; (80175ec <prvAddNewTaskToReadyList+0xfc>)
 80175b8:	f7ff f9d2 	bl	8016960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80175bc:	480c      	ldr	r0, [pc, #48]	; (80175f0 <prvAddNewTaskToReadyList+0x100>)
 80175be:	f7ff f9cf 	bl	8016960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80175c2:	4b0c      	ldr	r3, [pc, #48]	; (80175f4 <prvAddNewTaskToReadyList+0x104>)
 80175c4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80175c8:	4b0b      	ldr	r3, [pc, #44]	; (80175f8 <prvAddNewTaskToReadyList+0x108>)
 80175ca:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80175cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 80175ce:	e7a2      	b.n	8017516 <prvAddNewTaskToReadyList+0x26>
 80175d0:	20006768 	.word	0x20006768
 80175d4:	200066d0 	.word	0x200066d0
 80175d8:	200067c4 	.word	0x200067c4
 80175dc:	20006778 	.word	0x20006778
 80175e0:	2000677c 	.word	0x2000677c
 80175e4:	20006794 	.word	0x20006794
 80175e8:	200067b0 	.word	0x200067b0
 80175ec:	200067dc 	.word	0x200067dc
 80175f0:	200067c8 	.word	0x200067c8
 80175f4:	200066d4 	.word	0x200066d4
 80175f8:	200066d8 	.word	0x200066d8
 80175fc:	200066dc 	.word	0x200066dc
 8017600:	20006780 	.word	0x20006780

08017604 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017606:	4b1b      	ldr	r3, [pc, #108]	; (8017674 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8017608:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801760a:	4e1b      	ldr	r6, [pc, #108]	; (8017678 <prvAddCurrentTaskToDelayedList+0x74>)
{
 801760c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801760e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017610:	6833      	ldr	r3, [r6, #0]
 8017612:	1d18      	adds	r0, r3, #4
 8017614:	f7ff f9dc 	bl	80169d0 <uxListRemove>
 8017618:	b948      	cbnz	r0, 801762e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801761a:	6833      	ldr	r3, [r6, #0]
 801761c:	4917      	ldr	r1, [pc, #92]	; (801767c <prvAddCurrentTaskToDelayedList+0x78>)
 801761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017620:	2301      	movs	r3, #1
 8017622:	fa03 f202 	lsl.w	r2, r3, r2
 8017626:	680b      	ldr	r3, [r1, #0]
 8017628:	ea23 0302 	bic.w	r3, r3, r2
 801762c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801762e:	1c63      	adds	r3, r4, #1
 8017630:	d100      	bne.n	8017634 <prvAddCurrentTaskToDelayedList+0x30>
 8017632:	b9bf      	cbnz	r7, 8017664 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017634:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017636:	6833      	ldr	r3, [r6, #0]
 8017638:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801763a:	d307      	bcc.n	801764c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801763c:	4b10      	ldr	r3, [pc, #64]	; (8017680 <prvAddCurrentTaskToDelayedList+0x7c>)
 801763e:	6818      	ldr	r0, [r3, #0]
 8017640:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017646:	3104      	adds	r1, #4
 8017648:	f7ff b9aa 	b.w	80169a0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801764c:	4b0d      	ldr	r3, [pc, #52]	; (8017684 <prvAddCurrentTaskToDelayedList+0x80>)
 801764e:	6818      	ldr	r0, [r3, #0]
 8017650:	6831      	ldr	r1, [r6, #0]
 8017652:	3104      	adds	r1, #4
 8017654:	f7ff f9a4 	bl	80169a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017658:	4b0b      	ldr	r3, [pc, #44]	; (8017688 <prvAddCurrentTaskToDelayedList+0x84>)
 801765a:	681a      	ldr	r2, [r3, #0]
 801765c:	42a2      	cmp	r2, r4
 801765e:	d900      	bls.n	8017662 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8017660:	601c      	str	r4, [r3, #0]
}
 8017662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017664:	6831      	ldr	r1, [r6, #0]
 8017666:	4809      	ldr	r0, [pc, #36]	; (801768c <prvAddCurrentTaskToDelayedList+0x88>)
 8017668:	3104      	adds	r1, #4
}
 801766a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801766e:	f7ff b987 	b.w	8016980 <vListInsertEnd>
 8017672:	bf00      	nop
 8017674:	200067f0 	.word	0x200067f0
 8017678:	200066d0 	.word	0x200066d0
 801767c:	2000677c 	.word	0x2000677c
 8017680:	200066d8 	.word	0x200066d8
 8017684:	200066d4 	.word	0x200066d4
 8017688:	200067a8 	.word	0x200067a8
 801768c:	200067c8 	.word	0x200067c8

08017690 <prvDeleteTCB>:
	{
 8017690:	b510      	push	{r4, lr}
 8017692:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017694:	304c      	adds	r0, #76	; 0x4c
 8017696:	f00f f94d 	bl	8026934 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801769a:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 801769e:	b173      	cbz	r3, 80176be <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80176a0:	2b01      	cmp	r3, #1
 80176a2:	d015      	beq.n	80176d0 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80176a4:	2b02      	cmp	r3, #2
 80176a6:	d012      	beq.n	80176ce <prvDeleteTCB+0x3e>
	__asm volatile
 80176a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80176ac:	b672      	cpsid	i
 80176ae:	f383 8811 	msr	BASEPRI, r3
 80176b2:	f3bf 8f6f 	isb	sy
 80176b6:	f3bf 8f4f 	dsb	sy
 80176ba:	b662      	cpsie	i
 80176bc:	e7fe      	b.n	80176bc <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80176be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80176c0:	f001 fc2e 	bl	8018f20 <vPortFree>
				vPortFree( pxTCB );
 80176c4:	4620      	mov	r0, r4
	}
 80176c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80176ca:	f001 bc29 	b.w	8018f20 <vPortFree>
	}
 80176ce:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80176d0:	4620      	mov	r0, r4
	}
 80176d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80176d6:	f001 bc23 	b.w	8018f20 <vPortFree>
 80176da:	bf00      	nop

080176dc <prvIdleTask>:
{
 80176dc:	4c16      	ldr	r4, [pc, #88]	; (8017738 <prvIdleTask+0x5c>)
				taskYIELD();
 80176de:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80176e2:	4e16      	ldr	r6, [pc, #88]	; (801773c <prvIdleTask+0x60>)
 80176e4:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80176e8:	4d15      	ldr	r5, [pc, #84]	; (8017740 <prvIdleTask+0x64>)
 80176ea:	f8df a058 	ldr.w	sl, [pc, #88]	; 8017744 <prvIdleTask+0x68>
{
 80176ee:	b580      	push	{r7, lr}
 80176f0:	e011      	b.n	8017716 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80176f2:	f001 fa0f 	bl	8018b14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80176f6:	68f3      	ldr	r3, [r6, #12]
 80176f8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80176fa:	1d38      	adds	r0, r7, #4
 80176fc:	f7ff f968 	bl	80169d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017700:	682b      	ldr	r3, [r5, #0]
 8017702:	3b01      	subs	r3, #1
 8017704:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017706:	6823      	ldr	r3, [r4, #0]
 8017708:	3b01      	subs	r3, #1
 801770a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801770c:	f001 fa28 	bl	8018b60 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8017710:	4638      	mov	r0, r7
 8017712:	f7ff ffbd 	bl	8017690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017716:	6823      	ldr	r3, [r4, #0]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d1ea      	bne.n	80176f2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801771c:	f8da 3000 	ldr.w	r3, [sl]
 8017720:	2b01      	cmp	r3, #1
 8017722:	d905      	bls.n	8017730 <prvIdleTask+0x54>
				taskYIELD();
 8017724:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8017728:	f3bf 8f4f 	dsb	sy
 801772c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8017730:	f7e9 fda2 	bl	8001278 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8017734:	e7ef      	b.n	8017716 <prvIdleTask+0x3a>
 8017736:	bf00      	nop
 8017738:	2000676c 	.word	0x2000676c
 801773c:	200067dc 	.word	0x200067dc
 8017740:	20006768 	.word	0x20006768
 8017744:	200066dc 	.word	0x200066dc

08017748 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8017748:	4b1d      	ldr	r3, [pc, #116]	; (80177c0 <vTaskSwitchContext.part.0+0x78>)
 801774a:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 801774c:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 801774e:	4c1d      	ldr	r4, [pc, #116]	; (80177c4 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8017750:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017752:	6822      	ldr	r2, [r4, #0]
 8017754:	6823      	ldr	r3, [r4, #0]
 8017756:	6812      	ldr	r2, [r2, #0]
 8017758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801775a:	429a      	cmp	r2, r3
 801775c:	d927      	bls.n	80177ae <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801775e:	4b1a      	ldr	r3, [pc, #104]	; (80177c8 <vTaskSwitchContext.part.0+0x80>)
 8017760:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017762:	fab3 f383 	clz	r3, r3
 8017766:	b2db      	uxtb	r3, r3
 8017768:	4a18      	ldr	r2, [pc, #96]	; (80177cc <vTaskSwitchContext.part.0+0x84>)
 801776a:	f1c3 031f 	rsb	r3, r3, #31
 801776e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017772:	0099      	lsls	r1, r3, #2
 8017774:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017778:	5850      	ldr	r0, [r2, r1]
 801777a:	b950      	cbnz	r0, 8017792 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 801777c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017780:	b672      	cpsid	i
 8017782:	f383 8811 	msr	BASEPRI, r3
 8017786:	f3bf 8f6f 	isb	sy
 801778a:	f3bf 8f4f 	dsb	sy
 801778e:	b662      	cpsie	i
 8017790:	e7fe      	b.n	8017790 <vTaskSwitchContext.part.0+0x48>
 8017792:	6858      	ldr	r0, [r3, #4]
 8017794:	3108      	adds	r1, #8
 8017796:	6840      	ldr	r0, [r0, #4]
 8017798:	440a      	add	r2, r1
 801779a:	4290      	cmp	r0, r2
 801779c:	6058      	str	r0, [r3, #4]
 801779e:	d00c      	beq.n	80177ba <vTaskSwitchContext.part.0+0x72>
 80177a0:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80177a2:	4a0b      	ldr	r2, [pc, #44]	; (80177d0 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177a4:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80177a6:	6823      	ldr	r3, [r4, #0]
 80177a8:	334c      	adds	r3, #76	; 0x4c
 80177aa:	6013      	str	r3, [r2, #0]
}
 80177ac:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 80177ae:	6820      	ldr	r0, [r4, #0]
 80177b0:	6821      	ldr	r1, [r4, #0]
 80177b2:	3134      	adds	r1, #52	; 0x34
 80177b4:	f7e9 fd62 	bl	800127c <vApplicationStackOverflowHook>
 80177b8:	e7d1      	b.n	801775e <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177ba:	6840      	ldr	r0, [r0, #4]
 80177bc:	6058      	str	r0, [r3, #4]
 80177be:	e7ef      	b.n	80177a0 <vTaskSwitchContext.part.0+0x58>
 80177c0:	200067f4 	.word	0x200067f4
 80177c4:	200066d0 	.word	0x200066d0
 80177c8:	2000677c 	.word	0x2000677c
 80177cc:	200066dc 	.word	0x200066dc
 80177d0:	200004a4 	.word	0x200004a4

080177d4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80177da:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177e0:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80177e4:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80177e6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80177ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80177ee:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80177f2:	2900      	cmp	r1, #0
 80177f4:	d041      	beq.n	801787a <prvInitialiseNewTask.constprop.0+0xa6>
 80177f6:	f101 3cff 	add.w	ip, r1, #4294967295
 80177fa:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80177fe:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017800:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8017804:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8017808:	b10d      	cbz	r5, 801780e <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801780a:	458c      	cmp	ip, r1
 801780c:	d1f8      	bne.n	8017800 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801780e:	2300      	movs	r3, #0
 8017810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017814:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8017816:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801781a:	1d20      	adds	r0, r4, #4
 801781c:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801781e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8017822:	bf28      	it	cs
 8017824:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8017826:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8017828:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801782a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801782e:	f7ff f8a3 	bl	8016978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017832:	f104 0018 	add.w	r0, r4, #24
 8017836:	f7ff f89f 	bl	8016978 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801783a:	4651      	mov	r1, sl
 801783c:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 801783e:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017842:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017846:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017848:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801784a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801784c:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017850:	f00d ffe2 	bl	8025818 <memset>
 8017854:	4b0a      	ldr	r3, [pc, #40]	; (8017880 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017856:	464a      	mov	r2, r9
 8017858:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801785a:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801785c:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801785e:	4b09      	ldr	r3, [pc, #36]	; (8017884 <prvInitialiseNewTask.constprop.0+0xb0>)
 8017860:	6563      	str	r3, [r4, #84]	; 0x54
 8017862:	4b09      	ldr	r3, [pc, #36]	; (8017888 <prvInitialiseNewTask.constprop.0+0xb4>)
 8017864:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017866:	f001 f92b 	bl	8018ac0 <pxPortInitialiseStack>
 801786a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801786c:	f1b8 0f00 	cmp.w	r8, #0
 8017870:	d001      	beq.n	8017876 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017872:	f8c8 4000 	str.w	r4, [r8]
}
 8017876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801787a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 801787e:	e7c9      	b.n	8017814 <prvInitialiseNewTask.constprop.0+0x40>
 8017880:	08047650 	.word	0x08047650
 8017884:	08047670 	.word	0x08047670
 8017888:	08047630 	.word	0x08047630

0801788c <xTaskCreateStatic>:
	{
 801788c:	b530      	push	{r4, r5, lr}
 801788e:	b087      	sub	sp, #28
 8017890:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8017892:	b1e4      	cbz	r4, 80178ce <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8017894:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017896:	b17d      	cbz	r5, 80178b8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8017898:	25b4      	movs	r5, #180	; 0xb4
 801789a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801789c:	9d05      	ldr	r5, [sp, #20]
 801789e:	2db4      	cmp	r5, #180	; 0xb4
 80178a0:	d020      	beq.n	80178e4 <xTaskCreateStatic+0x58>
 80178a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178a6:	b672      	cpsid	i
 80178a8:	f383 8811 	msr	BASEPRI, r3
 80178ac:	f3bf 8f6f 	isb	sy
 80178b0:	f3bf 8f4f 	dsb	sy
 80178b4:	b662      	cpsie	i
 80178b6:	e7fe      	b.n	80178b6 <xTaskCreateStatic+0x2a>
 80178b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178bc:	b672      	cpsid	i
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80178cc:	e7fe      	b.n	80178cc <xTaskCreateStatic+0x40>
 80178ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178d2:	b672      	cpsid	i
 80178d4:	f383 8811 	msr	BASEPRI, r3
 80178d8:	f3bf 8f6f 	isb	sy
 80178dc:	f3bf 8f4f 	dsb	sy
 80178e0:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80178e2:	e7fe      	b.n	80178e2 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80178e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178e6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80178e8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178ea:	9502      	str	r5, [sp, #8]
 80178ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80178ee:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80178f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178f2:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178f6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80178f8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80178fa:	9401      	str	r4, [sp, #4]
 80178fc:	f7ff ff6a 	bl	80177d4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017900:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017902:	f7ff fdf5 	bl	80174f0 <prvAddNewTaskToReadyList>
	}
 8017906:	9804      	ldr	r0, [sp, #16]
 8017908:	b007      	add	sp, #28
 801790a:	bd30      	pop	{r4, r5, pc}

0801790c <xTaskCreate>:
	{
 801790c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017910:	4607      	mov	r7, r0
 8017912:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017914:	0090      	lsls	r0, r2, #2
	{
 8017916:	4615      	mov	r5, r2
 8017918:	4688      	mov	r8, r1
 801791a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801791c:	f001 fa64 	bl	8018de8 <pvPortMalloc>
			if( pxStack != NULL )
 8017920:	b1d8      	cbz	r0, 801795a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017922:	4604      	mov	r4, r0
 8017924:	20b4      	movs	r0, #180	; 0xb4
 8017926:	f001 fa5f 	bl	8018de8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801792a:	4606      	mov	r6, r0
 801792c:	b1d0      	cbz	r0, 8017964 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 801792e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017930:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017932:	464b      	mov	r3, r9
 8017934:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017936:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801793a:	4641      	mov	r1, r8
 801793c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801793e:	4638      	mov	r0, r7
 8017940:	9602      	str	r6, [sp, #8]
 8017942:	9401      	str	r4, [sp, #4]
 8017944:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017946:	9400      	str	r4, [sp, #0]
 8017948:	f7ff ff44 	bl	80177d4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801794c:	4630      	mov	r0, r6
 801794e:	f7ff fdcf 	bl	80174f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017952:	2001      	movs	r0, #1
	}
 8017954:	b005      	add	sp, #20
 8017956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801795a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801795e:	b005      	add	sp, #20
 8017960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8017964:	4620      	mov	r0, r4
 8017966:	f001 fadb 	bl	8018f20 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801796a:	f04f 30ff 	mov.w	r0, #4294967295
 801796e:	e7f1      	b.n	8017954 <xTaskCreate+0x48>

08017970 <vTaskSuspend>:
	{
 8017970:	b570      	push	{r4, r5, r6, lr}
 8017972:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017974:	4e3c      	ldr	r6, [pc, #240]	; (8017a68 <vTaskSuspend+0xf8>)
		taskENTER_CRITICAL();
 8017976:	f001 f8cd 	bl	8018b14 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801797a:	2c00      	cmp	r4, #0
 801797c:	d04e      	beq.n	8017a1c <vTaskSuspend+0xac>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801797e:	1d25      	adds	r5, r4, #4
 8017980:	4628      	mov	r0, r5
 8017982:	f7ff f825 	bl	80169d0 <uxListRemove>
 8017986:	b930      	cbnz	r0, 8017996 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801798a:	4938      	ldr	r1, [pc, #224]	; (8017a6c <vTaskSuspend+0xfc>)
 801798c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	58cb      	ldr	r3, [r1, r3]
 8017994:	b35b      	cbz	r3, 80179ee <vTaskSuspend+0x7e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017998:	b11b      	cbz	r3, 80179a2 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801799a:	f104 0018 	add.w	r0, r4, #24
 801799e:	f7ff f817 	bl	80169d0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80179a2:	4629      	mov	r1, r5
 80179a4:	4832      	ldr	r0, [pc, #200]	; (8017a70 <vTaskSuspend+0x100>)
 80179a6:	f7fe ffeb 	bl	8016980 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80179aa:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d102      	bne.n	80179b8 <vTaskSuspend+0x48>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80179b2:	2300      	movs	r3, #0
 80179b4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if( xSchedulerRunning != pdFALSE )
 80179b8:	4d2e      	ldr	r5, [pc, #184]	; (8017a74 <vTaskSuspend+0x104>)
		taskEXIT_CRITICAL();
 80179ba:	f001 f8d1 	bl	8018b60 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80179be:	682b      	ldr	r3, [r5, #0]
 80179c0:	b9eb      	cbnz	r3, 80179fe <vTaskSuspend+0x8e>
		if( pxTCB == pxCurrentTCB )
 80179c2:	6833      	ldr	r3, [r6, #0]
 80179c4:	42a3      	cmp	r3, r4
 80179c6:	d000      	beq.n	80179ca <vTaskSuspend+0x5a>
	}
 80179c8:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 80179ca:	682b      	ldr	r3, [r5, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d02c      	beq.n	8017a2a <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
 80179d0:	4b29      	ldr	r3, [pc, #164]	; (8017a78 <vTaskSuspend+0x108>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d030      	beq.n	8017a3a <vTaskSuspend+0xca>
 80179d8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80179dc:	b672      	cpsid	i
 80179de:	f383 8811 	msr	BASEPRI, r3
 80179e2:	f3bf 8f6f 	isb	sy
 80179e6:	f3bf 8f4f 	dsb	sy
 80179ea:	b662      	cpsie	i
 80179ec:	e7fe      	b.n	80179ec <vTaskSuspend+0x7c>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80179ee:	4923      	ldr	r1, [pc, #140]	; (8017a7c <vTaskSuspend+0x10c>)
 80179f0:	2301      	movs	r3, #1
 80179f2:	4093      	lsls	r3, r2
 80179f4:	680a      	ldr	r2, [r1, #0]
 80179f6:	ea22 0203 	bic.w	r2, r2, r3
 80179fa:	600a      	str	r2, [r1, #0]
 80179fc:	e7cb      	b.n	8017996 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 80179fe:	f001 f889 	bl	8018b14 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a02:	4b1f      	ldr	r3, [pc, #124]	; (8017a80 <vTaskSuspend+0x110>)
 8017a04:	681a      	ldr	r2, [r3, #0]
 8017a06:	6812      	ldr	r2, [r2, #0]
 8017a08:	b152      	cbz	r2, 8017a20 <vTaskSuspend+0xb0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a0a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017a0c:	4b1d      	ldr	r3, [pc, #116]	; (8017a84 <vTaskSuspend+0x114>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a0e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017a10:	68d2      	ldr	r2, [r2, #12]
 8017a12:	6852      	ldr	r2, [r2, #4]
 8017a14:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8017a16:	f001 f8a3 	bl	8018b60 <vPortExitCritical>
 8017a1a:	e7d2      	b.n	80179c2 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017a1c:	6834      	ldr	r4, [r6, #0]
 8017a1e:	e7ae      	b.n	801797e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8017a20:	4b18      	ldr	r3, [pc, #96]	; (8017a84 <vTaskSuspend+0x114>)
 8017a22:	f04f 32ff 	mov.w	r2, #4294967295
 8017a26:	601a      	str	r2, [r3, #0]
 8017a28:	e7f5      	b.n	8017a16 <vTaskSuspend+0xa6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017a2a:	4911      	ldr	r1, [pc, #68]	; (8017a70 <vTaskSuspend+0x100>)
 8017a2c:	4a16      	ldr	r2, [pc, #88]	; (8017a88 <vTaskSuspend+0x118>)
 8017a2e:	6809      	ldr	r1, [r1, #0]
 8017a30:	6812      	ldr	r2, [r2, #0]
 8017a32:	4291      	cmp	r1, r2
 8017a34:	d10c      	bne.n	8017a50 <vTaskSuspend+0xe0>
					pxCurrentTCB = NULL;
 8017a36:	6033      	str	r3, [r6, #0]
	}
 8017a38:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 8017a3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017a46:	f3bf 8f4f 	dsb	sy
 8017a4a:	f3bf 8f6f 	isb	sy
	}
 8017a4e:	bd70      	pop	{r4, r5, r6, pc}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a50:	4b09      	ldr	r3, [pc, #36]	; (8017a78 <vTaskSuspend+0x108>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	b11b      	cbz	r3, 8017a5e <vTaskSuspend+0xee>
		xYieldPending = pdTRUE;
 8017a56:	4b0d      	ldr	r3, [pc, #52]	; (8017a8c <vTaskSuspend+0x11c>)
 8017a58:	2201      	movs	r2, #1
 8017a5a:	601a      	str	r2, [r3, #0]
	}
 8017a5c:	bd70      	pop	{r4, r5, r6, pc}
 8017a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a62:	f7ff be71 	b.w	8017748 <vTaskSwitchContext.part.0>
 8017a66:	bf00      	nop
 8017a68:	200066d0 	.word	0x200066d0
 8017a6c:	200066dc 	.word	0x200066dc
 8017a70:	200067c8 	.word	0x200067c8
 8017a74:	200067c4 	.word	0x200067c4
 8017a78:	20006774 	.word	0x20006774
 8017a7c:	2000677c 	.word	0x2000677c
 8017a80:	200066d4 	.word	0x200066d4
 8017a84:	200067a8 	.word	0x200067a8
 8017a88:	20006768 	.word	0x20006768
 8017a8c:	200067f4 	.word	0x200067f4

08017a90 <vTaskResume>:
		configASSERT( xTaskToResume );
 8017a90:	b198      	cbz	r0, 8017aba <vTaskResume+0x2a>
	{
 8017a92:	b570      	push	{r4, r5, r6, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a94:	4d23      	ldr	r5, [pc, #140]	; (8017b24 <vTaskResume+0x94>)
	{
 8017a96:	b082      	sub	sp, #8
 8017a98:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017a9a:	682b      	ldr	r3, [r5, #0]
 8017a9c:	4283      	cmp	r3, r0
 8017a9e:	d00a      	beq.n	8017ab6 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8017aa0:	f001 f838 	bl	8018b14 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017aa4:	4b20      	ldr	r3, [pc, #128]	; (8017b28 <vTaskResume+0x98>)
 8017aa6:	6962      	ldr	r2, [r4, #20]
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d011      	beq.n	8017ad0 <vTaskResume+0x40>
	}
 8017aac:	b002      	add	sp, #8
 8017aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8017ab2:	f001 b855 	b.w	8018b60 <vPortExitCritical>
	}
 8017ab6:	b002      	add	sp, #8
 8017ab8:	bd70      	pop	{r4, r5, r6, pc}
 8017aba:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017abe:	b672      	cpsid	i
 8017ac0:	f383 8811 	msr	BASEPRI, r3
 8017ac4:	f3bf 8f6f 	isb	sy
 8017ac8:	f3bf 8f4f 	dsb	sy
 8017acc:	b662      	cpsie	i
		configASSERT( xTaskToResume );
 8017ace:	e7fe      	b.n	8017ace <vTaskResume+0x3e>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017ad2:	4a16      	ldr	r2, [pc, #88]	; (8017b2c <vTaskResume+0x9c>)
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	d0e9      	beq.n	8017aac <vTaskResume+0x1c>
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d1e7      	bne.n	8017aac <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017adc:	1d21      	adds	r1, r4, #4
 8017ade:	4608      	mov	r0, r1
 8017ae0:	9101      	str	r1, [sp, #4]
 8017ae2:	f7fe ff75 	bl	80169d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017ae6:	4a12      	ldr	r2, [pc, #72]	; (8017b30 <vTaskResume+0xa0>)
 8017ae8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017aea:	2301      	movs	r3, #1
 8017aec:	6816      	ldr	r6, [r2, #0]
 8017aee:	4083      	lsls	r3, r0
 8017af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017af4:	9901      	ldr	r1, [sp, #4]
 8017af6:	4333      	orrs	r3, r6
 8017af8:	6013      	str	r3, [r2, #0]
 8017afa:	4b0e      	ldr	r3, [pc, #56]	; (8017b34 <vTaskResume+0xa4>)
 8017afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017b00:	f7fe ff3e 	bl	8016980 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017b04:	682b      	ldr	r3, [r5, #0]
 8017b06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	d3ce      	bcc.n	8017aac <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8017b0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017b1a:	f3bf 8f4f 	dsb	sy
 8017b1e:	f3bf 8f6f 	isb	sy
 8017b22:	e7c3      	b.n	8017aac <vTaskResume+0x1c>
 8017b24:	200066d0 	.word	0x200066d0
 8017b28:	200067c8 	.word	0x200067c8
 8017b2c:	200067b0 	.word	0x200067b0
 8017b30:	2000677c 	.word	0x2000677c
 8017b34:	200066dc 	.word	0x200066dc

08017b38 <vTaskStartScheduler>:
{
 8017b38:	b510      	push	{r4, lr}
 8017b3a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017b3c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017b3e:	aa07      	add	r2, sp, #28
 8017b40:	a906      	add	r1, sp, #24
 8017b42:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017b44:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017b48:	f7e9 fb9c 	bl	8001284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017b4c:	4623      	mov	r3, r4
 8017b4e:	9a07      	ldr	r2, [sp, #28]
 8017b50:	9400      	str	r4, [sp, #0]
 8017b52:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8017b56:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8017b5a:	491a      	ldr	r1, [pc, #104]	; (8017bc4 <vTaskStartScheduler+0x8c>)
 8017b5c:	481a      	ldr	r0, [pc, #104]	; (8017bc8 <vTaskStartScheduler+0x90>)
 8017b5e:	f7ff fe95 	bl	801788c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8017b62:	b1f8      	cbz	r0, 8017ba4 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8017b64:	f000 fcfa 	bl	801855c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8017b68:	2801      	cmp	r0, #1
 8017b6a:	d11d      	bne.n	8017ba8 <vTaskStartScheduler+0x70>
 8017b6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b70:	b672      	cpsid	i
 8017b72:	f383 8811 	msr	BASEPRI, r3
 8017b76:	f3bf 8f6f 	isb	sy
 8017b7a:	f3bf 8f4f 	dsb	sy
 8017b7e:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b80:	4b12      	ldr	r3, [pc, #72]	; (8017bcc <vTaskStartScheduler+0x94>)
 8017b82:	4a13      	ldr	r2, [pc, #76]	; (8017bd0 <vTaskStartScheduler+0x98>)
 8017b84:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b86:	4913      	ldr	r1, [pc, #76]	; (8017bd4 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b88:	334c      	adds	r3, #76	; 0x4c
 8017b8a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8017b90:	4a11      	ldr	r2, [pc, #68]	; (8017bd8 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8017b92:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b94:	4b11      	ldr	r3, [pc, #68]	; (8017bdc <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8017b96:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b98:	601c      	str	r4, [r3, #0]
}
 8017b9a:	b008      	add	sp, #32
 8017b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8017ba0:	f001 b854 	b.w	8018c4c <xPortStartScheduler>
}
 8017ba4:	b008      	add	sp, #32
 8017ba6:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017ba8:	3001      	adds	r0, #1
 8017baa:	d1fb      	bne.n	8017ba4 <vTaskStartScheduler+0x6c>
 8017bac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017bb0:	b672      	cpsid	i
 8017bb2:	f383 8811 	msr	BASEPRI, r3
 8017bb6:	f3bf 8f6f 	isb	sy
 8017bba:	f3bf 8f4f 	dsb	sy
 8017bbe:	b662      	cpsie	i
 8017bc0:	e7fe      	b.n	8017bc0 <vTaskStartScheduler+0x88>
 8017bc2:	bf00      	nop
 8017bc4:	0802e6bc 	.word	0x0802e6bc
 8017bc8:	080176dd 	.word	0x080176dd
 8017bcc:	200066d0 	.word	0x200066d0
 8017bd0:	200004a4 	.word	0x200004a4
 8017bd4:	200067a8 	.word	0x200067a8
 8017bd8:	200067c4 	.word	0x200067c4
 8017bdc:	200067f0 	.word	0x200067f0

08017be0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8017be0:	4a02      	ldr	r2, [pc, #8]	; (8017bec <vTaskSuspendAll+0xc>)
 8017be2:	6813      	ldr	r3, [r2, #0]
 8017be4:	3301      	adds	r3, #1
 8017be6:	6013      	str	r3, [r2, #0]
}
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop
 8017bec:	20006774 	.word	0x20006774

08017bf0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8017bf0:	4b01      	ldr	r3, [pc, #4]	; (8017bf8 <xTaskGetTickCount+0x8>)
 8017bf2:	6818      	ldr	r0, [r3, #0]
}
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop
 8017bf8:	200067f0 	.word	0x200067f0

08017bfc <xTaskGetTickCountFromISR>:
{
 8017bfc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017bfe:	f001 f88f 	bl	8018d20 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8017c02:	4b01      	ldr	r3, [pc, #4]	; (8017c08 <xTaskGetTickCountFromISR+0xc>)
 8017c04:	6818      	ldr	r0, [r3, #0]
}
 8017c06:	bd08      	pop	{r3, pc}
 8017c08:	200067f0 	.word	0x200067f0

08017c0c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c0c:	4b52      	ldr	r3, [pc, #328]	; (8017d58 <xTaskIncrementTick+0x14c>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
{
 8017c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c14:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d14c      	bne.n	8017cb4 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017c1a:	4b50      	ldr	r3, [pc, #320]	; (8017d5c <xTaskIncrementTick+0x150>)
 8017c1c:	681d      	ldr	r5, [r3, #0]
 8017c1e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8017c20:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017c22:	2d00      	cmp	r5, #0
 8017c24:	d054      	beq.n	8017cd0 <xTaskIncrementTick+0xc4>
 8017c26:	4b4e      	ldr	r3, [pc, #312]	; (8017d60 <xTaskIncrementTick+0x154>)
 8017c28:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017c2a:	9b01      	ldr	r3, [sp, #4]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	42ab      	cmp	r3, r5
 8017c30:	d85d      	bhi.n	8017cee <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c32:	4e4c      	ldr	r6, [pc, #304]	; (8017d64 <xTaskIncrementTick+0x158>)
 8017c34:	6833      	ldr	r3, [r6, #0]
 8017c36:	681c      	ldr	r4, [r3, #0]
 8017c38:	2c00      	cmp	r4, #0
 8017c3a:	d07c      	beq.n	8017d36 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8017c3c:	2400      	movs	r4, #0
 8017c3e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8017d7c <xTaskIncrementTick+0x170>
 8017c42:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8017d80 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 8017c46:	f04f 0a01 	mov.w	sl, #1
 8017c4a:	4f47      	ldr	r7, [pc, #284]	; (8017d68 <xTaskIncrementTick+0x15c>)
 8017c4c:	e024      	b.n	8017c98 <xTaskIncrementTick+0x8c>
 8017c4e:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c50:	f7fe febe 	bl	80169d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017c54:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c58:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017c5c:	9900      	ldr	r1, [sp, #0]
 8017c5e:	b112      	cbz	r2, 8017c66 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c60:	f7fe feb6 	bl	80169d0 <uxListRemove>
 8017c64:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8017c66:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	fa0a f200 	lsl.w	r2, sl, r0
 8017c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017c74:	431a      	orrs	r2, r3
 8017c76:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017c7a:	603a      	str	r2, [r7, #0]
 8017c7c:	f7fe fe80 	bl	8016980 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c80:	f8d9 3000 	ldr.w	r3, [r9]
 8017c84:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8017c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	bf28      	it	cs
 8017c8e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017c90:	6833      	ldr	r3, [r6, #0]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d052      	beq.n	8017d3e <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c98:	6833      	ldr	r3, [r6, #0]
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017ca0:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ca4:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8017ca8:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017caa:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8017cac:	d2cf      	bcs.n	8017c4e <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8017cae:	9b01      	ldr	r3, [sp, #4]
 8017cb0:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017cb2:	e021      	b.n	8017cf8 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8017cb4:	4a2d      	ldr	r2, [pc, #180]	; (8017d6c <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8017cb6:	2400      	movs	r4, #0
		++uxPendedTicks;
 8017cb8:	6813      	ldr	r3, [r2, #0]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8017cbe:	4b2c      	ldr	r3, [pc, #176]	; (8017d70 <xTaskIncrementTick+0x164>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8017cc2:	2b00      	cmp	r3, #0
}
 8017cc4:	bf0c      	ite	eq
 8017cc6:	4620      	moveq	r0, r4
 8017cc8:	2001      	movne	r0, #1
 8017cca:	b003      	add	sp, #12
 8017ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8017cd0:	4b24      	ldr	r3, [pc, #144]	; (8017d64 <xTaskIncrementTick+0x158>)
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	6812      	ldr	r2, [r2, #0]
 8017cd6:	b1da      	cbz	r2, 8017d10 <xTaskIncrementTick+0x104>
 8017cd8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017cdc:	b672      	cpsid	i
 8017cde:	f383 8811 	msr	BASEPRI, r3
 8017ce2:	f3bf 8f6f 	isb	sy
 8017ce6:	f3bf 8f4f 	dsb	sy
 8017cea:	b662      	cpsie	i
 8017cec:	e7fe      	b.n	8017cec <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8017cee:	2400      	movs	r4, #0
 8017cf0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8017d7c <xTaskIncrementTick+0x170>
 8017cf4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8017d80 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017cf8:	f8d9 3000 	ldr.w	r3, [r9]
 8017cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8017d08:	2b02      	cmp	r3, #2
 8017d0a:	bf28      	it	cs
 8017d0c:	2401      	movcs	r4, #1
 8017d0e:	e7d6      	b.n	8017cbe <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8017d10:	4a18      	ldr	r2, [pc, #96]	; (8017d74 <xTaskIncrementTick+0x168>)
 8017d12:	6818      	ldr	r0, [r3, #0]
 8017d14:	6811      	ldr	r1, [r2, #0]
 8017d16:	6019      	str	r1, [r3, #0]
 8017d18:	4917      	ldr	r1, [pc, #92]	; (8017d78 <xTaskIncrementTick+0x16c>)
 8017d1a:	6010      	str	r0, [r2, #0]
 8017d1c:	680a      	ldr	r2, [r1, #0]
 8017d1e:	3201      	adds	r2, #1
 8017d20:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	6812      	ldr	r2, [r2, #0]
 8017d26:	b97a      	cbnz	r2, 8017d48 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8017d28:	4b0d      	ldr	r3, [pc, #52]	; (8017d60 <xTaskIncrementTick+0x154>)
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	9301      	str	r3, [sp, #4]
 8017d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d32:	6013      	str	r3, [r2, #0]
 8017d34:	e779      	b.n	8017c2a <xTaskIncrementTick+0x1e>
 8017d36:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017d7c <xTaskIncrementTick+0x170>
 8017d3a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8017d80 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d42:	9a01      	ldr	r2, [sp, #4]
 8017d44:	6013      	str	r3, [r2, #0]
					break;
 8017d46:	e7d7      	b.n	8017cf8 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d48:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d4a:	4a05      	ldr	r2, [pc, #20]	; (8017d60 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d4c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017d4e:	9201      	str	r2, [sp, #4]
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	685b      	ldr	r3, [r3, #4]
 8017d54:	6013      	str	r3, [r2, #0]
}
 8017d56:	e768      	b.n	8017c2a <xTaskIncrementTick+0x1e>
 8017d58:	20006774 	.word	0x20006774
 8017d5c:	200067f0 	.word	0x200067f0
 8017d60:	200067a8 	.word	0x200067a8
 8017d64:	200066d4 	.word	0x200066d4
 8017d68:	2000677c 	.word	0x2000677c
 8017d6c:	20006770 	.word	0x20006770
 8017d70:	200067f4 	.word	0x200067f4
 8017d74:	200066d8 	.word	0x200066d8
 8017d78:	200067ac 	.word	0x200067ac
 8017d7c:	200066dc 	.word	0x200066dc
 8017d80:	200066d0 	.word	0x200066d0

08017d84 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8017d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d88:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8017d8a:	f000 fec3 	bl	8018b14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8017d8e:	4b38      	ldr	r3, [pc, #224]	; (8017e70 <xTaskResumeAll.part.0+0xec>)
 8017d90:	681a      	ldr	r2, [r3, #0]
 8017d92:	3a01      	subs	r2, #1
 8017d94:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d159      	bne.n	8017e50 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017d9c:	4b35      	ldr	r3, [pc, #212]	; (8017e74 <xTaskResumeAll.part.0+0xf0>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d055      	beq.n	8017e50 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017da4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e8c <xTaskResumeAll.part.0+0x108>
 8017da8:	f8da 3000 	ldr.w	r3, [sl]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d05c      	beq.n	8017e6a <xTaskResumeAll.part.0+0xe6>
 8017db0:	4d31      	ldr	r5, [pc, #196]	; (8017e78 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8017db2:	2601      	movs	r6, #1
 8017db4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8017e90 <xTaskResumeAll.part.0+0x10c>
 8017db8:	4f30      	ldr	r7, [pc, #192]	; (8017e7c <xTaskResumeAll.part.0+0xf8>)
 8017dba:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8017e94 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dbe:	f8da 300c 	ldr.w	r3, [sl, #12]
 8017dc2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017dc4:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017dc8:	f104 0018 	add.w	r0, r4, #24
 8017dcc:	f7fe fe00 	bl	80169d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017dd0:	4658      	mov	r0, fp
 8017dd2:	f7fe fdfd 	bl	80169d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017dd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017dd8:	682a      	ldr	r2, [r5, #0]
 8017dda:	4659      	mov	r1, fp
 8017ddc:	fa06 f300 	lsl.w	r3, r6, r0
 8017de0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017de4:	4313      	orrs	r3, r2
 8017de6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017dea:	602b      	str	r3, [r5, #0]
 8017dec:	f7fe fdc8 	bl	8016980 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017df6:	429a      	cmp	r2, r3
 8017df8:	d301      	bcc.n	8017dfe <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8017dfa:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017dfe:	f8da 3000 	ldr.w	r3, [sl]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d1db      	bne.n	8017dbe <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e06:	4b1e      	ldr	r3, [pc, #120]	; (8017e80 <xTaskResumeAll.part.0+0xfc>)
 8017e08:	681a      	ldr	r2, [r3, #0]
 8017e0a:	6812      	ldr	r2, [r2, #0]
 8017e0c:	b342      	cbz	r2, 8017e60 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e0e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017e10:	4b1c      	ldr	r3, [pc, #112]	; (8017e84 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e12:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017e14:	68d2      	ldr	r2, [r2, #12]
 8017e16:	6852      	ldr	r2, [r2, #4]
 8017e18:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017e1a:	4e1b      	ldr	r6, [pc, #108]	; (8017e88 <xTaskResumeAll.part.0+0x104>)
 8017e1c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017e1e:	b144      	cbz	r4, 8017e32 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8017e20:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8017e22:	f7ff fef3 	bl	8017c0c <xTaskIncrementTick>
 8017e26:	b108      	cbz	r0, 8017e2c <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8017e28:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017e2c:	3c01      	subs	r4, #1
 8017e2e:	d1f8      	bne.n	8017e22 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8017e30:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8017e32:	f8d9 3000 	ldr.w	r3, [r9]
 8017e36:	b15b      	cbz	r3, 8017e50 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8017e38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017e44:	f3bf 8f4f 	dsb	sy
 8017e48:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8017e4c:	2001      	movs	r0, #1
 8017e4e:	e000      	b.n	8017e52 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8017e50:	2000      	movs	r0, #0
 8017e52:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8017e54:	f000 fe84 	bl	8018b60 <vPortExitCritical>
}
 8017e58:	9801      	ldr	r0, [sp, #4]
 8017e5a:	b003      	add	sp, #12
 8017e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8017e60:	4b08      	ldr	r3, [pc, #32]	; (8017e84 <xTaskResumeAll.part.0+0x100>)
 8017e62:	f04f 32ff 	mov.w	r2, #4294967295
 8017e66:	601a      	str	r2, [r3, #0]
 8017e68:	e7d7      	b.n	8017e1a <xTaskResumeAll.part.0+0x96>
 8017e6a:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8017e94 <xTaskResumeAll.part.0+0x110>
 8017e6e:	e7d4      	b.n	8017e1a <xTaskResumeAll.part.0+0x96>
 8017e70:	20006774 	.word	0x20006774
 8017e74:	20006768 	.word	0x20006768
 8017e78:	2000677c 	.word	0x2000677c
 8017e7c:	200066d0 	.word	0x200066d0
 8017e80:	200066d4 	.word	0x200066d4
 8017e84:	200067a8 	.word	0x200067a8
 8017e88:	20006770 	.word	0x20006770
 8017e8c:	200067b0 	.word	0x200067b0
 8017e90:	200066dc 	.word	0x200066dc
 8017e94:	200067f4 	.word	0x200067f4

08017e98 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8017e98:	4b07      	ldr	r3, [pc, #28]	; (8017eb8 <xTaskResumeAll+0x20>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	b953      	cbnz	r3, 8017eb4 <xTaskResumeAll+0x1c>
 8017e9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ea2:	b672      	cpsid	i
 8017ea4:	f383 8811 	msr	BASEPRI, r3
 8017ea8:	f3bf 8f6f 	isb	sy
 8017eac:	f3bf 8f4f 	dsb	sy
 8017eb0:	b662      	cpsie	i
 8017eb2:	e7fe      	b.n	8017eb2 <xTaskResumeAll+0x1a>
 8017eb4:	f7ff bf66 	b.w	8017d84 <xTaskResumeAll.part.0>
 8017eb8:	20006774 	.word	0x20006774

08017ebc <vTaskDelay>:
	{
 8017ebc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017ebe:	b950      	cbnz	r0, 8017ed6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8017ec0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ec8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017ecc:	f3bf 8f4f 	dsb	sy
 8017ed0:	f3bf 8f6f 	isb	sy
	}
 8017ed4:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8017ed6:	4c12      	ldr	r4, [pc, #72]	; (8017f20 <vTaskDelay+0x64>)
 8017ed8:	6821      	ldr	r1, [r4, #0]
 8017eda:	b151      	cbz	r1, 8017ef2 <vTaskDelay+0x36>
 8017edc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ee0:	b672      	cpsid	i
 8017ee2:	f383 8811 	msr	BASEPRI, r3
 8017ee6:	f3bf 8f6f 	isb	sy
 8017eea:	f3bf 8f4f 	dsb	sy
 8017eee:	b662      	cpsie	i
 8017ef0:	e7fe      	b.n	8017ef0 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017ef8:	f7ff fb84 	bl	8017604 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	b953      	cbnz	r3, 8017f16 <vTaskDelay+0x5a>
 8017f00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f04:	b672      	cpsid	i
 8017f06:	f383 8811 	msr	BASEPRI, r3
 8017f0a:	f3bf 8f6f 	isb	sy
 8017f0e:	f3bf 8f4f 	dsb	sy
 8017f12:	b662      	cpsie	i
 8017f14:	e7fe      	b.n	8017f14 <vTaskDelay+0x58>
 8017f16:	f7ff ff35 	bl	8017d84 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d0d0      	beq.n	8017ec0 <vTaskDelay+0x4>
	}
 8017f1e:	bd10      	pop	{r4, pc}
 8017f20:	20006774 	.word	0x20006774

08017f24 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017f24:	4b04      	ldr	r3, [pc, #16]	; (8017f38 <vTaskSwitchContext+0x14>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	b11b      	cbz	r3, 8017f32 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8017f2a:	4b04      	ldr	r3, [pc, #16]	; (8017f3c <vTaskSwitchContext+0x18>)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	601a      	str	r2, [r3, #0]
}
 8017f30:	4770      	bx	lr
 8017f32:	f7ff bc09 	b.w	8017748 <vTaskSwitchContext.part.0>
 8017f36:	bf00      	nop
 8017f38:	20006774 	.word	0x20006774
 8017f3c:	200067f4 	.word	0x200067f4

08017f40 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8017f40:	b160      	cbz	r0, 8017f5c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f42:	4b0c      	ldr	r3, [pc, #48]	; (8017f74 <vTaskPlaceOnEventList+0x34>)
{
 8017f44:	b510      	push	{r4, lr}
 8017f46:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f48:	6819      	ldr	r1, [r3, #0]
 8017f4a:	3118      	adds	r1, #24
 8017f4c:	f7fe fd28 	bl	80169a0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f50:	4620      	mov	r0, r4
 8017f52:	2101      	movs	r1, #1
}
 8017f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f58:	f7ff bb54 	b.w	8017604 <prvAddCurrentTaskToDelayedList>
 8017f5c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017f60:	b672      	cpsid	i
 8017f62:	f383 8811 	msr	BASEPRI, r3
 8017f66:	f3bf 8f6f 	isb	sy
 8017f6a:	f3bf 8f4f 	dsb	sy
 8017f6e:	b662      	cpsie	i
	configASSERT( pxEventList );
 8017f70:	e7fe      	b.n	8017f70 <vTaskPlaceOnEventList+0x30>
 8017f72:	bf00      	nop
 8017f74:	200066d0 	.word	0x200066d0

08017f78 <vTaskPlaceOnEventListRestricted>:
	{
 8017f78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8017f7a:	b180      	cbz	r0, 8017f9e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f7c:	4b0d      	ldr	r3, [pc, #52]	; (8017fb4 <vTaskPlaceOnEventListRestricted+0x3c>)
 8017f7e:	460d      	mov	r5, r1
 8017f80:	4614      	mov	r4, r2
 8017f82:	6819      	ldr	r1, [r3, #0]
 8017f84:	3118      	adds	r1, #24
 8017f86:	f7fe fcfb 	bl	8016980 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8017f8a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	bf0c      	ite	eq
 8017f90:	4628      	moveq	r0, r5
 8017f92:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8017f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017f9a:	f7ff bb33 	b.w	8017604 <prvAddCurrentTaskToDelayedList>
 8017f9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017fa2:	b672      	cpsid	i
 8017fa4:	f383 8811 	msr	BASEPRI, r3
 8017fa8:	f3bf 8f6f 	isb	sy
 8017fac:	f3bf 8f4f 	dsb	sy
 8017fb0:	b662      	cpsie	i
		configASSERT( pxEventList );
 8017fb2:	e7fe      	b.n	8017fb2 <vTaskPlaceOnEventListRestricted+0x3a>
 8017fb4:	200066d0 	.word	0x200066d0

08017fb8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fb8:	68c3      	ldr	r3, [r0, #12]
{
 8017fba:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fbc:	68dc      	ldr	r4, [r3, #12]
{
 8017fbe:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8017fc0:	b364      	cbz	r4, 801801c <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017fc2:	f104 0518 	add.w	r5, r4, #24
 8017fc6:	4628      	mov	r0, r5
 8017fc8:	f7fe fd02 	bl	80169d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fcc:	4b1a      	ldr	r3, [pc, #104]	; (8018038 <xTaskRemoveFromEventList+0x80>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	b17b      	cbz	r3, 8017ff2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017fd2:	4629      	mov	r1, r5
 8017fd4:	4819      	ldr	r0, [pc, #100]	; (801803c <xTaskRemoveFromEventList+0x84>)
 8017fd6:	f7fe fcd3 	bl	8016980 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017fda:	4b19      	ldr	r3, [pc, #100]	; (8018040 <xTaskRemoveFromEventList+0x88>)
 8017fdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d925      	bls.n	8018032 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	4a16      	ldr	r2, [pc, #88]	; (8018044 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8017fea:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8017fec:	6013      	str	r3, [r2, #0]
}
 8017fee:	b003      	add	sp, #12
 8017ff0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017ff2:	1d21      	adds	r1, r4, #4
 8017ff4:	4608      	mov	r0, r1
 8017ff6:	9101      	str	r1, [sp, #4]
 8017ff8:	f7fe fcea 	bl	80169d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017ffc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017ffe:	4a12      	ldr	r2, [pc, #72]	; (8018048 <xTaskRemoveFromEventList+0x90>)
 8018000:	2301      	movs	r3, #1
 8018002:	9901      	ldr	r1, [sp, #4]
 8018004:	6815      	ldr	r5, [r2, #0]
 8018006:	4083      	lsls	r3, r0
 8018008:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801800c:	432b      	orrs	r3, r5
 801800e:	6013      	str	r3, [r2, #0]
 8018010:	4b0e      	ldr	r3, [pc, #56]	; (801804c <xTaskRemoveFromEventList+0x94>)
 8018012:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018016:	f7fe fcb3 	bl	8016980 <vListInsertEnd>
 801801a:	e7de      	b.n	8017fda <xTaskRemoveFromEventList+0x22>
 801801c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018020:	b672      	cpsid	i
 8018022:	f383 8811 	msr	BASEPRI, r3
 8018026:	f3bf 8f6f 	isb	sy
 801802a:	f3bf 8f4f 	dsb	sy
 801802e:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8018030:	e7fe      	b.n	8018030 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8018032:	2000      	movs	r0, #0
}
 8018034:	b003      	add	sp, #12
 8018036:	bd30      	pop	{r4, r5, pc}
 8018038:	20006774 	.word	0x20006774
 801803c:	200067b0 	.word	0x200067b0
 8018040:	200066d0 	.word	0x200066d0
 8018044:	200067f4 	.word	0x200067f4
 8018048:	2000677c 	.word	0x2000677c
 801804c:	200066dc 	.word	0x200066dc

08018050 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018050:	4a03      	ldr	r2, [pc, #12]	; (8018060 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018052:	4b04      	ldr	r3, [pc, #16]	; (8018064 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018054:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	e9c0 2300 	strd	r2, r3, [r0]
}
 801805c:	4770      	bx	lr
 801805e:	bf00      	nop
 8018060:	200067ac 	.word	0x200067ac
 8018064:	200067f0 	.word	0x200067f0

08018068 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8018068:	b338      	cbz	r0, 80180ba <xTaskCheckForTimeOut+0x52>
{
 801806a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801806c:	460d      	mov	r5, r1
 801806e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8018070:	b1c1      	cbz	r1, 80180a4 <xTaskCheckForTimeOut+0x3c>
 8018072:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018074:	f000 fd4e 	bl	8018b14 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8018078:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 801807a:	4a1f      	ldr	r2, [pc, #124]	; (80180f8 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 801807c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 801807e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8018080:	d034      	beq.n	80180ec <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018082:	f8df c078 	ldr.w	ip, [pc, #120]	; 80180fc <xTaskCheckForTimeOut+0x94>
 8018086:	6826      	ldr	r6, [r4, #0]
 8018088:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801808c:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801808e:	42be      	cmp	r6, r7
 8018090:	d01e      	beq.n	80180d0 <xTaskCheckForTimeOut+0x68>
 8018092:	4288      	cmp	r0, r1
 8018094:	d81c      	bhi.n	80180d0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8018096:	2001      	movs	r0, #1
 8018098:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 801809a:	f000 fd61 	bl	8018b60 <vPortExitCritical>
}
 801809e:	9801      	ldr	r0, [sp, #4]
 80180a0:	b003      	add	sp, #12
 80180a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80180a8:	b672      	cpsid	i
 80180aa:	f383 8811 	msr	BASEPRI, r3
 80180ae:	f3bf 8f6f 	isb	sy
 80180b2:	f3bf 8f4f 	dsb	sy
 80180b6:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80180b8:	e7fe      	b.n	80180b8 <xTaskCheckForTimeOut+0x50>
 80180ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80180be:	b672      	cpsid	i
 80180c0:	f383 8811 	msr	BASEPRI, r3
 80180c4:	f3bf 8f6f 	isb	sy
 80180c8:	f3bf 8f4f 	dsb	sy
 80180cc:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80180ce:	e7fe      	b.n	80180ce <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80180d0:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80180d4:	4573      	cmp	r3, lr
 80180d6:	d90b      	bls.n	80180f0 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 80180d8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80180da:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80180de:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80180e0:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80180e2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80180e4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80180e6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80180ea:	e7d5      	b.n	8018098 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80180ec:	2000      	movs	r0, #0
 80180ee:	e7d3      	b.n	8018098 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80180f0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80180f2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80180f4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80180f6:	e7cf      	b.n	8018098 <xTaskCheckForTimeOut+0x30>
 80180f8:	200067f0 	.word	0x200067f0
 80180fc:	200067ac 	.word	0x200067ac

08018100 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8018100:	4b01      	ldr	r3, [pc, #4]	; (8018108 <vTaskMissedYield+0x8>)
 8018102:	2201      	movs	r2, #1
 8018104:	601a      	str	r2, [r3, #0]
}
 8018106:	4770      	bx	lr
 8018108:	200067f4 	.word	0x200067f4

0801810c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801810c:	4b01      	ldr	r3, [pc, #4]	; (8018114 <xTaskGetCurrentTaskHandle+0x8>)
 801810e:	6818      	ldr	r0, [r3, #0]
	}
 8018110:	4770      	bx	lr
 8018112:	bf00      	nop
 8018114:	200066d0 	.word	0x200066d0

08018118 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8018118:	4b05      	ldr	r3, [pc, #20]	; (8018130 <xTaskGetSchedulerState+0x18>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	b133      	cbz	r3, 801812c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801811e:	4b05      	ldr	r3, [pc, #20]	; (8018134 <xTaskGetSchedulerState+0x1c>)
 8018120:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8018122:	2b00      	cmp	r3, #0
 8018124:	bf0c      	ite	eq
 8018126:	2002      	moveq	r0, #2
 8018128:	2000      	movne	r0, #0
 801812a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801812c:	2001      	movs	r0, #1
	}
 801812e:	4770      	bx	lr
 8018130:	200067c4 	.word	0x200067c4
 8018134:	20006774 	.word	0x20006774

08018138 <xTaskPriorityInherit>:
	{
 8018138:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801813a:	4604      	mov	r4, r0
	{
 801813c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 801813e:	b1c8      	cbz	r0, 8018174 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018140:	4d26      	ldr	r5, [pc, #152]	; (80181dc <xTaskPriorityInherit+0xa4>)
 8018142:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018144:	682a      	ldr	r2, [r5, #0]
 8018146:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018148:	4293      	cmp	r3, r2
 801814a:	d215      	bcs.n	8018178 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801814c:	6982      	ldr	r2, [r0, #24]
 801814e:	2a00      	cmp	r2, #0
 8018150:	db04      	blt.n	801815c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018152:	682a      	ldr	r2, [r5, #0]
 8018154:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018156:	f1c2 0207 	rsb	r2, r2, #7
 801815a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801815c:	4e20      	ldr	r6, [pc, #128]	; (80181e0 <xTaskPriorityInherit+0xa8>)
 801815e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018162:	6962      	ldr	r2, [r4, #20]
 8018164:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018168:	429a      	cmp	r2, r3
 801816a:	d00e      	beq.n	801818a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801816c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 801816e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018172:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8018174:	b002      	add	sp, #8
 8018176:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018178:	682b      	ldr	r3, [r5, #0]
 801817a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801817e:	4298      	cmp	r0, r3
 8018180:	bf2c      	ite	cs
 8018182:	2000      	movcs	r0, #0
 8018184:	2001      	movcc	r0, #1
	}
 8018186:	b002      	add	sp, #8
 8018188:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801818a:	1d21      	adds	r1, r4, #4
 801818c:	4608      	mov	r0, r1
 801818e:	9101      	str	r1, [sp, #4]
 8018190:	f7fe fc1e 	bl	80169d0 <uxListRemove>
 8018194:	9901      	ldr	r1, [sp, #4]
 8018196:	b970      	cbnz	r0, 80181b6 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018198:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801819a:	4a12      	ldr	r2, [pc, #72]	; (80181e4 <xTaskPriorityInherit+0xac>)
 801819c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80181a0:	009b      	lsls	r3, r3, #2
 80181a2:	58f3      	ldr	r3, [r6, r3]
 80181a4:	b943      	cbnz	r3, 80181b8 <xTaskPriorityInherit+0x80>
 80181a6:	2301      	movs	r3, #1
 80181a8:	fa03 f000 	lsl.w	r0, r3, r0
 80181ac:	6813      	ldr	r3, [r2, #0]
 80181ae:	ea23 0300 	bic.w	r3, r3, r0
 80181b2:	6013      	str	r3, [r2, #0]
 80181b4:	e000      	b.n	80181b8 <xTaskPriorityInherit+0x80>
 80181b6:	4a0b      	ldr	r2, [pc, #44]	; (80181e4 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80181b8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80181ba:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80181bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181be:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80181c0:	2401      	movs	r4, #1
 80181c2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80181c6:	fa04 f303 	lsl.w	r3, r4, r3
 80181ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80181ce:	432b      	orrs	r3, r5
 80181d0:	6013      	str	r3, [r2, #0]
 80181d2:	f7fe fbd5 	bl	8016980 <vListInsertEnd>
				xReturn = pdTRUE;
 80181d6:	4620      	mov	r0, r4
 80181d8:	e7cc      	b.n	8018174 <xTaskPriorityInherit+0x3c>
 80181da:	bf00      	nop
 80181dc:	200066d0 	.word	0x200066d0
 80181e0:	200066dc 	.word	0x200066dc
 80181e4:	2000677c 	.word	0x2000677c

080181e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80181e8:	b340      	cbz	r0, 801823c <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 80181ea:	4b2c      	ldr	r3, [pc, #176]	; (801829c <xTaskPriorityDisinherit+0xb4>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4283      	cmp	r3, r0
	{
 80181f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181f2:	4604      	mov	r4, r0
 80181f4:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80181f6:	d00a      	beq.n	801820e <xTaskPriorityDisinherit+0x26>
 80181f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80181fc:	b672      	cpsid	i
 80181fe:	f383 8811 	msr	BASEPRI, r3
 8018202:	f3bf 8f6f 	isb	sy
 8018206:	f3bf 8f4f 	dsb	sy
 801820a:	b662      	cpsie	i
 801820c:	e7fe      	b.n	801820c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018210:	b14b      	cbz	r3, 8018226 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018212:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8018214:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018216:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8018218:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801821a:	4291      	cmp	r1, r2
 801821c:	d000      	beq.n	8018220 <xTaskPriorityDisinherit+0x38>
 801821e:	b17b      	cbz	r3, 8018240 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8018220:	2000      	movs	r0, #0
	}
 8018222:	b003      	add	sp, #12
 8018224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018226:	f04f 0330 	mov.w	r3, #48	; 0x30
 801822a:	b672      	cpsid	i
 801822c:	f383 8811 	msr	BASEPRI, r3
 8018230:	f3bf 8f6f 	isb	sy
 8018234:	f3bf 8f4f 	dsb	sy
 8018238:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801823a:	e7fe      	b.n	801823a <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 801823c:	2000      	movs	r0, #0
	}
 801823e:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018240:	1d01      	adds	r1, r0, #4
 8018242:	4608      	mov	r0, r1
 8018244:	9101      	str	r1, [sp, #4]
 8018246:	f7fe fbc3 	bl	80169d0 <uxListRemove>
 801824a:	9901      	ldr	r1, [sp, #4]
 801824c:	b1a0      	cbz	r0, 8018278 <xTaskPriorityDisinherit+0x90>
 801824e:	4814      	ldr	r0, [pc, #80]	; (80182a0 <xTaskPriorityDisinherit+0xb8>)
 8018250:	4a14      	ldr	r2, [pc, #80]	; (80182a4 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018252:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8018254:	2501      	movs	r5, #1
 8018256:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018258:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801825c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801825e:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8018260:	fa05 f403 	lsl.w	r4, r5, r3
 8018264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018268:	4334      	orrs	r4, r6
 801826a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801826e:	6014      	str	r4, [r2, #0]
 8018270:	f7fe fb86 	bl	8016980 <vListInsertEnd>
					xReturn = pdTRUE;
 8018274:	4628      	mov	r0, r5
		return xReturn;
 8018276:	e7d4      	b.n	8018222 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018278:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801827a:	4809      	ldr	r0, [pc, #36]	; (80182a0 <xTaskPriorityDisinherit+0xb8>)
 801827c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8018280:	4a08      	ldr	r2, [pc, #32]	; (80182a4 <xTaskPriorityDisinherit+0xbc>)
 8018282:	009b      	lsls	r3, r3, #2
 8018284:	58c3      	ldr	r3, [r0, r3]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d1e3      	bne.n	8018252 <xTaskPriorityDisinherit+0x6a>
 801828a:	2301      	movs	r3, #1
 801828c:	fa03 f505 	lsl.w	r5, r3, r5
 8018290:	6813      	ldr	r3, [r2, #0]
 8018292:	ea23 0305 	bic.w	r3, r3, r5
 8018296:	6013      	str	r3, [r2, #0]
 8018298:	e7db      	b.n	8018252 <xTaskPriorityDisinherit+0x6a>
 801829a:	bf00      	nop
 801829c:	200066d0 	.word	0x200066d0
 80182a0:	200066dc 	.word	0x200066dc
 80182a4:	2000677c 	.word	0x2000677c

080182a8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d044      	beq.n	8018336 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 80182ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 80182ae:	b530      	push	{r4, r5, lr}
 80182b0:	4604      	mov	r4, r0
 80182b2:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 80182b4:	b153      	cbz	r3, 80182cc <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80182b6:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 80182b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80182ba:	4281      	cmp	r1, r0
 80182bc:	bf38      	it	cc
 80182be:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80182c0:	428a      	cmp	r2, r1
 80182c2:	d001      	beq.n	80182c8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80182c4:	2b01      	cmp	r3, #1
 80182c6:	d00c      	beq.n	80182e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 80182c8:	b003      	add	sp, #12
 80182ca:	bd30      	pop	{r4, r5, pc}
 80182cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80182d0:	b672      	cpsid	i
 80182d2:	f383 8811 	msr	BASEPRI, r3
 80182d6:	f3bf 8f6f 	isb	sy
 80182da:	f3bf 8f4f 	dsb	sy
 80182de:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80182e0:	e7fe      	b.n	80182e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 80182e2:	4b25      	ldr	r3, [pc, #148]	; (8018378 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	42a3      	cmp	r3, r4
 80182e8:	d026      	beq.n	8018338 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80182ea:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80182ec:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	db02      	blt.n	80182f8 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182f2:	f1c1 0107 	rsb	r1, r1, #7
 80182f6:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80182f8:	4d20      	ldr	r5, [pc, #128]	; (801837c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80182fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80182fe:	6961      	ldr	r1, [r4, #20]
 8018300:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8018304:	4299      	cmp	r1, r3
 8018306:	d1df      	bne.n	80182c8 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018308:	1d21      	adds	r1, r4, #4
 801830a:	4608      	mov	r0, r1
 801830c:	9101      	str	r1, [sp, #4]
 801830e:	f7fe fb5f 	bl	80169d0 <uxListRemove>
 8018312:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018316:	b1d0      	cbz	r0, 801834e <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018318:	2301      	movs	r3, #1
 801831a:	0090      	lsls	r0, r2, #2
 801831c:	4c18      	ldr	r4, [pc, #96]	; (8018380 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801831e:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8018320:	4410      	add	r0, r2
 8018322:	6822      	ldr	r2, [r4, #0]
 8018324:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8018328:	4313      	orrs	r3, r2
 801832a:	6023      	str	r3, [r4, #0]
	}
 801832c:	b003      	add	sp, #12
 801832e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8018332:	f7fe bb25 	b.w	8016980 <vListInsertEnd>
 8018336:	4770      	bx	lr
 8018338:	f04f 0330 	mov.w	r3, #48	; 0x30
 801833c:	b672      	cpsid	i
 801833e:	f383 8811 	msr	BASEPRI, r3
 8018342:	f3bf 8f6f 	isb	sy
 8018346:	f3bf 8f4f 	dsb	sy
 801834a:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 801834c:	e7fe      	b.n	801834c <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801834e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018352:	0090      	lsls	r0, r2, #2
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	58eb      	ldr	r3, [r5, r3]
 8018358:	b11b      	cbz	r3, 8018362 <vTaskPriorityDisinheritAfterTimeout+0xba>
 801835a:	2301      	movs	r3, #1
 801835c:	4c08      	ldr	r4, [pc, #32]	; (8018380 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 801835e:	4093      	lsls	r3, r2
 8018360:	e7de      	b.n	8018320 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8018362:	4c07      	ldr	r4, [pc, #28]	; (8018380 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8018364:	2301      	movs	r3, #1
 8018366:	f8d4 c000 	ldr.w	ip, [r4]
 801836a:	4093      	lsls	r3, r2
 801836c:	ea2c 0c03 	bic.w	ip, ip, r3
 8018370:	f8c4 c000 	str.w	ip, [r4]
 8018374:	e7d4      	b.n	8018320 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8018376:	bf00      	nop
 8018378:	200066d0 	.word	0x200066d0
 801837c:	200066dc 	.word	0x200066dc
 8018380:	2000677c 	.word	0x2000677c

08018384 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8018384:	4b04      	ldr	r3, [pc, #16]	; (8018398 <pvTaskIncrementMutexHeldCount+0x14>)
 8018386:	681a      	ldr	r2, [r3, #0]
 8018388:	b11a      	cbz	r2, 8018392 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801838a:	6819      	ldr	r1, [r3, #0]
 801838c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 801838e:	3201      	adds	r2, #1
 8018390:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8018392:	6818      	ldr	r0, [r3, #0]
	}
 8018394:	4770      	bx	lr
 8018396:	bf00      	nop
 8018398:	200066d0 	.word	0x200066d0

0801839c <ulTaskNotifyTake>:
	{
 801839c:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801839e:	4c1a      	ldr	r4, [pc, #104]	; (8018408 <ulTaskNotifyTake+0x6c>)
	{
 80183a0:	4606      	mov	r6, r0
 80183a2:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80183a4:	f000 fbb6 	bl	8018b14 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80183ae:	b923      	cbnz	r3, 80183ba <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80183b0:	6823      	ldr	r3, [r4, #0]
 80183b2:	2101      	movs	r1, #1
 80183b4:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 80183b8:	b9c5      	cbnz	r5, 80183ec <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 80183ba:	f000 fbd1 	bl	8018b60 <vPortExitCritical>
		taskENTER_CRITICAL();
 80183be:	f000 fba9 	bl	8018b14 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 80183c8:	b125      	cbz	r5, 80183d4 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80183ca:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80183cc:	b156      	cbz	r6, 80183e4 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80183ce:	2200      	movs	r2, #0
 80183d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	2200      	movs	r2, #0
 80183d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 80183dc:	f000 fbc0 	bl	8018b60 <vPortExitCritical>
	}
 80183e0:	4628      	mov	r0, r5
 80183e2:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80183e4:	1e6a      	subs	r2, r5, #1
 80183e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80183ea:	e7f3      	b.n	80183d4 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80183ec:	4628      	mov	r0, r5
 80183ee:	f7ff f909 	bl	8017604 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80183f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80183f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80183fe:	f3bf 8f4f 	dsb	sy
 8018402:	f3bf 8f6f 	isb	sy
 8018406:	e7d8      	b.n	80183ba <ulTaskNotifyTake+0x1e>
 8018408:	200066d0 	.word	0x200066d0

0801840c <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 801840c:	b318      	cbz	r0, 8018456 <vTaskNotifyGiveFromISR+0x4a>
	{
 801840e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018410:	b083      	sub	sp, #12
 8018412:	4604      	mov	r4, r0
 8018414:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018416:	f000 fc83 	bl	8018d20 <vPortValidateInterruptPriority>
	__asm volatile
 801841a:	f3ef 8611 	mrs	r6, BASEPRI
 801841e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018422:	b672      	cpsid	i
 8018424:	f383 8811 	msr	BASEPRI, r3
 8018428:	f3bf 8f6f 	isb	sy
 801842c:	f3bf 8f4f 	dsb	sy
 8018430:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018432:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018434:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8018438:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801843c:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 801843e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8018442:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8018444:	f103 0301 	add.w	r3, r3, #1
 8018448:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801844c:	d00e      	beq.n	801846c <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 801844e:	f386 8811 	msr	BASEPRI, r6
	}
 8018452:	b003      	add	sp, #12
 8018454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8018456:	f04f 0330 	mov.w	r3, #48	; 0x30
 801845a:	b672      	cpsid	i
 801845c:	f383 8811 	msr	BASEPRI, r3
 8018460:	f3bf 8f6f 	isb	sy
 8018464:	f3bf 8f4f 	dsb	sy
 8018468:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801846a:	e7fe      	b.n	801846a <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801846c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801846e:	b153      	cbz	r3, 8018486 <vTaskNotifyGiveFromISR+0x7a>
 8018470:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018474:	b672      	cpsid	i
 8018476:	f383 8811 	msr	BASEPRI, r3
 801847a:	f3bf 8f6f 	isb	sy
 801847e:	f3bf 8f4f 	dsb	sy
 8018482:	b662      	cpsie	i
 8018484:	e7fe      	b.n	8018484 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018486:	4b14      	ldr	r3, [pc, #80]	; (80184d8 <vTaskNotifyGiveFromISR+0xcc>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	b18b      	cbz	r3, 80184b0 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801848c:	f104 0118 	add.w	r1, r4, #24
 8018490:	4812      	ldr	r0, [pc, #72]	; (80184dc <vTaskNotifyGiveFromISR+0xd0>)
 8018492:	f7fe fa75 	bl	8016980 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018496:	4b12      	ldr	r3, [pc, #72]	; (80184e0 <vTaskNotifyGiveFromISR+0xd4>)
 8018498:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801849e:	429a      	cmp	r2, r3
 80184a0:	d9d5      	bls.n	801844e <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 80184a2:	b10d      	cbz	r5, 80184a8 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80184a4:	2301      	movs	r3, #1
 80184a6:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 80184a8:	4b0e      	ldr	r3, [pc, #56]	; (80184e4 <vTaskNotifyGiveFromISR+0xd8>)
 80184aa:	2201      	movs	r2, #1
 80184ac:	601a      	str	r2, [r3, #0]
 80184ae:	e7ce      	b.n	801844e <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184b0:	1d21      	adds	r1, r4, #4
 80184b2:	4608      	mov	r0, r1
 80184b4:	9101      	str	r1, [sp, #4]
 80184b6:	f7fe fa8b 	bl	80169d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80184ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184bc:	4b0a      	ldr	r3, [pc, #40]	; (80184e8 <vTaskNotifyGiveFromISR+0xdc>)
 80184be:	4087      	lsls	r7, r0
 80184c0:	4a0a      	ldr	r2, [pc, #40]	; (80184ec <vTaskNotifyGiveFromISR+0xe0>)
 80184c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80184c6:	9901      	ldr	r1, [sp, #4]
 80184c8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80184cc:	681a      	ldr	r2, [r3, #0]
 80184ce:	4317      	orrs	r7, r2
 80184d0:	601f      	str	r7, [r3, #0]
 80184d2:	f7fe fa55 	bl	8016980 <vListInsertEnd>
 80184d6:	e7de      	b.n	8018496 <vTaskNotifyGiveFromISR+0x8a>
 80184d8:	20006774 	.word	0x20006774
 80184dc:	200067b0 	.word	0x200067b0
 80184e0:	200066d0 	.word	0x200066d0
 80184e4:	200067f4 	.word	0x200067f4
 80184e8:	2000677c 	.word	0x2000677c
 80184ec:	200066dc 	.word	0x200066dc

080184f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80184f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80184f2:	4c12      	ldr	r4, [pc, #72]	; (801853c <prvCheckForValidListAndQueue+0x4c>)
{
 80184f4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80184f6:	f000 fb0d 	bl	8018b14 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80184fa:	6825      	ldr	r5, [r4, #0]
 80184fc:	b125      	cbz	r5, 8018508 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80184fe:	b003      	add	sp, #12
 8018500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8018504:	f000 bb2c 	b.w	8018b60 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8018508:	4f0d      	ldr	r7, [pc, #52]	; (8018540 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801850a:	4e0e      	ldr	r6, [pc, #56]	; (8018544 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 801850c:	4638      	mov	r0, r7
 801850e:	f7fe fa27 	bl	8016960 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018512:	4630      	mov	r0, r6
 8018514:	f7fe fa24 	bl	8016960 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018518:	4a0b      	ldr	r2, [pc, #44]	; (8018548 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801851a:	9500      	str	r5, [sp, #0]
 801851c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801851e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018520:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8018522:	4a0a      	ldr	r2, [pc, #40]	; (801854c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018524:	4b0a      	ldr	r3, [pc, #40]	; (8018550 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8018526:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018528:	4a0a      	ldr	r2, [pc, #40]	; (8018554 <prvCheckForValidListAndQueue+0x64>)
 801852a:	f7fe fb35 	bl	8016b98 <xQueueGenericCreateStatic>
 801852e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8018530:	2800      	cmp	r0, #0
 8018532:	d0e4      	beq.n	80184fe <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018534:	4908      	ldr	r1, [pc, #32]	; (8018558 <prvCheckForValidListAndQueue+0x68>)
 8018536:	f7fe ff9d 	bl	8017474 <vQueueAddToRegistry>
 801853a:	e7e0      	b.n	80184fe <prvCheckForValidListAndQueue+0xe>
 801853c:	20006914 	.word	0x20006914
 8018540:	200068a0 	.word	0x200068a0
 8018544:	200068b4 	.word	0x200068b4
 8018548:	200067f8 	.word	0x200067f8
 801854c:	200067fc 	.word	0x200067fc
 8018550:	200068cc 	.word	0x200068cc
 8018554:	20006800 	.word	0x20006800
 8018558:	0802e6c4 	.word	0x0802e6c4

0801855c <xTimerCreateTimerTask>:
{
 801855c:	b530      	push	{r4, r5, lr}
 801855e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8018560:	f7ff ffc6 	bl	80184f0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8018564:	4b13      	ldr	r3, [pc, #76]	; (80185b4 <xTimerCreateTimerTask+0x58>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	b1cb      	cbz	r3, 801859e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801856a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801856c:	aa07      	add	r2, sp, #28
 801856e:	a906      	add	r1, sp, #24
 8018570:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018572:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018574:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018578:	f7e8 fe94 	bl	80012a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801857c:	4623      	mov	r3, r4
 801857e:	9a07      	ldr	r2, [sp, #28]
 8018580:	9500      	str	r5, [sp, #0]
 8018582:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8018586:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801858a:	490b      	ldr	r1, [pc, #44]	; (80185b8 <xTimerCreateTimerTask+0x5c>)
 801858c:	480b      	ldr	r0, [pc, #44]	; (80185bc <xTimerCreateTimerTask+0x60>)
 801858e:	f7ff f97d 	bl	801788c <xTaskCreateStatic>
 8018592:	4b0b      	ldr	r3, [pc, #44]	; (80185c0 <xTimerCreateTimerTask+0x64>)
 8018594:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8018596:	b110      	cbz	r0, 801859e <xTimerCreateTimerTask+0x42>
}
 8018598:	2001      	movs	r0, #1
 801859a:	b009      	add	sp, #36	; 0x24
 801859c:	bd30      	pop	{r4, r5, pc}
 801859e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80185a2:	b672      	cpsid	i
 80185a4:	f383 8811 	msr	BASEPRI, r3
 80185a8:	f3bf 8f6f 	isb	sy
 80185ac:	f3bf 8f4f 	dsb	sy
 80185b0:	b662      	cpsie	i
	configASSERT( xReturn );
 80185b2:	e7fe      	b.n	80185b2 <xTimerCreateTimerTask+0x56>
 80185b4:	20006914 	.word	0x20006914
 80185b8:	0802e6cc 	.word	0x0802e6cc
 80185bc:	080187bd 	.word	0x080187bd
 80185c0:	20006918 	.word	0x20006918

080185c4 <xTimerCreate>:
	{
 80185c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185c8:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80185ca:	2028      	movs	r0, #40	; 0x28
	{
 80185cc:	4688      	mov	r8, r1
 80185ce:	4615      	mov	r5, r2
 80185d0:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80185d2:	f000 fc09 	bl	8018de8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80185d6:	4604      	mov	r4, r0
 80185d8:	b1b0      	cbz	r0, 8018608 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 80185da:	2300      	movs	r3, #0
 80185dc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80185e0:	f1b8 0f00 	cmp.w	r8, #0
 80185e4:	d013      	beq.n	801860e <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 80185e6:	f7ff ff83 	bl	80184f0 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80185ea:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185ec:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80185ee:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80185f0:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 80185f2:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80185f6:	f7fe f9bf 	bl	8016978 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80185fa:	b12d      	cbz	r5, 8018608 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80185fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8018600:	f043 0304 	orr.w	r3, r3, #4
 8018604:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8018608:	4620      	mov	r0, r4
 801860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801860e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018612:	b672      	cpsid	i
 8018614:	f383 8811 	msr	BASEPRI, r3
 8018618:	f3bf 8f6f 	isb	sy
 801861c:	f3bf 8f4f 	dsb	sy
 8018620:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8018622:	e7fe      	b.n	8018622 <xTimerCreate+0x5e>

08018624 <xTimerCreateStatic>:
	{
 8018624:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8018626:	2428      	movs	r4, #40	; 0x28
	{
 8018628:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 801862a:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 801862c:	9d05      	ldr	r5, [sp, #20]
 801862e:	2d28      	cmp	r5, #40	; 0x28
 8018630:	d00a      	beq.n	8018648 <xTimerCreateStatic+0x24>
 8018632:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018636:	b672      	cpsid	i
 8018638:	f383 8811 	msr	BASEPRI, r3
 801863c:	f3bf 8f6f 	isb	sy
 8018640:	f3bf 8f4f 	dsb	sy
 8018644:	b662      	cpsie	i
 8018646:	e7fe      	b.n	8018646 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018648:	4604      	mov	r4, r0
 801864a:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 801864c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801864e:	b318      	cbz	r0, 8018698 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018650:	2002      	movs	r0, #2
 8018652:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018654:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8018658:	b349      	cbz	r1, 80186ae <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 801865a:	9101      	str	r1, [sp, #4]
 801865c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018660:	f7ff ff46 	bl	80184f0 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8018664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8018666:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8018668:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 801866a:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801866c:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801866e:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8018670:	9b03      	ldr	r3, [sp, #12]
 8018672:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8018674:	4613      	mov	r3, r2
 8018676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018678:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801867a:	f7fe f97d 	bl	8016978 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801867e:	9a02      	ldr	r2, [sp, #8]
 8018680:	b13a      	cbz	r2, 8018692 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8018682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801868a:	f043 0304 	orr.w	r3, r3, #4
 801868e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8018692:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018694:	b007      	add	sp, #28
 8018696:	bd30      	pop	{r4, r5, pc}
 8018698:	f04f 0330 	mov.w	r3, #48	; 0x30
 801869c:	b672      	cpsid	i
 801869e:	f383 8811 	msr	BASEPRI, r3
 80186a2:	f3bf 8f6f 	isb	sy
 80186a6:	f3bf 8f4f 	dsb	sy
 80186aa:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 80186ac:	e7fe      	b.n	80186ac <xTimerCreateStatic+0x88>
 80186ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80186b2:	b672      	cpsid	i
 80186b4:	f383 8811 	msr	BASEPRI, r3
 80186b8:	f3bf 8f6f 	isb	sy
 80186bc:	f3bf 8f4f 	dsb	sy
 80186c0:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80186c2:	e7fe      	b.n	80186c2 <xTimerCreateStatic+0x9e>

080186c4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80186c4:	b1c8      	cbz	r0, 80186fa <xTimerGenericCommand+0x36>
{
 80186c6:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80186c8:	4d19      	ldr	r5, [pc, #100]	; (8018730 <xTimerGenericCommand+0x6c>)
{
 80186ca:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80186cc:	682c      	ldr	r4, [r5, #0]
 80186ce:	b18c      	cbz	r4, 80186f4 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80186d0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80186d2:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80186d4:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80186d8:	dc1a      	bgt.n	8018710 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80186da:	f7ff fd1d 	bl	8018118 <xTaskGetSchedulerState>
 80186de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80186e0:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80186e4:	d01d      	beq.n	8018722 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80186e6:	4669      	mov	r1, sp
 80186e8:	461a      	mov	r2, r3
 80186ea:	6828      	ldr	r0, [r5, #0]
 80186ec:	f7fe fade 	bl	8016cac <xQueueGenericSend>
}
 80186f0:	b005      	add	sp, #20
 80186f2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80186f4:	4620      	mov	r0, r4
}
 80186f6:	b005      	add	sp, #20
 80186f8:	bd30      	pop	{r4, r5, pc}
 80186fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80186fe:	b672      	cpsid	i
 8018700:	f383 8811 	msr	BASEPRI, r3
 8018704:	f3bf 8f6f 	isb	sy
 8018708:	f3bf 8f4f 	dsb	sy
 801870c:	b662      	cpsie	i
	configASSERT( xTimer );
 801870e:	e7fe      	b.n	801870e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018710:	469c      	mov	ip, r3
 8018712:	4669      	mov	r1, sp
 8018714:	2300      	movs	r3, #0
 8018716:	4620      	mov	r0, r4
 8018718:	4662      	mov	r2, ip
 801871a:	f7fe fbc7 	bl	8016eac <xQueueGenericSendFromISR>
}
 801871e:	b005      	add	sp, #20
 8018720:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018722:	9a08      	ldr	r2, [sp, #32]
 8018724:	4669      	mov	r1, sp
 8018726:	6828      	ldr	r0, [r5, #0]
 8018728:	f7fe fac0 	bl	8016cac <xQueueGenericSend>
 801872c:	e7e3      	b.n	80186f6 <xTimerGenericCommand+0x32>
 801872e:	bf00      	nop
 8018730:	20006914 	.word	0x20006914

08018734 <prvSwitchTimerLists>:
{
 8018734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018738:	4e1e      	ldr	r6, [pc, #120]	; (80187b4 <prvSwitchTimerLists+0x80>)
 801873a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801873c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018740:	e00d      	b.n	801875e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018742:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018744:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018746:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018748:	1d25      	adds	r5, r4, #4
 801874a:	4628      	mov	r0, r5
 801874c:	f7fe f940 	bl	80169d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018750:	6a23      	ldr	r3, [r4, #32]
 8018752:	4620      	mov	r0, r4
 8018754:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018756:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801875a:	075b      	lsls	r3, r3, #29
 801875c:	d40a      	bmi.n	8018774 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801875e:	6833      	ldr	r3, [r6, #0]
 8018760:	681a      	ldr	r2, [r3, #0]
 8018762:	2a00      	cmp	r2, #0
 8018764:	d1ed      	bne.n	8018742 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8018766:	4a14      	ldr	r2, [pc, #80]	; (80187b8 <prvSwitchTimerLists+0x84>)
 8018768:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801876a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 801876c:	6031      	str	r1, [r6, #0]
}
 801876e:	b002      	add	sp, #8
 8018770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018774:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018776:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018778:	2300      	movs	r3, #0
 801877a:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801877c:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801877e:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8018780:	42af      	cmp	r7, r5
 8018782:	d205      	bcs.n	8018790 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018784:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018786:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018788:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801878a:	f7fe f909 	bl	80169a0 <vListInsert>
 801878e:	e7e6      	b.n	801875e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018790:	4619      	mov	r1, r3
 8018792:	f8cd 8000 	str.w	r8, [sp]
 8018796:	f7ff ff95 	bl	80186c4 <xTimerGenericCommand>
				configASSERT( xResult );
 801879a:	2800      	cmp	r0, #0
 801879c:	d1df      	bne.n	801875e <prvSwitchTimerLists+0x2a>
 801879e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80187a2:	b672      	cpsid	i
 80187a4:	f383 8811 	msr	BASEPRI, r3
 80187a8:	f3bf 8f6f 	isb	sy
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	b662      	cpsie	i
 80187b2:	e7fe      	b.n	80187b2 <prvSwitchTimerLists+0x7e>
 80187b4:	200067f8 	.word	0x200067f8
 80187b8:	200067fc 	.word	0x200067fc

080187bc <prvTimerTask>:
{
 80187bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c0:	4e9a      	ldr	r6, [pc, #616]	; (8018a2c <prvTimerTask+0x270>)
 80187c2:	b087      	sub	sp, #28
 80187c4:	4d9a      	ldr	r5, [pc, #616]	; (8018a30 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 80187c6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80187ca:	4c9a      	ldr	r4, [pc, #616]	; (8018a34 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80187cc:	6833      	ldr	r3, [r6, #0]
 80187ce:	681f      	ldr	r7, [r3, #0]
 80187d0:	2f00      	cmp	r7, #0
 80187d2:	f000 80ac 	beq.w	801892e <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80187da:	f7ff fa01 	bl	8017be0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80187de:	f7ff fa07 	bl	8017bf0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80187e2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80187e4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80187e6:	4290      	cmp	r0, r2
 80187e8:	f0c0 80a9 	bcc.w	801893e <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80187ec:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 80187ee:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80187f0:	f200 80ca 	bhi.w	8018988 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 80187f4:	f7ff fb50 	bl	8017e98 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187f8:	6832      	ldr	r2, [r6, #0]
 80187fa:	68d2      	ldr	r2, [r2, #12]
 80187fc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018800:	f10b 0804 	add.w	r8, fp, #4
 8018804:	4640      	mov	r0, r8
 8018806:	f7fe f8e3 	bl	80169d0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801880a:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 801880e:	0743      	lsls	r3, r0, #29
 8018810:	f100 80ca 	bmi.w	80189a8 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018814:	f020 0001 	bic.w	r0, r0, #1
 8018818:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801881c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8018820:	4658      	mov	r0, fp
 8018822:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018824:	2200      	movs	r2, #0
 8018826:	a902      	add	r1, sp, #8
 8018828:	6820      	ldr	r0, [r4, #0]
 801882a:	f7fe fc11 	bl	8017050 <xQueueReceive>
 801882e:	2800      	cmp	r0, #0
 8018830:	d0cc      	beq.n	80187cc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018832:	9b02      	ldr	r3, [sp, #8]
 8018834:	2b00      	cmp	r3, #0
 8018836:	db71      	blt.n	801891c <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018838:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	b113      	cbz	r3, 8018844 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801883e:	1d38      	adds	r0, r7, #4
 8018840:	f7fe f8c6 	bl	80169d0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8018844:	f7ff f9d4 	bl	8017bf0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8018848:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801884a:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 801884c:	4298      	cmp	r0, r3
 801884e:	d37d      	bcc.n	801894c <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8018850:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8018852:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8018856:	2b09      	cmp	r3, #9
 8018858:	d8e4      	bhi.n	8018824 <prvTimerTask+0x68>
 801885a:	e8df f003 	tbb	[pc, r3]
 801885e:	0505      	.short	0x0505
 8018860:	56394f05 	.word	0x56394f05
 8018864:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018868:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801886c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801886e:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018872:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018874:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018876:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801887a:	185a      	adds	r2, r3, r1
 801887c:	bf2c      	ite	cs
 801887e:	2001      	movcs	r0, #1
 8018880:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8018882:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018884:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8018886:	f200 8081 	bhi.w	801898c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801888a:	eba8 0303 	sub.w	r3, r8, r3
 801888e:	4299      	cmp	r1, r3
 8018890:	f200 80b5 	bhi.w	80189fe <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018894:	6a3b      	ldr	r3, [r7, #32]
 8018896:	4638      	mov	r0, r7
 8018898:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801889a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801889e:	0759      	lsls	r1, r3, #29
 80188a0:	d5c0      	bpl.n	8018824 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80188a2:	2200      	movs	r2, #0
 80188a4:	69bb      	ldr	r3, [r7, #24]
 80188a6:	4638      	mov	r0, r7
 80188a8:	9200      	str	r2, [sp, #0]
 80188aa:	9a03      	ldr	r2, [sp, #12]
 80188ac:	441a      	add	r2, r3
 80188ae:	2300      	movs	r3, #0
 80188b0:	4619      	mov	r1, r3
 80188b2:	f7ff ff07 	bl	80186c4 <xTimerGenericCommand>
							configASSERT( xResult );
 80188b6:	2800      	cmp	r0, #0
 80188b8:	d1b4      	bne.n	8018824 <prvTimerTask+0x68>
 80188ba:	f04f 0330 	mov.w	r3, #48	; 0x30
 80188be:	b672      	cpsid	i
 80188c0:	f383 8811 	msr	BASEPRI, r3
 80188c4:	f3bf 8f6f 	isb	sy
 80188c8:	f3bf 8f4f 	dsb	sy
 80188cc:	b662      	cpsie	i
 80188ce:	e7fe      	b.n	80188ce <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188d4:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188d6:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80188da:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80188dc:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	f000 8098 	beq.w	8018a16 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80188e6:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80188e8:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188ea:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80188ec:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80188ee:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80188f0:	d856      	bhi.n	80189a0 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80188f2:	4b51      	ldr	r3, [pc, #324]	; (8018a38 <prvTimerTask+0x27c>)
 80188f4:	6818      	ldr	r0, [r3, #0]
 80188f6:	f7fe f853 	bl	80169a0 <vListInsert>
	return xProcessTimerNow;
 80188fa:	e793      	b.n	8018824 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018900:	f023 0301 	bic.w	r3, r3, #1
 8018904:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8018908:	e78c      	b.n	8018824 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801890a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801890e:	079a      	lsls	r2, r3, #30
 8018910:	d56c      	bpl.n	80189ec <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018912:	f023 0301 	bic.w	r3, r3, #1
 8018916:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801891a:	e783      	b.n	8018824 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801891c:	9b03      	ldr	r3, [sp, #12]
 801891e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018922:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018924:	9b02      	ldr	r3, [sp, #8]
 8018926:	2b00      	cmp	r3, #0
 8018928:	f6ff af7c 	blt.w	8018824 <prvTimerTask+0x68>
 801892c:	e784      	b.n	8018838 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 801892e:	f7ff f957 	bl	8017be0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8018932:	f7ff f95d 	bl	8017bf0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8018936:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8018938:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801893a:	4282      	cmp	r2, r0
 801893c:	d909      	bls.n	8018952 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 801893e:	f7ff fef9 	bl	8018734 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8018942:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8018946:	f7ff faa7 	bl	8017e98 <xTaskResumeAll>
 801894a:	e76b      	b.n	8018824 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 801894c:	f7ff fef2 	bl	8018734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018950:	e77e      	b.n	8018850 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018952:	4b39      	ldr	r3, [pc, #228]	; (8018a38 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8018954:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018958:	681a      	ldr	r2, [r3, #0]
 801895a:	6812      	ldr	r2, [r2, #0]
 801895c:	fab2 f282 	clz	r2, r2
 8018960:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018962:	eba7 010a 	sub.w	r1, r7, sl
 8018966:	6820      	ldr	r0, [r4, #0]
 8018968:	f7fe fd9a 	bl	80174a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801896c:	f7ff fa94 	bl	8017e98 <xTaskResumeAll>
 8018970:	2800      	cmp	r0, #0
 8018972:	f47f af57 	bne.w	8018824 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8018976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801897a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 801897e:	f3bf 8f4f 	dsb	sy
 8018982:	f3bf 8f6f 	isb	sy
 8018986:	e74d      	b.n	8018824 <prvTimerTask+0x68>
 8018988:	2200      	movs	r2, #0
 801898a:	e7ea      	b.n	8018962 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801898c:	4543      	cmp	r3, r8
 801898e:	d902      	bls.n	8018996 <prvTimerTask+0x1da>
 8018990:	2800      	cmp	r0, #0
 8018992:	f43f af7f 	beq.w	8018894 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018996:	1d39      	adds	r1, r7, #4
 8018998:	6830      	ldr	r0, [r6, #0]
 801899a:	f7fe f801 	bl	80169a0 <vListInsert>
	return xProcessTimerNow;
 801899e:	e741      	b.n	8018824 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189a0:	6830      	ldr	r0, [r6, #0]
 80189a2:	f7fd fffd 	bl	80169a0 <vListInsert>
 80189a6:	e73d      	b.n	8018824 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80189a8:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80189ac:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80189b0:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80189b2:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80189b4:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80189b8:	d31c      	bcc.n	80189f4 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189ba:	ebaa 0307 	sub.w	r3, sl, r7
 80189be:	429a      	cmp	r2, r3
 80189c0:	d823      	bhi.n	8018a0a <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80189c2:	2300      	movs	r3, #0
 80189c4:	463a      	mov	r2, r7
 80189c6:	4658      	mov	r0, fp
 80189c8:	4619      	mov	r1, r3
 80189ca:	9300      	str	r3, [sp, #0]
 80189cc:	f7ff fe7a 	bl	80186c4 <xTimerGenericCommand>
			configASSERT( xResult );
 80189d0:	2800      	cmp	r0, #0
 80189d2:	f47f af23 	bne.w	801881c <prvTimerTask+0x60>
 80189d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80189da:	b672      	cpsid	i
 80189dc:	f383 8811 	msr	BASEPRI, r3
 80189e0:	f3bf 8f6f 	isb	sy
 80189e4:	f3bf 8f4f 	dsb	sy
 80189e8:	b662      	cpsie	i
 80189ea:	e7fe      	b.n	80189ea <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 80189ec:	4638      	mov	r0, r7
 80189ee:	f000 fa97 	bl	8018f20 <vPortFree>
 80189f2:	e717      	b.n	8018824 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80189f4:	4641      	mov	r1, r8
 80189f6:	6830      	ldr	r0, [r6, #0]
 80189f8:	f7fd ffd2 	bl	80169a0 <vListInsert>
	return xProcessTimerNow;
 80189fc:	e70e      	b.n	801881c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80189fe:	4b0e      	ldr	r3, [pc, #56]	; (8018a38 <prvTimerTask+0x27c>)
 8018a00:	1d39      	adds	r1, r7, #4
 8018a02:	6818      	ldr	r0, [r3, #0]
 8018a04:	f7fd ffcc 	bl	80169a0 <vListInsert>
	return xProcessTimerNow;
 8018a08:	e70c      	b.n	8018824 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018a0a:	4b0b      	ldr	r3, [pc, #44]	; (8018a38 <prvTimerTask+0x27c>)
 8018a0c:	4641      	mov	r1, r8
 8018a0e:	6818      	ldr	r0, [r3, #0]
 8018a10:	f7fd ffc6 	bl	80169a0 <vListInsert>
	return xProcessTimerNow;
 8018a14:	e702      	b.n	801881c <prvTimerTask+0x60>
 8018a16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a1a:	b672      	cpsid	i
 8018a1c:	f383 8811 	msr	BASEPRI, r3
 8018a20:	f3bf 8f6f 	isb	sy
 8018a24:	f3bf 8f4f 	dsb	sy
 8018a28:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018a2a:	e7fe      	b.n	8018a2a <prvTimerTask+0x26e>
 8018a2c:	200067f8 	.word	0x200067f8
 8018a30:	200068c8 	.word	0x200068c8
 8018a34:	20006914 	.word	0x20006914
 8018a38:	200067fc 	.word	0x200067fc

08018a3c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018a3c:	4808      	ldr	r0, [pc, #32]	; (8018a60 <prvPortStartFirstTask+0x24>)
 8018a3e:	6800      	ldr	r0, [r0, #0]
 8018a40:	6800      	ldr	r0, [r0, #0]
 8018a42:	f380 8808 	msr	MSP, r0
 8018a46:	f04f 0000 	mov.w	r0, #0
 8018a4a:	f380 8814 	msr	CONTROL, r0
 8018a4e:	b662      	cpsie	i
 8018a50:	b661      	cpsie	f
 8018a52:	f3bf 8f4f 	dsb	sy
 8018a56:	f3bf 8f6f 	isb	sy
 8018a5a:	df00      	svc	0
 8018a5c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018a5e:	0000      	.short	0x0000
 8018a60:	e000ed08 	.word	0xe000ed08

08018a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a74 <vPortEnableVFP+0x10>
 8018a68:	6801      	ldr	r1, [r0, #0]
 8018a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a6e:	6001      	str	r1, [r0, #0]
 8018a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a72:	0000      	.short	0x0000
 8018a74:	e000ed88 	.word	0xe000ed88

08018a78 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8018a78:	4b10      	ldr	r3, [pc, #64]	; (8018abc <prvTaskExitError+0x44>)
{
 8018a7a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8018a7c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8018a7e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8018a80:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8018a82:	3301      	adds	r3, #1
 8018a84:	d00a      	beq.n	8018a9c <prvTaskExitError+0x24>
 8018a86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018a8a:	b672      	cpsid	i
 8018a8c:	f383 8811 	msr	BASEPRI, r3
 8018a90:	f3bf 8f6f 	isb	sy
 8018a94:	f3bf 8f4f 	dsb	sy
 8018a98:	b662      	cpsie	i
 8018a9a:	e7fe      	b.n	8018a9a <prvTaskExitError+0x22>
 8018a9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018aa0:	b672      	cpsid	i
 8018aa2:	f383 8811 	msr	BASEPRI, r3
 8018aa6:	f3bf 8f6f 	isb	sy
 8018aaa:	f3bf 8f4f 	dsb	sy
 8018aae:	b662      	cpsie	i
	while( ulDummy == 0 )
 8018ab0:	9b01      	ldr	r3, [sp, #4]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d0fc      	beq.n	8018ab0 <prvTaskExitError+0x38>
}
 8018ab6:	b002      	add	sp, #8
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	20000424 	.word	0x20000424

08018ac0 <pxPortInitialiseStack>:
{
 8018ac0:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018ac2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018ac6:	4809      	ldr	r0, [pc, #36]	; (8018aec <pxPortInitialiseStack+0x2c>)
{
 8018ac8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018aca:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018ace:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018ad2:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8018ad6:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018ada:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ade:	f06f 0102 	mvn.w	r1, #2
}
 8018ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ae6:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8018aea:	4770      	bx	lr
 8018aec:	08018a79 	.word	0x08018a79

08018af0 <SVC_Handler>:
	__asm volatile (
 8018af0:	4b07      	ldr	r3, [pc, #28]	; (8018b10 <pxCurrentTCBConst2>)
 8018af2:	6819      	ldr	r1, [r3, #0]
 8018af4:	6808      	ldr	r0, [r1, #0]
 8018af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018afa:	f380 8809 	msr	PSP, r0
 8018afe:	f3bf 8f6f 	isb	sy
 8018b02:	f04f 0000 	mov.w	r0, #0
 8018b06:	f380 8811 	msr	BASEPRI, r0
 8018b0a:	4770      	bx	lr
 8018b0c:	f3af 8000 	nop.w

08018b10 <pxCurrentTCBConst2>:
 8018b10:	200066d0 	.word	0x200066d0

08018b14 <vPortEnterCritical>:
 8018b14:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b18:	b672      	cpsid	i
 8018b1a:	f383 8811 	msr	BASEPRI, r3
 8018b1e:	f3bf 8f6f 	isb	sy
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	b662      	cpsie	i
	uxCriticalNesting++;
 8018b28:	4a0c      	ldr	r2, [pc, #48]	; (8018b5c <vPortEnterCritical+0x48>)
 8018b2a:	6813      	ldr	r3, [r2, #0]
 8018b2c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8018b2e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8018b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8018b32:	d000      	beq.n	8018b36 <vPortEnterCritical+0x22>
}
 8018b34:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018b36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018b3a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8018b3e:	b2db      	uxtb	r3, r3
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d0f7      	beq.n	8018b34 <vPortEnterCritical+0x20>
 8018b44:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b48:	b672      	cpsid	i
 8018b4a:	f383 8811 	msr	BASEPRI, r3
 8018b4e:	f3bf 8f6f 	isb	sy
 8018b52:	f3bf 8f4f 	dsb	sy
 8018b56:	b662      	cpsie	i
 8018b58:	e7fe      	b.n	8018b58 <vPortEnterCritical+0x44>
 8018b5a:	bf00      	nop
 8018b5c:	20000424 	.word	0x20000424

08018b60 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8018b60:	4a09      	ldr	r2, [pc, #36]	; (8018b88 <vPortExitCritical+0x28>)
 8018b62:	6813      	ldr	r3, [r2, #0]
 8018b64:	b953      	cbnz	r3, 8018b7c <vPortExitCritical+0x1c>
 8018b66:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018b6a:	b672      	cpsid	i
 8018b6c:	f383 8811 	msr	BASEPRI, r3
 8018b70:	f3bf 8f6f 	isb	sy
 8018b74:	f3bf 8f4f 	dsb	sy
 8018b78:	b662      	cpsie	i
 8018b7a:	e7fe      	b.n	8018b7a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8018b7c:	3b01      	subs	r3, #1
 8018b7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018b80:	b90b      	cbnz	r3, 8018b86 <vPortExitCritical+0x26>
	__asm volatile
 8018b82:	f383 8811 	msr	BASEPRI, r3
}
 8018b86:	4770      	bx	lr
 8018b88:	20000424 	.word	0x20000424
 8018b8c:	ffffffff 	.word	0xffffffff

08018b90 <PendSV_Handler>:
	__asm volatile
 8018b90:	f3ef 8009 	mrs	r0, PSP
 8018b94:	f3bf 8f6f 	isb	sy
 8018b98:	4b15      	ldr	r3, [pc, #84]	; (8018bf0 <pxCurrentTCBConst>)
 8018b9a:	681a      	ldr	r2, [r3, #0]
 8018b9c:	f01e 0f10 	tst.w	lr, #16
 8018ba0:	bf08      	it	eq
 8018ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018baa:	6010      	str	r0, [r2, #0]
 8018bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018bb0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8018bb4:	b672      	cpsid	i
 8018bb6:	f380 8811 	msr	BASEPRI, r0
 8018bba:	f3bf 8f4f 	dsb	sy
 8018bbe:	f3bf 8f6f 	isb	sy
 8018bc2:	b662      	cpsie	i
 8018bc4:	f7ff f9ae 	bl	8017f24 <vTaskSwitchContext>
 8018bc8:	f04f 0000 	mov.w	r0, #0
 8018bcc:	f380 8811 	msr	BASEPRI, r0
 8018bd0:	bc09      	pop	{r0, r3}
 8018bd2:	6819      	ldr	r1, [r3, #0]
 8018bd4:	6808      	ldr	r0, [r1, #0]
 8018bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bda:	f01e 0f10 	tst.w	lr, #16
 8018bde:	bf08      	it	eq
 8018be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018be4:	f380 8809 	msr	PSP, r0
 8018be8:	f3bf 8f6f 	isb	sy
 8018bec:	4770      	bx	lr
 8018bee:	bf00      	nop

08018bf0 <pxCurrentTCBConst>:
 8018bf0:	200066d0 	.word	0x200066d0

08018bf4 <SysTick_Handler>:
{
 8018bf4:	b508      	push	{r3, lr}
	__asm volatile
 8018bf6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018bfa:	b672      	cpsid	i
 8018bfc:	f383 8811 	msr	BASEPRI, r3
 8018c00:	f3bf 8f6f 	isb	sy
 8018c04:	f3bf 8f4f 	dsb	sy
 8018c08:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8018c0a:	f7fe ffff 	bl	8017c0c <xTaskIncrementTick>
 8018c0e:	b128      	cbz	r0, 8018c1c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018c10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	f383 8811 	msr	BASEPRI, r3
}
 8018c22:	bd08      	pop	{r3, pc}

08018c24 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c24:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018c28:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c2a:	4b06      	ldr	r3, [pc, #24]	; (8018c44 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c2c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c2e:	4806      	ldr	r0, [pc, #24]	; (8018c48 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018c30:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c32:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	fba0 0303 	umull	r0, r3, r0, r3
 8018c3a:	099b      	lsrs	r3, r3, #6
 8018c3c:	3b01      	subs	r3, #1
 8018c3e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c40:	6111      	str	r1, [r2, #16]
}
 8018c42:	4770      	bx	lr
 8018c44:	20000298 	.word	0x20000298
 8018c48:	10624dd3 	.word	0x10624dd3

08018c4c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c4c:	4b30      	ldr	r3, [pc, #192]	; (8018d10 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c52:	4830      	ldr	r0, [pc, #192]	; (8018d14 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c54:	4930      	ldr	r1, [pc, #192]	; (8018d18 <xPortStartScheduler+0xcc>)
{
 8018c56:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c58:	781a      	ldrb	r2, [r3, #0]
{
 8018c5a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018c5c:	b2d2      	uxtb	r2, r2
 8018c5e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c60:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018c62:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c66:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018c68:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c70:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c74:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c7c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018c7e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c80:	d50f      	bpl.n	8018ca2 <xPortStartScheduler+0x56>
 8018c82:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c88:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c8a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018c8c:	005b      	lsls	r3, r3, #1
 8018c8e:	b2db      	uxtb	r3, r3
 8018c90:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018c94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c98:	061b      	lsls	r3, r3, #24
 8018c9a:	d4f3      	bmi.n	8018c84 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018c9c:	2903      	cmp	r1, #3
 8018c9e:	d00b      	beq.n	8018cb8 <xPortStartScheduler+0x6c>
 8018ca0:	6001      	str	r1, [r0, #0]
	__asm volatile
 8018ca2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018ca6:	b672      	cpsid	i
 8018ca8:	f383 8811 	msr	BASEPRI, r3
 8018cac:	f3bf 8f6f 	isb	sy
 8018cb0:	f3bf 8f4f 	dsb	sy
 8018cb4:	b662      	cpsie	i
 8018cb6:	e7fe      	b.n	8018cb6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cb8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018cba:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cbe:	4a14      	ldr	r2, [pc, #80]	; (8018d10 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018cc0:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cc4:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8018cc6:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018cc8:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018cca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018ccc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018cd4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018cd8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8018cdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018ce0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8018ce4:	f7ff ff9e 	bl	8018c24 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8018ce8:	4b0c      	ldr	r3, [pc, #48]	; (8018d1c <xPortStartScheduler+0xd0>)
 8018cea:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8018cec:	f7ff feba 	bl	8018a64 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018cf0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8018cf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018cf8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8018cfc:	f7ff fe9e 	bl	8018a3c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8018d00:	f7ff f910 	bl	8017f24 <vTaskSwitchContext>
}
 8018d04:	4628      	mov	r0, r5
	prvTaskExitError();
 8018d06:	f7ff feb7 	bl	8018a78 <prvTaskExitError>
}
 8018d0a:	b003      	add	sp, #12
 8018d0c:	bd30      	pop	{r4, r5, pc}
 8018d0e:	bf00      	nop
 8018d10:	e000e400 	.word	0xe000e400
 8018d14:	20006920 	.word	0x20006920
 8018d18:	2000691c 	.word	0x2000691c
 8018d1c:	20000424 	.word	0x20000424

08018d20 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018d20:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018d24:	2b0f      	cmp	r3, #15
 8018d26:	d910      	bls.n	8018d4a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d28:	4913      	ldr	r1, [pc, #76]	; (8018d78 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d2a:	4a14      	ldr	r2, [pc, #80]	; (8018d7c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d2c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018d2e:	7812      	ldrb	r2, [r2, #0]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d90a      	bls.n	8018d4a <vPortValidateInterruptPriority+0x2a>
 8018d34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018d38:	b672      	cpsid	i
 8018d3a:	f383 8811 	msr	BASEPRI, r3
 8018d3e:	f3bf 8f6f 	isb	sy
 8018d42:	f3bf 8f4f 	dsb	sy
 8018d46:	b662      	cpsie	i
 8018d48:	e7fe      	b.n	8018d48 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018d4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8018d4e:	4a0c      	ldr	r2, [pc, #48]	; (8018d80 <vPortValidateInterruptPriority+0x60>)
 8018d50:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8018d54:	6812      	ldr	r2, [r2, #0]
 8018d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018d5a:	4293      	cmp	r3, r2
 8018d5c:	d90a      	bls.n	8018d74 <vPortValidateInterruptPriority+0x54>
 8018d5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018d62:	b672      	cpsid	i
 8018d64:	f383 8811 	msr	BASEPRI, r3
 8018d68:	f3bf 8f6f 	isb	sy
 8018d6c:	f3bf 8f4f 	dsb	sy
 8018d70:	b662      	cpsie	i
 8018d72:	e7fe      	b.n	8018d72 <vPortValidateInterruptPriority+0x52>
	}
 8018d74:	4770      	bx	lr
 8018d76:	bf00      	nop
 8018d78:	e000e3f0 	.word	0xe000e3f0
 8018d7c:	2000691c 	.word	0x2000691c
 8018d80:	20006920 	.word	0x20006920

08018d84 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d84:	4b16      	ldr	r3, [pc, #88]	; (8018de0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8018d86:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018d88:	461a      	mov	r2, r3
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4283      	cmp	r3, r0
 8018d8e:	d3fb      	bcc.n	8018d88 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018d90:	6851      	ldr	r1, [r2, #4]
 8018d92:	eb02 0c01 	add.w	ip, r2, r1
 8018d96:	4560      	cmp	r0, ip
 8018d98:	d00b      	beq.n	8018db2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018d9a:	6841      	ldr	r1, [r0, #4]
 8018d9c:	eb00 0c01 	add.w	ip, r0, r1
 8018da0:	4563      	cmp	r3, ip
 8018da2:	d00e      	beq.n	8018dc2 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018da4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018da6:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018da8:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018dac:	bf18      	it	ne
 8018dae:	6010      	strne	r0, [r2, #0]
}
 8018db0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018db2:	6844      	ldr	r4, [r0, #4]
 8018db4:	4610      	mov	r0, r2
 8018db6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018db8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018dbc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018dbe:	4563      	cmp	r3, ip
 8018dc0:	d1f0      	bne.n	8018da4 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018dc2:	4c08      	ldr	r4, [pc, #32]	; (8018de4 <prvInsertBlockIntoFreeList+0x60>)
 8018dc4:	6824      	ldr	r4, [r4, #0]
 8018dc6:	42a3      	cmp	r3, r4
 8018dc8:	d0ec      	beq.n	8018da4 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 8018dca:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018dd0:	4421      	add	r1, r4
}
 8018dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018dd6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018dda:	bf18      	it	ne
 8018ddc:	6010      	strne	r0, [r2, #0]
}
 8018dde:	4770      	bx	lr
 8018de0:	2001e934 	.word	0x2001e934
 8018de4:	20006924 	.word	0x20006924

08018de8 <pvPortMalloc>:
{
 8018de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8018dee:	f7fe fef7 	bl	8017be0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8018df2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8018f1c <pvPortMalloc+0x134>
 8018df6:	f8dc 3000 	ldr.w	r3, [ip]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d05d      	beq.n	8018eba <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018dfe:	4b42      	ldr	r3, [pc, #264]	; (8018f08 <pvPortMalloc+0x120>)
 8018e00:	681d      	ldr	r5, [r3, #0]
 8018e02:	422c      	tst	r4, r5
 8018e04:	d130      	bne.n	8018e68 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8018e06:	b37c      	cbz	r4, 8018e68 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e08:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8018e0a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e0e:	d002      	beq.n	8018e16 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e10:	f021 0107 	bic.w	r1, r1, #7
 8018e14:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018e16:	b339      	cbz	r1, 8018e68 <pvPortMalloc+0x80>
 8018e18:	4f3c      	ldr	r7, [pc, #240]	; (8018f0c <pvPortMalloc+0x124>)
 8018e1a:	683e      	ldr	r6, [r7, #0]
 8018e1c:	428e      	cmp	r6, r1
 8018e1e:	d323      	bcc.n	8018e68 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8018e20:	483b      	ldr	r0, [pc, #236]	; (8018f10 <pvPortMalloc+0x128>)
 8018e22:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e24:	e003      	b.n	8018e2e <pvPortMalloc+0x46>
 8018e26:	6823      	ldr	r3, [r4, #0]
 8018e28:	b123      	cbz	r3, 8018e34 <pvPortMalloc+0x4c>
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	461c      	mov	r4, r3
 8018e2e:	6862      	ldr	r2, [r4, #4]
 8018e30:	428a      	cmp	r2, r1
 8018e32:	d3f8      	bcc.n	8018e26 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8018e34:	f8dc 3000 	ldr.w	r3, [ip]
 8018e38:	42a3      	cmp	r3, r4
 8018e3a:	d015      	beq.n	8018e68 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018e3c:	6803      	ldr	r3, [r0, #0]
 8018e3e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018e42:	6823      	ldr	r3, [r4, #0]
 8018e44:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018e46:	1a53      	subs	r3, r2, r1
 8018e48:	2b10      	cmp	r3, #16
 8018e4a:	d91b      	bls.n	8018e84 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018e4c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e4e:	0742      	lsls	r2, r0, #29
 8018e50:	d013      	beq.n	8018e7a <pvPortMalloc+0x92>
 8018e52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018e56:	b672      	cpsid	i
 8018e58:	f383 8811 	msr	BASEPRI, r3
 8018e5c:	f3bf 8f6f 	isb	sy
 8018e60:	f3bf 8f4f 	dsb	sy
 8018e64:	b662      	cpsie	i
 8018e66:	e7fe      	b.n	8018e66 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8018e68:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8018e6c:	f7ff f814 	bl	8017e98 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8018e70:	f7e8 fa06 	bl	8001280 <vApplicationMallocFailedHook>
}
 8018e74:	4640      	mov	r0, r8
 8018e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018e7a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018e7c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018e7e:	f7ff ff81 	bl	8018d84 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e82:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e84:	4b23      	ldr	r3, [pc, #140]	; (8018f14 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e86:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018e88:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e8a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018e8c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018e8e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018e90:	bf38      	it	cc
 8018e92:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8018e94:	2300      	movs	r3, #0
 8018e96:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8018e9a:	f7fe fffd 	bl	8017e98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e9e:	f018 0f07 	tst.w	r8, #7
 8018ea2:	d0e7      	beq.n	8018e74 <pvPortMalloc+0x8c>
 8018ea4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018ea8:	b672      	cpsid	i
 8018eaa:	f383 8811 	msr	BASEPRI, r3
 8018eae:	f3bf 8f6f 	isb	sy
 8018eb2:	f3bf 8f4f 	dsb	sy
 8018eb6:	b662      	cpsie	i
 8018eb8:	e7fe      	b.n	8018eb8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8018eba:	4b17      	ldr	r3, [pc, #92]	; (8018f18 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018ebc:	075d      	lsls	r5, r3, #29
 8018ebe:	d11b      	bne.n	8018ef8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ec0:	461a      	mov	r2, r3
 8018ec2:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018ec6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8018ec8:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8018eca:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ecc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ed0:	f023 0307 	bic.w	r3, r3, #7
}
 8018ed4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ed6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8018ed8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8018edc:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018ee0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018ee4:	4b0a      	ldr	r3, [pc, #40]	; (8018f10 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8018ee6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018eea:	4b0a      	ldr	r3, [pc, #40]	; (8018f14 <pvPortMalloc+0x12c>)
 8018eec:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018eee:	4b07      	ldr	r3, [pc, #28]	; (8018f0c <pvPortMalloc+0x124>)
 8018ef0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018ef2:	4b05      	ldr	r3, [pc, #20]	; (8018f08 <pvPortMalloc+0x120>)
 8018ef4:	601e      	str	r6, [r3, #0]
}
 8018ef6:	e784      	b.n	8018e02 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018ef8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018efa:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8018efe:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018f02:	4610      	mov	r0, r2
 8018f04:	e7e0      	b.n	8018ec8 <pvPortMalloc+0xe0>
 8018f06:	bf00      	nop
 8018f08:	2001e928 	.word	0x2001e928
 8018f0c:	2001e92c 	.word	0x2001e92c
 8018f10:	2001e934 	.word	0x2001e934
 8018f14:	2001e930 	.word	0x2001e930
 8018f18:	20006928 	.word	0x20006928
 8018f1c:	20006924 	.word	0x20006924

08018f20 <vPortFree>:
	if( pv != NULL )
 8018f20:	b1f0      	cbz	r0, 8018f60 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018f22:	4a1c      	ldr	r2, [pc, #112]	; (8018f94 <vPortFree+0x74>)
 8018f24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f28:	6812      	ldr	r2, [r2, #0]
 8018f2a:	4213      	tst	r3, r2
 8018f2c:	d00d      	beq.n	8018f4a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018f2e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8018f32:	b1b1      	cbz	r1, 8018f62 <vPortFree+0x42>
 8018f34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018f38:	b672      	cpsid	i
 8018f3a:	f383 8811 	msr	BASEPRI, r3
 8018f3e:	f3bf 8f6f 	isb	sy
 8018f42:	f3bf 8f4f 	dsb	sy
 8018f46:	b662      	cpsie	i
 8018f48:	e7fe      	b.n	8018f48 <vPortFree+0x28>
 8018f4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8018f4e:	b672      	cpsid	i
 8018f50:	f383 8811 	msr	BASEPRI, r3
 8018f54:	f3bf 8f6f 	isb	sy
 8018f58:	f3bf 8f4f 	dsb	sy
 8018f5c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018f5e:	e7fe      	b.n	8018f5e <vPortFree+0x3e>
 8018f60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018f62:	ea23 0302 	bic.w	r3, r3, r2
{
 8018f66:	b500      	push	{lr}
 8018f68:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018f6a:	f840 3c04 	str.w	r3, [r0, #-4]
 8018f6e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8018f70:	f7fe fe36 	bl	8017be0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f74:	4a08      	ldr	r2, [pc, #32]	; (8018f98 <vPortFree+0x78>)
 8018f76:	9801      	ldr	r0, [sp, #4]
 8018f78:	6811      	ldr	r1, [r2, #0]
 8018f7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f7e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f80:	440b      	add	r3, r1
 8018f82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f84:	f7ff fefe 	bl	8018d84 <prvInsertBlockIntoFreeList>
}
 8018f88:	b003      	add	sp, #12
 8018f8a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8018f8e:	f7fe bf83 	b.w	8017e98 <xTaskResumeAll>
 8018f92:	bf00      	nop
 8018f94:	2001e928 	.word	0x2001e928
 8018f98:	2001e92c 	.word	0x2001e92c

08018f9c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8018f9c:	f003 bb10 	b.w	801c5c0 <pbuf_free>

08018fa0 <tcpip_thread>:
{
 8018fa0:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8018fa2:	4839      	ldr	r0, [pc, #228]	; (8019088 <tcpip_thread+0xe8>)
{
 8018fa4:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8018fa6:	f00b feff 	bl	8024da8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018faa:	4b38      	ldr	r3, [pc, #224]	; (801908c <tcpip_thread+0xec>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	b113      	cbz	r3, 8018fb6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8018fb0:	4a37      	ldr	r2, [pc, #220]	; (8019090 <tcpip_thread+0xf0>)
 8018fb2:	6810      	ldr	r0, [r2, #0]
 8018fb4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018fb6:	4d34      	ldr	r5, [pc, #208]	; (8019088 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018fb8:	4e36      	ldr	r6, [pc, #216]	; (8019094 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018fba:	4f37      	ldr	r7, [pc, #220]	; (8019098 <tcpip_thread+0xf8>)
 8018fbc:	e010      	b.n	8018fe0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8018fbe:	b168      	cbz	r0, 8018fdc <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8018fc0:	4628      	mov	r0, r5
 8018fc2:	f00b fef7 	bl	8024db4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8018fc6:	4622      	mov	r2, r4
 8018fc8:	a901      	add	r1, sp, #4
 8018fca:	4630      	mov	r0, r6
 8018fcc:	f00b fea8 	bl	8024d20 <sys_arch_mbox_fetch>
 8018fd0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8018fd2:	4628      	mov	r0, r5
 8018fd4:	f00b fee8 	bl	8024da8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018fd8:	3401      	adds	r4, #1
 8018fda:	d111      	bne.n	8019000 <tcpip_thread+0x60>
    sys_check_timeouts();
 8018fdc:	f008 f85c 	bl	8021098 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8018fe0:	f008 f882 	bl	80210e8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018fe4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8018fe6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8018fe8:	d1e9      	bne.n	8018fbe <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8018fea:	4628      	mov	r0, r5
 8018fec:	f00b fee2 	bl	8024db4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	a901      	add	r1, sp, #4
 8018ff4:	4630      	mov	r0, r6
 8018ff6:	f00b fe93 	bl	8024d20 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018ffa:	4628      	mov	r0, r5
 8018ffc:	f00b fed4 	bl	8024da8 <sys_mutex_lock>
    if (msg == NULL) {
 8019000:	9c01      	ldr	r4, [sp, #4]
 8019002:	b37c      	cbz	r4, 8019064 <tcpip_thread+0xc4>
  switch (msg->type) {
 8019004:	7823      	ldrb	r3, [r4, #0]
 8019006:	2b04      	cmp	r3, #4
 8019008:	d837      	bhi.n	801907a <tcpip_thread+0xda>
 801900a:	e8df f003 	tbb	[pc, r3]
 801900e:	1821      	.short	0x1821
 8019010:	070f      	.short	0x070f
 8019012:	03          	.byte	0x03
 8019013:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019014:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8019018:	4798      	blx	r3
      break;
 801901a:	e7e1      	b.n	8018fe0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801901c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8019020:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019022:	4621      	mov	r1, r4
 8019024:	2009      	movs	r0, #9
 8019026:	f002 fdb3 	bl	801bb90 <memp_free>
      break;
 801902a:	e7d9      	b.n	8018fe0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801902c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8019030:	f008 f814 	bl	802105c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019034:	4621      	mov	r1, r4
 8019036:	2009      	movs	r0, #9
 8019038:	f002 fdaa 	bl	801bb90 <memp_free>
      break;
 801903c:	e7d0      	b.n	8018fe0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801903e:	1d20      	adds	r0, r4, #4
 8019040:	c807      	ldmia	r0, {r0, r1, r2}
 8019042:	f007 ffed 	bl	8021020 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019046:	4621      	mov	r1, r4
 8019048:	2009      	movs	r0, #9
 801904a:	f002 fda1 	bl	801bb90 <memp_free>
      break;
 801904e:	e7c7      	b.n	8018fe0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8019050:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8019054:	6860      	ldr	r0, [r4, #4]
 8019056:	4798      	blx	r3
 8019058:	b958      	cbnz	r0, 8019072 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801905a:	4621      	mov	r1, r4
 801905c:	200a      	movs	r0, #10
 801905e:	f002 fd97 	bl	801bb90 <memp_free>
      break;
 8019062:	e7bd      	b.n	8018fe0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019064:	463b      	mov	r3, r7
 8019066:	2291      	movs	r2, #145	; 0x91
 8019068:	490c      	ldr	r1, [pc, #48]	; (801909c <tcpip_thread+0xfc>)
 801906a:	480d      	ldr	r0, [pc, #52]	; (80190a0 <tcpip_thread+0x100>)
 801906c:	f00d fb72 	bl	8026754 <iprintf>
      continue;
 8019070:	e7b6      	b.n	8018fe0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8019072:	6860      	ldr	r0, [r4, #4]
 8019074:	f003 faa4 	bl	801c5c0 <pbuf_free>
 8019078:	e7ef      	b.n	801905a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801907a:	463b      	mov	r3, r7
 801907c:	22cf      	movs	r2, #207	; 0xcf
 801907e:	4907      	ldr	r1, [pc, #28]	; (801909c <tcpip_thread+0xfc>)
 8019080:	4807      	ldr	r0, [pc, #28]	; (80190a0 <tcpip_thread+0x100>)
 8019082:	f00d fb67 	bl	8026754 <iprintf>
      break;
 8019086:	e7ab      	b.n	8018fe0 <tcpip_thread+0x40>
 8019088:	2001e93c 	.word	0x2001e93c
 801908c:	2001e940 	.word	0x2001e940
 8019090:	2001e944 	.word	0x2001e944
 8019094:	2001e948 	.word	0x2001e948
 8019098:	0802e6d4 	.word	0x0802e6d4
 801909c:	0802e704 	.word	0x0802e704
 80190a0:	0802b44c 	.word	0x0802b44c

080190a4 <tcpip_inpkt>:
{
 80190a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190a6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190a8:	4814      	ldr	r0, [pc, #80]	; (80190fc <tcpip_inpkt+0x58>)
{
 80190aa:	460e      	mov	r6, r1
 80190ac:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190ae:	f00b fe59 	bl	8024d64 <sys_mbox_valid>
 80190b2:	b188      	cbz	r0, 80190d8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80190b4:	22fe      	movs	r2, #254	; 0xfe
 80190b6:	4912      	ldr	r1, [pc, #72]	; (8019100 <tcpip_inpkt+0x5c>)
 80190b8:	200a      	movs	r0, #10
 80190ba:	f002 fd33 	bl	801bb24 <memp_malloc_fn>
  if (msg == NULL) {
 80190be:	4604      	mov	r4, r0
 80190c0:	b1c0      	cbz	r0, 80190f4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80190c2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80190c4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80190c6:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190c8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80190ca:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190cc:	480b      	ldr	r0, [pc, #44]	; (80190fc <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 80190ce:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80190d0:	f00b fe1c 	bl	8024d0c <sys_mbox_trypost>
 80190d4:	b938      	cbnz	r0, 80190e6 <tcpip_inpkt+0x42>
}
 80190d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80190d8:	4b09      	ldr	r3, [pc, #36]	; (8019100 <tcpip_inpkt+0x5c>)
 80190da:	22fc      	movs	r2, #252	; 0xfc
 80190dc:	4909      	ldr	r1, [pc, #36]	; (8019104 <tcpip_inpkt+0x60>)
 80190de:	480a      	ldr	r0, [pc, #40]	; (8019108 <tcpip_inpkt+0x64>)
 80190e0:	f00d fb38 	bl	8026754 <iprintf>
 80190e4:	e7e6      	b.n	80190b4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80190e6:	4621      	mov	r1, r4
 80190e8:	200a      	movs	r0, #10
 80190ea:	f002 fd51 	bl	801bb90 <memp_free>
    return ERR_MEM;
 80190ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80190f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80190f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80190f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190fa:	bf00      	nop
 80190fc:	2001e948 	.word	0x2001e948
 8019100:	0802e6d4 	.word	0x0802e6d4
 8019104:	0802e724 	.word	0x0802e724
 8019108:	0802b44c 	.word	0x0802b44c

0801910c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801910c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8019110:	f013 0f18 	tst.w	r3, #24
 8019114:	d002      	beq.n	801911c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019116:	4a03      	ldr	r2, [pc, #12]	; (8019124 <tcpip_input+0x18>)
 8019118:	f7ff bfc4 	b.w	80190a4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 801911c:	4a02      	ldr	r2, [pc, #8]	; (8019128 <tcpip_input+0x1c>)
 801911e:	f7ff bfc1 	b.w	80190a4 <tcpip_inpkt>
 8019122:	bf00      	nop
 8019124:	08024bcd 	.word	0x08024bcd
 8019128:	08023e29 	.word	0x08023e29

0801912c <tcpip_try_callback>:
{
 801912c:	b570      	push	{r4, r5, r6, lr}
 801912e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019130:	4814      	ldr	r0, [pc, #80]	; (8019184 <tcpip_try_callback+0x58>)
{
 8019132:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019134:	f00b fe16 	bl	8024d64 <sys_mbox_valid>
 8019138:	b188      	cbz	r0, 801915e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801913a:	f240 125f 	movw	r2, #351	; 0x15f
 801913e:	4912      	ldr	r1, [pc, #72]	; (8019188 <tcpip_try_callback+0x5c>)
 8019140:	2009      	movs	r0, #9
 8019142:	f002 fcef 	bl	801bb24 <memp_malloc_fn>
  if (msg == NULL) {
 8019146:	4604      	mov	r4, r0
 8019148:	b1c0      	cbz	r0, 801917c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801914a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801914c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801914e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019152:	480c      	ldr	r0, [pc, #48]	; (8019184 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8019154:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019156:	f00b fdd9 	bl	8024d0c <sys_mbox_trypost>
 801915a:	b940      	cbnz	r0, 801916e <tcpip_try_callback+0x42>
}
 801915c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801915e:	4b0a      	ldr	r3, [pc, #40]	; (8019188 <tcpip_try_callback+0x5c>)
 8019160:	f240 125d 	movw	r2, #349	; 0x15d
 8019164:	4909      	ldr	r1, [pc, #36]	; (801918c <tcpip_try_callback+0x60>)
 8019166:	480a      	ldr	r0, [pc, #40]	; (8019190 <tcpip_try_callback+0x64>)
 8019168:	f00d faf4 	bl	8026754 <iprintf>
 801916c:	e7e5      	b.n	801913a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801916e:	4621      	mov	r1, r4
 8019170:	2009      	movs	r0, #9
 8019172:	f002 fd0d 	bl	801bb90 <memp_free>
    return ERR_MEM;
 8019176:	f04f 30ff 	mov.w	r0, #4294967295
}
 801917a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 801917c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019180:	bd70      	pop	{r4, r5, r6, pc}
 8019182:	bf00      	nop
 8019184:	2001e948 	.word	0x2001e948
 8019188:	0802e6d4 	.word	0x0802e6d4
 801918c:	0802e724 	.word	0x0802e724
 8019190:	0802b44c 	.word	0x0802b44c

08019194 <tcpip_init>:
{
 8019194:	b530      	push	{r4, r5, lr}
 8019196:	b083      	sub	sp, #12
 8019198:	4605      	mov	r5, r0
 801919a:	460c      	mov	r4, r1
  lwip_init();
 801919c:	f001 ffae 	bl	801b0fc <lwip_init>
  tcpip_init_done = initfunc;
 80191a0:	4a15      	ldr	r2, [pc, #84]	; (80191f8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80191a2:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 80191a4:	4b15      	ldr	r3, [pc, #84]	; (80191fc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80191a6:	4816      	ldr	r0, [pc, #88]	; (8019200 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80191a8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80191aa:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80191ac:	f00b fd98 	bl	8024ce0 <sys_mbox_new>
 80191b0:	b968      	cbnz	r0, 80191ce <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80191b2:	4814      	ldr	r0, [pc, #80]	; (8019204 <tcpip_init+0x70>)
 80191b4:	f00b fde8 	bl	8024d88 <sys_mutex_new>
 80191b8:	b9a8      	cbnz	r0, 80191e6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80191ba:	2200      	movs	r2, #0
 80191bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80191c0:	4911      	ldr	r1, [pc, #68]	; (8019208 <tcpip_init+0x74>)
 80191c2:	9200      	str	r2, [sp, #0]
 80191c4:	4811      	ldr	r0, [pc, #68]	; (801920c <tcpip_init+0x78>)
 80191c6:	f00b fdf9 	bl	8024dbc <sys_thread_new>
}
 80191ca:	b003      	add	sp, #12
 80191cc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80191ce:	4b10      	ldr	r3, [pc, #64]	; (8019210 <tcpip_init+0x7c>)
 80191d0:	f240 2261 	movw	r2, #609	; 0x261
 80191d4:	490f      	ldr	r1, [pc, #60]	; (8019214 <tcpip_init+0x80>)
 80191d6:	4810      	ldr	r0, [pc, #64]	; (8019218 <tcpip_init+0x84>)
 80191d8:	f00d fabc 	bl	8026754 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80191dc:	4809      	ldr	r0, [pc, #36]	; (8019204 <tcpip_init+0x70>)
 80191de:	f00b fdd3 	bl	8024d88 <sys_mutex_new>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d0e9      	beq.n	80191ba <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80191e6:	4b0a      	ldr	r3, [pc, #40]	; (8019210 <tcpip_init+0x7c>)
 80191e8:	f240 2265 	movw	r2, #613	; 0x265
 80191ec:	490b      	ldr	r1, [pc, #44]	; (801921c <tcpip_init+0x88>)
 80191ee:	480a      	ldr	r0, [pc, #40]	; (8019218 <tcpip_init+0x84>)
 80191f0:	f00d fab0 	bl	8026754 <iprintf>
 80191f4:	e7e1      	b.n	80191ba <tcpip_init+0x26>
 80191f6:	bf00      	nop
 80191f8:	2001e940 	.word	0x2001e940
 80191fc:	2001e944 	.word	0x2001e944
 8019200:	2001e948 	.word	0x2001e948
 8019204:	2001e93c 	.word	0x2001e93c
 8019208:	08018fa1 	.word	0x08018fa1
 801920c:	0802e77c 	.word	0x0802e77c
 8019210:	0802e6d4 	.word	0x0802e6d4
 8019214:	0802e734 	.word	0x0802e734
 8019218:	0802b44c 	.word	0x0802b44c
 801921c:	0802e758 	.word	0x0802e758

08019220 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8019220:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8019222:	4801      	ldr	r0, [pc, #4]	; (8019228 <pbuf_free_callback+0x8>)
 8019224:	f7ff bf82 	b.w	801912c <tcpip_try_callback>
 8019228:	08018f9d 	.word	0x08018f9d

0801922c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801922c:	b1e8      	cbz	r0, 801926a <fs_open+0x3e>
{
 801922e:	b570      	push	{r4, r5, r6, lr}
 8019230:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8019232:	b1b9      	cbz	r1, 8019264 <fs_open+0x38>
 8019234:	4606      	mov	r6, r0
 8019236:	490e      	ldr	r1, [pc, #56]	; (8019270 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019238:	4c0e      	ldr	r4, [pc, #56]	; (8019274 <fs_open+0x48>)
 801923a:	e000      	b.n	801923e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 801923c:	6861      	ldr	r1, [r4, #4]
 801923e:	4628      	mov	r0, r5
 8019240:	f7e6 fffe 	bl	8000240 <strcmp>
 8019244:	b128      	cbz	r0, 8019252 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019246:	6824      	ldr	r4, [r4, #0]
 8019248:	2c00      	cmp	r4, #0
 801924a:	d1f7      	bne.n	801923c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 801924c:	f06f 0005 	mvn.w	r0, #5
}
 8019250:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8019252:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8019256:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8019258:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 801925a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 801925e:	7c23      	ldrb	r3, [r4, #16]
 8019260:	7433      	strb	r3, [r6, #16]
}
 8019262:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8019264:	f06f 000f 	mvn.w	r0, #15
}
 8019268:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801926a:	f06f 000f 	mvn.w	r0, #15
}
 801926e:	4770      	bx	lr
 8019270:	08039610 	.word	0x08039610
 8019274:	0804477c 	.word	0x0804477c

08019278 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8019278:	4770      	bx	lr
 801927a:	bf00      	nop

0801927c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 801927c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8019280:	1a10      	subs	r0, r2, r0
 8019282:	4770      	bx	lr

08019284 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8019284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8019288:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801928a:	b374      	cbz	r4, 80192ea <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801928c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8019290:	4617      	mov	r7, r2
 8019292:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8019296:	4605      	mov	r5, r0
 8019298:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801929c:	460e      	mov	r6, r1
 801929e:	4698      	mov	r8, r3
 80192a0:	fa1f fc8c 	uxth.w	ip, ip
 80192a4:	4594      	cmp	ip, r2
 80192a6:	bf28      	it	cs
 80192a8:	4694      	movcs	ip, r2
 80192aa:	4564      	cmp	r4, ip
 80192ac:	bf28      	it	cs
 80192ae:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80192b0:	4643      	mov	r3, r8
 80192b2:	4622      	mov	r2, r4
 80192b4:	4631      	mov	r1, r6
 80192b6:	4628      	mov	r0, r5
 80192b8:	f006 fd1a 	bl	801fcf0 <tcp_write>
    if (err == ERR_MEM) {
 80192bc:	1c43      	adds	r3, r0, #1
 80192be:	d007      	beq.n	80192d0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80192c0:	b970      	cbnz	r0, 80192e0 <http_write+0x5c>
 80192c2:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80192c4:	8b6b      	ldrh	r3, [r5, #26]
 80192c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80192ca:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 80192cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80192d0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80192d4:	b123      	cbz	r3, 80192e0 <http_write+0x5c>
 80192d6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 80192da:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80192dc:	2b08      	cmp	r3, #8
 80192de:	d901      	bls.n	80192e4 <http_write+0x60>
    *length = 0;
 80192e0:	2400      	movs	r4, #0
 80192e2:	e7ee      	b.n	80192c2 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 80192e4:	2c01      	cmp	r4, #1
 80192e6:	d8e3      	bhi.n	80192b0 <http_write+0x2c>
 80192e8:	e7fa      	b.n	80192e0 <http_write+0x5c>
    return ERR_OK;
 80192ea:	4620      	mov	r0, r4
}
 80192ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192f0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80192f0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 80192f2:	4b0e      	ldr	r3, [pc, #56]	; (801932c <http_get_404_file+0x3c>)
{
 80192f4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 80192f6:	4604      	mov	r4, r0
 80192f8:	4619      	mov	r1, r3
  *uri = "/404.html";
 80192fa:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 80192fc:	f7ff ff96 	bl	801922c <fs_open>
  if (err != ERR_OK) {
 8019300:	b908      	cbnz	r0, 8019306 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8019302:	4620      	mov	r0, r4
 8019304:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8019306:	490a      	ldr	r1, [pc, #40]	; (8019330 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8019308:	4620      	mov	r0, r4
    *uri = "/404.htm";
 801930a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 801930c:	f7ff ff8e 	bl	801922c <fs_open>
    if (err != ERR_OK) {
 8019310:	2800      	cmp	r0, #0
 8019312:	d0f6      	beq.n	8019302 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8019314:	4907      	ldr	r1, [pc, #28]	; (8019334 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8019316:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8019318:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 801931a:	f7ff ff87 	bl	801922c <fs_open>
      if (err != ERR_OK) {
 801931e:	2800      	cmp	r0, #0
 8019320:	d0ef      	beq.n	8019302 <http_get_404_file+0x12>
        *uri = NULL;
 8019322:	2300      	movs	r3, #0
        return NULL;
 8019324:	461c      	mov	r4, r3
        *uri = NULL;
 8019326:	602b      	str	r3, [r5, #0]
        return NULL;
 8019328:	e7eb      	b.n	8019302 <http_get_404_file+0x12>
 801932a:	bf00      	nop
 801932c:	08044790 	.word	0x08044790
 8019330:	0804479c 	.word	0x0804479c
 8019334:	080447a8 	.word	0x080447a8

08019338 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8019338:	bb82      	cbnz	r2, 801939c <http_accept+0x64>
{
 801933a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 801933c:	fab1 f581 	clz	r5, r1
 8019340:	460c      	mov	r4, r1
 8019342:	096d      	lsrs	r5, r5, #5
 8019344:	b339      	cbz	r1, 8019396 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8019346:	2101      	movs	r1, #1
 8019348:	4620      	mov	r0, r4
 801934a:	f003 fec3 	bl	801d0d4 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801934e:	2034      	movs	r0, #52	; 0x34
 8019350:	f002 fa46 	bl	801b7e0 <mem_malloc>
  if (ret != NULL) {
 8019354:	4606      	mov	r6, r0
 8019356:	b1d8      	cbz	r0, 8019390 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8019358:	2234      	movs	r2, #52	; 0x34
 801935a:	4629      	mov	r1, r5
 801935c:	f00c fa5c 	bl	8025818 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8019360:	4631      	mov	r1, r6
 8019362:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8019364:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8019366:	f003 feeb 	bl	801d140 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801936a:	4620      	mov	r0, r4
 801936c:	490d      	ldr	r1, [pc, #52]	; (80193a4 <http_accept+0x6c>)
 801936e:	f003 feeb 	bl	801d148 <tcp_recv>
  altcp_err(pcb, http_err);
 8019372:	4620      	mov	r0, r4
 8019374:	490c      	ldr	r1, [pc, #48]	; (80193a8 <http_accept+0x70>)
 8019376:	f003 ff1f 	bl	801d1b8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801937a:	2204      	movs	r2, #4
 801937c:	4620      	mov	r0, r4
 801937e:	490b      	ldr	r1, [pc, #44]	; (80193ac <http_accept+0x74>)
 8019380:	f003 ff3c 	bl	801d1fc <tcp_poll>
  altcp_sent(pcb, http_sent);
 8019384:	4620      	mov	r0, r4
 8019386:	490a      	ldr	r1, [pc, #40]	; (80193b0 <http_accept+0x78>)
 8019388:	f003 fefa 	bl	801d180 <tcp_sent>

  return ERR_OK;
 801938c:	4628      	mov	r0, r5
}
 801938e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8019390:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019394:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8019396:	f06f 0005 	mvn.w	r0, #5
}
 801939a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801939c:	f06f 0005 	mvn.w	r0, #5
}
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	0801a011 	.word	0x0801a011
 80193a8:	080198f9 	.word	0x080198f9
 80193ac:	08019fb9 	.word	0x08019fb9
 80193b0:	08019fa1 	.word	0x08019fa1

080193b4 <http_init_file>:
{
 80193b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b8:	b087      	sub	sp, #28
 80193ba:	4604      	mov	r4, r0
  if (file != NULL) {
 80193bc:	460e      	mov	r6, r1
{
 80193be:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80193c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80193c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 80193c8:	2900      	cmp	r1, #0
 80193ca:	f000 80aa 	beq.w	8019522 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80193ce:	680b      	ldr	r3, [r1, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f000 80ac 	beq.w	801952e <http_init_file+0x17a>
    if (tag_check) {
 80193d6:	2f00      	cmp	r7, #0
 80193d8:	d16f      	bne.n	80194ba <http_init_file+0x106>
    hs->handle = file;
 80193da:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80193dc:	2d00      	cmp	r5, #0
 80193de:	d04f      	beq.n	8019480 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 80193e0:	782b      	ldrb	r3, [r5, #0]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	f000 80c0 	beq.w	8019568 <http_init_file+0x1b4>
 80193e8:	4b61      	ldr	r3, [pc, #388]	; (8019570 <http_init_file+0x1bc>)
 80193ea:	2701      	movs	r7, #1
 80193ec:	9405      	str	r4, [sp, #20]
 80193ee:	462c      	mov	r4, r5
 80193f0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8019574 <http_init_file+0x1c0>
 80193f4:	4698      	mov	r8, r3
 80193f6:	9304      	str	r3, [sp, #16]
 80193f8:	e017      	b.n	801942a <http_init_file+0x76>
 80193fa:	2d0e      	cmp	r5, #14
      *pair = '\0';
 80193fc:	f04f 0300 	mov.w	r3, #0
 8019400:	bfcc      	ite	gt
 8019402:	2500      	movgt	r5, #0
 8019404:	2501      	movle	r5, #1
 8019406:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 801940a:	4620      	mov	r0, r4
 801940c:	213d      	movs	r1, #61	; 0x3d
 801940e:	f00d fc34 	bl	8026c7a <strchr>
    if (equals) {
 8019412:	b320      	cbz	r0, 801945e <http_init_file+0xaa>
      *equals = '\0';
 8019414:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019418:	f108 0804 	add.w	r8, r8, #4
 801941c:	3701      	adds	r7, #1
 801941e:	465c      	mov	r4, fp
      *equals = '\0';
 8019420:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8019424:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019428:	b30d      	cbz	r5, 801946e <http_init_file+0xba>
    pair = strchr(pair, '&');
 801942a:	4620      	mov	r0, r4
 801942c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801942e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8019432:	1e7d      	subs	r5, r7, #1
 8019434:	f00d fc21 	bl	8026c7a <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019438:	46ba      	mov	sl, r7
    if (pair) {
 801943a:	4683      	mov	fp, r0
 801943c:	2800      	cmp	r0, #0
 801943e:	d1dc      	bne.n	80193fa <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8019440:	4620      	mov	r0, r4
 8019442:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019444:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8019446:	f00d fc18 	bl	8026c7a <strchr>
      if (pair) {
 801944a:	2800      	cmp	r0, #0
 801944c:	d0dd      	beq.n	801940a <http_init_file+0x56>
        *pair = '\0';
 801944e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8019452:	213d      	movs	r1, #61	; 0x3d
 8019454:	4620      	mov	r0, r4
 8019456:	f00d fc10 	bl	8026c7a <strchr>
    if (equals) {
 801945a:	2800      	cmp	r0, #0
 801945c:	d1da      	bne.n	8019414 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801945e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8019462:	3701      	adds	r7, #1
 8019464:	f108 0804 	add.w	r8, r8, #4
 8019468:	465c      	mov	r4, fp
 801946a:	2d00      	cmp	r5, #0
 801946c:	d1dd      	bne.n	801942a <http_init_file+0x76>
 801946e:	4652      	mov	r2, sl
 8019470:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8019472:	9b04      	ldr	r3, [sp, #16]
 8019474:	4630      	mov	r0, r6
 8019476:	9903      	ldr	r1, [sp, #12]
 8019478:	9300      	str	r3, [sp, #0]
 801947a:	4b3e      	ldr	r3, [pc, #248]	; (8019574 <http_init_file+0x1c0>)
 801947c:	f7ef fb82 	bl	8008b84 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019480:	e9d6 3200 	ldrd	r3, r2, [r6]
 8019484:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8019486:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019488:	db5c      	blt.n	8019544 <http_init_file+0x190>
    hs->retries = 0;
 801948a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801948c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801948e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8019490:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8019494:	7c1b      	ldrb	r3, [r3, #16]
 8019496:	07d9      	lsls	r1, r3, #31
 8019498:	d526      	bpl.n	80194e8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801949a:	9b02      	ldr	r3, [sp, #8]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d132      	bne.n	8019506 <http_init_file+0x152>
  if (hs->keepalive) {
 80194a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80194a4:	b12b      	cbz	r3, 80194b2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 80194a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d054      	beq.n	8019556 <http_init_file+0x1a2>
      hs->keepalive = 0;
 80194ac:	2300      	movs	r3, #0
 80194ae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80194b2:	2000      	movs	r0, #0
 80194b4:	b007      	add	sp, #28
 80194b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80194ba:	f44f 7090 	mov.w	r0, #288	; 0x120
 80194be:	f002 f98f 	bl	801b7e0 <mem_malloc>
  if (ret != NULL) {
 80194c2:	4607      	mov	r7, r0
 80194c4:	2800      	cmp	r0, #0
 80194c6:	d088      	beq.n	80193da <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80194c8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80194cc:	2100      	movs	r1, #0
 80194ce:	f00c f9a3 	bl	8025818 <memset>
        ssi->parsed = file->data;
 80194d2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 80194d4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 80194d6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 80194d8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 80194dc:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 80194de:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 80194e0:	2d00      	cmp	r5, #0
 80194e2:	f47f af7d 	bne.w	80193e0 <http_init_file+0x2c>
 80194e6:	e7cb      	b.n	8019480 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 80194e8:	4b23      	ldr	r3, [pc, #140]	; (8019578 <http_init_file+0x1c4>)
 80194ea:	f640 1243 	movw	r2, #2371	; 0x943
 80194ee:	4923      	ldr	r1, [pc, #140]	; (801957c <http_init_file+0x1c8>)
 80194f0:	4823      	ldr	r0, [pc, #140]	; (8019580 <http_init_file+0x1cc>)
 80194f2:	f00d f92f 	bl	8026754 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80194f6:	9b02      	ldr	r3, [sp, #8]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d0d1      	beq.n	80194a0 <http_init_file+0xec>
 80194fc:	6963      	ldr	r3, [r4, #20]
 80194fe:	7c1b      	ldrb	r3, [r3, #16]
 8019500:	07db      	lsls	r3, r3, #31
 8019502:	d5cd      	bpl.n	80194a0 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8019504:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019506:	491f      	ldr	r1, [pc, #124]	; (8019584 <http_init_file+0x1d0>)
 8019508:	69a0      	ldr	r0, [r4, #24]
 801950a:	f001 f823 	bl	801a554 <lwip_strnstr>
      if (file_start != NULL) {
 801950e:	2800      	cmp	r0, #0
 8019510:	d0c6      	beq.n	80194a0 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8019512:	3004      	adds	r0, #4
 8019514:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8019516:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8019518:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801951a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801951c:	1a9b      	subs	r3, r3, r2
 801951e:	6263      	str	r3, [r4, #36]	; 0x24
 8019520:	e7be      	b.n	80194a0 <http_init_file+0xec>
    hs->file = NULL;
 8019522:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8019526:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8019528:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801952c:	e7b8      	b.n	80194a0 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801952e:	4b12      	ldr	r3, [pc, #72]	; (8019578 <http_init_file+0x1c4>)
 8019530:	f640 120b 	movw	r2, #2315	; 0x90b
 8019534:	4914      	ldr	r1, [pc, #80]	; (8019588 <http_init_file+0x1d4>)
 8019536:	4812      	ldr	r0, [pc, #72]	; (8019580 <http_init_file+0x1cc>)
 8019538:	f00d f90c 	bl	8026754 <iprintf>
    if (tag_check) {
 801953c:	2f00      	cmp	r7, #0
 801953e:	f43f af4c 	beq.w	80193da <http_init_file+0x26>
 8019542:	e7ba      	b.n	80194ba <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8019544:	f640 1234 	movw	r2, #2356	; 0x934
 8019548:	4b0b      	ldr	r3, [pc, #44]	; (8019578 <http_init_file+0x1c4>)
 801954a:	4910      	ldr	r1, [pc, #64]	; (801958c <http_init_file+0x1d8>)
 801954c:	480c      	ldr	r0, [pc, #48]	; (8019580 <http_init_file+0x1cc>)
 801954e:	f00d f901 	bl	8026754 <iprintf>
      hs->left = (u32_t)file->len;
 8019552:	6872      	ldr	r2, [r6, #4]
 8019554:	e799      	b.n	801948a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8019556:	6963      	ldr	r3, [r4, #20]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d0aa      	beq.n	80194b2 <http_init_file+0xfe>
 801955c:	7c1b      	ldrb	r3, [r3, #16]
 801955e:	f003 0303 	and.w	r3, r3, #3
 8019562:	2b01      	cmp	r3, #1
 8019564:	d1a5      	bne.n	80194b2 <http_init_file+0xfe>
 8019566:	e7a1      	b.n	80194ac <http_init_file+0xf8>
    return (0);
 8019568:	461a      	mov	r2, r3
 801956a:	4b01      	ldr	r3, [pc, #4]	; (8019570 <http_init_file+0x1bc>)
 801956c:	9304      	str	r3, [sp, #16]
 801956e:	e780      	b.n	8019472 <http_init_file+0xbe>
 8019570:	2001e94c 	.word	0x2001e94c
 8019574:	2001e98c 	.word	0x2001e98c
 8019578:	080447b4 	.word	0x080447b4
 801957c:	08044820 	.word	0x08044820
 8019580:	0802b44c 	.word	0x0802b44c
 8019584:	0802b6ac 	.word	0x0802b6ac
 8019588:	080447ec 	.word	0x080447ec
 801958c:	08044800 	.word	0x08044800

08019590 <http_find_file>:
{
 8019590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019594:	ed2d 8b02 	vpush	{d8}
 8019598:	b087      	sub	sp, #28
 801959a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801959c:	4608      	mov	r0, r1
 801959e:	460c      	mov	r4, r1
{
 80195a0:	4690      	mov	r8, r2
 80195a2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80195a4:	f7e6 fe56 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80195a8:	4606      	mov	r6, r0
 80195aa:	b148      	cbz	r0, 80195c0 <http_find_file+0x30>
 80195ac:	f100 39ff 	add.w	r9, r0, #4294967295
 80195b0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80195b4:	2b2f      	cmp	r3, #47	; 0x2f
 80195b6:	d06a      	beq.n	801968e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 80195b8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80195ba:	f04f 0900 	mov.w	r9, #0
 80195be:	e001      	b.n	80195c4 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 80195c0:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80195c2:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 80195c4:	213f      	movs	r1, #63	; 0x3f
 80195c6:	4620      	mov	r0, r4
 80195c8:	f00d fb57 	bl	8026c7a <strchr>
    if (params != NULL) {
 80195cc:	4606      	mov	r6, r0
 80195ce:	b118      	cbz	r0, 80195d8 <http_find_file+0x48>
      *params = '\0';
 80195d0:	2300      	movs	r3, #0
 80195d2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 80195d6:	9c05      	ldr	r4, [sp, #20]
 80195d8:	4621      	mov	r1, r4
 80195da:	4628      	mov	r0, r5
 80195dc:	f7ff fe26 	bl	801922c <fs_open>
    if (err == ERR_OK) {
 80195e0:	b9b0      	cbnz	r0, 8019610 <http_find_file+0x80>
    if (file != NULL) {
 80195e2:	b1e7      	cbz	r7, 801961e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80195e4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80195e8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80195ea:	f019 0908 	ands.w	r9, r9, #8
 80195ee:	d01d      	beq.n	801962c <http_find_file+0x9c>
        tag_check = 1;
 80195f0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80195f4:	4623      	mov	r3, r4
 80195f6:	4642      	mov	r2, r8
 80195f8:	4639      	mov	r1, r7
 80195fa:	4628      	mov	r0, r5
 80195fc:	9601      	str	r6, [sp, #4]
 80195fe:	f8cd 9000 	str.w	r9, [sp]
 8019602:	f7ff fed7 	bl	80193b4 <http_init_file>
}
 8019606:	b007      	add	sp, #28
 8019608:	ecbd 8b02 	vpop	{d8}
 801960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8019610:	a905      	add	r1, sp, #20
 8019612:	4628      	mov	r0, r5
 8019614:	f7ff fe6c 	bl	80192f0 <http_get_404_file>
 8019618:	4607      	mov	r7, r0
    if (file != NULL) {
 801961a:	2f00      	cmp	r7, #0
 801961c:	d1e2      	bne.n	80195e4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801961e:	a905      	add	r1, sp, #20
 8019620:	4628      	mov	r0, r5
 8019622:	f7ff fe65 	bl	80192f0 <http_get_404_file>
 8019626:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8019628:	9c05      	ldr	r4, [sp, #20]
 801962a:	e7e3      	b.n	80195f4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 801962c:	213f      	movs	r1, #63	; 0x3f
 801962e:	4620      	mov	r0, r4
 8019630:	f00d fb23 	bl	8026c7a <strchr>
    if (param != NULL) {
 8019634:	4682      	mov	sl, r0
 8019636:	b108      	cbz	r0, 801963c <http_find_file+0xac>
      *param = 0;
 8019638:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801963c:	212e      	movs	r1, #46	; 0x2e
 801963e:	4620      	mov	r0, r4
 8019640:	f00d fb1b 	bl	8026c7a <strchr>
 8019644:	4603      	mov	r3, r0
 8019646:	b138      	cbz	r0, 8019658 <http_find_file+0xc8>
 8019648:	1c58      	adds	r0, r3, #1
 801964a:	212e      	movs	r1, #46	; 0x2e
 801964c:	461c      	mov	r4, r3
 801964e:	f00d fb14 	bl	8026c7a <strchr>
 8019652:	4603      	mov	r3, r0
 8019654:	2800      	cmp	r0, #0
 8019656:	d1f7      	bne.n	8019648 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8019658:	4940      	ldr	r1, [pc, #256]	; (801975c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801965a:	4620      	mov	r0, r4
 801965c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801976c <http_find_file+0x1dc>
 8019660:	f000 ffa0 	bl	801a5a4 <lwip_stricmp>
 8019664:	b148      	cbz	r0, 801967a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8019666:	4b3e      	ldr	r3, [pc, #248]	; (8019760 <http_find_file+0x1d0>)
 8019668:	459b      	cmp	fp, r3
 801966a:	d008      	beq.n	801967e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801966c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8019670:	4620      	mov	r0, r4
 8019672:	f000 ff97 	bl	801a5a4 <lwip_stricmp>
 8019676:	2800      	cmp	r0, #0
 8019678:	d1f5      	bne.n	8019666 <http_find_file+0xd6>
        tag_check = 1;
 801967a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 801967e:	f1ba 0f00 	cmp.w	sl, #0
 8019682:	d0d1      	beq.n	8019628 <http_find_file+0x98>
      *param = '?';
 8019684:	233f      	movs	r3, #63	; 0x3f
 8019686:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801968a:	9c05      	ldr	r4, [sp, #20]
 801968c:	e7b2      	b.n	80195f4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801968e:	4b35      	ldr	r3, [pc, #212]	; (8019764 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019690:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8019692:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8019694:	d106      	bne.n	80196a4 <http_find_file+0x114>
 8019696:	f1a0 0001 	sub.w	r0, r0, #1
 801969a:	fab0 f080 	clz	r0, r0
 801969e:	0940      	lsrs	r0, r0, #5
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d057      	beq.n	8019754 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80196a4:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 80196a8:	bf28      	it	cs
 80196aa:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 80196ae:	2e01      	cmp	r6, #1
 80196b0:	d008      	beq.n	80196c4 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 80196b2:	464a      	mov	r2, r9
 80196b4:	4621      	mov	r1, r4
 80196b6:	482b      	ldr	r0, [pc, #172]	; (8019764 <http_find_file+0x1d4>)
 80196b8:	f00c f886 	bl	80257c8 <memcpy>
      http_uri_buf[copy_len] = 0;
 80196bc:	2300      	movs	r3, #0
 80196be:	9a02      	ldr	r2, [sp, #8]
 80196c0:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 80196c4:	462f      	mov	r7, r5
 80196c6:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 80196ca:	f8df a098 	ldr.w	sl, [pc, #152]	; 8019764 <http_find_file+0x1d4>
 80196ce:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 80196d2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 80196d4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 80196d6:	d012      	beq.n	80196fe <http_find_file+0x16e>
        if (len_left > 0) {
 80196d8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 80196dc:	d113      	bne.n	8019706 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 80196de:	4641      	mov	r1, r8
 80196e0:	4628      	mov	r0, r5
 80196e2:	f7ff fda3 	bl	801922c <fs_open>
      if (err == ERR_OK) {
 80196e6:	b338      	cbz	r0, 8019738 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80196e8:	f10b 0b01 	add.w	fp, fp, #1
 80196ec:	f1bb 0f05 	cmp.w	fp, #5
 80196f0:	d1ef      	bne.n	80196d2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 80196f2:	ee18 8a10 	vmov	r8, s16
 80196f6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 80196f8:	f04f 0900 	mov.w	r9, #0
 80196fc:	e762      	b.n	80195c4 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 80196fe:	4b1a      	ldr	r3, [pc, #104]	; (8019768 <http_find_file+0x1d8>)
 8019700:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8019704:	e7eb      	b.n	80196de <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019706:	4b18      	ldr	r3, [pc, #96]	; (8019768 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019708:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801970a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801970e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019710:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8019712:	4608      	mov	r0, r1
 8019714:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8019716:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801971a:	f7e6 fd9b 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801971e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019720:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8019722:	4282      	cmp	r2, r0
 8019724:	bf28      	it	cs
 8019726:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8019728:	4620      	mov	r0, r4
 801972a:	9203      	str	r2, [sp, #12]
 801972c:	f00c f84c 	bl	80257c8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8019730:	2300      	movs	r3, #0
 8019732:	9a03      	ldr	r2, [sp, #12]
 8019734:	54a3      	strb	r3, [r4, r2]
 8019736:	e7d2      	b.n	80196de <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8019738:	4a0b      	ldr	r2, [pc, #44]	; (8019768 <http_find_file+0x1d8>)
        uri = file_name;
 801973a:	4644      	mov	r4, r8
 801973c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8019740:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8019744:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8019746:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 801974a:	2d00      	cmp	r5, #0
 801974c:	f43f af3a 	beq.w	80195c4 <http_find_file+0x34>
  char *params = NULL;
 8019750:	4606      	mov	r6, r0
 8019752:	e74f      	b.n	80195f4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8019754:	462f      	mov	r7, r5
 8019756:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8019758:	4681      	mov	r9, r0
 801975a:	e733      	b.n	80195c4 <http_find_file+0x34>
 801975c:	08044874 	.word	0x08044874
 8019760:	08044ac0 	.word	0x08044ac0
 8019764:	2001e9cc 	.word	0x2001e9cc
 8019768:	08044ad0 	.word	0x08044ad0
 801976c:	08044ab0 	.word	0x08044ab0

08019770 <http_post_rxpbuf>:
{
 8019770:	b538      	push	{r3, r4, r5, lr}
 8019772:	4604      	mov	r4, r0
  if (p != NULL) {
 8019774:	b1c9      	cbz	r1, 80197aa <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8019776:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019778:	890a      	ldrh	r2, [r1, #8]
 801977a:	4293      	cmp	r3, r2
 801977c:	d31a      	bcc.n	80197b4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801977e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8019780:	4620      	mov	r0, r4
 8019782:	6323      	str	r3, [r4, #48]	; 0x30
 8019784:	f7ef fb0c 	bl	8008da0 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8019788:	b178      	cbz	r0, 80197aa <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801978a:	2300      	movs	r3, #0
 801978c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801978e:	490a      	ldr	r1, [pc, #40]	; (80197b8 <http_post_rxpbuf+0x48>)
 8019790:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019792:	4620      	mov	r0, r4
 8019794:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8019796:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8019798:	f7ef fb12 	bl	8008dc0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801979c:	462a      	mov	r2, r5
 801979e:	4620      	mov	r0, r4
 80197a0:	4905      	ldr	r1, [pc, #20]	; (80197b8 <http_post_rxpbuf+0x48>)
}
 80197a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80197a6:	f7ff bef3 	b.w	8019590 <http_find_file>
  if (hs->post_content_len_left == 0) {
 80197aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d0ee      	beq.n	801978e <http_post_rxpbuf+0x1e>
}
 80197b0:	2000      	movs	r0, #0
 80197b2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	e7e3      	b.n	8019780 <http_post_rxpbuf+0x10>
 80197b8:	2001e9cc 	.word	0x2001e9cc

080197bc <http_find_error_file>:
  if (error_nr == 501) {
 80197bc:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 80197c0:	4a17      	ldr	r2, [pc, #92]	; (8019820 <http_find_error_file+0x64>)
 80197c2:	4299      	cmp	r1, r3
 80197c4:	4b17      	ldr	r3, [pc, #92]	; (8019824 <http_find_error_file+0x68>)
 80197c6:	4918      	ldr	r1, [pc, #96]	; (8019828 <http_find_error_file+0x6c>)
{
 80197c8:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 80197ca:	4e18      	ldr	r6, [pc, #96]	; (801982c <http_find_error_file+0x70>)
 80197cc:	bf18      	it	ne
 80197ce:	461e      	movne	r6, r3
 80197d0:	4b17      	ldr	r3, [pc, #92]	; (8019830 <http_find_error_file+0x74>)
 80197d2:	bf18      	it	ne
 80197d4:	460b      	movne	r3, r1
{
 80197d6:	b084      	sub	sp, #16
 80197d8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197da:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 80197dc:	4d15      	ldr	r5, [pc, #84]	; (8019834 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197de:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 80197e0:	bf08      	it	eq
 80197e2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 80197e4:	f7ff fd22 	bl	801922c <fs_open>
 80197e8:	9b03      	ldr	r3, [sp, #12]
 80197ea:	b128      	cbz	r0, 80197f8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 80197ec:	4629      	mov	r1, r5
 80197ee:	4620      	mov	r0, r4
 80197f0:	f7ff fd1c 	bl	801922c <fs_open>
 80197f4:	b948      	cbnz	r0, 801980a <http_find_error_file+0x4e>
    uri = uri2;
 80197f6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 80197f8:	2200      	movs	r2, #0
 80197fa:	4621      	mov	r1, r4
 80197fc:	4620      	mov	r0, r4
 80197fe:	e9cd 2200 	strd	r2, r2, [sp]
 8019802:	f7ff fdd7 	bl	80193b4 <http_init_file>
}
 8019806:	b004      	add	sp, #16
 8019808:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801980a:	4631      	mov	r1, r6
 801980c:	4620      	mov	r0, r4
 801980e:	f7ff fd0d 	bl	801922c <fs_open>
 8019812:	b908      	cbnz	r0, 8019818 <http_find_error_file+0x5c>
    uri = uri3;
 8019814:	4633      	mov	r3, r6
 8019816:	e7ef      	b.n	80197f8 <http_find_error_file+0x3c>
    return ERR_ARG;
 8019818:	f06f 000f 	mvn.w	r0, #15
 801981c:	e7f3      	b.n	8019806 <http_find_error_file+0x4a>
 801981e:	bf00      	nop
 8019820:	08044858 	.word	0x08044858
 8019824:	08044870 	.word	0x08044870
 8019828:	08044888 	.word	0x08044888
 801982c:	0804484c 	.word	0x0804484c
 8019830:	08044864 	.word	0x08044864
 8019834:	0804487c 	.word	0x0804487c

08019838 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8019838:	b538      	push	{r3, r4, r5, lr}
 801983a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801983c:	460c      	mov	r4, r1
 801983e:	2900      	cmp	r1, #0
 8019840:	d041      	beq.n	80198c6 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8019842:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8019844:	bb83      	cbnz	r3, 80198a8 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8019846:	2100      	movs	r1, #0
 8019848:	4628      	mov	r0, r5
 801984a:	f003 fc79 	bl	801d140 <tcp_arg>
  altcp_recv(pcb, NULL);
 801984e:	2100      	movs	r1, #0
 8019850:	4628      	mov	r0, r5
 8019852:	f003 fc79 	bl	801d148 <tcp_recv>
  altcp_err(pcb, NULL);
 8019856:	2100      	movs	r1, #0
 8019858:	4628      	mov	r0, r5
 801985a:	f003 fcad 	bl	801d1b8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801985e:	2200      	movs	r2, #0
 8019860:	4628      	mov	r0, r5
 8019862:	4611      	mov	r1, r2
 8019864:	f003 fcca 	bl	801d1fc <tcp_poll>
  altcp_sent(pcb, NULL);
 8019868:	4628      	mov	r0, r5
 801986a:	2100      	movs	r1, #0
 801986c:	f003 fc88 	bl	801d180 <tcp_sent>
  if (hs->handle) {
 8019870:	6960      	ldr	r0, [r4, #20]
 8019872:	b118      	cbz	r0, 801987c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8019874:	f7ff fd00 	bl	8019278 <fs_close>
    hs->handle = NULL;
 8019878:	2300      	movs	r3, #0
 801987a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801987c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801987e:	b118      	cbz	r0, 8019888 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8019880:	f001 fdf2 	bl	801b468 <mem_free>
    hs->ssi = NULL;
 8019884:	2300      	movs	r3, #0
 8019886:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019888:	6a20      	ldr	r0, [r4, #32]
 801988a:	b118      	cbz	r0, 8019894 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801988c:	f002 fe98 	bl	801c5c0 <pbuf_free>
    hs->req = NULL;
 8019890:	2300      	movs	r3, #0
 8019892:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019894:	4620      	mov	r0, r4
 8019896:	f001 fde7 	bl	801b468 <mem_free>
  err = altcp_close(pcb);
 801989a:	4628      	mov	r0, r5
 801989c:	f004 fb0c 	bl	801deb8 <tcp_close>
  if (err != ERR_OK) {
 80198a0:	4604      	mov	r4, r0
 80198a2:	b948      	cbnz	r0, 80198b8 <http_close_or_abort_conn.constprop.0+0x80>
}
 80198a4:	4620      	mov	r0, r4
 80198a6:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80198a8:	4911      	ldr	r1, [pc, #68]	; (80198f0 <http_close_or_abort_conn.constprop.0+0xb8>)
 80198aa:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80198ac:	223f      	movs	r2, #63	; 0x3f
 80198ae:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 80198b0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80198b2:	f7ef fa85 	bl	8008dc0 <httpd_post_finished>
 80198b6:	e7c6      	b.n	8019846 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80198b8:	4628      	mov	r0, r5
 80198ba:	2204      	movs	r2, #4
 80198bc:	490d      	ldr	r1, [pc, #52]	; (80198f4 <http_close_or_abort_conn.constprop.0+0xbc>)
 80198be:	f003 fc9d 	bl	801d1fc <tcp_poll>
}
 80198c2:	4620      	mov	r0, r4
 80198c4:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 80198c6:	f003 fc3b 	bl	801d140 <tcp_arg>
  altcp_recv(pcb, NULL);
 80198ca:	4621      	mov	r1, r4
 80198cc:	4628      	mov	r0, r5
 80198ce:	f003 fc3b 	bl	801d148 <tcp_recv>
  altcp_err(pcb, NULL);
 80198d2:	4621      	mov	r1, r4
 80198d4:	4628      	mov	r0, r5
 80198d6:	f003 fc6f 	bl	801d1b8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80198da:	4621      	mov	r1, r4
 80198dc:	4628      	mov	r0, r5
 80198de:	4622      	mov	r2, r4
 80198e0:	f003 fc8c 	bl	801d1fc <tcp_poll>
  altcp_sent(pcb, NULL);
 80198e4:	4621      	mov	r1, r4
 80198e6:	4628      	mov	r0, r5
 80198e8:	f003 fc4a 	bl	801d180 <tcp_sent>
  if (hs != NULL) {
 80198ec:	e7d5      	b.n	801989a <http_close_or_abort_conn.constprop.0+0x62>
 80198ee:	bf00      	nop
 80198f0:	2001e9cc 	.word	0x2001e9cc
 80198f4:	08019fb9 	.word	0x08019fb9

080198f8 <http_err>:
  if (hs != NULL) {
 80198f8:	b1c0      	cbz	r0, 801992c <http_err+0x34>
{
 80198fa:	b510      	push	{r4, lr}
 80198fc:	4604      	mov	r4, r0
  if (hs->handle) {
 80198fe:	6940      	ldr	r0, [r0, #20]
 8019900:	b118      	cbz	r0, 801990a <http_err+0x12>
    fs_close(hs->handle);
 8019902:	f7ff fcb9 	bl	8019278 <fs_close>
    hs->handle = NULL;
 8019906:	2300      	movs	r3, #0
 8019908:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801990a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801990c:	b118      	cbz	r0, 8019916 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801990e:	f001 fdab 	bl	801b468 <mem_free>
    hs->ssi = NULL;
 8019912:	2300      	movs	r3, #0
 8019914:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019916:	6a20      	ldr	r0, [r4, #32]
 8019918:	b118      	cbz	r0, 8019922 <http_err+0x2a>
    pbuf_free(hs->req);
 801991a:	f002 fe51 	bl	801c5c0 <pbuf_free>
    hs->req = NULL;
 801991e:	2300      	movs	r3, #0
 8019920:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8019922:	4620      	mov	r0, r4
}
 8019924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8019928:	f001 bd9e 	b.w	801b468 <mem_free>
 801992c:	4770      	bx	lr
 801992e:	bf00      	nop

08019930 <http_eof>:
{
 8019930:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8019932:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8019936:	b1fb      	cbz	r3, 8019978 <http_eof+0x48>
 8019938:	4605      	mov	r5, r0
  if (hs->handle) {
 801993a:	6948      	ldr	r0, [r1, #20]
 801993c:	460c      	mov	r4, r1
 801993e:	b118      	cbz	r0, 8019948 <http_eof+0x18>
    fs_close(hs->handle);
 8019940:	f7ff fc9a 	bl	8019278 <fs_close>
    hs->handle = NULL;
 8019944:	2300      	movs	r3, #0
 8019946:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8019948:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801994a:	b118      	cbz	r0, 8019954 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801994c:	f001 fd8c 	bl	801b468 <mem_free>
    hs->ssi = NULL;
 8019950:	2300      	movs	r3, #0
 8019952:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8019954:	6a20      	ldr	r0, [r4, #32]
 8019956:	b108      	cbz	r0, 801995c <http_eof+0x2c>
    pbuf_free(hs->req);
 8019958:	f002 fe32 	bl	801c5c0 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801995c:	2234      	movs	r2, #52	; 0x34
 801995e:	2100      	movs	r1, #0
 8019960:	4620      	mov	r0, r4
 8019962:	f00b ff59 	bl	8025818 <memset>
    hs->keepalive = 1;
 8019966:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8019968:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801996a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801996e:	8b6b      	ldrh	r3, [r5, #26]
 8019970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019974:	836b      	strh	r3, [r5, #26]
}
 8019976:	bd38      	pop	{r3, r4, r5, pc}
 8019978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801997c:	f7ff bf5c 	b.w	8019838 <http_close_or_abort_conn.constprop.0>

08019980 <http_send>:
{
 8019980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8019984:	460d      	mov	r5, r1
{
 8019986:	b087      	sub	sp, #28
  if (hs == NULL) {
 8019988:	2900      	cmp	r1, #0
 801998a:	f000 824b 	beq.w	8019e24 <http_send+0x4a4>
  if (hs->left == 0) {
 801998e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019990:	4607      	mov	r7, r0
 8019992:	2b00      	cmp	r3, #0
 8019994:	f000 818c 	beq.w	8019cb0 <http_send+0x330>
  if (hs->ssi) {
 8019998:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801999a:	2c00      	cmp	r4, #0
 801999c:	f000 819a 	beq.w	8019cd4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 80199a0:	6823      	ldr	r3, [r4, #0]
 80199a2:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 80199a4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 80199a8:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 80199aa:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 80199ae:	f200 80c3 	bhi.w	8019b38 <http_send+0x1b8>
  u8_t data_to_send = 0;
 80199b2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 80199b6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80199b8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 80199bc:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80199c0:	2b04      	cmp	r3, #4
 80199c2:	d003      	beq.n	80199cc <http_send+0x4c>
 80199c4:	68e1      	ldr	r1, [r4, #12]
 80199c6:	2900      	cmp	r1, #0
 80199c8:	f000 8091 	beq.w	8019aee <http_send+0x16e>
 80199cc:	2e00      	cmp	r6, #0
 80199ce:	f040 811b 	bne.w	8019c08 <http_send+0x288>
    if (len == 0) {
 80199d2:	2a00      	cmp	r2, #0
 80199d4:	f000 811b 	beq.w	8019c0e <http_send+0x28e>
    switch (ssi->tag_state) {
 80199d8:	2b04      	cmp	r3, #4
 80199da:	d8f1      	bhi.n	80199c0 <http_send+0x40>
 80199dc:	e8df f003 	tbb	[pc, r3]
 80199e0:	23407466 	.word	0x23407466
 80199e4:	03          	.byte	0x03
 80199e5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80199e6:	68a3      	ldr	r3, [r4, #8]
 80199e8:	69a9      	ldr	r1, [r5, #24]
 80199ea:	428b      	cmp	r3, r1
 80199ec:	f240 80f1 	bls.w	8019bd2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80199f0:	6863      	ldr	r3, [r4, #4]
 80199f2:	4299      	cmp	r1, r3
 80199f4:	f200 81fc 	bhi.w	8019df0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80199f8:	1a5a      	subs	r2, r3, r1
 80199fa:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80199fe:	4282      	cmp	r2, r0
 8019a00:	f340 8117 	ble.w	8019c32 <http_send+0x2b2>
 8019a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a08:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	f10d 0216 	add.w	r2, sp, #22
 8019a12:	4638      	mov	r0, r7
 8019a14:	f7ff fc36 	bl	8019284 <http_write>
          if (err == ERR_OK) {
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	f000 81fe 	beq.w	8019e1a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019a1e:	4606      	mov	r6, r0
    if (len == 0) {
 8019a20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019a24:	e11a      	b.n	8019c5c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019a26:	6821      	ldr	r1, [r4, #0]
 8019a28:	8a20      	ldrh	r0, [r4, #16]
 8019a2a:	f891 e000 	ldrb.w	lr, [r1]
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f040 80b9 	bne.w	8019ba6 <http_send+0x226>
 8019a34:	f1ae 0c09 	sub.w	ip, lr, #9
 8019a38:	fa5f fc8c 	uxtb.w	ip, ip
 8019a3c:	f1bc 0f17 	cmp.w	ip, #23
 8019a40:	f200 80b1 	bhi.w	8019ba6 <http_send+0x226>
 8019a44:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8019dec <http_send+0x46c>
 8019a48:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8019a4c:	f01c 0f01 	tst.w	ip, #1
 8019a50:	f000 80a9 	beq.w	8019ba6 <http_send+0x226>
          ssi->parsed++;
 8019a54:	3101      	adds	r1, #1
 8019a56:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019a58:	68e1      	ldr	r1, [r4, #12]
 8019a5a:	3901      	subs	r1, #1
 8019a5c:	60e1      	str	r1, [r4, #12]
          break;
 8019a5e:	e7af      	b.n	80199c0 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019a60:	8a20      	ldrh	r0, [r4, #16]
 8019a62:	2800      	cmp	r0, #0
 8019a64:	f040 8083 	bne.w	8019b6e <http_send+0x1ee>
 8019a68:	6821      	ldr	r1, [r4, #0]
 8019a6a:	f891 e000 	ldrb.w	lr, [r1]
 8019a6e:	f1ae 0c09 	sub.w	ip, lr, #9
 8019a72:	fa5f fc8c 	uxtb.w	ip, ip
 8019a76:	f1bc 0f17 	cmp.w	ip, #23
 8019a7a:	f240 8110 	bls.w	8019c9e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8019a7e:	f8df c350 	ldr.w	ip, [pc, #848]	; 8019dd0 <http_send+0x450>
 8019a82:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019a86:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019a8a:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019a8e:	f89c c000 	ldrb.w	ip, [ip]
 8019a92:	45f4      	cmp	ip, lr
 8019a94:	f000 8083 	beq.w	8019b9e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8019a98:	f100 0c01 	add.w	ip, r0, #1
 8019a9c:	4420      	add	r0, r4
 8019a9e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019aa2:	f891 c000 	ldrb.w	ip, [r1]
 8019aa6:	f880 c016 	strb.w	ip, [r0, #22]
 8019aaa:	e7d3      	b.n	8019a54 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8019aac:	6821      	ldr	r1, [r4, #0]
 8019aae:	7808      	ldrb	r0, [r1, #0]
 8019ab0:	283c      	cmp	r0, #60	; 0x3c
 8019ab2:	d002      	beq.n	8019aba <http_send+0x13a>
 8019ab4:	282f      	cmp	r0, #47	; 0x2f
 8019ab6:	d1cd      	bne.n	8019a54 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8019ab8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 8019aba:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 8019abc:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 8019abe:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8019ac0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8019ac4:	8223      	strh	r3, [r4, #16]
            break;
 8019ac6:	e7c5      	b.n	8019a54 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8019ac8:	49c1      	ldr	r1, [pc, #772]	; (8019dd0 <http_send+0x450>)
 8019aca:	7d20      	ldrb	r0, [r4, #20]
 8019acc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019ad0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8019ad4:	f811 100c 	ldrb.w	r1, [r1, ip]
 8019ad8:	2900      	cmp	r1, #0
 8019ada:	f040 8086 	bne.w	8019bea <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 8019ade:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8019ae0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019ae2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8019ae4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019ae8:	2900      	cmp	r1, #0
 8019aea:	f47f af6f 	bne.w	80199cc <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019aee:	6823      	ldr	r3, [r4, #0]
 8019af0:	69a9      	ldr	r1, [r5, #24]
 8019af2:	428b      	cmp	r3, r1
 8019af4:	f240 808b 	bls.w	8019c0e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019af8:	1a5b      	subs	r3, r3, r1
 8019afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019afe:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b00:	4293      	cmp	r3, r2
 8019b02:	bfa8      	it	ge
 8019b04:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b06:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b0a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b0e:	2300      	movs	r3, #0
 8019b10:	f7ff fbb8 	bl	8019284 <http_write>
    if (err == ERR_OK) {
 8019b14:	2800      	cmp	r0, #0
 8019b16:	d17a      	bne.n	8019c0e <http_send+0x28e>
    hs->file += len;
 8019b18:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8019b1c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8019b20:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8019b22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8019b24:	440a      	add	r2, r1
    hs->left -= len;
 8019b26:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8019b28:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8019b2a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d071      	beq.n	8019c14 <http_send+0x294>
}
 8019b30:	4640      	mov	r0, r8
 8019b32:	b007      	add	sp, #28
 8019b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b38:	1a5b      	subs	r3, r3, r1
 8019b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b3e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b40:	4293      	cmp	r3, r2
 8019b42:	bfa8      	it	ge
 8019b44:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b46:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8019b4a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019b4e:	2300      	movs	r3, #0
 8019b50:	f7ff fb98 	bl	8019284 <http_write>
    if (err == ERR_OK) {
 8019b54:	4606      	mov	r6, r0
 8019b56:	2800      	cmp	r0, #0
 8019b58:	f000 8154 	beq.w	8019e04 <http_send+0x484>
  u8_t data_to_send = 0;
 8019b5c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8019b60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d052      	beq.n	8019c0e <http_send+0x28e>
    if (len == 0) {
 8019b68:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019b6c:	e724      	b.n	80199b8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8019b6e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8019dd0 <http_send+0x450>
 8019b72:	7d21      	ldrb	r1, [r4, #20]
 8019b74:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8019b78:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8019b7c:	6821      	ldr	r1, [r4, #0]
 8019b7e:	f89e a000 	ldrb.w	sl, [lr]
 8019b82:	f891 c000 	ldrb.w	ip, [r1]
 8019b86:	45e2      	cmp	sl, ip
 8019b88:	d072      	beq.n	8019c70 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019b8a:	f1ac 0c09 	sub.w	ip, ip, #9
 8019b8e:	fa5f fc8c 	uxtb.w	ip, ip
 8019b92:	f1bc 0f17 	cmp.w	ip, #23
 8019b96:	d964      	bls.n	8019c62 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8019b98:	2807      	cmp	r0, #7
 8019b9a:	f67f af7d 	bls.w	8019a98 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8019ba4:	e756      	b.n	8019a54 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8019ba6:	f894 9014 	ldrb.w	r9, [r4, #20]
 8019baa:	f8df c224 	ldr.w	ip, [pc, #548]	; 8019dd0 <http_send+0x450>
 8019bae:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8019bb2:	f8dc c004 	ldr.w	ip, [ip, #4]
 8019bb6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 8019bba:	45f1      	cmp	r9, lr
 8019bbc:	f000 80a1 	beq.w	8019d02 <http_send+0x382>
          ssi->parse_left--;
 8019bc0:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8019bc2:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8019bc4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019bc8:	3b01      	subs	r3, #1
          ssi->parsed++;
 8019bca:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8019bcc:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	e6f8      	b.n	80199c4 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8019bd2:	8a21      	ldrh	r1, [r4, #16]
 8019bd4:	8a60      	ldrh	r0, [r4, #18]
 8019bd6:	4281      	cmp	r1, r0
 8019bd8:	f0c0 80e0 	bcc.w	8019d9c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 8019bdc:	6023      	str	r3, [r4, #0]
 8019bde:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8019be0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8019be4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8019be8:	e6ec      	b.n	80199c4 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8019bea:	6820      	ldr	r0, [r4, #0]
 8019bec:	f890 e000 	ldrb.w	lr, [r0]
 8019bf0:	458e      	cmp	lr, r1
 8019bf2:	f000 80ce 	beq.w	8019d92 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8019bfc:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8019bfe:	3001      	adds	r0, #1
          ssi->parse_left--;
 8019c00:	3901      	subs	r1, #1
          ssi->parsed++;
 8019c02:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8019c04:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8019c06:	e6db      	b.n	80199c0 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8019c08:	2b04      	cmp	r3, #4
 8019c0a:	f47f af70 	bne.w	8019aee <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d18d      	bne.n	8019b30 <http_send+0x1b0>
 8019c14:	6968      	ldr	r0, [r5, #20]
 8019c16:	f7ff fb31 	bl	801927c <fs_bytes_left>
 8019c1a:	2800      	cmp	r0, #0
 8019c1c:	dc88      	bgt.n	8019b30 <http_send+0x1b0>
      return 0;
 8019c1e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8019c22:	4638      	mov	r0, r7
 8019c24:	4629      	mov	r1, r5
 8019c26:	f7ff fe83 	bl	8019930 <http_eof>
}
 8019c2a:	4640      	mov	r0, r8
 8019c2c:	b007      	add	sp, #28
 8019c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c32:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019c34:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8019c38:	2a00      	cmp	r2, #0
 8019c3a:	f47f aee7 	bne.w	8019a0c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 8019c3e:	428b      	cmp	r3, r1
 8019c40:	d805      	bhi.n	8019c4e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019c42:	68a0      	ldr	r0, [r4, #8]
 8019c44:	1ac3      	subs	r3, r0, r3
 8019c46:	441a      	add	r2, r3
 8019c48:	b292      	uxth	r2, r2
 8019c4a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 8019c4e:	4411      	add	r1, r2
 8019c50:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8019c52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8019c54:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8019c58:	1a9b      	subs	r3, r3, r2
 8019c5a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019c5c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019c60:	e6ae      	b.n	80199c0 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8019c62:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019dec <http_send+0x46c>
 8019c66:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8019c6a:	f01c 0f01 	tst.w	ip, #1
 8019c6e:	d093      	beq.n	8019b98 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8019c70:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019c72:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8019c74:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019c78:	f200 80e0 	bhi.w	8019e3c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019c7c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8019c7e:	4420      	add	r0, r4
 8019c80:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019c84:	f89e 3000 	ldrb.w	r3, [lr]
 8019c88:	780a      	ldrb	r2, [r1, #0]
 8019c8a:	429a      	cmp	r2, r3
 8019c8c:	f000 80cf 	beq.w	8019e2e <http_send+0x4ae>
              ssi->tag_index = 0;
 8019c90:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019c94:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019c98:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019c9c:	e6da      	b.n	8019a54 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8019c9e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8019dec <http_send+0x46c>
 8019ca2:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8019ca6:	f01c 0f01 	tst.w	ip, #1
 8019caa:	f47f aed3 	bne.w	8019a54 <http_send+0xd4>
 8019cae:	e6e6      	b.n	8019a7e <http_send+0xfe>
  if (hs->handle == NULL) {
 8019cb0:	6948      	ldr	r0, [r1, #20]
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	d0b3      	beq.n	8019c1e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8019cb6:	f7ff fae1 	bl	801927c <fs_bytes_left>
  if (bytes_left <= 0) {
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	ddaf      	ble.n	8019c1e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8019cbe:	4b45      	ldr	r3, [pc, #276]	; (8019dd4 <http_send+0x454>)
 8019cc0:	f240 429d 	movw	r2, #1181	; 0x49d
 8019cc4:	4944      	ldr	r1, [pc, #272]	; (8019dd8 <http_send+0x458>)
 8019cc6:	4845      	ldr	r0, [pc, #276]	; (8019ddc <http_send+0x45c>)
 8019cc8:	f00c fd44 	bl	8026754 <iprintf>
  if (hs->ssi) {
 8019ccc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8019cce:	2c00      	cmp	r4, #0
 8019cd0:	f47f ae66 	bne.w	80199a0 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019cd4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8019cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cdc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019cde:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019ce0:	428a      	cmp	r2, r1
 8019ce2:	bf88      	it	hi
 8019ce4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019ce6:	4623      	mov	r3, r4
 8019ce8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8019cea:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019cee:	f10d 0216 	add.w	r2, sp, #22
 8019cf2:	f7ff fac7 	bl	8019284 <http_write>
  if (err == ERR_OK) {
 8019cf6:	2800      	cmp	r0, #0
 8019cf8:	f43f af0e 	beq.w	8019b18 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8019cfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 8019cfe:	46a0      	mov	r8, r4
 8019d00:	e714      	b.n	8019b2c <http_send+0x1ac>
          ssi->parsed++;
 8019d02:	3101      	adds	r1, #1
          ssi->tag_index++;
 8019d04:	3001      	adds	r0, #1
          ssi->parsed++;
 8019d06:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8019d08:	b280      	uxth	r0, r0
          ssi->parse_left--;
 8019d0a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 8019d0c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 8019d0e:	3901      	subs	r1, #1
 8019d10:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8019d12:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8019d16:	2900      	cmp	r1, #0
 8019d18:	f47f ae52 	bne.w	80199c0 <http_send+0x40>
  ssi = hs->ssi;
 8019d1c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019d20:	f1b9 0f00 	cmp.w	r9, #0
 8019d24:	f000 8115 	beq.w	8019f52 <http_send+0x5d2>
  if (httpd_ssi_handler
 8019d28:	4b2d      	ldr	r3, [pc, #180]	; (8019de0 <http_send+0x460>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	9300      	str	r3, [sp, #0]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f000 8093 	beq.w	8019e5a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8019d34:	4b2b      	ldr	r3, [pc, #172]	; (8019de4 <http_send+0x464>)
 8019d36:	681a      	ldr	r2, [r3, #0]
 8019d38:	2a00      	cmp	r2, #0
 8019d3a:	f000 808e 	beq.w	8019e5a <http_send+0x4da>
 8019d3e:	4b2a      	ldr	r3, [pc, #168]	; (8019de8 <http_send+0x468>)
 8019d40:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d42:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8019d44:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d46:	f340 8088 	ble.w	8019e5a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019d4a:	f109 0a16 	add.w	sl, r9, #22
 8019d4e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8019d50:	2300      	movs	r3, #0
 8019d52:	9503      	str	r5, [sp, #12]
 8019d54:	460d      	mov	r5, r1
 8019d56:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8019d5a:	4656      	mov	r6, sl
 8019d5c:	461c      	mov	r4, r3
 8019d5e:	4692      	mov	sl, r2
 8019d60:	e003      	b.n	8019d6a <http_send+0x3ea>
 8019d62:	3401      	adds	r4, #1
 8019d64:	42a5      	cmp	r5, r4
 8019d66:	f000 8105 	beq.w	8019f74 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019d6a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 8019d6e:	4630      	mov	r0, r6
 8019d70:	f7e6 fa66 	bl	8000240 <strcmp>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d1f4      	bne.n	8019d62 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8019d78:	4623      	mov	r3, r4
 8019d7a:	22fe      	movs	r2, #254	; 0xfe
 8019d7c:	f109 011f 	add.w	r1, r9, #31
 8019d80:	9e02      	ldr	r6, [sp, #8]
 8019d82:	4618      	mov	r0, r3
 8019d84:	9b00      	ldr	r3, [sp, #0]
 8019d86:	9c01      	ldr	r4, [sp, #4]
 8019d88:	9d03      	ldr	r5, [sp, #12]
 8019d8a:	4798      	blx	r3
 8019d8c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8019d90:	e0a6      	b.n	8019ee0 <http_send+0x560>
            ssi->tag_index++;
 8019d92:	f10c 0c01 	add.w	ip, ip, #1
 8019d96:	f8a4 c010 	strh.w	ip, [r4, #16]
 8019d9a:	e72f      	b.n	8019bfc <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019d9c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019d9e:	311f      	adds	r1, #31
 8019da0:	f10d 0216 	add.w	r2, sp, #22
 8019da4:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8019da6:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8019daa:	4421      	add	r1, r4
 8019dac:	4638      	mov	r0, r7
 8019dae:	f7ff fa69 	bl	8019284 <http_write>
              ssi->tag_index += len;
 8019db2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8019db6:	4606      	mov	r6, r0
 8019db8:	2800      	cmp	r0, #0
 8019dba:	f47f af4f 	bne.w	8019c5c <http_send+0x2dc>
              ssi->tag_index += len;
 8019dbe:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8019dc0:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8019dc4:	4413      	add	r3, r2
 8019dc6:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019dc8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8019dcc:	e5f8      	b.n	80199c0 <http_send+0x40>
 8019dce:	bf00      	nop
 8019dd0:	08044ac0 	.word	0x08044ac0
 8019dd4:	080447b4 	.word	0x080447b4
 8019dd8:	08044894 	.word	0x08044894
 8019ddc:	0802b44c 	.word	0x0802b44c
 8019de0:	2001ee10 	.word	0x2001ee10
 8019de4:	2001ee14 	.word	0x2001ee14
 8019de8:	2001ea0c 	.word	0x2001ea0c
 8019dec:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8019df0:	4b63      	ldr	r3, [pc, #396]	; (8019f80 <http_send+0x600>)
 8019df2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8019df6:	4963      	ldr	r1, [pc, #396]	; (8019f84 <http_send+0x604>)
 8019df8:	4863      	ldr	r0, [pc, #396]	; (8019f88 <http_send+0x608>)
 8019dfa:	f00c fcab 	bl	8026754 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019dfe:	6863      	ldr	r3, [r4, #4]
 8019e00:	69a9      	ldr	r1, [r5, #24]
 8019e02:	e5f9      	b.n	80199f8 <http_send+0x78>
      hs->file += len;
 8019e04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8019e08:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8019e0c:	69ab      	ldr	r3, [r5, #24]
 8019e0e:	4413      	add	r3, r2
 8019e10:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8019e12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019e14:	1a9b      	subs	r3, r3, r2
 8019e16:	626b      	str	r3, [r5, #36]	; 0x24
 8019e18:	e6a2      	b.n	8019b60 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8019e1a:	6863      	ldr	r3, [r4, #4]
 8019e1c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019e1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e22:	e70c      	b.n	8019c3e <http_send+0x2be>
    return 0;
 8019e24:	4688      	mov	r8, r1
}
 8019e26:	4640      	mov	r0, r8
 8019e28:	b007      	add	sp, #28
 8019e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8019e2e:	2301      	movs	r3, #1
 8019e30:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8019e32:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8019e36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e3a:	e60b      	b.n	8019a54 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8019e3c:	4b50      	ldr	r3, [pc, #320]	; (8019f80 <http_send+0x600>)
 8019e3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8019e42:	4952      	ldr	r1, [pc, #328]	; (8019f8c <http_send+0x60c>)
 8019e44:	4850      	ldr	r0, [pc, #320]	; (8019f88 <http_send+0x608>)
 8019e46:	f00c fc85 	bl	8026754 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019e4a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8019e4c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8019e4e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8019e52:	6821      	ldr	r1, [r4, #0]
 8019e54:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8019e58:	e710      	b.n	8019c7c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8019e5a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019e5e:	4650      	mov	r0, sl
 8019e60:	f7e6 f9f8 	bl	8000254 <strlen>
 8019e64:	28e4      	cmp	r0, #228	; 0xe4
 8019e66:	d865      	bhi.n	8019f34 <http_send+0x5b4>
 8019e68:	2809      	cmp	r0, #9
 8019e6a:	bf28      	it	cs
 8019e6c:	2009      	movcs	r0, #9
 8019e6e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8019e72:	4686      	mov	lr, r0
 8019e74:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019e76:	f100 0319 	add.w	r3, r0, #25
 8019e7a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e7c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8019f9c <http_send+0x61c>
 8019e80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019e84:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8019e88:	f8bc 3000 	ldrh.w	r3, [ip]
 8019e8c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e90:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e94:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e98:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019e9a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019e9e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8019ea0:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8019ea4:	f00b fc90 	bl	80257c8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019ea8:	4b39      	ldr	r3, [pc, #228]	; (8019f90 <http_send+0x610>)
 8019eaa:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019eac:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019eae:	eb09 0e02 	add.w	lr, r9, r2
 8019eb2:	6818      	ldr	r0, [r3, #0]
 8019eb4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019eb8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019eba:	799b      	ldrb	r3, [r3, #6]
 8019ebc:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8019ec0:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8019ec4:	f8ae c004 	strh.w	ip, [lr, #4]
 8019ec8:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8019ecc:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8019ed0:	f7e6 f9c0 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019ed4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8019ed8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019eda:	d232      	bcs.n	8019f42 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8019edc:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8019ee0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8019ee2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8019ee4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8019ee6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8019eea:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8019eec:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8019ef0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8019ef2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8019ef4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8019ef6:	d802      	bhi.n	8019efe <http_send+0x57e>
    if (len == 0) {
 8019ef8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019efc:	e566      	b.n	80199cc <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019efe:	1a52      	subs	r2, r2, r1
 8019f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019f04:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019f06:	429a      	cmp	r2, r3
 8019f08:	bfa8      	it	ge
 8019f0a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019f0c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8019f0e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8019f12:	f10d 0216 	add.w	r2, sp, #22
 8019f16:	f7ff f9b5 	bl	8019284 <http_write>
              if (err == ERR_OK) {
 8019f1a:	4606      	mov	r6, r0
 8019f1c:	2800      	cmp	r0, #0
 8019f1e:	f47f ad7f 	bne.w	8019a20 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8019f22:	6861      	ldr	r1, [r4, #4]
 8019f24:	69ab      	ldr	r3, [r5, #24]
 8019f26:	4299      	cmp	r1, r3
 8019f28:	d91b      	bls.n	8019f62 <http_send+0x5e2>
                hs->file += len;
 8019f2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019f2e:	4413      	add	r3, r2
 8019f30:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8019f32:	e68e      	b.n	8019c52 <http_send+0x2d2>
 8019f34:	233a      	movs	r3, #58	; 0x3a
 8019f36:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8019f38:	f04f 0e09 	mov.w	lr, #9
 8019f3c:	e9cd 3200 	strd	r3, r2, [sp]
 8019f40:	e79c      	b.n	8019e7c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8019f42:	4b0f      	ldr	r3, [pc, #60]	; (8019f80 <http_send+0x600>)
 8019f44:	f240 323f 	movw	r2, #831	; 0x33f
 8019f48:	4912      	ldr	r1, [pc, #72]	; (8019f94 <http_send+0x614>)
 8019f4a:	480f      	ldr	r0, [pc, #60]	; (8019f88 <http_send+0x608>)
 8019f4c:	f00c fc02 	bl	8026754 <iprintf>
 8019f50:	e7c4      	b.n	8019edc <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8019f52:	4b0b      	ldr	r3, [pc, #44]	; (8019f80 <http_send+0x600>)
 8019f54:	f240 3206 	movw	r2, #774	; 0x306
 8019f58:	490f      	ldr	r1, [pc, #60]	; (8019f98 <http_send+0x618>)
 8019f5a:	480b      	ldr	r0, [pc, #44]	; (8019f88 <http_send+0x608>)
 8019f5c:	f00c fbfa 	bl	8026754 <iprintf>
 8019f60:	e6e2      	b.n	8019d28 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8019f62:	68a2      	ldr	r2, [r4, #8]
 8019f64:	1a52      	subs	r2, r2, r1
 8019f66:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019f6a:	440a      	add	r2, r1
 8019f6c:	b292      	uxth	r2, r2
 8019f6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019f72:	e7dc      	b.n	8019f2e <http_send+0x5ae>
 8019f74:	46b2      	mov	sl, r6
 8019f76:	9c01      	ldr	r4, [sp, #4]
 8019f78:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8019f7c:	e76f      	b.n	8019e5e <http_send+0x4de>
 8019f7e:	bf00      	nop
 8019f80:	080447b4 	.word	0x080447b4
 8019f84:	0804491c 	.word	0x0804491c
 8019f88:	0802b44c 	.word	0x0802b44c
 8019f8c:	080448cc 	.word	0x080448cc
 8019f90:	08044904 	.word	0x08044904
 8019f94:	0804490c 	.word	0x0804490c
 8019f98:	080448e4 	.word	0x080448e4
 8019f9c:	080448f0 	.word	0x080448f0

08019fa0 <http_sent>:
{
 8019fa0:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	b130      	cbz	r0, 8019fb4 <http_sent+0x14>
  hs->retries = 0;
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8019faa:	4619      	mov	r1, r3
  hs->retries = 0;
 8019fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8019fb0:	f7ff fce6 	bl	8019980 <http_send>
}
 8019fb4:	2000      	movs	r0, #0
 8019fb6:	bd08      	pop	{r3, pc}

08019fb8 <http_poll>:
{
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	460c      	mov	r4, r1
  if (hs == NULL) {
 8019fbc:	b1a8      	cbz	r0, 8019fea <http_poll+0x32>
    hs->retries++;
 8019fbe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019fc6:	2b04      	cmp	r3, #4
    hs->retries++;
 8019fc8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8019fcc:	d019      	beq.n	801a002 <http_poll+0x4a>
    if (hs->handle) {
 8019fce:	6943      	ldr	r3, [r0, #20]
 8019fd0:	b123      	cbz	r3, 8019fdc <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8019fd2:	4601      	mov	r1, r0
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	f7ff fcd3 	bl	8019980 <http_send>
 8019fda:	b908      	cbnz	r0, 8019fe0 <http_poll+0x28>
  return ERR_OK;
 8019fdc:	2000      	movs	r0, #0
}
 8019fde:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	f006 fc9f 	bl	8020924 <tcp_output>
  return ERR_OK;
 8019fe6:	2000      	movs	r0, #0
 8019fe8:	e7f9      	b.n	8019fde <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8019fea:	4601      	mov	r1, r0
 8019fec:	4620      	mov	r0, r4
 8019fee:	f7ff fc23 	bl	8019838 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8019ff2:	3001      	adds	r0, #1
 8019ff4:	d1f2      	bne.n	8019fdc <http_poll+0x24>
      altcp_abort(pcb);
 8019ff6:	4620      	mov	r0, r4
 8019ff8:	f003 fd66 	bl	801dac8 <tcp_abort>
      return ERR_ABRT;
 8019ffc:	f06f 000c 	mvn.w	r0, #12
}
 801a000:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 801a002:	4601      	mov	r1, r0
 801a004:	4620      	mov	r0, r4
 801a006:	f7ff fc17 	bl	8019838 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 801a00a:	2000      	movs	r0, #0
}
 801a00c:	bd10      	pop	{r4, pc}
 801a00e:	bf00      	nop

0801a010 <http_recv>:
{
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	4605      	mov	r5, r0
 801a016:	b08d      	sub	sp, #52	; 0x34
 801a018:	460e      	mov	r6, r1
 801a01a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801a01c:	b9ab      	cbnz	r3, 801a04a <http_recv+0x3a>
 801a01e:	fab2 f782 	clz	r7, r2
 801a022:	097f      	lsrs	r7, r7, #5
 801a024:	b1ca      	cbz	r2, 801a05a <http_recv+0x4a>
 801a026:	b188      	cbz	r0, 801a04c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 801a028:	8911      	ldrh	r1, [r2, #8]
 801a02a:	4630      	mov	r0, r6
 801a02c:	f002 ff48 	bl	801cec0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 801a030:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a032:	2b00      	cmp	r3, #0
 801a034:	f040 813c 	bne.w	801a2b0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 801a038:	696b      	ldr	r3, [r5, #20]
 801a03a:	b1b3      	cbz	r3, 801a06a <http_recv+0x5a>
      pbuf_free(p);
 801a03c:	4620      	mov	r0, r4
 801a03e:	f002 fabf 	bl	801c5c0 <pbuf_free>
}
 801a042:	2000      	movs	r0, #0
 801a044:	b00d      	add	sp, #52	; 0x34
 801a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 801a04a:	b132      	cbz	r2, 801a05a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 801a04c:	4630      	mov	r0, r6
 801a04e:	8921      	ldrh	r1, [r4, #8]
 801a050:	f002 ff36 	bl	801cec0 <tcp_recved>
      pbuf_free(p);
 801a054:	4620      	mov	r0, r4
 801a056:	f002 fab3 	bl	801c5c0 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 801a05a:	4629      	mov	r1, r5
 801a05c:	4630      	mov	r0, r6
 801a05e:	f7ff fbeb 	bl	8019838 <http_close_or_abort_conn.constprop.0>
}
 801a062:	2000      	movs	r0, #0
 801a064:	b00d      	add	sp, #52	; 0x34
 801a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801a06a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 801a06c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801a06e:	2b00      	cmp	r3, #0
 801a070:	f040 8173 	bne.w	801a35a <http_recv+0x34a>
  if (hs->req == NULL) {
 801a074:	2800      	cmp	r0, #0
 801a076:	f000 8136 	beq.w	801a2e6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 801a07a:	4621      	mov	r1, r4
 801a07c:	f002 fad2 	bl	801c624 <pbuf_cat>
  pbuf_ref(p);
 801a080:	4620      	mov	r0, r4
 801a082:	f002 fabb 	bl	801c5fc <pbuf_ref>
  if (hs->req->next != NULL) {
 801a086:	6a28      	ldr	r0, [r5, #32]
 801a088:	6803      	ldr	r3, [r0, #0]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	f000 812d 	beq.w	801a2ea <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a090:	8907      	ldrh	r7, [r0, #8]
 801a092:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a096:	49bc      	ldr	r1, [pc, #752]	; (801a388 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a098:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 801a09a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801a09c:	bf28      	it	cs
 801a09e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	463a      	mov	r2, r7
 801a0a4:	f002 fb30 	bl	801c708 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 801a0a8:	2f06      	cmp	r7, #6
 801a0aa:	f240 80ef 	bls.w	801a28c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801a0ae:	463a      	mov	r2, r7
 801a0b0:	49b6      	ldr	r1, [pc, #728]	; (801a38c <http_recv+0x37c>)
 801a0b2:	4640      	mov	r0, r8
 801a0b4:	f000 fa4e 	bl	801a554 <lwip_strnstr>
    if (crlf != NULL) {
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	f000 80e7 	beq.w	801a28c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 801a0be:	2204      	movs	r2, #4
 801a0c0:	49b3      	ldr	r1, [pc, #716]	; (801a390 <http_recv+0x380>)
 801a0c2:	4640      	mov	r0, r8
 801a0c4:	f00d fb28 	bl	8027718 <strncmp>
 801a0c8:	4682      	mov	sl, r0
 801a0ca:	2800      	cmp	r0, #0
 801a0cc:	f040 8118 	bne.w	801a300 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a0d0:	1f3a      	subs	r2, r7, #4
 801a0d2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 801a0d6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a0da:	49ae      	ldr	r1, [pc, #696]	; (801a394 <http_recv+0x384>)
 801a0dc:	b292      	uxth	r2, r2
 801a0de:	4658      	mov	r0, fp
 801a0e0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 801a0e4:	f000 fa36 	bl	801a554 <lwip_strnstr>
      if (sp2 == NULL) {
 801a0e8:	9a05      	ldr	r2, [sp, #20]
 801a0ea:	4681      	mov	r9, r0
 801a0ec:	2800      	cmp	r0, #0
 801a0ee:	f000 8123 	beq.w	801a338 <http_recv+0x328>
      int is_09 = 0;
 801a0f2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 801a0f4:	9305      	str	r3, [sp, #20]
 801a0f6:	f1b9 0f00 	cmp.w	r9, #0
 801a0fa:	f000 80c7 	beq.w	801a28c <http_recv+0x27c>
 801a0fe:	9b04      	ldr	r3, [sp, #16]
 801a100:	4599      	cmp	r9, r3
 801a102:	f240 80c3 	bls.w	801a28c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 801a106:	463a      	mov	r2, r7
 801a108:	49a3      	ldr	r1, [pc, #652]	; (801a398 <http_recv+0x388>)
 801a10a:	4640      	mov	r0, r8
 801a10c:	f000 fa22 	bl	801a554 <lwip_strnstr>
 801a110:	2800      	cmp	r0, #0
 801a112:	f000 80bb 	beq.w	801a28c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a116:	9b05      	ldr	r3, [sp, #20]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	f000 812b 	beq.w	801a374 <http_recv+0x364>
            hs->keepalive = 0;
 801a11e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801a120:	eba9 020b 	sub.w	r2, r9, fp
 801a124:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 801a128:	2100      	movs	r1, #0
 801a12a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801a12c:	b292      	uxth	r2, r2
          *sp1 = 0;
 801a12e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 801a130:	f80b 1002 	strb.w	r1, [fp, r2]
 801a134:	445a      	add	r2, fp
 801a136:	9206      	str	r2, [sp, #24]
          if (is_post) {
 801a138:	f1ba 0f00 	cmp.w	sl, #0
 801a13c:	f000 8113 	beq.w	801a366 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a140:	f109 0301 	add.w	r3, r9, #1
 801a144:	4994      	ldr	r1, [pc, #592]	; (801a398 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 801a146:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801a14a:	eba3 0208 	sub.w	r2, r3, r8
 801a14e:	4618      	mov	r0, r3
 801a150:	9305      	str	r3, [sp, #20]
 801a152:	1aba      	subs	r2, r7, r2
 801a154:	f000 f9fe 	bl	801a554 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 801a158:	9008      	str	r0, [sp, #32]
 801a15a:	2800      	cmp	r0, #0
 801a15c:	f000 8168 	beq.w	801a430 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 801a160:	9b05      	ldr	r3, [sp, #20]
 801a162:	498e      	ldr	r1, [pc, #568]	; (801a39c <http_recv+0x38c>)
 801a164:	1ac2      	subs	r2, r0, r3
 801a166:	4618      	mov	r0, r3
 801a168:	f000 f9f4 	bl	801a554 <lwip_strnstr>
    if (scontent_len != NULL) {
 801a16c:	4603      	mov	r3, r0
 801a16e:	9009      	str	r0, [sp, #36]	; 0x24
 801a170:	2800      	cmp	r0, #0
 801a172:	f000 812f 	beq.w	801a3d4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 801a176:	3310      	adds	r3, #16
 801a178:	220a      	movs	r2, #10
 801a17a:	4984      	ldr	r1, [pc, #528]	; (801a38c <http_recv+0x37c>)
 801a17c:	4618      	mov	r0, r3
 801a17e:	9307      	str	r3, [sp, #28]
 801a180:	f000 f9e8 	bl	801a554 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 801a184:	2800      	cmp	r0, #0
 801a186:	f000 8125 	beq.w	801a3d4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 801a18a:	9b07      	ldr	r3, [sp, #28]
 801a18c:	4618      	mov	r0, r3
 801a18e:	f00b f8bd 	bl	802530c <atoi>
        if (content_len == 0) {
 801a192:	1e02      	subs	r2, r0, #0
 801a194:	9207      	str	r2, [sp, #28]
 801a196:	f040 811b 	bne.w	801a3d0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 801a19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a19c:	7c1b      	ldrb	r3, [r3, #16]
 801a19e:	2b30      	cmp	r3, #48	; 0x30
 801a1a0:	f040 8118 	bne.w	801a3d4 <http_recv+0x3c4>
 801a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1a6:	7c5b      	ldrb	r3, [r3, #17]
 801a1a8:	2b0d      	cmp	r3, #13
 801a1aa:	f040 8113 	bne.w	801a3d4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1ae:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 801a1b0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1b2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1b4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1b6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 801a1b8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 801a3b4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 801a1bc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1c0:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1c4:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 801a1c6:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1c8:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1ca:	9a05      	ldr	r2, [sp, #20]
 801a1cc:	bfb4      	ite	lt
 801a1ce:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801a1d0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801a1d4:	429f      	cmp	r7, r3
 801a1d6:	bfa8      	it	ge
 801a1d8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1da:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 801a1dc:	2700      	movs	r7, #0
 801a1de:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 801a1e2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801a1e4:	9807      	ldr	r0, [sp, #28]
 801a1e6:	f8cd b004 	str.w	fp, [sp, #4]
 801a1ea:	9000      	str	r0, [sp, #0]
 801a1ec:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 801a1f0:	9003      	str	r0, [sp, #12]
 801a1f2:	203f      	movs	r0, #63	; 0x3f
 801a1f4:	9002      	str	r0, [sp, #8]
 801a1f6:	4628      	mov	r0, r5
 801a1f8:	f7ee fdda 	bl	8008db0 <httpd_post_begin>
          if (err == ERR_OK) {
 801a1fc:	2800      	cmp	r0, #0
 801a1fe:	f040 80f7 	bne.w	801a3f0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 801a202:	9807      	ldr	r0, [sp, #28]
 801a204:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801a206:	f1ba 0f00 	cmp.w	sl, #0
 801a20a:	f000 80d5 	beq.w	801a3b8 <http_recv+0x3a8>
 801a20e:	4652      	mov	r2, sl
 801a210:	e005      	b.n	801a21e <http_recv+0x20e>
              q = q->next;
 801a212:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 801a214:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a218:	2a00      	cmp	r2, #0
 801a21a:	f000 80cd 	beq.w	801a3b8 <http_recv+0x3a8>
 801a21e:	8953      	ldrh	r3, [r2, #10]
 801a220:	4543      	cmp	r3, r8
              start_offset -= q->len;
 801a222:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 801a226:	d9f4      	bls.n	801a212 <http_recv+0x202>
 801a228:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 801a22a:	4641      	mov	r1, r8
 801a22c:	4610      	mov	r0, r2
 801a22e:	f002 f93b 	bl	801c4a8 <pbuf_remove_header>
              pbuf_ref(q);
 801a232:	4650      	mov	r0, sl
 801a234:	f002 f9e2 	bl	801c5fc <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 801a238:	4651      	mov	r1, sl
 801a23a:	4628      	mov	r0, r5
 801a23c:	f7ff fa98 	bl	8019770 <http_post_rxpbuf>
 801a240:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 801a242:	2f00      	cmp	r7, #0
 801a244:	f000 80ba 	beq.w	801a3bc <http_recv+0x3ac>
              *sp1 = ' ';
 801a248:	2320      	movs	r3, #32
 801a24a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 801a24c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 801a250:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a252:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a254:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a258:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a25a:	d022      	beq.n	801a2a2 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a25c:	2f00      	cmp	r7, #0
 801a25e:	d048      	beq.n	801a2f2 <http_recv+0x2e2>
 801a260:	1d7a      	adds	r2, r7, #5
 801a262:	f43f aeeb 	beq.w	801a03c <http_recv+0x2c>
 801a266:	f027 0308 	bic.w	r3, r7, #8
 801a26a:	b25b      	sxtb	r3, r3
 801a26c:	3310      	adds	r3, #16
 801a26e:	d12e      	bne.n	801a2ce <http_recv+0x2be>
        if (hs->req != NULL) {
 801a270:	6a28      	ldr	r0, [r5, #32]
 801a272:	b3a0      	cbz	r0, 801a2de <http_recv+0x2ce>
          pbuf_free(hs->req);
 801a274:	f002 f9a4 	bl	801c5c0 <pbuf_free>
          hs->req = NULL;
 801a278:	2300      	movs	r3, #0
 801a27a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a27c:	4620      	mov	r0, r4
 801a27e:	f002 f99f 	bl	801c5c0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a282:	b1df      	cbz	r7, 801a2bc <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 801a284:	3710      	adds	r7, #16
 801a286:	f43f aee8 	beq.w	801a05a <http_recv+0x4a>
 801a28a:	e6ea      	b.n	801a062 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 801a28c:	6a28      	ldr	r0, [r5, #32]
 801a28e:	f002 f9ab 	bl	801c5e8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 801a292:	6a2b      	ldr	r3, [r5, #32]
 801a294:	891b      	ldrh	r3, [r3, #8]
 801a296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a29a:	d202      	bcs.n	801a2a2 <http_recv+0x292>
 801a29c:	2805      	cmp	r0, #5
 801a29e:	f67f aecd 	bls.w	801a03c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 801a2a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	f7ff fa88 	bl	80197bc <http_find_error_file>
 801a2ac:	4607      	mov	r7, r0
 801a2ae:	e7d5      	b.n	801a25c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 801a2b0:	4621      	mov	r1, r4
 801a2b2:	4628      	mov	r0, r5
    hs->retries = 0;
 801a2b4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801a2b8:	f7ff fa5a 	bl	8019770 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 801a2bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	f47f aecf 	bne.w	801a062 <http_recv+0x52>
      http_send(pcb, hs);
 801a2c4:	4629      	mov	r1, r5
 801a2c6:	4630      	mov	r0, r6
 801a2c8:	f7ff fb5a 	bl	8019980 <http_send>
 801a2cc:	e6c9      	b.n	801a062 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801a2ce:	4b34      	ldr	r3, [pc, #208]	; (801a3a0 <http_recv+0x390>)
 801a2d0:	f640 2204 	movw	r2, #2564	; 0xa04
 801a2d4:	4933      	ldr	r1, [pc, #204]	; (801a3a4 <http_recv+0x394>)
 801a2d6:	4834      	ldr	r0, [pc, #208]	; (801a3a8 <http_recv+0x398>)
 801a2d8:	f00c fa3c 	bl	8026754 <iprintf>
 801a2dc:	e7c8      	b.n	801a270 <http_recv+0x260>
      pbuf_free(p);
 801a2de:	4620      	mov	r0, r4
 801a2e0:	f002 f96e 	bl	801c5c0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a2e4:	e7ce      	b.n	801a284 <http_recv+0x274>
    hs->req = p;
 801a2e6:	622c      	str	r4, [r5, #32]
 801a2e8:	e6ca      	b.n	801a080 <http_recv+0x70>
    data = (char *)p->payload;
 801a2ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 801a2ee:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 801a2f0:	e6da      	b.n	801a0a8 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 801a2f2:	1d7b      	adds	r3, r7, #5
 801a2f4:	f43f aea2 	beq.w	801a03c <http_recv+0x2c>
        if (hs->req != NULL) {
 801a2f8:	6a28      	ldr	r0, [r5, #32]
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	d0be      	beq.n	801a27c <http_recv+0x26c>
 801a2fe:	e7b9      	b.n	801a274 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 801a300:	2205      	movs	r2, #5
 801a302:	492a      	ldr	r1, [pc, #168]	; (801a3ac <http_recv+0x39c>)
 801a304:	4640      	mov	r0, r8
 801a306:	f00d fa07 	bl	8027718 <strncmp>
 801a30a:	9005      	str	r0, [sp, #20]
 801a30c:	b9d8      	cbnz	r0, 801a346 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801a30e:	f1a7 0a05 	sub.w	sl, r7, #5
 801a312:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 801a316:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a31a:	491e      	ldr	r1, [pc, #120]	; (801a394 <http_recv+0x384>)
 801a31c:	fa1f fa8a 	uxth.w	sl, sl
 801a320:	4658      	mov	r0, fp
        sp1 = data + 4;
 801a322:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801a324:	4652      	mov	r2, sl
 801a326:	f000 f915 	bl	801a554 <lwip_strnstr>
      if (sp2 == NULL) {
 801a32a:	4681      	mov	r9, r0
 801a32c:	2800      	cmp	r0, #0
 801a32e:	d059      	beq.n	801a3e4 <http_recv+0x3d4>
        is_post = 1;
 801a330:	f04f 0a01 	mov.w	sl, #1
 801a334:	9b05      	ldr	r3, [sp, #20]
 801a336:	e6dd      	b.n	801a0f4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a338:	4914      	ldr	r1, [pc, #80]	; (801a38c <http_recv+0x37c>)
 801a33a:	4658      	mov	r0, fp
 801a33c:	f000 f90a 	bl	801a554 <lwip_strnstr>
        is_09 = 1;
 801a340:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a342:	4681      	mov	r9, r0
        if (is_post) {
 801a344:	e6d6      	b.n	801a0f4 <http_recv+0xe4>
        data[4] = 0;
 801a346:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 801a348:	f240 11f5 	movw	r1, #501	; 0x1f5
 801a34c:	4628      	mov	r0, r5
        data[4] = 0;
 801a34e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 801a352:	f7ff fa33 	bl	80197bc <http_find_error_file>
 801a356:	4607      	mov	r7, r0
 801a358:	e780      	b.n	801a25c <http_recv+0x24c>
        if (hs->req != NULL) {
 801a35a:	2800      	cmp	r0, #0
 801a35c:	f43f ae6e 	beq.w	801a03c <http_recv+0x2c>
 801a360:	f06f 0707 	mvn.w	r7, #7
 801a364:	e786      	b.n	801a274 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 801a366:	461a      	mov	r2, r3
 801a368:	4659      	mov	r1, fp
 801a36a:	4628      	mov	r0, r5
 801a36c:	f7ff f910 	bl	8019590 <http_find_file>
 801a370:	4607      	mov	r7, r0
 801a372:	e773      	b.n	801a25c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801a374:	463a      	mov	r2, r7
 801a376:	490e      	ldr	r1, [pc, #56]	; (801a3b0 <http_recv+0x3a0>)
 801a378:	4640      	mov	r0, r8
 801a37a:	f000 f8eb 	bl	801a554 <lwip_strnstr>
 801a37e:	9b05      	ldr	r3, [sp, #20]
 801a380:	2800      	cmp	r0, #0
 801a382:	d047      	beq.n	801a414 <http_recv+0x404>
            hs->keepalive = 1;
 801a384:	2001      	movs	r0, #1
 801a386:	e6cb      	b.n	801a120 <http_recv+0x110>
 801a388:	2001ea10 	.word	0x2001ea10
 801a38c:	0802b570 	.word	0x0802b570
 801a390:	08044934 	.word	0x08044934
 801a394:	0802de50 	.word	0x0802de50
 801a398:	0802b6ac 	.word	0x0802b6ac
 801a39c:	0802b6b4 	.word	0x0802b6b4
 801a3a0:	080447b4 	.word	0x080447b4
 801a3a4:	08044974 	.word	0x08044974
 801a3a8:	0802b44c 	.word	0x0802b44c
 801a3ac:	0804493c 	.word	0x0804493c
 801a3b0:	08044944 	.word	0x08044944
 801a3b4:	2001e9cc 	.word	0x2001e9cc
            } else if (hs->post_content_len_left == 0) {
 801a3b8:	9b07      	ldr	r3, [sp, #28]
 801a3ba:	b303      	cbz	r3, 801a3fe <http_recv+0x3ee>
        if (hs->req != NULL) {
 801a3bc:	6a28      	ldr	r0, [r5, #32]
 801a3be:	b398      	cbz	r0, 801a428 <http_recv+0x418>
          pbuf_free(hs->req);
 801a3c0:	f002 f8fe 	bl	801c5c0 <pbuf_free>
          hs->req = NULL;
 801a3c4:	2300      	movs	r3, #0
      pbuf_free(p);
 801a3c6:	4620      	mov	r0, r4
          hs->req = NULL;
 801a3c8:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801a3ca:	f002 f8f9 	bl	801c5c0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a3ce:	e775      	b.n	801a2bc <http_recv+0x2ac>
        if (content_len >= 0) {
 801a3d0:	f6bf aeed 	bge.w	801a1ae <http_recv+0x19e>
              *sp1 = ' ';
 801a3d4:	2320      	movs	r3, #32
 801a3d6:	9a04      	ldr	r2, [sp, #16]
 801a3d8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a3da:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a3dc:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a3e0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801a3e2:	e75e      	b.n	801a2a2 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801a3e4:	4652      	mov	r2, sl
 801a3e6:	4658      	mov	r0, fp
 801a3e8:	4915      	ldr	r1, [pc, #84]	; (801a440 <http_recv+0x430>)
 801a3ea:	f000 f8b3 	bl	801a554 <lwip_strnstr>
        if (is_post) {
 801a3ee:	e758      	b.n	801a2a2 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 801a3f0:	463a      	mov	r2, r7
 801a3f2:	4659      	mov	r1, fp
 801a3f4:	4628      	mov	r0, r5
 801a3f6:	f7ff f8cb 	bl	8019590 <http_find_file>
 801a3fa:	4607      	mov	r7, r0
 801a3fc:	e721      	b.n	801a242 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801a3fe:	9907      	ldr	r1, [sp, #28]
 801a400:	2241      	movs	r2, #65	; 0x41
 801a402:	4608      	mov	r0, r1
 801a404:	f001 ff0a 	bl	801c21c <pbuf_alloc>
 801a408:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801a40a:	4628      	mov	r0, r5
 801a40c:	f7ff f9b0 	bl	8019770 <http_post_rxpbuf>
 801a410:	4607      	mov	r7, r0
 801a412:	e716      	b.n	801a242 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801a414:	463a      	mov	r2, r7
 801a416:	490b      	ldr	r1, [pc, #44]	; (801a444 <http_recv+0x434>)
 801a418:	4640      	mov	r0, r8
 801a41a:	f000 f89b 	bl	801a554 <lwip_strnstr>
            hs->keepalive = 1;
 801a41e:	3800      	subs	r0, #0
 801a420:	9b05      	ldr	r3, [sp, #20]
 801a422:	bf18      	it	ne
 801a424:	2001      	movne	r0, #1
 801a426:	e67b      	b.n	801a120 <http_recv+0x110>
      pbuf_free(p);
 801a428:	4620      	mov	r0, r4
 801a42a:	f002 f8c9 	bl	801c5c0 <pbuf_free>
      if (parsed == ERR_OK) {
 801a42e:	e745      	b.n	801a2bc <http_recv+0x2ac>
              *sp1 = ' ';
 801a430:	2320      	movs	r3, #32
 801a432:	9a04      	ldr	r2, [sp, #16]
 801a434:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801a436:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801a438:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801a43c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801a43e:	e5fd      	b.n	801a03c <http_recv+0x2c>
 801a440:	0802b570 	.word	0x0802b570
 801a444:	0804495c 	.word	0x0804495c

0801a448 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801a448:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801a44a:	202e      	movs	r0, #46	; 0x2e
 801a44c:	f003 fc60 	bl	801dd10 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a450:	b358      	cbz	r0, 801a4aa <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801a452:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801a454:	2101      	movs	r1, #1
 801a456:	f002 fe3d 	bl	801d0d4 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801a45a:	2250      	movs	r2, #80	; 0x50
 801a45c:	4917      	ldr	r1, [pc, #92]	; (801a4bc <httpd_init+0x74>)
 801a45e:	4620      	mov	r0, r4
 801a460:	f002 fc0c 	bl	801cc7c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a464:	b958      	cbnz	r0, 801a47e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801a466:	4620      	mov	r0, r4
 801a468:	21ff      	movs	r1, #255	; 0xff
 801a46a:	f002 fce9 	bl	801ce40 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a46e:	4604      	mov	r4, r0
 801a470:	b198      	cbz	r0, 801a49a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 801a472:	4620      	mov	r0, r4
 801a474:	4912      	ldr	r1, [pc, #72]	; (801a4c0 <httpd_init+0x78>)
}
 801a476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801a47a:	f002 beb9 	b.w	801d1f0 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801a47e:	4b11      	ldr	r3, [pc, #68]	; (801a4c4 <httpd_init+0x7c>)
 801a480:	f640 2257 	movw	r2, #2647	; 0xa57
 801a484:	4910      	ldr	r1, [pc, #64]	; (801a4c8 <httpd_init+0x80>)
 801a486:	4811      	ldr	r0, [pc, #68]	; (801a4cc <httpd_init+0x84>)
 801a488:	f00c f964 	bl	8026754 <iprintf>
    pcb = altcp_listen(pcb);
 801a48c:	4620      	mov	r0, r4
 801a48e:	21ff      	movs	r1, #255	; 0xff
 801a490:	f002 fcd6 	bl	801ce40 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801a494:	4604      	mov	r4, r0
 801a496:	2800      	cmp	r0, #0
 801a498:	d1eb      	bne.n	801a472 <httpd_init+0x2a>
 801a49a:	4b0a      	ldr	r3, [pc, #40]	; (801a4c4 <httpd_init+0x7c>)
 801a49c:	f640 2259 	movw	r2, #2649	; 0xa59
 801a4a0:	490b      	ldr	r1, [pc, #44]	; (801a4d0 <httpd_init+0x88>)
 801a4a2:	480a      	ldr	r0, [pc, #40]	; (801a4cc <httpd_init+0x84>)
 801a4a4:	f00c f956 	bl	8026754 <iprintf>
 801a4a8:	e7e3      	b.n	801a472 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a4aa:	4b06      	ldr	r3, [pc, #24]	; (801a4c4 <httpd_init+0x7c>)
 801a4ac:	f640 2272 	movw	r2, #2674	; 0xa72
 801a4b0:	4908      	ldr	r1, [pc, #32]	; (801a4d4 <httpd_init+0x8c>)
 801a4b2:	4806      	ldr	r0, [pc, #24]	; (801a4cc <httpd_init+0x84>)
}
 801a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801a4b8:	f00c b94c 	b.w	8026754 <iprintf>
 801a4bc:	080472d0 	.word	0x080472d0
 801a4c0:	08019339 	.word	0x08019339
 801a4c4:	080447b4 	.word	0x080447b4
 801a4c8:	080449bc 	.word	0x080449bc
 801a4cc:	0802b44c 	.word	0x0802b44c
 801a4d0:	080449d8 	.word	0x080449d8
 801a4d4:	080449a0 	.word	0x080449a0

0801a4d8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801a4d8:	b570      	push	{r4, r5, r6, lr}
 801a4da:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a4dc:	4606      	mov	r6, r0
{
 801a4de:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a4e0:	b1c8      	cbz	r0, 801a516 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 801a4e2:	4b11      	ldr	r3, [pc, #68]	; (801a528 <http_set_ssi_handler+0x50>)
 801a4e4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801a4e6:	b175      	cbz	r5, 801a506 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a4e8:	2c00      	cmp	r4, #0
 801a4ea:	dd04      	ble.n	801a4f6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801a4ec:	4a0f      	ldr	r2, [pc, #60]	; (801a52c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801a4ee:	4b10      	ldr	r3, [pc, #64]	; (801a530 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 801a4f0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 801a4f2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 801a4f4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801a4f6:	4b0f      	ldr	r3, [pc, #60]	; (801a534 <http_set_ssi_handler+0x5c>)
 801a4f8:	f640 229f 	movw	r2, #2719	; 0xa9f
 801a4fc:	490e      	ldr	r1, [pc, #56]	; (801a538 <http_set_ssi_handler+0x60>)
 801a4fe:	480f      	ldr	r0, [pc, #60]	; (801a53c <http_set_ssi_handler+0x64>)
 801a500:	f00c f928 	bl	8026754 <iprintf>
 801a504:	e7f2      	b.n	801a4ec <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 801a506:	4b0b      	ldr	r3, [pc, #44]	; (801a534 <http_set_ssi_handler+0x5c>)
 801a508:	f640 229e 	movw	r2, #2718	; 0xa9e
 801a50c:	490c      	ldr	r1, [pc, #48]	; (801a540 <http_set_ssi_handler+0x68>)
 801a50e:	480b      	ldr	r0, [pc, #44]	; (801a53c <http_set_ssi_handler+0x64>)
 801a510:	f00c f920 	bl	8026754 <iprintf>
 801a514:	e7e8      	b.n	801a4e8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801a516:	4b07      	ldr	r3, [pc, #28]	; (801a534 <http_set_ssi_handler+0x5c>)
 801a518:	f640 2297 	movw	r2, #2711	; 0xa97
 801a51c:	4909      	ldr	r1, [pc, #36]	; (801a544 <http_set_ssi_handler+0x6c>)
 801a51e:	4807      	ldr	r0, [pc, #28]	; (801a53c <http_set_ssi_handler+0x64>)
 801a520:	f00c f918 	bl	8026754 <iprintf>
 801a524:	e7dd      	b.n	801a4e2 <http_set_ssi_handler+0xa>
 801a526:	bf00      	nop
 801a528:	2001ee10 	.word	0x2001ee10
 801a52c:	2001ee14 	.word	0x2001ee14
 801a530:	2001ea0c 	.word	0x2001ea0c
 801a534:	080447b4 	.word	0x080447b4
 801a538:	08044a20 	.word	0x08044a20
 801a53c:	0802b44c 	.word	0x0802b44c
 801a540:	08044a10 	.word	0x08044a10
 801a544:	080449f8 	.word	0x080449f8

0801a548 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801a548:	ba40      	rev16	r0, r0
}
 801a54a:	b280      	uxth	r0, r0
 801a54c:	4770      	bx	lr
 801a54e:	bf00      	nop

0801a550 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 801a550:	ba00      	rev	r0, r0
 801a552:	4770      	bx	lr

0801a554 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a558:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801a55a:	4608      	mov	r0, r1
{
 801a55c:	4688      	mov	r8, r1
 801a55e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 801a560:	f7e5 fe78 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 801a564:	b1c0      	cbz	r0, 801a598 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a566:	4605      	mov	r5, r0
 801a568:	7820      	ldrb	r0, [r4, #0]
 801a56a:	b1b0      	cbz	r0, 801a59a <lwip_strnstr+0x46>
 801a56c:	4426      	add	r6, r4
 801a56e:	1962      	adds	r2, r4, r5
 801a570:	4296      	cmp	r6, r2
 801a572:	d314      	bcc.n	801a59e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a574:	f898 7000 	ldrb.w	r7, [r8]
 801a578:	e005      	b.n	801a586 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801a57a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801a57e:	1962      	adds	r2, r4, r5
 801a580:	b158      	cbz	r0, 801a59a <lwip_strnstr+0x46>
 801a582:	4296      	cmp	r6, r2
 801a584:	d30b      	bcc.n	801a59e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801a586:	4287      	cmp	r7, r0
 801a588:	d1f7      	bne.n	801a57a <lwip_strnstr+0x26>
 801a58a:	4620      	mov	r0, r4
 801a58c:	462a      	mov	r2, r5
 801a58e:	4641      	mov	r1, r8
 801a590:	f00d f8c2 	bl	8027718 <strncmp>
 801a594:	2800      	cmp	r0, #0
 801a596:	d1f0      	bne.n	801a57a <lwip_strnstr+0x26>
 801a598:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801a59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801a59e:	2000      	movs	r0, #0
}
 801a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a5a4 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 801a5a4:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a5a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a5ac:	4293      	cmp	r3, r2
 801a5ae:	d01c      	beq.n	801a5ea <lwip_stricmp+0x46>
 801a5b0:	f043 0c20 	orr.w	ip, r3, #32
{
 801a5b4:	b500      	push	{lr}
 801a5b6:	f042 0e20 	orr.w	lr, r2, #32
 801a5ba:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a5be:	2a19      	cmp	r2, #25
 801a5c0:	d810      	bhi.n	801a5e4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a5c2:	45f4      	cmp	ip, lr
 801a5c4:	d10e      	bne.n	801a5e4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801a5c6:	b1a3      	cbz	r3, 801a5f2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801a5c8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801a5cc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801a5d0:	4293      	cmp	r3, r2
 801a5d2:	d0f8      	beq.n	801a5c6 <lwip_stricmp+0x22>
 801a5d4:	f043 0c20 	orr.w	ip, r3, #32
 801a5d8:	f042 0e20 	orr.w	lr, r2, #32
 801a5dc:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a5e0:	2a19      	cmp	r2, #25
 801a5e2:	d9ee      	bls.n	801a5c2 <lwip_stricmp+0x1e>
        return 1;
 801a5e4:	2001      	movs	r0, #1
  return 0;
}
 801a5e6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d1da      	bne.n	801a5a4 <lwip_stricmp>
  return 0;
 801a5ee:	4618      	mov	r0, r3
}
 801a5f0:	4770      	bx	lr
  return 0;
 801a5f2:	4618      	mov	r0, r3
}
 801a5f4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a5f8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801a5f8:	4684      	mov	ip, r0
 801a5fa:	b570      	push	{r4, r5, r6, lr}
 801a5fc:	e004      	b.n	801a608 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801a5fe:	42b4      	cmp	r4, r6
 801a600:	d113      	bne.n	801a62a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 801a602:	42e8      	cmn	r0, r5
 801a604:	d013      	beq.n	801a62e <lwip_strnicmp+0x36>
 801a606:	b193      	cbz	r3, 801a62e <lwip_strnicmp+0x36>
    c1 = *str1++;
 801a608:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801a60c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 801a610:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a614:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 801a618:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801a61a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a61e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 801a622:	d0ee      	beq.n	801a602 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801a624:	f1be 0f19 	cmp.w	lr, #25
 801a628:	d9e9      	bls.n	801a5fe <lwip_strnicmp+0x6>
        return 1;
 801a62a:	2001      	movs	r0, #1
  return 0;
}
 801a62c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801a62e:	2000      	movs	r0, #0
}
 801a630:	bd70      	pop	{r4, r5, r6, pc}
 801a632:	bf00      	nop

0801a634 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 801a634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a638:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a63a:	4f24      	ldr	r7, [pc, #144]	; (801a6cc <dns_call_found+0x98>)
 801a63c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a640:	4c23      	ldr	r4, [pc, #140]	; (801a6d0 <dns_call_found+0x9c>)
{
 801a642:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a644:	012e      	lsls	r6, r5, #4
 801a646:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 801a64a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 801a64e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a652:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801a656:	6823      	ldr	r3, [r4, #0]
 801a658:	b143      	cbz	r3, 801a66c <dns_call_found+0x38>
 801a65a:	7a22      	ldrb	r2, [r4, #8]
 801a65c:	42aa      	cmp	r2, r5
 801a65e:	d105      	bne.n	801a66c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801a660:	6862      	ldr	r2, [r4, #4]
 801a662:	4651      	mov	r1, sl
 801a664:	4640      	mov	r0, r8
 801a666:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801a668:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a66c:	340c      	adds	r4, #12
 801a66e:	454c      	cmp	r4, r9
 801a670:	d1f1      	bne.n	801a656 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a672:	1973      	adds	r3, r6, r5
 801a674:	2400      	movs	r4, #0
 801a676:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801a67a:	4f14      	ldr	r7, [pc, #80]	; (801a6cc <dns_call_found+0x98>)
 801a67c:	7bd9      	ldrb	r1, [r3, #15]
 801a67e:	463a      	mov	r2, r7
    if (i == idx) {
 801a680:	b2e3      	uxtb	r3, r4
 801a682:	3401      	adds	r4, #1
 801a684:	429d      	cmp	r5, r3
 801a686:	d002      	beq.n	801a68e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801a688:	7a93      	ldrb	r3, [r2, #10]
 801a68a:	2b02      	cmp	r3, #2
 801a68c:	d015      	beq.n	801a6ba <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801a68e:	2c04      	cmp	r4, #4
 801a690:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801a694:	d1f4      	bne.n	801a680 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a696:	2903      	cmp	r1, #3
 801a698:	d80d      	bhi.n	801a6b6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a69a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a69c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801a6d4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a6a0:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801a6a4:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801a6a8:	f007 f860 	bl	802176c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a6b0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801a6b2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801a6b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801a6ba:	7bd3      	ldrb	r3, [r2, #15]
 801a6bc:	428b      	cmp	r3, r1
 801a6be:	d1e6      	bne.n	801a68e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 801a6c0:	4435      	add	r5, r6
 801a6c2:	2304      	movs	r3, #4
 801a6c4:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801a6c8:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801a6ca:	e7f4      	b.n	801a6b6 <dns_call_found+0x82>
 801a6cc:	2001ee68 	.word	0x2001ee68
 801a6d0:	2001ee2c 	.word	0x2001ee2c
 801a6d4:	2001ee1c 	.word	0x2001ee1c

0801a6d8 <dns_send.isra.0>:
dns_send(u8_t idx)
 801a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6dc:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801a6de:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6e0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 801a6e4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801a6e6:	9301      	str	r3, [sp, #4]
 801a6e8:	4b56      	ldr	r3, [pc, #344]	; (801a844 <dns_send.isra.0+0x16c>)
 801a6ea:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801a6ee:	7ae3      	ldrb	r3, [r4, #11]
 801a6f0:	2b01      	cmp	r3, #1
 801a6f2:	d907      	bls.n	801a704 <dns_send.isra.0+0x2c>
 801a6f4:	4b54      	ldr	r3, [pc, #336]	; (801a848 <dns_send.isra.0+0x170>)
 801a6f6:	f240 22fa 	movw	r2, #762	; 0x2fa
 801a6fa:	4954      	ldr	r1, [pc, #336]	; (801a84c <dns_send.isra.0+0x174>)
 801a6fc:	4854      	ldr	r0, [pc, #336]	; (801a850 <dns_send.isra.0+0x178>)
 801a6fe:	f00c f829 	bl	8026754 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801a702:	7ae3      	ldrb	r3, [r4, #11]
 801a704:	4a53      	ldr	r2, [pc, #332]	; (801a854 <dns_send.isra.0+0x17c>)
 801a706:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a70a:	2c00      	cmp	r4, #0
 801a70c:	f000 808b 	beq.w	801a826 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801a710:	9b01      	ldr	r3, [sp, #4]
 801a712:	4e4c      	ldr	r6, [pc, #304]	; (801a844 <dns_send.isra.0+0x16c>)
 801a714:	eb03 0409 	add.w	r4, r3, r9
 801a718:	0124      	lsls	r4, r4, #4
 801a71a:	f104 0510 	add.w	r5, r4, #16
 801a71e:	4435      	add	r5, r6
 801a720:	4628      	mov	r0, r5
 801a722:	f7e5 fd97 	bl	8000254 <strlen>
 801a726:	3012      	adds	r0, #18
 801a728:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a72c:	b281      	uxth	r1, r0
 801a72e:	2036      	movs	r0, #54	; 0x36
 801a730:	f001 fd74 	bl	801c21c <pbuf_alloc>
  if (p != NULL) {
 801a734:	4680      	mov	r8, r0
 801a736:	2800      	cmp	r0, #0
 801a738:	d06d      	beq.n	801a816 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801a73a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a73c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801a73e:	260c      	movs	r6, #12
    --hostname;
 801a740:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 801a742:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 801a744:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801a748:	9305      	str	r3, [sp, #20]
 801a74a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801a74e:	f7ff fefb 	bl	801a548 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 801a752:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 801a754:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a758:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801a75a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801a75e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a762:	4632      	mov	r2, r6
 801a764:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 801a766:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801a76a:	f002 f81d 	bl	801c7a8 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a76e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801a770:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a772:	2b2e      	cmp	r3, #46	; 0x2e
 801a774:	d052      	beq.n	801a81c <dns_send.isra.0+0x144>
 801a776:	2b00      	cmp	r3, #0
 801a778:	d050      	beq.n	801a81c <dns_send.isra.0+0x144>
      ++hostname;
 801a77a:	463d      	mov	r5, r7
 801a77c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801a780:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a782:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801a786:	2b2e      	cmp	r3, #46	; 0x2e
 801a788:	b2e4      	uxtb	r4, r4
 801a78a:	d001      	beq.n	801a790 <dns_send.isra.0+0xb8>
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d1f7      	bne.n	801a780 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 801a790:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 801a794:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 801a796:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801a79a:	4433      	add	r3, r6
 801a79c:	4553      	cmp	r3, sl
 801a79e:	dc37      	bgt.n	801a810 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 801a7a0:	4622      	mov	r2, r4
 801a7a2:	4631      	mov	r1, r6
 801a7a4:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a7a6:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 801a7a8:	f002 f8e4 	bl	801c974 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a7ac:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801a7ae:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a7b0:	465a      	mov	r2, fp
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	b29b      	uxth	r3, r3
 801a7b6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 801a7b8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801a7ba:	f002 f85b 	bl	801c874 <pbuf_take_at>
    } while (*hostname != 0);
 801a7be:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801a7c0:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801a7c2:	2a00      	cmp	r2, #0
 801a7c4:	d1d3      	bne.n	801a76e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 801a7c6:	4631      	mov	r1, r6
 801a7c8:	4640      	mov	r0, r8
 801a7ca:	f002 f8d3 	bl	801c974 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 801a7d2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7d4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801a7d6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7da:	4640      	mov	r0, r8
 801a7dc:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801a7de:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801a7e2:	2204      	movs	r2, #4
 801a7e4:	f002 f846 	bl	801c874 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 801a7e8:	9b01      	ldr	r3, [sp, #4]
 801a7ea:	4a16      	ldr	r2, [pc, #88]	; (801a844 <dns_send.isra.0+0x16c>)
 801a7ec:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7ee:	4919      	ldr	r1, [pc, #100]	; (801a854 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 801a7f0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7f2:	4b19      	ldr	r3, [pc, #100]	; (801a858 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 801a7f4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 801a7f8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801a7fc:	f89b 000f 	ldrb.w	r0, [fp, #15]
 801a800:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a804:	4641      	mov	r1, r8
 801a806:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a80a:	2335      	movs	r3, #53	; 0x35
 801a80c:	f006 ff0c 	bl	8021628 <udp_sendto>
    pbuf_free(p);
 801a810:	4640      	mov	r0, r8
 801a812:	f001 fed5 	bl	801c5c0 <pbuf_free>
}
 801a816:	b007      	add	sp, #28
 801a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a81c:	2300      	movs	r3, #0
      ++hostname;
 801a81e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801a820:	469b      	mov	fp, r3
 801a822:	461c      	mov	r4, r3
 801a824:	e7b9      	b.n	801a79a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 801a826:	4648      	mov	r0, r9
 801a828:	4621      	mov	r1, r4
 801a82a:	f7ff ff03 	bl	801a634 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801a82e:	9b01      	ldr	r3, [sp, #4]
 801a830:	444b      	add	r3, r9
 801a832:	4699      	mov	r9, r3
 801a834:	4b03      	ldr	r3, [pc, #12]	; (801a844 <dns_send.isra.0+0x16c>)
 801a836:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801a83a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801a83e:	b007      	add	sp, #28
 801a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a844:	2001ee68 	.word	0x2001ee68
 801a848:	08044af8 	.word	0x08044af8
 801a84c:	08044b28 	.word	0x08044b28
 801a850:	0802b44c 	.word	0x0802b44c
 801a854:	2001ee60 	.word	0x2001ee60
 801a858:	2001ee1c 	.word	0x2001ee1c

0801a85c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a85c:	2803      	cmp	r0, #3
{
 801a85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a862:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a864:	d846      	bhi.n	801a8f4 <dns_check_entry+0x98>

  switch (entry->state) {
 801a866:	4e3a      	ldr	r6, [pc, #232]	; (801a950 <dns_check_entry+0xf4>)
 801a868:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801a86c:	0125      	lsls	r5, r4, #4
 801a86e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801a872:	7a9b      	ldrb	r3, [r3, #10]
 801a874:	2b03      	cmp	r3, #3
 801a876:	d861      	bhi.n	801a93c <dns_check_entry+0xe0>
 801a878:	e8df f003 	tbb	[pc, r3]
 801a87c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a880:	192b      	adds	r3, r5, r4
 801a882:	011b      	lsls	r3, r3, #4
 801a884:	58f2      	ldr	r2, [r6, r3]
 801a886:	2a00      	cmp	r2, #0
 801a888:	d140      	bne.n	801a90c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801a88a:	442c      	add	r4, r5
 801a88c:	2300      	movs	r3, #0
 801a88e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a892:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 801a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a898:	4f2e      	ldr	r7, [pc, #184]	; (801a954 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801a89a:	f00b ffff 	bl	802689c <rand>
 801a89e:	4b2c      	ldr	r3, [pc, #176]	; (801a950 <dns_check_entry+0xf4>)
 801a8a0:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a8a2:	7a9a      	ldrb	r2, [r3, #10]
 801a8a4:	2a02      	cmp	r2, #2
 801a8a6:	d02d      	beq.n	801a904 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a8a8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a8ac:	429f      	cmp	r7, r3
 801a8ae:	d1f8      	bne.n	801a8a2 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 801a8b0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 801a8b2:	2202      	movs	r2, #2
      entry->tmr = 1;
 801a8b4:	2301      	movs	r3, #1
      err = dns_send(i);
 801a8b6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 801a8b8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801a8bc:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801a8be:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 801a8c0:	81b3      	strh	r3, [r6, #12]
}
 801a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 801a8c6:	f7ff bf07 	b.w	801a6d8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801a8ca:	192a      	adds	r2, r5, r4
 801a8cc:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 801a8d0:	7b13      	ldrb	r3, [r2, #12]
 801a8d2:	3b01      	subs	r3, #1
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	7313      	strb	r3, [r2, #12]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d1db      	bne.n	801a894 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801a8dc:	7b53      	ldrb	r3, [r2, #13]
 801a8de:	3301      	adds	r3, #1
 801a8e0:	b2db      	uxtb	r3, r3
 801a8e2:	2b04      	cmp	r3, #4
 801a8e4:	7353      	strb	r3, [r2, #13]
 801a8e6:	d016      	beq.n	801a916 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 801a8e8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801a8ea:	4620      	mov	r0, r4
}
 801a8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 801a8f0:	f7ff bef2 	b.w	801a6d8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801a8f4:	4b18      	ldr	r3, [pc, #96]	; (801a958 <dns_check_entry+0xfc>)
 801a8f6:	f240 421c 	movw	r2, #1052	; 0x41c
 801a8fa:	4918      	ldr	r1, [pc, #96]	; (801a95c <dns_check_entry+0x100>)
 801a8fc:	4818      	ldr	r0, [pc, #96]	; (801a960 <dns_check_entry+0x104>)
 801a8fe:	f00b ff29 	bl	8026754 <iprintf>
 801a902:	e7b0      	b.n	801a866 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801a904:	891a      	ldrh	r2, [r3, #8]
 801a906:	428a      	cmp	r2, r1
 801a908:	d1ce      	bne.n	801a8a8 <dns_check_entry+0x4c>
 801a90a:	e7c6      	b.n	801a89a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801a90c:	3a01      	subs	r2, #1
 801a90e:	50f2      	str	r2, [r6, r3]
 801a910:	2a00      	cmp	r2, #0
 801a912:	d0ba      	beq.n	801a88a <dns_check_entry+0x2e>
 801a914:	e7be      	b.n	801a894 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801a916:	7ad3      	ldrb	r3, [r2, #11]
 801a918:	b913      	cbnz	r3, 801a920 <dns_check_entry+0xc4>
 801a91a:	4b12      	ldr	r3, [pc, #72]	; (801a964 <dns_check_entry+0x108>)
 801a91c:	685b      	ldr	r3, [r3, #4]
 801a91e:	b94b      	cbnz	r3, 801a934 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 801a920:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 801a922:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 801a924:	2100      	movs	r1, #0
 801a926:	f7ff fe85 	bl	801a634 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801a92a:	2300      	movs	r3, #0
 801a92c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801a930:	72b3      	strb	r3, [r6, #10]
            break;
 801a932:	e7af      	b.n	801a894 <dns_check_entry+0x38>
            entry->server_idx++;
 801a934:	2301      	movs	r3, #1
 801a936:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 801a938:	8193      	strh	r3, [r2, #12]
 801a93a:	e7d6      	b.n	801a8ea <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a93c:	4b06      	ldr	r3, [pc, #24]	; (801a958 <dns_check_entry+0xfc>)
 801a93e:	f240 425b 	movw	r2, #1115	; 0x45b
 801a942:	4909      	ldr	r1, [pc, #36]	; (801a968 <dns_check_entry+0x10c>)
 801a944:	4806      	ldr	r0, [pc, #24]	; (801a960 <dns_check_entry+0x104>)
}
 801a946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801a94a:	f00b bf03 	b.w	8026754 <iprintf>
 801a94e:	bf00      	nop
 801a950:	2001ee68 	.word	0x2001ee68
 801a954:	2001f2a8 	.word	0x2001f2a8
 801a958:	08044af8 	.word	0x08044af8
 801a95c:	08044b40 	.word	0x08044b40
 801a960:	0802b44c 	.word	0x0802b44c
 801a964:	2001ee60 	.word	0x2001ee60
 801a968:	08044b5c 	.word	0x08044b5c

0801a96c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a970:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a972:	8912      	ldrh	r2, [r2, #8]
{
 801a974:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801a976:	2a0f      	cmp	r2, #15
 801a978:	d805      	bhi.n	801a986 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801a97a:	4620      	mov	r0, r4
 801a97c:	f001 fe20 	bl	801c5c0 <pbuf_free>
  return;
}
 801a980:	b00d      	add	sp, #52	; 0x34
 801a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 801a986:	4699      	mov	r9, r3
 801a988:	220c      	movs	r2, #12
 801a98a:	2300      	movs	r3, #0
 801a98c:	a906      	add	r1, sp, #24
 801a98e:	4620      	mov	r0, r4
 801a990:	f001 feba 	bl	801c708 <pbuf_copy_partial>
 801a994:	280c      	cmp	r0, #12
 801a996:	4605      	mov	r5, r0
 801a998:	d1ef      	bne.n	801a97a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801a99a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 801ac90 <dns_recv+0x324>
 801a99e:	2600      	movs	r6, #0
 801a9a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801a9a4:	f7ff fdd0 	bl	801a548 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a9a8:	4643      	mov	r3, r8
 801a9aa:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801a9ac:	7a9a      	ldrb	r2, [r3, #10]
 801a9ae:	2a02      	cmp	r2, #2
 801a9b0:	d008      	beq.n	801a9c4 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801a9b2:	3601      	adds	r6, #1
 801a9b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801a9b8:	2e04      	cmp	r6, #4
 801a9ba:	d0de      	beq.n	801a97a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801a9bc:	7a9a      	ldrb	r2, [r3, #10]
 801a9be:	b2f7      	uxtb	r7, r6
 801a9c0:	2a02      	cmp	r2, #2
 801a9c2:	d1f6      	bne.n	801a9b2 <dns_recv+0x46>
 801a9c4:	891a      	ldrh	r2, [r3, #8]
 801a9c6:	4282      	cmp	r2, r0
 801a9c8:	d1f3      	bne.n	801a9b2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801a9ca:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801a9ce:	f7ff fdbb 	bl	801a548 <lwip_htons>
 801a9d2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 801a9d4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801a9d8:	f7ff fdb6 	bl	801a548 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801a9dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 801a9e0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 801a9e2:	09db      	lsrs	r3, r3, #7
 801a9e4:	d0c9      	beq.n	801a97a <dns_recv+0xe>
 801a9e6:	f1ba 0f01 	cmp.w	sl, #1
 801a9ea:	d1c6      	bne.n	801a97a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801a9ec:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 801a9f0:	49a5      	ldr	r1, [pc, #660]	; (801ac88 <dns_recv+0x31c>)
 801a9f2:	f8d9 2000 	ldr.w	r2, [r9]
 801a9f6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801a9fa:	7adb      	ldrb	r3, [r3, #11]
 801a9fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d1ba      	bne.n	801a97a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801aa04:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801aa08:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa0c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 801ac94 <dns_recv+0x328>
 801aa10:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801aa14:	f103 0210 	add.w	r2, r3, #16
 801aa18:	9301      	str	r3, [sp, #4]
 801aa1a:	4442      	add	r2, r8
 801aa1c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801aa20:	462e      	mov	r6, r5
 801aa22:	4627      	mov	r7, r4
 801aa24:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 801aa26:	4631      	mov	r1, r6
 801aa28:	4638      	mov	r0, r7
 801aa2a:	f001 ff93 	bl	801c954 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	db2d      	blt.n	801aa8e <dns_recv+0x122>
 801aa32:	455e      	cmp	r6, fp
 801aa34:	d02b      	beq.n	801aa8e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 801aa36:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801aa3a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801aa3c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801aa3e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 801aa40:	d025      	beq.n	801aa8e <dns_recv+0x122>
      while (n > 0) {
 801aa42:	b330      	cbz	r0, 801aa92 <dns_recv+0x126>
 801aa44:	46aa      	mov	sl, r5
 801aa46:	182c      	adds	r4, r5, r0
 801aa48:	e01b      	b.n	801aa82 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa4a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801aa4e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa50:	f819 2000 	ldrb.w	r2, [r9, r0]
 801aa54:	4601      	mov	r1, r0
        ++query;
 801aa56:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa58:	f002 0203 	and.w	r2, r2, #3
 801aa5c:	2a01      	cmp	r2, #1
 801aa5e:	f819 2003 	ldrb.w	r2, [r9, r3]
 801aa62:	f002 0203 	and.w	r2, r2, #3
 801aa66:	bf08      	it	eq
 801aa68:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801aa6c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801aa6e:	2a01      	cmp	r2, #1
 801aa70:	bf08      	it	eq
 801aa72:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 801aa74:	455e      	cmp	r6, fp
        response_offset++;
 801aa76:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 801aa78:	d009      	beq.n	801aa8e <dns_recv+0x122>
 801aa7a:	4299      	cmp	r1, r3
 801aa7c:	d107      	bne.n	801aa8e <dns_recv+0x122>
      while (n > 0) {
 801aa7e:	4554      	cmp	r4, sl
 801aa80:	d007      	beq.n	801aa92 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 801aa82:	4631      	mov	r1, r6
 801aa84:	4638      	mov	r0, r7
 801aa86:	f001 ff65 	bl	801c954 <pbuf_try_get_at>
        if (c < 0) {
 801aa8a:	1e03      	subs	r3, r0, #0
 801aa8c:	dadd      	bge.n	801aa4a <dns_recv+0xde>
 801aa8e:	463c      	mov	r4, r7
 801aa90:	e773      	b.n	801a97a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 801aa92:	4631      	mov	r1, r6
 801aa94:	4638      	mov	r0, r7
 801aa96:	f001 ff5d 	bl	801c954 <pbuf_try_get_at>
    if (n < 0) {
 801aa9a:	2800      	cmp	r0, #0
      ++query;
 801aa9c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 801aaa0:	dbf5      	blt.n	801aa8e <dns_recv+0x122>
  } while (n != 0);
 801aaa2:	d1c0      	bne.n	801aa26 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 801aaa4:	4635      	mov	r5, r6
 801aaa6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801aaaa:	463c      	mov	r4, r7
 801aaac:	9e03      	ldr	r6, [sp, #12]
 801aaae:	454d      	cmp	r5, r9
 801aab0:	9f02      	ldr	r7, [sp, #8]
 801aab2:	f43f af62 	beq.w	801a97a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 801aab6:	f105 0a01 	add.w	sl, r5, #1
 801aaba:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801aabe:	45ca      	cmp	sl, r9
 801aac0:	f43f af5b 	beq.w	801a97a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 801aac4:	4653      	mov	r3, sl
 801aac6:	2204      	movs	r2, #4
 801aac8:	a904      	add	r1, sp, #16
 801aaca:	4620      	mov	r0, r4
 801aacc:	f001 fe1c 	bl	801c708 <pbuf_copy_partial>
 801aad0:	2804      	cmp	r0, #4
 801aad2:	f47f af52 	bne.w	801a97a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 801aad6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aade:	f47f af4c 	bne.w	801a97a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 801aae2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 801aae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aaea:	f47f af46 	bne.w	801a97a <dns_recv+0xe>
 801aaee:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 801aaf2:	459a      	cmp	sl, r3
 801aaf4:	f63f af41 	bhi.w	801a97a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801aaf8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801aafc:	071b      	lsls	r3, r3, #28
 801aafe:	d017      	beq.n	801ab30 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801ab00:	f44f 7388 	mov.w	r3, #272	; 0x110
 801ab04:	fb03 8306 	mla	r3, r3, r6, r8
 801ab08:	7adb      	ldrb	r3, [r3, #11]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	f040 80ae 	bne.w	801ac6c <dns_recv+0x300>
 801ab10:	4b5d      	ldr	r3, [pc, #372]	; (801ac88 <dns_recv+0x31c>)
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	f000 80a9 	beq.w	801ac6c <dns_recv+0x300>
            entry->tmr     = 1;
 801ab1a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801ab1e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 801ab20:	fb03 8606 	mla	r6, r3, r6, r8
 801ab24:	f240 3301 	movw	r3, #769	; 0x301
 801ab28:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801ab2a:	f7ff fe97 	bl	801a85c <dns_check_entry>
            goto ignore_packet;
 801ab2e:	e724      	b.n	801a97a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801ab30:	3505      	adds	r5, #5
 801ab32:	f8dd a000 	ldr.w	sl, [sp]
 801ab36:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 801ab38:	f1ba 0f00 	cmp.w	sl, #0
 801ab3c:	f000 8096 	beq.w	801ac6c <dns_recv+0x300>
 801ab40:	8923      	ldrh	r3, [r4, #8]
 801ab42:	42ab      	cmp	r3, r5
 801ab44:	d80b      	bhi.n	801ab5e <dns_recv+0x1f2>
 801ab46:	e091      	b.n	801ac6c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 801ab48:	8922      	ldrh	r2, [r4, #8]
 801ab4a:	4293      	cmp	r3, r2
 801ab4c:	f6bf af15 	bge.w	801a97a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 801ab50:	4629      	mov	r1, r5
 801ab52:	f001 feff 	bl	801c954 <pbuf_try_get_at>
    if (n < 0) {
 801ab56:	2800      	cmp	r0, #0
 801ab58:	f6ff af0f 	blt.w	801a97a <dns_recv+0xe>
  } while (n != 0);
 801ab5c:	d017      	beq.n	801ab8e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801ab5e:	4629      	mov	r1, r5
 801ab60:	4620      	mov	r0, r4
 801ab62:	f001 fef7 	bl	801c954 <pbuf_try_get_at>
 801ab66:	f105 0b01 	add.w	fp, r5, #1
 801ab6a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801ab6c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801ab6e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 801ab72:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 801ab74:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 801ab78:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801ab7a:	f6ff aefe 	blt.w	801a97a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801ab7e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 801ab80:	f1bb 0f00 	cmp.w	fp, #0
 801ab84:	f43f aef9 	beq.w	801a97a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 801ab88:	2ac0      	cmp	r2, #192	; 0xc0
 801ab8a:	d1dd      	bne.n	801ab48 <dns_recv+0x1dc>
 801ab8c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801ab8e:	454d      	cmp	r5, r9
 801ab90:	f43f aef3 	beq.w	801a97a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 801ab94:	f105 0b01 	add.w	fp, r5, #1
 801ab98:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801ab9c:	45cb      	cmp	fp, r9
 801ab9e:	f43f aeec 	beq.w	801a97a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801aba2:	465b      	mov	r3, fp
 801aba4:	220a      	movs	r2, #10
 801aba6:	a909      	add	r1, sp, #36	; 0x24
 801aba8:	4620      	mov	r0, r4
 801abaa:	f001 fdad 	bl	801c708 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801abae:	280a      	cmp	r0, #10
 801abb0:	f47f aee3 	bne.w	801a97a <dns_recv+0xe>
 801abb4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 801abb8:	459b      	cmp	fp, r3
 801abba:	f63f aede 	bhi.w	801a97a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abbe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801abc2:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801abc8:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801abca:	d013      	beq.n	801abf4 <dns_recv+0x288>
 801abcc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 801abd0:	f7ff fcba 	bl	801a548 <lwip_htons>
 801abd4:	4428      	add	r0, r5
 801abd6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801abda:	f6bf aece 	bge.w	801a97a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abde:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 801abe2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abe6:	f7ff fcaf 	bl	801a548 <lwip_htons>
 801abea:	4405      	add	r5, r0
            --nanswers;
 801abec:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801abf0:	b2ad      	uxth	r5, r5
            --nanswers;
 801abf2:	e7a1      	b.n	801ab38 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 801abf4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801abf8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801abfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac00:	d1e6      	bne.n	801abd0 <dns_recv+0x264>
 801ac02:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ac06:	d1e3      	bne.n	801abd0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 801ac08:	462b      	mov	r3, r5
 801ac0a:	2204      	movs	r2, #4
 801ac0c:	a905      	add	r1, sp, #20
 801ac0e:	4620      	mov	r0, r4
 801ac10:	f001 fd7a 	bl	801c708 <pbuf_copy_partial>
 801ac14:	2804      	cmp	r0, #4
 801ac16:	f47f aeb0 	bne.w	801a97a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801ac1a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801ac1e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801ac20:	fb03 f606 	mul.w	r6, r3, r6
 801ac24:	9b05      	ldr	r3, [sp, #20]
 801ac26:	eb08 0406 	add.w	r4, r8, r6
 801ac2a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801ac2c:	f001 fcc8 	bl	801c5c0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801ac30:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac32:	f7ff fc8d 	bl	801a550 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 801ac36:	4a15      	ldr	r2, [pc, #84]	; (801ac8c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801ac38:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801ac3a:	9901      	ldr	r1, [sp, #4]
 801ac3c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801ac3e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801ac40:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 801ac44:	bf28      	it	cs
 801ac46:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 801ac48:	4441      	add	r1, r8
  entry->ttl = ttl;
 801ac4a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801ac4e:	2303      	movs	r3, #3
 801ac50:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 801ac52:	f7ff fcef 	bl	801a634 <dns_call_found>
  if (entry->ttl == 0) {
 801ac56:	f858 3006 	ldr.w	r3, [r8, r6]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	f47f ae90 	bne.w	801a980 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 801ac60:	7aa2      	ldrb	r2, [r4, #10]
 801ac62:	2a03      	cmp	r2, #3
 801ac64:	f47f ae8c 	bne.w	801a980 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 801ac68:	72a3      	strb	r3, [r4, #10]
                  return;
 801ac6a:	e689      	b.n	801a980 <dns_recv+0x14>
        pbuf_free(p);
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	f001 fca7 	bl	801c5c0 <pbuf_free>
        dns_call_found(i, NULL);
 801ac72:	2100      	movs	r1, #0
 801ac74:	4638      	mov	r0, r7
 801ac76:	f7ff fcdd 	bl	801a634 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801ac7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801ac7e:	2200      	movs	r2, #0
 801ac80:	fb03 8606 	mla	r6, r3, r6, r8
 801ac84:	72b2      	strb	r2, [r6, #10]
        return;
 801ac86:	e67b      	b.n	801a980 <dns_recv+0x14>
 801ac88:	2001ee60 	.word	0x2001ee60
 801ac8c:	00093a80 	.word	0x00093a80
 801ac90:	2001ee68 	.word	0x2001ee68
 801ac94:	0804752d 	.word	0x0804752d

0801ac98 <dns_init>:
}
 801ac98:	4770      	bx	lr
 801ac9a:	bf00      	nop

0801ac9c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801ac9c:	2801      	cmp	r0, #1
 801ac9e:	d900      	bls.n	801aca2 <dns_setserver+0x6>
}
 801aca0:	4770      	bx	lr
    if (dnsserver != NULL) {
 801aca2:	b121      	cbz	r1, 801acae <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801aca4:	4b05      	ldr	r3, [pc, #20]	; (801acbc <dns_setserver+0x20>)
 801aca6:	680a      	ldr	r2, [r1, #0]
 801aca8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801acac:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801acae:	4a04      	ldr	r2, [pc, #16]	; (801acc0 <dns_setserver+0x24>)
 801acb0:	4b02      	ldr	r3, [pc, #8]	; (801acbc <dns_setserver+0x20>)
 801acb2:	6812      	ldr	r2, [r2, #0]
 801acb4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 801acb8:	4770      	bx	lr
 801acba:	bf00      	nop
 801acbc:	2001ee60 	.word	0x2001ee60
 801acc0:	080472d0 	.word	0x080472d0

0801acc4 <dns_tmr>:
{
 801acc4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 801acc6:	2000      	movs	r0, #0
 801acc8:	f7ff fdc8 	bl	801a85c <dns_check_entry>
 801accc:	2001      	movs	r0, #1
 801acce:	f7ff fdc5 	bl	801a85c <dns_check_entry>
 801acd2:	2002      	movs	r0, #2
 801acd4:	f7ff fdc2 	bl	801a85c <dns_check_entry>
 801acd8:	2003      	movs	r0, #3
}
 801acda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801acde:	f7ff bdbd 	b.w	801a85c <dns_check_entry>
 801ace2:	bf00      	nop

0801ace4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 801ace4:	2900      	cmp	r1, #0
 801ace6:	f000 812e 	beq.w	801af46 <dns_gethostbyname_addrtype+0x262>
{
 801acea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801acee:	fab0 f780 	clz	r7, r0
{
 801acf2:	b083      	sub	sp, #12
 801acf4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 801acf6:	097f      	lsrs	r7, r7, #5
 801acf8:	2800      	cmp	r0, #0
 801acfa:	f000 8103 	beq.w	801af04 <dns_gethostbyname_addrtype+0x220>
 801acfe:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 801ad00:	7803      	ldrb	r3, [r0, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	f000 80fe 	beq.w	801af04 <dns_gethostbyname_addrtype+0x220>
 801ad08:	4615      	mov	r5, r2
 801ad0a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801ad0c:	f7e5 faa2 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ad10:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 801ad12:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 801ad14:	f200 80f6 	bhi.w	801af04 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 801ad18:	4641      	mov	r1, r8
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f009 fa46 	bl	80241ac <ip4addr_aton>
 801ad20:	b118      	cbz	r0, 801ad2a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801ad22:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801ad24:	b003      	add	sp, #12
 801ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2a:	4f88      	ldr	r7, [pc, #544]	; (801af4c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801ad2c:	4604      	mov	r4, r0
 801ad2e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801ad30:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 801ad34:	2b03      	cmp	r3, #3
 801ad36:	d03a      	beq.n	801adae <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad38:	3401      	adds	r4, #1
 801ad3a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801ad3e:	2c04      	cmp	r4, #4
 801ad40:	d1f6      	bne.n	801ad30 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 801ad42:	4b83      	ldr	r3, [pc, #524]	; (801af50 <dns_gethostbyname_addrtype+0x26c>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	f000 80f6 	beq.w	801af38 <dns_gethostbyname_addrtype+0x254>
 801ad4c:	2400      	movs	r4, #0
 801ad4e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801af5c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801ad52:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 801ad56:	fa5f f884 	uxtb.w	r8, r4
 801ad5a:	2b02      	cmp	r3, #2
 801ad5c:	d040      	beq.n	801ade0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801ad5e:	3401      	adds	r4, #1
 801ad60:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801ad64:	2c04      	cmp	r4, #4
 801ad66:	d1f4      	bne.n	801ad52 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ad68:	4a7a      	ldr	r2, [pc, #488]	; (801af54 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801ad6a:	4623      	mov	r3, r4
 801ad6c:	4f7a      	ldr	r7, [pc, #488]	; (801af58 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801ad6e:	2400      	movs	r4, #0
 801ad70:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 801ad72:	46a4      	mov	ip, r4
 801ad74:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 801ad76:	7a90      	ldrb	r0, [r2, #10]
 801ad78:	fa5f f884 	uxtb.w	r8, r4
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	d041      	beq.n	801ae04 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 801ad80:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad82:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 801ad86:	d023      	beq.n	801add0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801ad88:	2c04      	cmp	r4, #4
 801ad8a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801ad8e:	d1f2      	bne.n	801ad76 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 801ad90:	2b04      	cmp	r3, #4
 801ad92:	d007      	beq.n	801ada4 <dns_gethostbyname_addrtype+0xc0>
 801ad94:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 801ad98:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801ad9c:	7aa2      	ldrb	r2, [r4, #10]
 801ad9e:	2a03      	cmp	r2, #3
 801ada0:	f000 80ae 	beq.w	801af00 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 801ada4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ada8:	b003      	add	sp, #12
 801adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801adae:	4651      	mov	r1, sl
 801adb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801adb4:	4630      	mov	r0, r6
 801adb6:	f7ff fc1f 	bl	801a5f8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801adba:	2800      	cmp	r0, #0
 801adbc:	d1bc      	bne.n	801ad38 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801adbe:	4b66      	ldr	r3, [pc, #408]	; (801af58 <dns_gethostbyname_addrtype+0x274>)
 801adc0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801adc4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801adc8:	6863      	ldr	r3, [r4, #4]
 801adca:	f8c8 3000 	str.w	r3, [r8]
 801adce:	e7a9      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801add0:	7b90      	ldrb	r0, [r2, #14]
 801add2:	1a08      	subs	r0, r1, r0
 801add4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 801add6:	4560      	cmp	r0, ip
 801add8:	d9d6      	bls.n	801ad88 <dns_gethostbyname_addrtype+0xa4>
 801adda:	4643      	mov	r3, r8
 801addc:	4684      	mov	ip, r0
 801adde:	e7d3      	b.n	801ad88 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801ade0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ade4:	4639      	mov	r1, r7
 801ade6:	4630      	mov	r0, r6
 801ade8:	f7ff fc06 	bl	801a5f8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801adec:	2800      	cmp	r0, #0
 801adee:	d1b6      	bne.n	801ad5e <dns_gethostbyname_addrtype+0x7a>
 801adf0:	4b5a      	ldr	r3, [pc, #360]	; (801af5c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 801adf2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801adf4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 801adf6:	2a00      	cmp	r2, #0
 801adf8:	f000 8091 	beq.w	801af1e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801adfc:	3001      	adds	r0, #1
 801adfe:	2804      	cmp	r0, #4
 801ae00:	d1f7      	bne.n	801adf2 <dns_gethostbyname_addrtype+0x10e>
 801ae02:	e7ac      	b.n	801ad5e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 801ae04:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ae08:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ae0c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801af5c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 801ae10:	2700      	movs	r7, #0
 801ae12:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 801ae14:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ae16:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 801ae18:	b12b      	cbz	r3, 801ae26 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801ae1a:	3701      	adds	r7, #1
 801ae1c:	2f04      	cmp	r7, #4
 801ae1e:	d1f9      	bne.n	801ae14 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 801ae20:	f04f 30ff 	mov.w	r0, #4294967295
 801ae24:	e7c0      	b.n	801ada8 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 801ae26:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801ae2a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801ae2c:	f104 0010 	add.w	r0, r4, #16
 801ae30:	4631      	mov	r1, r6
  req->found = found;
 801ae32:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 801ae36:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801ae3a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801ae3c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 801ae40:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 801ae44:	2201      	movs	r2, #1
 801ae46:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 801ae48:	464a      	mov	r2, r9
 801ae4a:	f00a fcbd 	bl	80257c8 <memcpy>
  entry->name[namelen] = 0;
 801ae4e:	44a1      	add	r9, r4
 801ae50:	9b01      	ldr	r3, [sp, #4]
 801ae52:	461d      	mov	r5, r3
 801ae54:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 801ae58:	007b      	lsls	r3, r7, #1
 801ae5a:	9301      	str	r3, [sp, #4]
 801ae5c:	4b40      	ldr	r3, [pc, #256]	; (801af60 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801ae5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae62:	b2ee      	uxtb	r6, r5
 801ae64:	b30a      	cbz	r2, 801aeaa <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801ae66:	3501      	adds	r5, #1
 801ae68:	2d04      	cmp	r5, #4
 801ae6a:	d1f8      	bne.n	801ae5e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae6c:	483d      	ldr	r0, [pc, #244]	; (801af64 <dns_gethostbyname_addrtype+0x280>)
 801ae6e:	2304      	movs	r3, #4
 801ae70:	7806      	ldrb	r6, [r0, #0]
 801ae72:	3601      	adds	r6, #1
 801ae74:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801ae76:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 801ae78:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801ae7a:	d901      	bls.n	801ae80 <dns_gethostbyname_addrtype+0x19c>
 801ae7c:	2600      	movs	r6, #0
      idx = 0;
 801ae7e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 801ae80:	4d37      	ldr	r5, [pc, #220]	; (801af60 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae82:	1c71      	adds	r1, r6, #1
 801ae84:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 801ae86:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ae8a:	2a00      	cmp	r2, #0
 801ae8c:	d13d      	bne.n	801af0a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801ae8e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ae92:	b2ce      	uxtb	r6, r1
 801ae94:	d1ef      	bne.n	801ae76 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 801ae96:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 801ae98:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 801ae9c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 801ae9e:	443a      	add	r2, r7
 801aea0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 801aea4:	2304      	movs	r3, #4
 801aea6:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 801aea8:	e73c      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801aeaa:	202e      	movs	r0, #46	; 0x2e
 801aeac:	f006 fc9c 	bl	80217e8 <udp_new_ip_type>
  if (pcb == NULL) {
 801aeb0:	4681      	mov	r9, r0
 801aeb2:	2800      	cmp	r0, #0
 801aeb4:	d043      	beq.n	801af3e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aeb6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801af6c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 801aeba:	f00b fcef 	bl	802689c <rand>
 801aebe:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 801aec0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801aec4:	d3f9      	bcc.n	801aeba <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 801aec6:	4659      	mov	r1, fp
 801aec8:	4648      	mov	r0, r9
 801aeca:	f006 fa29 	bl	8021320 <udp_bind>
  } while (err == ERR_USE);
 801aece:	f110 0f08 	cmn.w	r0, #8
 801aed2:	d0f2      	beq.n	801aeba <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 801aed4:	b9d8      	cbnz	r0, 801af0e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 801aed6:	4602      	mov	r2, r0
 801aed8:	4923      	ldr	r1, [pc, #140]	; (801af68 <dns_gethostbyname_addrtype+0x284>)
 801aeda:	4648      	mov	r0, r9
 801aedc:	f006 fc34 	bl	8021748 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 801aee0:	4b1f      	ldr	r3, [pc, #124]	; (801af60 <dns_gethostbyname_addrtype+0x27c>)
 801aee2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 801aee6:	4b1f      	ldr	r3, [pc, #124]	; (801af64 <dns_gethostbyname_addrtype+0x280>)
 801aee8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 801aeea:	4a1a      	ldr	r2, [pc, #104]	; (801af54 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 801aeec:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 801aeee:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 801aef0:	7813      	ldrb	r3, [r2, #0]
 801aef2:	3301      	adds	r3, #1
 801aef4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 801aef6:	f7ff fcb1 	bl	801a85c <dns_check_entry>
  return ERR_INPROGRESS;
 801aefa:	f06f 0004 	mvn.w	r0, #4
 801aefe:	e711      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 801af00:	4698      	mov	r8, r3
 801af02:	e783      	b.n	801ae0c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 801af04:	f06f 000f 	mvn.w	r0, #15
 801af08:	e70c      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801af0a:	7006      	strb	r6, [r0, #0]
      return idx;
 801af0c:	e7ed      	b.n	801aeea <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801af0e:	4648      	mov	r0, r9
 801af10:	f006 fc2c 	bl	802176c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 801af14:	2300      	movs	r3, #0
 801af16:	4a12      	ldr	r2, [pc, #72]	; (801af60 <dns_gethostbyname_addrtype+0x27c>)
 801af18:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801af1c:	e7a6      	b.n	801ae6c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801af1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af22:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 801af26:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801af2a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801af2e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 801af32:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 801af36:	e6f5      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 801af38:	f06f 0005 	mvn.w	r0, #5
 801af3c:	e6f2      	b.n	801ad24 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801af3e:	4b08      	ldr	r3, [pc, #32]	; (801af60 <dns_gethostbyname_addrtype+0x27c>)
 801af40:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801af44:	e792      	b.n	801ae6c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 801af46:	f06f 000f 	mvn.w	r0, #15
}
 801af4a:	4770      	bx	lr
 801af4c:	2001ee78 	.word	0x2001ee78
 801af50:	2001ee60 	.word	0x2001ee60
 801af54:	2001ee5c 	.word	0x2001ee5c
 801af58:	2001ee68 	.word	0x2001ee68
 801af5c:	2001ee2c 	.word	0x2001ee2c
 801af60:	2001ee1c 	.word	0x2001ee1c
 801af64:	2001ee18 	.word	0x2001ee18
 801af68:	0801a96d 	.word	0x0801a96d
 801af6c:	080472d0 	.word	0x080472d0

0801af70 <dns_gethostbyname>:
{
 801af70:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801af72:	2400      	movs	r4, #0
{
 801af74:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801af76:	9400      	str	r4, [sp, #0]
 801af78:	f7ff feb4 	bl	801ace4 <dns_gethostbyname_addrtype>
}
 801af7c:	b002      	add	sp, #8
 801af7e:	bd10      	pop	{r4, pc}

0801af80 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 801af80:	2300      	movs	r3, #0
{
 801af82:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801af84:	4299      	cmp	r1, r3
{
 801af86:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 801af88:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801af8c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 801af90:	dd05      	ble.n	801af9e <lwip_standard_chksum+0x1e>
 801af92:	b124      	cbz	r4, 801af9e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801af94:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 801af98:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 801af9a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 801af9e:	2901      	cmp	r1, #1
 801afa0:	dd28      	ble.n	801aff4 <lwip_standard_chksum+0x74>
 801afa2:	3902      	subs	r1, #2
  u32_t sum = 0;
 801afa4:	2300      	movs	r3, #0
 801afa6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801afaa:	f10e 0c01 	add.w	ip, lr, #1
 801afae:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 801afb2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801afb6:	4584      	cmp	ip, r0
    sum += *ps++;
 801afb8:	4413      	add	r3, r2
  while (len > 1) {
 801afba:	d1fa      	bne.n	801afb2 <lwip_standard_chksum+0x32>
    len -= 2;
 801afbc:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 801afc0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801afc4:	2901      	cmp	r1, #1
 801afc6:	d103      	bne.n	801afd0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801afc8:	f89c 2000 	ldrb.w	r2, [ip]
 801afcc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 801afd0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801afd4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801afd6:	b298      	uxth	r0, r3
 801afd8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 801afdc:	b298      	uxth	r0, r3
 801afde:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 801afe2:	b124      	cbz	r4, 801afee <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 801afe4:	0203      	lsls	r3, r0, #8
 801afe6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801afea:	b29b      	uxth	r3, r3
 801afec:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 801afee:	b280      	uxth	r0, r0
 801aff0:	b002      	add	sp, #8
 801aff2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 801aff4:	4684      	mov	ip, r0
  u32_t sum = 0;
 801aff6:	2300      	movs	r3, #0
 801aff8:	e7e4      	b.n	801afc4 <lwip_standard_chksum+0x44>
 801affa:	bf00      	nop

0801affc <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b000:	4688      	mov	r8, r1
 801b002:	4617      	mov	r7, r2
 801b004:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 801b006:	b1f8      	cbz	r0, 801b048 <inet_cksum_pseudo_base+0x4c>
 801b008:	4605      	mov	r5, r0
  int swapped = 0;
 801b00a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801b00c:	8969      	ldrh	r1, [r5, #10]
 801b00e:	6868      	ldr	r0, [r5, #4]
 801b010:	f7ff ffb6 	bl	801af80 <lwip_standard_chksum>
 801b014:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801b016:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 801b018:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801b01a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801b01e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801b022:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801b026:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801b02a:	d004      	beq.n	801b036 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801b02c:	b29b      	uxth	r3, r3
 801b02e:	f086 0601 	eor.w	r6, r6, #1
 801b032:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801b036:	682d      	ldr	r5, [r5, #0]
 801b038:	2d00      	cmp	r5, #0
 801b03a:	d1e7      	bne.n	801b00c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801b03c:	b126      	cbz	r6, 801b048 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b03e:	0222      	lsls	r2, r4, #8
 801b040:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b044:	b292      	uxth	r2, r2
 801b046:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801b048:	4640      	mov	r0, r8
 801b04a:	f7ff fa7d 	bl	801a548 <lwip_htons>
 801b04e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 801b050:	4638      	mov	r0, r7
 801b052:	f7ff fa79 	bl	801a548 <lwip_htons>
 801b056:	4428      	add	r0, r5
 801b058:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801b05a:	b2a0      	uxth	r0, r4
 801b05c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 801b060:	b2a0      	uxth	r0, r4
 801b062:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 801b066:	43c0      	mvns	r0, r0
}
 801b068:	b280      	uxth	r0, r0
 801b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b06e:	bf00      	nop

0801b070 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 801b070:	b430      	push	{r4, r5}
 801b072:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 801b074:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 801b076:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 801b078:	0c23      	lsrs	r3, r4, #16
 801b07a:	fa13 f384 	uxtah	r3, r3, r4
 801b07e:	fa13 f385 	uxtah	r3, r3, r5
 801b082:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 801b086:	b29c      	uxth	r4, r3
 801b088:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801b08c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b08e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 801b092:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801b094:	f7ff bfb2 	b.w	801affc <inet_cksum_pseudo_base>

0801b098 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801b098:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801b09a:	f7ff ff71 	bl	801af80 <lwip_standard_chksum>
 801b09e:	43c0      	mvns	r0, r0
}
 801b0a0:	b280      	uxth	r0, r0
 801b0a2:	bd08      	pop	{r3, pc}

0801b0a4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 801b0a4:	b338      	cbz	r0, 801b0f6 <inet_chksum_pbuf+0x52>
{
 801b0a6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 801b0a8:	2600      	movs	r6, #0
 801b0aa:	4605      	mov	r5, r0
  acc = 0;
 801b0ac:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801b0ae:	8969      	ldrh	r1, [r5, #10]
 801b0b0:	6868      	ldr	r0, [r5, #4]
 801b0b2:	f7ff ff65 	bl	801af80 <lwip_standard_chksum>
 801b0b6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 801b0b8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801b0ba:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 801b0bc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801b0c0:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 801b0c4:	ea4f 2304 	mov.w	r3, r4, lsl #8
 801b0c8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801b0cc:	d004      	beq.n	801b0d8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	f086 0601 	eor.w	r6, r6, #1
 801b0d4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 801b0d8:	682d      	ldr	r5, [r5, #0]
 801b0da:	2d00      	cmp	r5, #0
 801b0dc:	d1e7      	bne.n	801b0ae <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 801b0de:	b13e      	cbz	r6, 801b0f0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b0e0:	0220      	lsls	r0, r4, #8
 801b0e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b0e6:	b280      	uxth	r0, r0
 801b0e8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 801b0ea:	43c0      	mvns	r0, r0
 801b0ec:	b280      	uxth	r0, r0
}
 801b0ee:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 801b0f0:	43e0      	mvns	r0, r4
 801b0f2:	b280      	uxth	r0, r0
}
 801b0f4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 801b0f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b0fa:	4770      	bx	lr

0801b0fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801b0fc:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801b0fe:	f009 fe37 	bl	8024d70 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801b102:	f000 f975 	bl	801b3f0 <mem_init>
  memp_init();
 801b106:	f000 fcf9 	bl	801bafc <memp_init>
  pbuf_init();
  netif_init();
 801b10a:	f000 fdbd 	bl	801bc88 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801b10e:	f005 fffd 	bl	802110c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801b112:	f001 fd89 	bl	801cc28 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801b116:	f7ff fdbf 	bl	801ac98 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801b11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801b11e:	f005 bf4d 	b.w	8020fbc <sys_timeouts_init>
 801b122:	bf00      	nop

0801b124 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b124:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 801b128:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801b12a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b12e:	4299      	cmp	r1, r3
 801b130:	d81b      	bhi.n	801b16a <mem_link_valid+0x46>
 801b132:	459c      	cmp	ip, r3
 801b134:	bf94      	ite	ls
 801b136:	2200      	movls	r2, #0
 801b138:	2201      	movhi	r2, #1
 801b13a:	b9b2      	cbnz	r2, 801b16a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801b13c:	4b0f      	ldr	r3, [pc, #60]	; (801b17c <mem_link_valid+0x58>)
{
 801b13e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 801b140:	681c      	ldr	r4, [r3, #0]
 801b142:	1b03      	subs	r3, r0, r4
 801b144:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b146:	4299      	cmp	r1, r3
 801b148:	d002      	beq.n	801b150 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b14a:	5a61      	ldrh	r1, [r4, r1]
 801b14c:	4299      	cmp	r1, r3
 801b14e:	d10e      	bne.n	801b16e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b150:	4a0b      	ldr	r2, [pc, #44]	; (801b180 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 801b152:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b154:	6812      	ldr	r2, [r2, #0]
 801b156:	42a2      	cmp	r2, r4
 801b158:	d00d      	beq.n	801b176 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b15a:	8860      	ldrh	r0, [r4, #2]
 801b15c:	1ac0      	subs	r0, r0, r3
 801b15e:	fab0 f080 	clz	r0, r0
 801b162:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 801b164:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b168:	4770      	bx	lr
    return 0;
 801b16a:	2000      	movs	r0, #0
}
 801b16c:	4770      	bx	lr
    return 0;
 801b16e:	4610      	mov	r0, r2
}
 801b170:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b174:	4770      	bx	lr
  return 1;
 801b176:	2001      	movs	r0, #1
 801b178:	e7f4      	b.n	801b164 <mem_link_valid+0x40>
 801b17a:	bf00      	nop
 801b17c:	2001f2cc 	.word	0x2001f2cc
 801b180:	2001f2d0 	.word	0x2001f2d0

0801b184 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 801b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801b188:	4f5f      	ldr	r7, [pc, #380]	; (801b308 <mem_sanity+0x184>)
 801b18a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801b18c:	7935      	ldrb	r5, [r6, #4]
 801b18e:	2d01      	cmp	r5, #1
 801b190:	d907      	bls.n	801b1a2 <mem_sanity+0x1e>
 801b192:	4b5e      	ldr	r3, [pc, #376]	; (801b30c <mem_sanity+0x188>)
 801b194:	f240 223f 	movw	r2, #575	; 0x23f
 801b198:	495d      	ldr	r1, [pc, #372]	; (801b310 <mem_sanity+0x18c>)
 801b19a:	485e      	ldr	r0, [pc, #376]	; (801b314 <mem_sanity+0x190>)
 801b19c:	f00b fada 	bl	8026754 <iprintf>
  last_used = mem->used;
 801b1a0:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b1a2:	8873      	ldrh	r3, [r6, #2]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	f040 80a7 	bne.w	801b2f8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b1aa:	8834      	ldrh	r4, [r6, #0]
 801b1ac:	f242 7310 	movw	r3, #10000	; 0x2710
 801b1b0:	429c      	cmp	r4, r3
 801b1b2:	f200 8098 	bhi.w	801b2e6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801b1ba:	429c      	cmp	r4, r3
 801b1bc:	d961      	bls.n	801b282 <mem_sanity+0xfe>
 801b1be:	f8df 8170 	ldr.w	r8, [pc, #368]	; 801b330 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b1c2:	f8df a148 	ldr.w	sl, [pc, #328]	; 801b30c <mem_sanity+0x188>
 801b1c6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801b334 <mem_sanity+0x1b0>
 801b1ca:	4e52      	ldr	r6, [pc, #328]	; (801b314 <mem_sanity+0x190>)
 801b1cc:	e012      	b.n	801b1f4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b1ce:	2b01      	cmp	r3, #1
 801b1d0:	d006      	beq.n	801b1e0 <mem_sanity+0x5c>
 801b1d2:	4653      	mov	r3, sl
 801b1d4:	f240 2251 	movw	r2, #593	; 0x251
 801b1d8:	494f      	ldr	r1, [pc, #316]	; (801b318 <mem_sanity+0x194>)
 801b1da:	4630      	mov	r0, r6
 801b1dc:	f00b faba 	bl	8026754 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f7ff ff9f 	bl	801b124 <mem_link_valid>
 801b1e6:	b380      	cbz	r0, 801b24a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 801b1e8:	683b      	ldr	r3, [r7, #0]
 801b1ea:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801b1ec:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 801b1ee:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 801b1f0:	42a3      	cmp	r3, r4
 801b1f2:	d246      	bcs.n	801b282 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 801b1f4:	f8d8 2000 	ldr.w	r2, [r8]
 801b1f8:	42a2      	cmp	r2, r4
 801b1fa:	d942      	bls.n	801b282 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801b1fc:	1ce2      	adds	r2, r4, #3
 801b1fe:	f022 0203 	bic.w	r2, r2, #3
 801b202:	4294      	cmp	r4, r2
 801b204:	d006      	beq.n	801b214 <mem_sanity+0x90>
 801b206:	4653      	mov	r3, sl
 801b208:	f240 2249 	movw	r2, #585	; 0x249
 801b20c:	4649      	mov	r1, r9
 801b20e:	4630      	mov	r0, r6
 801b210:	f00b faa0 	bl	8026754 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b214:	8862      	ldrh	r2, [r4, #2]
 801b216:	f242 7310 	movw	r3, #10000	; 0x2710
 801b21a:	429a      	cmp	r2, r3
 801b21c:	d81d      	bhi.n	801b25a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b21e:	8822      	ldrh	r2, [r4, #0]
 801b220:	f242 7310 	movw	r3, #10000	; 0x2710
 801b224:	429a      	cmp	r2, r3
 801b226:	d824      	bhi.n	801b272 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801b228:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801b22a:	2d00      	cmp	r5, #0
 801b22c:	d0cf      	beq.n	801b1ce <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801b22e:	2b01      	cmp	r3, #1
 801b230:	d9d6      	bls.n	801b1e0 <mem_sanity+0x5c>
 801b232:	4653      	mov	r3, sl
 801b234:	f240 2253 	movw	r2, #595	; 0x253
 801b238:	4938      	ldr	r1, [pc, #224]	; (801b31c <mem_sanity+0x198>)
 801b23a:	4630      	mov	r0, r6
 801b23c:	f00b fa8a 	bl	8026754 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 801b240:	4620      	mov	r0, r4
 801b242:	f7ff ff6f 	bl	801b124 <mem_link_valid>
 801b246:	2800      	cmp	r0, #0
 801b248:	d1ce      	bne.n	801b1e8 <mem_sanity+0x64>
 801b24a:	4653      	mov	r3, sl
 801b24c:	f240 2256 	movw	r2, #598	; 0x256
 801b250:	4933      	ldr	r1, [pc, #204]	; (801b320 <mem_sanity+0x19c>)
 801b252:	4630      	mov	r0, r6
 801b254:	f00b fa7e 	bl	8026754 <iprintf>
 801b258:	e7c6      	b.n	801b1e8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801b25a:	4653      	mov	r3, sl
 801b25c:	f240 224a 	movw	r2, #586	; 0x24a
 801b260:	4930      	ldr	r1, [pc, #192]	; (801b324 <mem_sanity+0x1a0>)
 801b262:	4630      	mov	r0, r6
 801b264:	f00b fa76 	bl	8026754 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b268:	8822      	ldrh	r2, [r4, #0]
 801b26a:	f242 7310 	movw	r3, #10000	; 0x2710
 801b26e:	429a      	cmp	r2, r3
 801b270:	d9da      	bls.n	801b228 <mem_sanity+0xa4>
 801b272:	4653      	mov	r3, sl
 801b274:	f240 224b 	movw	r2, #587	; 0x24b
 801b278:	492b      	ldr	r1, [pc, #172]	; (801b328 <mem_sanity+0x1a4>)
 801b27a:	4630      	mov	r0, r6
 801b27c:	f00b fa6a 	bl	8026754 <iprintf>
 801b280:	e7d2      	b.n	801b228 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 801b282:	f242 7210 	movw	r2, #10000	; 0x2710
 801b286:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801b288:	4294      	cmp	r4, r2
 801b28a:	d006      	beq.n	801b29a <mem_sanity+0x116>
 801b28c:	4b1f      	ldr	r3, [pc, #124]	; (801b30c <mem_sanity+0x188>)
 801b28e:	f240 225b 	movw	r2, #603	; 0x25b
 801b292:	4926      	ldr	r1, [pc, #152]	; (801b32c <mem_sanity+0x1a8>)
 801b294:	481f      	ldr	r0, [pc, #124]	; (801b314 <mem_sanity+0x190>)
 801b296:	f00b fa5d 	bl	8026754 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801b29a:	7923      	ldrb	r3, [r4, #4]
 801b29c:	2b01      	cmp	r3, #1
 801b29e:	d006      	beq.n	801b2ae <mem_sanity+0x12a>
 801b2a0:	4b1a      	ldr	r3, [pc, #104]	; (801b30c <mem_sanity+0x188>)
 801b2a2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801b2a6:	491a      	ldr	r1, [pc, #104]	; (801b310 <mem_sanity+0x18c>)
 801b2a8:	481a      	ldr	r0, [pc, #104]	; (801b314 <mem_sanity+0x190>)
 801b2aa:	f00b fa53 	bl	8026754 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 801b2ae:	8862      	ldrh	r2, [r4, #2]
 801b2b0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d006      	beq.n	801b2c6 <mem_sanity+0x142>
 801b2b8:	4b14      	ldr	r3, [pc, #80]	; (801b30c <mem_sanity+0x188>)
 801b2ba:	f240 225d 	movw	r2, #605	; 0x25d
 801b2be:	4919      	ldr	r1, [pc, #100]	; (801b324 <mem_sanity+0x1a0>)
 801b2c0:	4814      	ldr	r0, [pc, #80]	; (801b314 <mem_sanity+0x190>)
 801b2c2:	f00b fa47 	bl	8026754 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2c6:	8822      	ldrh	r2, [r4, #0]
 801b2c8:	f242 7310 	movw	r3, #10000	; 0x2710
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d101      	bne.n	801b2d4 <mem_sanity+0x150>
}
 801b2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2d4:	4b0d      	ldr	r3, [pc, #52]	; (801b30c <mem_sanity+0x188>)
 801b2d6:	f240 225e 	movw	r2, #606	; 0x25e
 801b2da:	4913      	ldr	r1, [pc, #76]	; (801b328 <mem_sanity+0x1a4>)
 801b2dc:	480d      	ldr	r0, [pc, #52]	; (801b314 <mem_sanity+0x190>)
}
 801b2de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801b2e2:	f00b ba37 	b.w	8026754 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801b2e6:	4b09      	ldr	r3, [pc, #36]	; (801b30c <mem_sanity+0x188>)
 801b2e8:	f240 2242 	movw	r2, #578	; 0x242
 801b2ec:	490e      	ldr	r1, [pc, #56]	; (801b328 <mem_sanity+0x1a4>)
 801b2ee:	4809      	ldr	r0, [pc, #36]	; (801b314 <mem_sanity+0x190>)
 801b2f0:	f00b fa30 	bl	8026754 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 801b2f4:	8834      	ldrh	r4, [r6, #0]
 801b2f6:	e75e      	b.n	801b1b6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801b2f8:	4b04      	ldr	r3, [pc, #16]	; (801b30c <mem_sanity+0x188>)
 801b2fa:	f240 2241 	movw	r2, #577	; 0x241
 801b2fe:	4909      	ldr	r1, [pc, #36]	; (801b324 <mem_sanity+0x1a0>)
 801b300:	4804      	ldr	r0, [pc, #16]	; (801b314 <mem_sanity+0x190>)
 801b302:	f00b fa27 	bl	8026754 <iprintf>
 801b306:	e750      	b.n	801b1aa <mem_sanity+0x26>
 801b308:	2001f2cc 	.word	0x2001f2cc
 801b30c:	08044b7c 	.word	0x08044b7c
 801b310:	08044bac 	.word	0x08044bac
 801b314:	0802b44c 	.word	0x0802b44c
 801b318:	08044c14 	.word	0x08044c14
 801b31c:	08044c2c 	.word	0x08044c2c
 801b320:	08044c48 	.word	0x08044c48
 801b324:	08044bc4 	.word	0x08044bc4
 801b328:	08044be0 	.word	0x08044be0
 801b32c:	08044c60 	.word	0x08044c60
 801b330:	2001f2d0 	.word	0x2001f2d0
 801b334:	08044bfc 	.word	0x08044bfc

0801b338 <mem_overflow_check_raw>:
{
 801b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b33c:	1e4c      	subs	r4, r1, #1
 801b33e:	310f      	adds	r1, #15
 801b340:	b0a3      	sub	sp, #140	; 0x8c
 801b342:	4606      	mov	r6, r0
 801b344:	4615      	mov	r5, r2
 801b346:	4698      	mov	r8, r3
 801b348:	4404      	add	r4, r0
 801b34a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b34c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801b3c4 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 801b350:	f8df b074 	ldr.w	fp, [pc, #116]	; 801b3c8 <mem_overflow_check_raw+0x90>
 801b354:	f8df a074 	ldr.w	sl, [pc, #116]	; 801b3cc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b358:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b35c:	464a      	mov	r2, r9
 801b35e:	2180      	movs	r1, #128	; 0x80
 801b360:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b362:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b364:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b366:	d009      	beq.n	801b37c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801b368:	f8cd 8000 	str.w	r8, [sp]
 801b36c:	f00b fba8 	bl	8026ac0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b370:	465b      	mov	r3, fp
 801b372:	226d      	movs	r2, #109	; 0x6d
 801b374:	a902      	add	r1, sp, #8
 801b376:	4650      	mov	r0, sl
 801b378:	f00b f9ec 	bl	8026754 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 801b37c:	42bc      	cmp	r4, r7
 801b37e:	d1eb      	bne.n	801b358 <mem_overflow_check_raw+0x20>
 801b380:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b384:	4f0e      	ldr	r7, [pc, #56]	; (801b3c0 <mem_overflow_check_raw+0x88>)
 801b386:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801b388:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b3c8 <mem_overflow_check_raw+0x90>
 801b38c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801b3cc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801b390:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b394:	463a      	mov	r2, r7
 801b396:	2180      	movs	r1, #128	; 0x80
 801b398:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801b39a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b39c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 801b39e:	d009      	beq.n	801b3b4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 801b3a0:	f8cd 8000 	str.w	r8, [sp]
 801b3a4:	f00b fb8c 	bl	8026ac0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801b3a8:	4653      	mov	r3, sl
 801b3aa:	2278      	movs	r2, #120	; 0x78
 801b3ac:	a902      	add	r1, sp, #8
 801b3ae:	4648      	mov	r0, r9
 801b3b0:	f00b f9d0 	bl	8026754 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 801b3b4:	42b4      	cmp	r4, r6
 801b3b6:	d1eb      	bne.n	801b390 <mem_overflow_check_raw+0x58>
}
 801b3b8:	b023      	add	sp, #140	; 0x8c
 801b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3be:	bf00      	nop
 801b3c0:	08044c94 	.word	0x08044c94
 801b3c4:	08044c74 	.word	0x08044c74
 801b3c8:	08044b7c 	.word	0x08044b7c
 801b3cc:	0802b44c 	.word	0x0802b44c

0801b3d0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b3d0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b3d4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b3d6:	f840 3c10 	str.w	r3, [r0, #-16]
 801b3da:	f840 3c0c 	str.w	r3, [r0, #-12]
 801b3de:	f840 3c08 	str.w	r3, [r0, #-8]
 801b3e2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b3e6:	5043      	str	r3, [r0, r1]
 801b3e8:	6053      	str	r3, [r2, #4]
 801b3ea:	6093      	str	r3, [r2, #8]
 801b3ec:	60d3      	str	r3, [r2, #12]
}
 801b3ee:	4770      	bx	lr

0801b3f0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b3f0:	4b14      	ldr	r3, [pc, #80]	; (801b444 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801b3f2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801b3f6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b3f8:	4913      	ldr	r1, [pc, #76]	; (801b448 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b3fa:	f023 0303 	bic.w	r3, r3, #3
{
 801b3fe:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801b400:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b402:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b404:	4c11      	ldr	r4, [pc, #68]	; (801b44c <mem_init+0x5c>)
  mem->used = 0;
 801b406:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b408:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b40a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801b40e:	4910      	ldr	r1, [pc, #64]	; (801b450 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b410:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801b412:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801b414:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801b418:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801b41c:	f7ff feb2 	bl	801b184 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801b420:	6822      	ldr	r2, [r4, #0]
 801b422:	4b0c      	ldr	r3, [pc, #48]	; (801b454 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b424:	480c      	ldr	r0, [pc, #48]	; (801b458 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801b426:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b428:	f009 fcae 	bl	8024d88 <sys_mutex_new>
 801b42c:	b900      	cbnz	r0, 801b430 <mem_init+0x40>
}
 801b42e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b430:	4b0a      	ldr	r3, [pc, #40]	; (801b45c <mem_init+0x6c>)
 801b432:	f240 221f 	movw	r2, #543	; 0x21f
 801b436:	490a      	ldr	r1, [pc, #40]	; (801b460 <mem_init+0x70>)
 801b438:	480a      	ldr	r0, [pc, #40]	; (801b464 <mem_init+0x74>)
}
 801b43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b43e:	f00b b989 	b.w	8026754 <iprintf>
 801b442:	bf00      	nop
 801b444:	2001f2d7 	.word	0x2001f2d7
 801b448:	2001f2d0 	.word	0x2001f2d0
 801b44c:	2001f2cc 	.word	0x2001f2cc
 801b450:	27102710 	.word	0x27102710
 801b454:	2001f2c0 	.word	0x2001f2c0
 801b458:	2001f2c8 	.word	0x2001f2c8
 801b45c:	08044b7c 	.word	0x08044b7c
 801b460:	08044cb4 	.word	0x08044cb4
 801b464:	0802b44c 	.word	0x0802b44c

0801b468 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b468:	2800      	cmp	r0, #0
 801b46a:	d07f      	beq.n	801b56c <mem_free+0x104>
{
 801b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b470:	f010 0803 	ands.w	r8, r0, #3
 801b474:	4604      	mov	r4, r0
 801b476:	d170      	bne.n	801b55a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b478:	4e5c      	ldr	r6, [pc, #368]	; (801b5ec <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b47a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b47e:	6833      	ldr	r3, [r6, #0]
 801b480:	42ab      	cmp	r3, r5
 801b482:	d805      	bhi.n	801b490 <mem_free+0x28>
 801b484:	4f5a      	ldr	r7, [pc, #360]	; (801b5f0 <mem_free+0x188>)
 801b486:	f100 030c 	add.w	r3, r0, #12
 801b48a:	683a      	ldr	r2, [r7, #0]
 801b48c:	429a      	cmp	r2, r3
 801b48e:	d208      	bcs.n	801b4a2 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b490:	4b58      	ldr	r3, [pc, #352]	; (801b5f4 <mem_free+0x18c>)
 801b492:	f240 227f 	movw	r2, #639	; 0x27f
 801b496:	4958      	ldr	r1, [pc, #352]	; (801b5f8 <mem_free+0x190>)
 801b498:	4858      	ldr	r0, [pc, #352]	; (801b5fc <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801b49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b49e:	f00b b959 	b.w	8026754 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b4a2:	4b57      	ldr	r3, [pc, #348]	; (801b600 <mem_free+0x198>)
 801b4a4:	4a57      	ldr	r2, [pc, #348]	; (801b604 <mem_free+0x19c>)
 801b4a6:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801b4aa:	f7ff ff45 	bl	801b338 <mem_overflow_check_raw>
  if (!mem->used) {
 801b4ae:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	f000 8082 	beq.w	801b5bc <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	f7ff fe33 	bl	801b124 <mem_link_valid>
 801b4be:	2800      	cmp	r0, #0
 801b4c0:	f000 8085 	beq.w	801b5ce <mem_free+0x166>
  mem->used = 0;
 801b4c4:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801b4c8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801b628 <mem_free+0x1c0>
 801b4cc:	f8d8 3000 	ldr.w	r3, [r8]
 801b4d0:	42ab      	cmp	r3, r5
 801b4d2:	d901      	bls.n	801b4d8 <mem_free+0x70>
    lfree = mem;
 801b4d4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b4d8:	6833      	ldr	r3, [r6, #0]
 801b4da:	429d      	cmp	r5, r3
 801b4dc:	d351      	bcc.n	801b582 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	429d      	cmp	r5, r3
 801b4e2:	d258      	bcs.n	801b596 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b4e4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b4e8:	f242 7210 	movw	r2, #10000	; 0x2710
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d83e      	bhi.n	801b56e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801b4f0:	6832      	ldr	r2, [r6, #0]
 801b4f2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b4f4:	429d      	cmp	r5, r3
 801b4f6:	d013      	beq.n	801b520 <mem_free+0xb8>
 801b4f8:	7919      	ldrb	r1, [r3, #4]
 801b4fa:	b989      	cbnz	r1, 801b520 <mem_free+0xb8>
 801b4fc:	6839      	ldr	r1, [r7, #0]
 801b4fe:	428b      	cmp	r3, r1
 801b500:	d00e      	beq.n	801b520 <mem_free+0xb8>
    if (lfree == nmem) {
 801b502:	f8d8 1000 	ldr.w	r1, [r8]
 801b506:	428b      	cmp	r3, r1
 801b508:	d06d      	beq.n	801b5e6 <mem_free+0x17e>
    mem->next = nmem->next;
 801b50a:	8819      	ldrh	r1, [r3, #0]
 801b50c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b510:	f242 7110 	movw	r1, #10000	; 0x2710
 801b514:	881b      	ldrh	r3, [r3, #0]
 801b516:	428b      	cmp	r3, r1
 801b518:	d002      	beq.n	801b520 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b51a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801b51c:	1aa9      	subs	r1, r5, r2
 801b51e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801b520:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801b524:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801b526:	429d      	cmp	r5, r3
 801b528:	d010      	beq.n	801b54c <mem_free+0xe4>
 801b52a:	7918      	ldrb	r0, [r3, #4]
 801b52c:	b970      	cbnz	r0, 801b54c <mem_free+0xe4>
    if (lfree == mem) {
 801b52e:	f8d8 0000 	ldr.w	r0, [r8]
 801b532:	4285      	cmp	r5, r0
 801b534:	d054      	beq.n	801b5e0 <mem_free+0x178>
    pmem->next = mem->next;
 801b536:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b53a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801b53e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b540:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b544:	4283      	cmp	r3, r0
 801b546:	d001      	beq.n	801b54c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b548:	441a      	add	r2, r3
 801b54a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801b54c:	f7ff fe1a 	bl	801b184 <mem_sanity>
  mem_free_count = 1;
 801b550:	4b2d      	ldr	r3, [pc, #180]	; (801b608 <mem_free+0x1a0>)
 801b552:	2201      	movs	r2, #1
 801b554:	701a      	strb	r2, [r3, #0]
}
 801b556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b55a:	4b26      	ldr	r3, [pc, #152]	; (801b5f4 <mem_free+0x18c>)
 801b55c:	f240 2273 	movw	r2, #627	; 0x273
 801b560:	492a      	ldr	r1, [pc, #168]	; (801b60c <mem_free+0x1a4>)
 801b562:	4826      	ldr	r0, [pc, #152]	; (801b5fc <mem_free+0x194>)
}
 801b564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b568:	f00b b8f4 	b.w	8026754 <iprintf>
 801b56c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b56e:	4b21      	ldr	r3, [pc, #132]	; (801b5f4 <mem_free+0x18c>)
 801b570:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801b574:	4926      	ldr	r1, [pc, #152]	; (801b610 <mem_free+0x1a8>)
 801b576:	4821      	ldr	r0, [pc, #132]	; (801b5fc <mem_free+0x194>)
 801b578:	f00b f8ec 	bl	8026754 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801b57c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801b580:	e7b6      	b.n	801b4f0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b582:	4b1c      	ldr	r3, [pc, #112]	; (801b5f4 <mem_free+0x18c>)
 801b584:	f240 12df 	movw	r2, #479	; 0x1df
 801b588:	4922      	ldr	r1, [pc, #136]	; (801b614 <mem_free+0x1ac>)
 801b58a:	481c      	ldr	r0, [pc, #112]	; (801b5fc <mem_free+0x194>)
 801b58c:	f00b f8e2 	bl	8026754 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b590:	683b      	ldr	r3, [r7, #0]
 801b592:	429d      	cmp	r5, r3
 801b594:	d306      	bcc.n	801b5a4 <mem_free+0x13c>
 801b596:	4b17      	ldr	r3, [pc, #92]	; (801b5f4 <mem_free+0x18c>)
 801b598:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b59c:	491e      	ldr	r1, [pc, #120]	; (801b618 <mem_free+0x1b0>)
 801b59e:	4817      	ldr	r0, [pc, #92]	; (801b5fc <mem_free+0x194>)
 801b5a0:	f00b f8d8 	bl	8026754 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b5a4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d09b      	beq.n	801b4e4 <mem_free+0x7c>
 801b5ac:	4b11      	ldr	r3, [pc, #68]	; (801b5f4 <mem_free+0x18c>)
 801b5ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b5b2:	491a      	ldr	r1, [pc, #104]	; (801b61c <mem_free+0x1b4>)
 801b5b4:	4811      	ldr	r0, [pc, #68]	; (801b5fc <mem_free+0x194>)
 801b5b6:	f00b f8cd 	bl	8026754 <iprintf>
 801b5ba:	e793      	b.n	801b4e4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b5bc:	4b0d      	ldr	r3, [pc, #52]	; (801b5f4 <mem_free+0x18c>)
 801b5be:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b5c2:	4917      	ldr	r1, [pc, #92]	; (801b620 <mem_free+0x1b8>)
 801b5c4:	480d      	ldr	r0, [pc, #52]	; (801b5fc <mem_free+0x194>)
}
 801b5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b5ca:	f00b b8c3 	b.w	8026754 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b5ce:	4b09      	ldr	r3, [pc, #36]	; (801b5f4 <mem_free+0x18c>)
 801b5d0:	f240 2295 	movw	r2, #661	; 0x295
 801b5d4:	4913      	ldr	r1, [pc, #76]	; (801b624 <mem_free+0x1bc>)
 801b5d6:	4809      	ldr	r0, [pc, #36]	; (801b5fc <mem_free+0x194>)
}
 801b5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b5dc:	f00b b8ba 	b.w	8026754 <iprintf>
      lfree = pmem;
 801b5e0:	f8c8 3000 	str.w	r3, [r8]
 801b5e4:	e7a7      	b.n	801b536 <mem_free+0xce>
      lfree = mem;
 801b5e6:	f8c8 5000 	str.w	r5, [r8]
 801b5ea:	e78e      	b.n	801b50a <mem_free+0xa2>
 801b5ec:	2001f2cc 	.word	0x2001f2cc
 801b5f0:	2001f2d0 	.word	0x2001f2d0
 801b5f4:	08044b7c 	.word	0x08044b7c
 801b5f8:	08044cf4 	.word	0x08044cf4
 801b5fc:	0802b44c 	.word	0x0802b44c
 801b600:	0802b6b0 	.word	0x0802b6b0
 801b604:	08044d10 	.word	0x08044d10
 801b608:	2001f2c4 	.word	0x2001f2c4
 801b60c:	08044cd0 	.word	0x08044cd0
 801b610:	08044dc4 	.word	0x08044dc4
 801b614:	08044d74 	.word	0x08044d74
 801b618:	08044d8c 	.word	0x08044d8c
 801b61c:	08044da8 	.word	0x08044da8
 801b620:	08044d18 	.word	0x08044d18
 801b624:	08044d40 	.word	0x08044d40
 801b628:	2001f2c0 	.word	0x2001f2c0

0801b62c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b630:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b632:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b636:	f024 0403 	bic.w	r4, r4, #3
 801b63a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801b63c:	2c0c      	cmp	r4, #12
 801b63e:	bf38      	it	cc
 801b640:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b642:	3420      	adds	r4, #32
 801b644:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b646:	429c      	cmp	r4, r3
 801b648:	d87a      	bhi.n	801b740 <mem_trim+0x114>
 801b64a:	42a1      	cmp	r1, r4
 801b64c:	460e      	mov	r6, r1
 801b64e:	d877      	bhi.n	801b740 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b650:	4f58      	ldr	r7, [pc, #352]	; (801b7b4 <mem_trim+0x188>)
 801b652:	4605      	mov	r5, r0
 801b654:	683b      	ldr	r3, [r7, #0]
 801b656:	4283      	cmp	r3, r0
 801b658:	d803      	bhi.n	801b662 <mem_trim+0x36>
 801b65a:	4b57      	ldr	r3, [pc, #348]	; (801b7b8 <mem_trim+0x18c>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	4283      	cmp	r3, r0
 801b660:	d810      	bhi.n	801b684 <mem_trim+0x58>
 801b662:	4b56      	ldr	r3, [pc, #344]	; (801b7bc <mem_trim+0x190>)
 801b664:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b668:	4955      	ldr	r1, [pc, #340]	; (801b7c0 <mem_trim+0x194>)
 801b66a:	4856      	ldr	r0, [pc, #344]	; (801b7c4 <mem_trim+0x198>)
 801b66c:	f00b f872 	bl	8026754 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b670:	683b      	ldr	r3, [r7, #0]
 801b672:	42ab      	cmp	r3, r5
 801b674:	d902      	bls.n	801b67c <mem_trim+0x50>
{
 801b676:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801b678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b67c:	4b4e      	ldr	r3, [pc, #312]	; (801b7b8 <mem_trim+0x18c>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	429d      	cmp	r5, r3
 801b682:	d2f8      	bcs.n	801b676 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b684:	4b50      	ldr	r3, [pc, #320]	; (801b7c8 <mem_trim+0x19c>)
 801b686:	4628      	mov	r0, r5
 801b688:	4a50      	ldr	r2, [pc, #320]	; (801b7cc <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b68a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801b68e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801b692:	f7ff fe51 	bl	801b338 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801b696:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b698:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801b69c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b6a0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801b6a4:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b6a8:	eba3 0308 	sub.w	r3, r3, r8
 801b6ac:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b6ae:	429c      	cmp	r4, r3
 801b6b0:	d83d      	bhi.n	801b72e <mem_trim+0x102>
  if (newsize == size) {
 801b6b2:	d0e0      	beq.n	801b676 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801b6b4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801b6b8:	f899 0004 	ldrb.w	r0, [r9, #4]
 801b6bc:	2800      	cmp	r0, #0
 801b6be:	d142      	bne.n	801b746 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b6c0:	f242 7310 	movw	r3, #10000	; 0x2710
 801b6c4:	4299      	cmp	r1, r3
 801b6c6:	d061      	beq.n	801b78c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6c8:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801b6cc:	4940      	ldr	r1, [pc, #256]	; (801b7d0 <mem_trim+0x1a4>)
    next = mem2->next;
 801b6ce:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6d2:	441c      	add	r4, r3
    if (lfree == mem2) {
 801b6d4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b6d6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801b6d8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801b6da:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801b6de:	d053      	beq.n	801b788 <mem_trim+0x15c>
    mem2->used = 0;
 801b6e0:	2100      	movs	r1, #0
    mem2->next = next;
 801b6e2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801b6e4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b6e8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6ea:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b6ee:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b6f2:	881b      	ldrh	r3, [r3, #0]
 801b6f4:	428b      	cmp	r3, r1
 801b6f6:	d001      	beq.n	801b6fc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b6f8:	4413      	add	r3, r2
 801b6fa:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b6fc:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801b700:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801b702:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b706:	f845 3c10 	str.w	r3, [r5, #-16]
 801b70a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801b70e:	f845 3c08 	str.w	r3, [r5, #-8]
 801b712:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b716:	51ab      	str	r3, [r5, r6]
 801b718:	6053      	str	r3, [r2, #4]
 801b71a:	6093      	str	r3, [r2, #8]
 801b71c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801b71e:	f7ff fd31 	bl	801b184 <mem_sanity>
  mem_free_count = 1;
 801b722:	4b2c      	ldr	r3, [pc, #176]	; (801b7d4 <mem_trim+0x1a8>)
 801b724:	2201      	movs	r2, #1
  return rmem;
 801b726:	4628      	mov	r0, r5
  mem_free_count = 1;
 801b728:	701a      	strb	r2, [r3, #0]
}
 801b72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b72e:	4b23      	ldr	r3, [pc, #140]	; (801b7bc <mem_trim+0x190>)
 801b730:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b734:	4928      	ldr	r1, [pc, #160]	; (801b7d8 <mem_trim+0x1ac>)
 801b736:	4823      	ldr	r0, [pc, #140]	; (801b7c4 <mem_trim+0x198>)
 801b738:	f00b f80c 	bl	8026754 <iprintf>
    return NULL;
 801b73c:	2000      	movs	r0, #0
 801b73e:	e79b      	b.n	801b678 <mem_trim+0x4c>
    return NULL;
 801b740:	2000      	movs	r0, #0
}
 801b742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b746:	f104 0014 	add.w	r0, r4, #20
 801b74a:	4298      	cmp	r0, r3
 801b74c:	d8d6      	bhi.n	801b6fc <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b74e:	f108 0308 	add.w	r3, r8, #8
 801b752:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b754:	f242 7310 	movw	r3, #10000	; 0x2710
 801b758:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b75a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b75c:	d01f      	beq.n	801b79e <mem_trim+0x172>
    if (mem2 < lfree) {
 801b75e:	481c      	ldr	r0, [pc, #112]	; (801b7d0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801b760:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801b762:	6807      	ldr	r7, [r0, #0]
 801b764:	429f      	cmp	r7, r3
 801b766:	d900      	bls.n	801b76a <mem_trim+0x13e>
      lfree = mem2;
 801b768:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801b76a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801b76c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801b76e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801b772:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b774:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801b778:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b77c:	881b      	ldrh	r3, [r3, #0]
 801b77e:	428b      	cmp	r3, r1
 801b780:	d0bc      	beq.n	801b6fc <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b782:	441a      	add	r2, r3
 801b784:	8054      	strh	r4, [r2, #2]
 801b786:	e7b9      	b.n	801b6fc <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801b788:	600b      	str	r3, [r1, #0]
 801b78a:	e7a9      	b.n	801b6e0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b78c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b790:	4b0a      	ldr	r3, [pc, #40]	; (801b7bc <mem_trim+0x190>)
 801b792:	4912      	ldr	r1, [pc, #72]	; (801b7dc <mem_trim+0x1b0>)
 801b794:	480b      	ldr	r0, [pc, #44]	; (801b7c4 <mem_trim+0x198>)
 801b796:	f00a ffdd 	bl	8026754 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b79a:	683a      	ldr	r2, [r7, #0]
 801b79c:	e794      	b.n	801b6c8 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b79e:	f240 3216 	movw	r2, #790	; 0x316
 801b7a2:	490e      	ldr	r1, [pc, #56]	; (801b7dc <mem_trim+0x1b0>)
 801b7a4:	4b05      	ldr	r3, [pc, #20]	; (801b7bc <mem_trim+0x190>)
 801b7a6:	4807      	ldr	r0, [pc, #28]	; (801b7c4 <mem_trim+0x198>)
 801b7a8:	f00a ffd4 	bl	8026754 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b7ac:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801b7ae:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801b7b2:	e7d4      	b.n	801b75e <mem_trim+0x132>
 801b7b4:	2001f2cc 	.word	0x2001f2cc
 801b7b8:	2001f2d0 	.word	0x2001f2d0
 801b7bc:	08044b7c 	.word	0x08044b7c
 801b7c0:	08044df0 	.word	0x08044df0
 801b7c4:	0802b44c 	.word	0x0802b44c
 801b7c8:	0802b6b0 	.word	0x0802b6b0
 801b7cc:	08044d10 	.word	0x08044d10
 801b7d0:	2001f2c0 	.word	0x2001f2c0
 801b7d4:	2001f2c4 	.word	0x2001f2c4
 801b7d8:	08044e08 	.word	0x08044e08
 801b7dc:	08044e28 	.word	0x08044e28

0801b7e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b7e4:	4680      	mov	r8, r0
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	f000 80b2 	beq.w	801b950 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b7ec:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b7f0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b7f4:	f02b 0b03 	bic.w	fp, fp, #3
 801b7f8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801b7fc:	f1bb 0f0c 	cmp.w	fp, #12
 801b800:	bf38      	it	cc
 801b802:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801b806:	f10b 0720 	add.w	r7, fp, #32
 801b80a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b80c:	42a7      	cmp	r7, r4
 801b80e:	f200 809f 	bhi.w	801b950 <mem_malloc+0x170>
 801b812:	42b8      	cmp	r0, r7
 801b814:	bf94      	ite	ls
 801b816:	f04f 0a00 	movls.w	sl, #0
 801b81a:	f04f 0a01 	movhi.w	sl, #1
 801b81e:	f1ba 0f00 	cmp.w	sl, #0
 801b822:	f040 8095 	bne.w	801b950 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b826:	4866      	ldr	r0, [pc, #408]	; (801b9c0 <mem_malloc+0x1e0>)
 801b828:	f009 fabe 	bl	8024da8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801b82c:	4b65      	ldr	r3, [pc, #404]	; (801b9c4 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b82e:	eba4 0c07 	sub.w	ip, r4, r7
 801b832:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801b9ec <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801b836:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b838:	f06f 0e07 	mvn.w	lr, #7
 801b83c:	4d62      	ldr	r5, [pc, #392]	; (801b9c8 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b83e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801b842:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b844:	b2b3      	uxth	r3, r6
 801b846:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801b848:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b84a:	d97a      	bls.n	801b942 <mem_malloc+0x162>
      mem_free_count = 0;
 801b84c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b850:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801b854:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b856:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801b858:	2900      	cmp	r1, #0
 801b85a:	d1f0      	bne.n	801b83e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801b85c:	7923      	ldrb	r3, [r4, #4]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d16b      	bne.n	801b93a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b862:	8821      	ldrh	r1, [r4, #0]
 801b864:	440a      	add	r2, r1
 801b866:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801b868:	42ba      	cmp	r2, r7
 801b86a:	d3ec      	bcc.n	801b846 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b86c:	f107 0314 	add.w	r3, r7, #20
 801b870:	429a      	cmp	r2, r3
 801b872:	d371      	bcc.n	801b958 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b874:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b878:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b87c:	44b2      	add	sl, r6
 801b87e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b882:	459a      	cmp	sl, r3
 801b884:	f000 808f 	beq.w	801b9a6 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801b888:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801b88c:	2200      	movs	r2, #0
 801b88e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b890:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801b894:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801b898:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801b89a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801b89c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801b8a0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b8a2:	f830 300a 	ldrh.w	r3, [r0, sl]
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d002      	beq.n	801b8b0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b8aa:	4418      	add	r0, r3
 801b8ac:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b8b0:	f8d9 3000 	ldr.w	r3, [r9]
 801b8b4:	42a3      	cmp	r3, r4
 801b8b6:	f040 8081 	bne.w	801b9bc <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801b8ba:	4b42      	ldr	r3, [pc, #264]	; (801b9c4 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801b8bc:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801b8be:	4e43      	ldr	r6, [pc, #268]	; (801b9cc <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801b8c0:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801b8c4:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801b8c6:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801b8ca:	791a      	ldrb	r2, [r3, #4]
 801b8cc:	b942      	cbnz	r2, 801b8e0 <mem_malloc+0x100>
 801b8ce:	e009      	b.n	801b8e4 <mem_malloc+0x104>
            mem_free_count = 0;
 801b8d0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801b8d2:	782a      	ldrb	r2, [r5, #0]
 801b8d4:	2a00      	cmp	r2, #0
 801b8d6:	d142      	bne.n	801b95e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801b8d8:	881b      	ldrh	r3, [r3, #0]
 801b8da:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801b8dc:	791a      	ldrb	r2, [r3, #4]
 801b8de:	b10a      	cbz	r2, 801b8e4 <mem_malloc+0x104>
 801b8e0:	4299      	cmp	r1, r3
 801b8e2:	d1f5      	bne.n	801b8d0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801b8e4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b8e8:	f8d9 3000 	ldr.w	r3, [r9]
 801b8ec:	4299      	cmp	r1, r3
 801b8ee:	d004      	beq.n	801b8fa <mem_malloc+0x11a>
 801b8f0:	f8d9 3000 	ldr.w	r3, [r9]
 801b8f4:	791b      	ldrb	r3, [r3, #4]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d14d      	bne.n	801b996 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b8fa:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801b8fc:	4830      	ldr	r0, [pc, #192]	; (801b9c0 <mem_malloc+0x1e0>)
 801b8fe:	f009 fa59 	bl	8024db4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b902:	6833      	ldr	r3, [r6, #0]
 801b904:	4427      	add	r7, r4
 801b906:	42bb      	cmp	r3, r7
 801b908:	d33d      	bcc.n	801b986 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b90a:	07a3      	lsls	r3, r4, #30
 801b90c:	d12c      	bne.n	801b968 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b90e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b912:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801b916:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801b91a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801b91e:	60a3      	str	r3, [r4, #8]
 801b920:	60e3      	str	r3, [r4, #12]
 801b922:	6123      	str	r3, [r4, #16]
 801b924:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801b926:	f845 3008 	str.w	r3, [r5, r8]
 801b92a:	6053      	str	r3, [r2, #4]
 801b92c:	6093      	str	r3, [r2, #8]
 801b92e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801b930:	f7ff fc28 	bl	801b184 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801b934:	4628      	mov	r0, r5
 801b936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b93a:	8826      	ldrh	r6, [r4, #0]
 801b93c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b93e:	459c      	cmp	ip, r3
 801b940:	d884      	bhi.n	801b84c <mem_malloc+0x6c>
  return NULL;
 801b942:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801b944:	481e      	ldr	r0, [pc, #120]	; (801b9c0 <mem_malloc+0x1e0>)
 801b946:	f009 fa35 	bl	8024db4 <sys_mutex_unlock>
}
 801b94a:	4628      	mov	r0, r5
 801b94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801b950:	2500      	movs	r5, #0
}
 801b952:	4628      	mov	r0, r5
 801b954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801b958:	2301      	movs	r3, #1
 801b95a:	7123      	strb	r3, [r4, #4]
 801b95c:	e7a8      	b.n	801b8b0 <mem_malloc+0xd0>
        if (mem == lfree) {
 801b95e:	f8d9 3000 	ldr.w	r3, [r9]
 801b962:	42a3      	cmp	r3, r4
 801b964:	d0af      	beq.n	801b8c6 <mem_malloc+0xe6>
 801b966:	e7c8      	b.n	801b8fa <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b968:	4b19      	ldr	r3, [pc, #100]	; (801b9d0 <mem_malloc+0x1f0>)
 801b96a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b96e:	4919      	ldr	r1, [pc, #100]	; (801b9d4 <mem_malloc+0x1f4>)
 801b970:	4819      	ldr	r0, [pc, #100]	; (801b9d8 <mem_malloc+0x1f8>)
 801b972:	f00a feef 	bl	8026754 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b976:	4b16      	ldr	r3, [pc, #88]	; (801b9d0 <mem_malloc+0x1f0>)
 801b978:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b97c:	4917      	ldr	r1, [pc, #92]	; (801b9dc <mem_malloc+0x1fc>)
 801b97e:	4816      	ldr	r0, [pc, #88]	; (801b9d8 <mem_malloc+0x1f8>)
 801b980:	f00a fee8 	bl	8026754 <iprintf>
 801b984:	e7c3      	b.n	801b90e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b986:	4b12      	ldr	r3, [pc, #72]	; (801b9d0 <mem_malloc+0x1f0>)
 801b988:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b98c:	4914      	ldr	r1, [pc, #80]	; (801b9e0 <mem_malloc+0x200>)
 801b98e:	4812      	ldr	r0, [pc, #72]	; (801b9d8 <mem_malloc+0x1f8>)
 801b990:	f00a fee0 	bl	8026754 <iprintf>
 801b994:	e7b9      	b.n	801b90a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b996:	4b0e      	ldr	r3, [pc, #56]	; (801b9d0 <mem_malloc+0x1f0>)
 801b998:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b99c:	4911      	ldr	r1, [pc, #68]	; (801b9e4 <mem_malloc+0x204>)
 801b99e:	480e      	ldr	r0, [pc, #56]	; (801b9d8 <mem_malloc+0x1f8>)
 801b9a0:	f00a fed8 	bl	8026754 <iprintf>
 801b9a4:	e7a9      	b.n	801b8fa <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b9a6:	4b0a      	ldr	r3, [pc, #40]	; (801b9d0 <mem_malloc+0x1f0>)
 801b9a8:	f240 3287 	movw	r2, #903	; 0x387
 801b9ac:	490e      	ldr	r1, [pc, #56]	; (801b9e8 <mem_malloc+0x208>)
 801b9ae:	480a      	ldr	r0, [pc, #40]	; (801b9d8 <mem_malloc+0x1f8>)
 801b9b0:	f00a fed0 	bl	8026754 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801b9b4:	4b03      	ldr	r3, [pc, #12]	; (801b9c4 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801b9b6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801b9b8:	6818      	ldr	r0, [r3, #0]
 801b9ba:	e765      	b.n	801b888 <mem_malloc+0xa8>
 801b9bc:	4e03      	ldr	r6, [pc, #12]	; (801b9cc <mem_malloc+0x1ec>)
 801b9be:	e79c      	b.n	801b8fa <mem_malloc+0x11a>
 801b9c0:	2001f2c8 	.word	0x2001f2c8
 801b9c4:	2001f2cc 	.word	0x2001f2cc
 801b9c8:	2001f2c4 	.word	0x2001f2c4
 801b9cc:	2001f2d0 	.word	0x2001f2d0
 801b9d0:	08044b7c 	.word	0x08044b7c
 801b9d4:	08044e88 	.word	0x08044e88
 801b9d8:	0802b44c 	.word	0x0802b44c
 801b9dc:	08044eb8 	.word	0x08044eb8
 801b9e0:	08044e58 	.word	0x08044e58
 801b9e4:	08044e3c 	.word	0x08044e3c
 801b9e8:	08044e28 	.word	0x08044e28
 801b9ec:	2001f2c0 	.word	0x2001f2c0

0801b9f0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9f4:	4f12      	ldr	r7, [pc, #72]	; (801ba40 <memp_overflow_check_all+0x50>)
 801b9f6:	2308      	movs	r3, #8
 801b9f8:	4c12      	ldr	r4, [pc, #72]	; (801ba44 <memp_overflow_check_all+0x54>)
 801b9fa:	4d13      	ldr	r5, [pc, #76]	; (801ba48 <memp_overflow_check_all+0x58>)
 801b9fc:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801ba00:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801ba4c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801ba04:	3403      	adds	r4, #3
 801ba06:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba0a:	b183      	cbz	r3, 801ba2e <memp_overflow_check_all+0x3e>
 801ba0c:	88a9      	ldrh	r1, [r5, #4]
 801ba0e:	2600      	movs	r6, #0
 801ba10:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801ba12:	f104 001c 	add.w	r0, r4, #28
 801ba16:	682b      	ldr	r3, [r5, #0]
 801ba18:	464a      	mov	r2, r9
 801ba1a:	f7ff fc8d 	bl	801b338 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba1e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba20:	88e8      	ldrh	r0, [r5, #6]
 801ba22:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba24:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba28:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801ba2a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba2c:	d8f0      	bhi.n	801ba10 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801ba2e:	45b8      	cmp	r8, r7
 801ba30:	d004      	beq.n	801ba3c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801ba32:	f857 5b04 	ldr.w	r5, [r7], #4
 801ba36:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801ba38:	88eb      	ldrh	r3, [r5, #6]
 801ba3a:	e7e3      	b.n	801ba04 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801ba3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba40:	0804516c 	.word	0x0804516c
 801ba44:	20029a50 	.word	0x20029a50
 801ba48:	080450d8 	.word	0x080450d8
 801ba4c:	08044edc 	.word	0x08044edc

0801ba50 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba50:	078b      	lsls	r3, r1, #30
{
 801ba52:	b570      	push	{r4, r5, r6, lr}
 801ba54:	460c      	mov	r4, r1
 801ba56:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba58:	d11f      	bne.n	801ba9a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801ba5a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801ba5c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801ba60:	6811      	ldr	r1, [r2, #0]
 801ba62:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801ba66:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba68:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801ba6c:	b15a      	cbz	r2, 801ba86 <do_memp_free_pool+0x36>
      if (t == h) {
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	d105      	bne.n	801ba7e <do_memp_free_pool+0x2e>
 801ba72:	e009      	b.n	801ba88 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba74:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba76:	b133      	cbz	r3, 801ba86 <do_memp_free_pool+0x36>
 801ba78:	b12a      	cbz	r2, 801ba86 <do_memp_free_pool+0x36>
      if (t == h) {
 801ba7a:	4293      	cmp	r3, r2
 801ba7c:	d004      	beq.n	801ba88 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba7e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801ba80:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801ba82:	2a00      	cmp	r2, #0
 801ba84:	d1f6      	bne.n	801ba74 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801ba86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba88:	4b08      	ldr	r3, [pc, #32]	; (801baac <do_memp_free_pool+0x5c>)
 801ba8a:	f240 1285 	movw	r2, #389	; 0x185
 801ba8e:	4908      	ldr	r1, [pc, #32]	; (801bab0 <do_memp_free_pool+0x60>)
 801ba90:	4808      	ldr	r0, [pc, #32]	; (801bab4 <do_memp_free_pool+0x64>)
}
 801ba92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801ba96:	f00a be5d 	b.w	8026754 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801ba9a:	4b04      	ldr	r3, [pc, #16]	; (801baac <do_memp_free_pool+0x5c>)
 801ba9c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801baa0:	4905      	ldr	r1, [pc, #20]	; (801bab8 <do_memp_free_pool+0x68>)
 801baa2:	4804      	ldr	r0, [pc, #16]	; (801bab4 <do_memp_free_pool+0x64>)
 801baa4:	f00a fe56 	bl	8026754 <iprintf>
 801baa8:	e7d7      	b.n	801ba5a <do_memp_free_pool+0xa>
 801baaa:	bf00      	nop
 801baac:	08044ee4 	.word	0x08044ee4
 801bab0:	08044f34 	.word	0x08044f34
 801bab4:	0802b44c 	.word	0x0802b44c
 801bab8:	08044f14 	.word	0x08044f14

0801babc <memp_init_pool>:
{
 801babc:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801babe:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801bac0:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801bac2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801bac6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801bac8:	b1b1      	cbz	r1, 801baf8 <memp_init_pool+0x3c>
 801baca:	3403      	adds	r4, #3
 801bacc:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801bace:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801bad0:	4616      	mov	r6, r2
 801bad2:	f024 0403 	bic.w	r4, r4, #3
 801bad6:	e001      	b.n	801badc <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801bad8:	68eb      	ldr	r3, [r5, #12]
 801bada:	681a      	ldr	r2, [r3, #0]
 801badc:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801bade:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801bae2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801bae4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801bae6:	f7ff fc73 	bl	801b3d0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801baea:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801baec:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801baee:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801baf2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801baf4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801baf6:	dcef      	bgt.n	801bad8 <memp_init_pool+0x1c>
}
 801baf8:	bd70      	pop	{r4, r5, r6, pc}
 801bafa:	bf00      	nop

0801bafc <memp_init>:
{
 801bafc:	b538      	push	{r3, r4, r5, lr}
 801bafe:	4c07      	ldr	r4, [pc, #28]	; (801bb1c <memp_init+0x20>)
 801bb00:	4807      	ldr	r0, [pc, #28]	; (801bb20 <memp_init+0x24>)
 801bb02:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801bb06:	e001      	b.n	801bb0c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801bb08:	f854 0b04 	ldr.w	r0, [r4], #4
 801bb0c:	f7ff ffd6 	bl	801babc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801bb10:	42ac      	cmp	r4, r5
 801bb12:	d1f9      	bne.n	801bb08 <memp_init+0xc>
}
 801bb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801bb18:	f7ff bf6a 	b.w	801b9f0 <memp_overflow_check_all>
 801bb1c:	0804516c 	.word	0x0804516c
 801bb20:	080450d8 	.word	0x080450d8

0801bb24 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb24:	280f      	cmp	r0, #15
{
 801bb26:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb28:	d81d      	bhi.n	801bb66 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	460e      	mov	r6, r1
 801bb2e:	4615      	mov	r5, r2
 801bb30:	f7ff ff5e 	bl	801b9f0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801bb34:	4b11      	ldr	r3, [pc, #68]	; (801bb7c <memp_malloc_fn+0x58>)
 801bb36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801bb3a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801bb3c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801bb3e:	b144      	cbz	r4, 801bb52 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801bb40:	6822      	ldr	r2, [r4, #0]
 801bb42:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801bb44:	2300      	movs	r3, #0
 801bb46:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb48:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801bb4a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb4e:	d102      	bne.n	801bb56 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801bb50:	341c      	adds	r4, #28
}
 801bb52:	4620      	mov	r0, r4
 801bb54:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bb56:	4b0a      	ldr	r3, [pc, #40]	; (801bb80 <memp_malloc_fn+0x5c>)
 801bb58:	f44f 728c 	mov.w	r2, #280	; 0x118
 801bb5c:	4909      	ldr	r1, [pc, #36]	; (801bb84 <memp_malloc_fn+0x60>)
 801bb5e:	480a      	ldr	r0, [pc, #40]	; (801bb88 <memp_malloc_fn+0x64>)
 801bb60:	f00a fdf8 	bl	8026754 <iprintf>
 801bb64:	e7f4      	b.n	801bb50 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb66:	2400      	movs	r4, #0
 801bb68:	4b05      	ldr	r3, [pc, #20]	; (801bb80 <memp_malloc_fn+0x5c>)
 801bb6a:	f240 1257 	movw	r2, #343	; 0x157
 801bb6e:	4907      	ldr	r1, [pc, #28]	; (801bb8c <memp_malloc_fn+0x68>)
 801bb70:	4805      	ldr	r0, [pc, #20]	; (801bb88 <memp_malloc_fn+0x64>)
 801bb72:	f00a fdef 	bl	8026754 <iprintf>
}
 801bb76:	4620      	mov	r0, r4
 801bb78:	bd70      	pop	{r4, r5, r6, pc}
 801bb7a:	bf00      	nop
 801bb7c:	08045168 	.word	0x08045168
 801bb80:	08044ee4 	.word	0x08044ee4
 801bb84:	08044f54 	.word	0x08044f54
 801bb88:	0802b44c 	.word	0x0802b44c
 801bb8c:	08044f78 	.word	0x08044f78

0801bb90 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bb90:	280f      	cmp	r0, #15
 801bb92:	d80e      	bhi.n	801bbb2 <memp_free+0x22>
{
 801bb94:	b570      	push	{r4, r5, r6, lr}
 801bb96:	460d      	mov	r5, r1

  if (mem == NULL) {
 801bb98:	b151      	cbz	r1, 801bbb0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	f7ff ff28 	bl	801b9f0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801bba0:	4b07      	ldr	r3, [pc, #28]	; (801bbc0 <memp_free+0x30>)
 801bba2:	4629      	mov	r1, r5
 801bba4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801bba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801bbac:	f7ff bf50 	b.w	801ba50 <do_memp_free_pool>
}
 801bbb0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bbb2:	4b04      	ldr	r3, [pc, #16]	; (801bbc4 <memp_free+0x34>)
 801bbb4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801bbb8:	4903      	ldr	r1, [pc, #12]	; (801bbc8 <memp_free+0x38>)
 801bbba:	4804      	ldr	r0, [pc, #16]	; (801bbcc <memp_free+0x3c>)
 801bbbc:	f00a bdca 	b.w	8026754 <iprintf>
 801bbc0:	08045168 	.word	0x08045168
 801bbc4:	08044ee4 	.word	0x08044ee4
 801bbc8:	08044f98 	.word	0x08044f98
 801bbcc:	0802b44c 	.word	0x0802b44c

0801bbd0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801bbd0:	f06f 000b 	mvn.w	r0, #11
 801bbd4:	4770      	bx	lr
 801bbd6:	bf00      	nop

0801bbd8 <netif_issue_reports>:
{
 801bbd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bbda:	4604      	mov	r4, r0
 801bbdc:	b150      	cbz	r0, 801bbf4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801bbde:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801bbe2:	f003 0205 	and.w	r2, r3, #5
 801bbe6:	2a05      	cmp	r2, #5
 801bbe8:	d103      	bne.n	801bbf2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801bbea:	6862      	ldr	r2, [r4, #4]
 801bbec:	b10a      	cbz	r2, 801bbf2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801bbee:	071b      	lsls	r3, r3, #28
 801bbf0:	d408      	bmi.n	801bc04 <netif_issue_reports+0x2c>
}
 801bbf2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801bbf4:	4b06      	ldr	r3, [pc, #24]	; (801bc10 <netif_issue_reports+0x38>)
 801bbf6:	f240 326d 	movw	r2, #877	; 0x36d
 801bbfa:	4906      	ldr	r1, [pc, #24]	; (801bc14 <netif_issue_reports+0x3c>)
 801bbfc:	4806      	ldr	r0, [pc, #24]	; (801bc18 <netif_issue_reports+0x40>)
 801bbfe:	f00a fda9 	bl	8026754 <iprintf>
 801bc02:	e7ec      	b.n	801bbde <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801bc04:	1d21      	adds	r1, r4, #4
 801bc06:	4620      	mov	r0, r4
}
 801bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801bc0c:	f007 bfac 	b.w	8023b68 <etharp_request>
 801bc10:	080451a8 	.word	0x080451a8
 801bc14:	080451dc 	.word	0x080451dc
 801bc18:	0802b44c 	.word	0x0802b44c

0801bc1c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bc1c:	b570      	push	{r4, r5, r6, lr}
 801bc1e:	4605      	mov	r5, r0
 801bc20:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc22:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801bc24:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc26:	b301      	cbz	r1, 801bc6a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801bc28:	686b      	ldr	r3, [r5, #4]
 801bc2a:	6822      	ldr	r2, [r4, #0]
 801bc2c:	429a      	cmp	r2, r3
 801bc2e:	d101      	bne.n	801bc34 <netif_do_set_ipaddr.isra.0+0x18>
}
 801bc30:	b002      	add	sp, #8
 801bc32:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801bc34:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bc36:	4630      	mov	r0, r6
 801bc38:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801bc3a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801bc3c:	f002 fa5a 	bl	801e0f4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801bc40:	a901      	add	r1, sp, #4
 801bc42:	4630      	mov	r0, r6
 801bc44:	f005 fde4 	bl	8021810 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801bc48:	a901      	add	r1, sp, #4
 801bc4a:	4630      	mov	r0, r6
 801bc4c:	f000 ff6c 	bl	801cb28 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bc50:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bc52:	2101      	movs	r1, #1
 801bc54:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bc56:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bc58:	f7ff ffbe 	bl	801bbd8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801bc5c:	69eb      	ldr	r3, [r5, #28]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d0e6      	beq.n	801bc30 <netif_do_set_ipaddr.isra.0+0x14>
 801bc62:	4628      	mov	r0, r5
 801bc64:	4798      	blx	r3
}
 801bc66:	b002      	add	sp, #8
 801bc68:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc6a:	4b04      	ldr	r3, [pc, #16]	; (801bc7c <netif_do_set_ipaddr.isra.0+0x60>)
 801bc6c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801bc70:	4903      	ldr	r1, [pc, #12]	; (801bc80 <netif_do_set_ipaddr.isra.0+0x64>)
 801bc72:	4804      	ldr	r0, [pc, #16]	; (801bc84 <netif_do_set_ipaddr.isra.0+0x68>)
 801bc74:	f00a fd6e 	bl	8026754 <iprintf>
 801bc78:	e7d6      	b.n	801bc28 <netif_do_set_ipaddr.isra.0+0xc>
 801bc7a:	bf00      	nop
 801bc7c:	080451a8 	.word	0x080451a8
 801bc80:	08045200 	.word	0x08045200
 801bc84:	0802b44c 	.word	0x0802b44c

0801bc88 <netif_init>:
}
 801bc88:	4770      	bx	lr
 801bc8a:	bf00      	nop

0801bc8c <netif_set_addr>:
{
 801bc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801bc8e:	2900      	cmp	r1, #0
{
 801bc90:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801bc92:	4b16      	ldr	r3, [pc, #88]	; (801bcec <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801bc94:	460c      	mov	r4, r1
{
 801bc96:	b083      	sub	sp, #12
 801bc98:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801bc9a:	bf14      	ite	ne
 801bc9c:	460c      	movne	r4, r1
 801bc9e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801bca0:	b30a      	cbz	r2, 801bce6 <netif_set_addr+0x5a>
 801bca2:	4616      	mov	r6, r2
  if (gw == NULL) {
 801bca4:	b1ef      	cbz	r7, 801bce2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801bca6:	6823      	ldr	r3, [r4, #0]
 801bca8:	b993      	cbnz	r3, 801bcd0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bcaa:	4621      	mov	r1, r4
 801bcac:	aa01      	add	r2, sp, #4
 801bcae:	4628      	mov	r0, r5
 801bcb0:	f7ff ffb4 	bl	801bc1c <netif_do_set_ipaddr.isra.0>
 801bcb4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801bcb6:	6833      	ldr	r3, [r6, #0]
 801bcb8:	68aa      	ldr	r2, [r5, #8]
 801bcba:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bcbc:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801bcbe:	bf18      	it	ne
 801bcc0:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bcc2:	683b      	ldr	r3, [r7, #0]
 801bcc4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801bcc6:	bf18      	it	ne
 801bcc8:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801bcca:	b119      	cbz	r1, 801bcd4 <netif_set_addr+0x48>
}
 801bccc:	b003      	add	sp, #12
 801bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801bcd0:	2100      	movs	r1, #0
 801bcd2:	e7f0      	b.n	801bcb6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bcd4:	aa01      	add	r2, sp, #4
 801bcd6:	4621      	mov	r1, r4
 801bcd8:	4628      	mov	r0, r5
 801bcda:	f7ff ff9f 	bl	801bc1c <netif_do_set_ipaddr.isra.0>
}
 801bcde:	b003      	add	sp, #12
 801bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801bce2:	4f02      	ldr	r7, [pc, #8]	; (801bcec <netif_set_addr+0x60>)
 801bce4:	e7df      	b.n	801bca6 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801bce6:	461e      	mov	r6, r3
 801bce8:	e7dc      	b.n	801bca4 <netif_set_addr+0x18>
 801bcea:	bf00      	nop
 801bcec:	080472d0 	.word	0x080472d0

0801bcf0 <netif_add>:
{
 801bcf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bcf6:	4606      	mov	r6, r0
 801bcf8:	2800      	cmp	r0, #0
 801bcfa:	f000 8081 	beq.w	801be00 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801bcfe:	2d00      	cmp	r5, #0
 801bd00:	f000 8087 	beq.w	801be12 <netif_add+0x122>
  if (ipaddr == NULL) {
 801bd04:	2900      	cmp	r1, #0
 801bd06:	d06f      	beq.n	801bde8 <netif_add+0xf8>
  if (netmask == NULL) {
 801bd08:	2a00      	cmp	r2, #0
 801bd0a:	d068      	beq.n	801bdde <netif_add+0xee>
  if (gw == NULL) {
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d069      	beq.n	801bde4 <netif_add+0xf4>
  netif->state = state;
 801bd10:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801bd12:	2400      	movs	r4, #0
  netif->num = netif_num;
 801bd14:	f8df a128 	ldr.w	sl, [pc, #296]	; 801be40 <netif_add+0x150>
  netif->state = state;
 801bd18:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801bd1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801bd1c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801bd1e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801bd20:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801bd24:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801bd26:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801bd2a:	483e      	ldr	r0, [pc, #248]	; (801be24 <netif_add+0x134>)
  netif->flags = 0;
 801bd2c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801bd30:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bd32:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801bd34:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801bd36:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801bd3a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bd3e:	f7ff ffa5 	bl	801bc8c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801bd42:	4630      	mov	r0, r6
 801bd44:	47a8      	blx	r5
 801bd46:	2800      	cmp	r0, #0
 801bd48:	d157      	bne.n	801bdfa <netif_add+0x10a>
      if (netif->num == 255) {
 801bd4a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801bd4e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801be44 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd52:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801be34 <netif_add+0x144>
 801bd56:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801be48 <netif_add+0x158>
 801bd5a:	4f33      	ldr	r7, [pc, #204]	; (801be28 <netif_add+0x138>)
      if (netif->num == 255) {
 801bd5c:	2aff      	cmp	r2, #255	; 0xff
 801bd5e:	d102      	bne.n	801bd66 <netif_add+0x76>
        netif->num = 0;
 801bd60:	2300      	movs	r3, #0
 801bd62:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bd66:	f8d8 4000 	ldr.w	r4, [r8]
 801bd6a:	2c00      	cmp	r4, #0
 801bd6c:	d042      	beq.n	801bdf4 <netif_add+0x104>
      num_netifs = 0;
 801bd6e:	2500      	movs	r5, #0
 801bd70:	e007      	b.n	801bd82 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801bd72:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bd76:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bd7a:	429a      	cmp	r2, r3
 801bd7c:	d014      	beq.n	801bda8 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bd7e:	6824      	ldr	r4, [r4, #0]
 801bd80:	b1fc      	cbz	r4, 801bdc2 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd82:	42a6      	cmp	r6, r4
        num_netifs++;
 801bd84:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bd88:	d013      	beq.n	801bdb2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801bd8a:	2dff      	cmp	r5, #255	; 0xff
 801bd8c:	ddf1      	ble.n	801bd72 <netif_add+0x82>
 801bd8e:	465b      	mov	r3, fp
 801bd90:	f240 128d 	movw	r2, #397	; 0x18d
 801bd94:	4925      	ldr	r1, [pc, #148]	; (801be2c <netif_add+0x13c>)
 801bd96:	4638      	mov	r0, r7
 801bd98:	f00a fcdc 	bl	8026754 <iprintf>
        if (netif2->num == netif->num) {
 801bd9c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801bda0:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bda4:	429a      	cmp	r2, r3
 801bda6:	d1ea      	bne.n	801bd7e <netif_add+0x8e>
          netif->num++;
 801bda8:	3201      	adds	r2, #1
 801bdaa:	b2d2      	uxtb	r2, r2
 801bdac:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801bdb0:	e7d4      	b.n	801bd5c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bdb2:	465b      	mov	r3, fp
 801bdb4:	f240 128b 	movw	r2, #395	; 0x18b
 801bdb8:	4649      	mov	r1, r9
 801bdba:	4638      	mov	r0, r7
 801bdbc:	f00a fcca 	bl	8026754 <iprintf>
 801bdc0:	e7e3      	b.n	801bd8a <netif_add+0x9a>
  netif->next = netif_list;
 801bdc2:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801bdc6:	2bfe      	cmp	r3, #254	; 0xfe
 801bdc8:	d012      	beq.n	801bdf0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801bdca:	3301      	adds	r3, #1
 801bdcc:	b2db      	uxtb	r3, r3
  return netif;
 801bdce:	4630      	mov	r0, r6
  netif->next = netif_list;
 801bdd0:	6034      	str	r4, [r6, #0]
 801bdd2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801bdd6:	f8c8 6000 	str.w	r6, [r8]
}
 801bdda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801bdde:	4a14      	ldr	r2, [pc, #80]	; (801be30 <netif_add+0x140>)
  if (gw == NULL) {
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d195      	bne.n	801bd10 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801bde4:	4b12      	ldr	r3, [pc, #72]	; (801be30 <netif_add+0x140>)
 801bde6:	e793      	b.n	801bd10 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801bde8:	4911      	ldr	r1, [pc, #68]	; (801be30 <netif_add+0x140>)
  if (netmask == NULL) {
 801bdea:	2a00      	cmp	r2, #0
 801bdec:	d18e      	bne.n	801bd0c <netif_add+0x1c>
 801bdee:	e7f6      	b.n	801bdde <netif_add+0xee>
    netif_num = 0;
 801bdf0:	2300      	movs	r3, #0
 801bdf2:	e7ec      	b.n	801bdce <netif_add+0xde>
  if (netif->num == 254) {
 801bdf4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801bdf8:	e7e5      	b.n	801bdc6 <netif_add+0xd6>
    return NULL;
 801bdfa:	4620      	mov	r0, r4
}
 801bdfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801be00:	4b0c      	ldr	r3, [pc, #48]	; (801be34 <netif_add+0x144>)
 801be02:	f240 1227 	movw	r2, #295	; 0x127
 801be06:	490c      	ldr	r1, [pc, #48]	; (801be38 <netif_add+0x148>)
 801be08:	4807      	ldr	r0, [pc, #28]	; (801be28 <netif_add+0x138>)
 801be0a:	f00a fca3 	bl	8026754 <iprintf>
 801be0e:	4630      	mov	r0, r6
 801be10:	e7e3      	b.n	801bdda <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801be12:	4b08      	ldr	r3, [pc, #32]	; (801be34 <netif_add+0x144>)
 801be14:	f44f 7294 	mov.w	r2, #296	; 0x128
 801be18:	4908      	ldr	r1, [pc, #32]	; (801be3c <netif_add+0x14c>)
 801be1a:	4803      	ldr	r0, [pc, #12]	; (801be28 <netif_add+0x138>)
 801be1c:	f00a fc9a 	bl	8026754 <iprintf>
 801be20:	4628      	mov	r0, r5
 801be22:	e7da      	b.n	801bdda <netif_add+0xea>
 801be24:	0801bbd1 	.word	0x0801bbd1
 801be28:	0802b44c 	.word	0x0802b44c
 801be2c:	08045264 	.word	0x08045264
 801be30:	080472d0 	.word	0x080472d0
 801be34:	080451a8 	.word	0x080451a8
 801be38:	08045210 	.word	0x08045210
 801be3c:	0804522c 	.word	0x0804522c
 801be40:	2002e43c 	.word	0x2002e43c
 801be44:	2002e438 	.word	0x2002e438
 801be48:	08045250 	.word	0x08045250

0801be4c <netif_set_default>:
  netif_default = netif;
 801be4c:	4b01      	ldr	r3, [pc, #4]	; (801be54 <netif_set_default+0x8>)
 801be4e:	6018      	str	r0, [r3, #0]
}
 801be50:	4770      	bx	lr
 801be52:	bf00      	nop
 801be54:	2002e434 	.word	0x2002e434

0801be58 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801be58:	b198      	cbz	r0, 801be82 <netif_set_up+0x2a>
{
 801be5a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801be5c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801be60:	4604      	mov	r4, r0
 801be62:	07da      	lsls	r2, r3, #31
 801be64:	d40c      	bmi.n	801be80 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801be66:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801be6a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801be6c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801be70:	b102      	cbz	r2, 801be74 <netif_set_up+0x1c>
 801be72:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be74:	4620      	mov	r0, r4
 801be76:	2103      	movs	r1, #3
}
 801be78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be7c:	f7ff beac 	b.w	801bbd8 <netif_issue_reports>
}
 801be80:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801be82:	4b03      	ldr	r3, [pc, #12]	; (801be90 <netif_set_up+0x38>)
 801be84:	f44f 7254 	mov.w	r2, #848	; 0x350
 801be88:	4902      	ldr	r1, [pc, #8]	; (801be94 <netif_set_up+0x3c>)
 801be8a:	4803      	ldr	r0, [pc, #12]	; (801be98 <netif_set_up+0x40>)
 801be8c:	f00a bc62 	b.w	8026754 <iprintf>
 801be90:	080451a8 	.word	0x080451a8
 801be94:	08045294 	.word	0x08045294
 801be98:	0802b44c 	.word	0x0802b44c

0801be9c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801be9c:	b1a8      	cbz	r0, 801beca <netif_set_down+0x2e>
{
 801be9e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801bea0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801bea4:	4604      	mov	r4, r0
 801bea6:	07da      	lsls	r2, r3, #31
 801bea8:	d50b      	bpl.n	801bec2 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801beaa:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801beae:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801beb0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801beb4:	d406      	bmi.n	801bec4 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801beb6:	69e3      	ldr	r3, [r4, #28]
 801beb8:	b11b      	cbz	r3, 801bec2 <netif_set_down+0x26>
 801beba:	4620      	mov	r0, r4
}
 801bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801bec0:	4718      	bx	r3
}
 801bec2:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801bec4:	f007 fbc8 	bl	8023658 <etharp_cleanup_netif>
 801bec8:	e7f5      	b.n	801beb6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801beca:	4b03      	ldr	r3, [pc, #12]	; (801bed8 <netif_set_down+0x3c>)
 801becc:	f240 329b 	movw	r2, #923	; 0x39b
 801bed0:	4902      	ldr	r1, [pc, #8]	; (801bedc <netif_set_down+0x40>)
 801bed2:	4803      	ldr	r0, [pc, #12]	; (801bee0 <netif_set_down+0x44>)
 801bed4:	f00a bc3e 	b.w	8026754 <iprintf>
 801bed8:	080451a8 	.word	0x080451a8
 801bedc:	080452b0 	.word	0x080452b0
 801bee0:	0802b44c 	.word	0x0802b44c

0801bee4 <netif_set_status_callback>:
  if (netif) {
 801bee4:	b100      	cbz	r0, 801bee8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801bee6:	61c1      	str	r1, [r0, #28]
}
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop

0801beec <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801beec:	b1b8      	cbz	r0, 801bf1e <netif_set_link_up+0x32>
{
 801beee:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801bef0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801bef4:	4604      	mov	r4, r0
 801bef6:	075a      	lsls	r2, r3, #29
 801bef8:	d500      	bpl.n	801befc <netif_set_link_up+0x10>
}
 801befa:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801befc:	f043 0304 	orr.w	r3, r3, #4
 801bf00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801bf04:	f006 fd96 	bl	8022a34 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bf08:	2103      	movs	r1, #3
 801bf0a:	4620      	mov	r0, r4
 801bf0c:	f7ff fe64 	bl	801bbd8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801bf10:	6a23      	ldr	r3, [r4, #32]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d0f1      	beq.n	801befa <netif_set_link_up+0xe>
 801bf16:	4620      	mov	r0, r4
}
 801bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801bf1c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bf1e:	4b03      	ldr	r3, [pc, #12]	; (801bf2c <netif_set_link_up+0x40>)
 801bf20:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bf24:	4902      	ldr	r1, [pc, #8]	; (801bf30 <netif_set_link_up+0x44>)
 801bf26:	4803      	ldr	r0, [pc, #12]	; (801bf34 <netif_set_link_up+0x48>)
 801bf28:	f00a bc14 	b.w	8026754 <iprintf>
 801bf2c:	080451a8 	.word	0x080451a8
 801bf30:	080452d0 	.word	0x080452d0
 801bf34:	0802b44c 	.word	0x0802b44c

0801bf38 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bf38:	b158      	cbz	r0, 801bf52 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801bf3a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801bf3e:	0751      	lsls	r1, r2, #29
 801bf40:	d506      	bpl.n	801bf50 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bf42:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801bf46:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bf48:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801bf4c:	b101      	cbz	r1, 801bf50 <netif_set_link_down+0x18>
 801bf4e:	4708      	bx	r1
}
 801bf50:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bf52:	4b03      	ldr	r3, [pc, #12]	; (801bf60 <netif_set_link_down+0x28>)
 801bf54:	f240 4206 	movw	r2, #1030	; 0x406
 801bf58:	4902      	ldr	r1, [pc, #8]	; (801bf64 <netif_set_link_down+0x2c>)
 801bf5a:	4803      	ldr	r0, [pc, #12]	; (801bf68 <netif_set_link_down+0x30>)
 801bf5c:	f00a bbfa 	b.w	8026754 <iprintf>
 801bf60:	080451a8 	.word	0x080451a8
 801bf64:	080452f4 	.word	0x080452f4
 801bf68:	0802b44c 	.word	0x0802b44c

0801bf6c <netif_set_link_callback>:
  if (netif) {
 801bf6c:	b100      	cbz	r0, 801bf70 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801bf6e:	6201      	str	r1, [r0, #32]
}
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop

0801bf74 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801bf74:	4602      	mov	r2, r0
 801bf76:	b158      	cbz	r0, 801bf90 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801bf78:	4b06      	ldr	r3, [pc, #24]	; (801bf94 <netif_get_by_index+0x20>)
 801bf7a:	6818      	ldr	r0, [r3, #0]
 801bf7c:	b910      	cbnz	r0, 801bf84 <netif_get_by_index+0x10>
 801bf7e:	e007      	b.n	801bf90 <netif_get_by_index+0x1c>
 801bf80:	6800      	ldr	r0, [r0, #0]
 801bf82:	b130      	cbz	r0, 801bf92 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801bf84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801bf88:	3301      	adds	r3, #1
 801bf8a:	b2db      	uxtb	r3, r3
 801bf8c:	4293      	cmp	r3, r2
 801bf8e:	d1f7      	bne.n	801bf80 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801bf90:	4770      	bx	lr
 801bf92:	4770      	bx	lr
 801bf94:	2002e438 	.word	0x2002e438

0801bf98 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf98:	4907      	ldr	r1, [pc, #28]	; (801bfb8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	4b07      	ldr	r3, [pc, #28]	; (801bfbc <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bf9e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801bfa0:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801bfa2:	b910      	cbnz	r0, 801bfaa <pbuf_free_ooseq_callback+0x12>
 801bfa4:	e006      	b.n	801bfb4 <pbuf_free_ooseq_callback+0x1c>
 801bfa6:	68c0      	ldr	r0, [r0, #12]
 801bfa8:	b120      	cbz	r0, 801bfb4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801bfaa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d0fa      	beq.n	801bfa6 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801bfb0:	f002 b8ca 	b.w	801e148 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801bfb4:	4770      	bx	lr
 801bfb6:	bf00      	nop
 801bfb8:	2002e444 	.word	0x2002e444
 801bfbc:	2002e43d 	.word	0x2002e43d

0801bfc0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	2800      	cmp	r0, #0
 801bfc8:	d052      	beq.n	801c070 <pbuf_free.part.0+0xb0>
  count = 0;
 801bfca:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bfcc:	4f29      	ldr	r7, [pc, #164]	; (801c074 <pbuf_free.part.0+0xb4>)
 801bfce:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801c084 <pbuf_free.part.0+0xc4>
 801bfd2:	4e29      	ldr	r6, [pc, #164]	; (801c078 <pbuf_free.part.0+0xb8>)
 801bfd4:	e00a      	b.n	801bfec <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bfd6:	6923      	ldr	r3, [r4, #16]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d03b      	beq.n	801c054 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801bfdc:	4620      	mov	r0, r4
 801bfde:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801bfe0:	3501      	adds	r5, #1
 801bfe2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801bfe4:	f1b9 0f00 	cmp.w	r9, #0
 801bfe8:	d01b      	beq.n	801c022 <pbuf_free.part.0+0x62>
 801bfea:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801bfec:	7ba3      	ldrb	r3, [r4, #14]
 801bfee:	b1db      	cbz	r3, 801c028 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801bff0:	3b01      	subs	r3, #1
 801bff2:	b2db      	uxtb	r3, r3
 801bff4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801bff6:	b9a3      	cbnz	r3, 801c022 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bff8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801bffa:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bffe:	079b      	lsls	r3, r3, #30
 801c000:	d4e9      	bmi.n	801bfd6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801c002:	7b23      	ldrb	r3, [r4, #12]
 801c004:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801c008:	2b02      	cmp	r3, #2
 801c00a:	d01e      	beq.n	801c04a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d02a      	beq.n	801c066 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801c010:	b99b      	cbnz	r3, 801c03a <pbuf_free.part.0+0x7a>
      count++;
 801c012:	3501      	adds	r5, #1
          mem_free(p);
 801c014:	4620      	mov	r0, r4
 801c016:	f7ff fa27 	bl	801b468 <mem_free>
      count++;
 801c01a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801c01c:	f1b9 0f00 	cmp.w	r9, #0
 801c020:	d1e3      	bne.n	801bfea <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801c022:	4628      	mov	r0, r5
 801c024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801c028:	463b      	mov	r3, r7
 801c02a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801c02e:	4641      	mov	r1, r8
 801c030:	4630      	mov	r0, r6
 801c032:	f00a fb8f 	bl	8026754 <iprintf>
    ref = --(p->ref);
 801c036:	7ba3      	ldrb	r3, [r4, #14]
 801c038:	e7da      	b.n	801bff0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801c03a:	463b      	mov	r3, r7
 801c03c:	f240 320f 	movw	r2, #783	; 0x30f
 801c040:	490e      	ldr	r1, [pc, #56]	; (801c07c <pbuf_free.part.0+0xbc>)
 801c042:	4630      	mov	r0, r6
 801c044:	f00a fb86 	bl	8026754 <iprintf>
 801c048:	e7ca      	b.n	801bfe0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801c04a:	4621      	mov	r1, r4
 801c04c:	200f      	movs	r0, #15
 801c04e:	f7ff fd9f 	bl	801bb90 <memp_free>
 801c052:	e7c5      	b.n	801bfe0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801c054:	463b      	mov	r3, r7
 801c056:	f240 22ff 	movw	r2, #767	; 0x2ff
 801c05a:	4909      	ldr	r1, [pc, #36]	; (801c080 <pbuf_free.part.0+0xc0>)
 801c05c:	4630      	mov	r0, r6
 801c05e:	f00a fb79 	bl	8026754 <iprintf>
        pc->custom_free_function(p);
 801c062:	6923      	ldr	r3, [r4, #16]
 801c064:	e7ba      	b.n	801bfdc <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801c066:	4621      	mov	r1, r4
 801c068:	200e      	movs	r0, #14
 801c06a:	f7ff fd91 	bl	801bb90 <memp_free>
 801c06e:	e7b7      	b.n	801bfe0 <pbuf_free.part.0+0x20>
  count = 0;
 801c070:	4605      	mov	r5, r0
 801c072:	e7d6      	b.n	801c022 <pbuf_free.part.0+0x62>
 801c074:	08045318 	.word	0x08045318
 801c078:	0802b44c 	.word	0x0802b44c
 801c07c:	08045384 	.word	0x08045384
 801c080:	08045360 	.word	0x08045360
 801c084:	08045348 	.word	0x08045348

0801c088 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801c08c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c08e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801c1b4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801c092:	4605      	mov	r5, r0
 801c094:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801c096:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c098:	8944      	ldrh	r4, [r0, #10]
 801c09a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c09c:	f8df b128 	ldr.w	fp, [pc, #296]	; 801c1c8 <pbuf_copy.part.0+0x140>
 801c0a0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801c1bc <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c0a4:	1be4      	subs	r4, r4, r7
 801c0a6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c0a8:	6868      	ldr	r0, [r5, #4]
 801c0aa:	4294      	cmp	r4, r2
 801c0ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c0b0:	4438      	add	r0, r7
 801c0b2:	bf28      	it	cs
 801c0b4:	4614      	movcs	r4, r2
 801c0b6:	4431      	add	r1, r6
 801c0b8:	4622      	mov	r2, r4
    offset_to += len;
 801c0ba:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801c0bc:	f009 fb84 	bl	80257c8 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c0c0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801c0c2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c0c4:	429f      	cmp	r7, r3
 801c0c6:	d837      	bhi.n	801c138 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c0c8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c0cc:	4296      	cmp	r6, r2
 801c0ce:	d829      	bhi.n	801c124 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801c0d0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801c0d2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801c0d4:	d317      	bcc.n	801c106 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801c0d6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801c0d8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801c0dc:	d04b      	beq.n	801c176 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c0de:	f1b8 0f00 	cmp.w	r8, #0
 801c0e2:	d144      	bne.n	801c16e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c0e4:	892a      	ldrh	r2, [r5, #8]
 801c0e6:	896b      	ldrh	r3, [r5, #10]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d14c      	bne.n	801c186 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c0ec:	6828      	ldr	r0, [r5, #0]
 801c0ee:	b140      	cbz	r0, 801c102 <pbuf_copy.part.0+0x7a>
 801c0f0:	4b30      	ldr	r3, [pc, #192]	; (801c1b4 <pbuf_copy.part.0+0x12c>)
 801c0f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801c0f6:	4930      	ldr	r1, [pc, #192]	; (801c1b8 <pbuf_copy.part.0+0x130>)
 801c0f8:	4830      	ldr	r0, [pc, #192]	; (801c1bc <pbuf_copy.part.0+0x134>)
 801c0fa:	f00a fb2b 	bl	8026754 <iprintf>
 801c0fe:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801c102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801c106:	429f      	cmp	r7, r3
 801c108:	d040      	beq.n	801c18c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c10a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801c10e:	4293      	cmp	r3, r2
 801c110:	d01a      	beq.n	801c148 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c112:	896c      	ldrh	r4, [r5, #10]
 801c114:	2d00      	cmp	r5, #0
 801c116:	d0c5      	beq.n	801c0a4 <pbuf_copy.part.0+0x1c>
 801c118:	892b      	ldrh	r3, [r5, #8]
 801c11a:	42a3      	cmp	r3, r4
 801c11c:	d045      	beq.n	801c1aa <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801c11e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c122:	e7bf      	b.n	801c0a4 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801c124:	f240 32da 	movw	r2, #986	; 0x3da
 801c128:	4653      	mov	r3, sl
 801c12a:	4925      	ldr	r1, [pc, #148]	; (801c1c0 <pbuf_copy.part.0+0x138>)
 801c12c:	4648      	mov	r0, r9
 801c12e:	f00a fb11 	bl	8026754 <iprintf>
    if (offset_from >= p_from->len) {
 801c132:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c136:	e7cb      	b.n	801c0d0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801c138:	4653      	mov	r3, sl
 801c13a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801c13e:	4659      	mov	r1, fp
 801c140:	4648      	mov	r0, r9
 801c142:	f00a fb07 	bl	8026754 <iprintf>
 801c146:	e7bf      	b.n	801c0c8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c148:	f8d8 3000 	ldr.w	r3, [r8]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d0e0      	beq.n	801c112 <pbuf_copy.part.0+0x8a>
 801c150:	4b18      	ldr	r3, [pc, #96]	; (801c1b4 <pbuf_copy.part.0+0x12c>)
 801c152:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801c156:	4918      	ldr	r1, [pc, #96]	; (801c1b8 <pbuf_copy.part.0+0x130>)
 801c158:	4818      	ldr	r0, [pc, #96]	; (801c1bc <pbuf_copy.part.0+0x134>)
 801c15a:	f00a fafb 	bl	8026754 <iprintf>
 801c15e:	f06f 0005 	mvn.w	r0, #5
}
 801c162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c166:	f1b8 0f00 	cmp.w	r8, #0
 801c16a:	d00a      	beq.n	801c182 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801c16c:	2700      	movs	r7, #0
 801c16e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801c170:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801c174:	e7c9      	b.n	801c10a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801c176:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c178:	2d00      	cmp	r5, #0
 801c17a:	d1f4      	bne.n	801c166 <pbuf_copy.part.0+0xde>
 801c17c:	f1b8 0f00 	cmp.w	r8, #0
 801c180:	d108      	bne.n	801c194 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801c182:	2d00      	cmp	r5, #0
 801c184:	d1ae      	bne.n	801c0e4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801c186:	2000      	movs	r0, #0
}
 801c188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801c18c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c18e:	b10d      	cbz	r5, 801c194 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801c190:	2700      	movs	r7, #0
 801c192:	e7ed      	b.n	801c170 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801c194:	4b07      	ldr	r3, [pc, #28]	; (801c1b4 <pbuf_copy.part.0+0x12c>)
 801c196:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801c19a:	490a      	ldr	r1, [pc, #40]	; (801c1c4 <pbuf_copy.part.0+0x13c>)
 801c19c:	4807      	ldr	r0, [pc, #28]	; (801c1bc <pbuf_copy.part.0+0x134>)
 801c19e:	f00a fad9 	bl	8026754 <iprintf>
 801c1a2:	f06f 000f 	mvn.w	r0, #15
}
 801c1a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801c1aa:	682b      	ldr	r3, [r5, #0]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d0b6      	beq.n	801c11e <pbuf_copy.part.0+0x96>
 801c1b0:	e79e      	b.n	801c0f0 <pbuf_copy.part.0+0x68>
 801c1b2:	bf00      	nop
 801c1b4:	08045318 	.word	0x08045318
 801c1b8:	080453dc 	.word	0x080453dc
 801c1bc:	0802b44c 	.word	0x0802b44c
 801c1c0:	080453b0 	.word	0x080453b0
 801c1c4:	080453cc 	.word	0x080453cc
 801c1c8:	08045398 	.word	0x08045398

0801c1cc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1cc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801c1d0:	2b01      	cmp	r3, #1
{
 801c1d2:	b570      	push	{r4, r5, r6, lr}
 801c1d4:	4614      	mov	r4, r2
 801c1d6:	4606      	mov	r6, r0
 801c1d8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1da:	d110      	bne.n	801c1fe <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c1dc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c1e0:	490b      	ldr	r1, [pc, #44]	; (801c210 <pbuf_alloc_reference+0x44>)
 801c1e2:	200e      	movs	r0, #14
 801c1e4:	f7ff fc9e 	bl	801bb24 <memp_malloc_fn>
  if (p == NULL) {
 801c1e8:	b140      	cbz	r0, 801c1fc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801c1ea:	2300      	movs	r3, #0
  p->ref = 1;
 801c1ec:	2201      	movs	r2, #1
  p->payload = payload;
 801c1ee:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801c1f0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801c1f2:	6003      	str	r3, [r0, #0]
  p->len = len;
 801c1f4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801c1f6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801c1f8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801c1fa:	81c2      	strh	r2, [r0, #14]
}
 801c1fc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c1fe:	4b04      	ldr	r3, [pc, #16]	; (801c210 <pbuf_alloc_reference+0x44>)
 801c200:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801c204:	4903      	ldr	r1, [pc, #12]	; (801c214 <pbuf_alloc_reference+0x48>)
 801c206:	4804      	ldr	r0, [pc, #16]	; (801c218 <pbuf_alloc_reference+0x4c>)
 801c208:	f00a faa4 	bl	8026754 <iprintf>
 801c20c:	e7e6      	b.n	801c1dc <pbuf_alloc_reference+0x10>
 801c20e:	bf00      	nop
 801c210:	08045318 	.word	0x08045318
 801c214:	08045408 	.word	0x08045408
 801c218:	0802b44c 	.word	0x0802b44c

0801c21c <pbuf_alloc>:
  switch (type) {
 801c21c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c224:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801c226:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801c22a:	d03d      	beq.n	801c2a8 <pbuf_alloc+0x8c>
 801c22c:	d80e      	bhi.n	801c24c <pbuf_alloc+0x30>
 801c22e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801c232:	2c01      	cmp	r4, #1
 801c234:	d033      	beq.n	801c29e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c236:	4b41      	ldr	r3, [pc, #260]	; (801c33c <pbuf_alloc+0x120>)
 801c238:	f240 1227 	movw	r2, #295	; 0x127
 801c23c:	4940      	ldr	r1, [pc, #256]	; (801c340 <pbuf_alloc+0x124>)
      return NULL;
 801c23e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c240:	4840      	ldr	r0, [pc, #256]	; (801c344 <pbuf_alloc+0x128>)
 801c242:	f00a fa87 	bl	8026754 <iprintf>
}
 801c246:	4628      	mov	r0, r5
 801c248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801c24c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801c250:	d1f1      	bne.n	801c236 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801c252:	f10a 0303 	add.w	r3, sl, #3
 801c256:	1cca      	adds	r2, r1, #3
 801c258:	4606      	mov	r6, r0
 801c25a:	f022 0203 	bic.w	r2, r2, #3
 801c25e:	f023 0303 	bic.w	r3, r3, #3
 801c262:	4413      	add	r3, r2
 801c264:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c266:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c26a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c26c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c26e:	d34d      	bcc.n	801c30c <pbuf_alloc+0xf0>
 801c270:	4282      	cmp	r2, r0
 801c272:	d84b      	bhi.n	801c30c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801c274:	f7ff fab4 	bl	801b7e0 <mem_malloc>
      if (p == NULL) {
 801c278:	4605      	mov	r5, r0
 801c27a:	2800      	cmp	r0, #0
 801c27c:	d0e3      	beq.n	801c246 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c27e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801c280:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801c282:	4a31      	ldr	r2, [pc, #196]	; (801c348 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c284:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801c286:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801c28a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c28c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801c290:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801c294:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801c296:	6043      	str	r3, [r0, #4]
}
 801c298:	4628      	mov	r0, r5
 801c29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801c29e:	2000      	movs	r0, #0
}
 801c2a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801c2a4:	f7ff bf92 	b.w	801c1cc <pbuf_alloc_reference>
  switch (type) {
 801c2a8:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c2aa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801c33c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801c2ae:	4f27      	ldr	r7, [pc, #156]	; (801c34c <pbuf_alloc+0x130>)
  switch (type) {
 801c2b0:	4625      	mov	r5, r4
 801c2b2:	e009      	b.n	801c2c8 <pbuf_alloc+0xac>
          last->next = q;
 801c2b4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801c2b6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801c2ba:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801c2be:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801c2c2:	f1b9 0f00 	cmp.w	r9, #0
 801c2c6:	d0be      	beq.n	801c246 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c2c8:	22f3      	movs	r2, #243	; 0xf3
 801c2ca:	4641      	mov	r1, r8
 801c2cc:	200f      	movs	r0, #15
 801c2ce:	4626      	mov	r6, r4
 801c2d0:	f7ff fc28 	bl	801bb24 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2d4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801c2d8:	2100      	movs	r1, #0
        if (q == NULL) {
 801c2da:	4604      	mov	r4, r0
 801c2dc:	b1d0      	cbz	r0, 801c314 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2de:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2e2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801c2e6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2ea:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2ee:	3213      	adds	r2, #19
  p->next = NULL;
 801c2f0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2f2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c2f4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801c2f8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2fa:	454b      	cmp	r3, r9
  p->payload = payload;
 801c2fc:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c2fe:	bf28      	it	cs
 801c300:	464b      	movcs	r3, r9
  p->len = len;
 801c302:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801c304:	2d00      	cmp	r5, #0
 801c306:	d1d5      	bne.n	801c2b4 <pbuf_alloc+0x98>
 801c308:	4605      	mov	r5, r0
 801c30a:	e7d4      	b.n	801c2b6 <pbuf_alloc+0x9a>
          return NULL;
 801c30c:	2500      	movs	r5, #0
}
 801c30e:	4628      	mov	r0, r5
 801c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801c314:	4e0e      	ldr	r6, [pc, #56]	; (801c350 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801c316:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801c318:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801c31a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801c31c:	b133      	cbz	r3, 801c32c <pbuf_alloc+0x110>
          if (p) {
 801c31e:	2d00      	cmp	r5, #0
 801c320:	d0f4      	beq.n	801c30c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801c322:	4628      	mov	r0, r5
          return NULL;
 801c324:	2500      	movs	r5, #0
 801c326:	f7ff fe4b 	bl	801bfc0 <pbuf_free.part.0>
 801c32a:	e78c      	b.n	801c246 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c32c:	4601      	mov	r1, r0
 801c32e:	4809      	ldr	r0, [pc, #36]	; (801c354 <pbuf_alloc+0x138>)
 801c330:	f7fc fefc 	bl	801912c <tcpip_try_callback>
 801c334:	2800      	cmp	r0, #0
 801c336:	d0f2      	beq.n	801c31e <pbuf_alloc+0x102>
 801c338:	7034      	strb	r4, [r6, #0]
 801c33a:	e7f0      	b.n	801c31e <pbuf_alloc+0x102>
 801c33c:	08045318 	.word	0x08045318
 801c340:	0804541c 	.word	0x0804541c
 801c344:	0802b44c 	.word	0x0802b44c
 801c348:	00010080 	.word	0x00010080
 801c34c:	00010082 	.word	0x00010082
 801c350:	2002e43d 	.word	0x2002e43d
 801c354:	0801bf99 	.word	0x0801bf99

0801c358 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c358:	3003      	adds	r0, #3
 801c35a:	f020 0003 	bic.w	r0, r0, #3
{
 801c35e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c360:	eb01 0e00 	add.w	lr, r1, r0
{
 801c364:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801c368:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c36a:	45e6      	cmp	lr, ip
 801c36c:	d80d      	bhi.n	801c38a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801c36e:	b104      	cbz	r4, 801c372 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c370:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c372:	4618      	mov	r0, r3
  p->next = NULL;
 801c374:	2300      	movs	r3, #0
  p->payload = payload;
 801c376:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801c378:	2402      	movs	r4, #2
  p->next = NULL;
 801c37a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801c37c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801c37e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801c380:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801c382:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801c384:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801c386:	81c3      	strh	r3, [r0, #14]
}
 801c388:	bd10      	pop	{r4, pc}
    return NULL;
 801c38a:	2000      	movs	r0, #0
}
 801c38c:	bd10      	pop	{r4, pc}
 801c38e:	bf00      	nop

0801c390 <pbuf_realloc>:
{
 801c390:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c392:	4604      	mov	r4, r0
{
 801c394:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c396:	2800      	cmp	r0, #0
 801c398:	d037      	beq.n	801c40a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801c39a:	8922      	ldrh	r2, [r4, #8]
 801c39c:	42aa      	cmp	r2, r5
 801c39e:	d91b      	bls.n	801c3d8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801c3a0:	8963      	ldrh	r3, [r4, #10]
 801c3a2:	429d      	cmp	r5, r3
 801c3a4:	d90d      	bls.n	801c3c2 <pbuf_realloc+0x32>
 801c3a6:	1aa9      	subs	r1, r5, r2
 801c3a8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c3aa:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801c3ac:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c3ae:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801c3b0:	b29d      	uxth	r5, r3
    q = q->next;
 801c3b2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c3b4:	2c00      	cmp	r4, #0
 801c3b6:	d030      	beq.n	801c41a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801c3b8:	8963      	ldrh	r3, [r4, #10]
 801c3ba:	42ab      	cmp	r3, r5
 801c3bc:	d201      	bcs.n	801c3c2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c3be:	8922      	ldrh	r2, [r4, #8]
 801c3c0:	e7f3      	b.n	801c3aa <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c3c2:	7b22      	ldrb	r2, [r4, #12]
 801c3c4:	0712      	lsls	r2, r2, #28
 801c3c6:	d008      	beq.n	801c3da <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801c3c8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801c3ca:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801c3cc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801c3ce:	b108      	cbz	r0, 801c3d4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801c3d0:	f7ff fdf6 	bl	801bfc0 <pbuf_free.part.0>
  q->next = NULL;
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	6023      	str	r3, [r4, #0]
}
 801c3d8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c3da:	429d      	cmp	r5, r3
 801c3dc:	d0f4      	beq.n	801c3c8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c3de:	7b63      	ldrb	r3, [r4, #13]
 801c3e0:	079b      	lsls	r3, r3, #30
 801c3e2:	d4f1      	bmi.n	801c3c8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c3e4:	6863      	ldr	r3, [r4, #4]
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	1b1b      	subs	r3, r3, r4
 801c3ea:	18e9      	adds	r1, r5, r3
 801c3ec:	b289      	uxth	r1, r1
 801c3ee:	f7ff f91d 	bl	801b62c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	2800      	cmp	r0, #0
 801c3f6:	d1e7      	bne.n	801c3c8 <pbuf_realloc+0x38>
 801c3f8:	4b0c      	ldr	r3, [pc, #48]	; (801c42c <pbuf_realloc+0x9c>)
 801c3fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 801c3fe:	490c      	ldr	r1, [pc, #48]	; (801c430 <pbuf_realloc+0xa0>)
 801c400:	480c      	ldr	r0, [pc, #48]	; (801c434 <pbuf_realloc+0xa4>)
 801c402:	f00a f9a7 	bl	8026754 <iprintf>
  q->len = rem_len;
 801c406:	8164      	strh	r4, [r4, #10]
 801c408:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c40a:	4b08      	ldr	r3, [pc, #32]	; (801c42c <pbuf_realloc+0x9c>)
 801c40c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c410:	4909      	ldr	r1, [pc, #36]	; (801c438 <pbuf_realloc+0xa8>)
 801c412:	4808      	ldr	r0, [pc, #32]	; (801c434 <pbuf_realloc+0xa4>)
 801c414:	f00a f99e 	bl	8026754 <iprintf>
 801c418:	e7bf      	b.n	801c39a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c41a:	4b04      	ldr	r3, [pc, #16]	; (801c42c <pbuf_realloc+0x9c>)
 801c41c:	f240 12af 	movw	r2, #431	; 0x1af
 801c420:	4906      	ldr	r1, [pc, #24]	; (801c43c <pbuf_realloc+0xac>)
 801c422:	4804      	ldr	r0, [pc, #16]	; (801c434 <pbuf_realloc+0xa4>)
 801c424:	f00a f996 	bl	8026754 <iprintf>
  while (rem_len > q->len) {
 801c428:	8963      	ldrh	r3, [r4, #10]
 801c42a:	deff      	udf	#255	; 0xff
 801c42c:	08045318 	.word	0x08045318
 801c430:	08045468 	.word	0x08045468
 801c434:	0802b44c 	.word	0x0802b44c
 801c438:	08045438 	.word	0x08045438
 801c43c:	08045450 	.word	0x08045450

0801c440 <pbuf_add_header>:
{
 801c440:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c442:	b310      	cbz	r0, 801c48a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c444:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c448:	d20c      	bcs.n	801c464 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801c44a:	b169      	cbz	r1, 801c468 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801c44c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c450:	8902      	ldrh	r2, [r0, #8]
 801c452:	4603      	mov	r3, r0
 801c454:	4462      	add	r2, ip
 801c456:	b292      	uxth	r2, r2
 801c458:	4594      	cmp	ip, r2
 801c45a:	d803      	bhi.n	801c464 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c45c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801c460:	2800      	cmp	r0, #0
 801c462:	db03      	blt.n	801c46c <pbuf_add_header+0x2c>
    return 1;
 801c464:	2001      	movs	r0, #1
}
 801c466:	bd08      	pop	{r3, pc}
    return 0;
 801c468:	4608      	mov	r0, r1
}
 801c46a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801c46c:	6858      	ldr	r0, [r3, #4]
 801c46e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c470:	f103 0010 	add.w	r0, r3, #16
 801c474:	4281      	cmp	r1, r0
 801c476:	d3f5      	bcc.n	801c464 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c478:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c47c:	2000      	movs	r0, #0
  p->payload = payload;
 801c47e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c480:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c482:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c484:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c488:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c48a:	4b04      	ldr	r3, [pc, #16]	; (801c49c <pbuf_add_header+0x5c>)
 801c48c:	f240 12df 	movw	r2, #479	; 0x1df
 801c490:	4903      	ldr	r1, [pc, #12]	; (801c4a0 <pbuf_add_header+0x60>)
 801c492:	4804      	ldr	r0, [pc, #16]	; (801c4a4 <pbuf_add_header+0x64>)
 801c494:	f00a f95e 	bl	8026754 <iprintf>
    return 1;
 801c498:	2001      	movs	r0, #1
}
 801c49a:	bd08      	pop	{r3, pc}
 801c49c:	08045318 	.word	0x08045318
 801c4a0:	08046d44 	.word	0x08046d44
 801c4a4:	0802b44c 	.word	0x0802b44c

0801c4a8 <pbuf_remove_header>:
{
 801c4a8:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c4aa:	b1c8      	cbz	r0, 801c4e0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c4ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801c4b0:	d21f      	bcs.n	801c4f2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801c4b2:	b199      	cbz	r1, 801c4dc <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801c4b4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c4b8:	8942      	ldrh	r2, [r0, #10]
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	4594      	cmp	ip, r2
 801c4be:	d81a      	bhi.n	801c4f6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4c0:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801c4c2:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4c6:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4ca:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801c4cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4ce:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801c4d2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c4d4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c4d6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801c4da:	bd08      	pop	{r3, pc}
    return 0;
 801c4dc:	4608      	mov	r0, r1
}
 801c4de:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801c4e0:	4b09      	ldr	r3, [pc, #36]	; (801c508 <pbuf_remove_header+0x60>)
 801c4e2:	f240 224b 	movw	r2, #587	; 0x24b
 801c4e6:	4909      	ldr	r1, [pc, #36]	; (801c50c <pbuf_remove_header+0x64>)
 801c4e8:	4809      	ldr	r0, [pc, #36]	; (801c510 <pbuf_remove_header+0x68>)
 801c4ea:	f00a f933 	bl	8026754 <iprintf>
    return 1;
 801c4ee:	2001      	movs	r0, #1
}
 801c4f0:	bd08      	pop	{r3, pc}
    return 1;
 801c4f2:	2001      	movs	r0, #1
}
 801c4f4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c4f6:	4b04      	ldr	r3, [pc, #16]	; (801c508 <pbuf_remove_header+0x60>)
 801c4f8:	f240 2255 	movw	r2, #597	; 0x255
 801c4fc:	4905      	ldr	r1, [pc, #20]	; (801c514 <pbuf_remove_header+0x6c>)
 801c4fe:	4804      	ldr	r0, [pc, #16]	; (801c510 <pbuf_remove_header+0x68>)
 801c500:	f00a f928 	bl	8026754 <iprintf>
 801c504:	2001      	movs	r0, #1
}
 801c506:	bd08      	pop	{r3, pc}
 801c508:	08045318 	.word	0x08045318
 801c50c:	08046d44 	.word	0x08046d44
 801c510:	0802b44c 	.word	0x0802b44c
 801c514:	08045484 	.word	0x08045484

0801c518 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801c518:	2900      	cmp	r1, #0
 801c51a:	db1a      	blt.n	801c552 <pbuf_header_force+0x3a>
{
 801c51c:	b508      	push	{r3, lr}
 801c51e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801c520:	b1d0      	cbz	r0, 801c558 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801c522:	b341      	cbz	r1, 801c576 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801c524:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c528:	891a      	ldrh	r2, [r3, #8]
 801c52a:	4462      	add	r2, ip
 801c52c:	b292      	uxth	r2, r2
 801c52e:	4594      	cmp	ip, r2
 801c530:	d81f      	bhi.n	801c572 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c532:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801c536:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801c538:	6858      	ldr	r0, [r3, #4]
 801c53a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c53e:	db14      	blt.n	801c56a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801c540:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801c544:	2000      	movs	r0, #0
  p->payload = payload;
 801c546:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c548:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c54a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c54c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801c550:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c552:	4249      	negs	r1, r1
 801c554:	f7ff bfa8 	b.w	801c4a8 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801c558:	4b08      	ldr	r3, [pc, #32]	; (801c57c <pbuf_header_force+0x64>)
 801c55a:	f240 12df 	movw	r2, #479	; 0x1df
 801c55e:	4908      	ldr	r1, [pc, #32]	; (801c580 <pbuf_header_force+0x68>)
 801c560:	4808      	ldr	r0, [pc, #32]	; (801c584 <pbuf_header_force+0x6c>)
 801c562:	f00a f8f7 	bl	8026754 <iprintf>
    return 1;
 801c566:	2001      	movs	r0, #1
}
 801c568:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c56a:	f103 0010 	add.w	r0, r3, #16
 801c56e:	4281      	cmp	r1, r0
 801c570:	d2e6      	bcs.n	801c540 <pbuf_header_force+0x28>
    return 1;
 801c572:	2001      	movs	r0, #1
}
 801c574:	bd08      	pop	{r3, pc}
    return 0;
 801c576:	4608      	mov	r0, r1
}
 801c578:	bd08      	pop	{r3, pc}
 801c57a:	bf00      	nop
 801c57c:	08045318 	.word	0x08045318
 801c580:	08046d44 	.word	0x08046d44
 801c584:	0802b44c 	.word	0x0802b44c

0801c588 <pbuf_free_header>:
{
 801c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801c58a:	4604      	mov	r4, r0
 801c58c:	b158      	cbz	r0, 801c5a6 <pbuf_free_header+0x1e>
 801c58e:	460d      	mov	r5, r1
 801c590:	b149      	cbz	r1, 801c5a6 <pbuf_free_header+0x1e>
      f->next = 0;
 801c592:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801c594:	8963      	ldrh	r3, [r4, #10]
 801c596:	4620      	mov	r0, r4
 801c598:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801c59a:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801c59e:	d904      	bls.n	801c5aa <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801c5a0:	4629      	mov	r1, r5
 801c5a2:	f7ff ff81 	bl	801c4a8 <pbuf_remove_header>
}
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801c5aa:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801c5ac:	b295      	uxth	r5, r2
      f->next = 0;
 801c5ae:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801c5b0:	4634      	mov	r4, r6
 801c5b2:	f7ff fd05 	bl	801bfc0 <pbuf_free.part.0>
  while (free_left && p) {
 801c5b6:	b10d      	cbz	r5, 801c5bc <pbuf_free_header+0x34>
 801c5b8:	2e00      	cmp	r6, #0
 801c5ba:	d1eb      	bne.n	801c594 <pbuf_free_header+0xc>
      p = p->next;
 801c5bc:	4634      	mov	r4, r6
 801c5be:	e7f2      	b.n	801c5a6 <pbuf_free_header+0x1e>

0801c5c0 <pbuf_free>:
  if (p == NULL) {
 801c5c0:	b108      	cbz	r0, 801c5c6 <pbuf_free+0x6>
 801c5c2:	f7ff bcfd 	b.w	801bfc0 <pbuf_free.part.0>
{
 801c5c6:	b510      	push	{r4, lr}
 801c5c8:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801c5ca:	4b04      	ldr	r3, [pc, #16]	; (801c5dc <pbuf_free+0x1c>)
 801c5cc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c5d0:	4903      	ldr	r1, [pc, #12]	; (801c5e0 <pbuf_free+0x20>)
 801c5d2:	4804      	ldr	r0, [pc, #16]	; (801c5e4 <pbuf_free+0x24>)
 801c5d4:	f00a f8be 	bl	8026754 <iprintf>
}
 801c5d8:	4620      	mov	r0, r4
 801c5da:	bd10      	pop	{r4, pc}
 801c5dc:	08045318 	.word	0x08045318
 801c5e0:	08046d44 	.word	0x08046d44
 801c5e4:	0802b44c 	.word	0x0802b44c

0801c5e8 <pbuf_clen>:
  while (p != NULL) {
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	b130      	cbz	r0, 801c5fa <pbuf_clen+0x12>
  len = 0;
 801c5ec:	2000      	movs	r0, #0
    ++len;
 801c5ee:	3001      	adds	r0, #1
    p = p->next;
 801c5f0:	681b      	ldr	r3, [r3, #0]
    ++len;
 801c5f2:	b280      	uxth	r0, r0
  while (p != NULL) {
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d1fa      	bne.n	801c5ee <pbuf_clen+0x6>
 801c5f8:	4770      	bx	lr
}
 801c5fa:	4770      	bx	lr

0801c5fc <pbuf_ref>:
  if (p != NULL) {
 801c5fc:	b120      	cbz	r0, 801c608 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c5fe:	7b83      	ldrb	r3, [r0, #14]
 801c600:	3301      	adds	r3, #1
 801c602:	b2db      	uxtb	r3, r3
 801c604:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c606:	b103      	cbz	r3, 801c60a <pbuf_ref+0xe>
}
 801c608:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c60a:	4b03      	ldr	r3, [pc, #12]	; (801c618 <pbuf_ref+0x1c>)
 801c60c:	f240 3242 	movw	r2, #834	; 0x342
 801c610:	4902      	ldr	r1, [pc, #8]	; (801c61c <pbuf_ref+0x20>)
 801c612:	4803      	ldr	r0, [pc, #12]	; (801c620 <pbuf_ref+0x24>)
 801c614:	f00a b89e 	b.w	8026754 <iprintf>
 801c618:	08045318 	.word	0x08045318
 801c61c:	080454a4 	.word	0x080454a4
 801c620:	0802b44c 	.word	0x0802b44c

0801c624 <pbuf_cat>:
{
 801c624:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c626:	b330      	cbz	r0, 801c676 <pbuf_cat+0x52>
 801c628:	460d      	mov	r5, r1
 801c62a:	b321      	cbz	r1, 801c676 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801c62c:	6803      	ldr	r3, [r0, #0]
 801c62e:	4604      	mov	r4, r0
 801c630:	b13b      	cbz	r3, 801c642 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c632:	8922      	ldrh	r2, [r4, #8]
 801c634:	8928      	ldrh	r0, [r5, #8]
 801c636:	4402      	add	r2, r0
 801c638:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c63a:	461c      	mov	r4, r3
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d1f7      	bne.n	801c632 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c642:	8963      	ldrh	r3, [r4, #10]
 801c644:	8922      	ldrh	r2, [r4, #8]
 801c646:	429a      	cmp	r2, r3
 801c648:	d010      	beq.n	801c66c <pbuf_cat+0x48>
 801c64a:	4b0f      	ldr	r3, [pc, #60]	; (801c688 <pbuf_cat+0x64>)
 801c64c:	f240 3262 	movw	r2, #866	; 0x362
 801c650:	490e      	ldr	r1, [pc, #56]	; (801c68c <pbuf_cat+0x68>)
 801c652:	480f      	ldr	r0, [pc, #60]	; (801c690 <pbuf_cat+0x6c>)
 801c654:	f00a f87e 	bl	8026754 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c658:	6823      	ldr	r3, [r4, #0]
 801c65a:	b133      	cbz	r3, 801c66a <pbuf_cat+0x46>
 801c65c:	4b0a      	ldr	r3, [pc, #40]	; (801c688 <pbuf_cat+0x64>)
 801c65e:	f240 3263 	movw	r2, #867	; 0x363
 801c662:	490c      	ldr	r1, [pc, #48]	; (801c694 <pbuf_cat+0x70>)
 801c664:	480a      	ldr	r0, [pc, #40]	; (801c690 <pbuf_cat+0x6c>)
 801c666:	f00a f875 	bl	8026754 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c66a:	8923      	ldrh	r3, [r4, #8]
 801c66c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801c66e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c670:	4413      	add	r3, r2
 801c672:	8123      	strh	r3, [r4, #8]
}
 801c674:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c676:	4b04      	ldr	r3, [pc, #16]	; (801c688 <pbuf_cat+0x64>)
 801c678:	f240 3259 	movw	r2, #857	; 0x359
 801c67c:	4906      	ldr	r1, [pc, #24]	; (801c698 <pbuf_cat+0x74>)
 801c67e:	4804      	ldr	r0, [pc, #16]	; (801c690 <pbuf_cat+0x6c>)
}
 801c680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c684:	f00a b866 	b.w	8026754 <iprintf>
 801c688:	08045318 	.word	0x08045318
 801c68c:	080454f0 	.word	0x080454f0
 801c690:	0802b44c 	.word	0x0802b44c
 801c694:	08045520 	.word	0x08045520
 801c698:	080454b8 	.word	0x080454b8

0801c69c <pbuf_chain>:
{
 801c69c:	b510      	push	{r4, lr}
 801c69e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801c6a0:	f7ff ffc0 	bl	801c624 <pbuf_cat>
  if (p != NULL) {
 801c6a4:	b124      	cbz	r4, 801c6b0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c6a6:	7ba3      	ldrb	r3, [r4, #14]
 801c6a8:	3301      	adds	r3, #1
 801c6aa:	b2db      	uxtb	r3, r3
 801c6ac:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c6ae:	b103      	cbz	r3, 801c6b2 <pbuf_chain+0x16>
}
 801c6b0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c6b2:	4b04      	ldr	r3, [pc, #16]	; (801c6c4 <pbuf_chain+0x28>)
 801c6b4:	f240 3242 	movw	r2, #834	; 0x342
 801c6b8:	4903      	ldr	r1, [pc, #12]	; (801c6c8 <pbuf_chain+0x2c>)
 801c6ba:	4804      	ldr	r0, [pc, #16]	; (801c6cc <pbuf_chain+0x30>)
}
 801c6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c6c0:	f00a b848 	b.w	8026754 <iprintf>
 801c6c4:	08045318 	.word	0x08045318
 801c6c8:	080454a4 	.word	0x080454a4
 801c6cc:	0802b44c 	.word	0x0802b44c

0801c6d0 <pbuf_copy>:
{
 801c6d0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c6d2:	b140      	cbz	r0, 801c6e6 <pbuf_copy+0x16>
 801c6d4:	b139      	cbz	r1, 801c6e6 <pbuf_copy+0x16>
 801c6d6:	8902      	ldrh	r2, [r0, #8]
 801c6d8:	890b      	ldrh	r3, [r1, #8]
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	d303      	bcc.n	801c6e6 <pbuf_copy+0x16>
}
 801c6de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c6e2:	f7ff bcd1 	b.w	801c088 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c6e6:	4b05      	ldr	r3, [pc, #20]	; (801c6fc <pbuf_copy+0x2c>)
 801c6e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c6ec:	4904      	ldr	r1, [pc, #16]	; (801c700 <pbuf_copy+0x30>)
 801c6ee:	4805      	ldr	r0, [pc, #20]	; (801c704 <pbuf_copy+0x34>)
 801c6f0:	f00a f830 	bl	8026754 <iprintf>
}
 801c6f4:	f06f 000f 	mvn.w	r0, #15
 801c6f8:	bd08      	pop	{r3, pc}
 801c6fa:	bf00      	nop
 801c6fc:	08045318 	.word	0x08045318
 801c700:	08045530 	.word	0x08045530
 801c704:	0802b44c 	.word	0x0802b44c

0801c708 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c70c:	4605      	mov	r5, r0
 801c70e:	b370      	cbz	r0, 801c76e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c710:	460f      	mov	r7, r1
 801c712:	2900      	cmp	r1, #0
 801c714:	d036      	beq.n	801c784 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c716:	4690      	mov	r8, r2
 801c718:	b392      	cbz	r2, 801c780 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801c71a:	2600      	movs	r6, #0
 801c71c:	e005      	b.n	801c72a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801c71e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c720:	682d      	ldr	r5, [r5, #0]
 801c722:	f1b8 0f00 	cmp.w	r8, #0
 801c726:	d01f      	beq.n	801c768 <pbuf_copy_partial+0x60>
 801c728:	b1f5      	cbz	r5, 801c768 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c72a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801c72c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801c730:	b11b      	cbz	r3, 801c73a <pbuf_copy_partial+0x32>
 801c732:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801c734:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801c738:	d2f1      	bcs.n	801c71e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801c73a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c73e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801c740:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c744:	4419      	add	r1, r3
 801c746:	4544      	cmp	r4, r8
 801c748:	bf28      	it	cs
 801c74a:	4644      	movcs	r4, r8
 801c74c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c74e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801c750:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801c754:	f009 f838 	bl	80257c8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801c758:	b2b6      	uxth	r6, r6
      offset = 0;
 801c75a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801c75c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801c760:	682d      	ldr	r5, [r5, #0]
 801c762:	f1b8 0f00 	cmp.w	r8, #0
 801c766:	d1df      	bne.n	801c728 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801c768:	4630      	mov	r0, r6
 801c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801c76e:	4b0a      	ldr	r3, [pc, #40]	; (801c798 <pbuf_copy_partial+0x90>)
 801c770:	f240 420a 	movw	r2, #1034	; 0x40a
 801c774:	4909      	ldr	r1, [pc, #36]	; (801c79c <pbuf_copy_partial+0x94>)
 801c776:	462e      	mov	r6, r5
 801c778:	4809      	ldr	r0, [pc, #36]	; (801c7a0 <pbuf_copy_partial+0x98>)
 801c77a:	f009 ffeb 	bl	8026754 <iprintf>
 801c77e:	e7f3      	b.n	801c768 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801c780:	4616      	mov	r6, r2
 801c782:	e7f1      	b.n	801c768 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801c784:	4b04      	ldr	r3, [pc, #16]	; (801c798 <pbuf_copy_partial+0x90>)
 801c786:	f240 420b 	movw	r2, #1035	; 0x40b
 801c78a:	4906      	ldr	r1, [pc, #24]	; (801c7a4 <pbuf_copy_partial+0x9c>)
 801c78c:	463e      	mov	r6, r7
 801c78e:	4804      	ldr	r0, [pc, #16]	; (801c7a0 <pbuf_copy_partial+0x98>)
 801c790:	f009 ffe0 	bl	8026754 <iprintf>
 801c794:	e7e8      	b.n	801c768 <pbuf_copy_partial+0x60>
 801c796:	bf00      	nop
 801c798:	08045318 	.word	0x08045318
 801c79c:	08045560 	.word	0x08045560
 801c7a0:	0802b44c 	.word	0x0802b44c
 801c7a4:	08045580 	.word	0x08045580

0801c7a8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801c7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c7ac:	2800      	cmp	r0, #0
 801c7ae:	d049      	beq.n	801c844 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c7b0:	460f      	mov	r7, r1
 801c7b2:	2900      	cmp	r1, #0
 801c7b4:	d03c      	beq.n	801c830 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c7b6:	8903      	ldrh	r3, [r0, #8]
 801c7b8:	4604      	mov	r4, r0
 801c7ba:	4690      	mov	r8, r2
 801c7bc:	4293      	cmp	r3, r2
 801c7be:	d32d      	bcc.n	801c81c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c7c0:	b34a      	cbz	r2, 801c816 <pbuf_take+0x6e>
 801c7c2:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801c7c4:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c7c6:	f8df b094 	ldr.w	fp, [pc, #148]	; 801c85c <pbuf_take+0xb4>
 801c7ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801c870 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801c7ce:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c7d0:	19b9      	adds	r1, r7, r6
 801c7d2:	6860      	ldr	r0, [r4, #4]
 801c7d4:	42aa      	cmp	r2, r5
 801c7d6:	bf28      	it	cs
 801c7d8:	462a      	movcs	r2, r5
 801c7da:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801c7dc:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801c7de:	f008 fff3 	bl	80257c8 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801c7e2:	6824      	ldr	r4, [r4, #0]
 801c7e4:	ebb5 0509 	subs.w	r5, r5, r9
 801c7e8:	d009      	beq.n	801c7fe <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801c7ea:	2c00      	cmp	r4, #0
 801c7ec:	d1ef      	bne.n	801c7ce <pbuf_take+0x26>
 801c7ee:	465b      	mov	r3, fp
 801c7f0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801c7f4:	4651      	mov	r1, sl
 801c7f6:	4818      	ldr	r0, [pc, #96]	; (801c858 <pbuf_take+0xb0>)
 801c7f8:	f009 ffac 	bl	8026754 <iprintf>
 801c7fc:	e7e7      	b.n	801c7ce <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801c7fe:	45b0      	cmp	r8, r6
 801c800:	d009      	beq.n	801c816 <pbuf_take+0x6e>
 801c802:	4b16      	ldr	r3, [pc, #88]	; (801c85c <pbuf_take+0xb4>)
 801c804:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801c808:	4915      	ldr	r1, [pc, #84]	; (801c860 <pbuf_take+0xb8>)
 801c80a:	4813      	ldr	r0, [pc, #76]	; (801c858 <pbuf_take+0xb0>)
 801c80c:	f009 ffa2 	bl	8026754 <iprintf>
  return ERR_OK;
 801c810:	4628      	mov	r0, r5
}
 801c812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801c816:	2000      	movs	r0, #0
}
 801c818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801c81c:	4b0f      	ldr	r3, [pc, #60]	; (801c85c <pbuf_take+0xb4>)
 801c81e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801c822:	4910      	ldr	r1, [pc, #64]	; (801c864 <pbuf_take+0xbc>)
 801c824:	480c      	ldr	r0, [pc, #48]	; (801c858 <pbuf_take+0xb0>)
 801c826:	f009 ff95 	bl	8026754 <iprintf>
 801c82a:	f04f 30ff 	mov.w	r0, #4294967295
 801c82e:	e7f3      	b.n	801c818 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801c830:	4b0a      	ldr	r3, [pc, #40]	; (801c85c <pbuf_take+0xb4>)
 801c832:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801c836:	490c      	ldr	r1, [pc, #48]	; (801c868 <pbuf_take+0xc0>)
 801c838:	4807      	ldr	r0, [pc, #28]	; (801c858 <pbuf_take+0xb0>)
 801c83a:	f009 ff8b 	bl	8026754 <iprintf>
 801c83e:	f06f 000f 	mvn.w	r0, #15
 801c842:	e7e9      	b.n	801c818 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801c844:	4b05      	ldr	r3, [pc, #20]	; (801c85c <pbuf_take+0xb4>)
 801c846:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801c84a:	4908      	ldr	r1, [pc, #32]	; (801c86c <pbuf_take+0xc4>)
 801c84c:	4802      	ldr	r0, [pc, #8]	; (801c858 <pbuf_take+0xb0>)
 801c84e:	f009 ff81 	bl	8026754 <iprintf>
 801c852:	f06f 000f 	mvn.w	r0, #15
 801c856:	e7df      	b.n	801c818 <pbuf_take+0x70>
 801c858:	0802b44c 	.word	0x0802b44c
 801c85c:	08045318 	.word	0x08045318
 801c860:	08045610 	.word	0x08045610
 801c864:	080455d8 	.word	0x080455d8
 801c868:	080455bc 	.word	0x080455bc
 801c86c:	080455a4 	.word	0x080455a4
 801c870:	080455f8 	.word	0x080455f8

0801c874 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c874:	b390      	cbz	r0, 801c8dc <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801c876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c87a:	460f      	mov	r7, r1
 801c87c:	4604      	mov	r4, r0
 801c87e:	e002      	b.n	801c886 <pbuf_take_at+0x12>
    q = q->next;
 801c880:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c882:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801c884:	b334      	cbz	r4, 801c8d4 <pbuf_take_at+0x60>
 801c886:	8965      	ldrh	r5, [r4, #10]
 801c888:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801c88a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801c88e:	d9f7      	bls.n	801c880 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801c890:	8921      	ldrh	r1, [r4, #8]
 801c892:	189e      	adds	r6, r3, r2
 801c894:	42b1      	cmp	r1, r6
 801c896:	db1d      	blt.n	801c8d4 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801c898:	1ae9      	subs	r1, r5, r3
 801c89a:	428a      	cmp	r2, r1
 801c89c:	dc07      	bgt.n	801c8ae <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c89e:	6860      	ldr	r0, [r4, #4]
 801c8a0:	4639      	mov	r1, r7
 801c8a2:	4418      	add	r0, r3
 801c8a4:	f008 ff90 	bl	80257c8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801c8a8:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801c8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801c8ae:	fa1f f881 	uxth.w	r8, r1
 801c8b2:	6860      	ldr	r0, [r4, #4]
 801c8b4:	4639      	mov	r1, r7
 801c8b6:	4642      	mov	r2, r8
 801c8b8:	4418      	add	r0, r3
 801c8ba:	f008 ff85 	bl	80257c8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801c8be:	1b70      	subs	r0, r6, r5
 801c8c0:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801c8c2:	2a00      	cmp	r2, #0
 801c8c4:	d0f0      	beq.n	801c8a8 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c8c6:	eb07 0108 	add.w	r1, r7, r8
 801c8ca:	6820      	ldr	r0, [r4, #0]
}
 801c8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801c8d0:	f7ff bf6a 	b.w	801c7a8 <pbuf_take>
  return ERR_MEM;
 801c8d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801c8dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c8e0:	4770      	bx	lr
 801c8e2:	bf00      	nop

0801c8e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801c8e4:	b538      	push	{r3, r4, r5, lr}
 801c8e6:	4615      	mov	r5, r2
 801c8e8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801c8ea:	8929      	ldrh	r1, [r5, #8]
 801c8ec:	f7ff fc96 	bl	801c21c <pbuf_alloc>
  if (q == NULL) {
 801c8f0:	4604      	mov	r4, r0
 801c8f2:	b138      	cbz	r0, 801c904 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c8f4:	8902      	ldrh	r2, [r0, #8]
 801c8f6:	892b      	ldrh	r3, [r5, #8]
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d305      	bcc.n	801c908 <pbuf_clone+0x24>
 801c8fc:	4629      	mov	r1, r5
 801c8fe:	f7ff fbc3 	bl	801c088 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c902:	b940      	cbnz	r0, 801c916 <pbuf_clone+0x32>
  return q;
}
 801c904:	4620      	mov	r0, r4
 801c906:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c908:	4b07      	ldr	r3, [pc, #28]	; (801c928 <pbuf_clone+0x44>)
 801c90a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801c90e:	4907      	ldr	r1, [pc, #28]	; (801c92c <pbuf_clone+0x48>)
 801c910:	4807      	ldr	r0, [pc, #28]	; (801c930 <pbuf_clone+0x4c>)
 801c912:	f009 ff1f 	bl	8026754 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801c916:	4b04      	ldr	r3, [pc, #16]	; (801c928 <pbuf_clone+0x44>)
 801c918:	f240 5224 	movw	r2, #1316	; 0x524
 801c91c:	4905      	ldr	r1, [pc, #20]	; (801c934 <pbuf_clone+0x50>)
 801c91e:	4804      	ldr	r0, [pc, #16]	; (801c930 <pbuf_clone+0x4c>)
 801c920:	f009 ff18 	bl	8026754 <iprintf>
}
 801c924:	4620      	mov	r0, r4
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	08045318 	.word	0x08045318
 801c92c:	08045530 	.word	0x08045530
 801c930:	0802b44c 	.word	0x0802b44c
 801c934:	08045628 	.word	0x08045628

0801c938 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c938:	b918      	cbnz	r0, 801c942 <pbuf_get_at+0xa>
 801c93a:	e00a      	b.n	801c952 <pbuf_get_at+0x1a>
    q = q->next;
 801c93c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c93e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c940:	b130      	cbz	r0, 801c950 <pbuf_get_at+0x18>
 801c942:	8943      	ldrh	r3, [r0, #10]
 801c944:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c946:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c94a:	d9f7      	bls.n	801c93c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801c94c:	6843      	ldr	r3, [r0, #4]
 801c94e:	5c58      	ldrb	r0, [r3, r1]
}
 801c950:	4770      	bx	lr
 801c952:	4770      	bx	lr

0801c954 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c954:	b140      	cbz	r0, 801c968 <pbuf_try_get_at+0x14>
 801c956:	8943      	ldrh	r3, [r0, #10]
 801c958:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c95a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c95e:	d806      	bhi.n	801c96e <pbuf_try_get_at+0x1a>
    q = q->next;
 801c960:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c962:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c964:	2800      	cmp	r0, #0
 801c966:	d1f6      	bne.n	801c956 <pbuf_try_get_at+0x2>
  }
  return -1;
 801c968:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c96c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801c96e:	6843      	ldr	r3, [r0, #4]
 801c970:	5c58      	ldrb	r0, [r3, r1]
 801c972:	4770      	bx	lr

0801c974 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801c974:	b918      	cbnz	r0, 801c97e <pbuf_put_at+0xa>
 801c976:	e00a      	b.n	801c98e <pbuf_put_at+0x1a>
    q = q->next;
 801c978:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c97a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c97c:	b130      	cbz	r0, 801c98c <pbuf_put_at+0x18>
 801c97e:	8943      	ldrh	r3, [r0, #10]
 801c980:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801c982:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801c986:	d9f7      	bls.n	801c978 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801c988:	6843      	ldr	r3, [r0, #4]
 801c98a:	545a      	strb	r2, [r3, r1]
  }
}
 801c98c:	4770      	bx	lr
 801c98e:	4770      	bx	lr

0801c990 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801c990:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801c992:	8905      	ldrh	r5, [r0, #8]
 801c994:	18cc      	adds	r4, r1, r3
 801c996:	42a5      	cmp	r5, r4
 801c998:	db2e      	blt.n	801c9f8 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801c99a:	8944      	ldrh	r4, [r0, #10]
 801c99c:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801c99e:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c9a2:	d803      	bhi.n	801c9ac <pbuf_memcmp+0x1c>
    q = q->next;
 801c9a4:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801c9a6:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d1f6      	bne.n	801c99a <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801c9ac:	b1f3      	cbz	r3, 801c9ec <pbuf_memcmp+0x5c>
 801c9ae:	2500      	movs	r5, #0
 801c9b0:	1e56      	subs	r6, r2, #1
 801c9b2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801c9b4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9b8:	4604      	mov	r4, r0
 801c9ba:	fa1f fc8c 	uxth.w	ip, ip
 801c9be:	b920      	cbnz	r0, 801c9ca <pbuf_memcmp+0x3a>
 801c9c0:	e00b      	b.n	801c9da <pbuf_memcmp+0x4a>
    q = q->next;
 801c9c2:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801c9c4:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9c8:	b13c      	cbz	r4, 801c9da <pbuf_memcmp+0x4a>
 801c9ca:	8962      	ldrh	r2, [r4, #10]
 801c9cc:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801c9ce:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801c9d2:	d2f6      	bcs.n	801c9c2 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801c9d4:	6862      	ldr	r2, [r4, #4]
 801c9d6:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801c9da:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801c9de:	42a2      	cmp	r2, r4
 801c9e0:	d106      	bne.n	801c9f0 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801c9e2:	3501      	adds	r5, #1
 801c9e4:	fa1f fe85 	uxth.w	lr, r5
 801c9e8:	4573      	cmp	r3, lr
 801c9ea:	d8e3      	bhi.n	801c9b4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801c9ec:	2000      	movs	r0, #0
}
 801c9ee:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801c9f0:	f10e 0001 	add.w	r0, lr, #1
 801c9f4:	b280      	uxth	r0, r0
}
 801c9f6:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801c9f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801c9fc:	bd70      	pop	{r4, r5, r6, pc}
 801c9fe:	bf00      	nop

0801ca00 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca02:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801ca04:	8905      	ldrh	r5, [r0, #8]
{
 801ca06:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801ca08:	4422      	add	r2, r4
 801ca0a:	4295      	cmp	r5, r2
 801ca0c:	db15      	blt.n	801ca3a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801ca0e:	1aed      	subs	r5, r5, r3
 801ca10:	4606      	mov	r6, r0
 801ca12:	460f      	mov	r7, r1
 801ca14:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801ca16:	42a5      	cmp	r5, r4
 801ca18:	d204      	bcs.n	801ca24 <pbuf_memfind+0x24>
 801ca1a:	e00e      	b.n	801ca3a <pbuf_memfind+0x3a>
 801ca1c:	fa1f f48c 	uxth.w	r4, ip
 801ca20:	42a5      	cmp	r5, r4
 801ca22:	d30a      	bcc.n	801ca3a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801ca24:	4621      	mov	r1, r4
 801ca26:	463a      	mov	r2, r7
 801ca28:	4630      	mov	r0, r6
 801ca2a:	f7ff ffb1 	bl	801c990 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801ca2e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801ca32:	2800      	cmp	r0, #0
 801ca34:	d1f2      	bne.n	801ca1c <pbuf_memfind+0x1c>
 801ca36:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801ca38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801ca3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ca40 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801ca40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca44:	4e33      	ldr	r6, [pc, #204]	; (801cb14 <raw_input+0xd4>)
{
 801ca46:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca48:	6831      	ldr	r1, [r6, #0]
 801ca4a:	6970      	ldr	r0, [r6, #20]
 801ca4c:	f007 fb90 	bl	8024170 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801ca50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ca54:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801ca56:	4b30      	ldr	r3, [pc, #192]	; (801cb18 <raw_input+0xd8>)
 801ca58:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801ca5a:	2c00      	cmp	r4, #0
 801ca5c:	d056      	beq.n	801cb0c <raw_input+0xcc>
 801ca5e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801ca60:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801ca62:	f106 0b10 	add.w	fp, r6, #16
 801ca66:	46ca      	mov	sl, r9
  prev = NULL;
 801ca68:	4606      	mov	r6, r0
 801ca6a:	e004      	b.n	801ca76 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801ca6c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801ca6e:	4626      	mov	r6, r4
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d037      	beq.n	801cae4 <raw_input+0xa4>
 801ca74:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ca76:	7c23      	ldrb	r3, [r4, #16]
 801ca78:	42ab      	cmp	r3, r5
 801ca7a:	d1f7      	bne.n	801ca6c <raw_input+0x2c>
 801ca7c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca7e:	b13a      	cbz	r2, 801ca90 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca80:	4b24      	ldr	r3, [pc, #144]	; (801cb14 <raw_input+0xd4>)
 801ca82:	685b      	ldr	r3, [r3, #4]
 801ca84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ca88:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca8a:	b2db      	uxtb	r3, r3
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	d1ed      	bne.n	801ca6c <raw_input+0x2c>
 801ca90:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801ca92:	f1ba 0f00 	cmp.w	sl, #0
 801ca96:	d027      	beq.n	801cae8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d1e7      	bne.n	801ca6c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801ca9c:	7c63      	ldrb	r3, [r4, #17]
 801ca9e:	07db      	lsls	r3, r3, #31
 801caa0:	d504      	bpl.n	801caac <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801caa2:	4b1c      	ldr	r3, [pc, #112]	; (801cb14 <raw_input+0xd4>)
 801caa4:	6862      	ldr	r2, [r4, #4]
 801caa6:	691b      	ldr	r3, [r3, #16]
 801caa8:	429a      	cmp	r2, r3
 801caaa:	d1df      	bne.n	801ca6c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801caac:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801cab0:	f1b9 0f00 	cmp.w	r9, #0
 801cab4:	d0da      	beq.n	801ca6c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801cab6:	465b      	mov	r3, fp
 801cab8:	4642      	mov	r2, r8
 801caba:	4621      	mov	r1, r4
 801cabc:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801cabe:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801cac2:	47c8      	blx	r9
        if (eaten != 0) {
 801cac4:	b9c8      	cbnz	r0, 801cafa <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801cac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801caca:	42bb      	cmp	r3, r7
 801cacc:	d013      	beq.n	801caf6 <raw_input+0xb6>
 801cace:	4b13      	ldr	r3, [pc, #76]	; (801cb1c <raw_input+0xdc>)
 801cad0:	22c0      	movs	r2, #192	; 0xc0
 801cad2:	4913      	ldr	r1, [pc, #76]	; (801cb20 <raw_input+0xe0>)
 801cad4:	4626      	mov	r6, r4
 801cad6:	4813      	ldr	r0, [pc, #76]	; (801cb24 <raw_input+0xe4>)
 801cad8:	f009 fe3c 	bl	8026754 <iprintf>
    pcb = pcb->next;
 801cadc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801cade:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1c7      	bne.n	801ca74 <raw_input+0x34>
  }
  return ret;
}
 801cae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d0d7      	beq.n	801ca9c <raw_input+0x5c>
 801caec:	4a09      	ldr	r2, [pc, #36]	; (801cb14 <raw_input+0xd4>)
 801caee:	6952      	ldr	r2, [r2, #20]
 801caf0:	4293      	cmp	r3, r2
 801caf2:	d1bb      	bne.n	801ca6c <raw_input+0x2c>
 801caf4:	e7d2      	b.n	801ca9c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801caf6:	2002      	movs	r0, #2
 801caf8:	e7b8      	b.n	801ca6c <raw_input+0x2c>
          if (prev != NULL) {
 801cafa:	b14e      	cbz	r6, 801cb10 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801cafc:	4906      	ldr	r1, [pc, #24]	; (801cb18 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801cafe:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801cb00:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801cb02:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801cb04:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801cb06:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801cb08:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801cb0a:	e7eb      	b.n	801cae4 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801cb0c:	4620      	mov	r0, r4
 801cb0e:	e7e9      	b.n	801cae4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801cb10:	2001      	movs	r0, #1
 801cb12:	e7e7      	b.n	801cae4 <raw_input+0xa4>
 801cb14:	2001f2a8 	.word	0x2001f2a8
 801cb18:	2002e440 	.word	0x2002e440
 801cb1c:	0804563c 	.word	0x0804563c
 801cb20:	0804566c 	.word	0x0804566c
 801cb24:	0802b44c 	.word	0x0802b44c

0801cb28 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cb28:	b110      	cbz	r0, 801cb30 <raw_netif_ip_addr_changed+0x8>
 801cb2a:	6802      	ldr	r2, [r0, #0]
 801cb2c:	b101      	cbz	r1, 801cb30 <raw_netif_ip_addr_changed+0x8>
 801cb2e:	b902      	cbnz	r2, 801cb32 <raw_netif_ip_addr_changed+0xa>
 801cb30:	4770      	bx	lr
 801cb32:	680b      	ldr	r3, [r1, #0]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d0fb      	beq.n	801cb30 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cb38:	4b08      	ldr	r3, [pc, #32]	; (801cb5c <raw_netif_ip_addr_changed+0x34>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d0f7      	beq.n	801cb30 <raw_netif_ip_addr_changed+0x8>
{
 801cb40:	b410      	push	{r4}
 801cb42:	e000      	b.n	801cb46 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801cb44:	6802      	ldr	r2, [r0, #0]
 801cb46:	681c      	ldr	r4, [r3, #0]
 801cb48:	4294      	cmp	r4, r2
 801cb4a:	d101      	bne.n	801cb50 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801cb4c:	680a      	ldr	r2, [r1, #0]
 801cb4e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801cb50:	68db      	ldr	r3, [r3, #12]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d1f6      	bne.n	801cb44 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801cb56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb5a:	4770      	bx	lr
 801cb5c:	2002e440 	.word	0x2002e440

0801cb60 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801cb60:	b4f0      	push	{r4, r5, r6, r7}
 801cb62:	4f13      	ldr	r7, [pc, #76]	; (801cbb0 <tcp_new_port+0x50>)
 801cb64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801cb68:	4e12      	ldr	r6, [pc, #72]	; (801cbb4 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801cb6a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801cb6e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb70:	4d11      	ldr	r5, [pc, #68]	; (801cbb8 <tcp_new_port+0x58>)
  tcp_port++;
 801cb72:	3001      	adds	r0, #1
 801cb74:	4c11      	ldr	r4, [pc, #68]	; (801cbbc <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb76:	462b      	mov	r3, r5
  tcp_port++;
 801cb78:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801cb7a:	4560      	cmp	r0, ip
 801cb7c:	bf08      	it	eq
 801cb7e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	b913      	cbnz	r3, 801cb8c <tcp_new_port+0x2c>
 801cb86:	e00b      	b.n	801cba0 <tcp_new_port+0x40>
 801cb88:	68db      	ldr	r3, [r3, #12]
 801cb8a:	b14b      	cbz	r3, 801cba0 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801cb8c:	8ada      	ldrh	r2, [r3, #22]
 801cb8e:	4282      	cmp	r2, r0
 801cb90:	d1fa      	bne.n	801cb88 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801cb92:	3901      	subs	r1, #1
 801cb94:	b289      	uxth	r1, r1
 801cb96:	2900      	cmp	r1, #0
 801cb98:	d1eb      	bne.n	801cb72 <tcp_new_port+0x12>
 801cb9a:	8038      	strh	r0, [r7, #0]
          return 0;
 801cb9c:	4608      	mov	r0, r1
 801cb9e:	e005      	b.n	801cbac <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801cba0:	42b4      	cmp	r4, r6
 801cba2:	d002      	beq.n	801cbaa <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801cba4:	f854 3b04 	ldr.w	r3, [r4], #4
 801cba8:	e7eb      	b.n	801cb82 <tcp_new_port+0x22>
 801cbaa:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801cbac:	bcf0      	pop	{r4, r5, r6, r7}
 801cbae:	4770      	bx	lr
 801cbb0:	2000042c 	.word	0x2000042c
 801cbb4:	08045dac 	.word	0x08045dac
 801cbb8:	2002e450 	.word	0x2002e450
 801cbbc:	08045da0 	.word	0x08045da0

0801cbc0 <tcp_close_shutdown_fin>:
{
 801cbc0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cbc2:	4604      	mov	r4, r0
 801cbc4:	b310      	cbz	r0, 801cc0c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801cbc6:	7d23      	ldrb	r3, [r4, #20]
 801cbc8:	2b04      	cmp	r3, #4
 801cbca:	d005      	beq.n	801cbd8 <tcp_close_shutdown_fin+0x18>
 801cbcc:	2b07      	cmp	r3, #7
 801cbce:	d00e      	beq.n	801cbee <tcp_close_shutdown_fin+0x2e>
 801cbd0:	2b03      	cmp	r3, #3
 801cbd2:	d001      	beq.n	801cbd8 <tcp_close_shutdown_fin+0x18>
 801cbd4:	2000      	movs	r0, #0
}
 801cbd6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f003 fd33 	bl	8020644 <tcp_send_fin>
      if (err == ERR_OK) {
 801cbde:	b950      	cbnz	r0, 801cbf6 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801cbe0:	2305      	movs	r3, #5
 801cbe2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f003 fe9d 	bl	8020924 <tcp_output>
 801cbea:	2000      	movs	r0, #0
}
 801cbec:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801cbee:	4620      	mov	r0, r4
 801cbf0:	f003 fd28 	bl	8020644 <tcp_send_fin>
      if (err == ERR_OK) {
 801cbf4:	b138      	cbz	r0, 801cc06 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801cbf6:	1c43      	adds	r3, r0, #1
 801cbf8:	d1ed      	bne.n	801cbd6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cbfa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801cbfc:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801cbfe:	f043 0308 	orr.w	r3, r3, #8
 801cc02:	8363      	strh	r3, [r4, #26]
}
 801cc04:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801cc06:	2309      	movs	r3, #9
 801cc08:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801cc0a:	e7eb      	b.n	801cbe4 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cc0c:	4b03      	ldr	r3, [pc, #12]	; (801cc1c <tcp_close_shutdown_fin+0x5c>)
 801cc0e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801cc12:	4903      	ldr	r1, [pc, #12]	; (801cc20 <tcp_close_shutdown_fin+0x60>)
 801cc14:	4803      	ldr	r0, [pc, #12]	; (801cc24 <tcp_close_shutdown_fin+0x64>)
 801cc16:	f009 fd9d 	bl	8026754 <iprintf>
 801cc1a:	e7d4      	b.n	801cbc6 <tcp_close_shutdown_fin+0x6>
 801cc1c:	080456b8 	.word	0x080456b8
 801cc20:	080456e8 	.word	0x080456e8
 801cc24:	0802b44c 	.word	0x0802b44c

0801cc28 <tcp_init>:
{
 801cc28:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801cc2a:	f009 fe37 	bl	802689c <rand>
 801cc2e:	4b02      	ldr	r3, [pc, #8]	; (801cc38 <tcp_init+0x10>)
 801cc30:	4a02      	ldr	r2, [pc, #8]	; (801cc3c <tcp_init+0x14>)
 801cc32:	4303      	orrs	r3, r0
 801cc34:	8013      	strh	r3, [r2, #0]
}
 801cc36:	bd08      	pop	{r3, pc}
 801cc38:	ffffc000 	.word	0xffffc000
 801cc3c:	2000042c 	.word	0x2000042c

0801cc40 <tcp_free>:
{
 801cc40:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc42:	7d03      	ldrb	r3, [r0, #20]
{
 801cc44:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc46:	2b01      	cmp	r3, #1
 801cc48:	d005      	beq.n	801cc56 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801cc4a:	4621      	mov	r1, r4
 801cc4c:	2002      	movs	r0, #2
}
 801cc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cc52:	f7fe bf9d 	b.w	801bb90 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cc56:	4906      	ldr	r1, [pc, #24]	; (801cc70 <tcp_free+0x30>)
 801cc58:	22d4      	movs	r2, #212	; 0xd4
 801cc5a:	4b06      	ldr	r3, [pc, #24]	; (801cc74 <tcp_free+0x34>)
 801cc5c:	4806      	ldr	r0, [pc, #24]	; (801cc78 <tcp_free+0x38>)
 801cc5e:	f009 fd79 	bl	8026754 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801cc62:	4621      	mov	r1, r4
 801cc64:	2002      	movs	r0, #2
}
 801cc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801cc6a:	f7fe bf91 	b.w	801bb90 <memp_free>
 801cc6e:	bf00      	nop
 801cc70:	080456f4 	.word	0x080456f4
 801cc74:	080456b8 	.word	0x080456b8
 801cc78:	0802b44c 	.word	0x0802b44c

0801cc7c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801cc7c:	2900      	cmp	r1, #0
{
 801cc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801cc80:	4b26      	ldr	r3, [pc, #152]	; (801cd1c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801cc82:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801cc84:	bf14      	ite	ne
 801cc86:	460e      	movne	r6, r1
 801cc88:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc8a:	2800      	cmp	r0, #0
 801cc8c:	d03c      	beq.n	801cd08 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801cc8e:	7d03      	ldrb	r3, [r0, #20]
 801cc90:	4607      	mov	r7, r0
 801cc92:	bb7b      	cbnz	r3, 801ccf4 <tcp_bind+0x78>
  if (port == 0) {
 801cc94:	b31a      	cbz	r2, 801ccde <tcp_bind+0x62>
 801cc96:	4922      	ldr	r1, [pc, #136]	; (801cd20 <tcp_bind+0xa4>)
 801cc98:	4b22      	ldr	r3, [pc, #136]	; (801cd24 <tcp_bind+0xa8>)
 801cc9a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	b913      	cbnz	r3, 801cca8 <tcp_bind+0x2c>
 801cca2:	e00e      	b.n	801ccc2 <tcp_bind+0x46>
 801cca4:	68db      	ldr	r3, [r3, #12]
 801cca6:	b163      	cbz	r3, 801ccc2 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801cca8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801ccac:	4594      	cmp	ip, r2
 801ccae:	d1f9      	bne.n	801cca4 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801ccb0:	681c      	ldr	r4, [r3, #0]
 801ccb2:	b11c      	cbz	r4, 801ccbc <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801ccb4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801ccb6:	b10d      	cbz	r5, 801ccbc <tcp_bind+0x40>
 801ccb8:	42ac      	cmp	r4, r5
 801ccba:	d1f3      	bne.n	801cca4 <tcp_bind+0x28>
              return ERR_USE;
 801ccbc:	f06f 0007 	mvn.w	r0, #7
}
 801ccc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801ccc2:	4281      	cmp	r1, r0
 801ccc4:	d113      	bne.n	801ccee <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801ccc6:	6833      	ldr	r3, [r6, #0]
 801ccc8:	b103      	cbz	r3, 801cccc <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801ccca:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801cccc:	4b16      	ldr	r3, [pc, #88]	; (801cd28 <tcp_bind+0xac>)
  pcb->local_port = port;
 801ccce:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801ccd0:	681a      	ldr	r2, [r3, #0]
 801ccd2:	601f      	str	r7, [r3, #0]
 801ccd4:	60fa      	str	r2, [r7, #12]
 801ccd6:	f004 f951 	bl	8020f7c <tcp_timer_needed>
  return ERR_OK;
 801ccda:	2000      	movs	r0, #0
}
 801ccdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801ccde:	f7ff ff3f 	bl	801cb60 <tcp_new_port>
    if (port == 0) {
 801cce2:	4602      	mov	r2, r0
 801cce4:	2800      	cmp	r0, #0
 801cce6:	d1ee      	bne.n	801ccc6 <tcp_bind+0x4a>
      return ERR_BUF;
 801cce8:	f06f 0001 	mvn.w	r0, #1
}
 801ccec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801ccee:	f851 3b04 	ldr.w	r3, [r1], #4
 801ccf2:	e7d4      	b.n	801cc9e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801ccf4:	4b0d      	ldr	r3, [pc, #52]	; (801cd2c <tcp_bind+0xb0>)
 801ccf6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ccfa:	490d      	ldr	r1, [pc, #52]	; (801cd30 <tcp_bind+0xb4>)
 801ccfc:	480d      	ldr	r0, [pc, #52]	; (801cd34 <tcp_bind+0xb8>)
 801ccfe:	f009 fd29 	bl	8026754 <iprintf>
 801cd02:	f06f 0005 	mvn.w	r0, #5
}
 801cd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd08:	4b08      	ldr	r3, [pc, #32]	; (801cd2c <tcp_bind+0xb0>)
 801cd0a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801cd0e:	490a      	ldr	r1, [pc, #40]	; (801cd38 <tcp_bind+0xbc>)
 801cd10:	4808      	ldr	r0, [pc, #32]	; (801cd34 <tcp_bind+0xb8>)
 801cd12:	f009 fd1f 	bl	8026754 <iprintf>
 801cd16:	f06f 000f 	mvn.w	r0, #15
}
 801cd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd1c:	080472d0 	.word	0x080472d0
 801cd20:	08045da0 	.word	0x08045da0
 801cd24:	2002e450 	.word	0x2002e450
 801cd28:	2002e44c 	.word	0x2002e44c
 801cd2c:	080456b8 	.word	0x080456b8
 801cd30:	08045720 	.word	0x08045720
 801cd34:	0802b44c 	.word	0x0802b44c
 801cd38:	08045708 	.word	0x08045708

0801cd3c <tcp_listen_with_backlog_and_err>:
{
 801cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd3e:	4604      	mov	r4, r0
{
 801cd40:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801cd42:	2800      	cmp	r0, #0
 801cd44:	d060      	beq.n	801ce08 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cd46:	7d05      	ldrb	r5, [r0, #20]
 801cd48:	2d00      	cmp	r5, #0
 801cd4a:	d14a      	bne.n	801cde2 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801cd4c:	f240 3272 	movw	r2, #882	; 0x372
 801cd50:	4933      	ldr	r1, [pc, #204]	; (801ce20 <tcp_listen_with_backlog_and_err+0xe4>)
 801cd52:	2003      	movs	r0, #3
 801cd54:	f7fe fee6 	bl	801bb24 <memp_malloc_fn>
  if (lpcb == NULL) {
 801cd58:	4606      	mov	r6, r0
 801cd5a:	2800      	cmp	r0, #0
 801cd5c:	d051      	beq.n	801ce02 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801cd5e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801cd60:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801cd62:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801cd64:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801cd66:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801cd68:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801cd6a:	7d62      	ldrb	r2, [r4, #21]
 801cd6c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801cd6e:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801cd70:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801cd72:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801cd74:	7ae2      	ldrb	r2, [r4, #11]
 801cd76:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801cd78:	7aa2      	ldrb	r2, [r4, #10]
 801cd7a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801cd7c:	6822      	ldr	r2, [r4, #0]
 801cd7e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801cd80:	b99b      	cbnz	r3, 801cdaa <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cd82:	7d23      	ldrb	r3, [r4, #20]
 801cd84:	2b01      	cmp	r3, #1
 801cd86:	d020      	beq.n	801cdca <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801cd88:	4621      	mov	r1, r4
 801cd8a:	2002      	movs	r0, #2
 801cd8c:	f7fe ff00 	bl	801bb90 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd90:	4b24      	ldr	r3, [pc, #144]	; (801ce24 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801cd92:	4925      	ldr	r1, [pc, #148]	; (801ce28 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd94:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801cd96:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801cd98:	60f2      	str	r2, [r6, #12]
 801cd9a:	601e      	str	r6, [r3, #0]
 801cd9c:	f004 f8ee 	bl	8020f7c <tcp_timer_needed>
  res = ERR_OK;
 801cda0:	2300      	movs	r3, #0
  if (err != NULL) {
 801cda2:	b107      	cbz	r7, 801cda6 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801cda4:	703b      	strb	r3, [r7, #0]
}
 801cda6:	4630      	mov	r0, r6
 801cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cdaa:	4a20      	ldr	r2, [pc, #128]	; (801ce2c <tcp_listen_with_backlog_and_err+0xf0>)
 801cdac:	6813      	ldr	r3, [r2, #0]
 801cdae:	42a3      	cmp	r3, r4
 801cdb0:	d012      	beq.n	801cdd8 <tcp_listen_with_backlog_and_err+0x9c>
 801cdb2:	b12b      	cbz	r3, 801cdc0 <tcp_listen_with_backlog_and_err+0x84>
 801cdb4:	68d9      	ldr	r1, [r3, #12]
 801cdb6:	42a1      	cmp	r1, r4
 801cdb8:	d01e      	beq.n	801cdf8 <tcp_listen_with_backlog_and_err+0xbc>
 801cdba:	460b      	mov	r3, r1
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d1f9      	bne.n	801cdb4 <tcp_listen_with_backlog_and_err+0x78>
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cdc4:	7d23      	ldrb	r3, [r4, #20]
 801cdc6:	2b01      	cmp	r3, #1
 801cdc8:	d1de      	bne.n	801cd88 <tcp_listen_with_backlog_and_err+0x4c>
 801cdca:	4b15      	ldr	r3, [pc, #84]	; (801ce20 <tcp_listen_with_backlog_and_err+0xe4>)
 801cdcc:	22d4      	movs	r2, #212	; 0xd4
 801cdce:	4918      	ldr	r1, [pc, #96]	; (801ce30 <tcp_listen_with_backlog_and_err+0xf4>)
 801cdd0:	4818      	ldr	r0, [pc, #96]	; (801ce34 <tcp_listen_with_backlog_and_err+0xf8>)
 801cdd2:	f009 fcbf 	bl	8026754 <iprintf>
 801cdd6:	e7d7      	b.n	801cd88 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cdd8:	68e3      	ldr	r3, [r4, #12]
 801cdda:	6013      	str	r3, [r2, #0]
 801cddc:	2300      	movs	r3, #0
 801cdde:	60e3      	str	r3, [r4, #12]
 801cde0:	e7f0      	b.n	801cdc4 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cde2:	4b0f      	ldr	r3, [pc, #60]	; (801ce20 <tcp_listen_with_backlog_and_err+0xe4>)
 801cde4:	f240 325a 	movw	r2, #858	; 0x35a
 801cde8:	4913      	ldr	r1, [pc, #76]	; (801ce38 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801cdea:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801cdec:	4811      	ldr	r0, [pc, #68]	; (801ce34 <tcp_listen_with_backlog_and_err+0xf8>)
 801cdee:	f009 fcb1 	bl	8026754 <iprintf>
 801cdf2:	f06f 030e 	mvn.w	r3, #14
 801cdf6:	e7d4      	b.n	801cda2 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801cdf8:	68e2      	ldr	r2, [r4, #12]
 801cdfa:	60da      	str	r2, [r3, #12]
 801cdfc:	2300      	movs	r3, #0
 801cdfe:	60e3      	str	r3, [r4, #12]
 801ce00:	e7e0      	b.n	801cdc4 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801ce02:	f04f 33ff 	mov.w	r3, #4294967295
 801ce06:	e7cc      	b.n	801cda2 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ce08:	4b05      	ldr	r3, [pc, #20]	; (801ce20 <tcp_listen_with_backlog_and_err+0xe4>)
 801ce0a:	f240 3259 	movw	r2, #857	; 0x359
 801ce0e:	490b      	ldr	r1, [pc, #44]	; (801ce3c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ce10:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ce12:	4808      	ldr	r0, [pc, #32]	; (801ce34 <tcp_listen_with_backlog_and_err+0xf8>)
 801ce14:	f009 fc9e 	bl	8026754 <iprintf>
 801ce18:	f06f 030f 	mvn.w	r3, #15
 801ce1c:	e7c1      	b.n	801cda2 <tcp_listen_with_backlog_and_err+0x66>
 801ce1e:	bf00      	nop
 801ce20:	080456b8 	.word	0x080456b8
 801ce24:	2002e450 	.word	0x2002e450
 801ce28:	0801dad1 	.word	0x0801dad1
 801ce2c:	2002e44c 	.word	0x2002e44c
 801ce30:	080456f4 	.word	0x080456f4
 801ce34:	0802b44c 	.word	0x0802b44c
 801ce38:	08045778 	.word	0x08045778
 801ce3c:	08045748 	.word	0x08045748

0801ce40 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801ce40:	2200      	movs	r2, #0
 801ce42:	f7ff bf7b 	b.w	801cd3c <tcp_listen_with_backlog_and_err>
 801ce46:	bf00      	nop

0801ce48 <tcp_update_rcv_ann_wnd>:
{
 801ce48:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ce4a:	4604      	mov	r4, r0
 801ce4c:	b1c0      	cbz	r0, 801ce80 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ce4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ce50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ce52:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ce56:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ce58:	1ad0      	subs	r0, r2, r3
 801ce5a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801ce5e:	4428      	add	r0, r5
 801ce60:	bf94      	ite	ls
 801ce62:	eba0 010c 	subls.w	r1, r0, ip
 801ce66:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801ce6a:	2900      	cmp	r1, #0
 801ce6c:	db01      	blt.n	801ce72 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801ce6e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801ce70:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801ce72:	1aea      	subs	r2, r5, r3
 801ce74:	2a00      	cmp	r2, #0
 801ce76:	dd0b      	ble.n	801ce90 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801ce78:	2300      	movs	r3, #0
    return 0;
 801ce7a:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801ce7c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801ce7e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ce80:	4b0b      	ldr	r3, [pc, #44]	; (801ceb0 <tcp_update_rcv_ann_wnd+0x68>)
 801ce82:	f240 32a6 	movw	r2, #934	; 0x3a6
 801ce86:	490b      	ldr	r1, [pc, #44]	; (801ceb4 <tcp_update_rcv_ann_wnd+0x6c>)
 801ce88:	480b      	ldr	r0, [pc, #44]	; (801ceb8 <tcp_update_rcv_ann_wnd+0x70>)
 801ce8a:	f009 fc63 	bl	8026754 <iprintf>
 801ce8e:	e7de      	b.n	801ce4e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801ce90:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce92:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801ce96:	d202      	bcs.n	801ce9e <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801ce98:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801ce9a:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801ce9c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801ce9e:	4b04      	ldr	r3, [pc, #16]	; (801ceb0 <tcp_update_rcv_ann_wnd+0x68>)
 801cea0:	f240 32b6 	movw	r2, #950	; 0x3b6
 801cea4:	4905      	ldr	r1, [pc, #20]	; (801cebc <tcp_update_rcv_ann_wnd+0x74>)
 801cea6:	4804      	ldr	r0, [pc, #16]	; (801ceb8 <tcp_update_rcv_ann_wnd+0x70>)
 801cea8:	f009 fc54 	bl	8026754 <iprintf>
 801ceac:	e7f4      	b.n	801ce98 <tcp_update_rcv_ann_wnd+0x50>
 801ceae:	bf00      	nop
 801ceb0:	080456b8 	.word	0x080456b8
 801ceb4:	080457b0 	.word	0x080457b0
 801ceb8:	0802b44c 	.word	0x0802b44c
 801cebc:	080457d4 	.word	0x080457d4

0801cec0 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801cec0:	b340      	cbz	r0, 801cf14 <tcp_recved+0x54>
{
 801cec2:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801cec4:	7d03      	ldrb	r3, [r0, #20]
 801cec6:	4605      	mov	r5, r0
 801cec8:	460c      	mov	r4, r1
 801ceca:	2b01      	cmp	r3, #1
 801cecc:	d01a      	beq.n	801cf04 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801cece:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801ced0:	1919      	adds	r1, r3, r4
 801ced2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801ced4:	428b      	cmp	r3, r1
 801ced6:	d802      	bhi.n	801cede <tcp_recved+0x1e>
 801ced8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801cedc:	d901      	bls.n	801cee2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801cede:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801cee2:	4628      	mov	r0, r5
 801cee4:	8529      	strh	r1, [r5, #40]	; 0x28
 801cee6:	f7ff ffaf 	bl	801ce48 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801ceea:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801ceee:	d200      	bcs.n	801cef2 <tcp_recved+0x32>
}
 801cef0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801cef2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801cef4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801cef6:	f043 0302 	orr.w	r3, r3, #2
 801cefa:	836b      	strh	r3, [r5, #26]
}
 801cefc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801cf00:	f003 bd10 	b.w	8020924 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801cf04:	4b07      	ldr	r3, [pc, #28]	; (801cf24 <tcp_recved+0x64>)
 801cf06:	f240 32d2 	movw	r2, #978	; 0x3d2
 801cf0a:	4907      	ldr	r1, [pc, #28]	; (801cf28 <tcp_recved+0x68>)
 801cf0c:	4807      	ldr	r0, [pc, #28]	; (801cf2c <tcp_recved+0x6c>)
 801cf0e:	f009 fc21 	bl	8026754 <iprintf>
 801cf12:	e7dc      	b.n	801cece <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801cf14:	4b03      	ldr	r3, [pc, #12]	; (801cf24 <tcp_recved+0x64>)
 801cf16:	f240 32cf 	movw	r2, #975	; 0x3cf
 801cf1a:	4905      	ldr	r1, [pc, #20]	; (801cf30 <tcp_recved+0x70>)
 801cf1c:	4803      	ldr	r0, [pc, #12]	; (801cf2c <tcp_recved+0x6c>)
 801cf1e:	f009 bc19 	b.w	8026754 <iprintf>
 801cf22:	bf00      	nop
 801cf24:	080456b8 	.word	0x080456b8
 801cf28:	08045808 	.word	0x08045808
 801cf2c:	0802b44c 	.word	0x0802b44c
 801cf30:	080457f0 	.word	0x080457f0

0801cf34 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf36:	2800      	cmp	r0, #0
 801cf38:	f000 808c 	beq.w	801d054 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cf3c:	2900      	cmp	r1, #0
 801cf3e:	d07f      	beq.n	801d040 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801cf40:	461e      	mov	r6, r3
 801cf42:	7d03      	ldrb	r3, [r0, #20]
 801cf44:	4604      	mov	r4, r0
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d16a      	bne.n	801d020 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cf4a:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cf4c:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801cf4e:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801cf50:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cf52:	2800      	cmp	r0, #0
 801cf54:	d049      	beq.n	801cfea <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801cf56:	f7ff f80d 	bl	801bf74 <netif_get_by_index>
 801cf5a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801cf5c:	2d00      	cmp	r5, #0
 801cf5e:	d06c      	beq.n	801d03a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cf60:	6823      	ldr	r3, [r4, #0]
 801cf62:	b90b      	cbnz	r3, 801cf68 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cf64:	686b      	ldr	r3, [r5, #4]
 801cf66:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801cf68:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801cf6a:	b927      	cbnz	r7, 801cf76 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801cf6c:	f7ff fdf8 	bl	801cb60 <tcp_new_port>
 801cf70:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d05e      	beq.n	801d034 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801cf76:	4b3c      	ldr	r3, [pc, #240]	; (801d068 <tcp_connect+0x134>)
 801cf78:	4a3c      	ldr	r2, [pc, #240]	; (801d06c <tcp_connect+0x138>)
 801cf7a:	6811      	ldr	r1, [r2, #0]
 801cf7c:	681a      	ldr	r2, [r3, #0]
 801cf7e:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801cf80:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801cf84:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801cf86:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801cf88:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf8a:	4b39      	ldr	r3, [pc, #228]	; (801d070 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801cf8c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cf8e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801cf90:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801cf92:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801cf96:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cf9e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d037      	beq.n	801d014 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801cfa4:	2b28      	cmp	r3, #40	; 0x28
 801cfa6:	d907      	bls.n	801cfb8 <tcp_connect+0x84>
 801cfa8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cfac:	b292      	uxth	r2, r2
 801cfae:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801cfb2:	bf28      	it	cs
 801cfb4:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801cfb8:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cfba:	2102      	movs	r1, #2
 801cfbc:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801cfbe:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801cfc0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801cfc4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801cfc8:	f003 fa90 	bl	80204ec <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801cfcc:	4605      	mov	r5, r0
 801cfce:	b9f8      	cbnz	r0, 801d010 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801cfd0:	2302      	movs	r3, #2
 801cfd2:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801cfd4:	b187      	cbz	r7, 801cff8 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cfd6:	4a27      	ldr	r2, [pc, #156]	; (801d074 <tcp_connect+0x140>)
 801cfd8:	6813      	ldr	r3, [r2, #0]
 801cfda:	42a3      	cmp	r3, r4
 801cfdc:	d01d      	beq.n	801d01a <tcp_connect+0xe6>
 801cfde:	b15b      	cbz	r3, 801cff8 <tcp_connect+0xc4>
 801cfe0:	68da      	ldr	r2, [r3, #12]
 801cfe2:	42a2      	cmp	r2, r4
 801cfe4:	d006      	beq.n	801cff4 <tcp_connect+0xc0>
 801cfe6:	4613      	mov	r3, r2
 801cfe8:	e7f9      	b.n	801cfde <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801cfea:	1d20      	adds	r0, r4, #4
 801cfec:	f006 fee4 	bl	8023db8 <ip4_route>
 801cff0:	4605      	mov	r5, r0
 801cff2:	e7b3      	b.n	801cf5c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801cff4:	68e2      	ldr	r2, [r4, #12]
 801cff6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801cff8:	4b1f      	ldr	r3, [pc, #124]	; (801d078 <tcp_connect+0x144>)
 801cffa:	681a      	ldr	r2, [r3, #0]
 801cffc:	601c      	str	r4, [r3, #0]
 801cffe:	60e2      	str	r2, [r4, #12]
 801d000:	f003 ffbc 	bl	8020f7c <tcp_timer_needed>
 801d004:	4b1d      	ldr	r3, [pc, #116]	; (801d07c <tcp_connect+0x148>)
 801d006:	2201      	movs	r2, #1
    tcp_output(pcb);
 801d008:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801d00a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801d00c:	f003 fc8a 	bl	8020924 <tcp_output>
}
 801d010:	4628      	mov	r0, r5
 801d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d014:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d018:	e7ce      	b.n	801cfb8 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d01a:	68e3      	ldr	r3, [r4, #12]
 801d01c:	6013      	str	r3, [r2, #0]
 801d01e:	e7eb      	b.n	801cff8 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801d020:	4b17      	ldr	r3, [pc, #92]	; (801d080 <tcp_connect+0x14c>)
 801d022:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801d026:	4917      	ldr	r1, [pc, #92]	; (801d084 <tcp_connect+0x150>)
 801d028:	f06f 0509 	mvn.w	r5, #9
 801d02c:	4816      	ldr	r0, [pc, #88]	; (801d088 <tcp_connect+0x154>)
 801d02e:	f009 fb91 	bl	8026754 <iprintf>
 801d032:	e7ed      	b.n	801d010 <tcp_connect+0xdc>
      return ERR_BUF;
 801d034:	f06f 0501 	mvn.w	r5, #1
 801d038:	e7ea      	b.n	801d010 <tcp_connect+0xdc>
    return ERR_RTE;
 801d03a:	f06f 0503 	mvn.w	r5, #3
 801d03e:	e7e7      	b.n	801d010 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d040:	4b0f      	ldr	r3, [pc, #60]	; (801d080 <tcp_connect+0x14c>)
 801d042:	f240 4236 	movw	r2, #1078	; 0x436
 801d046:	4911      	ldr	r1, [pc, #68]	; (801d08c <tcp_connect+0x158>)
 801d048:	f06f 050f 	mvn.w	r5, #15
 801d04c:	480e      	ldr	r0, [pc, #56]	; (801d088 <tcp_connect+0x154>)
 801d04e:	f009 fb81 	bl	8026754 <iprintf>
 801d052:	e7dd      	b.n	801d010 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d054:	4b0a      	ldr	r3, [pc, #40]	; (801d080 <tcp_connect+0x14c>)
 801d056:	f240 4235 	movw	r2, #1077	; 0x435
 801d05a:	490d      	ldr	r1, [pc, #52]	; (801d090 <tcp_connect+0x15c>)
 801d05c:	f06f 050f 	mvn.w	r5, #15
 801d060:	4809      	ldr	r0, [pc, #36]	; (801d088 <tcp_connect+0x154>)
 801d062:	f009 fb77 	bl	8026754 <iprintf>
 801d066:	e7d3      	b.n	801d010 <tcp_connect+0xdc>
 801d068:	20000428 	.word	0x20000428
 801d06c:	2002e454 	.word	0x2002e454
 801d070:	08600860 	.word	0x08600860
 801d074:	2002e44c 	.word	0x2002e44c
 801d078:	2002e444 	.word	0x2002e444
 801d07c:	2002e448 	.word	0x2002e448
 801d080:	080456b8 	.word	0x080456b8
 801d084:	08045868 	.word	0x08045868
 801d088:	0802b44c 	.word	0x0802b44c
 801d08c:	0804584c 	.word	0x0804584c
 801d090:	08045830 	.word	0x08045830

0801d094 <tcp_segs_free>:
  while (seg != NULL) {
 801d094:	b170      	cbz	r0, 801d0b4 <tcp_segs_free+0x20>
{
 801d096:	b538      	push	{r3, r4, r5, lr}
 801d098:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801d09a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801d09c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d09e:	6868      	ldr	r0, [r5, #4]
 801d0a0:	b108      	cbz	r0, 801d0a6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801d0a2:	f7ff fa8d 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d0a6:	4629      	mov	r1, r5
 801d0a8:	2004      	movs	r0, #4
 801d0aa:	f7fe fd71 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d0ae:	2c00      	cmp	r4, #0
 801d0b0:	d1f3      	bne.n	801d09a <tcp_segs_free+0x6>
}
 801d0b2:	bd38      	pop	{r3, r4, r5, pc}
 801d0b4:	4770      	bx	lr
 801d0b6:	bf00      	nop

0801d0b8 <tcp_seg_free>:
  if (seg != NULL) {
 801d0b8:	b158      	cbz	r0, 801d0d2 <tcp_seg_free+0x1a>
{
 801d0ba:	b510      	push	{r4, lr}
 801d0bc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801d0be:	6840      	ldr	r0, [r0, #4]
 801d0c0:	b108      	cbz	r0, 801d0c6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801d0c2:	f7ff fa7d 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d0c6:	4621      	mov	r1, r4
 801d0c8:	2004      	movs	r0, #4
}
 801d0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801d0ce:	f7fe bd5f 	b.w	801bb90 <memp_free>
 801d0d2:	4770      	bx	lr

0801d0d4 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d0d4:	b108      	cbz	r0, 801d0da <tcp_setprio+0x6>
  pcb->prio = prio;
 801d0d6:	7541      	strb	r1, [r0, #21]
}
 801d0d8:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801d0da:	4b03      	ldr	r3, [pc, #12]	; (801d0e8 <tcp_setprio+0x14>)
 801d0dc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801d0e0:	4902      	ldr	r1, [pc, #8]	; (801d0ec <tcp_setprio+0x18>)
 801d0e2:	4803      	ldr	r0, [pc, #12]	; (801d0f0 <tcp_setprio+0x1c>)
 801d0e4:	f009 bb36 	b.w	8026754 <iprintf>
 801d0e8:	080456b8 	.word	0x080456b8
 801d0ec:	08045898 	.word	0x08045898
 801d0f0:	0802b44c 	.word	0x0802b44c

0801d0f4 <tcp_seg_copy>:
{
 801d0f4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d0f6:	4605      	mov	r5, r0
 801d0f8:	b1a0      	cbz	r0, 801d124 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801d0fa:	f240 6284 	movw	r2, #1668	; 0x684
 801d0fe:	490d      	ldr	r1, [pc, #52]	; (801d134 <tcp_seg_copy+0x40>)
 801d100:	2004      	movs	r0, #4
 801d102:	f7fe fd0f 	bl	801bb24 <memp_malloc_fn>
  if (cseg == NULL) {
 801d106:	4604      	mov	r4, r0
 801d108:	b150      	cbz	r0, 801d120 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d10a:	6868      	ldr	r0, [r5, #4]
 801d10c:	6829      	ldr	r1, [r5, #0]
 801d10e:	68aa      	ldr	r2, [r5, #8]
 801d110:	68eb      	ldr	r3, [r5, #12]
 801d112:	6060      	str	r0, [r4, #4]
 801d114:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801d116:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d118:	60a2      	str	r2, [r4, #8]
 801d11a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801d11c:	f7ff fa6e 	bl	801c5fc <pbuf_ref>
}
 801d120:	4620      	mov	r0, r4
 801d122:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d124:	4b03      	ldr	r3, [pc, #12]	; (801d134 <tcp_seg_copy+0x40>)
 801d126:	f240 6282 	movw	r2, #1666	; 0x682
 801d12a:	4903      	ldr	r1, [pc, #12]	; (801d138 <tcp_seg_copy+0x44>)
 801d12c:	4803      	ldr	r0, [pc, #12]	; (801d13c <tcp_seg_copy+0x48>)
 801d12e:	f009 fb11 	bl	8026754 <iprintf>
 801d132:	e7e2      	b.n	801d0fa <tcp_seg_copy+0x6>
 801d134:	080456b8 	.word	0x080456b8
 801d138:	080458b4 	.word	0x080458b4
 801d13c:	0802b44c 	.word	0x0802b44c

0801d140 <tcp_arg>:
  if (pcb != NULL) {
 801d140:	b100      	cbz	r0, 801d144 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801d142:	6101      	str	r1, [r0, #16]
}
 801d144:	4770      	bx	lr
 801d146:	bf00      	nop

0801d148 <tcp_recv>:
  if (pcb != NULL) {
 801d148:	b140      	cbz	r0, 801d15c <tcp_recv+0x14>
{
 801d14a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d14c:	7d03      	ldrb	r3, [r0, #20]
 801d14e:	4604      	mov	r4, r0
 801d150:	460d      	mov	r5, r1
 801d152:	2b01      	cmp	r3, #1
 801d154:	d003      	beq.n	801d15e <tcp_recv+0x16>
    pcb->recv = recv;
 801d156:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d15a:	bd38      	pop	{r3, r4, r5, pc}
 801d15c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d15e:	4b05      	ldr	r3, [pc, #20]	; (801d174 <tcp_recv+0x2c>)
 801d160:	f240 72df 	movw	r2, #2015	; 0x7df
 801d164:	4904      	ldr	r1, [pc, #16]	; (801d178 <tcp_recv+0x30>)
 801d166:	4805      	ldr	r0, [pc, #20]	; (801d17c <tcp_recv+0x34>)
 801d168:	f009 faf4 	bl	8026754 <iprintf>
    pcb->recv = recv;
 801d16c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801d170:	bd38      	pop	{r3, r4, r5, pc}
 801d172:	bf00      	nop
 801d174:	080456b8 	.word	0x080456b8
 801d178:	080458d0 	.word	0x080458d0
 801d17c:	0802b44c 	.word	0x0802b44c

0801d180 <tcp_sent>:
  if (pcb != NULL) {
 801d180:	b140      	cbz	r0, 801d194 <tcp_sent+0x14>
{
 801d182:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d184:	7d03      	ldrb	r3, [r0, #20]
 801d186:	4604      	mov	r4, r0
 801d188:	460d      	mov	r5, r1
 801d18a:	2b01      	cmp	r3, #1
 801d18c:	d003      	beq.n	801d196 <tcp_sent+0x16>
    pcb->sent = sent;
 801d18e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d192:	bd38      	pop	{r3, r4, r5, pc}
 801d194:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d196:	4b05      	ldr	r3, [pc, #20]	; (801d1ac <tcp_sent+0x2c>)
 801d198:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801d19c:	4904      	ldr	r1, [pc, #16]	; (801d1b0 <tcp_sent+0x30>)
 801d19e:	4805      	ldr	r0, [pc, #20]	; (801d1b4 <tcp_sent+0x34>)
 801d1a0:	f009 fad8 	bl	8026754 <iprintf>
    pcb->sent = sent;
 801d1a4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801d1a8:	bd38      	pop	{r3, r4, r5, pc}
 801d1aa:	bf00      	nop
 801d1ac:	080456b8 	.word	0x080456b8
 801d1b0:	080458f8 	.word	0x080458f8
 801d1b4:	0802b44c 	.word	0x0802b44c

0801d1b8 <tcp_err>:
  if (pcb != NULL) {
 801d1b8:	b140      	cbz	r0, 801d1cc <tcp_err+0x14>
{
 801d1ba:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d1bc:	7d03      	ldrb	r3, [r0, #20]
 801d1be:	4604      	mov	r4, r0
 801d1c0:	460d      	mov	r5, r1
 801d1c2:	2b01      	cmp	r3, #1
 801d1c4:	d003      	beq.n	801d1ce <tcp_err+0x16>
    pcb->errf = err;
 801d1c6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
 801d1cc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d1ce:	4b05      	ldr	r3, [pc, #20]	; (801d1e4 <tcp_err+0x2c>)
 801d1d0:	f640 020d 	movw	r2, #2061	; 0x80d
 801d1d4:	4904      	ldr	r1, [pc, #16]	; (801d1e8 <tcp_err+0x30>)
 801d1d6:	4805      	ldr	r0, [pc, #20]	; (801d1ec <tcp_err+0x34>)
 801d1d8:	f009 fabc 	bl	8026754 <iprintf>
    pcb->errf = err;
 801d1dc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801d1e0:	bd38      	pop	{r3, r4, r5, pc}
 801d1e2:	bf00      	nop
 801d1e4:	080456b8 	.word	0x080456b8
 801d1e8:	08045920 	.word	0x08045920
 801d1ec:	0802b44c 	.word	0x0802b44c

0801d1f0 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801d1f0:	b118      	cbz	r0, 801d1fa <tcp_accept+0xa>
 801d1f2:	7d03      	ldrb	r3, [r0, #20]
 801d1f4:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801d1f6:	bf08      	it	eq
 801d1f8:	6181      	streq	r1, [r0, #24]
}
 801d1fa:	4770      	bx	lr

0801d1fc <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d1fc:	b1a8      	cbz	r0, 801d22a <tcp_poll+0x2e>
{
 801d1fe:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d200:	7d03      	ldrb	r3, [r0, #20]
 801d202:	460e      	mov	r6, r1
 801d204:	4604      	mov	r4, r0
 801d206:	4615      	mov	r5, r2
 801d208:	2b01      	cmp	r3, #1
 801d20a:	d003      	beq.n	801d214 <tcp_poll+0x18>
  pcb->poll = poll;
 801d20c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d210:	7765      	strb	r5, [r4, #29]
}
 801d212:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d214:	4b08      	ldr	r3, [pc, #32]	; (801d238 <tcp_poll+0x3c>)
 801d216:	f640 023e 	movw	r2, #2110	; 0x83e
 801d21a:	4908      	ldr	r1, [pc, #32]	; (801d23c <tcp_poll+0x40>)
 801d21c:	4808      	ldr	r0, [pc, #32]	; (801d240 <tcp_poll+0x44>)
 801d21e:	f009 fa99 	bl	8026754 <iprintf>
  pcb->poll = poll;
 801d222:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801d226:	7765      	strb	r5, [r4, #29]
}
 801d228:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d22a:	4b03      	ldr	r3, [pc, #12]	; (801d238 <tcp_poll+0x3c>)
 801d22c:	f640 023d 	movw	r2, #2109	; 0x83d
 801d230:	4904      	ldr	r1, [pc, #16]	; (801d244 <tcp_poll+0x48>)
 801d232:	4803      	ldr	r0, [pc, #12]	; (801d240 <tcp_poll+0x44>)
 801d234:	f009 ba8e 	b.w	8026754 <iprintf>
 801d238:	080456b8 	.word	0x080456b8
 801d23c:	08045960 	.word	0x08045960
 801d240:	0802b44c 	.word	0x0802b44c
 801d244:	08045948 	.word	0x08045948

0801d248 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d248:	2800      	cmp	r0, #0
 801d24a:	d041      	beq.n	801d2d0 <tcp_pcb_purge+0x88>
{
 801d24c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801d24e:	7d03      	ldrb	r3, [r0, #20]
 801d250:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801d252:	2b0a      	cmp	r3, #10
 801d254:	d001      	beq.n	801d25a <tcp_pcb_purge+0x12>
 801d256:	2b01      	cmp	r3, #1
 801d258:	d800      	bhi.n	801d25c <tcp_pcb_purge+0x14>
}
 801d25a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801d25c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801d25e:	b118      	cbz	r0, 801d268 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801d260:	f7ff f9ae 	bl	801c5c0 <pbuf_free>
      pcb->refused_data = NULL;
 801d264:	2300      	movs	r3, #0
 801d266:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801d268:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d26a:	b164      	cbz	r4, 801d286 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801d26c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d26e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d270:	6870      	ldr	r0, [r6, #4]
 801d272:	b108      	cbz	r0, 801d278 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801d274:	f7ff f9a4 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d278:	4631      	mov	r1, r6
 801d27a:	2004      	movs	r0, #4
 801d27c:	f7fe fc88 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d280:	2c00      	cmp	r4, #0
 801d282:	d1f3      	bne.n	801d26c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801d284:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801d286:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801d28a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801d28c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801d28e:	b15c      	cbz	r4, 801d2a8 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801d290:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d292:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d294:	6870      	ldr	r0, [r6, #4]
 801d296:	b108      	cbz	r0, 801d29c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801d298:	f7ff f992 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d29c:	4631      	mov	r1, r6
 801d29e:	2004      	movs	r0, #4
 801d2a0:	f7fe fc76 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d2a4:	2c00      	cmp	r4, #0
 801d2a6:	d1f3      	bne.n	801d290 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801d2a8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801d2aa:	b15c      	cbz	r4, 801d2c4 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801d2ac:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801d2ae:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d2b0:	6870      	ldr	r0, [r6, #4]
 801d2b2:	b108      	cbz	r0, 801d2b8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801d2b4:	f7ff f984 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d2b8:	4631      	mov	r1, r6
 801d2ba:	2004      	movs	r0, #4
 801d2bc:	f7fe fc68 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d2c0:	2c00      	cmp	r4, #0
 801d2c2:	d1f3      	bne.n	801d2ac <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801d2ca:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801d2ce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d2d0:	4b03      	ldr	r3, [pc, #12]	; (801d2e0 <tcp_pcb_purge+0x98>)
 801d2d2:	f640 0251 	movw	r2, #2129	; 0x851
 801d2d6:	4903      	ldr	r1, [pc, #12]	; (801d2e4 <tcp_pcb_purge+0x9c>)
 801d2d8:	4803      	ldr	r0, [pc, #12]	; (801d2e8 <tcp_pcb_purge+0xa0>)
 801d2da:	f009 ba3b 	b.w	8026754 <iprintf>
 801d2de:	bf00      	nop
 801d2e0:	080456b8 	.word	0x080456b8
 801d2e4:	08045980 	.word	0x08045980
 801d2e8:	0802b44c 	.word	0x0802b44c

0801d2ec <tcp_slowtmr>:
{
 801d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801d2f0:	4da9      	ldr	r5, [pc, #676]	; (801d598 <tcp_slowtmr+0x2ac>)
{
 801d2f2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801d2f4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801d5c4 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801d2f8:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d2fa:	4fa8      	ldr	r7, [pc, #672]	; (801d59c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801d2fc:	3301      	adds	r3, #1
 801d2fe:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801d300:	f89b 3000 	ldrb.w	r3, [fp]
 801d304:	3301      	adds	r3, #1
 801d306:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801d30a:	4ba5      	ldr	r3, [pc, #660]	; (801d5a0 <tcp_slowtmr+0x2b4>)
 801d30c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801d30e:	2c00      	cmp	r4, #0
 801d310:	f000 808a 	beq.w	801d428 <tcp_slowtmr+0x13c>
  prev = NULL;
 801d314:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d316:	46b1      	mov	r9, r6
 801d318:	7d23      	ldrb	r3, [r4, #20]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	f000 80fc 	beq.w	801d518 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d320:	2b01      	cmp	r3, #1
 801d322:	f000 8104 	beq.w	801d52e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d326:	2b0a      	cmp	r3, #10
 801d328:	f000 810c 	beq.w	801d544 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d32c:	f89b 2000 	ldrb.w	r2, [fp]
 801d330:	7fa3      	ldrb	r3, [r4, #30]
 801d332:	4293      	cmp	r3, r2
 801d334:	f000 8113 	beq.w	801d55e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d338:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801d33a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d33c:	2b02      	cmp	r3, #2
 801d33e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801d342:	f000 8112 	beq.w	801d56a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801d346:	2a0b      	cmp	r2, #11
 801d348:	f240 80cb 	bls.w	801d4e2 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801d34c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801d350:	2b06      	cmp	r3, #6
 801d352:	f000 80b7 	beq.w	801d4c4 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801d356:	f894 a009 	ldrb.w	sl, [r4, #9]
 801d35a:	f01a 0a08 	ands.w	sl, sl, #8
 801d35e:	d01d      	beq.n	801d39c <tcp_slowtmr+0xb0>
 801d360:	2b04      	cmp	r3, #4
 801d362:	d007      	beq.n	801d374 <tcp_slowtmr+0x88>
 801d364:	f1a3 0307 	sub.w	r3, r3, #7
 801d368:	fab3 f383 	clz	r3, r3
 801d36c:	095b      	lsrs	r3, r3, #5
 801d36e:	2b00      	cmp	r3, #0
 801d370:	f000 80b4 	beq.w	801d4dc <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d374:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801d378:	4b8a      	ldr	r3, [pc, #552]	; (801d5a4 <tcp_slowtmr+0x2b8>)
 801d37a:	488b      	ldr	r0, [pc, #556]	; (801d5a8 <tcp_slowtmr+0x2bc>)
 801d37c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d37e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d380:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d384:	6a20      	ldr	r0, [r4, #32]
 801d386:	1a12      	subs	r2, r2, r0
 801d388:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801d38c:	f240 8160 	bls.w	801d650 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801d390:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801d394:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801d398:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801d39c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801d39e:	b156      	cbz	r6, 801d3b6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801d3a0:	682b      	ldr	r3, [r5, #0]
 801d3a2:	6a22      	ldr	r2, [r4, #32]
 801d3a4:	1a9a      	subs	r2, r3, r2
 801d3a6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801d3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801d3ae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801d3b2:	f080 80e1 	bcs.w	801d578 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801d3b6:	7d23      	ldrb	r3, [r4, #20]
 801d3b8:	2b03      	cmp	r3, #3
 801d3ba:	d057      	beq.n	801d46c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801d3bc:	2b09      	cmp	r3, #9
 801d3be:	d15a      	bne.n	801d476 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d3c0:	682b      	ldr	r3, [r5, #0]
 801d3c2:	6a22      	ldr	r2, [r4, #32]
 801d3c4:	1a9b      	subs	r3, r3, r2
 801d3c6:	2bf0      	cmp	r3, #240	; 0xf0
 801d3c8:	d955      	bls.n	801d476 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801d3ca:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801d3cc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801d3d0:	f7ff ff3a 	bl	801d248 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d3d4:	4b72      	ldr	r3, [pc, #456]	; (801d5a0 <tcp_slowtmr+0x2b4>)
 801d3d6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801d3d8:	f1b9 0f00 	cmp.w	r9, #0
 801d3dc:	f000 817e 	beq.w	801d6dc <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d3e0:	42a3      	cmp	r3, r4
 801d3e2:	f000 81df 	beq.w	801d7a4 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801d3e6:	68e3      	ldr	r3, [r4, #12]
 801d3e8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801d3ec:	f1ba 0f00 	cmp.w	sl, #0
 801d3f0:	f040 8147 	bne.w	801d682 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3f4:	7d23      	ldrb	r3, [r4, #20]
 801d3f6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d3f8:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d3fc:	f000 8153 	beq.w	801d6a6 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801d400:	4621      	mov	r1, r4
 801d402:	2002      	movs	r0, #2
 801d404:	f7fe fbc4 	bl	801bb90 <memp_free>
      tcp_active_pcbs_changed = 0;
 801d408:	4c68      	ldr	r4, [pc, #416]	; (801d5ac <tcp_slowtmr+0x2c0>)
 801d40a:	2300      	movs	r3, #0
 801d40c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801d40e:	b13e      	cbz	r6, 801d420 <tcp_slowtmr+0x134>
 801d410:	f06f 010c 	mvn.w	r1, #12
 801d414:	4650      	mov	r0, sl
 801d416:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801d418:	7823      	ldrb	r3, [r4, #0]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	f47f af75 	bne.w	801d30a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801d420:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801d422:	2c00      	cmp	r4, #0
 801d424:	f47f af78 	bne.w	801d318 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801d428:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801d5c8 <tcp_slowtmr+0x2dc>
 801d42c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801d430:	b1cc      	cbz	r4, 801d466 <tcp_slowtmr+0x17a>
  prev = NULL;
 801d432:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d434:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801d59c <tcp_slowtmr+0x2b0>
 801d438:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d5cc <tcp_slowtmr+0x2e0>
 801d43c:	4f5c      	ldr	r7, [pc, #368]	; (801d5b0 <tcp_slowtmr+0x2c4>)
 801d43e:	7d23      	ldrb	r3, [r4, #20]
 801d440:	2b0a      	cmp	r3, #10
 801d442:	d006      	beq.n	801d452 <tcp_slowtmr+0x166>
 801d444:	4643      	mov	r3, r8
 801d446:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801d44a:	4651      	mov	r1, sl
 801d44c:	4638      	mov	r0, r7
 801d44e:	f009 f981 	bl	8026754 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801d452:	682b      	ldr	r3, [r5, #0]
 801d454:	6a22      	ldr	r2, [r4, #32]
 801d456:	1a9b      	subs	r3, r3, r2
 801d458:	2bf0      	cmp	r3, #240	; 0xf0
 801d45a:	f200 80d4 	bhi.w	801d606 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801d45e:	4626      	mov	r6, r4
 801d460:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d462:	2c00      	cmp	r4, #0
 801d464:	d1eb      	bne.n	801d43e <tcp_slowtmr+0x152>
}
 801d466:	b007      	add	sp, #28
 801d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d46c:	682b      	ldr	r3, [r5, #0]
 801d46e:	6a22      	ldr	r2, [r4, #32]
 801d470:	1a9b      	subs	r3, r3, r2
 801d472:	2b28      	cmp	r3, #40	; 0x28
 801d474:	d8a9      	bhi.n	801d3ca <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801d476:	f1b8 0f00 	cmp.w	r8, #0
 801d47a:	d1a6      	bne.n	801d3ca <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801d47c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d47e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801d480:	3301      	adds	r3, #1
      pcb = pcb->next;
 801d482:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801d484:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801d486:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801d488:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801d48a:	d815      	bhi.n	801d4b8 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801d48c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801d5ac <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801d490:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801d494:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801d498:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	f000 80ce 	beq.w	801d63e <tcp_slowtmr+0x352>
 801d4a2:	4621      	mov	r1, r4
 801d4a4:	6920      	ldr	r0, [r4, #16]
 801d4a6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801d4a8:	f899 3000 	ldrb.w	r3, [r9]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	f47f af2c 	bne.w	801d30a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801d4b2:	2800      	cmp	r0, #0
 801d4b4:	f000 80c3 	beq.w	801d63e <tcp_slowtmr+0x352>
 801d4b8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d4ba:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801d4bc:	2c00      	cmp	r4, #0
 801d4be:	f47f af2b 	bne.w	801d318 <tcp_slowtmr+0x2c>
 801d4c2:	e7b1      	b.n	801d428 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801d4c4:	8b63      	ldrh	r3, [r4, #26]
 801d4c6:	06db      	lsls	r3, r3, #27
 801d4c8:	d508      	bpl.n	801d4dc <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d4ca:	682b      	ldr	r3, [r5, #0]
 801d4cc:	6a22      	ldr	r2, [r4, #32]
 801d4ce:	1a9b      	subs	r3, r3, r2
 801d4d0:	2b28      	cmp	r3, #40	; 0x28
 801d4d2:	d903      	bls.n	801d4dc <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801d4d4:	f108 0801 	add.w	r8, r8, #1
 801d4d8:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801d4dc:	f04f 0a00 	mov.w	sl, #0
 801d4e0:	e75c      	b.n	801d39c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801d4e2:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801d4e6:	f1b8 0f00 	cmp.w	r8, #0
 801d4ea:	d071      	beq.n	801d5d0 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d4ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d4ee:	b133      	cbz	r3, 801d4fe <tcp_slowtmr+0x212>
 801d4f0:	463b      	mov	r3, r7
 801d4f2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801d4f6:	492f      	ldr	r1, [pc, #188]	; (801d5b4 <tcp_slowtmr+0x2c8>)
 801d4f8:	482d      	ldr	r0, [pc, #180]	; (801d5b0 <tcp_slowtmr+0x2c4>)
 801d4fa:	f009 f92b 	bl	8026754 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d4fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d500:	2b00      	cmp	r3, #0
 801d502:	f000 8171 	beq.w	801d7e8 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d506:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801d50a:	2b0b      	cmp	r3, #11
 801d50c:	f240 80d2 	bls.w	801d6b4 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801d510:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801d512:	f04f 0801 	mov.w	r8, #1
 801d516:	e71b      	b.n	801d350 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d518:	463b      	mov	r3, r7
 801d51a:	f240 42be 	movw	r2, #1214	; 0x4be
 801d51e:	4926      	ldr	r1, [pc, #152]	; (801d5b8 <tcp_slowtmr+0x2cc>)
 801d520:	4823      	ldr	r0, [pc, #140]	; (801d5b0 <tcp_slowtmr+0x2c4>)
 801d522:	f009 f917 	bl	8026754 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d526:	7d23      	ldrb	r3, [r4, #20]
 801d528:	2b01      	cmp	r3, #1
 801d52a:	f47f aefc 	bne.w	801d326 <tcp_slowtmr+0x3a>
 801d52e:	463b      	mov	r3, r7
 801d530:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801d534:	4921      	ldr	r1, [pc, #132]	; (801d5bc <tcp_slowtmr+0x2d0>)
 801d536:	481e      	ldr	r0, [pc, #120]	; (801d5b0 <tcp_slowtmr+0x2c4>)
 801d538:	f009 f90c 	bl	8026754 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d53c:	7d23      	ldrb	r3, [r4, #20]
 801d53e:	2b0a      	cmp	r3, #10
 801d540:	f47f aef4 	bne.w	801d32c <tcp_slowtmr+0x40>
 801d544:	463b      	mov	r3, r7
 801d546:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801d54a:	491d      	ldr	r1, [pc, #116]	; (801d5c0 <tcp_slowtmr+0x2d4>)
 801d54c:	4818      	ldr	r0, [pc, #96]	; (801d5b0 <tcp_slowtmr+0x2c4>)
 801d54e:	f009 f901 	bl	8026754 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d552:	f89b 2000 	ldrb.w	r2, [fp]
 801d556:	7fa3      	ldrb	r3, [r4, #30]
 801d558:	4293      	cmp	r3, r2
 801d55a:	f47f aeed 	bne.w	801d338 <tcp_slowtmr+0x4c>
      continue;
 801d55e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d560:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801d562:	2c00      	cmp	r4, #0
 801d564:	f47f aed8 	bne.w	801d318 <tcp_slowtmr+0x2c>
 801d568:	e75e      	b.n	801d428 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d56a:	2a05      	cmp	r2, #5
 801d56c:	d9b9      	bls.n	801d4e2 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801d56e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801d572:	f04f 0801 	mov.w	r8, #1
 801d576:	e711      	b.n	801d39c <tcp_slowtmr+0xb0>
 801d578:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801d57a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801d57c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801d57e:	6860      	ldr	r0, [r4, #4]
 801d580:	b108      	cbz	r0, 801d586 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801d582:	f7ff f81d 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d586:	4621      	mov	r1, r4
 801d588:	2004      	movs	r0, #4
 801d58a:	f7fe fb01 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d58e:	2e00      	cmp	r6, #0
 801d590:	d1f3      	bne.n	801d57a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801d592:	9c05      	ldr	r4, [sp, #20]
 801d594:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d596:	e70e      	b.n	801d3b6 <tcp_slowtmr+0xca>
 801d598:	2002e454 	.word	0x2002e454
 801d59c:	080456b8 	.word	0x080456b8
 801d5a0:	2002e444 	.word	0x2002e444
 801d5a4:	000a4cb8 	.word	0x000a4cb8
 801d5a8:	10624dd3 	.word	0x10624dd3
 801d5ac:	2002e448 	.word	0x2002e448
 801d5b0:	0802b44c 	.word	0x0802b44c
 801d5b4:	08045a24 	.word	0x08045a24
 801d5b8:	0804599c 	.word	0x0804599c
 801d5bc:	080459c8 	.word	0x080459c8
 801d5c0:	080459f4 	.word	0x080459f4
 801d5c4:	2002e459 	.word	0x2002e459
 801d5c8:	2002e45c 	.word	0x2002e45c
 801d5cc:	08045ae8 	.word	0x08045ae8
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d5d0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801d5d4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801d5d8:	b291      	uxth	r1, r2
 801d5da:	4281      	cmp	r1, r0
 801d5dc:	d802      	bhi.n	801d5e4 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801d5de:	1c4a      	adds	r2, r1, #1
 801d5e0:	b212      	sxth	r2, r2
 801d5e2:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801d5e4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801d5e8:	4291      	cmp	r1, r2
 801d5ea:	f73f aeb1 	bgt.w	801d350 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f003 f85a 	bl	80206a8 <tcp_rexmit_rto_prepare>
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	f000 80a0 	beq.w	801d73a <tcp_slowtmr+0x44e>
 801d5fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	f000 8098 	beq.w	801d732 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801d602:	7d23      	ldrb	r3, [r4, #20]
 801d604:	e6a4      	b.n	801d350 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801d606:	4620      	mov	r0, r4
 801d608:	f7ff fe1e 	bl	801d248 <tcp_pcb_purge>
      if (prev != NULL) {
 801d60c:	2e00      	cmp	r6, #0
 801d60e:	f000 80d1 	beq.w	801d7b4 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d612:	f8d9 3000 	ldr.w	r3, [r9]
 801d616:	42a3      	cmp	r3, r4
 801d618:	f000 80ee 	beq.w	801d7f8 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801d61c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801d620:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d624:	7d23      	ldrb	r3, [r4, #20]
 801d626:	2b01      	cmp	r3, #1
 801d628:	f000 80d7 	beq.w	801d7da <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801d62c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801d62e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801d630:	2002      	movs	r0, #2
 801d632:	f7fe faad 	bl	801bb90 <memp_free>
  while (pcb != NULL) {
 801d636:	2c00      	cmp	r4, #0
 801d638:	f47f af01 	bne.w	801d43e <tcp_slowtmr+0x152>
 801d63c:	e713      	b.n	801d466 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801d63e:	4620      	mov	r0, r4
 801d640:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801d642:	4634      	mov	r4, r6
          tcp_output(prev);
 801d644:	f003 f96e 	bl	8020924 <tcp_output>
  while (pcb != NULL) {
 801d648:	2c00      	cmp	r4, #0
 801d64a:	f47f ae65 	bne.w	801d318 <tcp_slowtmr+0x2c>
 801d64e:	e6eb      	b.n	801d428 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801d650:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801d654:	4870      	ldr	r0, [pc, #448]	; (801d818 <tcp_slowtmr+0x52c>)
 801d656:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801d65a:	4b70      	ldr	r3, [pc, #448]	; (801d81c <tcp_slowtmr+0x530>)
 801d65c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d660:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801d664:	f67f af3a 	bls.w	801d4dc <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801d668:	4620      	mov	r0, r4
 801d66a:	f003 fb91 	bl	8020d90 <tcp_keepalive>
        if (err == ERR_OK) {
 801d66e:	2800      	cmp	r0, #0
 801d670:	f47f af34 	bne.w	801d4dc <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801d674:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801d678:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801d67a:	3301      	adds	r3, #1
 801d67c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801d680:	e68c      	b.n	801d39c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d682:	8b23      	ldrh	r3, [r4, #24]
 801d684:	4620      	mov	r0, r4
 801d686:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d688:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801d68a:	9302      	str	r3, [sp, #8]
 801d68c:	8ae3      	ldrh	r3, [r4, #22]
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	1d23      	adds	r3, r4, #4
 801d692:	9300      	str	r3, [sp, #0]
 801d694:	4623      	mov	r3, r4
 801d696:	f003 f8cb 	bl	8020830 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d69a:	7d23      	ldrb	r3, [r4, #20]
 801d69c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801d69e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d6a2:	f47f aead 	bne.w	801d400 <tcp_slowtmr+0x114>
 801d6a6:	463b      	mov	r3, r7
 801d6a8:	22d4      	movs	r2, #212	; 0xd4
 801d6aa:	495d      	ldr	r1, [pc, #372]	; (801d820 <tcp_slowtmr+0x534>)
 801d6ac:	485d      	ldr	r0, [pc, #372]	; (801d824 <tcp_slowtmr+0x538>)
 801d6ae:	f009 f851 	bl	8026754 <iprintf>
 801d6b2:	e6a5      	b.n	801d400 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d6b4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801d6b8:	4a5b      	ldr	r2, [pc, #364]	; (801d828 <tcp_slowtmr+0x53c>)
 801d6ba:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801d6bc:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d6c0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	d216      	bcs.n	801d6f6 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801d6c8:	3301      	adds	r3, #1
 801d6ca:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801d6cc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801d6ce:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801d6d2:	d210      	bcs.n	801d6f6 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801d6d4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801d6d6:	f04f 0800 	mov.w	r8, #0
 801d6da:	e639      	b.n	801d350 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801d6dc:	42a3      	cmp	r3, r4
 801d6de:	d006      	beq.n	801d6ee <tcp_slowtmr+0x402>
 801d6e0:	463b      	mov	r3, r7
 801d6e2:	f240 5271 	movw	r2, #1393	; 0x571
 801d6e6:	4951      	ldr	r1, [pc, #324]	; (801d82c <tcp_slowtmr+0x540>)
 801d6e8:	484e      	ldr	r0, [pc, #312]	; (801d824 <tcp_slowtmr+0x538>)
 801d6ea:	f009 f833 	bl	8026754 <iprintf>
        tcp_active_pcbs = pcb->next;
 801d6ee:	68e3      	ldr	r3, [r4, #12]
 801d6f0:	4a4f      	ldr	r2, [pc, #316]	; (801d830 <tcp_slowtmr+0x544>)
 801d6f2:	6013      	str	r3, [r2, #0]
 801d6f4:	e67a      	b.n	801d3ec <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801d6f6:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801d6fa:	b936      	cbnz	r6, 801d70a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	f003 fb6d 	bl	8020ddc <tcp_zero_window_probe>
 801d702:	b140      	cbz	r0, 801d716 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d704:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801d706:	7d23      	ldrb	r3, [r4, #20]
 801d708:	e622      	b.n	801d350 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d70a:	4631      	mov	r1, r6
 801d70c:	4620      	mov	r0, r4
 801d70e:	f002 fe17 	bl	8020340 <tcp_split_unsent_seg>
 801d712:	2800      	cmp	r0, #0
 801d714:	d078      	beq.n	801d808 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d716:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801d71a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d71e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801d720:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d724:	f63f af6d 	bhi.w	801d602 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801d728:	3301      	adds	r3, #1
 801d72a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801d72e:	7d23      	ldrb	r3, [r4, #20]
 801d730:	e60e      	b.n	801d350 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d732:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d734:	2b00      	cmp	r3, #0
 801d736:	f43f af64 	beq.w	801d602 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801d73a:	7d23      	ldrb	r3, [r4, #20]
 801d73c:	2b02      	cmp	r3, #2
 801d73e:	d014      	beq.n	801d76a <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d740:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d744:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801d748:	2a0c      	cmp	r2, #12
 801d74a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801d74e:	bf28      	it	cs
 801d750:	220c      	movcs	r2, #12
 801d752:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801d756:	4937      	ldr	r1, [pc, #220]	; (801d834 <tcp_slowtmr+0x548>)
 801d758:	5c8a      	ldrb	r2, [r1, r2]
 801d75a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d75c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d760:	4293      	cmp	r3, r2
 801d762:	bfa8      	it	ge
 801d764:	4613      	movge	r3, r2
 801d766:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d76a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801d76e:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d770:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d774:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801d776:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801d778:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d77c:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801d780:	bf28      	it	cs
 801d782:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d784:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d786:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801d78a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d78e:	bf88      	it	hi
 801d790:	4613      	movhi	r3, r2
 801d792:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801d796:	2300      	movs	r3, #0
 801d798:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801d79a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801d79e:	f003 faab 	bl	8020cf8 <tcp_rexmit_rto_commit>
 801d7a2:	e72e      	b.n	801d602 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801d7a4:	463b      	mov	r3, r7
 801d7a6:	f240 526d 	movw	r2, #1389	; 0x56d
 801d7aa:	4923      	ldr	r1, [pc, #140]	; (801d838 <tcp_slowtmr+0x54c>)
 801d7ac:	481d      	ldr	r0, [pc, #116]	; (801d824 <tcp_slowtmr+0x538>)
 801d7ae:	f008 ffd1 	bl	8026754 <iprintf>
 801d7b2:	e618      	b.n	801d3e6 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801d7b4:	f8d9 3000 	ldr.w	r3, [r9]
 801d7b8:	42a3      	cmp	r3, r4
 801d7ba:	d006      	beq.n	801d7ca <tcp_slowtmr+0x4de>
 801d7bc:	4643      	mov	r3, r8
 801d7be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801d7c2:	491e      	ldr	r1, [pc, #120]	; (801d83c <tcp_slowtmr+0x550>)
 801d7c4:	4638      	mov	r0, r7
 801d7c6:	f008 ffc5 	bl	8026754 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7ca:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801d7cc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7d0:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801d7d2:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d7d6:	f47f af29 	bne.w	801d62c <tcp_slowtmr+0x340>
 801d7da:	4643      	mov	r3, r8
 801d7dc:	22d4      	movs	r2, #212	; 0xd4
 801d7de:	4910      	ldr	r1, [pc, #64]	; (801d820 <tcp_slowtmr+0x534>)
 801d7e0:	4638      	mov	r0, r7
 801d7e2:	f008 ffb7 	bl	8026754 <iprintf>
 801d7e6:	e721      	b.n	801d62c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d7e8:	463b      	mov	r3, r7
 801d7ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801d7ee:	4914      	ldr	r1, [pc, #80]	; (801d840 <tcp_slowtmr+0x554>)
 801d7f0:	480c      	ldr	r0, [pc, #48]	; (801d824 <tcp_slowtmr+0x538>)
 801d7f2:	f008 ffaf 	bl	8026754 <iprintf>
 801d7f6:	e686      	b.n	801d506 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801d7f8:	4643      	mov	r3, r8
 801d7fa:	f240 52af 	movw	r2, #1455	; 0x5af
 801d7fe:	4911      	ldr	r1, [pc, #68]	; (801d844 <tcp_slowtmr+0x558>)
 801d800:	4638      	mov	r0, r7
 801d802:	f008 ffa7 	bl	8026754 <iprintf>
 801d806:	e709      	b.n	801d61c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801d808:	4620      	mov	r0, r4
 801d80a:	f003 f88b 	bl	8020924 <tcp_output>
 801d80e:	2800      	cmp	r0, #0
 801d810:	d181      	bne.n	801d716 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801d812:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801d814:	7d23      	ldrb	r3, [r4, #20]
 801d816:	e59b      	b.n	801d350 <tcp_slowtmr+0x64>
 801d818:	000124f8 	.word	0x000124f8
 801d81c:	10624dd3 	.word	0x10624dd3
 801d820:	080456f4 	.word	0x080456f4
 801d824:	0802b44c 	.word	0x0802b44c
 801d828:	08045dac 	.word	0x08045dac
 801d82c:	08045abc 	.word	0x08045abc
 801d830:	2002e444 	.word	0x2002e444
 801d834:	08045d8c 	.word	0x08045d8c
 801d838:	08045a90 	.word	0x08045a90
 801d83c:	08045b40 	.word	0x08045b40
 801d840:	08045a58 	.word	0x08045a58
 801d844:	08045b18 	.word	0x08045b18

0801d848 <tcp_pcb_remove>:
{
 801d848:	b538      	push	{r3, r4, r5, lr}
 801d84a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d84c:	460c      	mov	r4, r1
 801d84e:	2900      	cmp	r1, #0
 801d850:	d04a      	beq.n	801d8e8 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d852:	2d00      	cmp	r5, #0
 801d854:	d051      	beq.n	801d8fa <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801d856:	682b      	ldr	r3, [r5, #0]
 801d858:	42a3      	cmp	r3, r4
 801d85a:	d032      	beq.n	801d8c2 <tcp_pcb_remove+0x7a>
 801d85c:	b12b      	cbz	r3, 801d86a <tcp_pcb_remove+0x22>
 801d85e:	68da      	ldr	r2, [r3, #12]
 801d860:	42a2      	cmp	r2, r4
 801d862:	d03e      	beq.n	801d8e2 <tcp_pcb_remove+0x9a>
 801d864:	4613      	mov	r3, r2
 801d866:	2b00      	cmp	r3, #0
 801d868:	d1f9      	bne.n	801d85e <tcp_pcb_remove+0x16>
 801d86a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801d86c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801d86e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801d870:	f7ff fcea 	bl	801d248 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801d874:	7d23      	ldrb	r3, [r4, #20]
 801d876:	2b0a      	cmp	r3, #10
 801d878:	d02d      	beq.n	801d8d6 <tcp_pcb_remove+0x8e>
 801d87a:	2b01      	cmp	r3, #1
 801d87c:	d01d      	beq.n	801d8ba <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801d87e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801d880:	07da      	lsls	r2, r3, #31
 801d882:	d421      	bmi.n	801d8c8 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d884:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d886:	b133      	cbz	r3, 801d896 <tcp_pcb_remove+0x4e>
 801d888:	4b20      	ldr	r3, [pc, #128]	; (801d90c <tcp_pcb_remove+0xc4>)
 801d88a:	f640 0293 	movw	r2, #2195	; 0x893
 801d88e:	4920      	ldr	r1, [pc, #128]	; (801d910 <tcp_pcb_remove+0xc8>)
 801d890:	4820      	ldr	r0, [pc, #128]	; (801d914 <tcp_pcb_remove+0xcc>)
 801d892:	f008 ff5f 	bl	8026754 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d896:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d898:	b133      	cbz	r3, 801d8a8 <tcp_pcb_remove+0x60>
 801d89a:	4b1c      	ldr	r3, [pc, #112]	; (801d90c <tcp_pcb_remove+0xc4>)
 801d89c:	f640 0294 	movw	r2, #2196	; 0x894
 801d8a0:	491d      	ldr	r1, [pc, #116]	; (801d918 <tcp_pcb_remove+0xd0>)
 801d8a2:	481c      	ldr	r0, [pc, #112]	; (801d914 <tcp_pcb_remove+0xcc>)
 801d8a4:	f008 ff56 	bl	8026754 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d8a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d8aa:	b133      	cbz	r3, 801d8ba <tcp_pcb_remove+0x72>
 801d8ac:	4b17      	ldr	r3, [pc, #92]	; (801d90c <tcp_pcb_remove+0xc4>)
 801d8ae:	f640 0296 	movw	r2, #2198	; 0x896
 801d8b2:	491a      	ldr	r1, [pc, #104]	; (801d91c <tcp_pcb_remove+0xd4>)
 801d8b4:	4817      	ldr	r0, [pc, #92]	; (801d914 <tcp_pcb_remove+0xcc>)
 801d8b6:	f008 ff4d 	bl	8026754 <iprintf>
  pcb->state = CLOSED;
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801d8be:	82e3      	strh	r3, [r4, #22]
}
 801d8c0:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801d8c2:	68e3      	ldr	r3, [r4, #12]
 801d8c4:	602b      	str	r3, [r5, #0]
 801d8c6:	e7d0      	b.n	801d86a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801d8c8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801d8cc:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801d8ce:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801d8d0:	f003 f828 	bl	8020924 <tcp_output>
  if (pcb->state != LISTEN) {
 801d8d4:	7d23      	ldrb	r3, [r4, #20]
 801d8d6:	2b01      	cmp	r3, #1
 801d8d8:	d0ef      	beq.n	801d8ba <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d8da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d1d3      	bne.n	801d888 <tcp_pcb_remove+0x40>
 801d8e0:	e7d9      	b.n	801d896 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801d8e2:	68e2      	ldr	r2, [r4, #12]
 801d8e4:	60da      	str	r2, [r3, #12]
 801d8e6:	e7c0      	b.n	801d86a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d8e8:	4b08      	ldr	r3, [pc, #32]	; (801d90c <tcp_pcb_remove+0xc4>)
 801d8ea:	f640 0283 	movw	r2, #2179	; 0x883
 801d8ee:	490c      	ldr	r1, [pc, #48]	; (801d920 <tcp_pcb_remove+0xd8>)
 801d8f0:	4808      	ldr	r0, [pc, #32]	; (801d914 <tcp_pcb_remove+0xcc>)
 801d8f2:	f008 ff2f 	bl	8026754 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d8f6:	2d00      	cmp	r5, #0
 801d8f8:	d1ad      	bne.n	801d856 <tcp_pcb_remove+0xe>
 801d8fa:	4b04      	ldr	r3, [pc, #16]	; (801d90c <tcp_pcb_remove+0xc4>)
 801d8fc:	f640 0284 	movw	r2, #2180	; 0x884
 801d900:	4908      	ldr	r1, [pc, #32]	; (801d924 <tcp_pcb_remove+0xdc>)
 801d902:	4804      	ldr	r0, [pc, #16]	; (801d914 <tcp_pcb_remove+0xcc>)
 801d904:	f008 ff26 	bl	8026754 <iprintf>
 801d908:	e7a5      	b.n	801d856 <tcp_pcb_remove+0xe>
 801d90a:	bf00      	nop
 801d90c:	080456b8 	.word	0x080456b8
 801d910:	08045ba4 	.word	0x08045ba4
 801d914:	0802b44c 	.word	0x0802b44c
 801d918:	08045bbc 	.word	0x08045bbc
 801d91c:	08045bd8 	.word	0x08045bd8
 801d920:	08045b68 	.word	0x08045b68
 801d924:	08045b84 	.word	0x08045b84

0801d928 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d928:	2800      	cmp	r0, #0
 801d92a:	f000 80ad 	beq.w	801da88 <tcp_abandon+0x160>
{
 801d92e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d932:	7d03      	ldrb	r3, [r0, #20]
{
 801d934:	b087      	sub	sp, #28
 801d936:	4605      	mov	r5, r0
 801d938:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	f000 808b 	beq.w	801da56 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801d940:	2b0a      	cmp	r3, #10
 801d942:	f000 8093 	beq.w	801da6c <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801d946:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801d948:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801d94c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801d950:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801d954:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801d956:	b96b      	cbnz	r3, 801d974 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801d958:	8aef      	ldrh	r7, [r5, #22]
 801d95a:	2f00      	cmp	r7, #0
 801d95c:	d052      	beq.n	801da04 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d95e:	4a51      	ldr	r2, [pc, #324]	; (801daa4 <tcp_abandon+0x17c>)
 801d960:	6813      	ldr	r3, [r2, #0]
 801d962:	42ab      	cmp	r3, r5
 801d964:	d074      	beq.n	801da50 <tcp_abandon+0x128>
 801d966:	2b00      	cmp	r3, #0
 801d968:	d050      	beq.n	801da0c <tcp_abandon+0xe4>
 801d96a:	68da      	ldr	r2, [r3, #12]
 801d96c:	42aa      	cmp	r2, r5
 801d96e:	d04b      	beq.n	801da08 <tcp_abandon+0xe0>
 801d970:	4613      	mov	r3, r2
 801d972:	e7f8      	b.n	801d966 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d974:	4629      	mov	r1, r5
 801d976:	484c      	ldr	r0, [pc, #304]	; (801daa8 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801d978:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d97a:	f7ff ff65 	bl	801d848 <tcp_pcb_remove>
 801d97e:	4b4b      	ldr	r3, [pc, #300]	; (801daac <tcp_abandon+0x184>)
 801d980:	2201      	movs	r2, #1
 801d982:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d984:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801d986:	b164      	cbz	r4, 801d9a2 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801d988:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d98a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d98c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d990:	b108      	cbz	r0, 801d996 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801d992:	f7fe fe15 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d996:	4651      	mov	r1, sl
 801d998:	2004      	movs	r0, #4
 801d99a:	f7fe f8f9 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d99e:	2c00      	cmp	r4, #0
 801d9a0:	d1f2      	bne.n	801d988 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801d9a2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801d9a4:	b164      	cbz	r4, 801d9c0 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801d9a6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d9a8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d9aa:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d9ae:	b108      	cbz	r0, 801d9b4 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801d9b0:	f7fe fe06 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d9b4:	4651      	mov	r1, sl
 801d9b6:	2004      	movs	r0, #4
 801d9b8:	f7fe f8ea 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d9bc:	2c00      	cmp	r4, #0
 801d9be:	d1f2      	bne.n	801d9a6 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801d9c0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801d9c2:	b164      	cbz	r4, 801d9de <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801d9c4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801d9c6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801d9c8:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d9cc:	b108      	cbz	r0, 801d9d2 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801d9ce:	f7fe fdf7 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801d9d2:	4651      	mov	r1, sl
 801d9d4:	2004      	movs	r0, #4
 801d9d6:	f7fe f8db 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801d9da:	2c00      	cmp	r4, #0
 801d9dc:	d1f2      	bne.n	801d9c4 <tcp_abandon+0x9c>
    if (send_rst) {
 801d9de:	b9ce      	cbnz	r6, 801da14 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801d9e0:	7d2b      	ldrb	r3, [r5, #20]
 801d9e2:	2b01      	cmp	r3, #1
 801d9e4:	d024      	beq.n	801da30 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801d9e6:	4629      	mov	r1, r5
 801d9e8:	2002      	movs	r0, #2
 801d9ea:	f7fe f8d1 	bl	801bb90 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d9ee:	f1b8 0f00 	cmp.w	r8, #0
 801d9f2:	d02a      	beq.n	801da4a <tcp_abandon+0x122>
 801d9f4:	f06f 010c 	mvn.w	r1, #12
 801d9f8:	4648      	mov	r0, r9
 801d9fa:	4643      	mov	r3, r8
}
 801d9fc:	b007      	add	sp, #28
 801d9fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801da02:	4718      	bx	r3
    int send_rst = 0;
 801da04:	461e      	mov	r6, r3
 801da06:	e7bd      	b.n	801d984 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da08:	68ea      	ldr	r2, [r5, #12]
 801da0a:	60da      	str	r2, [r3, #12]
 801da0c:	2700      	movs	r7, #0
    int send_rst = 0;
 801da0e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da10:	60ef      	str	r7, [r5, #12]
 801da12:	e7b7      	b.n	801d984 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801da14:	9701      	str	r7, [sp, #4]
 801da16:	465a      	mov	r2, fp
 801da18:	8b2b      	ldrh	r3, [r5, #24]
 801da1a:	4628      	mov	r0, r5
 801da1c:	9905      	ldr	r1, [sp, #20]
 801da1e:	9302      	str	r3, [sp, #8]
 801da20:	1d2b      	adds	r3, r5, #4
 801da22:	9300      	str	r3, [sp, #0]
 801da24:	462b      	mov	r3, r5
 801da26:	f002 ff03 	bl	8020830 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da2a:	7d2b      	ldrb	r3, [r5, #20]
 801da2c:	2b01      	cmp	r3, #1
 801da2e:	d1da      	bne.n	801d9e6 <tcp_abandon+0xbe>
 801da30:	491f      	ldr	r1, [pc, #124]	; (801dab0 <tcp_abandon+0x188>)
 801da32:	22d4      	movs	r2, #212	; 0xd4
 801da34:	4b1f      	ldr	r3, [pc, #124]	; (801dab4 <tcp_abandon+0x18c>)
 801da36:	4820      	ldr	r0, [pc, #128]	; (801dab8 <tcp_abandon+0x190>)
 801da38:	f008 fe8c 	bl	8026754 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801da3c:	4629      	mov	r1, r5
 801da3e:	2002      	movs	r0, #2
 801da40:	f7fe f8a6 	bl	801bb90 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801da44:	f1b8 0f00 	cmp.w	r8, #0
 801da48:	d1d4      	bne.n	801d9f4 <tcp_abandon+0xcc>
}
 801da4a:	b007      	add	sp, #28
 801da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801da50:	68eb      	ldr	r3, [r5, #12]
 801da52:	6013      	str	r3, [r2, #0]
 801da54:	e7da      	b.n	801da0c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801da56:	4b17      	ldr	r3, [pc, #92]	; (801dab4 <tcp_abandon+0x18c>)
 801da58:	f44f 7210 	mov.w	r2, #576	; 0x240
 801da5c:	4917      	ldr	r1, [pc, #92]	; (801dabc <tcp_abandon+0x194>)
 801da5e:	4816      	ldr	r0, [pc, #88]	; (801dab8 <tcp_abandon+0x190>)
 801da60:	f008 fe78 	bl	8026754 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801da64:	7d2b      	ldrb	r3, [r5, #20]
 801da66:	2b0a      	cmp	r3, #10
 801da68:	f47f af6d 	bne.w	801d946 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801da6c:	4629      	mov	r1, r5
 801da6e:	4814      	ldr	r0, [pc, #80]	; (801dac0 <tcp_abandon+0x198>)
 801da70:	f7ff feea 	bl	801d848 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da74:	7d2b      	ldrb	r3, [r5, #20]
 801da76:	2b01      	cmp	r3, #1
 801da78:	d00d      	beq.n	801da96 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801da7a:	4629      	mov	r1, r5
 801da7c:	2002      	movs	r0, #2
}
 801da7e:	b007      	add	sp, #28
 801da80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801da84:	f7fe b884 	b.w	801bb90 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801da88:	4b0a      	ldr	r3, [pc, #40]	; (801dab4 <tcp_abandon+0x18c>)
 801da8a:	f240 223d 	movw	r2, #573	; 0x23d
 801da8e:	490d      	ldr	r1, [pc, #52]	; (801dac4 <tcp_abandon+0x19c>)
 801da90:	4809      	ldr	r0, [pc, #36]	; (801dab8 <tcp_abandon+0x190>)
 801da92:	f008 be5f 	b.w	8026754 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801da96:	4b07      	ldr	r3, [pc, #28]	; (801dab4 <tcp_abandon+0x18c>)
 801da98:	22d4      	movs	r2, #212	; 0xd4
 801da9a:	4905      	ldr	r1, [pc, #20]	; (801dab0 <tcp_abandon+0x188>)
 801da9c:	4806      	ldr	r0, [pc, #24]	; (801dab8 <tcp_abandon+0x190>)
 801da9e:	f008 fe59 	bl	8026754 <iprintf>
 801daa2:	e7ea      	b.n	801da7a <tcp_abandon+0x152>
 801daa4:	2002e44c 	.word	0x2002e44c
 801daa8:	2002e444 	.word	0x2002e444
 801daac:	2002e448 	.word	0x2002e448
 801dab0:	080456f4 	.word	0x080456f4
 801dab4:	080456b8 	.word	0x080456b8
 801dab8:	0802b44c 	.word	0x0802b44c
 801dabc:	08045c0c 	.word	0x08045c0c
 801dac0:	2002e45c 	.word	0x2002e45c
 801dac4:	08045bf0 	.word	0x08045bf0

0801dac8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801dac8:	2101      	movs	r1, #1
 801daca:	f7ff bf2d 	b.w	801d928 <tcp_abandon>
 801dace:	bf00      	nop

0801dad0 <tcp_accept_null>:
{
 801dad0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801dad2:	460c      	mov	r4, r1
 801dad4:	b131      	cbz	r1, 801dae4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801dad6:	4620      	mov	r0, r4
 801dad8:	2101      	movs	r1, #1
 801dada:	f7ff ff25 	bl	801d928 <tcp_abandon>
}
 801dade:	f06f 000c 	mvn.w	r0, #12
 801dae2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801dae4:	4b06      	ldr	r3, [pc, #24]	; (801db00 <tcp_accept_null+0x30>)
 801dae6:	f240 320f 	movw	r2, #783	; 0x30f
 801daea:	4906      	ldr	r1, [pc, #24]	; (801db04 <tcp_accept_null+0x34>)
 801daec:	4806      	ldr	r0, [pc, #24]	; (801db08 <tcp_accept_null+0x38>)
 801daee:	f008 fe31 	bl	8026754 <iprintf>
  tcp_abandon(pcb, 1);
 801daf2:	4620      	mov	r0, r4
 801daf4:	2101      	movs	r1, #1
 801daf6:	f7ff ff17 	bl	801d928 <tcp_abandon>
}
 801dafa:	f06f 000c 	mvn.w	r0, #12
 801dafe:	bd10      	pop	{r4, pc}
 801db00:	080456b8 	.word	0x080456b8
 801db04:	08045c40 	.word	0x08045c40
 801db08:	0802b44c 	.word	0x0802b44c

0801db0c <tcp_netif_ip_addr_changed_pcblist>:
{
 801db0c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801db0e:	4605      	mov	r5, r0
{
 801db10:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801db12:	b178      	cbz	r0, 801db34 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801db14:	b134      	cbz	r4, 801db24 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801db16:	6822      	ldr	r2, [r4, #0]
 801db18:	682b      	ldr	r3, [r5, #0]
 801db1a:	429a      	cmp	r2, r3
 801db1c:	d003      	beq.n	801db26 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801db1e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801db20:	2c00      	cmp	r4, #0
 801db22:	d1f8      	bne.n	801db16 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801db24:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801db26:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801db28:	4620      	mov	r0, r4
 801db2a:	2101      	movs	r1, #1
      pcb = next;
 801db2c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801db2e:	f7ff fefb 	bl	801d928 <tcp_abandon>
      pcb = next;
 801db32:	e7ef      	b.n	801db14 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801db34:	4b03      	ldr	r3, [pc, #12]	; (801db44 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801db36:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801db3a:	4903      	ldr	r1, [pc, #12]	; (801db48 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801db3c:	4803      	ldr	r0, [pc, #12]	; (801db4c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801db3e:	f008 fe09 	bl	8026754 <iprintf>
 801db42:	e7e7      	b.n	801db14 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801db44:	080456b8 	.word	0x080456b8
 801db48:	08045c60 	.word	0x08045c60
 801db4c:	0802b44c 	.word	0x0802b44c

0801db50 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db50:	4b0f      	ldr	r3, [pc, #60]	; (801db90 <tcp_kill_state+0x40>)
 801db52:	6819      	ldr	r1, [r3, #0]
 801db54:	b1d1      	cbz	r1, 801db8c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db56:	4b0f      	ldr	r3, [pc, #60]	; (801db94 <tcp_kill_state+0x44>)
  inactivity = 0;
 801db58:	2200      	movs	r2, #0
{
 801db5a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db5c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801db5e:	4614      	mov	r4, r2
 801db60:	e001      	b.n	801db66 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db62:	68c9      	ldr	r1, [r1, #12]
 801db64:	b159      	cbz	r1, 801db7e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801db66:	7d0b      	ldrb	r3, [r1, #20]
 801db68:	4283      	cmp	r3, r0
 801db6a:	d1fa      	bne.n	801db62 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db6c:	6a0b      	ldr	r3, [r1, #32]
 801db6e:	1aeb      	subs	r3, r5, r3
 801db70:	4293      	cmp	r3, r2
 801db72:	d3f6      	bcc.n	801db62 <tcp_kill_state+0x12>
 801db74:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db76:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801db78:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db7a:	2900      	cmp	r1, #0
 801db7c:	d1f3      	bne.n	801db66 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801db7e:	b11c      	cbz	r4, 801db88 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801db80:	4620      	mov	r0, r4
}
 801db82:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801db84:	f7ff bed0 	b.w	801d928 <tcp_abandon>
}
 801db88:	bc30      	pop	{r4, r5}
 801db8a:	4770      	bx	lr
 801db8c:	4770      	bx	lr
 801db8e:	bf00      	nop
 801db90:	2002e444 	.word	0x2002e444
 801db94:	2002e454 	.word	0x2002e454

0801db98 <tcp_alloc>:
{
 801db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801db9a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801db9e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dba0:	494f      	ldr	r1, [pc, #316]	; (801dce0 <tcp_alloc+0x148>)
 801dba2:	2002      	movs	r0, #2
 801dba4:	f7fd ffbe 	bl	801bb24 <memp_malloc_fn>
  if (pcb == NULL) {
 801dba8:	4603      	mov	r3, r0
 801dbaa:	b320      	cbz	r0, 801dbf6 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801dbac:	229c      	movs	r2, #156	; 0x9c
 801dbae:	2100      	movs	r1, #0
 801dbb0:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801dbb2:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801dbb6:	f007 fe2f 	bl	8025818 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801dbba:	494a      	ldr	r1, [pc, #296]	; (801dce4 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801dbbc:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801dbbe:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801dbc0:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801dbc2:	4849      	ldr	r0, [pc, #292]	; (801dce8 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801dbc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801dbc8:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801dbca:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801dbcc:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801dbce:	4a47      	ldr	r2, [pc, #284]	; (801dcec <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801dbd0:	4947      	ldr	r1, [pc, #284]	; (801dcf0 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801dbd2:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801dbd6:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801dbd8:	4c46      	ldr	r4, [pc, #280]	; (801dcf4 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801dbda:	4847      	ldr	r0, [pc, #284]	; (801dcf8 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801dbdc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801dbe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801dbe4:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801dbe6:	4945      	ldr	r1, [pc, #276]	; (801dcfc <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801dbe8:	6498      	str	r0, [r3, #72]	; 0x48
}
 801dbea:	4618      	mov	r0, r3
    pcb->prio = prio;
 801dbec:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801dbee:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801dbf0:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801dbf2:	72da      	strb	r2, [r3, #11]
}
 801dbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801dbf6:	4e42      	ldr	r6, [pc, #264]	; (801dd00 <tcp_alloc+0x168>)
 801dbf8:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801dbfa:	b15c      	cbz	r4, 801dc14 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801dc00:	8b43      	ldrh	r3, [r0, #26]
 801dc02:	0719      	lsls	r1, r3, #28
 801dc04:	d5f9      	bpl.n	801dbfa <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dc06:	f023 0308 	bic.w	r3, r3, #8
 801dc0a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801dc0c:	f7fe ffd8 	bl	801cbc0 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801dc10:	2c00      	cmp	r4, #0
 801dc12:	d1f3      	bne.n	801dbfc <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc14:	4b3b      	ldr	r3, [pc, #236]	; (801dd04 <tcp_alloc+0x16c>)
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	b193      	cbz	r3, 801dc40 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc1a:	4a33      	ldr	r2, [pc, #204]	; (801dce8 <tcp_alloc+0x150>)
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	6a19      	ldr	r1, [r3, #32]
 801dc20:	6814      	ldr	r4, [r2, #0]
 801dc22:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc24:	68db      	ldr	r3, [r3, #12]
 801dc26:	b143      	cbz	r3, 801dc3a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc28:	6a1a      	ldr	r2, [r3, #32]
 801dc2a:	1aa2      	subs	r2, r4, r2
 801dc2c:	428a      	cmp	r2, r1
 801dc2e:	d3f9      	bcc.n	801dc24 <tcp_alloc+0x8c>
 801dc30:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc32:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801dc34:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d1f6      	bne.n	801dc28 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801dc3a:	2101      	movs	r1, #1
 801dc3c:	f7ff fe74 	bl	801d928 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc40:	f240 7239 	movw	r2, #1849	; 0x739
 801dc44:	4926      	ldr	r1, [pc, #152]	; (801dce0 <tcp_alloc+0x148>)
 801dc46:	2002      	movs	r0, #2
 801dc48:	f7fd ff6c 	bl	801bb24 <memp_malloc_fn>
    if (pcb == NULL) {
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	2800      	cmp	r0, #0
 801dc50:	d1ac      	bne.n	801dbac <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801dc52:	2009      	movs	r0, #9
 801dc54:	f7ff ff7c 	bl	801db50 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc58:	f240 723f 	movw	r2, #1855	; 0x73f
 801dc5c:	4920      	ldr	r1, [pc, #128]	; (801dce0 <tcp_alloc+0x148>)
 801dc5e:	2002      	movs	r0, #2
 801dc60:	f7fd ff60 	bl	801bb24 <memp_malloc_fn>
      if (pcb == NULL) {
 801dc64:	4603      	mov	r3, r0
 801dc66:	2800      	cmp	r0, #0
 801dc68:	d1a0      	bne.n	801dbac <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801dc6a:	2008      	movs	r0, #8
 801dc6c:	f7ff ff70 	bl	801db50 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dc70:	f240 7245 	movw	r2, #1861	; 0x745
 801dc74:	491a      	ldr	r1, [pc, #104]	; (801dce0 <tcp_alloc+0x148>)
 801dc76:	2002      	movs	r0, #2
 801dc78:	f7fd ff54 	bl	801bb24 <memp_malloc_fn>
        if (pcb == NULL) {
 801dc7c:	4603      	mov	r3, r0
 801dc7e:	2800      	cmp	r0, #0
 801dc80:	d194      	bne.n	801dbac <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dc82:	062a      	lsls	r2, r5, #24
 801dc84:	d42a      	bmi.n	801dcdc <tcp_alloc+0x144>
  if (mprio == 0) {
 801dc86:	b1ed      	cbz	r5, 801dcc4 <tcp_alloc+0x12c>
 801dc88:	462a      	mov	r2, r5
  mprio--;
 801dc8a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc8c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801dc8e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc90:	b1c2      	cbz	r2, 801dcc4 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc92:	4815      	ldr	r0, [pc, #84]	; (801dce8 <tcp_alloc+0x150>)
  inactivity = 0;
 801dc94:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dc96:	6807      	ldr	r7, [r0, #0]
 801dc98:	e005      	b.n	801dca6 <tcp_alloc+0x10e>
 801dc9a:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801dc9c:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801dc9e:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801dca0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dca2:	68d2      	ldr	r2, [r2, #12]
 801dca4:	b14a      	cbz	r2, 801dcba <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801dca6:	7d50      	ldrb	r0, [r2, #21]
 801dca8:	4288      	cmp	r0, r1
 801dcaa:	d3f6      	bcc.n	801dc9a <tcp_alloc+0x102>
 801dcac:	d1f9      	bne.n	801dca2 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801dcae:	6a14      	ldr	r4, [r2, #32]
 801dcb0:	eba7 0e04 	sub.w	lr, r7, r4
 801dcb4:	45b6      	cmp	lr, r6
 801dcb6:	d3f4      	bcc.n	801dca2 <tcp_alloc+0x10a>
 801dcb8:	e7f0      	b.n	801dc9c <tcp_alloc+0x104>
  if (inactive != NULL) {
 801dcba:	b11b      	cbz	r3, 801dcc4 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801dcbc:	2101      	movs	r1, #1
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	f7ff fe32 	bl	801d928 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801dcc4:	f240 724b 	movw	r2, #1867	; 0x74b
 801dcc8:	4905      	ldr	r1, [pc, #20]	; (801dce0 <tcp_alloc+0x148>)
 801dcca:	2002      	movs	r0, #2
 801dccc:	f7fd ff2a 	bl	801bb24 <memp_malloc_fn>
  if (pcb != NULL) {
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	2800      	cmp	r0, #0
 801dcd4:	f47f af6a 	bne.w	801dbac <tcp_alloc+0x14>
}
 801dcd8:	4618      	mov	r0, r3
 801dcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dcdc:	227f      	movs	r2, #127	; 0x7f
 801dcde:	e7d4      	b.n	801dc8a <tcp_alloc+0xf2>
 801dce0:	080456b8 	.word	0x080456b8
 801dce4:	2002e459 	.word	0x2002e459
 801dce8:	2002e454 	.word	0x2002e454
 801dcec:	006ddd00 	.word	0x006ddd00
 801dcf0:	0801def5 	.word	0x0801def5
 801dcf4:	0218ffff 	.word	0x0218ffff
 801dcf8:	04300001 	.word	0x04300001
 801dcfc:	08600860 	.word	0x08600860
 801dd00:	2002e444 	.word	0x2002e444
 801dd04:	2002e45c 	.word	0x2002e45c

0801dd08 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801dd08:	2040      	movs	r0, #64	; 0x40
 801dd0a:	f7ff bf45 	b.w	801db98 <tcp_alloc>
 801dd0e:	bf00      	nop

0801dd10 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801dd10:	2040      	movs	r0, #64	; 0x40
 801dd12:	f7ff bf41 	b.w	801db98 <tcp_alloc>
 801dd16:	bf00      	nop

0801dd18 <tcp_close_shutdown>:
{
 801dd18:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dd1a:	4604      	mov	r4, r0
{
 801dd1c:	b085      	sub	sp, #20
 801dd1e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801dd20:	2800      	cmp	r0, #0
 801dd22:	d06a      	beq.n	801ddfa <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801dd24:	7d23      	ldrb	r3, [r4, #20]
 801dd26:	b11d      	cbz	r5, 801dd30 <tcp_close_shutdown+0x18>
 801dd28:	2b04      	cmp	r3, #4
 801dd2a:	d00c      	beq.n	801dd46 <tcp_close_shutdown+0x2e>
 801dd2c:	2b07      	cmp	r3, #7
 801dd2e:	d00a      	beq.n	801dd46 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801dd30:	2b01      	cmp	r3, #1
 801dd32:	d06a      	beq.n	801de0a <tcp_close_shutdown+0xf2>
 801dd34:	2b02      	cmp	r3, #2
 801dd36:	d030      	beq.n	801dd9a <tcp_close_shutdown+0x82>
 801dd38:	b333      	cbz	r3, 801dd88 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801dd3a:	4620      	mov	r0, r4
}
 801dd3c:	b005      	add	sp, #20
 801dd3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801dd42:	f7fe bf3d 	b.w	801cbc0 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801dd46:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dd48:	2a00      	cmp	r2, #0
 801dd4a:	d037      	beq.n	801ddbc <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801dd4c:	8b63      	ldrh	r3, [r4, #26]
 801dd4e:	06db      	lsls	r3, r3, #27
 801dd50:	f140 8084 	bpl.w	801de5c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dd54:	8b21      	ldrh	r1, [r4, #24]
 801dd56:	1d20      	adds	r0, r4, #4
 801dd58:	8ae2      	ldrh	r2, [r4, #22]
 801dd5a:	4623      	mov	r3, r4
 801dd5c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801dd60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801dd62:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801dd64:	9000      	str	r0, [sp, #0]
 801dd66:	4620      	mov	r0, r4
 801dd68:	f002 fd62 	bl	8020830 <tcp_rst>
      tcp_pcb_purge(pcb);
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	f7ff fa6b 	bl	801d248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801dd72:	4a45      	ldr	r2, [pc, #276]	; (801de88 <tcp_close_shutdown+0x170>)
 801dd74:	6813      	ldr	r3, [r2, #0]
 801dd76:	42a3      	cmp	r3, r4
 801dd78:	d030      	beq.n	801dddc <tcp_close_shutdown+0xc4>
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d030      	beq.n	801dde0 <tcp_close_shutdown+0xc8>
 801dd7e:	68da      	ldr	r2, [r3, #12]
 801dd80:	42a2      	cmp	r2, r4
 801dd82:	d068      	beq.n	801de56 <tcp_close_shutdown+0x13e>
 801dd84:	4613      	mov	r3, r2
 801dd86:	e7f8      	b.n	801dd7a <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801dd88:	8ae3      	ldrh	r3, [r4, #22]
 801dd8a:	b9e3      	cbnz	r3, 801ddc6 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801dd8c:	4621      	mov	r1, r4
 801dd8e:	2002      	movs	r0, #2
 801dd90:	f7fd fefe 	bl	801bb90 <memp_free>
}
 801dd94:	2000      	movs	r0, #0
 801dd96:	b005      	add	sp, #20
 801dd98:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dd9a:	4621      	mov	r1, r4
 801dd9c:	483a      	ldr	r0, [pc, #232]	; (801de88 <tcp_close_shutdown+0x170>)
 801dd9e:	f7ff fd53 	bl	801d848 <tcp_pcb_remove>
 801dda2:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dda4:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801dda6:	4a39      	ldr	r2, [pc, #228]	; (801de8c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801dda8:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ddaa:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ddac:	d1ee      	bne.n	801dd8c <tcp_close_shutdown+0x74>
 801ddae:	4b38      	ldr	r3, [pc, #224]	; (801de90 <tcp_close_shutdown+0x178>)
 801ddb0:	22d4      	movs	r2, #212	; 0xd4
 801ddb2:	4938      	ldr	r1, [pc, #224]	; (801de94 <tcp_close_shutdown+0x17c>)
 801ddb4:	4838      	ldr	r0, [pc, #224]	; (801de98 <tcp_close_shutdown+0x180>)
 801ddb6:	f008 fccd 	bl	8026754 <iprintf>
 801ddba:	e7e7      	b.n	801dd8c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ddbc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ddbe:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801ddc2:	d0b5      	beq.n	801dd30 <tcp_close_shutdown+0x18>
 801ddc4:	e7c2      	b.n	801dd4c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ddc6:	4a35      	ldr	r2, [pc, #212]	; (801de9c <tcp_close_shutdown+0x184>)
 801ddc8:	6813      	ldr	r3, [r2, #0]
 801ddca:	42a3      	cmp	r3, r4
 801ddcc:	d051      	beq.n	801de72 <tcp_close_shutdown+0x15a>
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d03e      	beq.n	801de50 <tcp_close_shutdown+0x138>
 801ddd2:	68da      	ldr	r2, [r3, #12]
 801ddd4:	42a2      	cmp	r2, r4
 801ddd6:	d039      	beq.n	801de4c <tcp_close_shutdown+0x134>
 801ddd8:	4613      	mov	r3, r2
 801ddda:	e7f8      	b.n	801ddce <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801dddc:	68e3      	ldr	r3, [r4, #12]
 801ddde:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801dde0:	4b2f      	ldr	r3, [pc, #188]	; (801dea0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801dde2:	2000      	movs	r0, #0
 801dde4:	4a29      	ldr	r2, [pc, #164]	; (801de8c <tcp_close_shutdown+0x174>)
 801dde6:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801dde8:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801ddea:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801ddec:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801ddee:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ddf0:	d03c      	beq.n	801de6c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ddf2:	7d23      	ldrb	r3, [r4, #20]
 801ddf4:	2b01      	cmp	r3, #1
 801ddf6:	d1c9      	bne.n	801dd8c <tcp_close_shutdown+0x74>
 801ddf8:	e7d9      	b.n	801ddae <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ddfa:	4b25      	ldr	r3, [pc, #148]	; (801de90 <tcp_close_shutdown+0x178>)
 801ddfc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801de00:	4928      	ldr	r1, [pc, #160]	; (801dea4 <tcp_close_shutdown+0x18c>)
 801de02:	4825      	ldr	r0, [pc, #148]	; (801de98 <tcp_close_shutdown+0x180>)
 801de04:	f008 fca6 	bl	8026754 <iprintf>
 801de08:	e78c      	b.n	801dd24 <tcp_close_shutdown+0xc>
 801de0a:	4927      	ldr	r1, [pc, #156]	; (801dea8 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801de0c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801de0e:	4b23      	ldr	r3, [pc, #140]	; (801de9c <tcp_close_shutdown+0x184>)
 801de10:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801de14:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801de16:	b133      	cbz	r3, 801de26 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801de18:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801de1a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801de1c:	bf08      	it	eq
 801de1e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801de20:	68db      	ldr	r3, [r3, #12]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d1f8      	bne.n	801de18 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801de26:	42a9      	cmp	r1, r5
 801de28:	d002      	beq.n	801de30 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801de2a:	f851 3b04 	ldr.w	r3, [r1], #4
 801de2e:	e7f1      	b.n	801de14 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801de30:	4621      	mov	r1, r4
 801de32:	481e      	ldr	r0, [pc, #120]	; (801deac <tcp_close_shutdown+0x194>)
 801de34:	f7ff fd08 	bl	801d848 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801de38:	7d23      	ldrb	r3, [r4, #20]
 801de3a:	2b01      	cmp	r3, #1
 801de3c:	d01c      	beq.n	801de78 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801de3e:	4621      	mov	r1, r4
 801de40:	2003      	movs	r0, #3
 801de42:	f7fd fea5 	bl	801bb90 <memp_free>
}
 801de46:	2000      	movs	r0, #0
 801de48:	b005      	add	sp, #20
 801de4a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801de4c:	68e2      	ldr	r2, [r4, #12]
 801de4e:	60da      	str	r2, [r3, #12]
 801de50:	2300      	movs	r3, #0
 801de52:	60e3      	str	r3, [r4, #12]
 801de54:	e79a      	b.n	801dd8c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801de56:	68e2      	ldr	r2, [r4, #12]
 801de58:	60da      	str	r2, [r3, #12]
 801de5a:	e7c1      	b.n	801dde0 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801de5c:	4b0c      	ldr	r3, [pc, #48]	; (801de90 <tcp_close_shutdown+0x178>)
 801de5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801de62:	4913      	ldr	r1, [pc, #76]	; (801deb0 <tcp_close_shutdown+0x198>)
 801de64:	480c      	ldr	r0, [pc, #48]	; (801de98 <tcp_close_shutdown+0x180>)
 801de66:	f008 fc75 	bl	8026754 <iprintf>
 801de6a:	e773      	b.n	801dd54 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801de6c:	f001 fd9e 	bl	801f9ac <tcp_trigger_input_pcb_close>
 801de70:	e790      	b.n	801dd94 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801de72:	68e3      	ldr	r3, [r4, #12]
 801de74:	6013      	str	r3, [r2, #0]
 801de76:	e7eb      	b.n	801de50 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801de78:	4b05      	ldr	r3, [pc, #20]	; (801de90 <tcp_close_shutdown+0x178>)
 801de7a:	22df      	movs	r2, #223	; 0xdf
 801de7c:	490d      	ldr	r1, [pc, #52]	; (801deb4 <tcp_close_shutdown+0x19c>)
 801de7e:	4806      	ldr	r0, [pc, #24]	; (801de98 <tcp_close_shutdown+0x180>)
 801de80:	f008 fc68 	bl	8026754 <iprintf>
 801de84:	e7db      	b.n	801de3e <tcp_close_shutdown+0x126>
 801de86:	bf00      	nop
 801de88:	2002e444 	.word	0x2002e444
 801de8c:	2002e448 	.word	0x2002e448
 801de90:	080456b8 	.word	0x080456b8
 801de94:	080456f4 	.word	0x080456f4
 801de98:	0802b44c 	.word	0x0802b44c
 801de9c:	2002e44c 	.word	0x2002e44c
 801dea0:	2002e488 	.word	0x2002e488
 801dea4:	08045c94 	.word	0x08045c94
 801dea8:	08045da4 	.word	0x08045da4
 801deac:	2002e450 	.word	0x2002e450
 801deb0:	08045cb4 	.word	0x08045cb4
 801deb4:	08045cd0 	.word	0x08045cd0

0801deb8 <tcp_close>:
{
 801deb8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801deba:	b158      	cbz	r0, 801ded4 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801debc:	7d03      	ldrb	r3, [r0, #20]
 801debe:	2b01      	cmp	r3, #1
 801dec0:	d003      	beq.n	801deca <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801dec2:	8b43      	ldrh	r3, [r0, #26]
 801dec4:	f043 0310 	orr.w	r3, r3, #16
 801dec8:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801deca:	2101      	movs	r1, #1
}
 801decc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801ded0:	f7ff bf22 	b.w	801dd18 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801ded4:	4b04      	ldr	r3, [pc, #16]	; (801dee8 <tcp_close+0x30>)
 801ded6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801deda:	4904      	ldr	r1, [pc, #16]	; (801deec <tcp_close+0x34>)
 801dedc:	4804      	ldr	r0, [pc, #16]	; (801def0 <tcp_close+0x38>)
 801dede:	f008 fc39 	bl	8026754 <iprintf>
}
 801dee2:	f06f 000f 	mvn.w	r0, #15
 801dee6:	bd08      	pop	{r3, pc}
 801dee8:	080456b8 	.word	0x080456b8
 801deec:	08045cec 	.word	0x08045cec
 801def0:	0802b44c 	.word	0x0802b44c

0801def4 <tcp_recv_null>:
{
 801def4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801def6:	b1c9      	cbz	r1, 801df2c <tcp_recv_null+0x38>
  if (p != NULL) {
 801def8:	4614      	mov	r4, r2
 801defa:	4608      	mov	r0, r1
 801defc:	b13a      	cbz	r2, 801df0e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801defe:	8911      	ldrh	r1, [r2, #8]
 801df00:	f7fe ffde 	bl	801cec0 <tcp_recved>
    pbuf_free(p);
 801df04:	4620      	mov	r0, r4
 801df06:	f7fe fb5b 	bl	801c5c0 <pbuf_free>
  return ERR_OK;
 801df0a:	2000      	movs	r0, #0
}
 801df0c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801df0e:	b10b      	cbz	r3, 801df14 <tcp_recv_null+0x20>
  return ERR_OK;
 801df10:	4610      	mov	r0, r2
}
 801df12:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801df14:	7d0b      	ldrb	r3, [r1, #20]
 801df16:	2b01      	cmp	r3, #1
 801df18:	d003      	beq.n	801df22 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801df1a:	8b4b      	ldrh	r3, [r1, #26]
 801df1c:	f043 0310 	orr.w	r3, r3, #16
 801df20:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801df22:	2101      	movs	r1, #1
}
 801df24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801df28:	f7ff bef6 	b.w	801dd18 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801df2c:	4b04      	ldr	r3, [pc, #16]	; (801df40 <tcp_recv_null+0x4c>)
 801df2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801df32:	4904      	ldr	r1, [pc, #16]	; (801df44 <tcp_recv_null+0x50>)
 801df34:	4804      	ldr	r0, [pc, #16]	; (801df48 <tcp_recv_null+0x54>)
 801df36:	f008 fc0d 	bl	8026754 <iprintf>
 801df3a:	f06f 000f 	mvn.w	r0, #15
}
 801df3e:	bd10      	pop	{r4, pc}
 801df40:	080456b8 	.word	0x080456b8
 801df44:	08045d04 	.word	0x08045d04
 801df48:	0802b44c 	.word	0x0802b44c

0801df4c <tcp_process_refused_data>:
{
 801df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801df4e:	b378      	cbz	r0, 801dfb0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801df50:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801df52:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801df54:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801df58:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801df5a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801df5c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801df5e:	b156      	cbz	r6, 801df76 <tcp_process_refused_data+0x2a>
 801df60:	4601      	mov	r1, r0
 801df62:	462a      	mov	r2, r5
 801df64:	6900      	ldr	r0, [r0, #16]
 801df66:	47b0      	blx	r6
    if (err == ERR_OK) {
 801df68:	b158      	cbz	r0, 801df82 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801df6a:	300d      	adds	r0, #13
 801df6c:	d01d      	beq.n	801dfaa <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801df6e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801df72:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801df74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801df76:	8929      	ldrh	r1, [r5, #8]
 801df78:	f7fe ffa2 	bl	801cec0 <tcp_recved>
    pbuf_free(p);
 801df7c:	4628      	mov	r0, r5
 801df7e:	f7fe fb1f 	bl	801c5c0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801df82:	06bb      	lsls	r3, r7, #26
 801df84:	d50f      	bpl.n	801dfa6 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801df86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801df88:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801df8c:	d001      	beq.n	801df92 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801df8e:	3301      	adds	r3, #1
 801df90:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801df92:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801df96:	b135      	cbz	r5, 801dfa6 <tcp_process_refused_data+0x5a>
 801df98:	2300      	movs	r3, #0
 801df9a:	4621      	mov	r1, r4
 801df9c:	6920      	ldr	r0, [r4, #16]
 801df9e:	461a      	mov	r2, r3
 801dfa0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801dfa2:	300d      	adds	r0, #13
 801dfa4:	d001      	beq.n	801dfaa <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801dfa6:	2000      	movs	r0, #0
}
 801dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801dfaa:	f06f 000c 	mvn.w	r0, #12
}
 801dfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801dfb0:	4b04      	ldr	r3, [pc, #16]	; (801dfc4 <tcp_process_refused_data+0x78>)
 801dfb2:	f240 6209 	movw	r2, #1545	; 0x609
 801dfb6:	4904      	ldr	r1, [pc, #16]	; (801dfc8 <tcp_process_refused_data+0x7c>)
 801dfb8:	4804      	ldr	r0, [pc, #16]	; (801dfcc <tcp_process_refused_data+0x80>)
 801dfba:	f008 fbcb 	bl	8026754 <iprintf>
 801dfbe:	f06f 000f 	mvn.w	r0, #15
}
 801dfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfc4:	080456b8 	.word	0x080456b8
 801dfc8:	08045d20 	.word	0x08045d20
 801dfcc:	0802b44c 	.word	0x0802b44c

0801dfd0 <tcp_fasttmr>:
{
 801dfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801dfd4:	4d1c      	ldr	r5, [pc, #112]	; (801e048 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801dfd6:	2700      	movs	r7, #0
 801dfd8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801e050 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801dfdc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801dfde:	4e1b      	ldr	r6, [pc, #108]	; (801e04c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801dfe0:	3301      	adds	r3, #1
 801dfe2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801dfe4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801dfe8:	b1bc      	cbz	r4, 801e01a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801dfea:	782a      	ldrb	r2, [r5, #0]
 801dfec:	7fa3      	ldrb	r3, [r4, #30]
 801dfee:	4293      	cmp	r3, r2
 801dff0:	d015      	beq.n	801e01e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801dff2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801dff4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801dff6:	07d9      	lsls	r1, r3, #31
 801dff8:	d41a      	bmi.n	801e030 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801dffa:	071a      	lsls	r2, r3, #28
 801dffc:	d411      	bmi.n	801e022 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801dffe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801e000:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801e004:	b133      	cbz	r3, 801e014 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801e006:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801e008:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801e00a:	f7ff ff9f 	bl	801df4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801e00e:	7833      	ldrb	r3, [r6, #0]
 801e010:	2b00      	cmp	r3, #0
 801e012:	d1e7      	bne.n	801dfe4 <tcp_fasttmr+0x14>
      pcb = next;
 801e014:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801e016:	2c00      	cmp	r4, #0
 801e018:	d1e7      	bne.n	801dfea <tcp_fasttmr+0x1a>
}
 801e01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801e01e:	68e4      	ldr	r4, [r4, #12]
 801e020:	e7e2      	b.n	801dfe8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e022:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801e026:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e028:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801e02a:	f7fe fdc9 	bl	801cbc0 <tcp_close_shutdown_fin>
 801e02e:	e7e6      	b.n	801dffe <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801e030:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801e034:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801e036:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801e038:	f002 fc74 	bl	8020924 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e03c:	8b63      	ldrh	r3, [r4, #26]
 801e03e:	f023 0303 	bic.w	r3, r3, #3
 801e042:	b29b      	uxth	r3, r3
 801e044:	8363      	strh	r3, [r4, #26]
 801e046:	e7d8      	b.n	801dffa <tcp_fasttmr+0x2a>
 801e048:	2002e459 	.word	0x2002e459
 801e04c:	2002e448 	.word	0x2002e448
 801e050:	2002e444 	.word	0x2002e444

0801e054 <tcp_tmr>:
{
 801e054:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801e056:	f7ff ffbb 	bl	801dfd0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801e05a:	4a06      	ldr	r2, [pc, #24]	; (801e074 <tcp_tmr+0x20>)
 801e05c:	7813      	ldrb	r3, [r2, #0]
 801e05e:	3301      	adds	r3, #1
 801e060:	b2db      	uxtb	r3, r3
 801e062:	7013      	strb	r3, [r2, #0]
 801e064:	07db      	lsls	r3, r3, #31
 801e066:	d400      	bmi.n	801e06a <tcp_tmr+0x16>
}
 801e068:	bd08      	pop	{r3, pc}
 801e06a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801e06e:	f7ff b93d 	b.w	801d2ec <tcp_slowtmr>
 801e072:	bf00      	nop
 801e074:	2002e458 	.word	0x2002e458

0801e078 <tcp_next_iss>:
{
 801e078:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e07a:	b130      	cbz	r0, 801e08a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801e07c:	4b07      	ldr	r3, [pc, #28]	; (801e09c <tcp_next_iss+0x24>)
 801e07e:	4a08      	ldr	r2, [pc, #32]	; (801e0a0 <tcp_next_iss+0x28>)
 801e080:	6818      	ldr	r0, [r3, #0]
 801e082:	6812      	ldr	r2, [r2, #0]
 801e084:	4410      	add	r0, r2
 801e086:	6018      	str	r0, [r3, #0]
}
 801e088:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e08a:	4b06      	ldr	r3, [pc, #24]	; (801e0a4 <tcp_next_iss+0x2c>)
 801e08c:	f640 02af 	movw	r2, #2223	; 0x8af
 801e090:	4905      	ldr	r1, [pc, #20]	; (801e0a8 <tcp_next_iss+0x30>)
 801e092:	4806      	ldr	r0, [pc, #24]	; (801e0ac <tcp_next_iss+0x34>)
 801e094:	f008 fb5e 	bl	8026754 <iprintf>
 801e098:	e7f0      	b.n	801e07c <tcp_next_iss+0x4>
 801e09a:	bf00      	nop
 801e09c:	20000428 	.word	0x20000428
 801e0a0:	2002e454 	.word	0x2002e454
 801e0a4:	080456b8 	.word	0x080456b8
 801e0a8:	08045d48 	.word	0x08045d48
 801e0ac:	0802b44c 	.word	0x0802b44c

0801e0b0 <tcp_eff_send_mss_netif>:
{
 801e0b0:	b538      	push	{r3, r4, r5, lr}
 801e0b2:	4605      	mov	r5, r0
 801e0b4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e0b6:	b172      	cbz	r2, 801e0d6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801e0b8:	b144      	cbz	r4, 801e0cc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801e0ba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801e0bc:	b133      	cbz	r3, 801e0cc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801e0be:	2b28      	cmp	r3, #40	; 0x28
 801e0c0:	d906      	bls.n	801e0d0 <tcp_eff_send_mss_netif+0x20>
 801e0c2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e0c4:	b29b      	uxth	r3, r3
 801e0c6:	429d      	cmp	r5, r3
 801e0c8:	bf28      	it	cs
 801e0ca:	461d      	movcs	r5, r3
}
 801e0cc:	4628      	mov	r0, r5
 801e0ce:	bd38      	pop	{r3, r4, r5, pc}
 801e0d0:	2500      	movs	r5, #0
 801e0d2:	4628      	mov	r0, r5
 801e0d4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e0d6:	4b04      	ldr	r3, [pc, #16]	; (801e0e8 <tcp_eff_send_mss_netif+0x38>)
 801e0d8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801e0dc:	4903      	ldr	r1, [pc, #12]	; (801e0ec <tcp_eff_send_mss_netif+0x3c>)
 801e0de:	4804      	ldr	r0, [pc, #16]	; (801e0f0 <tcp_eff_send_mss_netif+0x40>)
 801e0e0:	f008 fb38 	bl	8026754 <iprintf>
 801e0e4:	e7e8      	b.n	801e0b8 <tcp_eff_send_mss_netif+0x8>
 801e0e6:	bf00      	nop
 801e0e8:	080456b8 	.word	0x080456b8
 801e0ec:	08045d64 	.word	0x08045d64
 801e0f0:	0802b44c 	.word	0x0802b44c

0801e0f4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801e0f4:	b308      	cbz	r0, 801e13a <tcp_netif_ip_addr_changed+0x46>
{
 801e0f6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801e0f8:	6803      	ldr	r3, [r0, #0]
 801e0fa:	4604      	mov	r4, r0
 801e0fc:	b903      	cbnz	r3, 801e100 <tcp_netif_ip_addr_changed+0xc>
}
 801e0fe:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e100:	4b0e      	ldr	r3, [pc, #56]	; (801e13c <tcp_netif_ip_addr_changed+0x48>)
 801e102:	460d      	mov	r5, r1
 801e104:	6819      	ldr	r1, [r3, #0]
 801e106:	f7ff fd01 	bl	801db0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e10a:	4b0d      	ldr	r3, [pc, #52]	; (801e140 <tcp_netif_ip_addr_changed+0x4c>)
 801e10c:	4620      	mov	r0, r4
 801e10e:	6819      	ldr	r1, [r3, #0]
 801e110:	f7ff fcfc 	bl	801db0c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801e114:	2d00      	cmp	r5, #0
 801e116:	d0f2      	beq.n	801e0fe <tcp_netif_ip_addr_changed+0xa>
 801e118:	682b      	ldr	r3, [r5, #0]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d0ef      	beq.n	801e0fe <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e11e:	4b09      	ldr	r3, [pc, #36]	; (801e144 <tcp_netif_ip_addr_changed+0x50>)
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d0eb      	beq.n	801e0fe <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e126:	6819      	ldr	r1, [r3, #0]
 801e128:	6822      	ldr	r2, [r4, #0]
 801e12a:	4291      	cmp	r1, r2
 801e12c:	d101      	bne.n	801e132 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e12e:	682a      	ldr	r2, [r5, #0]
 801e130:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e132:	68db      	ldr	r3, [r3, #12]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d1f6      	bne.n	801e126 <tcp_netif_ip_addr_changed+0x32>
}
 801e138:	bd38      	pop	{r3, r4, r5, pc}
 801e13a:	4770      	bx	lr
 801e13c:	2002e444 	.word	0x2002e444
 801e140:	2002e44c 	.word	0x2002e44c
 801e144:	2002e450 	.word	0x2002e450

0801e148 <tcp_free_ooseq>:
{
 801e148:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801e14a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801e14c:	b16c      	cbz	r4, 801e16a <tcp_free_ooseq+0x22>
 801e14e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801e150:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801e152:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801e154:	6868      	ldr	r0, [r5, #4]
 801e156:	b108      	cbz	r0, 801e15c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801e158:	f7fe fa32 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801e15c:	4629      	mov	r1, r5
 801e15e:	2004      	movs	r0, #4
 801e160:	f7fd fd16 	bl	801bb90 <memp_free>
  while (seg != NULL) {
 801e164:	2c00      	cmp	r4, #0
 801e166:	d1f3      	bne.n	801e150 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801e168:	6774      	str	r4, [r6, #116]	; 0x74
}
 801e16a:	bd70      	pop	{r4, r5, r6, pc}

0801e16c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e16e:	4605      	mov	r5, r0
{
 801e170:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e172:	2800      	cmp	r0, #0
 801e174:	d03e      	beq.n	801e1f4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e176:	68eb      	ldr	r3, [r5, #12]
 801e178:	8998      	ldrh	r0, [r3, #12]
 801e17a:	f7fc f9e5 	bl	801a548 <lwip_htons>
 801e17e:	07c2      	lsls	r2, r0, #31
 801e180:	d432      	bmi.n	801e1e8 <tcp_oos_insert_segment+0x7c>
 801e182:	4e20      	ldr	r6, [pc, #128]	; (801e204 <tcp_oos_insert_segment+0x98>)
 801e184:	e005      	b.n	801e192 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801e186:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801e188:	4620      	mov	r0, r4
 801e18a:	f7fe ff95 	bl	801d0b8 <tcp_seg_free>
    while (next &&
 801e18e:	463c      	mov	r4, r7
 801e190:	b1ef      	cbz	r7, 801e1ce <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e192:	68e1      	ldr	r1, [r4, #12]
 801e194:	8923      	ldrh	r3, [r4, #8]
 801e196:	6837      	ldr	r7, [r6, #0]
 801e198:	892a      	ldrh	r2, [r5, #8]
 801e19a:	6848      	ldr	r0, [r1, #4]
 801e19c:	443a      	add	r2, r7
 801e19e:	4403      	add	r3, r0
 801e1a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	db15      	blt.n	801e1d2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e1a6:	8988      	ldrh	r0, [r1, #12]
 801e1a8:	f7fc f9ce 	bl	801a548 <lwip_htons>
 801e1ac:	07c3      	lsls	r3, r0, #31
 801e1ae:	d5ea      	bpl.n	801e186 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e1b0:	68eb      	ldr	r3, [r5, #12]
 801e1b2:	2001      	movs	r0, #1
 801e1b4:	899f      	ldrh	r7, [r3, #12]
 801e1b6:	f7fc f9c7 	bl	801a548 <lwip_htons>
 801e1ba:	68eb      	ldr	r3, [r5, #12]
 801e1bc:	4338      	orrs	r0, r7
      next = next->next;
 801e1be:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e1c0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801e1c2:	4620      	mov	r0, r4
 801e1c4:	f7fe ff78 	bl	801d0b8 <tcp_seg_free>
    while (next &&
 801e1c8:	463c      	mov	r4, r7
 801e1ca:	2f00      	cmp	r7, #0
 801e1cc:	d1e1      	bne.n	801e192 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801e1ce:	602c      	str	r4, [r5, #0]
}
 801e1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e1d2:	1a12      	subs	r2, r2, r0
    if (next &&
 801e1d4:	2a00      	cmp	r2, #0
 801e1d6:	ddfa      	ble.n	801e1ce <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e1d8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801e1da:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e1dc:	b289      	uxth	r1, r1
 801e1de:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e1e0:	f7fe f8d6 	bl	801c390 <pbuf_realloc>
  cseg->next = next;
 801e1e4:	602c      	str	r4, [r5, #0]
}
 801e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801e1e8:	4620      	mov	r0, r4
    next = NULL;
 801e1ea:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801e1ec:	f7fe ff52 	bl	801d094 <tcp_segs_free>
  cseg->next = next;
 801e1f0:	602c      	str	r4, [r5, #0]
}
 801e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e1f4:	4b04      	ldr	r3, [pc, #16]	; (801e208 <tcp_oos_insert_segment+0x9c>)
 801e1f6:	f240 421f 	movw	r2, #1055	; 0x41f
 801e1fa:	4904      	ldr	r1, [pc, #16]	; (801e20c <tcp_oos_insert_segment+0xa0>)
 801e1fc:	4804      	ldr	r0, [pc, #16]	; (801e210 <tcp_oos_insert_segment+0xa4>)
 801e1fe:	f008 faa9 	bl	8026754 <iprintf>
 801e202:	e7b8      	b.n	801e176 <tcp_oos_insert_segment+0xa>
 801e204:	2002e484 	.word	0x2002e484
 801e208:	08045db4 	.word	0x08045db4
 801e20c:	08045de8 	.word	0x08045de8
 801e210:	0802b44c 	.word	0x0802b44c

0801e214 <tcp_input_delayed_close>:
{
 801e214:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e216:	4604      	mov	r4, r0
 801e218:	b1c8      	cbz	r0, 801e24e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801e21a:	4b11      	ldr	r3, [pc, #68]	; (801e260 <tcp_input_delayed_close+0x4c>)
 801e21c:	781b      	ldrb	r3, [r3, #0]
 801e21e:	f013 0310 	ands.w	r3, r3, #16
 801e222:	d101      	bne.n	801e228 <tcp_input_delayed_close+0x14>
  return 0;
 801e224:	4618      	mov	r0, r3
}
 801e226:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801e228:	8b63      	ldrh	r3, [r4, #26]
 801e22a:	06db      	lsls	r3, r3, #27
 801e22c:	d406      	bmi.n	801e23c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801e22e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801e232:	b11b      	cbz	r3, 801e23c <tcp_input_delayed_close+0x28>
 801e234:	f06f 010e 	mvn.w	r1, #14
 801e238:	6920      	ldr	r0, [r4, #16]
 801e23a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801e23c:	4621      	mov	r1, r4
 801e23e:	4809      	ldr	r0, [pc, #36]	; (801e264 <tcp_input_delayed_close+0x50>)
 801e240:	f7ff fb02 	bl	801d848 <tcp_pcb_remove>
    tcp_free(pcb);
 801e244:	4620      	mov	r0, r4
 801e246:	f7fe fcfb 	bl	801cc40 <tcp_free>
 801e24a:	2001      	movs	r0, #1
}
 801e24c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e24e:	4b06      	ldr	r3, [pc, #24]	; (801e268 <tcp_input_delayed_close+0x54>)
 801e250:	f240 225a 	movw	r2, #602	; 0x25a
 801e254:	4905      	ldr	r1, [pc, #20]	; (801e26c <tcp_input_delayed_close+0x58>)
 801e256:	4806      	ldr	r0, [pc, #24]	; (801e270 <tcp_input_delayed_close+0x5c>)
 801e258:	f008 fa7c 	bl	8026754 <iprintf>
 801e25c:	e7dd      	b.n	801e21a <tcp_input_delayed_close+0x6>
 801e25e:	bf00      	nop
 801e260:	2002e480 	.word	0x2002e480
 801e264:	2002e444 	.word	0x2002e444
 801e268:	08045db4 	.word	0x08045db4
 801e26c:	08045e10 	.word	0x08045e10
 801e270:	0802b44c 	.word	0x0802b44c

0801e274 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e278:	b083      	sub	sp, #12
 801e27a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801e27c:	2900      	cmp	r1, #0
 801e27e:	d03d      	beq.n	801e2fc <tcp_free_acked_segments.constprop.0+0x88>
 801e280:	4607      	mov	r7, r0
 801e282:	460c      	mov	r4, r1
 801e284:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801e34c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e288:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801e340 <tcp_free_acked_segments.constprop.0+0xcc>
 801e28c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801e350 <tcp_free_acked_segments.constprop.0+0xdc>
 801e290:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801e348 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801e294:	68e3      	ldr	r3, [r4, #12]
 801e296:	6858      	ldr	r0, [r3, #4]
 801e298:	f7fc f95a 	bl	801a550 <lwip_htonl>
 801e29c:	68e3      	ldr	r3, [r4, #12]
 801e29e:	4605      	mov	r5, r0
 801e2a0:	8926      	ldrh	r6, [r4, #8]
 801e2a2:	8998      	ldrh	r0, [r3, #12]
 801e2a4:	f7fc f950 	bl	801a548 <lwip_htons>
 801e2a8:	f8d8 3000 	ldr.w	r3, [r8]
 801e2ac:	f010 0003 	ands.w	r0, r0, #3
 801e2b0:	eba5 0503 	sub.w	r5, r5, r3
 801e2b4:	bf18      	it	ne
 801e2b6:	2001      	movne	r0, #1
 801e2b8:	4435      	add	r5, r6
 801e2ba:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801e2bc:	2800      	cmp	r0, #0
 801e2be:	dc37      	bgt.n	801e330 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801e2c0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801e2c4:	f7fe f990 	bl	801c5e8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e2c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801e2cc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e2ce:	4298      	cmp	r0, r3
 801e2d0:	d824      	bhi.n	801e31c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2d2:	491a      	ldr	r1, [pc, #104]	; (801e33c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e2d4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2d6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801e2d8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2da:	880d      	ldrh	r5, [r1, #0]
 801e2dc:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e2de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801e2e2:	1953      	adds	r3, r2, r5
 801e2e4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801e2e6:	f7fe fee7 	bl	801d0b8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801e2ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e2ee:	b11b      	cbz	r3, 801e2f8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e2f0:	9b01      	ldr	r3, [sp, #4]
 801e2f2:	ea56 0503 	orrs.w	r5, r6, r3
 801e2f6:	d006      	beq.n	801e306 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801e2f8:	2e00      	cmp	r6, #0
 801e2fa:	d1cb      	bne.n	801e294 <tcp_free_acked_segments.constprop.0+0x20>
 801e2fc:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801e2fe:	4628      	mov	r0, r5
 801e300:	b003      	add	sp, #12
 801e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801e306:	4b0e      	ldr	r3, [pc, #56]	; (801e340 <tcp_free_acked_segments.constprop.0+0xcc>)
 801e308:	f240 4261 	movw	r2, #1121	; 0x461
 801e30c:	490d      	ldr	r1, [pc, #52]	; (801e344 <tcp_free_acked_segments.constprop.0+0xd0>)
 801e30e:	480e      	ldr	r0, [pc, #56]	; (801e348 <tcp_free_acked_segments.constprop.0+0xd4>)
 801e310:	f008 fa20 	bl	8026754 <iprintf>
}
 801e314:	4628      	mov	r0, r5
 801e316:	b003      	add	sp, #12
 801e318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801e31c:	465b      	mov	r3, fp
 801e31e:	f240 4257 	movw	r2, #1111	; 0x457
 801e322:	4651      	mov	r1, sl
 801e324:	4648      	mov	r0, r9
 801e326:	f008 fa15 	bl	8026754 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801e32a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801e32e:	e7d0      	b.n	801e2d2 <tcp_free_acked_segments.constprop.0+0x5e>
 801e330:	4625      	mov	r5, r4
}
 801e332:	4628      	mov	r0, r5
 801e334:	b003      	add	sp, #12
 801e336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e33a:	bf00      	nop
 801e33c:	2002e478 	.word	0x2002e478
 801e340:	08045db4 	.word	0x08045db4
 801e344:	08045e60 	.word	0x08045e60
 801e348:	0802b44c 	.word	0x0802b44c
 801e34c:	2002e460 	.word	0x2002e460
 801e350:	08045e38 	.word	0x08045e38

0801e354 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801e354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e358:	4604      	mov	r4, r0
 801e35a:	2800      	cmp	r0, #0
 801e35c:	f000 8200 	beq.w	801e760 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e360:	7d23      	ldrb	r3, [r4, #20]
 801e362:	2b03      	cmp	r3, #3
 801e364:	f240 811e 	bls.w	801e5a4 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801e368:	4bb4      	ldr	r3, [pc, #720]	; (801e63c <tcp_receive+0x2e8>)
 801e36a:	781b      	ldrb	r3, [r3, #0]
 801e36c:	06dd      	lsls	r5, r3, #27
 801e36e:	f100 8097 	bmi.w	801e4a0 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e372:	4fb3      	ldr	r7, [pc, #716]	; (801e640 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e374:	4eb3      	ldr	r6, [pc, #716]	; (801e644 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e376:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e378:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e37a:	2900      	cmp	r1, #0
 801e37c:	d07f      	beq.n	801e47e <tcp_receive+0x12a>
 801e37e:	7d22      	ldrb	r2, [r4, #20]
 801e380:	2a06      	cmp	r2, #6
 801e382:	d87c      	bhi.n	801e47e <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e386:	eba2 0803 	sub.w	r8, r2, r3
 801e38a:	f1b8 0f01 	cmp.w	r8, #1
 801e38e:	d405      	bmi.n	801e39c <tcp_receive+0x48>
 801e390:	1c50      	adds	r0, r2, #1
 801e392:	1ac0      	subs	r0, r0, r3
 801e394:	1a41      	subs	r1, r0, r1
 801e396:	2900      	cmp	r1, #0
 801e398:	f340 81f3 	ble.w	801e782 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e39c:	1a99      	subs	r1, r3, r2
 801e39e:	2900      	cmp	r1, #0
 801e3a0:	f2c0 81ea 	blt.w	801e778 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e3a4:	f103 0c01 	add.w	ip, r3, #1
 801e3a8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801e3aa:	ebac 0102 	sub.w	r1, ip, r2
 801e3ae:	1a09      	subs	r1, r1, r0
 801e3b0:	2900      	cmp	r1, #0
 801e3b2:	dc39      	bgt.n	801e428 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e3b4:	429a      	cmp	r2, r3
 801e3b6:	f000 8470 	beq.w	801ec9a <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e3ba:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e3bc:	2d00      	cmp	r5, #0
 801e3be:	f000 8378 	beq.w	801eab2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801e3c2:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801e3c4:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e3c8:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801e3cc:	6842      	ldr	r2, [r0, #4]
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	d019      	beq.n	801e406 <tcp_receive+0xb2>
              if (prev == NULL) {
 801e3d2:	f1b8 0f00 	cmp.w	r8, #0
 801e3d6:	f000 815b 	beq.w	801e690 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e3da:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801e3de:	6849      	ldr	r1, [r1, #4]
 801e3e0:	ebae 0101 	sub.w	r1, lr, r1
 801e3e4:	2900      	cmp	r1, #0
 801e3e6:	db04      	blt.n	801e3f2 <tcp_receive+0x9e>
 801e3e8:	ebac 0102 	sub.w	r1, ip, r2
 801e3ec:	2900      	cmp	r1, #0
 801e3ee:	f340 8369 	ble.w	801eac4 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e3f2:	6829      	ldr	r1, [r5, #0]
 801e3f4:	46a8      	mov	r8, r5
 801e3f6:	2900      	cmp	r1, #0
 801e3f8:	f000 8159 	beq.w	801e6ae <tcp_receive+0x35a>
 801e3fc:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801e3fe:	68e8      	ldr	r0, [r5, #12]
 801e400:	6842      	ldr	r2, [r0, #4]
 801e402:	429a      	cmp	r2, r3
 801e404:	d1e5      	bne.n	801e3d2 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801e406:	4890      	ldr	r0, [pc, #576]	; (801e648 <tcp_receive+0x2f4>)
 801e408:	892b      	ldrh	r3, [r5, #8]
 801e40a:	8902      	ldrh	r2, [r0, #8]
 801e40c:	429a      	cmp	r2, r3
 801e40e:	d90b      	bls.n	801e428 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e410:	f7fe fe70 	bl	801d0f4 <tcp_seg_copy>
                if (cseg != NULL) {
 801e414:	b140      	cbz	r0, 801e428 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801e416:	f1b8 0f00 	cmp.w	r8, #0
 801e41a:	f000 8414 	beq.w	801ec46 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801e41e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801e422:	4629      	mov	r1, r5
 801e424:	f7ff fea2 	bl	801e16c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e428:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801e42a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801e42e:	f002 ba47 	b.w	80208c0 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801e432:	4f83      	ldr	r7, [pc, #524]	; (801e640 <tcp_receive+0x2ec>)
 801e434:	8839      	ldrh	r1, [r7, #0]
 801e436:	2900      	cmp	r1, #0
 801e438:	f040 8116 	bne.w	801e668 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e43c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801e43e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e440:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801e444:	4470      	add	r0, lr
 801e446:	4560      	cmp	r0, ip
 801e448:	f040 810e 	bne.w	801e668 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801e44c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801e44e:	0400      	lsls	r0, r0, #16
 801e450:	f100 810a 	bmi.w	801e668 <tcp_receive+0x314>
 801e454:	4590      	cmp	r8, r2
 801e456:	f040 8107 	bne.w	801e668 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801e45a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801e45e:	28ff      	cmp	r0, #255	; 0xff
 801e460:	f000 8393 	beq.w	801eb8a <tcp_receive+0x836>
                ++pcb->dupacks;
 801e464:	3001      	adds	r0, #1
 801e466:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801e468:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801e46a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801e46e:	f200 838c 	bhi.w	801eb8a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801e472:	f000 8396 	beq.w	801eba2 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e476:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e478:	2800      	cmp	r0, #0
 801e47a:	f040 80b6 	bne.w	801e5ea <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e47e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e480:	1a99      	subs	r1, r3, r2
 801e482:	2900      	cmp	r1, #0
 801e484:	db06      	blt.n	801e494 <tcp_receive+0x140>
 801e486:	f1c2 0201 	rsb	r2, r2, #1
 801e48a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e48c:	1a52      	subs	r2, r2, r1
 801e48e:	4413      	add	r3, r2
 801e490:	2b00      	cmp	r3, #0
 801e492:	dd03      	ble.n	801e49c <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801e494:	8b63      	ldrh	r3, [r4, #26]
 801e496:	f043 0302 	orr.w	r3, r3, #2
 801e49a:	8363      	strh	r3, [r4, #26]
}
 801e49c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4a0:	4e68      	ldr	r6, [pc, #416]	; (801e644 <tcp_receive+0x2f0>)
 801e4a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e4a4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e4a6:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4aa:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801e4ac:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4b0:	2900      	cmp	r1, #0
 801e4b2:	db7f      	blt.n	801e5b4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4b4:	4d65      	ldr	r5, [pc, #404]	; (801e64c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4b6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4b8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801e4ba:	f000 80d9 	beq.w	801e670 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e4be:	4594      	cmp	ip, r2
 801e4c0:	f000 80df 	beq.w	801e682 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801e4c4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801e4c8:	eba2 0108 	sub.w	r1, r2, r8
 801e4cc:	2900      	cmp	r1, #0
 801e4ce:	ddb0      	ble.n	801e432 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e4d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e4d2:	1ad3      	subs	r3, r2, r3
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	dc7d      	bgt.n	801e5d4 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801e4d8:	8b63      	ldrh	r3, [r4, #26]
 801e4da:	0758      	lsls	r0, r3, #29
 801e4dc:	d509      	bpl.n	801e4f2 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801e4de:	f023 0304 	bic.w	r3, r3, #4
 801e4e2:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801e4e4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801e4e8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801e4ec:	2300      	movs	r3, #0
 801e4ee:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e4f2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801e4f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801e4f8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e4fa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801e4fe:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e500:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801e504:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801e506:	f04f 0300 	mov.w	r3, #0
 801e50a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801e50e:	d913      	bls.n	801e538 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801e510:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801e514:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801e516:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801e51a:	429a      	cmp	r2, r3
 801e51c:	f200 81c9 	bhi.w	801e8b2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801e520:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801e524:	4411      	add	r1, r2
 801e526:	b289      	uxth	r1, r1
 801e528:	428a      	cmp	r2, r1
 801e52a:	f200 82a9 	bhi.w	801ea80 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801e52e:	428b      	cmp	r3, r1
 801e530:	f240 82a8 	bls.w	801ea84 <tcp_receive+0x730>
 801e534:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e538:	4620      	mov	r0, r4
 801e53a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801e53e:	f7ff fe99 	bl	801e274 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e542:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e544:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801e546:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e548:	4620      	mov	r0, r4
 801e54a:	f7ff fe93 	bl	801e274 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801e54e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801e550:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801e552:	fab2 f382 	clz	r3, r2
 801e556:	095b      	lsrs	r3, r3, #5
 801e558:	425b      	negs	r3, r3
 801e55a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801e55c:	2300      	movs	r3, #0
 801e55e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801e560:	2800      	cmp	r0, #0
 801e562:	f000 81a3 	beq.w	801e8ac <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801e566:	4b3a      	ldr	r3, [pc, #232]	; (801e650 <tcp_receive+0x2fc>)
 801e568:	8819      	ldrh	r1, [r3, #0]
 801e56a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801e56e:	440b      	add	r3, r1
 801e570:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801e574:	8b63      	ldrh	r3, [r4, #26]
 801e576:	0519      	lsls	r1, r3, #20
 801e578:	f140 80fa 	bpl.w	801e770 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801e57c:	2a00      	cmp	r2, #0
 801e57e:	f000 81af 	beq.w	801e8e0 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801e582:	68d3      	ldr	r3, [r2, #12]
 801e584:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e586:	6858      	ldr	r0, [r3, #4]
 801e588:	f7fb ffe2 	bl	801a550 <lwip_htonl>
 801e58c:	1a38      	subs	r0, r7, r0
 801e58e:	2800      	cmp	r0, #0
 801e590:	f300 80ee 	bgt.w	801e770 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801e594:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e596:	4f2a      	ldr	r7, [pc, #168]	; (801e640 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801e598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e59c:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801e59e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e5a0:	6833      	ldr	r3, [r6, #0]
 801e5a2:	e01d      	b.n	801e5e0 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801e5a4:	4b2b      	ldr	r3, [pc, #172]	; (801e654 <tcp_receive+0x300>)
 801e5a6:	f240 427c 	movw	r2, #1148	; 0x47c
 801e5aa:	492b      	ldr	r1, [pc, #172]	; (801e658 <tcp_receive+0x304>)
 801e5ac:	482b      	ldr	r0, [pc, #172]	; (801e65c <tcp_receive+0x308>)
 801e5ae:	f008 f8d1 	bl	8026754 <iprintf>
 801e5b2:	e6d9      	b.n	801e368 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e5b4:	4a2a      	ldr	r2, [pc, #168]	; (801e660 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e5b6:	4d25      	ldr	r5, [pc, #148]	; (801e64c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e5b8:	6812      	ldr	r2, [r2, #0]
 801e5ba:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e5bc:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e5be:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801e5c2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801e5c6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801e5c8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e5cc:	bf38      	it	cc
 801e5ce:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801e5d2:	e777      	b.n	801e4c4 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e5d4:	4f1a      	ldr	r7, [pc, #104]	; (801e640 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801e5d6:	4620      	mov	r0, r4
 801e5d8:	f002 f972 	bl	80208c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e5dc:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e5de:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e5e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e5e2:	2800      	cmp	r0, #0
 801e5e4:	f43f aec9 	beq.w	801e37a <tcp_receive+0x26>
 801e5e8:	682a      	ldr	r2, [r5, #0]
 801e5ea:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801e5ec:	1aaa      	subs	r2, r5, r2
 801e5ee:	2a00      	cmp	r2, #0
 801e5f0:	f6bf aec3 	bge.w	801e37a <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801e5f4:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e5f8:	b280      	uxth	r0, r0
 801e5fa:	4a1a      	ldr	r2, [pc, #104]	; (801e664 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801e5fc:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e600:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801e604:	ebae 020c 	sub.w	r2, lr, ip
 801e608:	1a12      	subs	r2, r2, r0
 801e60a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801e60c:	4415      	add	r5, r2
      if (m < 0) {
 801e60e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801e612:	b22d      	sxth	r5, r5
 801e614:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801e616:	d003      	beq.n	801e620 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801e618:	ebac 0c0e 	sub.w	ip, ip, lr
 801e61c:	4460      	add	r0, ip
 801e61e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801e620:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e624:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801e628:	4410      	add	r0, r2
      pcb->rttest = 0;
 801e62a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801e62c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801e62e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e630:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801e634:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e636:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801e63a:	e69e      	b.n	801e37a <tcp_receive+0x26>
 801e63c:	2002e464 	.word	0x2002e464
 801e640:	2002e49e 	.word	0x2002e49e
 801e644:	2002e484 	.word	0x2002e484
 801e648:	2002e468 	.word	0x2002e468
 801e64c:	2002e460 	.word	0x2002e460
 801e650:	2002e478 	.word	0x2002e478
 801e654:	08045db4 	.word	0x08045db4
 801e658:	08045e9c 	.word	0x08045e9c
 801e65c:	0802b44c 	.word	0x0802b44c
 801e660:	2002e490 	.word	0x2002e490
 801e664:	2002e454 	.word	0x2002e454
        pcb->dupacks = 0;
 801e668:	2200      	movs	r2, #0
 801e66a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e66e:	e7b7      	b.n	801e5e0 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801e670:	ebac 0102 	sub.w	r1, ip, r2
 801e674:	2900      	cmp	r1, #0
 801e676:	f6bf af22 	bge.w	801e4be <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801e67a:	49ac      	ldr	r1, [pc, #688]	; (801e92c <tcp_receive+0x5d8>)
 801e67c:	6809      	ldr	r1, [r1, #0]
 801e67e:	89c9      	ldrh	r1, [r1, #14]
 801e680:	e79d      	b.n	801e5be <tcp_receive+0x26a>
 801e682:	49aa      	ldr	r1, [pc, #680]	; (801e92c <tcp_receive+0x5d8>)
 801e684:	6809      	ldr	r1, [r1, #0]
 801e686:	89c9      	ldrh	r1, [r1, #14]
 801e688:	458e      	cmp	lr, r1
 801e68a:	f4bf af1b 	bcs.w	801e4c4 <tcp_receive+0x170>
 801e68e:	e796      	b.n	801e5be <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e690:	1a99      	subs	r1, r3, r2
 801e692:	2900      	cmp	r1, #0
 801e694:	f6bf aead 	bge.w	801e3f2 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e698:	48a5      	ldr	r0, [pc, #660]	; (801e930 <tcp_receive+0x5dc>)
 801e69a:	f7fe fd2b 	bl	801d0f4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	f43f aec2 	beq.w	801e428 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801e6a4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801e6a6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e6a8:	f7ff fd60 	bl	801e16c <tcp_oos_insert_segment>
 801e6ac:	e6bc      	b.n	801e428 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e6ae:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	f77f aeb9 	ble.w	801e428 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e6b6:	8980      	ldrh	r0, [r0, #12]
 801e6b8:	f7fb ff46 	bl	801a548 <lwip_htons>
 801e6bc:	07c1      	lsls	r1, r0, #31
 801e6be:	f53f aeb3 	bmi.w	801e428 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801e6c2:	489b      	ldr	r0, [pc, #620]	; (801e930 <tcp_receive+0x5dc>)
 801e6c4:	f7fe fd16 	bl	801d0f4 <tcp_seg_copy>
 801e6c8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801e6ca:	2800      	cmp	r0, #0
 801e6cc:	f43f aeac 	beq.w	801e428 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e6d0:	68eb      	ldr	r3, [r5, #12]
 801e6d2:	892a      	ldrh	r2, [r5, #8]
 801e6d4:	6859      	ldr	r1, [r3, #4]
 801e6d6:	6833      	ldr	r3, [r6, #0]
 801e6d8:	440a      	add	r2, r1
 801e6da:	1ad2      	subs	r2, r2, r3
 801e6dc:	2a00      	cmp	r2, #0
 801e6de:	dd05      	ble.n	801e6ec <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e6e0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801e6e2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e6e4:	b299      	uxth	r1, r3
 801e6e6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801e6e8:	f7fd fe52 	bl	801c390 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e6ec:	6832      	ldr	r2, [r6, #0]
 801e6ee:	883b      	ldrh	r3, [r7, #0]
 801e6f0:	4413      	add	r3, r2
 801e6f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e6f4:	1a9b      	subs	r3, r3, r2
 801e6f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e6f8:	1a9b      	subs	r3, r3, r2
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	f77f ae94 	ble.w	801e428 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e700:	682b      	ldr	r3, [r5, #0]
 801e702:	68db      	ldr	r3, [r3, #12]
 801e704:	8998      	ldrh	r0, [r3, #12]
 801e706:	f7fb ff1f 	bl	801a548 <lwip_htons>
 801e70a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e70c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e70e:	f100 82b1 	bmi.w	801ec74 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e712:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801e714:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801e716:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e718:	1a89      	subs	r1, r1, r2
 801e71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801e71c:	4411      	add	r1, r2
 801e71e:	b289      	uxth	r1, r1
 801e720:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e722:	f7fd fe35 	bl	801c390 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e726:	682b      	ldr	r3, [r5, #0]
 801e728:	891d      	ldrh	r5, [r3, #8]
 801e72a:	68db      	ldr	r3, [r3, #12]
 801e72c:	8998      	ldrh	r0, [r3, #12]
 801e72e:	f7fb ff0b 	bl	801a548 <lwip_htons>
 801e732:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e736:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801e738:	bf18      	it	ne
 801e73a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e73c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801e73e:	442b      	add	r3, r5
 801e740:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e742:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801e744:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e748:	4413      	add	r3, r2
 801e74a:	4299      	cmp	r1, r3
 801e74c:	f43f ae6c 	beq.w	801e428 <tcp_receive+0xd4>
 801e750:	4b78      	ldr	r3, [pc, #480]	; (801e934 <tcp_receive+0x5e0>)
 801e752:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e756:	4978      	ldr	r1, [pc, #480]	; (801e938 <tcp_receive+0x5e4>)
 801e758:	4878      	ldr	r0, [pc, #480]	; (801e93c <tcp_receive+0x5e8>)
 801e75a:	f007 fffb 	bl	8026754 <iprintf>
 801e75e:	e663      	b.n	801e428 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801e760:	4b74      	ldr	r3, [pc, #464]	; (801e934 <tcp_receive+0x5e0>)
 801e762:	f240 427b 	movw	r2, #1147	; 0x47b
 801e766:	4976      	ldr	r1, [pc, #472]	; (801e940 <tcp_receive+0x5ec>)
 801e768:	4874      	ldr	r0, [pc, #464]	; (801e93c <tcp_receive+0x5e8>)
 801e76a:	f007 fff3 	bl	8026754 <iprintf>
 801e76e:	e5f7      	b.n	801e360 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e770:	4f74      	ldr	r7, [pc, #464]	; (801e944 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e772:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e774:	8839      	ldrh	r1, [r7, #0]
 801e776:	e733      	b.n	801e5e0 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801e778:	8b63      	ldrh	r3, [r4, #26]
 801e77a:	f043 0302 	orr.w	r3, r3, #2
 801e77e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e780:	e652      	b.n	801e428 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801e782:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e930 <tcp_receive+0x5dc>
 801e786:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e78a:	2d00      	cmp	r5, #0
 801e78c:	f000 8170 	beq.w	801ea70 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e790:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801e794:	4598      	cmp	r8, r3
 801e796:	f200 80c0 	bhi.w	801e91a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e79a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801e79e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e7a2:	891a      	ldrh	r2, [r3, #8]
 801e7a4:	4542      	cmp	r2, r8
 801e7a6:	f0c0 80ad 	bcc.w	801e904 <tcp_receive+0x5b0>
      inseg.len -= off;
 801e7aa:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e7ae:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801e7b2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e7b6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801e7b8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801e7bc:	896b      	ldrh	r3, [r5, #10]
 801e7be:	4543      	cmp	r3, r8
 801e7c0:	d20a      	bcs.n	801e7d8 <tcp_receive+0x484>
        p->len = 0;
 801e7c2:	2100      	movs	r1, #0
        off -= p->len;
 801e7c4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801e7c8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801e7ca:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801e7cc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801e7ce:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801e7d2:	896b      	ldrh	r3, [r5, #10]
 801e7d4:	4543      	cmp	r3, r8
 801e7d6:	d3f5      	bcc.n	801e7c4 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801e7d8:	4641      	mov	r1, r8
 801e7da:	4628      	mov	r0, r5
 801e7dc:	f7fd fe64 	bl	801c4a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e7e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e7e6:	6033      	str	r3, [r6, #0]
 801e7e8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e7ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	f43f ae1b 	beq.w	801e428 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801e7f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e7f6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801e7fa:	8998      	ldrh	r0, [r3, #12]
 801e7fc:	f7fb fea4 	bl	801a548 <lwip_htons>
 801e800:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801e804:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801e806:	bf18      	it	ne
 801e808:	2301      	movne	r3, #1
 801e80a:	442b      	add	r3, r5
 801e80c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801e80e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801e810:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801e812:	f0c0 8181 	bcc.w	801eb18 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801e816:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e818:	2b00      	cmp	r3, #0
 801e81a:	f000 80a0 	beq.w	801e95e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e81e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e822:	8998      	ldrh	r0, [r3, #12]
 801e824:	f7fb fe90 	bl	801a548 <lwip_htons>
 801e828:	07c2      	lsls	r2, r0, #31
 801e82a:	f100 8095 	bmi.w	801e958 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801e82e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801e830:	b955      	cbnz	r5, 801e848 <tcp_receive+0x4f4>
 801e832:	e1f4      	b.n	801ec1e <tcp_receive+0x8ca>
              next = next->next;
 801e834:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801e838:	4628      	mov	r0, r5
 801e83a:	f7fe fc3d 	bl	801d0b8 <tcp_seg_free>
            while (next &&
 801e83e:	4645      	mov	r5, r8
 801e840:	f1b8 0f00 	cmp.w	r8, #0
 801e844:	f000 81eb 	beq.w	801ec1e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e848:	68e8      	ldr	r0, [r5, #12]
 801e84a:	883a      	ldrh	r2, [r7, #0]
 801e84c:	f8d6 e000 	ldr.w	lr, [r6]
 801e850:	892b      	ldrh	r3, [r5, #8]
 801e852:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801e856:	eb02 010e 	add.w	r1, r2, lr
 801e85a:	4463      	add	r3, ip
 801e85c:	1acb      	subs	r3, r1, r3
            while (next &&
 801e85e:	2b00      	cmp	r3, #0
 801e860:	f2c0 81a5 	blt.w	801ebae <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e864:	8980      	ldrh	r0, [r0, #12]
 801e866:	f7fb fe6f 	bl	801a548 <lwip_htons>
 801e86a:	07c3      	lsls	r3, r0, #31
 801e86c:	d5e2      	bpl.n	801e834 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e86e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e872:	8998      	ldrh	r0, [r3, #12]
 801e874:	f7fb fe68 	bl	801a548 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e878:	0780      	lsls	r0, r0, #30
 801e87a:	d4db      	bmi.n	801e834 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e87c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e880:	2001      	movs	r0, #1
 801e882:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801e886:	f7fb fe5f 	bl	801a548 <lwip_htons>
 801e88a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e88e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801e892:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e896:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e898:	b280      	uxth	r0, r0
 801e89a:	f7fb fe55 	bl	801a548 <lwip_htons>
 801e89e:	f010 0003 	ands.w	r0, r0, #3
 801e8a2:	bf18      	it	ne
 801e8a4:	2001      	movne	r0, #1
 801e8a6:	4440      	add	r0, r8
 801e8a8:	8038      	strh	r0, [r7, #0]
 801e8aa:	e7c3      	b.n	801e834 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801e8ac:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801e8b0:	e659      	b.n	801e566 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e8b2:	8b62      	ldrh	r2, [r4, #26]
 801e8b4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e8b8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801e8ba:	bf14      	ite	ne
 801e8bc:	2001      	movne	r0, #1
 801e8be:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801e8c0:	fb12 f200 	smulbb	r2, r2, r0
 801e8c4:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801e8c6:	428a      	cmp	r2, r1
 801e8c8:	bf94      	ite	ls
 801e8ca:	1898      	addls	r0, r3, r2
 801e8cc:	1858      	addhi	r0, r3, r1
 801e8ce:	b282      	uxth	r2, r0
 801e8d0:	4293      	cmp	r3, r2
 801e8d2:	f240 80e0 	bls.w	801ea96 <tcp_receive+0x742>
 801e8d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801e8de:	e62b      	b.n	801e538 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801e8e0:	b148      	cbz	r0, 801e8f6 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801e8e2:	68c3      	ldr	r3, [r0, #12]
 801e8e4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801e8e6:	6858      	ldr	r0, [r3, #4]
 801e8e8:	f7fb fe32 	bl	801a550 <lwip_htonl>
 801e8ec:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801e8ee:	2800      	cmp	r0, #0
 801e8f0:	f73f af3e 	bgt.w	801e770 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801e8f4:	8b63      	ldrh	r3, [r4, #26]
 801e8f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e8fa:	4f12      	ldr	r7, [pc, #72]	; (801e944 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801e8fc:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e8fe:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e900:	6833      	ldr	r3, [r6, #0]
 801e902:	e66d      	b.n	801e5e0 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e904:	4b0b      	ldr	r3, [pc, #44]	; (801e934 <tcp_receive+0x5e0>)
 801e906:	f240 5297 	movw	r2, #1431	; 0x597
 801e90a:	490f      	ldr	r1, [pc, #60]	; (801e948 <tcp_receive+0x5f4>)
 801e90c:	480b      	ldr	r0, [pc, #44]	; (801e93c <tcp_receive+0x5e8>)
 801e90e:	f007 ff21 	bl	8026754 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e912:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e916:	891a      	ldrh	r2, [r3, #8]
 801e918:	e747      	b.n	801e7aa <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e91a:	4b06      	ldr	r3, [pc, #24]	; (801e934 <tcp_receive+0x5e0>)
 801e91c:	f240 5295 	movw	r2, #1429	; 0x595
 801e920:	490a      	ldr	r1, [pc, #40]	; (801e94c <tcp_receive+0x5f8>)
 801e922:	4806      	ldr	r0, [pc, #24]	; (801e93c <tcp_receive+0x5e8>)
 801e924:	f007 ff16 	bl	8026754 <iprintf>
 801e928:	e737      	b.n	801e79a <tcp_receive+0x446>
 801e92a:	bf00      	nop
 801e92c:	2002e490 	.word	0x2002e490
 801e930:	2002e468 	.word	0x2002e468
 801e934:	08045db4 	.word	0x08045db4
 801e938:	08045ee8 	.word	0x08045ee8
 801e93c:	0802b44c 	.word	0x0802b44c
 801e940:	08045e80 	.word	0x08045e80
 801e944:	2002e49e 	.word	0x2002e49e
 801e948:	08045ed8 	.word	0x08045ed8
 801e94c:	08045ec8 	.word	0x08045ec8
              pcb->ooseq = pcb->ooseq->next;
 801e950:	6803      	ldr	r3, [r0, #0]
 801e952:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e954:	f7fe fbb0 	bl	801d0b8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e958:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801e95a:	2800      	cmp	r0, #0
 801e95c:	d1f8      	bne.n	801e950 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801e95e:	883a      	ldrh	r2, [r7, #0]
 801e960:	6831      	ldr	r1, [r6, #0]
 801e962:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e964:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801e966:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e968:	4293      	cmp	r3, r2
 801e96a:	f0c0 80cb 	bcc.w	801eb04 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801e96e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801e970:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801e972:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801e974:	f7fe fa68 	bl	801ce48 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801e978:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e97c:	891a      	ldrh	r2, [r3, #8]
 801e97e:	b122      	cbz	r2, 801e98a <tcp_receive+0x636>
          recv_data = inseg.p;
 801e980:	4ab2      	ldr	r2, [pc, #712]	; (801ec4c <tcp_receive+0x8f8>)
 801e982:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801e984:	2300      	movs	r3, #0
 801e986:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e98a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801e98e:	8998      	ldrh	r0, [r3, #12]
 801e990:	f7fb fdda 	bl	801a548 <lwip_htons>
 801e994:	07c2      	lsls	r2, r0, #31
 801e996:	d504      	bpl.n	801e9a2 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801e998:	4aad      	ldr	r2, [pc, #692]	; (801ec50 <tcp_receive+0x8fc>)
 801e99a:	7813      	ldrb	r3, [r2, #0]
 801e99c:	f043 0320 	orr.w	r3, r3, #32
 801e9a0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801e9a2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801e9a4:	2d00      	cmp	r5, #0
 801e9a6:	d07b      	beq.n	801eaa0 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e9a8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801ec58 <tcp_receive+0x904>
 801e9ac:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801ec70 <tcp_receive+0x91c>
 801e9b0:	4fa8      	ldr	r7, [pc, #672]	; (801ec54 <tcp_receive+0x900>)
 801e9b2:	e033      	b.n	801ea1c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e9b4:	68eb      	ldr	r3, [r5, #12]
 801e9b6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801e9ba:	8998      	ldrh	r0, [r3, #12]
 801e9bc:	f7fb fdc4 	bl	801a548 <lwip_htons>
 801e9c0:	f010 0003 	ands.w	r0, r0, #3
 801e9c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801e9c6:	bf18      	it	ne
 801e9c8:	2001      	movne	r0, #1
 801e9ca:	4450      	add	r0, sl
 801e9cc:	1a18      	subs	r0, r3, r0
 801e9ce:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	f7fe fa39 	bl	801ce48 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801e9d6:	6869      	ldr	r1, [r5, #4]
 801e9d8:	890b      	ldrh	r3, [r1, #8]
 801e9da:	b13b      	cbz	r3, 801e9ec <tcp_receive+0x698>
            if (recv_data) {
 801e9dc:	4b9b      	ldr	r3, [pc, #620]	; (801ec4c <tcp_receive+0x8f8>)
 801e9de:	6818      	ldr	r0, [r3, #0]
 801e9e0:	2800      	cmp	r0, #0
 801e9e2:	d05b      	beq.n	801ea9c <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801e9e4:	f7fd fe1e 	bl	801c624 <pbuf_cat>
            cseg->p = NULL;
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e9ec:	68eb      	ldr	r3, [r5, #12]
 801e9ee:	8998      	ldrh	r0, [r3, #12]
 801e9f0:	f7fb fdaa 	bl	801a548 <lwip_htons>
 801e9f4:	07c3      	lsls	r3, r0, #31
 801e9f6:	d509      	bpl.n	801ea0c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801e9f8:	4a95      	ldr	r2, [pc, #596]	; (801ec50 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e9fa:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801e9fc:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e9fe:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801ea00:	f043 0320 	orr.w	r3, r3, #32
 801ea04:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ea06:	d101      	bne.n	801ea0c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801ea08:	2307      	movs	r3, #7
 801ea0a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801ea0c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801ea0e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801ea10:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801ea12:	f7fe fb51 	bl	801d0b8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ea16:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801ea18:	2d00      	cmp	r5, #0
 801ea1a:	d041      	beq.n	801eaa0 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ea1c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801ea1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ea20:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801ea22:	428b      	cmp	r3, r1
 801ea24:	d13c      	bne.n	801eaa0 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801ea26:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea28:	8990      	ldrh	r0, [r2, #12]
 801ea2a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801ea2e:	f7fb fd8b 	bl	801a548 <lwip_htons>
 801ea32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ea34:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea38:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea3c:	bf18      	it	ne
 801ea3e:	2001      	movne	r0, #1
 801ea40:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea42:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea44:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea46:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801ea4a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801ea4c:	8998      	ldrh	r0, [r3, #12]
 801ea4e:	f7fb fd7b 	bl	801a548 <lwip_htons>
 801ea52:	f010 0003 	ands.w	r0, r0, #3
 801ea56:	bf18      	it	ne
 801ea58:	2001      	movne	r0, #1
 801ea5a:	4458      	add	r0, fp
 801ea5c:	4582      	cmp	sl, r0
 801ea5e:	d2a9      	bcs.n	801e9b4 <tcp_receive+0x660>
 801ea60:	464b      	mov	r3, r9
 801ea62:	f240 622b 	movw	r2, #1579	; 0x62b
 801ea66:	4641      	mov	r1, r8
 801ea68:	4638      	mov	r0, r7
 801ea6a:	f007 fe73 	bl	8026754 <iprintf>
 801ea6e:	e7a1      	b.n	801e9b4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ea70:	4b79      	ldr	r3, [pc, #484]	; (801ec58 <tcp_receive+0x904>)
 801ea72:	f240 5294 	movw	r2, #1428	; 0x594
 801ea76:	4979      	ldr	r1, [pc, #484]	; (801ec5c <tcp_receive+0x908>)
 801ea78:	4876      	ldr	r0, [pc, #472]	; (801ec54 <tcp_receive+0x900>)
 801ea7a:	f007 fe6b 	bl	8026754 <iprintf>
 801ea7e:	e687      	b.n	801e790 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ea80:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea84:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea86:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea88:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ea8a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ea8e:	b292      	uxth	r2, r2
 801ea90:	4293      	cmp	r3, r2
 801ea92:	f63f af20 	bhi.w	801e8d6 <tcp_receive+0x582>
 801ea96:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801ea9a:	e54d      	b.n	801e538 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801ea9c:	6019      	str	r1, [r3, #0]
 801ea9e:	e7a3      	b.n	801e9e8 <tcp_receive+0x694>
        tcp_ack(pcb);
 801eaa0:	8b63      	ldrh	r3, [r4, #26]
 801eaa2:	07d8      	lsls	r0, r3, #31
 801eaa4:	d50a      	bpl.n	801eabc <tcp_receive+0x768>
 801eaa6:	f023 0301 	bic.w	r3, r3, #1
 801eaaa:	f043 0302 	orr.w	r3, r3, #2
 801eaae:	8363      	strh	r3, [r4, #26]
 801eab0:	e4f4      	b.n	801e49c <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801eab2:	486b      	ldr	r0, [pc, #428]	; (801ec60 <tcp_receive+0x90c>)
 801eab4:	f7fe fb1e 	bl	801d0f4 <tcp_seg_copy>
 801eab8:	6760      	str	r0, [r4, #116]	; 0x74
 801eaba:	e4b5      	b.n	801e428 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801eabc:	f043 0301 	orr.w	r3, r3, #1
 801eac0:	8363      	strh	r3, [r4, #26]
 801eac2:	e4eb      	b.n	801e49c <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801eac4:	4866      	ldr	r0, [pc, #408]	; (801ec60 <tcp_receive+0x90c>)
 801eac6:	f7fe fb15 	bl	801d0f4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801eaca:	4607      	mov	r7, r0
 801eacc:	2800      	cmp	r0, #0
 801eace:	f43f acab 	beq.w	801e428 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ead2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ead6:	6832      	ldr	r2, [r6, #0]
 801ead8:	6859      	ldr	r1, [r3, #4]
 801eada:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801eade:	440b      	add	r3, r1
 801eae0:	1a9b      	subs	r3, r3, r2
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	dd07      	ble.n	801eaf6 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801eae6:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801eae8:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801eaec:	b291      	uxth	r1, r2
 801eaee:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801eaf2:	f7fd fc4d 	bl	801c390 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801eaf6:	4629      	mov	r1, r5
 801eaf8:	4638      	mov	r0, r7
                    prev->next = cseg;
 801eafa:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801eafe:	f7ff fb35 	bl	801e16c <tcp_oos_insert_segment>
 801eb02:	e491      	b.n	801e428 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801eb04:	4b54      	ldr	r3, [pc, #336]	; (801ec58 <tcp_receive+0x904>)
 801eb06:	f240 6207 	movw	r2, #1543	; 0x607
 801eb0a:	4956      	ldr	r1, [pc, #344]	; (801ec64 <tcp_receive+0x910>)
 801eb0c:	4851      	ldr	r0, [pc, #324]	; (801ec54 <tcp_receive+0x900>)
 801eb0e:	f007 fe21 	bl	8026754 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801eb12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801eb14:	883a      	ldrh	r2, [r7, #0]
 801eb16:	e72a      	b.n	801e96e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb18:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb1c:	8998      	ldrh	r0, [r3, #12]
 801eb1e:	f7fb fd13 	bl	801a548 <lwip_htons>
 801eb22:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801eb24:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801eb28:	d47d      	bmi.n	801ec26 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb2a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801eb2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801eb2e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb32:	f7fb fd09 	bl	801a548 <lwip_htons>
 801eb36:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801eb38:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801eb3c:	d503      	bpl.n	801eb46 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801eb3e:	3901      	subs	r1, #1
 801eb40:	b289      	uxth	r1, r1
 801eb42:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801eb46:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801eb4a:	f7fd fc21 	bl	801c390 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801eb4e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801eb52:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801eb56:	8998      	ldrh	r0, [r3, #12]
 801eb58:	f7fb fcf6 	bl	801a548 <lwip_htons>
 801eb5c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb60:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801eb62:	bf18      	it	ne
 801eb64:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb66:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801eb68:	442b      	add	r3, r5
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801eb6e:	4413      	add	r3, r2
 801eb70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801eb72:	440a      	add	r2, r1
 801eb74:	4293      	cmp	r3, r2
 801eb76:	f43f ae4e 	beq.w	801e816 <tcp_receive+0x4c2>
 801eb7a:	4b37      	ldr	r3, [pc, #220]	; (801ec58 <tcp_receive+0x904>)
 801eb7c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801eb80:	4939      	ldr	r1, [pc, #228]	; (801ec68 <tcp_receive+0x914>)
 801eb82:	4834      	ldr	r0, [pc, #208]	; (801ec54 <tcp_receive+0x900>)
 801eb84:	f007 fde6 	bl	8026754 <iprintf>
 801eb88:	e645      	b.n	801e816 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801eb8a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801eb8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801eb92:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801eb94:	4413      	add	r3, r2
 801eb96:	b29b      	uxth	r3, r3
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	bf88      	it	hi
 801eb9c:	460b      	movhi	r3, r1
 801eb9e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801eba2:	4620      	mov	r0, r4
 801eba4:	f001 fe0a 	bl	80207bc <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801eba8:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ebaa:	6833      	ldr	r3, [r6, #0]
 801ebac:	e518      	b.n	801e5e0 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801ebae:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	dc01      	bgt.n	801ebba <tcp_receive+0x866>
            pcb->ooseq = next;
 801ebb6:	6765      	str	r5, [r4, #116]	; 0x74
 801ebb8:	e6d4      	b.n	801e964 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ebba:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ebbe:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ebc2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ebc6:	8998      	ldrh	r0, [r3, #12]
 801ebc8:	f7fb fcbe 	bl	801a548 <lwip_htons>
 801ebcc:	0781      	lsls	r1, r0, #30
 801ebce:	d504      	bpl.n	801ebda <tcp_receive+0x886>
                inseg.len -= 1;
 801ebd0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801ebd4:	3b01      	subs	r3, #1
 801ebd6:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801ebda:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801ebde:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801ebe2:	f7fd fbd5 	bl	801c390 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801ebe6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ebea:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801ebee:	8998      	ldrh	r0, [r3, #12]
 801ebf0:	f7fb fcaa 	bl	801a548 <lwip_htons>
 801ebf4:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ebf8:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801ebfa:	bf18      	it	ne
 801ebfc:	2001      	movne	r0, #1
 801ebfe:	eb08 0200 	add.w	r2, r8, r0
 801ec02:	b292      	uxth	r2, r2
 801ec04:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ec06:	6859      	ldr	r1, [r3, #4]
 801ec08:	6833      	ldr	r3, [r6, #0]
 801ec0a:	4413      	add	r3, r2
 801ec0c:	428b      	cmp	r3, r1
 801ec0e:	d0d2      	beq.n	801ebb6 <tcp_receive+0x862>
 801ec10:	4b11      	ldr	r3, [pc, #68]	; (801ec58 <tcp_receive+0x904>)
 801ec12:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ec16:	4915      	ldr	r1, [pc, #84]	; (801ec6c <tcp_receive+0x918>)
 801ec18:	480e      	ldr	r0, [pc, #56]	; (801ec54 <tcp_receive+0x900>)
 801ec1a:	f007 fd9b 	bl	8026754 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801ec1e:	883a      	ldrh	r2, [r7, #0]
 801ec20:	6831      	ldr	r1, [r6, #0]
 801ec22:	4411      	add	r1, r2
 801ec24:	e7c7      	b.n	801ebb6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ec26:	899d      	ldrh	r5, [r3, #12]
 801ec28:	4628      	mov	r0, r5
 801ec2a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801ec2e:	f7fb fc8b 	bl	801a548 <lwip_htons>
 801ec32:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ec36:	f7fb fc87 	bl	801a548 <lwip_htons>
 801ec3a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801ec3e:	4328      	orrs	r0, r5
 801ec40:	8198      	strh	r0, [r3, #12]
 801ec42:	b280      	uxth	r0, r0
 801ec44:	e772      	b.n	801eb2c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801ec46:	6760      	str	r0, [r4, #116]	; 0x74
 801ec48:	f7ff bbeb 	b.w	801e422 <tcp_receive+0xce>
 801ec4c:	2002e47c 	.word	0x2002e47c
 801ec50:	2002e480 	.word	0x2002e480
 801ec54:	0802b44c 	.word	0x0802b44c
 801ec58:	08045db4 	.word	0x08045db4
 801ec5c:	08045eb8 	.word	0x08045eb8
 801ec60:	2002e468 	.word	0x2002e468
 801ec64:	08045f5c 	.word	0x08045f5c
 801ec68:	08045ee8 	.word	0x08045ee8
 801ec6c:	08045f20 	.word	0x08045f20
 801ec70:	08045f7c 	.word	0x08045f7c
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ec74:	68db      	ldr	r3, [r3, #12]
 801ec76:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801ec7a:	4640      	mov	r0, r8
 801ec7c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801ec80:	f7fb fc62 	bl	801a548 <lwip_htons>
 801ec84:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801ec88:	f7fb fc5e 	bl	801a548 <lwip_htons>
 801ec8c:	682b      	ldr	r3, [r5, #0]
 801ec8e:	ea48 0800 	orr.w	r8, r8, r0
 801ec92:	68da      	ldr	r2, [r3, #12]
 801ec94:	f8a2 800c 	strh.w	r8, [r2, #12]
 801ec98:	e53b      	b.n	801e712 <tcp_receive+0x3be>
 801ec9a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801eca0 <tcp_receive+0x94c>
 801ec9e:	e5a8      	b.n	801e7f2 <tcp_receive+0x49e>
 801eca0:	2002e468 	.word	0x2002e468

0801eca4 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eca4:	494a      	ldr	r1, [pc, #296]	; (801edd0 <tcp_parseopt.part.0+0x12c>)
 801eca6:	4b4b      	ldr	r3, [pc, #300]	; (801edd4 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801eca8:	4a4b      	ldr	r2, [pc, #300]	; (801edd8 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801ecaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecae:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ecb2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecb4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ecb6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ecba:	4b48      	ldr	r3, [pc, #288]	; (801eddc <tcp_parseopt.part.0+0x138>)
 801ecbc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801ede0 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecc0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801ecc2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ecc6:	681d      	ldr	r5, [r3, #0]
 801ecc8:	f8b9 2000 	ldrh.w	r2, [r9]
 801eccc:	f102 0c14 	add.w	ip, r2, #20
 801ecd0:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecd2:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801ecd4:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ecd8:	d96d      	bls.n	801edb6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801ecda:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecdc:	b1ac      	cbz	r4, 801ed0a <tcp_parseopt.part.0+0x66>
 801ecde:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801ece0:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ece4:	d811      	bhi.n	801ed0a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801ece6:	b2c9      	uxtb	r1, r1
 801ece8:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801ecea:	2901      	cmp	r1, #1
 801ecec:	d011      	beq.n	801ed12 <tcp_parseopt.part.0+0x6e>
 801ecee:	2902      	cmp	r1, #2
 801ecf0:	d017      	beq.n	801ed22 <tcp_parseopt.part.0+0x7e>
 801ecf2:	b191      	cbz	r1, 801ed1a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ecf4:	b10c      	cbz	r4, 801ecfa <tcp_parseopt.part.0+0x56>
 801ecf6:	4573      	cmp	r3, lr
 801ecf8:	d242      	bcs.n	801ed80 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801ecfa:	442b      	add	r3, r5
 801ecfc:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801ecfe:	2b01      	cmp	r3, #1
 801ed00:	d961      	bls.n	801edc6 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ed02:	441a      	add	r2, r3
 801ed04:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ed06:	2101      	movs	r1, #1
 801ed08:	e7e0      	b.n	801eccc <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801ed0a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801ed0e:	2901      	cmp	r1, #1
 801ed10:	d1ed      	bne.n	801ecee <tcp_parseopt.part.0+0x4a>
 801ed12:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801ed16:	461a      	mov	r2, r3
 801ed18:	e7db      	b.n	801ecd2 <tcp_parseopt.part.0+0x2e>
 801ed1a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801ed1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801ed22:	1c91      	adds	r1, r2, #2
 801ed24:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed26:	b10c      	cbz	r4, 801ed2c <tcp_parseopt.part.0+0x88>
 801ed28:	4573      	cmp	r3, lr
 801ed2a:	d224      	bcs.n	801ed76 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801ed2c:	442b      	add	r3, r5
 801ed2e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ed30:	2b04      	cmp	r3, #4
 801ed32:	d145      	bne.n	801edc0 <tcp_parseopt.part.0+0x11c>
 801ed34:	1c4b      	adds	r3, r1, #1
 801ed36:	42b3      	cmp	r3, r6
 801ed38:	da42      	bge.n	801edc0 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801ed3a:	1cd3      	adds	r3, r2, #3
 801ed3c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed3e:	b384      	cbz	r4, 801eda2 <tcp_parseopt.part.0+0xfe>
 801ed40:	458e      	cmp	lr, r1
 801ed42:	d822      	bhi.n	801ed8a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed44:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801ed48:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed4a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801ed4c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801ed4e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed50:	f814 c001 	ldrb.w	ip, [r4, r1]
 801ed54:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed58:	d820      	bhi.n	801ed9c <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed5a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801ed5e:	b2c9      	uxtb	r1, r1
 801ed60:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801ed62:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ed66:	1e59      	subs	r1, r3, #1
 801ed68:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801ed6c:	bf28      	it	cs
 801ed6e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801ed72:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801ed74:	e7c7      	b.n	801ed06 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed76:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ed7a:	b2db      	uxtb	r3, r3
 801ed7c:	5ce3      	ldrb	r3, [r4, r3]
 801ed7e:	e7d7      	b.n	801ed30 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ed80:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ed84:	b2db      	uxtb	r3, r3
 801ed86:	5ce3      	ldrb	r3, [r4, r3]
 801ed88:	e7b9      	b.n	801ecfe <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801ed8a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801ed8c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed8e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed90:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ed94:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ed96:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ed9a:	d9de      	bls.n	801ed5a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801ed9c:	442b      	add	r3, r5
 801ed9e:	7d1b      	ldrb	r3, [r3, #20]
 801eda0:	e7df      	b.n	801ed62 <tcp_parseopt.part.0+0xbe>
 801eda2:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801eda4:	3204      	adds	r2, #4
    return opts[optidx];
 801eda6:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801eda8:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801edac:	b292      	uxth	r2, r2
    return opts[optidx];
 801edae:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801edb0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801edb4:	e7d5      	b.n	801ed62 <tcp_parseopt.part.0+0xbe>
 801edb6:	2900      	cmp	r1, #0
 801edb8:	d0b1      	beq.n	801ed1e <tcp_parseopt.part.0+0x7a>
 801edba:	f8a9 2000 	strh.w	r2, [r9]
 801edbe:	e7ae      	b.n	801ed1e <tcp_parseopt.part.0+0x7a>
 801edc0:	f8a9 1000 	strh.w	r1, [r9]
 801edc4:	e7ab      	b.n	801ed1e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801edc6:	3202      	adds	r2, #2
 801edc8:	f8a9 2000 	strh.w	r2, [r9]
 801edcc:	e7a7      	b.n	801ed1e <tcp_parseopt.part.0+0x7a>
 801edce:	bf00      	nop
 801edd0:	2002e494 	.word	0x2002e494
 801edd4:	2002e498 	.word	0x2002e498
 801edd8:	2002e49c 	.word	0x2002e49c
 801eddc:	2002e490 	.word	0x2002e490
 801ede0:	2002e48c 	.word	0x2002e48c

0801ede4 <tcp_input>:
{
 801ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ede8:	4604      	mov	r4, r0
{
 801edea:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801edec:	2800      	cmp	r0, #0
 801edee:	f000 80d2 	beq.w	801ef96 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801edf2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801edf4:	4e6b      	ldr	r6, [pc, #428]	; (801efa4 <tcp_input+0x1c0>)
 801edf6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801edf8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801edfa:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801edfc:	d805      	bhi.n	801ee0a <tcp_input+0x26>
  pbuf_free(p);
 801edfe:	4620      	mov	r0, r4
}
 801ee00:	b009      	add	sp, #36	; 0x24
 801ee02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801ee06:	f7fd bbdb 	b.w	801c5c0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ee0a:	4f67      	ldr	r7, [pc, #412]	; (801efa8 <tcp_input+0x1c4>)
 801ee0c:	6839      	ldr	r1, [r7, #0]
 801ee0e:	6978      	ldr	r0, [r7, #20]
 801ee10:	f005 f9ae 	bl	8024170 <ip4_addr_isbroadcast_u32>
 801ee14:	2800      	cmp	r0, #0
 801ee16:	d1f2      	bne.n	801edfe <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ee18:	697b      	ldr	r3, [r7, #20]
 801ee1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ee1e:	2be0      	cmp	r3, #224	; 0xe0
 801ee20:	d0ed      	beq.n	801edfe <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801ee22:	f107 0314 	add.w	r3, r7, #20
 801ee26:	f107 0910 	add.w	r9, r7, #16
 801ee2a:	2106      	movs	r1, #6
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	9300      	str	r3, [sp, #0]
 801ee30:	464b      	mov	r3, r9
 801ee32:	8922      	ldrh	r2, [r4, #8]
 801ee34:	f7fc f91c 	bl	801b070 <ip_chksum_pseudo>
    if (chksum != 0) {
 801ee38:	4605      	mov	r5, r0
 801ee3a:	2800      	cmp	r0, #0
 801ee3c:	d1df      	bne.n	801edfe <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ee3e:	6833      	ldr	r3, [r6, #0]
 801ee40:	8998      	ldrh	r0, [r3, #12]
 801ee42:	f7fb fb81 	bl	801a548 <lwip_htons>
 801ee46:	0a80      	lsrs	r0, r0, #10
 801ee48:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ee4c:	2913      	cmp	r1, #19
 801ee4e:	d9d6      	bls.n	801edfe <tcp_input+0x1a>
 801ee50:	8923      	ldrh	r3, [r4, #8]
 801ee52:	b28a      	uxth	r2, r1
 801ee54:	428b      	cmp	r3, r1
 801ee56:	d3d2      	bcc.n	801edfe <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee58:	f1a2 0314 	sub.w	r3, r2, #20
 801ee5c:	4853      	ldr	r0, [pc, #332]	; (801efac <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801ee5e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801efd8 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee62:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801ee64:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ee68:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801ee6a:	8960      	ldrh	r0, [r4, #10]
 801ee6c:	4290      	cmp	r0, r2
 801ee6e:	f080 819f 	bcs.w	801f1b0 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ee72:	6823      	ldr	r3, [r4, #0]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	f000 837b 	beq.w	801f570 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801ee7a:	2114      	movs	r1, #20
 801ee7c:	4620      	mov	r0, r4
 801ee7e:	f7fd fb13 	bl	801c4a8 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee82:	4b4a      	ldr	r3, [pc, #296]	; (801efac <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801ee84:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee86:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee88:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801ee8c:	4b48      	ldr	r3, [pc, #288]	; (801efb0 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee8e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee90:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801ee94:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ee96:	f7fd fb07 	bl	801c4a8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801ee9a:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ee9c:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801eea0:	8943      	ldrh	r3, [r0, #10]
 801eea2:	455b      	cmp	r3, fp
 801eea4:	d3ab      	bcc.n	801edfe <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801eea6:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801eea8:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801eeaa:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801eeae:	f7fd fafb 	bl	801c4a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eeb2:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eeb4:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801eeb6:	442b      	add	r3, r5
 801eeb8:	eba3 030a 	sub.w	r3, r3, sl
 801eebc:	b29b      	uxth	r3, r3
 801eebe:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eec0:	2a00      	cmp	r2, #0
 801eec2:	f040 835c 	bne.w	801f57e <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801eec6:	6822      	ldr	r2, [r4, #0]
 801eec8:	8912      	ldrh	r2, [r2, #8]
 801eeca:	429a      	cmp	r2, r3
 801eecc:	d005      	beq.n	801eeda <tcp_input+0xf6>
 801eece:	4b39      	ldr	r3, [pc, #228]	; (801efb4 <tcp_input+0x1d0>)
 801eed0:	22e0      	movs	r2, #224	; 0xe0
 801eed2:	4939      	ldr	r1, [pc, #228]	; (801efb8 <tcp_input+0x1d4>)
 801eed4:	4839      	ldr	r0, [pc, #228]	; (801efbc <tcp_input+0x1d8>)
 801eed6:	f007 fc3d 	bl	8026754 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801eeda:	6835      	ldr	r5, [r6, #0]
 801eedc:	8828      	ldrh	r0, [r5, #0]
 801eede:	f7fb fb33 	bl	801a548 <lwip_htons>
 801eee2:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801eee4:	6835      	ldr	r5, [r6, #0]
 801eee6:	8868      	ldrh	r0, [r5, #2]
 801eee8:	f7fb fb2e 	bl	801a548 <lwip_htons>
 801eeec:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eeee:	6835      	ldr	r5, [r6, #0]
 801eef0:	6868      	ldr	r0, [r5, #4]
 801eef2:	f7fb fb2d 	bl	801a550 <lwip_htonl>
 801eef6:	4b32      	ldr	r3, [pc, #200]	; (801efc0 <tcp_input+0x1dc>)
 801eef8:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eefa:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eefc:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eefe:	68a8      	ldr	r0, [r5, #8]
 801ef00:	f7fb fb26 	bl	801a550 <lwip_htonl>
 801ef04:	4b2f      	ldr	r3, [pc, #188]	; (801efc4 <tcp_input+0x1e0>)
 801ef06:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ef08:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ef0a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ef0c:	89e8      	ldrh	r0, [r5, #14]
 801ef0e:	f7fb fb1b 	bl	801a548 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801ef12:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ef14:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ef16:	8998      	ldrh	r0, [r3, #12]
 801ef18:	f7fb fb16 	bl	801a548 <lwip_htons>
 801ef1c:	492a      	ldr	r1, [pc, #168]	; (801efc8 <tcp_input+0x1e4>)
 801ef1e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801ef22:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801ef24:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ef26:	0782      	lsls	r2, r0, #30
 801ef28:	f040 8139 	bne.w	801f19e <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801ef2c:	4a27      	ldr	r2, [pc, #156]	; (801efcc <tcp_input+0x1e8>)
 801ef2e:	9205      	str	r2, [sp, #20]
 801ef30:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef32:	4b27      	ldr	r3, [pc, #156]	; (801efd0 <tcp_input+0x1ec>)
 801ef34:	681d      	ldr	r5, [r3, #0]
 801ef36:	2d00      	cmp	r5, #0
 801ef38:	f000 80e0 	beq.w	801f0fc <tcp_input+0x318>
  prev = NULL;
 801ef3c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ef40:	4b1c      	ldr	r3, [pc, #112]	; (801efb4 <tcp_input+0x1d0>)
 801ef42:	f8df b098 	ldr.w	fp, [pc, #152]	; 801efdc <tcp_input+0x1f8>
 801ef46:	f8df a074 	ldr.w	sl, [pc, #116]	; 801efbc <tcp_input+0x1d8>
 801ef4a:	e019      	b.n	801ef80 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ef4c:	2a0a      	cmp	r2, #10
 801ef4e:	f000 80cd 	beq.w	801f0ec <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ef52:	2a01      	cmp	r2, #1
 801ef54:	f000 80c3 	beq.w	801f0de <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef58:	7a29      	ldrb	r1, [r5, #8]
 801ef5a:	b131      	cbz	r1, 801ef6a <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ef5c:	687a      	ldr	r2, [r7, #4]
 801ef5e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801ef62:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef64:	b2d2      	uxtb	r2, r2
 801ef66:	4291      	cmp	r1, r2
 801ef68:	d104      	bne.n	801ef74 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801ef6a:	6832      	ldr	r2, [r6, #0]
 801ef6c:	8b28      	ldrh	r0, [r5, #24]
 801ef6e:	8811      	ldrh	r1, [r2, #0]
 801ef70:	4288      	cmp	r0, r1
 801ef72:	d035      	beq.n	801efe0 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef74:	68ea      	ldr	r2, [r5, #12]
 801ef76:	46a8      	mov	r8, r5
 801ef78:	2a00      	cmp	r2, #0
 801ef7a:	f000 80bf 	beq.w	801f0fc <tcp_input+0x318>
 801ef7e:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ef80:	7d2a      	ldrb	r2, [r5, #20]
 801ef82:	2a00      	cmp	r2, #0
 801ef84:	d1e2      	bne.n	801ef4c <tcp_input+0x168>
 801ef86:	22fb      	movs	r2, #251	; 0xfb
 801ef88:	4659      	mov	r1, fp
 801ef8a:	4650      	mov	r0, sl
 801ef8c:	f007 fbe2 	bl	8026754 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ef90:	7d2a      	ldrb	r2, [r5, #20]
 801ef92:	4b08      	ldr	r3, [pc, #32]	; (801efb4 <tcp_input+0x1d0>)
 801ef94:	e7da      	b.n	801ef4c <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ef96:	4b07      	ldr	r3, [pc, #28]	; (801efb4 <tcp_input+0x1d0>)
 801ef98:	2283      	movs	r2, #131	; 0x83
 801ef9a:	490e      	ldr	r1, [pc, #56]	; (801efd4 <tcp_input+0x1f0>)
 801ef9c:	4807      	ldr	r0, [pc, #28]	; (801efbc <tcp_input+0x1d8>)
 801ef9e:	f007 fbd9 	bl	8026754 <iprintf>
 801efa2:	e726      	b.n	801edf2 <tcp_input+0xe>
 801efa4:	2002e490 	.word	0x2002e490
 801efa8:	2001f2a8 	.word	0x2001f2a8
 801efac:	2002e49c 	.word	0x2002e49c
 801efb0:	2002e494 	.word	0x2002e494
 801efb4:	08045db4 	.word	0x08045db4
 801efb8:	08045fd8 	.word	0x08045fd8
 801efbc:	0802b44c 	.word	0x0802b44c
 801efc0:	2002e484 	.word	0x2002e484
 801efc4:	2002e460 	.word	0x2002e460
 801efc8:	2002e464 	.word	0x2002e464
 801efcc:	2002e49e 	.word	0x2002e49e
 801efd0:	2002e444 	.word	0x2002e444
 801efd4:	08045fa4 	.word	0x08045fa4
 801efd8:	2002e498 	.word	0x2002e498
 801efdc:	08045ff8 	.word	0x08045ff8
    if (pcb->remote_port == tcphdr->src &&
 801efe0:	8852      	ldrh	r2, [r2, #2]
 801efe2:	8ae9      	ldrh	r1, [r5, #22]
 801efe4:	4291      	cmp	r1, r2
 801efe6:	d1c5      	bne.n	801ef74 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801efe8:	6869      	ldr	r1, [r5, #4]
 801efea:	693a      	ldr	r2, [r7, #16]
 801efec:	4291      	cmp	r1, r2
 801efee:	d1c1      	bne.n	801ef74 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eff0:	6829      	ldr	r1, [r5, #0]
 801eff2:	697a      	ldr	r2, [r7, #20]
 801eff4:	4291      	cmp	r1, r2
 801eff6:	d1bd      	bne.n	801ef74 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801eff8:	68eb      	ldr	r3, [r5, #12]
 801effa:	42ab      	cmp	r3, r5
 801effc:	f000 846e 	beq.w	801f8dc <tcp_input+0xaf8>
      if (prev != NULL) {
 801f000:	f1b8 0f00 	cmp.w	r8, #0
 801f004:	d009      	beq.n	801f01a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801f006:	4a75      	ldr	r2, [pc, #468]	; (801f1dc <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801f008:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801f00c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801f00e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801f010:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f012:	68eb      	ldr	r3, [r5, #12]
 801f014:	42ab      	cmp	r3, r5
 801f016:	f000 8447 	beq.w	801f8a8 <tcp_input+0xac4>
    inseg.next = NULL;
 801f01a:	2300      	movs	r3, #0
 801f01c:	4f70      	ldr	r7, [pc, #448]	; (801f1e0 <tcp_input+0x3fc>)
    recv_data = NULL;
 801f01e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801f208 <tcp_input+0x424>
    recv_flags = 0;
 801f022:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801f20c <tcp_input+0x428>
    recv_acked = 0;
 801f026:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801f210 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801f02a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801f02c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801f02e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801f032:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801f036:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801f03a:	4b6a      	ldr	r3, [pc, #424]	; (801f1e4 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801f03c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801f03e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801f040:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801f042:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801f044:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801f046:	071a      	lsls	r2, r3, #28
 801f048:	d503      	bpl.n	801f052 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801f04a:	7b62      	ldrb	r2, [r4, #13]
 801f04c:	f042 0201 	orr.w	r2, r2, #1
 801f050:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801f052:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801f054:	b172      	cbz	r2, 801f074 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801f056:	4628      	mov	r0, r5
 801f058:	f7fe ff78 	bl	801df4c <tcp_process_refused_data>
 801f05c:	300d      	adds	r0, #13
 801f05e:	f000 8296 	beq.w	801f58e <tcp_input+0x7aa>
 801f062:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f064:	b123      	cbz	r3, 801f070 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801f066:	9b05      	ldr	r3, [sp, #20]
 801f068:	881b      	ldrh	r3, [r3, #0]
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	f040 828f 	bne.w	801f58e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801f070:	4b5c      	ldr	r3, [pc, #368]	; (801f1e4 <tcp_input+0x400>)
 801f072:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801f074:	4c5c      	ldr	r4, [pc, #368]	; (801f1e8 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801f076:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801f078:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801f07a:	f140 8163 	bpl.w	801f344 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801f07e:	7d29      	ldrb	r1, [r5, #20]
 801f080:	2902      	cmp	r1, #2
 801f082:	f000 8350 	beq.w	801f726 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801f086:	4b59      	ldr	r3, [pc, #356]	; (801f1ec <tcp_input+0x408>)
 801f088:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	429a      	cmp	r2, r3
 801f08e:	f000 844a 	beq.w	801f926 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f092:	1a9b      	subs	r3, r3, r2
 801f094:	d404      	bmi.n	801f0a0 <tcp_input+0x2bc>
 801f096:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801f098:	1a9b      	subs	r3, r3, r2
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	f340 833e 	ble.w	801f71c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801f0a0:	f89a 3000 	ldrb.w	r3, [sl]
 801f0a4:	0718      	lsls	r0, r3, #28
 801f0a6:	f140 8278 	bpl.w	801f59a <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801f0aa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801f0ae:	b11b      	cbz	r3, 801f0b8 <tcp_input+0x2d4>
 801f0b0:	f06f 010d 	mvn.w	r1, #13
 801f0b4:	6928      	ldr	r0, [r5, #16]
 801f0b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f0b8:	4848      	ldr	r0, [pc, #288]	; (801f1dc <tcp_input+0x3f8>)
 801f0ba:	4629      	mov	r1, r5
 801f0bc:	f7fe fbc4 	bl	801d848 <tcp_pcb_remove>
        tcp_free(pcb);
 801f0c0:	4628      	mov	r0, r5
 801f0c2:	f7fd fdbd 	bl	801cc40 <tcp_free>
    tcp_input_pcb = NULL;
 801f0c6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801f0c8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801f0ca:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801f0cc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801f0d0:	b110      	cbz	r0, 801f0d8 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801f0d2:	f7fd fa75 	bl	801c5c0 <pbuf_free>
      inseg.p = NULL;
 801f0d6:	607d      	str	r5, [r7, #4]
}
 801f0d8:	b009      	add	sp, #36	; 0x24
 801f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f0de:	22fd      	movs	r2, #253	; 0xfd
 801f0e0:	4943      	ldr	r1, [pc, #268]	; (801f1f0 <tcp_input+0x40c>)
 801f0e2:	4650      	mov	r0, sl
 801f0e4:	f007 fb36 	bl	8026754 <iprintf>
 801f0e8:	4b42      	ldr	r3, [pc, #264]	; (801f1f4 <tcp_input+0x410>)
 801f0ea:	e735      	b.n	801ef58 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801f0ec:	22fc      	movs	r2, #252	; 0xfc
 801f0ee:	4942      	ldr	r1, [pc, #264]	; (801f1f8 <tcp_input+0x414>)
 801f0f0:	4650      	mov	r0, sl
 801f0f2:	f007 fb2f 	bl	8026754 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801f0f6:	7d2a      	ldrb	r2, [r5, #20]
 801f0f8:	4b3e      	ldr	r3, [pc, #248]	; (801f1f4 <tcp_input+0x410>)
 801f0fa:	e72a      	b.n	801ef52 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f0fc:	4b3f      	ldr	r3, [pc, #252]	; (801f1fc <tcp_input+0x418>)
 801f0fe:	681d      	ldr	r5, [r3, #0]
 801f100:	2d00      	cmp	r5, #0
 801f102:	d05b      	beq.n	801f1bc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f104:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801f1f4 <tcp_input+0x410>
 801f108:	f8df b108 	ldr.w	fp, [pc, #264]	; 801f214 <tcp_input+0x430>
 801f10c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801f218 <tcp_input+0x434>
 801f110:	e002      	b.n	801f118 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801f112:	68ed      	ldr	r5, [r5, #12]
 801f114:	2d00      	cmp	r5, #0
 801f116:	d051      	beq.n	801f1bc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801f118:	7d2b      	ldrb	r3, [r5, #20]
 801f11a:	2b0a      	cmp	r3, #10
 801f11c:	4643      	mov	r3, r8
 801f11e:	d005      	beq.n	801f12c <tcp_input+0x348>
 801f120:	f240 121f 	movw	r2, #287	; 0x11f
 801f124:	4659      	mov	r1, fp
 801f126:	4650      	mov	r0, sl
 801f128:	f007 fb14 	bl	8026754 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f12c:	7a2a      	ldrb	r2, [r5, #8]
 801f12e:	b132      	cbz	r2, 801f13e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801f136:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f138:	b2db      	uxtb	r3, r3
 801f13a:	429a      	cmp	r2, r3
 801f13c:	d1e9      	bne.n	801f112 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801f13e:	6832      	ldr	r2, [r6, #0]
 801f140:	8b2b      	ldrh	r3, [r5, #24]
 801f142:	8811      	ldrh	r1, [r2, #0]
 801f144:	428b      	cmp	r3, r1
 801f146:	d1e4      	bne.n	801f112 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f148:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801f14a:	8ae8      	ldrh	r0, [r5, #22]
 801f14c:	4290      	cmp	r0, r2
 801f14e:	d1e0      	bne.n	801f112 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801f150:	6869      	ldr	r1, [r5, #4]
 801f152:	693a      	ldr	r2, [r7, #16]
 801f154:	4291      	cmp	r1, r2
 801f156:	d1dc      	bne.n	801f112 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801f158:	6829      	ldr	r1, [r5, #0]
 801f15a:	697a      	ldr	r2, [r7, #20]
 801f15c:	4291      	cmp	r1, r2
 801f15e:	d1d8      	bne.n	801f112 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801f160:	4a20      	ldr	r2, [pc, #128]	; (801f1e4 <tcp_input+0x400>)
 801f162:	7812      	ldrb	r2, [r2, #0]
 801f164:	0757      	lsls	r7, r2, #29
 801f166:	f53f ae4a 	bmi.w	801edfe <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801f16a:	0796      	lsls	r6, r2, #30
 801f16c:	f140 8395 	bpl.w	801f89a <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f170:	4a1e      	ldr	r2, [pc, #120]	; (801f1ec <tcp_input+0x408>)
 801f172:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801f174:	6812      	ldr	r2, [r2, #0]
 801f176:	1a51      	subs	r1, r2, r1
 801f178:	d404      	bmi.n	801f184 <tcp_input+0x3a0>
 801f17a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801f17c:	1b89      	subs	r1, r1, r6
 801f17e:	2900      	cmp	r1, #0
 801f180:	f340 83ba 	ble.w	801f8f8 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801f184:	9b05      	ldr	r3, [sp, #20]
 801f186:	881b      	ldrh	r3, [r3, #0]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	f43f ae38 	beq.w	801edfe <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801f18e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801f190:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801f192:	f043 0302 	orr.w	r3, r3, #2
 801f196:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801f198:	f001 fbc4 	bl	8020924 <tcp_output>
        pbuf_free(p);
 801f19c:	e62f      	b.n	801edfe <tcp_input+0x1a>
    tcplen++;
 801f19e:	1c5a      	adds	r2, r3, #1
 801f1a0:	4917      	ldr	r1, [pc, #92]	; (801f200 <tcp_input+0x41c>)
 801f1a2:	b292      	uxth	r2, r2
 801f1a4:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801f1a6:	4293      	cmp	r3, r2
    tcplen++;
 801f1a8:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801f1aa:	f67f aec2 	bls.w	801ef32 <tcp_input+0x14e>
 801f1ae:	e626      	b.n	801edfe <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801f1b0:	4a14      	ldr	r2, [pc, #80]	; (801f204 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f1b2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801f1b4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801f1b6:	f7fd f977 	bl	801c4a8 <pbuf_remove_header>
 801f1ba:	e68e      	b.n	801eeda <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f1bc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801f21c <tcp_input+0x438>
 801f1c0:	f8da 8000 	ldr.w	r8, [sl]
 801f1c4:	f1b8 0f00 	cmp.w	r8, #0
 801f1c8:	f000 8237 	beq.w	801f63a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f1cc:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f1d0:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801f1d2:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801f1d4:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f1d6:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801f1da:	e027      	b.n	801f22c <tcp_input+0x448>
 801f1dc:	2002e444 	.word	0x2002e444
 801f1e0:	2002e468 	.word	0x2002e468
 801f1e4:	2002e464 	.word	0x2002e464
 801f1e8:	2002e488 	.word	0x2002e488
 801f1ec:	2002e484 	.word	0x2002e484
 801f1f0:	0804604c 	.word	0x0804604c
 801f1f4:	08045db4 	.word	0x08045db4
 801f1f8:	08046020 	.word	0x08046020
 801f1fc:	2002e45c 	.word	0x2002e45c
 801f200:	2002e49e 	.word	0x2002e49e
 801f204:	2002e494 	.word	0x2002e494
 801f208:	2002e47c 	.word	0x2002e47c
 801f20c:	2002e480 	.word	0x2002e480
 801f210:	2002e478 	.word	0x2002e478
 801f214:	080460cc 	.word	0x080460cc
 801f218:	0802b44c 	.word	0x0802b44c
 801f21c:	2002e450 	.word	0x2002e450
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801f220:	68eb      	ldr	r3, [r5, #12]
 801f222:	4629      	mov	r1, r5
 801f224:	461d      	mov	r5, r3
 801f226:	2b00      	cmp	r3, #0
 801f228:	f000 8208 	beq.w	801f63c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f22c:	7a2a      	ldrb	r2, [r5, #8]
 801f22e:	b12a      	cbz	r2, 801f23c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f230:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801f234:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801f236:	b2db      	uxtb	r3, r3
 801f238:	429a      	cmp	r2, r3
 801f23a:	d1f1      	bne.n	801f220 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801f23c:	8aea      	ldrh	r2, [r5, #22]
 801f23e:	8843      	ldrh	r3, [r0, #2]
 801f240:	429a      	cmp	r2, r3
 801f242:	d1ed      	bne.n	801f220 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801f244:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801f246:	b10a      	cbz	r2, 801f24c <tcp_input+0x468>
 801f248:	4572      	cmp	r2, lr
 801f24a:	d1e9      	bne.n	801f220 <tcp_input+0x43c>
      if (prev != NULL) {
 801f24c:	b129      	cbz	r1, 801f25a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f24e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801f250:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801f254:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801f256:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801f25a:	4a9d      	ldr	r2, [pc, #628]	; (801f4d0 <tcp_input+0x6ec>)
 801f25c:	7812      	ldrb	r2, [r2, #0]
 801f25e:	0751      	lsls	r1, r2, #29
 801f260:	f53f adcd 	bmi.w	801edfe <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801f264:	f012 0810 	ands.w	r8, r2, #16
 801f268:	f040 8273 	bne.w	801f752 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801f26c:	0791      	lsls	r1, r2, #30
 801f26e:	f57f adc6 	bpl.w	801edfe <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801f272:	7d68      	ldrb	r0, [r5, #21]
 801f274:	f7fe fc90 	bl	801db98 <tcp_alloc>
    if (npcb == NULL) {
 801f278:	4681      	mov	r9, r0
 801f27a:	2800      	cmp	r0, #0
 801f27c:	f000 82ce 	beq.w	801f81c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801f280:	4b94      	ldr	r3, [pc, #592]	; (801f4d4 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801f282:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801f284:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801f286:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801f288:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801f28a:	7849      	ldrb	r1, [r1, #1]
 801f28c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801f290:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801f292:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f294:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f296:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801f298:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f29a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f29c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801f29e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f2a0:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801f2a2:	2303      	movs	r3, #3
 801f2a4:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801f2a6:	f7fe fee7 	bl	801e078 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2aa:	4b8a      	ldr	r3, [pc, #552]	; (801f4d4 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801f2ac:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2b0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801f2b2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2b6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801f2b8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801f2bc:	4a86      	ldr	r2, [pc, #536]	; (801f4d8 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801f2be:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801f2c2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801f2c4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801f2c8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f2cc:	7a6b      	ldrb	r3, [r5, #9]
 801f2ce:	f003 030c 	and.w	r3, r3, #12
 801f2d2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801f2d6:	7a2b      	ldrb	r3, [r5, #8]
 801f2d8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801f2dc:	6813      	ldr	r3, [r2, #0]
 801f2de:	f8c2 9000 	str.w	r9, [r2]
 801f2e2:	f8c9 300c 	str.w	r3, [r9, #12]
 801f2e6:	f001 fe49 	bl	8020f7c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801f2ea:	4b7c      	ldr	r3, [pc, #496]	; (801f4dc <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801f2ec:	4a7c      	ldr	r2, [pc, #496]	; (801f4e0 <tcp_input+0x6fc>)
 801f2ee:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801f2f0:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801f2f2:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801f2f4:	b12b      	cbz	r3, 801f302 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f2f6:	4b7b      	ldr	r3, [pc, #492]	; (801f4e4 <tcp_input+0x700>)
 801f2f8:	4648      	mov	r0, r9
 801f2fa:	f8a3 8000 	strh.w	r8, [r3]
 801f2fe:	f7ff fcd1 	bl	801eca4 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801f302:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f304:	f109 0204 	add.w	r2, r9, #4
 801f308:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801f30c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f30e:	4610      	mov	r0, r2
 801f310:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801f312:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f316:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f31a:	f004 fd4d 	bl	8023db8 <ip4_route>
 801f31e:	9a05      	ldr	r2, [sp, #20]
 801f320:	4601      	mov	r1, r0
 801f322:	4628      	mov	r0, r5
 801f324:	f7fe fec4 	bl	801e0b0 <tcp_eff_send_mss_netif>
 801f328:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f32a:	2112      	movs	r1, #18
 801f32c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f32e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f332:	f001 f8db 	bl	80204ec <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801f336:	2800      	cmp	r0, #0
 801f338:	f040 82ca 	bne.w	801f8d0 <tcp_input+0xaec>
    tcp_output(npcb);
 801f33c:	4648      	mov	r0, r9
 801f33e:	f001 faf1 	bl	8020924 <tcp_output>
 801f342:	e55c      	b.n	801edfe <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f344:	f013 0102 	ands.w	r1, r3, #2
 801f348:	d004      	beq.n	801f354 <tcp_input+0x570>
 801f34a:	7d2a      	ldrb	r2, [r5, #20]
 801f34c:	3a02      	subs	r2, #2
 801f34e:	2a01      	cmp	r2, #1
 801f350:	f200 81e4 	bhi.w	801f71c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f354:	8b6a      	ldrh	r2, [r5, #26]
 801f356:	06d0      	lsls	r0, r2, #27
 801f358:	d402      	bmi.n	801f360 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801f35a:	4a63      	ldr	r2, [pc, #396]	; (801f4e8 <tcp_input+0x704>)
 801f35c:	6812      	ldr	r2, [r2, #0]
 801f35e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801f360:	4a5e      	ldr	r2, [pc, #376]	; (801f4dc <tcp_input+0x6f8>)
 801f362:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801f364:	2200      	movs	r2, #0
 801f366:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801f36a:	b140      	cbz	r0, 801f37e <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801f36c:	485d      	ldr	r0, [pc, #372]	; (801f4e4 <tcp_input+0x700>)
 801f36e:	8002      	strh	r2, [r0, #0]
 801f370:	4628      	mov	r0, r5
 801f372:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801f376:	f7ff fc95 	bl	801eca4 <tcp_parseopt.part.0>
 801f37a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801f37e:	7d2a      	ldrb	r2, [r5, #20]
 801f380:	3a02      	subs	r2, #2
 801f382:	2a07      	cmp	r2, #7
 801f384:	f63f ae8c 	bhi.w	801f0a0 <tcp_input+0x2bc>
 801f388:	e8df f002 	tbb	[pc, r2]
 801f38c:	89041331 	.word	0x89041331
 801f390:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801f394:	4628      	mov	r0, r5
 801f396:	f7fe ffdd 	bl	801e354 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f39a:	f89a 3000 	ldrb.w	r3, [sl]
 801f39e:	069e      	lsls	r6, r3, #26
 801f3a0:	f57f ae7e 	bpl.w	801f0a0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f3a4:	8b6b      	ldrh	r3, [r5, #26]
 801f3a6:	f043 0302 	orr.w	r3, r3, #2
 801f3aa:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801f3ac:	2307      	movs	r3, #7
 801f3ae:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f3b0:	e676      	b.n	801f0a0 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801f3b2:	06da      	lsls	r2, r3, #27
 801f3b4:	f140 821c 	bpl.w	801f7f0 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f3b8:	4b4c      	ldr	r3, [pc, #304]	; (801f4ec <tcp_input+0x708>)
 801f3ba:	6819      	ldr	r1, [r3, #0]
 801f3bc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f3be:	43db      	mvns	r3, r3
 801f3c0:	42cb      	cmn	r3, r1
 801f3c2:	d404      	bmi.n	801f3ce <tcp_input+0x5ea>
 801f3c4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f3c6:	1acb      	subs	r3, r1, r3
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	f340 823a 	ble.w	801f842 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3ce:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3d0:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3d2:	8810      	ldrh	r0, [r2, #0]
 801f3d4:	4a3f      	ldr	r2, [pc, #252]	; (801f4d4 <tcp_input+0x6f0>)
 801f3d6:	6812      	ldr	r2, [r2, #0]
 801f3d8:	4402      	add	r2, r0
 801f3da:	8818      	ldrh	r0, [r3, #0]
 801f3dc:	9002      	str	r0, [sp, #8]
 801f3de:	4628      	mov	r0, r5
 801f3e0:	885b      	ldrh	r3, [r3, #2]
 801f3e2:	e9cd 9300 	strd	r9, r3, [sp]
 801f3e6:	4b42      	ldr	r3, [pc, #264]	; (801f4f0 <tcp_input+0x70c>)
 801f3e8:	f001 fa22 	bl	8020830 <tcp_rst>
    if (err != ERR_ABRT) {
 801f3ec:	e658      	b.n	801f0a0 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f3ee:	f003 0212 	and.w	r2, r3, #18
 801f3f2:	2a12      	cmp	r2, #18
 801f3f4:	f000 813b 	beq.w	801f66e <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801f3f8:	06d9      	lsls	r1, r3, #27
 801f3fa:	f57f ae51 	bpl.w	801f0a0 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3fe:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f400:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f402:	8811      	ldrh	r1, [r2, #0]
 801f404:	4a33      	ldr	r2, [pc, #204]	; (801f4d4 <tcp_input+0x6f0>)
 801f406:	8818      	ldrh	r0, [r3, #0]
 801f408:	6812      	ldr	r2, [r2, #0]
 801f40a:	440a      	add	r2, r1
 801f40c:	4937      	ldr	r1, [pc, #220]	; (801f4ec <tcp_input+0x708>)
 801f40e:	6809      	ldr	r1, [r1, #0]
 801f410:	9002      	str	r0, [sp, #8]
 801f412:	4628      	mov	r0, r5
 801f414:	885b      	ldrh	r3, [r3, #2]
 801f416:	e9cd 9300 	strd	r9, r3, [sp]
 801f41a:	4b35      	ldr	r3, [pc, #212]	; (801f4f0 <tcp_input+0x70c>)
 801f41c:	f001 fa08 	bl	8020830 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f420:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801f424:	2b05      	cmp	r3, #5
 801f426:	f63f ae3b 	bhi.w	801f0a0 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801f42a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801f42c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801f42e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801f430:	f001 fc80 	bl	8020d34 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801f434:	e634      	b.n	801f0a0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f436:	4628      	mov	r0, r5
 801f438:	f7fe ff8c 	bl	801e354 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f43c:	4b24      	ldr	r3, [pc, #144]	; (801f4d0 <tcp_input+0x6ec>)
 801f43e:	781b      	ldrb	r3, [r3, #0]
 801f440:	06de      	lsls	r6, r3, #27
 801f442:	f57f ae2d 	bpl.w	801f0a0 <tcp_input+0x2bc>
 801f446:	4b29      	ldr	r3, [pc, #164]	; (801f4ec <tcp_input+0x708>)
 801f448:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	429a      	cmp	r2, r3
 801f44e:	f47f ae27 	bne.w	801f0a0 <tcp_input+0x2bc>
 801f452:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f454:	2b00      	cmp	r3, #0
 801f456:	f47f ae23 	bne.w	801f0a0 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801f45a:	f89a 3000 	ldrb.w	r3, [sl]
 801f45e:	f043 0310 	orr.w	r3, r3, #16
 801f462:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801f466:	e61b      	b.n	801f0a0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801f468:	4628      	mov	r0, r5
 801f46a:	f7fe ff73 	bl	801e354 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f46e:	f89a 3000 	ldrb.w	r3, [sl]
 801f472:	069a      	lsls	r2, r3, #26
 801f474:	f57f ae14 	bpl.w	801f0a0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801f478:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f47a:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801f47c:	f043 0302 	orr.w	r3, r3, #2
 801f480:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801f482:	f7fd fee1 	bl	801d248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f486:	4b14      	ldr	r3, [pc, #80]	; (801f4d8 <tcp_input+0x6f4>)
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	42ab      	cmp	r3, r5
 801f48c:	d061      	beq.n	801f552 <tcp_input+0x76e>
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d062      	beq.n	801f558 <tcp_input+0x774>
 801f492:	68da      	ldr	r2, [r3, #12]
 801f494:	42aa      	cmp	r2, r5
 801f496:	f000 8210 	beq.w	801f8ba <tcp_input+0xad6>
 801f49a:	4613      	mov	r3, r2
 801f49c:	e7f7      	b.n	801f48e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801f49e:	4628      	mov	r0, r5
 801f4a0:	f7fe ff58 	bl	801e354 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f4a8:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f4ac:	4b08      	ldr	r3, [pc, #32]	; (801f4d0 <tcp_input+0x6ec>)
 801f4ae:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801f4b0:	f000 818e 	beq.w	801f7d0 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f4b4:	06d8      	lsls	r0, r3, #27
 801f4b6:	d504      	bpl.n	801f4c2 <tcp_input+0x6de>
 801f4b8:	4b0c      	ldr	r3, [pc, #48]	; (801f4ec <tcp_input+0x708>)
 801f4ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	429a      	cmp	r2, r3
 801f4c0:	d038      	beq.n	801f534 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801f4c2:	8b6b      	ldrh	r3, [r5, #26]
 801f4c4:	f043 0302 	orr.w	r3, r3, #2
 801f4c8:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801f4ca:	2308      	movs	r3, #8
 801f4cc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f4ce:	e5e7      	b.n	801f0a0 <tcp_input+0x2bc>
 801f4d0:	2002e464 	.word	0x2002e464
 801f4d4:	2002e484 	.word	0x2002e484
 801f4d8:	2002e444 	.word	0x2002e444
 801f4dc:	2002e49c 	.word	0x2002e49c
 801f4e0:	2002e448 	.word	0x2002e448
 801f4e4:	2002e48c 	.word	0x2002e48c
 801f4e8:	2002e454 	.word	0x2002e454
 801f4ec:	2002e460 	.word	0x2002e460
 801f4f0:	2001f2bc 	.word	0x2001f2bc
      tcp_receive(pcb);
 801f4f4:	4628      	mov	r0, r5
 801f4f6:	f7fe ff2d 	bl	801e354 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f4fa:	4ba8      	ldr	r3, [pc, #672]	; (801f79c <tcp_input+0x9b8>)
 801f4fc:	781b      	ldrb	r3, [r3, #0]
 801f4fe:	06db      	lsls	r3, r3, #27
 801f500:	f57f adce 	bpl.w	801f0a0 <tcp_input+0x2bc>
 801f504:	4ba6      	ldr	r3, [pc, #664]	; (801f7a0 <tcp_input+0x9bc>)
 801f506:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	429a      	cmp	r2, r3
 801f50c:	f47f adc8 	bne.w	801f0a0 <tcp_input+0x2bc>
 801f510:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f512:	2b00      	cmp	r3, #0
 801f514:	f47f adc4 	bne.w	801f0a0 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801f518:	4628      	mov	r0, r5
 801f51a:	f7fd fe95 	bl	801d248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f51e:	4ba1      	ldr	r3, [pc, #644]	; (801f7a4 <tcp_input+0x9c0>)
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	42ab      	cmp	r3, r5
 801f524:	d015      	beq.n	801f552 <tcp_input+0x76e>
 801f526:	b1bb      	cbz	r3, 801f558 <tcp_input+0x774>
 801f528:	68da      	ldr	r2, [r3, #12]
 801f52a:	42aa      	cmp	r2, r5
 801f52c:	f000 81c5 	beq.w	801f8ba <tcp_input+0xad6>
 801f530:	4613      	mov	r3, r2
 801f532:	e7f8      	b.n	801f526 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f534:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f536:	2b00      	cmp	r3, #0
 801f538:	d1c3      	bne.n	801f4c2 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801f53a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f53c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801f53e:	f043 0302 	orr.w	r3, r3, #2
 801f542:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801f544:	f7fd fe80 	bl	801d248 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f548:	4b96      	ldr	r3, [pc, #600]	; (801f7a4 <tcp_input+0x9c0>)
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	42ab      	cmp	r3, r5
 801f54e:	f040 81b7 	bne.w	801f8c0 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801f552:	68eb      	ldr	r3, [r5, #12]
 801f554:	4a93      	ldr	r2, [pc, #588]	; (801f7a4 <tcp_input+0x9c0>)
 801f556:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f558:	4b93      	ldr	r3, [pc, #588]	; (801f7a8 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801f55a:	220a      	movs	r2, #10
 801f55c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f55e:	681a      	ldr	r2, [r3, #0]
 801f560:	601d      	str	r5, [r3, #0]
 801f562:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801f564:	2201      	movs	r2, #1
 801f566:	4b91      	ldr	r3, [pc, #580]	; (801f7ac <tcp_input+0x9c8>)
 801f568:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f56a:	f001 fd07 	bl	8020f7c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801f56e:	e597      	b.n	801f0a0 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801f570:	4b8f      	ldr	r3, [pc, #572]	; (801f7b0 <tcp_input+0x9cc>)
 801f572:	22c2      	movs	r2, #194	; 0xc2
 801f574:	498f      	ldr	r1, [pc, #572]	; (801f7b4 <tcp_input+0x9d0>)
 801f576:	4890      	ldr	r0, [pc, #576]	; (801f7b8 <tcp_input+0x9d4>)
 801f578:	f007 f8ec 	bl	8026754 <iprintf>
 801f57c:	e47d      	b.n	801ee7a <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801f57e:	4b8c      	ldr	r3, [pc, #560]	; (801f7b0 <tcp_input+0x9cc>)
 801f580:	22df      	movs	r2, #223	; 0xdf
 801f582:	498e      	ldr	r1, [pc, #568]	; (801f7bc <tcp_input+0x9d8>)
 801f584:	488c      	ldr	r0, [pc, #560]	; (801f7b8 <tcp_input+0x9d4>)
 801f586:	f007 f8e5 	bl	8026754 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801f58a:	8923      	ldrh	r3, [r4, #8]
 801f58c:	e49b      	b.n	801eec6 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801f58e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801f590:	2b00      	cmp	r3, #0
 801f592:	f000 80d9 	beq.w	801f748 <tcp_input+0x964>
 801f596:	4c8a      	ldr	r4, [pc, #552]	; (801f7c0 <tcp_input+0x9dc>)
 801f598:	e595      	b.n	801f0c6 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801f59a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f59e:	b15a      	cbz	r2, 801f5b8 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801f5a0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801f5a4:	b12b      	cbz	r3, 801f5b2 <tcp_input+0x7ce>
 801f5a6:	4629      	mov	r1, r5
 801f5a8:	6928      	ldr	r0, [r5, #16]
 801f5aa:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801f5ac:	300d      	adds	r0, #13
 801f5ae:	f43f ad8a 	beq.w	801f0c6 <tcp_input+0x2e2>
          recv_acked = 0;
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801f5b8:	4628      	mov	r0, r5
 801f5ba:	f7fe fe2b 	bl	801e214 <tcp_input_delayed_close>
 801f5be:	2800      	cmp	r0, #0
 801f5c0:	f47f ad81 	bne.w	801f0c6 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801f5c4:	f8d8 3000 	ldr.w	r3, [r8]
 801f5c8:	b1fb      	cbz	r3, 801f60a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801f5ca:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f5cc:	b133      	cbz	r3, 801f5dc <tcp_input+0x7f8>
 801f5ce:	4b78      	ldr	r3, [pc, #480]	; (801f7b0 <tcp_input+0x9cc>)
 801f5d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801f5d4:	497b      	ldr	r1, [pc, #492]	; (801f7c4 <tcp_input+0x9e0>)
 801f5d6:	4878      	ldr	r0, [pc, #480]	; (801f7b8 <tcp_input+0x9d4>)
 801f5d8:	f007 f8bc 	bl	8026754 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801f5dc:	8b6b      	ldrh	r3, [r5, #26]
 801f5de:	f013 0310 	ands.w	r3, r3, #16
 801f5e2:	f040 8113 	bne.w	801f80c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f5e6:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f5ea:	2e00      	cmp	r6, #0
 801f5ec:	f000 8121 	beq.w	801f832 <tcp_input+0xa4e>
 801f5f0:	f8d8 2000 	ldr.w	r2, [r8]
 801f5f4:	4629      	mov	r1, r5
 801f5f6:	6928      	ldr	r0, [r5, #16]
 801f5f8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801f5fa:	f110 0f0d 	cmn.w	r0, #13
 801f5fe:	f43f ad62 	beq.w	801f0c6 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801f602:	b110      	cbz	r0, 801f60a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801f604:	f8d8 3000 	ldr.w	r3, [r8]
 801f608:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801f60a:	f89a 3000 	ldrb.w	r3, [sl]
 801f60e:	0699      	lsls	r1, r3, #26
 801f610:	d507      	bpl.n	801f622 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801f612:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801f614:	2b00      	cmp	r3, #0
 801f616:	f000 80ad 	beq.w	801f774 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f61a:	7b5a      	ldrb	r2, [r3, #13]
 801f61c:	f042 0220 	orr.w	r2, r2, #32
 801f620:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801f622:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801f624:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801f626:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f628:	f7fe fdf4 	bl	801e214 <tcp_input_delayed_close>
 801f62c:	2800      	cmp	r0, #0
 801f62e:	f47f ad4a 	bne.w	801f0c6 <tcp_input+0x2e2>
        tcp_output(pcb);
 801f632:	4628      	mov	r0, r5
 801f634:	f001 f976 	bl	8020924 <tcp_output>
 801f638:	e545      	b.n	801f0c6 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f63a:	6830      	ldr	r0, [r6, #0]
 801f63c:	8980      	ldrh	r0, [r0, #12]
 801f63e:	f7fa ff83 	bl	801a548 <lwip_htons>
 801f642:	f010 0004 	ands.w	r0, r0, #4
 801f646:	f47f abda 	bne.w	801edfe <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f64a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f64c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f64e:	8811      	ldrh	r1, [r2, #0]
 801f650:	4a5d      	ldr	r2, [pc, #372]	; (801f7c8 <tcp_input+0x9e4>)
 801f652:	881d      	ldrh	r5, [r3, #0]
 801f654:	6812      	ldr	r2, [r2, #0]
 801f656:	440a      	add	r2, r1
 801f658:	4951      	ldr	r1, [pc, #324]	; (801f7a0 <tcp_input+0x9bc>)
 801f65a:	6809      	ldr	r1, [r1, #0]
 801f65c:	9502      	str	r5, [sp, #8]
 801f65e:	885b      	ldrh	r3, [r3, #2]
 801f660:	e9cd 9300 	strd	r9, r3, [sp]
 801f664:	4b59      	ldr	r3, [pc, #356]	; (801f7cc <tcp_input+0x9e8>)
 801f666:	f001 f8e3 	bl	8020830 <tcp_rst>
 801f66a:	f7ff bbc8 	b.w	801edfe <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801f66e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801f670:	494b      	ldr	r1, [pc, #300]	; (801f7a0 <tcp_input+0x9bc>)
 801f672:	3201      	adds	r2, #1
 801f674:	6809      	ldr	r1, [r1, #0]
 801f676:	428a      	cmp	r2, r1
 801f678:	f47f aebe 	bne.w	801f3f8 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801f67c:	4b52      	ldr	r3, [pc, #328]	; (801f7c8 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801f67e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801f680:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801f682:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f684:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801f686:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f688:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f68a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801f68c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f68e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801f690:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f692:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f694:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801f696:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801f698:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801f69c:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f69e:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f6a2:	9205      	str	r2, [sp, #20]
 801f6a4:	f004 fb88 	bl	8023db8 <ip4_route>
 801f6a8:	9a05      	ldr	r2, [sp, #20]
 801f6aa:	4601      	mov	r1, r0
 801f6ac:	4630      	mov	r0, r6
 801f6ae:	f7fe fcff 	bl	801e0b0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f6b2:	f241 131c 	movw	r3, #4380	; 0x111c
 801f6b6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f6b8:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f6ba:	0081      	lsls	r1, r0, #2
 801f6bc:	429a      	cmp	r2, r3
 801f6be:	4616      	mov	r6, r2
 801f6c0:	bf38      	it	cc
 801f6c2:	461e      	movcc	r6, r3
 801f6c4:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801f6c8:	f240 814d 	bls.w	801f966 <tcp_input+0xb82>
 801f6cc:	b28b      	uxth	r3, r1
 801f6ce:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f6d2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	f000 813d 	beq.w	801f956 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801f6dc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801f6e0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801f6e2:	3b01      	subs	r3, #1
 801f6e4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801f6e8:	2e00      	cmp	r6, #0
 801f6ea:	f000 812f 	beq.w	801f94c <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801f6ee:	6833      	ldr	r3, [r6, #0]
 801f6f0:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	f7fd fce0 	bl	801d0b8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801f6f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	f000 8122 	beq.w	801f944 <tcp_input+0xb60>
          pcb->rtime = 0;
 801f700:	2300      	movs	r3, #0
 801f702:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801f704:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f708:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801f70c:	b133      	cbz	r3, 801f71c <tcp_input+0x938>
 801f70e:	2200      	movs	r2, #0
 801f710:	4629      	mov	r1, r5
 801f712:	6928      	ldr	r0, [r5, #16]
 801f714:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801f716:	300d      	adds	r0, #13
 801f718:	f43f acd5 	beq.w	801f0c6 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801f71c:	8b6b      	ldrh	r3, [r5, #26]
 801f71e:	f043 0302 	orr.w	r3, r3, #2
 801f722:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f724:	e4bc      	b.n	801f0a0 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801f726:	4b1e      	ldr	r3, [pc, #120]	; (801f7a0 <tcp_input+0x9bc>)
 801f728:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f72a:	681b      	ldr	r3, [r3, #0]
 801f72c:	429a      	cmp	r2, r3
 801f72e:	f47f acb7 	bne.w	801f0a0 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801f732:	f89a 3000 	ldrb.w	r3, [sl]
 801f736:	f043 0308 	orr.w	r3, r3, #8
 801f73a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f73e:	8b6b      	ldrh	r3, [r5, #26]
 801f740:	f023 0301 	bic.w	r3, r3, #1
 801f744:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801f746:	e4ab      	b.n	801f0a0 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801f748:	4628      	mov	r0, r5
 801f74a:	4c1d      	ldr	r4, [pc, #116]	; (801f7c0 <tcp_input+0x9dc>)
 801f74c:	f001 f8b8 	bl	80208c0 <tcp_send_empty_ack>
 801f750:	e4b9      	b.n	801f0c6 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f752:	8802      	ldrh	r2, [r0, #0]
 801f754:	e9cd 9300 	strd	r9, r3, [sp]
 801f758:	9b05      	ldr	r3, [sp, #20]
 801f75a:	9202      	str	r2, [sp, #8]
 801f75c:	881a      	ldrh	r2, [r3, #0]
 801f75e:	4b1a      	ldr	r3, [pc, #104]	; (801f7c8 <tcp_input+0x9e4>)
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	441a      	add	r2, r3
 801f764:	4b0e      	ldr	r3, [pc, #56]	; (801f7a0 <tcp_input+0x9bc>)
 801f766:	4628      	mov	r0, r5
 801f768:	6819      	ldr	r1, [r3, #0]
 801f76a:	4b18      	ldr	r3, [pc, #96]	; (801f7cc <tcp_input+0x9e8>)
 801f76c:	f001 f860 	bl	8020830 <tcp_rst>
 801f770:	f7ff bb45 	b.w	801edfe <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f774:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801f776:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801f77a:	d001      	beq.n	801f780 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801f77c:	3301      	adds	r3, #1
 801f77e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801f780:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801f784:	2e00      	cmp	r6, #0
 801f786:	f43f af4c 	beq.w	801f622 <tcp_input+0x83e>
 801f78a:	2300      	movs	r3, #0
 801f78c:	4629      	mov	r1, r5
 801f78e:	6928      	ldr	r0, [r5, #16]
 801f790:	461a      	mov	r2, r3
 801f792:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801f794:	300d      	adds	r0, #13
 801f796:	f47f af44 	bne.w	801f622 <tcp_input+0x83e>
 801f79a:	e494      	b.n	801f0c6 <tcp_input+0x2e2>
 801f79c:	2002e464 	.word	0x2002e464
 801f7a0:	2002e460 	.word	0x2002e460
 801f7a4:	2002e444 	.word	0x2002e444
 801f7a8:	2002e45c 	.word	0x2002e45c
 801f7ac:	2002e448 	.word	0x2002e448
 801f7b0:	08045db4 	.word	0x08045db4
 801f7b4:	08045fbc 	.word	0x08045fbc
 801f7b8:	0802b44c 	.word	0x0802b44c
 801f7bc:	08045fcc 	.word	0x08045fcc
 801f7c0:	2002e488 	.word	0x2002e488
 801f7c4:	08046168 	.word	0x08046168
 801f7c8:	2002e484 	.word	0x2002e484
 801f7cc:	2001f2bc 	.word	0x2001f2bc
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f7d0:	06d9      	lsls	r1, r3, #27
 801f7d2:	f57f ac65 	bpl.w	801f0a0 <tcp_input+0x2bc>
 801f7d6:	4b6a      	ldr	r3, [pc, #424]	; (801f980 <tcp_input+0xb9c>)
 801f7d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	429a      	cmp	r2, r3
 801f7de:	f47f ac5f 	bne.w	801f0a0 <tcp_input+0x2bc>
 801f7e2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	f47f ac5b 	bne.w	801f0a0 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801f7ea:	2306      	movs	r3, #6
 801f7ec:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801f7ee:	e457      	b.n	801f0a0 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f7f0:	2900      	cmp	r1, #0
 801f7f2:	f43f ac55 	beq.w	801f0a0 <tcp_input+0x2bc>
 801f7f6:	4b63      	ldr	r3, [pc, #396]	; (801f984 <tcp_input+0xba0>)
 801f7f8:	681a      	ldr	r2, [r3, #0]
 801f7fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f7fc:	3b01      	subs	r3, #1
 801f7fe:	4293      	cmp	r3, r2
 801f800:	f47f ac4e 	bne.w	801f0a0 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801f804:	4628      	mov	r0, r5
 801f806:	f000 ff95 	bl	8020734 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801f80a:	e449      	b.n	801f0a0 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801f80c:	f8d8 0000 	ldr.w	r0, [r8]
 801f810:	f7fc fed6 	bl	801c5c0 <pbuf_free>
            tcp_abort(pcb);
 801f814:	4628      	mov	r0, r5
 801f816:	f7fe f957 	bl	801dac8 <tcp_abort>
            goto aborted;
 801f81a:	e454      	b.n	801f0c6 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f81c:	69ab      	ldr	r3, [r5, #24]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	f43f aaed 	beq.w	801edfe <tcp_input+0x1a>
 801f824:	4601      	mov	r1, r0
 801f826:	f04f 32ff 	mov.w	r2, #4294967295
 801f82a:	6928      	ldr	r0, [r5, #16]
 801f82c:	4798      	blx	r3
 801f82e:	f7ff bae6 	b.w	801edfe <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f832:	4633      	mov	r3, r6
 801f834:	4630      	mov	r0, r6
 801f836:	f8d8 2000 	ldr.w	r2, [r8]
 801f83a:	4629      	mov	r1, r5
 801f83c:	f7fe fb5a 	bl	801def4 <tcp_recv_null>
 801f840:	e6db      	b.n	801f5fa <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801f842:	2304      	movs	r3, #4
 801f844:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801f846:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d0e3      	beq.n	801f814 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f84c:	699b      	ldr	r3, [r3, #24]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d05d      	beq.n	801f90e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f852:	2200      	movs	r2, #0
 801f854:	4629      	mov	r1, r5
 801f856:	6928      	ldr	r0, [r5, #16]
 801f858:	4798      	blx	r3
          if (err != ERR_OK) {
 801f85a:	2800      	cmp	r0, #0
 801f85c:	d153      	bne.n	801f906 <tcp_input+0xb22>
          tcp_receive(pcb);
 801f85e:	4628      	mov	r0, r5
 801f860:	f7fe fd78 	bl	801e354 <tcp_receive>
          if (recv_acked != 0) {
 801f864:	f8bb 3000 	ldrh.w	r3, [fp]
 801f868:	b113      	cbz	r3, 801f870 <tcp_input+0xa8c>
            recv_acked--;
 801f86a:	3b01      	subs	r3, #1
 801f86c:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f870:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801f872:	f241 131c 	movw	r3, #4380	; 0x111c
 801f876:	004a      	lsls	r2, r1, #1
 801f878:	0088      	lsls	r0, r1, #2
 801f87a:	429a      	cmp	r2, r3
 801f87c:	4616      	mov	r6, r2
 801f87e:	bf38      	it	cc
 801f880:	461e      	movcc	r6, r3
 801f882:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801f886:	d959      	bls.n	801f93c <tcp_input+0xb58>
 801f888:	b283      	uxth	r3, r0
 801f88a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801f88e:	f89a 3000 	ldrb.w	r3, [sl]
 801f892:	069b      	lsls	r3, r3, #26
 801f894:	f57f ac04 	bpl.w	801f0a0 <tcp_input+0x2bc>
 801f898:	e584      	b.n	801f3a4 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801f89a:	07d0      	lsls	r0, r2, #31
 801f89c:	f57f ac72 	bpl.w	801f184 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801f8a0:	4b39      	ldr	r3, [pc, #228]	; (801f988 <tcp_input+0xba4>)
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	622b      	str	r3, [r5, #32]
 801f8a6:	e46d      	b.n	801f184 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801f8a8:	4b38      	ldr	r3, [pc, #224]	; (801f98c <tcp_input+0xba8>)
 801f8aa:	f240 1215 	movw	r2, #277	; 0x115
 801f8ae:	4938      	ldr	r1, [pc, #224]	; (801f990 <tcp_input+0xbac>)
 801f8b0:	4838      	ldr	r0, [pc, #224]	; (801f994 <tcp_input+0xbb0>)
 801f8b2:	f006 ff4f 	bl	8026754 <iprintf>
 801f8b6:	f7ff bbb0 	b.w	801f01a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801f8ba:	68ea      	ldr	r2, [r5, #12]
 801f8bc:	60da      	str	r2, [r3, #12]
 801f8be:	e64b      	b.n	801f558 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	f43f ae49 	beq.w	801f558 <tcp_input+0x774>
 801f8c6:	68da      	ldr	r2, [r3, #12]
 801f8c8:	42aa      	cmp	r2, r5
 801f8ca:	d0f6      	beq.n	801f8ba <tcp_input+0xad6>
 801f8cc:	4613      	mov	r3, r2
 801f8ce:	e7f7      	b.n	801f8c0 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801f8d0:	2100      	movs	r1, #0
 801f8d2:	4648      	mov	r0, r9
 801f8d4:	f7fe f828 	bl	801d928 <tcp_abandon>
      return;
 801f8d8:	f7ff ba91 	b.w	801edfe <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801f8dc:	4b2b      	ldr	r3, [pc, #172]	; (801f98c <tcp_input+0xba8>)
 801f8de:	f240 120d 	movw	r2, #269	; 0x10d
 801f8e2:	492d      	ldr	r1, [pc, #180]	; (801f998 <tcp_input+0xbb4>)
 801f8e4:	482b      	ldr	r0, [pc, #172]	; (801f994 <tcp_input+0xbb0>)
 801f8e6:	f006 ff35 	bl	8026754 <iprintf>
      if (prev != NULL) {
 801f8ea:	f1b8 0f00 	cmp.w	r8, #0
 801f8ee:	f43f ab90 	beq.w	801f012 <tcp_input+0x22e>
 801f8f2:	68eb      	ldr	r3, [r5, #12]
 801f8f4:	f7ff bb87 	b.w	801f006 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801f8fc:	9b05      	ldr	r3, [sp, #20]
 801f8fe:	f8cd 9000 	str.w	r9, [sp]
 801f902:	881b      	ldrh	r3, [r3, #0]
 801f904:	e72d      	b.n	801f762 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801f906:	300d      	adds	r0, #13
 801f908:	f43f abdd 	beq.w	801f0c6 <tcp_input+0x2e2>
 801f90c:	e782      	b.n	801f814 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f90e:	4b1f      	ldr	r3, [pc, #124]	; (801f98c <tcp_input+0xba8>)
 801f910:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801f914:	4921      	ldr	r1, [pc, #132]	; (801f99c <tcp_input+0xbb8>)
 801f916:	481f      	ldr	r0, [pc, #124]	; (801f994 <tcp_input+0xbb0>)
 801f918:	f006 ff1c 	bl	8026754 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f91c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801f91e:	699b      	ldr	r3, [r3, #24]
 801f920:	2b00      	cmp	r3, #0
 801f922:	d196      	bne.n	801f852 <tcp_input+0xa6e>
 801f924:	e776      	b.n	801f814 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f926:	2900      	cmp	r1, #0
 801f928:	f47f af03 	bne.w	801f732 <tcp_input+0x94e>
 801f92c:	4b17      	ldr	r3, [pc, #92]	; (801f98c <tcp_input+0xba8>)
 801f92e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801f932:	491b      	ldr	r1, [pc, #108]	; (801f9a0 <tcp_input+0xbbc>)
 801f934:	4817      	ldr	r0, [pc, #92]	; (801f994 <tcp_input+0xbb0>)
 801f936:	f006 ff0d 	bl	8026754 <iprintf>
 801f93a:	e6fa      	b.n	801f732 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f93c:	429a      	cmp	r2, r3
 801f93e:	bf88      	it	hi
 801f940:	b293      	uxthhi	r3, r2
 801f942:	e7a2      	b.n	801f88a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801f944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f948:	862b      	strh	r3, [r5, #48]	; 0x30
 801f94a:	e6dd      	b.n	801f708 <tcp_input+0x924>
          rseg = pcb->unsent;
 801f94c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f94e:	b176      	cbz	r6, 801f96e <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801f950:	6833      	ldr	r3, [r6, #0]
 801f952:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f954:	e6cd      	b.n	801f6f2 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f956:	4b0d      	ldr	r3, [pc, #52]	; (801f98c <tcp_input+0xba8>)
 801f958:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801f95c:	4911      	ldr	r1, [pc, #68]	; (801f9a4 <tcp_input+0xbc0>)
 801f95e:	480d      	ldr	r0, [pc, #52]	; (801f994 <tcp_input+0xbb0>)
 801f960:	f006 fef8 	bl	8026754 <iprintf>
 801f964:	e6ba      	b.n	801f6dc <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f966:	429a      	cmp	r2, r3
 801f968:	bf88      	it	hi
 801f96a:	b293      	uxthhi	r3, r2
 801f96c:	e6af      	b.n	801f6ce <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f96e:	4b07      	ldr	r3, [pc, #28]	; (801f98c <tcp_input+0xba8>)
 801f970:	f44f 725d 	mov.w	r2, #884	; 0x374
 801f974:	490c      	ldr	r1, [pc, #48]	; (801f9a8 <tcp_input+0xbc4>)
 801f976:	4807      	ldr	r0, [pc, #28]	; (801f994 <tcp_input+0xbb0>)
 801f978:	f006 feec 	bl	8026754 <iprintf>
 801f97c:	e7e8      	b.n	801f950 <tcp_input+0xb6c>
 801f97e:	bf00      	nop
 801f980:	2002e460 	.word	0x2002e460
 801f984:	2002e484 	.word	0x2002e484
 801f988:	2002e454 	.word	0x2002e454
 801f98c:	08045db4 	.word	0x08045db4
 801f990:	080460a0 	.word	0x080460a0
 801f994:	0802b44c 	.word	0x0802b44c
 801f998:	08046074 	.word	0x08046074
 801f99c:	08046148 	.word	0x08046148
 801f9a0:	080460fc 	.word	0x080460fc
 801f9a4:	0804611c 	.word	0x0804611c
 801f9a8:	08046134 	.word	0x08046134

0801f9ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801f9ac:	4a02      	ldr	r2, [pc, #8]	; (801f9b8 <tcp_trigger_input_pcb_close+0xc>)
 801f9ae:	7813      	ldrb	r3, [r2, #0]
 801f9b0:	f043 0310 	orr.w	r3, r3, #16
 801f9b4:	7013      	strb	r3, [r2, #0]
}
 801f9b6:	4770      	bx	lr
 801f9b8:	2002e480 	.word	0x2002e480

0801f9bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9c0:	9f08      	ldr	r7, [sp, #32]
 801f9c2:	4680      	mov	r8, r0
 801f9c4:	460d      	mov	r5, r1
 801f9c6:	4614      	mov	r4, r2
 801f9c8:	461e      	mov	r6, r3
 801f9ca:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801f9ce:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801f9d2:	2f00      	cmp	r7, #0
 801f9d4:	d033      	beq.n	801fa3e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801f9d6:	42a5      	cmp	r5, r4
 801f9d8:	d20e      	bcs.n	801f9f8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f9da:	f019 0f02 	tst.w	r9, #2
 801f9de:	d008      	beq.n	801f9f2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801f9e0:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801f9e4:	f021 0103 	bic.w	r1, r1, #3
 801f9e8:	428c      	cmp	r4, r1
 801f9ea:	bf28      	it	cs
 801f9ec:	460c      	movcs	r4, r1
 801f9ee:	b2a1      	uxth	r1, r4
 801f9f0:	e003      	b.n	801f9fa <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801f9f2:	8b7b      	ldrh	r3, [r7, #26]
 801f9f4:	065b      	lsls	r3, r3, #25
 801f9f6:	d518      	bpl.n	801fa2a <tcp_pbuf_prealloc+0x6e>
 801f9f8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801f9fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f9fe:	4640      	mov	r0, r8
 801fa00:	f7fc fc0c 	bl	801c21c <pbuf_alloc>
  if (p == NULL) {
 801fa04:	4604      	mov	r4, r0
 801fa06:	b168      	cbz	r0, 801fa24 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801fa08:	6803      	ldr	r3, [r0, #0]
 801fa0a:	b133      	cbz	r3, 801fa1a <tcp_pbuf_prealloc+0x5e>
 801fa0c:	4b0f      	ldr	r3, [pc, #60]	; (801fa4c <tcp_pbuf_prealloc+0x90>)
 801fa0e:	f240 120b 	movw	r2, #267	; 0x10b
 801fa12:	490f      	ldr	r1, [pc, #60]	; (801fa50 <tcp_pbuf_prealloc+0x94>)
 801fa14:	480f      	ldr	r0, [pc, #60]	; (801fa54 <tcp_pbuf_prealloc+0x98>)
 801fa16:	f006 fe9d 	bl	8026754 <iprintf>
  *oversize = p->len - length;
 801fa1a:	8963      	ldrh	r3, [r4, #10]
 801fa1c:	1b5b      	subs	r3, r3, r5
 801fa1e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801fa20:	8125      	strh	r5, [r4, #8]
 801fa22:	8165      	strh	r5, [r4, #10]
  return p;
}
 801fa24:	4620      	mov	r0, r4
 801fa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801fa2a:	f1ba 0f00 	cmp.w	sl, #0
 801fa2e:	d0d7      	beq.n	801f9e0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801fa30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	d1d4      	bne.n	801f9e0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801fa36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d1d1      	bne.n	801f9e0 <tcp_pbuf_prealloc+0x24>
 801fa3c:	e7dc      	b.n	801f9f8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801fa3e:	4b03      	ldr	r3, [pc, #12]	; (801fa4c <tcp_pbuf_prealloc+0x90>)
 801fa40:	22e9      	movs	r2, #233	; 0xe9
 801fa42:	4905      	ldr	r1, [pc, #20]	; (801fa58 <tcp_pbuf_prealloc+0x9c>)
 801fa44:	4803      	ldr	r0, [pc, #12]	; (801fa54 <tcp_pbuf_prealloc+0x98>)
 801fa46:	f006 fe85 	bl	8026754 <iprintf>
 801fa4a:	e7c4      	b.n	801f9d6 <tcp_pbuf_prealloc+0x1a>
 801fa4c:	08046184 	.word	0x08046184
 801fa50:	080461d8 	.word	0x080461d8
 801fa54:	0802b44c 	.word	0x0802b44c
 801fa58:	080461b8 	.word	0x080461b8

0801fa5c <tcp_create_segment>:
{
 801fa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa60:	460e      	mov	r6, r1
 801fa62:	f89d a020 	ldrb.w	sl, [sp, #32]
 801fa66:	4690      	mov	r8, r2
 801fa68:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fa6a:	4607      	mov	r7, r0
 801fa6c:	2800      	cmp	r0, #0
 801fa6e:	d04c      	beq.n	801fb0a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fa70:	2e00      	cmp	r6, #0
 801fa72:	d052      	beq.n	801fb1a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa74:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fa78:	22a8      	movs	r2, #168	; 0xa8
 801fa7a:	4931      	ldr	r1, [pc, #196]	; (801fb40 <tcp_create_segment+0xe4>)
 801fa7c:	2004      	movs	r0, #4
 801fa7e:	f7fc f851 	bl	801bb24 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa82:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fa86:	4604      	mov	r4, r0
 801fa88:	2800      	cmp	r0, #0
 801fa8a:	d054      	beq.n	801fb36 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801fa8c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801fa90:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa92:	8932      	ldrh	r2, [r6, #8]
 801fa94:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801fa98:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa9a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801fa9c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fa9e:	d32c      	bcc.n	801fafa <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801faa0:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801faa4:	4630      	mov	r0, r6
 801faa6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801faa8:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801faaa:	f7fc fcc9 	bl	801c440 <pbuf_add_header>
 801faae:	4606      	mov	r6, r0
 801fab0:	2800      	cmp	r0, #0
 801fab2:	d139      	bne.n	801fb28 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fab4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fab6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fab8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801faba:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fabe:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fac2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fac6:	f7fa fd3f 	bl	801a548 <lwip_htons>
 801faca:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801face:	8b38      	ldrh	r0, [r7, #24]
 801fad0:	68e7      	ldr	r7, [r4, #12]
 801fad2:	f7fa fd39 	bl	801a548 <lwip_htons>
 801fad6:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801fad8:	4648      	mov	r0, r9
 801fada:	68e7      	ldr	r7, [r4, #12]
 801fadc:	f7fa fd38 	bl	801a550 <lwip_htonl>
 801fae0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fae2:	ea45 0008 	orr.w	r0, r5, r8
 801fae6:	68e7      	ldr	r7, [r4, #12]
 801fae8:	f7fa fd2e 	bl	801a548 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801faec:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801faee:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801faf0:	749e      	strb	r6, [r3, #18]
 801faf2:	74de      	strb	r6, [r3, #19]
}
 801faf4:	4620      	mov	r0, r4
 801faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fafa:	22b0      	movs	r2, #176	; 0xb0
 801fafc:	4b10      	ldr	r3, [pc, #64]	; (801fb40 <tcp_create_segment+0xe4>)
 801fafe:	4911      	ldr	r1, [pc, #68]	; (801fb44 <tcp_create_segment+0xe8>)
 801fb00:	4811      	ldr	r0, [pc, #68]	; (801fb48 <tcp_create_segment+0xec>)
 801fb02:	f006 fe27 	bl	8026754 <iprintf>
  seg->len = p->tot_len - optlen;
 801fb06:	8932      	ldrh	r2, [r6, #8]
 801fb08:	e7ca      	b.n	801faa0 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fb0a:	4b0d      	ldr	r3, [pc, #52]	; (801fb40 <tcp_create_segment+0xe4>)
 801fb0c:	22a3      	movs	r2, #163	; 0xa3
 801fb0e:	490f      	ldr	r1, [pc, #60]	; (801fb4c <tcp_create_segment+0xf0>)
 801fb10:	480d      	ldr	r0, [pc, #52]	; (801fb48 <tcp_create_segment+0xec>)
 801fb12:	f006 fe1f 	bl	8026754 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fb16:	2e00      	cmp	r6, #0
 801fb18:	d1ac      	bne.n	801fa74 <tcp_create_segment+0x18>
 801fb1a:	4b09      	ldr	r3, [pc, #36]	; (801fb40 <tcp_create_segment+0xe4>)
 801fb1c:	22a4      	movs	r2, #164	; 0xa4
 801fb1e:	490c      	ldr	r1, [pc, #48]	; (801fb50 <tcp_create_segment+0xf4>)
 801fb20:	4809      	ldr	r0, [pc, #36]	; (801fb48 <tcp_create_segment+0xec>)
 801fb22:	f006 fe17 	bl	8026754 <iprintf>
 801fb26:	e7a5      	b.n	801fa74 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801fb28:	4620      	mov	r0, r4
    return NULL;
 801fb2a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801fb2c:	f7fd fac4 	bl	801d0b8 <tcp_seg_free>
}
 801fb30:	4620      	mov	r0, r4
 801fb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801fb36:	4630      	mov	r0, r6
 801fb38:	f7fc fd42 	bl	801c5c0 <pbuf_free>
    return NULL;
 801fb3c:	e7da      	b.n	801faf4 <tcp_create_segment+0x98>
 801fb3e:	bf00      	nop
 801fb40:	08046184 	.word	0x08046184
 801fb44:	08046230 	.word	0x08046230
 801fb48:	0802b44c 	.word	0x0802b44c
 801fb4c:	080461ec 	.word	0x080461ec
 801fb50:	0804620c 	.word	0x0804620c

0801fb54 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb54:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb5a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb5c:	4606      	mov	r6, r0
 801fb5e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb60:	2022      	movs	r0, #34	; 0x22
 801fb62:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801fb66:	461c      	mov	r4, r3
 801fb68:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801fb6c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801fb70:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801fb74:	f7fc fb52 	bl	801c21c <pbuf_alloc>
  if (p != NULL) {
 801fb78:	4605      	mov	r5, r0
 801fb7a:	b300      	cbz	r0, 801fbbe <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fb7c:	8943      	ldrh	r3, [r0, #10]
 801fb7e:	2b13      	cmp	r3, #19
 801fb80:	d920      	bls.n	801fbc4 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801fb82:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801fb84:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801fb86:	f7fa fcdf 	bl	801a548 <lwip_htons>
 801fb8a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801fb8c:	4650      	mov	r0, sl
 801fb8e:	f7fa fcdb 	bl	801a548 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801fb92:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801fb94:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801fb96:	4630      	mov	r0, r6
 801fb98:	f7fa fcda 	bl	801a550 <lwip_htonl>
 801fb9c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fb9e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801fba2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fba4:	f7fa fcd0 	bl	801a548 <lwip_htons>
 801fba8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801fbaa:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801fbac:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801fbae:	f7fa fccb 	bl	801a548 <lwip_htons>
    tcphdr->chksum = 0;
 801fbb2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801fbb4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801fbb6:	7423      	strb	r3, [r4, #16]
 801fbb8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801fbba:	74a3      	strb	r3, [r4, #18]
 801fbbc:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801fbbe:	4628      	mov	r0, r5
 801fbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801fbc4:	4b03      	ldr	r3, [pc, #12]	; (801fbd4 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801fbc6:	f240 7223 	movw	r2, #1827	; 0x723
 801fbca:	4903      	ldr	r1, [pc, #12]	; (801fbd8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801fbcc:	4803      	ldr	r0, [pc, #12]	; (801fbdc <tcp_output_alloc_header_common.constprop.0+0x88>)
 801fbce:	f006 fdc1 	bl	8026754 <iprintf>
 801fbd2:	e7d6      	b.n	801fb82 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801fbd4:	08046184 	.word	0x08046184
 801fbd8:	08046248 	.word	0x08046248
 801fbdc:	0802b44c 	.word	0x0802b44c

0801fbe0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fbe0:	b570      	push	{r4, r5, r6, lr}
 801fbe2:	460d      	mov	r5, r1
 801fbe4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fbe6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801fbe8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fbea:	b190      	cbz	r0, 801fc12 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801fbec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801fbee:	2210      	movs	r2, #16
 801fbf0:	8b21      	ldrh	r1, [r4, #24]
 801fbf2:	9302      	str	r3, [sp, #8]
 801fbf4:	e9cd 1200 	strd	r1, r2, [sp]
 801fbf8:	4632      	mov	r2, r6
 801fbfa:	4629      	mov	r1, r5
 801fbfc:	8ae3      	ldrh	r3, [r4, #22]
 801fbfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fc00:	f7ff ffa8 	bl	801fb54 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801fc04:	b118      	cbz	r0, 801fc0e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fc06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801fc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc0a:	4413      	add	r3, r2
 801fc0c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801fc0e:	b004      	add	sp, #16
 801fc10:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801fc12:	4b04      	ldr	r3, [pc, #16]	; (801fc24 <tcp_output_alloc_header.constprop.0+0x44>)
 801fc14:	f240 7242 	movw	r2, #1858	; 0x742
 801fc18:	4903      	ldr	r1, [pc, #12]	; (801fc28 <tcp_output_alloc_header.constprop.0+0x48>)
 801fc1a:	4804      	ldr	r0, [pc, #16]	; (801fc2c <tcp_output_alloc_header.constprop.0+0x4c>)
 801fc1c:	f006 fd9a 	bl	8026754 <iprintf>
 801fc20:	e7e4      	b.n	801fbec <tcp_output_alloc_header.constprop.0+0xc>
 801fc22:	bf00      	nop
 801fc24:	08046184 	.word	0x08046184
 801fc28:	08046278 	.word	0x08046278
 801fc2c:	0802b44c 	.word	0x0802b44c

0801fc30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801fc30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc34:	4605      	mov	r5, r0
 801fc36:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc38:	460c      	mov	r4, r1
{
 801fc3a:	4690      	mov	r8, r2
 801fc3c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fc3e:	2900      	cmp	r1, #0
 801fc40:	d034      	beq.n	801fcac <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fc42:	2d00      	cmp	r5, #0
 801fc44:	d03a      	beq.n	801fcbc <tcp_output_control_segment+0x8c>
 801fc46:	7a28      	ldrb	r0, [r5, #8]
 801fc48:	bb10      	cbnz	r0, 801fc90 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801fc4a:	4630      	mov	r0, r6
 801fc4c:	f004 f8b4 	bl	8023db8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801fc50:	4607      	mov	r7, r0
 801fc52:	b310      	cbz	r0, 801fc9a <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc54:	9600      	str	r6, [sp, #0]
 801fc56:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fc58:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fc5c:	2106      	movs	r1, #6
 801fc5e:	8922      	ldrh	r2, [r4, #8]
 801fc60:	4620      	mov	r0, r4
 801fc62:	f7fb fa05 	bl	801b070 <ip_chksum_pseudo>
 801fc66:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801fc6a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801fc6c:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801fc6e:	9500      	str	r5, [sp, #0]
 801fc70:	2506      	movs	r5, #6
 801fc72:	4632      	mov	r2, r6
 801fc74:	4641      	mov	r1, r8
 801fc76:	9501      	str	r5, [sp, #4]
 801fc78:	4620      	mov	r0, r4
 801fc7a:	9702      	str	r7, [sp, #8]
 801fc7c:	f004 fa66 	bl	802414c <ip4_output_if>
 801fc80:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801fc82:	4620      	mov	r0, r4
 801fc84:	f7fc fc9c 	bl	801c5c0 <pbuf_free>
  return err;
}
 801fc88:	4628      	mov	r0, r5
 801fc8a:	b005      	add	sp, #20
 801fc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801fc90:	f7fc f970 	bl	801bf74 <netif_get_by_index>
  if (netif == NULL) {
 801fc94:	4607      	mov	r7, r0
 801fc96:	2800      	cmp	r0, #0
 801fc98:	d1dc      	bne.n	801fc54 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801fc9a:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801fc9e:	4620      	mov	r0, r4
 801fca0:	f7fc fc8e 	bl	801c5c0 <pbuf_free>
}
 801fca4:	4628      	mov	r0, r5
 801fca6:	b005      	add	sp, #20
 801fca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801fcac:	4b0d      	ldr	r3, [pc, #52]	; (801fce4 <tcp_output_control_segment+0xb4>)
 801fcae:	f240 7287 	movw	r2, #1927	; 0x787
 801fcb2:	490d      	ldr	r1, [pc, #52]	; (801fce8 <tcp_output_control_segment+0xb8>)
 801fcb4:	480d      	ldr	r0, [pc, #52]	; (801fcec <tcp_output_control_segment+0xbc>)
 801fcb6:	f006 fd4d 	bl	8026754 <iprintf>
 801fcba:	e7c2      	b.n	801fc42 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801fcbc:	4630      	mov	r0, r6
 801fcbe:	f004 f87b 	bl	8023db8 <ip4_route>
  if (netif == NULL) {
 801fcc2:	4607      	mov	r7, r0
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	d0e8      	beq.n	801fc9a <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fcc8:	9600      	str	r6, [sp, #0]
 801fcca:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801fccc:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fcd0:	2106      	movs	r1, #6
 801fcd2:	8922      	ldrh	r2, [r4, #8]
 801fcd4:	4620      	mov	r0, r4
 801fcd6:	f7fb f9cb 	bl	801b070 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801fcda:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801fcdc:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801fce0:	e7c5      	b.n	801fc6e <tcp_output_control_segment+0x3e>
 801fce2:	bf00      	nop
 801fce4:	08046184 	.word	0x08046184
 801fce8:	080462a0 	.word	0x080462a0
 801fcec:	0802b44c 	.word	0x0802b44c

0801fcf0 <tcp_write>:
{
 801fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801fcf4:	2400      	movs	r4, #0
{
 801fcf6:	b091      	sub	sp, #68	; 0x44
 801fcf8:	9107      	str	r1, [sp, #28]
 801fcfa:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801fcfc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd00:	2800      	cmp	r0, #0
 801fd02:	f000 82fc 	beq.w	80202fe <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801fd06:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801fd0a:	4692      	mov	sl, r2
 801fd0c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801fd0e:	4681      	mov	r9, r0
 801fd10:	085b      	lsrs	r3, r3, #1
 801fd12:	4293      	cmp	r3, r2
 801fd14:	bf28      	it	cs
 801fd16:	4613      	movcs	r3, r2
 801fd18:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	bf08      	it	eq
 801fd1e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801fd20:	9b07      	ldr	r3, [sp, #28]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f000 82df 	beq.w	80202e6 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801fd28:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801fd2a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801fd2c:	2a02      	cmp	r2, #2
 801fd2e:	d902      	bls.n	801fd36 <tcp_write+0x46>
 801fd30:	2b07      	cmp	r3, #7
 801fd32:	f040 829c 	bne.w	802026e <tcp_write+0x57e>
  } else if (len == 0) {
 801fd36:	f1ba 0f00 	cmp.w	sl, #0
 801fd3a:	f000 80ec 	beq.w	801ff16 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801fd3e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801fd42:	4553      	cmp	r3, sl
 801fd44:	f0c0 82b6 	bcc.w	80202b4 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801fd48:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801fd4c:	2e08      	cmp	r6, #8
 801fd4e:	f200 82b1 	bhi.w	80202b4 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fd52:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801fd56:	2e00      	cmp	r6, #0
 801fd58:	f000 80d3 	beq.w	801ff02 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	f040 80dc 	bne.w	801ff1a <tcp_write+0x22a>
 801fd62:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801fd66:	f1b8 0f00 	cmp.w	r8, #0
 801fd6a:	f000 8263 	beq.w	8020234 <tcp_write+0x544>
 801fd6e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801fd70:	461a      	mov	r2, r3
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d1fb      	bne.n	801fd70 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fd78:	7a94      	ldrb	r4, [r2, #10]
 801fd7a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fd7c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801fd7e:	00a4      	lsls	r4, r4, #2
 801fd80:	920b      	str	r2, [sp, #44]	; 0x2c
 801fd82:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801fd86:	191a      	adds	r2, r3, r4
 801fd88:	4593      	cmp	fp, r2
 801fd8a:	f2c0 81a6 	blt.w	80200da <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd8e:	ebab 0404 	sub.w	r4, fp, r4
 801fd92:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801fd94:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801fd98:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801fd9a:	930a      	str	r3, [sp, #40]	; 0x28
 801fd9c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	f000 80cf 	beq.w	801ff44 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801fda6:	42a3      	cmp	r3, r4
 801fda8:	f200 818a 	bhi.w	80200c0 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801fdac:	45a2      	cmp	sl, r4
 801fdae:	4653      	mov	r3, sl
 801fdb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fdb2:	bf28      	it	cs
 801fdb4:	4623      	movcs	r3, r4
 801fdb6:	4293      	cmp	r3, r2
 801fdb8:	bf28      	it	cs
 801fdba:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801fdbc:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801fdbe:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fdc0:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801fdc2:	b292      	uxth	r2, r2
      space -= oversize_used;
 801fdc4:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801fdc6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fdca:	2a00      	cmp	r2, #0
 801fdcc:	f000 8183 	beq.w	80200d6 <tcp_write+0x3e6>
 801fdd0:	459a      	cmp	sl, r3
 801fdd2:	f000 8180 	beq.w	80200d6 <tcp_write+0x3e6>
 801fdd6:	4bb2      	ldr	r3, [pc, #712]	; (80200a0 <tcp_write+0x3b0>)
 801fdd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fddc:	49b1      	ldr	r1, [pc, #708]	; (80200a4 <tcp_write+0x3b4>)
 801fdde:	48b2      	ldr	r0, [pc, #712]	; (80200a8 <tcp_write+0x3b8>)
 801fde0:	f006 fcb8 	bl	8026754 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801fde6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801fde8:	459a      	cmp	sl, r3
 801fdea:	f200 80b0 	bhi.w	801ff4e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801fdee:	2300      	movs	r3, #0
 801fdf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fdf2:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801fdf4:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801fdf6:	45a2      	cmp	sl, r4
 801fdf8:	f240 80ee 	bls.w	801ffd8 <tcp_write+0x2e8>
 801fdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdfe:	f04f 0800 	mov.w	r8, #0
 801fe02:	f003 0301 	and.w	r3, r3, #1
 801fe06:	f8cd 8014 	str.w	r8, [sp, #20]
 801fe0a:	9308      	str	r3, [sp, #32]
 801fe0c:	4643      	mov	r3, r8
 801fe0e:	46d8      	mov	r8, fp
 801fe10:	469b      	mov	fp, r3
 801fe12:	e042      	b.n	801fe9a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fe14:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	f040 80f0 	bne.w	801fffe <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801fe1e:	2201      	movs	r2, #1
 801fe20:	4629      	mov	r1, r5
 801fe22:	2036      	movs	r0, #54	; 0x36
 801fe24:	f7fc f9fa 	bl	801c21c <pbuf_alloc>
 801fe28:	2800      	cmp	r0, #0
 801fe2a:	f000 8100 	beq.w	802002e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fe2e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fe30:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801fe32:	9006      	str	r0, [sp, #24]
 801fe34:	4422      	add	r2, r4
 801fe36:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fe38:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe3c:	2036      	movs	r0, #54	; 0x36
 801fe3e:	f7fc f9ed 	bl	801c21c <pbuf_alloc>
 801fe42:	9b06      	ldr	r3, [sp, #24]
 801fe44:	4607      	mov	r7, r0
 801fe46:	2800      	cmp	r0, #0
 801fe48:	f000 8195 	beq.w	8020176 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801fe4c:	4619      	mov	r1, r3
 801fe4e:	f7fc fbe9 	bl	801c624 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801fe52:	4638      	mov	r0, r7
 801fe54:	f7fc fbc8 	bl	801c5e8 <pbuf_clen>
 801fe58:	4430      	add	r0, r6
 801fe5a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fe5c:	2e09      	cmp	r6, #9
 801fe5e:	d84a      	bhi.n	801fef6 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801fe60:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801fe64:	2200      	movs	r2, #0
 801fe66:	4639      	mov	r1, r7
 801fe68:	4648      	mov	r0, r9
 801fe6a:	4423      	add	r3, r4
 801fe6c:	9200      	str	r2, [sp, #0]
 801fe6e:	f7ff fdf5 	bl	801fa5c <tcp_create_segment>
 801fe72:	4607      	mov	r7, r0
 801fe74:	2800      	cmp	r0, #0
 801fe76:	f000 80da 	beq.w	802002e <tcp_write+0x33e>
    if (queue == NULL) {
 801fe7a:	9b05      	ldr	r3, [sp, #20]
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	f000 80a3 	beq.w	801ffc8 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801fe82:	f1bb 0f00 	cmp.w	fp, #0
 801fe86:	f000 80c2 	beq.w	802000e <tcp_write+0x31e>
    pos += seglen;
 801fe8a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801fe8c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801fe90:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801fe92:	45a2      	cmp	sl, r4
 801fe94:	f240 809e 	bls.w	801ffd4 <tcp_write+0x2e4>
 801fe98:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801fe9a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801fe9e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801fea0:	b2ad      	uxth	r5, r5
 801fea2:	4545      	cmp	r5, r8
 801fea4:	bf28      	it	cs
 801fea6:	4645      	movcs	r5, r8
 801fea8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d0b2      	beq.n	801fe14 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801feae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feb0:	4642      	mov	r2, r8
 801feb2:	4629      	mov	r1, r5
 801feb4:	2036      	movs	r0, #54	; 0x36
 801feb6:	e9cd 9300 	strd	r9, r3, [sp]
 801feba:	9b05      	ldr	r3, [sp, #20]
 801febc:	fab3 f383 	clz	r3, r3
 801fec0:	095b      	lsrs	r3, r3, #5
 801fec2:	9302      	str	r3, [sp, #8]
 801fec4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801fec8:	f7ff fd78 	bl	801f9bc <tcp_pbuf_prealloc>
 801fecc:	4607      	mov	r7, r0
 801fece:	2800      	cmp	r0, #0
 801fed0:	f000 80ad 	beq.w	802002e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801fed4:	8943      	ldrh	r3, [r0, #10]
 801fed6:	42ab      	cmp	r3, r5
 801fed8:	f0c0 80a1 	bcc.w	802001e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801fedc:	9b07      	ldr	r3, [sp, #28]
 801fede:	462a      	mov	r2, r5
 801fee0:	6878      	ldr	r0, [r7, #4]
 801fee2:	1919      	adds	r1, r3, r4
 801fee4:	f005 fc70 	bl	80257c8 <memcpy>
    queuelen += pbuf_clen(p);
 801fee8:	4638      	mov	r0, r7
 801feea:	f7fc fb7d 	bl	801c5e8 <pbuf_clen>
 801feee:	4430      	add	r0, r6
 801fef0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801fef2:	2e09      	cmp	r6, #9
 801fef4:	d9b4      	bls.n	801fe60 <tcp_write+0x170>
      pbuf_free(p);
 801fef6:	4638      	mov	r0, r7
 801fef8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801fefc:	f7fc fb60 	bl	801c5c0 <pbuf_free>
      goto memerr;
 801ff00:	e097      	b.n	8020032 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	f000 80b6 	beq.w	8020074 <tcp_write+0x384>
 801ff08:	4b65      	ldr	r3, [pc, #404]	; (80200a0 <tcp_write+0x3b0>)
 801ff0a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801ff0e:	4967      	ldr	r1, [pc, #412]	; (80200ac <tcp_write+0x3bc>)
 801ff10:	4865      	ldr	r0, [pc, #404]	; (80200a8 <tcp_write+0x3b8>)
 801ff12:	f006 fc1f 	bl	8026754 <iprintf>
  queuelen = pcb->snd_queuelen;
 801ff16:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801ff1a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801ff1e:	f1b8 0f00 	cmp.w	r8, #0
 801ff22:	f47f af24 	bne.w	801fd6e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ff26:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	f040 80ac 	bne.w	8020088 <tcp_write+0x398>
  while (pos < len) {
 801ff30:	f1ba 0f00 	cmp.w	sl, #0
 801ff34:	f000 81c7 	beq.w	80202c6 <tcp_write+0x5d6>
          extendlen = seglen;
 801ff38:	2400      	movs	r4, #0
 801ff3a:	940d      	str	r4, [sp, #52]	; 0x34
 801ff3c:	940c      	str	r4, [sp, #48]	; 0x30
 801ff3e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801ff42:	e75b      	b.n	801fdfc <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ff44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ff46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff48:	459a      	cmp	sl, r3
 801ff4a:	f67f af50 	bls.w	801fdee <tcp_write+0xfe>
 801ff4e:	2c00      	cmp	r4, #0
 801ff50:	f43f af4d 	beq.w	801fdee <tcp_write+0xfe>
 801ff54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ff56:	8912      	ldrh	r2, [r2, #8]
 801ff58:	920d      	str	r2, [sp, #52]	; 0x34
 801ff5a:	2a00      	cmp	r2, #0
 801ff5c:	f000 809c 	beq.w	8020098 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff60:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff64:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff66:	42a7      	cmp	r7, r4
 801ff68:	bfa8      	it	ge
 801ff6a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff6c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ff6e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ff70:	f100 8187 	bmi.w	8020282 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ff74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff76:	685a      	ldr	r2, [r3, #4]
 801ff78:	4613      	mov	r3, r2
 801ff7a:	6812      	ldr	r2, [r2, #0]
 801ff7c:	2a00      	cmp	r2, #0
 801ff7e:	d1fb      	bne.n	801ff78 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff80:	920c      	str	r2, [sp, #48]	; 0x30
 801ff82:	7b1a      	ldrb	r2, [r3, #12]
 801ff84:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801ff88:	d106      	bne.n	801ff98 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ff8a:	895a      	ldrh	r2, [r3, #10]
 801ff8c:	685b      	ldr	r3, [r3, #4]
 801ff8e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ff90:	9a07      	ldr	r2, [sp, #28]
 801ff92:	429a      	cmp	r2, r3
 801ff94:	f000 8167 	beq.w	8020266 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ff98:	2201      	movs	r2, #1
 801ff9a:	4629      	mov	r1, r5
 801ff9c:	2000      	movs	r0, #0
 801ff9e:	f7fc f93d 	bl	801c21c <pbuf_alloc>
 801ffa2:	900c      	str	r0, [sp, #48]	; 0x30
 801ffa4:	2800      	cmp	r0, #0
 801ffa6:	f000 813e 	beq.w	8020226 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ffaa:	9b07      	ldr	r3, [sp, #28]
 801ffac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ffae:	440b      	add	r3, r1
 801ffb0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801ffb2:	f7fc fb19 	bl	801c5e8 <pbuf_clen>
 801ffb6:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801ffb8:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801ffba:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801ffbc:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801ffbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ffc2:	18ec      	adds	r4, r5, r3
 801ffc4:	b2a4      	uxth	r4, r4
 801ffc6:	e716      	b.n	801fdf6 <tcp_write+0x106>
    pos += seglen;
 801ffc8:	442c      	add	r4, r5
 801ffca:	9005      	str	r0, [sp, #20]
 801ffcc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ffce:	45a2      	cmp	sl, r4
 801ffd0:	f63f af62 	bhi.w	801fe98 <tcp_write+0x1a8>
 801ffd4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801ffd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	f000 80db 	beq.w	8020196 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801ffe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffe2:	6854      	ldr	r4, [r2, #4]
 801ffe4:	2c00      	cmp	r4, #0
 801ffe6:	f000 8090 	beq.w	802010a <tcp_write+0x41a>
 801ffea:	469b      	mov	fp, r3
 801ffec:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801ffee:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801fff0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801fff2:	445b      	add	r3, fp
 801fff4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801fff6:	2a00      	cmp	r2, #0
 801fff8:	d079      	beq.n	80200ee <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801fffa:	4614      	mov	r4, r2
 801fffc:	e7f7      	b.n	801ffee <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801fffe:	4b28      	ldr	r3, [pc, #160]	; (80200a0 <tcp_write+0x3b0>)
 8020000:	f240 2271 	movw	r2, #625	; 0x271
 8020004:	492a      	ldr	r1, [pc, #168]	; (80200b0 <tcp_write+0x3c0>)
 8020006:	4828      	ldr	r0, [pc, #160]	; (80200a8 <tcp_write+0x3b8>)
 8020008:	f006 fba4 	bl	8026754 <iprintf>
 802000c:	e707      	b.n	801fe1e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 802000e:	4b24      	ldr	r3, [pc, #144]	; (80200a0 <tcp_write+0x3b0>)
 8020010:	f240 22ab 	movw	r2, #683	; 0x2ab
 8020014:	4927      	ldr	r1, [pc, #156]	; (80200b4 <tcp_write+0x3c4>)
 8020016:	4824      	ldr	r0, [pc, #144]	; (80200a8 <tcp_write+0x3b8>)
 8020018:	f006 fb9c 	bl	8026754 <iprintf>
 802001c:	e735      	b.n	801fe8a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 802001e:	4b20      	ldr	r3, [pc, #128]	; (80200a0 <tcp_write+0x3b0>)
 8020020:	f240 2266 	movw	r2, #614	; 0x266
 8020024:	4924      	ldr	r1, [pc, #144]	; (80200b8 <tcp_write+0x3c8>)
 8020026:	4820      	ldr	r0, [pc, #128]	; (80200a8 <tcp_write+0x3b8>)
 8020028:	f006 fb94 	bl	8026754 <iprintf>
 802002c:	e756      	b.n	801fedc <tcp_write+0x1ec>
 802002e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020032:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8020036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802003a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 802003e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020040:	b113      	cbz	r3, 8020048 <tcp_write+0x358>
    pbuf_free(concat_p);
 8020042:	4618      	mov	r0, r3
 8020044:	f7fc fabc 	bl	801c5c0 <pbuf_free>
  if (queue != NULL) {
 8020048:	f1b8 0f00 	cmp.w	r8, #0
 802004c:	d002      	beq.n	8020054 <tcp_write+0x364>
    tcp_segs_free(queue);
 802004e:	4640      	mov	r0, r8
 8020050:	f7fd f820 	bl	801d094 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8020054:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 8020058:	b13b      	cbz	r3, 802006a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 802005a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 802005e:	b923      	cbnz	r3, 802006a <tcp_write+0x37a>
 8020060:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8020064:	2b00      	cmp	r3, #0
 8020066:	f000 808c 	beq.w	8020182 <tcp_write+0x492>
  return ERR_MEM;
 802006a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802006e:	b011      	add	sp, #68	; 0x44
 8020070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8020074:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8020078:	2b00      	cmp	r3, #0
 802007a:	f47f af45 	bne.w	801ff08 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 802007e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 8020082:	2b00      	cmp	r3, #0
 8020084:	f43f af58 	beq.w	801ff38 <tcp_write+0x248>
 8020088:	4b05      	ldr	r3, [pc, #20]	; (80200a0 <tcp_write+0x3b0>)
 802008a:	f240 224a 	movw	r2, #586	; 0x24a
 802008e:	490b      	ldr	r1, [pc, #44]	; (80200bc <tcp_write+0x3cc>)
 8020090:	4805      	ldr	r0, [pc, #20]	; (80200a8 <tcp_write+0x3b8>)
 8020092:	f006 fb5f 	bl	8026754 <iprintf>
 8020096:	e74b      	b.n	801ff30 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 8020098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802009a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802009c:	930c      	str	r3, [sp, #48]	; 0x30
 802009e:	e6ad      	b.n	801fdfc <tcp_write+0x10c>
 80200a0:	08046184 	.word	0x08046184
 80200a4:	080463c0 	.word	0x080463c0
 80200a8:	0802b44c 	.word	0x0802b44c
 80200ac:	08046354 	.word	0x08046354
 80200b0:	0804647c 	.word	0x0804647c
 80200b4:	0804648c 	.word	0x0804648c
 80200b8:	0804643c 	.word	0x0804643c
 80200bc:	0804640c 	.word	0x0804640c
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80200c0:	4b94      	ldr	r3, [pc, #592]	; (8020314 <tcp_write+0x624>)
 80200c2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80200c6:	4994      	ldr	r1, [pc, #592]	; (8020318 <tcp_write+0x628>)
 80200c8:	4894      	ldr	r0, [pc, #592]	; (802031c <tcp_write+0x62c>)
 80200ca:	f006 fb43 	bl	8026754 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80200ce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80200d2:	930a      	str	r3, [sp, #40]	; 0x28
 80200d4:	e66a      	b.n	801fdac <tcp_write+0xbc>
 80200d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80200d8:	e735      	b.n	801ff46 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80200da:	4b8e      	ldr	r3, [pc, #568]	; (8020314 <tcp_write+0x624>)
 80200dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80200e0:	498f      	ldr	r1, [pc, #572]	; (8020320 <tcp_write+0x630>)
 80200e2:	488e      	ldr	r0, [pc, #568]	; (802031c <tcp_write+0x62c>)
 80200e4:	f006 fb36 	bl	8026754 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80200e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200ea:	891b      	ldrh	r3, [r3, #8]
 80200ec:	e64f      	b.n	801fd8e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80200ee:	8963      	ldrh	r3, [r4, #10]
 80200f0:	465a      	mov	r2, fp
 80200f2:	6860      	ldr	r0, [r4, #4]
 80200f4:	4629      	mov	r1, r5
 80200f6:	4418      	add	r0, r3
 80200f8:	f005 fb66 	bl	80257c8 <memcpy>
        p->len += oversize_used;
 80200fc:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80200fe:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 8020100:	445b      	add	r3, fp
 8020102:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8020104:	2a00      	cmp	r2, #0
 8020106:	f47f af78 	bne.w	801fffa <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 802010a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802010c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802010e:	8913      	ldrh	r3, [r2, #8]
 8020110:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 8020112:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 8020116:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8020118:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802011c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802011e:	2b00      	cmp	r3, #0
 8020120:	d061      	beq.n	80201e6 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 8020122:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020124:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020126:	6860      	ldr	r0, [r4, #4]
 8020128:	4629      	mov	r1, r5
 802012a:	f7fc fa7b 	bl	801c624 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802012e:	892a      	ldrh	r2, [r5, #8]
 8020130:	8923      	ldrh	r3, [r4, #8]
 8020132:	4413      	add	r3, r2
 8020134:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8020136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020138:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 802013c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 8020140:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 8020144:	4453      	add	r3, sl
 8020146:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 802014a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 802014e:	eba3 0a0a 	sub.w	sl, r3, sl
 8020152:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 8020156:	b11e      	cbz	r6, 8020160 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 8020158:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 802015c:	2b00      	cmp	r3, #0
 802015e:	d036      	beq.n	80201ce <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8020160:	b12f      	cbz	r7, 802016e <tcp_write+0x47e>
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	b11b      	cbz	r3, 802016e <tcp_write+0x47e>
 8020166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020168:	f012 0502 	ands.w	r5, r2, #2
 802016c:	d025      	beq.n	80201ba <tcp_write+0x4ca>
  return ERR_OK;
 802016e:	2000      	movs	r0, #0
}
 8020170:	b011      	add	sp, #68	; 0x44
 8020172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 8020176:	4618      	mov	r0, r3
 8020178:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802017c:	f7fc fa20 	bl	801c5c0 <pbuf_free>
        goto memerr;
 8020180:	e757      	b.n	8020032 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8020182:	4b64      	ldr	r3, [pc, #400]	; (8020314 <tcp_write+0x624>)
 8020184:	f240 3227 	movw	r2, #807	; 0x327
 8020188:	4966      	ldr	r1, [pc, #408]	; (8020324 <tcp_write+0x634>)
 802018a:	4864      	ldr	r0, [pc, #400]	; (802031c <tcp_write+0x62c>)
 802018c:	f006 fae2 	bl	8026754 <iprintf>
  return ERR_MEM;
 8020190:	f04f 30ff 	mov.w	r0, #4294967295
 8020194:	e76b      	b.n	802006e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 8020196:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 802019a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 802019e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d051      	beq.n	8020248 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80201a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	d1bb      	bne.n	8020122 <tcp_write+0x432>
 80201aa:	4b5a      	ldr	r3, [pc, #360]	; (8020314 <tcp_write+0x624>)
 80201ac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80201b0:	495d      	ldr	r1, [pc, #372]	; (8020328 <tcp_write+0x638>)
 80201b2:	485a      	ldr	r0, [pc, #360]	; (802031c <tcp_write+0x62c>)
 80201b4:	f006 face 	bl	8026754 <iprintf>
 80201b8:	e7b3      	b.n	8020122 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80201ba:	2008      	movs	r0, #8
 80201bc:	899c      	ldrh	r4, [r3, #12]
 80201be:	f7fa f9c3 	bl	801a548 <lwip_htons>
 80201c2:	4602      	mov	r2, r0
 80201c4:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 80201c6:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80201c8:	4314      	orrs	r4, r2
 80201ca:	819c      	strh	r4, [r3, #12]
 80201cc:	e74f      	b.n	802006e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 80201ce:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d1c4      	bne.n	8020160 <tcp_write+0x470>
 80201d6:	4b4f      	ldr	r3, [pc, #316]	; (8020314 <tcp_write+0x624>)
 80201d8:	f240 3212 	movw	r2, #786	; 0x312
 80201dc:	4951      	ldr	r1, [pc, #324]	; (8020324 <tcp_write+0x634>)
 80201de:	484f      	ldr	r0, [pc, #316]	; (802031c <tcp_write+0x62c>)
 80201e0:	f006 fab8 	bl	8026754 <iprintf>
 80201e4:	e7bc      	b.n	8020160 <tcp_write+0x470>
  } else if (extendlen > 0) {
 80201e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d0a4      	beq.n	8020136 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80201ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201ee:	6859      	ldr	r1, [r3, #4]
 80201f0:	2900      	cmp	r1, #0
 80201f2:	d02e      	beq.n	8020252 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80201f4:	680a      	ldr	r2, [r1, #0]
 80201f6:	2a00      	cmp	r2, #0
 80201f8:	d07f      	beq.n	80202fa <tcp_write+0x60a>
 80201fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80201fc:	e000      	b.n	8020200 <tcp_write+0x510>
 80201fe:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 8020200:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020202:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8020204:	4423      	add	r3, r4
 8020206:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020208:	4611      	mov	r1, r2
 802020a:	2800      	cmp	r0, #0
 802020c:	d1f7      	bne.n	80201fe <tcp_write+0x50e>
    p->tot_len += extendlen;
 802020e:	8913      	ldrh	r3, [r2, #8]
 8020210:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020212:	440b      	add	r3, r1
 8020214:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8020216:	8953      	ldrh	r3, [r2, #10]
 8020218:	440b      	add	r3, r1
 802021a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 802021c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802021e:	8913      	ldrh	r3, [r2, #8]
 8020220:	440b      	add	r3, r1
 8020222:	8113      	strh	r3, [r2, #8]
 8020224:	e787      	b.n	8020136 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020226:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 802022a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802022e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 8020232:	e70f      	b.n	8020054 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8020234:	4b37      	ldr	r3, [pc, #220]	; (8020314 <tcp_write+0x624>)
 8020236:	f240 1255 	movw	r2, #341	; 0x155
 802023a:	493c      	ldr	r1, [pc, #240]	; (802032c <tcp_write+0x63c>)
 802023c:	4837      	ldr	r0, [pc, #220]	; (802031c <tcp_write+0x62c>)
 802023e:	f006 fa89 	bl	8026754 <iprintf>
  queuelen = pcb->snd_queuelen;
 8020242:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 8020246:	e668      	b.n	801ff1a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 8020248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802024a:	b19b      	cbz	r3, 8020274 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802024c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802024e:	2b00      	cmp	r3, #0
 8020250:	d1cc      	bne.n	80201ec <tcp_write+0x4fc>
 8020252:	4b30      	ldr	r3, [pc, #192]	; (8020314 <tcp_write+0x624>)
 8020254:	f240 22e6 	movw	r2, #742	; 0x2e6
 8020258:	4935      	ldr	r1, [pc, #212]	; (8020330 <tcp_write+0x640>)
 802025a:	4830      	ldr	r0, [pc, #192]	; (802031c <tcp_write+0x62c>)
 802025c:	f006 fa7a 	bl	8026754 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020262:	6859      	ldr	r1, [r3, #4]
 8020264:	e7c6      	b.n	80201f4 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8020266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020268:	bba3      	cbnz	r3, 80202d4 <tcp_write+0x5e4>
          extendlen = seglen;
 802026a:	950d      	str	r5, [sp, #52]	; 0x34
 802026c:	e6a7      	b.n	801ffbe <tcp_write+0x2ce>
    return ERR_CONN;
 802026e:	f06f 000a 	mvn.w	r0, #10
 8020272:	e6fc      	b.n	802006e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 8020274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020276:	2b00      	cmp	r3, #0
 8020278:	f47f af5d 	bne.w	8020136 <tcp_write+0x446>
    pcb->unsent = queue;
 802027c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 8020280:	e75c      	b.n	802013c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8020282:	e9cd 9300 	strd	r9, r3, [sp]
 8020286:	2301      	movs	r3, #1
 8020288:	4622      	mov	r2, r4
 802028a:	4629      	mov	r1, r5
 802028c:	2000      	movs	r0, #0
 802028e:	9302      	str	r3, [sp, #8]
 8020290:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8020294:	f7ff fb92 	bl	801f9bc <tcp_pbuf_prealloc>
 8020298:	4603      	mov	r3, r0
 802029a:	4604      	mov	r4, r0
 802029c:	900c      	str	r0, [sp, #48]	; 0x30
 802029e:	2800      	cmp	r0, #0
 80202a0:	d0c1      	beq.n	8020226 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80202a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80202a4:	462a      	mov	r2, r5
 80202a6:	9907      	ldr	r1, [sp, #28]
 80202a8:	4401      	add	r1, r0
 80202aa:	6858      	ldr	r0, [r3, #4]
 80202ac:	f005 fa8c 	bl	80257c8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80202b0:	4620      	mov	r0, r4
 80202b2:	e67e      	b.n	801ffb2 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202b4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 80202b8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202c0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 80202c4:	e6d3      	b.n	802006e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 80202c6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80202ca:	46d0      	mov	r8, sl
 80202cc:	4657      	mov	r7, sl
 80202ce:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 80202d2:	e7d3      	b.n	802027c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80202d4:	4b0f      	ldr	r3, [pc, #60]	; (8020314 <tcp_write+0x624>)
 80202d6:	f240 2231 	movw	r2, #561	; 0x231
 80202da:	4916      	ldr	r1, [pc, #88]	; (8020334 <tcp_write+0x644>)
 80202dc:	480f      	ldr	r0, [pc, #60]	; (802031c <tcp_write+0x62c>)
 80202de:	f006 fa39 	bl	8026754 <iprintf>
          extendlen = seglen;
 80202e2:	950d      	str	r5, [sp, #52]	; 0x34
 80202e4:	e66b      	b.n	801ffbe <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80202e6:	4b0b      	ldr	r3, [pc, #44]	; (8020314 <tcp_write+0x624>)
 80202e8:	f240 12ad 	movw	r2, #429	; 0x1ad
 80202ec:	4912      	ldr	r1, [pc, #72]	; (8020338 <tcp_write+0x648>)
 80202ee:	480b      	ldr	r0, [pc, #44]	; (802031c <tcp_write+0x62c>)
 80202f0:	f006 fa30 	bl	8026754 <iprintf>
 80202f4:	f06f 000f 	mvn.w	r0, #15
 80202f8:	e6b9      	b.n	802006e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80202fa:	460a      	mov	r2, r1
 80202fc:	e787      	b.n	802020e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80202fe:	4b05      	ldr	r3, [pc, #20]	; (8020314 <tcp_write+0x624>)
 8020300:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8020304:	490d      	ldr	r1, [pc, #52]	; (802033c <tcp_write+0x64c>)
 8020306:	4805      	ldr	r0, [pc, #20]	; (802031c <tcp_write+0x62c>)
 8020308:	f006 fa24 	bl	8026754 <iprintf>
 802030c:	f06f 000f 	mvn.w	r0, #15
 8020310:	e6ad      	b.n	802006e <tcp_write+0x37e>
 8020312:	bf00      	nop
 8020314:	08046184 	.word	0x08046184
 8020318:	080463a0 	.word	0x080463a0
 802031c:	0802b44c 	.word	0x0802b44c
 8020320:	08046388 	.word	0x08046388
 8020324:	08046510 	.word	0x08046510
 8020328:	080464a0 	.word	0x080464a0
 802032c:	08046318 	.word	0x08046318
 8020330:	080464d8 	.word	0x080464d8
 8020334:	080463e0 	.word	0x080463e0
 8020338:	080462e4 	.word	0x080462e4
 802033c:	080462cc 	.word	0x080462cc

08020340 <tcp_split_unsent_seg>:
{
 8020340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8020344:	4605      	mov	r5, r0
{
 8020346:	b083      	sub	sp, #12
 8020348:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802034a:	2800      	cmp	r0, #0
 802034c:	f000 80a7 	beq.w	802049e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 8020350:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 8020352:	b376      	cbz	r6, 80203b2 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 8020354:	2c00      	cmp	r4, #0
 8020356:	f000 80b3 	beq.w	80204c0 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 802035a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 802035e:	45a1      	cmp	r9, r4
 8020360:	f240 8099 	bls.w	8020496 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8020364:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8020366:	42a3      	cmp	r3, r4
 8020368:	d328      	bcc.n	80203bc <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 802036a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 802036e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020372:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020376:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020378:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 802037c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020380:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020384:	eb08 010b 	add.w	r1, r8, fp
 8020388:	b289      	uxth	r1, r1
 802038a:	f7fb ff47 	bl	801c21c <pbuf_alloc>
  if (p == NULL) {
 802038e:	4607      	mov	r7, r0
 8020390:	b178      	cbz	r0, 80203b2 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 8020392:	6870      	ldr	r0, [r6, #4]
 8020394:	8932      	ldrh	r2, [r6, #8]
 8020396:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020398:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 802039a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 802039c:	4642      	mov	r2, r8
 802039e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 80203a0:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80203a2:	b29b      	uxth	r3, r3
 80203a4:	f7fc f9b0 	bl	801c708 <pbuf_copy_partial>
 80203a8:	4540      	cmp	r0, r8
 80203aa:	d01d      	beq.n	80203e8 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 80203ac:	4638      	mov	r0, r7
 80203ae:	f7fc f907 	bl	801c5c0 <pbuf_free>
  return ERR_MEM;
 80203b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80203b6:	b003      	add	sp, #12
 80203b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80203bc:	4b45      	ldr	r3, [pc, #276]	; (80204d4 <tcp_split_unsent_seg+0x194>)
 80203be:	f240 325b 	movw	r2, #859	; 0x35b
 80203c2:	4945      	ldr	r1, [pc, #276]	; (80204d8 <tcp_split_unsent_seg+0x198>)
 80203c4:	4845      	ldr	r0, [pc, #276]	; (80204dc <tcp_split_unsent_seg+0x19c>)
 80203c6:	f006 f9c5 	bl	8026754 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80203ca:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80203ce:	f1b9 0f00 	cmp.w	r9, #0
 80203d2:	d1ca      	bne.n	802036a <tcp_split_unsent_seg+0x2a>
 80203d4:	4b3f      	ldr	r3, [pc, #252]	; (80204d4 <tcp_split_unsent_seg+0x194>)
 80203d6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80203da:	4941      	ldr	r1, [pc, #260]	; (80204e0 <tcp_split_unsent_seg+0x1a0>)
 80203dc:	483f      	ldr	r0, [pc, #252]	; (80204dc <tcp_split_unsent_seg+0x19c>)
 80203de:	f006 f9b9 	bl	8026754 <iprintf>
  remainder = useg->len - split;
 80203e2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80203e6:	e7c0      	b.n	802036a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203e8:	68f3      	ldr	r3, [r6, #12]
 80203ea:	8998      	ldrh	r0, [r3, #12]
 80203ec:	f7fa f8ac 	bl	801a548 <lwip_htons>
  if (split_flags & TCP_PSH) {
 80203f0:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203f4:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 80203f8:	d159      	bne.n	80204ae <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80203fa:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 80203fe:	f018 0f01 	tst.w	r8, #1
 8020402:	d003      	beq.n	802040c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 8020404:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8020408:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 802040c:	68f3      	ldr	r3, [r6, #12]
 802040e:	6858      	ldr	r0, [r3, #4]
 8020410:	f7fa f89e 	bl	801a550 <lwip_htonl>
 8020414:	f8cd a000 	str.w	sl, [sp]
 8020418:	1823      	adds	r3, r4, r0
 802041a:	465a      	mov	r2, fp
 802041c:	4639      	mov	r1, r7
 802041e:	4628      	mov	r0, r5
 8020420:	f7ff fb1c 	bl	801fa5c <tcp_create_segment>
  if (seg == NULL) {
 8020424:	4682      	mov	sl, r0
 8020426:	2800      	cmp	r0, #0
 8020428:	d0c0      	beq.n	80203ac <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802042a:	6870      	ldr	r0, [r6, #4]
 802042c:	eba4 0409 	sub.w	r4, r4, r9
 8020430:	f7fc f8da 	bl	801c5e8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020434:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020436:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802043a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 802043c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802043e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020440:	4610      	mov	r0, r2
 8020442:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020444:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020448:	b289      	uxth	r1, r1
 802044a:	f7fb ffa1 	bl	801c390 <pbuf_realloc>
  useg->len -= remainder;
 802044e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020450:	4640      	mov	r0, r8
  useg->len -= remainder;
 8020452:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020454:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 8020456:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020458:	899c      	ldrh	r4, [r3, #12]
 802045a:	f7fa f875 	bl	801a548 <lwip_htons>
 802045e:	68f3      	ldr	r3, [r6, #12]
 8020460:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020462:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020464:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020466:	f7fc f8bf 	bl	801c5e8 <pbuf_clen>
 802046a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802046e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020470:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020474:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020478:	f7fc f8b6 	bl	801c5e8 <pbuf_clen>
 802047c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8020480:	4418      	add	r0, r3
  seg->next = useg->next;
 8020482:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020484:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8020488:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 802048c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 8020490:	f8da 3000 	ldr.w	r3, [sl]
 8020494:	b183      	cbz	r3, 80204b8 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 8020496:	2000      	movs	r0, #0
}
 8020498:	b003      	add	sp, #12
 802049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 802049e:	4b0d      	ldr	r3, [pc, #52]	; (80204d4 <tcp_split_unsent_seg+0x194>)
 80204a0:	f240 324b 	movw	r2, #843	; 0x34b
 80204a4:	490f      	ldr	r1, [pc, #60]	; (80204e4 <tcp_split_unsent_seg+0x1a4>)
 80204a6:	480d      	ldr	r0, [pc, #52]	; (80204dc <tcp_split_unsent_seg+0x19c>)
 80204a8:	f006 f954 	bl	8026754 <iprintf>
 80204ac:	e750      	b.n	8020350 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 80204ae:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80204b2:	f04f 0b08 	mov.w	fp, #8
 80204b6:	e7a2      	b.n	80203fe <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 80204b8:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 80204ba:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80204be:	e77a      	b.n	80203b6 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80204c0:	4b04      	ldr	r3, [pc, #16]	; (80204d4 <tcp_split_unsent_seg+0x194>)
 80204c2:	f240 3253 	movw	r2, #851	; 0x353
 80204c6:	4908      	ldr	r1, [pc, #32]	; (80204e8 <tcp_split_unsent_seg+0x1a8>)
 80204c8:	4804      	ldr	r0, [pc, #16]	; (80204dc <tcp_split_unsent_seg+0x19c>)
 80204ca:	f006 f943 	bl	8026754 <iprintf>
    return ERR_VAL;
 80204ce:	f06f 0005 	mvn.w	r0, #5
 80204d2:	e770      	b.n	80203b6 <tcp_split_unsent_seg+0x76>
 80204d4:	08046184 	.word	0x08046184
 80204d8:	08046578 	.word	0x08046578
 80204dc:	0802b44c 	.word	0x0802b44c
 80204e0:	08046588 	.word	0x08046588
 80204e4:	08046530 	.word	0x08046530
 80204e8:	08046554 	.word	0x08046554

080204ec <tcp_enqueue_flags>:
{
 80204ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80204f0:	f011 0703 	ands.w	r7, r1, #3
{
 80204f4:	b082      	sub	sp, #8
 80204f6:	460d      	mov	r5, r1
 80204f8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80204fa:	d05e      	beq.n	80205ba <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80204fc:	2c00      	cmp	r4, #0
 80204fe:	d065      	beq.n	80205cc <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 8020500:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8020504:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 8020508:	d049      	beq.n	802059e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802050a:	2104      	movs	r1, #4
 802050c:	2036      	movs	r0, #54	; 0x36
 802050e:	f7fb fe85 	bl	801c21c <pbuf_alloc>
 8020512:	4606      	mov	r6, r0
 8020514:	2800      	cmp	r0, #0
 8020516:	d049      	beq.n	80205ac <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020518:	8943      	ldrh	r3, [r0, #10]
 802051a:	2b03      	cmp	r3, #3
 802051c:	d872      	bhi.n	8020604 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 802051e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020522:	4b40      	ldr	r3, [pc, #256]	; (8020624 <tcp_enqueue_flags+0x138>)
 8020524:	f240 4239 	movw	r2, #1081	; 0x439
 8020528:	493f      	ldr	r1, [pc, #252]	; (8020628 <tcp_enqueue_flags+0x13c>)
 802052a:	4840      	ldr	r0, [pc, #256]	; (802062c <tcp_enqueue_flags+0x140>)
 802052c:	f006 f912 	bl	8026754 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8020530:	4631      	mov	r1, r6
 8020532:	f8cd 8000 	str.w	r8, [sp]
 8020536:	462a      	mov	r2, r5
 8020538:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802053a:	4620      	mov	r0, r4
 802053c:	f7ff fa8e 	bl	801fa5c <tcp_create_segment>
 8020540:	4606      	mov	r6, r0
 8020542:	2800      	cmp	r0, #0
 8020544:	d032      	beq.n	80205ac <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020546:	68c3      	ldr	r3, [r0, #12]
 8020548:	079a      	lsls	r2, r3, #30
 802054a:	d153      	bne.n	80205f4 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 802054c:	8933      	ldrh	r3, [r6, #8]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d144      	bne.n	80205dc <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 8020552:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8020554:	2b00      	cmp	r3, #0
 8020556:	d04b      	beq.n	80205f0 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020558:	461a      	mov	r2, r3
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d1fb      	bne.n	8020558 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 8020560:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8020562:	2300      	movs	r3, #0
 8020564:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020568:	b117      	cbz	r7, 8020570 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 802056a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802056c:	3301      	adds	r3, #1
 802056e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8020570:	07eb      	lsls	r3, r5, #31
 8020572:	d503      	bpl.n	802057c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 8020574:	8b63      	ldrh	r3, [r4, #26]
 8020576:	f043 0320 	orr.w	r3, r3, #32
 802057a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802057c:	6870      	ldr	r0, [r6, #4]
 802057e:	f7fc f833 	bl	801c5e8 <pbuf_clen>
 8020582:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8020586:	4418      	add	r0, r3
 8020588:	b280      	uxth	r0, r0
 802058a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 802058e:	b118      	cbz	r0, 8020598 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020590:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8020592:	2800      	cmp	r0, #0
 8020594:	d039      	beq.n	802060a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8020596:	2000      	movs	r0, #0
}
 8020598:	b002      	add	sp, #8
 802059a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802059e:	4641      	mov	r1, r8
 80205a0:	2036      	movs	r0, #54	; 0x36
 80205a2:	f7fb fe3b 	bl	801c21c <pbuf_alloc>
 80205a6:	4606      	mov	r6, r0
 80205a8:	2800      	cmp	r0, #0
 80205aa:	d1c1      	bne.n	8020530 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80205ac:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 80205ae:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80205b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205b6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 80205b8:	e7ee      	b.n	8020598 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80205ba:	4b1a      	ldr	r3, [pc, #104]	; (8020624 <tcp_enqueue_flags+0x138>)
 80205bc:	f240 4211 	movw	r2, #1041	; 0x411
 80205c0:	491b      	ldr	r1, [pc, #108]	; (8020630 <tcp_enqueue_flags+0x144>)
 80205c2:	481a      	ldr	r0, [pc, #104]	; (802062c <tcp_enqueue_flags+0x140>)
 80205c4:	f006 f8c6 	bl	8026754 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80205c8:	2c00      	cmp	r4, #0
 80205ca:	d199      	bne.n	8020500 <tcp_enqueue_flags+0x14>
 80205cc:	4b15      	ldr	r3, [pc, #84]	; (8020624 <tcp_enqueue_flags+0x138>)
 80205ce:	f240 4213 	movw	r2, #1043	; 0x413
 80205d2:	4918      	ldr	r1, [pc, #96]	; (8020634 <tcp_enqueue_flags+0x148>)
 80205d4:	4815      	ldr	r0, [pc, #84]	; (802062c <tcp_enqueue_flags+0x140>)
 80205d6:	f006 f8bd 	bl	8026754 <iprintf>
 80205da:	e791      	b.n	8020500 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80205dc:	4b11      	ldr	r3, [pc, #68]	; (8020624 <tcp_enqueue_flags+0x138>)
 80205de:	f240 4243 	movw	r2, #1091	; 0x443
 80205e2:	4915      	ldr	r1, [pc, #84]	; (8020638 <tcp_enqueue_flags+0x14c>)
 80205e4:	4811      	ldr	r0, [pc, #68]	; (802062c <tcp_enqueue_flags+0x140>)
 80205e6:	f006 f8b5 	bl	8026754 <iprintf>
  if (pcb->unsent == NULL) {
 80205ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d1b3      	bne.n	8020558 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 80205f0:	66e6      	str	r6, [r4, #108]	; 0x6c
 80205f2:	e7b6      	b.n	8020562 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80205f4:	4b0b      	ldr	r3, [pc, #44]	; (8020624 <tcp_enqueue_flags+0x138>)
 80205f6:	f240 4242 	movw	r2, #1090	; 0x442
 80205fa:	4910      	ldr	r1, [pc, #64]	; (802063c <tcp_enqueue_flags+0x150>)
 80205fc:	480b      	ldr	r0, [pc, #44]	; (802062c <tcp_enqueue_flags+0x140>)
 80205fe:	f006 f8a9 	bl	8026754 <iprintf>
 8020602:	e7a3      	b.n	802054c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 8020604:	f04f 0801 	mov.w	r8, #1
 8020608:	e792      	b.n	8020530 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802060a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 802060c:	2c00      	cmp	r4, #0
 802060e:	d1c3      	bne.n	8020598 <tcp_enqueue_flags+0xac>
 8020610:	4b04      	ldr	r3, [pc, #16]	; (8020624 <tcp_enqueue_flags+0x138>)
 8020612:	f240 4265 	movw	r2, #1125	; 0x465
 8020616:	490a      	ldr	r1, [pc, #40]	; (8020640 <tcp_enqueue_flags+0x154>)
 8020618:	4804      	ldr	r0, [pc, #16]	; (802062c <tcp_enqueue_flags+0x140>)
 802061a:	f006 f89b 	bl	8026754 <iprintf>
  return ERR_OK;
 802061e:	4620      	mov	r0, r4
 8020620:	e7ba      	b.n	8020598 <tcp_enqueue_flags+0xac>
 8020622:	bf00      	nop
 8020624:	08046184 	.word	0x08046184
 8020628:	08046610 	.word	0x08046610
 802062c:	0802b44c 	.word	0x0802b44c
 8020630:	08046598 	.word	0x08046598
 8020634:	080465f0 	.word	0x080465f0
 8020638:	08046664 	.word	0x08046664
 802063c:	0804664c 	.word	0x0804664c
 8020640:	08046690 	.word	0x08046690

08020644 <tcp_send_fin>:
{
 8020644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8020646:	4606      	mov	r6, r0
 8020648:	b188      	cbz	r0, 802066e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 802064a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 802064c:	b14c      	cbz	r4, 8020662 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802064e:	4625      	mov	r5, r4
 8020650:	6824      	ldr	r4, [r4, #0]
 8020652:	2c00      	cmp	r4, #0
 8020654:	d1fb      	bne.n	802064e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020656:	68eb      	ldr	r3, [r5, #12]
 8020658:	8998      	ldrh	r0, [r3, #12]
 802065a:	f7f9 ff75 	bl	801a548 <lwip_htons>
 802065e:	0743      	lsls	r3, r0, #29
 8020660:	d00d      	beq.n	802067e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020662:	4630      	mov	r0, r6
 8020664:	2101      	movs	r1, #1
}
 8020666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 802066a:	f7ff bf3f 	b.w	80204ec <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 802066e:	4b0b      	ldr	r3, [pc, #44]	; (802069c <tcp_send_fin+0x58>)
 8020670:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8020674:	490a      	ldr	r1, [pc, #40]	; (80206a0 <tcp_send_fin+0x5c>)
 8020676:	480b      	ldr	r0, [pc, #44]	; (80206a4 <tcp_send_fin+0x60>)
 8020678:	f006 f86c 	bl	8026754 <iprintf>
 802067c:	e7e5      	b.n	802064a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802067e:	68eb      	ldr	r3, [r5, #12]
 8020680:	2001      	movs	r0, #1
 8020682:	899f      	ldrh	r7, [r3, #12]
 8020684:	f7f9 ff60 	bl	801a548 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8020688:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802068a:	4338      	orrs	r0, r7
 802068c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 802068e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020692:	8190      	strh	r0, [r2, #12]
}
 8020694:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 8020696:	8373      	strh	r3, [r6, #26]
}
 8020698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802069a:	bf00      	nop
 802069c:	08046184 	.word	0x08046184
 80206a0:	080466b8 	.word	0x080466b8
 80206a4:	0802b44c 	.word	0x0802b44c

080206a8 <tcp_rexmit_rto_prepare>:
{
 80206a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80206aa:	4605      	mov	r5, r0
 80206ac:	2800      	cmp	r0, #0
 80206ae:	d032      	beq.n	8020716 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 80206b0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80206b2:	b132      	cbz	r2, 80206c2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80206b4:	6813      	ldr	r3, [r2, #0]
 80206b6:	4614      	mov	r4, r2
 80206b8:	b15b      	cbz	r3, 80206d2 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 80206ba:	6863      	ldr	r3, [r4, #4]
 80206bc:	7b9b      	ldrb	r3, [r3, #14]
 80206be:	2b01      	cmp	r3, #1
 80206c0:	d003      	beq.n	80206ca <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 80206c2:	f06f 0305 	mvn.w	r3, #5
}
 80206c6:	4618      	mov	r0, r3
 80206c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80206ca:	6824      	ldr	r4, [r4, #0]
 80206cc:	6823      	ldr	r3, [r4, #0]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d1f3      	bne.n	80206ba <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 80206d2:	6863      	ldr	r3, [r4, #4]
 80206d4:	7b9b      	ldrb	r3, [r3, #14]
 80206d6:	2b01      	cmp	r3, #1
 80206d8:	d1f3      	bne.n	80206c2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 80206da:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 80206dc:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 80206de:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80206e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 80206e4:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 80206e6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206e8:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 80206ea:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80206ee:	6858      	ldr	r0, [r3, #4]
 80206f0:	f7f9 ff2e 	bl	801a550 <lwip_htonl>
 80206f4:	68e3      	ldr	r3, [r4, #12]
 80206f6:	4606      	mov	r6, r0
 80206f8:	8924      	ldrh	r4, [r4, #8]
 80206fa:	8998      	ldrh	r0, [r3, #12]
 80206fc:	f7f9 ff24 	bl	801a548 <lwip_htons>
 8020700:	f010 0003 	ands.w	r0, r0, #3
 8020704:	4426      	add	r6, r4
  return ERR_OK;
 8020706:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020708:	bf18      	it	ne
 802070a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 802070c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802070e:	4430      	add	r0, r6
 8020710:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 8020712:	4618      	mov	r0, r3
 8020714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020716:	4b04      	ldr	r3, [pc, #16]	; (8020728 <tcp_rexmit_rto_prepare+0x80>)
 8020718:	f240 6263 	movw	r2, #1635	; 0x663
 802071c:	4903      	ldr	r1, [pc, #12]	; (802072c <tcp_rexmit_rto_prepare+0x84>)
 802071e:	4804      	ldr	r0, [pc, #16]	; (8020730 <tcp_rexmit_rto_prepare+0x88>)
 8020720:	f006 f818 	bl	8026754 <iprintf>
 8020724:	e7c4      	b.n	80206b0 <tcp_rexmit_rto_prepare+0x8>
 8020726:	bf00      	nop
 8020728:	08046184 	.word	0x08046184
 802072c:	080466d4 	.word	0x080466d4
 8020730:	0802b44c 	.word	0x0802b44c

08020734 <tcp_rexmit>:
{
 8020734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020736:	4607      	mov	r7, r0
 8020738:	2800      	cmp	r0, #0
 802073a:	d031      	beq.n	80207a0 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 802073c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 802073e:	b34e      	cbz	r6, 8020794 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 8020740:	6873      	ldr	r3, [r6, #4]
 8020742:	7b9b      	ldrb	r3, [r3, #14]
 8020744:	2b01      	cmp	r3, #1
 8020746:	d125      	bne.n	8020794 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 8020748:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 802074a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 802074e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 8020750:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 8020752:	b91b      	cbnz	r3, 802075c <tcp_rexmit+0x28>
 8020754:	e00f      	b.n	8020776 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 8020756:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8020758:	682b      	ldr	r3, [r5, #0]
 802075a:	b163      	cbz	r3, 8020776 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802075c:	68db      	ldr	r3, [r3, #12]
 802075e:	6858      	ldr	r0, [r3, #4]
 8020760:	f7f9 fef6 	bl	801a550 <lwip_htonl>
 8020764:	68f3      	ldr	r3, [r6, #12]
 8020766:	4604      	mov	r4, r0
 8020768:	6858      	ldr	r0, [r3, #4]
 802076a:	f7f9 fef1 	bl	801a550 <lwip_htonl>
 802076e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8020770:	2c00      	cmp	r4, #0
 8020772:	dbf0      	blt.n	8020756 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 8020774:	682b      	ldr	r3, [r5, #0]
 8020776:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8020778:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 802077a:	6833      	ldr	r3, [r6, #0]
 802077c:	b16b      	cbz	r3, 802079a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 802077e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8020782:	2bff      	cmp	r3, #255	; 0xff
 8020784:	d002      	beq.n	802078c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8020786:	3301      	adds	r3, #1
 8020788:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 802078c:	2300      	movs	r3, #0
  return ERR_OK;
 802078e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 8020790:	637b      	str	r3, [r7, #52]	; 0x34
}
 8020792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8020794:	f06f 0005 	mvn.w	r0, #5
}
 8020798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 802079a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 802079e:	e7ee      	b.n	802077e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80207a0:	4b03      	ldr	r3, [pc, #12]	; (80207b0 <tcp_rexmit+0x7c>)
 80207a2:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80207a6:	4903      	ldr	r1, [pc, #12]	; (80207b4 <tcp_rexmit+0x80>)
 80207a8:	4803      	ldr	r0, [pc, #12]	; (80207b8 <tcp_rexmit+0x84>)
 80207aa:	f005 ffd3 	bl	8026754 <iprintf>
 80207ae:	e7c5      	b.n	802073c <tcp_rexmit+0x8>
 80207b0:	08046184 	.word	0x08046184
 80207b4:	080466f8 	.word	0x080466f8
 80207b8:	0802b44c 	.word	0x0802b44c

080207bc <tcp_rexmit_fast>:
{
 80207bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80207be:	4604      	mov	r4, r0
 80207c0:	b340      	cbz	r0, 8020814 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80207c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80207c4:	b113      	cbz	r3, 80207cc <tcp_rexmit_fast+0x10>
 80207c6:	8b63      	ldrh	r3, [r4, #26]
 80207c8:	075b      	lsls	r3, r3, #29
 80207ca:	d500      	bpl.n	80207ce <tcp_rexmit_fast+0x12>
}
 80207cc:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 80207ce:	4620      	mov	r0, r4
 80207d0:	f7ff ffb0 	bl	8020734 <tcp_rexmit>
 80207d4:	2800      	cmp	r0, #0
 80207d6:	d1f9      	bne.n	80207cc <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207d8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80207dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207e2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207e4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207e8:	bf28      	it	cs
 80207ea:	4619      	movcs	r1, r3
 80207ec:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207ee:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80207f2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80207f6:	d902      	bls.n	80207fe <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 80207f8:	b283      	uxth	r3, r0
 80207fa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80207fe:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020800:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 8020802:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020806:	4413      	add	r3, r2
      pcb->rtime = 0;
 8020808:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802080a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 802080e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 8020810:	8622      	strh	r2, [r4, #48]	; 0x30
}
 8020812:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020814:	4b03      	ldr	r3, [pc, #12]	; (8020824 <tcp_rexmit_fast+0x68>)
 8020816:	f240 62f9 	movw	r2, #1785	; 0x6f9
 802081a:	4903      	ldr	r1, [pc, #12]	; (8020828 <tcp_rexmit_fast+0x6c>)
 802081c:	4803      	ldr	r0, [pc, #12]	; (802082c <tcp_rexmit_fast+0x70>)
 802081e:	f005 ff99 	bl	8026754 <iprintf>
 8020822:	e7ce      	b.n	80207c2 <tcp_rexmit_fast+0x6>
 8020824:	08046184 	.word	0x08046184
 8020828:	08046710 	.word	0x08046710
 802082c:	0802b44c 	.word	0x0802b44c

08020830 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020834:	b084      	sub	sp, #16
 8020836:	4607      	mov	r7, r0
 8020838:	460e      	mov	r6, r1
 802083a:	4615      	mov	r5, r2
 802083c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020840:	461c      	mov	r4, r3
{
 8020842:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8020846:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802084a:	b1fb      	cbz	r3, 802088c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802084c:	f1b8 0f00 	cmp.w	r8, #0
 8020850:	d026      	beq.n	80208a0 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020852:	4630      	mov	r0, r6
 8020854:	f7f9 fe7c 	bl	801a550 <lwip_htonl>
 8020858:	2114      	movs	r1, #20
 802085a:	4602      	mov	r2, r0
 802085c:	4628      	mov	r0, r5
 802085e:	f246 0508 	movw	r5, #24584	; 0x6008
 8020862:	464b      	mov	r3, r9
 8020864:	f8cd a000 	str.w	sl, [sp]
 8020868:	e9cd 1501 	strd	r1, r5, [sp, #4]
 802086c:	2100      	movs	r1, #0
 802086e:	f7ff f971 	bl	801fb54 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020872:	4601      	mov	r1, r0
 8020874:	b138      	cbz	r0, 8020886 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020876:	4643      	mov	r3, r8
 8020878:	4622      	mov	r2, r4
 802087a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 802087c:	b004      	add	sp, #16
 802087e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020882:	f7ff b9d5 	b.w	801fc30 <tcp_output_control_segment>
}
 8020886:	b004      	add	sp, #16
 8020888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802088c:	4b08      	ldr	r3, [pc, #32]	; (80208b0 <tcp_rst+0x80>)
 802088e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020892:	4908      	ldr	r1, [pc, #32]	; (80208b4 <tcp_rst+0x84>)
 8020894:	4808      	ldr	r0, [pc, #32]	; (80208b8 <tcp_rst+0x88>)
 8020896:	f005 ff5d 	bl	8026754 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802089a:	f1b8 0f00 	cmp.w	r8, #0
 802089e:	d1d8      	bne.n	8020852 <tcp_rst+0x22>
 80208a0:	4b03      	ldr	r3, [pc, #12]	; (80208b0 <tcp_rst+0x80>)
 80208a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80208a6:	4905      	ldr	r1, [pc, #20]	; (80208bc <tcp_rst+0x8c>)
 80208a8:	4803      	ldr	r0, [pc, #12]	; (80208b8 <tcp_rst+0x88>)
 80208aa:	f005 ff53 	bl	8026754 <iprintf>
 80208ae:	e7d0      	b.n	8020852 <tcp_rst+0x22>
 80208b0:	08046184 	.word	0x08046184
 80208b4:	08046730 	.word	0x08046730
 80208b8:	0802b44c 	.word	0x0802b44c
 80208bc:	0804674c 	.word	0x0804674c

080208c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80208c0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80208c2:	4604      	mov	r4, r0
 80208c4:	b1c0      	cbz	r0, 80208f8 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80208c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80208c8:	f7f9 fe42 	bl	801a550 <lwip_htonl>
 80208cc:	2100      	movs	r1, #0
 80208ce:	4602      	mov	r2, r0
 80208d0:	4620      	mov	r0, r4
 80208d2:	f7ff f985 	bl	801fbe0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80208d6:	4601      	mov	r1, r0
 80208d8:	b1b0      	cbz	r0, 8020908 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80208da:	1d23      	adds	r3, r4, #4
 80208dc:	4622      	mov	r2, r4
 80208de:	4620      	mov	r0, r4
 80208e0:	f7ff f9a6 	bl	801fc30 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208e4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 80208e6:	b118      	cbz	r0, 80208f0 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208e8:	f043 0303 	orr.w	r3, r3, #3
 80208ec:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80208ee:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80208f0:	f023 0303 	bic.w	r3, r3, #3
 80208f4:	8363      	strh	r3, [r4, #26]
}
 80208f6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80208f8:	4b07      	ldr	r3, [pc, #28]	; (8020918 <tcp_send_empty_ack+0x58>)
 80208fa:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80208fe:	4907      	ldr	r1, [pc, #28]	; (802091c <tcp_send_empty_ack+0x5c>)
 8020900:	4807      	ldr	r0, [pc, #28]	; (8020920 <tcp_send_empty_ack+0x60>)
 8020902:	f005 ff27 	bl	8026754 <iprintf>
 8020906:	e7de      	b.n	80208c6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020908:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 802090a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802090e:	f043 0303 	orr.w	r3, r3, #3
 8020912:	8363      	strh	r3, [r4, #26]
}
 8020914:	bd10      	pop	{r4, pc}
 8020916:	bf00      	nop
 8020918:	08046184 	.word	0x08046184
 802091c:	08046768 	.word	0x08046768
 8020920:	0802b44c 	.word	0x0802b44c

08020924 <tcp_output>:
{
 8020924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020928:	4604      	mov	r4, r0
{
 802092a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 802092c:	2800      	cmp	r0, #0
 802092e:	f000 81bc 	beq.w	8020caa <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020932:	7d23      	ldrb	r3, [r4, #20]
 8020934:	2b01      	cmp	r3, #1
 8020936:	f000 8173 	beq.w	8020c20 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 802093a:	4bb3      	ldr	r3, [pc, #716]	; (8020c08 <tcp_output+0x2e4>)
 802093c:	681b      	ldr	r3, [r3, #0]
 802093e:	42a3      	cmp	r3, r4
 8020940:	f000 817a 	beq.w	8020c38 <tcp_output+0x314>
  seg = pcb->unsent;
 8020944:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020946:	b345      	cbz	r5, 802099a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020948:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802094a:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802094e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8020952:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020956:	2800      	cmp	r0, #0
 8020958:	f040 81af 	bne.w	8020cba <tcp_output+0x396>
    return ip_route(src, dst);
 802095c:	4648      	mov	r0, r9
 802095e:	f003 fa2b 	bl	8023db8 <ip4_route>
 8020962:	4682      	mov	sl, r0
  if (netif == NULL) {
 8020964:	f1ba 0f00 	cmp.w	sl, #0
 8020968:	f000 81b9 	beq.w	8020cde <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 802096c:	6823      	ldr	r3, [r4, #0]
 802096e:	b913      	cbnz	r3, 8020976 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8020970:	f8da 3004 	ldr.w	r3, [sl, #4]
 8020974:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020976:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020978:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802097a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802097c:	bf28      	it	cs
 802097e:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020980:	f7f9 fde6 	bl	801a550 <lwip_htonl>
 8020984:	892b      	ldrh	r3, [r5, #8]
 8020986:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020988:	1a9b      	subs	r3, r3, r2
 802098a:	4418      	add	r0, r3
 802098c:	42b8      	cmp	r0, r7
 802098e:	d90f      	bls.n	80209b0 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020990:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8020994:	42bb      	cmp	r3, r7
 8020996:	f000 8159 	beq.w	8020c4c <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 802099a:	8b62      	ldrh	r2, [r4, #26]
 802099c:	0791      	lsls	r1, r2, #30
 802099e:	f100 814f 	bmi.w	8020c40 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80209a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 80209a6:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80209a8:	8362      	strh	r2, [r4, #26]
}
 80209aa:	b005      	add	sp, #20
 80209ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 80209b0:	2300      	movs	r3, #0
 80209b2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 80209b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	f000 8157 	beq.w	8020c6c <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 80209be:	4698      	mov	r8, r3
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d1fb      	bne.n	80209be <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 80209c6:	464e      	mov	r6, r9
 80209c8:	e0b7      	b.n	8020b3a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80209ca:	68eb      	ldr	r3, [r5, #12]
 80209cc:	2010      	movs	r0, #16
 80209ce:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80209d2:	f7f9 fdb9 	bl	801a548 <lwip_htons>
 80209d6:	ea49 0000 	orr.w	r0, r9, r0
 80209da:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80209de:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 80209e2:	686b      	ldr	r3, [r5, #4]
 80209e4:	7b9b      	ldrb	r3, [r3, #14]
 80209e6:	2b01      	cmp	r3, #1
 80209e8:	d160      	bne.n	8020aac <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80209ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80209ec:	f7f9 fdb0 	bl	801a550 <lwip_htonl>
 80209f0:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80209f4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80209f6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80209fa:	f7f9 fda5 	bl	801a548 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80209fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8020a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020a02:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020a06:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020a08:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8020a0e:	7aab      	ldrb	r3, [r5, #10]
 8020a10:	07db      	lsls	r3, r3, #31
 8020a12:	f100 80d0 	bmi.w	8020bb6 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020a16:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 8020a1a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	da01      	bge.n	8020a26 <tcp_output+0x102>
    pcb->rtime = 0;
 8020a22:	2300      	movs	r3, #0
 8020a24:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8020a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	f000 80b9 	beq.w	8020ba0 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a2e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 8020a30:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a34:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 8020a36:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a38:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 8020a3c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 8020a3e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020a42:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 8020a44:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 8020a46:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 8020a48:	b292      	uxth	r2, r2
  seg->p->len -= len;
 8020a4a:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 8020a4c:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 8020a4e:	f889 c010 	strb.w	ip, [r9, #16]
 8020a52:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8020a56:	7aab      	ldrb	r3, [r5, #10]
 8020a58:	009b      	lsls	r3, r3, #2
 8020a5a:	f003 0304 	and.w	r3, r3, #4
 8020a5e:	3314      	adds	r3, #20
 8020a60:	444b      	add	r3, r9
 8020a62:	459b      	cmp	fp, r3
 8020a64:	d00a      	beq.n	8020a7c <tcp_output+0x158>
 8020a66:	f240 621c 	movw	r2, #1564	; 0x61c
 8020a6a:	4b68      	ldr	r3, [pc, #416]	; (8020c0c <tcp_output+0x2e8>)
 8020a6c:	4968      	ldr	r1, [pc, #416]	; (8020c10 <tcp_output+0x2ec>)
 8020a6e:	4869      	ldr	r0, [pc, #420]	; (8020c14 <tcp_output+0x2f0>)
 8020a70:	f005 fe70 	bl	8026754 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8020a74:	6868      	ldr	r0, [r5, #4]
 8020a76:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020a7a:	8902      	ldrh	r2, [r0, #8]
 8020a7c:	4623      	mov	r3, r4
 8020a7e:	2106      	movs	r1, #6
 8020a80:	9600      	str	r6, [sp, #0]
 8020a82:	f7fa faf5 	bl	801b070 <ip_chksum_pseudo>
 8020a86:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020a8a:	6868      	ldr	r0, [r5, #4]
 8020a8c:	4632      	mov	r2, r6
 8020a8e:	f8cd a008 	str.w	sl, [sp, #8]
 8020a92:	4621      	mov	r1, r4
 8020a94:	7aa3      	ldrb	r3, [r4, #10]
 8020a96:	9300      	str	r3, [sp, #0]
 8020a98:	2306      	movs	r3, #6
 8020a9a:	9301      	str	r3, [sp, #4]
 8020a9c:	7ae3      	ldrb	r3, [r4, #11]
 8020a9e:	f003 fb55 	bl	802414c <ip4_output_if>
    if (err != ERR_OK) {
 8020aa2:	2800      	cmp	r0, #0
 8020aa4:	f040 8116 	bne.w	8020cd4 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020aa8:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 8020aac:	682b      	ldr	r3, [r5, #0]
 8020aae:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8020ab0:	7d23      	ldrb	r3, [r4, #20]
 8020ab2:	2b02      	cmp	r3, #2
 8020ab4:	d003      	beq.n	8020abe <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020ab6:	8b63      	ldrh	r3, [r4, #26]
 8020ab8:	f023 0303 	bic.w	r3, r3, #3
 8020abc:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020abe:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020ac2:	f7f9 fd45 	bl	801a550 <lwip_htonl>
 8020ac6:	68eb      	ldr	r3, [r5, #12]
 8020ac8:	4681      	mov	r9, r0
 8020aca:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8020ace:	8998      	ldrh	r0, [r3, #12]
 8020ad0:	f7f9 fd3a 	bl	801a548 <lwip_htons>
 8020ad4:	f010 0003 	ands.w	r0, r0, #3
 8020ad8:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020ada:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020adc:	bf18      	it	ne
 8020ade:	2001      	movne	r0, #1
 8020ae0:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 8020ae2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020ae6:	1a1b      	subs	r3, r3, r0
 8020ae8:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8020aea:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8020aec:	bfb8      	it	lt
 8020aee:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8020af0:	8998      	ldrh	r0, [r3, #12]
 8020af2:	f7f9 fd29 	bl	801a548 <lwip_htons>
 8020af6:	f010 0003 	ands.w	r0, r0, #3
 8020afa:	bf18      	it	ne
 8020afc:	2001      	movne	r0, #1
 8020afe:	eb10 0f09 	cmn.w	r0, r9
 8020b02:	d046      	beq.n	8020b92 <tcp_output+0x26e>
      seg->next = NULL;
 8020b04:	2300      	movs	r3, #0
 8020b06:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8020b08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d045      	beq.n	8020b9a <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020b0e:	68eb      	ldr	r3, [r5, #12]
 8020b10:	6858      	ldr	r0, [r3, #4]
 8020b12:	f7f9 fd1d 	bl	801a550 <lwip_htonl>
 8020b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020b1a:	4681      	mov	r9, r0
 8020b1c:	6858      	ldr	r0, [r3, #4]
 8020b1e:	f7f9 fd17 	bl	801a550 <lwip_htonl>
 8020b22:	eba9 0000 	sub.w	r0, r9, r0
 8020b26:	2800      	cmp	r0, #0
 8020b28:	f2c0 80a2 	blt.w	8020c70 <tcp_output+0x34c>
          useg->next = seg;
 8020b2c:	f8c8 5000 	str.w	r5, [r8]
 8020b30:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 8020b32:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 8020b34:	2d00      	cmp	r5, #0
 8020b36:	f000 80c4 	beq.w	8020cc2 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8020b3a:	68eb      	ldr	r3, [r5, #12]
 8020b3c:	6858      	ldr	r0, [r3, #4]
 8020b3e:	f7f9 fd07 	bl	801a550 <lwip_htonl>
 8020b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020b44:	1ac0      	subs	r0, r0, r3
 8020b46:	892b      	ldrh	r3, [r5, #8]
 8020b48:	4418      	add	r0, r3
  while (seg != NULL &&
 8020b4a:	42b8      	cmp	r0, r7
 8020b4c:	f200 80bb 	bhi.w	8020cc6 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 8020b50:	68eb      	ldr	r3, [r5, #12]
 8020b52:	8998      	ldrh	r0, [r3, #12]
 8020b54:	f7f9 fcf8 	bl	801a548 <lwip_htons>
 8020b58:	0742      	lsls	r2, r0, #29
 8020b5a:	d412      	bmi.n	8020b82 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020b5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020b5e:	b14b      	cbz	r3, 8020b74 <tcp_output+0x250>
 8020b60:	8b63      	ldrh	r3, [r4, #26]
 8020b62:	f013 0f44 	tst.w	r3, #68	; 0x44
 8020b66:	461a      	mov	r2, r3
 8020b68:	d104      	bne.n	8020b74 <tcp_output+0x250>
 8020b6a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8020b6c:	2900      	cmp	r1, #0
 8020b6e:	d038      	beq.n	8020be2 <tcp_output+0x2be>
 8020b70:	6808      	ldr	r0, [r1, #0]
 8020b72:	b388      	cbz	r0, 8020bd8 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 8020b74:	7d23      	ldrb	r3, [r4, #20]
 8020b76:	2b02      	cmp	r3, #2
 8020b78:	f47f af27 	bne.w	80209ca <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020b7c:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020b80:	e72f      	b.n	80209e2 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 8020b82:	4b22      	ldr	r3, [pc, #136]	; (8020c0c <tcp_output+0x2e8>)
 8020b84:	f240 5236 	movw	r2, #1334	; 0x536
 8020b88:	4923      	ldr	r1, [pc, #140]	; (8020c18 <tcp_output+0x2f4>)
 8020b8a:	4822      	ldr	r0, [pc, #136]	; (8020c14 <tcp_output+0x2f0>)
 8020b8c:	f005 fde2 	bl	8026754 <iprintf>
 8020b90:	e7e4      	b.n	8020b5c <tcp_output+0x238>
      tcp_seg_free(seg);
 8020b92:	4628      	mov	r0, r5
 8020b94:	f7fc fa90 	bl	801d0b8 <tcp_seg_free>
 8020b98:	e7cb      	b.n	8020b32 <tcp_output+0x20e>
        pcb->unacked = seg;
 8020b9a:	46a8      	mov	r8, r5
 8020b9c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 8020b9e:	e7c8      	b.n	8020b32 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 8020ba0:	4b1e      	ldr	r3, [pc, #120]	; (8020c1c <tcp_output+0x2f8>)
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020ba6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8020baa:	f7f9 fcd1 	bl	801a550 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020bae:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020bb2:	63a0      	str	r0, [r4, #56]	; 0x38
 8020bb4:	e73b      	b.n	8020a2e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020bb6:	4632      	mov	r2, r6
 8020bb8:	4651      	mov	r1, sl
 8020bba:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 8020bbe:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020bc2:	f7fd fa75 	bl	801e0b0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8020bc6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8020bca:	f7f9 fcc1 	bl	801a550 <lwip_htonl>
 8020bce:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020bd2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8020bd6:	e720      	b.n	8020a1a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020bd8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8020bdc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8020bde:	4584      	cmp	ip, r0
 8020be0:	d2c8      	bcs.n	8020b74 <tcp_output+0x250>
 8020be2:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 8020be6:	2800      	cmp	r0, #0
 8020be8:	d0c4      	beq.n	8020b74 <tcp_output+0x250>
 8020bea:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 8020bee:	2808      	cmp	r0, #8
 8020bf0:	d8c0      	bhi.n	8020b74 <tcp_output+0x250>
 8020bf2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8020bf6:	d1bd      	bne.n	8020b74 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 8020bf8:	2900      	cmp	r1, #0
 8020bfa:	f47f aed2 	bne.w	80209a2 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 8020bfe:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020c00:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 8020c02:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8020c06:	e6cc      	b.n	80209a2 <tcp_output+0x7e>
 8020c08:	2002e488 	.word	0x2002e488
 8020c0c:	08046184 	.word	0x08046184
 8020c10:	080467e0 	.word	0x080467e0
 8020c14:	0802b44c 	.word	0x0802b44c
 8020c18:	080467c8 	.word	0x080467c8
 8020c1c:	2002e454 	.word	0x2002e454
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020c20:	4b30      	ldr	r3, [pc, #192]	; (8020ce4 <tcp_output+0x3c0>)
 8020c22:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020c26:	4930      	ldr	r1, [pc, #192]	; (8020ce8 <tcp_output+0x3c4>)
 8020c28:	4830      	ldr	r0, [pc, #192]	; (8020cec <tcp_output+0x3c8>)
 8020c2a:	f005 fd93 	bl	8026754 <iprintf>
  if (tcp_input_pcb == pcb) {
 8020c2e:	4b30      	ldr	r3, [pc, #192]	; (8020cf0 <tcp_output+0x3cc>)
 8020c30:	681b      	ldr	r3, [r3, #0]
 8020c32:	42a3      	cmp	r3, r4
 8020c34:	f47f ae86 	bne.w	8020944 <tcp_output+0x20>
    return ERR_OK;
 8020c38:	2000      	movs	r0, #0
}
 8020c3a:	b005      	add	sp, #20
 8020c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 8020c40:	4620      	mov	r0, r4
}
 8020c42:	b005      	add	sp, #20
 8020c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8020c48:	f7ff be3a 	b.w	80208c0 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020c4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	f47f aea3 	bne.w	802099a <tcp_output+0x76>
 8020c54:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	f47f ae9e 	bne.w	802099a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 8020c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 8020c62:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 8020c66:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 8020c6a:	e696      	b.n	802099a <tcp_output+0x76>
 8020c6c:	4698      	mov	r8, r3
 8020c6e:	e6aa      	b.n	80209c6 <tcp_output+0xa2>
          while (*cur_seg &&
 8020c70:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020c72:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 8020c76:	b92b      	cbnz	r3, 8020c84 <tcp_output+0x360>
 8020c78:	e013      	b.n	8020ca2 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 8020c7a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 8020c7e:	f8db 3000 	ldr.w	r3, [fp]
 8020c82:	b173      	cbz	r3, 8020ca2 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020c84:	68db      	ldr	r3, [r3, #12]
 8020c86:	6858      	ldr	r0, [r3, #4]
 8020c88:	f7f9 fc62 	bl	801a550 <lwip_htonl>
 8020c8c:	68eb      	ldr	r3, [r5, #12]
 8020c8e:	4681      	mov	r9, r0
 8020c90:	6858      	ldr	r0, [r3, #4]
 8020c92:	f7f9 fc5d 	bl	801a550 <lwip_htonl>
 8020c96:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 8020c9a:	2800      	cmp	r0, #0
 8020c9c:	dbed      	blt.n	8020c7a <tcp_output+0x356>
          seg->next = (*cur_seg);
 8020c9e:	f8db 3000 	ldr.w	r3, [fp]
 8020ca2:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8020ca4:	f8cb 5000 	str.w	r5, [fp]
 8020ca8:	e743      	b.n	8020b32 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020caa:	4b0e      	ldr	r3, [pc, #56]	; (8020ce4 <tcp_output+0x3c0>)
 8020cac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8020cb0:	4910      	ldr	r1, [pc, #64]	; (8020cf4 <tcp_output+0x3d0>)
 8020cb2:	480e      	ldr	r0, [pc, #56]	; (8020cec <tcp_output+0x3c8>)
 8020cb4:	f005 fd4e 	bl	8026754 <iprintf>
 8020cb8:	e63b      	b.n	8020932 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 8020cba:	f7fb f95b 	bl	801bf74 <netif_get_by_index>
 8020cbe:	4682      	mov	sl, r0
 8020cc0:	e650      	b.n	8020964 <tcp_output+0x40>
 8020cc2:	8b63      	ldrh	r3, [r4, #26]
 8020cc4:	e79b      	b.n	8020bfe <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020cc6:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 8020cc8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020cca:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 8020ccc:	2900      	cmp	r1, #0
 8020cce:	f47f ae68 	bne.w	80209a2 <tcp_output+0x7e>
 8020cd2:	e794      	b.n	8020bfe <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020cd4:	8b63      	ldrh	r3, [r4, #26]
 8020cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cda:	8363      	strh	r3, [r4, #26]
      return err;
 8020cdc:	e665      	b.n	80209aa <tcp_output+0x86>
    return ERR_RTE;
 8020cde:	f06f 0003 	mvn.w	r0, #3
 8020ce2:	e662      	b.n	80209aa <tcp_output+0x86>
 8020ce4:	08046184 	.word	0x08046184
 8020ce8:	080467a0 	.word	0x080467a0
 8020cec:	0802b44c 	.word	0x0802b44c
 8020cf0:	2002e488 	.word	0x2002e488
 8020cf4:	08046788 	.word	0x08046788

08020cf8 <tcp_rexmit_rto_commit>:
{
 8020cf8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	b158      	cbz	r0, 8020d16 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8020cfe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020d02:	2bff      	cmp	r3, #255	; 0xff
 8020d04:	d002      	beq.n	8020d0c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8020d06:	3301      	adds	r3, #1
 8020d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020d0c:	4620      	mov	r0, r4
}
 8020d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020d12:	f7ff be07 	b.w	8020924 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020d16:	4b04      	ldr	r3, [pc, #16]	; (8020d28 <tcp_rexmit_rto_commit+0x30>)
 8020d18:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020d1c:	4903      	ldr	r1, [pc, #12]	; (8020d2c <tcp_rexmit_rto_commit+0x34>)
 8020d1e:	4804      	ldr	r0, [pc, #16]	; (8020d30 <tcp_rexmit_rto_commit+0x38>)
 8020d20:	f005 fd18 	bl	8026754 <iprintf>
 8020d24:	e7eb      	b.n	8020cfe <tcp_rexmit_rto_commit+0x6>
 8020d26:	bf00      	nop
 8020d28:	08046184 	.word	0x08046184
 8020d2c:	080467f4 	.word	0x080467f4
 8020d30:	0802b44c 	.word	0x0802b44c

08020d34 <tcp_rexmit_rto>:
{
 8020d34:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020d36:	4604      	mov	r4, r0
 8020d38:	b118      	cbz	r0, 8020d42 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020d3a:	f7ff fcb5 	bl	80206a8 <tcp_rexmit_rto_prepare>
 8020d3e:	b198      	cbz	r0, 8020d68 <tcp_rexmit_rto+0x34>
}
 8020d40:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020d42:	4b0f      	ldr	r3, [pc, #60]	; (8020d80 <tcp_rexmit_rto+0x4c>)
 8020d44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8020d48:	490e      	ldr	r1, [pc, #56]	; (8020d84 <tcp_rexmit_rto+0x50>)
 8020d4a:	480f      	ldr	r0, [pc, #60]	; (8020d88 <tcp_rexmit_rto+0x54>)
 8020d4c:	f005 fd02 	bl	8026754 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020d50:	4620      	mov	r0, r4
 8020d52:	f7ff fca9 	bl	80206a8 <tcp_rexmit_rto_prepare>
 8020d56:	2800      	cmp	r0, #0
 8020d58:	d1f2      	bne.n	8020d40 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020d5a:	4b09      	ldr	r3, [pc, #36]	; (8020d80 <tcp_rexmit_rto+0x4c>)
 8020d5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020d60:	490a      	ldr	r1, [pc, #40]	; (8020d8c <tcp_rexmit_rto+0x58>)
 8020d62:	4809      	ldr	r0, [pc, #36]	; (8020d88 <tcp_rexmit_rto+0x54>)
 8020d64:	f005 fcf6 	bl	8026754 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8020d68:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020d6c:	2bff      	cmp	r3, #255	; 0xff
 8020d6e:	d002      	beq.n	8020d76 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8020d70:	3301      	adds	r3, #1
 8020d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8020d76:	4620      	mov	r0, r4
}
 8020d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8020d7c:	f7ff bdd2 	b.w	8020924 <tcp_output>
 8020d80:	08046184 	.word	0x08046184
 8020d84:	08046818 	.word	0x08046818
 8020d88:	0802b44c 	.word	0x0802b44c
 8020d8c:	080467f4 	.word	0x080467f4

08020d90 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020d90:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020d92:	4604      	mov	r4, r0
 8020d94:	b188      	cbz	r0, 8020dba <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8020d96:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8020d98:	3801      	subs	r0, #1
 8020d9a:	f7f9 fbd9 	bl	801a550 <lwip_htonl>
 8020d9e:	2100      	movs	r1, #0
 8020da0:	4602      	mov	r2, r0
 8020da2:	4620      	mov	r0, r4
 8020da4:	f7fe ff1c 	bl	801fbe0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020da8:	4601      	mov	r1, r0
 8020daa:	b170      	cbz	r0, 8020dca <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020dac:	1d23      	adds	r3, r4, #4
 8020dae:	4622      	mov	r2, r4
 8020db0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020db6:	f7fe bf3b 	b.w	801fc30 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020dba:	4b05      	ldr	r3, [pc, #20]	; (8020dd0 <tcp_keepalive+0x40>)
 8020dbc:	f640 0224 	movw	r2, #2084	; 0x824
 8020dc0:	4904      	ldr	r1, [pc, #16]	; (8020dd4 <tcp_keepalive+0x44>)
 8020dc2:	4805      	ldr	r0, [pc, #20]	; (8020dd8 <tcp_keepalive+0x48>)
 8020dc4:	f005 fcc6 	bl	8026754 <iprintf>
 8020dc8:	e7e5      	b.n	8020d96 <tcp_keepalive+0x6>
}
 8020dca:	f04f 30ff 	mov.w	r0, #4294967295
 8020dce:	bd10      	pop	{r4, pc}
 8020dd0:	08046184 	.word	0x08046184
 8020dd4:	08046834 	.word	0x08046834
 8020dd8:	0802b44c 	.word	0x0802b44c

08020ddc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020de0:	4604      	mov	r4, r0
 8020de2:	2800      	cmp	r0, #0
 8020de4:	d051      	beq.n	8020e8a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020de6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8020de8:	2d00      	cmp	r5, #0
 8020dea:	d04b      	beq.n	8020e84 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020dec:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8020df0:	2bff      	cmp	r3, #255	; 0xff
 8020df2:	d002      	beq.n	8020dfa <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8020df4:	3301      	adds	r3, #1
 8020df6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020dfa:	68eb      	ldr	r3, [r5, #12]
 8020dfc:	8998      	ldrh	r0, [r3, #12]
 8020dfe:	f7f9 fba3 	bl	801a548 <lwip_htons>
 8020e02:	07c3      	lsls	r3, r0, #31
 8020e04:	d527      	bpl.n	8020e56 <tcp_zero_window_probe+0x7a>
 8020e06:	8929      	ldrh	r1, [r5, #8]
 8020e08:	bb29      	cbnz	r1, 8020e56 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020e0a:	68eb      	ldr	r3, [r5, #12]
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	685a      	ldr	r2, [r3, #4]
 8020e10:	f7fe fee6 	bl	801fbe0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020e14:	4606      	mov	r6, r0
 8020e16:	b388      	cbz	r0, 8020e7c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8020e18:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8020e1c:	2011      	movs	r0, #17
 8020e1e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8020e22:	f7f9 fb91 	bl	801a548 <lwip_htons>
 8020e26:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8020e2a:	4338      	orrs	r0, r7
 8020e2c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020e30:	68eb      	ldr	r3, [r5, #12]
 8020e32:	6858      	ldr	r0, [r3, #4]
 8020e34:	f7f9 fb8c 	bl	801a550 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020e38:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020e3a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e3c:	4622      	mov	r2, r4
 8020e3e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020e40:	1a1b      	subs	r3, r3, r0
 8020e42:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e44:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8020e48:	bfb8      	it	lt
 8020e4a:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e4c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8020e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020e52:	f7fe beed 	b.w	801fc30 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020e56:	68eb      	ldr	r3, [r5, #12]
 8020e58:	2101      	movs	r1, #1
 8020e5a:	4620      	mov	r0, r4
 8020e5c:	685a      	ldr	r2, [r3, #4]
 8020e5e:	f7fe febf 	bl	801fbe0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8020e62:	4606      	mov	r6, r0
 8020e64:	b150      	cbz	r0, 8020e7c <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020e66:	6868      	ldr	r0, [r5, #4]
 8020e68:	892a      	ldrh	r2, [r5, #8]
 8020e6a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8020e6c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8020e6e:	1a9b      	subs	r3, r3, r2
 8020e70:	2201      	movs	r2, #1
 8020e72:	3114      	adds	r1, #20
 8020e74:	b29b      	uxth	r3, r3
 8020e76:	f7fb fc47 	bl	801c708 <pbuf_copy_partial>
 8020e7a:	e7d9      	b.n	8020e30 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 8020e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 8020e84:	4628      	mov	r0, r5
}
 8020e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020e8a:	4b04      	ldr	r3, [pc, #16]	; (8020e9c <tcp_zero_window_probe+0xc0>)
 8020e8c:	f640 024f 	movw	r2, #2127	; 0x84f
 8020e90:	4903      	ldr	r1, [pc, #12]	; (8020ea0 <tcp_zero_window_probe+0xc4>)
 8020e92:	4804      	ldr	r0, [pc, #16]	; (8020ea4 <tcp_zero_window_probe+0xc8>)
 8020e94:	f005 fc5e 	bl	8026754 <iprintf>
 8020e98:	e7a5      	b.n	8020de6 <tcp_zero_window_probe+0xa>
 8020e9a:	bf00      	nop
 8020e9c:	08046184 	.word	0x08046184
 8020ea0:	08046850 	.word	0x08046850
 8020ea4:	0802b44c 	.word	0x0802b44c

08020ea8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020ea8:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020eaa:	22bc      	movs	r2, #188	; 0xbc
{
 8020eac:	b570      	push	{r4, r5, r6, lr}
 8020eae:	460e      	mov	r6, r1
 8020eb0:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020eb2:	4910      	ldr	r1, [pc, #64]	; (8020ef4 <sys_timeout_abs+0x4c>)
 8020eb4:	200c      	movs	r0, #12
{
 8020eb6:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020eb8:	f7fa fe34 	bl	801bb24 <memp_malloc_fn>
  if (timeout == NULL) {
 8020ebc:	b190      	cbz	r0, 8020ee4 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8020ebe:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020ec0:	490d      	ldr	r1, [pc, #52]	; (8020ef8 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 8020ec2:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8020ec4:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8020ec6:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8020eca:	680b      	ldr	r3, [r1, #0]
 8020ecc:	b91b      	cbnz	r3, 8020ed6 <sys_timeout_abs+0x2e>
 8020ece:	e007      	b.n	8020ee0 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020ed0:	4619      	mov	r1, r3
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	b11b      	cbz	r3, 8020ede <sys_timeout_abs+0x36>
 8020ed6:	685a      	ldr	r2, [r3, #4]
 8020ed8:	1aa2      	subs	r2, r4, r2
 8020eda:	2a00      	cmp	r2, #0
 8020edc:	daf8      	bge.n	8020ed0 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 8020ede:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8020ee0:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8020ee2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020ee4:	4b03      	ldr	r3, [pc, #12]	; (8020ef4 <sys_timeout_abs+0x4c>)
 8020ee6:	22be      	movs	r2, #190	; 0xbe
 8020ee8:	4904      	ldr	r1, [pc, #16]	; (8020efc <sys_timeout_abs+0x54>)
 8020eea:	4805      	ldr	r0, [pc, #20]	; (8020f00 <sys_timeout_abs+0x58>)
}
 8020eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020ef0:	f005 bc30 	b.w	8026754 <iprintf>
 8020ef4:	08046874 	.word	0x08046874
 8020ef8:	2002e4a4 	.word	0x2002e4a4
 8020efc:	080468a8 	.word	0x080468a8
 8020f00:	0802b44c 	.word	0x0802b44c

08020f04 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020f04:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020f06:	6843      	ldr	r3, [r0, #4]
{
 8020f08:	4604      	mov	r4, r0
  cyclic->handler();
 8020f0a:	4798      	blx	r3

  now = sys_now();
 8020f0c:	f7f4 fc90 	bl	8015830 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020f10:	4b09      	ldr	r3, [pc, #36]	; (8020f38 <lwip_cyclic_timer+0x34>)
 8020f12:	6825      	ldr	r5, [r4, #0]
 8020f14:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f16:	4909      	ldr	r1, [pc, #36]	; (8020f3c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020f18:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020f1a:	1a1a      	subs	r2, r3, r0
 8020f1c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f1e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020f20:	da04      	bge.n	8020f2c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f22:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f28:	f7ff bfbe 	b.w	8020ea8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020f2c:	4618      	mov	r0, r3
}
 8020f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020f32:	f7ff bfb9 	b.w	8020ea8 <sys_timeout_abs>
 8020f36:	bf00      	nop
 8020f38:	2002e4a0 	.word	0x2002e4a0
 8020f3c:	08020f05 	.word	0x08020f05

08020f40 <tcpip_tcp_timer>:
{
 8020f40:	b508      	push	{r3, lr}
  tcp_tmr();
 8020f42:	f7fd f887 	bl	801e054 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020f46:	4b09      	ldr	r3, [pc, #36]	; (8020f6c <tcpip_tcp_timer+0x2c>)
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	b143      	cbz	r3, 8020f5e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f4c:	f7f4 fc70 	bl	8015830 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f50:	2200      	movs	r2, #0
 8020f52:	4907      	ldr	r1, [pc, #28]	; (8020f70 <tcpip_tcp_timer+0x30>)
 8020f54:	30fa      	adds	r0, #250	; 0xfa
}
 8020f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f5a:	f7ff bfa5 	b.w	8020ea8 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020f5e:	4b05      	ldr	r3, [pc, #20]	; (8020f74 <tcpip_tcp_timer+0x34>)
 8020f60:	681b      	ldr	r3, [r3, #0]
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d1f2      	bne.n	8020f4c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8020f66:	4a04      	ldr	r2, [pc, #16]	; (8020f78 <tcpip_tcp_timer+0x38>)
 8020f68:	6013      	str	r3, [r2, #0]
}
 8020f6a:	bd08      	pop	{r3, pc}
 8020f6c:	2002e444 	.word	0x2002e444
 8020f70:	08020f41 	.word	0x08020f41
 8020f74:	2002e45c 	.word	0x2002e45c
 8020f78:	2002e4a8 	.word	0x2002e4a8

08020f7c <tcp_timer_needed>:
{
 8020f7c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020f7e:	4b0b      	ldr	r3, [pc, #44]	; (8020fac <tcp_timer_needed+0x30>)
 8020f80:	681a      	ldr	r2, [r3, #0]
 8020f82:	b98a      	cbnz	r2, 8020fa8 <tcp_timer_needed+0x2c>
 8020f84:	4a0a      	ldr	r2, [pc, #40]	; (8020fb0 <tcp_timer_needed+0x34>)
 8020f86:	6812      	ldr	r2, [r2, #0]
 8020f88:	b152      	cbz	r2, 8020fa0 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 8020f8a:	2201      	movs	r2, #1
 8020f8c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020f8e:	f7f4 fc4f 	bl	8015830 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f92:	2200      	movs	r2, #0
 8020f94:	4907      	ldr	r1, [pc, #28]	; (8020fb4 <tcp_timer_needed+0x38>)
 8020f96:	30fa      	adds	r0, #250	; 0xfa
}
 8020f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020f9c:	f7ff bf84 	b.w	8020ea8 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020fa0:	4a05      	ldr	r2, [pc, #20]	; (8020fb8 <tcp_timer_needed+0x3c>)
 8020fa2:	6812      	ldr	r2, [r2, #0]
 8020fa4:	2a00      	cmp	r2, #0
 8020fa6:	d1f0      	bne.n	8020f8a <tcp_timer_needed+0xe>
}
 8020fa8:	bd08      	pop	{r3, pc}
 8020faa:	bf00      	nop
 8020fac:	2002e4a8 	.word	0x2002e4a8
 8020fb0:	2002e444 	.word	0x2002e444
 8020fb4:	08020f41 	.word	0x08020f41
 8020fb8:	2002e45c 	.word	0x2002e45c

08020fbc <sys_timeouts_init>:
{
 8020fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020fc0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8020fc4:	4c11      	ldr	r4, [pc, #68]	; (802100c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fc6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8021018 <sys_timeouts_init+0x5c>
 8020fca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020fce:	f8df 804c 	ldr.w	r8, [pc, #76]	; 802101c <sys_timeouts_init+0x60>
 8020fd2:	f104 0620 	add.w	r6, r4, #32
 8020fd6:	4f0e      	ldr	r7, [pc, #56]	; (8021010 <sys_timeouts_init+0x54>)
 8020fd8:	d20d      	bcs.n	8020ff6 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020fda:	f7f4 fc29 	bl	8015830 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020fde:	4622      	mov	r2, r4
 8020fe0:	490c      	ldr	r1, [pc, #48]	; (8021014 <sys_timeouts_init+0x58>)
 8020fe2:	4428      	add	r0, r5
 8020fe4:	f7ff ff60 	bl	8020ea8 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020fe8:	42b4      	cmp	r4, r6
 8020fea:	d00c      	beq.n	8021006 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020fec:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020ff0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8020ff4:	d3f1      	bcc.n	8020fda <sys_timeouts_init+0x1e>
 8020ff6:	464b      	mov	r3, r9
 8020ff8:	4641      	mov	r1, r8
 8020ffa:	f240 1229 	movw	r2, #297	; 0x129
 8020ffe:	4638      	mov	r0, r7
 8021000:	f005 fba8 	bl	8026754 <iprintf>
 8021004:	e7e9      	b.n	8020fda <sys_timeouts_init+0x1e>
}
 8021006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802100a:	bf00      	nop
 802100c:	08046928 	.word	0x08046928
 8021010:	0802b44c 	.word	0x0802b44c
 8021014:	08020f05 	.word	0x08020f05
 8021018:	08046874 	.word	0x08046874
 802101c:	080468e8 	.word	0x080468e8

08021020 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021020:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8021024:	b570      	push	{r4, r5, r6, lr}
 8021026:	4604      	mov	r4, r0
 8021028:	460d      	mov	r5, r1
 802102a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 802102c:	d208      	bcs.n	8021040 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802102e:	f7f4 fbff 	bl	8015830 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8021032:	4632      	mov	r2, r6
 8021034:	4629      	mov	r1, r5
 8021036:	4420      	add	r0, r4
#endif
}
 8021038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 802103c:	f7ff bf34 	b.w	8020ea8 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021040:	4b03      	ldr	r3, [pc, #12]	; (8021050 <sys_timeout+0x30>)
 8021042:	f240 1229 	movw	r2, #297	; 0x129
 8021046:	4903      	ldr	r1, [pc, #12]	; (8021054 <sys_timeout+0x34>)
 8021048:	4803      	ldr	r0, [pc, #12]	; (8021058 <sys_timeout+0x38>)
 802104a:	f005 fb83 	bl	8026754 <iprintf>
 802104e:	e7ee      	b.n	802102e <sys_timeout+0xe>
 8021050:	08046874 	.word	0x08046874
 8021054:	080468e8 	.word	0x080468e8
 8021058:	0802b44c 	.word	0x0802b44c

0802105c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 802105c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802105e:	4d0d      	ldr	r5, [pc, #52]	; (8021094 <sys_untimeout+0x38>)
 8021060:	682b      	ldr	r3, [r5, #0]
 8021062:	b19b      	cbz	r3, 802108c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8021064:	2400      	movs	r4, #0
 8021066:	e003      	b.n	8021070 <sys_untimeout+0x14>
 8021068:	681a      	ldr	r2, [r3, #0]
 802106a:	461c      	mov	r4, r3
 802106c:	4613      	mov	r3, r2
 802106e:	b16a      	cbz	r2, 802108c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 8021070:	689a      	ldr	r2, [r3, #8]
 8021072:	4282      	cmp	r2, r0
 8021074:	d1f8      	bne.n	8021068 <sys_untimeout+0xc>
 8021076:	68da      	ldr	r2, [r3, #12]
 8021078:	428a      	cmp	r2, r1
 802107a:	d1f5      	bne.n	8021068 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 802107c:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 802107e:	b13c      	cbz	r4, 8021090 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 8021080:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021082:	4619      	mov	r1, r3
 8021084:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 8021086:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 8021088:	f7fa bd82 	b.w	801bb90 <memp_free>
}
 802108c:	bc30      	pop	{r4, r5}
 802108e:	4770      	bx	lr
        next_timeout = t->next;
 8021090:	602a      	str	r2, [r5, #0]
 8021092:	e7f6      	b.n	8021082 <sys_untimeout+0x26>
 8021094:	2002e4a4 	.word	0x2002e4a4

08021098 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802109c:	f7f4 fbc8 	bl	8015830 <sys_now>
 80210a0:	4c0f      	ldr	r4, [pc, #60]	; (80210e0 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 80210a2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80210e4 <sys_check_timeouts+0x4c>
  now = sys_now();
 80210a6:	4607      	mov	r7, r0
 80210a8:	e00f      	b.n	80210ca <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80210aa:	685a      	ldr	r2, [r3, #4]
 80210ac:	eba7 0c02 	sub.w	ip, r7, r2
 80210b0:	f1bc 0f00 	cmp.w	ip, #0
 80210b4:	db0e      	blt.n	80210d4 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 80210b6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 80210b8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 80210ba:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 80210be:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 80210c2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80210c4:	f7fa fd64 	bl	801bb90 <memp_free>
    if (handler != NULL) {
 80210c8:	b935      	cbnz	r5, 80210d8 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 80210ca:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80210cc:	200c      	movs	r0, #12
 80210ce:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d1ea      	bne.n	80210aa <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80210d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 80210d8:	4648      	mov	r0, r9
 80210da:	47a8      	blx	r5
 80210dc:	e7f5      	b.n	80210ca <sys_check_timeouts+0x32>
 80210de:	bf00      	nop
 80210e0:	2002e4a4 	.word	0x2002e4a4
 80210e4:	2002e4a0 	.word	0x2002e4a0

080210e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80210e8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80210ea:	4c07      	ldr	r4, [pc, #28]	; (8021108 <sys_timeouts_sleeptime+0x20>)
 80210ec:	6823      	ldr	r3, [r4, #0]
 80210ee:	b13b      	cbz	r3, 8021100 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 80210f0:	f7f4 fb9e 	bl	8015830 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80210f4:	6823      	ldr	r3, [r4, #0]
 80210f6:	685b      	ldr	r3, [r3, #4]
    return 0;
 80210f8:	1a18      	subs	r0, r3, r0
 80210fa:	bf48      	it	mi
 80210fc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 80210fe:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8021100:	f04f 30ff 	mov.w	r0, #4294967295
}
 8021104:	bd10      	pop	{r4, pc}
 8021106:	bf00      	nop
 8021108:	2002e4a4 	.word	0x2002e4a4

0802110c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802110c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 802110e:	f005 fbc5 	bl	802689c <rand>
 8021112:	4b02      	ldr	r3, [pc, #8]	; (802111c <udp_init+0x10>)
 8021114:	4a02      	ldr	r2, [pc, #8]	; (8021120 <udp_init+0x14>)
 8021116:	4303      	orrs	r3, r0
 8021118:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 802111a:	bd08      	pop	{r3, pc}
 802111c:	ffffc000 	.word	0xffffc000
 8021120:	2000042e 	.word	0x2000042e

08021124 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021128:	4680      	mov	r8, r0
{
 802112a:	b085      	sub	sp, #20
 802112c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802112e:	2800      	cmp	r0, #0
 8021130:	f000 80af 	beq.w	8021292 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021134:	2f00      	cmp	r7, #0
 8021136:	f000 80b5 	beq.w	80212a4 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802113a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 802113e:	2b07      	cmp	r3, #7
 8021140:	f240 8091 	bls.w	8021266 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8021144:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 802131c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 8021148:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802114c:	f8d9 1000 	ldr.w	r1, [r9]
 8021150:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8021154:	f003 f80c 	bl	8024170 <ip4_addr_isbroadcast_u32>
 8021158:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802115a:	8820      	ldrh	r0, [r4, #0]
 802115c:	f7f9 f9f4 	bl	801a548 <lwip_htons>
 8021160:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8021162:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8021164:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8021166:	f7f9 f9ef 	bl	801a548 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802116a:	4b64      	ldr	r3, [pc, #400]	; (80212fc <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 802116c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802116e:	681c      	ldr	r4, [r3, #0]
 8021170:	2c00      	cmp	r4, #0
 8021172:	d064      	beq.n	802123e <udp_input+0x11a>
  uncon_pcb = NULL;
 8021174:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021178:	f8df c190 	ldr.w	ip, [pc, #400]	; 802130c <udp_input+0x1e8>
 802117c:	4960      	ldr	r1, [pc, #384]	; (8021300 <udp_input+0x1dc>)
  prev = NULL;
 802117e:	465e      	mov	r6, fp
 8021180:	e004      	b.n	802118c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021182:	68e2      	ldr	r2, [r4, #12]
 8021184:	4626      	mov	r6, r4
 8021186:	2a00      	cmp	r2, #0
 8021188:	d056      	beq.n	8021238 <udp_input+0x114>
 802118a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 802118c:	8a62      	ldrh	r2, [r4, #18]
 802118e:	42aa      	cmp	r2, r5
 8021190:	d1f7      	bne.n	8021182 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021192:	2f00      	cmp	r7, #0
 8021194:	d06d      	beq.n	8021272 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021196:	7a20      	ldrb	r0, [r4, #8]
 8021198:	b138      	cbz	r0, 80211aa <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802119a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802119e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80211a2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80211a4:	b2d2      	uxtb	r2, r2
 80211a6:	4290      	cmp	r0, r2
 80211a8:	d1eb      	bne.n	8021182 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211aa:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 80211ac:	f1ba 0f00 	cmp.w	sl, #0
 80211b0:	d038      	beq.n	8021224 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211b2:	b13a      	cbz	r2, 80211c4 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80211b4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211b8:	1c43      	adds	r3, r0, #1
 80211ba:	d003      	beq.n	80211c4 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80211bc:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80211be:	68bb      	ldr	r3, [r7, #8]
 80211c0:	4218      	tst	r0, r3
 80211c2:	d1de      	bne.n	8021182 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80211c4:	7c20      	ldrb	r0, [r4, #16]
 80211c6:	0743      	lsls	r3, r0, #29
 80211c8:	d409      	bmi.n	80211de <udp_input+0xba>
        if (uncon_pcb == NULL) {
 80211ca:	f1bb 0f00 	cmp.w	fp, #0
 80211ce:	d059      	beq.n	8021284 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80211d0:	f1ba 0f00 	cmp.w	sl, #0
 80211d4:	d003      	beq.n	80211de <udp_input+0xba>
 80211d6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80211da:	3001      	adds	r0, #1
 80211dc:	d069      	beq.n	80212b2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80211de:	8aa2      	ldrh	r2, [r4, #20]
 80211e0:	9803      	ldr	r0, [sp, #12]
 80211e2:	4282      	cmp	r2, r0
 80211e4:	d1cd      	bne.n	8021182 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80211e6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 80211e8:	b11a      	cbz	r2, 80211f2 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80211ea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80211ee:	4282      	cmp	r2, r0
 80211f0:	d1c7      	bne.n	8021182 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 80211f2:	b12e      	cbz	r6, 8021200 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80211f4:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 80211f6:	4a41      	ldr	r2, [pc, #260]	; (80212fc <udp_input+0x1d8>)
          prev->next = pcb->next;
 80211f8:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 80211fa:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 80211fc:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 80211fe:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021200:	2108      	movs	r1, #8
 8021202:	4640      	mov	r0, r8
 8021204:	f7fb f950 	bl	801c4a8 <pbuf_remove_header>
 8021208:	2800      	cmp	r0, #0
 802120a:	d15b      	bne.n	80212c4 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802120c:	69a5      	ldr	r5, [r4, #24]
 802120e:	b355      	cbz	r5, 8021266 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021210:	9b03      	ldr	r3, [sp, #12]
 8021212:	4642      	mov	r2, r8
 8021214:	69e0      	ldr	r0, [r4, #28]
 8021216:	4621      	mov	r1, r4
 8021218:	9300      	str	r3, [sp, #0]
 802121a:	4b3a      	ldr	r3, [pc, #232]	; (8021304 <udp_input+0x1e0>)
 802121c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802121e:	b005      	add	sp, #20
 8021220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8021224:	2a00      	cmp	r2, #0
 8021226:	d0cd      	beq.n	80211c4 <udp_input+0xa0>
 8021228:	f8d9 0014 	ldr.w	r0, [r9, #20]
 802122c:	4282      	cmp	r2, r0
 802122e:	d0c9      	beq.n	80211c4 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021230:	68e2      	ldr	r2, [r4, #12]
 8021232:	4626      	mov	r6, r4
 8021234:	2a00      	cmp	r2, #0
 8021236:	d1a8      	bne.n	802118a <udp_input+0x66>
  if (pcb != NULL) {
 8021238:	f1bb 0f00 	cmp.w	fp, #0
 802123c:	d15b      	bne.n	80212f6 <udp_input+0x1d2>
  if (for_us) {
 802123e:	687a      	ldr	r2, [r7, #4]
 8021240:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8021244:	429a      	cmp	r2, r3
 8021246:	d10e      	bne.n	8021266 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021248:	2108      	movs	r1, #8
 802124a:	4640      	mov	r0, r8
 802124c:	f7fb f92c 	bl	801c4a8 <pbuf_remove_header>
 8021250:	2800      	cmp	r0, #0
 8021252:	d137      	bne.n	80212c4 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021254:	f1ba 0f00 	cmp.w	sl, #0
 8021258:	d105      	bne.n	8021266 <udp_input+0x142>
 802125a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 802125e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021262:	2be0      	cmp	r3, #224	; 0xe0
 8021264:	d13b      	bne.n	80212de <udp_input+0x1ba>
      pbuf_free(p);
 8021266:	4640      	mov	r0, r8
}
 8021268:	b005      	add	sp, #20
 802126a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 802126e:	f7fb b9a7 	b.w	801c5c0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021272:	4663      	mov	r3, ip
 8021274:	2288      	movs	r2, #136	; 0x88
 8021276:	4824      	ldr	r0, [pc, #144]	; (8021308 <udp_input+0x1e4>)
 8021278:	f005 fa6c 	bl	8026754 <iprintf>
 802127c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 802130c <udp_input+0x1e8>
 8021280:	491f      	ldr	r1, [pc, #124]	; (8021300 <udp_input+0x1dc>)
 8021282:	e788      	b.n	8021196 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 8021284:	8aa2      	ldrh	r2, [r4, #20]
 8021286:	46a3      	mov	fp, r4
 8021288:	9803      	ldr	r0, [sp, #12]
 802128a:	4282      	cmp	r2, r0
 802128c:	f47f af79 	bne.w	8021182 <udp_input+0x5e>
 8021290:	e7a9      	b.n	80211e6 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021292:	4b1e      	ldr	r3, [pc, #120]	; (802130c <udp_input+0x1e8>)
 8021294:	22cf      	movs	r2, #207	; 0xcf
 8021296:	491e      	ldr	r1, [pc, #120]	; (8021310 <udp_input+0x1ec>)
 8021298:	481b      	ldr	r0, [pc, #108]	; (8021308 <udp_input+0x1e4>)
 802129a:	f005 fa5b 	bl	8026754 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 802129e:	2f00      	cmp	r7, #0
 80212a0:	f47f af4b 	bne.w	802113a <udp_input+0x16>
 80212a4:	4b19      	ldr	r3, [pc, #100]	; (802130c <udp_input+0x1e8>)
 80212a6:	22d0      	movs	r2, #208	; 0xd0
 80212a8:	491a      	ldr	r1, [pc, #104]	; (8021314 <udp_input+0x1f0>)
 80212aa:	4817      	ldr	r0, [pc, #92]	; (8021308 <udp_input+0x1e4>)
 80212ac:	f005 fa52 	bl	8026754 <iprintf>
 80212b0:	e743      	b.n	802113a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80212b2:	6878      	ldr	r0, [r7, #4]
 80212b4:	f8db 3000 	ldr.w	r3, [fp]
 80212b8:	4283      	cmp	r3, r0
 80212ba:	d090      	beq.n	80211de <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80212bc:	4290      	cmp	r0, r2
 80212be:	bf08      	it	eq
 80212c0:	46a3      	moveq	fp, r4
 80212c2:	e78c      	b.n	80211de <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80212c4:	4b11      	ldr	r3, [pc, #68]	; (802130c <udp_input+0x1e8>)
 80212c6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80212ca:	4913      	ldr	r1, [pc, #76]	; (8021318 <udp_input+0x1f4>)
 80212cc:	480e      	ldr	r0, [pc, #56]	; (8021308 <udp_input+0x1e4>)
 80212ce:	f005 fa41 	bl	8026754 <iprintf>
      pbuf_free(p);
 80212d2:	4640      	mov	r0, r8
}
 80212d4:	b005      	add	sp, #20
 80212d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80212da:	f7fb b971 	b.w	801c5c0 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80212de:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 80212e2:	4640      	mov	r0, r8
 80212e4:	3108      	adds	r1, #8
 80212e6:	b209      	sxth	r1, r1
 80212e8:	f7fb f916 	bl	801c518 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80212ec:	2103      	movs	r1, #3
 80212ee:	4640      	mov	r0, r8
 80212f0:	f002 fd5a 	bl	8023da8 <icmp_dest_unreach>
 80212f4:	e7b7      	b.n	8021266 <udp_input+0x142>
 80212f6:	465c      	mov	r4, fp
 80212f8:	e782      	b.n	8021200 <udp_input+0xdc>
 80212fa:	bf00      	nop
 80212fc:	2002e4ac 	.word	0x2002e4ac
 8021300:	080469b4 	.word	0x080469b4
 8021304:	2001f2b8 	.word	0x2001f2b8
 8021308:	0802b44c 	.word	0x0802b44c
 802130c:	08046950 	.word	0x08046950
 8021310:	08046980 	.word	0x08046980
 8021314:	08046998 	.word	0x08046998
 8021318:	080469dc 	.word	0x080469dc
 802131c:	2001f2a8 	.word	0x2001f2a8

08021320 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8021320:	4b38      	ldr	r3, [pc, #224]	; (8021404 <udp_bind+0xe4>)
 8021322:	2900      	cmp	r1, #0
{
 8021324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8021328:	bf08      	it	eq
 802132a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802132c:	2800      	cmp	r0, #0
 802132e:	d05e      	beq.n	80213ee <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021330:	4f35      	ldr	r7, [pc, #212]	; (8021408 <udp_bind+0xe8>)
 8021332:	683e      	ldr	r6, [r7, #0]
 8021334:	b34e      	cbz	r6, 802138a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021336:	42b0      	cmp	r0, r6
 8021338:	d031      	beq.n	802139e <udp_bind+0x7e>
 802133a:	4634      	mov	r4, r6
 802133c:	e001      	b.n	8021342 <udp_bind+0x22>
 802133e:	42a0      	cmp	r0, r4
 8021340:	d02d      	beq.n	802139e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021342:	68e4      	ldr	r4, [r4, #12]
 8021344:	2c00      	cmp	r4, #0
 8021346:	d1fa      	bne.n	802133e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021348:	b362      	cbz	r2, 80213a4 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802134a:	680d      	ldr	r5, [r1, #0]
 802134c:	4633      	mov	r3, r6
 802134e:	e001      	b.n	8021354 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021350:	68db      	ldr	r3, [r3, #12]
 8021352:	b19b      	cbz	r3, 802137c <udp_bind+0x5c>
      if (pcb != ipcb) {
 8021354:	4298      	cmp	r0, r3
 8021356:	d0fb      	beq.n	8021350 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 8021358:	8a59      	ldrh	r1, [r3, #18]
 802135a:	4291      	cmp	r1, r2
 802135c:	d1f8      	bne.n	8021350 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802135e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 8021360:	2900      	cmp	r1, #0
 8021362:	bf18      	it	ne
 8021364:	42a9      	cmpne	r1, r5
 8021366:	d001      	beq.n	802136c <udp_bind+0x4c>
 8021368:	2d00      	cmp	r5, #0
 802136a:	d1f1      	bne.n	8021350 <udp_bind+0x30>
      return ERR_USE;
 802136c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8021370:	4618      	mov	r0, r3
 8021372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021376:	680d      	ldr	r5, [r1, #0]
 8021378:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802137c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 802137e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8021380:	b13c      	cbz	r4, 8021392 <udp_bind+0x72>
  return ERR_OK;
 8021382:	2300      	movs	r3, #0
}
 8021384:	4618      	mov	r0, r3
 8021386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 802138a:	b372      	cbz	r2, 80213ea <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802138c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 802138e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021390:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 8021392:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 8021394:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8021396:	6038      	str	r0, [r7, #0]
}
 8021398:	4618      	mov	r0, r3
 802139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 802139e:	2401      	movs	r4, #1
  if (port == 0) {
 80213a0:	2a00      	cmp	r2, #0
 80213a2:	d1d2      	bne.n	802134a <udp_bind+0x2a>
 80213a4:	f8df e070 	ldr.w	lr, [pc, #112]	; 8021418 <udp_bind+0xf8>
  rebind = 0;
 80213a8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80213ac:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80213b0:	f8be 2000 	ldrh.w	r2, [lr]
 80213b4:	4542      	cmp	r2, r8
 80213b6:	d015      	beq.n	80213e4 <udp_bind+0xc4>
 80213b8:	3201      	adds	r2, #1
 80213ba:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80213bc:	2e00      	cmp	r6, #0
 80213be:	d0da      	beq.n	8021376 <udp_bind+0x56>
 80213c0:	4633      	mov	r3, r6
 80213c2:	e002      	b.n	80213ca <udp_bind+0xaa>
 80213c4:	68db      	ldr	r3, [r3, #12]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d0d5      	beq.n	8021376 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 80213ca:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80213ce:	4594      	cmp	ip, r2
 80213d0:	d1f8      	bne.n	80213c4 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80213d2:	3d01      	subs	r5, #1
 80213d4:	b2ad      	uxth	r5, r5
 80213d6:	2d00      	cmp	r5, #0
 80213d8:	d1ec      	bne.n	80213b4 <udp_bind+0x94>
      return ERR_USE;
 80213da:	f06f 0307 	mvn.w	r3, #7
 80213de:	f8ae 2000 	strh.w	r2, [lr]
 80213e2:	e7cf      	b.n	8021384 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80213e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80213e8:	e7e8      	b.n	80213bc <udp_bind+0x9c>
  rebind = 0;
 80213ea:	4634      	mov	r4, r6
 80213ec:	e7da      	b.n	80213a4 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80213ee:	4b07      	ldr	r3, [pc, #28]	; (802140c <udp_bind+0xec>)
 80213f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80213f4:	4906      	ldr	r1, [pc, #24]	; (8021410 <udp_bind+0xf0>)
 80213f6:	4807      	ldr	r0, [pc, #28]	; (8021414 <udp_bind+0xf4>)
 80213f8:	f005 f9ac 	bl	8026754 <iprintf>
 80213fc:	f06f 030f 	mvn.w	r3, #15
 8021400:	e7c0      	b.n	8021384 <udp_bind+0x64>
 8021402:	bf00      	nop
 8021404:	080472d0 	.word	0x080472d0
 8021408:	2002e4ac 	.word	0x2002e4ac
 802140c:	08046950 	.word	0x08046950
 8021410:	080469f8 	.word	0x080469f8
 8021414:	0802b44c 	.word	0x0802b44c
 8021418:	2000042e 	.word	0x2000042e

0802141c <udp_sendto_if_src>:
{
 802141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021420:	b085      	sub	sp, #20
 8021422:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021426:	2800      	cmp	r0, #0
 8021428:	f000 8087 	beq.w	802153a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802142c:	460d      	mov	r5, r1
 802142e:	2900      	cmp	r1, #0
 8021430:	d079      	beq.n	8021526 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021432:	4690      	mov	r8, r2
 8021434:	2a00      	cmp	r2, #0
 8021436:	d06c      	beq.n	8021512 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021438:	f1ba 0f00 	cmp.w	sl, #0
 802143c:	d05f      	beq.n	80214fe <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802143e:	f1bb 0f00 	cmp.w	fp, #0
 8021442:	f000 8084 	beq.w	802154e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 8021446:	8a42      	ldrh	r2, [r0, #18]
 8021448:	4699      	mov	r9, r3
 802144a:	4604      	mov	r4, r0
 802144c:	b39a      	cbz	r2, 80214b6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802144e:	892a      	ldrh	r2, [r5, #8]
 8021450:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8021454:	429a      	cmp	r2, r3
 8021456:	d84f      	bhi.n	80214f8 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021458:	2108      	movs	r1, #8
 802145a:	4628      	mov	r0, r5
 802145c:	f7fa fff0 	bl	801c440 <pbuf_add_header>
 8021460:	bb98      	cbnz	r0, 80214ca <udp_sendto_if_src+0xae>
 8021462:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021464:	8973      	ldrh	r3, [r6, #10]
 8021466:	2b07      	cmp	r3, #7
 8021468:	d93e      	bls.n	80214e8 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 802146a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 802146c:	8a60      	ldrh	r0, [r4, #18]
 802146e:	f7f9 f86b 	bl	801a548 <lwip_htons>
 8021472:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021474:	4648      	mov	r0, r9
 8021476:	f7f9 f867 	bl	801a548 <lwip_htons>
  udphdr->chksum = 0x0000;
 802147a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 802147c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 802147e:	71bb      	strb	r3, [r7, #6]
 8021480:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8021482:	8930      	ldrh	r0, [r6, #8]
 8021484:	f7f9 f860 	bl	801a548 <lwip_htons>
 8021488:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802148a:	f8cd b008 	str.w	fp, [sp, #8]
 802148e:	2011      	movs	r0, #17
 8021490:	7aa3      	ldrb	r3, [r4, #10]
 8021492:	4642      	mov	r2, r8
 8021494:	4651      	mov	r1, sl
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	7ae3      	ldrb	r3, [r4, #11]
 802149a:	9001      	str	r0, [sp, #4]
 802149c:	4630      	mov	r0, r6
 802149e:	f002 fdb9 	bl	8024014 <ip4_output_if_src>
  if (q != p) {
 80214a2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80214a4:	4607      	mov	r7, r0
  if (q != p) {
 80214a6:	d002      	beq.n	80214ae <udp_sendto_if_src+0x92>
    pbuf_free(q);
 80214a8:	4630      	mov	r0, r6
 80214aa:	f7fb f889 	bl	801c5c0 <pbuf_free>
}
 80214ae:	4638      	mov	r0, r7
 80214b0:	b005      	add	sp, #20
 80214b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80214b6:	4601      	mov	r1, r0
 80214b8:	f7ff ff32 	bl	8021320 <udp_bind>
    if (err != ERR_OK) {
 80214bc:	4607      	mov	r7, r0
 80214be:	2800      	cmp	r0, #0
 80214c0:	d0c5      	beq.n	802144e <udp_sendto_if_src+0x32>
}
 80214c2:	4638      	mov	r0, r7
 80214c4:	b005      	add	sp, #20
 80214c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80214ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80214ce:	2108      	movs	r1, #8
 80214d0:	2022      	movs	r0, #34	; 0x22
 80214d2:	f7fa fea3 	bl	801c21c <pbuf_alloc>
    if (q == NULL) {
 80214d6:	4606      	mov	r6, r0
 80214d8:	b170      	cbz	r0, 80214f8 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 80214da:	892b      	ldrh	r3, [r5, #8]
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d0c1      	beq.n	8021464 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 80214e0:	4629      	mov	r1, r5
 80214e2:	f7fb f8db 	bl	801c69c <pbuf_chain>
 80214e6:	e7bd      	b.n	8021464 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80214e8:	4b1e      	ldr	r3, [pc, #120]	; (8021564 <udp_sendto_if_src+0x148>)
 80214ea:	f240 320d 	movw	r2, #781	; 0x30d
 80214ee:	491e      	ldr	r1, [pc, #120]	; (8021568 <udp_sendto_if_src+0x14c>)
 80214f0:	481e      	ldr	r0, [pc, #120]	; (802156c <udp_sendto_if_src+0x150>)
 80214f2:	f005 f92f 	bl	8026754 <iprintf>
 80214f6:	e7b8      	b.n	802146a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 80214f8:	f04f 37ff 	mov.w	r7, #4294967295
 80214fc:	e7d7      	b.n	80214ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80214fe:	4b19      	ldr	r3, [pc, #100]	; (8021564 <udp_sendto_if_src+0x148>)
 8021500:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021504:	491a      	ldr	r1, [pc, #104]	; (8021570 <udp_sendto_if_src+0x154>)
 8021506:	f06f 070f 	mvn.w	r7, #15
 802150a:	4818      	ldr	r0, [pc, #96]	; (802156c <udp_sendto_if_src+0x150>)
 802150c:	f005 f922 	bl	8026754 <iprintf>
 8021510:	e7cd      	b.n	80214ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021512:	4b14      	ldr	r3, [pc, #80]	; (8021564 <udp_sendto_if_src+0x148>)
 8021514:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021518:	4916      	ldr	r1, [pc, #88]	; (8021574 <udp_sendto_if_src+0x158>)
 802151a:	f06f 070f 	mvn.w	r7, #15
 802151e:	4813      	ldr	r0, [pc, #76]	; (802156c <udp_sendto_if_src+0x150>)
 8021520:	f005 f918 	bl	8026754 <iprintf>
 8021524:	e7c3      	b.n	80214ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021526:	4b0f      	ldr	r3, [pc, #60]	; (8021564 <udp_sendto_if_src+0x148>)
 8021528:	f240 22d2 	movw	r2, #722	; 0x2d2
 802152c:	4912      	ldr	r1, [pc, #72]	; (8021578 <udp_sendto_if_src+0x15c>)
 802152e:	f06f 070f 	mvn.w	r7, #15
 8021532:	480e      	ldr	r0, [pc, #56]	; (802156c <udp_sendto_if_src+0x150>)
 8021534:	f005 f90e 	bl	8026754 <iprintf>
 8021538:	e7b9      	b.n	80214ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802153a:	4b0a      	ldr	r3, [pc, #40]	; (8021564 <udp_sendto_if_src+0x148>)
 802153c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021540:	490e      	ldr	r1, [pc, #56]	; (802157c <udp_sendto_if_src+0x160>)
 8021542:	f06f 070f 	mvn.w	r7, #15
 8021546:	4809      	ldr	r0, [pc, #36]	; (802156c <udp_sendto_if_src+0x150>)
 8021548:	f005 f904 	bl	8026754 <iprintf>
 802154c:	e7af      	b.n	80214ae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802154e:	4b05      	ldr	r3, [pc, #20]	; (8021564 <udp_sendto_if_src+0x148>)
 8021550:	f240 22d5 	movw	r2, #725	; 0x2d5
 8021554:	490a      	ldr	r1, [pc, #40]	; (8021580 <udp_sendto_if_src+0x164>)
 8021556:	f06f 070f 	mvn.w	r7, #15
 802155a:	4804      	ldr	r0, [pc, #16]	; (802156c <udp_sendto_if_src+0x150>)
 802155c:	f005 f8fa 	bl	8026754 <iprintf>
 8021560:	e7a5      	b.n	80214ae <udp_sendto_if_src+0x92>
 8021562:	bf00      	nop
 8021564:	08046950 	.word	0x08046950
 8021568:	08046abc 	.word	0x08046abc
 802156c:	0802b44c 	.word	0x0802b44c
 8021570:	08046a74 	.word	0x08046a74
 8021574:	08046a50 	.word	0x08046a50
 8021578:	08046a30 	.word	0x08046a30
 802157c:	08046a10 	.word	0x08046a10
 8021580:	08046a98 	.word	0x08046a98

08021584 <udp_sendto_if>:
{
 8021584:	b570      	push	{r4, r5, r6, lr}
 8021586:	b082      	sub	sp, #8
 8021588:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802158a:	2800      	cmp	r0, #0
 802158c:	d036      	beq.n	80215fc <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802158e:	b359      	cbz	r1, 80215e8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021590:	b302      	cbz	r2, 80215d4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021592:	b1ac      	cbz	r4, 80215c0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021594:	6805      	ldr	r5, [r0, #0]
 8021596:	b935      	cbnz	r5, 80215a6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 8021598:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 802159a:	e9cd 4500 	strd	r4, r5, [sp]
 802159e:	f7ff ff3d 	bl	802141c <udp_sendto_if_src>
}
 80215a2:	b002      	add	sp, #8
 80215a4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80215a6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80215aa:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 80215ae:	d0f3      	beq.n	8021598 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80215b0:	6866      	ldr	r6, [r4, #4]
 80215b2:	42b5      	cmp	r5, r6
 80215b4:	d101      	bne.n	80215ba <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80215b6:	4605      	mov	r5, r0
 80215b8:	e7ef      	b.n	802159a <udp_sendto_if+0x16>
        return ERR_RTE;
 80215ba:	f06f 0003 	mvn.w	r0, #3
 80215be:	e7f0      	b.n	80215a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80215c0:	4b13      	ldr	r3, [pc, #76]	; (8021610 <udp_sendto_if+0x8c>)
 80215c2:	f240 2283 	movw	r2, #643	; 0x283
 80215c6:	4913      	ldr	r1, [pc, #76]	; (8021614 <udp_sendto_if+0x90>)
 80215c8:	4813      	ldr	r0, [pc, #76]	; (8021618 <udp_sendto_if+0x94>)
 80215ca:	f005 f8c3 	bl	8026754 <iprintf>
 80215ce:	f06f 000f 	mvn.w	r0, #15
 80215d2:	e7e6      	b.n	80215a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80215d4:	4b0e      	ldr	r3, [pc, #56]	; (8021610 <udp_sendto_if+0x8c>)
 80215d6:	f240 2282 	movw	r2, #642	; 0x282
 80215da:	4910      	ldr	r1, [pc, #64]	; (802161c <udp_sendto_if+0x98>)
 80215dc:	480e      	ldr	r0, [pc, #56]	; (8021618 <udp_sendto_if+0x94>)
 80215de:	f005 f8b9 	bl	8026754 <iprintf>
 80215e2:	f06f 000f 	mvn.w	r0, #15
 80215e6:	e7dc      	b.n	80215a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80215e8:	4b09      	ldr	r3, [pc, #36]	; (8021610 <udp_sendto_if+0x8c>)
 80215ea:	f240 2281 	movw	r2, #641	; 0x281
 80215ee:	490c      	ldr	r1, [pc, #48]	; (8021620 <udp_sendto_if+0x9c>)
 80215f0:	4809      	ldr	r0, [pc, #36]	; (8021618 <udp_sendto_if+0x94>)
 80215f2:	f005 f8af 	bl	8026754 <iprintf>
 80215f6:	f06f 000f 	mvn.w	r0, #15
 80215fa:	e7d2      	b.n	80215a2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80215fc:	4b04      	ldr	r3, [pc, #16]	; (8021610 <udp_sendto_if+0x8c>)
 80215fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021602:	4908      	ldr	r1, [pc, #32]	; (8021624 <udp_sendto_if+0xa0>)
 8021604:	4804      	ldr	r0, [pc, #16]	; (8021618 <udp_sendto_if+0x94>)
 8021606:	f005 f8a5 	bl	8026754 <iprintf>
 802160a:	f06f 000f 	mvn.w	r0, #15
 802160e:	e7c8      	b.n	80215a2 <udp_sendto_if+0x1e>
 8021610:	08046950 	.word	0x08046950
 8021614:	08046b44 	.word	0x08046b44
 8021618:	0802b44c 	.word	0x0802b44c
 802161c:	08046b24 	.word	0x08046b24
 8021620:	08046b08 	.word	0x08046b08
 8021624:	08046aec 	.word	0x08046aec

08021628 <udp_sendto>:
{
 8021628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802162c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802162e:	b388      	cbz	r0, 8021694 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021630:	460e      	mov	r6, r1
 8021632:	b329      	cbz	r1, 8021680 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021634:	4615      	mov	r5, r2
 8021636:	b1ca      	cbz	r2, 802166c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8021638:	4604      	mov	r4, r0
 802163a:	7a00      	ldrb	r0, [r0, #8]
 802163c:	4698      	mov	r8, r3
 802163e:	b168      	cbz	r0, 802165c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 8021640:	f7fa fc98 	bl	801bf74 <netif_get_by_index>
 8021644:	4607      	mov	r7, r0
  if (netif == NULL) {
 8021646:	b177      	cbz	r7, 8021666 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021648:	4643      	mov	r3, r8
 802164a:	462a      	mov	r2, r5
 802164c:	4631      	mov	r1, r6
 802164e:	4620      	mov	r0, r4
 8021650:	9700      	str	r7, [sp, #0]
 8021652:	f7ff ff97 	bl	8021584 <udp_sendto_if>
}
 8021656:	b002      	add	sp, #8
 8021658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 802165c:	4610      	mov	r0, r2
 802165e:	f002 fbab 	bl	8023db8 <ip4_route>
 8021662:	4607      	mov	r7, r0
 8021664:	e7ef      	b.n	8021646 <udp_sendto+0x1e>
    return ERR_RTE;
 8021666:	f06f 0003 	mvn.w	r0, #3
 802166a:	e7f4      	b.n	8021656 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802166c:	4b0e      	ldr	r3, [pc, #56]	; (80216a8 <udp_sendto+0x80>)
 802166e:	f240 221a 	movw	r2, #538	; 0x21a
 8021672:	490e      	ldr	r1, [pc, #56]	; (80216ac <udp_sendto+0x84>)
 8021674:	480e      	ldr	r0, [pc, #56]	; (80216b0 <udp_sendto+0x88>)
 8021676:	f005 f86d 	bl	8026754 <iprintf>
 802167a:	f06f 000f 	mvn.w	r0, #15
 802167e:	e7ea      	b.n	8021656 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8021680:	4b09      	ldr	r3, [pc, #36]	; (80216a8 <udp_sendto+0x80>)
 8021682:	f240 2219 	movw	r2, #537	; 0x219
 8021686:	490b      	ldr	r1, [pc, #44]	; (80216b4 <udp_sendto+0x8c>)
 8021688:	4809      	ldr	r0, [pc, #36]	; (80216b0 <udp_sendto+0x88>)
 802168a:	f005 f863 	bl	8026754 <iprintf>
 802168e:	f06f 000f 	mvn.w	r0, #15
 8021692:	e7e0      	b.n	8021656 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8021694:	4b04      	ldr	r3, [pc, #16]	; (80216a8 <udp_sendto+0x80>)
 8021696:	f44f 7206 	mov.w	r2, #536	; 0x218
 802169a:	4907      	ldr	r1, [pc, #28]	; (80216b8 <udp_sendto+0x90>)
 802169c:	4804      	ldr	r0, [pc, #16]	; (80216b0 <udp_sendto+0x88>)
 802169e:	f005 f859 	bl	8026754 <iprintf>
 80216a2:	f06f 000f 	mvn.w	r0, #15
 80216a6:	e7d6      	b.n	8021656 <udp_sendto+0x2e>
 80216a8:	08046950 	.word	0x08046950
 80216ac:	08046b98 	.word	0x08046b98
 80216b0:	0802b44c 	.word	0x0802b44c
 80216b4:	08046b7c 	.word	0x08046b7c
 80216b8:	08046b64 	.word	0x08046b64

080216bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80216bc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80216be:	b320      	cbz	r0, 802170a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80216c0:	460d      	mov	r5, r1
 80216c2:	b361      	cbz	r1, 802171e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 80216c4:	4616      	mov	r6, r2
 80216c6:	8a42      	ldrh	r2, [r0, #18]
 80216c8:	4604      	mov	r4, r0
 80216ca:	b1c2      	cbz	r2, 80216fe <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80216cc:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216ce:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216d0:	4918      	ldr	r1, [pc, #96]	; (8021734 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216d2:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80216d6:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216d8:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 80216da:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80216dc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216de:	b142      	cbz	r2, 80216f2 <udp_connect+0x36>
    if (pcb == ipcb) {
 80216e0:	4294      	cmp	r4, r2
 80216e2:	d00a      	beq.n	80216fa <udp_connect+0x3e>
 80216e4:	4613      	mov	r3, r2
 80216e6:	e001      	b.n	80216ec <udp_connect+0x30>
 80216e8:	429c      	cmp	r4, r3
 80216ea:	d006      	beq.n	80216fa <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80216ec:	68db      	ldr	r3, [r3, #12]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d1fa      	bne.n	80216e8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 80216f2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 80216f4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 80216f6:	600c      	str	r4, [r1, #0]
}
 80216f8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 80216fa:	2000      	movs	r0, #0
}
 80216fc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80216fe:	4601      	mov	r1, r0
 8021700:	f7ff fe0e 	bl	8021320 <udp_bind>
    if (err != ERR_OK) {
 8021704:	2800      	cmp	r0, #0
 8021706:	d0e1      	beq.n	80216cc <udp_connect+0x10>
}
 8021708:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802170a:	4b0b      	ldr	r3, [pc, #44]	; (8021738 <udp_connect+0x7c>)
 802170c:	f240 4235 	movw	r2, #1077	; 0x435
 8021710:	490a      	ldr	r1, [pc, #40]	; (802173c <udp_connect+0x80>)
 8021712:	480b      	ldr	r0, [pc, #44]	; (8021740 <udp_connect+0x84>)
 8021714:	f005 f81e 	bl	8026754 <iprintf>
 8021718:	f06f 000f 	mvn.w	r0, #15
}
 802171c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802171e:	4b06      	ldr	r3, [pc, #24]	; (8021738 <udp_connect+0x7c>)
 8021720:	f240 4236 	movw	r2, #1078	; 0x436
 8021724:	4907      	ldr	r1, [pc, #28]	; (8021744 <udp_connect+0x88>)
 8021726:	4806      	ldr	r0, [pc, #24]	; (8021740 <udp_connect+0x84>)
 8021728:	f005 f814 	bl	8026754 <iprintf>
 802172c:	f06f 000f 	mvn.w	r0, #15
}
 8021730:	bd70      	pop	{r4, r5, r6, pc}
 8021732:	bf00      	nop
 8021734:	2002e4ac 	.word	0x2002e4ac
 8021738:	08046950 	.word	0x08046950
 802173c:	08046bb4 	.word	0x08046bb4
 8021740:	0802b44c 	.word	0x0802b44c
 8021744:	08046bd0 	.word	0x08046bd0

08021748 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021748:	b110      	cbz	r0, 8021750 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 802174a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 802174e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021750:	4b03      	ldr	r3, [pc, #12]	; (8021760 <udp_recv+0x18>)
 8021752:	f240 428a 	movw	r2, #1162	; 0x48a
 8021756:	4903      	ldr	r1, [pc, #12]	; (8021764 <udp_recv+0x1c>)
 8021758:	4803      	ldr	r0, [pc, #12]	; (8021768 <udp_recv+0x20>)
 802175a:	f004 bffb 	b.w	8026754 <iprintf>
 802175e:	bf00      	nop
 8021760:	08046950 	.word	0x08046950
 8021764:	08046bec 	.word	0x08046bec
 8021768:	0802b44c 	.word	0x0802b44c

0802176c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802176c:	4601      	mov	r1, r0
 802176e:	b1c0      	cbz	r0, 80217a2 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021770:	4b0f      	ldr	r3, [pc, #60]	; (80217b0 <udp_remove+0x44>)
 8021772:	681a      	ldr	r2, [r3, #0]
 8021774:	4282      	cmp	r2, r0
 8021776:	d00a      	beq.n	802178e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021778:	b132      	cbz	r2, 8021788 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802177a:	68d3      	ldr	r3, [r2, #12]
 802177c:	428b      	cmp	r3, r1
 802177e:	d100      	bne.n	8021782 <udp_remove+0x16>
 8021780:	b953      	cbnz	r3, 8021798 <udp_remove+0x2c>
 8021782:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021784:	2a00      	cmp	r2, #0
 8021786:	d1f8      	bne.n	802177a <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021788:	2001      	movs	r0, #1
 802178a:	f7fa ba01 	b.w	801bb90 <memp_free>
    udp_pcbs = udp_pcbs->next;
 802178e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8021790:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 8021792:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 8021794:	f7fa b9fc 	b.w	801bb90 <memp_free>
        pcb2->next = pcb->next;
 8021798:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802179a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 802179c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 802179e:	f7fa b9f7 	b.w	801bb90 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80217a2:	4b04      	ldr	r3, [pc, #16]	; (80217b4 <udp_remove+0x48>)
 80217a4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80217a8:	4903      	ldr	r1, [pc, #12]	; (80217b8 <udp_remove+0x4c>)
 80217aa:	4804      	ldr	r0, [pc, #16]	; (80217bc <udp_remove+0x50>)
 80217ac:	f004 bfd2 	b.w	8026754 <iprintf>
 80217b0:	2002e4ac 	.word	0x2002e4ac
 80217b4:	08046950 	.word	0x08046950
 80217b8:	08046c04 	.word	0x08046c04
 80217bc:	0802b44c 	.word	0x0802b44c

080217c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80217c0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80217c2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80217c6:	4907      	ldr	r1, [pc, #28]	; (80217e4 <udp_new+0x24>)
 80217c8:	2001      	movs	r0, #1
 80217ca:	f7fa f9ab 	bl	801bb24 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80217ce:	4604      	mov	r4, r0
 80217d0:	b128      	cbz	r0, 80217de <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80217d2:	2220      	movs	r2, #32
 80217d4:	2100      	movs	r1, #0
 80217d6:	f004 f81f 	bl	8025818 <memset>
    pcb->ttl = UDP_TTL;
 80217da:	23ff      	movs	r3, #255	; 0xff
 80217dc:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80217de:	4620      	mov	r0, r4
 80217e0:	bd10      	pop	{r4, pc}
 80217e2:	bf00      	nop
 80217e4:	08046950 	.word	0x08046950

080217e8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80217e8:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80217ea:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80217ee:	4907      	ldr	r1, [pc, #28]	; (802180c <udp_new_ip_type+0x24>)
 80217f0:	2001      	movs	r0, #1
 80217f2:	f7fa f997 	bl	801bb24 <memp_malloc_fn>
  if (pcb != NULL) {
 80217f6:	4604      	mov	r4, r0
 80217f8:	b128      	cbz	r0, 8021806 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80217fa:	2220      	movs	r2, #32
 80217fc:	2100      	movs	r1, #0
 80217fe:	f004 f80b 	bl	8025818 <memset>
    pcb->ttl = UDP_TTL;
 8021802:	23ff      	movs	r3, #255	; 0xff
 8021804:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8021806:	4620      	mov	r0, r4
 8021808:	bd10      	pop	{r4, pc}
 802180a:	bf00      	nop
 802180c:	08046950 	.word	0x08046950

08021810 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021810:	b110      	cbz	r0, 8021818 <udp_netif_ip_addr_changed+0x8>
 8021812:	6802      	ldr	r2, [r0, #0]
 8021814:	b101      	cbz	r1, 8021818 <udp_netif_ip_addr_changed+0x8>
 8021816:	b902      	cbnz	r2, 802181a <udp_netif_ip_addr_changed+0xa>
 8021818:	4770      	bx	lr
 802181a:	680b      	ldr	r3, [r1, #0]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d0fb      	beq.n	8021818 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021820:	4b08      	ldr	r3, [pc, #32]	; (8021844 <udp_netif_ip_addr_changed+0x34>)
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	2b00      	cmp	r3, #0
 8021826:	d0f7      	beq.n	8021818 <udp_netif_ip_addr_changed+0x8>
{
 8021828:	b410      	push	{r4}
 802182a:	e000      	b.n	802182e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802182c:	6802      	ldr	r2, [r0, #0]
 802182e:	681c      	ldr	r4, [r3, #0]
 8021830:	4294      	cmp	r4, r2
 8021832:	d101      	bne.n	8021838 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021834:	680a      	ldr	r2, [r1, #0]
 8021836:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021838:	68db      	ldr	r3, [r3, #12]
 802183a:	2b00      	cmp	r3, #0
 802183c:	d1f6      	bne.n	802182c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 802183e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021842:	4770      	bx	lr
 8021844:	2002e4ac 	.word	0x2002e4ac

08021848 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8021848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802184a:	1d07      	adds	r7, r0, #4
{
 802184c:	4604      	mov	r4, r0
 802184e:	460d      	mov	r5, r1
 8021850:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021852:	2f44      	cmp	r7, #68	; 0x44
 8021854:	d80e      	bhi.n	8021874 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8021856:	0e33      	lsrs	r3, r6, #24
 8021858:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802185a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 802185c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802185e:	b292      	uxth	r2, r2
 8021860:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021862:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8021864:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021866:	0a32      	lsrs	r2, r6, #8
 8021868:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 802186a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 802186c:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 802186e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8021870:	552e      	strb	r6, [r5, r4]
}
 8021872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021874:	4b03      	ldr	r3, [pc, #12]	; (8021884 <dhcp_option_long+0x3c>)
 8021876:	f240 52b7 	movw	r2, #1463	; 0x5b7
 802187a:	4903      	ldr	r1, [pc, #12]	; (8021888 <dhcp_option_long+0x40>)
 802187c:	4803      	ldr	r0, [pc, #12]	; (802188c <dhcp_option_long+0x44>)
 802187e:	f004 ff69 	bl	8026754 <iprintf>
 8021882:	e7e8      	b.n	8021856 <dhcp_option_long+0xe>
 8021884:	08046c1c 	.word	0x08046c1c
 8021888:	08046c54 	.word	0x08046c54
 802188c:	0802b44c 	.word	0x0802b44c

08021890 <dhcp_check>:
{
 8021890:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021892:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 8021894:	7963      	ldrb	r3, [r4, #5]
 8021896:	2b08      	cmp	r3, #8
 8021898:	d004      	beq.n	80218a4 <dhcp_check+0x14>
    dhcp->tries = 0;
 802189a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 802189c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 802189e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 80218a0:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 80218a2:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80218a4:	2200      	movs	r2, #0
 80218a6:	f104 011c 	add.w	r1, r4, #28
 80218aa:	f001 ffab 	bl	8023804 <etharp_query>
  if (dhcp->tries < 255) {
 80218ae:	79a3      	ldrb	r3, [r4, #6]
 80218b0:	2bff      	cmp	r3, #255	; 0xff
 80218b2:	d001      	beq.n	80218b8 <dhcp_check+0x28>
    dhcp->tries++;
 80218b4:	3301      	adds	r3, #1
 80218b6:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80218b8:	2301      	movs	r3, #1
 80218ba:	8123      	strh	r3, [r4, #8]
}
 80218bc:	bd10      	pop	{r4, pc}
 80218be:	bf00      	nop

080218c0 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80218c0:	2800      	cmp	r0, #0
 80218c2:	f000 808e 	beq.w	80219e2 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 80218c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80218c8:	2900      	cmp	r1, #0
 80218ca:	f000 8091 	beq.w	80219f0 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 80218d0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218d2:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 80218d6:	b500      	push	{lr}
  dhcp->lease_used = 0;
 80218d8:	824a      	strh	r2, [r1, #18]
{
 80218da:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80218dc:	d00e      	beq.n	80218fc <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218de:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80218e0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80218e4:	d258      	bcs.n	8021998 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218e6:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 80218ea:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80218ec:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 80218f0:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 80218f4:	f200 8083 	bhi.w	80219fe <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 80218f8:	2301      	movs	r3, #1
 80218fa:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80218fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80218fe:	1c5a      	adds	r2, r3, #1
 8021900:	d050      	beq.n	80219a4 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021902:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8021904:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8021908:	d241      	bcs.n	802198e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802190a:	4a40      	ldr	r2, [pc, #256]	; (8021a0c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802190c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802190e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8021912:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8021916:	d874      	bhi.n	8021a02 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8021918:	2301      	movs	r3, #1
 802191a:	469c      	mov	ip, r3
 802191c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802191e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8021920:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8021924:	1c53      	adds	r3, r2, #1
 8021926:	d042      	beq.n	80219ae <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021928:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802192a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802192e:	d24b      	bcs.n	80219c8 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021930:	4b36      	ldr	r3, [pc, #216]	; (8021a0c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8021932:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021934:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8021938:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802193c:	d864      	bhi.n	8021a08 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802193e:	2201      	movs	r2, #1
 8021940:	4613      	mov	r3, r2
 8021942:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8021944:	2201      	movs	r2, #1
 8021946:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021948:	459c      	cmp	ip, r3
 802194a:	d302      	bcc.n	8021952 <dhcp_bind+0x92>
 802194c:	b10a      	cbz	r2, 8021952 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 802194e:	2300      	movs	r3, #0
 8021950:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8021952:	79cb      	ldrb	r3, [r1, #7]
 8021954:	2b00      	cmp	r3, #0
 8021956:	d02f      	beq.n	80219b8 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8021958:	6a0b      	ldr	r3, [r1, #32]
 802195a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802195c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802195e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8021960:	b92b      	cbnz	r3, 802196e <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8021962:	69cb      	ldr	r3, [r1, #28]
 8021964:	9a00      	ldr	r2, [sp, #0]
 8021966:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8021968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802196c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 802196e:	794b      	ldrb	r3, [r1, #5]
 8021970:	2b0a      	cmp	r3, #10
 8021972:	d004      	beq.n	802197e <dhcp_bind+0xbe>
    dhcp->tries = 0;
 8021974:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021976:	220a      	movs	r2, #10
    dhcp->tries = 0;
 8021978:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 802197a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 802197c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 802197e:	ab01      	add	r3, sp, #4
 8021980:	466a      	mov	r2, sp
 8021982:	311c      	adds	r1, #28
 8021984:	f7fa f982 	bl	801bc8c <netif_set_addr>
}
 8021988:	b003      	add	sp, #12
 802198a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802198e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021992:	469c      	mov	ip, r3
 8021994:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 8021996:	e7c2      	b.n	802191e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 8021998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802199c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802199e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80219a0:	1c5a      	adds	r2, r3, #1
 80219a2:	d1ae      	bne.n	8021902 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80219a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80219a6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80219aa:	1c53      	adds	r3, r2, #1
 80219ac:	d1bc      	bne.n	8021928 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80219ae:	898b      	ldrh	r3, [r1, #12]
 80219b0:	1e1a      	subs	r2, r3, #0
 80219b2:	bf18      	it	ne
 80219b4:	2201      	movne	r2, #1
 80219b6:	e7c7      	b.n	8021948 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 80219b8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80219bc:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 80219be:	2b00      	cmp	r3, #0
 80219c0:	db07      	blt.n	80219d2 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80219c2:	23ff      	movs	r3, #255	; 0xff
 80219c4:	9300      	str	r3, [sp, #0]
 80219c6:	e7c9      	b.n	802195c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 80219c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80219cc:	4613      	mov	r3, r2
 80219ce:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 80219d0:	e7b8      	b.n	8021944 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 80219d2:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80219d4:	bf8c      	ite	hi
 80219d6:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80219da:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80219de:	9300      	str	r3, [sp, #0]
 80219e0:	e7bc      	b.n	802195c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80219e2:	4b0b      	ldr	r3, [pc, #44]	; (8021a10 <dhcp_bind+0x150>)
 80219e4:	f240 4215 	movw	r2, #1045	; 0x415
 80219e8:	490a      	ldr	r1, [pc, #40]	; (8021a14 <dhcp_bind+0x154>)
 80219ea:	480b      	ldr	r0, [pc, #44]	; (8021a18 <dhcp_bind+0x158>)
 80219ec:	f004 beb2 	b.w	8026754 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80219f0:	4b07      	ldr	r3, [pc, #28]	; (8021a10 <dhcp_bind+0x150>)
 80219f2:	f240 4217 	movw	r2, #1047	; 0x417
 80219f6:	4909      	ldr	r1, [pc, #36]	; (8021a1c <dhcp_bind+0x15c>)
 80219f8:	4807      	ldr	r0, [pc, #28]	; (8021a18 <dhcp_bind+0x158>)
 80219fa:	f004 beab 	b.w	8026754 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 80219fe:	828a      	strh	r2, [r1, #20]
 8021a00:	e77c      	b.n	80218fc <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8021a02:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8021a06:	e78a      	b.n	802191e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8021a08:	818b      	strh	r3, [r1, #12]
 8021a0a:	e79b      	b.n	8021944 <dhcp_bind+0x84>
 8021a0c:	88888889 	.word	0x88888889
 8021a10:	08046c1c 	.word	0x08046c1c
 8021a14:	08046c90 	.word	0x08046c90
 8021a18:	0802b44c 	.word	0x0802b44c
 8021a1c:	08046cac 	.word	0x08046cac

08021a20 <dhcp_inc_pcb_refcount>:
{
 8021a20:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8021a22:	4c15      	ldr	r4, [pc, #84]	; (8021a78 <dhcp_inc_pcb_refcount+0x58>)
 8021a24:	7823      	ldrb	r3, [r4, #0]
 8021a26:	b9fb      	cbnz	r3, 8021a68 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8021a28:	4d14      	ldr	r5, [pc, #80]	; (8021a7c <dhcp_inc_pcb_refcount+0x5c>)
 8021a2a:	682b      	ldr	r3, [r5, #0]
 8021a2c:	b12b      	cbz	r3, 8021a3a <dhcp_inc_pcb_refcount+0x1a>
 8021a2e:	4b14      	ldr	r3, [pc, #80]	; (8021a80 <dhcp_inc_pcb_refcount+0x60>)
 8021a30:	22e5      	movs	r2, #229	; 0xe5
 8021a32:	4914      	ldr	r1, [pc, #80]	; (8021a84 <dhcp_inc_pcb_refcount+0x64>)
 8021a34:	4814      	ldr	r0, [pc, #80]	; (8021a88 <dhcp_inc_pcb_refcount+0x68>)
 8021a36:	f004 fe8d 	bl	8026754 <iprintf>
    dhcp_pcb = udp_new();
 8021a3a:	f7ff fec1 	bl	80217c0 <udp_new>
 8021a3e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8021a40:	b1b0      	cbz	r0, 8021a70 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021a42:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021a44:	4911      	ldr	r1, [pc, #68]	; (8021a8c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021a46:	f042 0220 	orr.w	r2, r2, #32
 8021a4a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021a4c:	2244      	movs	r2, #68	; 0x44
 8021a4e:	f7ff fc67 	bl	8021320 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8021a52:	2243      	movs	r2, #67	; 0x43
 8021a54:	490d      	ldr	r1, [pc, #52]	; (8021a8c <dhcp_inc_pcb_refcount+0x6c>)
 8021a56:	6828      	ldr	r0, [r5, #0]
 8021a58:	f7ff fe30 	bl	80216bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8021a5c:	2200      	movs	r2, #0
 8021a5e:	490c      	ldr	r1, [pc, #48]	; (8021a90 <dhcp_inc_pcb_refcount+0x70>)
 8021a60:	6828      	ldr	r0, [r5, #0]
 8021a62:	f7ff fe71 	bl	8021748 <udp_recv>
  dhcp_pcb_refcount++;
 8021a66:	7823      	ldrb	r3, [r4, #0]
 8021a68:	3301      	adds	r3, #1
  return ERR_OK;
 8021a6a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8021a6c:	7023      	strb	r3, [r4, #0]
}
 8021a6e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8021a70:	f04f 30ff 	mov.w	r0, #4294967295
}
 8021a74:	bd38      	pop	{r3, r4, r5, pc}
 8021a76:	bf00      	nop
 8021a78:	2002e4b4 	.word	0x2002e4b4
 8021a7c:	2002e4b0 	.word	0x2002e4b0
 8021a80:	08046c1c 	.word	0x08046c1c
 8021a84:	08046cc4 	.word	0x08046cc4
 8021a88:	0802b44c 	.word	0x0802b44c
 8021a8c:	080472d0 	.word	0x080472d0
 8021a90:	08022339 	.word	0x08022339

08021a94 <dhcp_dec_pcb_refcount>:
{
 8021a94:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021a96:	4d0b      	ldr	r5, [pc, #44]	; (8021ac4 <dhcp_dec_pcb_refcount+0x30>)
 8021a98:	782c      	ldrb	r4, [r5, #0]
 8021a9a:	b154      	cbz	r4, 8021ab2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 8021a9c:	3c01      	subs	r4, #1
 8021a9e:	b2e4      	uxtb	r4, r4
 8021aa0:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8021aa2:	b104      	cbz	r4, 8021aa6 <dhcp_dec_pcb_refcount+0x12>
}
 8021aa4:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 8021aa6:	4d08      	ldr	r5, [pc, #32]	; (8021ac8 <dhcp_dec_pcb_refcount+0x34>)
 8021aa8:	6828      	ldr	r0, [r5, #0]
 8021aaa:	f7ff fe5f 	bl	802176c <udp_remove>
    dhcp_pcb = NULL;
 8021aae:	602c      	str	r4, [r5, #0]
}
 8021ab0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021ab2:	4b06      	ldr	r3, [pc, #24]	; (8021acc <dhcp_dec_pcb_refcount+0x38>)
 8021ab4:	22ff      	movs	r2, #255	; 0xff
 8021ab6:	4906      	ldr	r1, [pc, #24]	; (8021ad0 <dhcp_dec_pcb_refcount+0x3c>)
 8021ab8:	4806      	ldr	r0, [pc, #24]	; (8021ad4 <dhcp_dec_pcb_refcount+0x40>)
 8021aba:	f004 fe4b 	bl	8026754 <iprintf>
  dhcp_pcb_refcount--;
 8021abe:	782c      	ldrb	r4, [r5, #0]
 8021ac0:	e7ec      	b.n	8021a9c <dhcp_dec_pcb_refcount+0x8>
 8021ac2:	bf00      	nop
 8021ac4:	2002e4b4 	.word	0x2002e4b4
 8021ac8:	2002e4b0 	.word	0x2002e4b0
 8021acc:	08046c1c 	.word	0x08046c1c
 8021ad0:	08046cec 	.word	0x08046cec
 8021ad4:	0802b44c 	.word	0x0802b44c

08021ad8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021ad8:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021ada:	4d29      	ldr	r5, [pc, #164]	; (8021b80 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021adc:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8021ade:	b083      	sub	sp, #12
 8021ae0:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021ae2:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021ae4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021ae8:	b112      	cbz	r2, 8021af0 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8021aea:	4b26      	ldr	r3, [pc, #152]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021aec:	68db      	ldr	r3, [r3, #12]
 8021aee:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8021af0:	792b      	ldrb	r3, [r5, #4]
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d041      	beq.n	8021b7a <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8021af6:	4b23      	ldr	r3, [pc, #140]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021af8:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8021afa:	796a      	ldrb	r2, [r5, #5]
 8021afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021afe:	b312      	cbz	r2, 8021b46 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8021b00:	4b20      	ldr	r3, [pc, #128]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021b02:	695b      	ldr	r3, [r3, #20]
 8021b04:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b06:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021b08:	690a      	ldr	r2, [r1, #16]
 8021b0a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b0c:	bb2b      	cbnz	r3, 8021b5a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 8021b0e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021b10:	79eb      	ldrb	r3, [r5, #7]
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	d12b      	bne.n	8021b6e <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021b16:	7a2b      	ldrb	r3, [r5, #8]
 8021b18:	b19b      	cbz	r3, 8021b42 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b1a:	4c1a      	ldr	r4, [pc, #104]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021b1c:	6a20      	ldr	r0, [r4, #32]
 8021b1e:	f7f8 fd17 	bl	801a550 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8021b22:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b24:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021b26:	2000      	movs	r0, #0
 8021b28:	f7f9 f8b8 	bl	801ac9c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8021b2c:	7a6b      	ldrb	r3, [r5, #9]
 8021b2e:	b143      	cbz	r3, 8021b42 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021b32:	f7f8 fd0d 	bl	801a550 <lwip_htonl>
 8021b36:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8021b38:	a901      	add	r1, sp, #4
 8021b3a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8021b3c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 8021b3e:	f7f9 f8ad 	bl	801ac9c <dns_setserver>
}
 8021b42:	b003      	add	sp, #12
 8021b44:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8021b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021b4c:	08db      	lsrs	r3, r3, #3
 8021b4e:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b50:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021b52:	690a      	ldr	r2, [r1, #16]
 8021b54:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d0d9      	beq.n	8021b0e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021b5a:	4b0a      	ldr	r3, [pc, #40]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021b5c:	6998      	ldr	r0, [r3, #24]
 8021b5e:	f7f8 fcf7 	bl	801a550 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8021b62:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021b64:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8021b66:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021b68:	79eb      	ldrb	r3, [r5, #7]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d0d3      	beq.n	8021b16 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8021b6e:	4b05      	ldr	r3, [pc, #20]	; (8021b84 <dhcp_handle_ack.isra.0+0xac>)
 8021b70:	69d8      	ldr	r0, [r3, #28]
 8021b72:	f7f8 fced 	bl	801a550 <lwip_htonl>
 8021b76:	6260      	str	r0, [r4, #36]	; 0x24
 8021b78:	e7cd      	b.n	8021b16 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8021b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b7c:	085b      	lsrs	r3, r3, #1
 8021b7e:	e7bc      	b.n	8021afa <dhcp_handle_ack.isra.0+0x22>
 8021b80:	2002e4b8 	.word	0x2002e4b8
 8021b84:	2002e4c4 	.word	0x2002e4c4

08021b88 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8021b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021b8c:	4681      	mov	r9, r0
 8021b8e:	2800      	cmp	r0, #0
 8021b90:	f000 8097 	beq.w	8021cc2 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021b94:	460c      	mov	r4, r1
 8021b96:	2900      	cmp	r1, #0
 8021b98:	f000 808a 	beq.w	8021cb0 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8021b9c:	4616      	mov	r6, r2
 8021b9e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021ba2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021ba6:	2036      	movs	r0, #54	; 0x36
 8021ba8:	461f      	mov	r7, r3
 8021baa:	f7fa fb37 	bl	801c21c <pbuf_alloc>
  if (p_out == NULL) {
 8021bae:	4605      	mov	r5, r0
 8021bb0:	2800      	cmp	r0, #0
 8021bb2:	d049      	beq.n	8021c48 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021bb4:	8943      	ldrh	r3, [r0, #10]
 8021bb6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8021bba:	d371      	bcc.n	8021ca0 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021bbc:	2e03      	cmp	r6, #3
 8021bbe:	d051      	beq.n	8021c64 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8021bc0:	79a3      	ldrb	r3, [r4, #6]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d043      	beq.n	8021c4e <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8021bc6:	4b43      	ldr	r3, [pc, #268]	; (8021cd4 <dhcp_create_msg+0x14c>)
 8021bc8:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8021bca:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021bce:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021bd2:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8021bd4:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021bd6:	4640      	mov	r0, r8
 8021bd8:	f003 fe1e 	bl	8025818 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8021bdc:	2301      	movs	r3, #1
 8021bde:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021be2:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021be6:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021bea:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021bee:	6820      	ldr	r0, [r4, #0]
 8021bf0:	f7f8 fcae 	bl	801a550 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021bf4:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021bf6:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021bfa:	d12d      	bne.n	8021c58 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8021bfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8021c00:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021c04:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8021c08:	f109 0434 	add.w	r4, r9, #52	; 0x34
 8021c0c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021c10:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021c14:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8021c16:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021c1a:	d1f9      	bne.n	8021c10 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c1c:	2363      	movs	r3, #99	; 0x63
 8021c1e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8021c22:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c26:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 8021c2a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 8021c2e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c30:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8021c34:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8021c36:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 8021c3a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8021c3c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8021c40:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8021c44:	2303      	movs	r3, #3
 8021c46:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8021c48:	4628      	mov	r0, r5
 8021c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 8021c4e:	f004 fe25 	bl	802689c <rand>
 8021c52:	4b20      	ldr	r3, [pc, #128]	; (8021cd4 <dhcp_create_msg+0x14c>)
 8021c54:	6018      	str	r0, [r3, #0]
 8021c56:	e7b8      	b.n	8021bca <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8021c58:	1ff3      	subs	r3, r6, #7
 8021c5a:	2b01      	cmp	r3, #1
 8021c5c:	d9ce      	bls.n	8021bfc <dhcp_create_msg+0x74>
 8021c5e:	2e03      	cmp	r6, #3
 8021c60:	d1d0      	bne.n	8021c04 <dhcp_create_msg+0x7c>
 8021c62:	e018      	b.n	8021c96 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8021c64:	7963      	ldrb	r3, [r4, #5]
 8021c66:	2b03      	cmp	r3, #3
 8021c68:	d0aa      	beq.n	8021bc0 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 8021c6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8021c6e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021c72:	2100      	movs	r1, #0
 8021c74:	4640      	mov	r0, r8
 8021c76:	f003 fdcf 	bl	8025818 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8021c7a:	2301      	movs	r3, #1
 8021c7c:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8021c80:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021c84:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8021c88:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8021c8c:	6820      	ldr	r0, [r4, #0]
 8021c8e:	f7f8 fc5f 	bl	801a550 <lwip_htonl>
 8021c92:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8021c96:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8021c98:	3b04      	subs	r3, #4
 8021c9a:	2b01      	cmp	r3, #1
 8021c9c:	d8b2      	bhi.n	8021c04 <dhcp_create_msg+0x7c>
 8021c9e:	e7ad      	b.n	8021bfc <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021ca0:	4b0d      	ldr	r3, [pc, #52]	; (8021cd8 <dhcp_create_msg+0x150>)
 8021ca2:	f240 7271 	movw	r2, #1905	; 0x771
 8021ca6:	490d      	ldr	r1, [pc, #52]	; (8021cdc <dhcp_create_msg+0x154>)
 8021ca8:	480d      	ldr	r0, [pc, #52]	; (8021ce0 <dhcp_create_msg+0x158>)
 8021caa:	f004 fd53 	bl	8026754 <iprintf>
 8021cae:	e785      	b.n	8021bbc <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8021cb0:	4b09      	ldr	r3, [pc, #36]	; (8021cd8 <dhcp_create_msg+0x150>)
 8021cb2:	f240 726a 	movw	r2, #1898	; 0x76a
 8021cb6:	490b      	ldr	r1, [pc, #44]	; (8021ce4 <dhcp_create_msg+0x15c>)
 8021cb8:	4625      	mov	r5, r4
 8021cba:	4809      	ldr	r0, [pc, #36]	; (8021ce0 <dhcp_create_msg+0x158>)
 8021cbc:	f004 fd4a 	bl	8026754 <iprintf>
 8021cc0:	e7c2      	b.n	8021c48 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8021cc2:	4b05      	ldr	r3, [pc, #20]	; (8021cd8 <dhcp_create_msg+0x150>)
 8021cc4:	f240 7269 	movw	r2, #1897	; 0x769
 8021cc8:	4907      	ldr	r1, [pc, #28]	; (8021ce8 <dhcp_create_msg+0x160>)
 8021cca:	464d      	mov	r5, r9
 8021ccc:	4804      	ldr	r0, [pc, #16]	; (8021ce0 <dhcp_create_msg+0x158>)
 8021cce:	f004 fd41 	bl	8026754 <iprintf>
 8021cd2:	e7b9      	b.n	8021c48 <dhcp_create_msg+0xc0>
 8021cd4:	2002e4ec 	.word	0x2002e4ec
 8021cd8:	08046c1c 	.word	0x08046c1c
 8021cdc:	08046d50 	.word	0x08046d50
 8021ce0:	0802b44c 	.word	0x0802b44c
 8021ce4:	08046d30 	.word	0x08046d30
 8021ce8:	08046d10 	.word	0x08046d10

08021cec <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8021cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021cf0:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8021cf4:	b087      	sub	sp, #28
 8021cf6:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8021cf8:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8021cfc:	2b03      	cmp	r3, #3
 8021cfe:	d007      	beq.n	8021d10 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8021d00:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8021d02:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8021d04:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8021d08:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 8021d0c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021d10:	f10d 0316 	add.w	r3, sp, #22
 8021d14:	2203      	movs	r2, #3
 8021d16:	4651      	mov	r1, sl
 8021d18:	4648      	mov	r0, r9
 8021d1a:	f7ff ff35 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 8021d1e:	4607      	mov	r7, r0
 8021d20:	2800      	cmp	r0, #0
 8021d22:	f000 808d 	beq.w	8021e40 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d26:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021d2a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d2c:	f104 0804 	add.w	r8, r4, #4
 8021d30:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d32:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d34:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021d38:	f200 80a3 	bhi.w	8021e82 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 8021d3c:	2239      	movs	r2, #57	; 0x39
 8021d3e:	1c63      	adds	r3, r4, #1
 8021d40:	fa1f fb85 	uxth.w	fp, r5
 8021d44:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021d46:	b29b      	uxth	r3, r3
 8021d48:	2202      	movs	r2, #2
 8021d4a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d4c:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021d50:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d54:	2b44      	cmp	r3, #68	; 0x44
 8021d56:	f200 80ac 	bhi.w	8021eb2 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021d5a:	2202      	movs	r2, #2
 8021d5c:	1ce3      	adds	r3, r4, #3
 8021d5e:	fa1f f588 	uxth.w	r5, r8
 8021d62:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021d66:	b29b      	uxth	r3, r3
 8021d68:	2240      	movs	r2, #64	; 0x40
 8021d6a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d6c:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8021d6e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d72:	2b44      	cmp	r3, #68	; 0x44
 8021d74:	f200 8095 	bhi.w	8021ea2 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8021d78:	1d63      	adds	r3, r4, #5
 8021d7a:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8021d7c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 8021d7e:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021d80:	b29b      	uxth	r3, r3
 8021d82:	2204      	movs	r2, #4
 8021d84:	b2a4      	uxth	r4, r4
 8021d86:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d88:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021d8c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021d90:	f7f8 fbde 	bl	801a550 <lwip_htonl>
 8021d94:	4631      	mov	r1, r6
 8021d96:	4602      	mov	r2, r0
 8021d98:	4620      	mov	r0, r4
 8021d9a:	f7ff fd55 	bl	8021848 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d9e:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021da0:	4605      	mov	r5, r0
 8021da2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021da6:	2b44      	cmp	r3, #68	; 0x44
 8021da8:	9303      	str	r3, [sp, #12]
 8021daa:	d872      	bhi.n	8021e92 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 8021dac:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 8021dae:	2237      	movs	r2, #55	; 0x37
 8021db0:	1c6b      	adds	r3, r5, #1
 8021db2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8021ee8 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 8021db6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 8021db8:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8021dba:	b29b      	uxth	r3, r3
 8021dbc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dbe:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021dc0:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8021dc4:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dc6:	493f      	ldr	r1, [pc, #252]	; (8021ec4 <dhcp_reboot.isra.0+0x1d8>)
 8021dc8:	4b3f      	ldr	r3, [pc, #252]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021dca:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021dce:	d80c      	bhi.n	8021dea <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 8021dd0:	1c62      	adds	r2, r4, #1
 8021dd2:	f806 b004 	strb.w	fp, [r6, r4]
 8021dd6:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021dd8:	4a3c      	ldr	r2, [pc, #240]	; (8021ecc <dhcp_reboot.isra.0+0x1e0>)
 8021dda:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021ddc:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021de0:	d00b      	beq.n	8021dfa <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021de2:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021de4:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021de8:	d9f2      	bls.n	8021dd0 <dhcp_reboot.isra.0+0xe4>
 8021dea:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021dee:	4838      	ldr	r0, [pc, #224]	; (8021ed0 <dhcp_reboot.isra.0+0x1e4>)
 8021df0:	f004 fcb0 	bl	8026754 <iprintf>
 8021df4:	4b34      	ldr	r3, [pc, #208]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
 8021df6:	4933      	ldr	r1, [pc, #204]	; (8021ec4 <dhcp_reboot.isra.0+0x1d8>)
 8021df8:	e7ea      	b.n	8021dd0 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8021dfa:	1de8      	adds	r0, r5, #7
 8021dfc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021e00:	22ff      	movs	r2, #255	; 0xff
 8021e02:	b280      	uxth	r0, r0
 8021e04:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021e06:	2843      	cmp	r0, #67	; 0x43
 8021e08:	d808      	bhi.n	8021e1c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021e0a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8021e0e:	4430      	add	r0, r6
 8021e10:	2100      	movs	r1, #0
 8021e12:	b2ad      	uxth	r5, r5
 8021e14:	1c6a      	adds	r2, r5, #1
 8021e16:	f003 fcff 	bl	8025818 <memset>
 8021e1a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021e1c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021e20:	4638      	mov	r0, r7
 8021e22:	b289      	uxth	r1, r1
 8021e24:	f7fa fab4 	bl	801c390 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021e28:	482a      	ldr	r0, [pc, #168]	; (8021ed4 <dhcp_reboot.isra.0+0x1e8>)
 8021e2a:	2343      	movs	r3, #67	; 0x43
 8021e2c:	4a2a      	ldr	r2, [pc, #168]	; (8021ed8 <dhcp_reboot.isra.0+0x1ec>)
 8021e2e:	6800      	ldr	r0, [r0, #0]
 8021e30:	4639      	mov	r1, r7
 8021e32:	f8cd 9000 	str.w	r9, [sp]
 8021e36:	f7ff fba5 	bl	8021584 <udp_sendto_if>
    pbuf_free(p_out);
 8021e3a:	4638      	mov	r0, r7
 8021e3c:	f7fa fbc0 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021e40:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8021e44:	2bff      	cmp	r3, #255	; 0xff
 8021e46:	d016      	beq.n	8021e76 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8021e48:	3301      	adds	r3, #1
 8021e4a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e4c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021e4e:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e52:	d810      	bhi.n	8021e76 <dhcp_reboot.isra.0+0x18a>
 8021e54:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e58:	4a20      	ldr	r2, [pc, #128]	; (8021edc <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021e5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021e5e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021e64:	b29b      	uxth	r3, r3
 8021e66:	fba2 2303 	umull	r2, r3, r2, r3
 8021e6a:	095b      	lsrs	r3, r3, #5
 8021e6c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021e70:	b007      	add	sp, #28
 8021e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8021e76:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021e78:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8021e7c:	b007      	add	sp, #28
 8021e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021e82:	4b11      	ldr	r3, [pc, #68]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
 8021e84:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e88:	4915      	ldr	r1, [pc, #84]	; (8021ee0 <dhcp_reboot.isra.0+0x1f4>)
 8021e8a:	4811      	ldr	r0, [pc, #68]	; (8021ed0 <dhcp_reboot.isra.0+0x1e4>)
 8021e8c:	f004 fc62 	bl	8026754 <iprintf>
 8021e90:	e754      	b.n	8021d3c <dhcp_reboot.isra.0+0x50>
 8021e92:	4b0d      	ldr	r3, [pc, #52]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
 8021e94:	f240 529a 	movw	r2, #1434	; 0x59a
 8021e98:	4911      	ldr	r1, [pc, #68]	; (8021ee0 <dhcp_reboot.isra.0+0x1f4>)
 8021e9a:	480d      	ldr	r0, [pc, #52]	; (8021ed0 <dhcp_reboot.isra.0+0x1e4>)
 8021e9c:	f004 fc5a 	bl	8026754 <iprintf>
 8021ea0:	e784      	b.n	8021dac <dhcp_reboot.isra.0+0xc0>
 8021ea2:	4b09      	ldr	r3, [pc, #36]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
 8021ea4:	f240 529a 	movw	r2, #1434	; 0x59a
 8021ea8:	490d      	ldr	r1, [pc, #52]	; (8021ee0 <dhcp_reboot.isra.0+0x1f4>)
 8021eaa:	4809      	ldr	r0, [pc, #36]	; (8021ed0 <dhcp_reboot.isra.0+0x1e4>)
 8021eac:	f004 fc52 	bl	8026754 <iprintf>
 8021eb0:	e762      	b.n	8021d78 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021eb2:	4b05      	ldr	r3, [pc, #20]	; (8021ec8 <dhcp_reboot.isra.0+0x1dc>)
 8021eb4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021eb8:	490a      	ldr	r1, [pc, #40]	; (8021ee4 <dhcp_reboot.isra.0+0x1f8>)
 8021eba:	4805      	ldr	r0, [pc, #20]	; (8021ed0 <dhcp_reboot.isra.0+0x1e4>)
 8021ebc:	f004 fc4a 	bl	8026754 <iprintf>
 8021ec0:	e74b      	b.n	8021d5a <dhcp_reboot.isra.0+0x6e>
 8021ec2:	bf00      	nop
 8021ec4:	08046e10 	.word	0x08046e10
 8021ec8:	08046c1c 	.word	0x08046c1c
 8021ecc:	08046f98 	.word	0x08046f98
 8021ed0:	0802b44c 	.word	0x0802b44c
 8021ed4:	2002e4b0 	.word	0x2002e4b0
 8021ed8:	080472d4 	.word	0x080472d4
 8021edc:	10624dd3 	.word	0x10624dd3
 8021ee0:	08046d90 	.word	0x08046d90
 8021ee4:	08046dd4 	.word	0x08046dd4
 8021ee8:	08046f95 	.word	0x08046f95

08021eec <dhcp_discover>:
{
 8021eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021ef0:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021ef2:	2300      	movs	r3, #0
{
 8021ef4:	b087      	sub	sp, #28
 8021ef6:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8021ef8:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021efa:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8021efc:	2a06      	cmp	r2, #6
 8021efe:	d003      	beq.n	8021f08 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8021f00:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8021f02:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8021f04:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8021f06:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8021f08:	f10d 0316 	add.w	r3, sp, #22
 8021f0c:	2201      	movs	r2, #1
 8021f0e:	4639      	mov	r1, r7
 8021f10:	4658      	mov	r0, fp
 8021f12:	f7ff fe39 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 8021f16:	4605      	mov	r5, r0
 8021f18:	2800      	cmp	r0, #0
 8021f1a:	f000 8081 	beq.w	8022020 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f1e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021f22:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f24:	f104 0804 	add.w	r8, r4, #4
 8021f28:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f2c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f2e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021f32:	f200 809a 	bhi.w	802206a <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8021f36:	2239      	movs	r2, #57	; 0x39
 8021f38:	1c63      	adds	r3, r4, #1
 8021f3a:	fa1f f189 	uxth.w	r1, r9
 8021f3e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021f40:	b29b      	uxth	r3, r3
 8021f42:	2202      	movs	r2, #2
 8021f44:	9103      	str	r1, [sp, #12]
 8021f46:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f48:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021f4a:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f4e:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f50:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021f54:	f200 8091 	bhi.w	802207a <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021f58:	1ce3      	adds	r3, r4, #3
 8021f5a:	fa1f f988 	uxth.w	r9, r8
 8021f5e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021f62:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021f64:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021f66:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021f68:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f6c:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021f70:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021f74:	2b44      	cmp	r3, #68	; 0x44
 8021f76:	d870      	bhi.n	802205a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8021f78:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021f7c:	2237      	movs	r2, #55	; 0x37
 8021f7e:	1d63      	adds	r3, r4, #5
 8021f80:	f8df a130 	ldr.w	sl, [pc, #304]	; 80220b4 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8021f84:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8021f88:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021f8c:	b29b      	uxth	r3, r3
 8021f8e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f90:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f94:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8021f98:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021f9a:	493c      	ldr	r1, [pc, #240]	; (802208c <dhcp_discover+0x1a0>)
 8021f9c:	4b3c      	ldr	r3, [pc, #240]	; (8022090 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021f9e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021fa2:	d80f      	bhi.n	8021fc4 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8021fa4:	f108 0201 	add.w	r2, r8, #1
 8021fa8:	f806 9008 	strb.w	r9, [r6, r8]
 8021fac:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fb0:	4a38      	ldr	r2, [pc, #224]	; (8022094 <dhcp_discover+0x1a8>)
 8021fb2:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021fb4:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fb8:	d00c      	beq.n	8021fd4 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021fba:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021fbe:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021fc2:	d9ef      	bls.n	8021fa4 <dhcp_discover+0xb8>
 8021fc4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021fc8:	4833      	ldr	r0, [pc, #204]	; (8022098 <dhcp_discover+0x1ac>)
 8021fca:	f004 fbc3 	bl	8026754 <iprintf>
 8021fce:	4b30      	ldr	r3, [pc, #192]	; (8022090 <dhcp_discover+0x1a4>)
 8021fd0:	492e      	ldr	r1, [pc, #184]	; (802208c <dhcp_discover+0x1a0>)
 8021fd2:	e7e7      	b.n	8021fa4 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8021fd4:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8021fd8:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021fdc:	22ff      	movs	r2, #255	; 0xff
 8021fde:	b280      	uxth	r0, r0
 8021fe0:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021fe2:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021fe4:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021fe6:	d808      	bhi.n	8021ffa <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8021fe8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8021fec:	4430      	add	r0, r6
 8021fee:	2100      	movs	r1, #0
 8021ff0:	b2a4      	uxth	r4, r4
 8021ff2:	1c62      	adds	r2, r4, #1
 8021ff4:	f003 fc10 	bl	8025818 <memset>
 8021ff8:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021ffa:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021ffe:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022000:	4c26      	ldr	r4, [pc, #152]	; (802209c <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022002:	b289      	uxth	r1, r1
 8022004:	f7fa f9c4 	bl	801c390 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022008:	4825      	ldr	r0, [pc, #148]	; (80220a0 <dhcp_discover+0x1b4>)
 802200a:	2343      	movs	r3, #67	; 0x43
 802200c:	4a25      	ldr	r2, [pc, #148]	; (80220a4 <dhcp_discover+0x1b8>)
 802200e:	6800      	ldr	r0, [r0, #0]
 8022010:	4629      	mov	r1, r5
 8022012:	e9cd b400 	strd	fp, r4, [sp]
 8022016:	f7ff fa01 	bl	802141c <udp_sendto_if_src>
    pbuf_free(p_out);
 802201a:	4628      	mov	r0, r5
 802201c:	f7fa fad0 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022020:	79bb      	ldrb	r3, [r7, #6]
 8022022:	2bff      	cmp	r3, #255	; 0xff
 8022024:	d013      	beq.n	802204e <dhcp_discover+0x162>
    dhcp->tries++;
 8022026:	3301      	adds	r3, #1
 8022028:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802202a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 802202c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802202e:	d80e      	bhi.n	802204e <dhcp_discover+0x162>
 8022030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022034:	491c      	ldr	r1, [pc, #112]	; (80220a8 <dhcp_discover+0x1bc>)
}
 8022036:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022038:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802203a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802203e:	b29b      	uxth	r3, r3
 8022040:	fba1 2303 	umull	r2, r3, r1, r3
 8022044:	095b      	lsrs	r3, r3, #5
 8022046:	813b      	strh	r3, [r7, #8]
}
 8022048:	b007      	add	sp, #28
 802204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 802204e:	2378      	movs	r3, #120	; 0x78
}
 8022050:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022052:	813b      	strh	r3, [r7, #8]
}
 8022054:	b007      	add	sp, #28
 8022056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802205a:	4b0d      	ldr	r3, [pc, #52]	; (8022090 <dhcp_discover+0x1a4>)
 802205c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022060:	4912      	ldr	r1, [pc, #72]	; (80220ac <dhcp_discover+0x1c0>)
 8022062:	480d      	ldr	r0, [pc, #52]	; (8022098 <dhcp_discover+0x1ac>)
 8022064:	f004 fb76 	bl	8026754 <iprintf>
 8022068:	e786      	b.n	8021f78 <dhcp_discover+0x8c>
 802206a:	4b09      	ldr	r3, [pc, #36]	; (8022090 <dhcp_discover+0x1a4>)
 802206c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022070:	490e      	ldr	r1, [pc, #56]	; (80220ac <dhcp_discover+0x1c0>)
 8022072:	4809      	ldr	r0, [pc, #36]	; (8022098 <dhcp_discover+0x1ac>)
 8022074:	f004 fb6e 	bl	8026754 <iprintf>
 8022078:	e75d      	b.n	8021f36 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802207a:	4b05      	ldr	r3, [pc, #20]	; (8022090 <dhcp_discover+0x1a4>)
 802207c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022080:	490b      	ldr	r1, [pc, #44]	; (80220b0 <dhcp_discover+0x1c4>)
 8022082:	4805      	ldr	r0, [pc, #20]	; (8022098 <dhcp_discover+0x1ac>)
 8022084:	f004 fb66 	bl	8026754 <iprintf>
 8022088:	e766      	b.n	8021f58 <dhcp_discover+0x6c>
 802208a:	bf00      	nop
 802208c:	08046e10 	.word	0x08046e10
 8022090:	08046c1c 	.word	0x08046c1c
 8022094:	08046f98 	.word	0x08046f98
 8022098:	0802b44c 	.word	0x0802b44c
 802209c:	080472d0 	.word	0x080472d0
 80220a0:	2002e4b0 	.word	0x2002e4b0
 80220a4:	080472d4 	.word	0x080472d4
 80220a8:	10624dd3 	.word	0x10624dd3
 80220ac:	08046d90 	.word	0x08046d90
 80220b0:	08046dd4 	.word	0x08046dd4
 80220b4:	08046f95 	.word	0x08046f95

080220b8 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80220b8:	2800      	cmp	r0, #0
 80220ba:	f000 8112 	beq.w	80222e2 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 80220be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 80220c2:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 80220c4:	b087      	sub	sp, #28
 80220c6:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80220c8:	2e00      	cmp	r6, #0
 80220ca:	f000 8111 	beq.w	80222f0 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 80220ce:	7973      	ldrb	r3, [r6, #5]
 80220d0:	2b01      	cmp	r3, #1
 80220d2:	d004      	beq.n	80220de <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 80220d4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80220d6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 80220d8:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 80220da:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 80220dc:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80220de:	f10d 0316 	add.w	r3, sp, #22
 80220e2:	2203      	movs	r2, #3
 80220e4:	4631      	mov	r1, r6
 80220e6:	4658      	mov	r0, fp
 80220e8:	f7ff fd4e 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 80220ec:	4605      	mov	r5, r0
 80220ee:	2800      	cmp	r0, #0
 80220f0:	f000 80b4 	beq.w	802225c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80220f4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80220f8:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80220fa:	f107 0804 	add.w	r8, r7, #4
 80220fe:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022102:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022104:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8022108:	f200 80cb 	bhi.w	80222a2 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 802210c:	2239      	movs	r2, #57	; 0x39
 802210e:	1c7b      	adds	r3, r7, #1
 8022110:	fa1f f189 	uxth.w	r1, r9
 8022114:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8022116:	b29b      	uxth	r3, r3
 8022118:	2202      	movs	r2, #2
 802211a:	9103      	str	r1, [sp, #12]
 802211c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802211e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022120:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022124:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022126:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802212a:	f200 80c2 	bhi.w	80222b2 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802212e:	1cfb      	adds	r3, r7, #3
 8022130:	fa1f f988 	uxth.w	r9, r8
 8022134:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022138:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802213a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802213c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802213e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022142:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022146:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802214a:	2b44      	cmp	r3, #68	; 0x44
 802214c:	f200 80b9 	bhi.w	80222c2 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8022150:	1d7b      	adds	r3, r7, #5
 8022152:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8022154:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8022156:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 802215a:	b29b      	uxth	r3, r3
 802215c:	2204      	movs	r2, #4
 802215e:	b2bf      	uxth	r7, r7
 8022160:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022162:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022164:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022168:	f7f8 f9f2 	bl	801a550 <lwip_htonl>
 802216c:	4621      	mov	r1, r4
 802216e:	4602      	mov	r2, r0
 8022170:	4638      	mov	r0, r7
 8022172:	f7ff fb69 	bl	8021848 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022176:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022178:	4607      	mov	r7, r0
 802217a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802217e:	2b44      	cmp	r3, #68	; 0x44
 8022180:	f200 80a7 	bhi.w	80222d2 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8022184:	2236      	movs	r2, #54	; 0x36
 8022186:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8022188:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 802218c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 802218e:	b29b      	uxth	r3, r3
 8022190:	2204      	movs	r2, #4
 8022192:	fa1f f888 	uxth.w	r8, r8
 8022196:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8022198:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 802219a:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 802219e:	f7f8 f9d7 	bl	801a550 <lwip_htonl>
 80221a2:	4621      	mov	r1, r4
 80221a4:	4602      	mov	r2, r0
 80221a6:	4640      	mov	r0, r8
 80221a8:	f7ff fb4e 	bl	8021848 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80221ac:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80221ae:	4680      	mov	r8, r0
 80221b0:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80221b4:	2b44      	cmp	r3, #68	; 0x44
 80221b6:	9303      	str	r3, [sp, #12]
 80221b8:	d86b      	bhi.n	8022292 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 80221ba:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 80221be:	2237      	movs	r2, #55	; 0x37
 80221c0:	f108 0301 	add.w	r3, r8, #1
 80221c4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8022334 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 80221c8:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 80221ca:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 80221ce:	b29b      	uxth	r3, r3
 80221d0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221d2:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80221d4:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 80221d8:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221da:	494a      	ldr	r1, [pc, #296]	; (8022304 <dhcp_select.isra.0+0x24c>)
 80221dc:	4b4a      	ldr	r3, [pc, #296]	; (8022308 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80221de:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221e2:	d80c      	bhi.n	80221fe <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 80221e4:	1c7a      	adds	r2, r7, #1
 80221e6:	f804 a007 	strb.w	sl, [r4, r7]
 80221ea:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80221ec:	4a47      	ldr	r2, [pc, #284]	; (802230c <dhcp_select.isra.0+0x254>)
 80221ee:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80221f0:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80221f4:	d00b      	beq.n	802220e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221f6:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80221f8:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80221fc:	d9f2      	bls.n	80221e4 <dhcp_select.isra.0+0x12c>
 80221fe:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022202:	4843      	ldr	r0, [pc, #268]	; (8022310 <dhcp_select.isra.0+0x258>)
 8022204:	f004 faa6 	bl	8026754 <iprintf>
 8022208:	4b3f      	ldr	r3, [pc, #252]	; (8022308 <dhcp_select.isra.0+0x250>)
 802220a:	493e      	ldr	r1, [pc, #248]	; (8022304 <dhcp_select.isra.0+0x24c>)
 802220c:	e7ea      	b.n	80221e4 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 802220e:	f108 0007 	add.w	r0, r8, #7
 8022212:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8022216:	22ff      	movs	r2, #255	; 0xff
 8022218:	b280      	uxth	r0, r0
 802221a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802221c:	2843      	cmp	r0, #67	; 0x43
 802221e:	d80a      	bhi.n	8022236 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8022220:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8022224:	4420      	add	r0, r4
 8022226:	2100      	movs	r1, #0
 8022228:	fa1f f888 	uxth.w	r8, r8
 802222c:	f108 0201 	add.w	r2, r8, #1
 8022230:	f003 faf2 	bl	8025818 <memset>
 8022234:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022236:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802223a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802223c:	4c35      	ldr	r4, [pc, #212]	; (8022314 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802223e:	b289      	uxth	r1, r1
 8022240:	f7fa f8a6 	bl	801c390 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022244:	4834      	ldr	r0, [pc, #208]	; (8022318 <dhcp_select.isra.0+0x260>)
 8022246:	2343      	movs	r3, #67	; 0x43
 8022248:	4a34      	ldr	r2, [pc, #208]	; (802231c <dhcp_select.isra.0+0x264>)
 802224a:	6800      	ldr	r0, [r0, #0]
 802224c:	4629      	mov	r1, r5
 802224e:	e9cd b400 	strd	fp, r4, [sp]
 8022252:	f7ff f8e3 	bl	802141c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022256:	4628      	mov	r0, r5
 8022258:	f7fa f9b2 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 802225c:	79b3      	ldrb	r3, [r6, #6]
 802225e:	2bff      	cmp	r3, #255	; 0xff
 8022260:	d012      	beq.n	8022288 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8022262:	3301      	adds	r3, #1
 8022264:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022266:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8022268:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802226a:	d80d      	bhi.n	8022288 <dhcp_select.isra.0+0x1d0>
 802226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022270:	492b      	ldr	r1, [pc, #172]	; (8022320 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022272:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022274:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022278:	b29b      	uxth	r3, r3
 802227a:	fba1 2303 	umull	r2, r3, r1, r3
 802227e:	095b      	lsrs	r3, r3, #5
 8022280:	8133      	strh	r3, [r6, #8]
}
 8022282:	b007      	add	sp, #28
 8022284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8022288:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802228a:	8133      	strh	r3, [r6, #8]
}
 802228c:	b007      	add	sp, #28
 802228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022292:	4b1d      	ldr	r3, [pc, #116]	; (8022308 <dhcp_select.isra.0+0x250>)
 8022294:	f240 529a 	movw	r2, #1434	; 0x59a
 8022298:	4922      	ldr	r1, [pc, #136]	; (8022324 <dhcp_select.isra.0+0x26c>)
 802229a:	481d      	ldr	r0, [pc, #116]	; (8022310 <dhcp_select.isra.0+0x258>)
 802229c:	f004 fa5a 	bl	8026754 <iprintf>
 80222a0:	e78b      	b.n	80221ba <dhcp_select.isra.0+0x102>
 80222a2:	4b19      	ldr	r3, [pc, #100]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80222a8:	491e      	ldr	r1, [pc, #120]	; (8022324 <dhcp_select.isra.0+0x26c>)
 80222aa:	4819      	ldr	r0, [pc, #100]	; (8022310 <dhcp_select.isra.0+0x258>)
 80222ac:	f004 fa52 	bl	8026754 <iprintf>
 80222b0:	e72c      	b.n	802210c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80222b2:	4b15      	ldr	r3, [pc, #84]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222b4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80222b8:	491b      	ldr	r1, [pc, #108]	; (8022328 <dhcp_select.isra.0+0x270>)
 80222ba:	4815      	ldr	r0, [pc, #84]	; (8022310 <dhcp_select.isra.0+0x258>)
 80222bc:	f004 fa4a 	bl	8026754 <iprintf>
 80222c0:	e735      	b.n	802212e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80222c2:	4b11      	ldr	r3, [pc, #68]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80222c8:	4916      	ldr	r1, [pc, #88]	; (8022324 <dhcp_select.isra.0+0x26c>)
 80222ca:	4811      	ldr	r0, [pc, #68]	; (8022310 <dhcp_select.isra.0+0x258>)
 80222cc:	f004 fa42 	bl	8026754 <iprintf>
 80222d0:	e73e      	b.n	8022150 <dhcp_select.isra.0+0x98>
 80222d2:	4b0d      	ldr	r3, [pc, #52]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80222d8:	4912      	ldr	r1, [pc, #72]	; (8022324 <dhcp_select.isra.0+0x26c>)
 80222da:	480d      	ldr	r0, [pc, #52]	; (8022310 <dhcp_select.isra.0+0x258>)
 80222dc:	f004 fa3a 	bl	8026754 <iprintf>
 80222e0:	e750      	b.n	8022184 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80222e2:	4b09      	ldr	r3, [pc, #36]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222e4:	f240 1277 	movw	r2, #375	; 0x177
 80222e8:	4910      	ldr	r1, [pc, #64]	; (802232c <dhcp_select.isra.0+0x274>)
 80222ea:	4809      	ldr	r0, [pc, #36]	; (8022310 <dhcp_select.isra.0+0x258>)
 80222ec:	f004 ba32 	b.w	8026754 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80222f0:	4b05      	ldr	r3, [pc, #20]	; (8022308 <dhcp_select.isra.0+0x250>)
 80222f2:	f240 1279 	movw	r2, #377	; 0x179
 80222f6:	490e      	ldr	r1, [pc, #56]	; (8022330 <dhcp_select.isra.0+0x278>)
 80222f8:	4805      	ldr	r0, [pc, #20]	; (8022310 <dhcp_select.isra.0+0x258>)
}
 80222fa:	b007      	add	sp, #28
 80222fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8022300:	f004 ba28 	b.w	8026754 <iprintf>
 8022304:	08046e10 	.word	0x08046e10
 8022308:	08046c1c 	.word	0x08046c1c
 802230c:	08046f98 	.word	0x08046f98
 8022310:	0802b44c 	.word	0x0802b44c
 8022314:	080472d0 	.word	0x080472d0
 8022318:	2002e4b0 	.word	0x2002e4b0
 802231c:	080472d4 	.word	0x080472d4
 8022320:	10624dd3 	.word	0x10624dd3
 8022324:	08046d90 	.word	0x08046d90
 8022328:	08046dd4 	.word	0x08046dd4
 802232c:	08046e48 	.word	0x08046e48
 8022330:	08046e64 	.word	0x08046e64
 8022334:	08046f95 	.word	0x08046f95

08022338 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8022338:	4ba5      	ldr	r3, [pc, #660]	; (80225d0 <dhcp_recv+0x298>)
{
 802233a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 802233e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8022342:	b08b      	sub	sp, #44	; 0x2c
 8022344:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022346:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 802234a:	f1b9 0f00 	cmp.w	r9, #0
 802234e:	d04b      	beq.n	80223e8 <dhcp_recv+0xb0>
 8022350:	f899 3004 	ldrb.w	r3, [r9, #4]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d047      	beq.n	80223e8 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8022358:	8953      	ldrh	r3, [r2, #10]
 802235a:	2b2b      	cmp	r3, #43	; 0x2b
 802235c:	d944      	bls.n	80223e8 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 802235e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8022360:	782b      	ldrb	r3, [r5, #0]
 8022362:	2b02      	cmp	r3, #2
 8022364:	d140      	bne.n	80223e8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022366:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 802236a:	b186      	cbz	r6, 802238e <dhcp_recv+0x56>
 802236c:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8022370:	f105 021c 	add.w	r2, r5, #28
 8022374:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022376:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802237a:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 802237c:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022380:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022382:	4284      	cmp	r4, r0
 8022384:	d130      	bne.n	80223e8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022386:	2b06      	cmp	r3, #6
 8022388:	d001      	beq.n	802238e <dhcp_recv+0x56>
 802238a:	42b3      	cmp	r3, r6
 802238c:	d3f3      	bcc.n	8022376 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 802238e:	6868      	ldr	r0, [r5, #4]
 8022390:	f7f8 f8de 	bl	801a550 <lwip_htonl>
 8022394:	f8d9 3000 	ldr.w	r3, [r9]
 8022398:	4298      	cmp	r0, r3
 802239a:	d125      	bne.n	80223e8 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 802239c:	4b8d      	ldr	r3, [pc, #564]	; (80225d4 <dhcp_recv+0x29c>)
 802239e:	2200      	movs	r2, #0
 80223a0:	605a      	str	r2, [r3, #4]
 80223a2:	811a      	strh	r2, [r3, #8]
 80223a4:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 80223a6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80223aa:	2b2b      	cmp	r3, #43	; 0x2b
 80223ac:	d91c      	bls.n	80223e8 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 80223ae:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 80223b2:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 80223b4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 80223b8:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 80223bc:	4693      	mov	fp, r2
 80223be:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 80223c2:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 80223c6:	e000      	b.n	80223ca <dhcp_recv+0x92>
 80223c8:	896b      	ldrh	r3, [r5, #10]
 80223ca:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 80223cc:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80223d0:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 80223d4:	d80e      	bhi.n	80223f4 <dhcp_recv+0xbc>
    q = q->next;
 80223d6:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 80223d8:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80223dc:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 80223e0:	2d00      	cmp	r5, #0
 80223e2:	d1f1      	bne.n	80223c8 <dhcp_recv+0x90>
 80223e4:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 80223e8:	4658      	mov	r0, fp
}
 80223ea:	b00b      	add	sp, #44	; 0x2c
 80223ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80223f0:	f7fa b8e6 	b.w	801c5c0 <pbuf_free>
  options = (u8_t *)q->payload;
 80223f4:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80223f6:	45d8      	cmp	r8, fp
 80223f8:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 80223fc:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80223fe:	f080 8140 	bcs.w	8022682 <dhcp_recv+0x34a>
 8022402:	9c02      	ldr	r4, [sp, #8]
 8022404:	9b01      	ldr	r3, [sp, #4]
 8022406:	5d1a      	ldrb	r2, [r3, r4]
 8022408:	2aff      	cmp	r2, #255	; 0xff
 802240a:	f000 813a 	beq.w	8022682 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 802240e:	1ca7      	adds	r7, r4, #2
 8022410:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8022412:	42bc      	cmp	r4, r7
 8022414:	d8e6      	bhi.n	80223e4 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8022416:	1c61      	adds	r1, r4, #1
 8022418:	896b      	ldrh	r3, [r5, #10]
 802241a:	4299      	cmp	r1, r3
 802241c:	f280 8129 	bge.w	8022672 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8022420:	9801      	ldr	r0, [sp, #4]
 8022422:	4420      	add	r0, r4
 8022424:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8022426:	2a3b      	cmp	r2, #59	; 0x3b
 8022428:	d83e      	bhi.n	80224a8 <dhcp_recv+0x170>
 802242a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802242e:	0040      	.short	0x0040
 8022430:	003d0053 	.word	0x003d0053
 8022434:	003d00b4 	.word	0x003d00b4
 8022438:	009f003d 	.word	0x009f003d
 802243c:	003d003d 	.word	0x003d003d
 8022440:	003d003d 	.word	0x003d003d
 8022444:	003d003d 	.word	0x003d003d
 8022448:	003d003d 	.word	0x003d003d
 802244c:	003d003d 	.word	0x003d003d
 8022450:	003d003d 	.word	0x003d003d
 8022454:	003d003d 	.word	0x003d003d
 8022458:	003d003d 	.word	0x003d003d
 802245c:	003d003d 	.word	0x003d003d
 8022460:	003d003d 	.word	0x003d003d
 8022464:	003d003d 	.word	0x003d003d
 8022468:	003d003d 	.word	0x003d003d
 802246c:	003d003d 	.word	0x003d003d
 8022470:	003d003d 	.word	0x003d003d
 8022474:	003d003d 	.word	0x003d003d
 8022478:	003d003d 	.word	0x003d003d
 802247c:	003d003d 	.word	0x003d003d
 8022480:	003d003d 	.word	0x003d003d
 8022484:	003d003d 	.word	0x003d003d
 8022488:	003d003d 	.word	0x003d003d
 802248c:	003d003d 	.word	0x003d003d
 8022490:	003d003d 	.word	0x003d003d
 8022494:	00f80115 	.word	0x00f80115
 8022498:	00df0109 	.word	0x00df0109
 802249c:	003d003d 	.word	0x003d003d
 80224a0:	00ec003d 	.word	0x00ec003d
 80224a4:	00c3      	.short	0x00c3
 80224a6:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 80224a8:	2a00      	cmp	r2, #0
 80224aa:	f040 82a2 	bne.w	80229f2 <dhcp_recv+0x6ba>
      offset++;
 80224ae:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 80224b0:	429c      	cmp	r4, r3
 80224b2:	f0c0 80e3 	bcc.w	802267c <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 80224b6:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80224b8:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 80224bc:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80224be:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 80224c2:	455c      	cmp	r4, fp
 80224c4:	d28e      	bcs.n	80223e4 <dhcp_recv+0xac>
        q = q->next;
 80224c6:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80224c8:	2d00      	cmp	r5, #0
 80224ca:	f000 81e1 	beq.w	8022890 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 80224ce:	686b      	ldr	r3, [r5, #4]
 80224d0:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80224d2:	e797      	b.n	8022404 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80224d4:	2e04      	cmp	r6, #4
 80224d6:	f040 81b5 	bne.w	8022844 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 80224da:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80224de:	429c      	cmp	r4, r3
 80224e0:	dc80      	bgt.n	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80224e2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80224e4:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 80224e8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 80224ea:	2300      	movs	r3, #0
 80224ec:	9405      	str	r4, [sp, #20]
 80224ee:	9309      	str	r3, [sp, #36]	; 0x24
 80224f0:	4b38      	ldr	r3, [pc, #224]	; (80225d4 <dhcp_recv+0x29c>)
 80224f2:	eb03 0908 	add.w	r9, r3, r8
 80224f6:	4b38      	ldr	r3, [pc, #224]	; (80225d8 <dhcp_recv+0x2a0>)
 80224f8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80224fc:	e02b      	b.n	8022556 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80224fe:	f899 3000 	ldrb.w	r3, [r9]
 8022502:	2b00      	cmp	r3, #0
 8022504:	f040 81a8 	bne.w	8022858 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8022508:	2e04      	cmp	r6, #4
 802250a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802250c:	463b      	mov	r3, r7
 802250e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8022510:	bf28      	it	cs
 8022512:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022514:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8022516:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022518:	4622      	mov	r2, r4
 802251a:	f7fa f8f5 	bl	801c708 <pbuf_copy_partial>
 802251e:	4284      	cmp	r4, r0
 8022520:	f47f af60 	bne.w	80223e4 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8022524:	2e04      	cmp	r6, #4
 8022526:	f240 819a 	bls.w	802285e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802252a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 802252e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8022532:	f040 81a3 	bne.w	802287c <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8022536:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022538:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802253a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 802253c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022540:	f7f8 f806 	bl	801a550 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8022544:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8022546:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022548:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 802254c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 802254e:	429f      	cmp	r7, r3
            goto decode_next;
 8022550:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8022552:	f63f af47 	bhi.w	80223e4 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8022556:	f1b8 0f09 	cmp.w	r8, #9
 802255a:	d9d0      	bls.n	80224fe <dhcp_recv+0x1c6>
 802255c:	4b1f      	ldr	r3, [pc, #124]	; (80225dc <dhcp_recv+0x2a4>)
 802255e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8022562:	491f      	ldr	r1, [pc, #124]	; (80225e0 <dhcp_recv+0x2a8>)
 8022564:	481f      	ldr	r0, [pc, #124]	; (80225e4 <dhcp_recv+0x2ac>)
 8022566:	f004 f8f5 	bl	8026754 <iprintf>
 802256a:	e7c8      	b.n	80224fe <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802256c:	07b2      	lsls	r2, r6, #30
 802256e:	f040 81ae 	bne.w	80228ce <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8022572:	2e08      	cmp	r6, #8
 8022574:	4632      	mov	r2, r6
 8022576:	bf28      	it	cs
 8022578:	2208      	movcs	r2, #8
 802257a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802257c:	42b2      	cmp	r2, r6
 802257e:	f240 8241 	bls.w	8022a04 <dhcp_recv+0x6cc>
 8022582:	4b16      	ldr	r3, [pc, #88]	; (80225dc <dhcp_recv+0x2a4>)
 8022584:	f240 623c 	movw	r2, #1596	; 0x63c
 8022588:	4917      	ldr	r1, [pc, #92]	; (80225e8 <dhcp_recv+0x2b0>)
 802258a:	4816      	ldr	r0, [pc, #88]	; (80225e4 <dhcp_recv+0x2ac>)
 802258c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022590:	f004 f8e0 	bl	8026754 <iprintf>
 8022594:	e728      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022596:	2e03      	cmp	r6, #3
 8022598:	f240 814a 	bls.w	8022830 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 802259c:	4434      	add	r4, r6
 802259e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80225a2:	429c      	cmp	r4, r3
 80225a4:	f73f af1e 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225a8:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80225aa:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 80225ae:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 80225b0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225b2:	e79a      	b.n	80224ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225b4:	2e04      	cmp	r6, #4
 80225b6:	f040 8131 	bne.w	802281c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 80225ba:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80225be:	429c      	cmp	r4, r3
 80225c0:	f73f af10 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225c4:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 80225c6:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 80225ca:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80225cc:	e78d      	b.n	80224ea <dhcp_recv+0x1b2>
 80225ce:	bf00      	nop
 80225d0:	2001f2a8 	.word	0x2001f2a8
 80225d4:	2002e4b8 	.word	0x2002e4b8
 80225d8:	2002e4c4 	.word	0x2002e4c4
 80225dc:	08046c1c 	.word	0x08046c1c
 80225e0:	08046ed4 	.word	0x08046ed4
 80225e4:	0802b44c 	.word	0x0802b44c
 80225e8:	08046e8c 	.word	0x08046e8c
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80225ec:	2e04      	cmp	r6, #4
 80225ee:	f040 80ed 	bne.w	80227cc <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 80225f2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80225f6:	429c      	cmp	r4, r3
 80225f8:	f73f aef4 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80225fc:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80225fe:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8022602:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022604:	e771      	b.n	80224ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022606:	2e04      	cmp	r6, #4
 8022608:	f040 80d6 	bne.w	80227b8 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 802260c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022610:	429c      	cmp	r4, r3
 8022612:	f73f aee7 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022616:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8022618:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802261a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802261c:	e765      	b.n	80224ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802261e:	2e01      	cmp	r6, #1
 8022620:	f040 80e8 	bne.w	80227f4 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8022624:	9b02      	ldr	r3, [sp, #8]
 8022626:	2bf0      	cmp	r3, #240	; 0xf0
 8022628:	f040 8147 	bne.w	80228ba <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 802262c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8022630:	4299      	cmp	r1, r3
 8022632:	f43f aed7 	beq.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022636:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8022638:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 802263c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802263e:	e754      	b.n	80224ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022640:	2e01      	cmp	r6, #1
 8022642:	f040 80cd 	bne.w	80227e0 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8022646:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802264a:	4299      	cmp	r1, r3
 802264c:	f43f aeca 	beq.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022650:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8022652:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8022654:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022656:	e748      	b.n	80224ea <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022658:	2e04      	cmp	r6, #4
 802265a:	f040 80d5 	bne.w	8022808 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 802265e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8022662:	429c      	cmp	r4, r3
 8022664:	f73f aebe 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022668:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802266a:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 802266e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022670:	e73b      	b.n	80224ea <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8022672:	6828      	ldr	r0, [r5, #0]
 8022674:	b310      	cbz	r0, 80226bc <dhcp_recv+0x384>
 8022676:	6840      	ldr	r0, [r0, #4]
 8022678:	7806      	ldrb	r6, [r0, #0]
 802267a:	e6d4      	b.n	8022426 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802267c:	455c      	cmp	r4, fp
 802267e:	f4ff aec1 	bcc.w	8022404 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8022682:	4bb7      	ldr	r3, [pc, #732]	; (8022960 <dhcp_recv+0x628>)
 8022684:	781b      	ldrb	r3, [r3, #0]
 8022686:	b163      	cbz	r3, 80226a2 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022688:	2300      	movs	r3, #0
 802268a:	4ab5      	ldr	r2, [pc, #724]	; (8022960 <dhcp_recv+0x628>)
 802268c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802268e:	4bb5      	ldr	r3, [pc, #724]	; (8022964 <dhcp_recv+0x62c>)
 8022690:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8022692:	2b01      	cmp	r3, #1
 8022694:	f000 8108 	beq.w	80228a8 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8022698:	2b02      	cmp	r3, #2
 802269a:	d006      	beq.n	80226aa <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 802269c:	2b03      	cmp	r3, #3
 802269e:	f000 8101 	beq.w	80228a4 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 80226a2:	9b04      	ldr	r3, [sp, #16]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	f000 811c 	beq.w	80228e2 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 80226aa:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80226ac:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 80226b0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 80226b2:	232c      	movs	r3, #44	; 0x2c
 80226b4:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80226b6:	9b03      	ldr	r3, [sp, #12]
 80226b8:	895b      	ldrh	r3, [r3, #10]
 80226ba:	e682      	b.n	80223c2 <dhcp_recv+0x8a>
    switch (op) {
 80226bc:	1e50      	subs	r0, r2, #1
 80226be:	283a      	cmp	r0, #58	; 0x3a
 80226c0:	f63f aef1 	bhi.w	80224a6 <dhcp_recv+0x16e>
 80226c4:	a601      	add	r6, pc, #4	; (adr r6, 80226cc <dhcp_recv+0x394>)
 80226c6:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 80226ca:	bf00      	nop
 80226cc:	08022845 	.word	0x08022845
 80226d0:	080224a7 	.word	0x080224a7
 80226d4:	08022831 	.word	0x08022831
 80226d8:	080224a7 	.word	0x080224a7
 80226dc:	080224a7 	.word	0x080224a7
 80226e0:	080224a7 	.word	0x080224a7
 80226e4:	080224a7 	.word	0x080224a7
 80226e8:	080224a7 	.word	0x080224a7
 80226ec:	080224a7 	.word	0x080224a7
 80226f0:	080224a7 	.word	0x080224a7
 80226f4:	080224a7 	.word	0x080224a7
 80226f8:	080224a7 	.word	0x080224a7
 80226fc:	080224a7 	.word	0x080224a7
 8022700:	080224a7 	.word	0x080224a7
 8022704:	080224a7 	.word	0x080224a7
 8022708:	080224a7 	.word	0x080224a7
 802270c:	080224a7 	.word	0x080224a7
 8022710:	080224a7 	.word	0x080224a7
 8022714:	080224a7 	.word	0x080224a7
 8022718:	080224a7 	.word	0x080224a7
 802271c:	080224a7 	.word	0x080224a7
 8022720:	080224a7 	.word	0x080224a7
 8022724:	080224a7 	.word	0x080224a7
 8022728:	080224a7 	.word	0x080224a7
 802272c:	080224a7 	.word	0x080224a7
 8022730:	080224a7 	.word	0x080224a7
 8022734:	080224a7 	.word	0x080224a7
 8022738:	080224a7 	.word	0x080224a7
 802273c:	080224a7 	.word	0x080224a7
 8022740:	080224a7 	.word	0x080224a7
 8022744:	080224a7 	.word	0x080224a7
 8022748:	080224a7 	.word	0x080224a7
 802274c:	080224a7 	.word	0x080224a7
 8022750:	080224a7 	.word	0x080224a7
 8022754:	080224a7 	.word	0x080224a7
 8022758:	080224a7 	.word	0x080224a7
 802275c:	080224a7 	.word	0x080224a7
 8022760:	080224a7 	.word	0x080224a7
 8022764:	080224a7 	.word	0x080224a7
 8022768:	080224a7 	.word	0x080224a7
 802276c:	080224a7 	.word	0x080224a7
 8022770:	080224a7 	.word	0x080224a7
 8022774:	080224a7 	.word	0x080224a7
 8022778:	080224a7 	.word	0x080224a7
 802277c:	080224a7 	.word	0x080224a7
 8022780:	080224a7 	.word	0x080224a7
 8022784:	080224a7 	.word	0x080224a7
 8022788:	080224a7 	.word	0x080224a7
 802278c:	080224a7 	.word	0x080224a7
 8022790:	080224a7 	.word	0x080224a7
 8022794:	08022809 	.word	0x08022809
 8022798:	080227f5 	.word	0x080227f5
 802279c:	080227e1 	.word	0x080227e1
 80227a0:	080227cd 	.word	0x080227cd
 80227a4:	080224a7 	.word	0x080224a7
 80227a8:	080224a7 	.word	0x080224a7
 80227ac:	080224a7 	.word	0x080224a7
 80227b0:	080227b9 	.word	0x080227b9
 80227b4:	0802281d 	.word	0x0802281d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227b8:	4b6b      	ldr	r3, [pc, #428]	; (8022968 <dhcp_recv+0x630>)
 80227ba:	f240 625d 	movw	r2, #1629	; 0x65d
 80227be:	496b      	ldr	r1, [pc, #428]	; (802296c <dhcp_recv+0x634>)
 80227c0:	486b      	ldr	r0, [pc, #428]	; (8022970 <dhcp_recv+0x638>)
 80227c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227c6:	f003 ffc5 	bl	8026754 <iprintf>
 80227ca:	e60d      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80227cc:	4b66      	ldr	r3, [pc, #408]	; (8022968 <dhcp_recv+0x630>)
 80227ce:	f240 6259 	movw	r2, #1625	; 0x659
 80227d2:	4966      	ldr	r1, [pc, #408]	; (802296c <dhcp_recv+0x634>)
 80227d4:	4866      	ldr	r0, [pc, #408]	; (8022970 <dhcp_recv+0x638>)
 80227d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227da:	f003 ffbb 	bl	8026754 <iprintf>
 80227de:	e603      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80227e0:	4b61      	ldr	r3, [pc, #388]	; (8022968 <dhcp_recv+0x630>)
 80227e2:	f240 6255 	movw	r2, #1621	; 0x655
 80227e6:	4963      	ldr	r1, [pc, #396]	; (8022974 <dhcp_recv+0x63c>)
 80227e8:	4861      	ldr	r0, [pc, #388]	; (8022970 <dhcp_recv+0x638>)
 80227ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80227ee:	f003 ffb1 	bl	8026754 <iprintf>
 80227f2:	e5f9      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80227f4:	4b5c      	ldr	r3, [pc, #368]	; (8022968 <dhcp_recv+0x630>)
 80227f6:	f240 624f 	movw	r2, #1615	; 0x64f
 80227fa:	495e      	ldr	r1, [pc, #376]	; (8022974 <dhcp_recv+0x63c>)
 80227fc:	485c      	ldr	r0, [pc, #368]	; (8022970 <dhcp_recv+0x638>)
 80227fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022802:	f003 ffa7 	bl	8026754 <iprintf>
 8022806:	e5ef      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022808:	4b57      	ldr	r3, [pc, #348]	; (8022968 <dhcp_recv+0x630>)
 802280a:	f240 6241 	movw	r2, #1601	; 0x641
 802280e:	4957      	ldr	r1, [pc, #348]	; (802296c <dhcp_recv+0x634>)
 8022810:	4857      	ldr	r0, [pc, #348]	; (8022970 <dhcp_recv+0x638>)
 8022812:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022816:	f003 ff9d 	bl	8026754 <iprintf>
 802281a:	e5e5      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802281c:	4b52      	ldr	r3, [pc, #328]	; (8022968 <dhcp_recv+0x630>)
 802281e:	f240 6261 	movw	r2, #1633	; 0x661
 8022822:	4952      	ldr	r1, [pc, #328]	; (802296c <dhcp_recv+0x634>)
 8022824:	4852      	ldr	r0, [pc, #328]	; (8022970 <dhcp_recv+0x638>)
 8022826:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802282a:	f003 ff93 	bl	8026754 <iprintf>
 802282e:	e5db      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022830:	4b4d      	ldr	r3, [pc, #308]	; (8022968 <dhcp_recv+0x630>)
 8022832:	f240 6233 	movw	r2, #1587	; 0x633
 8022836:	4950      	ldr	r1, [pc, #320]	; (8022978 <dhcp_recv+0x640>)
 8022838:	484d      	ldr	r0, [pc, #308]	; (8022970 <dhcp_recv+0x638>)
 802283a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802283e:	f003 ff89 	bl	8026754 <iprintf>
 8022842:	e5d1      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022844:	4b48      	ldr	r3, [pc, #288]	; (8022968 <dhcp_recv+0x630>)
 8022846:	f240 622e 	movw	r2, #1582	; 0x62e
 802284a:	4948      	ldr	r1, [pc, #288]	; (802296c <dhcp_recv+0x634>)
 802284c:	4848      	ldr	r0, [pc, #288]	; (8022970 <dhcp_recv+0x638>)
 802284e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022852:	f003 ff7f 	bl	8026754 <iprintf>
 8022856:	e5c7      	b.n	80223e8 <dhcp_recv+0xb0>
 8022858:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802285a:	896b      	ldrh	r3, [r5, #10]
 802285c:	e628      	b.n	80224b0 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 802285e:	9c05      	ldr	r4, [sp, #20]
 8022860:	d027      	beq.n	80228b2 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8022862:	2e01      	cmp	r6, #1
 8022864:	f040 80bb 	bne.w	80229de <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8022868:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 802286c:	4b3d      	ldr	r3, [pc, #244]	; (8022964 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 802286e:	4a3c      	ldr	r2, [pc, #240]	; (8022960 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8022870:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8022874:	2301      	movs	r3, #1
 8022876:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802287a:	e7ee      	b.n	802285a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802287c:	4b3a      	ldr	r3, [pc, #232]	; (8022968 <dhcp_recv+0x630>)
 802287e:	f240 6281 	movw	r2, #1665	; 0x681
 8022882:	493e      	ldr	r1, [pc, #248]	; (802297c <dhcp_recv+0x644>)
 8022884:	483a      	ldr	r0, [pc, #232]	; (8022970 <dhcp_recv+0x638>)
 8022886:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802288a:	f003 ff63 	bl	8026754 <iprintf>
 802288e:	e5ab      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022890:	4b35      	ldr	r3, [pc, #212]	; (8022968 <dhcp_recv+0x630>)
 8022892:	f240 629d 	movw	r2, #1693	; 0x69d
 8022896:	493a      	ldr	r1, [pc, #232]	; (8022980 <dhcp_recv+0x648>)
 8022898:	4835      	ldr	r0, [pc, #212]	; (8022970 <dhcp_recv+0x638>)
 802289a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802289e:	f003 ff59 	bl	8026754 <iprintf>
 80228a2:	e5a1      	b.n	80223e8 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 80228a4:	2301      	movs	r3, #1
 80228a6:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 80228a8:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80228aa:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80228ae:	9302      	str	r3, [sp, #8]
 80228b0:	e701      	b.n	80226b6 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 80228b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228b4:	f7f7 fe4c 	bl	801a550 <lwip_htonl>
 80228b8:	e7d8      	b.n	802286c <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80228ba:	4b2b      	ldr	r3, [pc, #172]	; (8022968 <dhcp_recv+0x630>)
 80228bc:	f240 6251 	movw	r2, #1617	; 0x651
 80228c0:	4930      	ldr	r1, [pc, #192]	; (8022984 <dhcp_recv+0x64c>)
 80228c2:	482b      	ldr	r0, [pc, #172]	; (8022970 <dhcp_recv+0x638>)
 80228c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228c8:	f003 ff44 	bl	8026754 <iprintf>
 80228cc:	e58c      	b.n	80223e8 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80228ce:	4b26      	ldr	r3, [pc, #152]	; (8022968 <dhcp_recv+0x630>)
 80228d0:	f240 6239 	movw	r2, #1593	; 0x639
 80228d4:	492c      	ldr	r1, [pc, #176]	; (8022988 <dhcp_recv+0x650>)
 80228d6:	4826      	ldr	r0, [pc, #152]	; (8022970 <dhcp_recv+0x638>)
 80228d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228dc:	f003 ff3a 	bl	8026754 <iprintf>
 80228e0:	e582      	b.n	80223e8 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80228e2:	4b1f      	ldr	r3, [pc, #124]	; (8022960 <dhcp_recv+0x628>)
 80228e4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80228e8:	785b      	ldrb	r3, [r3, #1]
 80228ea:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	f43f ad7a 	beq.w	80223e8 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80228f4:	4a1b      	ldr	r2, [pc, #108]	; (8022964 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 80228f6:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80228fa:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80228fc:	2b05      	cmp	r3, #5
 80228fe:	d01d      	beq.n	802293c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8022900:	2b06      	cmp	r3, #6
 8022902:	d043      	beq.n	802298c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8022904:	2b02      	cmp	r3, #2
 8022906:	f47f ad6f 	bne.w	80223e8 <dhcp_recv+0xb0>
 802290a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802290e:	2b06      	cmp	r3, #6
 8022910:	f47f ad6a 	bne.w	80223e8 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8022914:	4b12      	ldr	r3, [pc, #72]	; (8022960 <dhcp_recv+0x628>)
 8022916:	789b      	ldrb	r3, [r3, #2]
 8022918:	2b00      	cmp	r3, #0
 802291a:	f43f ad65 	beq.w	80223e8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802291e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8022922:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022924:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8022926:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022928:	f7f7 fe12 	bl	801a550 <lwip_htonl>
 802292c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802292e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022930:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8022932:	6923      	ldr	r3, [r4, #16]
 8022934:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8022936:	f7ff fbbf 	bl	80220b8 <dhcp_select.isra.0>
 802293a:	e555      	b.n	80223e8 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802293c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022940:	2b01      	cmp	r3, #1
 8022942:	d03f      	beq.n	80229c4 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022944:	3b03      	subs	r3, #3
 8022946:	2b02      	cmp	r3, #2
 8022948:	f63f ad4e 	bhi.w	80223e8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 802294c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8022950:	4621      	mov	r1, r4
 8022952:	f7ff f8c1 	bl	8021ad8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8022956:	4650      	mov	r0, sl
 8022958:	f7fe ffb2 	bl	80218c0 <dhcp_bind>
 802295c:	e544      	b.n	80223e8 <dhcp_recv+0xb0>
 802295e:	bf00      	nop
 8022960:	2002e4b8 	.word	0x2002e4b8
 8022964:	2002e4c4 	.word	0x2002e4c4
 8022968:	08046c1c 	.word	0x08046c1c
 802296c:	08046e80 	.word	0x08046e80
 8022970:	0802b44c 	.word	0x0802b44c
 8022974:	08046eb0 	.word	0x08046eb0
 8022978:	08046e8c 	.word	0x08046e8c
 802297c:	08046ee8 	.word	0x08046ee8
 8022980:	08046f14 	.word	0x08046f14
 8022984:	08046ebc 	.word	0x08046ebc
 8022988:	08046ea0 	.word	0x08046ea0
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802298c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8022990:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022992:	2a02      	cmp	r2, #2
 8022994:	d902      	bls.n	802299c <dhcp_recv+0x664>
 8022996:	2b01      	cmp	r3, #1
 8022998:	f47f ad26 	bne.w	80223e8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802299c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 80229a0:	795a      	ldrb	r2, [r3, #5]
 80229a2:	2a0c      	cmp	r2, #12
 80229a4:	d004      	beq.n	80229b0 <dhcp_recv+0x678>
    dhcp->tries = 0;
 80229a6:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80229a8:	210c      	movs	r1, #12
    dhcp->tries = 0;
 80229aa:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 80229ac:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 80229ae:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80229b0:	4b1c      	ldr	r3, [pc, #112]	; (8022a24 <dhcp_recv+0x6ec>)
 80229b2:	4650      	mov	r0, sl
 80229b4:	461a      	mov	r2, r3
 80229b6:	4619      	mov	r1, r3
 80229b8:	f7f9 f968 	bl	801bc8c <netif_set_addr>
  dhcp_discover(netif);
 80229bc:	4650      	mov	r0, sl
 80229be:	f7ff fa95 	bl	8021eec <dhcp_discover>
}
 80229c2:	e511      	b.n	80223e8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80229c4:	4621      	mov	r1, r4
 80229c6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80229ca:	f7ff f885 	bl	8021ad8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80229ce:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 80229d2:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80229d4:	0719      	lsls	r1, r3, #28
 80229d6:	d5bf      	bpl.n	8022958 <dhcp_recv+0x620>
        dhcp_check(netif);
 80229d8:	f7fe ff5a 	bl	8021890 <dhcp_check>
 80229dc:	e504      	b.n	80223e8 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80229de:	4b12      	ldr	r3, [pc, #72]	; (8022a28 <dhcp_recv+0x6f0>)
 80229e0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80229e4:	4911      	ldr	r1, [pc, #68]	; (8022a2c <dhcp_recv+0x6f4>)
 80229e6:	4812      	ldr	r0, [pc, #72]	; (8022a30 <dhcp_recv+0x6f8>)
 80229e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80229ec:	f003 feb2 	bl	8026754 <iprintf>
 80229f0:	e4fa      	b.n	80223e8 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 80229f2:	4434      	add	r4, r6
 80229f4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80229f8:	4294      	cmp	r4, r2
 80229fa:	f73f acf3 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80229fe:	19bc      	adds	r4, r7, r6
 8022a00:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022a02:	e555      	b.n	80224b0 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8022a04:	4434      	add	r4, r6
 8022a06:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8022a0a:	428c      	cmp	r4, r1
 8022a0c:	f73f acea 	bgt.w	80223e4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8022a10:	19bc      	adds	r4, r7, r6
 8022a12:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8022a14:	2e00      	cmp	r6, #0
 8022a16:	f43f ad4b 	beq.w	80224b0 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8022a1a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8022a1c:	f04f 0808 	mov.w	r8, #8
 8022a20:	e563      	b.n	80224ea <dhcp_recv+0x1b2>
 8022a22:	bf00      	nop
 8022a24:	080472d0 	.word	0x080472d0
 8022a28:	08046c1c 	.word	0x08046c1c
 8022a2c:	08046f00 	.word	0x08046f00
 8022a30:	0802b44c 	.word	0x0802b44c

08022a34 <dhcp_network_changed>:
{
 8022a34:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022a36:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8022a38:	b135      	cbz	r5, 8022a48 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 8022a3a:	796b      	ldrb	r3, [r5, #5]
 8022a3c:	4604      	mov	r4, r0
 8022a3e:	2b05      	cmp	r3, #5
 8022a40:	d803      	bhi.n	8022a4a <dhcp_network_changed+0x16>
 8022a42:	2b02      	cmp	r3, #2
 8022a44:	d813      	bhi.n	8022a6e <dhcp_network_changed+0x3a>
 8022a46:	b95b      	cbnz	r3, 8022a60 <dhcp_network_changed+0x2c>
}
 8022a48:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 8022a4a:	2b0a      	cmp	r3, #10
 8022a4c:	d00f      	beq.n	8022a6e <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8022a4e:	2b0c      	cmp	r3, #12
 8022a50:	d906      	bls.n	8022a60 <dhcp_network_changed+0x2c>
 8022a52:	4b0a      	ldr	r3, [pc, #40]	; (8022a7c <dhcp_network_changed+0x48>)
 8022a54:	f240 326d 	movw	r2, #877	; 0x36d
 8022a58:	4909      	ldr	r1, [pc, #36]	; (8022a80 <dhcp_network_changed+0x4c>)
 8022a5a:	480a      	ldr	r0, [pc, #40]	; (8022a84 <dhcp_network_changed+0x50>)
 8022a5c:	f003 fe7a 	bl	8026754 <iprintf>
      dhcp->tries = 0;
 8022a60:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8022a62:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022a64:	71ab      	strb	r3, [r5, #6]
}
 8022a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8022a6a:	f7ff ba3f 	b.w	8021eec <dhcp_discover>
      dhcp->tries = 0;
 8022a6e:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8022a70:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8022a72:	71ab      	strb	r3, [r5, #6]
}
 8022a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8022a78:	f7ff b938 	b.w	8021cec <dhcp_reboot.isra.0>
 8022a7c:	08046c1c 	.word	0x08046c1c
 8022a80:	08046f5c 	.word	0x08046f5c
 8022a84:	0802b44c 	.word	0x0802b44c

08022a88 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022a88:	2800      	cmp	r0, #0
 8022a8a:	d066      	beq.n	8022b5a <dhcp_arp_reply+0xd2>
{
 8022a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8022a90:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8022a92:	b085      	sub	sp, #20
 8022a94:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8022a96:	b115      	cbz	r5, 8022a9e <dhcp_arp_reply+0x16>
 8022a98:	796b      	ldrb	r3, [r5, #5]
 8022a9a:	2b08      	cmp	r3, #8
 8022a9c:	d002      	beq.n	8022aa4 <dhcp_arp_reply+0x1c>
}
 8022a9e:	b005      	add	sp, #20
 8022aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8022aa4:	680a      	ldr	r2, [r1, #0]
 8022aa6:	69eb      	ldr	r3, [r5, #28]
 8022aa8:	429a      	cmp	r2, r3
 8022aaa:	d1f8      	bne.n	8022a9e <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 8022aac:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8022aae:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022ab0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8022ab2:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8022ab4:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022ab6:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 8022aba:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022abc:	2204      	movs	r2, #4
 8022abe:	f7ff f863 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 8022ac2:	4606      	mov	r6, r0
 8022ac4:	2800      	cmp	r0, #0
 8022ac6:	d040      	beq.n	8022b4a <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022ac8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8022acc:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022ace:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022ad2:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022ad4:	2b44      	cmp	r3, #68	; 0x44
 8022ad6:	d847      	bhi.n	8022b68 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8022ad8:	2232      	movs	r2, #50	; 0x32
 8022ada:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 8022ade:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8022ae2:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8022ae6:	b29b      	uxth	r3, r3
 8022ae8:	2204      	movs	r2, #4
 8022aea:	fa1f f888 	uxth.w	r8, r8
 8022aee:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022af0:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022af2:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022af6:	f7f7 fd2b 	bl	801a550 <lwip_htonl>
 8022afa:	4639      	mov	r1, r7
 8022afc:	4602      	mov	r2, r0
 8022afe:	4640      	mov	r0, r8
 8022b00:	f7fe fea2 	bl	8021848 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022b04:	1c41      	adds	r1, r0, #1
 8022b06:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022b08:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8022b0c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022b0e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022b10:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022b12:	2943      	cmp	r1, #67	; 0x43
 8022b14:	d807      	bhi.n	8022b26 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8022b16:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022b1a:	1878      	adds	r0, r7, r1
 8022b1c:	2100      	movs	r1, #0
 8022b1e:	b292      	uxth	r2, r2
 8022b20:	f002 fe7a 	bl	8025818 <memset>
 8022b24:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022b26:	31f0      	adds	r1, #240	; 0xf0
 8022b28:	4630      	mov	r0, r6
 8022b2a:	b289      	uxth	r1, r1
 8022b2c:	f7f9 fc30 	bl	801c390 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022b30:	4911      	ldr	r1, [pc, #68]	; (8022b78 <dhcp_arp_reply+0xf0>)
 8022b32:	4a12      	ldr	r2, [pc, #72]	; (8022b7c <dhcp_arp_reply+0xf4>)
 8022b34:	2343      	movs	r3, #67	; 0x43
 8022b36:	9400      	str	r4, [sp, #0]
 8022b38:	6808      	ldr	r0, [r1, #0]
 8022b3a:	4631      	mov	r1, r6
 8022b3c:	9201      	str	r2, [sp, #4]
 8022b3e:	4a10      	ldr	r2, [pc, #64]	; (8022b80 <dhcp_arp_reply+0xf8>)
 8022b40:	f7fe fc6c 	bl	802141c <udp_sendto_if_src>
    pbuf_free(p_out);
 8022b44:	4630      	mov	r0, r6
 8022b46:	f7f9 fd3b 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022b4a:	79ab      	ldrb	r3, [r5, #6]
 8022b4c:	2bff      	cmp	r3, #255	; 0xff
 8022b4e:	d001      	beq.n	8022b54 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8022b50:	3301      	adds	r3, #1
 8022b52:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022b54:	2314      	movs	r3, #20
 8022b56:	812b      	strh	r3, [r5, #8]
  return result;
 8022b58:	e7a1      	b.n	8022a9e <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022b5a:	4b0a      	ldr	r3, [pc, #40]	; (8022b84 <dhcp_arp_reply+0xfc>)
 8022b5c:	f240 328b 	movw	r2, #907	; 0x38b
 8022b60:	4909      	ldr	r1, [pc, #36]	; (8022b88 <dhcp_arp_reply+0x100>)
 8022b62:	480a      	ldr	r0, [pc, #40]	; (8022b8c <dhcp_arp_reply+0x104>)
 8022b64:	f003 bdf6 	b.w	8026754 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022b68:	4b06      	ldr	r3, [pc, #24]	; (8022b84 <dhcp_arp_reply+0xfc>)
 8022b6a:	f240 529a 	movw	r2, #1434	; 0x59a
 8022b6e:	4908      	ldr	r1, [pc, #32]	; (8022b90 <dhcp_arp_reply+0x108>)
 8022b70:	4806      	ldr	r0, [pc, #24]	; (8022b8c <dhcp_arp_reply+0x104>)
 8022b72:	f003 fdef 	bl	8026754 <iprintf>
 8022b76:	e7af      	b.n	8022ad8 <dhcp_arp_reply+0x50>
 8022b78:	2002e4b0 	.word	0x2002e4b0
 8022b7c:	080472d0 	.word	0x080472d0
 8022b80:	080472d4 	.word	0x080472d4
 8022b84:	08046c1c 	.word	0x08046c1c
 8022b88:	0802e6ac 	.word	0x0802e6ac
 8022b8c:	0802b44c 	.word	0x0802b44c
 8022b90:	08046d90 	.word	0x08046d90

08022b94 <dhcp_renew>:
{
 8022b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022b98:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8022b9a:	b087      	sub	sp, #28
 8022b9c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8022b9e:	797b      	ldrb	r3, [r7, #5]
 8022ba0:	2b05      	cmp	r3, #5
 8022ba2:	d004      	beq.n	8022bae <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8022ba4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8022ba6:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8022ba8:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 8022baa:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 8022bac:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022bae:	f10d 0316 	add.w	r3, sp, #22
 8022bb2:	2203      	movs	r2, #3
 8022bb4:	4639      	mov	r1, r7
 8022bb6:	4658      	mov	r0, fp
 8022bb8:	f7fe ffe6 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 8022bbc:	4605      	mov	r5, r0
 8022bbe:	2800      	cmp	r0, #0
 8022bc0:	f000 80b9 	beq.w	8022d36 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bc4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022bc8:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bca:	f104 0804 	add.w	r8, r4, #4
 8022bce:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bd2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022bd4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8022bd8:	f200 8095 	bhi.w	8022d06 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 8022bdc:	2239      	movs	r2, #57	; 0x39
 8022bde:	1c63      	adds	r3, r4, #1
 8022be0:	fa1f f189 	uxth.w	r1, r9
 8022be4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8022be6:	b29b      	uxth	r3, r3
 8022be8:	2202      	movs	r2, #2
 8022bea:	9103      	str	r1, [sp, #12]
 8022bec:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bee:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022bf0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bf4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022bf6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022bfa:	f200 8094 	bhi.w	8022d26 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022bfe:	1ce3      	adds	r3, r4, #3
 8022c00:	fa1f f988 	uxth.w	r9, r8
 8022c04:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022c08:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022c0a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8022c0c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022c0e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c12:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022c16:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022c1a:	2b44      	cmp	r3, #68	; 0x44
 8022c1c:	d87b      	bhi.n	8022d16 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 8022c1e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8022c22:	2237      	movs	r2, #55	; 0x37
 8022c24:	1d63      	adds	r3, r4, #5
 8022c26:	f8df a134 	ldr.w	sl, [pc, #308]	; 8022d5c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 8022c2a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8022c2e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8022c32:	b29b      	uxth	r3, r3
 8022c34:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c36:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c3a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8022c3e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c40:	493e      	ldr	r1, [pc, #248]	; (8022d3c <dhcp_renew+0x1a8>)
 8022c42:	4b3f      	ldr	r3, [pc, #252]	; (8022d40 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c44:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c48:	d80f      	bhi.n	8022c6a <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 8022c4a:	f108 0201 	add.w	r2, r8, #1
 8022c4e:	f806 9008 	strb.w	r9, [r6, r8]
 8022c52:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c56:	4a3b      	ldr	r2, [pc, #236]	; (8022d44 <dhcp_renew+0x1b0>)
 8022c58:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c5a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c5e:	d00c      	beq.n	8022c7a <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c60:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c64:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8022c68:	d9ef      	bls.n	8022c4a <dhcp_renew+0xb6>
 8022c6a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022c6e:	4836      	ldr	r0, [pc, #216]	; (8022d48 <dhcp_renew+0x1b4>)
 8022c70:	f003 fd70 	bl	8026754 <iprintf>
 8022c74:	4b32      	ldr	r3, [pc, #200]	; (8022d40 <dhcp_renew+0x1ac>)
 8022c76:	4931      	ldr	r1, [pc, #196]	; (8022d3c <dhcp_renew+0x1a8>)
 8022c78:	e7e7      	b.n	8022c4a <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 8022c7a:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8022c7e:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8022c82:	22ff      	movs	r2, #255	; 0xff
 8022c84:	b280      	uxth	r0, r0
 8022c86:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c88:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8022c8a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022c8c:	d808      	bhi.n	8022ca0 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 8022c8e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8022c92:	4430      	add	r0, r6
 8022c94:	2100      	movs	r1, #0
 8022c96:	b2a4      	uxth	r4, r4
 8022c98:	1c62      	adds	r2, r4, #1
 8022c9a:	f002 fdbd 	bl	8025818 <memset>
 8022c9e:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022ca0:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8022ca4:	4628      	mov	r0, r5
 8022ca6:	b289      	uxth	r1, r1
 8022ca8:	f7f9 fb72 	bl	801c390 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022cac:	4827      	ldr	r0, [pc, #156]	; (8022d4c <dhcp_renew+0x1b8>)
 8022cae:	2343      	movs	r3, #67	; 0x43
 8022cb0:	f107 0218 	add.w	r2, r7, #24
 8022cb4:	6800      	ldr	r0, [r0, #0]
 8022cb6:	4629      	mov	r1, r5
 8022cb8:	f8cd b000 	str.w	fp, [sp]
 8022cbc:	f7fe fc62 	bl	8021584 <udp_sendto_if>
 8022cc0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8022cc2:	4628      	mov	r0, r5
 8022cc4:	f7f9 fc7c 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 8022cc8:	79bb      	ldrb	r3, [r7, #6]
 8022cca:	2bff      	cmp	r3, #255	; 0xff
 8022ccc:	d015      	beq.n	8022cfa <dhcp_renew+0x166>
    dhcp->tries++;
 8022cce:	3301      	adds	r3, #1
 8022cd0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cd2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8022cd4:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cd6:	d810      	bhi.n	8022cfa <dhcp_renew+0x166>
 8022cd8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022cdc:	4a1c      	ldr	r2, [pc, #112]	; (8022d50 <dhcp_renew+0x1bc>)
}
 8022cde:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022ce0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022ce4:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022ce6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022cea:	b29b      	uxth	r3, r3
 8022cec:	fba2 2303 	umull	r2, r3, r2, r3
 8022cf0:	095b      	lsrs	r3, r3, #5
 8022cf2:	813b      	strh	r3, [r7, #8]
}
 8022cf4:	b007      	add	sp, #28
 8022cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 8022cfa:	2328      	movs	r3, #40	; 0x28
}
 8022cfc:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022cfe:	813b      	strh	r3, [r7, #8]
}
 8022d00:	b007      	add	sp, #28
 8022d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022d06:	4b0e      	ldr	r3, [pc, #56]	; (8022d40 <dhcp_renew+0x1ac>)
 8022d08:	f240 529a 	movw	r2, #1434	; 0x59a
 8022d0c:	4911      	ldr	r1, [pc, #68]	; (8022d54 <dhcp_renew+0x1c0>)
 8022d0e:	480e      	ldr	r0, [pc, #56]	; (8022d48 <dhcp_renew+0x1b4>)
 8022d10:	f003 fd20 	bl	8026754 <iprintf>
 8022d14:	e762      	b.n	8022bdc <dhcp_renew+0x48>
 8022d16:	4b0a      	ldr	r3, [pc, #40]	; (8022d40 <dhcp_renew+0x1ac>)
 8022d18:	f240 529a 	movw	r2, #1434	; 0x59a
 8022d1c:	490d      	ldr	r1, [pc, #52]	; (8022d54 <dhcp_renew+0x1c0>)
 8022d1e:	480a      	ldr	r0, [pc, #40]	; (8022d48 <dhcp_renew+0x1b4>)
 8022d20:	f003 fd18 	bl	8026754 <iprintf>
 8022d24:	e77b      	b.n	8022c1e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022d26:	4b06      	ldr	r3, [pc, #24]	; (8022d40 <dhcp_renew+0x1ac>)
 8022d28:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022d2c:	490a      	ldr	r1, [pc, #40]	; (8022d58 <dhcp_renew+0x1c4>)
 8022d2e:	4806      	ldr	r0, [pc, #24]	; (8022d48 <dhcp_renew+0x1b4>)
 8022d30:	f003 fd10 	bl	8026754 <iprintf>
 8022d34:	e763      	b.n	8022bfe <dhcp_renew+0x6a>
    result = ERR_MEM;
 8022d36:	f04f 34ff 	mov.w	r4, #4294967295
 8022d3a:	e7c5      	b.n	8022cc8 <dhcp_renew+0x134>
 8022d3c:	08046e10 	.word	0x08046e10
 8022d40:	08046c1c 	.word	0x08046c1c
 8022d44:	08046f98 	.word	0x08046f98
 8022d48:	0802b44c 	.word	0x0802b44c
 8022d4c:	2002e4b0 	.word	0x2002e4b0
 8022d50:	10624dd3 	.word	0x10624dd3
 8022d54:	08046d90 	.word	0x08046d90
 8022d58:	08046dd4 	.word	0x08046dd4
 8022d5c:	08046f95 	.word	0x08046f95

08022d60 <dhcp_release_and_stop>:
{
 8022d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022d64:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8022d66:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8022d68:	2c00      	cmp	r4, #0
 8022d6a:	d06c      	beq.n	8022e46 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 8022d6c:	7962      	ldrb	r2, [r4, #5]
 8022d6e:	2a00      	cmp	r2, #0
 8022d70:	d069      	beq.n	8022e46 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022d72:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022d74:	2300      	movs	r3, #0
 8022d76:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022d78:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d7a:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8022d7c:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d7e:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022d80:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d82:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8022d84:	81e3      	strh	r3, [r4, #14]
 8022d86:	6123      	str	r3, [r4, #16]
 8022d88:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022d8a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022d8e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022d92:	d901      	bls.n	8022d98 <dhcp_release_and_stop+0x38>
 8022d94:	2a0a      	cmp	r2, #10
 8022d96:	d148      	bne.n	8022e2a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8022d98:	f10d 030a 	add.w	r3, sp, #10
 8022d9c:	2207      	movs	r2, #7
 8022d9e:	4621      	mov	r1, r4
 8022da0:	4628      	mov	r0, r5
 8022da2:	f7fe fef1 	bl	8021b88 <dhcp_create_msg>
    if (p_out != NULL) {
 8022da6:	4606      	mov	r6, r0
 8022da8:	2800      	cmp	r0, #0
 8022daa:	d03e      	beq.n	8022e2a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022dac:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8022db0:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022db2:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022db6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022db8:	2b44      	cmp	r3, #68	; 0x44
 8022dba:	d84e      	bhi.n	8022e5a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 8022dbc:	f108 0301 	add.w	r3, r8, #1
 8022dc0:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8022dc2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8022dc4:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8022dc8:	2204      	movs	r2, #4
 8022dca:	f108 0802 	add.w	r8, r8, #2
 8022dce:	54fa      	strb	r2, [r7, r3]
 8022dd0:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022dd4:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8022dd6:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022dda:	f7f7 fbb9 	bl	801a550 <lwip_htonl>
 8022dde:	4639      	mov	r1, r7
 8022de0:	4602      	mov	r2, r0
 8022de2:	4640      	mov	r0, r8
 8022de4:	f7fe fd30 	bl	8021848 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8022de8:	1c43      	adds	r3, r0, #1
 8022dea:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022dec:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8022df0:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8022df2:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8022df4:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8022df6:	2b43      	cmp	r3, #67	; 0x43
 8022df8:	d807      	bhi.n	8022e0a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8022dfa:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8022dfe:	18f8      	adds	r0, r7, r3
 8022e00:	2100      	movs	r1, #0
 8022e02:	b292      	uxth	r2, r2
 8022e04:	f002 fd08 	bl	8025818 <memset>
 8022e08:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8022e0a:	33f0      	adds	r3, #240	; 0xf0
 8022e0c:	4630      	mov	r0, r6
 8022e0e:	b299      	uxth	r1, r3
 8022e10:	f7f9 fabe 	bl	801c390 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022e14:	4a15      	ldr	r2, [pc, #84]	; (8022e6c <dhcp_release_and_stop+0x10c>)
 8022e16:	9500      	str	r5, [sp, #0]
 8022e18:	2343      	movs	r3, #67	; 0x43
 8022e1a:	6810      	ldr	r0, [r2, #0]
 8022e1c:	4631      	mov	r1, r6
 8022e1e:	aa03      	add	r2, sp, #12
 8022e20:	f7fe fbb0 	bl	8021584 <udp_sendto_if>
      pbuf_free(p_out);
 8022e24:	4630      	mov	r0, r6
 8022e26:	f7f9 fbcb 	bl	801c5c0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022e2a:	4b11      	ldr	r3, [pc, #68]	; (8022e70 <dhcp_release_and_stop+0x110>)
 8022e2c:	4628      	mov	r0, r5
 8022e2e:	461a      	mov	r2, r3
 8022e30:	4619      	mov	r1, r3
 8022e32:	f7f8 ff2b 	bl	801bc8c <netif_set_addr>
  if (new_state != dhcp->state) {
 8022e36:	7963      	ldrb	r3, [r4, #5]
 8022e38:	b11b      	cbz	r3, 8022e42 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8022e3e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8022e40:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8022e42:	7923      	ldrb	r3, [r4, #4]
 8022e44:	b913      	cbnz	r3, 8022e4c <dhcp_release_and_stop+0xec>
}
 8022e46:	b004      	add	sp, #16
 8022e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022e4c:	f7fe fe22 	bl	8021a94 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8022e50:	2300      	movs	r3, #0
 8022e52:	7123      	strb	r3, [r4, #4]
}
 8022e54:	b004      	add	sp, #16
 8022e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022e5a:	4b06      	ldr	r3, [pc, #24]	; (8022e74 <dhcp_release_and_stop+0x114>)
 8022e5c:	f240 529a 	movw	r2, #1434	; 0x59a
 8022e60:	4905      	ldr	r1, [pc, #20]	; (8022e78 <dhcp_release_and_stop+0x118>)
 8022e62:	4806      	ldr	r0, [pc, #24]	; (8022e7c <dhcp_release_and_stop+0x11c>)
 8022e64:	f003 fc76 	bl	8026754 <iprintf>
 8022e68:	e7a8      	b.n	8022dbc <dhcp_release_and_stop+0x5c>
 8022e6a:	bf00      	nop
 8022e6c:	2002e4b0 	.word	0x2002e4b0
 8022e70:	080472d0 	.word	0x080472d0
 8022e74:	08046c1c 	.word	0x08046c1c
 8022e78:	08046d90 	.word	0x08046d90
 8022e7c:	0802b44c 	.word	0x0802b44c

08022e80 <dhcp_start>:
{
 8022e80:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022e82:	2800      	cmp	r0, #0
 8022e84:	d046      	beq.n	8022f14 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022e86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8022e8a:	4604      	mov	r4, r0
 8022e8c:	07da      	lsls	r2, r3, #31
 8022e8e:	d537      	bpl.n	8022f00 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e90:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8022e92:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e94:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8022e98:	d32f      	bcc.n	8022efa <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8022e9a:	b33d      	cbz	r5, 8022eec <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8022e9c:	792b      	ldrb	r3, [r5, #4]
 8022e9e:	bb13      	cbnz	r3, 8022ee6 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8022ea0:	2234      	movs	r2, #52	; 0x34
 8022ea2:	2100      	movs	r1, #0
 8022ea4:	4628      	mov	r0, r5
 8022ea6:	f002 fcb7 	bl	8025818 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8022eaa:	f7fe fdb9 	bl	8021a20 <dhcp_inc_pcb_refcount>
 8022eae:	4606      	mov	r6, r0
 8022eb0:	bb18      	cbnz	r0, 8022efa <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8022eb2:	2301      	movs	r3, #1
 8022eb4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8022eb6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8022eba:	075b      	lsls	r3, r3, #29
 8022ebc:	d408      	bmi.n	8022ed0 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8022ebe:	796b      	ldrb	r3, [r5, #5]
 8022ec0:	2b02      	cmp	r3, #2
 8022ec2:	d003      	beq.n	8022ecc <dhcp_start+0x4c>
    dhcp->state = new_state;
 8022ec4:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8022ec6:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8022ec8:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8022eca:	716b      	strb	r3, [r5, #5]
}
 8022ecc:	4630      	mov	r0, r6
 8022ece:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8022ed0:	4620      	mov	r0, r4
 8022ed2:	f7ff f80b 	bl	8021eec <dhcp_discover>
  if (result != ERR_OK) {
 8022ed6:	2800      	cmp	r0, #0
 8022ed8:	d0f8      	beq.n	8022ecc <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8022eda:	4620      	mov	r0, r4
    return ERR_MEM;
 8022edc:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8022ee0:	f7ff ff3e 	bl	8022d60 <dhcp_release_and_stop>
    return ERR_MEM;
 8022ee4:	e7f2      	b.n	8022ecc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022ee6:	f7fe fdd5 	bl	8021a94 <dhcp_dec_pcb_refcount>
 8022eea:	e7d9      	b.n	8022ea0 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022eec:	2034      	movs	r0, #52	; 0x34
 8022eee:	f7f8 fc77 	bl	801b7e0 <mem_malloc>
    if (dhcp == NULL) {
 8022ef2:	4605      	mov	r5, r0
 8022ef4:	b108      	cbz	r0, 8022efa <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8022ef6:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8022ef8:	e7d2      	b.n	8022ea0 <dhcp_start+0x20>
    return ERR_MEM;
 8022efa:	f04f 36ff 	mov.w	r6, #4294967295
 8022efe:	e7e5      	b.n	8022ecc <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022f00:	4b09      	ldr	r3, [pc, #36]	; (8022f28 <dhcp_start+0xa8>)
 8022f02:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8022f06:	4909      	ldr	r1, [pc, #36]	; (8022f2c <dhcp_start+0xac>)
 8022f08:	f06f 060f 	mvn.w	r6, #15
 8022f0c:	4808      	ldr	r0, [pc, #32]	; (8022f30 <dhcp_start+0xb0>)
 8022f0e:	f003 fc21 	bl	8026754 <iprintf>
 8022f12:	e7db      	b.n	8022ecc <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022f14:	4b04      	ldr	r3, [pc, #16]	; (8022f28 <dhcp_start+0xa8>)
 8022f16:	f240 22e7 	movw	r2, #743	; 0x2e7
 8022f1a:	4906      	ldr	r1, [pc, #24]	; (8022f34 <dhcp_start+0xb4>)
 8022f1c:	f06f 060f 	mvn.w	r6, #15
 8022f20:	4803      	ldr	r0, [pc, #12]	; (8022f30 <dhcp_start+0xb0>)
 8022f22:	f003 fc17 	bl	8026754 <iprintf>
 8022f26:	e7d1      	b.n	8022ecc <dhcp_start+0x4c>
 8022f28:	08046c1c 	.word	0x08046c1c
 8022f2c:	08046f70 	.word	0x08046f70
 8022f30:	0802b44c 	.word	0x0802b44c
 8022f34:	0802e6ac 	.word	0x0802e6ac

08022f38 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8022f38:	4b8a      	ldr	r3, [pc, #552]	; (8023164 <dhcp_coarse_tmr+0x22c>)
{
 8022f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8022f3e:	681d      	ldr	r5, [r3, #0]
{
 8022f40:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8022f42:	b1dd      	cbz	r5, 8022f7c <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022f44:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022f46:	b1b4      	cbz	r4, 8022f76 <dhcp_coarse_tmr+0x3e>
 8022f48:	7963      	ldrb	r3, [r4, #5]
 8022f4a:	b1a3      	cbz	r3, 8022f76 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8022f4c:	8aa1      	ldrh	r1, [r4, #20]
 8022f4e:	b129      	cbz	r1, 8022f5c <dhcp_coarse_tmr+0x24>
 8022f50:	8a62      	ldrh	r2, [r4, #18]
 8022f52:	3201      	adds	r2, #1
 8022f54:	b292      	uxth	r2, r2
 8022f56:	4291      	cmp	r1, r2
 8022f58:	8262      	strh	r2, [r4, #18]
 8022f5a:	d012      	beq.n	8022f82 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8022f5c:	8a22      	ldrh	r2, [r4, #16]
 8022f5e:	b11a      	cbz	r2, 8022f68 <dhcp_coarse_tmr+0x30>
 8022f60:	1e51      	subs	r1, r2, #1
 8022f62:	2a01      	cmp	r2, #1
 8022f64:	8221      	strh	r1, [r4, #16]
 8022f66:	d013      	beq.n	8022f90 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8022f68:	89e2      	ldrh	r2, [r4, #14]
 8022f6a:	b122      	cbz	r2, 8022f76 <dhcp_coarse_tmr+0x3e>
 8022f6c:	1e51      	subs	r1, r2, #1
 8022f6e:	2a01      	cmp	r2, #1
 8022f70:	81e1      	strh	r1, [r4, #14]
 8022f72:	f000 8087 	beq.w	8023084 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8022f76:	682d      	ldr	r5, [r5, #0]
 8022f78:	2d00      	cmp	r5, #0
 8022f7a:	d1e3      	bne.n	8022f44 <dhcp_coarse_tmr+0xc>
}
 8022f7c:	b007      	add	sp, #28
 8022f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8022f82:	4628      	mov	r0, r5
 8022f84:	f7ff feec 	bl	8022d60 <dhcp_release_and_stop>
        dhcp_start(netif);
 8022f88:	4628      	mov	r0, r5
 8022f8a:	f7ff ff79 	bl	8022e80 <dhcp_start>
 8022f8e:	e7f2      	b.n	8022f76 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022f90:	1e5a      	subs	r2, r3, #1
 8022f92:	b2d1      	uxtb	r1, r2
 8022f94:	2909      	cmp	r1, #9
 8022f96:	d8ee      	bhi.n	8022f76 <dhcp_coarse_tmr+0x3e>
 8022f98:	f240 2219 	movw	r2, #537	; 0x219
 8022f9c:	40ca      	lsrs	r2, r1
 8022f9e:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022fa0:	f012 0201 	ands.w	r2, r2, #1
 8022fa4:	d1e7      	bne.n	8022f76 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8022fa6:	2b04      	cmp	r3, #4
 8022fa8:	d003      	beq.n	8022fb2 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8022faa:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8022fac:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8022fae:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8022fb0:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022fb2:	f10d 0316 	add.w	r3, sp, #22
 8022fb6:	2203      	movs	r2, #3
 8022fb8:	4621      	mov	r1, r4
 8022fba:	4628      	mov	r0, r5
 8022fbc:	f7fe fde4 	bl	8021b88 <dhcp_create_msg>
  if (p_out != NULL) {
 8022fc0:	4607      	mov	r7, r0
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	f000 8096 	beq.w	80230f4 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022fc8:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8022fcc:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022fce:	f106 0904 	add.w	r9, r6, #4
 8022fd2:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022fd6:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8022fda:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8022fde:	f200 80b9 	bhi.w	8023154 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8022fe2:	2239      	movs	r2, #57	; 0x39
 8022fe4:	1c73      	adds	r3, r6, #1
 8022fe6:	fa1f fb8a 	uxth.w	fp, sl
 8022fea:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8022fee:	b29b      	uxth	r3, r3
 8022ff0:	2202      	movs	r2, #2
 8022ff2:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022ff6:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022ffa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022ffc:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022ffe:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023002:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8023004:	f200 809e 	bhi.w	8023144 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8023008:	9903      	ldr	r1, [sp, #12]
 802300a:	1cf3      	adds	r3, r6, #3
 802300c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023010:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8023012:	0a0a      	lsrs	r2, r1, #8
 8023014:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023018:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802301c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023020:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023024:	2b44      	cmp	r3, #68	; 0x44
 8023026:	f200 8085 	bhi.w	8023134 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 802302a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 802302e:	2237      	movs	r2, #55	; 0x37
 8023030:	1d73      	adds	r3, r6, #5
 8023032:	f8df b158 	ldr.w	fp, [pc, #344]	; 802318c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8023036:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 802303a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 802303e:	b29b      	uxth	r3, r3
 8023040:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023042:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8023046:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 802304a:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802304e:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023052:	d80f      	bhi.n	8023074 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8023054:	f808 a009 	strb.w	sl, [r8, r9]
 8023058:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802305c:	4b42      	ldr	r3, [pc, #264]	; (8023168 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 802305e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023062:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8023064:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023068:	d01f      	beq.n	80230aa <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802306a:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802306e:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8023072:	d9ef      	bls.n	8023054 <dhcp_coarse_tmr+0x11c>
 8023074:	4b3d      	ldr	r3, [pc, #244]	; (802316c <dhcp_coarse_tmr+0x234>)
 8023076:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802307a:	493d      	ldr	r1, [pc, #244]	; (8023170 <dhcp_coarse_tmr+0x238>)
 802307c:	483d      	ldr	r0, [pc, #244]	; (8023174 <dhcp_coarse_tmr+0x23c>)
 802307e:	f003 fb69 	bl	8026754 <iprintf>
 8023082:	e7e7      	b.n	8023054 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8023084:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8023088:	2a01      	cmp	r2, #1
 802308a:	d002      	beq.n	8023092 <dhcp_coarse_tmr+0x15a>
 802308c:	2b0a      	cmp	r3, #10
 802308e:	f47f af72 	bne.w	8022f76 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8023092:	4628      	mov	r0, r5
 8023094:	f7ff fd7e 	bl	8022b94 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8023098:	89a3      	ldrh	r3, [r4, #12]
 802309a:	8a62      	ldrh	r2, [r4, #18]
 802309c:	1a9b      	subs	r3, r3, r2
 802309e:	2b01      	cmp	r3, #1
 80230a0:	f77f af69 	ble.w	8022f76 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80230a4:	105b      	asrs	r3, r3, #1
 80230a6:	81e3      	strh	r3, [r4, #14]
 80230a8:	e765      	b.n	8022f76 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 80230aa:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 80230ae:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80230b2:	22ff      	movs	r2, #255	; 0xff
 80230b4:	b280      	uxth	r0, r0
 80230b6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80230b8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80230ba:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80230be:	d808      	bhi.n	80230d2 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 80230c0:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 80230c4:	4440      	add	r0, r8
 80230c6:	2100      	movs	r1, #0
 80230c8:	b292      	uxth	r2, r2
 80230ca:	3201      	adds	r2, #1
 80230cc:	f002 fba4 	bl	8025818 <memset>
 80230d0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80230d2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80230d6:	4638      	mov	r0, r7
 80230d8:	b289      	uxth	r1, r1
 80230da:	f7f9 f959 	bl	801c390 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80230de:	4b26      	ldr	r3, [pc, #152]	; (8023178 <dhcp_coarse_tmr+0x240>)
 80230e0:	9500      	str	r5, [sp, #0]
 80230e2:	4639      	mov	r1, r7
 80230e4:	6818      	ldr	r0, [r3, #0]
 80230e6:	2343      	movs	r3, #67	; 0x43
 80230e8:	4a24      	ldr	r2, [pc, #144]	; (802317c <dhcp_coarse_tmr+0x244>)
 80230ea:	f7fe fa4b 	bl	8021584 <udp_sendto_if>
    pbuf_free(p_out);
 80230ee:	4638      	mov	r0, r7
 80230f0:	f7f9 fa66 	bl	801c5c0 <pbuf_free>
  if (dhcp->tries < 255) {
 80230f4:	79a3      	ldrb	r3, [r4, #6]
 80230f6:	2bff      	cmp	r3, #255	; 0xff
 80230f8:	d01a      	beq.n	8023130 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 80230fa:	3301      	adds	r3, #1
 80230fc:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80230fe:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8023100:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8023102:	d815      	bhi.n	8023130 <dhcp_coarse_tmr+0x1f8>
 8023104:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8023108:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802310c:	4a1c      	ldr	r2, [pc, #112]	; (8023180 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802310e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023110:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8023114:	b29b      	uxth	r3, r3
 8023116:	fba2 2303 	umull	r2, r3, r2, r3
 802311a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802311c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802311e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8023120:	8aa3      	ldrh	r3, [r4, #20]
 8023122:	1a9b      	subs	r3, r3, r2
 8023124:	2b01      	cmp	r3, #1
 8023126:	f77f af26 	ble.w	8022f76 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802312a:	105b      	asrs	r3, r3, #1
 802312c:	8223      	strh	r3, [r4, #16]
 802312e:	e722      	b.n	8022f76 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8023130:	2314      	movs	r3, #20
 8023132:	e7f3      	b.n	802311c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023134:	4b0d      	ldr	r3, [pc, #52]	; (802316c <dhcp_coarse_tmr+0x234>)
 8023136:	f240 529a 	movw	r2, #1434	; 0x59a
 802313a:	4912      	ldr	r1, [pc, #72]	; (8023184 <dhcp_coarse_tmr+0x24c>)
 802313c:	480d      	ldr	r0, [pc, #52]	; (8023174 <dhcp_coarse_tmr+0x23c>)
 802313e:	f003 fb09 	bl	8026754 <iprintf>
 8023142:	e772      	b.n	802302a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8023144:	4b09      	ldr	r3, [pc, #36]	; (802316c <dhcp_coarse_tmr+0x234>)
 8023146:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802314a:	490f      	ldr	r1, [pc, #60]	; (8023188 <dhcp_coarse_tmr+0x250>)
 802314c:	4809      	ldr	r0, [pc, #36]	; (8023174 <dhcp_coarse_tmr+0x23c>)
 802314e:	f003 fb01 	bl	8026754 <iprintf>
 8023152:	e759      	b.n	8023008 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8023154:	4b05      	ldr	r3, [pc, #20]	; (802316c <dhcp_coarse_tmr+0x234>)
 8023156:	f240 529a 	movw	r2, #1434	; 0x59a
 802315a:	490a      	ldr	r1, [pc, #40]	; (8023184 <dhcp_coarse_tmr+0x24c>)
 802315c:	4805      	ldr	r0, [pc, #20]	; (8023174 <dhcp_coarse_tmr+0x23c>)
 802315e:	f003 faf9 	bl	8026754 <iprintf>
 8023162:	e73e      	b.n	8022fe2 <dhcp_coarse_tmr+0xaa>
 8023164:	2002e438 	.word	0x2002e438
 8023168:	08046f98 	.word	0x08046f98
 802316c:	08046c1c 	.word	0x08046c1c
 8023170:	08046e10 	.word	0x08046e10
 8023174:	0802b44c 	.word	0x0802b44c
 8023178:	2002e4b0 	.word	0x2002e4b0
 802317c:	080472d4 	.word	0x080472d4
 8023180:	10624dd3 	.word	0x10624dd3
 8023184:	08046d90 	.word	0x08046d90
 8023188:	08046dd4 	.word	0x08046dd4
 802318c:	08046f95 	.word	0x08046f95

08023190 <dhcp_fine_tmr>:
{
 8023190:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8023192:	4b21      	ldr	r3, [pc, #132]	; (8023218 <dhcp_fine_tmr+0x88>)
 8023194:	681c      	ldr	r4, [r3, #0]
 8023196:	b1fc      	cbz	r4, 80231d8 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8023198:	2500      	movs	r5, #0
 802319a:	e003      	b.n	80231a4 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 802319c:	3a01      	subs	r2, #1
 802319e:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 80231a0:	6824      	ldr	r4, [r4, #0]
 80231a2:	b1cc      	cbz	r4, 80231d8 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80231a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d0fa      	beq.n	80231a0 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 80231aa:	891a      	ldrh	r2, [r3, #8]
 80231ac:	2a01      	cmp	r2, #1
 80231ae:	d8f5      	bhi.n	802319c <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 80231b0:	d1f6      	bne.n	80231a0 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80231b2:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 80231b4:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80231b6:	2a0c      	cmp	r2, #12
 80231b8:	d016      	beq.n	80231e8 <dhcp_fine_tmr+0x58>
 80231ba:	2a06      	cmp	r2, #6
 80231bc:	d014      	beq.n	80231e8 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80231be:	2a01      	cmp	r2, #1
 80231c0:	d016      	beq.n	80231f0 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80231c2:	2a08      	cmp	r2, #8
 80231c4:	d009      	beq.n	80231da <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80231c6:	2a03      	cmp	r2, #3
 80231c8:	d1ea      	bne.n	80231a0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 80231ca:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80231cc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80231ce:	2b01      	cmp	r3, #1
 80231d0:	d91e      	bls.n	8023210 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 80231d2:	f7fe fe8b 	bl	8021eec <dhcp_discover>
 80231d6:	e7e3      	b.n	80231a0 <dhcp_fine_tmr+0x10>
}
 80231d8:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 80231da:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80231dc:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80231de:	2b01      	cmp	r3, #1
 80231e0:	d913      	bls.n	802320a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 80231e2:	f7fe fb6d 	bl	80218c0 <dhcp_bind>
 80231e6:	e7db      	b.n	80231a0 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 80231e8:	4620      	mov	r0, r4
 80231ea:	f7fe fe7f 	bl	8021eec <dhcp_discover>
 80231ee:	e7d7      	b.n	80231a0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 80231f0:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 80231f2:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 80231f4:	2b05      	cmp	r3, #5
 80231f6:	d802      	bhi.n	80231fe <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 80231f8:	f7fe ff5e 	bl	80220b8 <dhcp_select.isra.0>
 80231fc:	e7d0      	b.n	80231a0 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 80231fe:	f7ff fdaf 	bl	8022d60 <dhcp_release_and_stop>
      dhcp_start(netif);
 8023202:	4620      	mov	r0, r4
 8023204:	f7ff fe3c 	bl	8022e80 <dhcp_start>
 8023208:	e7ca      	b.n	80231a0 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 802320a:	f7fe fb41 	bl	8021890 <dhcp_check>
 802320e:	e7c7      	b.n	80231a0 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8023210:	f7fe fd6c 	bl	8021cec <dhcp_reboot.isra.0>
 8023214:	e7c4      	b.n	80231a0 <dhcp_fine_tmr+0x10>
 8023216:	bf00      	nop
 8023218:	2002e438 	.word	0x2002e438

0802321c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802321c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023220:	4f1a      	ldr	r7, [pc, #104]	; (802328c <etharp_free_entry+0x70>)
 8023222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8023226:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8023228:	ea4f 0840 	mov.w	r8, r0, lsl #1
 802322c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8023230:	b32c      	cbz	r4, 802327e <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8023232:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8023290 <etharp_free_entry+0x74>
 8023236:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8023294 <etharp_free_entry+0x78>
 802323a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8023298 <etharp_free_entry+0x7c>
 802323e:	e006      	b.n	802324e <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8023240:	f7f9 f9be 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8023244:	4629      	mov	r1, r5
 8023246:	200b      	movs	r0, #11
 8023248:	f7f8 fca2 	bl	801bb90 <memp_free>
  while (q) {
 802324c:	b19c      	cbz	r4, 8023276 <etharp_free_entry+0x5a>
    q = q->next;
 802324e:	4625      	mov	r5, r4
 8023250:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8023252:	6868      	ldr	r0, [r5, #4]
 8023254:	2800      	cmp	r0, #0
 8023256:	d1f3      	bne.n	8023240 <etharp_free_entry+0x24>
 8023258:	4651      	mov	r1, sl
 802325a:	465b      	mov	r3, fp
 802325c:	229a      	movs	r2, #154	; 0x9a
 802325e:	4648      	mov	r0, r9
 8023260:	f003 fa78 	bl	8026754 <iprintf>
    pbuf_free(r->p);
 8023264:	6868      	ldr	r0, [r5, #4]
 8023266:	f7f9 f9ab 	bl	801c5c0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 802326a:	4629      	mov	r1, r5
 802326c:	200b      	movs	r0, #11
 802326e:	f7f8 fc8f 	bl	801bb90 <memp_free>
  while (q) {
 8023272:	2c00      	cmp	r4, #0
 8023274:	d1eb      	bne.n	802324e <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8023276:	eb08 0306 	add.w	r3, r8, r6
 802327a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802327e:	4446      	add	r6, r8
 8023280:	2300      	movs	r3, #0
 8023282:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8023286:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802328c:	2002e4f0 	.word	0x2002e4f0
 8023290:	08046f98 	.word	0x08046f98
 8023294:	08046fd0 	.word	0x08046fd0
 8023298:	0802b44c 	.word	0x0802b44c

0802329c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 802329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a0:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80232a2:	f04f 0820 	mov.w	r8, #32
{
 80232a6:	b083      	sub	sp, #12
 80232a8:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80232aa:	469e      	mov	lr, r3
 80232ac:	469b      	mov	fp, r3
{
 80232ae:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80232b0:	469a      	mov	sl, r3
 80232b2:	4948      	ldr	r1, [pc, #288]	; (80233d4 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 80232b4:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80232b6:	46c4      	mov	ip, r8
 80232b8:	4691      	mov	r9, r2
 80232ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80232be:	e004      	b.n	80232ca <etharp_find_entry+0x2e>
 80232c0:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232c2:	3301      	adds	r3, #1
 80232c4:	3118      	adds	r1, #24
 80232c6:	2b20      	cmp	r3, #32
 80232c8:	d015      	beq.n	80232f6 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80232ca:	2c20      	cmp	r4, #32
 80232cc:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 80232ce:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80232d0:	d134      	bne.n	802333c <etharp_find_entry+0xa0>
 80232d2:	2800      	cmp	r0, #0
 80232d4:	d0f4      	beq.n	80232c0 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80232d6:	b11d      	cbz	r5, 80232e0 <etharp_find_entry+0x44>
 80232d8:	682f      	ldr	r7, [r5, #0]
 80232da:	684e      	ldr	r6, [r1, #4]
 80232dc:	42b7      	cmp	r7, r6
 80232de:	d038      	beq.n	8023352 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80232e0:	2801      	cmp	r0, #1
 80232e2:	d02e      	beq.n	8023342 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80232e4:	8a48      	ldrh	r0, [r1, #18]
 80232e6:	4570      	cmp	r0, lr
 80232e8:	d3eb      	bcc.n	80232c2 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232ea:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 80232ec:	4686      	mov	lr, r0
 80232ee:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232f0:	3118      	adds	r1, #24
 80232f2:	2b20      	cmp	r3, #32
 80232f4:	d1e9      	bne.n	80232ca <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80232f6:	9b00      	ldr	r3, [sp, #0]
 80232f8:	464e      	mov	r6, r9
 80232fa:	2b01      	cmp	r3, #1
 80232fc:	d166      	bne.n	80233cc <etharp_find_entry+0x130>
 80232fe:	2c20      	cmp	r4, #32
 8023300:	d040      	beq.n	8023384 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023302:	46a1      	mov	r9, r4
 8023304:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8023308:	4a32      	ldr	r2, [pc, #200]	; (80233d4 <etharp_find_entry+0x138>)
 802330a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 802330e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023312:	7d1b      	ldrb	r3, [r3, #20]
 8023314:	bb73      	cbnz	r3, 8023374 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023316:	b135      	cbz	r5, 8023326 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023318:	eb08 0309 	add.w	r3, r8, r9
 802331c:	492d      	ldr	r1, [pc, #180]	; (80233d4 <etharp_find_entry+0x138>)
 802331e:	682a      	ldr	r2, [r5, #0]
 8023320:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8023324:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8023326:	44c8      	add	r8, r9
 8023328:	4a2a      	ldr	r2, [pc, #168]	; (80233d4 <etharp_find_entry+0x138>)
 802332a:	2300      	movs	r3, #0
 802332c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8023330:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023332:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8023334:	4620      	mov	r0, r4
 8023336:	b003      	add	sp, #12
 8023338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 802333c:	2800      	cmp	r0, #0
 802333e:	d0c0      	beq.n	80232c2 <etharp_find_entry+0x26>
 8023340:	e7c9      	b.n	80232d6 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8023342:	6808      	ldr	r0, [r1, #0]
 8023344:	b180      	cbz	r0, 8023368 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8023346:	8a48      	ldrh	r0, [r1, #18]
 8023348:	4550      	cmp	r0, sl
 802334a:	d3ba      	bcc.n	80232c2 <etharp_find_entry+0x26>
 802334c:	4682      	mov	sl, r0
 802334e:	4690      	mov	r8, r2
 8023350:	e7b7      	b.n	80232c2 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023352:	f1b9 0f00 	cmp.w	r9, #0
 8023356:	d002      	beq.n	802335e <etharp_find_entry+0xc2>
 8023358:	688e      	ldr	r6, [r1, #8]
 802335a:	454e      	cmp	r6, r9
 802335c:	d1c0      	bne.n	80232e0 <etharp_find_entry+0x44>
 802335e:	4614      	mov	r4, r2
}
 8023360:	4620      	mov	r0, r4
 8023362:	b003      	add	sp, #12
 8023364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8023368:	8a48      	ldrh	r0, [r1, #18]
 802336a:	4558      	cmp	r0, fp
 802336c:	d3a9      	bcc.n	80232c2 <etharp_find_entry+0x26>
 802336e:	4683      	mov	fp, r0
 8023370:	9201      	str	r2, [sp, #4]
 8023372:	e7a6      	b.n	80232c2 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023374:	4b18      	ldr	r3, [pc, #96]	; (80233d8 <etharp_find_entry+0x13c>)
 8023376:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802337a:	4918      	ldr	r1, [pc, #96]	; (80233dc <etharp_find_entry+0x140>)
 802337c:	4818      	ldr	r0, [pc, #96]	; (80233e0 <etharp_find_entry+0x144>)
 802337e:	f003 f9e9 	bl	8026754 <iprintf>
 8023382:	e7c8      	b.n	8023316 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8023384:	f1bc 0f20 	cmp.w	ip, #32
 8023388:	d012      	beq.n	80233b0 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802338a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 802338e:	4a11      	ldr	r2, [pc, #68]	; (80233d4 <etharp_find_entry+0x138>)
 8023390:	46e1      	mov	r9, ip
 8023392:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8023396:	b1bb      	cbz	r3, 80233c8 <etharp_find_entry+0x12c>
 8023398:	464c      	mov	r4, r9
 802339a:	4b0f      	ldr	r3, [pc, #60]	; (80233d8 <etharp_find_entry+0x13c>)
 802339c:	f240 126d 	movw	r2, #365	; 0x16d
 80233a0:	4910      	ldr	r1, [pc, #64]	; (80233e4 <etharp_find_entry+0x148>)
 80233a2:	480f      	ldr	r0, [pc, #60]	; (80233e0 <etharp_find_entry+0x144>)
 80233a4:	f003 f9d6 	bl	8026754 <iprintf>
    etharp_free_entry(i);
 80233a8:	4648      	mov	r0, r9
 80233aa:	f7ff ff37 	bl	802321c <etharp_free_entry>
 80233ae:	e7a9      	b.n	8023304 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80233b0:	9b01      	ldr	r3, [sp, #4]
 80233b2:	2b20      	cmp	r3, #32
 80233b4:	d105      	bne.n	80233c2 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80233b6:	f1b8 0f20 	cmp.w	r8, #32
 80233ba:	d007      	beq.n	80233cc <etharp_find_entry+0x130>
    etharp_free_entry(i);
 80233bc:	4644      	mov	r4, r8
 80233be:	46c1      	mov	r9, r8
 80233c0:	e7f2      	b.n	80233a8 <etharp_find_entry+0x10c>
 80233c2:	461c      	mov	r4, r3
 80233c4:	4699      	mov	r9, r3
 80233c6:	e7ef      	b.n	80233a8 <etharp_find_entry+0x10c>
 80233c8:	4664      	mov	r4, ip
 80233ca:	e7ed      	b.n	80233a8 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 80233cc:	f04f 34ff 	mov.w	r4, #4294967295
 80233d0:	e7b0      	b.n	8023334 <etharp_find_entry+0x98>
 80233d2:	bf00      	nop
 80233d4:	2002e4f0 	.word	0x2002e4f0
 80233d8:	08046f98 	.word	0x08046f98
 80233dc:	08046ff8 	.word	0x08046ff8
 80233e0:	0802b44c 	.word	0x0802b44c
 80233e4:	08046fe0 	.word	0x08046fe0

080233e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80233e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233ec:	b082      	sub	sp, #8
 80233ee:	4688      	mov	r8, r1
 80233f0:	4691      	mov	r9, r2
 80233f2:	461f      	mov	r7, r3
 80233f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80233f8:	4606      	mov	r6, r0
{
 80233fa:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80233fe:	2800      	cmp	r0, #0
 8023400:	d050      	beq.n	80234a4 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023402:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023406:	211c      	movs	r1, #28
 8023408:	200e      	movs	r0, #14
 802340a:	f7f8 ff07 	bl	801c21c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802340e:	4605      	mov	r5, r0
 8023410:	2800      	cmp	r0, #0
 8023412:	d04f      	beq.n	80234b4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023414:	8943      	ldrh	r3, [r0, #10]
 8023416:	2b1b      	cmp	r3, #27
 8023418:	d93c      	bls.n	8023494 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802341a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802341c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802341e:	f7f7 f893 	bl	801a548 <lwip_htons>
 8023422:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023424:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8023428:	2b06      	cmp	r3, #6
 802342a:	d006      	beq.n	802343a <etharp_raw+0x52>
 802342c:	4b23      	ldr	r3, [pc, #140]	; (80234bc <etharp_raw+0xd4>)
 802342e:	f240 4269 	movw	r2, #1129	; 0x469
 8023432:	4923      	ldr	r1, [pc, #140]	; (80234c0 <etharp_raw+0xd8>)
 8023434:	4823      	ldr	r0, [pc, #140]	; (80234c4 <etharp_raw+0xdc>)
 8023436:	f003 f98d 	bl	8026754 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802343a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802343c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802343e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023440:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023442:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023444:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023446:	88b9      	ldrh	r1, [r7, #4]
 8023448:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802344a:	f8da 1000 	ldr.w	r1, [sl]
 802344e:	f8c4 1012 	str.w	r1, [r4, #18]
 8023452:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8023456:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8023458:	990a      	ldr	r1, [sp, #40]	; 0x28
 802345a:	6809      	ldr	r1, [r1, #0]
 802345c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023460:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023462:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023464:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023466:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023468:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802346a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802346c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802346e:	2108      	movs	r1, #8
 8023470:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8023472:	2106      	movs	r1, #6
 8023474:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023476:	2104      	movs	r1, #4
 8023478:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802347a:	f640 0106 	movw	r1, #2054	; 0x806
 802347e:	9100      	str	r1, [sp, #0]
 8023480:	4629      	mov	r1, r5
 8023482:	f001 fbf5 	bl	8024c70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023486:	4628      	mov	r0, r5
 8023488:	f7f9 f89a 	bl	801c5c0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 802348c:	4630      	mov	r0, r6
}
 802348e:	b002      	add	sp, #8
 8023490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023494:	4b09      	ldr	r3, [pc, #36]	; (80234bc <etharp_raw+0xd4>)
 8023496:	f240 4262 	movw	r2, #1122	; 0x462
 802349a:	490b      	ldr	r1, [pc, #44]	; (80234c8 <etharp_raw+0xe0>)
 802349c:	4809      	ldr	r0, [pc, #36]	; (80234c4 <etharp_raw+0xdc>)
 802349e:	f003 f959 	bl	8026754 <iprintf>
 80234a2:	e7ba      	b.n	802341a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80234a4:	4b05      	ldr	r3, [pc, #20]	; (80234bc <etharp_raw+0xd4>)
 80234a6:	f240 4257 	movw	r2, #1111	; 0x457
 80234aa:	4908      	ldr	r1, [pc, #32]	; (80234cc <etharp_raw+0xe4>)
 80234ac:	4805      	ldr	r0, [pc, #20]	; (80234c4 <etharp_raw+0xdc>)
 80234ae:	f003 f951 	bl	8026754 <iprintf>
 80234b2:	e7a6      	b.n	8023402 <etharp_raw+0x1a>
    return ERR_MEM;
 80234b4:	f04f 30ff 	mov.w	r0, #4294967295
 80234b8:	e7e9      	b.n	802348e <etharp_raw+0xa6>
 80234ba:	bf00      	nop
 80234bc:	08046f98 	.word	0x08046f98
 80234c0:	08047058 	.word	0x08047058
 80234c4:	0802b44c 	.word	0x0802b44c
 80234c8:	08047024 	.word	0x08047024
 80234cc:	0802e6ac 	.word	0x0802e6ac

080234d0 <etharp_output_to_arp_index>:
{
 80234d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234d4:	4f37      	ldr	r7, [pc, #220]	; (80235b4 <etharp_output_to_arp_index+0xe4>)
 80234d6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 80234da:	b085      	sub	sp, #20
 80234dc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234de:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 80234e2:	4605      	mov	r5, r0
 80234e4:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80234e6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80234ea:	f899 3014 	ldrb.w	r3, [r9, #20]
 80234ee:	2b01      	cmp	r3, #1
 80234f0:	d93c      	bls.n	802356c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80234f2:	2b02      	cmp	r3, #2
 80234f4:	d011      	beq.n	802351a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234f6:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80234f8:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80234fc:	fb02 7404 	mla	r4, r2, r4, r7
 8023500:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023502:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8023506:	4623      	mov	r3, r4
 8023508:	464a      	mov	r2, r9
 802350a:	4631      	mov	r1, r6
 802350c:	4628      	mov	r0, r5
 802350e:	9700      	str	r7, [sp, #0]
 8023510:	f001 fbae 	bl	8024c70 <ethernet_output>
}
 8023514:	b005      	add	sp, #20
 8023516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802351a:	44a0      	add	r8, r4
 802351c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8023520:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8023524:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8023528:	d82a      	bhi.n	8023580 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802352a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802352e:	d3e2      	bcc.n	80234f6 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023530:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023534:	2301      	movs	r3, #1
 8023536:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802353a:	4628      	mov	r0, r5
 802353c:	00e4      	lsls	r4, r4, #3
 802353e:	9303      	str	r3, [sp, #12]
 8023540:	4b1d      	ldr	r3, [pc, #116]	; (80235b8 <etharp_output_to_arp_index+0xe8>)
 8023542:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023544:	f104 020c 	add.w	r2, r4, #12
 8023548:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802354c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802354e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023550:	18bc      	adds	r4, r7, r2
 8023552:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023554:	9300      	str	r3, [sp, #0]
 8023556:	464b      	mov	r3, r9
 8023558:	4622      	mov	r2, r4
 802355a:	9702      	str	r7, [sp, #8]
 802355c:	f7ff ff44 	bl	80233e8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023560:	2800      	cmp	r0, #0
 8023562:	d1ce      	bne.n	8023502 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023564:	2303      	movs	r3, #3
 8023566:	f888 3014 	strb.w	r3, [r8, #20]
 802356a:	e7ca      	b.n	8023502 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802356c:	4b13      	ldr	r3, [pc, #76]	; (80235bc <etharp_output_to_arp_index+0xec>)
 802356e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023572:	4913      	ldr	r1, [pc, #76]	; (80235c0 <etharp_output_to_arp_index+0xf0>)
 8023574:	4813      	ldr	r0, [pc, #76]	; (80235c4 <etharp_output_to_arp_index+0xf4>)
 8023576:	f003 f8ed 	bl	8026754 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802357a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802357e:	e7b8      	b.n	80234f2 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023580:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023584:	2301      	movs	r3, #1
 8023586:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802358a:	4a0f      	ldr	r2, [pc, #60]	; (80235c8 <etharp_output_to_arp_index+0xf8>)
 802358c:	00e4      	lsls	r4, r4, #3
 802358e:	9303      	str	r3, [sp, #12]
 8023590:	4649      	mov	r1, r9
 8023592:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023594:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023596:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023598:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802359a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802359c:	9302      	str	r3, [sp, #8]
 802359e:	4b06      	ldr	r3, [pc, #24]	; (80235b8 <etharp_output_to_arp_index+0xe8>)
 80235a0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80235a2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235a4:	9300      	str	r3, [sp, #0]
 80235a6:	464b      	mov	r3, r9
 80235a8:	f7ff ff1e 	bl	80233e8 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80235ac:	2800      	cmp	r0, #0
 80235ae:	d0d9      	beq.n	8023564 <etharp_output_to_arp_index+0x94>
 80235b0:	e7a7      	b.n	8023502 <etharp_output_to_arp_index+0x32>
 80235b2:	bf00      	nop
 80235b4:	2002e4f0 	.word	0x2002e4f0
 80235b8:	080474d0 	.word	0x080474d0
 80235bc:	08046f98 	.word	0x08046f98
 80235c0:	0804709c 	.word	0x0804709c
 80235c4:	0802b44c 	.word	0x0802b44c
 80235c8:	080474c8 	.word	0x080474c8

080235cc <etharp_tmr>:
{
 80235cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235d0:	4c1e      	ldr	r4, [pc, #120]	; (802364c <etharp_tmr+0x80>)
 80235d2:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235d4:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80235d6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8023654 <etharp_tmr+0x88>
 80235da:	4f1d      	ldr	r7, [pc, #116]	; (8023650 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 80235dc:	2602      	movs	r6, #2
 80235de:	e00d      	b.n	80235fc <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80235e0:	2a01      	cmp	r2, #1
 80235e2:	d101      	bne.n	80235e8 <etharp_tmr+0x1c>
 80235e4:	2b04      	cmp	r3, #4
 80235e6:	d813      	bhi.n	8023610 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80235e8:	2a03      	cmp	r2, #3
 80235ea:	d01b      	beq.n	8023624 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80235ec:	2a04      	cmp	r2, #4
 80235ee:	d01c      	beq.n	802362a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80235f0:	2a01      	cmp	r2, #1
 80235f2:	d01c      	beq.n	802362e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235f4:	3501      	adds	r5, #1
 80235f6:	3418      	adds	r4, #24
 80235f8:	2d20      	cmp	r5, #32
 80235fa:	d010      	beq.n	802361e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 80235fc:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80235fe:	2a00      	cmp	r2, #0
 8023600:	d0f8      	beq.n	80235f4 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8023602:	89e3      	ldrh	r3, [r4, #14]
 8023604:	3301      	adds	r3, #1
 8023606:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023608:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 802360c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802360e:	d3e7      	bcc.n	80235e0 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8023610:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023612:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8023614:	f7ff fe02 	bl	802321c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023618:	3418      	adds	r4, #24
 802361a:	2d20      	cmp	r5, #32
 802361c:	d1ee      	bne.n	80235fc <etharp_tmr+0x30>
}
 802361e:	b004      	add	sp, #16
 8023620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023624:	2304      	movs	r3, #4
 8023626:	7423      	strb	r3, [r4, #16]
 8023628:	e7e4      	b.n	80235f4 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 802362a:	7426      	strb	r6, [r4, #16]
 802362c:	e7e2      	b.n	80235f4 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802362e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023630:	f8cd 8004 	str.w	r8, [sp, #4]
 8023634:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023638:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802363a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802363e:	9100      	str	r1, [sp, #0]
 8023640:	463a      	mov	r2, r7
 8023642:	4619      	mov	r1, r3
 8023644:	f7ff fed0 	bl	80233e8 <etharp_raw>
 8023648:	e7d4      	b.n	80235f4 <etharp_tmr+0x28>
 802364a:	bf00      	nop
 802364c:	2002e4f4 	.word	0x2002e4f4
 8023650:	080474c8 	.word	0x080474c8
 8023654:	080474d0 	.word	0x080474d0

08023658 <etharp_cleanup_netif>:
{
 8023658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802365a:	4c0c      	ldr	r4, [pc, #48]	; (802368c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802365c:	2500      	movs	r5, #0
{
 802365e:	4607      	mov	r7, r0
 8023660:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8023664:	e003      	b.n	802366e <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023666:	3418      	adds	r4, #24
 8023668:	3501      	adds	r5, #1
 802366a:	42b4      	cmp	r4, r6
 802366c:	d00c      	beq.n	8023688 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802366e:	7d23      	ldrb	r3, [r4, #20]
 8023670:	2b00      	cmp	r3, #0
 8023672:	d0f8      	beq.n	8023666 <etharp_cleanup_netif+0xe>
 8023674:	68a3      	ldr	r3, [r4, #8]
 8023676:	42bb      	cmp	r3, r7
 8023678:	d1f5      	bne.n	8023666 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802367a:	3418      	adds	r4, #24
      etharp_free_entry(i);
 802367c:	4628      	mov	r0, r5
 802367e:	f7ff fdcd 	bl	802321c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023682:	3501      	adds	r5, #1
 8023684:	42b4      	cmp	r4, r6
 8023686:	d1f2      	bne.n	802366e <etharp_cleanup_netif+0x16>
}
 8023688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802368a:	bf00      	nop
 802368c:	2002e4f0 	.word	0x2002e4f0

08023690 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023690:	2900      	cmp	r1, #0
 8023692:	f000 808e 	beq.w	80237b2 <etharp_input+0x122>
{
 8023696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 802369a:	6846      	ldr	r6, [r0, #4]
{
 802369c:	b087      	sub	sp, #28
 802369e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80236a0:	8833      	ldrh	r3, [r6, #0]
 80236a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80236a6:	d102      	bne.n	80236ae <etharp_input+0x1e>
 80236a8:	7933      	ldrb	r3, [r6, #4]
 80236aa:	2b06      	cmp	r3, #6
 80236ac:	d005      	beq.n	80236ba <etharp_input+0x2a>
    pbuf_free(p);
 80236ae:	4620      	mov	r0, r4
}
 80236b0:	b007      	add	sp, #28
 80236b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80236b6:	f7f8 bf83 	b.w	801c5c0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80236ba:	7973      	ldrb	r3, [r6, #5]
 80236bc:	2b04      	cmp	r3, #4
 80236be:	d1f6      	bne.n	80236ae <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80236c0:	8873      	ldrh	r3, [r6, #2]
 80236c2:	2b08      	cmp	r3, #8
 80236c4:	d1f3      	bne.n	80236ae <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80236c6:	f8d6 000e 	ldr.w	r0, [r6, #14]
 80236ca:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80236cc:	684b      	ldr	r3, [r1, #4]
 80236ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80236d2:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	d073      	beq.n	80237c0 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80236d8:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80236dc:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80236e0:	faba fa8a 	clz	sl, sl
 80236e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80236e8:	f1ca 0702 	rsb	r7, sl, #2
 80236ec:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80236ee:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80236f2:	2b06      	cmp	r3, #6
 80236f4:	d007      	beq.n	8023706 <etharp_input+0x76>
 80236f6:	4b3e      	ldr	r3, [pc, #248]	; (80237f0 <etharp_input+0x160>)
 80236f8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80236fc:	493d      	ldr	r1, [pc, #244]	; (80237f4 <etharp_input+0x164>)
 80236fe:	483e      	ldr	r0, [pc, #248]	; (80237f8 <etharp_input+0x168>)
 8023700:	f003 f828 	bl	8026754 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8023704:	9805      	ldr	r0, [sp, #20]
 8023706:	2800      	cmp	r0, #0
 8023708:	d042      	beq.n	8023790 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802370a:	4629      	mov	r1, r5
 802370c:	f000 fd30 	bl	8024170 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8023710:	4681      	mov	r9, r0
 8023712:	2800      	cmp	r0, #0
 8023714:	d13c      	bne.n	8023790 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8023716:	9b05      	ldr	r3, [sp, #20]
 8023718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802371c:	2be0      	cmp	r3, #224	; 0xe0
 802371e:	d037      	beq.n	8023790 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8023720:	4639      	mov	r1, r7
 8023722:	462a      	mov	r2, r5
 8023724:	a805      	add	r0, sp, #20
 8023726:	f7ff fdb9 	bl	802329c <etharp_find_entry>
  if (i < 0) {
 802372a:	2800      	cmp	r0, #0
 802372c:	db30      	blt.n	8023790 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802372e:	4a33      	ldr	r2, [pc, #204]	; (80237fc <etharp_input+0x16c>)
 8023730:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8023734:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023736:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802373a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 802373e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023740:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8023742:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023744:	fb10 330c 	smlabb	r3, r0, ip, r3
 8023748:	f8d8 0000 	ldr.w	r0, [r8]
 802374c:	50d0      	str	r0, [r2, r3]
 802374e:	18d0      	adds	r0, r2, r3
 8023750:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8023754:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8023756:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 802375a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 802375e:	b1b9      	cbz	r1, 8023790 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023760:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8023764:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8023766:	200b      	movs	r0, #11
    p = q->p;
 8023768:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 802376c:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 802376e:	f7f8 fa0f 	bl	801bb90 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023776:	4659      	mov	r1, fp
 8023778:	464a      	mov	r2, r9
 802377a:	9300      	str	r3, [sp, #0]
 802377c:	4628      	mov	r0, r5
 802377e:	4643      	mov	r3, r8
 8023780:	f001 fa76 	bl	8024c70 <ethernet_output>
    pbuf_free(p);
 8023784:	4658      	mov	r0, fp
 8023786:	f7f8 ff1b 	bl	801c5c0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 802378a:	6839      	ldr	r1, [r7, #0]
 802378c:	2900      	cmp	r1, #0
 802378e:	d1e9      	bne.n	8023764 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8023790:	88f3      	ldrh	r3, [r6, #6]
 8023792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023796:	d018      	beq.n	80237ca <etharp_input+0x13a>
 8023798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802379c:	d103      	bne.n	80237a6 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802379e:	a905      	add	r1, sp, #20
 80237a0:	4628      	mov	r0, r5
 80237a2:	f7ff f971 	bl	8022a88 <dhcp_arp_reply>
  pbuf_free(p);
 80237a6:	4620      	mov	r0, r4
 80237a8:	f7f8 ff0a 	bl	801c5c0 <pbuf_free>
}
 80237ac:	b007      	add	sp, #28
 80237ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80237b2:	4b0f      	ldr	r3, [pc, #60]	; (80237f0 <etharp_input+0x160>)
 80237b4:	f240 228a 	movw	r2, #650	; 0x28a
 80237b8:	4911      	ldr	r1, [pc, #68]	; (8023800 <etharp_input+0x170>)
 80237ba:	480f      	ldr	r0, [pc, #60]	; (80237f8 <etharp_input+0x168>)
 80237bc:	f002 bfca 	b.w	8026754 <iprintf>
    for_us = 0;
 80237c0:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80237c2:	f106 0808 	add.w	r8, r6, #8
 80237c6:	2702      	movs	r7, #2
 80237c8:	e791      	b.n	80236ee <etharp_input+0x5e>
      if (for_us) {
 80237ca:	f1ba 0f00 	cmp.w	sl, #0
 80237ce:	d0ea      	beq.n	80237a6 <etharp_input+0x116>
        etharp_raw(netif,
 80237d0:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80237d2:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 80237d6:	4642      	mov	r2, r8
 80237d8:	4628      	mov	r0, r5
 80237da:	9103      	str	r1, [sp, #12]
 80237dc:	a905      	add	r1, sp, #20
 80237de:	f8cd 8004 	str.w	r8, [sp, #4]
 80237e2:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80237e4:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 80237e6:	9100      	str	r1, [sp, #0]
 80237e8:	4619      	mov	r1, r3
 80237ea:	f7ff fdfd 	bl	80233e8 <etharp_raw>
 80237ee:	e7da      	b.n	80237a6 <etharp_input+0x116>
 80237f0:	08046f98 	.word	0x08046f98
 80237f4:	080470ec 	.word	0x080470ec
 80237f8:	0802b44c 	.word	0x0802b44c
 80237fc:	2002e4f0 	.word	0x2002e4f0
 8023800:	0802e6ac 	.word	0x0802e6ac

08023804 <etharp_query>:
{
 8023804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023808:	468a      	mov	sl, r1
 802380a:	b085      	sub	sp, #20
 802380c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802380e:	4601      	mov	r1, r0
 8023810:	f8da 0000 	ldr.w	r0, [sl]
{
 8023814:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023816:	f000 fcab 	bl	8024170 <ip4_addr_isbroadcast_u32>
 802381a:	2800      	cmp	r0, #0
 802381c:	f040 80d1 	bne.w	80239c2 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8023820:	f8da 3000 	ldr.w	r3, [sl]
 8023824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8023828:	2ae0      	cmp	r2, #224	; 0xe0
 802382a:	f000 80ca 	beq.w	80239c2 <etharp_query+0x1be>
 802382e:	2b00      	cmp	r3, #0
 8023830:	f000 80c7 	beq.w	80239c2 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023834:	462a      	mov	r2, r5
 8023836:	2101      	movs	r1, #1
 8023838:	4650      	mov	r0, sl
 802383a:	f7ff fd2f 	bl	802329c <etharp_find_entry>
  if (i_err < 0) {
 802383e:	1e07      	subs	r7, r0, #0
 8023840:	db52      	blt.n	80238e8 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023842:	2f7e      	cmp	r7, #126	; 0x7e
 8023844:	dc48      	bgt.n	80238d8 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8023846:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023848:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80239f8 <etharp_query+0x1f4>
 802384c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8023850:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8023854:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8023858:	7d1a      	ldrb	r2, [r3, #20]
 802385a:	b18a      	cbz	r2, 8023880 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802385c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8023860:	2e00      	cmp	r6, #0
 8023862:	f000 80a0 	beq.w	80239a6 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023866:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 802386a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802386e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8023872:	7d13      	ldrb	r3, [r2, #20]
 8023874:	2b01      	cmp	r3, #1
 8023876:	d81e      	bhi.n	80238b6 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023878:	d03a      	beq.n	80238f0 <etharp_query+0xec>
}
 802387a:	b005      	add	sp, #20
 802387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023880:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023882:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8023886:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023888:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 802388c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802388e:	4628      	mov	r0, r5
 8023890:	4b53      	ldr	r3, [pc, #332]	; (80239e0 <etharp_query+0x1dc>)
 8023892:	4659      	mov	r1, fp
 8023894:	9203      	str	r2, [sp, #12]
 8023896:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023898:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802389a:	4a52      	ldr	r2, [pc, #328]	; (80239e4 <etharp_query+0x1e0>)
 802389c:	9300      	str	r3, [sp, #0]
 802389e:	465b      	mov	r3, fp
 80238a0:	f7ff fda2 	bl	80233e8 <etharp_raw>
    if (q == NULL) {
 80238a4:	2e00      	cmp	r6, #0
 80238a6:	d0e8      	beq.n	802387a <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80238a8:	eb09 0207 	add.w	r2, r9, r7
 80238ac:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80238b0:	7d13      	ldrb	r3, [r2, #20]
 80238b2:	2b01      	cmp	r3, #1
 80238b4:	d9e0      	bls.n	8023878 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238b6:	2318      	movs	r3, #24
 80238b8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80238bc:	465a      	mov	r2, fp
 80238be:	4631      	mov	r1, r6
 80238c0:	fb03 8307 	mla	r3, r3, r7, r8
 80238c4:	4628      	mov	r0, r5
 80238c6:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 80238c8:	4c47      	ldr	r4, [pc, #284]	; (80239e8 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238ca:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 80238cc:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80238ce:	f001 f9cf 	bl	8024c70 <ethernet_output>
}
 80238d2:	b005      	add	sp, #20
 80238d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80238d8:	4b44      	ldr	r3, [pc, #272]	; (80239ec <etharp_query+0x1e8>)
 80238da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80238de:	4944      	ldr	r1, [pc, #272]	; (80239f0 <etharp_query+0x1ec>)
 80238e0:	4844      	ldr	r0, [pc, #272]	; (80239f4 <etharp_query+0x1f0>)
 80238e2:	f002 ff37 	bl	8026754 <iprintf>
 80238e6:	e7ae      	b.n	8023846 <etharp_query+0x42>
    return (err_t)i_err;
 80238e8:	b278      	sxtb	r0, r7
}
 80238ea:	b005      	add	sp, #20
 80238ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238f0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80238f2:	4d3e      	ldr	r5, [pc, #248]	; (80239ec <etharp_query+0x1e8>)
 80238f4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80239fc <etharp_query+0x1f8>
 80238f8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80239f4 <etharp_query+0x1f0>
 80238fc:	e005      	b.n	802390a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 80238fe:	7b23      	ldrb	r3, [r4, #12]
 8023900:	065a      	lsls	r2, r3, #25
 8023902:	d413      	bmi.n	802392c <etharp_query+0x128>
      p = p->next;
 8023904:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8023906:	2c00      	cmp	r4, #0
 8023908:	d038      	beq.n	802397c <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802390a:	8962      	ldrh	r2, [r4, #10]
 802390c:	8923      	ldrh	r3, [r4, #8]
 802390e:	429a      	cmp	r2, r3
 8023910:	d1f5      	bne.n	80238fe <etharp_query+0xfa>
 8023912:	6822      	ldr	r2, [r4, #0]
 8023914:	462b      	mov	r3, r5
 8023916:	b132      	cbz	r2, 8023926 <etharp_query+0x122>
 8023918:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802391c:	4659      	mov	r1, fp
 802391e:	4650      	mov	r0, sl
 8023920:	f002 ff18 	bl	8026754 <iprintf>
 8023924:	e7eb      	b.n	80238fe <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8023926:	7b23      	ldrb	r3, [r4, #12]
 8023928:	065b      	lsls	r3, r3, #25
 802392a:	d527      	bpl.n	802397c <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802392c:	4632      	mov	r2, r6
 802392e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8023932:	200e      	movs	r0, #14
 8023934:	f7f8 ffd6 	bl	801c8e4 <pbuf_clone>
    if (p != NULL) {
 8023938:	4606      	mov	r6, r0
 802393a:	2800      	cmp	r0, #0
 802393c:	d047      	beq.n	80239ce <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802393e:	f240 4206 	movw	r2, #1030	; 0x406
 8023942:	492a      	ldr	r1, [pc, #168]	; (80239ec <etharp_query+0x1e8>)
 8023944:	200b      	movs	r0, #11
 8023946:	f7f8 f8ed 	bl	801bb24 <memp_malloc_fn>
      if (new_entry != NULL) {
 802394a:	4602      	mov	r2, r0
 802394c:	2800      	cmp	r0, #0
 802394e:	d041      	beq.n	80239d4 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8023950:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8023954:	2100      	movs	r1, #0
        new_entry->p = p;
 8023956:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8023958:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802395a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802395c:	f858 5003 	ldr.w	r5, [r8, r3]
 8023960:	b1ed      	cbz	r5, 802399e <etharp_query+0x19a>
          while (r->next != NULL) {
 8023962:	682c      	ldr	r4, [r5, #0]
 8023964:	b384      	cbz	r4, 80239c8 <etharp_query+0x1c4>
          qlen++;
 8023966:	2301      	movs	r3, #1
            qlen++;
 8023968:	4620      	mov	r0, r4
          while (r->next != NULL) {
 802396a:	6824      	ldr	r4, [r4, #0]
            qlen++;
 802396c:	3301      	adds	r3, #1
          while (r->next != NULL) {
 802396e:	2c00      	cmp	r4, #0
 8023970:	d1fa      	bne.n	8023968 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8023972:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8023974:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8023976:	d805      	bhi.n	8023984 <etharp_query+0x180>
        result = ERR_OK;
 8023978:	4620      	mov	r0, r4
 802397a:	e77e      	b.n	802387a <etharp_query+0x76>
      pbuf_ref(p);
 802397c:	4630      	mov	r0, r6
 802397e:	f7f8 fe3d 	bl	801c5fc <pbuf_ref>
    if (p != NULL) {
 8023982:	e7dc      	b.n	802393e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8023984:	682b      	ldr	r3, [r5, #0]
 8023986:	444f      	add	r7, r9
          pbuf_free(old->p);
 8023988:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802398a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802398e:	f7f8 fe17 	bl	801c5c0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8023992:	200b      	movs	r0, #11
 8023994:	4629      	mov	r1, r5
 8023996:	f7f8 f8fb 	bl	801bb90 <memp_free>
        result = ERR_OK;
 802399a:	4620      	mov	r0, r4
 802399c:	e76d      	b.n	802387a <etharp_query+0x76>
 802399e:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 80239a0:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 80239a4:	e769      	b.n	802387a <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80239a6:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80239a8:	2301      	movs	r3, #1
 80239aa:	4c0d      	ldr	r4, [pc, #52]	; (80239e0 <etharp_query+0x1dc>)
 80239ac:	4659      	mov	r1, fp
 80239ae:	4628      	mov	r0, r5
 80239b0:	e9cd a302 	strd	sl, r3, [sp, #8]
 80239b4:	e9cd 2400 	strd	r2, r4, [sp]
 80239b8:	465b      	mov	r3, fp
 80239ba:	4a0a      	ldr	r2, [pc, #40]	; (80239e4 <etharp_query+0x1e0>)
 80239bc:	f7ff fd14 	bl	80233e8 <etharp_raw>
    if (q == NULL) {
 80239c0:	e75b      	b.n	802387a <etharp_query+0x76>
    return ERR_ARG;
 80239c2:	f06f 000f 	mvn.w	r0, #15
 80239c6:	e758      	b.n	802387a <etharp_query+0x76>
        result = ERR_OK;
 80239c8:	4620      	mov	r0, r4
          r->next = new_entry;
 80239ca:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80239cc:	e755      	b.n	802387a <etharp_query+0x76>
      result = ERR_MEM;
 80239ce:	f04f 30ff 	mov.w	r0, #4294967295
 80239d2:	e752      	b.n	802387a <etharp_query+0x76>
        pbuf_free(p);
 80239d4:	4630      	mov	r0, r6
 80239d6:	f7f8 fdf3 	bl	801c5c0 <pbuf_free>
        result = ERR_MEM;
 80239da:	f04f 30ff 	mov.w	r0, #4294967295
 80239de:	e74c      	b.n	802387a <etharp_query+0x76>
 80239e0:	080474d0 	.word	0x080474d0
 80239e4:	080474c8 	.word	0x080474c8
 80239e8:	2002e7f0 	.word	0x2002e7f0
 80239ec:	08046f98 	.word	0x08046f98
 80239f0:	08047110 	.word	0x08047110
 80239f4:	0802b44c 	.word	0x0802b44c
 80239f8:	2002e4f0 	.word	0x2002e4f0
 80239fc:	08047120 	.word	0x08047120

08023a00 <etharp_output>:
{
 8023a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a04:	460f      	mov	r7, r1
 8023a06:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023a08:	4605      	mov	r5, r0
{
 8023a0a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023a0c:	2800      	cmp	r0, #0
 8023a0e:	f000 8086 	beq.w	8023b1e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023a12:	2f00      	cmp	r7, #0
 8023a14:	d072      	beq.n	8023afc <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023a16:	2e00      	cmp	r6, #0
 8023a18:	d079      	beq.n	8023b0e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8023a1a:	4629      	mov	r1, r5
 8023a1c:	6830      	ldr	r0, [r6, #0]
 8023a1e:	f000 fba7 	bl	8024170 <ip4_addr_isbroadcast_u32>
 8023a22:	2800      	cmp	r0, #0
 8023a24:	d160      	bne.n	8023ae8 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023a26:	6833      	ldr	r3, [r6, #0]
 8023a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8023a2c:	2ae0      	cmp	r2, #224	; 0xe0
 8023a2e:	d03b      	beq.n	8023aa8 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a30:	686a      	ldr	r2, [r5, #4]
 8023a32:	68a9      	ldr	r1, [r5, #8]
 8023a34:	405a      	eors	r2, r3
 8023a36:	420a      	tst	r2, r1
 8023a38:	d009      	beq.n	8023a4e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 8023a3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023a40:	4293      	cmp	r3, r2
 8023a42:	d004      	beq.n	8023a4e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023a44:	68eb      	ldr	r3, [r5, #12]
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d07b      	beq.n	8023b42 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 8023a4a:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023a4e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8023b64 <etharp_output+0x164>
 8023a52:	4b3d      	ldr	r3, [pc, #244]	; (8023b48 <etharp_output+0x148>)
 8023a54:	f898 2000 	ldrb.w	r2, [r8]
 8023a58:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8023a5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8023a60:	7d19      	ldrb	r1, [r3, #20]
 8023a62:	2901      	cmp	r1, #1
 8023a64:	d902      	bls.n	8023a6c <etharp_output+0x6c>
 8023a66:	6899      	ldr	r1, [r3, #8]
 8023a68:	42a9      	cmp	r1, r5
 8023a6a:	d063      	beq.n	8023b34 <etharp_output+0x134>
 8023a6c:	4c36      	ldr	r4, [pc, #216]	; (8023b48 <etharp_output+0x148>)
{
 8023a6e:	2300      	movs	r3, #0
 8023a70:	e003      	b.n	8023a7a <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023a72:	2b20      	cmp	r3, #32
 8023a74:	f104 0418 	add.w	r4, r4, #24
 8023a78:	d038      	beq.n	8023aec <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023a7a:	f894 c014 	ldrb.w	ip, [r4, #20]
 8023a7e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023a80:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023a82:	f1bc 0f01 	cmp.w	ip, #1
 8023a86:	d9f4      	bls.n	8023a72 <etharp_output+0x72>
 8023a88:	68a0      	ldr	r0, [r4, #8]
 8023a8a:	42a8      	cmp	r0, r5
 8023a8c:	d1f1      	bne.n	8023a72 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 8023a8e:	6860      	ldr	r0, [r4, #4]
 8023a90:	6831      	ldr	r1, [r6, #0]
 8023a92:	4281      	cmp	r1, r0
 8023a94:	d1ed      	bne.n	8023a72 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8023a96:	4639      	mov	r1, r7
 8023a98:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 8023a9a:	f888 2000 	strb.w	r2, [r8]
}
 8023a9e:	b004      	add	sp, #16
 8023aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8023aa4:	f7ff bd14 	b.w	80234d0 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023aa8:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023aaa:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023aac:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023aae:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023ab2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023ab6:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023ab8:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023aba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023abe:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023ac2:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8023ac6:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023ac8:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023acc:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023ad0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8023ad4:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8023ad8:	4639      	mov	r1, r7
 8023ada:	4628      	mov	r0, r5
 8023adc:	9400      	str	r4, [sp, #0]
 8023ade:	f001 f8c7 	bl	8024c70 <ethernet_output>
}
 8023ae2:	b004      	add	sp, #16
 8023ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8023ae8:	4b18      	ldr	r3, [pc, #96]	; (8023b4c <etharp_output+0x14c>)
 8023aea:	e7f1      	b.n	8023ad0 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8023aec:	463a      	mov	r2, r7
 8023aee:	4631      	mov	r1, r6
 8023af0:	4628      	mov	r0, r5
}
 8023af2:	b004      	add	sp, #16
 8023af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8023af8:	f7ff be84 	b.w	8023804 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023afc:	4b14      	ldr	r3, [pc, #80]	; (8023b50 <etharp_output+0x150>)
 8023afe:	f240 321f 	movw	r2, #799	; 0x31f
 8023b02:	4914      	ldr	r1, [pc, #80]	; (8023b54 <etharp_output+0x154>)
 8023b04:	4814      	ldr	r0, [pc, #80]	; (8023b58 <etharp_output+0x158>)
 8023b06:	f002 fe25 	bl	8026754 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023b0a:	2e00      	cmp	r6, #0
 8023b0c:	d185      	bne.n	8023a1a <etharp_output+0x1a>
 8023b0e:	4b10      	ldr	r3, [pc, #64]	; (8023b50 <etharp_output+0x150>)
 8023b10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023b14:	4911      	ldr	r1, [pc, #68]	; (8023b5c <etharp_output+0x15c>)
 8023b16:	4810      	ldr	r0, [pc, #64]	; (8023b58 <etharp_output+0x158>)
 8023b18:	f002 fe1c 	bl	8026754 <iprintf>
 8023b1c:	e77d      	b.n	8023a1a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023b1e:	4b0c      	ldr	r3, [pc, #48]	; (8023b50 <etharp_output+0x150>)
 8023b20:	f240 321e 	movw	r2, #798	; 0x31e
 8023b24:	490e      	ldr	r1, [pc, #56]	; (8023b60 <etharp_output+0x160>)
 8023b26:	480c      	ldr	r0, [pc, #48]	; (8023b58 <etharp_output+0x158>)
 8023b28:	f002 fe14 	bl	8026754 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023b2c:	2f00      	cmp	r7, #0
 8023b2e:	f47f af72 	bne.w	8023a16 <etharp_output+0x16>
 8023b32:	e7e3      	b.n	8023afc <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023b34:	685b      	ldr	r3, [r3, #4]
 8023b36:	6831      	ldr	r1, [r6, #0]
 8023b38:	4299      	cmp	r1, r3
 8023b3a:	d197      	bne.n	8023a6c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023b3c:	4639      	mov	r1, r7
 8023b3e:	4628      	mov	r0, r5
 8023b40:	e7ad      	b.n	8023a9e <etharp_output+0x9e>
            return ERR_RTE;
 8023b42:	f06f 0003 	mvn.w	r0, #3
 8023b46:	e7cc      	b.n	8023ae2 <etharp_output+0xe2>
 8023b48:	2002e4f0 	.word	0x2002e4f0
 8023b4c:	080474c8 	.word	0x080474c8
 8023b50:	08046f98 	.word	0x08046f98
 8023b54:	0804713c 	.word	0x0804713c
 8023b58:	0802b44c 	.word	0x0802b44c
 8023b5c:	080470cc 	.word	0x080470cc
 8023b60:	0802e6ac 	.word	0x0802e6ac
 8023b64:	2002e7f0 	.word	0x2002e7f0

08023b68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023b68:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b6a:	2301      	movs	r3, #1
{
 8023b6c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b6e:	4c07      	ldr	r4, [pc, #28]	; (8023b8c <etharp_request+0x24>)
 8023b70:	4a07      	ldr	r2, [pc, #28]	; (8023b90 <etharp_request+0x28>)
 8023b72:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023b74:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023b76:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023b7a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8023b7e:	9400      	str	r4, [sp, #0]
 8023b80:	4619      	mov	r1, r3
 8023b82:	f7ff fc31 	bl	80233e8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8023b86:	b004      	add	sp, #16
 8023b88:	bd10      	pop	{r4, pc}
 8023b8a:	bf00      	nop
 8023b8c:	080474d0 	.word	0x080474d0
 8023b90:	080474c8 	.word	0x080474c8

08023b94 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b96:	460e      	mov	r6, r1
 8023b98:	b087      	sub	sp, #28
 8023b9a:	4617      	mov	r7, r2
 8023b9c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023b9e:	2124      	movs	r1, #36	; 0x24
 8023ba0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023ba4:	2022      	movs	r0, #34	; 0x22
 8023ba6:	f7f8 fb39 	bl	801c21c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8023baa:	b3a8      	cbz	r0, 8023c18 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023bac:	8943      	ldrh	r3, [r0, #10]
 8023bae:	4605      	mov	r5, r0
 8023bb0:	2b23      	cmp	r3, #35	; 0x23
 8023bb2:	d933      	bls.n	8023c1c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023bb4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8023bb6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8023bb8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8023bba:	2600      	movs	r6, #0
  icmphdr->code = code;
 8023bbc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8023bbe:	7126      	strb	r6, [r4, #4]
 8023bc0:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8023bc2:	71a6      	strb	r6, [r4, #6]
 8023bc4:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023bc6:	6818      	ldr	r0, [r3, #0]
 8023bc8:	6859      	ldr	r1, [r3, #4]
 8023bca:	689a      	ldr	r2, [r3, #8]
 8023bcc:	68df      	ldr	r7, [r3, #12]
 8023bce:	60a0      	str	r0, [r4, #8]
 8023bd0:	6167      	str	r7, [r4, #20]
 8023bd2:	60e1      	str	r1, [r4, #12]
 8023bd4:	6122      	str	r2, [r4, #16]
 8023bd6:	6918      	ldr	r0, [r3, #16]
 8023bd8:	6959      	ldr	r1, [r3, #20]
 8023bda:	699a      	ldr	r2, [r3, #24]
 8023bdc:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023bde:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023be0:	61e1      	str	r1, [r4, #28]
 8023be2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8023be4:	68db      	ldr	r3, [r3, #12]
 8023be6:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8023be8:	f000 f8e6 	bl	8023db8 <ip4_route>
#endif
  if (netif != NULL) {
 8023bec:	4607      	mov	r7, r0
 8023bee:	b180      	cbz	r0, 8023c12 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023bf0:	8969      	ldrh	r1, [r5, #10]
 8023bf2:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8023bf4:	70a6      	strb	r6, [r4, #2]
 8023bf6:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023bf8:	f7f7 fa4e 	bl	801b098 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023bfc:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8023bfe:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023c00:	aa05      	add	r2, sp, #20
 8023c02:	4631      	mov	r1, r6
 8023c04:	4628      	mov	r0, r5
 8023c06:	9600      	str	r6, [sp, #0]
 8023c08:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8023c0c:	23ff      	movs	r3, #255	; 0xff
 8023c0e:	f000 fa9d 	bl	802414c <ip4_output_if>
  }
  pbuf_free(q);
 8023c12:	4628      	mov	r0, r5
 8023c14:	f7f8 fcd4 	bl	801c5c0 <pbuf_free>
}
 8023c18:	b007      	add	sp, #28
 8023c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023c1c:	4b03      	ldr	r3, [pc, #12]	; (8023c2c <icmp_send_response+0x98>)
 8023c1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8023c22:	4903      	ldr	r1, [pc, #12]	; (8023c30 <icmp_send_response+0x9c>)
 8023c24:	4803      	ldr	r0, [pc, #12]	; (8023c34 <icmp_send_response+0xa0>)
 8023c26:	f002 fd95 	bl	8026754 <iprintf>
 8023c2a:	e7c3      	b.n	8023bb4 <icmp_send_response+0x20>
 8023c2c:	08047148 	.word	0x08047148
 8023c30:	08047180 	.word	0x08047180
 8023c34:	0802b44c 	.word	0x0802b44c

08023c38 <icmp_input>:
{
 8023c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 8023c3c:	4f54      	ldr	r7, [pc, #336]	; (8023d90 <icmp_input+0x158>)
{
 8023c3e:	b086      	sub	sp, #24
 8023c40:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8023c42:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8023c46:	f898 4000 	ldrb.w	r4, [r8]
 8023c4a:	f004 040f 	and.w	r4, r4, #15
 8023c4e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8023c50:	2c13      	cmp	r4, #19
 8023c52:	d913      	bls.n	8023c7c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8023c54:	8943      	ldrh	r3, [r0, #10]
 8023c56:	2b03      	cmp	r3, #3
 8023c58:	d910      	bls.n	8023c7c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8023c5a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8023c5c:	781b      	ldrb	r3, [r3, #0]
 8023c5e:	2b08      	cmp	r3, #8
 8023c60:	d10c      	bne.n	8023c7c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023c62:	6978      	ldr	r0, [r7, #20]
 8023c64:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8023c68:	2be0      	cmp	r3, #224	; 0xe0
 8023c6a:	d007      	beq.n	8023c7c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8023c6c:	460e      	mov	r6, r1
 8023c6e:	6839      	ldr	r1, [r7, #0]
 8023c70:	f000 fa7e 	bl	8024170 <ip4_addr_isbroadcast_u32>
 8023c74:	b910      	cbnz	r0, 8023c7c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023c76:	892b      	ldrh	r3, [r5, #8]
 8023c78:	2b07      	cmp	r3, #7
 8023c7a:	d805      	bhi.n	8023c88 <icmp_input+0x50>
  pbuf_free(p);
 8023c7c:	4628      	mov	r0, r5
}
 8023c7e:	b006      	add	sp, #24
 8023c80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8023c84:	f7f8 bc9c 	b.w	801c5c0 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8023c88:	4628      	mov	r0, r5
 8023c8a:	f7f7 fa0b 	bl	801b0a4 <inet_chksum_pbuf>
 8023c8e:	2800      	cmp	r0, #0
 8023c90:	d1f4      	bne.n	8023c7c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c92:	f104 010e 	add.w	r1, r4, #14
 8023c96:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8023c98:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023c9c:	9105      	str	r1, [sp, #20]
 8023c9e:	f7f8 fbcf 	bl	801c440 <pbuf_add_header>
 8023ca2:	9905      	ldr	r1, [sp, #20]
 8023ca4:	2800      	cmp	r0, #0
 8023ca6:	d058      	beq.n	8023d5a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8023ca8:	892b      	ldrh	r3, [r5, #8]
 8023caa:	eb03 0109 	add.w	r1, r3, r9
 8023cae:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8023cb0:	428b      	cmp	r3, r1
 8023cb2:	d8e3      	bhi.n	8023c7c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023cb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023cb8:	200e      	movs	r0, #14
 8023cba:	f7f8 faaf 	bl	801c21c <pbuf_alloc>
        if (r == NULL) {
 8023cbe:	4682      	mov	sl, r0
 8023cc0:	2800      	cmp	r0, #0
 8023cc2:	d0db      	beq.n	8023c7c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8023cc4:	8942      	ldrh	r2, [r0, #10]
 8023cc6:	f104 0308 	add.w	r3, r4, #8
 8023cca:	429a      	cmp	r2, r3
 8023ccc:	d351      	bcc.n	8023d72 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 8023cce:	4641      	mov	r1, r8
 8023cd0:	4622      	mov	r2, r4
 8023cd2:	6840      	ldr	r0, [r0, #4]
 8023cd4:	f001 fd78 	bl	80257c8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8023cd8:	4621      	mov	r1, r4
 8023cda:	4650      	mov	r0, sl
 8023cdc:	f7f8 fbe4 	bl	801c4a8 <pbuf_remove_header>
 8023ce0:	2800      	cmp	r0, #0
 8023ce2:	d14a      	bne.n	8023d7a <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8023ce4:	4629      	mov	r1, r5
 8023ce6:	4650      	mov	r0, sl
 8023ce8:	f7f8 fcf2 	bl	801c6d0 <pbuf_copy>
 8023cec:	2800      	cmp	r0, #0
 8023cee:	d140      	bne.n	8023d72 <icmp_input+0x13a>
        pbuf_free(p);
 8023cf0:	4628      	mov	r0, r5
 8023cf2:	4655      	mov	r5, sl
 8023cf4:	f7f8 fc64 	bl	801c5c0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8023cf8:	4621      	mov	r1, r4
 8023cfa:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023cfc:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8023d00:	f7f8 fb9e 	bl	801c440 <pbuf_add_header>
 8023d04:	2800      	cmp	r0, #0
 8023d06:	d1b9      	bne.n	8023c7c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023d08:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023d0a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8023d0e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d10:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8023d12:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023d14:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8023d16:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023d18:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023d1a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023d1e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d22:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023d24:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8023d26:	bf8c      	ite	hi
 8023d28:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8023d2a:	3308      	addls	r3, #8
 8023d2c:	b29b      	uxth	r3, r3
 8023d2e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023d32:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8023d36:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023d38:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023d3c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d3e:	f7f7 f9ab 	bl	801b098 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023d42:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8023d44:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023d46:	4643      	mov	r3, r8
 8023d48:	4912      	ldr	r1, [pc, #72]	; (8023d94 <icmp_input+0x15c>)
 8023d4a:	4628      	mov	r0, r5
 8023d4c:	9700      	str	r7, [sp, #0]
 8023d4e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8023d52:	463a      	mov	r2, r7
 8023d54:	f000 f9fa 	bl	802414c <ip4_output_if>
  pbuf_free(p);
 8023d58:	e790      	b.n	8023c7c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023d5a:	4628      	mov	r0, r5
 8023d5c:	f7f8 fba4 	bl	801c4a8 <pbuf_remove_header>
 8023d60:	2800      	cmp	r0, #0
 8023d62:	d0c9      	beq.n	8023cf8 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023d64:	4b0c      	ldr	r3, [pc, #48]	; (8023d98 <icmp_input+0x160>)
 8023d66:	22c7      	movs	r2, #199	; 0xc7
 8023d68:	490c      	ldr	r1, [pc, #48]	; (8023d9c <icmp_input+0x164>)
 8023d6a:	480d      	ldr	r0, [pc, #52]	; (8023da0 <icmp_input+0x168>)
 8023d6c:	f002 fcf2 	bl	8026754 <iprintf>
          goto icmperr;
 8023d70:	e784      	b.n	8023c7c <icmp_input+0x44>
          pbuf_free(r);
 8023d72:	4650      	mov	r0, sl
 8023d74:	f7f8 fc24 	bl	801c5c0 <pbuf_free>
          goto icmperr;
 8023d78:	e780      	b.n	8023c7c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023d7a:	4b07      	ldr	r3, [pc, #28]	; (8023d98 <icmp_input+0x160>)
 8023d7c:	22b6      	movs	r2, #182	; 0xb6
 8023d7e:	4909      	ldr	r1, [pc, #36]	; (8023da4 <icmp_input+0x16c>)
 8023d80:	4807      	ldr	r0, [pc, #28]	; (8023da0 <icmp_input+0x168>)
 8023d82:	f002 fce7 	bl	8026754 <iprintf>
          pbuf_free(r);
 8023d86:	4650      	mov	r0, sl
 8023d88:	f7f8 fc1a 	bl	801c5c0 <pbuf_free>
          goto icmperr;
 8023d8c:	e776      	b.n	8023c7c <icmp_input+0x44>
 8023d8e:	bf00      	nop
 8023d90:	2001f2a8 	.word	0x2001f2a8
 8023d94:	2001f2bc 	.word	0x2001f2bc
 8023d98:	08047148 	.word	0x08047148
 8023d9c:	080471e4 	.word	0x080471e4
 8023da0:	0802b44c 	.word	0x0802b44c
 8023da4:	080471ac 	.word	0x080471ac

08023da8 <icmp_dest_unreach>:
{
 8023da8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8023daa:	2103      	movs	r1, #3
 8023dac:	f7ff bef2 	b.w	8023b94 <icmp_send_response>

08023db0 <icmp_time_exceeded>:
{
 8023db0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8023db2:	210b      	movs	r1, #11
 8023db4:	f7ff beee 	b.w	8023b94 <icmp_send_response>

08023db8 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023db8:	4b19      	ldr	r3, [pc, #100]	; (8023e20 <ip4_route+0x68>)
{
 8023dba:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8023dbc:	681b      	ldr	r3, [r3, #0]
 8023dbe:	b1ab      	cbz	r3, 8023dec <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023dc0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023dc4:	07d4      	lsls	r4, r2, #31
 8023dc6:	d5f9      	bpl.n	8023dbc <ip4_route+0x4>
 8023dc8:	0751      	lsls	r1, r2, #29
 8023dca:	d5f7      	bpl.n	8023dbc <ip4_route+0x4>
 8023dcc:	6859      	ldr	r1, [r3, #4]
 8023dce:	2900      	cmp	r1, #0
 8023dd0:	d0f4      	beq.n	8023dbc <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023dd2:	6804      	ldr	r4, [r0, #0]
 8023dd4:	689d      	ldr	r5, [r3, #8]
 8023dd6:	4061      	eors	r1, r4
 8023dd8:	4229      	tst	r1, r5
 8023dda:	d004      	beq.n	8023de6 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8023ddc:	0792      	lsls	r2, r2, #30
 8023dde:	d4ed      	bmi.n	8023dbc <ip4_route+0x4>
 8023de0:	68da      	ldr	r2, [r3, #12]
 8023de2:	4294      	cmp	r4, r2
 8023de4:	d1ea      	bne.n	8023dbc <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8023de6:	4618      	mov	r0, r3
 8023de8:	bc30      	pop	{r4, r5}
 8023dea:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8023dec:	4b0d      	ldr	r3, [pc, #52]	; (8023e24 <ip4_route+0x6c>)
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d0f8      	beq.n	8023de6 <ip4_route+0x2e>
 8023df4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8023df8:	f002 0205 	and.w	r2, r2, #5
 8023dfc:	2a05      	cmp	r2, #5
 8023dfe:	d108      	bne.n	8023e12 <ip4_route+0x5a>
 8023e00:	685a      	ldr	r2, [r3, #4]
 8023e02:	b152      	cbz	r2, 8023e1a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023e04:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8023e06:	2a7f      	cmp	r2, #127	; 0x7f
 8023e08:	bf08      	it	eq
 8023e0a:	2300      	moveq	r3, #0
}
 8023e0c:	bc30      	pop	{r4, r5}
 8023e0e:	4618      	mov	r0, r3
 8023e10:	4770      	bx	lr
    return NULL;
 8023e12:	2300      	movs	r3, #0
}
 8023e14:	bc30      	pop	{r4, r5}
 8023e16:	4618      	mov	r0, r3
 8023e18:	4770      	bx	lr
    return NULL;
 8023e1a:	4613      	mov	r3, r2
 8023e1c:	e7e3      	b.n	8023de6 <ip4_route+0x2e>
 8023e1e:	bf00      	nop
 8023e20:	2002e438 	.word	0x2002e438
 8023e24:	2002e434 	.word	0x2002e434

08023e28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023e2c:	6847      	ldr	r7, [r0, #4]
{
 8023e2e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8023e30:	783b      	ldrb	r3, [r7, #0]
 8023e32:	091a      	lsrs	r2, r3, #4
 8023e34:	2a04      	cmp	r2, #4
 8023e36:	f040 80a8 	bne.w	8023f8a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e3a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e3e:	8878      	ldrh	r0, [r7, #2]
 8023e40:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e42:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e46:	f7f6 fb7f 	bl	801a548 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023e4a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023e4c:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023e4e:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8023e50:	4283      	cmp	r3, r0
 8023e52:	f200 80a0 	bhi.w	8023f96 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023e56:	8963      	ldrh	r3, [r4, #10]
 8023e58:	42ab      	cmp	r3, r5
 8023e5a:	f0c0 8096 	bcc.w	8023f8a <ip4_input+0x162>
 8023e5e:	8923      	ldrh	r3, [r4, #8]
 8023e60:	4543      	cmp	r3, r8
 8023e62:	f0c0 8092 	bcc.w	8023f8a <ip4_input+0x162>
 8023e66:	2d13      	cmp	r5, #19
 8023e68:	f240 808f 	bls.w	8023f8a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023e6c:	693b      	ldr	r3, [r7, #16]
 8023e6e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8024010 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023e76:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e7a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023e7c:	68f8      	ldr	r0, [r7, #12]
 8023e7e:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023e82:	d073      	beq.n	8023f6c <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023e84:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8023e88:	07d2      	lsls	r2, r2, #31
 8023e8a:	d503      	bpl.n	8023e94 <ip4_input+0x6c>
 8023e8c:	6872      	ldr	r2, [r6, #4]
 8023e8e:	2a00      	cmp	r2, #0
 8023e90:	f040 8094 	bne.w	8023fbc <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023e94:	b2db      	uxtb	r3, r3
 8023e96:	2b7f      	cmp	r3, #127	; 0x7f
 8023e98:	d06c      	beq.n	8023f74 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023e9a:	4b5c      	ldr	r3, [pc, #368]	; (802400c <ip4_input+0x1e4>)
 8023e9c:	681d      	ldr	r5, [r3, #0]
 8023e9e:	b935      	cbnz	r5, 8023eae <ip4_input+0x86>
 8023ea0:	e068      	b.n	8023f74 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023ea2:	f000 f965 	bl	8024170 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023ea6:	b980      	cbnz	r0, 8023eca <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8023ea8:	682d      	ldr	r5, [r5, #0]
 8023eaa:	2d00      	cmp	r5, #0
 8023eac:	d062      	beq.n	8023f74 <ip4_input+0x14c>
          if (netif == inp) {
 8023eae:	42ae      	cmp	r6, r5
 8023eb0:	d0fa      	beq.n	8023ea8 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023eb2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8023eb6:	07db      	lsls	r3, r3, #31
 8023eb8:	d5f6      	bpl.n	8023ea8 <ip4_input+0x80>
 8023eba:	686b      	ldr	r3, [r5, #4]
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d0f3      	beq.n	8023ea8 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023ec0:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023ec4:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023ec6:	4283      	cmp	r3, r0
 8023ec8:	d1eb      	bne.n	8023ea2 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023eca:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023ece:	2800      	cmp	r0, #0
 8023ed0:	d157      	bne.n	8023f82 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023ed2:	88fb      	ldrh	r3, [r7, #6]
 8023ed4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8023ed8:	b133      	cbz	r3, 8023ee8 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023eda:	4620      	mov	r0, r4
 8023edc:	f000 fb1c 	bl	8024518 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023ee0:	4604      	mov	r4, r0
 8023ee2:	2800      	cmp	r0, #0
 8023ee4:	d054      	beq.n	8023f90 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023ee6:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8023ee8:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8023eec:	4631      	mov	r1, r6
 8023eee:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8023ef0:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023ef4:	783b      	ldrb	r3, [r7, #0]
 8023ef6:	f003 030f 	and.w	r3, r3, #15
 8023efa:	009b      	lsls	r3, r3, #2
 8023efc:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8023f00:	f7f8 fd9e 	bl	801ca40 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8023f04:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8023f06:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8023f08:	d024      	beq.n	8023f54 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023f0a:	4649      	mov	r1, r9
 8023f0c:	4620      	mov	r0, r4
 8023f0e:	f7f8 facb 	bl	801c4a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023f12:	7a7b      	ldrb	r3, [r7, #9]
 8023f14:	2b06      	cmp	r3, #6
 8023f16:	d065      	beq.n	8023fe4 <ip4_input+0x1bc>
 8023f18:	2b11      	cmp	r3, #17
 8023f1a:	d05e      	beq.n	8023fda <ip4_input+0x1b2>
 8023f1c:	2b01      	cmp	r3, #1
 8023f1e:	d057      	beq.n	8023fd0 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8023f20:	f1ba 0f02 	cmp.w	sl, #2
 8023f24:	d013      	beq.n	8023f4e <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023f26:	4629      	mov	r1, r5
 8023f28:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8023f2c:	f000 f920 	bl	8024170 <ip4_addr_isbroadcast_u32>
 8023f30:	b968      	cbnz	r0, 8023f4e <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023f32:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023f3a:	2be0      	cmp	r3, #224	; 0xe0
 8023f3c:	d007      	beq.n	8023f4e <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023f3e:	4649      	mov	r1, r9
 8023f40:	4620      	mov	r0, r4
 8023f42:	f7f8 fae9 	bl	801c518 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023f46:	2102      	movs	r1, #2
 8023f48:	4620      	mov	r0, r4
 8023f4a:	f7ff ff2d 	bl	8023da8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023f4e:	4620      	mov	r0, r4
 8023f50:	f7f8 fb36 	bl	801c5c0 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023f54:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8023f56:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8023f58:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8023f5c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023f60:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023f64:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8023f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023f6c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8023f70:	07d9      	lsls	r1, r3, #31
 8023f72:	d41e      	bmi.n	8023fb2 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8023f74:	7a7b      	ldrb	r3, [r7, #9]
 8023f76:	2b11      	cmp	r3, #17
 8023f78:	d039      	beq.n	8023fee <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023f7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8023f7e:	b120      	cbz	r0, 8023f8a <ip4_input+0x162>
 8023f80:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023f82:	4631      	mov	r1, r6
 8023f84:	f000 f8f4 	bl	8024170 <ip4_addr_isbroadcast_u32>
 8023f88:	b150      	cbz	r0, 8023fa0 <ip4_input+0x178>
    pbuf_free(p);
 8023f8a:	4620      	mov	r0, r4
 8023f8c:	f7f8 fb18 	bl	801c5c0 <pbuf_free>
}
 8023f90:	2000      	movs	r0, #0
 8023f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8023f96:	4601      	mov	r1, r0
 8023f98:	4620      	mov	r0, r4
 8023f9a:	f7f8 f9f9 	bl	801c390 <pbuf_realloc>
 8023f9e:	e75a      	b.n	8023e56 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023fa0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8023fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023fa8:	2be0      	cmp	r3, #224	; 0xe0
 8023faa:	d0ee      	beq.n	8023f8a <ip4_input+0x162>
  if (netif == NULL) {
 8023fac:	2d00      	cmp	r5, #0
 8023fae:	d190      	bne.n	8023ed2 <ip4_input+0xaa>
 8023fb0:	e7eb      	b.n	8023f8a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023fb2:	6873      	ldr	r3, [r6, #4]
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d0dd      	beq.n	8023f74 <ip4_input+0x14c>
 8023fb8:	4635      	mov	r5, r6
 8023fba:	e788      	b.n	8023ece <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023fbc:	4293      	cmp	r3, r2
 8023fbe:	d0fb      	beq.n	8023fb8 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023fc0:	4618      	mov	r0, r3
 8023fc2:	4631      	mov	r1, r6
 8023fc4:	f000 f8d4 	bl	8024170 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023fc8:	b9e0      	cbnz	r0, 8024004 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023fca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8023fce:	e761      	b.n	8023e94 <ip4_input+0x6c>
        icmp_input(p, inp);
 8023fd0:	4631      	mov	r1, r6
 8023fd2:	4620      	mov	r0, r4
 8023fd4:	f7ff fe30 	bl	8023c38 <icmp_input>
        break;
 8023fd8:	e7bc      	b.n	8023f54 <ip4_input+0x12c>
        udp_input(p, inp);
 8023fda:	4631      	mov	r1, r6
 8023fdc:	4620      	mov	r0, r4
 8023fde:	f7fd f8a1 	bl	8021124 <udp_input>
        break;
 8023fe2:	e7b7      	b.n	8023f54 <ip4_input+0x12c>
        tcp_input(p, inp);
 8023fe4:	4631      	mov	r1, r6
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	f7fa fefc 	bl	801ede4 <tcp_input>
        break;
 8023fec:	e7b2      	b.n	8023f54 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8023fee:	eb07 0309 	add.w	r3, r7, r9
 8023ff2:	885b      	ldrh	r3, [r3, #2]
 8023ff4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8023ff8:	d1bf      	bne.n	8023f7a <ip4_input+0x152>
 8023ffa:	4635      	mov	r5, r6
  if (netif == NULL) {
 8023ffc:	2d00      	cmp	r5, #0
 8023ffe:	f47f af68 	bne.w	8023ed2 <ip4_input+0xaa>
 8024002:	e7c2      	b.n	8023f8a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8024004:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8024008:	4635      	mov	r5, r6
 802400a:	e760      	b.n	8023ece <ip4_input+0xa6>
 802400c:	2002e438 	.word	0x2002e438
 8024010:	2001f2a8 	.word	0x2001f2a8

08024014 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024018:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802401a:	7b83      	ldrb	r3, [r0, #14]
{
 802401c:	b083      	sub	sp, #12
 802401e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024020:	2b01      	cmp	r3, #1
{
 8024022:	4689      	mov	r9, r1
 8024024:	4617      	mov	r7, r2
 8024026:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802402a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 802402e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024032:	d158      	bne.n	80240e6 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8024034:	2f00      	cmp	r7, #0
 8024036:	d05f      	beq.n	80240f8 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8024038:	2114      	movs	r1, #20
 802403a:	4620      	mov	r0, r4
 802403c:	f7f8 fa00 	bl	801c440 <pbuf_add_header>
 8024040:	2800      	cmp	r0, #0
 8024042:	d174      	bne.n	802412e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024044:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8024046:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024048:	2b13      	cmp	r3, #19
 802404a:	d95d      	bls.n	8024108 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802404c:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8024050:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8024054:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8024058:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 802405a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 802405c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 802405e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8024060:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8024062:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8024066:	fa10 f383 	uxtah	r3, r0, r3
 802406a:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 802406c:	ea4f 252a 	mov.w	r5, sl, asr #8
 8024070:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8024074:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8024078:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802407a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8024148 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802407e:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024080:	8920      	ldrh	r0, [r4, #8]
 8024082:	f7f6 fa61 	bl	801a548 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8024086:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8024088:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802408a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 802408c:	71b3      	strb	r3, [r6, #6]
 802408e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8024090:	f8ba 0000 	ldrh.w	r0, [sl]
 8024094:	f7f6 fa58 	bl	801a548 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024098:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 802409c:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802409e:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 80240a0:	3201      	adds	r2, #1
 80240a2:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 80240a6:	f1b9 0f00 	cmp.w	r9, #0
 80240aa:	d035      	beq.n	8024118 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80240ac:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80240b0:	fa13 f382 	uxtah	r3, r3, r2
 80240b4:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80240b6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80240ba:	b29a      	uxth	r2, r3
 80240bc:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 80240c0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 80240c4:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80240c6:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80240c8:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 80240cc:	b113      	cbz	r3, 80240d4 <ip4_output_if_src+0xc0>
 80240ce:	8922      	ldrh	r2, [r4, #8]
 80240d0:	429a      	cmp	r2, r3
 80240d2:	d824      	bhi.n	802411e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80240d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80240d8:	463a      	mov	r2, r7
 80240da:	4621      	mov	r1, r4
 80240dc:	4640      	mov	r0, r8
 80240de:	4798      	blx	r3
}
 80240e0:	b003      	add	sp, #12
 80240e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80240e6:	4b13      	ldr	r3, [pc, #76]	; (8024134 <ip4_output_if_src+0x120>)
 80240e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80240ec:	4912      	ldr	r1, [pc, #72]	; (8024138 <ip4_output_if_src+0x124>)
 80240ee:	4813      	ldr	r0, [pc, #76]	; (802413c <ip4_output_if_src+0x128>)
 80240f0:	f002 fb30 	bl	8026754 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 80240f4:	2f00      	cmp	r7, #0
 80240f6:	d19f      	bne.n	8024038 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 80240f8:	8963      	ldrh	r3, [r4, #10]
 80240fa:	2b13      	cmp	r3, #19
 80240fc:	d917      	bls.n	802412e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80240fe:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8024100:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024102:	691b      	ldr	r3, [r3, #16]
 8024104:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8024106:	e7df      	b.n	80240c8 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024108:	4b0a      	ldr	r3, [pc, #40]	; (8024134 <ip4_output_if_src+0x120>)
 802410a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802410e:	490c      	ldr	r1, [pc, #48]	; (8024140 <ip4_output_if_src+0x12c>)
 8024110:	480a      	ldr	r0, [pc, #40]	; (802413c <ip4_output_if_src+0x128>)
 8024112:	f002 fb1f 	bl	8026754 <iprintf>
 8024116:	e799      	b.n	802404c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024118:	4a0a      	ldr	r2, [pc, #40]	; (8024144 <ip4_output_if_src+0x130>)
 802411a:	6812      	ldr	r2, [r2, #0]
 802411c:	e7c8      	b.n	80240b0 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 802411e:	463a      	mov	r2, r7
 8024120:	4641      	mov	r1, r8
 8024122:	4620      	mov	r0, r4
 8024124:	f000 fc36 	bl	8024994 <ip4_frag>
}
 8024128:	b003      	add	sp, #12
 802412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 802412e:	f06f 0001 	mvn.w	r0, #1
 8024132:	e7d5      	b.n	80240e0 <ip4_output_if_src+0xcc>
 8024134:	08047218 	.word	0x08047218
 8024138:	0804724c 	.word	0x0804724c
 802413c:	0802b44c 	.word	0x0802b44c
 8024140:	08047258 	.word	0x08047258
 8024144:	080472d0 	.word	0x080472d0
 8024148:	2002e7f2 	.word	0x2002e7f2

0802414c <ip4_output_if>:
{
 802414c:	b4f0      	push	{r4, r5, r6, r7}
 802414e:	9c06      	ldr	r4, [sp, #24]
 8024150:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8024154:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024158:	b11a      	cbz	r2, 8024162 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 802415a:	b109      	cbz	r1, 8024160 <ip4_output_if+0x14>
 802415c:	680f      	ldr	r7, [r1, #0]
 802415e:	b907      	cbnz	r7, 8024162 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8024160:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024162:	9504      	str	r5, [sp, #16]
 8024164:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8024168:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802416a:	f7ff bf53 	b.w	8024014 <ip4_output_if_src>
 802416e:	bf00      	nop

08024170 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8024170:	1e43      	subs	r3, r0, #1
 8024172:	3303      	adds	r3, #3
 8024174:	d814      	bhi.n	80241a0 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8024176:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 802417a:	f013 0302 	ands.w	r3, r3, #2
 802417e:	d00d      	beq.n	802419c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8024180:	684b      	ldr	r3, [r1, #4]
 8024182:	4283      	cmp	r3, r0
 8024184:	d00f      	beq.n	80241a6 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8024186:	688a      	ldr	r2, [r1, #8]
 8024188:	4043      	eors	r3, r0
 802418a:	4213      	tst	r3, r2
 802418c:	d10b      	bne.n	80241a6 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802418e:	43d3      	mvns	r3, r2
 8024190:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8024194:	1ac3      	subs	r3, r0, r3
 8024196:	fab3 f383 	clz	r3, r3
 802419a:	095b      	lsrs	r3, r3, #5
  }
}
 802419c:	4618      	mov	r0, r3
 802419e:	4770      	bx	lr
    return 1;
 80241a0:	2301      	movs	r3, #1
}
 80241a2:	4618      	mov	r0, r3
 80241a4:	4770      	bx	lr
    return 0;
 80241a6:	2300      	movs	r3, #0
}
 80241a8:	4618      	mov	r0, r3
 80241aa:	4770      	bx	lr

080241ac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80241ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80241b0:	4e4f      	ldr	r6, [pc, #316]	; (80242f0 <ip4addr_aton+0x144>)
{
 80241b2:	b085      	sub	sp, #20
  c = *cp;
 80241b4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 80241b6:	5cf2      	ldrb	r2, [r6, r3]
 80241b8:	0754      	lsls	r4, r2, #29
 80241ba:	d538      	bpl.n	802422e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 80241bc:	46e9      	mov	r9, sp
 80241be:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80241c0:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 80241c4:	464f      	mov	r7, r9
    if (c == '0') {
 80241c6:	2b30      	cmp	r3, #48	; 0x30
 80241c8:	d035      	beq.n	8024236 <ip4addr_aton+0x8a>
    base = 10;
 80241ca:	210a      	movs	r1, #10
 80241cc:	1c42      	adds	r2, r0, #1
 80241ce:	2400      	movs	r4, #0
 80241d0:	e003      	b.n	80241da <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 80241d2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 80241d6:	7813      	ldrb	r3, [r2, #0]
 80241d8:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 80241da:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241de:	f103 0e0a 	add.w	lr, r3, #10
 80241e2:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 80241e6:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 80241ea:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241ee:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 80241f2:	d1ee      	bne.n	80241d2 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80241f4:	2910      	cmp	r1, #16
 80241f6:	d10d      	bne.n	8024214 <ip4addr_aton+0x68>
 80241f8:	f01c 0f44 	tst.w	ip, #68	; 0x44
 80241fc:	d00a      	beq.n	8024214 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80241fe:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8024202:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8024204:	bf0c      	ite	eq
 8024206:	2061      	moveq	r0, #97	; 0x61
 8024208:	2041      	movne	r0, #65	; 0x41
 802420a:	ebae 0e00 	sub.w	lr, lr, r0
 802420e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8024212:	e7e1      	b.n	80241d8 <ip4addr_aton+0x2c>
    if (c == '.') {
 8024214:	2b2e      	cmp	r3, #46	; 0x2e
 8024216:	d11a      	bne.n	802424e <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8024218:	4547      	cmp	r7, r8
 802421a:	d008      	beq.n	802422e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 802421c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8024220:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8024224:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8024228:	5cf2      	ldrb	r2, [r6, r3]
 802422a:	0752      	lsls	r2, r2, #29
 802422c:	d4cb      	bmi.n	80241c6 <ip4addr_aton+0x1a>
      return 0;
 802422e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8024230:	b005      	add	sp, #20
 8024232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8024236:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8024238:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 802423c:	2a58      	cmp	r2, #88	; 0x58
 802423e:	d002      	beq.n	8024246 <ip4addr_aton+0x9a>
      c = *++cp;
 8024240:	3001      	adds	r0, #1
        base = 8;
 8024242:	2108      	movs	r1, #8
 8024244:	e7c2      	b.n	80241cc <ip4addr_aton+0x20>
        c = *++cp;
 8024246:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8024248:	2110      	movs	r1, #16
        c = *++cp;
 802424a:	3002      	adds	r0, #2
 802424c:	e7be      	b.n	80241cc <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 802424e:	b113      	cbz	r3, 8024256 <ip4addr_aton+0xaa>
 8024250:	f01c 0f08 	tst.w	ip, #8
 8024254:	d0eb      	beq.n	802422e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8024256:	eba7 0009 	sub.w	r0, r7, r9
 802425a:	1080      	asrs	r0, r0, #2
 802425c:	3001      	adds	r0, #1
 802425e:	2804      	cmp	r0, #4
 8024260:	d83e      	bhi.n	80242e0 <ip4addr_aton+0x134>
 8024262:	a301      	add	r3, pc, #4	; (adr r3, 8024268 <ip4addr_aton+0xbc>)
 8024264:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8024268:	08024231 	.word	0x08024231
 802426c:	0802428d 	.word	0x0802428d
 8024270:	0802427d 	.word	0x0802427d
 8024274:	080242c1 	.word	0x080242c1
 8024278:	0802429d 	.word	0x0802429d
      if (val > 0xffffffUL) {
 802427c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8024280:	d2d5      	bcs.n	802422e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8024282:	9b00      	ldr	r3, [sp, #0]
 8024284:	2bff      	cmp	r3, #255	; 0xff
 8024286:	d8d2      	bhi.n	802422e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8024288:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 802428c:	b335      	cbz	r5, 80242dc <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802428e:	4620      	mov	r0, r4
 8024290:	f7f6 f95e 	bl	801a550 <lwip_htonl>
 8024294:	4603      	mov	r3, r0
  return 1;
 8024296:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8024298:	602b      	str	r3, [r5, #0]
 802429a:	e7c9      	b.n	8024230 <ip4addr_aton+0x84>
      if (val > 0xff) {
 802429c:	2cff      	cmp	r4, #255	; 0xff
 802429e:	d8c6      	bhi.n	802422e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80242a0:	9900      	ldr	r1, [sp, #0]
 80242a2:	29ff      	cmp	r1, #255	; 0xff
 80242a4:	d8c3      	bhi.n	802422e <ip4addr_aton+0x82>
 80242a6:	9b01      	ldr	r3, [sp, #4]
 80242a8:	2bff      	cmp	r3, #255	; 0xff
 80242aa:	d8c0      	bhi.n	802422e <ip4addr_aton+0x82>
 80242ac:	9a02      	ldr	r2, [sp, #8]
 80242ae:	2aff      	cmp	r2, #255	; 0xff
 80242b0:	d8bd      	bhi.n	802422e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80242b2:	041b      	lsls	r3, r3, #16
 80242b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80242b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80242bc:	431c      	orrs	r4, r3
      break;
 80242be:	e7e5      	b.n	802428c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 80242c0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80242c4:	d2b3      	bcs.n	802422e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80242c6:	9a00      	ldr	r2, [sp, #0]
 80242c8:	2aff      	cmp	r2, #255	; 0xff
 80242ca:	d8b0      	bhi.n	802422e <ip4addr_aton+0x82>
 80242cc:	9b01      	ldr	r3, [sp, #4]
 80242ce:	2bff      	cmp	r3, #255	; 0xff
 80242d0:	d8ad      	bhi.n	802422e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 80242d2:	041b      	lsls	r3, r3, #16
 80242d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80242d8:	431c      	orrs	r4, r3
      break;
 80242da:	e7d7      	b.n	802428c <ip4addr_aton+0xe0>
  return 1;
 80242dc:	2001      	movs	r0, #1
 80242de:	e7a7      	b.n	8024230 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 80242e0:	4b04      	ldr	r3, [pc, #16]	; (80242f4 <ip4addr_aton+0x148>)
 80242e2:	22f9      	movs	r2, #249	; 0xf9
 80242e4:	4904      	ldr	r1, [pc, #16]	; (80242f8 <ip4addr_aton+0x14c>)
 80242e6:	4805      	ldr	r0, [pc, #20]	; (80242fc <ip4addr_aton+0x150>)
 80242e8:	f002 fa34 	bl	8026754 <iprintf>
      break;
 80242ec:	e7ce      	b.n	802428c <ip4addr_aton+0xe0>
 80242ee:	bf00      	nop
 80242f0:	0804752d 	.word	0x0804752d
 80242f4:	08047288 	.word	0x08047288
 80242f8:	080472c4 	.word	0x080472c4
 80242fc:	0802b44c 	.word	0x0802b44c

08024300 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024300:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8024302:	4604      	mov	r4, r0
 8024304:	b148      	cbz	r0, 802431a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8024306:	6960      	ldr	r0, [r4, #20]
 8024308:	b108      	cbz	r0, 802430e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 802430a:	f7f8 f959 	bl	801c5c0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 802430e:	4621      	mov	r1, r4
 8024310:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8024312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8024316:	f7f7 bc3b 	b.w	801bb90 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802431a:	4b04      	ldr	r3, [pc, #16]	; (802432c <ipfrag_free_pbuf_custom+0x2c>)
 802431c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8024320:	4903      	ldr	r1, [pc, #12]	; (8024330 <ipfrag_free_pbuf_custom+0x30>)
 8024322:	4804      	ldr	r0, [pc, #16]	; (8024334 <ipfrag_free_pbuf_custom+0x34>)
 8024324:	f002 fa16 	bl	8026754 <iprintf>
 8024328:	e7ed      	b.n	8024306 <ipfrag_free_pbuf_custom+0x6>
 802432a:	bf00      	nop
 802432c:	080472d8 	.word	0x080472d8
 8024330:	08047314 	.word	0x08047314
 8024334:	0802b44c 	.word	0x0802b44c

08024338 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024338:	4281      	cmp	r1, r0
{
 802433a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802433e:	4606      	mov	r6, r0
 8024340:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024342:	d075      	beq.n	8024430 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8024344:	b147      	cbz	r7, 8024358 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024346:	683b      	ldr	r3, [r7, #0]
 8024348:	42b3      	cmp	r3, r6
 802434a:	d005      	beq.n	8024358 <ip_reass_free_complete_datagram+0x20>
 802434c:	4b40      	ldr	r3, [pc, #256]	; (8024450 <ip_reass_free_complete_datagram+0x118>)
 802434e:	22ad      	movs	r2, #173	; 0xad
 8024350:	4940      	ldr	r1, [pc, #256]	; (8024454 <ip_reass_free_complete_datagram+0x11c>)
 8024352:	4841      	ldr	r0, [pc, #260]	; (8024458 <ip_reass_free_complete_datagram+0x120>)
 8024354:	f002 f9fe 	bl	8026754 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024358:	6875      	ldr	r5, [r6, #4]
 802435a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 802435c:	889a      	ldrh	r2, [r3, #4]
 802435e:	2a00      	cmp	r2, #0
 8024360:	d047      	beq.n	80243f2 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8024362:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024366:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8024450 <ip_reass_free_complete_datagram+0x118>
 802436a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8024470 <ip_reass_free_complete_datagram+0x138>
 802436e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8024458 <ip_reass_free_complete_datagram+0x120>
 8024372:	e005      	b.n	8024380 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8024374:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8024376:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8024378:	f7f8 f922 	bl	801c5c0 <pbuf_free>
  while (p != NULL) {
 802437c:	b1b4      	cbz	r4, 80243ac <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 802437e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8024380:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8024382:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8024384:	f7f8 f930 	bl	801c5e8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024388:	4458      	add	r0, fp
 802438a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802438e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024392:	dbef      	blt.n	8024374 <ip_reass_free_complete_datagram+0x3c>
 8024394:	4653      	mov	r3, sl
 8024396:	22cc      	movs	r2, #204	; 0xcc
 8024398:	4649      	mov	r1, r9
 802439a:	4640      	mov	r0, r8
 802439c:	f002 f9da 	bl	8026754 <iprintf>
    pbuf_free(pcur);
 80243a0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 80243a2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 80243a4:	f7f8 f90c 	bl	801c5c0 <pbuf_free>
  while (p != NULL) {
 80243a8:	2c00      	cmp	r4, #0
 80243aa:	d1e8      	bne.n	802437e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 80243ac:	4b2b      	ldr	r3, [pc, #172]	; (802445c <ip_reass_free_complete_datagram+0x124>)
 80243ae:	681a      	ldr	r2, [r3, #0]
 80243b0:	4296      	cmp	r6, r2
 80243b2:	d03a      	beq.n	802442a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80243b4:	2f00      	cmp	r7, #0
 80243b6:	d042      	beq.n	802443e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 80243b8:	6833      	ldr	r3, [r6, #0]
 80243ba:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243bc:	4c28      	ldr	r4, [pc, #160]	; (8024460 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 80243be:	4631      	mov	r1, r6
 80243c0:	2005      	movs	r0, #5
 80243c2:	f7f7 fbe5 	bl	801bb90 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243c6:	8823      	ldrh	r3, [r4, #0]
 80243c8:	455b      	cmp	r3, fp
 80243ca:	d305      	bcc.n	80243d8 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243cc:	eba3 030b 	sub.w	r3, r3, fp
}
 80243d0:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243d2:	8023      	strh	r3, [r4, #0]
}
 80243d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80243d8:	4b1d      	ldr	r3, [pc, #116]	; (8024450 <ip_reass_free_complete_datagram+0x118>)
 80243da:	22d2      	movs	r2, #210	; 0xd2
 80243dc:	4921      	ldr	r1, [pc, #132]	; (8024464 <ip_reass_free_complete_datagram+0x12c>)
 80243de:	481e      	ldr	r0, [pc, #120]	; (8024458 <ip_reass_free_complete_datagram+0x120>)
 80243e0:	f002 f9b8 	bl	8026754 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243e4:	8823      	ldrh	r3, [r4, #0]
}
 80243e6:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80243e8:	eba3 030b 	sub.w	r3, r3, fp
 80243ec:	8023      	strh	r3, [r4, #0]
}
 80243ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80243f2:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243f4:	6930      	ldr	r0, [r6, #16]
 80243f6:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80243f8:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80243fa:	68f4      	ldr	r4, [r6, #12]
 80243fc:	68b2      	ldr	r2, [r6, #8]
 80243fe:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024400:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024402:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024404:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024406:	601a      	str	r2, [r3, #0]
 8024408:	605c      	str	r4, [r3, #4]
 802440a:	69b2      	ldr	r2, [r6, #24]
 802440c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802440e:	f7ff fccf 	bl	8023db0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024412:	4628      	mov	r0, r5
 8024414:	f7f8 f8e8 	bl	801c5e8 <pbuf_clen>
 8024418:	4683      	mov	fp, r0
    pbuf_free(p);
 802441a:	4628      	mov	r0, r5
 802441c:	f7f8 f8d0 	bl	801c5c0 <pbuf_free>
  p = ipr->p;
 8024420:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8024422:	2d00      	cmp	r5, #0
 8024424:	d0c2      	beq.n	80243ac <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8024426:	686b      	ldr	r3, [r5, #4]
 8024428:	e79d      	b.n	8024366 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 802442a:	6832      	ldr	r2, [r6, #0]
 802442c:	601a      	str	r2, [r3, #0]
 802442e:	e7c5      	b.n	80243bc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024430:	4b07      	ldr	r3, [pc, #28]	; (8024450 <ip_reass_free_complete_datagram+0x118>)
 8024432:	22ab      	movs	r2, #171	; 0xab
 8024434:	490c      	ldr	r1, [pc, #48]	; (8024468 <ip_reass_free_complete_datagram+0x130>)
 8024436:	4808      	ldr	r0, [pc, #32]	; (8024458 <ip_reass_free_complete_datagram+0x120>)
 8024438:	f002 f98c 	bl	8026754 <iprintf>
 802443c:	e782      	b.n	8024344 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802443e:	4b04      	ldr	r3, [pc, #16]	; (8024450 <ip_reass_free_complete_datagram+0x118>)
 8024440:	f240 1245 	movw	r2, #325	; 0x145
 8024444:	4909      	ldr	r1, [pc, #36]	; (802446c <ip_reass_free_complete_datagram+0x134>)
 8024446:	4804      	ldr	r0, [pc, #16]	; (8024458 <ip_reass_free_complete_datagram+0x120>)
 8024448:	f002 f984 	bl	8026754 <iprintf>
 802444c:	e7b4      	b.n	80243b8 <ip_reass_free_complete_datagram+0x80>
 802444e:	bf00      	nop
 8024450:	080472d8 	.word	0x080472d8
 8024454:	0804732c 	.word	0x0804732c
 8024458:	0802b44c 	.word	0x0802b44c
 802445c:	2002e7f8 	.word	0x2002e7f8
 8024460:	2002e7f4 	.word	0x2002e7f4
 8024464:	0804737c 	.word	0x0804737c
 8024468:	08047320 	.word	0x08047320
 802446c:	08047360 	.word	0x08047360
 8024470:	08047340 	.word	0x08047340

08024474 <ip_reass_remove_oldest_datagram>:
{
 8024474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8024478:	2700      	movs	r7, #0
 802447a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80244e4 <ip_reass_remove_oldest_datagram+0x70>
{
 802447e:	4605      	mov	r5, r0
 8024480:	460e      	mov	r6, r1
    r = reassdatagrams;
 8024482:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8024486:	b1f3      	cbz	r3, 80244c6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8024488:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802448a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802448e:	4621      	mov	r1, r4
    prev = NULL;
 8024490:	46a4      	mov	ip, r4
    oldest = NULL;
 8024492:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024494:	695a      	ldr	r2, [r3, #20]
 8024496:	4572      	cmp	r2, lr
 8024498:	d018      	beq.n	80244cc <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 802449a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 802449c:	b120      	cbz	r0, 80244a8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802449e:	f893 901f 	ldrb.w	r9, [r3, #31]
 80244a2:	7fc2      	ldrb	r2, [r0, #31]
 80244a4:	4591      	cmp	r9, r2
 80244a6:	d801      	bhi.n	80244ac <ip_reass_remove_oldest_datagram+0x38>
 80244a8:	4661      	mov	r1, ip
 80244aa:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80244ac:	681a      	ldr	r2, [r3, #0]
 80244ae:	469c      	mov	ip, r3
 80244b0:	4613      	mov	r3, r2
 80244b2:	2a00      	cmp	r2, #0
 80244b4:	d1ee      	bne.n	8024494 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80244b6:	b110      	cbz	r0, 80244be <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80244b8:	f7ff ff3e 	bl	8024338 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80244bc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80244be:	42b7      	cmp	r7, r6
 80244c0:	da01      	bge.n	80244c6 <ip_reass_remove_oldest_datagram+0x52>
 80244c2:	2c01      	cmp	r4, #1
 80244c4:	dcdd      	bgt.n	8024482 <ip_reass_remove_oldest_datagram+0xe>
}
 80244c6:	4638      	mov	r0, r7
 80244c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80244cc:	699a      	ldr	r2, [r3, #24]
 80244ce:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80244d2:	454a      	cmp	r2, r9
 80244d4:	d1e1      	bne.n	802449a <ip_reass_remove_oldest_datagram+0x26>
 80244d6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80244da:	88aa      	ldrh	r2, [r5, #4]
 80244dc:	4591      	cmp	r9, r2
 80244de:	d1dc      	bne.n	802449a <ip_reass_remove_oldest_datagram+0x26>
 80244e0:	e7e4      	b.n	80244ac <ip_reass_remove_oldest_datagram+0x38>
 80244e2:	bf00      	nop
 80244e4:	2002e7f8 	.word	0x2002e7f8

080244e8 <ip_reass_tmr>:
{
 80244e8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80244ea:	4b0a      	ldr	r3, [pc, #40]	; (8024514 <ip_reass_tmr+0x2c>)
 80244ec:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80244ee:	b140      	cbz	r0, 8024502 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80244f0:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80244f2:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80244f4:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80244f6:	b12b      	cbz	r3, 8024504 <ip_reass_tmr+0x1c>
 80244f8:	4604      	mov	r4, r0
      r->timer--;
 80244fa:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80244fc:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80244fe:	2800      	cmp	r0, #0
 8024500:	d1f7      	bne.n	80244f2 <ip_reass_tmr+0xa>
}
 8024502:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8024504:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8024506:	4621      	mov	r1, r4
 8024508:	f7ff ff16 	bl	8024338 <ip_reass_free_complete_datagram>
      r = r->next;
 802450c:	4628      	mov	r0, r5
  while (r != NULL) {
 802450e:	2800      	cmp	r0, #0
 8024510:	d1ef      	bne.n	80244f2 <ip_reass_tmr+0xa>
 8024512:	e7f6      	b.n	8024502 <ip_reass_tmr+0x1a>
 8024514:	2002e7f8 	.word	0x2002e7f8

08024518 <ip4_reass>:
{
 8024518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802451c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8024520:	b085      	sub	sp, #20
 8024522:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024524:	f89a 3000 	ldrb.w	r3, [sl]
 8024528:	f003 030f 	and.w	r3, r3, #15
 802452c:	2b05      	cmp	r3, #5
 802452e:	f040 8089 	bne.w	8024644 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024532:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8024536:	f7f6 f807 	bl	801a548 <lwip_htons>
 802453a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802453c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8024540:	f7f6 f802 	bl	801a548 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8024544:	f89a 2000 	ldrb.w	r2, [sl]
 8024548:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 802454c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8024550:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8024554:	d376      	bcc.n	8024644 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8024556:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024558:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8024850 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 802455c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 802455e:	b29b      	uxth	r3, r3
 8024560:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8024562:	f7f8 f841 	bl	801c5e8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024566:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 802456a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802456c:	4403      	add	r3, r0
 802456e:	2b14      	cmp	r3, #20
 8024570:	f300 80e5 	bgt.w	802473e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024574:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8024854 <ip4_reass+0x33c>
 8024578:	f8d9 4000 	ldr.w	r4, [r9]
 802457c:	2c00      	cmp	r4, #0
 802457e:	f000 80ec 	beq.w	802475a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024582:	f8da 200c 	ldr.w	r2, [sl, #12]
 8024586:	e003      	b.n	8024590 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024588:	6824      	ldr	r4, [r4, #0]
 802458a:	2c00      	cmp	r4, #0
 802458c:	f000 80e5 	beq.w	802475a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024590:	6963      	ldr	r3, [r4, #20]
 8024592:	4293      	cmp	r3, r2
 8024594:	d1f8      	bne.n	8024588 <ip4_reass+0x70>
 8024596:	f8da 3010 	ldr.w	r3, [sl, #16]
 802459a:	69a1      	ldr	r1, [r4, #24]
 802459c:	4299      	cmp	r1, r3
 802459e:	d1f3      	bne.n	8024588 <ip4_reass+0x70>
 80245a0:	89a1      	ldrh	r1, [r4, #12]
 80245a2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80245a6:	4299      	cmp	r1, r3
 80245a8:	d1ee      	bne.n	8024588 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80245aa:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80245ae:	f7f5 ffcb 	bl	801a548 <lwip_htons>
 80245b2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80245b6:	2800      	cmp	r0, #0
 80245b8:	f000 80a9 	beq.w	802470e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80245bc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245c0:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80245c4:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80245c8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80245cc:	9301      	str	r3, [sp, #4]
 80245ce:	d108      	bne.n	80245e2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80245d0:	9b00      	ldr	r3, [sp, #0]
 80245d2:	18f3      	adds	r3, r6, r3
 80245d4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80245d6:	429e      	cmp	r6, r3
 80245d8:	d812      	bhi.n	8024600 <ip4_reass+0xe8>
 80245da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80245de:	4293      	cmp	r3, r2
 80245e0:	d80e      	bhi.n	8024600 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80245e2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80245e6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80245ea:	f7f5 ffad 	bl	801a548 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80245ee:	f89a 2000 	ldrb.w	r2, [sl]
 80245f2:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80245f6:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80245fa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80245fe:	d229      	bcs.n	8024654 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8024600:	6866      	ldr	r6, [r4, #4]
 8024602:	b9fe      	cbnz	r6, 8024644 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024604:	f8d9 3000 	ldr.w	r3, [r9]
 8024608:	42a3      	cmp	r3, r4
 802460a:	d014      	beq.n	8024636 <ip4_reass+0x11e>
 802460c:	4b8c      	ldr	r3, [pc, #560]	; (8024840 <ip4_reass+0x328>)
 802460e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8024612:	498c      	ldr	r1, [pc, #560]	; (8024844 <ip4_reass+0x32c>)
 8024614:	488c      	ldr	r0, [pc, #560]	; (8024848 <ip4_reass+0x330>)
 8024616:	f002 f89d 	bl	8026754 <iprintf>
  if (reassdatagrams == ipr) {
 802461a:	f8d9 3000 	ldr.w	r3, [r9]
 802461e:	429c      	cmp	r4, r3
 8024620:	d009      	beq.n	8024636 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024622:	4b87      	ldr	r3, [pc, #540]	; (8024840 <ip4_reass+0x328>)
 8024624:	f240 1245 	movw	r2, #325	; 0x145
 8024628:	4988      	ldr	r1, [pc, #544]	; (802484c <ip4_reass+0x334>)
 802462a:	4887      	ldr	r0, [pc, #540]	; (8024848 <ip4_reass+0x330>)
 802462c:	f002 f892 	bl	8026754 <iprintf>
    prev->next = ipr->next;
 8024630:	6823      	ldr	r3, [r4, #0]
 8024632:	6033      	str	r3, [r6, #0]
 8024634:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8024636:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8024638:	4621      	mov	r1, r4
 802463a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802463c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8024640:	f7f7 faa6 	bl	801bb90 <memp_free>
  pbuf_free(p);
 8024644:	4628      	mov	r0, r5
  return NULL;
 8024646:	2600      	movs	r6, #0
  pbuf_free(p);
 8024648:	f7f7 ffba 	bl	801c5c0 <pbuf_free>
}
 802464c:	4630      	mov	r0, r6
 802464e:	b005      	add	sp, #20
 8024650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8024654:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024656:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802465a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 802465e:	f7f5 ff73 	bl	801a548 <lwip_htons>
 8024662:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8024666:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802466a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 802466c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8024670:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8024674:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8024678:	f8ab 3006 	strh.w	r3, [fp, #6]
 802467c:	b29b      	uxth	r3, r3
 802467e:	4619      	mov	r1, r3
 8024680:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8024682:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8024684:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8024686:	f88b 3000 	strb.w	r3, [fp]
 802468a:	f88b 3001 	strb.w	r3, [fp, #1]
 802468e:	f88b 3002 	strb.w	r3, [fp, #2]
 8024692:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8024696:	d8b3      	bhi.n	8024600 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8024698:	6861      	ldr	r1, [r4, #4]
 802469a:	2900      	cmp	r1, #0
 802469c:	f000 80c4 	beq.w	8024828 <ip4_reass+0x310>
  int valid = 1;
 80246a0:	f04f 0a01 	mov.w	sl, #1
 80246a4:	4694      	mov	ip, r2
 80246a6:	e00e      	b.n	80246c6 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 80246a8:	d0cc      	beq.n	8024644 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 80246aa:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80246ae:	45f4      	cmp	ip, lr
 80246b0:	d3c8      	bcc.n	8024644 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80246b2:	b122      	cbz	r2, 80246be <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 80246b4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80246b6:	4282      	cmp	r2, r0
 80246b8:	bf18      	it	ne
 80246ba:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80246be:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 80246c0:	2900      	cmp	r1, #0
 80246c2:	f000 808a 	beq.w	80247da <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80246c6:	461a      	mov	r2, r3
 80246c8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80246ca:	8898      	ldrh	r0, [r3, #4]
 80246cc:	4584      	cmp	ip, r0
 80246ce:	d2eb      	bcs.n	80246a8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 80246d0:	4613      	mov	r3, r2
 80246d2:	f8cb 1000 	str.w	r1, [fp]
 80246d6:	4662      	mov	r2, ip
 80246d8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80246da:	2b00      	cmp	r3, #0
 80246dc:	d066      	beq.n	80247ac <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80246de:	88db      	ldrh	r3, [r3, #6]
 80246e0:	429a      	cmp	r2, r3
 80246e2:	d3af      	bcc.n	8024644 <ip4_reass+0x12c>
 80246e4:	9903      	ldr	r1, [sp, #12]
 80246e6:	4281      	cmp	r1, r0
 80246e8:	d8ac      	bhi.n	8024644 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80246ea:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80246ec:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80246f0:	d061      	beq.n	80247b6 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80246f2:	9b01      	ldr	r3, [sp, #4]
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	f000 808a 	beq.w	802480e <ip4_reass+0x2f6>
 80246fa:	7fa3      	ldrb	r3, [r4, #30]
 80246fc:	07db      	lsls	r3, r3, #31
 80246fe:	d462      	bmi.n	80247c6 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024700:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8024704:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024706:	441f      	add	r7, r3
 8024708:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802470c:	e79e      	b.n	802464c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802470e:	89e0      	ldrh	r0, [r4, #14]
 8024710:	f7f5 ff1a 	bl	801a548 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024714:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8024718:	2800      	cmp	r0, #0
 802471a:	f43f af4f 	beq.w	80245bc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802471e:	f8da 3000 	ldr.w	r3, [sl]
 8024722:	f8da 0004 	ldr.w	r0, [sl, #4]
 8024726:	f8da 1008 	ldr.w	r1, [sl, #8]
 802472a:	f8da 200c 	ldr.w	r2, [sl, #12]
 802472e:	60a3      	str	r3, [r4, #8]
 8024730:	60e0      	str	r0, [r4, #12]
 8024732:	6121      	str	r1, [r4, #16]
 8024734:	6162      	str	r2, [r4, #20]
 8024736:	f8da 3010 	ldr.w	r3, [sl, #16]
 802473a:	61a3      	str	r3, [r4, #24]
 802473c:	e73e      	b.n	80245bc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802473e:	4601      	mov	r1, r0
 8024740:	4650      	mov	r0, sl
 8024742:	f7ff fe97 	bl	8024474 <ip_reass_remove_oldest_datagram>
 8024746:	2800      	cmp	r0, #0
 8024748:	f43f af7c 	beq.w	8024644 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802474c:	f8b8 3000 	ldrh.w	r3, [r8]
 8024750:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024752:	2b14      	cmp	r3, #20
 8024754:	f77f af0e 	ble.w	8024574 <ip4_reass+0x5c>
 8024758:	e774      	b.n	8024644 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802475a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 802475e:	4938      	ldr	r1, [pc, #224]	; (8024840 <ip4_reass+0x328>)
 8024760:	2005      	movs	r0, #5
 8024762:	f7f7 f9df 	bl	801bb24 <memp_malloc_fn>
  if (ipr == NULL) {
 8024766:	4604      	mov	r4, r0
 8024768:	b178      	cbz	r0, 802478a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802476a:	2300      	movs	r3, #0
 802476c:	61e3      	str	r3, [r4, #28]
 802476e:	60a3      	str	r3, [r4, #8]
 8024770:	60e3      	str	r3, [r4, #12]
 8024772:	6123      	str	r3, [r4, #16]
 8024774:	6163      	str	r3, [r4, #20]
 8024776:	61a3      	str	r3, [r4, #24]
 8024778:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 802477a:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 802477e:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8024782:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8024784:	230f      	movs	r3, #15
 8024786:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024788:	e7c9      	b.n	802471e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802478a:	4639      	mov	r1, r7
 802478c:	4650      	mov	r0, sl
 802478e:	f7ff fe71 	bl	8024474 <ip_reass_remove_oldest_datagram>
 8024792:	4287      	cmp	r7, r0
 8024794:	f73f af56 	bgt.w	8024644 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024798:	f44f 7291 	mov.w	r2, #290	; 0x122
 802479c:	4928      	ldr	r1, [pc, #160]	; (8024840 <ip4_reass+0x328>)
 802479e:	2005      	movs	r0, #5
 80247a0:	f7f7 f9c0 	bl	801bb24 <memp_malloc_fn>
    if (ipr == NULL)
 80247a4:	4604      	mov	r4, r0
 80247a6:	2800      	cmp	r0, #0
 80247a8:	d1df      	bne.n	802476a <ip4_reass+0x252>
 80247aa:	e74b      	b.n	8024644 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80247ac:	9b03      	ldr	r3, [sp, #12]
 80247ae:	4283      	cmp	r3, r0
 80247b0:	f63f af48 	bhi.w	8024644 <ip4_reass+0x12c>
        ipr->p = new_p;
 80247b4:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80247b6:	9b01      	ldr	r3, [sp, #4]
 80247b8:	b19b      	cbz	r3, 80247e2 <ip4_reass+0x2ca>
 80247ba:	7fa3      	ldrb	r3, [r4, #30]
 80247bc:	07d9      	lsls	r1, r3, #31
 80247be:	d59f      	bpl.n	8024700 <ip4_reass+0x1e8>
    if (valid) {
 80247c0:	f1ba 0f00 	cmp.w	sl, #0
 80247c4:	d138      	bne.n	8024838 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247c6:	f8b8 3000 	ldrh.w	r3, [r8]
 80247ca:	441f      	add	r7, r3
 80247cc:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 80247d0:	2600      	movs	r6, #0
}
 80247d2:	4630      	mov	r0, r6
 80247d4:	b005      	add	sp, #20
 80247d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80247da:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80247dc:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80247de:	d188      	bne.n	80246f2 <ip4_reass+0x1da>
 80247e0:	e7e9      	b.n	80247b6 <ip4_reass+0x29e>
    if (valid) {
 80247e2:	f1ba 0f00 	cmp.w	sl, #0
 80247e6:	d012      	beq.n	802480e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80247e8:	6863      	ldr	r3, [r4, #4]
 80247ea:	b183      	cbz	r3, 802480e <ip4_reass+0x2f6>
 80247ec:	6859      	ldr	r1, [r3, #4]
 80247ee:	888b      	ldrh	r3, [r1, #4]
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	d031      	beq.n	8024858 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80247f8:	441f      	add	r7, r3
  if (is_last) {
 80247fa:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80247fc:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8024800:	2b00      	cmp	r3, #0
 8024802:	d1e5      	bne.n	80247d0 <ip4_reass+0x2b8>
 8024804:	e008      	b.n	8024818 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024806:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802480a:	4659      	mov	r1, fp
 802480c:	b323      	cbz	r3, 8024858 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802480e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024812:	441f      	add	r7, r3
 8024814:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024818:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802481a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802481c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8024820:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024822:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8024824:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8024826:	e7d3      	b.n	80247d0 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024828:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 802482a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802482c:	2b00      	cmp	r3, #0
 802482e:	d0ea      	beq.n	8024806 <ip4_reass+0x2ee>
 8024830:	7fa3      	ldrb	r3, [r4, #30]
 8024832:	07da      	lsls	r2, r3, #31
 8024834:	f57f af64 	bpl.w	8024700 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024838:	6863      	ldr	r3, [r4, #4]
 802483a:	2b00      	cmp	r3, #0
 802483c:	d0c3      	beq.n	80247c6 <ip4_reass+0x2ae>
 802483e:	e7d5      	b.n	80247ec <ip4_reass+0x2d4>
 8024840:	080472d8 	.word	0x080472d8
 8024844:	080473f0 	.word	0x080473f0
 8024848:	0802b44c 	.word	0x0802b44c
 802484c:	08047360 	.word	0x08047360
 8024850:	2002e7f4 	.word	0x2002e7f4
 8024854:	2002e7f8 	.word	0x2002e7f8
        q = iprh->next_pbuf;
 8024858:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 802485c:	b153      	cbz	r3, 8024874 <ip4_reass+0x35c>
 802485e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8024860:	4610      	mov	r0, r2
 8024862:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8024864:	88c0      	ldrh	r0, [r0, #6]
 8024866:	8893      	ldrh	r3, [r2, #4]
 8024868:	4298      	cmp	r0, r3
 802486a:	d1c3      	bne.n	80247f4 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 802486c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 802486e:	2b00      	cmp	r3, #0
 8024870:	d1f6      	bne.n	8024860 <ip4_reass+0x348>
 8024872:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8024874:	9b02      	ldr	r3, [sp, #8]
 8024876:	428b      	cmp	r3, r1
 8024878:	d110      	bne.n	802489c <ip4_reass+0x384>
 802487a:	4b40      	ldr	r3, [pc, #256]	; (802497c <ip4_reass+0x464>)
 802487c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8024880:	493f      	ldr	r1, [pc, #252]	; (8024980 <ip4_reass+0x468>)
 8024882:	4840      	ldr	r0, [pc, #256]	; (8024984 <ip4_reass+0x46c>)
 8024884:	f001 ff66 	bl	8026754 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024888:	9b02      	ldr	r3, [sp, #8]
 802488a:	681b      	ldr	r3, [r3, #0]
 802488c:	b133      	cbz	r3, 802489c <ip4_reass+0x384>
 802488e:	4b3b      	ldr	r3, [pc, #236]	; (802497c <ip4_reass+0x464>)
 8024890:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024894:	493c      	ldr	r1, [pc, #240]	; (8024988 <ip4_reass+0x470>)
 8024896:	483b      	ldr	r0, [pc, #236]	; (8024984 <ip4_reass+0x46c>)
 8024898:	f001 ff5c 	bl	8026754 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802489c:	f8b8 3000 	ldrh.w	r3, [r8]
 80248a0:	441f      	add	r7, r3
  if (is_last) {
 80248a2:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80248a4:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	d15b      	bne.n	8024964 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 80248ac:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80248ae:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80248b0:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80248b2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80248b6:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80248b8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80248ba:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248bc:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80248be:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248c0:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248c2:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248c4:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248c6:	68a3      	ldr	r3, [r4, #8]
 80248c8:	6921      	ldr	r1, [r4, #16]
 80248ca:	6962      	ldr	r2, [r4, #20]
 80248cc:	6075      	str	r5, [r6, #4]
 80248ce:	60b1      	str	r1, [r6, #8]
 80248d0:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80248d2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80248d4:	6033      	str	r3, [r6, #0]
 80248d6:	69a3      	ldr	r3, [r4, #24]
 80248d8:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248da:	f7f5 fe35 	bl	801a548 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80248de:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80248e0:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80248e2:	2114      	movs	r1, #20
 80248e4:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 80248e6:	71b3      	strb	r3, [r6, #6]
 80248e8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80248ea:	72b3      	strb	r3, [r6, #10]
 80248ec:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80248ee:	f7f6 fbd3 	bl	801b098 <inet_chksum>
 80248f2:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 80248f4:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80248f6:	b15d      	cbz	r5, 8024910 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 80248f8:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80248fa:	4628      	mov	r0, r5
 80248fc:	2114      	movs	r1, #20
 80248fe:	f7f7 fdd3 	bl	801c4a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024902:	4629      	mov	r1, r5
 8024904:	4630      	mov	r0, r6
 8024906:	f7f7 fe8d 	bl	801c624 <pbuf_cat>
      r = iprh->next_pbuf;
 802490a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802490c:	2d00      	cmp	r5, #0
 802490e:	d1f3      	bne.n	80248f8 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8024910:	f8d9 5000 	ldr.w	r5, [r9]
 8024914:	42a5      	cmp	r5, r4
 8024916:	d005      	beq.n	8024924 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024918:	b335      	cbz	r5, 8024968 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802491a:	682b      	ldr	r3, [r5, #0]
 802491c:	42a3      	cmp	r3, r4
 802491e:	d014      	beq.n	802494a <ip4_reass+0x432>
 8024920:	461d      	mov	r5, r3
 8024922:	e7f9      	b.n	8024918 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8024924:	6823      	ldr	r3, [r4, #0]
 8024926:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802492a:	4621      	mov	r1, r4
 802492c:	2005      	movs	r0, #5
 802492e:	f7f7 f92f 	bl	801bb90 <memp_free>
    clen = pbuf_clen(p);
 8024932:	4630      	mov	r0, r6
 8024934:	f7f7 fe58 	bl	801c5e8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024938:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802493c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802493e:	4283      	cmp	r3, r0
 8024940:	d306      	bcc.n	8024950 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024942:	1b1b      	subs	r3, r3, r4
 8024944:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8024948:	e680      	b.n	802464c <ip4_reass+0x134>
    prev->next = ipr->next;
 802494a:	6823      	ldr	r3, [r4, #0]
 802494c:	602b      	str	r3, [r5, #0]
 802494e:	e7ec      	b.n	802492a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024950:	4b0a      	ldr	r3, [pc, #40]	; (802497c <ip4_reass+0x464>)
 8024952:	f240 229b 	movw	r2, #667	; 0x29b
 8024956:	490d      	ldr	r1, [pc, #52]	; (802498c <ip4_reass+0x474>)
 8024958:	480a      	ldr	r0, [pc, #40]	; (8024984 <ip4_reass+0x46c>)
 802495a:	f001 fefb 	bl	8026754 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802495e:	f8b8 3000 	ldrh.w	r3, [r8]
 8024962:	e7ee      	b.n	8024942 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024964:	8ba0      	ldrh	r0, [r4, #28]
 8024966:	e7a9      	b.n	80248bc <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024968:	4b04      	ldr	r3, [pc, #16]	; (802497c <ip4_reass+0x464>)
 802496a:	f240 1245 	movw	r2, #325	; 0x145
 802496e:	4908      	ldr	r1, [pc, #32]	; (8024990 <ip4_reass+0x478>)
 8024970:	4804      	ldr	r0, [pc, #16]	; (8024984 <ip4_reass+0x46c>)
 8024972:	f001 feef 	bl	8026754 <iprintf>
    prev->next = ipr->next;
 8024976:	6823      	ldr	r3, [r4, #0]
 8024978:	602b      	str	r3, [r5, #0]
 802497a:	deff      	udf	#255	; 0xff
 802497c:	080472d8 	.word	0x080472d8
 8024980:	080473a0 	.word	0x080473a0
 8024984:	0802b44c 	.word	0x0802b44c
 8024988:	080473b0 	.word	0x080473b0
 802498c:	080473d4 	.word	0x080473d4
 8024990:	08047360 	.word	0x08047360

08024994 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024998:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 802499a:	b08f      	sub	sp, #60	; 0x3c
 802499c:	4605      	mov	r5, r0
 802499e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249a0:	f1b3 0214 	subs.w	r2, r3, #20
{
 80249a4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249a6:	bf48      	it	mi
 80249a8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80249ac:	6843      	ldr	r3, [r0, #4]
 80249ae:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249b0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80249b4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80249b6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80249b8:	f003 030f 	and.w	r3, r3, #15
 80249bc:	2b05      	cmp	r3, #5
 80249be:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80249c2:	f040 80ea 	bne.w	8024b9a <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80249c6:	8943      	ldrh	r3, [r0, #10]
 80249c8:	2b13      	cmp	r3, #19
 80249ca:	f240 80e9 	bls.w	8024ba0 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80249ce:	9b04      	ldr	r3, [sp, #16]
 80249d0:	88d8      	ldrh	r0, [r3, #6]
 80249d2:	f7f5 fdb9 	bl	801a548 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80249d6:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80249d8:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80249dc:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80249de:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80249e0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80249e4:	b29b      	uxth	r3, r3
 80249e6:	920d      	str	r2, [sp, #52]	; 0x34
 80249e8:	9305      	str	r3, [sp, #20]

  while (left) {
 80249ea:	2b00      	cmp	r3, #0
 80249ec:	f000 809d 	beq.w	8024b2a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249f0:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80249f2:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249f4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024bc0 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249f8:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249fa:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8024bc8 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249fe:	b29b      	uxth	r3, r3
 8024a00:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8024a02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024a06:	2114      	movs	r1, #20
 8024a08:	200e      	movs	r0, #14
 8024a0a:	f7f7 fc07 	bl	801c21c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a10:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8024a12:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8024a14:	4293      	cmp	r3, r2
 8024a16:	bf28      	it	cs
 8024a18:	4613      	movcs	r3, r2
 8024a1a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8024a1c:	2800      	cmp	r0, #0
 8024a1e:	f000 80b9 	beq.w	8024b94 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024a22:	8943      	ldrh	r3, [r0, #10]
 8024a24:	2b13      	cmp	r3, #19
 8024a26:	f240 8091 	bls.w	8024b4c <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8024a2a:	9904      	ldr	r1, [sp, #16]
 8024a2c:	9b03      	ldr	r3, [sp, #12]
 8024a2e:	680a      	ldr	r2, [r1, #0]
 8024a30:	685b      	ldr	r3, [r3, #4]
 8024a32:	684f      	ldr	r7, [r1, #4]
 8024a34:	6888      	ldr	r0, [r1, #8]
 8024a36:	68c9      	ldr	r1, [r1, #12]
 8024a38:	605f      	str	r7, [r3, #4]
 8024a3a:	60d9      	str	r1, [r3, #12]
 8024a3c:	9904      	ldr	r1, [sp, #16]
 8024a3e:	601a      	str	r2, [r3, #0]
 8024a40:	6098      	str	r0, [r3, #8]
 8024a42:	690a      	ldr	r2, [r1, #16]
 8024a44:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8024a46:	9b03      	ldr	r3, [sp, #12]
 8024a48:	685b      	ldr	r3, [r3, #4]
 8024a4a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8024a4c:	9b06      	ldr	r3, [sp, #24]
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d034      	beq.n	8024abc <ip4_frag+0x128>
 8024a52:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024a54:	896b      	ldrh	r3, [r5, #10]
 8024a56:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024a58:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024a5a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024a5c:	d36e      	bcc.n	8024b3c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024a5e:	454c      	cmp	r4, r9
 8024a60:	bf28      	it	cs
 8024a62:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024a64:	2c00      	cmp	r4, #0
 8024a66:	d062      	beq.n	8024b2e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024a68:	4641      	mov	r1, r8
 8024a6a:	f240 22bd 	movw	r2, #701	; 0x2bd
 8024a6e:	2006      	movs	r0, #6
 8024a70:	f7f7 f858 	bl	801bb24 <memp_malloc_fn>
 8024a74:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a76:	2241      	movs	r2, #65	; 0x41
 8024a78:	4621      	mov	r1, r4
 8024a7a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8024a7c:	f1bb 0f00 	cmp.w	fp, #0
 8024a80:	d06f      	beq.n	8024b62 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a82:	9401      	str	r4, [sp, #4]
 8024a84:	465b      	mov	r3, fp
 8024a86:	686f      	ldr	r7, [r5, #4]
 8024a88:	4437      	add	r7, r6
 8024a8a:	9700      	str	r7, [sp, #0]
 8024a8c:	f7f7 fc64 	bl	801c358 <pbuf_alloced_custom>
 8024a90:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8024a92:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8024a94:	2f00      	cmp	r7, #0
 8024a96:	d06e      	beq.n	8024b76 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024a98:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8024a9c:	f7f7 fdae 	bl	801c5fc <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024aa0:	4a44      	ldr	r2, [pc, #272]	; (8024bb4 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8024aa2:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024aa4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8024aa8:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 8024aaa:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024aae:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8024ab2:	f7f7 fdb7 	bl	801c624 <pbuf_cat>
      if (left_to_copy) {
 8024ab6:	f1b9 0f00 	cmp.w	r9, #0
 8024aba:	d138      	bne.n	8024b2e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8024abe:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024ac0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8024ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8024ac4:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8024ac6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8024aca:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8024acc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8024ace:	4293      	cmp	r3, r2
 8024ad0:	dd44      	ble.n	8024b5c <ip4_frag+0x1c8>
 8024ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	d141      	bne.n	8024b5c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024ad8:	f7f5 fd36 	bl	801a548 <lwip_htons>
 8024adc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024ade:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024ae0:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024ae2:	f103 0014 	add.w	r0, r3, #20
 8024ae6:	b280      	uxth	r0, r0
 8024ae8:	f7f5 fd2e 	bl	801a548 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8024aec:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024aee:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024af0:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8024af2:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024af4:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8024af6:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8024af8:	f7f6 face 	bl	801b098 <inet_chksum>
 8024afc:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024afe:	9f03      	ldr	r7, [sp, #12]
 8024b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024b04:	4639      	mov	r1, r7
 8024b06:	6943      	ldr	r3, [r0, #20]
 8024b08:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024b0a:	4638      	mov	r0, r7
 8024b0c:	f7f7 fd58 	bl	801c5c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024b10:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8024b14:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8024b16:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8024b1a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8024b1c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8024b1e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8024b20:	b292      	uxth	r2, r2
 8024b22:	9207      	str	r2, [sp, #28]
  while (left) {
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	f47f af6c 	bne.w	8024a02 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024b2a:	2000      	movs	r0, #0
 8024b2c:	e020      	b.n	8024b70 <ip4_frag+0x1dc>
        p = p->next;
 8024b2e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8024b30:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8024b32:	896b      	ldrh	r3, [r5, #10]
 8024b34:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024b36:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8024b38:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024b3a:	d290      	bcs.n	8024a5e <ip4_frag+0xca>
 8024b3c:	4643      	mov	r3, r8
 8024b3e:	f240 322d 	movw	r2, #813	; 0x32d
 8024b42:	491d      	ldr	r1, [pc, #116]	; (8024bb8 <ip4_frag+0x224>)
 8024b44:	4650      	mov	r0, sl
 8024b46:	f001 fe05 	bl	8026754 <iprintf>
 8024b4a:	e788      	b.n	8024a5e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8024b4c:	4643      	mov	r3, r8
 8024b4e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8024b52:	491a      	ldr	r1, [pc, #104]	; (8024bbc <ip4_frag+0x228>)
 8024b54:	4650      	mov	r0, sl
 8024b56:	f001 fdfd 	bl	8026754 <iprintf>
 8024b5a:	e766      	b.n	8024a2a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 8024b5c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8024b60:	e7ba      	b.n	8024ad8 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8024b62:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024b66:	4658      	mov	r0, fp
 8024b68:	f7f7 fd2a 	bl	801c5c0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024b6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024b70:	b00f      	add	sp, #60	; 0x3c
 8024b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8024b76:	46d9      	mov	r9, fp
 8024b78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8024b7c:	2006      	movs	r0, #6
 8024b7e:	4649      	mov	r1, r9
 8024b80:	f7f7 f806 	bl	801bb90 <memp_free>
        pbuf_free(rambuf);
 8024b84:	4658      	mov	r0, fp
 8024b86:	f7f7 fd1b 	bl	801c5c0 <pbuf_free>
  return ERR_MEM;
 8024b8a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8024b8e:	b00f      	add	sp, #60	; 0x3c
 8024b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8024b94:	f04f 30ff 	mov.w	r0, #4294967295
 8024b98:	e7ea      	b.n	8024b70 <ip4_frag+0x1dc>
    return ERR_VAL;
 8024b9a:	f06f 0005 	mvn.w	r0, #5
 8024b9e:	e7e7      	b.n	8024b70 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024ba0:	4b07      	ldr	r3, [pc, #28]	; (8024bc0 <ip4_frag+0x22c>)
 8024ba2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024ba6:	4907      	ldr	r1, [pc, #28]	; (8024bc4 <ip4_frag+0x230>)
 8024ba8:	4807      	ldr	r0, [pc, #28]	; (8024bc8 <ip4_frag+0x234>)
 8024baa:	f001 fdd3 	bl	8026754 <iprintf>
 8024bae:	f06f 0005 	mvn.w	r0, #5
 8024bb2:	e7dd      	b.n	8024b70 <ip4_frag+0x1dc>
 8024bb4:	08024301 	.word	0x08024301
 8024bb8:	0804744c 	.word	0x0804744c
 8024bbc:	0804742c 	.word	0x0804742c
 8024bc0:	080472d8 	.word	0x080472d8
 8024bc4:	08047410 	.word	0x08047410
 8024bc8:	0802b44c 	.word	0x0802b44c

08024bcc <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024bcc:	8943      	ldrh	r3, [r0, #10]
 8024bce:	2b0e      	cmp	r3, #14
{
 8024bd0:	b570      	push	{r4, r5, r6, lr}
 8024bd2:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8024bd4:	d91b      	bls.n	8024c0e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8024bd6:	7bc3      	ldrb	r3, [r0, #15]
 8024bd8:	460d      	mov	r5, r1
 8024bda:	b91b      	cbnz	r3, 8024be4 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8024bdc:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8024be0:	3301      	adds	r3, #1
 8024be2:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024be4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024be6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8024be8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8024bea:	07d9      	lsls	r1, r3, #31
 8024bec:	d50a      	bpl.n	8024c04 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8024bee:	2b01      	cmp	r3, #1
 8024bf0:	d030      	beq.n	8024c54 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024bf2:	2206      	movs	r2, #6
 8024bf4:	491d      	ldr	r1, [pc, #116]	; (8024c6c <ethernet_input+0xa0>)
 8024bf6:	f000 fdd7 	bl	80257a8 <memcmp>
 8024bfa:	b918      	cbnz	r0, 8024c04 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024bfc:	7b63      	ldrb	r3, [r4, #13]
 8024bfe:	f043 0308 	orr.w	r3, r3, #8
 8024c02:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8024c04:	2e08      	cmp	r6, #8
 8024c06:	d016      	beq.n	8024c36 <ethernet_input+0x6a>
 8024c08:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8024c0c:	d004      	beq.n	8024c18 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8024c0e:	4620      	mov	r0, r4
 8024c10:	f7f7 fcd6 	bl	801c5c0 <pbuf_free>
  return ERR_OK;
}
 8024c14:	2000      	movs	r0, #0
 8024c16:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c18:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024c1c:	071b      	lsls	r3, r3, #28
 8024c1e:	d5f6      	bpl.n	8024c0e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c20:	210e      	movs	r1, #14
 8024c22:	4620      	mov	r0, r4
 8024c24:	f7f7 fc40 	bl	801c4a8 <pbuf_remove_header>
 8024c28:	2800      	cmp	r0, #0
 8024c2a:	d1f0      	bne.n	8024c0e <ethernet_input+0x42>
        etharp_input(p, netif);
 8024c2c:	4629      	mov	r1, r5
 8024c2e:	4620      	mov	r0, r4
 8024c30:	f7fe fd2e 	bl	8023690 <etharp_input>
      break;
 8024c34:	e7ee      	b.n	8024c14 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c36:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8024c3a:	071a      	lsls	r2, r3, #28
 8024c3c:	d5e7      	bpl.n	8024c0e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c3e:	210e      	movs	r1, #14
 8024c40:	4620      	mov	r0, r4
 8024c42:	f7f7 fc31 	bl	801c4a8 <pbuf_remove_header>
 8024c46:	2800      	cmp	r0, #0
 8024c48:	d1e1      	bne.n	8024c0e <ethernet_input+0x42>
        ip4_input(p, netif);
 8024c4a:	4629      	mov	r1, r5
 8024c4c:	4620      	mov	r0, r4
 8024c4e:	f7ff f8eb 	bl	8023e28 <ip4_input>
      break;
 8024c52:	e7df      	b.n	8024c14 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024c54:	7843      	ldrb	r3, [r0, #1]
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	d1d4      	bne.n	8024c04 <ethernet_input+0x38>
 8024c5a:	7883      	ldrb	r3, [r0, #2]
 8024c5c:	2b5e      	cmp	r3, #94	; 0x5e
 8024c5e:	d1d1      	bne.n	8024c04 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8024c60:	7b63      	ldrb	r3, [r4, #13]
 8024c62:	f043 0310 	orr.w	r3, r3, #16
 8024c66:	7363      	strb	r3, [r4, #13]
 8024c68:	e7cc      	b.n	8024c04 <ethernet_input+0x38>
 8024c6a:	bf00      	nop
 8024c6c:	080474c8 	.word	0x080474c8

08024c70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c74:	460c      	mov	r4, r1
 8024c76:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8024c7c:	4616      	mov	r6, r2
 8024c7e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c80:	f7f5 fc62 	bl	801a548 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c84:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8024c86:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024c88:	4620      	mov	r0, r4
 8024c8a:	f7f7 fbd9 	bl	801c440 <pbuf_add_header>
 8024c8e:	b9e0      	cbnz	r0, 8024cca <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024c90:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8024c92:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024c96:	683b      	ldr	r3, [r7, #0]
 8024c98:	600b      	str	r3, [r1, #0]
 8024c9a:	88bb      	ldrh	r3, [r7, #4]
 8024c9c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024c9e:	6833      	ldr	r3, [r6, #0]
 8024ca0:	f8c1 3006 	str.w	r3, [r1, #6]
 8024ca4:	88b3      	ldrh	r3, [r6, #4]
 8024ca6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8024ca8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8024cac:	2b06      	cmp	r3, #6
 8024cae:	d006      	beq.n	8024cbe <ethernet_output+0x4e>
 8024cb0:	4b08      	ldr	r3, [pc, #32]	; (8024cd4 <ethernet_output+0x64>)
 8024cb2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8024cb6:	4908      	ldr	r1, [pc, #32]	; (8024cd8 <ethernet_output+0x68>)
 8024cb8:	4808      	ldr	r0, [pc, #32]	; (8024cdc <ethernet_output+0x6c>)
 8024cba:	f001 fd4b 	bl	8026754 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024cbe:	69ab      	ldr	r3, [r5, #24]
 8024cc0:	4621      	mov	r1, r4
 8024cc2:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8024cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8024cc8:	4718      	bx	r3
}
 8024cca:	f06f 0001 	mvn.w	r0, #1
 8024cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024cd2:	bf00      	nop
 8024cd4:	0804745c 	.word	0x0804745c
 8024cd8:	08047494 	.word	0x08047494
 8024cdc:	0802b44c 	.word	0x0802b44c

08024ce0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024ce0:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8024ce2:	2300      	movs	r3, #0
{
 8024ce4:	b085      	sub	sp, #20
 8024ce6:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8024ce8:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cea:	4619      	mov	r1, r3
{
 8024cec:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cee:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8024cf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024cf4:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024cf8:	f7f1 fdae 	bl	8016858 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024cfc:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024d00:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8024d02:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8024d04:	4258      	negs	r0, r3
 8024d06:	b005      	add	sp, #20
 8024d08:	bd30      	pop	{r4, r5, pc}
 8024d0a:	bf00      	nop

08024d0c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024d0c:	2200      	movs	r2, #0
 8024d0e:	6800      	ldr	r0, [r0, #0]
{
 8024d10:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024d12:	f7f1 fdb5 	bl	8016880 <osMessagePut>
 8024d16:	3800      	subs	r0, #0
 8024d18:	bf18      	it	ne
 8024d1a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8024d1c:	4240      	negs	r0, r0
 8024d1e:	bd08      	pop	{r3, pc}

08024d20 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d22:	4614      	mov	r4, r2
 8024d24:	b085      	sub	sp, #20
 8024d26:	4605      	mov	r5, r0
 8024d28:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024d2a:	f7f1 fc5b 	bl	80165e4 <osKernelSysTick>
 8024d2e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024d30:	b15c      	cbz	r4, 8024d4a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024d32:	4622      	mov	r2, r4
 8024d34:	6829      	ldr	r1, [r5, #0]
 8024d36:	a801      	add	r0, sp, #4
 8024d38:	f7f1 fdce 	bl	80168d8 <osMessageGet>

    if(event.status == osEventMessage)
 8024d3c:	9b01      	ldr	r3, [sp, #4]
 8024d3e:	2b10      	cmp	r3, #16
 8024d40:	d009      	beq.n	8024d56 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024d42:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024d46:	b005      	add	sp, #20
 8024d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8024d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8024d4e:	6829      	ldr	r1, [r5, #0]
 8024d50:	a801      	add	r0, sp, #4
 8024d52:	f7f1 fdc1 	bl	80168d8 <osMessageGet>
    *msg = (void *)event.value.v;
 8024d56:	9b02      	ldr	r3, [sp, #8]
 8024d58:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8024d5a:	f7f1 fc43 	bl	80165e4 <osKernelSysTick>
 8024d5e:	1b80      	subs	r0, r0, r6
}
 8024d60:	b005      	add	sp, #20
 8024d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024d64 <sys_mbox_valid>:
 8024d64:	6800      	ldr	r0, [r0, #0]
 8024d66:	3800      	subs	r0, #0
 8024d68:	bf18      	it	ne
 8024d6a:	2001      	movne	r0, #1
 8024d6c:	4770      	bx	lr
 8024d6e:	bf00      	nop

08024d70 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024d70:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024d72:	4803      	ldr	r0, [pc, #12]	; (8024d80 <sys_init+0x10>)
 8024d74:	f7f1 fc9a 	bl	80166ac <osMutexCreate>
 8024d78:	4b02      	ldr	r3, [pc, #8]	; (8024d84 <sys_init+0x14>)
 8024d7a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024d7c:	bd08      	pop	{r3, pc}
 8024d7e:	bf00      	nop
 8024d80:	080474d8 	.word	0x080474d8
 8024d84:	2002e7fc 	.word	0x2002e7fc

08024d88 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d88:	b510      	push	{r4, lr}
 8024d8a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8024d8c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024d8e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d90:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8024d92:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d96:	f7f1 fc89 	bl	80166ac <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024d9a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024d9e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8024da0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8024da2:	4258      	negs	r0, r3
 8024da4:	b002      	add	sp, #8
 8024da6:	bd10      	pop	{r4, pc}

08024da8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8024da8:	f04f 31ff 	mov.w	r1, #4294967295
 8024dac:	6800      	ldr	r0, [r0, #0]
 8024dae:	f7f1 bc85 	b.w	80166bc <osMutexWait>
 8024db2:	bf00      	nop

08024db4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8024db4:	6800      	ldr	r0, [r0, #0]
 8024db6:	f7f1 bcad 	b.w	8016714 <osMutexRelease>
 8024dba:	bf00      	nop

08024dbc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024dbc:	b510      	push	{r4, lr}
 8024dbe:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024dc0:	2400      	movs	r4, #0
 8024dc2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8024dc6:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8024dc8:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8024dcc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024dce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024dd2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8024dd6:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8024dda:	f7f1 fc0b 	bl	80165f4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024dde:	b008      	add	sp, #32
 8024de0:	bd10      	pop	{r4, pc}
 8024de2:	bf00      	nop

08024de4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8024de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8024de6:	2200      	movs	r2, #0
 8024de8:	4917      	ldr	r1, [pc, #92]	; (8024e48 <MX_USB_DEVICE_Init+0x64>)
 8024dea:	4818      	ldr	r0, [pc, #96]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024dec:	f7f0 ff6c 	bl	8015cc8 <USBD_Init>
 8024df0:	b970      	cbnz	r0, 8024e10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024df2:	4917      	ldr	r1, [pc, #92]	; (8024e50 <MX_USB_DEVICE_Init+0x6c>)
 8024df4:	4815      	ldr	r0, [pc, #84]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024df6:	f7f0 ff7f 	bl	8015cf8 <USBD_RegisterClass>
 8024dfa:	b988      	cbnz	r0, 8024e20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024dfc:	4915      	ldr	r1, [pc, #84]	; (8024e54 <MX_USB_DEVICE_Init+0x70>)
 8024dfe:	4813      	ldr	r0, [pc, #76]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024e00:	f7f0 ff2c 	bl	8015c5c <USBD_CDC_RegisterInterface>
 8024e04:	b9a0      	cbnz	r0, 8024e30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024e06:	4811      	ldr	r0, [pc, #68]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024e08:	f7f0 ff8c 	bl	8015d24 <USBD_Start>
 8024e0c:	b9b8      	cbnz	r0, 8024e3e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024e0e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8024e10:	f7df fcf8 	bl	8004804 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8024e14:	490e      	ldr	r1, [pc, #56]	; (8024e50 <MX_USB_DEVICE_Init+0x6c>)
 8024e16:	480d      	ldr	r0, [pc, #52]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024e18:	f7f0 ff6e 	bl	8015cf8 <USBD_RegisterClass>
 8024e1c:	2800      	cmp	r0, #0
 8024e1e:	d0ed      	beq.n	8024dfc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8024e20:	f7df fcf0 	bl	8004804 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8024e24:	490b      	ldr	r1, [pc, #44]	; (8024e54 <MX_USB_DEVICE_Init+0x70>)
 8024e26:	4809      	ldr	r0, [pc, #36]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024e28:	f7f0 ff18 	bl	8015c5c <USBD_CDC_RegisterInterface>
 8024e2c:	2800      	cmp	r0, #0
 8024e2e:	d0ea      	beq.n	8024e06 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8024e30:	f7df fce8 	bl	8004804 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8024e34:	4805      	ldr	r0, [pc, #20]	; (8024e4c <MX_USB_DEVICE_Init+0x68>)
 8024e36:	f7f0 ff75 	bl	8015d24 <USBD_Start>
 8024e3a:	2800      	cmp	r0, #0
 8024e3c:	d0e7      	beq.n	8024e0e <MX_USB_DEVICE_Init+0x2a>
}
 8024e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8024e42:	f7df bcdf 	b.w	8004804 <Error_Handler>
 8024e46:	bf00      	nop
 8024e48:	20000444 	.word	0x20000444
 8024e4c:	2002e800 	.word	0x2002e800
 8024e50:	20000314 	.word	0x20000314
 8024e54:	20000430 	.word	0x20000430

08024e58 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8024e58:	2000      	movs	r0, #0
 8024e5a:	4770      	bx	lr

08024e5c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8024e5c:	2000      	movs	r0, #0
 8024e5e:	4770      	bx	lr

08024e60 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8024e60:	2000      	movs	r0, #0
 8024e62:	4770      	bx	lr

08024e64 <CDC_Receive_FS>:
{
 8024e64:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024e66:	4c05      	ldr	r4, [pc, #20]	; (8024e7c <CDC_Receive_FS+0x18>)
{
 8024e68:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8024e6a:	4620      	mov	r0, r4
 8024e6c:	f7f0 ff08 	bl	8015c80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8024e70:	4620      	mov	r0, r4
 8024e72:	f7f0 ff0d 	bl	8015c90 <USBD_CDC_ReceivePacket>
}
 8024e76:	2000      	movs	r0, #0
 8024e78:	bd10      	pop	{r4, pc}
 8024e7a:	bf00      	nop
 8024e7c:	2002e800 	.word	0x2002e800

08024e80 <CDC_Init_FS>:
{
 8024e80:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8024e82:	4c06      	ldr	r4, [pc, #24]	; (8024e9c <CDC_Init_FS+0x1c>)
 8024e84:	2200      	movs	r2, #0
 8024e86:	4906      	ldr	r1, [pc, #24]	; (8024ea0 <CDC_Init_FS+0x20>)
 8024e88:	4620      	mov	r0, r4
 8024e8a:	f7f0 feef 	bl	8015c6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8024e8e:	4905      	ldr	r1, [pc, #20]	; (8024ea4 <CDC_Init_FS+0x24>)
 8024e90:	4620      	mov	r0, r4
 8024e92:	f7f0 fef5 	bl	8015c80 <USBD_CDC_SetRxBuffer>
}
 8024e96:	2000      	movs	r0, #0
 8024e98:	bd10      	pop	{r4, pc}
 8024e9a:	bf00      	nop
 8024e9c:	2002e800 	.word	0x2002e800
 8024ea0:	2002f2d0 	.word	0x2002f2d0
 8024ea4:	2002ead0 	.word	0x2002ead0

08024ea8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8024ea8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8024eaa:	4801      	ldr	r0, [pc, #4]	; (8024eb0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8024eac:	800b      	strh	r3, [r1, #0]
}
 8024eae:	4770      	bx	lr
 8024eb0:	20000470 	.word	0x20000470

08024eb4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8024eb4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8024eb6:	4801      	ldr	r0, [pc, #4]	; (8024ebc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8024eb8:	800b      	strh	r3, [r1, #0]
}
 8024eba:	4770      	bx	lr
 8024ebc:	20000484 	.word	0x20000484

08024ec0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8024ec0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8024ec2:	4801      	ldr	r0, [pc, #4]	; (8024ec8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8024ec4:	800b      	strh	r3, [r1, #0]
}
 8024ec6:	4770      	bx	lr
 8024ec8:	20000464 	.word	0x20000464

08024ecc <USBD_FS_ManufacturerStrDescriptor>:
{
 8024ecc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ece:	4c04      	ldr	r4, [pc, #16]	; (8024ee0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8024ed0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8024ed2:	4804      	ldr	r0, [pc, #16]	; (8024ee4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8024ed4:	4621      	mov	r1, r4
 8024ed6:	f7f1 fae9 	bl	80164ac <USBD_GetString>
}
 8024eda:	4620      	mov	r0, r4
 8024edc:	bd10      	pop	{r4, pc}
 8024ede:	bf00      	nop
 8024ee0:	2002fad0 	.word	0x2002fad0
 8024ee4:	080474e0 	.word	0x080474e0

08024ee8 <USBD_FS_ProductStrDescriptor>:
{
 8024ee8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024eea:	4c04      	ldr	r4, [pc, #16]	; (8024efc <USBD_FS_ProductStrDescriptor+0x14>)
{
 8024eec:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8024eee:	4804      	ldr	r0, [pc, #16]	; (8024f00 <USBD_FS_ProductStrDescriptor+0x18>)
 8024ef0:	4621      	mov	r1, r4
 8024ef2:	f7f1 fadb 	bl	80164ac <USBD_GetString>
}
 8024ef6:	4620      	mov	r0, r4
 8024ef8:	bd10      	pop	{r4, pc}
 8024efa:	bf00      	nop
 8024efc:	2002fad0 	.word	0x2002fad0
 8024f00:	080474f4 	.word	0x080474f4

08024f04 <USBD_FS_ConfigStrDescriptor>:
{
 8024f04:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024f06:	4c04      	ldr	r4, [pc, #16]	; (8024f18 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8024f08:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8024f0a:	4804      	ldr	r0, [pc, #16]	; (8024f1c <USBD_FS_ConfigStrDescriptor+0x18>)
 8024f0c:	4621      	mov	r1, r4
 8024f0e:	f7f1 facd 	bl	80164ac <USBD_GetString>
}
 8024f12:	4620      	mov	r0, r4
 8024f14:	bd10      	pop	{r4, pc}
 8024f16:	bf00      	nop
 8024f18:	2002fad0 	.word	0x2002fad0
 8024f1c:	0804750c 	.word	0x0804750c

08024f20 <USBD_FS_InterfaceStrDescriptor>:
{
 8024f20:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024f22:	4c04      	ldr	r4, [pc, #16]	; (8024f34 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8024f24:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8024f26:	4804      	ldr	r0, [pc, #16]	; (8024f38 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8024f28:	4621      	mov	r1, r4
 8024f2a:	f7f1 fabf 	bl	80164ac <USBD_GetString>
}
 8024f2e:	4620      	mov	r0, r4
 8024f30:	bd10      	pop	{r4, pc}
 8024f32:	bf00      	nop
 8024f34:	2002fad0 	.word	0x2002fad0
 8024f38:	08047518 	.word	0x08047518

08024f3c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8024f3c:	4b21      	ldr	r3, [pc, #132]	; (8024fc4 <USBD_FS_SerialStrDescriptor+0x88>)
 8024f3e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8024f42:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8024f46:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8024f48:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8024f4a:	f04f 041a 	mov.w	r4, #26
 8024f4e:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8024f50:	d101      	bne.n	8024f56 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8024f52:	481d      	ldr	r0, [pc, #116]	; (8024fc8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024f54:	bd30      	pop	{r4, r5, pc}
 8024f56:	491c      	ldr	r1, [pc, #112]	; (8024fc8 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8024f58:	f04f 0e00 	mov.w	lr, #0
 8024f5c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8024f60:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8024f62:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8024f64:	0f13      	lsrs	r3, r2, #28
 8024f66:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024f6a:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8024f6e:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f72:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f76:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024f7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8024f7e:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024f82:	bf34      	ite	cc
 8024f84:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024f88:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8024f8c:	f1be 0f10 	cmp.w	lr, #16
 8024f90:	d1e8      	bne.n	8024f64 <USBD_FS_SerialStrDescriptor+0x28>
 8024f92:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8024f94:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8024f96:	0f03      	lsrs	r3, r0, #28
 8024f98:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8024f9c:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8024fa0:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8024fa2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024fa6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8024faa:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8024fae:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8024fb2:	bf34      	ite	cc
 8024fb4:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8024fb8:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8024fba:	2a08      	cmp	r2, #8
 8024fbc:	d1eb      	bne.n	8024f96 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8024fbe:	4802      	ldr	r0, [pc, #8]	; (8024fc8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8024fc0:	bd30      	pop	{r4, r5, pc}
 8024fc2:	bf00      	nop
 8024fc4:	1ff0f000 	.word	0x1ff0f000
 8024fc8:	20000488 	.word	0x20000488

08024fcc <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fcc:	6803      	ldr	r3, [r0, #0]
{
 8024fce:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8024fd4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024fd6:	f04f 0400 	mov.w	r4, #0
 8024fda:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8024fde:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8024fe2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8024fe4:	d001      	beq.n	8024fea <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8024fe6:	b009      	add	sp, #36	; 0x24
 8024fe8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024fea:	4d1e      	ldr	r5, [pc, #120]	; (8025064 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8024fec:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024ff0:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024ff2:	481d      	ldr	r0, [pc, #116]	; (8025068 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024ff4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024ff6:	f043 0301 	orr.w	r3, r3, #1
 8024ffa:	632b      	str	r3, [r5, #48]	; 0x30
 8024ffc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8024ffe:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025002:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025006:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025008:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802500a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802500c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802500e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025010:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025014:	f7e7 fc8e 	bl	800c934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8025018:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 802501c:	a903      	add	r1, sp, #12
 802501e:	4812      	ldr	r0, [pc, #72]	; (8025068 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025020:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8025022:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8025026:	f7e7 fc85 	bl	800c934 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802502a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 802502c:	4622      	mov	r2, r4
 802502e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8025034:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025036:	636b      	str	r3, [r5, #52]	; 0x34
 8025038:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802503e:	9301      	str	r3, [sp, #4]
 8025040:	9b01      	ldr	r3, [sp, #4]
 8025042:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8025044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025048:	646b      	str	r3, [r5, #68]	; 0x44
 802504a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025050:	9302      	str	r3, [sp, #8]
 8025052:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8025054:	f7e4 fdf0 	bl	8009c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025058:	2043      	movs	r0, #67	; 0x43
 802505a:	f7e4 fe37 	bl	8009ccc <HAL_NVIC_EnableIRQ>
}
 802505e:	b009      	add	sp, #36	; 0x24
 8025060:	bd30      	pop	{r4, r5, pc}
 8025062:	bf00      	nop
 8025064:	40023800 	.word	0x40023800
 8025068:	40020000 	.word	0x40020000

0802506c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802506c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8025070:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025074:	f7f0 be68 	b.w	8015d48 <USBD_LL_SetupStage>

08025078 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8025078:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802507c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025080:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025084:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8025088:	f7f0 be8c 	b.w	8015da4 <USBD_LL_DataOutStage>

0802508c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802508c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8025090:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8025094:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802509a:	f7f0 beb9 	b.w	8015e10 <USBD_LL_DataInStage>
 802509e:	bf00      	nop

080250a0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80250a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250a4:	f7f0 bf50 	b.w	8015f48 <USBD_LL_SOF>

080250a8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80250a8:	68c1      	ldr	r1, [r0, #12]
{
 80250aa:	b510      	push	{r4, lr}
 80250ac:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80250ae:	b111      	cbz	r1, 80250b6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80250b0:	2902      	cmp	r1, #2
 80250b2:	d10a      	bne.n	80250ca <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80250b4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80250b6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 80250ba:	f7f0 ff2d 	bl	8015f18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80250be:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 80250c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80250c6:	f7f0 beff 	b.w	8015ec8 <USBD_LL_Reset>
    Error_Handler();
 80250ca:	f7df fb9b 	bl	8004804 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80250ce:	2101      	movs	r1, #1
 80250d0:	e7f1      	b.n	80250b6 <HAL_PCD_ResetCallback+0xe>
 80250d2:	bf00      	nop

080250d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80250d4:	b510      	push	{r4, lr}
 80250d6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80250d8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80250dc:	f7f0 ff20 	bl	8015f20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80250e0:	6822      	ldr	r2, [r4, #0]
 80250e2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80250e6:	f043 0301 	orr.w	r3, r3, #1
 80250ea:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80250ee:	6a23      	ldr	r3, [r4, #32]
 80250f0:	b123      	cbz	r3, 80250fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80250f2:	4a03      	ldr	r2, [pc, #12]	; (8025100 <HAL_PCD_SuspendCallback+0x2c>)
 80250f4:	6913      	ldr	r3, [r2, #16]
 80250f6:	f043 0306 	orr.w	r3, r3, #6
 80250fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80250fc:	bd10      	pop	{r4, pc}
 80250fe:	bf00      	nop
 8025100:	e000ed00 	.word	0xe000ed00

08025104 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8025104:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025108:	f7f0 bf14 	b.w	8015f34 <USBD_LL_Resume>

0802510c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802510c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025110:	f7f0 bf2a 	b.w	8015f68 <USBD_LL_IsoOUTIncomplete>

08025114 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025114:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025118:	f7f0 bf24 	b.w	8015f64 <USBD_LL_IsoINIncomplete>

0802511c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802511c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025120:	f7f0 bf24 	b.w	8015f6c <USBD_LL_DevConnected>

08025124 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8025124:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8025128:	f7f0 bf22 	b.w	8015f70 <USBD_LL_DevDisconnected>

0802512c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802512c:	7802      	ldrb	r2, [r0, #0]
 802512e:	b10a      	cbz	r2, 8025134 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8025130:	2000      	movs	r0, #0
 8025132:	4770      	bx	lr
{
 8025134:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8025136:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8025138:	4b14      	ldr	r3, [pc, #80]	; (802518c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802513a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802513c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025140:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8025142:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8025144:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8025148:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802514c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802514e:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8025150:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8025152:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8025154:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8025158:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802515c:	2206      	movs	r2, #6
 802515e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8025160:	f7e8 fd20 	bl	800dba4 <HAL_PCD_Init>
 8025164:	b978      	cbnz	r0, 8025186 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8025166:	2180      	movs	r1, #128	; 0x80
 8025168:	4808      	ldr	r0, [pc, #32]	; (802518c <USBD_LL_Init+0x60>)
 802516a:	f7e9 fa85 	bl	800e678 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802516e:	2240      	movs	r2, #64	; 0x40
 8025170:	2100      	movs	r1, #0
 8025172:	4806      	ldr	r0, [pc, #24]	; (802518c <USBD_LL_Init+0x60>)
 8025174:	f7e9 fa56 	bl	800e624 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8025178:	2280      	movs	r2, #128	; 0x80
 802517a:	2101      	movs	r1, #1
 802517c:	4803      	ldr	r0, [pc, #12]	; (802518c <USBD_LL_Init+0x60>)
 802517e:	f7e9 fa51 	bl	800e624 <HAL_PCDEx_SetTxFiFo>
}
 8025182:	2000      	movs	r0, #0
 8025184:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8025186:	f7df fb3d 	bl	8004804 <Error_Handler>
 802518a:	e7ec      	b.n	8025166 <USBD_LL_Init+0x3a>
 802518c:	2002fcd0 	.word	0x2002fcd0

08025190 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8025190:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025194:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8025196:	f7e8 fdb3 	bl	800dd00 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802519a:	2803      	cmp	r0, #3
 802519c:	d802      	bhi.n	80251a4 <USBD_LL_Start+0x14>
 802519e:	4b02      	ldr	r3, [pc, #8]	; (80251a8 <USBD_LL_Start+0x18>)
 80251a0:	5c18      	ldrb	r0, [r3, r0]
}
 80251a2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 80251a4:	2003      	movs	r0, #3
}
 80251a6:	bd08      	pop	{r3, pc}
 80251a8:	08047528 	.word	0x08047528

080251ac <USBD_LL_OpenEP>:
{
 80251ac:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80251ae:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251b2:	461a      	mov	r2, r3
 80251b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80251b6:	4663      	mov	r3, ip
 80251b8:	f7e9 f8e6 	bl	800e388 <HAL_PCD_EP_Open>
  switch (hal_status)
 80251bc:	2803      	cmp	r0, #3
 80251be:	d802      	bhi.n	80251c6 <USBD_LL_OpenEP+0x1a>
 80251c0:	4b02      	ldr	r3, [pc, #8]	; (80251cc <USBD_LL_OpenEP+0x20>)
 80251c2:	5c18      	ldrb	r0, [r3, r0]
}
 80251c4:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80251c6:	2003      	movs	r0, #3
}
 80251c8:	bd08      	pop	{r3, pc}
 80251ca:	bf00      	nop
 80251cc:	08047528 	.word	0x08047528

080251d0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251d0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251d6:	f7e9 f915 	bl	800e404 <HAL_PCD_EP_Close>
  switch (hal_status)
 80251da:	2803      	cmp	r0, #3
 80251dc:	d802      	bhi.n	80251e4 <USBD_LL_CloseEP+0x14>
 80251de:	4b02      	ldr	r3, [pc, #8]	; (80251e8 <USBD_LL_CloseEP+0x18>)
 80251e0:	5c18      	ldrb	r0, [r3, r0]
}
 80251e2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80251e4:	2003      	movs	r0, #3
}
 80251e6:	bd08      	pop	{r3, pc}
 80251e8:	08047528 	.word	0x08047528

080251ec <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80251ec:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80251f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80251f2:	f7e9 f997 	bl	800e524 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80251f6:	2803      	cmp	r0, #3
 80251f8:	d802      	bhi.n	8025200 <USBD_LL_StallEP+0x14>
 80251fa:	4b02      	ldr	r3, [pc, #8]	; (8025204 <USBD_LL_StallEP+0x18>)
 80251fc:	5c18      	ldrb	r0, [r3, r0]
}
 80251fe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8025200:	2003      	movs	r0, #3
}
 8025202:	bd08      	pop	{r3, pc}
 8025204:	08047528 	.word	0x08047528

08025208 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8025208:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802520c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802520e:	f7e9 f9cd 	bl	800e5ac <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8025212:	2803      	cmp	r0, #3
 8025214:	d802      	bhi.n	802521c <USBD_LL_ClearStallEP+0x14>
 8025216:	4b02      	ldr	r3, [pc, #8]	; (8025220 <USBD_LL_ClearStallEP+0x18>)
 8025218:	5c18      	ldrb	r0, [r3, r0]
}
 802521a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802521c:	2003      	movs	r0, #3
}
 802521e:	bd08      	pop	{r3, pc}
 8025220:	08047528 	.word	0x08047528

08025224 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8025224:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8025226:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 802522a:	d406      	bmi.n	802523a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802522c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8025230:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8025234:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8025238:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802523a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802523e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8025242:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8025246:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 802524a:	4770      	bx	lr

0802524c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802524c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025250:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8025252:	f7e9 f883 	bl	800e35c <HAL_PCD_SetAddress>
  switch (hal_status)
 8025256:	2803      	cmp	r0, #3
 8025258:	d802      	bhi.n	8025260 <USBD_LL_SetUSBAddress+0x14>
 802525a:	4b02      	ldr	r3, [pc, #8]	; (8025264 <USBD_LL_SetUSBAddress+0x18>)
 802525c:	5c18      	ldrb	r0, [r3, r0]
}
 802525e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8025260:	2003      	movs	r0, #3
}
 8025262:	bd08      	pop	{r3, pc}
 8025264:	08047528 	.word	0x08047528

08025268 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8025268:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802526c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802526e:	f7e9 f931 	bl	800e4d4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8025272:	2803      	cmp	r0, #3
 8025274:	d802      	bhi.n	802527c <USBD_LL_Transmit+0x14>
 8025276:	4b02      	ldr	r3, [pc, #8]	; (8025280 <USBD_LL_Transmit+0x18>)
 8025278:	5c18      	ldrb	r0, [r3, r0]
}
 802527a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802527c:	2003      	movs	r0, #3
}
 802527e:	bd08      	pop	{r3, pc}
 8025280:	08047528 	.word	0x08047528

08025284 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025284:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8025288:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802528a:	f7e9 f8f1 	bl	800e470 <HAL_PCD_EP_Receive>
  switch (hal_status)
 802528e:	2803      	cmp	r0, #3
 8025290:	d802      	bhi.n	8025298 <USBD_LL_PrepareReceive+0x14>
 8025292:	4b02      	ldr	r3, [pc, #8]	; (802529c <USBD_LL_PrepareReceive+0x18>)
 8025294:	5c18      	ldrb	r0, [r3, r0]
}
 8025296:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025298:	2003      	movs	r0, #3
}
 802529a:	bd08      	pop	{r3, pc}
 802529c:	08047528 	.word	0x08047528

080252a0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80252a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80252a4:	f7e9 b90c 	b.w	800e4c0 <HAL_PCD_EP_GetRxCount>

080252a8 <HAL_PCDEx_LPM_Callback>:
{
 80252a8:	b510      	push	{r4, lr}
 80252aa:	4604      	mov	r4, r0
  switch (msg)
 80252ac:	b1a1      	cbz	r1, 80252d8 <HAL_PCDEx_LPM_Callback+0x30>
 80252ae:	2901      	cmp	r1, #1
 80252b0:	d111      	bne.n	80252d6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80252b2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80252b4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80252b8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80252bc:	f043 0301 	orr.w	r3, r3, #1
 80252c0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80252c4:	f7f0 fe2c 	bl	8015f20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80252c8:	6a23      	ldr	r3, [r4, #32]
 80252ca:	b123      	cbz	r3, 80252d6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80252cc:	4a0e      	ldr	r2, [pc, #56]	; (8025308 <HAL_PCDEx_LPM_Callback+0x60>)
 80252ce:	6913      	ldr	r3, [r2, #16]
 80252d0:	f043 0306 	orr.w	r3, r3, #6
 80252d4:	6113      	str	r3, [r2, #16]
}
 80252d6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80252d8:	6a03      	ldr	r3, [r0, #32]
 80252da:	b963      	cbnz	r3, 80252f6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252dc:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80252de:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252e2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80252e6:	f023 0301 	bic.w	r3, r3, #1
}
 80252ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80252ee:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80252f2:	f7f0 be1f 	b.w	8015f34 <USBD_LL_Resume>
  SystemClock_Config();
 80252f6:	f7df fa8d 	bl	8004814 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80252fa:	4a03      	ldr	r2, [pc, #12]	; (8025308 <HAL_PCDEx_LPM_Callback+0x60>)
 80252fc:	6913      	ldr	r3, [r2, #16]
 80252fe:	f023 0306 	bic.w	r3, r3, #6
 8025302:	6113      	str	r3, [r2, #16]
 8025304:	e7ea      	b.n	80252dc <HAL_PCDEx_LPM_Callback+0x34>
 8025306:	bf00      	nop
 8025308:	e000ed00 	.word	0xe000ed00

0802530c <atoi>:
 802530c:	220a      	movs	r2, #10
 802530e:	2100      	movs	r1, #0
 8025310:	f002 ba9a 	b.w	8027848 <strtol>

08025314 <ctime>:
 8025314:	b508      	push	{r3, lr}
 8025316:	f000 f91f 	bl	8025558 <localtime>
 802531a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802531e:	f002 be2d 	b.w	8027f7c <asctime>
 8025322:	Address 0x0000000008025322 is out of bounds.


08025324 <std>:
 8025324:	2300      	movs	r3, #0
 8025326:	b510      	push	{r4, lr}
 8025328:	4604      	mov	r4, r0
 802532a:	e9c0 3300 	strd	r3, r3, [r0]
 802532e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025332:	6083      	str	r3, [r0, #8]
 8025334:	8181      	strh	r1, [r0, #12]
 8025336:	6643      	str	r3, [r0, #100]	; 0x64
 8025338:	81c2      	strh	r2, [r0, #14]
 802533a:	6183      	str	r3, [r0, #24]
 802533c:	4619      	mov	r1, r3
 802533e:	2208      	movs	r2, #8
 8025340:	305c      	adds	r0, #92	; 0x5c
 8025342:	f000 fa69 	bl	8025818 <memset>
 8025346:	4b05      	ldr	r3, [pc, #20]	; (802535c <std+0x38>)
 8025348:	6263      	str	r3, [r4, #36]	; 0x24
 802534a:	4b05      	ldr	r3, [pc, #20]	; (8025360 <std+0x3c>)
 802534c:	62a3      	str	r3, [r4, #40]	; 0x28
 802534e:	4b05      	ldr	r3, [pc, #20]	; (8025364 <std+0x40>)
 8025350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025352:	4b05      	ldr	r3, [pc, #20]	; (8025368 <std+0x44>)
 8025354:	6224      	str	r4, [r4, #32]
 8025356:	6323      	str	r3, [r4, #48]	; 0x30
 8025358:	bd10      	pop	{r4, pc}
 802535a:	bf00      	nop
 802535c:	08026bc1 	.word	0x08026bc1
 8025360:	08026be7 	.word	0x08026be7
 8025364:	08026c1f 	.word	0x08026c1f
 8025368:	08026c43 	.word	0x08026c43

0802536c <_cleanup_r>:
 802536c:	4901      	ldr	r1, [pc, #4]	; (8025374 <_cleanup_r+0x8>)
 802536e:	f000 b8af 	b.w	80254d0 <_fwalk_reent>
 8025372:	bf00      	nop
 8025374:	08028d9d 	.word	0x08028d9d

08025378 <__sfmoreglue>:
 8025378:	b570      	push	{r4, r5, r6, lr}
 802537a:	2268      	movs	r2, #104	; 0x68
 802537c:	1e4d      	subs	r5, r1, #1
 802537e:	4355      	muls	r5, r2
 8025380:	460e      	mov	r6, r1
 8025382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025386:	f000 fd2d 	bl	8025de4 <_malloc_r>
 802538a:	4604      	mov	r4, r0
 802538c:	b140      	cbz	r0, 80253a0 <__sfmoreglue+0x28>
 802538e:	2100      	movs	r1, #0
 8025390:	e9c0 1600 	strd	r1, r6, [r0]
 8025394:	300c      	adds	r0, #12
 8025396:	60a0      	str	r0, [r4, #8]
 8025398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802539c:	f000 fa3c 	bl	8025818 <memset>
 80253a0:	4620      	mov	r0, r4
 80253a2:	bd70      	pop	{r4, r5, r6, pc}

080253a4 <__sfp_lock_acquire>:
 80253a4:	4801      	ldr	r0, [pc, #4]	; (80253ac <__sfp_lock_acquire+0x8>)
 80253a6:	f000 b9eb 	b.w	8025780 <__retarget_lock_acquire_recursive>
 80253aa:	bf00      	nop
 80253ac:	200300d6 	.word	0x200300d6

080253b0 <__sfp_lock_release>:
 80253b0:	4801      	ldr	r0, [pc, #4]	; (80253b8 <__sfp_lock_release+0x8>)
 80253b2:	f000 b9e7 	b.w	8025784 <__retarget_lock_release_recursive>
 80253b6:	bf00      	nop
 80253b8:	200300d6 	.word	0x200300d6

080253bc <__sinit_lock_acquire>:
 80253bc:	4801      	ldr	r0, [pc, #4]	; (80253c4 <__sinit_lock_acquire+0x8>)
 80253be:	f000 b9df 	b.w	8025780 <__retarget_lock_acquire_recursive>
 80253c2:	bf00      	nop
 80253c4:	200300d7 	.word	0x200300d7

080253c8 <__sinit_lock_release>:
 80253c8:	4801      	ldr	r0, [pc, #4]	; (80253d0 <__sinit_lock_release+0x8>)
 80253ca:	f000 b9db 	b.w	8025784 <__retarget_lock_release_recursive>
 80253ce:	bf00      	nop
 80253d0:	200300d7 	.word	0x200300d7

080253d4 <__sinit>:
 80253d4:	b510      	push	{r4, lr}
 80253d6:	4604      	mov	r4, r0
 80253d8:	f7ff fff0 	bl	80253bc <__sinit_lock_acquire>
 80253dc:	69a3      	ldr	r3, [r4, #24]
 80253de:	b11b      	cbz	r3, 80253e8 <__sinit+0x14>
 80253e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253e4:	f7ff bff0 	b.w	80253c8 <__sinit_lock_release>
 80253e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80253ec:	6523      	str	r3, [r4, #80]	; 0x50
 80253ee:	4b13      	ldr	r3, [pc, #76]	; (802543c <__sinit+0x68>)
 80253f0:	4a13      	ldr	r2, [pc, #76]	; (8025440 <__sinit+0x6c>)
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80253f6:	42a3      	cmp	r3, r4
 80253f8:	bf04      	itt	eq
 80253fa:	2301      	moveq	r3, #1
 80253fc:	61a3      	streq	r3, [r4, #24]
 80253fe:	4620      	mov	r0, r4
 8025400:	f000 f820 	bl	8025444 <__sfp>
 8025404:	6060      	str	r0, [r4, #4]
 8025406:	4620      	mov	r0, r4
 8025408:	f000 f81c 	bl	8025444 <__sfp>
 802540c:	60a0      	str	r0, [r4, #8]
 802540e:	4620      	mov	r0, r4
 8025410:	f000 f818 	bl	8025444 <__sfp>
 8025414:	2200      	movs	r2, #0
 8025416:	60e0      	str	r0, [r4, #12]
 8025418:	2104      	movs	r1, #4
 802541a:	6860      	ldr	r0, [r4, #4]
 802541c:	f7ff ff82 	bl	8025324 <std>
 8025420:	68a0      	ldr	r0, [r4, #8]
 8025422:	2201      	movs	r2, #1
 8025424:	2109      	movs	r1, #9
 8025426:	f7ff ff7d 	bl	8025324 <std>
 802542a:	68e0      	ldr	r0, [r4, #12]
 802542c:	2202      	movs	r2, #2
 802542e:	2112      	movs	r1, #18
 8025430:	f7ff ff78 	bl	8025324 <std>
 8025434:	2301      	movs	r3, #1
 8025436:	61a3      	str	r3, [r4, #24]
 8025438:	e7d2      	b.n	80253e0 <__sinit+0xc>
 802543a:	bf00      	nop
 802543c:	08047690 	.word	0x08047690
 8025440:	0802536d 	.word	0x0802536d

08025444 <__sfp>:
 8025444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025446:	4607      	mov	r7, r0
 8025448:	f7ff ffac 	bl	80253a4 <__sfp_lock_acquire>
 802544c:	4b1e      	ldr	r3, [pc, #120]	; (80254c8 <__sfp+0x84>)
 802544e:	681e      	ldr	r6, [r3, #0]
 8025450:	69b3      	ldr	r3, [r6, #24]
 8025452:	b913      	cbnz	r3, 802545a <__sfp+0x16>
 8025454:	4630      	mov	r0, r6
 8025456:	f7ff ffbd 	bl	80253d4 <__sinit>
 802545a:	3648      	adds	r6, #72	; 0x48
 802545c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025460:	3b01      	subs	r3, #1
 8025462:	d503      	bpl.n	802546c <__sfp+0x28>
 8025464:	6833      	ldr	r3, [r6, #0]
 8025466:	b30b      	cbz	r3, 80254ac <__sfp+0x68>
 8025468:	6836      	ldr	r6, [r6, #0]
 802546a:	e7f7      	b.n	802545c <__sfp+0x18>
 802546c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025470:	b9d5      	cbnz	r5, 80254a8 <__sfp+0x64>
 8025472:	4b16      	ldr	r3, [pc, #88]	; (80254cc <__sfp+0x88>)
 8025474:	60e3      	str	r3, [r4, #12]
 8025476:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802547a:	6665      	str	r5, [r4, #100]	; 0x64
 802547c:	f000 f97e 	bl	802577c <__retarget_lock_init_recursive>
 8025480:	f7ff ff96 	bl	80253b0 <__sfp_lock_release>
 8025484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802548c:	6025      	str	r5, [r4, #0]
 802548e:	61a5      	str	r5, [r4, #24]
 8025490:	2208      	movs	r2, #8
 8025492:	4629      	mov	r1, r5
 8025494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025498:	f000 f9be 	bl	8025818 <memset>
 802549c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80254a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80254a4:	4620      	mov	r0, r4
 80254a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80254a8:	3468      	adds	r4, #104	; 0x68
 80254aa:	e7d9      	b.n	8025460 <__sfp+0x1c>
 80254ac:	2104      	movs	r1, #4
 80254ae:	4638      	mov	r0, r7
 80254b0:	f7ff ff62 	bl	8025378 <__sfmoreglue>
 80254b4:	4604      	mov	r4, r0
 80254b6:	6030      	str	r0, [r6, #0]
 80254b8:	2800      	cmp	r0, #0
 80254ba:	d1d5      	bne.n	8025468 <__sfp+0x24>
 80254bc:	f7ff ff78 	bl	80253b0 <__sfp_lock_release>
 80254c0:	230c      	movs	r3, #12
 80254c2:	603b      	str	r3, [r7, #0]
 80254c4:	e7ee      	b.n	80254a4 <__sfp+0x60>
 80254c6:	bf00      	nop
 80254c8:	08047690 	.word	0x08047690
 80254cc:	ffff0001 	.word	0xffff0001

080254d0 <_fwalk_reent>:
 80254d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254d4:	4606      	mov	r6, r0
 80254d6:	4688      	mov	r8, r1
 80254d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80254dc:	2700      	movs	r7, #0
 80254de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80254e2:	f1b9 0901 	subs.w	r9, r9, #1
 80254e6:	d505      	bpl.n	80254f4 <_fwalk_reent+0x24>
 80254e8:	6824      	ldr	r4, [r4, #0]
 80254ea:	2c00      	cmp	r4, #0
 80254ec:	d1f7      	bne.n	80254de <_fwalk_reent+0xe>
 80254ee:	4638      	mov	r0, r7
 80254f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80254f4:	89ab      	ldrh	r3, [r5, #12]
 80254f6:	2b01      	cmp	r3, #1
 80254f8:	d907      	bls.n	802550a <_fwalk_reent+0x3a>
 80254fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80254fe:	3301      	adds	r3, #1
 8025500:	d003      	beq.n	802550a <_fwalk_reent+0x3a>
 8025502:	4629      	mov	r1, r5
 8025504:	4630      	mov	r0, r6
 8025506:	47c0      	blx	r8
 8025508:	4307      	orrs	r7, r0
 802550a:	3568      	adds	r5, #104	; 0x68
 802550c:	e7e9      	b.n	80254e2 <_fwalk_reent+0x12>
 802550e:	Address 0x000000000802550e is out of bounds.


08025510 <__libc_init_array>:
 8025510:	b570      	push	{r4, r5, r6, lr}
 8025512:	4d0d      	ldr	r5, [pc, #52]	; (8025548 <__libc_init_array+0x38>)
 8025514:	4c0d      	ldr	r4, [pc, #52]	; (802554c <__libc_init_array+0x3c>)
 8025516:	1b64      	subs	r4, r4, r5
 8025518:	10a4      	asrs	r4, r4, #2
 802551a:	2600      	movs	r6, #0
 802551c:	42a6      	cmp	r6, r4
 802551e:	d109      	bne.n	8025534 <__libc_init_array+0x24>
 8025520:	4d0b      	ldr	r5, [pc, #44]	; (8025550 <__libc_init_array+0x40>)
 8025522:	4c0c      	ldr	r4, [pc, #48]	; (8025554 <__libc_init_array+0x44>)
 8025524:	f005 f944 	bl	802a7b0 <_init>
 8025528:	1b64      	subs	r4, r4, r5
 802552a:	10a4      	asrs	r4, r4, #2
 802552c:	2600      	movs	r6, #0
 802552e:	42a6      	cmp	r6, r4
 8025530:	d105      	bne.n	802553e <__libc_init_array+0x2e>
 8025532:	bd70      	pop	{r4, r5, r6, pc}
 8025534:	f855 3b04 	ldr.w	r3, [r5], #4
 8025538:	4798      	blx	r3
 802553a:	3601      	adds	r6, #1
 802553c:	e7ee      	b.n	802551c <__libc_init_array+0xc>
 802553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025542:	4798      	blx	r3
 8025544:	3601      	adds	r6, #1
 8025546:	e7f2      	b.n	802552e <__libc_init_array+0x1e>
 8025548:	08047e1c 	.word	0x08047e1c
 802554c:	08047e1c 	.word	0x08047e1c
 8025550:	08047e1c 	.word	0x08047e1c
 8025554:	08047e20 	.word	0x08047e20

08025558 <localtime>:
 8025558:	b538      	push	{r3, r4, r5, lr}
 802555a:	4b0b      	ldr	r3, [pc, #44]	; (8025588 <localtime+0x30>)
 802555c:	681d      	ldr	r5, [r3, #0]
 802555e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8025560:	4604      	mov	r4, r0
 8025562:	b953      	cbnz	r3, 802557a <localtime+0x22>
 8025564:	2024      	movs	r0, #36	; 0x24
 8025566:	f000 f90f 	bl	8025788 <malloc>
 802556a:	4602      	mov	r2, r0
 802556c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802556e:	b920      	cbnz	r0, 802557a <localtime+0x22>
 8025570:	4b06      	ldr	r3, [pc, #24]	; (802558c <localtime+0x34>)
 8025572:	4807      	ldr	r0, [pc, #28]	; (8025590 <localtime+0x38>)
 8025574:	2132      	movs	r1, #50	; 0x32
 8025576:	f002 fd49 	bl	802800c <__assert_func>
 802557a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802557c:	4620      	mov	r0, r4
 802557e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025582:	f000 b807 	b.w	8025594 <localtime_r>
 8025586:	bf00      	nop
 8025588:	200004a4 	.word	0x200004a4
 802558c:	08047694 	.word	0x08047694
 8025590:	080476ab 	.word	0x080476ab

08025594 <localtime_r>:
 8025594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025598:	4680      	mov	r8, r0
 802559a:	9101      	str	r1, [sp, #4]
 802559c:	f003 fc90 	bl	8028ec0 <__gettzinfo>
 80255a0:	9901      	ldr	r1, [sp, #4]
 80255a2:	4605      	mov	r5, r0
 80255a4:	4640      	mov	r0, r8
 80255a6:	f003 fc8f 	bl	8028ec8 <gmtime_r>
 80255aa:	6943      	ldr	r3, [r0, #20]
 80255ac:	0799      	lsls	r1, r3, #30
 80255ae:	4604      	mov	r4, r0
 80255b0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80255b4:	d105      	bne.n	80255c2 <localtime_r+0x2e>
 80255b6:	2264      	movs	r2, #100	; 0x64
 80255b8:	fb97 f3f2 	sdiv	r3, r7, r2
 80255bc:	fb02 7313 	mls	r3, r2, r3, r7
 80255c0:	bb73      	cbnz	r3, 8025620 <localtime_r+0x8c>
 80255c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80255c6:	fb97 f6f3 	sdiv	r6, r7, r3
 80255ca:	fb03 7616 	mls	r6, r3, r6, r7
 80255ce:	fab6 f386 	clz	r3, r6
 80255d2:	095b      	lsrs	r3, r3, #5
 80255d4:	4e67      	ldr	r6, [pc, #412]	; (8025774 <localtime_r+0x1e0>)
 80255d6:	2230      	movs	r2, #48	; 0x30
 80255d8:	fb02 6603 	mla	r6, r2, r3, r6
 80255dc:	f002 fa66 	bl	8027aac <__tz_lock>
 80255e0:	f002 fa70 	bl	8027ac4 <_tzset_unlocked>
 80255e4:	4b64      	ldr	r3, [pc, #400]	; (8025778 <localtime_r+0x1e4>)
 80255e6:	681b      	ldr	r3, [r3, #0]
 80255e8:	b34b      	cbz	r3, 802563e <localtime_r+0xaa>
 80255ea:	686b      	ldr	r3, [r5, #4]
 80255ec:	42bb      	cmp	r3, r7
 80255ee:	d119      	bne.n	8025624 <localtime_r+0x90>
 80255f0:	682f      	ldr	r7, [r5, #0]
 80255f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80255f6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80255fa:	b9df      	cbnz	r7, 8025634 <localtime_r+0xa0>
 80255fc:	4282      	cmp	r2, r0
 80255fe:	eb73 0101 	sbcs.w	r1, r3, r1
 8025602:	da23      	bge.n	802564c <localtime_r+0xb8>
 8025604:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025608:	4282      	cmp	r2, r0
 802560a:	eb73 0701 	sbcs.w	r7, r3, r1
 802560e:	bfb4      	ite	lt
 8025610:	2701      	movlt	r7, #1
 8025612:	2700      	movge	r7, #0
 8025614:	4282      	cmp	r2, r0
 8025616:	418b      	sbcs	r3, r1
 8025618:	6227      	str	r7, [r4, #32]
 802561a:	db19      	blt.n	8025650 <localtime_r+0xbc>
 802561c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802561e:	e018      	b.n	8025652 <localtime_r+0xbe>
 8025620:	2301      	movs	r3, #1
 8025622:	e7d7      	b.n	80255d4 <localtime_r+0x40>
 8025624:	4638      	mov	r0, r7
 8025626:	f002 f997 	bl	8027958 <__tzcalc_limits>
 802562a:	2800      	cmp	r0, #0
 802562c:	d1e0      	bne.n	80255f0 <localtime_r+0x5c>
 802562e:	f04f 33ff 	mov.w	r3, #4294967295
 8025632:	e004      	b.n	802563e <localtime_r+0xaa>
 8025634:	4282      	cmp	r2, r0
 8025636:	eb73 0101 	sbcs.w	r1, r3, r1
 802563a:	da02      	bge.n	8025642 <localtime_r+0xae>
 802563c:	2300      	movs	r3, #0
 802563e:	6223      	str	r3, [r4, #32]
 8025640:	e7ec      	b.n	802561c <localtime_r+0x88>
 8025642:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025646:	4282      	cmp	r2, r0
 8025648:	418b      	sbcs	r3, r1
 802564a:	daf7      	bge.n	802563c <localtime_r+0xa8>
 802564c:	2301      	movs	r3, #1
 802564e:	6223      	str	r3, [r4, #32]
 8025650:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8025652:	6861      	ldr	r1, [r4, #4]
 8025654:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8025658:	203c      	movs	r0, #60	; 0x3c
 802565a:	fb93 f5f2 	sdiv	r5, r3, r2
 802565e:	fb02 3315 	mls	r3, r2, r5, r3
 8025662:	fb93 f2f0 	sdiv	r2, r3, r0
 8025666:	fb00 3012 	mls	r0, r0, r2, r3
 802566a:	6823      	ldr	r3, [r4, #0]
 802566c:	1a89      	subs	r1, r1, r2
 802566e:	68a2      	ldr	r2, [r4, #8]
 8025670:	6061      	str	r1, [r4, #4]
 8025672:	1a1b      	subs	r3, r3, r0
 8025674:	1b52      	subs	r2, r2, r5
 8025676:	2b3b      	cmp	r3, #59	; 0x3b
 8025678:	6023      	str	r3, [r4, #0]
 802567a:	60a2      	str	r2, [r4, #8]
 802567c:	dd35      	ble.n	80256ea <localtime_r+0x156>
 802567e:	3101      	adds	r1, #1
 8025680:	6061      	str	r1, [r4, #4]
 8025682:	3b3c      	subs	r3, #60	; 0x3c
 8025684:	6023      	str	r3, [r4, #0]
 8025686:	6863      	ldr	r3, [r4, #4]
 8025688:	2b3b      	cmp	r3, #59	; 0x3b
 802568a:	dd34      	ble.n	80256f6 <localtime_r+0x162>
 802568c:	3201      	adds	r2, #1
 802568e:	60a2      	str	r2, [r4, #8]
 8025690:	3b3c      	subs	r3, #60	; 0x3c
 8025692:	6063      	str	r3, [r4, #4]
 8025694:	68a3      	ldr	r3, [r4, #8]
 8025696:	2b17      	cmp	r3, #23
 8025698:	dd33      	ble.n	8025702 <localtime_r+0x16e>
 802569a:	69e2      	ldr	r2, [r4, #28]
 802569c:	3201      	adds	r2, #1
 802569e:	61e2      	str	r2, [r4, #28]
 80256a0:	69a2      	ldr	r2, [r4, #24]
 80256a2:	3201      	adds	r2, #1
 80256a4:	2a06      	cmp	r2, #6
 80256a6:	bfc8      	it	gt
 80256a8:	2200      	movgt	r2, #0
 80256aa:	61a2      	str	r2, [r4, #24]
 80256ac:	68e2      	ldr	r2, [r4, #12]
 80256ae:	3b18      	subs	r3, #24
 80256b0:	3201      	adds	r2, #1
 80256b2:	60a3      	str	r3, [r4, #8]
 80256b4:	6923      	ldr	r3, [r4, #16]
 80256b6:	60e2      	str	r2, [r4, #12]
 80256b8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80256bc:	428a      	cmp	r2, r1
 80256be:	dd0e      	ble.n	80256de <localtime_r+0x14a>
 80256c0:	2b0b      	cmp	r3, #11
 80256c2:	eba2 0201 	sub.w	r2, r2, r1
 80256c6:	60e2      	str	r2, [r4, #12]
 80256c8:	f103 0201 	add.w	r2, r3, #1
 80256cc:	bf09      	itett	eq
 80256ce:	6963      	ldreq	r3, [r4, #20]
 80256d0:	6122      	strne	r2, [r4, #16]
 80256d2:	2200      	moveq	r2, #0
 80256d4:	3301      	addeq	r3, #1
 80256d6:	bf02      	ittt	eq
 80256d8:	6122      	streq	r2, [r4, #16]
 80256da:	6163      	streq	r3, [r4, #20]
 80256dc:	61e2      	streq	r2, [r4, #28]
 80256de:	f002 f9eb 	bl	8027ab8 <__tz_unlock>
 80256e2:	4620      	mov	r0, r4
 80256e4:	b002      	add	sp, #8
 80256e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256ea:	2b00      	cmp	r3, #0
 80256ec:	dacb      	bge.n	8025686 <localtime_r+0xf2>
 80256ee:	3901      	subs	r1, #1
 80256f0:	6061      	str	r1, [r4, #4]
 80256f2:	333c      	adds	r3, #60	; 0x3c
 80256f4:	e7c6      	b.n	8025684 <localtime_r+0xf0>
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	dacc      	bge.n	8025694 <localtime_r+0x100>
 80256fa:	3a01      	subs	r2, #1
 80256fc:	60a2      	str	r2, [r4, #8]
 80256fe:	333c      	adds	r3, #60	; 0x3c
 8025700:	e7c7      	b.n	8025692 <localtime_r+0xfe>
 8025702:	2b00      	cmp	r3, #0
 8025704:	daeb      	bge.n	80256de <localtime_r+0x14a>
 8025706:	69e2      	ldr	r2, [r4, #28]
 8025708:	3a01      	subs	r2, #1
 802570a:	61e2      	str	r2, [r4, #28]
 802570c:	69a2      	ldr	r2, [r4, #24]
 802570e:	3a01      	subs	r2, #1
 8025710:	bf48      	it	mi
 8025712:	2206      	movmi	r2, #6
 8025714:	61a2      	str	r2, [r4, #24]
 8025716:	68e2      	ldr	r2, [r4, #12]
 8025718:	3318      	adds	r3, #24
 802571a:	3a01      	subs	r2, #1
 802571c:	60e2      	str	r2, [r4, #12]
 802571e:	60a3      	str	r3, [r4, #8]
 8025720:	2a00      	cmp	r2, #0
 8025722:	d1dc      	bne.n	80256de <localtime_r+0x14a>
 8025724:	6923      	ldr	r3, [r4, #16]
 8025726:	3b01      	subs	r3, #1
 8025728:	d405      	bmi.n	8025736 <localtime_r+0x1a2>
 802572a:	6123      	str	r3, [r4, #16]
 802572c:	6923      	ldr	r3, [r4, #16]
 802572e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025732:	60e3      	str	r3, [r4, #12]
 8025734:	e7d3      	b.n	80256de <localtime_r+0x14a>
 8025736:	230b      	movs	r3, #11
 8025738:	6123      	str	r3, [r4, #16]
 802573a:	6963      	ldr	r3, [r4, #20]
 802573c:	1e5a      	subs	r2, r3, #1
 802573e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8025742:	6162      	str	r2, [r4, #20]
 8025744:	079a      	lsls	r2, r3, #30
 8025746:	d105      	bne.n	8025754 <localtime_r+0x1c0>
 8025748:	2164      	movs	r1, #100	; 0x64
 802574a:	fb93 f2f1 	sdiv	r2, r3, r1
 802574e:	fb01 3212 	mls	r2, r1, r2, r3
 8025752:	b962      	cbnz	r2, 802576e <localtime_r+0x1da>
 8025754:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025758:	fb93 f1f2 	sdiv	r1, r3, r2
 802575c:	fb02 3311 	mls	r3, r2, r1, r3
 8025760:	fab3 f383 	clz	r3, r3
 8025764:	095b      	lsrs	r3, r3, #5
 8025766:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802576a:	61e3      	str	r3, [r4, #28]
 802576c:	e7de      	b.n	802572c <localtime_r+0x198>
 802576e:	2301      	movs	r3, #1
 8025770:	e7f9      	b.n	8025766 <localtime_r+0x1d2>
 8025772:	bf00      	nop
 8025774:	08047768 	.word	0x08047768
 8025778:	20030104 	.word	0x20030104

0802577c <__retarget_lock_init_recursive>:
 802577c:	4770      	bx	lr

0802577e <__retarget_lock_acquire>:
 802577e:	4770      	bx	lr

08025780 <__retarget_lock_acquire_recursive>:
 8025780:	4770      	bx	lr

08025782 <__retarget_lock_release>:
 8025782:	4770      	bx	lr

08025784 <__retarget_lock_release_recursive>:
 8025784:	4770      	bx	lr
 8025786:	Address 0x0000000008025786 is out of bounds.


08025788 <malloc>:
 8025788:	4b02      	ldr	r3, [pc, #8]	; (8025794 <malloc+0xc>)
 802578a:	4601      	mov	r1, r0
 802578c:	6818      	ldr	r0, [r3, #0]
 802578e:	f000 bb29 	b.w	8025de4 <_malloc_r>
 8025792:	bf00      	nop
 8025794:	200004a4 	.word	0x200004a4

08025798 <free>:
 8025798:	4b02      	ldr	r3, [pc, #8]	; (80257a4 <free+0xc>)
 802579a:	4601      	mov	r1, r0
 802579c:	6818      	ldr	r0, [r3, #0]
 802579e:	f000 bab5 	b.w	8025d0c <_free_r>
 80257a2:	bf00      	nop
 80257a4:	200004a4 	.word	0x200004a4

080257a8 <memcmp>:
 80257a8:	b510      	push	{r4, lr}
 80257aa:	3901      	subs	r1, #1
 80257ac:	4402      	add	r2, r0
 80257ae:	4290      	cmp	r0, r2
 80257b0:	d101      	bne.n	80257b6 <memcmp+0xe>
 80257b2:	2000      	movs	r0, #0
 80257b4:	e005      	b.n	80257c2 <memcmp+0x1a>
 80257b6:	7803      	ldrb	r3, [r0, #0]
 80257b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80257bc:	42a3      	cmp	r3, r4
 80257be:	d001      	beq.n	80257c4 <memcmp+0x1c>
 80257c0:	1b18      	subs	r0, r3, r4
 80257c2:	bd10      	pop	{r4, pc}
 80257c4:	3001      	adds	r0, #1
 80257c6:	e7f2      	b.n	80257ae <memcmp+0x6>

080257c8 <memcpy>:
 80257c8:	440a      	add	r2, r1
 80257ca:	4291      	cmp	r1, r2
 80257cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80257d0:	d100      	bne.n	80257d4 <memcpy+0xc>
 80257d2:	4770      	bx	lr
 80257d4:	b510      	push	{r4, lr}
 80257d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80257da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80257de:	4291      	cmp	r1, r2
 80257e0:	d1f9      	bne.n	80257d6 <memcpy+0xe>
 80257e2:	bd10      	pop	{r4, pc}

080257e4 <memmove>:
 80257e4:	4288      	cmp	r0, r1
 80257e6:	b510      	push	{r4, lr}
 80257e8:	eb01 0402 	add.w	r4, r1, r2
 80257ec:	d902      	bls.n	80257f4 <memmove+0x10>
 80257ee:	4284      	cmp	r4, r0
 80257f0:	4623      	mov	r3, r4
 80257f2:	d807      	bhi.n	8025804 <memmove+0x20>
 80257f4:	1e43      	subs	r3, r0, #1
 80257f6:	42a1      	cmp	r1, r4
 80257f8:	d008      	beq.n	802580c <memmove+0x28>
 80257fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80257fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025802:	e7f8      	b.n	80257f6 <memmove+0x12>
 8025804:	4402      	add	r2, r0
 8025806:	4601      	mov	r1, r0
 8025808:	428a      	cmp	r2, r1
 802580a:	d100      	bne.n	802580e <memmove+0x2a>
 802580c:	bd10      	pop	{r4, pc}
 802580e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025816:	e7f7      	b.n	8025808 <memmove+0x24>

08025818 <memset>:
 8025818:	4402      	add	r2, r0
 802581a:	4603      	mov	r3, r0
 802581c:	4293      	cmp	r3, r2
 802581e:	d100      	bne.n	8025822 <memset+0xa>
 8025820:	4770      	bx	lr
 8025822:	f803 1b01 	strb.w	r1, [r3], #1
 8025826:	e7f9      	b.n	802581c <memset+0x4>

08025828 <validate_structure>:
 8025828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802582a:	6801      	ldr	r1, [r0, #0]
 802582c:	293b      	cmp	r1, #59	; 0x3b
 802582e:	4604      	mov	r4, r0
 8025830:	d911      	bls.n	8025856 <validate_structure+0x2e>
 8025832:	223c      	movs	r2, #60	; 0x3c
 8025834:	4668      	mov	r0, sp
 8025836:	f002 fc17 	bl	8028068 <div>
 802583a:	9a01      	ldr	r2, [sp, #4]
 802583c:	6863      	ldr	r3, [r4, #4]
 802583e:	9900      	ldr	r1, [sp, #0]
 8025840:	2a00      	cmp	r2, #0
 8025842:	440b      	add	r3, r1
 8025844:	6063      	str	r3, [r4, #4]
 8025846:	bfbb      	ittet	lt
 8025848:	323c      	addlt	r2, #60	; 0x3c
 802584a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802584e:	6022      	strge	r2, [r4, #0]
 8025850:	6022      	strlt	r2, [r4, #0]
 8025852:	bfb8      	it	lt
 8025854:	6063      	strlt	r3, [r4, #4]
 8025856:	6861      	ldr	r1, [r4, #4]
 8025858:	293b      	cmp	r1, #59	; 0x3b
 802585a:	d911      	bls.n	8025880 <validate_structure+0x58>
 802585c:	223c      	movs	r2, #60	; 0x3c
 802585e:	4668      	mov	r0, sp
 8025860:	f002 fc02 	bl	8028068 <div>
 8025864:	9a01      	ldr	r2, [sp, #4]
 8025866:	68a3      	ldr	r3, [r4, #8]
 8025868:	9900      	ldr	r1, [sp, #0]
 802586a:	2a00      	cmp	r2, #0
 802586c:	440b      	add	r3, r1
 802586e:	60a3      	str	r3, [r4, #8]
 8025870:	bfbb      	ittet	lt
 8025872:	323c      	addlt	r2, #60	; 0x3c
 8025874:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8025878:	6062      	strge	r2, [r4, #4]
 802587a:	6062      	strlt	r2, [r4, #4]
 802587c:	bfb8      	it	lt
 802587e:	60a3      	strlt	r3, [r4, #8]
 8025880:	68a1      	ldr	r1, [r4, #8]
 8025882:	2917      	cmp	r1, #23
 8025884:	d911      	bls.n	80258aa <validate_structure+0x82>
 8025886:	2218      	movs	r2, #24
 8025888:	4668      	mov	r0, sp
 802588a:	f002 fbed 	bl	8028068 <div>
 802588e:	9a01      	ldr	r2, [sp, #4]
 8025890:	68e3      	ldr	r3, [r4, #12]
 8025892:	9900      	ldr	r1, [sp, #0]
 8025894:	2a00      	cmp	r2, #0
 8025896:	440b      	add	r3, r1
 8025898:	60e3      	str	r3, [r4, #12]
 802589a:	bfbb      	ittet	lt
 802589c:	3218      	addlt	r2, #24
 802589e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80258a2:	60a2      	strge	r2, [r4, #8]
 80258a4:	60a2      	strlt	r2, [r4, #8]
 80258a6:	bfb8      	it	lt
 80258a8:	60e3      	strlt	r3, [r4, #12]
 80258aa:	6921      	ldr	r1, [r4, #16]
 80258ac:	290b      	cmp	r1, #11
 80258ae:	d911      	bls.n	80258d4 <validate_structure+0xac>
 80258b0:	220c      	movs	r2, #12
 80258b2:	4668      	mov	r0, sp
 80258b4:	f002 fbd8 	bl	8028068 <div>
 80258b8:	9a01      	ldr	r2, [sp, #4]
 80258ba:	6963      	ldr	r3, [r4, #20]
 80258bc:	9900      	ldr	r1, [sp, #0]
 80258be:	2a00      	cmp	r2, #0
 80258c0:	440b      	add	r3, r1
 80258c2:	6163      	str	r3, [r4, #20]
 80258c4:	bfbb      	ittet	lt
 80258c6:	320c      	addlt	r2, #12
 80258c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80258cc:	6122      	strge	r2, [r4, #16]
 80258ce:	6122      	strlt	r2, [r4, #16]
 80258d0:	bfb8      	it	lt
 80258d2:	6163      	strlt	r3, [r4, #20]
 80258d4:	6963      	ldr	r3, [r4, #20]
 80258d6:	0798      	lsls	r0, r3, #30
 80258d8:	d120      	bne.n	802591c <validate_structure+0xf4>
 80258da:	2164      	movs	r1, #100	; 0x64
 80258dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80258e0:	fb01 3212 	mls	r2, r1, r2, r3
 80258e4:	b9e2      	cbnz	r2, 8025920 <validate_structure+0xf8>
 80258e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80258ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80258ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80258f2:	fb02 3311 	mls	r3, r2, r1, r3
 80258f6:	2b00      	cmp	r3, #0
 80258f8:	bf14      	ite	ne
 80258fa:	231c      	movne	r3, #28
 80258fc:	231d      	moveq	r3, #29
 80258fe:	68e2      	ldr	r2, [r4, #12]
 8025900:	2a00      	cmp	r2, #0
 8025902:	dc0f      	bgt.n	8025924 <validate_structure+0xfc>
 8025904:	4f33      	ldr	r7, [pc, #204]	; (80259d4 <validate_structure+0x1ac>)
 8025906:	260b      	movs	r6, #11
 8025908:	2064      	movs	r0, #100	; 0x64
 802590a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802590e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8025912:	f1bc 0f00 	cmp.w	ip, #0
 8025916:	dd31      	ble.n	802597c <validate_structure+0x154>
 8025918:	b003      	add	sp, #12
 802591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802591c:	231c      	movs	r3, #28
 802591e:	e7ee      	b.n	80258fe <validate_structure+0xd6>
 8025920:	231d      	movs	r3, #29
 8025922:	e7ec      	b.n	80258fe <validate_structure+0xd6>
 8025924:	4e2b      	ldr	r6, [pc, #172]	; (80259d4 <validate_structure+0x1ac>)
 8025926:	2700      	movs	r7, #0
 8025928:	2064      	movs	r0, #100	; 0x64
 802592a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802592e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8025932:	2a01      	cmp	r2, #1
 8025934:	bf14      	ite	ne
 8025936:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802593a:	469c      	moveq	ip, r3
 802593c:	4561      	cmp	r1, ip
 802593e:	ddeb      	ble.n	8025918 <validate_structure+0xf0>
 8025940:	3201      	adds	r2, #1
 8025942:	eba1 010c 	sub.w	r1, r1, ip
 8025946:	2a0c      	cmp	r2, #12
 8025948:	60e1      	str	r1, [r4, #12]
 802594a:	6122      	str	r2, [r4, #16]
 802594c:	d1ef      	bne.n	802592e <validate_structure+0x106>
 802594e:	6963      	ldr	r3, [r4, #20]
 8025950:	1c5a      	adds	r2, r3, #1
 8025952:	0791      	lsls	r1, r2, #30
 8025954:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8025958:	d137      	bne.n	80259ca <validate_structure+0x1a2>
 802595a:	fb92 f1f0 	sdiv	r1, r2, r0
 802595e:	fb00 2211 	mls	r2, r0, r1, r2
 8025962:	2a00      	cmp	r2, #0
 8025964:	d133      	bne.n	80259ce <validate_structure+0x1a6>
 8025966:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802596a:	fb93 f2f5 	sdiv	r2, r3, r5
 802596e:	fb05 3312 	mls	r3, r5, r2, r3
 8025972:	2b00      	cmp	r3, #0
 8025974:	bf14      	ite	ne
 8025976:	231c      	movne	r3, #28
 8025978:	231d      	moveq	r3, #29
 802597a:	e7d8      	b.n	802592e <validate_structure+0x106>
 802597c:	6921      	ldr	r1, [r4, #16]
 802597e:	3901      	subs	r1, #1
 8025980:	6121      	str	r1, [r4, #16]
 8025982:	3101      	adds	r1, #1
 8025984:	d114      	bne.n	80259b0 <validate_structure+0x188>
 8025986:	6963      	ldr	r3, [r4, #20]
 8025988:	1e5a      	subs	r2, r3, #1
 802598a:	0791      	lsls	r1, r2, #30
 802598c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8025990:	d117      	bne.n	80259c2 <validate_structure+0x19a>
 8025992:	fb92 f1f0 	sdiv	r1, r2, r0
 8025996:	fb00 2211 	mls	r2, r0, r1, r2
 802599a:	b9a2      	cbnz	r2, 80259c6 <validate_structure+0x19e>
 802599c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80259a0:	fb93 f2f5 	sdiv	r2, r3, r5
 80259a4:	fb05 3312 	mls	r3, r5, r2, r3
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	bf14      	ite	ne
 80259ac:	231c      	movne	r3, #28
 80259ae:	231d      	moveq	r3, #29
 80259b0:	6922      	ldr	r2, [r4, #16]
 80259b2:	2a01      	cmp	r2, #1
 80259b4:	bf14      	ite	ne
 80259b6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80259ba:	461a      	moveq	r2, r3
 80259bc:	4462      	add	r2, ip
 80259be:	60e2      	str	r2, [r4, #12]
 80259c0:	e7a5      	b.n	802590e <validate_structure+0xe6>
 80259c2:	231c      	movs	r3, #28
 80259c4:	e7f4      	b.n	80259b0 <validate_structure+0x188>
 80259c6:	231d      	movs	r3, #29
 80259c8:	e7f2      	b.n	80259b0 <validate_structure+0x188>
 80259ca:	231c      	movs	r3, #28
 80259cc:	e7af      	b.n	802592e <validate_structure+0x106>
 80259ce:	231d      	movs	r3, #29
 80259d0:	e7ad      	b.n	802592e <validate_structure+0x106>
 80259d2:	bf00      	nop
 80259d4:	08047708 	.word	0x08047708

080259d8 <mktime>:
 80259d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259dc:	b085      	sub	sp, #20
 80259de:	4607      	mov	r7, r0
 80259e0:	f003 fa6e 	bl	8028ec0 <__gettzinfo>
 80259e4:	4681      	mov	r9, r0
 80259e6:	4638      	mov	r0, r7
 80259e8:	f7ff ff1e 	bl	8025828 <validate_structure>
 80259ec:	e9d7 4000 	ldrd	r4, r0, [r7]
 80259f0:	233c      	movs	r3, #60	; 0x3c
 80259f2:	fb03 4400 	mla	r4, r3, r0, r4
 80259f6:	68b8      	ldr	r0, [r7, #8]
 80259f8:	4abc      	ldr	r2, [pc, #752]	; (8025cec <mktime+0x314>)
 80259fa:	697e      	ldr	r6, [r7, #20]
 80259fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025a00:	fb03 4400 	mla	r4, r3, r0, r4
 8025a04:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8025a08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025a0c:	3d01      	subs	r5, #1
 8025a0e:	2b01      	cmp	r3, #1
 8025a10:	4415      	add	r5, r2
 8025a12:	dd11      	ble.n	8025a38 <mktime+0x60>
 8025a14:	07b1      	lsls	r1, r6, #30
 8025a16:	d10f      	bne.n	8025a38 <mktime+0x60>
 8025a18:	2264      	movs	r2, #100	; 0x64
 8025a1a:	fb96 f3f2 	sdiv	r3, r6, r2
 8025a1e:	fb02 6313 	mls	r3, r2, r3, r6
 8025a22:	b943      	cbnz	r3, 8025a36 <mktime+0x5e>
 8025a24:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025a28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025a2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025a30:	fb02 3311 	mls	r3, r2, r1, r3
 8025a34:	b903      	cbnz	r3, 8025a38 <mktime+0x60>
 8025a36:	3501      	adds	r5, #1
 8025a38:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8025a3c:	3310      	adds	r3, #16
 8025a3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8025a42:	4293      	cmp	r3, r2
 8025a44:	61fd      	str	r5, [r7, #28]
 8025a46:	f200 815d 	bhi.w	8025d04 <mktime+0x32c>
 8025a4a:	2e46      	cmp	r6, #70	; 0x46
 8025a4c:	dd71      	ble.n	8025b32 <mktime+0x15a>
 8025a4e:	2346      	movs	r3, #70	; 0x46
 8025a50:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025a54:	2164      	movs	r1, #100	; 0x64
 8025a56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025a5a:	079a      	lsls	r2, r3, #30
 8025a5c:	d163      	bne.n	8025b26 <mktime+0x14e>
 8025a5e:	fb93 f2f1 	sdiv	r2, r3, r1
 8025a62:	fb01 3212 	mls	r2, r1, r2, r3
 8025a66:	2a00      	cmp	r2, #0
 8025a68:	d160      	bne.n	8025b2c <mktime+0x154>
 8025a6a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025a6e:	fb92 fef0 	sdiv	lr, r2, r0
 8025a72:	fb00 221e 	mls	r2, r0, lr, r2
 8025a76:	2a00      	cmp	r2, #0
 8025a78:	bf14      	ite	ne
 8025a7a:	4662      	movne	r2, ip
 8025a7c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025a80:	3301      	adds	r3, #1
 8025a82:	429e      	cmp	r6, r3
 8025a84:	4415      	add	r5, r2
 8025a86:	d1e8      	bne.n	8025a5a <mktime+0x82>
 8025a88:	4b99      	ldr	r3, [pc, #612]	; (8025cf0 <mktime+0x318>)
 8025a8a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8025a8e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8025a92:	f002 f80b 	bl	8027aac <__tz_lock>
 8025a96:	f002 f815 	bl	8027ac4 <_tzset_unlocked>
 8025a9a:	4b96      	ldr	r3, [pc, #600]	; (8025cf4 <mktime+0x31c>)
 8025a9c:	f8d3 b000 	ldr.w	fp, [r3]
 8025aa0:	f1bb 0f00 	cmp.w	fp, #0
 8025aa4:	d039      	beq.n	8025b1a <mktime+0x142>
 8025aa6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8025aaa:	6978      	ldr	r0, [r7, #20]
 8025aac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8025ab0:	f1bb 0f01 	cmp.w	fp, #1
 8025ab4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025ab8:	46da      	mov	sl, fp
 8025aba:	bfa8      	it	ge
 8025abc:	f04f 0a01 	movge.w	sl, #1
 8025ac0:	4283      	cmp	r3, r0
 8025ac2:	d178      	bne.n	8025bb6 <mktime+0x1de>
 8025ac4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8025ac8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025acc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8025ad0:	1a5b      	subs	r3, r3, r1
 8025ad2:	9302      	str	r3, [sp, #8]
 8025ad4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8025ad8:	9303      	str	r3, [sp, #12]
 8025ada:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8025ade:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8025ae2:	9301      	str	r3, [sp, #4]
 8025ae4:	ebb3 0c02 	subs.w	ip, r3, r2
 8025ae8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8025aec:	4564      	cmp	r4, ip
 8025aee:	eb78 0300 	sbcs.w	r3, r8, r0
 8025af2:	da66      	bge.n	8025bc2 <mktime+0x1ea>
 8025af4:	f8d9 3000 	ldr.w	r3, [r9]
 8025af8:	2b00      	cmp	r3, #0
 8025afa:	d06f      	beq.n	8025bdc <mktime+0x204>
 8025afc:	9b02      	ldr	r3, [sp, #8]
 8025afe:	429c      	cmp	r4, r3
 8025b00:	9b03      	ldr	r3, [sp, #12]
 8025b02:	eb78 0303 	sbcs.w	r3, r8, r3
 8025b06:	db03      	blt.n	8025b10 <mktime+0x138>
 8025b08:	4564      	cmp	r4, ip
 8025b0a:	eb78 0300 	sbcs.w	r3, r8, r0
 8025b0e:	db6b      	blt.n	8025be8 <mktime+0x210>
 8025b10:	f1bb 0f00 	cmp.w	fp, #0
 8025b14:	f04f 0b00 	mov.w	fp, #0
 8025b18:	da6b      	bge.n	8025bf2 <mktime+0x21a>
 8025b1a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8025b1e:	190c      	adds	r4, r1, r4
 8025b20:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025b24:	e0a9      	b.n	8025c7a <mktime+0x2a2>
 8025b26:	f240 126d 	movw	r2, #365	; 0x16d
 8025b2a:	e7a9      	b.n	8025a80 <mktime+0xa8>
 8025b2c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025b30:	e7a6      	b.n	8025a80 <mktime+0xa8>
 8025b32:	d0a9      	beq.n	8025a88 <mktime+0xb0>
 8025b34:	2345      	movs	r3, #69	; 0x45
 8025b36:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025b3a:	2164      	movs	r1, #100	; 0x64
 8025b3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8025b40:	e012      	b.n	8025b68 <mktime+0x190>
 8025b42:	bb62      	cbnz	r2, 8025b9e <mktime+0x1c6>
 8025b44:	fb93 f2f1 	sdiv	r2, r3, r1
 8025b48:	fb01 3212 	mls	r2, r1, r2, r3
 8025b4c:	bb52      	cbnz	r2, 8025ba4 <mktime+0x1cc>
 8025b4e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8025b52:	fb92 fef0 	sdiv	lr, r2, r0
 8025b56:	fb00 221e 	mls	r2, r0, lr, r2
 8025b5a:	2a00      	cmp	r2, #0
 8025b5c:	bf14      	ite	ne
 8025b5e:	4662      	movne	r2, ip
 8025b60:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025b64:	1aad      	subs	r5, r5, r2
 8025b66:	3b01      	subs	r3, #1
 8025b68:	429e      	cmp	r6, r3
 8025b6a:	f003 0203 	and.w	r2, r3, #3
 8025b6e:	dbe8      	blt.n	8025b42 <mktime+0x16a>
 8025b70:	b9da      	cbnz	r2, 8025baa <mktime+0x1d2>
 8025b72:	2264      	movs	r2, #100	; 0x64
 8025b74:	fb96 f3f2 	sdiv	r3, r6, r2
 8025b78:	fb02 6313 	mls	r3, r2, r3, r6
 8025b7c:	b9c3      	cbnz	r3, 8025bb0 <mktime+0x1d8>
 8025b7e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8025b82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025b86:	fb93 f1f2 	sdiv	r1, r3, r2
 8025b8a:	fb02 3311 	mls	r3, r2, r1, r3
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	f240 136d 	movw	r3, #365	; 0x16d
 8025b94:	bf08      	it	eq
 8025b96:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8025b9a:	1aed      	subs	r5, r5, r3
 8025b9c:	e774      	b.n	8025a88 <mktime+0xb0>
 8025b9e:	f240 126d 	movw	r2, #365	; 0x16d
 8025ba2:	e7df      	b.n	8025b64 <mktime+0x18c>
 8025ba4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025ba8:	e7dc      	b.n	8025b64 <mktime+0x18c>
 8025baa:	f240 136d 	movw	r3, #365	; 0x16d
 8025bae:	e7f4      	b.n	8025b9a <mktime+0x1c2>
 8025bb0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8025bb4:	e7f1      	b.n	8025b9a <mktime+0x1c2>
 8025bb6:	f001 fecf 	bl	8027958 <__tzcalc_limits>
 8025bba:	2800      	cmp	r0, #0
 8025bbc:	d182      	bne.n	8025ac4 <mktime+0xec>
 8025bbe:	46d3      	mov	fp, sl
 8025bc0:	e050      	b.n	8025c64 <mktime+0x28c>
 8025bc2:	9b01      	ldr	r3, [sp, #4]
 8025bc4:	1a5b      	subs	r3, r3, r1
 8025bc6:	9301      	str	r3, [sp, #4]
 8025bc8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8025bcc:	eb6e 0e03 	sbc.w	lr, lr, r3
 8025bd0:	9b01      	ldr	r3, [sp, #4]
 8025bd2:	429c      	cmp	r4, r3
 8025bd4:	eb78 030e 	sbcs.w	r3, r8, lr
 8025bd8:	dbf1      	blt.n	8025bbe <mktime+0x1e6>
 8025bda:	e78b      	b.n	8025af4 <mktime+0x11c>
 8025bdc:	9b02      	ldr	r3, [sp, #8]
 8025bde:	429c      	cmp	r4, r3
 8025be0:	9b03      	ldr	r3, [sp, #12]
 8025be2:	eb78 0303 	sbcs.w	r3, r8, r3
 8025be6:	db8f      	blt.n	8025b08 <mktime+0x130>
 8025be8:	f1bb 0f00 	cmp.w	fp, #0
 8025bec:	db3e      	blt.n	8025c6c <mktime+0x294>
 8025bee:	f04f 0b01 	mov.w	fp, #1
 8025bf2:	ea8a 0a0b 	eor.w	sl, sl, fp
 8025bf6:	f1ba 0f01 	cmp.w	sl, #1
 8025bfa:	d133      	bne.n	8025c64 <mktime+0x28c>
 8025bfc:	f1bb 0f00 	cmp.w	fp, #0
 8025c00:	d04e      	beq.n	8025ca0 <mktime+0x2c8>
 8025c02:	1a52      	subs	r2, r2, r1
 8025c04:	683b      	ldr	r3, [r7, #0]
 8025c06:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8025c0a:	4413      	add	r3, r2
 8025c0c:	1914      	adds	r4, r2, r4
 8025c0e:	603b      	str	r3, [r7, #0]
 8025c10:	4638      	mov	r0, r7
 8025c12:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8025c16:	f7ff fe07 	bl	8025828 <validate_structure>
 8025c1a:	68fa      	ldr	r2, [r7, #12]
 8025c1c:	ebb2 020a 	subs.w	r2, r2, sl
 8025c20:	d020      	beq.n	8025c64 <mktime+0x28c>
 8025c22:	2a01      	cmp	r2, #1
 8025c24:	dc3e      	bgt.n	8025ca4 <mktime+0x2cc>
 8025c26:	1c90      	adds	r0, r2, #2
 8025c28:	bfd8      	it	le
 8025c2a:	2201      	movle	r2, #1
 8025c2c:	69fb      	ldr	r3, [r7, #28]
 8025c2e:	18d3      	adds	r3, r2, r3
 8025c30:	4415      	add	r5, r2
 8025c32:	d540      	bpl.n	8025cb6 <mktime+0x2de>
 8025c34:	1e73      	subs	r3, r6, #1
 8025c36:	0799      	lsls	r1, r3, #30
 8025c38:	d137      	bne.n	8025caa <mktime+0x2d2>
 8025c3a:	2264      	movs	r2, #100	; 0x64
 8025c3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025c40:	fb02 3311 	mls	r3, r2, r1, r3
 8025c44:	bba3      	cbnz	r3, 8025cb0 <mktime+0x2d8>
 8025c46:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025c4a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8025c4e:	fb96 f2f3 	sdiv	r2, r6, r3
 8025c52:	fb03 6612 	mls	r6, r3, r2, r6
 8025c56:	2e00      	cmp	r6, #0
 8025c58:	f240 136d 	movw	r3, #365	; 0x16d
 8025c5c:	bf18      	it	ne
 8025c5e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8025c62:	61fb      	str	r3, [r7, #28]
 8025c64:	f1bb 0f01 	cmp.w	fp, #1
 8025c68:	f47f af57 	bne.w	8025b1a <mktime+0x142>
 8025c6c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8025c70:	190c      	adds	r4, r1, r4
 8025c72:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8025c76:	f04f 0b01 	mov.w	fp, #1
 8025c7a:	f001 ff1d 	bl	8027ab8 <__tz_unlock>
 8025c7e:	3504      	adds	r5, #4
 8025c80:	2307      	movs	r3, #7
 8025c82:	fb95 f3f3 	sdiv	r3, r5, r3
 8025c86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8025c8a:	1aed      	subs	r5, r5, r3
 8025c8c:	bf48      	it	mi
 8025c8e:	3507      	addmi	r5, #7
 8025c90:	f8c7 b020 	str.w	fp, [r7, #32]
 8025c94:	61bd      	str	r5, [r7, #24]
 8025c96:	4620      	mov	r0, r4
 8025c98:	4641      	mov	r1, r8
 8025c9a:	b005      	add	sp, #20
 8025c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ca0:	1a8a      	subs	r2, r1, r2
 8025ca2:	e7af      	b.n	8025c04 <mktime+0x22c>
 8025ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8025ca8:	e7c0      	b.n	8025c2c <mktime+0x254>
 8025caa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8025cae:	e7d8      	b.n	8025c62 <mktime+0x28a>
 8025cb0:	f240 136d 	movw	r3, #365	; 0x16d
 8025cb4:	e7d5      	b.n	8025c62 <mktime+0x28a>
 8025cb6:	07b2      	lsls	r2, r6, #30
 8025cb8:	d11e      	bne.n	8025cf8 <mktime+0x320>
 8025cba:	2164      	movs	r1, #100	; 0x64
 8025cbc:	fb96 f2f1 	sdiv	r2, r6, r1
 8025cc0:	fb01 6212 	mls	r2, r1, r2, r6
 8025cc4:	b9da      	cbnz	r2, 8025cfe <mktime+0x326>
 8025cc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025cca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8025cce:	fb96 f1f2 	sdiv	r1, r6, r2
 8025cd2:	fb02 6611 	mls	r6, r2, r1, r6
 8025cd6:	2e00      	cmp	r6, #0
 8025cd8:	f240 126d 	movw	r2, #365	; 0x16d
 8025cdc:	bf08      	it	eq
 8025cde:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8025ce2:	4293      	cmp	r3, r2
 8025ce4:	bfa8      	it	ge
 8025ce6:	1a9b      	subge	r3, r3, r2
 8025ce8:	e7bb      	b.n	8025c62 <mktime+0x28a>
 8025cea:	bf00      	nop
 8025cec:	08047738 	.word	0x08047738
 8025cf0:	00015180 	.word	0x00015180
 8025cf4:	20030104 	.word	0x20030104
 8025cf8:	f240 126d 	movw	r2, #365	; 0x16d
 8025cfc:	e7f1      	b.n	8025ce2 <mktime+0x30a>
 8025cfe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8025d02:	e7ee      	b.n	8025ce2 <mktime+0x30a>
 8025d04:	f04f 34ff 	mov.w	r4, #4294967295
 8025d08:	46a0      	mov	r8, r4
 8025d0a:	e7c4      	b.n	8025c96 <mktime+0x2be>

08025d0c <_free_r>:
 8025d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025d0e:	2900      	cmp	r1, #0
 8025d10:	d044      	beq.n	8025d9c <_free_r+0x90>
 8025d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025d16:	9001      	str	r0, [sp, #4]
 8025d18:	2b00      	cmp	r3, #0
 8025d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8025d1e:	bfb8      	it	lt
 8025d20:	18e4      	addlt	r4, r4, r3
 8025d22:	f003 f9fd 	bl	8029120 <__malloc_lock>
 8025d26:	4a1e      	ldr	r2, [pc, #120]	; (8025da0 <_free_r+0x94>)
 8025d28:	9801      	ldr	r0, [sp, #4]
 8025d2a:	6813      	ldr	r3, [r2, #0]
 8025d2c:	b933      	cbnz	r3, 8025d3c <_free_r+0x30>
 8025d2e:	6063      	str	r3, [r4, #4]
 8025d30:	6014      	str	r4, [r2, #0]
 8025d32:	b003      	add	sp, #12
 8025d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025d38:	f003 b9f8 	b.w	802912c <__malloc_unlock>
 8025d3c:	42a3      	cmp	r3, r4
 8025d3e:	d908      	bls.n	8025d52 <_free_r+0x46>
 8025d40:	6825      	ldr	r5, [r4, #0]
 8025d42:	1961      	adds	r1, r4, r5
 8025d44:	428b      	cmp	r3, r1
 8025d46:	bf01      	itttt	eq
 8025d48:	6819      	ldreq	r1, [r3, #0]
 8025d4a:	685b      	ldreq	r3, [r3, #4]
 8025d4c:	1949      	addeq	r1, r1, r5
 8025d4e:	6021      	streq	r1, [r4, #0]
 8025d50:	e7ed      	b.n	8025d2e <_free_r+0x22>
 8025d52:	461a      	mov	r2, r3
 8025d54:	685b      	ldr	r3, [r3, #4]
 8025d56:	b10b      	cbz	r3, 8025d5c <_free_r+0x50>
 8025d58:	42a3      	cmp	r3, r4
 8025d5a:	d9fa      	bls.n	8025d52 <_free_r+0x46>
 8025d5c:	6811      	ldr	r1, [r2, #0]
 8025d5e:	1855      	adds	r5, r2, r1
 8025d60:	42a5      	cmp	r5, r4
 8025d62:	d10b      	bne.n	8025d7c <_free_r+0x70>
 8025d64:	6824      	ldr	r4, [r4, #0]
 8025d66:	4421      	add	r1, r4
 8025d68:	1854      	adds	r4, r2, r1
 8025d6a:	42a3      	cmp	r3, r4
 8025d6c:	6011      	str	r1, [r2, #0]
 8025d6e:	d1e0      	bne.n	8025d32 <_free_r+0x26>
 8025d70:	681c      	ldr	r4, [r3, #0]
 8025d72:	685b      	ldr	r3, [r3, #4]
 8025d74:	6053      	str	r3, [r2, #4]
 8025d76:	4421      	add	r1, r4
 8025d78:	6011      	str	r1, [r2, #0]
 8025d7a:	e7da      	b.n	8025d32 <_free_r+0x26>
 8025d7c:	d902      	bls.n	8025d84 <_free_r+0x78>
 8025d7e:	230c      	movs	r3, #12
 8025d80:	6003      	str	r3, [r0, #0]
 8025d82:	e7d6      	b.n	8025d32 <_free_r+0x26>
 8025d84:	6825      	ldr	r5, [r4, #0]
 8025d86:	1961      	adds	r1, r4, r5
 8025d88:	428b      	cmp	r3, r1
 8025d8a:	bf04      	itt	eq
 8025d8c:	6819      	ldreq	r1, [r3, #0]
 8025d8e:	685b      	ldreq	r3, [r3, #4]
 8025d90:	6063      	str	r3, [r4, #4]
 8025d92:	bf04      	itt	eq
 8025d94:	1949      	addeq	r1, r1, r5
 8025d96:	6021      	streq	r1, [r4, #0]
 8025d98:	6054      	str	r4, [r2, #4]
 8025d9a:	e7ca      	b.n	8025d32 <_free_r+0x26>
 8025d9c:	b003      	add	sp, #12
 8025d9e:	bd30      	pop	{r4, r5, pc}
 8025da0:	200300dc 	.word	0x200300dc

08025da4 <sbrk_aligned>:
 8025da4:	b570      	push	{r4, r5, r6, lr}
 8025da6:	4e0e      	ldr	r6, [pc, #56]	; (8025de0 <sbrk_aligned+0x3c>)
 8025da8:	460c      	mov	r4, r1
 8025daa:	6831      	ldr	r1, [r6, #0]
 8025dac:	4605      	mov	r5, r0
 8025dae:	b911      	cbnz	r1, 8025db6 <sbrk_aligned+0x12>
 8025db0:	f000 fe76 	bl	8026aa0 <_sbrk_r>
 8025db4:	6030      	str	r0, [r6, #0]
 8025db6:	4621      	mov	r1, r4
 8025db8:	4628      	mov	r0, r5
 8025dba:	f000 fe71 	bl	8026aa0 <_sbrk_r>
 8025dbe:	1c43      	adds	r3, r0, #1
 8025dc0:	d00a      	beq.n	8025dd8 <sbrk_aligned+0x34>
 8025dc2:	1cc4      	adds	r4, r0, #3
 8025dc4:	f024 0403 	bic.w	r4, r4, #3
 8025dc8:	42a0      	cmp	r0, r4
 8025dca:	d007      	beq.n	8025ddc <sbrk_aligned+0x38>
 8025dcc:	1a21      	subs	r1, r4, r0
 8025dce:	4628      	mov	r0, r5
 8025dd0:	f000 fe66 	bl	8026aa0 <_sbrk_r>
 8025dd4:	3001      	adds	r0, #1
 8025dd6:	d101      	bne.n	8025ddc <sbrk_aligned+0x38>
 8025dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8025ddc:	4620      	mov	r0, r4
 8025dde:	bd70      	pop	{r4, r5, r6, pc}
 8025de0:	200300e0 	.word	0x200300e0

08025de4 <_malloc_r>:
 8025de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025de8:	1ccd      	adds	r5, r1, #3
 8025dea:	f025 0503 	bic.w	r5, r5, #3
 8025dee:	3508      	adds	r5, #8
 8025df0:	2d0c      	cmp	r5, #12
 8025df2:	bf38      	it	cc
 8025df4:	250c      	movcc	r5, #12
 8025df6:	2d00      	cmp	r5, #0
 8025df8:	4607      	mov	r7, r0
 8025dfa:	db01      	blt.n	8025e00 <_malloc_r+0x1c>
 8025dfc:	42a9      	cmp	r1, r5
 8025dfe:	d905      	bls.n	8025e0c <_malloc_r+0x28>
 8025e00:	230c      	movs	r3, #12
 8025e02:	603b      	str	r3, [r7, #0]
 8025e04:	2600      	movs	r6, #0
 8025e06:	4630      	mov	r0, r6
 8025e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e0c:	4e2e      	ldr	r6, [pc, #184]	; (8025ec8 <_malloc_r+0xe4>)
 8025e0e:	f003 f987 	bl	8029120 <__malloc_lock>
 8025e12:	6833      	ldr	r3, [r6, #0]
 8025e14:	461c      	mov	r4, r3
 8025e16:	bb34      	cbnz	r4, 8025e66 <_malloc_r+0x82>
 8025e18:	4629      	mov	r1, r5
 8025e1a:	4638      	mov	r0, r7
 8025e1c:	f7ff ffc2 	bl	8025da4 <sbrk_aligned>
 8025e20:	1c43      	adds	r3, r0, #1
 8025e22:	4604      	mov	r4, r0
 8025e24:	d14d      	bne.n	8025ec2 <_malloc_r+0xde>
 8025e26:	6834      	ldr	r4, [r6, #0]
 8025e28:	4626      	mov	r6, r4
 8025e2a:	2e00      	cmp	r6, #0
 8025e2c:	d140      	bne.n	8025eb0 <_malloc_r+0xcc>
 8025e2e:	6823      	ldr	r3, [r4, #0]
 8025e30:	4631      	mov	r1, r6
 8025e32:	4638      	mov	r0, r7
 8025e34:	eb04 0803 	add.w	r8, r4, r3
 8025e38:	f000 fe32 	bl	8026aa0 <_sbrk_r>
 8025e3c:	4580      	cmp	r8, r0
 8025e3e:	d13a      	bne.n	8025eb6 <_malloc_r+0xd2>
 8025e40:	6821      	ldr	r1, [r4, #0]
 8025e42:	3503      	adds	r5, #3
 8025e44:	1a6d      	subs	r5, r5, r1
 8025e46:	f025 0503 	bic.w	r5, r5, #3
 8025e4a:	3508      	adds	r5, #8
 8025e4c:	2d0c      	cmp	r5, #12
 8025e4e:	bf38      	it	cc
 8025e50:	250c      	movcc	r5, #12
 8025e52:	4629      	mov	r1, r5
 8025e54:	4638      	mov	r0, r7
 8025e56:	f7ff ffa5 	bl	8025da4 <sbrk_aligned>
 8025e5a:	3001      	adds	r0, #1
 8025e5c:	d02b      	beq.n	8025eb6 <_malloc_r+0xd2>
 8025e5e:	6823      	ldr	r3, [r4, #0]
 8025e60:	442b      	add	r3, r5
 8025e62:	6023      	str	r3, [r4, #0]
 8025e64:	e00e      	b.n	8025e84 <_malloc_r+0xa0>
 8025e66:	6822      	ldr	r2, [r4, #0]
 8025e68:	1b52      	subs	r2, r2, r5
 8025e6a:	d41e      	bmi.n	8025eaa <_malloc_r+0xc6>
 8025e6c:	2a0b      	cmp	r2, #11
 8025e6e:	d916      	bls.n	8025e9e <_malloc_r+0xba>
 8025e70:	1961      	adds	r1, r4, r5
 8025e72:	42a3      	cmp	r3, r4
 8025e74:	6025      	str	r5, [r4, #0]
 8025e76:	bf18      	it	ne
 8025e78:	6059      	strne	r1, [r3, #4]
 8025e7a:	6863      	ldr	r3, [r4, #4]
 8025e7c:	bf08      	it	eq
 8025e7e:	6031      	streq	r1, [r6, #0]
 8025e80:	5162      	str	r2, [r4, r5]
 8025e82:	604b      	str	r3, [r1, #4]
 8025e84:	4638      	mov	r0, r7
 8025e86:	f104 060b 	add.w	r6, r4, #11
 8025e8a:	f003 f94f 	bl	802912c <__malloc_unlock>
 8025e8e:	f026 0607 	bic.w	r6, r6, #7
 8025e92:	1d23      	adds	r3, r4, #4
 8025e94:	1af2      	subs	r2, r6, r3
 8025e96:	d0b6      	beq.n	8025e06 <_malloc_r+0x22>
 8025e98:	1b9b      	subs	r3, r3, r6
 8025e9a:	50a3      	str	r3, [r4, r2]
 8025e9c:	e7b3      	b.n	8025e06 <_malloc_r+0x22>
 8025e9e:	6862      	ldr	r2, [r4, #4]
 8025ea0:	42a3      	cmp	r3, r4
 8025ea2:	bf0c      	ite	eq
 8025ea4:	6032      	streq	r2, [r6, #0]
 8025ea6:	605a      	strne	r2, [r3, #4]
 8025ea8:	e7ec      	b.n	8025e84 <_malloc_r+0xa0>
 8025eaa:	4623      	mov	r3, r4
 8025eac:	6864      	ldr	r4, [r4, #4]
 8025eae:	e7b2      	b.n	8025e16 <_malloc_r+0x32>
 8025eb0:	4634      	mov	r4, r6
 8025eb2:	6876      	ldr	r6, [r6, #4]
 8025eb4:	e7b9      	b.n	8025e2a <_malloc_r+0x46>
 8025eb6:	230c      	movs	r3, #12
 8025eb8:	603b      	str	r3, [r7, #0]
 8025eba:	4638      	mov	r0, r7
 8025ebc:	f003 f936 	bl	802912c <__malloc_unlock>
 8025ec0:	e7a1      	b.n	8025e06 <_malloc_r+0x22>
 8025ec2:	6025      	str	r5, [r4, #0]
 8025ec4:	e7de      	b.n	8025e84 <_malloc_r+0xa0>
 8025ec6:	bf00      	nop
 8025ec8:	200300dc 	.word	0x200300dc

08025ecc <__cvt>:
 8025ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ece:	ed2d 8b02 	vpush	{d8}
 8025ed2:	eeb0 8b40 	vmov.f64	d8, d0
 8025ed6:	b085      	sub	sp, #20
 8025ed8:	4617      	mov	r7, r2
 8025eda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025edc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025ede:	ee18 2a90 	vmov	r2, s17
 8025ee2:	f025 0520 	bic.w	r5, r5, #32
 8025ee6:	2a00      	cmp	r2, #0
 8025ee8:	bfb6      	itet	lt
 8025eea:	222d      	movlt	r2, #45	; 0x2d
 8025eec:	2200      	movge	r2, #0
 8025eee:	eeb1 8b40 	vneglt.f64	d8, d0
 8025ef2:	2d46      	cmp	r5, #70	; 0x46
 8025ef4:	460c      	mov	r4, r1
 8025ef6:	701a      	strb	r2, [r3, #0]
 8025ef8:	d004      	beq.n	8025f04 <__cvt+0x38>
 8025efa:	2d45      	cmp	r5, #69	; 0x45
 8025efc:	d100      	bne.n	8025f00 <__cvt+0x34>
 8025efe:	3401      	adds	r4, #1
 8025f00:	2102      	movs	r1, #2
 8025f02:	e000      	b.n	8025f06 <__cvt+0x3a>
 8025f04:	2103      	movs	r1, #3
 8025f06:	ab03      	add	r3, sp, #12
 8025f08:	9301      	str	r3, [sp, #4]
 8025f0a:	ab02      	add	r3, sp, #8
 8025f0c:	9300      	str	r3, [sp, #0]
 8025f0e:	4622      	mov	r2, r4
 8025f10:	4633      	mov	r3, r6
 8025f12:	eeb0 0b48 	vmov.f64	d0, d8
 8025f16:	f002 f947 	bl	80281a8 <_dtoa_r>
 8025f1a:	2d47      	cmp	r5, #71	; 0x47
 8025f1c:	d101      	bne.n	8025f22 <__cvt+0x56>
 8025f1e:	07fb      	lsls	r3, r7, #31
 8025f20:	d51a      	bpl.n	8025f58 <__cvt+0x8c>
 8025f22:	2d46      	cmp	r5, #70	; 0x46
 8025f24:	eb00 0204 	add.w	r2, r0, r4
 8025f28:	d10c      	bne.n	8025f44 <__cvt+0x78>
 8025f2a:	7803      	ldrb	r3, [r0, #0]
 8025f2c:	2b30      	cmp	r3, #48	; 0x30
 8025f2e:	d107      	bne.n	8025f40 <__cvt+0x74>
 8025f30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f38:	bf1c      	itt	ne
 8025f3a:	f1c4 0401 	rsbne	r4, r4, #1
 8025f3e:	6034      	strne	r4, [r6, #0]
 8025f40:	6833      	ldr	r3, [r6, #0]
 8025f42:	441a      	add	r2, r3
 8025f44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f4c:	bf08      	it	eq
 8025f4e:	9203      	streq	r2, [sp, #12]
 8025f50:	2130      	movs	r1, #48	; 0x30
 8025f52:	9b03      	ldr	r3, [sp, #12]
 8025f54:	4293      	cmp	r3, r2
 8025f56:	d307      	bcc.n	8025f68 <__cvt+0x9c>
 8025f58:	9b03      	ldr	r3, [sp, #12]
 8025f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f5c:	1a1b      	subs	r3, r3, r0
 8025f5e:	6013      	str	r3, [r2, #0]
 8025f60:	b005      	add	sp, #20
 8025f62:	ecbd 8b02 	vpop	{d8}
 8025f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f68:	1c5c      	adds	r4, r3, #1
 8025f6a:	9403      	str	r4, [sp, #12]
 8025f6c:	7019      	strb	r1, [r3, #0]
 8025f6e:	e7f0      	b.n	8025f52 <__cvt+0x86>

08025f70 <__exponent>:
 8025f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f72:	4603      	mov	r3, r0
 8025f74:	2900      	cmp	r1, #0
 8025f76:	bfb8      	it	lt
 8025f78:	4249      	neglt	r1, r1
 8025f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8025f7e:	bfb4      	ite	lt
 8025f80:	222d      	movlt	r2, #45	; 0x2d
 8025f82:	222b      	movge	r2, #43	; 0x2b
 8025f84:	2909      	cmp	r1, #9
 8025f86:	7042      	strb	r2, [r0, #1]
 8025f88:	dd2a      	ble.n	8025fe0 <__exponent+0x70>
 8025f8a:	f10d 0407 	add.w	r4, sp, #7
 8025f8e:	46a4      	mov	ip, r4
 8025f90:	270a      	movs	r7, #10
 8025f92:	46a6      	mov	lr, r4
 8025f94:	460a      	mov	r2, r1
 8025f96:	fb91 f6f7 	sdiv	r6, r1, r7
 8025f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8025f9e:	3530      	adds	r5, #48	; 0x30
 8025fa0:	2a63      	cmp	r2, #99	; 0x63
 8025fa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8025fa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025faa:	4631      	mov	r1, r6
 8025fac:	dcf1      	bgt.n	8025f92 <__exponent+0x22>
 8025fae:	3130      	adds	r1, #48	; 0x30
 8025fb0:	f1ae 0502 	sub.w	r5, lr, #2
 8025fb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025fb8:	1c44      	adds	r4, r0, #1
 8025fba:	4629      	mov	r1, r5
 8025fbc:	4561      	cmp	r1, ip
 8025fbe:	d30a      	bcc.n	8025fd6 <__exponent+0x66>
 8025fc0:	f10d 0209 	add.w	r2, sp, #9
 8025fc4:	eba2 020e 	sub.w	r2, r2, lr
 8025fc8:	4565      	cmp	r5, ip
 8025fca:	bf88      	it	hi
 8025fcc:	2200      	movhi	r2, #0
 8025fce:	4413      	add	r3, r2
 8025fd0:	1a18      	subs	r0, r3, r0
 8025fd2:	b003      	add	sp, #12
 8025fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025fda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025fde:	e7ed      	b.n	8025fbc <__exponent+0x4c>
 8025fe0:	2330      	movs	r3, #48	; 0x30
 8025fe2:	3130      	adds	r1, #48	; 0x30
 8025fe4:	7083      	strb	r3, [r0, #2]
 8025fe6:	70c1      	strb	r1, [r0, #3]
 8025fe8:	1d03      	adds	r3, r0, #4
 8025fea:	e7f1      	b.n	8025fd0 <__exponent+0x60>
 8025fec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08025ff0 <_printf_float>:
 8025ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ff4:	b08b      	sub	sp, #44	; 0x2c
 8025ff6:	460c      	mov	r4, r1
 8025ff8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025ffc:	4616      	mov	r6, r2
 8025ffe:	461f      	mov	r7, r3
 8026000:	4605      	mov	r5, r0
 8026002:	f003 f811 	bl	8029028 <_localeconv_r>
 8026006:	f8d0 b000 	ldr.w	fp, [r0]
 802600a:	4658      	mov	r0, fp
 802600c:	f7da f922 	bl	8000254 <strlen>
 8026010:	2300      	movs	r3, #0
 8026012:	9308      	str	r3, [sp, #32]
 8026014:	f8d8 3000 	ldr.w	r3, [r8]
 8026018:	f894 9018 	ldrb.w	r9, [r4, #24]
 802601c:	6822      	ldr	r2, [r4, #0]
 802601e:	3307      	adds	r3, #7
 8026020:	f023 0307 	bic.w	r3, r3, #7
 8026024:	f103 0108 	add.w	r1, r3, #8
 8026028:	f8c8 1000 	str.w	r1, [r8]
 802602c:	4682      	mov	sl, r0
 802602e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026032:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8026036:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8026298 <_printf_float+0x2a8>
 802603a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802603e:	eeb0 6bc0 	vabs.f64	d6, d0
 8026042:	eeb4 6b47 	vcmp.f64	d6, d7
 8026046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802604a:	dd24      	ble.n	8026096 <_printf_float+0xa6>
 802604c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026054:	d502      	bpl.n	802605c <_printf_float+0x6c>
 8026056:	232d      	movs	r3, #45	; 0x2d
 8026058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802605c:	4b90      	ldr	r3, [pc, #576]	; (80262a0 <_printf_float+0x2b0>)
 802605e:	4891      	ldr	r0, [pc, #580]	; (80262a4 <_printf_float+0x2b4>)
 8026060:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026064:	bf94      	ite	ls
 8026066:	4698      	movls	r8, r3
 8026068:	4680      	movhi	r8, r0
 802606a:	2303      	movs	r3, #3
 802606c:	6123      	str	r3, [r4, #16]
 802606e:	f022 0204 	bic.w	r2, r2, #4
 8026072:	2300      	movs	r3, #0
 8026074:	6022      	str	r2, [r4, #0]
 8026076:	9304      	str	r3, [sp, #16]
 8026078:	9700      	str	r7, [sp, #0]
 802607a:	4633      	mov	r3, r6
 802607c:	aa09      	add	r2, sp, #36	; 0x24
 802607e:	4621      	mov	r1, r4
 8026080:	4628      	mov	r0, r5
 8026082:	f000 f9d3 	bl	802642c <_printf_common>
 8026086:	3001      	adds	r0, #1
 8026088:	f040 808a 	bne.w	80261a0 <_printf_float+0x1b0>
 802608c:	f04f 30ff 	mov.w	r0, #4294967295
 8026090:	b00b      	add	sp, #44	; 0x2c
 8026092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026096:	eeb4 0b40 	vcmp.f64	d0, d0
 802609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802609e:	d709      	bvc.n	80260b4 <_printf_float+0xc4>
 80260a0:	ee10 3a90 	vmov	r3, s1
 80260a4:	2b00      	cmp	r3, #0
 80260a6:	bfbc      	itt	lt
 80260a8:	232d      	movlt	r3, #45	; 0x2d
 80260aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80260ae:	487e      	ldr	r0, [pc, #504]	; (80262a8 <_printf_float+0x2b8>)
 80260b0:	4b7e      	ldr	r3, [pc, #504]	; (80262ac <_printf_float+0x2bc>)
 80260b2:	e7d5      	b.n	8026060 <_printf_float+0x70>
 80260b4:	6863      	ldr	r3, [r4, #4]
 80260b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80260ba:	9104      	str	r1, [sp, #16]
 80260bc:	1c59      	adds	r1, r3, #1
 80260be:	d13c      	bne.n	802613a <_printf_float+0x14a>
 80260c0:	2306      	movs	r3, #6
 80260c2:	6063      	str	r3, [r4, #4]
 80260c4:	2300      	movs	r3, #0
 80260c6:	9303      	str	r3, [sp, #12]
 80260c8:	ab08      	add	r3, sp, #32
 80260ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80260ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80260d2:	ab07      	add	r3, sp, #28
 80260d4:	6861      	ldr	r1, [r4, #4]
 80260d6:	9300      	str	r3, [sp, #0]
 80260d8:	6022      	str	r2, [r4, #0]
 80260da:	f10d 031b 	add.w	r3, sp, #27
 80260de:	4628      	mov	r0, r5
 80260e0:	f7ff fef4 	bl	8025ecc <__cvt>
 80260e4:	9b04      	ldr	r3, [sp, #16]
 80260e6:	9907      	ldr	r1, [sp, #28]
 80260e8:	2b47      	cmp	r3, #71	; 0x47
 80260ea:	4680      	mov	r8, r0
 80260ec:	d108      	bne.n	8026100 <_printf_float+0x110>
 80260ee:	1cc8      	adds	r0, r1, #3
 80260f0:	db02      	blt.n	80260f8 <_printf_float+0x108>
 80260f2:	6863      	ldr	r3, [r4, #4]
 80260f4:	4299      	cmp	r1, r3
 80260f6:	dd41      	ble.n	802617c <_printf_float+0x18c>
 80260f8:	f1a9 0902 	sub.w	r9, r9, #2
 80260fc:	fa5f f989 	uxtb.w	r9, r9
 8026100:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8026104:	d820      	bhi.n	8026148 <_printf_float+0x158>
 8026106:	3901      	subs	r1, #1
 8026108:	464a      	mov	r2, r9
 802610a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802610e:	9107      	str	r1, [sp, #28]
 8026110:	f7ff ff2e 	bl	8025f70 <__exponent>
 8026114:	9a08      	ldr	r2, [sp, #32]
 8026116:	9004      	str	r0, [sp, #16]
 8026118:	1813      	adds	r3, r2, r0
 802611a:	2a01      	cmp	r2, #1
 802611c:	6123      	str	r3, [r4, #16]
 802611e:	dc02      	bgt.n	8026126 <_printf_float+0x136>
 8026120:	6822      	ldr	r2, [r4, #0]
 8026122:	07d2      	lsls	r2, r2, #31
 8026124:	d501      	bpl.n	802612a <_printf_float+0x13a>
 8026126:	3301      	adds	r3, #1
 8026128:	6123      	str	r3, [r4, #16]
 802612a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802612e:	2b00      	cmp	r3, #0
 8026130:	d0a2      	beq.n	8026078 <_printf_float+0x88>
 8026132:	232d      	movs	r3, #45	; 0x2d
 8026134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026138:	e79e      	b.n	8026078 <_printf_float+0x88>
 802613a:	9904      	ldr	r1, [sp, #16]
 802613c:	2947      	cmp	r1, #71	; 0x47
 802613e:	d1c1      	bne.n	80260c4 <_printf_float+0xd4>
 8026140:	2b00      	cmp	r3, #0
 8026142:	d1bf      	bne.n	80260c4 <_printf_float+0xd4>
 8026144:	2301      	movs	r3, #1
 8026146:	e7bc      	b.n	80260c2 <_printf_float+0xd2>
 8026148:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802614c:	d118      	bne.n	8026180 <_printf_float+0x190>
 802614e:	2900      	cmp	r1, #0
 8026150:	6863      	ldr	r3, [r4, #4]
 8026152:	dd0b      	ble.n	802616c <_printf_float+0x17c>
 8026154:	6121      	str	r1, [r4, #16]
 8026156:	b913      	cbnz	r3, 802615e <_printf_float+0x16e>
 8026158:	6822      	ldr	r2, [r4, #0]
 802615a:	07d0      	lsls	r0, r2, #31
 802615c:	d502      	bpl.n	8026164 <_printf_float+0x174>
 802615e:	3301      	adds	r3, #1
 8026160:	440b      	add	r3, r1
 8026162:	6123      	str	r3, [r4, #16]
 8026164:	2300      	movs	r3, #0
 8026166:	65a1      	str	r1, [r4, #88]	; 0x58
 8026168:	9304      	str	r3, [sp, #16]
 802616a:	e7de      	b.n	802612a <_printf_float+0x13a>
 802616c:	b913      	cbnz	r3, 8026174 <_printf_float+0x184>
 802616e:	6822      	ldr	r2, [r4, #0]
 8026170:	07d2      	lsls	r2, r2, #31
 8026172:	d501      	bpl.n	8026178 <_printf_float+0x188>
 8026174:	3302      	adds	r3, #2
 8026176:	e7f4      	b.n	8026162 <_printf_float+0x172>
 8026178:	2301      	movs	r3, #1
 802617a:	e7f2      	b.n	8026162 <_printf_float+0x172>
 802617c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026180:	9b08      	ldr	r3, [sp, #32]
 8026182:	4299      	cmp	r1, r3
 8026184:	db05      	blt.n	8026192 <_printf_float+0x1a2>
 8026186:	6823      	ldr	r3, [r4, #0]
 8026188:	6121      	str	r1, [r4, #16]
 802618a:	07d8      	lsls	r0, r3, #31
 802618c:	d5ea      	bpl.n	8026164 <_printf_float+0x174>
 802618e:	1c4b      	adds	r3, r1, #1
 8026190:	e7e7      	b.n	8026162 <_printf_float+0x172>
 8026192:	2900      	cmp	r1, #0
 8026194:	bfd4      	ite	le
 8026196:	f1c1 0202 	rsble	r2, r1, #2
 802619a:	2201      	movgt	r2, #1
 802619c:	4413      	add	r3, r2
 802619e:	e7e0      	b.n	8026162 <_printf_float+0x172>
 80261a0:	6823      	ldr	r3, [r4, #0]
 80261a2:	055a      	lsls	r2, r3, #21
 80261a4:	d407      	bmi.n	80261b6 <_printf_float+0x1c6>
 80261a6:	6923      	ldr	r3, [r4, #16]
 80261a8:	4642      	mov	r2, r8
 80261aa:	4631      	mov	r1, r6
 80261ac:	4628      	mov	r0, r5
 80261ae:	47b8      	blx	r7
 80261b0:	3001      	adds	r0, #1
 80261b2:	d12a      	bne.n	802620a <_printf_float+0x21a>
 80261b4:	e76a      	b.n	802608c <_printf_float+0x9c>
 80261b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80261ba:	f240 80e2 	bls.w	8026382 <_printf_float+0x392>
 80261be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80261c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80261c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80261ca:	d133      	bne.n	8026234 <_printf_float+0x244>
 80261cc:	4a38      	ldr	r2, [pc, #224]	; (80262b0 <_printf_float+0x2c0>)
 80261ce:	2301      	movs	r3, #1
 80261d0:	4631      	mov	r1, r6
 80261d2:	4628      	mov	r0, r5
 80261d4:	47b8      	blx	r7
 80261d6:	3001      	adds	r0, #1
 80261d8:	f43f af58 	beq.w	802608c <_printf_float+0x9c>
 80261dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80261e0:	429a      	cmp	r2, r3
 80261e2:	db02      	blt.n	80261ea <_printf_float+0x1fa>
 80261e4:	6823      	ldr	r3, [r4, #0]
 80261e6:	07d8      	lsls	r0, r3, #31
 80261e8:	d50f      	bpl.n	802620a <_printf_float+0x21a>
 80261ea:	4653      	mov	r3, sl
 80261ec:	465a      	mov	r2, fp
 80261ee:	4631      	mov	r1, r6
 80261f0:	4628      	mov	r0, r5
 80261f2:	47b8      	blx	r7
 80261f4:	3001      	adds	r0, #1
 80261f6:	f43f af49 	beq.w	802608c <_printf_float+0x9c>
 80261fa:	f04f 0800 	mov.w	r8, #0
 80261fe:	f104 091a 	add.w	r9, r4, #26
 8026202:	9b08      	ldr	r3, [sp, #32]
 8026204:	3b01      	subs	r3, #1
 8026206:	4543      	cmp	r3, r8
 8026208:	dc09      	bgt.n	802621e <_printf_float+0x22e>
 802620a:	6823      	ldr	r3, [r4, #0]
 802620c:	079b      	lsls	r3, r3, #30
 802620e:	f100 8108 	bmi.w	8026422 <_printf_float+0x432>
 8026212:	68e0      	ldr	r0, [r4, #12]
 8026214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026216:	4298      	cmp	r0, r3
 8026218:	bfb8      	it	lt
 802621a:	4618      	movlt	r0, r3
 802621c:	e738      	b.n	8026090 <_printf_float+0xa0>
 802621e:	2301      	movs	r3, #1
 8026220:	464a      	mov	r2, r9
 8026222:	4631      	mov	r1, r6
 8026224:	4628      	mov	r0, r5
 8026226:	47b8      	blx	r7
 8026228:	3001      	adds	r0, #1
 802622a:	f43f af2f 	beq.w	802608c <_printf_float+0x9c>
 802622e:	f108 0801 	add.w	r8, r8, #1
 8026232:	e7e6      	b.n	8026202 <_printf_float+0x212>
 8026234:	9b07      	ldr	r3, [sp, #28]
 8026236:	2b00      	cmp	r3, #0
 8026238:	dc3c      	bgt.n	80262b4 <_printf_float+0x2c4>
 802623a:	4a1d      	ldr	r2, [pc, #116]	; (80262b0 <_printf_float+0x2c0>)
 802623c:	2301      	movs	r3, #1
 802623e:	4631      	mov	r1, r6
 8026240:	4628      	mov	r0, r5
 8026242:	47b8      	blx	r7
 8026244:	3001      	adds	r0, #1
 8026246:	f43f af21 	beq.w	802608c <_printf_float+0x9c>
 802624a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802624e:	4313      	orrs	r3, r2
 8026250:	d102      	bne.n	8026258 <_printf_float+0x268>
 8026252:	6823      	ldr	r3, [r4, #0]
 8026254:	07d9      	lsls	r1, r3, #31
 8026256:	d5d8      	bpl.n	802620a <_printf_float+0x21a>
 8026258:	4653      	mov	r3, sl
 802625a:	465a      	mov	r2, fp
 802625c:	4631      	mov	r1, r6
 802625e:	4628      	mov	r0, r5
 8026260:	47b8      	blx	r7
 8026262:	3001      	adds	r0, #1
 8026264:	f43f af12 	beq.w	802608c <_printf_float+0x9c>
 8026268:	f04f 0900 	mov.w	r9, #0
 802626c:	f104 0a1a 	add.w	sl, r4, #26
 8026270:	9b07      	ldr	r3, [sp, #28]
 8026272:	425b      	negs	r3, r3
 8026274:	454b      	cmp	r3, r9
 8026276:	dc01      	bgt.n	802627c <_printf_float+0x28c>
 8026278:	9b08      	ldr	r3, [sp, #32]
 802627a:	e795      	b.n	80261a8 <_printf_float+0x1b8>
 802627c:	2301      	movs	r3, #1
 802627e:	4652      	mov	r2, sl
 8026280:	4631      	mov	r1, r6
 8026282:	4628      	mov	r0, r5
 8026284:	47b8      	blx	r7
 8026286:	3001      	adds	r0, #1
 8026288:	f43f af00 	beq.w	802608c <_printf_float+0x9c>
 802628c:	f109 0901 	add.w	r9, r9, #1
 8026290:	e7ee      	b.n	8026270 <_printf_float+0x280>
 8026292:	bf00      	nop
 8026294:	f3af 8000 	nop.w
 8026298:	ffffffff 	.word	0xffffffff
 802629c:	7fefffff 	.word	0x7fefffff
 80262a0:	080477c8 	.word	0x080477c8
 80262a4:	080477cc 	.word	0x080477cc
 80262a8:	080477d4 	.word	0x080477d4
 80262ac:	080477d0 	.word	0x080477d0
 80262b0:	08047df1 	.word	0x08047df1
 80262b4:	9a08      	ldr	r2, [sp, #32]
 80262b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80262b8:	429a      	cmp	r2, r3
 80262ba:	bfa8      	it	ge
 80262bc:	461a      	movge	r2, r3
 80262be:	2a00      	cmp	r2, #0
 80262c0:	4691      	mov	r9, r2
 80262c2:	dc38      	bgt.n	8026336 <_printf_float+0x346>
 80262c4:	2300      	movs	r3, #0
 80262c6:	9305      	str	r3, [sp, #20]
 80262c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80262cc:	f104 021a 	add.w	r2, r4, #26
 80262d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80262d2:	9905      	ldr	r1, [sp, #20]
 80262d4:	9304      	str	r3, [sp, #16]
 80262d6:	eba3 0309 	sub.w	r3, r3, r9
 80262da:	428b      	cmp	r3, r1
 80262dc:	dc33      	bgt.n	8026346 <_printf_float+0x356>
 80262de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80262e2:	429a      	cmp	r2, r3
 80262e4:	db3c      	blt.n	8026360 <_printf_float+0x370>
 80262e6:	6823      	ldr	r3, [r4, #0]
 80262e8:	07da      	lsls	r2, r3, #31
 80262ea:	d439      	bmi.n	8026360 <_printf_float+0x370>
 80262ec:	9b08      	ldr	r3, [sp, #32]
 80262ee:	9a04      	ldr	r2, [sp, #16]
 80262f0:	9907      	ldr	r1, [sp, #28]
 80262f2:	1a9a      	subs	r2, r3, r2
 80262f4:	eba3 0901 	sub.w	r9, r3, r1
 80262f8:	4591      	cmp	r9, r2
 80262fa:	bfa8      	it	ge
 80262fc:	4691      	movge	r9, r2
 80262fe:	f1b9 0f00 	cmp.w	r9, #0
 8026302:	dc35      	bgt.n	8026370 <_printf_float+0x380>
 8026304:	f04f 0800 	mov.w	r8, #0
 8026308:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802630c:	f104 0a1a 	add.w	sl, r4, #26
 8026310:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8026314:	1a9b      	subs	r3, r3, r2
 8026316:	eba3 0309 	sub.w	r3, r3, r9
 802631a:	4543      	cmp	r3, r8
 802631c:	f77f af75 	ble.w	802620a <_printf_float+0x21a>
 8026320:	2301      	movs	r3, #1
 8026322:	4652      	mov	r2, sl
 8026324:	4631      	mov	r1, r6
 8026326:	4628      	mov	r0, r5
 8026328:	47b8      	blx	r7
 802632a:	3001      	adds	r0, #1
 802632c:	f43f aeae 	beq.w	802608c <_printf_float+0x9c>
 8026330:	f108 0801 	add.w	r8, r8, #1
 8026334:	e7ec      	b.n	8026310 <_printf_float+0x320>
 8026336:	4613      	mov	r3, r2
 8026338:	4631      	mov	r1, r6
 802633a:	4642      	mov	r2, r8
 802633c:	4628      	mov	r0, r5
 802633e:	47b8      	blx	r7
 8026340:	3001      	adds	r0, #1
 8026342:	d1bf      	bne.n	80262c4 <_printf_float+0x2d4>
 8026344:	e6a2      	b.n	802608c <_printf_float+0x9c>
 8026346:	2301      	movs	r3, #1
 8026348:	4631      	mov	r1, r6
 802634a:	4628      	mov	r0, r5
 802634c:	9204      	str	r2, [sp, #16]
 802634e:	47b8      	blx	r7
 8026350:	3001      	adds	r0, #1
 8026352:	f43f ae9b 	beq.w	802608c <_printf_float+0x9c>
 8026356:	9b05      	ldr	r3, [sp, #20]
 8026358:	9a04      	ldr	r2, [sp, #16]
 802635a:	3301      	adds	r3, #1
 802635c:	9305      	str	r3, [sp, #20]
 802635e:	e7b7      	b.n	80262d0 <_printf_float+0x2e0>
 8026360:	4653      	mov	r3, sl
 8026362:	465a      	mov	r2, fp
 8026364:	4631      	mov	r1, r6
 8026366:	4628      	mov	r0, r5
 8026368:	47b8      	blx	r7
 802636a:	3001      	adds	r0, #1
 802636c:	d1be      	bne.n	80262ec <_printf_float+0x2fc>
 802636e:	e68d      	b.n	802608c <_printf_float+0x9c>
 8026370:	9a04      	ldr	r2, [sp, #16]
 8026372:	464b      	mov	r3, r9
 8026374:	4442      	add	r2, r8
 8026376:	4631      	mov	r1, r6
 8026378:	4628      	mov	r0, r5
 802637a:	47b8      	blx	r7
 802637c:	3001      	adds	r0, #1
 802637e:	d1c1      	bne.n	8026304 <_printf_float+0x314>
 8026380:	e684      	b.n	802608c <_printf_float+0x9c>
 8026382:	9a08      	ldr	r2, [sp, #32]
 8026384:	2a01      	cmp	r2, #1
 8026386:	dc01      	bgt.n	802638c <_printf_float+0x39c>
 8026388:	07db      	lsls	r3, r3, #31
 802638a:	d537      	bpl.n	80263fc <_printf_float+0x40c>
 802638c:	2301      	movs	r3, #1
 802638e:	4642      	mov	r2, r8
 8026390:	4631      	mov	r1, r6
 8026392:	4628      	mov	r0, r5
 8026394:	47b8      	blx	r7
 8026396:	3001      	adds	r0, #1
 8026398:	f43f ae78 	beq.w	802608c <_printf_float+0x9c>
 802639c:	4653      	mov	r3, sl
 802639e:	465a      	mov	r2, fp
 80263a0:	4631      	mov	r1, r6
 80263a2:	4628      	mov	r0, r5
 80263a4:	47b8      	blx	r7
 80263a6:	3001      	adds	r0, #1
 80263a8:	f43f ae70 	beq.w	802608c <_printf_float+0x9c>
 80263ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80263b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80263b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263b8:	d01b      	beq.n	80263f2 <_printf_float+0x402>
 80263ba:	9b08      	ldr	r3, [sp, #32]
 80263bc:	f108 0201 	add.w	r2, r8, #1
 80263c0:	3b01      	subs	r3, #1
 80263c2:	4631      	mov	r1, r6
 80263c4:	4628      	mov	r0, r5
 80263c6:	47b8      	blx	r7
 80263c8:	3001      	adds	r0, #1
 80263ca:	d10e      	bne.n	80263ea <_printf_float+0x3fa>
 80263cc:	e65e      	b.n	802608c <_printf_float+0x9c>
 80263ce:	2301      	movs	r3, #1
 80263d0:	464a      	mov	r2, r9
 80263d2:	4631      	mov	r1, r6
 80263d4:	4628      	mov	r0, r5
 80263d6:	47b8      	blx	r7
 80263d8:	3001      	adds	r0, #1
 80263da:	f43f ae57 	beq.w	802608c <_printf_float+0x9c>
 80263de:	f108 0801 	add.w	r8, r8, #1
 80263e2:	9b08      	ldr	r3, [sp, #32]
 80263e4:	3b01      	subs	r3, #1
 80263e6:	4543      	cmp	r3, r8
 80263e8:	dcf1      	bgt.n	80263ce <_printf_float+0x3de>
 80263ea:	9b04      	ldr	r3, [sp, #16]
 80263ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80263f0:	e6db      	b.n	80261aa <_printf_float+0x1ba>
 80263f2:	f04f 0800 	mov.w	r8, #0
 80263f6:	f104 091a 	add.w	r9, r4, #26
 80263fa:	e7f2      	b.n	80263e2 <_printf_float+0x3f2>
 80263fc:	2301      	movs	r3, #1
 80263fe:	4642      	mov	r2, r8
 8026400:	e7df      	b.n	80263c2 <_printf_float+0x3d2>
 8026402:	2301      	movs	r3, #1
 8026404:	464a      	mov	r2, r9
 8026406:	4631      	mov	r1, r6
 8026408:	4628      	mov	r0, r5
 802640a:	47b8      	blx	r7
 802640c:	3001      	adds	r0, #1
 802640e:	f43f ae3d 	beq.w	802608c <_printf_float+0x9c>
 8026412:	f108 0801 	add.w	r8, r8, #1
 8026416:	68e3      	ldr	r3, [r4, #12]
 8026418:	9909      	ldr	r1, [sp, #36]	; 0x24
 802641a:	1a5b      	subs	r3, r3, r1
 802641c:	4543      	cmp	r3, r8
 802641e:	dcf0      	bgt.n	8026402 <_printf_float+0x412>
 8026420:	e6f7      	b.n	8026212 <_printf_float+0x222>
 8026422:	f04f 0800 	mov.w	r8, #0
 8026426:	f104 0919 	add.w	r9, r4, #25
 802642a:	e7f4      	b.n	8026416 <_printf_float+0x426>

0802642c <_printf_common>:
 802642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026430:	4616      	mov	r6, r2
 8026432:	4699      	mov	r9, r3
 8026434:	688a      	ldr	r2, [r1, #8]
 8026436:	690b      	ldr	r3, [r1, #16]
 8026438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802643c:	4293      	cmp	r3, r2
 802643e:	bfb8      	it	lt
 8026440:	4613      	movlt	r3, r2
 8026442:	6033      	str	r3, [r6, #0]
 8026444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026448:	4607      	mov	r7, r0
 802644a:	460c      	mov	r4, r1
 802644c:	b10a      	cbz	r2, 8026452 <_printf_common+0x26>
 802644e:	3301      	adds	r3, #1
 8026450:	6033      	str	r3, [r6, #0]
 8026452:	6823      	ldr	r3, [r4, #0]
 8026454:	0699      	lsls	r1, r3, #26
 8026456:	bf42      	ittt	mi
 8026458:	6833      	ldrmi	r3, [r6, #0]
 802645a:	3302      	addmi	r3, #2
 802645c:	6033      	strmi	r3, [r6, #0]
 802645e:	6825      	ldr	r5, [r4, #0]
 8026460:	f015 0506 	ands.w	r5, r5, #6
 8026464:	d106      	bne.n	8026474 <_printf_common+0x48>
 8026466:	f104 0a19 	add.w	sl, r4, #25
 802646a:	68e3      	ldr	r3, [r4, #12]
 802646c:	6832      	ldr	r2, [r6, #0]
 802646e:	1a9b      	subs	r3, r3, r2
 8026470:	42ab      	cmp	r3, r5
 8026472:	dc26      	bgt.n	80264c2 <_printf_common+0x96>
 8026474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026478:	1e13      	subs	r3, r2, #0
 802647a:	6822      	ldr	r2, [r4, #0]
 802647c:	bf18      	it	ne
 802647e:	2301      	movne	r3, #1
 8026480:	0692      	lsls	r2, r2, #26
 8026482:	d42b      	bmi.n	80264dc <_printf_common+0xb0>
 8026484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026488:	4649      	mov	r1, r9
 802648a:	4638      	mov	r0, r7
 802648c:	47c0      	blx	r8
 802648e:	3001      	adds	r0, #1
 8026490:	d01e      	beq.n	80264d0 <_printf_common+0xa4>
 8026492:	6823      	ldr	r3, [r4, #0]
 8026494:	68e5      	ldr	r5, [r4, #12]
 8026496:	6832      	ldr	r2, [r6, #0]
 8026498:	f003 0306 	and.w	r3, r3, #6
 802649c:	2b04      	cmp	r3, #4
 802649e:	bf08      	it	eq
 80264a0:	1aad      	subeq	r5, r5, r2
 80264a2:	68a3      	ldr	r3, [r4, #8]
 80264a4:	6922      	ldr	r2, [r4, #16]
 80264a6:	bf0c      	ite	eq
 80264a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80264ac:	2500      	movne	r5, #0
 80264ae:	4293      	cmp	r3, r2
 80264b0:	bfc4      	itt	gt
 80264b2:	1a9b      	subgt	r3, r3, r2
 80264b4:	18ed      	addgt	r5, r5, r3
 80264b6:	2600      	movs	r6, #0
 80264b8:	341a      	adds	r4, #26
 80264ba:	42b5      	cmp	r5, r6
 80264bc:	d11a      	bne.n	80264f4 <_printf_common+0xc8>
 80264be:	2000      	movs	r0, #0
 80264c0:	e008      	b.n	80264d4 <_printf_common+0xa8>
 80264c2:	2301      	movs	r3, #1
 80264c4:	4652      	mov	r2, sl
 80264c6:	4649      	mov	r1, r9
 80264c8:	4638      	mov	r0, r7
 80264ca:	47c0      	blx	r8
 80264cc:	3001      	adds	r0, #1
 80264ce:	d103      	bne.n	80264d8 <_printf_common+0xac>
 80264d0:	f04f 30ff 	mov.w	r0, #4294967295
 80264d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264d8:	3501      	adds	r5, #1
 80264da:	e7c6      	b.n	802646a <_printf_common+0x3e>
 80264dc:	18e1      	adds	r1, r4, r3
 80264de:	1c5a      	adds	r2, r3, #1
 80264e0:	2030      	movs	r0, #48	; 0x30
 80264e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80264e6:	4422      	add	r2, r4
 80264e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80264ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80264f0:	3302      	adds	r3, #2
 80264f2:	e7c7      	b.n	8026484 <_printf_common+0x58>
 80264f4:	2301      	movs	r3, #1
 80264f6:	4622      	mov	r2, r4
 80264f8:	4649      	mov	r1, r9
 80264fa:	4638      	mov	r0, r7
 80264fc:	47c0      	blx	r8
 80264fe:	3001      	adds	r0, #1
 8026500:	d0e6      	beq.n	80264d0 <_printf_common+0xa4>
 8026502:	3601      	adds	r6, #1
 8026504:	e7d9      	b.n	80264ba <_printf_common+0x8e>
 8026506:	Address 0x0000000008026506 is out of bounds.


08026508 <_printf_i>:
 8026508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802650c:	7e0f      	ldrb	r7, [r1, #24]
 802650e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026510:	2f78      	cmp	r7, #120	; 0x78
 8026512:	4691      	mov	r9, r2
 8026514:	4680      	mov	r8, r0
 8026516:	460c      	mov	r4, r1
 8026518:	469a      	mov	sl, r3
 802651a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802651e:	d807      	bhi.n	8026530 <_printf_i+0x28>
 8026520:	2f62      	cmp	r7, #98	; 0x62
 8026522:	d80a      	bhi.n	802653a <_printf_i+0x32>
 8026524:	2f00      	cmp	r7, #0
 8026526:	f000 80d8 	beq.w	80266da <_printf_i+0x1d2>
 802652a:	2f58      	cmp	r7, #88	; 0x58
 802652c:	f000 80a3 	beq.w	8026676 <_printf_i+0x16e>
 8026530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026538:	e03a      	b.n	80265b0 <_printf_i+0xa8>
 802653a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802653e:	2b15      	cmp	r3, #21
 8026540:	d8f6      	bhi.n	8026530 <_printf_i+0x28>
 8026542:	a101      	add	r1, pc, #4	; (adr r1, 8026548 <_printf_i+0x40>)
 8026544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026548:	080265a1 	.word	0x080265a1
 802654c:	080265b5 	.word	0x080265b5
 8026550:	08026531 	.word	0x08026531
 8026554:	08026531 	.word	0x08026531
 8026558:	08026531 	.word	0x08026531
 802655c:	08026531 	.word	0x08026531
 8026560:	080265b5 	.word	0x080265b5
 8026564:	08026531 	.word	0x08026531
 8026568:	08026531 	.word	0x08026531
 802656c:	08026531 	.word	0x08026531
 8026570:	08026531 	.word	0x08026531
 8026574:	080266c1 	.word	0x080266c1
 8026578:	080265e5 	.word	0x080265e5
 802657c:	080266a3 	.word	0x080266a3
 8026580:	08026531 	.word	0x08026531
 8026584:	08026531 	.word	0x08026531
 8026588:	080266e3 	.word	0x080266e3
 802658c:	08026531 	.word	0x08026531
 8026590:	080265e5 	.word	0x080265e5
 8026594:	08026531 	.word	0x08026531
 8026598:	08026531 	.word	0x08026531
 802659c:	080266ab 	.word	0x080266ab
 80265a0:	682b      	ldr	r3, [r5, #0]
 80265a2:	1d1a      	adds	r2, r3, #4
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	602a      	str	r2, [r5, #0]
 80265a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80265ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80265b0:	2301      	movs	r3, #1
 80265b2:	e0a3      	b.n	80266fc <_printf_i+0x1f4>
 80265b4:	6820      	ldr	r0, [r4, #0]
 80265b6:	6829      	ldr	r1, [r5, #0]
 80265b8:	0606      	lsls	r6, r0, #24
 80265ba:	f101 0304 	add.w	r3, r1, #4
 80265be:	d50a      	bpl.n	80265d6 <_printf_i+0xce>
 80265c0:	680e      	ldr	r6, [r1, #0]
 80265c2:	602b      	str	r3, [r5, #0]
 80265c4:	2e00      	cmp	r6, #0
 80265c6:	da03      	bge.n	80265d0 <_printf_i+0xc8>
 80265c8:	232d      	movs	r3, #45	; 0x2d
 80265ca:	4276      	negs	r6, r6
 80265cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80265d0:	485e      	ldr	r0, [pc, #376]	; (802674c <_printf_i+0x244>)
 80265d2:	230a      	movs	r3, #10
 80265d4:	e019      	b.n	802660a <_printf_i+0x102>
 80265d6:	680e      	ldr	r6, [r1, #0]
 80265d8:	602b      	str	r3, [r5, #0]
 80265da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80265de:	bf18      	it	ne
 80265e0:	b236      	sxthne	r6, r6
 80265e2:	e7ef      	b.n	80265c4 <_printf_i+0xbc>
 80265e4:	682b      	ldr	r3, [r5, #0]
 80265e6:	6820      	ldr	r0, [r4, #0]
 80265e8:	1d19      	adds	r1, r3, #4
 80265ea:	6029      	str	r1, [r5, #0]
 80265ec:	0601      	lsls	r1, r0, #24
 80265ee:	d501      	bpl.n	80265f4 <_printf_i+0xec>
 80265f0:	681e      	ldr	r6, [r3, #0]
 80265f2:	e002      	b.n	80265fa <_printf_i+0xf2>
 80265f4:	0646      	lsls	r6, r0, #25
 80265f6:	d5fb      	bpl.n	80265f0 <_printf_i+0xe8>
 80265f8:	881e      	ldrh	r6, [r3, #0]
 80265fa:	4854      	ldr	r0, [pc, #336]	; (802674c <_printf_i+0x244>)
 80265fc:	2f6f      	cmp	r7, #111	; 0x6f
 80265fe:	bf0c      	ite	eq
 8026600:	2308      	moveq	r3, #8
 8026602:	230a      	movne	r3, #10
 8026604:	2100      	movs	r1, #0
 8026606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802660a:	6865      	ldr	r5, [r4, #4]
 802660c:	60a5      	str	r5, [r4, #8]
 802660e:	2d00      	cmp	r5, #0
 8026610:	bfa2      	ittt	ge
 8026612:	6821      	ldrge	r1, [r4, #0]
 8026614:	f021 0104 	bicge.w	r1, r1, #4
 8026618:	6021      	strge	r1, [r4, #0]
 802661a:	b90e      	cbnz	r6, 8026620 <_printf_i+0x118>
 802661c:	2d00      	cmp	r5, #0
 802661e:	d04d      	beq.n	80266bc <_printf_i+0x1b4>
 8026620:	4615      	mov	r5, r2
 8026622:	fbb6 f1f3 	udiv	r1, r6, r3
 8026626:	fb03 6711 	mls	r7, r3, r1, r6
 802662a:	5dc7      	ldrb	r7, [r0, r7]
 802662c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026630:	4637      	mov	r7, r6
 8026632:	42bb      	cmp	r3, r7
 8026634:	460e      	mov	r6, r1
 8026636:	d9f4      	bls.n	8026622 <_printf_i+0x11a>
 8026638:	2b08      	cmp	r3, #8
 802663a:	d10b      	bne.n	8026654 <_printf_i+0x14c>
 802663c:	6823      	ldr	r3, [r4, #0]
 802663e:	07de      	lsls	r6, r3, #31
 8026640:	d508      	bpl.n	8026654 <_printf_i+0x14c>
 8026642:	6923      	ldr	r3, [r4, #16]
 8026644:	6861      	ldr	r1, [r4, #4]
 8026646:	4299      	cmp	r1, r3
 8026648:	bfde      	ittt	le
 802664a:	2330      	movle	r3, #48	; 0x30
 802664c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026654:	1b52      	subs	r2, r2, r5
 8026656:	6122      	str	r2, [r4, #16]
 8026658:	f8cd a000 	str.w	sl, [sp]
 802665c:	464b      	mov	r3, r9
 802665e:	aa03      	add	r2, sp, #12
 8026660:	4621      	mov	r1, r4
 8026662:	4640      	mov	r0, r8
 8026664:	f7ff fee2 	bl	802642c <_printf_common>
 8026668:	3001      	adds	r0, #1
 802666a:	d14c      	bne.n	8026706 <_printf_i+0x1fe>
 802666c:	f04f 30ff 	mov.w	r0, #4294967295
 8026670:	b004      	add	sp, #16
 8026672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026676:	4835      	ldr	r0, [pc, #212]	; (802674c <_printf_i+0x244>)
 8026678:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802667c:	6829      	ldr	r1, [r5, #0]
 802667e:	6823      	ldr	r3, [r4, #0]
 8026680:	f851 6b04 	ldr.w	r6, [r1], #4
 8026684:	6029      	str	r1, [r5, #0]
 8026686:	061d      	lsls	r5, r3, #24
 8026688:	d514      	bpl.n	80266b4 <_printf_i+0x1ac>
 802668a:	07df      	lsls	r7, r3, #31
 802668c:	bf44      	itt	mi
 802668e:	f043 0320 	orrmi.w	r3, r3, #32
 8026692:	6023      	strmi	r3, [r4, #0]
 8026694:	b91e      	cbnz	r6, 802669e <_printf_i+0x196>
 8026696:	6823      	ldr	r3, [r4, #0]
 8026698:	f023 0320 	bic.w	r3, r3, #32
 802669c:	6023      	str	r3, [r4, #0]
 802669e:	2310      	movs	r3, #16
 80266a0:	e7b0      	b.n	8026604 <_printf_i+0xfc>
 80266a2:	6823      	ldr	r3, [r4, #0]
 80266a4:	f043 0320 	orr.w	r3, r3, #32
 80266a8:	6023      	str	r3, [r4, #0]
 80266aa:	2378      	movs	r3, #120	; 0x78
 80266ac:	4828      	ldr	r0, [pc, #160]	; (8026750 <_printf_i+0x248>)
 80266ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80266b2:	e7e3      	b.n	802667c <_printf_i+0x174>
 80266b4:	0659      	lsls	r1, r3, #25
 80266b6:	bf48      	it	mi
 80266b8:	b2b6      	uxthmi	r6, r6
 80266ba:	e7e6      	b.n	802668a <_printf_i+0x182>
 80266bc:	4615      	mov	r5, r2
 80266be:	e7bb      	b.n	8026638 <_printf_i+0x130>
 80266c0:	682b      	ldr	r3, [r5, #0]
 80266c2:	6826      	ldr	r6, [r4, #0]
 80266c4:	6961      	ldr	r1, [r4, #20]
 80266c6:	1d18      	adds	r0, r3, #4
 80266c8:	6028      	str	r0, [r5, #0]
 80266ca:	0635      	lsls	r5, r6, #24
 80266cc:	681b      	ldr	r3, [r3, #0]
 80266ce:	d501      	bpl.n	80266d4 <_printf_i+0x1cc>
 80266d0:	6019      	str	r1, [r3, #0]
 80266d2:	e002      	b.n	80266da <_printf_i+0x1d2>
 80266d4:	0670      	lsls	r0, r6, #25
 80266d6:	d5fb      	bpl.n	80266d0 <_printf_i+0x1c8>
 80266d8:	8019      	strh	r1, [r3, #0]
 80266da:	2300      	movs	r3, #0
 80266dc:	6123      	str	r3, [r4, #16]
 80266de:	4615      	mov	r5, r2
 80266e0:	e7ba      	b.n	8026658 <_printf_i+0x150>
 80266e2:	682b      	ldr	r3, [r5, #0]
 80266e4:	1d1a      	adds	r2, r3, #4
 80266e6:	602a      	str	r2, [r5, #0]
 80266e8:	681d      	ldr	r5, [r3, #0]
 80266ea:	6862      	ldr	r2, [r4, #4]
 80266ec:	2100      	movs	r1, #0
 80266ee:	4628      	mov	r0, r5
 80266f0:	f7d9 fdbe 	bl	8000270 <memchr>
 80266f4:	b108      	cbz	r0, 80266fa <_printf_i+0x1f2>
 80266f6:	1b40      	subs	r0, r0, r5
 80266f8:	6060      	str	r0, [r4, #4]
 80266fa:	6863      	ldr	r3, [r4, #4]
 80266fc:	6123      	str	r3, [r4, #16]
 80266fe:	2300      	movs	r3, #0
 8026700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026704:	e7a8      	b.n	8026658 <_printf_i+0x150>
 8026706:	6923      	ldr	r3, [r4, #16]
 8026708:	462a      	mov	r2, r5
 802670a:	4649      	mov	r1, r9
 802670c:	4640      	mov	r0, r8
 802670e:	47d0      	blx	sl
 8026710:	3001      	adds	r0, #1
 8026712:	d0ab      	beq.n	802666c <_printf_i+0x164>
 8026714:	6823      	ldr	r3, [r4, #0]
 8026716:	079b      	lsls	r3, r3, #30
 8026718:	d413      	bmi.n	8026742 <_printf_i+0x23a>
 802671a:	68e0      	ldr	r0, [r4, #12]
 802671c:	9b03      	ldr	r3, [sp, #12]
 802671e:	4298      	cmp	r0, r3
 8026720:	bfb8      	it	lt
 8026722:	4618      	movlt	r0, r3
 8026724:	e7a4      	b.n	8026670 <_printf_i+0x168>
 8026726:	2301      	movs	r3, #1
 8026728:	4632      	mov	r2, r6
 802672a:	4649      	mov	r1, r9
 802672c:	4640      	mov	r0, r8
 802672e:	47d0      	blx	sl
 8026730:	3001      	adds	r0, #1
 8026732:	d09b      	beq.n	802666c <_printf_i+0x164>
 8026734:	3501      	adds	r5, #1
 8026736:	68e3      	ldr	r3, [r4, #12]
 8026738:	9903      	ldr	r1, [sp, #12]
 802673a:	1a5b      	subs	r3, r3, r1
 802673c:	42ab      	cmp	r3, r5
 802673e:	dcf2      	bgt.n	8026726 <_printf_i+0x21e>
 8026740:	e7eb      	b.n	802671a <_printf_i+0x212>
 8026742:	2500      	movs	r5, #0
 8026744:	f104 0619 	add.w	r6, r4, #25
 8026748:	e7f5      	b.n	8026736 <_printf_i+0x22e>
 802674a:	bf00      	nop
 802674c:	080477d8 	.word	0x080477d8
 8026750:	080477e9 	.word	0x080477e9

08026754 <iprintf>:
 8026754:	b40f      	push	{r0, r1, r2, r3}
 8026756:	4b0a      	ldr	r3, [pc, #40]	; (8026780 <iprintf+0x2c>)
 8026758:	b513      	push	{r0, r1, r4, lr}
 802675a:	681c      	ldr	r4, [r3, #0]
 802675c:	b124      	cbz	r4, 8026768 <iprintf+0x14>
 802675e:	69a3      	ldr	r3, [r4, #24]
 8026760:	b913      	cbnz	r3, 8026768 <iprintf+0x14>
 8026762:	4620      	mov	r0, r4
 8026764:	f7fe fe36 	bl	80253d4 <__sinit>
 8026768:	ab05      	add	r3, sp, #20
 802676a:	9a04      	ldr	r2, [sp, #16]
 802676c:	68a1      	ldr	r1, [r4, #8]
 802676e:	9301      	str	r3, [sp, #4]
 8026770:	4620      	mov	r0, r4
 8026772:	f003 fbd3 	bl	8029f1c <_vfiprintf_r>
 8026776:	b002      	add	sp, #8
 8026778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802677c:	b004      	add	sp, #16
 802677e:	4770      	bx	lr
 8026780:	200004a4 	.word	0x200004a4

08026784 <putchar>:
 8026784:	4b09      	ldr	r3, [pc, #36]	; (80267ac <putchar+0x28>)
 8026786:	b513      	push	{r0, r1, r4, lr}
 8026788:	681c      	ldr	r4, [r3, #0]
 802678a:	4601      	mov	r1, r0
 802678c:	b134      	cbz	r4, 802679c <putchar+0x18>
 802678e:	69a3      	ldr	r3, [r4, #24]
 8026790:	b923      	cbnz	r3, 802679c <putchar+0x18>
 8026792:	9001      	str	r0, [sp, #4]
 8026794:	4620      	mov	r0, r4
 8026796:	f7fe fe1d 	bl	80253d4 <__sinit>
 802679a:	9901      	ldr	r1, [sp, #4]
 802679c:	68a2      	ldr	r2, [r4, #8]
 802679e:	4620      	mov	r0, r4
 80267a0:	b002      	add	sp, #8
 80267a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80267a6:	f003 be3b 	b.w	802a420 <_putc_r>
 80267aa:	bf00      	nop
 80267ac:	200004a4 	.word	0x200004a4

080267b0 <_puts_r>:
 80267b0:	b570      	push	{r4, r5, r6, lr}
 80267b2:	460e      	mov	r6, r1
 80267b4:	4605      	mov	r5, r0
 80267b6:	b118      	cbz	r0, 80267c0 <_puts_r+0x10>
 80267b8:	6983      	ldr	r3, [r0, #24]
 80267ba:	b90b      	cbnz	r3, 80267c0 <_puts_r+0x10>
 80267bc:	f7fe fe0a 	bl	80253d4 <__sinit>
 80267c0:	69ab      	ldr	r3, [r5, #24]
 80267c2:	68ac      	ldr	r4, [r5, #8]
 80267c4:	b913      	cbnz	r3, 80267cc <_puts_r+0x1c>
 80267c6:	4628      	mov	r0, r5
 80267c8:	f7fe fe04 	bl	80253d4 <__sinit>
 80267cc:	4b2c      	ldr	r3, [pc, #176]	; (8026880 <_puts_r+0xd0>)
 80267ce:	429c      	cmp	r4, r3
 80267d0:	d120      	bne.n	8026814 <_puts_r+0x64>
 80267d2:	686c      	ldr	r4, [r5, #4]
 80267d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267d6:	07db      	lsls	r3, r3, #31
 80267d8:	d405      	bmi.n	80267e6 <_puts_r+0x36>
 80267da:	89a3      	ldrh	r3, [r4, #12]
 80267dc:	0598      	lsls	r0, r3, #22
 80267de:	d402      	bmi.n	80267e6 <_puts_r+0x36>
 80267e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267e2:	f7fe ffcd 	bl	8025780 <__retarget_lock_acquire_recursive>
 80267e6:	89a3      	ldrh	r3, [r4, #12]
 80267e8:	0719      	lsls	r1, r3, #28
 80267ea:	d51d      	bpl.n	8026828 <_puts_r+0x78>
 80267ec:	6923      	ldr	r3, [r4, #16]
 80267ee:	b1db      	cbz	r3, 8026828 <_puts_r+0x78>
 80267f0:	3e01      	subs	r6, #1
 80267f2:	68a3      	ldr	r3, [r4, #8]
 80267f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80267f8:	3b01      	subs	r3, #1
 80267fa:	60a3      	str	r3, [r4, #8]
 80267fc:	bb39      	cbnz	r1, 802684e <_puts_r+0x9e>
 80267fe:	2b00      	cmp	r3, #0
 8026800:	da38      	bge.n	8026874 <_puts_r+0xc4>
 8026802:	4622      	mov	r2, r4
 8026804:	210a      	movs	r1, #10
 8026806:	4628      	mov	r0, r5
 8026808:	f001 fae2 	bl	8027dd0 <__swbuf_r>
 802680c:	3001      	adds	r0, #1
 802680e:	d011      	beq.n	8026834 <_puts_r+0x84>
 8026810:	250a      	movs	r5, #10
 8026812:	e011      	b.n	8026838 <_puts_r+0x88>
 8026814:	4b1b      	ldr	r3, [pc, #108]	; (8026884 <_puts_r+0xd4>)
 8026816:	429c      	cmp	r4, r3
 8026818:	d101      	bne.n	802681e <_puts_r+0x6e>
 802681a:	68ac      	ldr	r4, [r5, #8]
 802681c:	e7da      	b.n	80267d4 <_puts_r+0x24>
 802681e:	4b1a      	ldr	r3, [pc, #104]	; (8026888 <_puts_r+0xd8>)
 8026820:	429c      	cmp	r4, r3
 8026822:	bf08      	it	eq
 8026824:	68ec      	ldreq	r4, [r5, #12]
 8026826:	e7d5      	b.n	80267d4 <_puts_r+0x24>
 8026828:	4621      	mov	r1, r4
 802682a:	4628      	mov	r0, r5
 802682c:	f001 fb34 	bl	8027e98 <__swsetup_r>
 8026830:	2800      	cmp	r0, #0
 8026832:	d0dd      	beq.n	80267f0 <_puts_r+0x40>
 8026834:	f04f 35ff 	mov.w	r5, #4294967295
 8026838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802683a:	07da      	lsls	r2, r3, #31
 802683c:	d405      	bmi.n	802684a <_puts_r+0x9a>
 802683e:	89a3      	ldrh	r3, [r4, #12]
 8026840:	059b      	lsls	r3, r3, #22
 8026842:	d402      	bmi.n	802684a <_puts_r+0x9a>
 8026844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026846:	f7fe ff9d 	bl	8025784 <__retarget_lock_release_recursive>
 802684a:	4628      	mov	r0, r5
 802684c:	bd70      	pop	{r4, r5, r6, pc}
 802684e:	2b00      	cmp	r3, #0
 8026850:	da04      	bge.n	802685c <_puts_r+0xac>
 8026852:	69a2      	ldr	r2, [r4, #24]
 8026854:	429a      	cmp	r2, r3
 8026856:	dc06      	bgt.n	8026866 <_puts_r+0xb6>
 8026858:	290a      	cmp	r1, #10
 802685a:	d004      	beq.n	8026866 <_puts_r+0xb6>
 802685c:	6823      	ldr	r3, [r4, #0]
 802685e:	1c5a      	adds	r2, r3, #1
 8026860:	6022      	str	r2, [r4, #0]
 8026862:	7019      	strb	r1, [r3, #0]
 8026864:	e7c5      	b.n	80267f2 <_puts_r+0x42>
 8026866:	4622      	mov	r2, r4
 8026868:	4628      	mov	r0, r5
 802686a:	f001 fab1 	bl	8027dd0 <__swbuf_r>
 802686e:	3001      	adds	r0, #1
 8026870:	d1bf      	bne.n	80267f2 <_puts_r+0x42>
 8026872:	e7df      	b.n	8026834 <_puts_r+0x84>
 8026874:	6823      	ldr	r3, [r4, #0]
 8026876:	250a      	movs	r5, #10
 8026878:	1c5a      	adds	r2, r3, #1
 802687a:	6022      	str	r2, [r4, #0]
 802687c:	701d      	strb	r5, [r3, #0]
 802687e:	e7db      	b.n	8026838 <_puts_r+0x88>
 8026880:	08047650 	.word	0x08047650
 8026884:	08047670 	.word	0x08047670
 8026888:	08047630 	.word	0x08047630

0802688c <puts>:
 802688c:	4b02      	ldr	r3, [pc, #8]	; (8026898 <puts+0xc>)
 802688e:	4601      	mov	r1, r0
 8026890:	6818      	ldr	r0, [r3, #0]
 8026892:	f7ff bf8d 	b.w	80267b0 <_puts_r>
 8026896:	bf00      	nop
 8026898:	200004a4 	.word	0x200004a4

0802689c <rand>:
 802689c:	4b16      	ldr	r3, [pc, #88]	; (80268f8 <rand+0x5c>)
 802689e:	b510      	push	{r4, lr}
 80268a0:	681c      	ldr	r4, [r3, #0]
 80268a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80268a4:	b9b3      	cbnz	r3, 80268d4 <rand+0x38>
 80268a6:	2018      	movs	r0, #24
 80268a8:	f7fe ff6e 	bl	8025788 <malloc>
 80268ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80268ae:	b928      	cbnz	r0, 80268bc <rand+0x20>
 80268b0:	4602      	mov	r2, r0
 80268b2:	4b12      	ldr	r3, [pc, #72]	; (80268fc <rand+0x60>)
 80268b4:	4812      	ldr	r0, [pc, #72]	; (8026900 <rand+0x64>)
 80268b6:	214e      	movs	r1, #78	; 0x4e
 80268b8:	f001 fba8 	bl	802800c <__assert_func>
 80268bc:	4a11      	ldr	r2, [pc, #68]	; (8026904 <rand+0x68>)
 80268be:	4b12      	ldr	r3, [pc, #72]	; (8026908 <rand+0x6c>)
 80268c0:	e9c0 2300 	strd	r2, r3, [r0]
 80268c4:	4b11      	ldr	r3, [pc, #68]	; (802690c <rand+0x70>)
 80268c6:	6083      	str	r3, [r0, #8]
 80268c8:	230b      	movs	r3, #11
 80268ca:	8183      	strh	r3, [r0, #12]
 80268cc:	2201      	movs	r2, #1
 80268ce:	2300      	movs	r3, #0
 80268d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80268d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80268d6:	4a0e      	ldr	r2, [pc, #56]	; (8026910 <rand+0x74>)
 80268d8:	6920      	ldr	r0, [r4, #16]
 80268da:	6963      	ldr	r3, [r4, #20]
 80268dc:	490d      	ldr	r1, [pc, #52]	; (8026914 <rand+0x78>)
 80268de:	4342      	muls	r2, r0
 80268e0:	fb01 2203 	mla	r2, r1, r3, r2
 80268e4:	fba0 0101 	umull	r0, r1, r0, r1
 80268e8:	1c43      	adds	r3, r0, #1
 80268ea:	eb42 0001 	adc.w	r0, r2, r1
 80268ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80268f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80268f6:	bd10      	pop	{r4, pc}
 80268f8:	200004a4 	.word	0x200004a4
 80268fc:	08047694 	.word	0x08047694
 8026900:	080477fa 	.word	0x080477fa
 8026904:	abcd330e 	.word	0xabcd330e
 8026908:	e66d1234 	.word	0xe66d1234
 802690c:	0005deec 	.word	0x0005deec
 8026910:	5851f42d 	.word	0x5851f42d
 8026914:	4c957f2d 	.word	0x4c957f2d

08026918 <cleanup_glue>:
 8026918:	b538      	push	{r3, r4, r5, lr}
 802691a:	460c      	mov	r4, r1
 802691c:	6809      	ldr	r1, [r1, #0]
 802691e:	4605      	mov	r5, r0
 8026920:	b109      	cbz	r1, 8026926 <cleanup_glue+0xe>
 8026922:	f7ff fff9 	bl	8026918 <cleanup_glue>
 8026926:	4621      	mov	r1, r4
 8026928:	4628      	mov	r0, r5
 802692a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802692e:	f7ff b9ed 	b.w	8025d0c <_free_r>
 8026932:	Address 0x0000000008026932 is out of bounds.


08026934 <_reclaim_reent>:
 8026934:	4b2c      	ldr	r3, [pc, #176]	; (80269e8 <_reclaim_reent+0xb4>)
 8026936:	681b      	ldr	r3, [r3, #0]
 8026938:	4283      	cmp	r3, r0
 802693a:	b570      	push	{r4, r5, r6, lr}
 802693c:	4604      	mov	r4, r0
 802693e:	d051      	beq.n	80269e4 <_reclaim_reent+0xb0>
 8026940:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026942:	b143      	cbz	r3, 8026956 <_reclaim_reent+0x22>
 8026944:	68db      	ldr	r3, [r3, #12]
 8026946:	2b00      	cmp	r3, #0
 8026948:	d14a      	bne.n	80269e0 <_reclaim_reent+0xac>
 802694a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802694c:	6819      	ldr	r1, [r3, #0]
 802694e:	b111      	cbz	r1, 8026956 <_reclaim_reent+0x22>
 8026950:	4620      	mov	r0, r4
 8026952:	f7ff f9db 	bl	8025d0c <_free_r>
 8026956:	6961      	ldr	r1, [r4, #20]
 8026958:	b111      	cbz	r1, 8026960 <_reclaim_reent+0x2c>
 802695a:	4620      	mov	r0, r4
 802695c:	f7ff f9d6 	bl	8025d0c <_free_r>
 8026960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026962:	b111      	cbz	r1, 802696a <_reclaim_reent+0x36>
 8026964:	4620      	mov	r0, r4
 8026966:	f7ff f9d1 	bl	8025d0c <_free_r>
 802696a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802696c:	b111      	cbz	r1, 8026974 <_reclaim_reent+0x40>
 802696e:	4620      	mov	r0, r4
 8026970:	f7ff f9cc 	bl	8025d0c <_free_r>
 8026974:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8026976:	b111      	cbz	r1, 802697e <_reclaim_reent+0x4a>
 8026978:	4620      	mov	r0, r4
 802697a:	f7ff f9c7 	bl	8025d0c <_free_r>
 802697e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026980:	b111      	cbz	r1, 8026988 <_reclaim_reent+0x54>
 8026982:	4620      	mov	r0, r4
 8026984:	f7ff f9c2 	bl	8025d0c <_free_r>
 8026988:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802698a:	b111      	cbz	r1, 8026992 <_reclaim_reent+0x5e>
 802698c:	4620      	mov	r0, r4
 802698e:	f7ff f9bd 	bl	8025d0c <_free_r>
 8026992:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026994:	b111      	cbz	r1, 802699c <_reclaim_reent+0x68>
 8026996:	4620      	mov	r0, r4
 8026998:	f7ff f9b8 	bl	8025d0c <_free_r>
 802699c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802699e:	b111      	cbz	r1, 80269a6 <_reclaim_reent+0x72>
 80269a0:	4620      	mov	r0, r4
 80269a2:	f7ff f9b3 	bl	8025d0c <_free_r>
 80269a6:	69a3      	ldr	r3, [r4, #24]
 80269a8:	b1e3      	cbz	r3, 80269e4 <_reclaim_reent+0xb0>
 80269aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80269ac:	4620      	mov	r0, r4
 80269ae:	4798      	blx	r3
 80269b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80269b2:	b1b9      	cbz	r1, 80269e4 <_reclaim_reent+0xb0>
 80269b4:	4620      	mov	r0, r4
 80269b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80269ba:	f7ff bfad 	b.w	8026918 <cleanup_glue>
 80269be:	5949      	ldr	r1, [r1, r5]
 80269c0:	b941      	cbnz	r1, 80269d4 <_reclaim_reent+0xa0>
 80269c2:	3504      	adds	r5, #4
 80269c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80269c6:	2d80      	cmp	r5, #128	; 0x80
 80269c8:	68d9      	ldr	r1, [r3, #12]
 80269ca:	d1f8      	bne.n	80269be <_reclaim_reent+0x8a>
 80269cc:	4620      	mov	r0, r4
 80269ce:	f7ff f99d 	bl	8025d0c <_free_r>
 80269d2:	e7ba      	b.n	802694a <_reclaim_reent+0x16>
 80269d4:	680e      	ldr	r6, [r1, #0]
 80269d6:	4620      	mov	r0, r4
 80269d8:	f7ff f998 	bl	8025d0c <_free_r>
 80269dc:	4631      	mov	r1, r6
 80269de:	e7ef      	b.n	80269c0 <_reclaim_reent+0x8c>
 80269e0:	2500      	movs	r5, #0
 80269e2:	e7ef      	b.n	80269c4 <_reclaim_reent+0x90>
 80269e4:	bd70      	pop	{r4, r5, r6, pc}
 80269e6:	bf00      	nop
 80269e8:	200004a4 	.word	0x200004a4

080269ec <modf>:
 80269ec:	b570      	push	{r4, r5, r6, lr}
 80269ee:	ed2d 8b02 	vpush	{d8}
 80269f2:	eeb0 8b40 	vmov.f64	d8, d0
 80269f6:	ee18 5a90 	vmov	r5, s17
 80269fa:	4604      	mov	r4, r0
 80269fc:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8026a00:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8026a04:	2b13      	cmp	r3, #19
 8026a06:	ee10 1a10 	vmov	r1, s0
 8026a0a:	dc23      	bgt.n	8026a54 <modf+0x68>
 8026a0c:	2b00      	cmp	r3, #0
 8026a0e:	da09      	bge.n	8026a24 <modf+0x38>
 8026a10:	2200      	movs	r2, #0
 8026a12:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a16:	e9c4 2300 	strd	r2, r3, [r4]
 8026a1a:	eeb0 0b48 	vmov.f64	d0, d8
 8026a1e:	ecbd 8b02 	vpop	{d8}
 8026a22:	bd70      	pop	{r4, r5, r6, pc}
 8026a24:	481d      	ldr	r0, [pc, #116]	; (8026a9c <modf+0xb0>)
 8026a26:	4118      	asrs	r0, r3
 8026a28:	ea05 0300 	and.w	r3, r5, r0
 8026a2c:	4319      	orrs	r1, r3
 8026a2e:	d107      	bne.n	8026a40 <modf+0x54>
 8026a30:	ed84 0b00 	vstr	d0, [r4]
 8026a34:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a38:	460a      	mov	r2, r1
 8026a3a:	ec43 2b18 	vmov	d8, r2, r3
 8026a3e:	e7ec      	b.n	8026a1a <modf+0x2e>
 8026a40:	2200      	movs	r2, #0
 8026a42:	ea25 0300 	bic.w	r3, r5, r0
 8026a46:	ec43 2b17 	vmov	d7, r2, r3
 8026a4a:	e9c4 2300 	strd	r2, r3, [r4]
 8026a4e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8026a52:	e7e2      	b.n	8026a1a <modf+0x2e>
 8026a54:	2b33      	cmp	r3, #51	; 0x33
 8026a56:	dd0d      	ble.n	8026a74 <modf+0x88>
 8026a58:	ed84 0b00 	vstr	d0, [r4]
 8026a5c:	f003 fd3a 	bl	802a4d4 <__fpclassifyd>
 8026a60:	b920      	cbnz	r0, 8026a6c <modf+0x80>
 8026a62:	ee38 8b08 	vadd.f64	d8, d8, d8
 8026a66:	ed84 8b00 	vstr	d8, [r4]
 8026a6a:	e7d6      	b.n	8026a1a <modf+0x2e>
 8026a6c:	2200      	movs	r2, #0
 8026a6e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a72:	e7e2      	b.n	8026a3a <modf+0x4e>
 8026a74:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8026a78:	f04f 30ff 	mov.w	r0, #4294967295
 8026a7c:	40d8      	lsrs	r0, r3
 8026a7e:	ea11 0600 	ands.w	r6, r1, r0
 8026a82:	d105      	bne.n	8026a90 <modf+0xa4>
 8026a84:	ed84 0b00 	vstr	d0, [r4]
 8026a88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8026a8c:	4632      	mov	r2, r6
 8026a8e:	e7d4      	b.n	8026a3a <modf+0x4e>
 8026a90:	ee18 3a90 	vmov	r3, s17
 8026a94:	ea21 0200 	bic.w	r2, r1, r0
 8026a98:	e7d5      	b.n	8026a46 <modf+0x5a>
 8026a9a:	bf00      	nop
 8026a9c:	000fffff 	.word	0x000fffff

08026aa0 <_sbrk_r>:
 8026aa0:	b538      	push	{r3, r4, r5, lr}
 8026aa2:	4d06      	ldr	r5, [pc, #24]	; (8026abc <_sbrk_r+0x1c>)
 8026aa4:	2300      	movs	r3, #0
 8026aa6:	4604      	mov	r4, r0
 8026aa8:	4608      	mov	r0, r1
 8026aaa:	602b      	str	r3, [r5, #0]
 8026aac:	f7e1 fcf0 	bl	8008490 <_sbrk>
 8026ab0:	1c43      	adds	r3, r0, #1
 8026ab2:	d102      	bne.n	8026aba <_sbrk_r+0x1a>
 8026ab4:	682b      	ldr	r3, [r5, #0]
 8026ab6:	b103      	cbz	r3, 8026aba <_sbrk_r+0x1a>
 8026ab8:	6023      	str	r3, [r4, #0]
 8026aba:	bd38      	pop	{r3, r4, r5, pc}
 8026abc:	200300e4 	.word	0x200300e4

08026ac0 <sniprintf>:
 8026ac0:	b40c      	push	{r2, r3}
 8026ac2:	b530      	push	{r4, r5, lr}
 8026ac4:	4b17      	ldr	r3, [pc, #92]	; (8026b24 <sniprintf+0x64>)
 8026ac6:	1e0c      	subs	r4, r1, #0
 8026ac8:	681d      	ldr	r5, [r3, #0]
 8026aca:	b09d      	sub	sp, #116	; 0x74
 8026acc:	da08      	bge.n	8026ae0 <sniprintf+0x20>
 8026ace:	238b      	movs	r3, #139	; 0x8b
 8026ad0:	602b      	str	r3, [r5, #0]
 8026ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8026ad6:	b01d      	add	sp, #116	; 0x74
 8026ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026adc:	b002      	add	sp, #8
 8026ade:	4770      	bx	lr
 8026ae0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026ae4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026ae8:	bf14      	ite	ne
 8026aea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8026aee:	4623      	moveq	r3, r4
 8026af0:	9304      	str	r3, [sp, #16]
 8026af2:	9307      	str	r3, [sp, #28]
 8026af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026af8:	9002      	str	r0, [sp, #8]
 8026afa:	9006      	str	r0, [sp, #24]
 8026afc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026b00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026b02:	ab21      	add	r3, sp, #132	; 0x84
 8026b04:	a902      	add	r1, sp, #8
 8026b06:	4628      	mov	r0, r5
 8026b08:	9301      	str	r3, [sp, #4]
 8026b0a:	f002 ff0b 	bl	8029924 <_svfiprintf_r>
 8026b0e:	1c43      	adds	r3, r0, #1
 8026b10:	bfbc      	itt	lt
 8026b12:	238b      	movlt	r3, #139	; 0x8b
 8026b14:	602b      	strlt	r3, [r5, #0]
 8026b16:	2c00      	cmp	r4, #0
 8026b18:	d0dd      	beq.n	8026ad6 <sniprintf+0x16>
 8026b1a:	9b02      	ldr	r3, [sp, #8]
 8026b1c:	2200      	movs	r2, #0
 8026b1e:	701a      	strb	r2, [r3, #0]
 8026b20:	e7d9      	b.n	8026ad6 <sniprintf+0x16>
 8026b22:	bf00      	nop
 8026b24:	200004a4 	.word	0x200004a4

08026b28 <siprintf>:
 8026b28:	b40e      	push	{r1, r2, r3}
 8026b2a:	b500      	push	{lr}
 8026b2c:	b09c      	sub	sp, #112	; 0x70
 8026b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8026b30:	9002      	str	r0, [sp, #8]
 8026b32:	9006      	str	r0, [sp, #24]
 8026b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026b38:	4809      	ldr	r0, [pc, #36]	; (8026b60 <siprintf+0x38>)
 8026b3a:	9107      	str	r1, [sp, #28]
 8026b3c:	9104      	str	r1, [sp, #16]
 8026b3e:	4909      	ldr	r1, [pc, #36]	; (8026b64 <siprintf+0x3c>)
 8026b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b44:	9105      	str	r1, [sp, #20]
 8026b46:	6800      	ldr	r0, [r0, #0]
 8026b48:	9301      	str	r3, [sp, #4]
 8026b4a:	a902      	add	r1, sp, #8
 8026b4c:	f002 feea 	bl	8029924 <_svfiprintf_r>
 8026b50:	9b02      	ldr	r3, [sp, #8]
 8026b52:	2200      	movs	r2, #0
 8026b54:	701a      	strb	r2, [r3, #0]
 8026b56:	b01c      	add	sp, #112	; 0x70
 8026b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8026b5c:	b003      	add	sp, #12
 8026b5e:	4770      	bx	lr
 8026b60:	200004a4 	.word	0x200004a4
 8026b64:	ffff0208 	.word	0xffff0208

08026b68 <siscanf>:
 8026b68:	b40e      	push	{r1, r2, r3}
 8026b6a:	b510      	push	{r4, lr}
 8026b6c:	b09f      	sub	sp, #124	; 0x7c
 8026b6e:	ac21      	add	r4, sp, #132	; 0x84
 8026b70:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026b74:	f854 2b04 	ldr.w	r2, [r4], #4
 8026b78:	9201      	str	r2, [sp, #4]
 8026b7a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026b7e:	9004      	str	r0, [sp, #16]
 8026b80:	9008      	str	r0, [sp, #32]
 8026b82:	f7d9 fb67 	bl	8000254 <strlen>
 8026b86:	4b0c      	ldr	r3, [pc, #48]	; (8026bb8 <siscanf+0x50>)
 8026b88:	9005      	str	r0, [sp, #20]
 8026b8a:	9009      	str	r0, [sp, #36]	; 0x24
 8026b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8026b8e:	480b      	ldr	r0, [pc, #44]	; (8026bbc <siscanf+0x54>)
 8026b90:	9a01      	ldr	r2, [sp, #4]
 8026b92:	6800      	ldr	r0, [r0, #0]
 8026b94:	9403      	str	r4, [sp, #12]
 8026b96:	2300      	movs	r3, #0
 8026b98:	9311      	str	r3, [sp, #68]	; 0x44
 8026b9a:	9316      	str	r3, [sp, #88]	; 0x58
 8026b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026ba0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026ba4:	a904      	add	r1, sp, #16
 8026ba6:	4623      	mov	r3, r4
 8026ba8:	f003 f816 	bl	8029bd8 <__ssvfiscanf_r>
 8026bac:	b01f      	add	sp, #124	; 0x7c
 8026bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026bb2:	b003      	add	sp, #12
 8026bb4:	4770      	bx	lr
 8026bb6:	bf00      	nop
 8026bb8:	08026be3 	.word	0x08026be3
 8026bbc:	200004a4 	.word	0x200004a4

08026bc0 <__sread>:
 8026bc0:	b510      	push	{r4, lr}
 8026bc2:	460c      	mov	r4, r1
 8026bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bc8:	f003 fc72 	bl	802a4b0 <_read_r>
 8026bcc:	2800      	cmp	r0, #0
 8026bce:	bfab      	itete	ge
 8026bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8026bd4:	181b      	addge	r3, r3, r0
 8026bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026bda:	bfac      	ite	ge
 8026bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8026bde:	81a3      	strhlt	r3, [r4, #12]
 8026be0:	bd10      	pop	{r4, pc}

08026be2 <__seofread>:
 8026be2:	2000      	movs	r0, #0
 8026be4:	4770      	bx	lr

08026be6 <__swrite>:
 8026be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026bea:	461f      	mov	r7, r3
 8026bec:	898b      	ldrh	r3, [r1, #12]
 8026bee:	05db      	lsls	r3, r3, #23
 8026bf0:	4605      	mov	r5, r0
 8026bf2:	460c      	mov	r4, r1
 8026bf4:	4616      	mov	r6, r2
 8026bf6:	d505      	bpl.n	8026c04 <__swrite+0x1e>
 8026bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bfc:	2302      	movs	r3, #2
 8026bfe:	2200      	movs	r2, #0
 8026c00:	f002 fa16 	bl	8029030 <_lseek_r>
 8026c04:	89a3      	ldrh	r3, [r4, #12]
 8026c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026c0e:	81a3      	strh	r3, [r4, #12]
 8026c10:	4632      	mov	r2, r6
 8026c12:	463b      	mov	r3, r7
 8026c14:	4628      	mov	r0, r5
 8026c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026c1a:	f001 b92b 	b.w	8027e74 <_write_r>

08026c1e <__sseek>:
 8026c1e:	b510      	push	{r4, lr}
 8026c20:	460c      	mov	r4, r1
 8026c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c26:	f002 fa03 	bl	8029030 <_lseek_r>
 8026c2a:	1c43      	adds	r3, r0, #1
 8026c2c:	89a3      	ldrh	r3, [r4, #12]
 8026c2e:	bf15      	itete	ne
 8026c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8026c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026c3a:	81a3      	strheq	r3, [r4, #12]
 8026c3c:	bf18      	it	ne
 8026c3e:	81a3      	strhne	r3, [r4, #12]
 8026c40:	bd10      	pop	{r4, pc}

08026c42 <__sclose>:
 8026c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c46:	f001 b9ff 	b.w	8028048 <_close_r>

08026c4a <stpcpy>:
 8026c4a:	4603      	mov	r3, r0
 8026c4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c50:	4618      	mov	r0, r3
 8026c52:	f803 2b01 	strb.w	r2, [r3], #1
 8026c56:	2a00      	cmp	r2, #0
 8026c58:	d1f8      	bne.n	8026c4c <stpcpy+0x2>
 8026c5a:	4770      	bx	lr

08026c5c <strcat>:
 8026c5c:	b510      	push	{r4, lr}
 8026c5e:	4602      	mov	r2, r0
 8026c60:	7814      	ldrb	r4, [r2, #0]
 8026c62:	4613      	mov	r3, r2
 8026c64:	3201      	adds	r2, #1
 8026c66:	2c00      	cmp	r4, #0
 8026c68:	d1fa      	bne.n	8026c60 <strcat+0x4>
 8026c6a:	3b01      	subs	r3, #1
 8026c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026c74:	2a00      	cmp	r2, #0
 8026c76:	d1f9      	bne.n	8026c6c <strcat+0x10>
 8026c78:	bd10      	pop	{r4, pc}

08026c7a <strchr>:
 8026c7a:	b2c9      	uxtb	r1, r1
 8026c7c:	4603      	mov	r3, r0
 8026c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026c82:	b11a      	cbz	r2, 8026c8c <strchr+0x12>
 8026c84:	428a      	cmp	r2, r1
 8026c86:	d1f9      	bne.n	8026c7c <strchr+0x2>
 8026c88:	4618      	mov	r0, r3
 8026c8a:	4770      	bx	lr
 8026c8c:	2900      	cmp	r1, #0
 8026c8e:	bf18      	it	ne
 8026c90:	2300      	movne	r3, #0
 8026c92:	e7f9      	b.n	8026c88 <strchr+0xe>

08026c94 <strcpy>:
 8026c94:	4603      	mov	r3, r0
 8026c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c9a:	f803 2b01 	strb.w	r2, [r3], #1
 8026c9e:	2a00      	cmp	r2, #0
 8026ca0:	d1f9      	bne.n	8026c96 <strcpy+0x2>
 8026ca2:	4770      	bx	lr

08026ca4 <iso_year_adjust>:
 8026ca4:	6942      	ldr	r2, [r0, #20]
 8026ca6:	2a00      	cmp	r2, #0
 8026ca8:	f240 736c 	movw	r3, #1900	; 0x76c
 8026cac:	bfa8      	it	ge
 8026cae:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8026cb2:	4413      	add	r3, r2
 8026cb4:	0792      	lsls	r2, r2, #30
 8026cb6:	d105      	bne.n	8026cc4 <iso_year_adjust+0x20>
 8026cb8:	2164      	movs	r1, #100	; 0x64
 8026cba:	fb93 f2f1 	sdiv	r2, r3, r1
 8026cbe:	fb01 3212 	mls	r2, r1, r2, r3
 8026cc2:	b9da      	cbnz	r2, 8026cfc <iso_year_adjust+0x58>
 8026cc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026cc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8026ccc:	fb02 3311 	mls	r3, r2, r1, r3
 8026cd0:	fab3 f383 	clz	r3, r3
 8026cd4:	095b      	lsrs	r3, r3, #5
 8026cd6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8026cda:	0040      	lsls	r0, r0, #1
 8026cdc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8026ce0:	4418      	add	r0, r3
 8026ce2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8026ce6:	4298      	cmp	r0, r3
 8026ce8:	d03a      	beq.n	8026d60 <iso_year_adjust+0xbc>
 8026cea:	dc21      	bgt.n	8026d30 <iso_year_adjust+0x8c>
 8026cec:	2801      	cmp	r0, #1
 8026cee:	dc1a      	bgt.n	8026d26 <iso_year_adjust+0x82>
 8026cf0:	2800      	cmp	r0, #0
 8026cf2:	bfb4      	ite	lt
 8026cf4:	2000      	movlt	r0, #0
 8026cf6:	f04f 30ff 	movge.w	r0, #4294967295
 8026cfa:	4770      	bx	lr
 8026cfc:	2301      	movs	r3, #1
 8026cfe:	e7ea      	b.n	8026cd6 <iso_year_adjust+0x32>
 8026d00:	2817      	cmp	r0, #23
 8026d02:	d813      	bhi.n	8026d2c <iso_year_adjust+0x88>
 8026d04:	e8df f000 	tbb	[pc, r0]
 8026d08:	0c0c0c0c 	.word	0x0c0c0c0c
 8026d0c:	0c0c1212 	.word	0x0c0c1212
 8026d10:	12121212 	.word	0x12121212
 8026d14:	12121212 	.word	0x12121212
 8026d18:	0c0c1212 	.word	0x0c0c1212
 8026d1c:	0c0c1212 	.word	0x0c0c1212
 8026d20:	f04f 30ff 	mov.w	r0, #4294967295
 8026d24:	4770      	bx	lr
 8026d26:	380a      	subs	r0, #10
 8026d28:	2817      	cmp	r0, #23
 8026d2a:	d9e9      	bls.n	8026d00 <iso_year_adjust+0x5c>
 8026d2c:	2000      	movs	r0, #0
 8026d2e:	4770      	bx	lr
 8026d30:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8026d34:	4298      	cmp	r0, r3
 8026d36:	dc06      	bgt.n	8026d46 <iso_year_adjust+0xa2>
 8026d38:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8026d3c:	4298      	cmp	r0, r3
 8026d3e:	bfd4      	ite	le
 8026d40:	2000      	movle	r0, #0
 8026d42:	2001      	movgt	r0, #1
 8026d44:	4770      	bx	lr
 8026d46:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8026d4a:	3802      	subs	r0, #2
 8026d4c:	2815      	cmp	r0, #21
 8026d4e:	d8ed      	bhi.n	8026d2c <iso_year_adjust+0x88>
 8026d50:	2301      	movs	r3, #1
 8026d52:	4083      	lsls	r3, r0
 8026d54:	4803      	ldr	r0, [pc, #12]	; (8026d64 <iso_year_adjust+0xc0>)
 8026d56:	4018      	ands	r0, r3
 8026d58:	3800      	subs	r0, #0
 8026d5a:	bf18      	it	ne
 8026d5c:	2001      	movne	r0, #1
 8026d5e:	4770      	bx	lr
 8026d60:	2001      	movs	r0, #1
 8026d62:	4770      	bx	lr
 8026d64:	002a001f 	.word	0x002a001f

08026d68 <__strftime.isra.0>:
 8026d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d6c:	b08f      	sub	sp, #60	; 0x3c
 8026d6e:	461e      	mov	r6, r3
 8026d70:	2300      	movs	r3, #0
 8026d72:	4607      	mov	r7, r0
 8026d74:	460d      	mov	r5, r1
 8026d76:	9302      	str	r3, [sp, #8]
 8026d78:	461c      	mov	r4, r3
 8026d7a:	7813      	ldrb	r3, [r2, #0]
 8026d7c:	2b00      	cmp	r3, #0
 8026d7e:	f000 84ba 	beq.w	80276f6 <__strftime.isra.0+0x98e>
 8026d82:	2b25      	cmp	r3, #37	; 0x25
 8026d84:	d11f      	bne.n	8026dc6 <__strftime.isra.0+0x5e>
 8026d86:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026d8a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8026d8e:	d024      	beq.n	8026dda <__strftime.isra.0+0x72>
 8026d90:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026d94:	d021      	beq.n	8026dda <__strftime.isra.0+0x72>
 8026d96:	f102 0801 	add.w	r8, r2, #1
 8026d9a:	f04f 0b00 	mov.w	fp, #0
 8026d9e:	f898 2000 	ldrb.w	r2, [r8]
 8026da2:	3a31      	subs	r2, #49	; 0x31
 8026da4:	2a08      	cmp	r2, #8
 8026da6:	d81b      	bhi.n	8026de0 <__strftime.isra.0+0x78>
 8026da8:	4640      	mov	r0, r8
 8026daa:	220a      	movs	r2, #10
 8026dac:	a906      	add	r1, sp, #24
 8026dae:	f000 fdc9 	bl	8027944 <strtoul>
 8026db2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026db6:	4681      	mov	r9, r0
 8026db8:	f898 2000 	ldrb.w	r2, [r8]
 8026dbc:	2a45      	cmp	r2, #69	; 0x45
 8026dbe:	d112      	bne.n	8026de6 <__strftime.isra.0+0x7e>
 8026dc0:	f108 0801 	add.w	r8, r8, #1
 8026dc4:	e011      	b.n	8026dea <__strftime.isra.0+0x82>
 8026dc6:	1e69      	subs	r1, r5, #1
 8026dc8:	42a1      	cmp	r1, r4
 8026dca:	d802      	bhi.n	8026dd2 <__strftime.isra.0+0x6a>
 8026dcc:	2400      	movs	r4, #0
 8026dce:	f000 bc95 	b.w	80276fc <__strftime.isra.0+0x994>
 8026dd2:	553b      	strb	r3, [r7, r4]
 8026dd4:	3201      	adds	r2, #1
 8026dd6:	3401      	adds	r4, #1
 8026dd8:	e7cf      	b.n	8026d7a <__strftime.isra.0+0x12>
 8026dda:	f102 0802 	add.w	r8, r2, #2
 8026dde:	e7de      	b.n	8026d9e <__strftime.isra.0+0x36>
 8026de0:	f04f 0900 	mov.w	r9, #0
 8026de4:	e7e8      	b.n	8026db8 <__strftime.isra.0+0x50>
 8026de6:	2a4f      	cmp	r2, #79	; 0x4f
 8026de8:	d0ea      	beq.n	8026dc0 <__strftime.isra.0+0x58>
 8026dea:	f898 0000 	ldrb.w	r0, [r8]
 8026dee:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8026df2:	2a55      	cmp	r2, #85	; 0x55
 8026df4:	d8ea      	bhi.n	8026dcc <__strftime.isra.0+0x64>
 8026df6:	a301      	add	r3, pc, #4	; (adr r3, 8026dfc <__strftime.isra.0+0x94>)
 8026df8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8026dfc:	080276eb 	.word	0x080276eb
 8026e00:	08026dcd 	.word	0x08026dcd
 8026e04:	08026dcd 	.word	0x08026dcd
 8026e08:	08026dcd 	.word	0x08026dcd
 8026e0c:	08026dcd 	.word	0x08026dcd
 8026e10:	08026dcd 	.word	0x08026dcd
 8026e14:	08026dcd 	.word	0x08026dcd
 8026e18:	08026dcd 	.word	0x08026dcd
 8026e1c:	08026dcd 	.word	0x08026dcd
 8026e20:	08026dcd 	.word	0x08026dcd
 8026e24:	08026dcd 	.word	0x08026dcd
 8026e28:	08026dcd 	.word	0x08026dcd
 8026e2c:	08026dcd 	.word	0x08026dcd
 8026e30:	08026dcd 	.word	0x08026dcd
 8026e34:	08026dcd 	.word	0x08026dcd
 8026e38:	08026dcd 	.word	0x08026dcd
 8026e3c:	08026dcd 	.word	0x08026dcd
 8026e40:	08026dcd 	.word	0x08026dcd
 8026e44:	08026dcd 	.word	0x08026dcd
 8026e48:	08026dcd 	.word	0x08026dcd
 8026e4c:	08026dcd 	.word	0x08026dcd
 8026e50:	08026dcd 	.word	0x08026dcd
 8026e54:	08026dcd 	.word	0x08026dcd
 8026e58:	08026dcd 	.word	0x08026dcd
 8026e5c:	08026dcd 	.word	0x08026dcd
 8026e60:	08026dcd 	.word	0x08026dcd
 8026e64:	08026dcd 	.word	0x08026dcd
 8026e68:	08026dcd 	.word	0x08026dcd
 8026e6c:	08026f91 	.word	0x08026f91
 8026e70:	08026fe9 	.word	0x08026fe9
 8026e74:	08027057 	.word	0x08027057
 8026e78:	080270f5 	.word	0x080270f5
 8026e7c:	08026dcd 	.word	0x08026dcd
 8026e80:	08027141 	.word	0x08027141
 8026e84:	0802722d 	.word	0x0802722d
 8026e88:	08027307 	.word	0x08027307
 8026e8c:	08027315 	.word	0x08027315
 8026e90:	08026dcd 	.word	0x08026dcd
 8026e94:	08026dcd 	.word	0x08026dcd
 8026e98:	08026dcd 	.word	0x08026dcd
 8026e9c:	08027345 	.word	0x08027345
 8026ea0:	08026dcd 	.word	0x08026dcd
 8026ea4:	08026dcd 	.word	0x08026dcd
 8026ea8:	08027359 	.word	0x08027359
 8026eac:	08026dcd 	.word	0x08026dcd
 8026eb0:	080273ab 	.word	0x080273ab
 8026eb4:	080274bf 	.word	0x080274bf
 8026eb8:	080274cf 	.word	0x080274cf
 8026ebc:	080274f7 	.word	0x080274f7
 8026ec0:	08027531 	.word	0x08027531
 8026ec4:	080275a5 	.word	0x080275a5
 8026ec8:	0802704f 	.word	0x0802704f
 8026ecc:	080275d1 	.word	0x080275d1
 8026ed0:	08027699 	.word	0x08027699
 8026ed4:	08026dcd 	.word	0x08026dcd
 8026ed8:	08026dcd 	.word	0x08026dcd
 8026edc:	08026dcd 	.word	0x08026dcd
 8026ee0:	08026dcd 	.word	0x08026dcd
 8026ee4:	08026dcd 	.word	0x08026dcd
 8026ee8:	08026dcd 	.word	0x08026dcd
 8026eec:	08026f55 	.word	0x08026f55
 8026ef0:	08026fbf 	.word	0x08026fbf
 8026ef4:	08027015 	.word	0x08027015
 8026ef8:	080270d1 	.word	0x080270d1
 8026efc:	080270d1 	.word	0x080270d1
 8026f00:	08026dcd 	.word	0x08026dcd
 8026f04:	08027193 	.word	0x08027193
 8026f08:	08026fbf 	.word	0x08026fbf
 8026f0c:	08026dcd 	.word	0x08026dcd
 8026f10:	08027337 	.word	0x08027337
 8026f14:	08027307 	.word	0x08027307
 8026f18:	08027315 	.word	0x08027315
 8026f1c:	0802733f 	.word	0x0802733f
 8026f20:	08027349 	.word	0x08027349
 8026f24:	08026dcd 	.word	0x08026dcd
 8026f28:	08027359 	.word	0x08027359
 8026f2c:	08026dcd 	.word	0x08026dcd
 8026f30:	0802703f 	.word	0x0802703f
 8026f34:	080273bd 	.word	0x080273bd
 8026f38:	080274c3 	.word	0x080274c3
 8026f3c:	080274dd 	.word	0x080274dd
 8026f40:	08026dcd 	.word	0x08026dcd
 8026f44:	08027597 	.word	0x08027597
 8026f48:	08027047 	.word	0x08027047
 8026f4c:	080275b5 	.word	0x080275b5
 8026f50:	08027623 	.word	0x08027623
 8026f54:	69b3      	ldr	r3, [r6, #24]
 8026f56:	4aa9      	ldr	r2, [pc, #676]	; (80271fc <__strftime.isra.0+0x494>)
 8026f58:	3318      	adds	r3, #24
 8026f5a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026f5e:	4648      	mov	r0, r9
 8026f60:	f7d9 f978 	bl	8000254 <strlen>
 8026f64:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f68:	4420      	add	r0, r4
 8026f6a:	1e6b      	subs	r3, r5, #1
 8026f6c:	42a0      	cmp	r0, r4
 8026f6e:	d107      	bne.n	8026f80 <__strftime.isra.0+0x218>
 8026f70:	f898 3000 	ldrb.w	r3, [r8]
 8026f74:	2b00      	cmp	r3, #0
 8026f76:	f000 83be 	beq.w	80276f6 <__strftime.isra.0+0x98e>
 8026f7a:	f108 0201 	add.w	r2, r8, #1
 8026f7e:	e6fc      	b.n	8026d7a <__strftime.isra.0+0x12>
 8026f80:	42a3      	cmp	r3, r4
 8026f82:	f67f af23 	bls.w	8026dcc <__strftime.isra.0+0x64>
 8026f86:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026f8a:	553a      	strb	r2, [r7, r4]
 8026f8c:	3401      	adds	r4, #1
 8026f8e:	e7ed      	b.n	8026f6c <__strftime.isra.0+0x204>
 8026f90:	69b2      	ldr	r2, [r6, #24]
 8026f92:	4b9a      	ldr	r3, [pc, #616]	; (80271fc <__strftime.isra.0+0x494>)
 8026f94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026f98:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8026f9c:	4648      	mov	r0, r9
 8026f9e:	f7d9 f959 	bl	8000254 <strlen>
 8026fa2:	f109 39ff 	add.w	r9, r9, #4294967295
 8026fa6:	4420      	add	r0, r4
 8026fa8:	1e6b      	subs	r3, r5, #1
 8026faa:	42a0      	cmp	r0, r4
 8026fac:	d0e0      	beq.n	8026f70 <__strftime.isra.0+0x208>
 8026fae:	42a3      	cmp	r3, r4
 8026fb0:	f67f af0c 	bls.w	8026dcc <__strftime.isra.0+0x64>
 8026fb4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026fb8:	553a      	strb	r2, [r7, r4]
 8026fba:	3401      	adds	r4, #1
 8026fbc:	e7f5      	b.n	8026faa <__strftime.isra.0+0x242>
 8026fbe:	4b8f      	ldr	r3, [pc, #572]	; (80271fc <__strftime.isra.0+0x494>)
 8026fc0:	6932      	ldr	r2, [r6, #16]
 8026fc2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8026fc6:	4648      	mov	r0, r9
 8026fc8:	f7d9 f944 	bl	8000254 <strlen>
 8026fcc:	f109 39ff 	add.w	r9, r9, #4294967295
 8026fd0:	4420      	add	r0, r4
 8026fd2:	1e6b      	subs	r3, r5, #1
 8026fd4:	42a0      	cmp	r0, r4
 8026fd6:	d0cb      	beq.n	8026f70 <__strftime.isra.0+0x208>
 8026fd8:	42a3      	cmp	r3, r4
 8026fda:	f67f aef7 	bls.w	8026dcc <__strftime.isra.0+0x64>
 8026fde:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026fe2:	553a      	strb	r2, [r7, r4]
 8026fe4:	3401      	adds	r4, #1
 8026fe6:	e7f5      	b.n	8026fd4 <__strftime.isra.0+0x26c>
 8026fe8:	6933      	ldr	r3, [r6, #16]
 8026fea:	4a84      	ldr	r2, [pc, #528]	; (80271fc <__strftime.isra.0+0x494>)
 8026fec:	330c      	adds	r3, #12
 8026fee:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026ff2:	4648      	mov	r0, r9
 8026ff4:	f7d9 f92e 	bl	8000254 <strlen>
 8026ff8:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ffc:	4420      	add	r0, r4
 8026ffe:	1e6b      	subs	r3, r5, #1
 8027000:	42a0      	cmp	r0, r4
 8027002:	d0b5      	beq.n	8026f70 <__strftime.isra.0+0x208>
 8027004:	42a3      	cmp	r3, r4
 8027006:	f67f aee1 	bls.w	8026dcc <__strftime.isra.0+0x64>
 802700a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802700e:	553a      	strb	r2, [r7, r4]
 8027010:	3401      	adds	r4, #1
 8027012:	e7f5      	b.n	8027000 <__strftime.isra.0+0x298>
 8027014:	4b79      	ldr	r3, [pc, #484]	; (80271fc <__strftime.isra.0+0x494>)
 8027016:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 802701a:	4648      	mov	r0, r9
 802701c:	f7d9 f91a 	bl	8000254 <strlen>
 8027020:	f899 3000 	ldrb.w	r3, [r9]
 8027024:	2b00      	cmp	r3, #0
 8027026:	d0a3      	beq.n	8026f70 <__strftime.isra.0+0x208>
 8027028:	4633      	mov	r3, r6
 802702a:	464a      	mov	r2, r9
 802702c:	1b29      	subs	r1, r5, r4
 802702e:	1938      	adds	r0, r7, r4
 8027030:	f7ff fe9a 	bl	8026d68 <__strftime.isra.0>
 8027034:	2800      	cmp	r0, #0
 8027036:	f77f aec9 	ble.w	8026dcc <__strftime.isra.0+0x64>
 802703a:	4404      	add	r4, r0
 802703c:	e798      	b.n	8026f70 <__strftime.isra.0+0x208>
 802703e:	4b6f      	ldr	r3, [pc, #444]	; (80271fc <__strftime.isra.0+0x494>)
 8027040:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8027044:	e7e9      	b.n	802701a <__strftime.isra.0+0x2b2>
 8027046:	4b6d      	ldr	r3, [pc, #436]	; (80271fc <__strftime.isra.0+0x494>)
 8027048:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 802704c:	e7e5      	b.n	802701a <__strftime.isra.0+0x2b2>
 802704e:	4b6b      	ldr	r3, [pc, #428]	; (80271fc <__strftime.isra.0+0x494>)
 8027050:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8027054:	e7e1      	b.n	802701a <__strftime.isra.0+0x2b2>
 8027056:	496a      	ldr	r1, [pc, #424]	; (8027200 <__strftime.isra.0+0x498>)
 8027058:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802705c:	458a      	cmp	sl, r1
 802705e:	bfac      	ite	ge
 8027060:	2100      	movge	r1, #0
 8027062:	2101      	movlt	r1, #1
 8027064:	f1ba 0f00 	cmp.w	sl, #0
 8027068:	db11      	blt.n	802708e <__strftime.isra.0+0x326>
 802706a:	2064      	movs	r0, #100	; 0x64
 802706c:	fb9a f0f0 	sdiv	r0, sl, r0
 8027070:	3013      	adds	r0, #19
 8027072:	f1bb 0f00 	cmp.w	fp, #0
 8027076:	d014      	beq.n	80270a2 <__strftime.isra.0+0x33a>
 8027078:	2863      	cmp	r0, #99	; 0x63
 802707a:	dd27      	ble.n	80270cc <__strftime.isra.0+0x364>
 802707c:	4b61      	ldr	r3, [pc, #388]	; (8027204 <__strftime.isra.0+0x49c>)
 802707e:	4a62      	ldr	r2, [pc, #392]	; (8027208 <__strftime.isra.0+0x4a0>)
 8027080:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8027084:	bf18      	it	ne
 8027086:	461a      	movne	r2, r3
 8027088:	f8df c198 	ldr.w	ip, [pc, #408]	; 8027224 <__strftime.isra.0+0x4bc>
 802708c:	e00c      	b.n	80270a8 <__strftime.isra.0+0x340>
 802708e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8027092:	9103      	str	r1, [sp, #12]
 8027094:	f000 ff6e 	bl	8027f74 <abs>
 8027098:	2264      	movs	r2, #100	; 0x64
 802709a:	9903      	ldr	r1, [sp, #12]
 802709c:	fb90 f0f2 	sdiv	r0, r0, r2
 80270a0:	e7e7      	b.n	8027072 <__strftime.isra.0+0x30a>
 80270a2:	4a58      	ldr	r2, [pc, #352]	; (8027204 <__strftime.isra.0+0x49c>)
 80270a4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8027228 <__strftime.isra.0+0x4c0>
 80270a8:	4b58      	ldr	r3, [pc, #352]	; (802720c <__strftime.isra.0+0x4a4>)
 80270aa:	9001      	str	r0, [sp, #4]
 80270ac:	f1b9 0f02 	cmp.w	r9, #2
 80270b0:	bf2c      	ite	cs
 80270b2:	ebc1 0109 	rsbcs	r1, r1, r9
 80270b6:	f1c1 0102 	rsbcc	r1, r1, #2
 80270ba:	9100      	str	r1, [sp, #0]
 80270bc:	4950      	ldr	r1, [pc, #320]	; (8027200 <__strftime.isra.0+0x498>)
 80270be:	458a      	cmp	sl, r1
 80270c0:	bfa8      	it	ge
 80270c2:	4613      	movge	r3, r2
 80270c4:	4662      	mov	r2, ip
 80270c6:	1b29      	subs	r1, r5, r4
 80270c8:	1938      	adds	r0, r7, r4
 80270ca:	e028      	b.n	802711e <__strftime.isra.0+0x3b6>
 80270cc:	4a4d      	ldr	r2, [pc, #308]	; (8027204 <__strftime.isra.0+0x49c>)
 80270ce:	e7db      	b.n	8027088 <__strftime.isra.0+0x320>
 80270d0:	494f      	ldr	r1, [pc, #316]	; (8027210 <__strftime.isra.0+0x4a8>)
 80270d2:	4a50      	ldr	r2, [pc, #320]	; (8027214 <__strftime.isra.0+0x4ac>)
 80270d4:	68f3      	ldr	r3, [r6, #12]
 80270d6:	2864      	cmp	r0, #100	; 0x64
 80270d8:	bf08      	it	eq
 80270da:	460a      	moveq	r2, r1
 80270dc:	1b29      	subs	r1, r5, r4
 80270de:	1938      	adds	r0, r7, r4
 80270e0:	f7ff fcee 	bl	8026ac0 <sniprintf>
 80270e4:	2800      	cmp	r0, #0
 80270e6:	f6ff ae71 	blt.w	8026dcc <__strftime.isra.0+0x64>
 80270ea:	4404      	add	r4, r0
 80270ec:	42a5      	cmp	r5, r4
 80270ee:	f63f af3f 	bhi.w	8026f70 <__strftime.isra.0+0x208>
 80270f2:	e66b      	b.n	8026dcc <__strftime.isra.0+0x64>
 80270f4:	6970      	ldr	r0, [r6, #20]
 80270f6:	6933      	ldr	r3, [r6, #16]
 80270f8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80270fc:	2800      	cmp	r0, #0
 80270fe:	eb07 0904 	add.w	r9, r7, r4
 8027102:	eba5 0104 	sub.w	r1, r5, r4
 8027106:	f103 0301 	add.w	r3, r3, #1
 802710a:	db0b      	blt.n	8027124 <__strftime.isra.0+0x3bc>
 802710c:	2264      	movs	r2, #100	; 0x64
 802710e:	fb90 fcf2 	sdiv	ip, r0, r2
 8027112:	fb02 001c 	mls	r0, r2, ip, r0
 8027116:	4a40      	ldr	r2, [pc, #256]	; (8027218 <__strftime.isra.0+0x4b0>)
 8027118:	e9cd a000 	strd	sl, r0, [sp]
 802711c:	4648      	mov	r0, r9
 802711e:	f7ff fccf 	bl	8026ac0 <sniprintf>
 8027122:	e7df      	b.n	80270e4 <__strftime.isra.0+0x37c>
 8027124:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8027128:	e9cd 1303 	strd	r1, r3, [sp, #12]
 802712c:	f000 ff22 	bl	8027f74 <abs>
 8027130:	2264      	movs	r2, #100	; 0x64
 8027132:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8027136:	fb90 fcf2 	sdiv	ip, r0, r2
 802713a:	fb0c 0012 	mls	r0, ip, r2, r0
 802713e:	e7ea      	b.n	8027116 <__strftime.isra.0+0x3ae>
 8027140:	2225      	movs	r2, #37	; 0x25
 8027142:	f88d 2018 	strb.w	r2, [sp, #24]
 8027146:	f1bb 0f00 	cmp.w	fp, #0
 802714a:	d011      	beq.n	8027170 <__strftime.isra.0+0x408>
 802714c:	f1b9 0f06 	cmp.w	r9, #6
 8027150:	bf38      	it	cc
 8027152:	f04f 0906 	movcc.w	r9, #6
 8027156:	f1b9 0306 	subs.w	r3, r9, #6
 802715a:	f88d b019 	strb.w	fp, [sp, #25]
 802715e:	d10c      	bne.n	802717a <__strftime.isra.0+0x412>
 8027160:	f10d 001a 	add.w	r0, sp, #26
 8027164:	492d      	ldr	r1, [pc, #180]	; (802721c <__strftime.isra.0+0x4b4>)
 8027166:	f7ff fd95 	bl	8026c94 <strcpy>
 802716a:	4633      	mov	r3, r6
 802716c:	aa06      	add	r2, sp, #24
 802716e:	e75d      	b.n	802702c <__strftime.isra.0+0x2c4>
 8027170:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8027174:	f04f 090a 	mov.w	r9, #10
 8027178:	e7ed      	b.n	8027156 <__strftime.isra.0+0x3ee>
 802717a:	4a29      	ldr	r2, [pc, #164]	; (8027220 <__strftime.isra.0+0x4b8>)
 802717c:	211e      	movs	r1, #30
 802717e:	f10d 001a 	add.w	r0, sp, #26
 8027182:	f7ff fc9d 	bl	8026ac0 <sniprintf>
 8027186:	2800      	cmp	r0, #0
 8027188:	ddea      	ble.n	8027160 <__strftime.isra.0+0x3f8>
 802718a:	f10d 031a 	add.w	r3, sp, #26
 802718e:	4418      	add	r0, r3
 8027190:	e7e8      	b.n	8027164 <__strftime.isra.0+0x3fc>
 8027192:	4630      	mov	r0, r6
 8027194:	f7ff fd86 	bl	8026ca4 <iso_year_adjust>
 8027198:	4681      	mov	r9, r0
 802719a:	6970      	ldr	r0, [r6, #20]
 802719c:	2800      	cmp	r0, #0
 802719e:	db11      	blt.n	80271c4 <__strftime.isra.0+0x45c>
 80271a0:	2364      	movs	r3, #100	; 0x64
 80271a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80271a6:	fb03 0012 	mls	r0, r3, r2, r0
 80271aa:	2264      	movs	r2, #100	; 0x64
 80271ac:	4481      	add	r9, r0
 80271ae:	fb99 f3f2 	sdiv	r3, r9, r2
 80271b2:	fb02 9913 	mls	r9, r2, r3, r9
 80271b6:	4491      	add	r9, r2
 80271b8:	fbb9 f3f2 	udiv	r3, r9, r2
 80271bc:	fb02 9313 	mls	r3, r2, r3, r9
 80271c0:	4a13      	ldr	r2, [pc, #76]	; (8027210 <__strftime.isra.0+0x4a8>)
 80271c2:	e78b      	b.n	80270dc <__strftime.isra.0+0x374>
 80271c4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80271c8:	f000 fed4 	bl	8027f74 <abs>
 80271cc:	2364      	movs	r3, #100	; 0x64
 80271ce:	f1b9 0f00 	cmp.w	r9, #0
 80271d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80271d6:	fb02 0013 	mls	r0, r2, r3, r0
 80271da:	da07      	bge.n	80271ec <__strftime.isra.0+0x484>
 80271dc:	6972      	ldr	r2, [r6, #20]
 80271de:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80271e2:	429a      	cmp	r2, r3
 80271e4:	bfb8      	it	lt
 80271e6:	f04f 0901 	movlt.w	r9, #1
 80271ea:	e7de      	b.n	80271aa <__strftime.isra.0+0x442>
 80271ec:	d0dd      	beq.n	80271aa <__strftime.isra.0+0x442>
 80271ee:	6972      	ldr	r2, [r6, #20]
 80271f0:	4b03      	ldr	r3, [pc, #12]	; (8027200 <__strftime.isra.0+0x498>)
 80271f2:	429a      	cmp	r2, r3
 80271f4:	bfb8      	it	lt
 80271f6:	f04f 39ff 	movlt.w	r9, #4294967295
 80271fa:	e7d6      	b.n	80271aa <__strftime.isra.0+0x442>
 80271fc:	080479dc 	.word	0x080479dc
 8027200:	fffff894 	.word	0xfffff894
 8027204:	08047b8f 	.word	0x08047b8f
 8027208:	08047864 	.word	0x08047864
 802720c:	08047dee 	.word	0x08047dee
 8027210:	08047874 	.word	0x08047874
 8027214:	08047866 	.word	0x08047866
 8027218:	0804786a 	.word	0x0804786a
 802721c:	0804787d 	.word	0x0804787d
 8027220:	08047879 	.word	0x08047879
 8027224:	0804785c 	.word	0x0804785c
 8027228:	08047855 	.word	0x08047855
 802722c:	6971      	ldr	r1, [r6, #20]
 802722e:	4ab6      	ldr	r2, [pc, #728]	; (8027508 <__strftime.isra.0+0x7a0>)
 8027230:	4291      	cmp	r1, r2
 8027232:	bfac      	ite	ge
 8027234:	2300      	movge	r3, #0
 8027236:	2301      	movlt	r3, #1
 8027238:	4630      	mov	r0, r6
 802723a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802723e:	f7ff fd31 	bl	8026ca4 <iso_year_adjust>
 8027242:	9904      	ldr	r1, [sp, #16]
 8027244:	2900      	cmp	r1, #0
 8027246:	4682      	mov	sl, r0
 8027248:	db2c      	blt.n	80272a4 <__strftime.isra.0+0x53c>
 802724a:	2264      	movs	r2, #100	; 0x64
 802724c:	fb91 f2f2 	sdiv	r2, r1, r2
 8027250:	3213      	adds	r2, #19
 8027252:	6970      	ldr	r0, [r6, #20]
 8027254:	2800      	cmp	r0, #0
 8027256:	db30      	blt.n	80272ba <__strftime.isra.0+0x552>
 8027258:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802725c:	fb90 fefc 	sdiv	lr, r0, ip
 8027260:	fb0c 001e 	mls	r0, ip, lr, r0
 8027264:	f1ba 0f00 	cmp.w	sl, #0
 8027268:	da36      	bge.n	80272d8 <__strftime.isra.0+0x570>
 802726a:	6971      	ldr	r1, [r6, #20]
 802726c:	4ba7      	ldr	r3, [pc, #668]	; (802750c <__strftime.isra.0+0x7a4>)
 802726e:	4299      	cmp	r1, r3
 8027270:	db3d      	blt.n	80272ee <__strftime.isra.0+0x586>
 8027272:	4482      	add	sl, r0
 8027274:	f1ba 3fff 	cmp.w	sl, #4294967295
 8027278:	d13e      	bne.n	80272f8 <__strftime.isra.0+0x590>
 802727a:	3a01      	subs	r2, #1
 802727c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8027280:	9b03      	ldr	r3, [sp, #12]
 8027282:	2064      	movs	r0, #100	; 0x64
 8027284:	fb00 aa02 	mla	sl, r0, r2, sl
 8027288:	2b00      	cmp	r3, #0
 802728a:	f000 81ad 	beq.w	80275e8 <__strftime.isra.0+0x880>
 802728e:	222d      	movs	r2, #45	; 0x2d
 8027290:	f88d 2018 	strb.w	r2, [sp, #24]
 8027294:	f1b9 0f00 	cmp.w	r9, #0
 8027298:	d001      	beq.n	802729e <__strftime.isra.0+0x536>
 802729a:	f109 39ff 	add.w	r9, r9, #4294967295
 802729e:	f10d 0219 	add.w	r2, sp, #25
 80272a2:	e1ac      	b.n	80275fe <__strftime.isra.0+0x896>
 80272a4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80272a8:	9104      	str	r1, [sp, #16]
 80272aa:	f000 fe63 	bl	8027f74 <abs>
 80272ae:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80272b2:	9904      	ldr	r1, [sp, #16]
 80272b4:	fb90 f2fc 	sdiv	r2, r0, ip
 80272b8:	e7cb      	b.n	8027252 <__strftime.isra.0+0x4ea>
 80272ba:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80272be:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80272c2:	f000 fe57 	bl	8027f74 <abs>
 80272c6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80272ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80272ce:	fb90 fefc 	sdiv	lr, r0, ip
 80272d2:	fb0e 001c 	mls	r0, lr, ip, r0
 80272d6:	e7c5      	b.n	8027264 <__strftime.isra.0+0x4fc>
 80272d8:	d0cb      	beq.n	8027272 <__strftime.isra.0+0x50a>
 80272da:	4b8b      	ldr	r3, [pc, #556]	; (8027508 <__strftime.isra.0+0x7a0>)
 80272dc:	4299      	cmp	r1, r3
 80272de:	bfb4      	ite	lt
 80272e0:	2301      	movlt	r3, #1
 80272e2:	2300      	movge	r3, #0
 80272e4:	9303      	str	r3, [sp, #12]
 80272e6:	bfb8      	it	lt
 80272e8:	f04f 3aff 	movlt.w	sl, #4294967295
 80272ec:	e7c1      	b.n	8027272 <__strftime.isra.0+0x50a>
 80272ee:	f04f 0a01 	mov.w	sl, #1
 80272f2:	f8cd a00c 	str.w	sl, [sp, #12]
 80272f6:	e7bc      	b.n	8027272 <__strftime.isra.0+0x50a>
 80272f8:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80272fc:	bf04      	itt	eq
 80272fe:	3201      	addeq	r2, #1
 8027300:	f04f 0a00 	moveq.w	sl, #0
 8027304:	e7bc      	b.n	8027280 <__strftime.isra.0+0x518>
 8027306:	4982      	ldr	r1, [pc, #520]	; (8027510 <__strftime.isra.0+0x7a8>)
 8027308:	4a82      	ldr	r2, [pc, #520]	; (8027514 <__strftime.isra.0+0x7ac>)
 802730a:	68b3      	ldr	r3, [r6, #8]
 802730c:	286b      	cmp	r0, #107	; 0x6b
 802730e:	bf08      	it	eq
 8027310:	460a      	moveq	r2, r1
 8027312:	e6e3      	b.n	80270dc <__strftime.isra.0+0x374>
 8027314:	68b3      	ldr	r3, [r6, #8]
 8027316:	b163      	cbz	r3, 8027332 <__strftime.isra.0+0x5ca>
 8027318:	2b0c      	cmp	r3, #12
 802731a:	d004      	beq.n	8027326 <__strftime.isra.0+0x5be>
 802731c:	210c      	movs	r1, #12
 802731e:	fb93 f2f1 	sdiv	r2, r3, r1
 8027322:	fb01 3312 	mls	r3, r1, r2, r3
 8027326:	497b      	ldr	r1, [pc, #492]	; (8027514 <__strftime.isra.0+0x7ac>)
 8027328:	4a79      	ldr	r2, [pc, #484]	; (8027510 <__strftime.isra.0+0x7a8>)
 802732a:	2849      	cmp	r0, #73	; 0x49
 802732c:	bf08      	it	eq
 802732e:	460a      	moveq	r2, r1
 8027330:	e6d4      	b.n	80270dc <__strftime.isra.0+0x374>
 8027332:	230c      	movs	r3, #12
 8027334:	e7f7      	b.n	8027326 <__strftime.isra.0+0x5be>
 8027336:	69f3      	ldr	r3, [r6, #28]
 8027338:	4a77      	ldr	r2, [pc, #476]	; (8027518 <__strftime.isra.0+0x7b0>)
 802733a:	3301      	adds	r3, #1
 802733c:	e6ce      	b.n	80270dc <__strftime.isra.0+0x374>
 802733e:	6933      	ldr	r3, [r6, #16]
 8027340:	3301      	adds	r3, #1
 8027342:	e73d      	b.n	80271c0 <__strftime.isra.0+0x458>
 8027344:	6873      	ldr	r3, [r6, #4]
 8027346:	e73b      	b.n	80271c0 <__strftime.isra.0+0x458>
 8027348:	1e6b      	subs	r3, r5, #1
 802734a:	429c      	cmp	r4, r3
 802734c:	f4bf ad3e 	bcs.w	8026dcc <__strftime.isra.0+0x64>
 8027350:	230a      	movs	r3, #10
 8027352:	553b      	strb	r3, [r7, r4]
 8027354:	3401      	adds	r4, #1
 8027356:	e60b      	b.n	8026f70 <__strftime.isra.0+0x208>
 8027358:	68b3      	ldr	r3, [r6, #8]
 802735a:	2b0b      	cmp	r3, #11
 802735c:	4b6f      	ldr	r3, [pc, #444]	; (802751c <__strftime.isra.0+0x7b4>)
 802735e:	bfd4      	ite	le
 8027360:	2200      	movle	r2, #0
 8027362:	2201      	movgt	r2, #1
 8027364:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8027368:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 802736c:	4648      	mov	r0, r9
 802736e:	f7d8 ff71 	bl	8000254 <strlen>
 8027372:	f109 32ff 	add.w	r2, r9, #4294967295
 8027376:	4420      	add	r0, r4
 8027378:	f105 3cff 	add.w	ip, r5, #4294967295
 802737c:	42a0      	cmp	r0, r4
 802737e:	f43f adf7 	beq.w	8026f70 <__strftime.isra.0+0x208>
 8027382:	45a4      	cmp	ip, r4
 8027384:	f67f ad22 	bls.w	8026dcc <__strftime.isra.0+0x64>
 8027388:	f898 1000 	ldrb.w	r1, [r8]
 802738c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8027390:	2950      	cmp	r1, #80	; 0x50
 8027392:	d107      	bne.n	80273a4 <__strftime.isra.0+0x63c>
 8027394:	4962      	ldr	r1, [pc, #392]	; (8027520 <__strftime.isra.0+0x7b8>)
 8027396:	5cc9      	ldrb	r1, [r1, r3]
 8027398:	f001 0103 	and.w	r1, r1, #3
 802739c:	2901      	cmp	r1, #1
 802739e:	bf08      	it	eq
 80273a0:	3320      	addeq	r3, #32
 80273a2:	b2db      	uxtb	r3, r3
 80273a4:	553b      	strb	r3, [r7, r4]
 80273a6:	3401      	adds	r4, #1
 80273a8:	e7e8      	b.n	802737c <__strftime.isra.0+0x614>
 80273aa:	6873      	ldr	r3, [r6, #4]
 80273ac:	9300      	str	r3, [sp, #0]
 80273ae:	4a5d      	ldr	r2, [pc, #372]	; (8027524 <__strftime.isra.0+0x7bc>)
 80273b0:	68b3      	ldr	r3, [r6, #8]
 80273b2:	1b29      	subs	r1, r5, r4
 80273b4:	1938      	adds	r0, r7, r4
 80273b6:	f7ff fb83 	bl	8026ac0 <sniprintf>
 80273ba:	e693      	b.n	80270e4 <__strftime.isra.0+0x37c>
 80273bc:	6a33      	ldr	r3, [r6, #32]
 80273be:	2b00      	cmp	r3, #0
 80273c0:	db7a      	blt.n	80274b8 <__strftime.isra.0+0x750>
 80273c2:	f000 fb73 	bl	8027aac <__tz_lock>
 80273c6:	9b02      	ldr	r3, [sp, #8]
 80273c8:	b90b      	cbnz	r3, 80273ce <__strftime.isra.0+0x666>
 80273ca:	f000 fb7b 	bl	8027ac4 <_tzset_unlocked>
 80273ce:	f001 fd77 	bl	8028ec0 <__gettzinfo>
 80273d2:	6a33      	ldr	r3, [r6, #32]
 80273d4:	2b00      	cmp	r3, #0
 80273d6:	bfd4      	ite	le
 80273d8:	2200      	movle	r2, #0
 80273da:	2201      	movgt	r2, #1
 80273dc:	2328      	movs	r3, #40	; 0x28
 80273de:	fb02 3303 	mla	r3, r2, r3, r3
 80273e2:	58c3      	ldr	r3, [r0, r3]
 80273e4:	f1c3 0900 	rsb	r9, r3, #0
 80273e8:	f000 fb66 	bl	8027ab8 <__tz_unlock>
 80273ec:	2301      	movs	r3, #1
 80273ee:	9302      	str	r3, [sp, #8]
 80273f0:	6972      	ldr	r2, [r6, #20]
 80273f2:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 80273f6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80273fa:	f16c 0c00 	sbc.w	ip, ip, #0
 80273fe:	f1bc 0f00 	cmp.w	ip, #0
 8027402:	eba5 0104 	sub.w	r1, r5, r4
 8027406:	eb07 0004 	add.w	r0, r7, r4
 802740a:	da02      	bge.n	8027412 <__strftime.isra.0+0x6aa>
 802740c:	3303      	adds	r3, #3
 802740e:	f14c 0c00 	adc.w	ip, ip, #0
 8027412:	089b      	lsrs	r3, r3, #2
 8027414:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8027418:	f102 3aff 	add.w	sl, r2, #4294967295
 802741c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8027420:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8027424:	fb9a fefe 	sdiv	lr, sl, lr
 8027428:	ebb3 030e 	subs.w	r3, r3, lr
 802742c:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8027430:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8027434:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8027438:	fb9a fefe 	sdiv	lr, sl, lr
 802743c:	eb13 030e 	adds.w	r3, r3, lr
 8027440:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8027444:	3a46      	subs	r2, #70	; 0x46
 8027446:	f240 1c6d 	movw	ip, #365	; 0x16d
 802744a:	fb0c f202 	mul.w	r2, ip, r2
 802744e:	189b      	adds	r3, r3, r2
 8027450:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8027454:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8027458:	f04f 0c18 	mov.w	ip, #24
 802745c:	eb13 030e 	adds.w	r3, r3, lr
 8027460:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027464:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027468:	fb0c e202 	mla	r2, ip, r2, lr
 802746c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8027470:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8027474:	eb13 030e 	adds.w	r3, r3, lr
 8027478:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 802747c:	fba3 320c 	umull	r3, r2, r3, ip
 8027480:	fb0c 220e 	mla	r2, ip, lr, r2
 8027484:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8027488:	eb13 030e 	adds.w	r3, r3, lr
 802748c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8027490:	fba3 3e0c 	umull	r3, lr, r3, ip
 8027494:	fb0c e202 	mla	r2, ip, r2, lr
 8027498:	f8d6 e000 	ldr.w	lr, [r6]
 802749c:	eb13 030e 	adds.w	r3, r3, lr
 80274a0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80274a4:	ebb3 0309 	subs.w	r3, r3, r9
 80274a8:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 80274ac:	e9cd 3200 	strd	r3, r2, [sp]
 80274b0:	4a1d      	ldr	r2, [pc, #116]	; (8027528 <__strftime.isra.0+0x7c0>)
 80274b2:	f7ff fb05 	bl	8026ac0 <sniprintf>
 80274b6:	e615      	b.n	80270e4 <__strftime.isra.0+0x37c>
 80274b8:	f04f 0900 	mov.w	r9, #0
 80274bc:	e798      	b.n	80273f0 <__strftime.isra.0+0x688>
 80274be:	6833      	ldr	r3, [r6, #0]
 80274c0:	e67e      	b.n	80271c0 <__strftime.isra.0+0x458>
 80274c2:	1e6b      	subs	r3, r5, #1
 80274c4:	429c      	cmp	r4, r3
 80274c6:	f4bf ac81 	bcs.w	8026dcc <__strftime.isra.0+0x64>
 80274ca:	2309      	movs	r3, #9
 80274cc:	e741      	b.n	8027352 <__strftime.isra.0+0x5ea>
 80274ce:	6833      	ldr	r3, [r6, #0]
 80274d0:	9301      	str	r3, [sp, #4]
 80274d2:	6873      	ldr	r3, [r6, #4]
 80274d4:	9300      	str	r3, [sp, #0]
 80274d6:	4a15      	ldr	r2, [pc, #84]	; (802752c <__strftime.isra.0+0x7c4>)
 80274d8:	68b3      	ldr	r3, [r6, #8]
 80274da:	e5f4      	b.n	80270c6 <__strftime.isra.0+0x35e>
 80274dc:	1e6b      	subs	r3, r5, #1
 80274de:	429c      	cmp	r4, r3
 80274e0:	f4bf ac74 	bcs.w	8026dcc <__strftime.isra.0+0x64>
 80274e4:	69b3      	ldr	r3, [r6, #24]
 80274e6:	1c62      	adds	r2, r4, #1
 80274e8:	b91b      	cbnz	r3, 80274f2 <__strftime.isra.0+0x78a>
 80274ea:	2337      	movs	r3, #55	; 0x37
 80274ec:	553b      	strb	r3, [r7, r4]
 80274ee:	4614      	mov	r4, r2
 80274f0:	e53e      	b.n	8026f70 <__strftime.isra.0+0x208>
 80274f2:	3330      	adds	r3, #48	; 0x30
 80274f4:	e7fa      	b.n	80274ec <__strftime.isra.0+0x784>
 80274f6:	69f3      	ldr	r3, [r6, #28]
 80274f8:	69b2      	ldr	r2, [r6, #24]
 80274fa:	3307      	adds	r3, #7
 80274fc:	1a9b      	subs	r3, r3, r2
 80274fe:	2207      	movs	r2, #7
 8027500:	fb93 f3f2 	sdiv	r3, r3, r2
 8027504:	e65c      	b.n	80271c0 <__strftime.isra.0+0x458>
 8027506:	bf00      	nop
 8027508:	fffff894 	.word	0xfffff894
 802750c:	fffff895 	.word	0xfffff895
 8027510:	08047866 	.word	0x08047866
 8027514:	08047874 	.word	0x08047874
 8027518:	08047889 	.word	0x08047889
 802751c:	080479dc 	.word	0x080479dc
 8027520:	0804752d 	.word	0x0804752d
 8027524:	08047898 	.word	0x08047898
 8027528:	0804788e 	.word	0x0804788e
 802752c:	08047893 	.word	0x08047893
 8027530:	4630      	mov	r0, r6
 8027532:	f7ff fbb7 	bl	8026ca4 <iso_year_adjust>
 8027536:	69b2      	ldr	r2, [r6, #24]
 8027538:	b132      	cbz	r2, 8027548 <__strftime.isra.0+0x7e0>
 802753a:	3a01      	subs	r2, #1
 802753c:	2800      	cmp	r0, #0
 802753e:	dc28      	bgt.n	8027592 <__strftime.isra.0+0x82a>
 8027540:	69f3      	ldr	r3, [r6, #28]
 8027542:	d103      	bne.n	802754c <__strftime.isra.0+0x7e4>
 8027544:	330a      	adds	r3, #10
 8027546:	e7d9      	b.n	80274fc <__strftime.isra.0+0x794>
 8027548:	2206      	movs	r2, #6
 802754a:	e7f7      	b.n	802753c <__strftime.isra.0+0x7d4>
 802754c:	6971      	ldr	r1, [r6, #20]
 802754e:	2900      	cmp	r1, #0
 8027550:	eba2 0203 	sub.w	r2, r2, r3
 8027554:	f240 736b 	movw	r3, #1899	; 0x76b
 8027558:	bfa8      	it	ge
 802755a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 802755e:	440b      	add	r3, r1
 8027560:	0799      	lsls	r1, r3, #30
 8027562:	d105      	bne.n	8027570 <__strftime.isra.0+0x808>
 8027564:	2064      	movs	r0, #100	; 0x64
 8027566:	fb93 f1f0 	sdiv	r1, r3, r0
 802756a:	fb00 3111 	mls	r1, r0, r1, r3
 802756e:	b971      	cbnz	r1, 802758e <__strftime.isra.0+0x826>
 8027570:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8027574:	fb93 f0f1 	sdiv	r0, r3, r1
 8027578:	fb01 3310 	mls	r3, r1, r0, r3
 802757c:	fab3 f383 	clz	r3, r3
 8027580:	095b      	lsrs	r3, r3, #5
 8027582:	1ad3      	subs	r3, r2, r3
 8027584:	2b05      	cmp	r3, #5
 8027586:	bfb4      	ite	lt
 8027588:	2335      	movlt	r3, #53	; 0x35
 802758a:	2334      	movge	r3, #52	; 0x34
 802758c:	e618      	b.n	80271c0 <__strftime.isra.0+0x458>
 802758e:	2301      	movs	r3, #1
 8027590:	e7f7      	b.n	8027582 <__strftime.isra.0+0x81a>
 8027592:	2301      	movs	r3, #1
 8027594:	e614      	b.n	80271c0 <__strftime.isra.0+0x458>
 8027596:	1e6b      	subs	r3, r5, #1
 8027598:	429c      	cmp	r4, r3
 802759a:	f4bf ac17 	bcs.w	8026dcc <__strftime.isra.0+0x64>
 802759e:	69b3      	ldr	r3, [r6, #24]
 80275a0:	3330      	adds	r3, #48	; 0x30
 80275a2:	e6d6      	b.n	8027352 <__strftime.isra.0+0x5ea>
 80275a4:	69b2      	ldr	r2, [r6, #24]
 80275a6:	b11a      	cbz	r2, 80275b0 <__strftime.isra.0+0x848>
 80275a8:	3a01      	subs	r2, #1
 80275aa:	69f3      	ldr	r3, [r6, #28]
 80275ac:	3307      	adds	r3, #7
 80275ae:	e7a5      	b.n	80274fc <__strftime.isra.0+0x794>
 80275b0:	2206      	movs	r2, #6
 80275b2:	e7fa      	b.n	80275aa <__strftime.isra.0+0x842>
 80275b4:	6970      	ldr	r0, [r6, #20]
 80275b6:	2800      	cmp	r0, #0
 80275b8:	db05      	blt.n	80275c6 <__strftime.isra.0+0x85e>
 80275ba:	2364      	movs	r3, #100	; 0x64
 80275bc:	fb90 f2f3 	sdiv	r2, r0, r3
 80275c0:	fb02 0313 	mls	r3, r2, r3, r0
 80275c4:	e5fc      	b.n	80271c0 <__strftime.isra.0+0x458>
 80275c6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80275ca:	f000 fcd3 	bl	8027f74 <abs>
 80275ce:	e7f4      	b.n	80275ba <__strftime.isra.0+0x852>
 80275d0:	6972      	ldr	r2, [r6, #20]
 80275d2:	494c      	ldr	r1, [pc, #304]	; (8027704 <__strftime.isra.0+0x99c>)
 80275d4:	428a      	cmp	r2, r1
 80275d6:	da05      	bge.n	80275e4 <__strftime.isra.0+0x87c>
 80275d8:	202d      	movs	r0, #45	; 0x2d
 80275da:	f88d 0018 	strb.w	r0, [sp, #24]
 80275de:	eba1 0a02 	sub.w	sl, r1, r2
 80275e2:	e657      	b.n	8027294 <__strftime.isra.0+0x52c>
 80275e4:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 80275e8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80275ec:	d106      	bne.n	80275fc <__strftime.isra.0+0x894>
 80275ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80275f2:	4592      	cmp	sl, r2
 80275f4:	d902      	bls.n	80275fc <__strftime.isra.0+0x894>
 80275f6:	f88d b018 	strb.w	fp, [sp, #24]
 80275fa:	e64b      	b.n	8027294 <__strftime.isra.0+0x52c>
 80275fc:	aa06      	add	r2, sp, #24
 80275fe:	2125      	movs	r1, #37	; 0x25
 8027600:	7011      	strb	r1, [r2, #0]
 8027602:	f1bb 0f00 	cmp.w	fp, #0
 8027606:	d108      	bne.n	802761a <__strftime.isra.0+0x8b2>
 8027608:	1c50      	adds	r0, r2, #1
 802760a:	493f      	ldr	r1, [pc, #252]	; (8027708 <__strftime.isra.0+0x9a0>)
 802760c:	f7ff fb42 	bl	8026c94 <strcpy>
 8027610:	f8cd a000 	str.w	sl, [sp]
 8027614:	464b      	mov	r3, r9
 8027616:	aa06      	add	r2, sp, #24
 8027618:	e6cb      	b.n	80273b2 <__strftime.isra.0+0x64a>
 802761a:	2330      	movs	r3, #48	; 0x30
 802761c:	1c90      	adds	r0, r2, #2
 802761e:	7053      	strb	r3, [r2, #1]
 8027620:	e7f3      	b.n	802760a <__strftime.isra.0+0x8a2>
 8027622:	6a33      	ldr	r3, [r6, #32]
 8027624:	2b00      	cmp	r3, #0
 8027626:	f6ff aca3 	blt.w	8026f70 <__strftime.isra.0+0x208>
 802762a:	f000 fa3f 	bl	8027aac <__tz_lock>
 802762e:	9b02      	ldr	r3, [sp, #8]
 8027630:	b90b      	cbnz	r3, 8027636 <__strftime.isra.0+0x8ce>
 8027632:	f000 fa47 	bl	8027ac4 <_tzset_unlocked>
 8027636:	f001 fc43 	bl	8028ec0 <__gettzinfo>
 802763a:	6a33      	ldr	r3, [r6, #32]
 802763c:	2b00      	cmp	r3, #0
 802763e:	bfd4      	ite	le
 8027640:	2200      	movle	r2, #0
 8027642:	2201      	movgt	r2, #1
 8027644:	2328      	movs	r3, #40	; 0x28
 8027646:	fb02 3303 	mla	r3, r2, r3, r3
 802764a:	eb07 0a04 	add.w	sl, r7, r4
 802764e:	58c3      	ldr	r3, [r0, r3]
 8027650:	f1c3 0900 	rsb	r9, r3, #0
 8027654:	f000 fa30 	bl	8027ab8 <__tz_unlock>
 8027658:	233c      	movs	r3, #60	; 0x3c
 802765a:	fb99 f0f3 	sdiv	r0, r9, r3
 802765e:	f001 fcdf 	bl	8029020 <labs>
 8027662:	233c      	movs	r3, #60	; 0x3c
 8027664:	eba5 0b04 	sub.w	fp, r5, r4
 8027668:	fb90 f2f3 	sdiv	r2, r0, r3
 802766c:	fb02 0013 	mls	r0, r2, r3, r0
 8027670:	9000      	str	r0, [sp, #0]
 8027672:	4a26      	ldr	r2, [pc, #152]	; (802770c <__strftime.isra.0+0x9a4>)
 8027674:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8027678:	4659      	mov	r1, fp
 802767a:	4650      	mov	r0, sl
 802767c:	fb99 f3f3 	sdiv	r3, r9, r3
 8027680:	f7ff fa1e 	bl	8026ac0 <sniprintf>
 8027684:	2800      	cmp	r0, #0
 8027686:	f6ff aba1 	blt.w	8026dcc <__strftime.isra.0+0x64>
 802768a:	4404      	add	r4, r0
 802768c:	42a5      	cmp	r5, r4
 802768e:	f67f ab9d 	bls.w	8026dcc <__strftime.isra.0+0x64>
 8027692:	2301      	movs	r3, #1
 8027694:	9302      	str	r3, [sp, #8]
 8027696:	e46b      	b.n	8026f70 <__strftime.isra.0+0x208>
 8027698:	6a33      	ldr	r3, [r6, #32]
 802769a:	2b00      	cmp	r3, #0
 802769c:	f6ff ac68 	blt.w	8026f70 <__strftime.isra.0+0x208>
 80276a0:	f000 fa04 	bl	8027aac <__tz_lock>
 80276a4:	9b02      	ldr	r3, [sp, #8]
 80276a6:	b90b      	cbnz	r3, 80276ac <__strftime.isra.0+0x944>
 80276a8:	f000 fa0c 	bl	8027ac4 <_tzset_unlocked>
 80276ac:	6a33      	ldr	r3, [r6, #32]
 80276ae:	4a18      	ldr	r2, [pc, #96]	; (8027710 <__strftime.isra.0+0x9a8>)
 80276b0:	2b00      	cmp	r3, #0
 80276b2:	bfd4      	ite	le
 80276b4:	2300      	movle	r3, #0
 80276b6:	2301      	movgt	r3, #1
 80276b8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80276bc:	4648      	mov	r0, r9
 80276be:	f7d8 fdc9 	bl	8000254 <strlen>
 80276c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80276c6:	4420      	add	r0, r4
 80276c8:	1e6b      	subs	r3, r5, #1
 80276ca:	42a0      	cmp	r0, r4
 80276cc:	d102      	bne.n	80276d4 <__strftime.isra.0+0x96c>
 80276ce:	f000 f9f3 	bl	8027ab8 <__tz_unlock>
 80276d2:	e7de      	b.n	8027692 <__strftime.isra.0+0x92a>
 80276d4:	42a3      	cmp	r3, r4
 80276d6:	d904      	bls.n	80276e2 <__strftime.isra.0+0x97a>
 80276d8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80276dc:	553a      	strb	r2, [r7, r4]
 80276de:	3401      	adds	r4, #1
 80276e0:	e7f3      	b.n	80276ca <__strftime.isra.0+0x962>
 80276e2:	f000 f9e9 	bl	8027ab8 <__tz_unlock>
 80276e6:	f7ff bb71 	b.w	8026dcc <__strftime.isra.0+0x64>
 80276ea:	1e6b      	subs	r3, r5, #1
 80276ec:	429c      	cmp	r4, r3
 80276ee:	f4bf ab6d 	bcs.w	8026dcc <__strftime.isra.0+0x64>
 80276f2:	2325      	movs	r3, #37	; 0x25
 80276f4:	e62d      	b.n	8027352 <__strftime.isra.0+0x5ea>
 80276f6:	b10d      	cbz	r5, 80276fc <__strftime.isra.0+0x994>
 80276f8:	2300      	movs	r3, #0
 80276fa:	553b      	strb	r3, [r7, r4]
 80276fc:	4620      	mov	r0, r4
 80276fe:	b00f      	add	sp, #60	; 0x3c
 8027700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027704:	fffff894 	.word	0xfffff894
 8027708:	08047885 	.word	0x08047885
 802770c:	080478a2 	.word	0x080478a2
 8027710:	20000508 	.word	0x20000508

08027714 <strftime>:
 8027714:	f7ff bb28 	b.w	8026d68 <__strftime.isra.0>

08027718 <strncmp>:
 8027718:	b510      	push	{r4, lr}
 802771a:	b17a      	cbz	r2, 802773c <strncmp+0x24>
 802771c:	4603      	mov	r3, r0
 802771e:	3901      	subs	r1, #1
 8027720:	1884      	adds	r4, r0, r2
 8027722:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027726:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802772a:	4290      	cmp	r0, r2
 802772c:	d101      	bne.n	8027732 <strncmp+0x1a>
 802772e:	42a3      	cmp	r3, r4
 8027730:	d101      	bne.n	8027736 <strncmp+0x1e>
 8027732:	1a80      	subs	r0, r0, r2
 8027734:	bd10      	pop	{r4, pc}
 8027736:	2800      	cmp	r0, #0
 8027738:	d1f3      	bne.n	8027722 <strncmp+0xa>
 802773a:	e7fa      	b.n	8027732 <strncmp+0x1a>
 802773c:	4610      	mov	r0, r2
 802773e:	e7f9      	b.n	8027734 <strncmp+0x1c>

08027740 <_strtol_l.constprop.0>:
 8027740:	2b01      	cmp	r3, #1
 8027742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027746:	d001      	beq.n	802774c <_strtol_l.constprop.0+0xc>
 8027748:	2b24      	cmp	r3, #36	; 0x24
 802774a:	d906      	bls.n	802775a <_strtol_l.constprop.0+0x1a>
 802774c:	f001 fa9a 	bl	8028c84 <__errno>
 8027750:	2316      	movs	r3, #22
 8027752:	6003      	str	r3, [r0, #0]
 8027754:	2000      	movs	r0, #0
 8027756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802775a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8027840 <_strtol_l.constprop.0+0x100>
 802775e:	460d      	mov	r5, r1
 8027760:	462e      	mov	r6, r5
 8027762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027766:	f814 700c 	ldrb.w	r7, [r4, ip]
 802776a:	f017 0708 	ands.w	r7, r7, #8
 802776e:	d1f7      	bne.n	8027760 <_strtol_l.constprop.0+0x20>
 8027770:	2c2d      	cmp	r4, #45	; 0x2d
 8027772:	d132      	bne.n	80277da <_strtol_l.constprop.0+0x9a>
 8027774:	782c      	ldrb	r4, [r5, #0]
 8027776:	2701      	movs	r7, #1
 8027778:	1cb5      	adds	r5, r6, #2
 802777a:	2b00      	cmp	r3, #0
 802777c:	d05b      	beq.n	8027836 <_strtol_l.constprop.0+0xf6>
 802777e:	2b10      	cmp	r3, #16
 8027780:	d109      	bne.n	8027796 <_strtol_l.constprop.0+0x56>
 8027782:	2c30      	cmp	r4, #48	; 0x30
 8027784:	d107      	bne.n	8027796 <_strtol_l.constprop.0+0x56>
 8027786:	782c      	ldrb	r4, [r5, #0]
 8027788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802778c:	2c58      	cmp	r4, #88	; 0x58
 802778e:	d14d      	bne.n	802782c <_strtol_l.constprop.0+0xec>
 8027790:	786c      	ldrb	r4, [r5, #1]
 8027792:	2310      	movs	r3, #16
 8027794:	3502      	adds	r5, #2
 8027796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802779a:	f108 38ff 	add.w	r8, r8, #4294967295
 802779e:	f04f 0c00 	mov.w	ip, #0
 80277a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80277a6:	4666      	mov	r6, ip
 80277a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80277ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80277b0:	f1be 0f09 	cmp.w	lr, #9
 80277b4:	d816      	bhi.n	80277e4 <_strtol_l.constprop.0+0xa4>
 80277b6:	4674      	mov	r4, lr
 80277b8:	42a3      	cmp	r3, r4
 80277ba:	dd24      	ble.n	8027806 <_strtol_l.constprop.0+0xc6>
 80277bc:	f1bc 0f00 	cmp.w	ip, #0
 80277c0:	db1e      	blt.n	8027800 <_strtol_l.constprop.0+0xc0>
 80277c2:	45b1      	cmp	r9, r6
 80277c4:	d31c      	bcc.n	8027800 <_strtol_l.constprop.0+0xc0>
 80277c6:	d101      	bne.n	80277cc <_strtol_l.constprop.0+0x8c>
 80277c8:	45a2      	cmp	sl, r4
 80277ca:	db19      	blt.n	8027800 <_strtol_l.constprop.0+0xc0>
 80277cc:	fb06 4603 	mla	r6, r6, r3, r4
 80277d0:	f04f 0c01 	mov.w	ip, #1
 80277d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80277d8:	e7e8      	b.n	80277ac <_strtol_l.constprop.0+0x6c>
 80277da:	2c2b      	cmp	r4, #43	; 0x2b
 80277dc:	bf04      	itt	eq
 80277de:	782c      	ldrbeq	r4, [r5, #0]
 80277e0:	1cb5      	addeq	r5, r6, #2
 80277e2:	e7ca      	b.n	802777a <_strtol_l.constprop.0+0x3a>
 80277e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80277e8:	f1be 0f19 	cmp.w	lr, #25
 80277ec:	d801      	bhi.n	80277f2 <_strtol_l.constprop.0+0xb2>
 80277ee:	3c37      	subs	r4, #55	; 0x37
 80277f0:	e7e2      	b.n	80277b8 <_strtol_l.constprop.0+0x78>
 80277f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80277f6:	f1be 0f19 	cmp.w	lr, #25
 80277fa:	d804      	bhi.n	8027806 <_strtol_l.constprop.0+0xc6>
 80277fc:	3c57      	subs	r4, #87	; 0x57
 80277fe:	e7db      	b.n	80277b8 <_strtol_l.constprop.0+0x78>
 8027800:	f04f 3cff 	mov.w	ip, #4294967295
 8027804:	e7e6      	b.n	80277d4 <_strtol_l.constprop.0+0x94>
 8027806:	f1bc 0f00 	cmp.w	ip, #0
 802780a:	da05      	bge.n	8027818 <_strtol_l.constprop.0+0xd8>
 802780c:	2322      	movs	r3, #34	; 0x22
 802780e:	6003      	str	r3, [r0, #0]
 8027810:	4646      	mov	r6, r8
 8027812:	b942      	cbnz	r2, 8027826 <_strtol_l.constprop.0+0xe6>
 8027814:	4630      	mov	r0, r6
 8027816:	e79e      	b.n	8027756 <_strtol_l.constprop.0+0x16>
 8027818:	b107      	cbz	r7, 802781c <_strtol_l.constprop.0+0xdc>
 802781a:	4276      	negs	r6, r6
 802781c:	2a00      	cmp	r2, #0
 802781e:	d0f9      	beq.n	8027814 <_strtol_l.constprop.0+0xd4>
 8027820:	f1bc 0f00 	cmp.w	ip, #0
 8027824:	d000      	beq.n	8027828 <_strtol_l.constprop.0+0xe8>
 8027826:	1e69      	subs	r1, r5, #1
 8027828:	6011      	str	r1, [r2, #0]
 802782a:	e7f3      	b.n	8027814 <_strtol_l.constprop.0+0xd4>
 802782c:	2430      	movs	r4, #48	; 0x30
 802782e:	2b00      	cmp	r3, #0
 8027830:	d1b1      	bne.n	8027796 <_strtol_l.constprop.0+0x56>
 8027832:	2308      	movs	r3, #8
 8027834:	e7af      	b.n	8027796 <_strtol_l.constprop.0+0x56>
 8027836:	2c30      	cmp	r4, #48	; 0x30
 8027838:	d0a5      	beq.n	8027786 <_strtol_l.constprop.0+0x46>
 802783a:	230a      	movs	r3, #10
 802783c:	e7ab      	b.n	8027796 <_strtol_l.constprop.0+0x56>
 802783e:	bf00      	nop
 8027840:	0804752d 	.word	0x0804752d

08027844 <_strtol_r>:
 8027844:	f7ff bf7c 	b.w	8027740 <_strtol_l.constprop.0>

08027848 <strtol>:
 8027848:	4613      	mov	r3, r2
 802784a:	460a      	mov	r2, r1
 802784c:	4601      	mov	r1, r0
 802784e:	4802      	ldr	r0, [pc, #8]	; (8027858 <strtol+0x10>)
 8027850:	6800      	ldr	r0, [r0, #0]
 8027852:	f7ff bf75 	b.w	8027740 <_strtol_l.constprop.0>
 8027856:	bf00      	nop
 8027858:	200004a4 	.word	0x200004a4

0802785c <_strtoul_l.constprop.0>:
 802785c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027860:	4f36      	ldr	r7, [pc, #216]	; (802793c <_strtoul_l.constprop.0+0xe0>)
 8027862:	4686      	mov	lr, r0
 8027864:	460d      	mov	r5, r1
 8027866:	4628      	mov	r0, r5
 8027868:	f815 4b01 	ldrb.w	r4, [r5], #1
 802786c:	5de6      	ldrb	r6, [r4, r7]
 802786e:	f016 0608 	ands.w	r6, r6, #8
 8027872:	d1f8      	bne.n	8027866 <_strtoul_l.constprop.0+0xa>
 8027874:	2c2d      	cmp	r4, #45	; 0x2d
 8027876:	d12f      	bne.n	80278d8 <_strtoul_l.constprop.0+0x7c>
 8027878:	782c      	ldrb	r4, [r5, #0]
 802787a:	2601      	movs	r6, #1
 802787c:	1c85      	adds	r5, r0, #2
 802787e:	2b00      	cmp	r3, #0
 8027880:	d057      	beq.n	8027932 <_strtoul_l.constprop.0+0xd6>
 8027882:	2b10      	cmp	r3, #16
 8027884:	d109      	bne.n	802789a <_strtoul_l.constprop.0+0x3e>
 8027886:	2c30      	cmp	r4, #48	; 0x30
 8027888:	d107      	bne.n	802789a <_strtoul_l.constprop.0+0x3e>
 802788a:	7828      	ldrb	r0, [r5, #0]
 802788c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027890:	2858      	cmp	r0, #88	; 0x58
 8027892:	d149      	bne.n	8027928 <_strtoul_l.constprop.0+0xcc>
 8027894:	786c      	ldrb	r4, [r5, #1]
 8027896:	2310      	movs	r3, #16
 8027898:	3502      	adds	r5, #2
 802789a:	f04f 38ff 	mov.w	r8, #4294967295
 802789e:	2700      	movs	r7, #0
 80278a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80278a4:	fb03 f908 	mul.w	r9, r3, r8
 80278a8:	ea6f 0909 	mvn.w	r9, r9
 80278ac:	4638      	mov	r0, r7
 80278ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80278b2:	f1bc 0f09 	cmp.w	ip, #9
 80278b6:	d814      	bhi.n	80278e2 <_strtoul_l.constprop.0+0x86>
 80278b8:	4664      	mov	r4, ip
 80278ba:	42a3      	cmp	r3, r4
 80278bc:	dd22      	ble.n	8027904 <_strtoul_l.constprop.0+0xa8>
 80278be:	2f00      	cmp	r7, #0
 80278c0:	db1d      	blt.n	80278fe <_strtoul_l.constprop.0+0xa2>
 80278c2:	4580      	cmp	r8, r0
 80278c4:	d31b      	bcc.n	80278fe <_strtoul_l.constprop.0+0xa2>
 80278c6:	d101      	bne.n	80278cc <_strtoul_l.constprop.0+0x70>
 80278c8:	45a1      	cmp	r9, r4
 80278ca:	db18      	blt.n	80278fe <_strtoul_l.constprop.0+0xa2>
 80278cc:	fb00 4003 	mla	r0, r0, r3, r4
 80278d0:	2701      	movs	r7, #1
 80278d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80278d6:	e7ea      	b.n	80278ae <_strtoul_l.constprop.0+0x52>
 80278d8:	2c2b      	cmp	r4, #43	; 0x2b
 80278da:	bf04      	itt	eq
 80278dc:	782c      	ldrbeq	r4, [r5, #0]
 80278de:	1c85      	addeq	r5, r0, #2
 80278e0:	e7cd      	b.n	802787e <_strtoul_l.constprop.0+0x22>
 80278e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80278e6:	f1bc 0f19 	cmp.w	ip, #25
 80278ea:	d801      	bhi.n	80278f0 <_strtoul_l.constprop.0+0x94>
 80278ec:	3c37      	subs	r4, #55	; 0x37
 80278ee:	e7e4      	b.n	80278ba <_strtoul_l.constprop.0+0x5e>
 80278f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80278f4:	f1bc 0f19 	cmp.w	ip, #25
 80278f8:	d804      	bhi.n	8027904 <_strtoul_l.constprop.0+0xa8>
 80278fa:	3c57      	subs	r4, #87	; 0x57
 80278fc:	e7dd      	b.n	80278ba <_strtoul_l.constprop.0+0x5e>
 80278fe:	f04f 37ff 	mov.w	r7, #4294967295
 8027902:	e7e6      	b.n	80278d2 <_strtoul_l.constprop.0+0x76>
 8027904:	2f00      	cmp	r7, #0
 8027906:	da07      	bge.n	8027918 <_strtoul_l.constprop.0+0xbc>
 8027908:	2322      	movs	r3, #34	; 0x22
 802790a:	f8ce 3000 	str.w	r3, [lr]
 802790e:	f04f 30ff 	mov.w	r0, #4294967295
 8027912:	b932      	cbnz	r2, 8027922 <_strtoul_l.constprop.0+0xc6>
 8027914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027918:	b106      	cbz	r6, 802791c <_strtoul_l.constprop.0+0xc0>
 802791a:	4240      	negs	r0, r0
 802791c:	2a00      	cmp	r2, #0
 802791e:	d0f9      	beq.n	8027914 <_strtoul_l.constprop.0+0xb8>
 8027920:	b107      	cbz	r7, 8027924 <_strtoul_l.constprop.0+0xc8>
 8027922:	1e69      	subs	r1, r5, #1
 8027924:	6011      	str	r1, [r2, #0]
 8027926:	e7f5      	b.n	8027914 <_strtoul_l.constprop.0+0xb8>
 8027928:	2430      	movs	r4, #48	; 0x30
 802792a:	2b00      	cmp	r3, #0
 802792c:	d1b5      	bne.n	802789a <_strtoul_l.constprop.0+0x3e>
 802792e:	2308      	movs	r3, #8
 8027930:	e7b3      	b.n	802789a <_strtoul_l.constprop.0+0x3e>
 8027932:	2c30      	cmp	r4, #48	; 0x30
 8027934:	d0a9      	beq.n	802788a <_strtoul_l.constprop.0+0x2e>
 8027936:	230a      	movs	r3, #10
 8027938:	e7af      	b.n	802789a <_strtoul_l.constprop.0+0x3e>
 802793a:	bf00      	nop
 802793c:	0804752d 	.word	0x0804752d

08027940 <_strtoul_r>:
 8027940:	f7ff bf8c 	b.w	802785c <_strtoul_l.constprop.0>

08027944 <strtoul>:
 8027944:	4613      	mov	r3, r2
 8027946:	460a      	mov	r2, r1
 8027948:	4601      	mov	r1, r0
 802794a:	4802      	ldr	r0, [pc, #8]	; (8027954 <strtoul+0x10>)
 802794c:	6800      	ldr	r0, [r0, #0]
 802794e:	f7ff bf85 	b.w	802785c <_strtoul_l.constprop.0>
 8027952:	bf00      	nop
 8027954:	200004a4 	.word	0x200004a4

08027958 <__tzcalc_limits>:
 8027958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802795c:	4605      	mov	r5, r0
 802795e:	f001 faaf 	bl	8028ec0 <__gettzinfo>
 8027962:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8027966:	429d      	cmp	r5, r3
 8027968:	f340 8099 	ble.w	8027a9e <__tzcalc_limits+0x146>
 802796c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8027970:	18ac      	adds	r4, r5, r2
 8027972:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8027976:	f240 126d 	movw	r2, #365	; 0x16d
 802797a:	10a4      	asrs	r4, r4, #2
 802797c:	fb02 4403 	mla	r4, r2, r3, r4
 8027980:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8027984:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8027988:	fb93 f3f2 	sdiv	r3, r3, r2
 802798c:	441c      	add	r4, r3
 802798e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8027992:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8027996:	fb95 fcf3 	sdiv	ip, r5, r3
 802799a:	fb03 5c1c 	mls	ip, r3, ip, r5
 802799e:	186a      	adds	r2, r5, r1
 80279a0:	fabc f68c 	clz	r6, ip
 80279a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80279a8:	f005 0303 	and.w	r3, r5, #3
 80279ac:	4414      	add	r4, r2
 80279ae:	2264      	movs	r2, #100	; 0x64
 80279b0:	6045      	str	r5, [r0, #4]
 80279b2:	fb95 f7f2 	sdiv	r7, r5, r2
 80279b6:	0976      	lsrs	r6, r6, #5
 80279b8:	fb02 5717 	mls	r7, r2, r7, r5
 80279bc:	4601      	mov	r1, r0
 80279be:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80279c2:	9300      	str	r3, [sp, #0]
 80279c4:	f04f 0a07 	mov.w	sl, #7
 80279c8:	7a0d      	ldrb	r5, [r1, #8]
 80279ca:	694b      	ldr	r3, [r1, #20]
 80279cc:	2d4a      	cmp	r5, #74	; 0x4a
 80279ce:	d12d      	bne.n	8027a2c <__tzcalc_limits+0xd4>
 80279d0:	9a00      	ldr	r2, [sp, #0]
 80279d2:	eb04 0e03 	add.w	lr, r4, r3
 80279d6:	b902      	cbnz	r2, 80279da <__tzcalc_limits+0x82>
 80279d8:	b917      	cbnz	r7, 80279e0 <__tzcalc_limits+0x88>
 80279da:	f1bc 0f00 	cmp.w	ip, #0
 80279de:	d123      	bne.n	8027a28 <__tzcalc_limits+0xd0>
 80279e0:	2b3b      	cmp	r3, #59	; 0x3b
 80279e2:	bfd4      	ite	le
 80279e4:	2300      	movle	r3, #0
 80279e6:	2301      	movgt	r3, #1
 80279e8:	4473      	add	r3, lr
 80279ea:	3b01      	subs	r3, #1
 80279ec:	698d      	ldr	r5, [r1, #24]
 80279ee:	4a2d      	ldr	r2, [pc, #180]	; (8027aa4 <__tzcalc_limits+0x14c>)
 80279f0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80279f4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80279f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80279fa:	18ed      	adds	r5, r5, r3
 80279fc:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8027a00:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8027a04:	3128      	adds	r1, #40	; 0x28
 8027a06:	458b      	cmp	fp, r1
 8027a08:	d1de      	bne.n	80279c8 <__tzcalc_limits+0x70>
 8027a0a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8027a0e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8027a12:	428c      	cmp	r4, r1
 8027a14:	eb72 0303 	sbcs.w	r3, r2, r3
 8027a18:	bfb4      	ite	lt
 8027a1a:	2301      	movlt	r3, #1
 8027a1c:	2300      	movge	r3, #0
 8027a1e:	6003      	str	r3, [r0, #0]
 8027a20:	2001      	movs	r0, #1
 8027a22:	b003      	add	sp, #12
 8027a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a28:	2300      	movs	r3, #0
 8027a2a:	e7dd      	b.n	80279e8 <__tzcalc_limits+0x90>
 8027a2c:	2d44      	cmp	r5, #68	; 0x44
 8027a2e:	d101      	bne.n	8027a34 <__tzcalc_limits+0xdc>
 8027a30:	4423      	add	r3, r4
 8027a32:	e7db      	b.n	80279ec <__tzcalc_limits+0x94>
 8027a34:	9a00      	ldr	r2, [sp, #0]
 8027a36:	bb62      	cbnz	r2, 8027a92 <__tzcalc_limits+0x13a>
 8027a38:	2f00      	cmp	r7, #0
 8027a3a:	bf0c      	ite	eq
 8027a3c:	4635      	moveq	r5, r6
 8027a3e:	2501      	movne	r5, #1
 8027a40:	68ca      	ldr	r2, [r1, #12]
 8027a42:	9201      	str	r2, [sp, #4]
 8027a44:	4a18      	ldr	r2, [pc, #96]	; (8027aa8 <__tzcalc_limits+0x150>)
 8027a46:	f04f 0930 	mov.w	r9, #48	; 0x30
 8027a4a:	fb09 2505 	mla	r5, r9, r5, r2
 8027a4e:	46a6      	mov	lr, r4
 8027a50:	f04f 0800 	mov.w	r8, #0
 8027a54:	3d04      	subs	r5, #4
 8027a56:	9a01      	ldr	r2, [sp, #4]
 8027a58:	f108 0801 	add.w	r8, r8, #1
 8027a5c:	4542      	cmp	r2, r8
 8027a5e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8027a62:	dc18      	bgt.n	8027a96 <__tzcalc_limits+0x13e>
 8027a64:	f10e 0504 	add.w	r5, lr, #4
 8027a68:	fb95 f8fa 	sdiv	r8, r5, sl
 8027a6c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8027a70:	eba5 0808 	sub.w	r8, r5, r8
 8027a74:	ebb3 0808 	subs.w	r8, r3, r8
 8027a78:	690b      	ldr	r3, [r1, #16]
 8027a7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8027a7e:	bf48      	it	mi
 8027a80:	f108 0807 	addmi.w	r8, r8, #7
 8027a84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8027a88:	4443      	add	r3, r8
 8027a8a:	454b      	cmp	r3, r9
 8027a8c:	da05      	bge.n	8027a9a <__tzcalc_limits+0x142>
 8027a8e:	4473      	add	r3, lr
 8027a90:	e7ac      	b.n	80279ec <__tzcalc_limits+0x94>
 8027a92:	4635      	mov	r5, r6
 8027a94:	e7d4      	b.n	8027a40 <__tzcalc_limits+0xe8>
 8027a96:	44ce      	add	lr, r9
 8027a98:	e7dd      	b.n	8027a56 <__tzcalc_limits+0xfe>
 8027a9a:	3b07      	subs	r3, #7
 8027a9c:	e7f5      	b.n	8027a8a <__tzcalc_limits+0x132>
 8027a9e:	2000      	movs	r0, #0
 8027aa0:	e7bf      	b.n	8027a22 <__tzcalc_limits+0xca>
 8027aa2:	bf00      	nop
 8027aa4:	00015180 	.word	0x00015180
 8027aa8:	08047768 	.word	0x08047768

08027aac <__tz_lock>:
 8027aac:	4801      	ldr	r0, [pc, #4]	; (8027ab4 <__tz_lock+0x8>)
 8027aae:	f7fd be66 	b.w	802577e <__retarget_lock_acquire>
 8027ab2:	bf00      	nop
 8027ab4:	200300d8 	.word	0x200300d8

08027ab8 <__tz_unlock>:
 8027ab8:	4801      	ldr	r0, [pc, #4]	; (8027ac0 <__tz_unlock+0x8>)
 8027aba:	f7fd be62 	b.w	8025782 <__retarget_lock_release>
 8027abe:	bf00      	nop
 8027ac0:	200300d8 	.word	0x200300d8

08027ac4 <_tzset_unlocked>:
 8027ac4:	4b01      	ldr	r3, [pc, #4]	; (8027acc <_tzset_unlocked+0x8>)
 8027ac6:	6818      	ldr	r0, [r3, #0]
 8027ac8:	f000 b802 	b.w	8027ad0 <_tzset_unlocked_r>
 8027acc:	200004a4 	.word	0x200004a4

08027ad0 <_tzset_unlocked_r>:
 8027ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ad4:	b08d      	sub	sp, #52	; 0x34
 8027ad6:	4607      	mov	r7, r0
 8027ad8:	f001 f9f2 	bl	8028ec0 <__gettzinfo>
 8027adc:	49b0      	ldr	r1, [pc, #704]	; (8027da0 <_tzset_unlocked_r+0x2d0>)
 8027ade:	4eb1      	ldr	r6, [pc, #708]	; (8027da4 <_tzset_unlocked_r+0x2d4>)
 8027ae0:	4605      	mov	r5, r0
 8027ae2:	4638      	mov	r0, r7
 8027ae4:	f001 f9e4 	bl	8028eb0 <_getenv_r>
 8027ae8:	4604      	mov	r4, r0
 8027aea:	b970      	cbnz	r0, 8027b0a <_tzset_unlocked_r+0x3a>
 8027aec:	4bae      	ldr	r3, [pc, #696]	; (8027da8 <_tzset_unlocked_r+0x2d8>)
 8027aee:	4aaf      	ldr	r2, [pc, #700]	; (8027dac <_tzset_unlocked_r+0x2dc>)
 8027af0:	6018      	str	r0, [r3, #0]
 8027af2:	4baf      	ldr	r3, [pc, #700]	; (8027db0 <_tzset_unlocked_r+0x2e0>)
 8027af4:	6018      	str	r0, [r3, #0]
 8027af6:	4baf      	ldr	r3, [pc, #700]	; (8027db4 <_tzset_unlocked_r+0x2e4>)
 8027af8:	6830      	ldr	r0, [r6, #0]
 8027afa:	e9c3 2200 	strd	r2, r2, [r3]
 8027afe:	f7fd fe4b 	bl	8025798 <free>
 8027b02:	6034      	str	r4, [r6, #0]
 8027b04:	b00d      	add	sp, #52	; 0x34
 8027b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b0a:	6831      	ldr	r1, [r6, #0]
 8027b0c:	2900      	cmp	r1, #0
 8027b0e:	d162      	bne.n	8027bd6 <_tzset_unlocked_r+0x106>
 8027b10:	6830      	ldr	r0, [r6, #0]
 8027b12:	f7fd fe41 	bl	8025798 <free>
 8027b16:	4620      	mov	r0, r4
 8027b18:	f7d8 fb9c 	bl	8000254 <strlen>
 8027b1c:	1c41      	adds	r1, r0, #1
 8027b1e:	4638      	mov	r0, r7
 8027b20:	f7fe f960 	bl	8025de4 <_malloc_r>
 8027b24:	6030      	str	r0, [r6, #0]
 8027b26:	2800      	cmp	r0, #0
 8027b28:	d15a      	bne.n	8027be0 <_tzset_unlocked_r+0x110>
 8027b2a:	7823      	ldrb	r3, [r4, #0]
 8027b2c:	4aa2      	ldr	r2, [pc, #648]	; (8027db8 <_tzset_unlocked_r+0x2e8>)
 8027b2e:	49a3      	ldr	r1, [pc, #652]	; (8027dbc <_tzset_unlocked_r+0x2ec>)
 8027b30:	2b3a      	cmp	r3, #58	; 0x3a
 8027b32:	bf08      	it	eq
 8027b34:	3401      	addeq	r4, #1
 8027b36:	ae0a      	add	r6, sp, #40	; 0x28
 8027b38:	4633      	mov	r3, r6
 8027b3a:	4620      	mov	r0, r4
 8027b3c:	f7ff f814 	bl	8026b68 <siscanf>
 8027b40:	2800      	cmp	r0, #0
 8027b42:	dddf      	ble.n	8027b04 <_tzset_unlocked_r+0x34>
 8027b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b46:	18e7      	adds	r7, r4, r3
 8027b48:	5ce3      	ldrb	r3, [r4, r3]
 8027b4a:	2b2d      	cmp	r3, #45	; 0x2d
 8027b4c:	d14c      	bne.n	8027be8 <_tzset_unlocked_r+0x118>
 8027b4e:	3701      	adds	r7, #1
 8027b50:	f04f 38ff 	mov.w	r8, #4294967295
 8027b54:	f10d 0a20 	add.w	sl, sp, #32
 8027b58:	f10d 0b1e 	add.w	fp, sp, #30
 8027b5c:	2400      	movs	r4, #0
 8027b5e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8027b62:	4997      	ldr	r1, [pc, #604]	; (8027dc0 <_tzset_unlocked_r+0x2f0>)
 8027b64:	9603      	str	r6, [sp, #12]
 8027b66:	f8cd b000 	str.w	fp, [sp]
 8027b6a:	4633      	mov	r3, r6
 8027b6c:	aa07      	add	r2, sp, #28
 8027b6e:	4638      	mov	r0, r7
 8027b70:	f8ad 401e 	strh.w	r4, [sp, #30]
 8027b74:	f8ad 4020 	strh.w	r4, [sp, #32]
 8027b78:	f7fe fff6 	bl	8026b68 <siscanf>
 8027b7c:	42a0      	cmp	r0, r4
 8027b7e:	ddc1      	ble.n	8027b04 <_tzset_unlocked_r+0x34>
 8027b80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027b84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027b88:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8027dcc <_tzset_unlocked_r+0x2fc>
 8027b8c:	213c      	movs	r1, #60	; 0x3c
 8027b8e:	fb01 3302 	mla	r3, r1, r2, r3
 8027b92:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027b96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027b9a:	fb01 3302 	mla	r3, r1, r2, r3
 8027b9e:	fb08 f303 	mul.w	r3, r8, r3
 8027ba2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8027db4 <_tzset_unlocked_r+0x2e4>
 8027ba6:	62ab      	str	r3, [r5, #40]	; 0x28
 8027ba8:	4b83      	ldr	r3, [pc, #524]	; (8027db8 <_tzset_unlocked_r+0x2e8>)
 8027baa:	f8c8 3000 	str.w	r3, [r8]
 8027bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bb0:	4982      	ldr	r1, [pc, #520]	; (8027dbc <_tzset_unlocked_r+0x2ec>)
 8027bb2:	441f      	add	r7, r3
 8027bb4:	464a      	mov	r2, r9
 8027bb6:	4633      	mov	r3, r6
 8027bb8:	4638      	mov	r0, r7
 8027bba:	f7fe ffd5 	bl	8026b68 <siscanf>
 8027bbe:	42a0      	cmp	r0, r4
 8027bc0:	dc18      	bgt.n	8027bf4 <_tzset_unlocked_r+0x124>
 8027bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8027bc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8027bca:	4b77      	ldr	r3, [pc, #476]	; (8027da8 <_tzset_unlocked_r+0x2d8>)
 8027bcc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027bce:	601a      	str	r2, [r3, #0]
 8027bd0:	4b77      	ldr	r3, [pc, #476]	; (8027db0 <_tzset_unlocked_r+0x2e0>)
 8027bd2:	601c      	str	r4, [r3, #0]
 8027bd4:	e796      	b.n	8027b04 <_tzset_unlocked_r+0x34>
 8027bd6:	f7d8 fb33 	bl	8000240 <strcmp>
 8027bda:	2800      	cmp	r0, #0
 8027bdc:	d198      	bne.n	8027b10 <_tzset_unlocked_r+0x40>
 8027bde:	e791      	b.n	8027b04 <_tzset_unlocked_r+0x34>
 8027be0:	4621      	mov	r1, r4
 8027be2:	f7ff f857 	bl	8026c94 <strcpy>
 8027be6:	e7a0      	b.n	8027b2a <_tzset_unlocked_r+0x5a>
 8027be8:	2b2b      	cmp	r3, #43	; 0x2b
 8027bea:	bf08      	it	eq
 8027bec:	3701      	addeq	r7, #1
 8027bee:	f04f 0801 	mov.w	r8, #1
 8027bf2:	e7af      	b.n	8027b54 <_tzset_unlocked_r+0x84>
 8027bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bf6:	f8c8 9004 	str.w	r9, [r8, #4]
 8027bfa:	18fc      	adds	r4, r7, r3
 8027bfc:	5cfb      	ldrb	r3, [r7, r3]
 8027bfe:	2b2d      	cmp	r3, #45	; 0x2d
 8027c00:	f040 808b 	bne.w	8027d1a <_tzset_unlocked_r+0x24a>
 8027c04:	3401      	adds	r4, #1
 8027c06:	f04f 37ff 	mov.w	r7, #4294967295
 8027c0a:	2300      	movs	r3, #0
 8027c0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027c10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027c14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027c18:	930a      	str	r3, [sp, #40]	; 0x28
 8027c1a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027c1e:	e9cd b600 	strd	fp, r6, [sp]
 8027c22:	4967      	ldr	r1, [pc, #412]	; (8027dc0 <_tzset_unlocked_r+0x2f0>)
 8027c24:	4633      	mov	r3, r6
 8027c26:	aa07      	add	r2, sp, #28
 8027c28:	4620      	mov	r0, r4
 8027c2a:	f7fe ff9d 	bl	8026b68 <siscanf>
 8027c2e:	2800      	cmp	r0, #0
 8027c30:	dc78      	bgt.n	8027d24 <_tzset_unlocked_r+0x254>
 8027c32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8027c34:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8027c38:	652b      	str	r3, [r5, #80]	; 0x50
 8027c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c3c:	462f      	mov	r7, r5
 8027c3e:	441c      	add	r4, r3
 8027c40:	f04f 0900 	mov.w	r9, #0
 8027c44:	7823      	ldrb	r3, [r4, #0]
 8027c46:	2b2c      	cmp	r3, #44	; 0x2c
 8027c48:	bf08      	it	eq
 8027c4a:	3401      	addeq	r4, #1
 8027c4c:	f894 8000 	ldrb.w	r8, [r4]
 8027c50:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8027c54:	d178      	bne.n	8027d48 <_tzset_unlocked_r+0x278>
 8027c56:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8027c5a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8027c5e:	ab09      	add	r3, sp, #36	; 0x24
 8027c60:	9300      	str	r3, [sp, #0]
 8027c62:	4958      	ldr	r1, [pc, #352]	; (8027dc4 <_tzset_unlocked_r+0x2f4>)
 8027c64:	9603      	str	r6, [sp, #12]
 8027c66:	4633      	mov	r3, r6
 8027c68:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8027c6c:	4620      	mov	r0, r4
 8027c6e:	f7fe ff7b 	bl	8026b68 <siscanf>
 8027c72:	2803      	cmp	r0, #3
 8027c74:	f47f af46 	bne.w	8027b04 <_tzset_unlocked_r+0x34>
 8027c78:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8027c7c:	1e4b      	subs	r3, r1, #1
 8027c7e:	2b0b      	cmp	r3, #11
 8027c80:	f63f af40 	bhi.w	8027b04 <_tzset_unlocked_r+0x34>
 8027c84:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8027c88:	1e53      	subs	r3, r2, #1
 8027c8a:	2b04      	cmp	r3, #4
 8027c8c:	f63f af3a 	bhi.w	8027b04 <_tzset_unlocked_r+0x34>
 8027c90:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8027c94:	2b06      	cmp	r3, #6
 8027c96:	f63f af35 	bhi.w	8027b04 <_tzset_unlocked_r+0x34>
 8027c9a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027c9e:	f887 8008 	strb.w	r8, [r7, #8]
 8027ca2:	617b      	str	r3, [r7, #20]
 8027ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ca6:	eb04 0803 	add.w	r8, r4, r3
 8027caa:	2302      	movs	r3, #2
 8027cac:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027cb0:	2300      	movs	r3, #0
 8027cb2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027cb6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027cba:	930a      	str	r3, [sp, #40]	; 0x28
 8027cbc:	f898 3000 	ldrb.w	r3, [r8]
 8027cc0:	2b2f      	cmp	r3, #47	; 0x2f
 8027cc2:	d109      	bne.n	8027cd8 <_tzset_unlocked_r+0x208>
 8027cc4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8027cc8:	e9cd b600 	strd	fp, r6, [sp]
 8027ccc:	493e      	ldr	r1, [pc, #248]	; (8027dc8 <_tzset_unlocked_r+0x2f8>)
 8027cce:	4633      	mov	r3, r6
 8027cd0:	aa07      	add	r2, sp, #28
 8027cd2:	4640      	mov	r0, r8
 8027cd4:	f7fe ff48 	bl	8026b68 <siscanf>
 8027cd8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027cdc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027ce0:	213c      	movs	r1, #60	; 0x3c
 8027ce2:	fb01 3302 	mla	r3, r1, r2, r3
 8027ce6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027cea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027cee:	fb01 3302 	mla	r3, r1, r2, r3
 8027cf2:	61bb      	str	r3, [r7, #24]
 8027cf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027cf6:	3728      	adds	r7, #40	; 0x28
 8027cf8:	4444      	add	r4, r8
 8027cfa:	f1b9 0f00 	cmp.w	r9, #0
 8027cfe:	d020      	beq.n	8027d42 <_tzset_unlocked_r+0x272>
 8027d00:	6868      	ldr	r0, [r5, #4]
 8027d02:	f7ff fe29 	bl	8027958 <__tzcalc_limits>
 8027d06:	4b28      	ldr	r3, [pc, #160]	; (8027da8 <_tzset_unlocked_r+0x2d8>)
 8027d08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8027d0a:	601a      	str	r2, [r3, #0]
 8027d0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8027d0e:	1a9b      	subs	r3, r3, r2
 8027d10:	4a27      	ldr	r2, [pc, #156]	; (8027db0 <_tzset_unlocked_r+0x2e0>)
 8027d12:	bf18      	it	ne
 8027d14:	2301      	movne	r3, #1
 8027d16:	6013      	str	r3, [r2, #0]
 8027d18:	e6f4      	b.n	8027b04 <_tzset_unlocked_r+0x34>
 8027d1a:	2b2b      	cmp	r3, #43	; 0x2b
 8027d1c:	bf08      	it	eq
 8027d1e:	3401      	addeq	r4, #1
 8027d20:	2701      	movs	r7, #1
 8027d22:	e772      	b.n	8027c0a <_tzset_unlocked_r+0x13a>
 8027d24:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027d28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027d2c:	213c      	movs	r1, #60	; 0x3c
 8027d2e:	fb01 3302 	mla	r3, r1, r2, r3
 8027d32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027d36:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8027d3a:	fb01 3302 	mla	r3, r1, r2, r3
 8027d3e:	437b      	muls	r3, r7
 8027d40:	e77a      	b.n	8027c38 <_tzset_unlocked_r+0x168>
 8027d42:	f04f 0901 	mov.w	r9, #1
 8027d46:	e77d      	b.n	8027c44 <_tzset_unlocked_r+0x174>
 8027d48:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8027d4c:	bf06      	itte	eq
 8027d4e:	3401      	addeq	r4, #1
 8027d50:	4643      	moveq	r3, r8
 8027d52:	2344      	movne	r3, #68	; 0x44
 8027d54:	220a      	movs	r2, #10
 8027d56:	a90b      	add	r1, sp, #44	; 0x2c
 8027d58:	4620      	mov	r0, r4
 8027d5a:	9305      	str	r3, [sp, #20]
 8027d5c:	f7ff fdf2 	bl	8027944 <strtoul>
 8027d60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027d64:	9b05      	ldr	r3, [sp, #20]
 8027d66:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8027d6a:	45a0      	cmp	r8, r4
 8027d6c:	d114      	bne.n	8027d98 <_tzset_unlocked_r+0x2c8>
 8027d6e:	234d      	movs	r3, #77	; 0x4d
 8027d70:	f1b9 0f00 	cmp.w	r9, #0
 8027d74:	d107      	bne.n	8027d86 <_tzset_unlocked_r+0x2b6>
 8027d76:	722b      	strb	r3, [r5, #8]
 8027d78:	2103      	movs	r1, #3
 8027d7a:	2302      	movs	r3, #2
 8027d7c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8027d80:	f8c5 9014 	str.w	r9, [r5, #20]
 8027d84:	e791      	b.n	8027caa <_tzset_unlocked_r+0x1da>
 8027d86:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8027d8a:	220b      	movs	r2, #11
 8027d8c:	2301      	movs	r3, #1
 8027d8e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8027d92:	2300      	movs	r3, #0
 8027d94:	63eb      	str	r3, [r5, #60]	; 0x3c
 8027d96:	e788      	b.n	8027caa <_tzset_unlocked_r+0x1da>
 8027d98:	b280      	uxth	r0, r0
 8027d9a:	723b      	strb	r3, [r7, #8]
 8027d9c:	6178      	str	r0, [r7, #20]
 8027d9e:	e784      	b.n	8027caa <_tzset_unlocked_r+0x1da>
 8027da0:	08047ad8 	.word	0x08047ad8
 8027da4:	20030100 	.word	0x20030100
 8027da8:	20030108 	.word	0x20030108
 8027dac:	08047adb 	.word	0x08047adb
 8027db0:	20030104 	.word	0x20030104
 8027db4:	20000508 	.word	0x20000508
 8027db8:	200300f3 	.word	0x200300f3
 8027dbc:	08047adf 	.word	0x08047adf
 8027dc0:	08047b02 	.word	0x08047b02
 8027dc4:	08047aee 	.word	0x08047aee
 8027dc8:	08047b01 	.word	0x08047b01
 8027dcc:	200300e8 	.word	0x200300e8

08027dd0 <__swbuf_r>:
 8027dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027dd2:	460e      	mov	r6, r1
 8027dd4:	4614      	mov	r4, r2
 8027dd6:	4605      	mov	r5, r0
 8027dd8:	b118      	cbz	r0, 8027de2 <__swbuf_r+0x12>
 8027dda:	6983      	ldr	r3, [r0, #24]
 8027ddc:	b90b      	cbnz	r3, 8027de2 <__swbuf_r+0x12>
 8027dde:	f7fd faf9 	bl	80253d4 <__sinit>
 8027de2:	4b21      	ldr	r3, [pc, #132]	; (8027e68 <__swbuf_r+0x98>)
 8027de4:	429c      	cmp	r4, r3
 8027de6:	d12b      	bne.n	8027e40 <__swbuf_r+0x70>
 8027de8:	686c      	ldr	r4, [r5, #4]
 8027dea:	69a3      	ldr	r3, [r4, #24]
 8027dec:	60a3      	str	r3, [r4, #8]
 8027dee:	89a3      	ldrh	r3, [r4, #12]
 8027df0:	071a      	lsls	r2, r3, #28
 8027df2:	d52f      	bpl.n	8027e54 <__swbuf_r+0x84>
 8027df4:	6923      	ldr	r3, [r4, #16]
 8027df6:	b36b      	cbz	r3, 8027e54 <__swbuf_r+0x84>
 8027df8:	6923      	ldr	r3, [r4, #16]
 8027dfa:	6820      	ldr	r0, [r4, #0]
 8027dfc:	1ac0      	subs	r0, r0, r3
 8027dfe:	6963      	ldr	r3, [r4, #20]
 8027e00:	b2f6      	uxtb	r6, r6
 8027e02:	4283      	cmp	r3, r0
 8027e04:	4637      	mov	r7, r6
 8027e06:	dc04      	bgt.n	8027e12 <__swbuf_r+0x42>
 8027e08:	4621      	mov	r1, r4
 8027e0a:	4628      	mov	r0, r5
 8027e0c:	f000 ffc6 	bl	8028d9c <_fflush_r>
 8027e10:	bb30      	cbnz	r0, 8027e60 <__swbuf_r+0x90>
 8027e12:	68a3      	ldr	r3, [r4, #8]
 8027e14:	3b01      	subs	r3, #1
 8027e16:	60a3      	str	r3, [r4, #8]
 8027e18:	6823      	ldr	r3, [r4, #0]
 8027e1a:	1c5a      	adds	r2, r3, #1
 8027e1c:	6022      	str	r2, [r4, #0]
 8027e1e:	701e      	strb	r6, [r3, #0]
 8027e20:	6963      	ldr	r3, [r4, #20]
 8027e22:	3001      	adds	r0, #1
 8027e24:	4283      	cmp	r3, r0
 8027e26:	d004      	beq.n	8027e32 <__swbuf_r+0x62>
 8027e28:	89a3      	ldrh	r3, [r4, #12]
 8027e2a:	07db      	lsls	r3, r3, #31
 8027e2c:	d506      	bpl.n	8027e3c <__swbuf_r+0x6c>
 8027e2e:	2e0a      	cmp	r6, #10
 8027e30:	d104      	bne.n	8027e3c <__swbuf_r+0x6c>
 8027e32:	4621      	mov	r1, r4
 8027e34:	4628      	mov	r0, r5
 8027e36:	f000 ffb1 	bl	8028d9c <_fflush_r>
 8027e3a:	b988      	cbnz	r0, 8027e60 <__swbuf_r+0x90>
 8027e3c:	4638      	mov	r0, r7
 8027e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e40:	4b0a      	ldr	r3, [pc, #40]	; (8027e6c <__swbuf_r+0x9c>)
 8027e42:	429c      	cmp	r4, r3
 8027e44:	d101      	bne.n	8027e4a <__swbuf_r+0x7a>
 8027e46:	68ac      	ldr	r4, [r5, #8]
 8027e48:	e7cf      	b.n	8027dea <__swbuf_r+0x1a>
 8027e4a:	4b09      	ldr	r3, [pc, #36]	; (8027e70 <__swbuf_r+0xa0>)
 8027e4c:	429c      	cmp	r4, r3
 8027e4e:	bf08      	it	eq
 8027e50:	68ec      	ldreq	r4, [r5, #12]
 8027e52:	e7ca      	b.n	8027dea <__swbuf_r+0x1a>
 8027e54:	4621      	mov	r1, r4
 8027e56:	4628      	mov	r0, r5
 8027e58:	f000 f81e 	bl	8027e98 <__swsetup_r>
 8027e5c:	2800      	cmp	r0, #0
 8027e5e:	d0cb      	beq.n	8027df8 <__swbuf_r+0x28>
 8027e60:	f04f 37ff 	mov.w	r7, #4294967295
 8027e64:	e7ea      	b.n	8027e3c <__swbuf_r+0x6c>
 8027e66:	bf00      	nop
 8027e68:	08047650 	.word	0x08047650
 8027e6c:	08047670 	.word	0x08047670
 8027e70:	08047630 	.word	0x08047630

08027e74 <_write_r>:
 8027e74:	b538      	push	{r3, r4, r5, lr}
 8027e76:	4d07      	ldr	r5, [pc, #28]	; (8027e94 <_write_r+0x20>)
 8027e78:	4604      	mov	r4, r0
 8027e7a:	4608      	mov	r0, r1
 8027e7c:	4611      	mov	r1, r2
 8027e7e:	2200      	movs	r2, #0
 8027e80:	602a      	str	r2, [r5, #0]
 8027e82:	461a      	mov	r2, r3
 8027e84:	f7db fece 	bl	8003c24 <_write>
 8027e88:	1c43      	adds	r3, r0, #1
 8027e8a:	d102      	bne.n	8027e92 <_write_r+0x1e>
 8027e8c:	682b      	ldr	r3, [r5, #0]
 8027e8e:	b103      	cbz	r3, 8027e92 <_write_r+0x1e>
 8027e90:	6023      	str	r3, [r4, #0]
 8027e92:	bd38      	pop	{r3, r4, r5, pc}
 8027e94:	200300e4 	.word	0x200300e4

08027e98 <__swsetup_r>:
 8027e98:	4b32      	ldr	r3, [pc, #200]	; (8027f64 <__swsetup_r+0xcc>)
 8027e9a:	b570      	push	{r4, r5, r6, lr}
 8027e9c:	681d      	ldr	r5, [r3, #0]
 8027e9e:	4606      	mov	r6, r0
 8027ea0:	460c      	mov	r4, r1
 8027ea2:	b125      	cbz	r5, 8027eae <__swsetup_r+0x16>
 8027ea4:	69ab      	ldr	r3, [r5, #24]
 8027ea6:	b913      	cbnz	r3, 8027eae <__swsetup_r+0x16>
 8027ea8:	4628      	mov	r0, r5
 8027eaa:	f7fd fa93 	bl	80253d4 <__sinit>
 8027eae:	4b2e      	ldr	r3, [pc, #184]	; (8027f68 <__swsetup_r+0xd0>)
 8027eb0:	429c      	cmp	r4, r3
 8027eb2:	d10f      	bne.n	8027ed4 <__swsetup_r+0x3c>
 8027eb4:	686c      	ldr	r4, [r5, #4]
 8027eb6:	89a3      	ldrh	r3, [r4, #12]
 8027eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027ebc:	0719      	lsls	r1, r3, #28
 8027ebe:	d42c      	bmi.n	8027f1a <__swsetup_r+0x82>
 8027ec0:	06dd      	lsls	r5, r3, #27
 8027ec2:	d411      	bmi.n	8027ee8 <__swsetup_r+0x50>
 8027ec4:	2309      	movs	r3, #9
 8027ec6:	6033      	str	r3, [r6, #0]
 8027ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027ecc:	81a3      	strh	r3, [r4, #12]
 8027ece:	f04f 30ff 	mov.w	r0, #4294967295
 8027ed2:	e03e      	b.n	8027f52 <__swsetup_r+0xba>
 8027ed4:	4b25      	ldr	r3, [pc, #148]	; (8027f6c <__swsetup_r+0xd4>)
 8027ed6:	429c      	cmp	r4, r3
 8027ed8:	d101      	bne.n	8027ede <__swsetup_r+0x46>
 8027eda:	68ac      	ldr	r4, [r5, #8]
 8027edc:	e7eb      	b.n	8027eb6 <__swsetup_r+0x1e>
 8027ede:	4b24      	ldr	r3, [pc, #144]	; (8027f70 <__swsetup_r+0xd8>)
 8027ee0:	429c      	cmp	r4, r3
 8027ee2:	bf08      	it	eq
 8027ee4:	68ec      	ldreq	r4, [r5, #12]
 8027ee6:	e7e6      	b.n	8027eb6 <__swsetup_r+0x1e>
 8027ee8:	0758      	lsls	r0, r3, #29
 8027eea:	d512      	bpl.n	8027f12 <__swsetup_r+0x7a>
 8027eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027eee:	b141      	cbz	r1, 8027f02 <__swsetup_r+0x6a>
 8027ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027ef4:	4299      	cmp	r1, r3
 8027ef6:	d002      	beq.n	8027efe <__swsetup_r+0x66>
 8027ef8:	4630      	mov	r0, r6
 8027efa:	f7fd ff07 	bl	8025d0c <_free_r>
 8027efe:	2300      	movs	r3, #0
 8027f00:	6363      	str	r3, [r4, #52]	; 0x34
 8027f02:	89a3      	ldrh	r3, [r4, #12]
 8027f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027f08:	81a3      	strh	r3, [r4, #12]
 8027f0a:	2300      	movs	r3, #0
 8027f0c:	6063      	str	r3, [r4, #4]
 8027f0e:	6923      	ldr	r3, [r4, #16]
 8027f10:	6023      	str	r3, [r4, #0]
 8027f12:	89a3      	ldrh	r3, [r4, #12]
 8027f14:	f043 0308 	orr.w	r3, r3, #8
 8027f18:	81a3      	strh	r3, [r4, #12]
 8027f1a:	6923      	ldr	r3, [r4, #16]
 8027f1c:	b94b      	cbnz	r3, 8027f32 <__swsetup_r+0x9a>
 8027f1e:	89a3      	ldrh	r3, [r4, #12]
 8027f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027f28:	d003      	beq.n	8027f32 <__swsetup_r+0x9a>
 8027f2a:	4621      	mov	r1, r4
 8027f2c:	4630      	mov	r0, r6
 8027f2e:	f001 f8b7 	bl	80290a0 <__smakebuf_r>
 8027f32:	89a0      	ldrh	r0, [r4, #12]
 8027f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027f38:	f010 0301 	ands.w	r3, r0, #1
 8027f3c:	d00a      	beq.n	8027f54 <__swsetup_r+0xbc>
 8027f3e:	2300      	movs	r3, #0
 8027f40:	60a3      	str	r3, [r4, #8]
 8027f42:	6963      	ldr	r3, [r4, #20]
 8027f44:	425b      	negs	r3, r3
 8027f46:	61a3      	str	r3, [r4, #24]
 8027f48:	6923      	ldr	r3, [r4, #16]
 8027f4a:	b943      	cbnz	r3, 8027f5e <__swsetup_r+0xc6>
 8027f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027f50:	d1ba      	bne.n	8027ec8 <__swsetup_r+0x30>
 8027f52:	bd70      	pop	{r4, r5, r6, pc}
 8027f54:	0781      	lsls	r1, r0, #30
 8027f56:	bf58      	it	pl
 8027f58:	6963      	ldrpl	r3, [r4, #20]
 8027f5a:	60a3      	str	r3, [r4, #8]
 8027f5c:	e7f4      	b.n	8027f48 <__swsetup_r+0xb0>
 8027f5e:	2000      	movs	r0, #0
 8027f60:	e7f7      	b.n	8027f52 <__swsetup_r+0xba>
 8027f62:	bf00      	nop
 8027f64:	200004a4 	.word	0x200004a4
 8027f68:	08047650 	.word	0x08047650
 8027f6c:	08047670 	.word	0x08047670
 8027f70:	08047630 	.word	0x08047630

08027f74 <abs>:
 8027f74:	2800      	cmp	r0, #0
 8027f76:	bfb8      	it	lt
 8027f78:	4240      	neglt	r0, r0
 8027f7a:	4770      	bx	lr

08027f7c <asctime>:
 8027f7c:	4b0d      	ldr	r3, [pc, #52]	; (8027fb4 <asctime+0x38>)
 8027f7e:	b570      	push	{r4, r5, r6, lr}
 8027f80:	681d      	ldr	r5, [r3, #0]
 8027f82:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8027f84:	4604      	mov	r4, r0
 8027f86:	b976      	cbnz	r6, 8027fa6 <asctime+0x2a>
 8027f88:	201a      	movs	r0, #26
 8027f8a:	f7fd fbfd 	bl	8025788 <malloc>
 8027f8e:	4602      	mov	r2, r0
 8027f90:	6428      	str	r0, [r5, #64]	; 0x40
 8027f92:	b920      	cbnz	r0, 8027f9e <asctime+0x22>
 8027f94:	4b08      	ldr	r3, [pc, #32]	; (8027fb8 <asctime+0x3c>)
 8027f96:	4809      	ldr	r0, [pc, #36]	; (8027fbc <asctime+0x40>)
 8027f98:	2137      	movs	r1, #55	; 0x37
 8027f9a:	f000 f837 	bl	802800c <__assert_func>
 8027f9e:	221a      	movs	r2, #26
 8027fa0:	4631      	mov	r1, r6
 8027fa2:	f7fd fc39 	bl	8025818 <memset>
 8027fa6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8027fa8:	4620      	mov	r0, r4
 8027faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027fae:	f000 b807 	b.w	8027fc0 <asctime_r>
 8027fb2:	bf00      	nop
 8027fb4:	200004a4 	.word	0x200004a4
 8027fb8:	08047694 	.word	0x08047694
 8027fbc:	08047b14 	.word	0x08047b14

08027fc0 <asctime_r>:
 8027fc0:	b510      	push	{r4, lr}
 8027fc2:	460c      	mov	r4, r1
 8027fc4:	6941      	ldr	r1, [r0, #20]
 8027fc6:	6903      	ldr	r3, [r0, #16]
 8027fc8:	6982      	ldr	r2, [r0, #24]
 8027fca:	b086      	sub	sp, #24
 8027fcc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8027fd0:	9104      	str	r1, [sp, #16]
 8027fd2:	6801      	ldr	r1, [r0, #0]
 8027fd4:	9103      	str	r1, [sp, #12]
 8027fd6:	6841      	ldr	r1, [r0, #4]
 8027fd8:	9102      	str	r1, [sp, #8]
 8027fda:	6881      	ldr	r1, [r0, #8]
 8027fdc:	9101      	str	r1, [sp, #4]
 8027fde:	68c1      	ldr	r1, [r0, #12]
 8027fe0:	9100      	str	r1, [sp, #0]
 8027fe2:	4907      	ldr	r1, [pc, #28]	; (8028000 <asctime_r+0x40>)
 8027fe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027fe8:	440b      	add	r3, r1
 8027fea:	4906      	ldr	r1, [pc, #24]	; (8028004 <asctime_r+0x44>)
 8027fec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027ff0:	440a      	add	r2, r1
 8027ff2:	4620      	mov	r0, r4
 8027ff4:	4904      	ldr	r1, [pc, #16]	; (8028008 <asctime_r+0x48>)
 8027ff6:	f7fe fd97 	bl	8026b28 <siprintf>
 8027ffa:	4620      	mov	r0, r4
 8027ffc:	b006      	add	sp, #24
 8027ffe:	bd10      	pop	{r4, pc}
 8028000:	08047ba5 	.word	0x08047ba5
 8028004:	08047b90 	.word	0x08047b90
 8028008:	08047b70 	.word	0x08047b70

0802800c <__assert_func>:
 802800c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802800e:	4614      	mov	r4, r2
 8028010:	461a      	mov	r2, r3
 8028012:	4b09      	ldr	r3, [pc, #36]	; (8028038 <__assert_func+0x2c>)
 8028014:	681b      	ldr	r3, [r3, #0]
 8028016:	4605      	mov	r5, r0
 8028018:	68d8      	ldr	r0, [r3, #12]
 802801a:	b14c      	cbz	r4, 8028030 <__assert_func+0x24>
 802801c:	4b07      	ldr	r3, [pc, #28]	; (802803c <__assert_func+0x30>)
 802801e:	9100      	str	r1, [sp, #0]
 8028020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028024:	4906      	ldr	r1, [pc, #24]	; (8028040 <__assert_func+0x34>)
 8028026:	462b      	mov	r3, r5
 8028028:	f000 fef4 	bl	8028e14 <fiprintf>
 802802c:	f002 faee 	bl	802a60c <abort>
 8028030:	4b04      	ldr	r3, [pc, #16]	; (8028044 <__assert_func+0x38>)
 8028032:	461c      	mov	r4, r3
 8028034:	e7f3      	b.n	802801e <__assert_func+0x12>
 8028036:	bf00      	nop
 8028038:	200004a4 	.word	0x200004a4
 802803c:	08047bc9 	.word	0x08047bc9
 8028040:	08047bd6 	.word	0x08047bd6
 8028044:	08047b8f 	.word	0x08047b8f

08028048 <_close_r>:
 8028048:	b538      	push	{r3, r4, r5, lr}
 802804a:	4d06      	ldr	r5, [pc, #24]	; (8028064 <_close_r+0x1c>)
 802804c:	2300      	movs	r3, #0
 802804e:	4604      	mov	r4, r0
 8028050:	4608      	mov	r0, r1
 8028052:	602b      	str	r3, [r5, #0]
 8028054:	f7e0 fa0e 	bl	8008474 <_close>
 8028058:	1c43      	adds	r3, r0, #1
 802805a:	d102      	bne.n	8028062 <_close_r+0x1a>
 802805c:	682b      	ldr	r3, [r5, #0]
 802805e:	b103      	cbz	r3, 8028062 <_close_r+0x1a>
 8028060:	6023      	str	r3, [r4, #0]
 8028062:	bd38      	pop	{r3, r4, r5, pc}
 8028064:	200300e4 	.word	0x200300e4

08028068 <div>:
 8028068:	2900      	cmp	r1, #0
 802806a:	b510      	push	{r4, lr}
 802806c:	fb91 f4f2 	sdiv	r4, r1, r2
 8028070:	fb02 1314 	mls	r3, r2, r4, r1
 8028074:	db06      	blt.n	8028084 <div+0x1c>
 8028076:	2b00      	cmp	r3, #0
 8028078:	da01      	bge.n	802807e <div+0x16>
 802807a:	3401      	adds	r4, #1
 802807c:	1a9b      	subs	r3, r3, r2
 802807e:	e9c0 4300 	strd	r4, r3, [r0]
 8028082:	bd10      	pop	{r4, pc}
 8028084:	2b00      	cmp	r3, #0
 8028086:	bfc4      	itt	gt
 8028088:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802808c:	189b      	addgt	r3, r3, r2
 802808e:	e7f6      	b.n	802807e <div+0x16>

08028090 <quorem>:
 8028090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028094:	6903      	ldr	r3, [r0, #16]
 8028096:	690c      	ldr	r4, [r1, #16]
 8028098:	42a3      	cmp	r3, r4
 802809a:	4607      	mov	r7, r0
 802809c:	f2c0 8081 	blt.w	80281a2 <quorem+0x112>
 80280a0:	3c01      	subs	r4, #1
 80280a2:	f101 0814 	add.w	r8, r1, #20
 80280a6:	f100 0514 	add.w	r5, r0, #20
 80280aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80280ae:	9301      	str	r3, [sp, #4]
 80280b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80280b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80280b8:	3301      	adds	r3, #1
 80280ba:	429a      	cmp	r2, r3
 80280bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80280c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80280c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80280c8:	d331      	bcc.n	802812e <quorem+0x9e>
 80280ca:	f04f 0e00 	mov.w	lr, #0
 80280ce:	4640      	mov	r0, r8
 80280d0:	46ac      	mov	ip, r5
 80280d2:	46f2      	mov	sl, lr
 80280d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80280d8:	b293      	uxth	r3, r2
 80280da:	fb06 e303 	mla	r3, r6, r3, lr
 80280de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80280e2:	b29b      	uxth	r3, r3
 80280e4:	ebaa 0303 	sub.w	r3, sl, r3
 80280e8:	f8dc a000 	ldr.w	sl, [ip]
 80280ec:	0c12      	lsrs	r2, r2, #16
 80280ee:	fa13 f38a 	uxtah	r3, r3, sl
 80280f2:	fb06 e202 	mla	r2, r6, r2, lr
 80280f6:	9300      	str	r3, [sp, #0]
 80280f8:	9b00      	ldr	r3, [sp, #0]
 80280fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80280fe:	b292      	uxth	r2, r2
 8028100:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8028104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028108:	f8bd 3000 	ldrh.w	r3, [sp]
 802810c:	4581      	cmp	r9, r0
 802810e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028112:	f84c 3b04 	str.w	r3, [ip], #4
 8028116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802811a:	d2db      	bcs.n	80280d4 <quorem+0x44>
 802811c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028120:	b92b      	cbnz	r3, 802812e <quorem+0x9e>
 8028122:	9b01      	ldr	r3, [sp, #4]
 8028124:	3b04      	subs	r3, #4
 8028126:	429d      	cmp	r5, r3
 8028128:	461a      	mov	r2, r3
 802812a:	d32e      	bcc.n	802818a <quorem+0xfa>
 802812c:	613c      	str	r4, [r7, #16]
 802812e:	4638      	mov	r0, r7
 8028130:	f001 fa84 	bl	802963c <__mcmp>
 8028134:	2800      	cmp	r0, #0
 8028136:	db24      	blt.n	8028182 <quorem+0xf2>
 8028138:	3601      	adds	r6, #1
 802813a:	4628      	mov	r0, r5
 802813c:	f04f 0c00 	mov.w	ip, #0
 8028140:	f858 2b04 	ldr.w	r2, [r8], #4
 8028144:	f8d0 e000 	ldr.w	lr, [r0]
 8028148:	b293      	uxth	r3, r2
 802814a:	ebac 0303 	sub.w	r3, ip, r3
 802814e:	0c12      	lsrs	r2, r2, #16
 8028150:	fa13 f38e 	uxtah	r3, r3, lr
 8028154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802815c:	b29b      	uxth	r3, r3
 802815e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028162:	45c1      	cmp	r9, r8
 8028164:	f840 3b04 	str.w	r3, [r0], #4
 8028168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802816c:	d2e8      	bcs.n	8028140 <quorem+0xb0>
 802816e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028176:	b922      	cbnz	r2, 8028182 <quorem+0xf2>
 8028178:	3b04      	subs	r3, #4
 802817a:	429d      	cmp	r5, r3
 802817c:	461a      	mov	r2, r3
 802817e:	d30a      	bcc.n	8028196 <quorem+0x106>
 8028180:	613c      	str	r4, [r7, #16]
 8028182:	4630      	mov	r0, r6
 8028184:	b003      	add	sp, #12
 8028186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802818a:	6812      	ldr	r2, [r2, #0]
 802818c:	3b04      	subs	r3, #4
 802818e:	2a00      	cmp	r2, #0
 8028190:	d1cc      	bne.n	802812c <quorem+0x9c>
 8028192:	3c01      	subs	r4, #1
 8028194:	e7c7      	b.n	8028126 <quorem+0x96>
 8028196:	6812      	ldr	r2, [r2, #0]
 8028198:	3b04      	subs	r3, #4
 802819a:	2a00      	cmp	r2, #0
 802819c:	d1f0      	bne.n	8028180 <quorem+0xf0>
 802819e:	3c01      	subs	r4, #1
 80281a0:	e7eb      	b.n	802817a <quorem+0xea>
 80281a2:	2000      	movs	r0, #0
 80281a4:	e7ee      	b.n	8028184 <quorem+0xf4>
 80281a6:	Address 0x00000000080281a6 is out of bounds.


080281a8 <_dtoa_r>:
 80281a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281ac:	ed2d 8b02 	vpush	{d8}
 80281b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80281b2:	b091      	sub	sp, #68	; 0x44
 80281b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80281b8:	ec59 8b10 	vmov	r8, r9, d0
 80281bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80281be:	9106      	str	r1, [sp, #24]
 80281c0:	4606      	mov	r6, r0
 80281c2:	9208      	str	r2, [sp, #32]
 80281c4:	930c      	str	r3, [sp, #48]	; 0x30
 80281c6:	b975      	cbnz	r5, 80281e6 <_dtoa_r+0x3e>
 80281c8:	2010      	movs	r0, #16
 80281ca:	f7fd fadd 	bl	8025788 <malloc>
 80281ce:	4602      	mov	r2, r0
 80281d0:	6270      	str	r0, [r6, #36]	; 0x24
 80281d2:	b920      	cbnz	r0, 80281de <_dtoa_r+0x36>
 80281d4:	4baa      	ldr	r3, [pc, #680]	; (8028480 <_dtoa_r+0x2d8>)
 80281d6:	21ea      	movs	r1, #234	; 0xea
 80281d8:	48aa      	ldr	r0, [pc, #680]	; (8028484 <_dtoa_r+0x2dc>)
 80281da:	f7ff ff17 	bl	802800c <__assert_func>
 80281de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80281e2:	6005      	str	r5, [r0, #0]
 80281e4:	60c5      	str	r5, [r0, #12]
 80281e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80281e8:	6819      	ldr	r1, [r3, #0]
 80281ea:	b151      	cbz	r1, 8028202 <_dtoa_r+0x5a>
 80281ec:	685a      	ldr	r2, [r3, #4]
 80281ee:	604a      	str	r2, [r1, #4]
 80281f0:	2301      	movs	r3, #1
 80281f2:	4093      	lsls	r3, r2
 80281f4:	608b      	str	r3, [r1, #8]
 80281f6:	4630      	mov	r0, r6
 80281f8:	f000 ffde 	bl	80291b8 <_Bfree>
 80281fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80281fe:	2200      	movs	r2, #0
 8028200:	601a      	str	r2, [r3, #0]
 8028202:	f1b9 0300 	subs.w	r3, r9, #0
 8028206:	bfbb      	ittet	lt
 8028208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802820c:	9303      	strlt	r3, [sp, #12]
 802820e:	2300      	movge	r3, #0
 8028210:	2201      	movlt	r2, #1
 8028212:	bfac      	ite	ge
 8028214:	6023      	strge	r3, [r4, #0]
 8028216:	6022      	strlt	r2, [r4, #0]
 8028218:	4b9b      	ldr	r3, [pc, #620]	; (8028488 <_dtoa_r+0x2e0>)
 802821a:	9c03      	ldr	r4, [sp, #12]
 802821c:	43a3      	bics	r3, r4
 802821e:	d11c      	bne.n	802825a <_dtoa_r+0xb2>
 8028220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028222:	f242 730f 	movw	r3, #9999	; 0x270f
 8028226:	6013      	str	r3, [r2, #0]
 8028228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802822c:	ea53 0308 	orrs.w	r3, r3, r8
 8028230:	f000 84fd 	beq.w	8028c2e <_dtoa_r+0xa86>
 8028234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028236:	b963      	cbnz	r3, 8028252 <_dtoa_r+0xaa>
 8028238:	4b94      	ldr	r3, [pc, #592]	; (802848c <_dtoa_r+0x2e4>)
 802823a:	e01f      	b.n	802827c <_dtoa_r+0xd4>
 802823c:	4b94      	ldr	r3, [pc, #592]	; (8028490 <_dtoa_r+0x2e8>)
 802823e:	9301      	str	r3, [sp, #4]
 8028240:	3308      	adds	r3, #8
 8028242:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8028244:	6013      	str	r3, [r2, #0]
 8028246:	9801      	ldr	r0, [sp, #4]
 8028248:	b011      	add	sp, #68	; 0x44
 802824a:	ecbd 8b02 	vpop	{d8}
 802824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028252:	4b8e      	ldr	r3, [pc, #568]	; (802848c <_dtoa_r+0x2e4>)
 8028254:	9301      	str	r3, [sp, #4]
 8028256:	3303      	adds	r3, #3
 8028258:	e7f3      	b.n	8028242 <_dtoa_r+0x9a>
 802825a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802825e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028266:	d10b      	bne.n	8028280 <_dtoa_r+0xd8>
 8028268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802826a:	2301      	movs	r3, #1
 802826c:	6013      	str	r3, [r2, #0]
 802826e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028270:	2b00      	cmp	r3, #0
 8028272:	f000 84d9 	beq.w	8028c28 <_dtoa_r+0xa80>
 8028276:	4887      	ldr	r0, [pc, #540]	; (8028494 <_dtoa_r+0x2ec>)
 8028278:	6018      	str	r0, [r3, #0]
 802827a:	1e43      	subs	r3, r0, #1
 802827c:	9301      	str	r3, [sp, #4]
 802827e:	e7e2      	b.n	8028246 <_dtoa_r+0x9e>
 8028280:	a90f      	add	r1, sp, #60	; 0x3c
 8028282:	aa0e      	add	r2, sp, #56	; 0x38
 8028284:	4630      	mov	r0, r6
 8028286:	eeb0 0b48 	vmov.f64	d0, d8
 802828a:	f001 fa7d 	bl	8029788 <__d2b>
 802828e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028292:	4605      	mov	r5, r0
 8028294:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028296:	2900      	cmp	r1, #0
 8028298:	d046      	beq.n	8028328 <_dtoa_r+0x180>
 802829a:	ee18 4a90 	vmov	r4, s17
 802829e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80282a2:	ec53 2b18 	vmov	r2, r3, d8
 80282a6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80282aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80282ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80282b2:	2400      	movs	r4, #0
 80282b4:	ec43 2b16 	vmov	d6, r2, r3
 80282b8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80282bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028468 <_dtoa_r+0x2c0>
 80282c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80282c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8028470 <_dtoa_r+0x2c8>
 80282c8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80282cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8028478 <_dtoa_r+0x2d0>
 80282d0:	ee07 1a90 	vmov	s15, r1
 80282d4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80282d8:	eeb0 7b46 	vmov.f64	d7, d6
 80282dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80282e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80282e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80282e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282ec:	ee16 ba90 	vmov	fp, s13
 80282f0:	940a      	str	r4, [sp, #40]	; 0x28
 80282f2:	d508      	bpl.n	8028306 <_dtoa_r+0x15e>
 80282f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80282f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80282fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028300:	bf18      	it	ne
 8028302:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028306:	f1bb 0f16 	cmp.w	fp, #22
 802830a:	d82f      	bhi.n	802836c <_dtoa_r+0x1c4>
 802830c:	4b62      	ldr	r3, [pc, #392]	; (8028498 <_dtoa_r+0x2f0>)
 802830e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028312:	ed93 7b00 	vldr	d7, [r3]
 8028316:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802831e:	d501      	bpl.n	8028324 <_dtoa_r+0x17c>
 8028320:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028324:	2300      	movs	r3, #0
 8028326:	e022      	b.n	802836e <_dtoa_r+0x1c6>
 8028328:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802832a:	4401      	add	r1, r0
 802832c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8028330:	2b20      	cmp	r3, #32
 8028332:	bfc1      	itttt	gt
 8028334:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028338:	fa04 f303 	lslgt.w	r3, r4, r3
 802833c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8028340:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028344:	bfd6      	itet	le
 8028346:	f1c3 0320 	rsble	r3, r3, #32
 802834a:	ea43 0808 	orrgt.w	r8, r3, r8
 802834e:	fa08 f803 	lslle.w	r8, r8, r3
 8028352:	ee07 8a90 	vmov	s15, r8
 8028356:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802835a:	3901      	subs	r1, #1
 802835c:	ee17 4a90 	vmov	r4, s15
 8028360:	ec53 2b17 	vmov	r2, r3, d7
 8028364:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028368:	2401      	movs	r4, #1
 802836a:	e7a3      	b.n	80282b4 <_dtoa_r+0x10c>
 802836c:	2301      	movs	r3, #1
 802836e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028370:	1a43      	subs	r3, r0, r1
 8028372:	1e5a      	subs	r2, r3, #1
 8028374:	bf45      	ittet	mi
 8028376:	f1c3 0301 	rsbmi	r3, r3, #1
 802837a:	9304      	strmi	r3, [sp, #16]
 802837c:	2300      	movpl	r3, #0
 802837e:	2300      	movmi	r3, #0
 8028380:	9205      	str	r2, [sp, #20]
 8028382:	bf54      	ite	pl
 8028384:	9304      	strpl	r3, [sp, #16]
 8028386:	9305      	strmi	r3, [sp, #20]
 8028388:	f1bb 0f00 	cmp.w	fp, #0
 802838c:	db18      	blt.n	80283c0 <_dtoa_r+0x218>
 802838e:	9b05      	ldr	r3, [sp, #20]
 8028390:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8028394:	445b      	add	r3, fp
 8028396:	9305      	str	r3, [sp, #20]
 8028398:	2300      	movs	r3, #0
 802839a:	9a06      	ldr	r2, [sp, #24]
 802839c:	2a09      	cmp	r2, #9
 802839e:	d849      	bhi.n	8028434 <_dtoa_r+0x28c>
 80283a0:	2a05      	cmp	r2, #5
 80283a2:	bfc4      	itt	gt
 80283a4:	3a04      	subgt	r2, #4
 80283a6:	9206      	strgt	r2, [sp, #24]
 80283a8:	9a06      	ldr	r2, [sp, #24]
 80283aa:	f1a2 0202 	sub.w	r2, r2, #2
 80283ae:	bfcc      	ite	gt
 80283b0:	2400      	movgt	r4, #0
 80283b2:	2401      	movle	r4, #1
 80283b4:	2a03      	cmp	r2, #3
 80283b6:	d848      	bhi.n	802844a <_dtoa_r+0x2a2>
 80283b8:	e8df f002 	tbb	[pc, r2]
 80283bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80283c0:	9b04      	ldr	r3, [sp, #16]
 80283c2:	2200      	movs	r2, #0
 80283c4:	eba3 030b 	sub.w	r3, r3, fp
 80283c8:	9304      	str	r3, [sp, #16]
 80283ca:	9209      	str	r2, [sp, #36]	; 0x24
 80283cc:	f1cb 0300 	rsb	r3, fp, #0
 80283d0:	e7e3      	b.n	802839a <_dtoa_r+0x1f2>
 80283d2:	2200      	movs	r2, #0
 80283d4:	9207      	str	r2, [sp, #28]
 80283d6:	9a08      	ldr	r2, [sp, #32]
 80283d8:	2a00      	cmp	r2, #0
 80283da:	dc39      	bgt.n	8028450 <_dtoa_r+0x2a8>
 80283dc:	f04f 0a01 	mov.w	sl, #1
 80283e0:	46d1      	mov	r9, sl
 80283e2:	4652      	mov	r2, sl
 80283e4:	f8cd a020 	str.w	sl, [sp, #32]
 80283e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80283ea:	2100      	movs	r1, #0
 80283ec:	6079      	str	r1, [r7, #4]
 80283ee:	2004      	movs	r0, #4
 80283f0:	f100 0c14 	add.w	ip, r0, #20
 80283f4:	4594      	cmp	ip, r2
 80283f6:	6879      	ldr	r1, [r7, #4]
 80283f8:	d92f      	bls.n	802845a <_dtoa_r+0x2b2>
 80283fa:	4630      	mov	r0, r6
 80283fc:	930d      	str	r3, [sp, #52]	; 0x34
 80283fe:	f000 fe9b 	bl	8029138 <_Balloc>
 8028402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028404:	9001      	str	r0, [sp, #4]
 8028406:	4602      	mov	r2, r0
 8028408:	2800      	cmp	r0, #0
 802840a:	d149      	bne.n	80284a0 <_dtoa_r+0x2f8>
 802840c:	4b23      	ldr	r3, [pc, #140]	; (802849c <_dtoa_r+0x2f4>)
 802840e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028412:	e6e1      	b.n	80281d8 <_dtoa_r+0x30>
 8028414:	2201      	movs	r2, #1
 8028416:	e7dd      	b.n	80283d4 <_dtoa_r+0x22c>
 8028418:	2200      	movs	r2, #0
 802841a:	9207      	str	r2, [sp, #28]
 802841c:	9a08      	ldr	r2, [sp, #32]
 802841e:	eb0b 0a02 	add.w	sl, fp, r2
 8028422:	f10a 0901 	add.w	r9, sl, #1
 8028426:	464a      	mov	r2, r9
 8028428:	2a01      	cmp	r2, #1
 802842a:	bfb8      	it	lt
 802842c:	2201      	movlt	r2, #1
 802842e:	e7db      	b.n	80283e8 <_dtoa_r+0x240>
 8028430:	2201      	movs	r2, #1
 8028432:	e7f2      	b.n	802841a <_dtoa_r+0x272>
 8028434:	2401      	movs	r4, #1
 8028436:	2200      	movs	r2, #0
 8028438:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802843c:	f04f 3aff 	mov.w	sl, #4294967295
 8028440:	2100      	movs	r1, #0
 8028442:	46d1      	mov	r9, sl
 8028444:	2212      	movs	r2, #18
 8028446:	9108      	str	r1, [sp, #32]
 8028448:	e7ce      	b.n	80283e8 <_dtoa_r+0x240>
 802844a:	2201      	movs	r2, #1
 802844c:	9207      	str	r2, [sp, #28]
 802844e:	e7f5      	b.n	802843c <_dtoa_r+0x294>
 8028450:	f8dd a020 	ldr.w	sl, [sp, #32]
 8028454:	46d1      	mov	r9, sl
 8028456:	4652      	mov	r2, sl
 8028458:	e7c6      	b.n	80283e8 <_dtoa_r+0x240>
 802845a:	3101      	adds	r1, #1
 802845c:	6079      	str	r1, [r7, #4]
 802845e:	0040      	lsls	r0, r0, #1
 8028460:	e7c6      	b.n	80283f0 <_dtoa_r+0x248>
 8028462:	bf00      	nop
 8028464:	f3af 8000 	nop.w
 8028468:	636f4361 	.word	0x636f4361
 802846c:	3fd287a7 	.word	0x3fd287a7
 8028470:	8b60c8b3 	.word	0x8b60c8b3
 8028474:	3fc68a28 	.word	0x3fc68a28
 8028478:	509f79fb 	.word	0x509f79fb
 802847c:	3fd34413 	.word	0x3fd34413
 8028480:	08047694 	.word	0x08047694
 8028484:	08047c12 	.word	0x08047c12
 8028488:	7ff00000 	.word	0x7ff00000
 802848c:	08047c0e 	.word	0x08047c0e
 8028490:	08047c05 	.word	0x08047c05
 8028494:	08047df2 	.word	0x08047df2
 8028498:	08047d08 	.word	0x08047d08
 802849c:	08047c6d 	.word	0x08047c6d
 80284a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80284a2:	9901      	ldr	r1, [sp, #4]
 80284a4:	6011      	str	r1, [r2, #0]
 80284a6:	f1b9 0f0e 	cmp.w	r9, #14
 80284aa:	d86c      	bhi.n	8028586 <_dtoa_r+0x3de>
 80284ac:	2c00      	cmp	r4, #0
 80284ae:	d06a      	beq.n	8028586 <_dtoa_r+0x3de>
 80284b0:	f1bb 0f00 	cmp.w	fp, #0
 80284b4:	f340 80a0 	ble.w	80285f8 <_dtoa_r+0x450>
 80284b8:	49c1      	ldr	r1, [pc, #772]	; (80287c0 <_dtoa_r+0x618>)
 80284ba:	f00b 020f 	and.w	r2, fp, #15
 80284be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80284c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80284c6:	ed92 7b00 	vldr	d7, [r2]
 80284ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80284ce:	f000 8087 	beq.w	80285e0 <_dtoa_r+0x438>
 80284d2:	4abc      	ldr	r2, [pc, #752]	; (80287c4 <_dtoa_r+0x61c>)
 80284d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80284d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80284dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80284e0:	f001 010f 	and.w	r1, r1, #15
 80284e4:	2203      	movs	r2, #3
 80284e6:	48b7      	ldr	r0, [pc, #732]	; (80287c4 <_dtoa_r+0x61c>)
 80284e8:	2900      	cmp	r1, #0
 80284ea:	d17b      	bne.n	80285e4 <_dtoa_r+0x43c>
 80284ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 80284f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80284f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80284f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80284fa:	2900      	cmp	r1, #0
 80284fc:	f000 80a2 	beq.w	8028644 <_dtoa_r+0x49c>
 8028500:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028504:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028508:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028510:	f140 8098 	bpl.w	8028644 <_dtoa_r+0x49c>
 8028514:	f1b9 0f00 	cmp.w	r9, #0
 8028518:	f000 8094 	beq.w	8028644 <_dtoa_r+0x49c>
 802851c:	f1ba 0f00 	cmp.w	sl, #0
 8028520:	dd2f      	ble.n	8028582 <_dtoa_r+0x3da>
 8028522:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8028526:	ee27 7b06 	vmul.f64	d7, d7, d6
 802852a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802852e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8028532:	3201      	adds	r2, #1
 8028534:	4650      	mov	r0, sl
 8028536:	ed9d 6b02 	vldr	d6, [sp, #8]
 802853a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802853e:	ee07 2a90 	vmov	s15, r2
 8028542:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028546:	eea7 5b06 	vfma.f64	d5, d7, d6
 802854a:	ee15 4a90 	vmov	r4, s11
 802854e:	ec52 1b15 	vmov	r1, r2, d5
 8028552:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8028556:	2800      	cmp	r0, #0
 8028558:	d177      	bne.n	802864a <_dtoa_r+0x4a2>
 802855a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802855e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8028562:	ec42 1b17 	vmov	d7, r1, r2
 8028566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802856e:	f300 8263 	bgt.w	8028a38 <_dtoa_r+0x890>
 8028572:	eeb1 7b47 	vneg.f64	d7, d7
 8028576:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802857e:	f100 8258 	bmi.w	8028a32 <_dtoa_r+0x88a>
 8028582:	ed8d 8b02 	vstr	d8, [sp, #8]
 8028586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028588:	2a00      	cmp	r2, #0
 802858a:	f2c0 811d 	blt.w	80287c8 <_dtoa_r+0x620>
 802858e:	f1bb 0f0e 	cmp.w	fp, #14
 8028592:	f300 8119 	bgt.w	80287c8 <_dtoa_r+0x620>
 8028596:	4b8a      	ldr	r3, [pc, #552]	; (80287c0 <_dtoa_r+0x618>)
 8028598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802859c:	ed93 6b00 	vldr	d6, [r3]
 80285a0:	9b08      	ldr	r3, [sp, #32]
 80285a2:	2b00      	cmp	r3, #0
 80285a4:	f280 80b7 	bge.w	8028716 <_dtoa_r+0x56e>
 80285a8:	f1b9 0f00 	cmp.w	r9, #0
 80285ac:	f300 80b3 	bgt.w	8028716 <_dtoa_r+0x56e>
 80285b0:	f040 823f 	bne.w	8028a32 <_dtoa_r+0x88a>
 80285b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80285b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80285bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80285c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80285c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285c8:	464c      	mov	r4, r9
 80285ca:	464f      	mov	r7, r9
 80285cc:	f280 8215 	bge.w	80289fa <_dtoa_r+0x852>
 80285d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80285d4:	2331      	movs	r3, #49	; 0x31
 80285d6:	f808 3b01 	strb.w	r3, [r8], #1
 80285da:	f10b 0b01 	add.w	fp, fp, #1
 80285de:	e211      	b.n	8028a04 <_dtoa_r+0x85c>
 80285e0:	2202      	movs	r2, #2
 80285e2:	e780      	b.n	80284e6 <_dtoa_r+0x33e>
 80285e4:	07cc      	lsls	r4, r1, #31
 80285e6:	d504      	bpl.n	80285f2 <_dtoa_r+0x44a>
 80285e8:	ed90 6b00 	vldr	d6, [r0]
 80285ec:	3201      	adds	r2, #1
 80285ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80285f2:	1049      	asrs	r1, r1, #1
 80285f4:	3008      	adds	r0, #8
 80285f6:	e777      	b.n	80284e8 <_dtoa_r+0x340>
 80285f8:	d022      	beq.n	8028640 <_dtoa_r+0x498>
 80285fa:	f1cb 0100 	rsb	r1, fp, #0
 80285fe:	4a70      	ldr	r2, [pc, #448]	; (80287c0 <_dtoa_r+0x618>)
 8028600:	f001 000f 	and.w	r0, r1, #15
 8028604:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028608:	ed92 7b00 	vldr	d7, [r2]
 802860c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8028610:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028614:	486b      	ldr	r0, [pc, #428]	; (80287c4 <_dtoa_r+0x61c>)
 8028616:	1109      	asrs	r1, r1, #4
 8028618:	2400      	movs	r4, #0
 802861a:	2202      	movs	r2, #2
 802861c:	b929      	cbnz	r1, 802862a <_dtoa_r+0x482>
 802861e:	2c00      	cmp	r4, #0
 8028620:	f43f af6a 	beq.w	80284f8 <_dtoa_r+0x350>
 8028624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028628:	e766      	b.n	80284f8 <_dtoa_r+0x350>
 802862a:	07cf      	lsls	r7, r1, #31
 802862c:	d505      	bpl.n	802863a <_dtoa_r+0x492>
 802862e:	ed90 6b00 	vldr	d6, [r0]
 8028632:	3201      	adds	r2, #1
 8028634:	2401      	movs	r4, #1
 8028636:	ee27 7b06 	vmul.f64	d7, d7, d6
 802863a:	1049      	asrs	r1, r1, #1
 802863c:	3008      	adds	r0, #8
 802863e:	e7ed      	b.n	802861c <_dtoa_r+0x474>
 8028640:	2202      	movs	r2, #2
 8028642:	e759      	b.n	80284f8 <_dtoa_r+0x350>
 8028644:	465f      	mov	r7, fp
 8028646:	4648      	mov	r0, r9
 8028648:	e775      	b.n	8028536 <_dtoa_r+0x38e>
 802864a:	ec42 1b17 	vmov	d7, r1, r2
 802864e:	4a5c      	ldr	r2, [pc, #368]	; (80287c0 <_dtoa_r+0x618>)
 8028650:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8028654:	ed12 4b02 	vldr	d4, [r2, #-8]
 8028658:	9a01      	ldr	r2, [sp, #4]
 802865a:	1814      	adds	r4, r2, r0
 802865c:	9a07      	ldr	r2, [sp, #28]
 802865e:	b352      	cbz	r2, 80286b6 <_dtoa_r+0x50e>
 8028660:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8028664:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8028668:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802866c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8028670:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028674:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028678:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802867c:	ee14 2a90 	vmov	r2, s9
 8028680:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8028684:	3230      	adds	r2, #48	; 0x30
 8028686:	ee36 6b45 	vsub.f64	d6, d6, d5
 802868a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028692:	f808 2b01 	strb.w	r2, [r8], #1
 8028696:	d439      	bmi.n	802870c <_dtoa_r+0x564>
 8028698:	ee32 5b46 	vsub.f64	d5, d2, d6
 802869c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80286a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286a4:	d472      	bmi.n	802878c <_dtoa_r+0x5e4>
 80286a6:	45a0      	cmp	r8, r4
 80286a8:	f43f af6b 	beq.w	8028582 <_dtoa_r+0x3da>
 80286ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 80286b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80286b4:	e7e0      	b.n	8028678 <_dtoa_r+0x4d0>
 80286b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80286ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80286be:	4621      	mov	r1, r4
 80286c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80286c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80286c8:	ee14 2a90 	vmov	r2, s9
 80286cc:	3230      	adds	r2, #48	; 0x30
 80286ce:	f808 2b01 	strb.w	r2, [r8], #1
 80286d2:	45a0      	cmp	r8, r4
 80286d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80286d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80286dc:	d118      	bne.n	8028710 <_dtoa_r+0x568>
 80286de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80286e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80286e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80286ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286ee:	dc4d      	bgt.n	802878c <_dtoa_r+0x5e4>
 80286f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80286f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80286f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286fc:	f57f af41 	bpl.w	8028582 <_dtoa_r+0x3da>
 8028700:	4688      	mov	r8, r1
 8028702:	3901      	subs	r1, #1
 8028704:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8028708:	2b30      	cmp	r3, #48	; 0x30
 802870a:	d0f9      	beq.n	8028700 <_dtoa_r+0x558>
 802870c:	46bb      	mov	fp, r7
 802870e:	e02a      	b.n	8028766 <_dtoa_r+0x5be>
 8028710:	ee26 6b03 	vmul.f64	d6, d6, d3
 8028714:	e7d6      	b.n	80286c4 <_dtoa_r+0x51c>
 8028716:	ed9d 7b02 	vldr	d7, [sp, #8]
 802871a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802871e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028722:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8028726:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802872a:	ee15 3a10 	vmov	r3, s10
 802872e:	3330      	adds	r3, #48	; 0x30
 8028730:	f808 3b01 	strb.w	r3, [r8], #1
 8028734:	9b01      	ldr	r3, [sp, #4]
 8028736:	eba8 0303 	sub.w	r3, r8, r3
 802873a:	4599      	cmp	r9, r3
 802873c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028740:	eea3 7b46 	vfms.f64	d7, d3, d6
 8028744:	d133      	bne.n	80287ae <_dtoa_r+0x606>
 8028746:	ee37 7b07 	vadd.f64	d7, d7, d7
 802874a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802874e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028752:	dc1a      	bgt.n	802878a <_dtoa_r+0x5e2>
 8028754:	eeb4 7b46 	vcmp.f64	d7, d6
 8028758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802875c:	d103      	bne.n	8028766 <_dtoa_r+0x5be>
 802875e:	ee15 3a10 	vmov	r3, s10
 8028762:	07d9      	lsls	r1, r3, #31
 8028764:	d411      	bmi.n	802878a <_dtoa_r+0x5e2>
 8028766:	4629      	mov	r1, r5
 8028768:	4630      	mov	r0, r6
 802876a:	f000 fd25 	bl	80291b8 <_Bfree>
 802876e:	2300      	movs	r3, #0
 8028770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028772:	f888 3000 	strb.w	r3, [r8]
 8028776:	f10b 0301 	add.w	r3, fp, #1
 802877a:	6013      	str	r3, [r2, #0]
 802877c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802877e:	2b00      	cmp	r3, #0
 8028780:	f43f ad61 	beq.w	8028246 <_dtoa_r+0x9e>
 8028784:	f8c3 8000 	str.w	r8, [r3]
 8028788:	e55d      	b.n	8028246 <_dtoa_r+0x9e>
 802878a:	465f      	mov	r7, fp
 802878c:	4643      	mov	r3, r8
 802878e:	4698      	mov	r8, r3
 8028790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028794:	2a39      	cmp	r2, #57	; 0x39
 8028796:	d106      	bne.n	80287a6 <_dtoa_r+0x5fe>
 8028798:	9a01      	ldr	r2, [sp, #4]
 802879a:	429a      	cmp	r2, r3
 802879c:	d1f7      	bne.n	802878e <_dtoa_r+0x5e6>
 802879e:	9901      	ldr	r1, [sp, #4]
 80287a0:	2230      	movs	r2, #48	; 0x30
 80287a2:	3701      	adds	r7, #1
 80287a4:	700a      	strb	r2, [r1, #0]
 80287a6:	781a      	ldrb	r2, [r3, #0]
 80287a8:	3201      	adds	r2, #1
 80287aa:	701a      	strb	r2, [r3, #0]
 80287ac:	e7ae      	b.n	802870c <_dtoa_r+0x564>
 80287ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80287b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80287b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287ba:	d1b2      	bne.n	8028722 <_dtoa_r+0x57a>
 80287bc:	e7d3      	b.n	8028766 <_dtoa_r+0x5be>
 80287be:	bf00      	nop
 80287c0:	08047d08 	.word	0x08047d08
 80287c4:	08047ce0 	.word	0x08047ce0
 80287c8:	9907      	ldr	r1, [sp, #28]
 80287ca:	2900      	cmp	r1, #0
 80287cc:	f000 80d0 	beq.w	8028970 <_dtoa_r+0x7c8>
 80287d0:	9906      	ldr	r1, [sp, #24]
 80287d2:	2901      	cmp	r1, #1
 80287d4:	f300 80b4 	bgt.w	8028940 <_dtoa_r+0x798>
 80287d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80287da:	2900      	cmp	r1, #0
 80287dc:	f000 80ac 	beq.w	8028938 <_dtoa_r+0x790>
 80287e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80287e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80287e8:	461c      	mov	r4, r3
 80287ea:	930a      	str	r3, [sp, #40]	; 0x28
 80287ec:	9b04      	ldr	r3, [sp, #16]
 80287ee:	4413      	add	r3, r2
 80287f0:	9304      	str	r3, [sp, #16]
 80287f2:	9b05      	ldr	r3, [sp, #20]
 80287f4:	2101      	movs	r1, #1
 80287f6:	4413      	add	r3, r2
 80287f8:	4630      	mov	r0, r6
 80287fa:	9305      	str	r3, [sp, #20]
 80287fc:	f000 fd94 	bl	8029328 <__i2b>
 8028800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028802:	4607      	mov	r7, r0
 8028804:	f1b8 0f00 	cmp.w	r8, #0
 8028808:	dd0d      	ble.n	8028826 <_dtoa_r+0x67e>
 802880a:	9a05      	ldr	r2, [sp, #20]
 802880c:	2a00      	cmp	r2, #0
 802880e:	dd0a      	ble.n	8028826 <_dtoa_r+0x67e>
 8028810:	4542      	cmp	r2, r8
 8028812:	9904      	ldr	r1, [sp, #16]
 8028814:	bfa8      	it	ge
 8028816:	4642      	movge	r2, r8
 8028818:	1a89      	subs	r1, r1, r2
 802881a:	9104      	str	r1, [sp, #16]
 802881c:	9905      	ldr	r1, [sp, #20]
 802881e:	eba8 0802 	sub.w	r8, r8, r2
 8028822:	1a8a      	subs	r2, r1, r2
 8028824:	9205      	str	r2, [sp, #20]
 8028826:	b303      	cbz	r3, 802886a <_dtoa_r+0x6c2>
 8028828:	9a07      	ldr	r2, [sp, #28]
 802882a:	2a00      	cmp	r2, #0
 802882c:	f000 80a5 	beq.w	802897a <_dtoa_r+0x7d2>
 8028830:	2c00      	cmp	r4, #0
 8028832:	dd13      	ble.n	802885c <_dtoa_r+0x6b4>
 8028834:	4639      	mov	r1, r7
 8028836:	4622      	mov	r2, r4
 8028838:	4630      	mov	r0, r6
 802883a:	930d      	str	r3, [sp, #52]	; 0x34
 802883c:	f000 fe34 	bl	80294a8 <__pow5mult>
 8028840:	462a      	mov	r2, r5
 8028842:	4601      	mov	r1, r0
 8028844:	4607      	mov	r7, r0
 8028846:	4630      	mov	r0, r6
 8028848:	f000 fd84 	bl	8029354 <__multiply>
 802884c:	4629      	mov	r1, r5
 802884e:	900a      	str	r0, [sp, #40]	; 0x28
 8028850:	4630      	mov	r0, r6
 8028852:	f000 fcb1 	bl	80291b8 <_Bfree>
 8028856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802885a:	4615      	mov	r5, r2
 802885c:	1b1a      	subs	r2, r3, r4
 802885e:	d004      	beq.n	802886a <_dtoa_r+0x6c2>
 8028860:	4629      	mov	r1, r5
 8028862:	4630      	mov	r0, r6
 8028864:	f000 fe20 	bl	80294a8 <__pow5mult>
 8028868:	4605      	mov	r5, r0
 802886a:	2101      	movs	r1, #1
 802886c:	4630      	mov	r0, r6
 802886e:	f000 fd5b 	bl	8029328 <__i2b>
 8028872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028874:	2b00      	cmp	r3, #0
 8028876:	4604      	mov	r4, r0
 8028878:	f340 8081 	ble.w	802897e <_dtoa_r+0x7d6>
 802887c:	461a      	mov	r2, r3
 802887e:	4601      	mov	r1, r0
 8028880:	4630      	mov	r0, r6
 8028882:	f000 fe11 	bl	80294a8 <__pow5mult>
 8028886:	9b06      	ldr	r3, [sp, #24]
 8028888:	2b01      	cmp	r3, #1
 802888a:	4604      	mov	r4, r0
 802888c:	dd7a      	ble.n	8028984 <_dtoa_r+0x7dc>
 802888e:	2300      	movs	r3, #0
 8028890:	930a      	str	r3, [sp, #40]	; 0x28
 8028892:	6922      	ldr	r2, [r4, #16]
 8028894:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028898:	6910      	ldr	r0, [r2, #16]
 802889a:	f000 fcf5 	bl	8029288 <__hi0bits>
 802889e:	f1c0 0020 	rsb	r0, r0, #32
 80288a2:	9b05      	ldr	r3, [sp, #20]
 80288a4:	4418      	add	r0, r3
 80288a6:	f010 001f 	ands.w	r0, r0, #31
 80288aa:	f000 808c 	beq.w	80289c6 <_dtoa_r+0x81e>
 80288ae:	f1c0 0220 	rsb	r2, r0, #32
 80288b2:	2a04      	cmp	r2, #4
 80288b4:	f340 8085 	ble.w	80289c2 <_dtoa_r+0x81a>
 80288b8:	f1c0 001c 	rsb	r0, r0, #28
 80288bc:	9b04      	ldr	r3, [sp, #16]
 80288be:	4403      	add	r3, r0
 80288c0:	9304      	str	r3, [sp, #16]
 80288c2:	9b05      	ldr	r3, [sp, #20]
 80288c4:	4403      	add	r3, r0
 80288c6:	4480      	add	r8, r0
 80288c8:	9305      	str	r3, [sp, #20]
 80288ca:	9b04      	ldr	r3, [sp, #16]
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	dd05      	ble.n	80288dc <_dtoa_r+0x734>
 80288d0:	4629      	mov	r1, r5
 80288d2:	461a      	mov	r2, r3
 80288d4:	4630      	mov	r0, r6
 80288d6:	f000 fe41 	bl	802955c <__lshift>
 80288da:	4605      	mov	r5, r0
 80288dc:	9b05      	ldr	r3, [sp, #20]
 80288de:	2b00      	cmp	r3, #0
 80288e0:	dd05      	ble.n	80288ee <_dtoa_r+0x746>
 80288e2:	4621      	mov	r1, r4
 80288e4:	461a      	mov	r2, r3
 80288e6:	4630      	mov	r0, r6
 80288e8:	f000 fe38 	bl	802955c <__lshift>
 80288ec:	4604      	mov	r4, r0
 80288ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80288f0:	2b00      	cmp	r3, #0
 80288f2:	d06a      	beq.n	80289ca <_dtoa_r+0x822>
 80288f4:	4621      	mov	r1, r4
 80288f6:	4628      	mov	r0, r5
 80288f8:	f000 fea0 	bl	802963c <__mcmp>
 80288fc:	2800      	cmp	r0, #0
 80288fe:	da64      	bge.n	80289ca <_dtoa_r+0x822>
 8028900:	2300      	movs	r3, #0
 8028902:	4629      	mov	r1, r5
 8028904:	220a      	movs	r2, #10
 8028906:	4630      	mov	r0, r6
 8028908:	f000 fc78 	bl	80291fc <__multadd>
 802890c:	9b07      	ldr	r3, [sp, #28]
 802890e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028912:	4605      	mov	r5, r0
 8028914:	2b00      	cmp	r3, #0
 8028916:	f000 8191 	beq.w	8028c3c <_dtoa_r+0xa94>
 802891a:	4639      	mov	r1, r7
 802891c:	2300      	movs	r3, #0
 802891e:	220a      	movs	r2, #10
 8028920:	4630      	mov	r0, r6
 8028922:	f000 fc6b 	bl	80291fc <__multadd>
 8028926:	f1ba 0f00 	cmp.w	sl, #0
 802892a:	4607      	mov	r7, r0
 802892c:	f300 808d 	bgt.w	8028a4a <_dtoa_r+0x8a2>
 8028930:	9b06      	ldr	r3, [sp, #24]
 8028932:	2b02      	cmp	r3, #2
 8028934:	dc50      	bgt.n	80289d8 <_dtoa_r+0x830>
 8028936:	e088      	b.n	8028a4a <_dtoa_r+0x8a2>
 8028938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802893a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802893e:	e751      	b.n	80287e4 <_dtoa_r+0x63c>
 8028940:	f109 34ff 	add.w	r4, r9, #4294967295
 8028944:	42a3      	cmp	r3, r4
 8028946:	bfbf      	itttt	lt
 8028948:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 802894a:	1ae3      	sublt	r3, r4, r3
 802894c:	18d2      	addlt	r2, r2, r3
 802894e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8028950:	bfb6      	itet	lt
 8028952:	4623      	movlt	r3, r4
 8028954:	1b1c      	subge	r4, r3, r4
 8028956:	2400      	movlt	r4, #0
 8028958:	f1b9 0f00 	cmp.w	r9, #0
 802895c:	bfb5      	itete	lt
 802895e:	9a04      	ldrlt	r2, [sp, #16]
 8028960:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8028964:	eba2 0809 	sublt.w	r8, r2, r9
 8028968:	464a      	movge	r2, r9
 802896a:	bfb8      	it	lt
 802896c:	2200      	movlt	r2, #0
 802896e:	e73c      	b.n	80287ea <_dtoa_r+0x642>
 8028970:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028974:	9f07      	ldr	r7, [sp, #28]
 8028976:	461c      	mov	r4, r3
 8028978:	e744      	b.n	8028804 <_dtoa_r+0x65c>
 802897a:	461a      	mov	r2, r3
 802897c:	e770      	b.n	8028860 <_dtoa_r+0x6b8>
 802897e:	9b06      	ldr	r3, [sp, #24]
 8028980:	2b01      	cmp	r3, #1
 8028982:	dc18      	bgt.n	80289b6 <_dtoa_r+0x80e>
 8028984:	9b02      	ldr	r3, [sp, #8]
 8028986:	b9b3      	cbnz	r3, 80289b6 <_dtoa_r+0x80e>
 8028988:	9b03      	ldr	r3, [sp, #12]
 802898a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802898e:	b9a2      	cbnz	r2, 80289ba <_dtoa_r+0x812>
 8028990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8028994:	0d12      	lsrs	r2, r2, #20
 8028996:	0512      	lsls	r2, r2, #20
 8028998:	b18a      	cbz	r2, 80289be <_dtoa_r+0x816>
 802899a:	9b04      	ldr	r3, [sp, #16]
 802899c:	3301      	adds	r3, #1
 802899e:	9304      	str	r3, [sp, #16]
 80289a0:	9b05      	ldr	r3, [sp, #20]
 80289a2:	3301      	adds	r3, #1
 80289a4:	9305      	str	r3, [sp, #20]
 80289a6:	2301      	movs	r3, #1
 80289a8:	930a      	str	r3, [sp, #40]	; 0x28
 80289aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80289ac:	2b00      	cmp	r3, #0
 80289ae:	f47f af70 	bne.w	8028892 <_dtoa_r+0x6ea>
 80289b2:	2001      	movs	r0, #1
 80289b4:	e775      	b.n	80288a2 <_dtoa_r+0x6fa>
 80289b6:	2300      	movs	r3, #0
 80289b8:	e7f6      	b.n	80289a8 <_dtoa_r+0x800>
 80289ba:	9b02      	ldr	r3, [sp, #8]
 80289bc:	e7f4      	b.n	80289a8 <_dtoa_r+0x800>
 80289be:	920a      	str	r2, [sp, #40]	; 0x28
 80289c0:	e7f3      	b.n	80289aa <_dtoa_r+0x802>
 80289c2:	d082      	beq.n	80288ca <_dtoa_r+0x722>
 80289c4:	4610      	mov	r0, r2
 80289c6:	301c      	adds	r0, #28
 80289c8:	e778      	b.n	80288bc <_dtoa_r+0x714>
 80289ca:	f1b9 0f00 	cmp.w	r9, #0
 80289ce:	dc37      	bgt.n	8028a40 <_dtoa_r+0x898>
 80289d0:	9b06      	ldr	r3, [sp, #24]
 80289d2:	2b02      	cmp	r3, #2
 80289d4:	dd34      	ble.n	8028a40 <_dtoa_r+0x898>
 80289d6:	46ca      	mov	sl, r9
 80289d8:	f1ba 0f00 	cmp.w	sl, #0
 80289dc:	d10d      	bne.n	80289fa <_dtoa_r+0x852>
 80289de:	4621      	mov	r1, r4
 80289e0:	4653      	mov	r3, sl
 80289e2:	2205      	movs	r2, #5
 80289e4:	4630      	mov	r0, r6
 80289e6:	f000 fc09 	bl	80291fc <__multadd>
 80289ea:	4601      	mov	r1, r0
 80289ec:	4604      	mov	r4, r0
 80289ee:	4628      	mov	r0, r5
 80289f0:	f000 fe24 	bl	802963c <__mcmp>
 80289f4:	2800      	cmp	r0, #0
 80289f6:	f73f adeb 	bgt.w	80285d0 <_dtoa_r+0x428>
 80289fa:	9b08      	ldr	r3, [sp, #32]
 80289fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028a00:	ea6f 0b03 	mvn.w	fp, r3
 8028a04:	f04f 0900 	mov.w	r9, #0
 8028a08:	4621      	mov	r1, r4
 8028a0a:	4630      	mov	r0, r6
 8028a0c:	f000 fbd4 	bl	80291b8 <_Bfree>
 8028a10:	2f00      	cmp	r7, #0
 8028a12:	f43f aea8 	beq.w	8028766 <_dtoa_r+0x5be>
 8028a16:	f1b9 0f00 	cmp.w	r9, #0
 8028a1a:	d005      	beq.n	8028a28 <_dtoa_r+0x880>
 8028a1c:	45b9      	cmp	r9, r7
 8028a1e:	d003      	beq.n	8028a28 <_dtoa_r+0x880>
 8028a20:	4649      	mov	r1, r9
 8028a22:	4630      	mov	r0, r6
 8028a24:	f000 fbc8 	bl	80291b8 <_Bfree>
 8028a28:	4639      	mov	r1, r7
 8028a2a:	4630      	mov	r0, r6
 8028a2c:	f000 fbc4 	bl	80291b8 <_Bfree>
 8028a30:	e699      	b.n	8028766 <_dtoa_r+0x5be>
 8028a32:	2400      	movs	r4, #0
 8028a34:	4627      	mov	r7, r4
 8028a36:	e7e0      	b.n	80289fa <_dtoa_r+0x852>
 8028a38:	46bb      	mov	fp, r7
 8028a3a:	4604      	mov	r4, r0
 8028a3c:	4607      	mov	r7, r0
 8028a3e:	e5c7      	b.n	80285d0 <_dtoa_r+0x428>
 8028a40:	9b07      	ldr	r3, [sp, #28]
 8028a42:	46ca      	mov	sl, r9
 8028a44:	2b00      	cmp	r3, #0
 8028a46:	f000 8100 	beq.w	8028c4a <_dtoa_r+0xaa2>
 8028a4a:	f1b8 0f00 	cmp.w	r8, #0
 8028a4e:	dd05      	ble.n	8028a5c <_dtoa_r+0x8b4>
 8028a50:	4639      	mov	r1, r7
 8028a52:	4642      	mov	r2, r8
 8028a54:	4630      	mov	r0, r6
 8028a56:	f000 fd81 	bl	802955c <__lshift>
 8028a5a:	4607      	mov	r7, r0
 8028a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	d05d      	beq.n	8028b1e <_dtoa_r+0x976>
 8028a62:	6879      	ldr	r1, [r7, #4]
 8028a64:	4630      	mov	r0, r6
 8028a66:	f000 fb67 	bl	8029138 <_Balloc>
 8028a6a:	4680      	mov	r8, r0
 8028a6c:	b928      	cbnz	r0, 8028a7a <_dtoa_r+0x8d2>
 8028a6e:	4b82      	ldr	r3, [pc, #520]	; (8028c78 <_dtoa_r+0xad0>)
 8028a70:	4602      	mov	r2, r0
 8028a72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8028a76:	f7ff bbaf 	b.w	80281d8 <_dtoa_r+0x30>
 8028a7a:	693a      	ldr	r2, [r7, #16]
 8028a7c:	3202      	adds	r2, #2
 8028a7e:	0092      	lsls	r2, r2, #2
 8028a80:	f107 010c 	add.w	r1, r7, #12
 8028a84:	300c      	adds	r0, #12
 8028a86:	f7fc fe9f 	bl	80257c8 <memcpy>
 8028a8a:	2201      	movs	r2, #1
 8028a8c:	4641      	mov	r1, r8
 8028a8e:	4630      	mov	r0, r6
 8028a90:	f000 fd64 	bl	802955c <__lshift>
 8028a94:	9b01      	ldr	r3, [sp, #4]
 8028a96:	3301      	adds	r3, #1
 8028a98:	9304      	str	r3, [sp, #16]
 8028a9a:	9b01      	ldr	r3, [sp, #4]
 8028a9c:	4453      	add	r3, sl
 8028a9e:	9308      	str	r3, [sp, #32]
 8028aa0:	9b02      	ldr	r3, [sp, #8]
 8028aa2:	f003 0301 	and.w	r3, r3, #1
 8028aa6:	46b9      	mov	r9, r7
 8028aa8:	9307      	str	r3, [sp, #28]
 8028aaa:	4607      	mov	r7, r0
 8028aac:	9b04      	ldr	r3, [sp, #16]
 8028aae:	4621      	mov	r1, r4
 8028ab0:	3b01      	subs	r3, #1
 8028ab2:	4628      	mov	r0, r5
 8028ab4:	9302      	str	r3, [sp, #8]
 8028ab6:	f7ff faeb 	bl	8028090 <quorem>
 8028aba:	4603      	mov	r3, r0
 8028abc:	3330      	adds	r3, #48	; 0x30
 8028abe:	9005      	str	r0, [sp, #20]
 8028ac0:	4649      	mov	r1, r9
 8028ac2:	4628      	mov	r0, r5
 8028ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8028ac6:	f000 fdb9 	bl	802963c <__mcmp>
 8028aca:	463a      	mov	r2, r7
 8028acc:	4682      	mov	sl, r0
 8028ace:	4621      	mov	r1, r4
 8028ad0:	4630      	mov	r0, r6
 8028ad2:	f000 fdcf 	bl	8029674 <__mdiff>
 8028ad6:	68c2      	ldr	r2, [r0, #12]
 8028ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ada:	4680      	mov	r8, r0
 8028adc:	bb0a      	cbnz	r2, 8028b22 <_dtoa_r+0x97a>
 8028ade:	4601      	mov	r1, r0
 8028ae0:	4628      	mov	r0, r5
 8028ae2:	f000 fdab 	bl	802963c <__mcmp>
 8028ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ae8:	4602      	mov	r2, r0
 8028aea:	4641      	mov	r1, r8
 8028aec:	4630      	mov	r0, r6
 8028aee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8028af2:	f000 fb61 	bl	80291b8 <_Bfree>
 8028af6:	9b06      	ldr	r3, [sp, #24]
 8028af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028afa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8028afe:	ea43 0102 	orr.w	r1, r3, r2
 8028b02:	9b07      	ldr	r3, [sp, #28]
 8028b04:	430b      	orrs	r3, r1
 8028b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b08:	d10d      	bne.n	8028b26 <_dtoa_r+0x97e>
 8028b0a:	2b39      	cmp	r3, #57	; 0x39
 8028b0c:	d029      	beq.n	8028b62 <_dtoa_r+0x9ba>
 8028b0e:	f1ba 0f00 	cmp.w	sl, #0
 8028b12:	dd01      	ble.n	8028b18 <_dtoa_r+0x970>
 8028b14:	9b05      	ldr	r3, [sp, #20]
 8028b16:	3331      	adds	r3, #49	; 0x31
 8028b18:	9a02      	ldr	r2, [sp, #8]
 8028b1a:	7013      	strb	r3, [r2, #0]
 8028b1c:	e774      	b.n	8028a08 <_dtoa_r+0x860>
 8028b1e:	4638      	mov	r0, r7
 8028b20:	e7b8      	b.n	8028a94 <_dtoa_r+0x8ec>
 8028b22:	2201      	movs	r2, #1
 8028b24:	e7e1      	b.n	8028aea <_dtoa_r+0x942>
 8028b26:	f1ba 0f00 	cmp.w	sl, #0
 8028b2a:	db06      	blt.n	8028b3a <_dtoa_r+0x992>
 8028b2c:	9906      	ldr	r1, [sp, #24]
 8028b2e:	ea41 0a0a 	orr.w	sl, r1, sl
 8028b32:	9907      	ldr	r1, [sp, #28]
 8028b34:	ea5a 0101 	orrs.w	r1, sl, r1
 8028b38:	d120      	bne.n	8028b7c <_dtoa_r+0x9d4>
 8028b3a:	2a00      	cmp	r2, #0
 8028b3c:	ddec      	ble.n	8028b18 <_dtoa_r+0x970>
 8028b3e:	4629      	mov	r1, r5
 8028b40:	2201      	movs	r2, #1
 8028b42:	4630      	mov	r0, r6
 8028b44:	9304      	str	r3, [sp, #16]
 8028b46:	f000 fd09 	bl	802955c <__lshift>
 8028b4a:	4621      	mov	r1, r4
 8028b4c:	4605      	mov	r5, r0
 8028b4e:	f000 fd75 	bl	802963c <__mcmp>
 8028b52:	2800      	cmp	r0, #0
 8028b54:	9b04      	ldr	r3, [sp, #16]
 8028b56:	dc02      	bgt.n	8028b5e <_dtoa_r+0x9b6>
 8028b58:	d1de      	bne.n	8028b18 <_dtoa_r+0x970>
 8028b5a:	07da      	lsls	r2, r3, #31
 8028b5c:	d5dc      	bpl.n	8028b18 <_dtoa_r+0x970>
 8028b5e:	2b39      	cmp	r3, #57	; 0x39
 8028b60:	d1d8      	bne.n	8028b14 <_dtoa_r+0x96c>
 8028b62:	9a02      	ldr	r2, [sp, #8]
 8028b64:	2339      	movs	r3, #57	; 0x39
 8028b66:	7013      	strb	r3, [r2, #0]
 8028b68:	4643      	mov	r3, r8
 8028b6a:	4698      	mov	r8, r3
 8028b6c:	3b01      	subs	r3, #1
 8028b6e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8028b72:	2a39      	cmp	r2, #57	; 0x39
 8028b74:	d051      	beq.n	8028c1a <_dtoa_r+0xa72>
 8028b76:	3201      	adds	r2, #1
 8028b78:	701a      	strb	r2, [r3, #0]
 8028b7a:	e745      	b.n	8028a08 <_dtoa_r+0x860>
 8028b7c:	2a00      	cmp	r2, #0
 8028b7e:	dd03      	ble.n	8028b88 <_dtoa_r+0x9e0>
 8028b80:	2b39      	cmp	r3, #57	; 0x39
 8028b82:	d0ee      	beq.n	8028b62 <_dtoa_r+0x9ba>
 8028b84:	3301      	adds	r3, #1
 8028b86:	e7c7      	b.n	8028b18 <_dtoa_r+0x970>
 8028b88:	9a04      	ldr	r2, [sp, #16]
 8028b8a:	9908      	ldr	r1, [sp, #32]
 8028b8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8028b90:	428a      	cmp	r2, r1
 8028b92:	d02b      	beq.n	8028bec <_dtoa_r+0xa44>
 8028b94:	4629      	mov	r1, r5
 8028b96:	2300      	movs	r3, #0
 8028b98:	220a      	movs	r2, #10
 8028b9a:	4630      	mov	r0, r6
 8028b9c:	f000 fb2e 	bl	80291fc <__multadd>
 8028ba0:	45b9      	cmp	r9, r7
 8028ba2:	4605      	mov	r5, r0
 8028ba4:	f04f 0300 	mov.w	r3, #0
 8028ba8:	f04f 020a 	mov.w	r2, #10
 8028bac:	4649      	mov	r1, r9
 8028bae:	4630      	mov	r0, r6
 8028bb0:	d107      	bne.n	8028bc2 <_dtoa_r+0xa1a>
 8028bb2:	f000 fb23 	bl	80291fc <__multadd>
 8028bb6:	4681      	mov	r9, r0
 8028bb8:	4607      	mov	r7, r0
 8028bba:	9b04      	ldr	r3, [sp, #16]
 8028bbc:	3301      	adds	r3, #1
 8028bbe:	9304      	str	r3, [sp, #16]
 8028bc0:	e774      	b.n	8028aac <_dtoa_r+0x904>
 8028bc2:	f000 fb1b 	bl	80291fc <__multadd>
 8028bc6:	4639      	mov	r1, r7
 8028bc8:	4681      	mov	r9, r0
 8028bca:	2300      	movs	r3, #0
 8028bcc:	220a      	movs	r2, #10
 8028bce:	4630      	mov	r0, r6
 8028bd0:	f000 fb14 	bl	80291fc <__multadd>
 8028bd4:	4607      	mov	r7, r0
 8028bd6:	e7f0      	b.n	8028bba <_dtoa_r+0xa12>
 8028bd8:	f1ba 0f00 	cmp.w	sl, #0
 8028bdc:	9a01      	ldr	r2, [sp, #4]
 8028bde:	bfcc      	ite	gt
 8028be0:	46d0      	movgt	r8, sl
 8028be2:	f04f 0801 	movle.w	r8, #1
 8028be6:	4490      	add	r8, r2
 8028be8:	f04f 0900 	mov.w	r9, #0
 8028bec:	4629      	mov	r1, r5
 8028bee:	2201      	movs	r2, #1
 8028bf0:	4630      	mov	r0, r6
 8028bf2:	9302      	str	r3, [sp, #8]
 8028bf4:	f000 fcb2 	bl	802955c <__lshift>
 8028bf8:	4621      	mov	r1, r4
 8028bfa:	4605      	mov	r5, r0
 8028bfc:	f000 fd1e 	bl	802963c <__mcmp>
 8028c00:	2800      	cmp	r0, #0
 8028c02:	dcb1      	bgt.n	8028b68 <_dtoa_r+0x9c0>
 8028c04:	d102      	bne.n	8028c0c <_dtoa_r+0xa64>
 8028c06:	9b02      	ldr	r3, [sp, #8]
 8028c08:	07db      	lsls	r3, r3, #31
 8028c0a:	d4ad      	bmi.n	8028b68 <_dtoa_r+0x9c0>
 8028c0c:	4643      	mov	r3, r8
 8028c0e:	4698      	mov	r8, r3
 8028c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028c14:	2a30      	cmp	r2, #48	; 0x30
 8028c16:	d0fa      	beq.n	8028c0e <_dtoa_r+0xa66>
 8028c18:	e6f6      	b.n	8028a08 <_dtoa_r+0x860>
 8028c1a:	9a01      	ldr	r2, [sp, #4]
 8028c1c:	429a      	cmp	r2, r3
 8028c1e:	d1a4      	bne.n	8028b6a <_dtoa_r+0x9c2>
 8028c20:	f10b 0b01 	add.w	fp, fp, #1
 8028c24:	2331      	movs	r3, #49	; 0x31
 8028c26:	e778      	b.n	8028b1a <_dtoa_r+0x972>
 8028c28:	4b14      	ldr	r3, [pc, #80]	; (8028c7c <_dtoa_r+0xad4>)
 8028c2a:	f7ff bb27 	b.w	802827c <_dtoa_r+0xd4>
 8028c2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028c30:	2b00      	cmp	r3, #0
 8028c32:	f47f ab03 	bne.w	802823c <_dtoa_r+0x94>
 8028c36:	4b12      	ldr	r3, [pc, #72]	; (8028c80 <_dtoa_r+0xad8>)
 8028c38:	f7ff bb20 	b.w	802827c <_dtoa_r+0xd4>
 8028c3c:	f1ba 0f00 	cmp.w	sl, #0
 8028c40:	dc03      	bgt.n	8028c4a <_dtoa_r+0xaa2>
 8028c42:	9b06      	ldr	r3, [sp, #24]
 8028c44:	2b02      	cmp	r3, #2
 8028c46:	f73f aec7 	bgt.w	80289d8 <_dtoa_r+0x830>
 8028c4a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028c4e:	4621      	mov	r1, r4
 8028c50:	4628      	mov	r0, r5
 8028c52:	f7ff fa1d 	bl	8028090 <quorem>
 8028c56:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8028c5a:	f808 3b01 	strb.w	r3, [r8], #1
 8028c5e:	9a01      	ldr	r2, [sp, #4]
 8028c60:	eba8 0202 	sub.w	r2, r8, r2
 8028c64:	4592      	cmp	sl, r2
 8028c66:	ddb7      	ble.n	8028bd8 <_dtoa_r+0xa30>
 8028c68:	4629      	mov	r1, r5
 8028c6a:	2300      	movs	r3, #0
 8028c6c:	220a      	movs	r2, #10
 8028c6e:	4630      	mov	r0, r6
 8028c70:	f000 fac4 	bl	80291fc <__multadd>
 8028c74:	4605      	mov	r5, r0
 8028c76:	e7ea      	b.n	8028c4e <_dtoa_r+0xaa6>
 8028c78:	08047c6d 	.word	0x08047c6d
 8028c7c:	08047df1 	.word	0x08047df1
 8028c80:	08047c05 	.word	0x08047c05

08028c84 <__errno>:
 8028c84:	4b01      	ldr	r3, [pc, #4]	; (8028c8c <__errno+0x8>)
 8028c86:	6818      	ldr	r0, [r3, #0]
 8028c88:	4770      	bx	lr
 8028c8a:	bf00      	nop
 8028c8c:	200004a4 	.word	0x200004a4

08028c90 <__sflush_r>:
 8028c90:	898a      	ldrh	r2, [r1, #12]
 8028c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c96:	4605      	mov	r5, r0
 8028c98:	0710      	lsls	r0, r2, #28
 8028c9a:	460c      	mov	r4, r1
 8028c9c:	d458      	bmi.n	8028d50 <__sflush_r+0xc0>
 8028c9e:	684b      	ldr	r3, [r1, #4]
 8028ca0:	2b00      	cmp	r3, #0
 8028ca2:	dc05      	bgt.n	8028cb0 <__sflush_r+0x20>
 8028ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	dc02      	bgt.n	8028cb0 <__sflush_r+0x20>
 8028caa:	2000      	movs	r0, #0
 8028cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028cb2:	2e00      	cmp	r6, #0
 8028cb4:	d0f9      	beq.n	8028caa <__sflush_r+0x1a>
 8028cb6:	2300      	movs	r3, #0
 8028cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028cbc:	682f      	ldr	r7, [r5, #0]
 8028cbe:	602b      	str	r3, [r5, #0]
 8028cc0:	d032      	beq.n	8028d28 <__sflush_r+0x98>
 8028cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028cc4:	89a3      	ldrh	r3, [r4, #12]
 8028cc6:	075a      	lsls	r2, r3, #29
 8028cc8:	d505      	bpl.n	8028cd6 <__sflush_r+0x46>
 8028cca:	6863      	ldr	r3, [r4, #4]
 8028ccc:	1ac0      	subs	r0, r0, r3
 8028cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028cd0:	b10b      	cbz	r3, 8028cd6 <__sflush_r+0x46>
 8028cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028cd4:	1ac0      	subs	r0, r0, r3
 8028cd6:	2300      	movs	r3, #0
 8028cd8:	4602      	mov	r2, r0
 8028cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028cdc:	6a21      	ldr	r1, [r4, #32]
 8028cde:	4628      	mov	r0, r5
 8028ce0:	47b0      	blx	r6
 8028ce2:	1c43      	adds	r3, r0, #1
 8028ce4:	89a3      	ldrh	r3, [r4, #12]
 8028ce6:	d106      	bne.n	8028cf6 <__sflush_r+0x66>
 8028ce8:	6829      	ldr	r1, [r5, #0]
 8028cea:	291d      	cmp	r1, #29
 8028cec:	d82c      	bhi.n	8028d48 <__sflush_r+0xb8>
 8028cee:	4a2a      	ldr	r2, [pc, #168]	; (8028d98 <__sflush_r+0x108>)
 8028cf0:	40ca      	lsrs	r2, r1
 8028cf2:	07d6      	lsls	r6, r2, #31
 8028cf4:	d528      	bpl.n	8028d48 <__sflush_r+0xb8>
 8028cf6:	2200      	movs	r2, #0
 8028cf8:	6062      	str	r2, [r4, #4]
 8028cfa:	04d9      	lsls	r1, r3, #19
 8028cfc:	6922      	ldr	r2, [r4, #16]
 8028cfe:	6022      	str	r2, [r4, #0]
 8028d00:	d504      	bpl.n	8028d0c <__sflush_r+0x7c>
 8028d02:	1c42      	adds	r2, r0, #1
 8028d04:	d101      	bne.n	8028d0a <__sflush_r+0x7a>
 8028d06:	682b      	ldr	r3, [r5, #0]
 8028d08:	b903      	cbnz	r3, 8028d0c <__sflush_r+0x7c>
 8028d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8028d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028d0e:	602f      	str	r7, [r5, #0]
 8028d10:	2900      	cmp	r1, #0
 8028d12:	d0ca      	beq.n	8028caa <__sflush_r+0x1a>
 8028d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d18:	4299      	cmp	r1, r3
 8028d1a:	d002      	beq.n	8028d22 <__sflush_r+0x92>
 8028d1c:	4628      	mov	r0, r5
 8028d1e:	f7fc fff5 	bl	8025d0c <_free_r>
 8028d22:	2000      	movs	r0, #0
 8028d24:	6360      	str	r0, [r4, #52]	; 0x34
 8028d26:	e7c1      	b.n	8028cac <__sflush_r+0x1c>
 8028d28:	6a21      	ldr	r1, [r4, #32]
 8028d2a:	2301      	movs	r3, #1
 8028d2c:	4628      	mov	r0, r5
 8028d2e:	47b0      	blx	r6
 8028d30:	1c41      	adds	r1, r0, #1
 8028d32:	d1c7      	bne.n	8028cc4 <__sflush_r+0x34>
 8028d34:	682b      	ldr	r3, [r5, #0]
 8028d36:	2b00      	cmp	r3, #0
 8028d38:	d0c4      	beq.n	8028cc4 <__sflush_r+0x34>
 8028d3a:	2b1d      	cmp	r3, #29
 8028d3c:	d001      	beq.n	8028d42 <__sflush_r+0xb2>
 8028d3e:	2b16      	cmp	r3, #22
 8028d40:	d101      	bne.n	8028d46 <__sflush_r+0xb6>
 8028d42:	602f      	str	r7, [r5, #0]
 8028d44:	e7b1      	b.n	8028caa <__sflush_r+0x1a>
 8028d46:	89a3      	ldrh	r3, [r4, #12]
 8028d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d4c:	81a3      	strh	r3, [r4, #12]
 8028d4e:	e7ad      	b.n	8028cac <__sflush_r+0x1c>
 8028d50:	690f      	ldr	r7, [r1, #16]
 8028d52:	2f00      	cmp	r7, #0
 8028d54:	d0a9      	beq.n	8028caa <__sflush_r+0x1a>
 8028d56:	0793      	lsls	r3, r2, #30
 8028d58:	680e      	ldr	r6, [r1, #0]
 8028d5a:	bf08      	it	eq
 8028d5c:	694b      	ldreq	r3, [r1, #20]
 8028d5e:	600f      	str	r7, [r1, #0]
 8028d60:	bf18      	it	ne
 8028d62:	2300      	movne	r3, #0
 8028d64:	eba6 0807 	sub.w	r8, r6, r7
 8028d68:	608b      	str	r3, [r1, #8]
 8028d6a:	f1b8 0f00 	cmp.w	r8, #0
 8028d6e:	dd9c      	ble.n	8028caa <__sflush_r+0x1a>
 8028d70:	6a21      	ldr	r1, [r4, #32]
 8028d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028d74:	4643      	mov	r3, r8
 8028d76:	463a      	mov	r2, r7
 8028d78:	4628      	mov	r0, r5
 8028d7a:	47b0      	blx	r6
 8028d7c:	2800      	cmp	r0, #0
 8028d7e:	dc06      	bgt.n	8028d8e <__sflush_r+0xfe>
 8028d80:	89a3      	ldrh	r3, [r4, #12]
 8028d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028d86:	81a3      	strh	r3, [r4, #12]
 8028d88:	f04f 30ff 	mov.w	r0, #4294967295
 8028d8c:	e78e      	b.n	8028cac <__sflush_r+0x1c>
 8028d8e:	4407      	add	r7, r0
 8028d90:	eba8 0800 	sub.w	r8, r8, r0
 8028d94:	e7e9      	b.n	8028d6a <__sflush_r+0xda>
 8028d96:	bf00      	nop
 8028d98:	20400001 	.word	0x20400001

08028d9c <_fflush_r>:
 8028d9c:	b538      	push	{r3, r4, r5, lr}
 8028d9e:	690b      	ldr	r3, [r1, #16]
 8028da0:	4605      	mov	r5, r0
 8028da2:	460c      	mov	r4, r1
 8028da4:	b913      	cbnz	r3, 8028dac <_fflush_r+0x10>
 8028da6:	2500      	movs	r5, #0
 8028da8:	4628      	mov	r0, r5
 8028daa:	bd38      	pop	{r3, r4, r5, pc}
 8028dac:	b118      	cbz	r0, 8028db6 <_fflush_r+0x1a>
 8028dae:	6983      	ldr	r3, [r0, #24]
 8028db0:	b90b      	cbnz	r3, 8028db6 <_fflush_r+0x1a>
 8028db2:	f7fc fb0f 	bl	80253d4 <__sinit>
 8028db6:	4b14      	ldr	r3, [pc, #80]	; (8028e08 <_fflush_r+0x6c>)
 8028db8:	429c      	cmp	r4, r3
 8028dba:	d11b      	bne.n	8028df4 <_fflush_r+0x58>
 8028dbc:	686c      	ldr	r4, [r5, #4]
 8028dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028dc2:	2b00      	cmp	r3, #0
 8028dc4:	d0ef      	beq.n	8028da6 <_fflush_r+0xa>
 8028dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028dc8:	07d0      	lsls	r0, r2, #31
 8028dca:	d404      	bmi.n	8028dd6 <_fflush_r+0x3a>
 8028dcc:	0599      	lsls	r1, r3, #22
 8028dce:	d402      	bmi.n	8028dd6 <_fflush_r+0x3a>
 8028dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028dd2:	f7fc fcd5 	bl	8025780 <__retarget_lock_acquire_recursive>
 8028dd6:	4628      	mov	r0, r5
 8028dd8:	4621      	mov	r1, r4
 8028dda:	f7ff ff59 	bl	8028c90 <__sflush_r>
 8028dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028de0:	07da      	lsls	r2, r3, #31
 8028de2:	4605      	mov	r5, r0
 8028de4:	d4e0      	bmi.n	8028da8 <_fflush_r+0xc>
 8028de6:	89a3      	ldrh	r3, [r4, #12]
 8028de8:	059b      	lsls	r3, r3, #22
 8028dea:	d4dd      	bmi.n	8028da8 <_fflush_r+0xc>
 8028dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028dee:	f7fc fcc9 	bl	8025784 <__retarget_lock_release_recursive>
 8028df2:	e7d9      	b.n	8028da8 <_fflush_r+0xc>
 8028df4:	4b05      	ldr	r3, [pc, #20]	; (8028e0c <_fflush_r+0x70>)
 8028df6:	429c      	cmp	r4, r3
 8028df8:	d101      	bne.n	8028dfe <_fflush_r+0x62>
 8028dfa:	68ac      	ldr	r4, [r5, #8]
 8028dfc:	e7df      	b.n	8028dbe <_fflush_r+0x22>
 8028dfe:	4b04      	ldr	r3, [pc, #16]	; (8028e10 <_fflush_r+0x74>)
 8028e00:	429c      	cmp	r4, r3
 8028e02:	bf08      	it	eq
 8028e04:	68ec      	ldreq	r4, [r5, #12]
 8028e06:	e7da      	b.n	8028dbe <_fflush_r+0x22>
 8028e08:	08047650 	.word	0x08047650
 8028e0c:	08047670 	.word	0x08047670
 8028e10:	08047630 	.word	0x08047630

08028e14 <fiprintf>:
 8028e14:	b40e      	push	{r1, r2, r3}
 8028e16:	b503      	push	{r0, r1, lr}
 8028e18:	4601      	mov	r1, r0
 8028e1a:	ab03      	add	r3, sp, #12
 8028e1c:	4805      	ldr	r0, [pc, #20]	; (8028e34 <fiprintf+0x20>)
 8028e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e22:	6800      	ldr	r0, [r0, #0]
 8028e24:	9301      	str	r3, [sp, #4]
 8028e26:	f001 f879 	bl	8029f1c <_vfiprintf_r>
 8028e2a:	b002      	add	sp, #8
 8028e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8028e30:	b003      	add	sp, #12
 8028e32:	4770      	bx	lr
 8028e34:	200004a4 	.word	0x200004a4

08028e38 <_findenv_r>:
 8028e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e3c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8028eac <_findenv_r+0x74>
 8028e40:	4607      	mov	r7, r0
 8028e42:	4689      	mov	r9, r1
 8028e44:	4616      	mov	r6, r2
 8028e46:	f001 fbe9 	bl	802a61c <__env_lock>
 8028e4a:	f8da 4000 	ldr.w	r4, [sl]
 8028e4e:	b134      	cbz	r4, 8028e5e <_findenv_r+0x26>
 8028e50:	464b      	mov	r3, r9
 8028e52:	4698      	mov	r8, r3
 8028e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028e58:	b13a      	cbz	r2, 8028e6a <_findenv_r+0x32>
 8028e5a:	2a3d      	cmp	r2, #61	; 0x3d
 8028e5c:	d1f9      	bne.n	8028e52 <_findenv_r+0x1a>
 8028e5e:	4638      	mov	r0, r7
 8028e60:	f001 fbe2 	bl	802a628 <__env_unlock>
 8028e64:	2000      	movs	r0, #0
 8028e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e6a:	eba8 0809 	sub.w	r8, r8, r9
 8028e6e:	46a3      	mov	fp, r4
 8028e70:	f854 0b04 	ldr.w	r0, [r4], #4
 8028e74:	2800      	cmp	r0, #0
 8028e76:	d0f2      	beq.n	8028e5e <_findenv_r+0x26>
 8028e78:	4642      	mov	r2, r8
 8028e7a:	4649      	mov	r1, r9
 8028e7c:	f7fe fc4c 	bl	8027718 <strncmp>
 8028e80:	2800      	cmp	r0, #0
 8028e82:	d1f4      	bne.n	8028e6e <_findenv_r+0x36>
 8028e84:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8028e88:	eb03 0508 	add.w	r5, r3, r8
 8028e8c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028e90:	2b3d      	cmp	r3, #61	; 0x3d
 8028e92:	d1ec      	bne.n	8028e6e <_findenv_r+0x36>
 8028e94:	f8da 3000 	ldr.w	r3, [sl]
 8028e98:	ebab 0303 	sub.w	r3, fp, r3
 8028e9c:	109b      	asrs	r3, r3, #2
 8028e9e:	4638      	mov	r0, r7
 8028ea0:	6033      	str	r3, [r6, #0]
 8028ea2:	f001 fbc1 	bl	802a628 <__env_unlock>
 8028ea6:	1c68      	adds	r0, r5, #1
 8028ea8:	e7dd      	b.n	8028e66 <_findenv_r+0x2e>
 8028eaa:	bf00      	nop
 8028eac:	20000294 	.word	0x20000294

08028eb0 <_getenv_r>:
 8028eb0:	b507      	push	{r0, r1, r2, lr}
 8028eb2:	aa01      	add	r2, sp, #4
 8028eb4:	f7ff ffc0 	bl	8028e38 <_findenv_r>
 8028eb8:	b003      	add	sp, #12
 8028eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8028ebe:	Address 0x0000000008028ebe is out of bounds.


08028ec0 <__gettzinfo>:
 8028ec0:	4800      	ldr	r0, [pc, #0]	; (8028ec4 <__gettzinfo+0x4>)
 8028ec2:	4770      	bx	lr
 8028ec4:	20000510 	.word	0x20000510

08028ec8 <gmtime_r>:
 8028ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ecc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8028ed0:	460c      	mov	r4, r1
 8028ed2:	4a4f      	ldr	r2, [pc, #316]	; (8029010 <gmtime_r+0x148>)
 8028ed4:	2300      	movs	r3, #0
 8028ed6:	4630      	mov	r0, r6
 8028ed8:	4639      	mov	r1, r7
 8028eda:	f7d7 fa19 	bl	8000310 <__aeabi_ldivmod>
 8028ede:	4639      	mov	r1, r7
 8028ee0:	4605      	mov	r5, r0
 8028ee2:	4a4b      	ldr	r2, [pc, #300]	; (8029010 <gmtime_r+0x148>)
 8028ee4:	4630      	mov	r0, r6
 8028ee6:	2300      	movs	r3, #0
 8028ee8:	f7d7 fa12 	bl	8000310 <__aeabi_ldivmod>
 8028eec:	2a00      	cmp	r2, #0
 8028eee:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8028ef2:	bfb7      	itett	lt
 8028ef4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8028ef8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8028efc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8028f00:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8028f04:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8028f08:	fbb2 f1f0 	udiv	r1, r2, r0
 8028f0c:	fb00 2211 	mls	r2, r0, r1, r2
 8028f10:	203c      	movs	r0, #60	; 0x3c
 8028f12:	60a1      	str	r1, [r4, #8]
 8028f14:	fbb2 f1f0 	udiv	r1, r2, r0
 8028f18:	fb00 2211 	mls	r2, r0, r1, r2
 8028f1c:	6061      	str	r1, [r4, #4]
 8028f1e:	6022      	str	r2, [r4, #0]
 8028f20:	2107      	movs	r1, #7
 8028f22:	1cda      	adds	r2, r3, #3
 8028f24:	fb92 f1f1 	sdiv	r1, r2, r1
 8028f28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8028f2c:	1a52      	subs	r2, r2, r1
 8028f2e:	bf48      	it	mi
 8028f30:	3207      	addmi	r2, #7
 8028f32:	4d38      	ldr	r5, [pc, #224]	; (8029014 <gmtime_r+0x14c>)
 8028f34:	4838      	ldr	r0, [pc, #224]	; (8029018 <gmtime_r+0x150>)
 8028f36:	61a2      	str	r2, [r4, #24]
 8028f38:	2b00      	cmp	r3, #0
 8028f3a:	bfb7      	itett	lt
 8028f3c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8028f40:	fb93 f5f5 	sdivge	r5, r3, r5
 8028f44:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8028f48:	fb92 f5f5 	sdivlt	r5, r2, r5
 8028f4c:	fb00 3005 	mla	r0, r0, r5, r3
 8028f50:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8028f54:	fbb0 f2f2 	udiv	r2, r0, r2
 8028f58:	4402      	add	r2, r0
 8028f5a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8028f5e:	fbb0 f1f3 	udiv	r1, r0, r3
 8028f62:	1a52      	subs	r2, r2, r1
 8028f64:	f240 1c6d 	movw	ip, #365	; 0x16d
 8028f68:	492c      	ldr	r1, [pc, #176]	; (802901c <gmtime_r+0x154>)
 8028f6a:	fbb0 f1f1 	udiv	r1, r0, r1
 8028f6e:	2764      	movs	r7, #100	; 0x64
 8028f70:	1a52      	subs	r2, r2, r1
 8028f72:	fbb2 f1fc 	udiv	r1, r2, ip
 8028f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8028f7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8028f7e:	1af3      	subs	r3, r6, r3
 8028f80:	4403      	add	r3, r0
 8028f82:	fb0c 3311 	mls	r3, ip, r1, r3
 8028f86:	2299      	movs	r2, #153	; 0x99
 8028f88:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8028f8c:	f10e 0e02 	add.w	lr, lr, #2
 8028f90:	f103 0c01 	add.w	ip, r3, #1
 8028f94:	fbbe f0f2 	udiv	r0, lr, r2
 8028f98:	4342      	muls	r2, r0
 8028f9a:	3202      	adds	r2, #2
 8028f9c:	f04f 0805 	mov.w	r8, #5
 8028fa0:	fbb2 f2f8 	udiv	r2, r2, r8
 8028fa4:	ebac 0c02 	sub.w	ip, ip, r2
 8028fa8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8028fac:	4596      	cmp	lr, r2
 8028fae:	bf94      	ite	ls
 8028fb0:	2202      	movls	r2, #2
 8028fb2:	f06f 0209 	mvnhi.w	r2, #9
 8028fb6:	4410      	add	r0, r2
 8028fb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028fbc:	fb02 1505 	mla	r5, r2, r5, r1
 8028fc0:	2801      	cmp	r0, #1
 8028fc2:	bf98      	it	ls
 8028fc4:	3501      	addls	r5, #1
 8028fc6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8028fca:	d30d      	bcc.n	8028fe8 <gmtime_r+0x120>
 8028fcc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8028fd0:	61e3      	str	r3, [r4, #28]
 8028fd2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8028fd6:	2300      	movs	r3, #0
 8028fd8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8028fdc:	f8c4 c00c 	str.w	ip, [r4, #12]
 8028fe0:	6223      	str	r3, [r4, #32]
 8028fe2:	4620      	mov	r0, r4
 8028fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fe8:	078a      	lsls	r2, r1, #30
 8028fea:	d102      	bne.n	8028ff2 <gmtime_r+0x12a>
 8028fec:	fb07 1616 	mls	r6, r7, r6, r1
 8028ff0:	b95e      	cbnz	r6, 802900a <gmtime_r+0x142>
 8028ff2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028ff6:	fbb1 f6f2 	udiv	r6, r1, r2
 8028ffa:	fb02 1216 	mls	r2, r2, r6, r1
 8028ffe:	fab2 f282 	clz	r2, r2
 8029002:	0952      	lsrs	r2, r2, #5
 8029004:	333b      	adds	r3, #59	; 0x3b
 8029006:	4413      	add	r3, r2
 8029008:	e7e2      	b.n	8028fd0 <gmtime_r+0x108>
 802900a:	2201      	movs	r2, #1
 802900c:	e7fa      	b.n	8029004 <gmtime_r+0x13c>
 802900e:	bf00      	nop
 8029010:	00015180 	.word	0x00015180
 8029014:	00023ab1 	.word	0x00023ab1
 8029018:	fffdc54f 	.word	0xfffdc54f
 802901c:	00023ab0 	.word	0x00023ab0

08029020 <labs>:
 8029020:	2800      	cmp	r0, #0
 8029022:	bfb8      	it	lt
 8029024:	4240      	neglt	r0, r0
 8029026:	4770      	bx	lr

08029028 <_localeconv_r>:
 8029028:	4800      	ldr	r0, [pc, #0]	; (802902c <_localeconv_r+0x4>)
 802902a:	4770      	bx	lr
 802902c:	20000658 	.word	0x20000658

08029030 <_lseek_r>:
 8029030:	b538      	push	{r3, r4, r5, lr}
 8029032:	4d07      	ldr	r5, [pc, #28]	; (8029050 <_lseek_r+0x20>)
 8029034:	4604      	mov	r4, r0
 8029036:	4608      	mov	r0, r1
 8029038:	4611      	mov	r1, r2
 802903a:	2200      	movs	r2, #0
 802903c:	602a      	str	r2, [r5, #0]
 802903e:	461a      	mov	r2, r3
 8029040:	f7df fa24 	bl	800848c <_lseek>
 8029044:	1c43      	adds	r3, r0, #1
 8029046:	d102      	bne.n	802904e <_lseek_r+0x1e>
 8029048:	682b      	ldr	r3, [r5, #0]
 802904a:	b103      	cbz	r3, 802904e <_lseek_r+0x1e>
 802904c:	6023      	str	r3, [r4, #0]
 802904e:	bd38      	pop	{r3, r4, r5, pc}
 8029050:	200300e4 	.word	0x200300e4

08029054 <__swhatbuf_r>:
 8029054:	b570      	push	{r4, r5, r6, lr}
 8029056:	460e      	mov	r6, r1
 8029058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802905c:	2900      	cmp	r1, #0
 802905e:	b096      	sub	sp, #88	; 0x58
 8029060:	4614      	mov	r4, r2
 8029062:	461d      	mov	r5, r3
 8029064:	da08      	bge.n	8029078 <__swhatbuf_r+0x24>
 8029066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802906a:	2200      	movs	r2, #0
 802906c:	602a      	str	r2, [r5, #0]
 802906e:	061a      	lsls	r2, r3, #24
 8029070:	d410      	bmi.n	8029094 <__swhatbuf_r+0x40>
 8029072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029076:	e00e      	b.n	8029096 <__swhatbuf_r+0x42>
 8029078:	466a      	mov	r2, sp
 802907a:	f001 fadb 	bl	802a634 <_fstat_r>
 802907e:	2800      	cmp	r0, #0
 8029080:	dbf1      	blt.n	8029066 <__swhatbuf_r+0x12>
 8029082:	9a01      	ldr	r2, [sp, #4]
 8029084:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029088:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802908c:	425a      	negs	r2, r3
 802908e:	415a      	adcs	r2, r3
 8029090:	602a      	str	r2, [r5, #0]
 8029092:	e7ee      	b.n	8029072 <__swhatbuf_r+0x1e>
 8029094:	2340      	movs	r3, #64	; 0x40
 8029096:	2000      	movs	r0, #0
 8029098:	6023      	str	r3, [r4, #0]
 802909a:	b016      	add	sp, #88	; 0x58
 802909c:	bd70      	pop	{r4, r5, r6, pc}
 802909e:	Address 0x000000000802909e is out of bounds.


080290a0 <__smakebuf_r>:
 80290a0:	898b      	ldrh	r3, [r1, #12]
 80290a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80290a4:	079d      	lsls	r5, r3, #30
 80290a6:	4606      	mov	r6, r0
 80290a8:	460c      	mov	r4, r1
 80290aa:	d507      	bpl.n	80290bc <__smakebuf_r+0x1c>
 80290ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80290b0:	6023      	str	r3, [r4, #0]
 80290b2:	6123      	str	r3, [r4, #16]
 80290b4:	2301      	movs	r3, #1
 80290b6:	6163      	str	r3, [r4, #20]
 80290b8:	b002      	add	sp, #8
 80290ba:	bd70      	pop	{r4, r5, r6, pc}
 80290bc:	ab01      	add	r3, sp, #4
 80290be:	466a      	mov	r2, sp
 80290c0:	f7ff ffc8 	bl	8029054 <__swhatbuf_r>
 80290c4:	9900      	ldr	r1, [sp, #0]
 80290c6:	4605      	mov	r5, r0
 80290c8:	4630      	mov	r0, r6
 80290ca:	f7fc fe8b 	bl	8025de4 <_malloc_r>
 80290ce:	b948      	cbnz	r0, 80290e4 <__smakebuf_r+0x44>
 80290d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290d4:	059a      	lsls	r2, r3, #22
 80290d6:	d4ef      	bmi.n	80290b8 <__smakebuf_r+0x18>
 80290d8:	f023 0303 	bic.w	r3, r3, #3
 80290dc:	f043 0302 	orr.w	r3, r3, #2
 80290e0:	81a3      	strh	r3, [r4, #12]
 80290e2:	e7e3      	b.n	80290ac <__smakebuf_r+0xc>
 80290e4:	4b0d      	ldr	r3, [pc, #52]	; (802911c <__smakebuf_r+0x7c>)
 80290e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80290e8:	89a3      	ldrh	r3, [r4, #12]
 80290ea:	6020      	str	r0, [r4, #0]
 80290ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80290f0:	81a3      	strh	r3, [r4, #12]
 80290f2:	9b00      	ldr	r3, [sp, #0]
 80290f4:	6163      	str	r3, [r4, #20]
 80290f6:	9b01      	ldr	r3, [sp, #4]
 80290f8:	6120      	str	r0, [r4, #16]
 80290fa:	b15b      	cbz	r3, 8029114 <__smakebuf_r+0x74>
 80290fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029100:	4630      	mov	r0, r6
 8029102:	f001 faa9 	bl	802a658 <_isatty_r>
 8029106:	b128      	cbz	r0, 8029114 <__smakebuf_r+0x74>
 8029108:	89a3      	ldrh	r3, [r4, #12]
 802910a:	f023 0303 	bic.w	r3, r3, #3
 802910e:	f043 0301 	orr.w	r3, r3, #1
 8029112:	81a3      	strh	r3, [r4, #12]
 8029114:	89a0      	ldrh	r0, [r4, #12]
 8029116:	4305      	orrs	r5, r0
 8029118:	81a5      	strh	r5, [r4, #12]
 802911a:	e7cd      	b.n	80290b8 <__smakebuf_r+0x18>
 802911c:	0802536d 	.word	0x0802536d

08029120 <__malloc_lock>:
 8029120:	4801      	ldr	r0, [pc, #4]	; (8029128 <__malloc_lock+0x8>)
 8029122:	f7fc bb2d 	b.w	8025780 <__retarget_lock_acquire_recursive>
 8029126:	bf00      	nop
 8029128:	200300d5 	.word	0x200300d5

0802912c <__malloc_unlock>:
 802912c:	4801      	ldr	r0, [pc, #4]	; (8029134 <__malloc_unlock+0x8>)
 802912e:	f7fc bb29 	b.w	8025784 <__retarget_lock_release_recursive>
 8029132:	bf00      	nop
 8029134:	200300d5 	.word	0x200300d5

08029138 <_Balloc>:
 8029138:	b570      	push	{r4, r5, r6, lr}
 802913a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802913c:	4604      	mov	r4, r0
 802913e:	460d      	mov	r5, r1
 8029140:	b976      	cbnz	r6, 8029160 <_Balloc+0x28>
 8029142:	2010      	movs	r0, #16
 8029144:	f7fc fb20 	bl	8025788 <malloc>
 8029148:	4602      	mov	r2, r0
 802914a:	6260      	str	r0, [r4, #36]	; 0x24
 802914c:	b920      	cbnz	r0, 8029158 <_Balloc+0x20>
 802914e:	4b18      	ldr	r3, [pc, #96]	; (80291b0 <_Balloc+0x78>)
 8029150:	4818      	ldr	r0, [pc, #96]	; (80291b4 <_Balloc+0x7c>)
 8029152:	2166      	movs	r1, #102	; 0x66
 8029154:	f7fe ff5a 	bl	802800c <__assert_func>
 8029158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802915c:	6006      	str	r6, [r0, #0]
 802915e:	60c6      	str	r6, [r0, #12]
 8029160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8029162:	68f3      	ldr	r3, [r6, #12]
 8029164:	b183      	cbz	r3, 8029188 <_Balloc+0x50>
 8029166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029168:	68db      	ldr	r3, [r3, #12]
 802916a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802916e:	b9b8      	cbnz	r0, 80291a0 <_Balloc+0x68>
 8029170:	2101      	movs	r1, #1
 8029172:	fa01 f605 	lsl.w	r6, r1, r5
 8029176:	1d72      	adds	r2, r6, #5
 8029178:	0092      	lsls	r2, r2, #2
 802917a:	4620      	mov	r0, r4
 802917c:	f000 fb60 	bl	8029840 <_calloc_r>
 8029180:	b160      	cbz	r0, 802919c <_Balloc+0x64>
 8029182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029186:	e00e      	b.n	80291a6 <_Balloc+0x6e>
 8029188:	2221      	movs	r2, #33	; 0x21
 802918a:	2104      	movs	r1, #4
 802918c:	4620      	mov	r0, r4
 802918e:	f000 fb57 	bl	8029840 <_calloc_r>
 8029192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029194:	60f0      	str	r0, [r6, #12]
 8029196:	68db      	ldr	r3, [r3, #12]
 8029198:	2b00      	cmp	r3, #0
 802919a:	d1e4      	bne.n	8029166 <_Balloc+0x2e>
 802919c:	2000      	movs	r0, #0
 802919e:	bd70      	pop	{r4, r5, r6, pc}
 80291a0:	6802      	ldr	r2, [r0, #0]
 80291a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80291a6:	2300      	movs	r3, #0
 80291a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80291ac:	e7f7      	b.n	802919e <_Balloc+0x66>
 80291ae:	bf00      	nop
 80291b0:	08047694 	.word	0x08047694
 80291b4:	08047c7e 	.word	0x08047c7e

080291b8 <_Bfree>:
 80291b8:	b570      	push	{r4, r5, r6, lr}
 80291ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80291bc:	4605      	mov	r5, r0
 80291be:	460c      	mov	r4, r1
 80291c0:	b976      	cbnz	r6, 80291e0 <_Bfree+0x28>
 80291c2:	2010      	movs	r0, #16
 80291c4:	f7fc fae0 	bl	8025788 <malloc>
 80291c8:	4602      	mov	r2, r0
 80291ca:	6268      	str	r0, [r5, #36]	; 0x24
 80291cc:	b920      	cbnz	r0, 80291d8 <_Bfree+0x20>
 80291ce:	4b09      	ldr	r3, [pc, #36]	; (80291f4 <_Bfree+0x3c>)
 80291d0:	4809      	ldr	r0, [pc, #36]	; (80291f8 <_Bfree+0x40>)
 80291d2:	218a      	movs	r1, #138	; 0x8a
 80291d4:	f7fe ff1a 	bl	802800c <__assert_func>
 80291d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80291dc:	6006      	str	r6, [r0, #0]
 80291de:	60c6      	str	r6, [r0, #12]
 80291e0:	b13c      	cbz	r4, 80291f2 <_Bfree+0x3a>
 80291e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80291e4:	6862      	ldr	r2, [r4, #4]
 80291e6:	68db      	ldr	r3, [r3, #12]
 80291e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80291ec:	6021      	str	r1, [r4, #0]
 80291ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80291f2:	bd70      	pop	{r4, r5, r6, pc}
 80291f4:	08047694 	.word	0x08047694
 80291f8:	08047c7e 	.word	0x08047c7e

080291fc <__multadd>:
 80291fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029200:	690d      	ldr	r5, [r1, #16]
 8029202:	4607      	mov	r7, r0
 8029204:	460c      	mov	r4, r1
 8029206:	461e      	mov	r6, r3
 8029208:	f101 0c14 	add.w	ip, r1, #20
 802920c:	2000      	movs	r0, #0
 802920e:	f8dc 3000 	ldr.w	r3, [ip]
 8029212:	b299      	uxth	r1, r3
 8029214:	fb02 6101 	mla	r1, r2, r1, r6
 8029218:	0c1e      	lsrs	r6, r3, #16
 802921a:	0c0b      	lsrs	r3, r1, #16
 802921c:	fb02 3306 	mla	r3, r2, r6, r3
 8029220:	b289      	uxth	r1, r1
 8029222:	3001      	adds	r0, #1
 8029224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029228:	4285      	cmp	r5, r0
 802922a:	f84c 1b04 	str.w	r1, [ip], #4
 802922e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8029232:	dcec      	bgt.n	802920e <__multadd+0x12>
 8029234:	b30e      	cbz	r6, 802927a <__multadd+0x7e>
 8029236:	68a3      	ldr	r3, [r4, #8]
 8029238:	42ab      	cmp	r3, r5
 802923a:	dc19      	bgt.n	8029270 <__multadd+0x74>
 802923c:	6861      	ldr	r1, [r4, #4]
 802923e:	4638      	mov	r0, r7
 8029240:	3101      	adds	r1, #1
 8029242:	f7ff ff79 	bl	8029138 <_Balloc>
 8029246:	4680      	mov	r8, r0
 8029248:	b928      	cbnz	r0, 8029256 <__multadd+0x5a>
 802924a:	4602      	mov	r2, r0
 802924c:	4b0c      	ldr	r3, [pc, #48]	; (8029280 <__multadd+0x84>)
 802924e:	480d      	ldr	r0, [pc, #52]	; (8029284 <__multadd+0x88>)
 8029250:	21b5      	movs	r1, #181	; 0xb5
 8029252:	f7fe fedb 	bl	802800c <__assert_func>
 8029256:	6922      	ldr	r2, [r4, #16]
 8029258:	3202      	adds	r2, #2
 802925a:	f104 010c 	add.w	r1, r4, #12
 802925e:	0092      	lsls	r2, r2, #2
 8029260:	300c      	adds	r0, #12
 8029262:	f7fc fab1 	bl	80257c8 <memcpy>
 8029266:	4621      	mov	r1, r4
 8029268:	4638      	mov	r0, r7
 802926a:	f7ff ffa5 	bl	80291b8 <_Bfree>
 802926e:	4644      	mov	r4, r8
 8029270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8029274:	3501      	adds	r5, #1
 8029276:	615e      	str	r6, [r3, #20]
 8029278:	6125      	str	r5, [r4, #16]
 802927a:	4620      	mov	r0, r4
 802927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029280:	08047c6d 	.word	0x08047c6d
 8029284:	08047c7e 	.word	0x08047c7e

08029288 <__hi0bits>:
 8029288:	0c03      	lsrs	r3, r0, #16
 802928a:	041b      	lsls	r3, r3, #16
 802928c:	b9d3      	cbnz	r3, 80292c4 <__hi0bits+0x3c>
 802928e:	0400      	lsls	r0, r0, #16
 8029290:	2310      	movs	r3, #16
 8029292:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029296:	bf04      	itt	eq
 8029298:	0200      	lsleq	r0, r0, #8
 802929a:	3308      	addeq	r3, #8
 802929c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80292a0:	bf04      	itt	eq
 80292a2:	0100      	lsleq	r0, r0, #4
 80292a4:	3304      	addeq	r3, #4
 80292a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80292aa:	bf04      	itt	eq
 80292ac:	0080      	lsleq	r0, r0, #2
 80292ae:	3302      	addeq	r3, #2
 80292b0:	2800      	cmp	r0, #0
 80292b2:	db05      	blt.n	80292c0 <__hi0bits+0x38>
 80292b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80292b8:	f103 0301 	add.w	r3, r3, #1
 80292bc:	bf08      	it	eq
 80292be:	2320      	moveq	r3, #32
 80292c0:	4618      	mov	r0, r3
 80292c2:	4770      	bx	lr
 80292c4:	2300      	movs	r3, #0
 80292c6:	e7e4      	b.n	8029292 <__hi0bits+0xa>

080292c8 <__lo0bits>:
 80292c8:	6803      	ldr	r3, [r0, #0]
 80292ca:	f013 0207 	ands.w	r2, r3, #7
 80292ce:	4601      	mov	r1, r0
 80292d0:	d00b      	beq.n	80292ea <__lo0bits+0x22>
 80292d2:	07da      	lsls	r2, r3, #31
 80292d4:	d423      	bmi.n	802931e <__lo0bits+0x56>
 80292d6:	0798      	lsls	r0, r3, #30
 80292d8:	bf49      	itett	mi
 80292da:	085b      	lsrmi	r3, r3, #1
 80292dc:	089b      	lsrpl	r3, r3, #2
 80292de:	2001      	movmi	r0, #1
 80292e0:	600b      	strmi	r3, [r1, #0]
 80292e2:	bf5c      	itt	pl
 80292e4:	600b      	strpl	r3, [r1, #0]
 80292e6:	2002      	movpl	r0, #2
 80292e8:	4770      	bx	lr
 80292ea:	b298      	uxth	r0, r3
 80292ec:	b9a8      	cbnz	r0, 802931a <__lo0bits+0x52>
 80292ee:	0c1b      	lsrs	r3, r3, #16
 80292f0:	2010      	movs	r0, #16
 80292f2:	b2da      	uxtb	r2, r3
 80292f4:	b90a      	cbnz	r2, 80292fa <__lo0bits+0x32>
 80292f6:	3008      	adds	r0, #8
 80292f8:	0a1b      	lsrs	r3, r3, #8
 80292fa:	071a      	lsls	r2, r3, #28
 80292fc:	bf04      	itt	eq
 80292fe:	091b      	lsreq	r3, r3, #4
 8029300:	3004      	addeq	r0, #4
 8029302:	079a      	lsls	r2, r3, #30
 8029304:	bf04      	itt	eq
 8029306:	089b      	lsreq	r3, r3, #2
 8029308:	3002      	addeq	r0, #2
 802930a:	07da      	lsls	r2, r3, #31
 802930c:	d403      	bmi.n	8029316 <__lo0bits+0x4e>
 802930e:	085b      	lsrs	r3, r3, #1
 8029310:	f100 0001 	add.w	r0, r0, #1
 8029314:	d005      	beq.n	8029322 <__lo0bits+0x5a>
 8029316:	600b      	str	r3, [r1, #0]
 8029318:	4770      	bx	lr
 802931a:	4610      	mov	r0, r2
 802931c:	e7e9      	b.n	80292f2 <__lo0bits+0x2a>
 802931e:	2000      	movs	r0, #0
 8029320:	4770      	bx	lr
 8029322:	2020      	movs	r0, #32
 8029324:	4770      	bx	lr
 8029326:	Address 0x0000000008029326 is out of bounds.


08029328 <__i2b>:
 8029328:	b510      	push	{r4, lr}
 802932a:	460c      	mov	r4, r1
 802932c:	2101      	movs	r1, #1
 802932e:	f7ff ff03 	bl	8029138 <_Balloc>
 8029332:	4602      	mov	r2, r0
 8029334:	b928      	cbnz	r0, 8029342 <__i2b+0x1a>
 8029336:	4b05      	ldr	r3, [pc, #20]	; (802934c <__i2b+0x24>)
 8029338:	4805      	ldr	r0, [pc, #20]	; (8029350 <__i2b+0x28>)
 802933a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802933e:	f7fe fe65 	bl	802800c <__assert_func>
 8029342:	2301      	movs	r3, #1
 8029344:	6144      	str	r4, [r0, #20]
 8029346:	6103      	str	r3, [r0, #16]
 8029348:	bd10      	pop	{r4, pc}
 802934a:	bf00      	nop
 802934c:	08047c6d 	.word	0x08047c6d
 8029350:	08047c7e 	.word	0x08047c7e

08029354 <__multiply>:
 8029354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029358:	4691      	mov	r9, r2
 802935a:	690a      	ldr	r2, [r1, #16]
 802935c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8029360:	429a      	cmp	r2, r3
 8029362:	bfb8      	it	lt
 8029364:	460b      	movlt	r3, r1
 8029366:	460c      	mov	r4, r1
 8029368:	bfbc      	itt	lt
 802936a:	464c      	movlt	r4, r9
 802936c:	4699      	movlt	r9, r3
 802936e:	6927      	ldr	r7, [r4, #16]
 8029370:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8029374:	68a3      	ldr	r3, [r4, #8]
 8029376:	6861      	ldr	r1, [r4, #4]
 8029378:	eb07 060a 	add.w	r6, r7, sl
 802937c:	42b3      	cmp	r3, r6
 802937e:	b085      	sub	sp, #20
 8029380:	bfb8      	it	lt
 8029382:	3101      	addlt	r1, #1
 8029384:	f7ff fed8 	bl	8029138 <_Balloc>
 8029388:	b930      	cbnz	r0, 8029398 <__multiply+0x44>
 802938a:	4602      	mov	r2, r0
 802938c:	4b44      	ldr	r3, [pc, #272]	; (80294a0 <__multiply+0x14c>)
 802938e:	4845      	ldr	r0, [pc, #276]	; (80294a4 <__multiply+0x150>)
 8029390:	f240 115d 	movw	r1, #349	; 0x15d
 8029394:	f7fe fe3a 	bl	802800c <__assert_func>
 8029398:	f100 0514 	add.w	r5, r0, #20
 802939c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80293a0:	462b      	mov	r3, r5
 80293a2:	2200      	movs	r2, #0
 80293a4:	4543      	cmp	r3, r8
 80293a6:	d321      	bcc.n	80293ec <__multiply+0x98>
 80293a8:	f104 0314 	add.w	r3, r4, #20
 80293ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80293b0:	f109 0314 	add.w	r3, r9, #20
 80293b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80293b8:	9202      	str	r2, [sp, #8]
 80293ba:	1b3a      	subs	r2, r7, r4
 80293bc:	3a15      	subs	r2, #21
 80293be:	f022 0203 	bic.w	r2, r2, #3
 80293c2:	3204      	adds	r2, #4
 80293c4:	f104 0115 	add.w	r1, r4, #21
 80293c8:	428f      	cmp	r7, r1
 80293ca:	bf38      	it	cc
 80293cc:	2204      	movcc	r2, #4
 80293ce:	9201      	str	r2, [sp, #4]
 80293d0:	9a02      	ldr	r2, [sp, #8]
 80293d2:	9303      	str	r3, [sp, #12]
 80293d4:	429a      	cmp	r2, r3
 80293d6:	d80c      	bhi.n	80293f2 <__multiply+0x9e>
 80293d8:	2e00      	cmp	r6, #0
 80293da:	dd03      	ble.n	80293e4 <__multiply+0x90>
 80293dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80293e0:	2b00      	cmp	r3, #0
 80293e2:	d05a      	beq.n	802949a <__multiply+0x146>
 80293e4:	6106      	str	r6, [r0, #16]
 80293e6:	b005      	add	sp, #20
 80293e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293ec:	f843 2b04 	str.w	r2, [r3], #4
 80293f0:	e7d8      	b.n	80293a4 <__multiply+0x50>
 80293f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80293f6:	f1ba 0f00 	cmp.w	sl, #0
 80293fa:	d024      	beq.n	8029446 <__multiply+0xf2>
 80293fc:	f104 0e14 	add.w	lr, r4, #20
 8029400:	46a9      	mov	r9, r5
 8029402:	f04f 0c00 	mov.w	ip, #0
 8029406:	f85e 2b04 	ldr.w	r2, [lr], #4
 802940a:	f8d9 1000 	ldr.w	r1, [r9]
 802940e:	fa1f fb82 	uxth.w	fp, r2
 8029412:	b289      	uxth	r1, r1
 8029414:	fb0a 110b 	mla	r1, sl, fp, r1
 8029418:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802941c:	f8d9 2000 	ldr.w	r2, [r9]
 8029420:	4461      	add	r1, ip
 8029422:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029426:	fb0a c20b 	mla	r2, sl, fp, ip
 802942a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802942e:	b289      	uxth	r1, r1
 8029430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8029434:	4577      	cmp	r7, lr
 8029436:	f849 1b04 	str.w	r1, [r9], #4
 802943a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802943e:	d8e2      	bhi.n	8029406 <__multiply+0xb2>
 8029440:	9a01      	ldr	r2, [sp, #4]
 8029442:	f845 c002 	str.w	ip, [r5, r2]
 8029446:	9a03      	ldr	r2, [sp, #12]
 8029448:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802944c:	3304      	adds	r3, #4
 802944e:	f1b9 0f00 	cmp.w	r9, #0
 8029452:	d020      	beq.n	8029496 <__multiply+0x142>
 8029454:	6829      	ldr	r1, [r5, #0]
 8029456:	f104 0c14 	add.w	ip, r4, #20
 802945a:	46ae      	mov	lr, r5
 802945c:	f04f 0a00 	mov.w	sl, #0
 8029460:	f8bc b000 	ldrh.w	fp, [ip]
 8029464:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029468:	fb09 220b 	mla	r2, r9, fp, r2
 802946c:	4492      	add	sl, r2
 802946e:	b289      	uxth	r1, r1
 8029470:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8029474:	f84e 1b04 	str.w	r1, [lr], #4
 8029478:	f85c 2b04 	ldr.w	r2, [ip], #4
 802947c:	f8be 1000 	ldrh.w	r1, [lr]
 8029480:	0c12      	lsrs	r2, r2, #16
 8029482:	fb09 1102 	mla	r1, r9, r2, r1
 8029486:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802948a:	4567      	cmp	r7, ip
 802948c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8029490:	d8e6      	bhi.n	8029460 <__multiply+0x10c>
 8029492:	9a01      	ldr	r2, [sp, #4]
 8029494:	50a9      	str	r1, [r5, r2]
 8029496:	3504      	adds	r5, #4
 8029498:	e79a      	b.n	80293d0 <__multiply+0x7c>
 802949a:	3e01      	subs	r6, #1
 802949c:	e79c      	b.n	80293d8 <__multiply+0x84>
 802949e:	bf00      	nop
 80294a0:	08047c6d 	.word	0x08047c6d
 80294a4:	08047c7e 	.word	0x08047c7e

080294a8 <__pow5mult>:
 80294a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80294ac:	4615      	mov	r5, r2
 80294ae:	f012 0203 	ands.w	r2, r2, #3
 80294b2:	4606      	mov	r6, r0
 80294b4:	460f      	mov	r7, r1
 80294b6:	d007      	beq.n	80294c8 <__pow5mult+0x20>
 80294b8:	4c25      	ldr	r4, [pc, #148]	; (8029550 <__pow5mult+0xa8>)
 80294ba:	3a01      	subs	r2, #1
 80294bc:	2300      	movs	r3, #0
 80294be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80294c2:	f7ff fe9b 	bl	80291fc <__multadd>
 80294c6:	4607      	mov	r7, r0
 80294c8:	10ad      	asrs	r5, r5, #2
 80294ca:	d03d      	beq.n	8029548 <__pow5mult+0xa0>
 80294cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80294ce:	b97c      	cbnz	r4, 80294f0 <__pow5mult+0x48>
 80294d0:	2010      	movs	r0, #16
 80294d2:	f7fc f959 	bl	8025788 <malloc>
 80294d6:	4602      	mov	r2, r0
 80294d8:	6270      	str	r0, [r6, #36]	; 0x24
 80294da:	b928      	cbnz	r0, 80294e8 <__pow5mult+0x40>
 80294dc:	4b1d      	ldr	r3, [pc, #116]	; (8029554 <__pow5mult+0xac>)
 80294de:	481e      	ldr	r0, [pc, #120]	; (8029558 <__pow5mult+0xb0>)
 80294e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80294e4:	f7fe fd92 	bl	802800c <__assert_func>
 80294e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80294ec:	6004      	str	r4, [r0, #0]
 80294ee:	60c4      	str	r4, [r0, #12]
 80294f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80294f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80294f8:	b94c      	cbnz	r4, 802950e <__pow5mult+0x66>
 80294fa:	f240 2171 	movw	r1, #625	; 0x271
 80294fe:	4630      	mov	r0, r6
 8029500:	f7ff ff12 	bl	8029328 <__i2b>
 8029504:	2300      	movs	r3, #0
 8029506:	f8c8 0008 	str.w	r0, [r8, #8]
 802950a:	4604      	mov	r4, r0
 802950c:	6003      	str	r3, [r0, #0]
 802950e:	f04f 0900 	mov.w	r9, #0
 8029512:	07eb      	lsls	r3, r5, #31
 8029514:	d50a      	bpl.n	802952c <__pow5mult+0x84>
 8029516:	4639      	mov	r1, r7
 8029518:	4622      	mov	r2, r4
 802951a:	4630      	mov	r0, r6
 802951c:	f7ff ff1a 	bl	8029354 <__multiply>
 8029520:	4639      	mov	r1, r7
 8029522:	4680      	mov	r8, r0
 8029524:	4630      	mov	r0, r6
 8029526:	f7ff fe47 	bl	80291b8 <_Bfree>
 802952a:	4647      	mov	r7, r8
 802952c:	106d      	asrs	r5, r5, #1
 802952e:	d00b      	beq.n	8029548 <__pow5mult+0xa0>
 8029530:	6820      	ldr	r0, [r4, #0]
 8029532:	b938      	cbnz	r0, 8029544 <__pow5mult+0x9c>
 8029534:	4622      	mov	r2, r4
 8029536:	4621      	mov	r1, r4
 8029538:	4630      	mov	r0, r6
 802953a:	f7ff ff0b 	bl	8029354 <__multiply>
 802953e:	6020      	str	r0, [r4, #0]
 8029540:	f8c0 9000 	str.w	r9, [r0]
 8029544:	4604      	mov	r4, r0
 8029546:	e7e4      	b.n	8029512 <__pow5mult+0x6a>
 8029548:	4638      	mov	r0, r7
 802954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802954e:	bf00      	nop
 8029550:	08047dd0 	.word	0x08047dd0
 8029554:	08047694 	.word	0x08047694
 8029558:	08047c7e 	.word	0x08047c7e

0802955c <__lshift>:
 802955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029560:	460c      	mov	r4, r1
 8029562:	6849      	ldr	r1, [r1, #4]
 8029564:	6923      	ldr	r3, [r4, #16]
 8029566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802956a:	68a3      	ldr	r3, [r4, #8]
 802956c:	4607      	mov	r7, r0
 802956e:	4691      	mov	r9, r2
 8029570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029574:	f108 0601 	add.w	r6, r8, #1
 8029578:	42b3      	cmp	r3, r6
 802957a:	db0b      	blt.n	8029594 <__lshift+0x38>
 802957c:	4638      	mov	r0, r7
 802957e:	f7ff fddb 	bl	8029138 <_Balloc>
 8029582:	4605      	mov	r5, r0
 8029584:	b948      	cbnz	r0, 802959a <__lshift+0x3e>
 8029586:	4602      	mov	r2, r0
 8029588:	4b2a      	ldr	r3, [pc, #168]	; (8029634 <__lshift+0xd8>)
 802958a:	482b      	ldr	r0, [pc, #172]	; (8029638 <__lshift+0xdc>)
 802958c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8029590:	f7fe fd3c 	bl	802800c <__assert_func>
 8029594:	3101      	adds	r1, #1
 8029596:	005b      	lsls	r3, r3, #1
 8029598:	e7ee      	b.n	8029578 <__lshift+0x1c>
 802959a:	2300      	movs	r3, #0
 802959c:	f100 0114 	add.w	r1, r0, #20
 80295a0:	f100 0210 	add.w	r2, r0, #16
 80295a4:	4618      	mov	r0, r3
 80295a6:	4553      	cmp	r3, sl
 80295a8:	db37      	blt.n	802961a <__lshift+0xbe>
 80295aa:	6920      	ldr	r0, [r4, #16]
 80295ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80295b0:	f104 0314 	add.w	r3, r4, #20
 80295b4:	f019 091f 	ands.w	r9, r9, #31
 80295b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80295bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80295c0:	d02f      	beq.n	8029622 <__lshift+0xc6>
 80295c2:	f1c9 0e20 	rsb	lr, r9, #32
 80295c6:	468a      	mov	sl, r1
 80295c8:	f04f 0c00 	mov.w	ip, #0
 80295cc:	681a      	ldr	r2, [r3, #0]
 80295ce:	fa02 f209 	lsl.w	r2, r2, r9
 80295d2:	ea42 020c 	orr.w	r2, r2, ip
 80295d6:	f84a 2b04 	str.w	r2, [sl], #4
 80295da:	f853 2b04 	ldr.w	r2, [r3], #4
 80295de:	4298      	cmp	r0, r3
 80295e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80295e4:	d8f2      	bhi.n	80295cc <__lshift+0x70>
 80295e6:	1b03      	subs	r3, r0, r4
 80295e8:	3b15      	subs	r3, #21
 80295ea:	f023 0303 	bic.w	r3, r3, #3
 80295ee:	3304      	adds	r3, #4
 80295f0:	f104 0215 	add.w	r2, r4, #21
 80295f4:	4290      	cmp	r0, r2
 80295f6:	bf38      	it	cc
 80295f8:	2304      	movcc	r3, #4
 80295fa:	f841 c003 	str.w	ip, [r1, r3]
 80295fe:	f1bc 0f00 	cmp.w	ip, #0
 8029602:	d001      	beq.n	8029608 <__lshift+0xac>
 8029604:	f108 0602 	add.w	r6, r8, #2
 8029608:	3e01      	subs	r6, #1
 802960a:	4638      	mov	r0, r7
 802960c:	612e      	str	r6, [r5, #16]
 802960e:	4621      	mov	r1, r4
 8029610:	f7ff fdd2 	bl	80291b8 <_Bfree>
 8029614:	4628      	mov	r0, r5
 8029616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802961a:	f842 0f04 	str.w	r0, [r2, #4]!
 802961e:	3301      	adds	r3, #1
 8029620:	e7c1      	b.n	80295a6 <__lshift+0x4a>
 8029622:	3904      	subs	r1, #4
 8029624:	f853 2b04 	ldr.w	r2, [r3], #4
 8029628:	f841 2f04 	str.w	r2, [r1, #4]!
 802962c:	4298      	cmp	r0, r3
 802962e:	d8f9      	bhi.n	8029624 <__lshift+0xc8>
 8029630:	e7ea      	b.n	8029608 <__lshift+0xac>
 8029632:	bf00      	nop
 8029634:	08047c6d 	.word	0x08047c6d
 8029638:	08047c7e 	.word	0x08047c7e

0802963c <__mcmp>:
 802963c:	b530      	push	{r4, r5, lr}
 802963e:	6902      	ldr	r2, [r0, #16]
 8029640:	690c      	ldr	r4, [r1, #16]
 8029642:	1b12      	subs	r2, r2, r4
 8029644:	d10e      	bne.n	8029664 <__mcmp+0x28>
 8029646:	f100 0314 	add.w	r3, r0, #20
 802964a:	3114      	adds	r1, #20
 802964c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8029654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802965c:	42a5      	cmp	r5, r4
 802965e:	d003      	beq.n	8029668 <__mcmp+0x2c>
 8029660:	d305      	bcc.n	802966e <__mcmp+0x32>
 8029662:	2201      	movs	r2, #1
 8029664:	4610      	mov	r0, r2
 8029666:	bd30      	pop	{r4, r5, pc}
 8029668:	4283      	cmp	r3, r0
 802966a:	d3f3      	bcc.n	8029654 <__mcmp+0x18>
 802966c:	e7fa      	b.n	8029664 <__mcmp+0x28>
 802966e:	f04f 32ff 	mov.w	r2, #4294967295
 8029672:	e7f7      	b.n	8029664 <__mcmp+0x28>

08029674 <__mdiff>:
 8029674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029678:	460c      	mov	r4, r1
 802967a:	4606      	mov	r6, r0
 802967c:	4611      	mov	r1, r2
 802967e:	4620      	mov	r0, r4
 8029680:	4690      	mov	r8, r2
 8029682:	f7ff ffdb 	bl	802963c <__mcmp>
 8029686:	1e05      	subs	r5, r0, #0
 8029688:	d110      	bne.n	80296ac <__mdiff+0x38>
 802968a:	4629      	mov	r1, r5
 802968c:	4630      	mov	r0, r6
 802968e:	f7ff fd53 	bl	8029138 <_Balloc>
 8029692:	b930      	cbnz	r0, 80296a2 <__mdiff+0x2e>
 8029694:	4b3a      	ldr	r3, [pc, #232]	; (8029780 <__mdiff+0x10c>)
 8029696:	4602      	mov	r2, r0
 8029698:	f240 2132 	movw	r1, #562	; 0x232
 802969c:	4839      	ldr	r0, [pc, #228]	; (8029784 <__mdiff+0x110>)
 802969e:	f7fe fcb5 	bl	802800c <__assert_func>
 80296a2:	2301      	movs	r3, #1
 80296a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80296a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296ac:	bfa4      	itt	ge
 80296ae:	4643      	movge	r3, r8
 80296b0:	46a0      	movge	r8, r4
 80296b2:	4630      	mov	r0, r6
 80296b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80296b8:	bfa6      	itte	ge
 80296ba:	461c      	movge	r4, r3
 80296bc:	2500      	movge	r5, #0
 80296be:	2501      	movlt	r5, #1
 80296c0:	f7ff fd3a 	bl	8029138 <_Balloc>
 80296c4:	b920      	cbnz	r0, 80296d0 <__mdiff+0x5c>
 80296c6:	4b2e      	ldr	r3, [pc, #184]	; (8029780 <__mdiff+0x10c>)
 80296c8:	4602      	mov	r2, r0
 80296ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80296ce:	e7e5      	b.n	802969c <__mdiff+0x28>
 80296d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80296d4:	6926      	ldr	r6, [r4, #16]
 80296d6:	60c5      	str	r5, [r0, #12]
 80296d8:	f104 0914 	add.w	r9, r4, #20
 80296dc:	f108 0514 	add.w	r5, r8, #20
 80296e0:	f100 0e14 	add.w	lr, r0, #20
 80296e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80296e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80296ec:	f108 0210 	add.w	r2, r8, #16
 80296f0:	46f2      	mov	sl, lr
 80296f2:	2100      	movs	r1, #0
 80296f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80296f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80296fc:	fa1f f883 	uxth.w	r8, r3
 8029700:	fa11 f18b 	uxtah	r1, r1, fp
 8029704:	0c1b      	lsrs	r3, r3, #16
 8029706:	eba1 0808 	sub.w	r8, r1, r8
 802970a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802970e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029712:	fa1f f888 	uxth.w	r8, r8
 8029716:	1419      	asrs	r1, r3, #16
 8029718:	454e      	cmp	r6, r9
 802971a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802971e:	f84a 3b04 	str.w	r3, [sl], #4
 8029722:	d8e7      	bhi.n	80296f4 <__mdiff+0x80>
 8029724:	1b33      	subs	r3, r6, r4
 8029726:	3b15      	subs	r3, #21
 8029728:	f023 0303 	bic.w	r3, r3, #3
 802972c:	3304      	adds	r3, #4
 802972e:	3415      	adds	r4, #21
 8029730:	42a6      	cmp	r6, r4
 8029732:	bf38      	it	cc
 8029734:	2304      	movcc	r3, #4
 8029736:	441d      	add	r5, r3
 8029738:	4473      	add	r3, lr
 802973a:	469e      	mov	lr, r3
 802973c:	462e      	mov	r6, r5
 802973e:	4566      	cmp	r6, ip
 8029740:	d30e      	bcc.n	8029760 <__mdiff+0xec>
 8029742:	f10c 0203 	add.w	r2, ip, #3
 8029746:	1b52      	subs	r2, r2, r5
 8029748:	f022 0203 	bic.w	r2, r2, #3
 802974c:	3d03      	subs	r5, #3
 802974e:	45ac      	cmp	ip, r5
 8029750:	bf38      	it	cc
 8029752:	2200      	movcc	r2, #0
 8029754:	441a      	add	r2, r3
 8029756:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802975a:	b17b      	cbz	r3, 802977c <__mdiff+0x108>
 802975c:	6107      	str	r7, [r0, #16]
 802975e:	e7a3      	b.n	80296a8 <__mdiff+0x34>
 8029760:	f856 8b04 	ldr.w	r8, [r6], #4
 8029764:	fa11 f288 	uxtah	r2, r1, r8
 8029768:	1414      	asrs	r4, r2, #16
 802976a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802976e:	b292      	uxth	r2, r2
 8029770:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8029774:	f84e 2b04 	str.w	r2, [lr], #4
 8029778:	1421      	asrs	r1, r4, #16
 802977a:	e7e0      	b.n	802973e <__mdiff+0xca>
 802977c:	3f01      	subs	r7, #1
 802977e:	e7ea      	b.n	8029756 <__mdiff+0xe2>
 8029780:	08047c6d 	.word	0x08047c6d
 8029784:	08047c7e 	.word	0x08047c7e

08029788 <__d2b>:
 8029788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802978c:	4689      	mov	r9, r1
 802978e:	2101      	movs	r1, #1
 8029790:	ec57 6b10 	vmov	r6, r7, d0
 8029794:	4690      	mov	r8, r2
 8029796:	f7ff fccf 	bl	8029138 <_Balloc>
 802979a:	4604      	mov	r4, r0
 802979c:	b930      	cbnz	r0, 80297ac <__d2b+0x24>
 802979e:	4602      	mov	r2, r0
 80297a0:	4b25      	ldr	r3, [pc, #148]	; (8029838 <__d2b+0xb0>)
 80297a2:	4826      	ldr	r0, [pc, #152]	; (802983c <__d2b+0xb4>)
 80297a4:	f240 310a 	movw	r1, #778	; 0x30a
 80297a8:	f7fe fc30 	bl	802800c <__assert_func>
 80297ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80297b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80297b4:	bb35      	cbnz	r5, 8029804 <__d2b+0x7c>
 80297b6:	2e00      	cmp	r6, #0
 80297b8:	9301      	str	r3, [sp, #4]
 80297ba:	d028      	beq.n	802980e <__d2b+0x86>
 80297bc:	4668      	mov	r0, sp
 80297be:	9600      	str	r6, [sp, #0]
 80297c0:	f7ff fd82 	bl	80292c8 <__lo0bits>
 80297c4:	9900      	ldr	r1, [sp, #0]
 80297c6:	b300      	cbz	r0, 802980a <__d2b+0x82>
 80297c8:	9a01      	ldr	r2, [sp, #4]
 80297ca:	f1c0 0320 	rsb	r3, r0, #32
 80297ce:	fa02 f303 	lsl.w	r3, r2, r3
 80297d2:	430b      	orrs	r3, r1
 80297d4:	40c2      	lsrs	r2, r0
 80297d6:	6163      	str	r3, [r4, #20]
 80297d8:	9201      	str	r2, [sp, #4]
 80297da:	9b01      	ldr	r3, [sp, #4]
 80297dc:	61a3      	str	r3, [r4, #24]
 80297de:	2b00      	cmp	r3, #0
 80297e0:	bf14      	ite	ne
 80297e2:	2202      	movne	r2, #2
 80297e4:	2201      	moveq	r2, #1
 80297e6:	6122      	str	r2, [r4, #16]
 80297e8:	b1d5      	cbz	r5, 8029820 <__d2b+0x98>
 80297ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80297ee:	4405      	add	r5, r0
 80297f0:	f8c9 5000 	str.w	r5, [r9]
 80297f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80297f8:	f8c8 0000 	str.w	r0, [r8]
 80297fc:	4620      	mov	r0, r4
 80297fe:	b003      	add	sp, #12
 8029800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029808:	e7d5      	b.n	80297b6 <__d2b+0x2e>
 802980a:	6161      	str	r1, [r4, #20]
 802980c:	e7e5      	b.n	80297da <__d2b+0x52>
 802980e:	a801      	add	r0, sp, #4
 8029810:	f7ff fd5a 	bl	80292c8 <__lo0bits>
 8029814:	9b01      	ldr	r3, [sp, #4]
 8029816:	6163      	str	r3, [r4, #20]
 8029818:	2201      	movs	r2, #1
 802981a:	6122      	str	r2, [r4, #16]
 802981c:	3020      	adds	r0, #32
 802981e:	e7e3      	b.n	80297e8 <__d2b+0x60>
 8029820:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8029828:	f8c9 0000 	str.w	r0, [r9]
 802982c:	6918      	ldr	r0, [r3, #16]
 802982e:	f7ff fd2b 	bl	8029288 <__hi0bits>
 8029832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029836:	e7df      	b.n	80297f8 <__d2b+0x70>
 8029838:	08047c6d 	.word	0x08047c6d
 802983c:	08047c7e 	.word	0x08047c7e

08029840 <_calloc_r>:
 8029840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029842:	fba1 2402 	umull	r2, r4, r1, r2
 8029846:	b94c      	cbnz	r4, 802985c <_calloc_r+0x1c>
 8029848:	4611      	mov	r1, r2
 802984a:	9201      	str	r2, [sp, #4]
 802984c:	f7fc faca 	bl	8025de4 <_malloc_r>
 8029850:	9a01      	ldr	r2, [sp, #4]
 8029852:	4605      	mov	r5, r0
 8029854:	b930      	cbnz	r0, 8029864 <_calloc_r+0x24>
 8029856:	4628      	mov	r0, r5
 8029858:	b003      	add	sp, #12
 802985a:	bd30      	pop	{r4, r5, pc}
 802985c:	220c      	movs	r2, #12
 802985e:	6002      	str	r2, [r0, #0]
 8029860:	2500      	movs	r5, #0
 8029862:	e7f8      	b.n	8029856 <_calloc_r+0x16>
 8029864:	4621      	mov	r1, r4
 8029866:	f7fb ffd7 	bl	8025818 <memset>
 802986a:	e7f4      	b.n	8029856 <_calloc_r+0x16>

0802986c <__ssputs_r>:
 802986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029870:	688e      	ldr	r6, [r1, #8]
 8029872:	429e      	cmp	r6, r3
 8029874:	4682      	mov	sl, r0
 8029876:	460c      	mov	r4, r1
 8029878:	4690      	mov	r8, r2
 802987a:	461f      	mov	r7, r3
 802987c:	d838      	bhi.n	80298f0 <__ssputs_r+0x84>
 802987e:	898a      	ldrh	r2, [r1, #12]
 8029880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029884:	d032      	beq.n	80298ec <__ssputs_r+0x80>
 8029886:	6825      	ldr	r5, [r4, #0]
 8029888:	6909      	ldr	r1, [r1, #16]
 802988a:	eba5 0901 	sub.w	r9, r5, r1
 802988e:	6965      	ldr	r5, [r4, #20]
 8029890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029898:	3301      	adds	r3, #1
 802989a:	444b      	add	r3, r9
 802989c:	106d      	asrs	r5, r5, #1
 802989e:	429d      	cmp	r5, r3
 80298a0:	bf38      	it	cc
 80298a2:	461d      	movcc	r5, r3
 80298a4:	0553      	lsls	r3, r2, #21
 80298a6:	d531      	bpl.n	802990c <__ssputs_r+0xa0>
 80298a8:	4629      	mov	r1, r5
 80298aa:	f7fc fa9b 	bl	8025de4 <_malloc_r>
 80298ae:	4606      	mov	r6, r0
 80298b0:	b950      	cbnz	r0, 80298c8 <__ssputs_r+0x5c>
 80298b2:	230c      	movs	r3, #12
 80298b4:	f8ca 3000 	str.w	r3, [sl]
 80298b8:	89a3      	ldrh	r3, [r4, #12]
 80298ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298be:	81a3      	strh	r3, [r4, #12]
 80298c0:	f04f 30ff 	mov.w	r0, #4294967295
 80298c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298c8:	6921      	ldr	r1, [r4, #16]
 80298ca:	464a      	mov	r2, r9
 80298cc:	f7fb ff7c 	bl	80257c8 <memcpy>
 80298d0:	89a3      	ldrh	r3, [r4, #12]
 80298d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80298d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80298da:	81a3      	strh	r3, [r4, #12]
 80298dc:	6126      	str	r6, [r4, #16]
 80298de:	6165      	str	r5, [r4, #20]
 80298e0:	444e      	add	r6, r9
 80298e2:	eba5 0509 	sub.w	r5, r5, r9
 80298e6:	6026      	str	r6, [r4, #0]
 80298e8:	60a5      	str	r5, [r4, #8]
 80298ea:	463e      	mov	r6, r7
 80298ec:	42be      	cmp	r6, r7
 80298ee:	d900      	bls.n	80298f2 <__ssputs_r+0x86>
 80298f0:	463e      	mov	r6, r7
 80298f2:	6820      	ldr	r0, [r4, #0]
 80298f4:	4632      	mov	r2, r6
 80298f6:	4641      	mov	r1, r8
 80298f8:	f7fb ff74 	bl	80257e4 <memmove>
 80298fc:	68a3      	ldr	r3, [r4, #8]
 80298fe:	1b9b      	subs	r3, r3, r6
 8029900:	60a3      	str	r3, [r4, #8]
 8029902:	6823      	ldr	r3, [r4, #0]
 8029904:	4433      	add	r3, r6
 8029906:	6023      	str	r3, [r4, #0]
 8029908:	2000      	movs	r0, #0
 802990a:	e7db      	b.n	80298c4 <__ssputs_r+0x58>
 802990c:	462a      	mov	r2, r5
 802990e:	f000 fec5 	bl	802a69c <_realloc_r>
 8029912:	4606      	mov	r6, r0
 8029914:	2800      	cmp	r0, #0
 8029916:	d1e1      	bne.n	80298dc <__ssputs_r+0x70>
 8029918:	6921      	ldr	r1, [r4, #16]
 802991a:	4650      	mov	r0, sl
 802991c:	f7fc f9f6 	bl	8025d0c <_free_r>
 8029920:	e7c7      	b.n	80298b2 <__ssputs_r+0x46>
 8029922:	Address 0x0000000008029922 is out of bounds.


08029924 <_svfiprintf_r>:
 8029924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029928:	4698      	mov	r8, r3
 802992a:	898b      	ldrh	r3, [r1, #12]
 802992c:	061b      	lsls	r3, r3, #24
 802992e:	b09d      	sub	sp, #116	; 0x74
 8029930:	4607      	mov	r7, r0
 8029932:	460d      	mov	r5, r1
 8029934:	4614      	mov	r4, r2
 8029936:	d50e      	bpl.n	8029956 <_svfiprintf_r+0x32>
 8029938:	690b      	ldr	r3, [r1, #16]
 802993a:	b963      	cbnz	r3, 8029956 <_svfiprintf_r+0x32>
 802993c:	2140      	movs	r1, #64	; 0x40
 802993e:	f7fc fa51 	bl	8025de4 <_malloc_r>
 8029942:	6028      	str	r0, [r5, #0]
 8029944:	6128      	str	r0, [r5, #16]
 8029946:	b920      	cbnz	r0, 8029952 <_svfiprintf_r+0x2e>
 8029948:	230c      	movs	r3, #12
 802994a:	603b      	str	r3, [r7, #0]
 802994c:	f04f 30ff 	mov.w	r0, #4294967295
 8029950:	e0d1      	b.n	8029af6 <_svfiprintf_r+0x1d2>
 8029952:	2340      	movs	r3, #64	; 0x40
 8029954:	616b      	str	r3, [r5, #20]
 8029956:	2300      	movs	r3, #0
 8029958:	9309      	str	r3, [sp, #36]	; 0x24
 802995a:	2320      	movs	r3, #32
 802995c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029960:	f8cd 800c 	str.w	r8, [sp, #12]
 8029964:	2330      	movs	r3, #48	; 0x30
 8029966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8029b10 <_svfiprintf_r+0x1ec>
 802996a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802996e:	f04f 0901 	mov.w	r9, #1
 8029972:	4623      	mov	r3, r4
 8029974:	469a      	mov	sl, r3
 8029976:	f813 2b01 	ldrb.w	r2, [r3], #1
 802997a:	b10a      	cbz	r2, 8029980 <_svfiprintf_r+0x5c>
 802997c:	2a25      	cmp	r2, #37	; 0x25
 802997e:	d1f9      	bne.n	8029974 <_svfiprintf_r+0x50>
 8029980:	ebba 0b04 	subs.w	fp, sl, r4
 8029984:	d00b      	beq.n	802999e <_svfiprintf_r+0x7a>
 8029986:	465b      	mov	r3, fp
 8029988:	4622      	mov	r2, r4
 802998a:	4629      	mov	r1, r5
 802998c:	4638      	mov	r0, r7
 802998e:	f7ff ff6d 	bl	802986c <__ssputs_r>
 8029992:	3001      	adds	r0, #1
 8029994:	f000 80aa 	beq.w	8029aec <_svfiprintf_r+0x1c8>
 8029998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802999a:	445a      	add	r2, fp
 802999c:	9209      	str	r2, [sp, #36]	; 0x24
 802999e:	f89a 3000 	ldrb.w	r3, [sl]
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	f000 80a2 	beq.w	8029aec <_svfiprintf_r+0x1c8>
 80299a8:	2300      	movs	r3, #0
 80299aa:	f04f 32ff 	mov.w	r2, #4294967295
 80299ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80299b2:	f10a 0a01 	add.w	sl, sl, #1
 80299b6:	9304      	str	r3, [sp, #16]
 80299b8:	9307      	str	r3, [sp, #28]
 80299ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80299be:	931a      	str	r3, [sp, #104]	; 0x68
 80299c0:	4654      	mov	r4, sl
 80299c2:	2205      	movs	r2, #5
 80299c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299c8:	4851      	ldr	r0, [pc, #324]	; (8029b10 <_svfiprintf_r+0x1ec>)
 80299ca:	f7d6 fc51 	bl	8000270 <memchr>
 80299ce:	9a04      	ldr	r2, [sp, #16]
 80299d0:	b9d8      	cbnz	r0, 8029a0a <_svfiprintf_r+0xe6>
 80299d2:	06d0      	lsls	r0, r2, #27
 80299d4:	bf44      	itt	mi
 80299d6:	2320      	movmi	r3, #32
 80299d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80299dc:	0711      	lsls	r1, r2, #28
 80299de:	bf44      	itt	mi
 80299e0:	232b      	movmi	r3, #43	; 0x2b
 80299e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80299e6:	f89a 3000 	ldrb.w	r3, [sl]
 80299ea:	2b2a      	cmp	r3, #42	; 0x2a
 80299ec:	d015      	beq.n	8029a1a <_svfiprintf_r+0xf6>
 80299ee:	9a07      	ldr	r2, [sp, #28]
 80299f0:	4654      	mov	r4, sl
 80299f2:	2000      	movs	r0, #0
 80299f4:	f04f 0c0a 	mov.w	ip, #10
 80299f8:	4621      	mov	r1, r4
 80299fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80299fe:	3b30      	subs	r3, #48	; 0x30
 8029a00:	2b09      	cmp	r3, #9
 8029a02:	d94e      	bls.n	8029aa2 <_svfiprintf_r+0x17e>
 8029a04:	b1b0      	cbz	r0, 8029a34 <_svfiprintf_r+0x110>
 8029a06:	9207      	str	r2, [sp, #28]
 8029a08:	e014      	b.n	8029a34 <_svfiprintf_r+0x110>
 8029a0a:	eba0 0308 	sub.w	r3, r0, r8
 8029a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8029a12:	4313      	orrs	r3, r2
 8029a14:	9304      	str	r3, [sp, #16]
 8029a16:	46a2      	mov	sl, r4
 8029a18:	e7d2      	b.n	80299c0 <_svfiprintf_r+0x9c>
 8029a1a:	9b03      	ldr	r3, [sp, #12]
 8029a1c:	1d19      	adds	r1, r3, #4
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	9103      	str	r1, [sp, #12]
 8029a22:	2b00      	cmp	r3, #0
 8029a24:	bfbb      	ittet	lt
 8029a26:	425b      	neglt	r3, r3
 8029a28:	f042 0202 	orrlt.w	r2, r2, #2
 8029a2c:	9307      	strge	r3, [sp, #28]
 8029a2e:	9307      	strlt	r3, [sp, #28]
 8029a30:	bfb8      	it	lt
 8029a32:	9204      	strlt	r2, [sp, #16]
 8029a34:	7823      	ldrb	r3, [r4, #0]
 8029a36:	2b2e      	cmp	r3, #46	; 0x2e
 8029a38:	d10c      	bne.n	8029a54 <_svfiprintf_r+0x130>
 8029a3a:	7863      	ldrb	r3, [r4, #1]
 8029a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8029a3e:	d135      	bne.n	8029aac <_svfiprintf_r+0x188>
 8029a40:	9b03      	ldr	r3, [sp, #12]
 8029a42:	1d1a      	adds	r2, r3, #4
 8029a44:	681b      	ldr	r3, [r3, #0]
 8029a46:	9203      	str	r2, [sp, #12]
 8029a48:	2b00      	cmp	r3, #0
 8029a4a:	bfb8      	it	lt
 8029a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8029a50:	3402      	adds	r4, #2
 8029a52:	9305      	str	r3, [sp, #20]
 8029a54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8029b20 <_svfiprintf_r+0x1fc>
 8029a58:	7821      	ldrb	r1, [r4, #0]
 8029a5a:	2203      	movs	r2, #3
 8029a5c:	4650      	mov	r0, sl
 8029a5e:	f7d6 fc07 	bl	8000270 <memchr>
 8029a62:	b140      	cbz	r0, 8029a76 <_svfiprintf_r+0x152>
 8029a64:	2340      	movs	r3, #64	; 0x40
 8029a66:	eba0 000a 	sub.w	r0, r0, sl
 8029a6a:	fa03 f000 	lsl.w	r0, r3, r0
 8029a6e:	9b04      	ldr	r3, [sp, #16]
 8029a70:	4303      	orrs	r3, r0
 8029a72:	3401      	adds	r4, #1
 8029a74:	9304      	str	r3, [sp, #16]
 8029a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a7a:	4826      	ldr	r0, [pc, #152]	; (8029b14 <_svfiprintf_r+0x1f0>)
 8029a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029a80:	2206      	movs	r2, #6
 8029a82:	f7d6 fbf5 	bl	8000270 <memchr>
 8029a86:	2800      	cmp	r0, #0
 8029a88:	d038      	beq.n	8029afc <_svfiprintf_r+0x1d8>
 8029a8a:	4b23      	ldr	r3, [pc, #140]	; (8029b18 <_svfiprintf_r+0x1f4>)
 8029a8c:	bb1b      	cbnz	r3, 8029ad6 <_svfiprintf_r+0x1b2>
 8029a8e:	9b03      	ldr	r3, [sp, #12]
 8029a90:	3307      	adds	r3, #7
 8029a92:	f023 0307 	bic.w	r3, r3, #7
 8029a96:	3308      	adds	r3, #8
 8029a98:	9303      	str	r3, [sp, #12]
 8029a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a9c:	4433      	add	r3, r6
 8029a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8029aa0:	e767      	b.n	8029972 <_svfiprintf_r+0x4e>
 8029aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8029aa6:	460c      	mov	r4, r1
 8029aa8:	2001      	movs	r0, #1
 8029aaa:	e7a5      	b.n	80299f8 <_svfiprintf_r+0xd4>
 8029aac:	2300      	movs	r3, #0
 8029aae:	3401      	adds	r4, #1
 8029ab0:	9305      	str	r3, [sp, #20]
 8029ab2:	4619      	mov	r1, r3
 8029ab4:	f04f 0c0a 	mov.w	ip, #10
 8029ab8:	4620      	mov	r0, r4
 8029aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029abe:	3a30      	subs	r2, #48	; 0x30
 8029ac0:	2a09      	cmp	r2, #9
 8029ac2:	d903      	bls.n	8029acc <_svfiprintf_r+0x1a8>
 8029ac4:	2b00      	cmp	r3, #0
 8029ac6:	d0c5      	beq.n	8029a54 <_svfiprintf_r+0x130>
 8029ac8:	9105      	str	r1, [sp, #20]
 8029aca:	e7c3      	b.n	8029a54 <_svfiprintf_r+0x130>
 8029acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8029ad0:	4604      	mov	r4, r0
 8029ad2:	2301      	movs	r3, #1
 8029ad4:	e7f0      	b.n	8029ab8 <_svfiprintf_r+0x194>
 8029ad6:	ab03      	add	r3, sp, #12
 8029ad8:	9300      	str	r3, [sp, #0]
 8029ada:	462a      	mov	r2, r5
 8029adc:	4b0f      	ldr	r3, [pc, #60]	; (8029b1c <_svfiprintf_r+0x1f8>)
 8029ade:	a904      	add	r1, sp, #16
 8029ae0:	4638      	mov	r0, r7
 8029ae2:	f7fc fa85 	bl	8025ff0 <_printf_float>
 8029ae6:	1c42      	adds	r2, r0, #1
 8029ae8:	4606      	mov	r6, r0
 8029aea:	d1d6      	bne.n	8029a9a <_svfiprintf_r+0x176>
 8029aec:	89ab      	ldrh	r3, [r5, #12]
 8029aee:	065b      	lsls	r3, r3, #25
 8029af0:	f53f af2c 	bmi.w	802994c <_svfiprintf_r+0x28>
 8029af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029af6:	b01d      	add	sp, #116	; 0x74
 8029af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029afc:	ab03      	add	r3, sp, #12
 8029afe:	9300      	str	r3, [sp, #0]
 8029b00:	462a      	mov	r2, r5
 8029b02:	4b06      	ldr	r3, [pc, #24]	; (8029b1c <_svfiprintf_r+0x1f8>)
 8029b04:	a904      	add	r1, sp, #16
 8029b06:	4638      	mov	r0, r7
 8029b08:	f7fc fcfe 	bl	8026508 <_printf_i>
 8029b0c:	e7eb      	b.n	8029ae6 <_svfiprintf_r+0x1c2>
 8029b0e:	bf00      	nop
 8029b10:	08047ddc 	.word	0x08047ddc
 8029b14:	08047de6 	.word	0x08047de6
 8029b18:	08025ff1 	.word	0x08025ff1
 8029b1c:	0802986d 	.word	0x0802986d
 8029b20:	08047de2 	.word	0x08047de2

08029b24 <_sungetc_r>:
 8029b24:	b538      	push	{r3, r4, r5, lr}
 8029b26:	1c4b      	adds	r3, r1, #1
 8029b28:	4614      	mov	r4, r2
 8029b2a:	d103      	bne.n	8029b34 <_sungetc_r+0x10>
 8029b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8029b30:	4628      	mov	r0, r5
 8029b32:	bd38      	pop	{r3, r4, r5, pc}
 8029b34:	8993      	ldrh	r3, [r2, #12]
 8029b36:	f023 0320 	bic.w	r3, r3, #32
 8029b3a:	8193      	strh	r3, [r2, #12]
 8029b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029b3e:	6852      	ldr	r2, [r2, #4]
 8029b40:	b2cd      	uxtb	r5, r1
 8029b42:	b18b      	cbz	r3, 8029b68 <_sungetc_r+0x44>
 8029b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029b46:	4293      	cmp	r3, r2
 8029b48:	dd08      	ble.n	8029b5c <_sungetc_r+0x38>
 8029b4a:	6823      	ldr	r3, [r4, #0]
 8029b4c:	1e5a      	subs	r2, r3, #1
 8029b4e:	6022      	str	r2, [r4, #0]
 8029b50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029b54:	6863      	ldr	r3, [r4, #4]
 8029b56:	3301      	adds	r3, #1
 8029b58:	6063      	str	r3, [r4, #4]
 8029b5a:	e7e9      	b.n	8029b30 <_sungetc_r+0xc>
 8029b5c:	4621      	mov	r1, r4
 8029b5e:	f000 fd1b 	bl	802a598 <__submore>
 8029b62:	2800      	cmp	r0, #0
 8029b64:	d0f1      	beq.n	8029b4a <_sungetc_r+0x26>
 8029b66:	e7e1      	b.n	8029b2c <_sungetc_r+0x8>
 8029b68:	6921      	ldr	r1, [r4, #16]
 8029b6a:	6823      	ldr	r3, [r4, #0]
 8029b6c:	b151      	cbz	r1, 8029b84 <_sungetc_r+0x60>
 8029b6e:	4299      	cmp	r1, r3
 8029b70:	d208      	bcs.n	8029b84 <_sungetc_r+0x60>
 8029b72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8029b76:	42a9      	cmp	r1, r5
 8029b78:	d104      	bne.n	8029b84 <_sungetc_r+0x60>
 8029b7a:	3b01      	subs	r3, #1
 8029b7c:	3201      	adds	r2, #1
 8029b7e:	6023      	str	r3, [r4, #0]
 8029b80:	6062      	str	r2, [r4, #4]
 8029b82:	e7d5      	b.n	8029b30 <_sungetc_r+0xc>
 8029b84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8029b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8029b8e:	2303      	movs	r3, #3
 8029b90:	63a3      	str	r3, [r4, #56]	; 0x38
 8029b92:	4623      	mov	r3, r4
 8029b94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8029b98:	6023      	str	r3, [r4, #0]
 8029b9a:	2301      	movs	r3, #1
 8029b9c:	e7dc      	b.n	8029b58 <_sungetc_r+0x34>

08029b9e <__ssrefill_r>:
 8029b9e:	b510      	push	{r4, lr}
 8029ba0:	460c      	mov	r4, r1
 8029ba2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029ba4:	b169      	cbz	r1, 8029bc2 <__ssrefill_r+0x24>
 8029ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029baa:	4299      	cmp	r1, r3
 8029bac:	d001      	beq.n	8029bb2 <__ssrefill_r+0x14>
 8029bae:	f7fc f8ad 	bl	8025d0c <_free_r>
 8029bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029bb4:	6063      	str	r3, [r4, #4]
 8029bb6:	2000      	movs	r0, #0
 8029bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8029bba:	b113      	cbz	r3, 8029bc2 <__ssrefill_r+0x24>
 8029bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029bbe:	6023      	str	r3, [r4, #0]
 8029bc0:	bd10      	pop	{r4, pc}
 8029bc2:	6923      	ldr	r3, [r4, #16]
 8029bc4:	6023      	str	r3, [r4, #0]
 8029bc6:	2300      	movs	r3, #0
 8029bc8:	6063      	str	r3, [r4, #4]
 8029bca:	89a3      	ldrh	r3, [r4, #12]
 8029bcc:	f043 0320 	orr.w	r3, r3, #32
 8029bd0:	81a3      	strh	r3, [r4, #12]
 8029bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8029bd6:	e7f3      	b.n	8029bc0 <__ssrefill_r+0x22>

08029bd8 <__ssvfiscanf_r>:
 8029bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029bdc:	460c      	mov	r4, r1
 8029bde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8029be2:	2100      	movs	r1, #0
 8029be4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8029be8:	49a6      	ldr	r1, [pc, #664]	; (8029e84 <__ssvfiscanf_r+0x2ac>)
 8029bea:	91a0      	str	r1, [sp, #640]	; 0x280
 8029bec:	f10d 0804 	add.w	r8, sp, #4
 8029bf0:	49a5      	ldr	r1, [pc, #660]	; (8029e88 <__ssvfiscanf_r+0x2b0>)
 8029bf2:	4fa6      	ldr	r7, [pc, #664]	; (8029e8c <__ssvfiscanf_r+0x2b4>)
 8029bf4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8029e90 <__ssvfiscanf_r+0x2b8>
 8029bf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8029bfc:	4606      	mov	r6, r0
 8029bfe:	91a1      	str	r1, [sp, #644]	; 0x284
 8029c00:	9300      	str	r3, [sp, #0]
 8029c02:	7813      	ldrb	r3, [r2, #0]
 8029c04:	2b00      	cmp	r3, #0
 8029c06:	f000 815a 	beq.w	8029ebe <__ssvfiscanf_r+0x2e6>
 8029c0a:	5dd9      	ldrb	r1, [r3, r7]
 8029c0c:	f011 0108 	ands.w	r1, r1, #8
 8029c10:	f102 0501 	add.w	r5, r2, #1
 8029c14:	d019      	beq.n	8029c4a <__ssvfiscanf_r+0x72>
 8029c16:	6863      	ldr	r3, [r4, #4]
 8029c18:	2b00      	cmp	r3, #0
 8029c1a:	dd0f      	ble.n	8029c3c <__ssvfiscanf_r+0x64>
 8029c1c:	6823      	ldr	r3, [r4, #0]
 8029c1e:	781a      	ldrb	r2, [r3, #0]
 8029c20:	5cba      	ldrb	r2, [r7, r2]
 8029c22:	0712      	lsls	r2, r2, #28
 8029c24:	d401      	bmi.n	8029c2a <__ssvfiscanf_r+0x52>
 8029c26:	462a      	mov	r2, r5
 8029c28:	e7eb      	b.n	8029c02 <__ssvfiscanf_r+0x2a>
 8029c2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029c2c:	3201      	adds	r2, #1
 8029c2e:	9245      	str	r2, [sp, #276]	; 0x114
 8029c30:	6862      	ldr	r2, [r4, #4]
 8029c32:	3301      	adds	r3, #1
 8029c34:	3a01      	subs	r2, #1
 8029c36:	6062      	str	r2, [r4, #4]
 8029c38:	6023      	str	r3, [r4, #0]
 8029c3a:	e7ec      	b.n	8029c16 <__ssvfiscanf_r+0x3e>
 8029c3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029c3e:	4621      	mov	r1, r4
 8029c40:	4630      	mov	r0, r6
 8029c42:	4798      	blx	r3
 8029c44:	2800      	cmp	r0, #0
 8029c46:	d0e9      	beq.n	8029c1c <__ssvfiscanf_r+0x44>
 8029c48:	e7ed      	b.n	8029c26 <__ssvfiscanf_r+0x4e>
 8029c4a:	2b25      	cmp	r3, #37	; 0x25
 8029c4c:	d012      	beq.n	8029c74 <__ssvfiscanf_r+0x9c>
 8029c4e:	469a      	mov	sl, r3
 8029c50:	6863      	ldr	r3, [r4, #4]
 8029c52:	2b00      	cmp	r3, #0
 8029c54:	f340 8091 	ble.w	8029d7a <__ssvfiscanf_r+0x1a2>
 8029c58:	6822      	ldr	r2, [r4, #0]
 8029c5a:	7813      	ldrb	r3, [r2, #0]
 8029c5c:	4553      	cmp	r3, sl
 8029c5e:	f040 812e 	bne.w	8029ebe <__ssvfiscanf_r+0x2e6>
 8029c62:	6863      	ldr	r3, [r4, #4]
 8029c64:	3b01      	subs	r3, #1
 8029c66:	6063      	str	r3, [r4, #4]
 8029c68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8029c6a:	3201      	adds	r2, #1
 8029c6c:	3301      	adds	r3, #1
 8029c6e:	6022      	str	r2, [r4, #0]
 8029c70:	9345      	str	r3, [sp, #276]	; 0x114
 8029c72:	e7d8      	b.n	8029c26 <__ssvfiscanf_r+0x4e>
 8029c74:	9141      	str	r1, [sp, #260]	; 0x104
 8029c76:	9143      	str	r1, [sp, #268]	; 0x10c
 8029c78:	7853      	ldrb	r3, [r2, #1]
 8029c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8029c7c:	bf02      	ittt	eq
 8029c7e:	2310      	moveq	r3, #16
 8029c80:	1c95      	addeq	r5, r2, #2
 8029c82:	9341      	streq	r3, [sp, #260]	; 0x104
 8029c84:	220a      	movs	r2, #10
 8029c86:	46aa      	mov	sl, r5
 8029c88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8029c8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8029c90:	2b09      	cmp	r3, #9
 8029c92:	d91d      	bls.n	8029cd0 <__ssvfiscanf_r+0xf8>
 8029c94:	487e      	ldr	r0, [pc, #504]	; (8029e90 <__ssvfiscanf_r+0x2b8>)
 8029c96:	2203      	movs	r2, #3
 8029c98:	f7d6 faea 	bl	8000270 <memchr>
 8029c9c:	b140      	cbz	r0, 8029cb0 <__ssvfiscanf_r+0xd8>
 8029c9e:	2301      	movs	r3, #1
 8029ca0:	eba0 0009 	sub.w	r0, r0, r9
 8029ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8029ca8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029caa:	4318      	orrs	r0, r3
 8029cac:	9041      	str	r0, [sp, #260]	; 0x104
 8029cae:	4655      	mov	r5, sl
 8029cb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029cb4:	2b78      	cmp	r3, #120	; 0x78
 8029cb6:	d806      	bhi.n	8029cc6 <__ssvfiscanf_r+0xee>
 8029cb8:	2b57      	cmp	r3, #87	; 0x57
 8029cba:	d810      	bhi.n	8029cde <__ssvfiscanf_r+0x106>
 8029cbc:	2b25      	cmp	r3, #37	; 0x25
 8029cbe:	d0c6      	beq.n	8029c4e <__ssvfiscanf_r+0x76>
 8029cc0:	d856      	bhi.n	8029d70 <__ssvfiscanf_r+0x198>
 8029cc2:	2b00      	cmp	r3, #0
 8029cc4:	d064      	beq.n	8029d90 <__ssvfiscanf_r+0x1b8>
 8029cc6:	2303      	movs	r3, #3
 8029cc8:	9347      	str	r3, [sp, #284]	; 0x11c
 8029cca:	230a      	movs	r3, #10
 8029ccc:	9342      	str	r3, [sp, #264]	; 0x108
 8029cce:	e071      	b.n	8029db4 <__ssvfiscanf_r+0x1dc>
 8029cd0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8029cd2:	fb02 1103 	mla	r1, r2, r3, r1
 8029cd6:	3930      	subs	r1, #48	; 0x30
 8029cd8:	9143      	str	r1, [sp, #268]	; 0x10c
 8029cda:	4655      	mov	r5, sl
 8029cdc:	e7d3      	b.n	8029c86 <__ssvfiscanf_r+0xae>
 8029cde:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8029ce2:	2a20      	cmp	r2, #32
 8029ce4:	d8ef      	bhi.n	8029cc6 <__ssvfiscanf_r+0xee>
 8029ce6:	a101      	add	r1, pc, #4	; (adr r1, 8029cec <__ssvfiscanf_r+0x114>)
 8029ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8029cec:	08029d9f 	.word	0x08029d9f
 8029cf0:	08029cc7 	.word	0x08029cc7
 8029cf4:	08029cc7 	.word	0x08029cc7
 8029cf8:	08029dfd 	.word	0x08029dfd
 8029cfc:	08029cc7 	.word	0x08029cc7
 8029d00:	08029cc7 	.word	0x08029cc7
 8029d04:	08029cc7 	.word	0x08029cc7
 8029d08:	08029cc7 	.word	0x08029cc7
 8029d0c:	08029cc7 	.word	0x08029cc7
 8029d10:	08029cc7 	.word	0x08029cc7
 8029d14:	08029cc7 	.word	0x08029cc7
 8029d18:	08029e13 	.word	0x08029e13
 8029d1c:	08029de9 	.word	0x08029de9
 8029d20:	08029d77 	.word	0x08029d77
 8029d24:	08029d77 	.word	0x08029d77
 8029d28:	08029d77 	.word	0x08029d77
 8029d2c:	08029cc7 	.word	0x08029cc7
 8029d30:	08029ded 	.word	0x08029ded
 8029d34:	08029cc7 	.word	0x08029cc7
 8029d38:	08029cc7 	.word	0x08029cc7
 8029d3c:	08029cc7 	.word	0x08029cc7
 8029d40:	08029cc7 	.word	0x08029cc7
 8029d44:	08029e23 	.word	0x08029e23
 8029d48:	08029df5 	.word	0x08029df5
 8029d4c:	08029d97 	.word	0x08029d97
 8029d50:	08029cc7 	.word	0x08029cc7
 8029d54:	08029cc7 	.word	0x08029cc7
 8029d58:	08029e1f 	.word	0x08029e1f
 8029d5c:	08029cc7 	.word	0x08029cc7
 8029d60:	08029de9 	.word	0x08029de9
 8029d64:	08029cc7 	.word	0x08029cc7
 8029d68:	08029cc7 	.word	0x08029cc7
 8029d6c:	08029d9f 	.word	0x08029d9f
 8029d70:	3b45      	subs	r3, #69	; 0x45
 8029d72:	2b02      	cmp	r3, #2
 8029d74:	d8a7      	bhi.n	8029cc6 <__ssvfiscanf_r+0xee>
 8029d76:	2305      	movs	r3, #5
 8029d78:	e01b      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029d7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029d7c:	4621      	mov	r1, r4
 8029d7e:	4630      	mov	r0, r6
 8029d80:	4798      	blx	r3
 8029d82:	2800      	cmp	r0, #0
 8029d84:	f43f af68 	beq.w	8029c58 <__ssvfiscanf_r+0x80>
 8029d88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029d8a:	2800      	cmp	r0, #0
 8029d8c:	f040 808d 	bne.w	8029eaa <__ssvfiscanf_r+0x2d2>
 8029d90:	f04f 30ff 	mov.w	r0, #4294967295
 8029d94:	e08f      	b.n	8029eb6 <__ssvfiscanf_r+0x2de>
 8029d96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029d98:	f042 0220 	orr.w	r2, r2, #32
 8029d9c:	9241      	str	r2, [sp, #260]	; 0x104
 8029d9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8029da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029da4:	9241      	str	r2, [sp, #260]	; 0x104
 8029da6:	2210      	movs	r2, #16
 8029da8:	2b6f      	cmp	r3, #111	; 0x6f
 8029daa:	9242      	str	r2, [sp, #264]	; 0x108
 8029dac:	bf34      	ite	cc
 8029dae:	2303      	movcc	r3, #3
 8029db0:	2304      	movcs	r3, #4
 8029db2:	9347      	str	r3, [sp, #284]	; 0x11c
 8029db4:	6863      	ldr	r3, [r4, #4]
 8029db6:	2b00      	cmp	r3, #0
 8029db8:	dd42      	ble.n	8029e40 <__ssvfiscanf_r+0x268>
 8029dba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029dbc:	0659      	lsls	r1, r3, #25
 8029dbe:	d404      	bmi.n	8029dca <__ssvfiscanf_r+0x1f2>
 8029dc0:	6823      	ldr	r3, [r4, #0]
 8029dc2:	781a      	ldrb	r2, [r3, #0]
 8029dc4:	5cba      	ldrb	r2, [r7, r2]
 8029dc6:	0712      	lsls	r2, r2, #28
 8029dc8:	d441      	bmi.n	8029e4e <__ssvfiscanf_r+0x276>
 8029dca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8029dcc:	2b02      	cmp	r3, #2
 8029dce:	dc50      	bgt.n	8029e72 <__ssvfiscanf_r+0x29a>
 8029dd0:	466b      	mov	r3, sp
 8029dd2:	4622      	mov	r2, r4
 8029dd4:	a941      	add	r1, sp, #260	; 0x104
 8029dd6:	4630      	mov	r0, r6
 8029dd8:	f000 f9d0 	bl	802a17c <_scanf_chars>
 8029ddc:	2801      	cmp	r0, #1
 8029dde:	d06e      	beq.n	8029ebe <__ssvfiscanf_r+0x2e6>
 8029de0:	2802      	cmp	r0, #2
 8029de2:	f47f af20 	bne.w	8029c26 <__ssvfiscanf_r+0x4e>
 8029de6:	e7cf      	b.n	8029d88 <__ssvfiscanf_r+0x1b0>
 8029de8:	220a      	movs	r2, #10
 8029dea:	e7dd      	b.n	8029da8 <__ssvfiscanf_r+0x1d0>
 8029dec:	2300      	movs	r3, #0
 8029dee:	9342      	str	r3, [sp, #264]	; 0x108
 8029df0:	2303      	movs	r3, #3
 8029df2:	e7de      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029df4:	2308      	movs	r3, #8
 8029df6:	9342      	str	r3, [sp, #264]	; 0x108
 8029df8:	2304      	movs	r3, #4
 8029dfa:	e7da      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029dfc:	4629      	mov	r1, r5
 8029dfe:	4640      	mov	r0, r8
 8029e00:	f000 fb92 	bl	802a528 <__sccl>
 8029e04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029e0a:	9341      	str	r3, [sp, #260]	; 0x104
 8029e0c:	4605      	mov	r5, r0
 8029e0e:	2301      	movs	r3, #1
 8029e10:	e7cf      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029e12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8029e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029e18:	9341      	str	r3, [sp, #260]	; 0x104
 8029e1a:	2300      	movs	r3, #0
 8029e1c:	e7c9      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029e1e:	2302      	movs	r3, #2
 8029e20:	e7c7      	b.n	8029db2 <__ssvfiscanf_r+0x1da>
 8029e22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8029e24:	06c3      	lsls	r3, r0, #27
 8029e26:	f53f aefe 	bmi.w	8029c26 <__ssvfiscanf_r+0x4e>
 8029e2a:	9b00      	ldr	r3, [sp, #0]
 8029e2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029e2e:	1d19      	adds	r1, r3, #4
 8029e30:	9100      	str	r1, [sp, #0]
 8029e32:	681b      	ldr	r3, [r3, #0]
 8029e34:	f010 0f01 	tst.w	r0, #1
 8029e38:	bf14      	ite	ne
 8029e3a:	801a      	strhne	r2, [r3, #0]
 8029e3c:	601a      	streq	r2, [r3, #0]
 8029e3e:	e6f2      	b.n	8029c26 <__ssvfiscanf_r+0x4e>
 8029e40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029e42:	4621      	mov	r1, r4
 8029e44:	4630      	mov	r0, r6
 8029e46:	4798      	blx	r3
 8029e48:	2800      	cmp	r0, #0
 8029e4a:	d0b6      	beq.n	8029dba <__ssvfiscanf_r+0x1e2>
 8029e4c:	e79c      	b.n	8029d88 <__ssvfiscanf_r+0x1b0>
 8029e4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8029e50:	3201      	adds	r2, #1
 8029e52:	9245      	str	r2, [sp, #276]	; 0x114
 8029e54:	6862      	ldr	r2, [r4, #4]
 8029e56:	3a01      	subs	r2, #1
 8029e58:	2a00      	cmp	r2, #0
 8029e5a:	6062      	str	r2, [r4, #4]
 8029e5c:	dd02      	ble.n	8029e64 <__ssvfiscanf_r+0x28c>
 8029e5e:	3301      	adds	r3, #1
 8029e60:	6023      	str	r3, [r4, #0]
 8029e62:	e7ad      	b.n	8029dc0 <__ssvfiscanf_r+0x1e8>
 8029e64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029e66:	4621      	mov	r1, r4
 8029e68:	4630      	mov	r0, r6
 8029e6a:	4798      	blx	r3
 8029e6c:	2800      	cmp	r0, #0
 8029e6e:	d0a7      	beq.n	8029dc0 <__ssvfiscanf_r+0x1e8>
 8029e70:	e78a      	b.n	8029d88 <__ssvfiscanf_r+0x1b0>
 8029e72:	2b04      	cmp	r3, #4
 8029e74:	dc0e      	bgt.n	8029e94 <__ssvfiscanf_r+0x2bc>
 8029e76:	466b      	mov	r3, sp
 8029e78:	4622      	mov	r2, r4
 8029e7a:	a941      	add	r1, sp, #260	; 0x104
 8029e7c:	4630      	mov	r0, r6
 8029e7e:	f000 f9d7 	bl	802a230 <_scanf_i>
 8029e82:	e7ab      	b.n	8029ddc <__ssvfiscanf_r+0x204>
 8029e84:	08029b25 	.word	0x08029b25
 8029e88:	08029b9f 	.word	0x08029b9f
 8029e8c:	0804752d 	.word	0x0804752d
 8029e90:	08047de2 	.word	0x08047de2
 8029e94:	4b0b      	ldr	r3, [pc, #44]	; (8029ec4 <__ssvfiscanf_r+0x2ec>)
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	f43f aec5 	beq.w	8029c26 <__ssvfiscanf_r+0x4e>
 8029e9c:	466b      	mov	r3, sp
 8029e9e:	4622      	mov	r2, r4
 8029ea0:	a941      	add	r1, sp, #260	; 0x104
 8029ea2:	4630      	mov	r0, r6
 8029ea4:	f3af 8000 	nop.w
 8029ea8:	e798      	b.n	8029ddc <__ssvfiscanf_r+0x204>
 8029eaa:	89a3      	ldrh	r3, [r4, #12]
 8029eac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8029eb0:	bf18      	it	ne
 8029eb2:	f04f 30ff 	movne.w	r0, #4294967295
 8029eb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8029eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ebe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8029ec0:	e7f9      	b.n	8029eb6 <__ssvfiscanf_r+0x2de>
 8029ec2:	bf00      	nop
 8029ec4:	00000000 	.word	0x00000000

08029ec8 <__sfputc_r>:
 8029ec8:	6893      	ldr	r3, [r2, #8]
 8029eca:	3b01      	subs	r3, #1
 8029ecc:	2b00      	cmp	r3, #0
 8029ece:	b410      	push	{r4}
 8029ed0:	6093      	str	r3, [r2, #8]
 8029ed2:	da08      	bge.n	8029ee6 <__sfputc_r+0x1e>
 8029ed4:	6994      	ldr	r4, [r2, #24]
 8029ed6:	42a3      	cmp	r3, r4
 8029ed8:	db01      	blt.n	8029ede <__sfputc_r+0x16>
 8029eda:	290a      	cmp	r1, #10
 8029edc:	d103      	bne.n	8029ee6 <__sfputc_r+0x1e>
 8029ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ee2:	f7fd bf75 	b.w	8027dd0 <__swbuf_r>
 8029ee6:	6813      	ldr	r3, [r2, #0]
 8029ee8:	1c58      	adds	r0, r3, #1
 8029eea:	6010      	str	r0, [r2, #0]
 8029eec:	7019      	strb	r1, [r3, #0]
 8029eee:	4608      	mov	r0, r1
 8029ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ef4:	4770      	bx	lr

08029ef6 <__sfputs_r>:
 8029ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ef8:	4606      	mov	r6, r0
 8029efa:	460f      	mov	r7, r1
 8029efc:	4614      	mov	r4, r2
 8029efe:	18d5      	adds	r5, r2, r3
 8029f00:	42ac      	cmp	r4, r5
 8029f02:	d101      	bne.n	8029f08 <__sfputs_r+0x12>
 8029f04:	2000      	movs	r0, #0
 8029f06:	e007      	b.n	8029f18 <__sfputs_r+0x22>
 8029f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029f0c:	463a      	mov	r2, r7
 8029f0e:	4630      	mov	r0, r6
 8029f10:	f7ff ffda 	bl	8029ec8 <__sfputc_r>
 8029f14:	1c43      	adds	r3, r0, #1
 8029f16:	d1f3      	bne.n	8029f00 <__sfputs_r+0xa>
 8029f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029f1a:	Address 0x0000000008029f1a is out of bounds.


08029f1c <_vfiprintf_r>:
 8029f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f20:	460d      	mov	r5, r1
 8029f22:	b09d      	sub	sp, #116	; 0x74
 8029f24:	4614      	mov	r4, r2
 8029f26:	4698      	mov	r8, r3
 8029f28:	4606      	mov	r6, r0
 8029f2a:	b118      	cbz	r0, 8029f34 <_vfiprintf_r+0x18>
 8029f2c:	6983      	ldr	r3, [r0, #24]
 8029f2e:	b90b      	cbnz	r3, 8029f34 <_vfiprintf_r+0x18>
 8029f30:	f7fb fa50 	bl	80253d4 <__sinit>
 8029f34:	4b89      	ldr	r3, [pc, #548]	; (802a15c <_vfiprintf_r+0x240>)
 8029f36:	429d      	cmp	r5, r3
 8029f38:	d11b      	bne.n	8029f72 <_vfiprintf_r+0x56>
 8029f3a:	6875      	ldr	r5, [r6, #4]
 8029f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029f3e:	07d9      	lsls	r1, r3, #31
 8029f40:	d405      	bmi.n	8029f4e <_vfiprintf_r+0x32>
 8029f42:	89ab      	ldrh	r3, [r5, #12]
 8029f44:	059a      	lsls	r2, r3, #22
 8029f46:	d402      	bmi.n	8029f4e <_vfiprintf_r+0x32>
 8029f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f4a:	f7fb fc19 	bl	8025780 <__retarget_lock_acquire_recursive>
 8029f4e:	89ab      	ldrh	r3, [r5, #12]
 8029f50:	071b      	lsls	r3, r3, #28
 8029f52:	d501      	bpl.n	8029f58 <_vfiprintf_r+0x3c>
 8029f54:	692b      	ldr	r3, [r5, #16]
 8029f56:	b9eb      	cbnz	r3, 8029f94 <_vfiprintf_r+0x78>
 8029f58:	4629      	mov	r1, r5
 8029f5a:	4630      	mov	r0, r6
 8029f5c:	f7fd ff9c 	bl	8027e98 <__swsetup_r>
 8029f60:	b1c0      	cbz	r0, 8029f94 <_vfiprintf_r+0x78>
 8029f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029f64:	07dc      	lsls	r4, r3, #31
 8029f66:	d50e      	bpl.n	8029f86 <_vfiprintf_r+0x6a>
 8029f68:	f04f 30ff 	mov.w	r0, #4294967295
 8029f6c:	b01d      	add	sp, #116	; 0x74
 8029f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f72:	4b7b      	ldr	r3, [pc, #492]	; (802a160 <_vfiprintf_r+0x244>)
 8029f74:	429d      	cmp	r5, r3
 8029f76:	d101      	bne.n	8029f7c <_vfiprintf_r+0x60>
 8029f78:	68b5      	ldr	r5, [r6, #8]
 8029f7a:	e7df      	b.n	8029f3c <_vfiprintf_r+0x20>
 8029f7c:	4b79      	ldr	r3, [pc, #484]	; (802a164 <_vfiprintf_r+0x248>)
 8029f7e:	429d      	cmp	r5, r3
 8029f80:	bf08      	it	eq
 8029f82:	68f5      	ldreq	r5, [r6, #12]
 8029f84:	e7da      	b.n	8029f3c <_vfiprintf_r+0x20>
 8029f86:	89ab      	ldrh	r3, [r5, #12]
 8029f88:	0598      	lsls	r0, r3, #22
 8029f8a:	d4ed      	bmi.n	8029f68 <_vfiprintf_r+0x4c>
 8029f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f8e:	f7fb fbf9 	bl	8025784 <__retarget_lock_release_recursive>
 8029f92:	e7e9      	b.n	8029f68 <_vfiprintf_r+0x4c>
 8029f94:	2300      	movs	r3, #0
 8029f96:	9309      	str	r3, [sp, #36]	; 0x24
 8029f98:	2320      	movs	r3, #32
 8029f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8029fa2:	2330      	movs	r3, #48	; 0x30
 8029fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a168 <_vfiprintf_r+0x24c>
 8029fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029fac:	f04f 0901 	mov.w	r9, #1
 8029fb0:	4623      	mov	r3, r4
 8029fb2:	469a      	mov	sl, r3
 8029fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fb8:	b10a      	cbz	r2, 8029fbe <_vfiprintf_r+0xa2>
 8029fba:	2a25      	cmp	r2, #37	; 0x25
 8029fbc:	d1f9      	bne.n	8029fb2 <_vfiprintf_r+0x96>
 8029fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8029fc2:	d00b      	beq.n	8029fdc <_vfiprintf_r+0xc0>
 8029fc4:	465b      	mov	r3, fp
 8029fc6:	4622      	mov	r2, r4
 8029fc8:	4629      	mov	r1, r5
 8029fca:	4630      	mov	r0, r6
 8029fcc:	f7ff ff93 	bl	8029ef6 <__sfputs_r>
 8029fd0:	3001      	adds	r0, #1
 8029fd2:	f000 80aa 	beq.w	802a12a <_vfiprintf_r+0x20e>
 8029fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029fd8:	445a      	add	r2, fp
 8029fda:	9209      	str	r2, [sp, #36]	; 0x24
 8029fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8029fe0:	2b00      	cmp	r3, #0
 8029fe2:	f000 80a2 	beq.w	802a12a <_vfiprintf_r+0x20e>
 8029fe6:	2300      	movs	r3, #0
 8029fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8029fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029ff0:	f10a 0a01 	add.w	sl, sl, #1
 8029ff4:	9304      	str	r3, [sp, #16]
 8029ff6:	9307      	str	r3, [sp, #28]
 8029ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8029ffe:	4654      	mov	r4, sl
 802a000:	2205      	movs	r2, #5
 802a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a006:	4858      	ldr	r0, [pc, #352]	; (802a168 <_vfiprintf_r+0x24c>)
 802a008:	f7d6 f932 	bl	8000270 <memchr>
 802a00c:	9a04      	ldr	r2, [sp, #16]
 802a00e:	b9d8      	cbnz	r0, 802a048 <_vfiprintf_r+0x12c>
 802a010:	06d1      	lsls	r1, r2, #27
 802a012:	bf44      	itt	mi
 802a014:	2320      	movmi	r3, #32
 802a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a01a:	0713      	lsls	r3, r2, #28
 802a01c:	bf44      	itt	mi
 802a01e:	232b      	movmi	r3, #43	; 0x2b
 802a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a024:	f89a 3000 	ldrb.w	r3, [sl]
 802a028:	2b2a      	cmp	r3, #42	; 0x2a
 802a02a:	d015      	beq.n	802a058 <_vfiprintf_r+0x13c>
 802a02c:	9a07      	ldr	r2, [sp, #28]
 802a02e:	4654      	mov	r4, sl
 802a030:	2000      	movs	r0, #0
 802a032:	f04f 0c0a 	mov.w	ip, #10
 802a036:	4621      	mov	r1, r4
 802a038:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a03c:	3b30      	subs	r3, #48	; 0x30
 802a03e:	2b09      	cmp	r3, #9
 802a040:	d94e      	bls.n	802a0e0 <_vfiprintf_r+0x1c4>
 802a042:	b1b0      	cbz	r0, 802a072 <_vfiprintf_r+0x156>
 802a044:	9207      	str	r2, [sp, #28]
 802a046:	e014      	b.n	802a072 <_vfiprintf_r+0x156>
 802a048:	eba0 0308 	sub.w	r3, r0, r8
 802a04c:	fa09 f303 	lsl.w	r3, r9, r3
 802a050:	4313      	orrs	r3, r2
 802a052:	9304      	str	r3, [sp, #16]
 802a054:	46a2      	mov	sl, r4
 802a056:	e7d2      	b.n	8029ffe <_vfiprintf_r+0xe2>
 802a058:	9b03      	ldr	r3, [sp, #12]
 802a05a:	1d19      	adds	r1, r3, #4
 802a05c:	681b      	ldr	r3, [r3, #0]
 802a05e:	9103      	str	r1, [sp, #12]
 802a060:	2b00      	cmp	r3, #0
 802a062:	bfbb      	ittet	lt
 802a064:	425b      	neglt	r3, r3
 802a066:	f042 0202 	orrlt.w	r2, r2, #2
 802a06a:	9307      	strge	r3, [sp, #28]
 802a06c:	9307      	strlt	r3, [sp, #28]
 802a06e:	bfb8      	it	lt
 802a070:	9204      	strlt	r2, [sp, #16]
 802a072:	7823      	ldrb	r3, [r4, #0]
 802a074:	2b2e      	cmp	r3, #46	; 0x2e
 802a076:	d10c      	bne.n	802a092 <_vfiprintf_r+0x176>
 802a078:	7863      	ldrb	r3, [r4, #1]
 802a07a:	2b2a      	cmp	r3, #42	; 0x2a
 802a07c:	d135      	bne.n	802a0ea <_vfiprintf_r+0x1ce>
 802a07e:	9b03      	ldr	r3, [sp, #12]
 802a080:	1d1a      	adds	r2, r3, #4
 802a082:	681b      	ldr	r3, [r3, #0]
 802a084:	9203      	str	r2, [sp, #12]
 802a086:	2b00      	cmp	r3, #0
 802a088:	bfb8      	it	lt
 802a08a:	f04f 33ff 	movlt.w	r3, #4294967295
 802a08e:	3402      	adds	r4, #2
 802a090:	9305      	str	r3, [sp, #20]
 802a092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a178 <_vfiprintf_r+0x25c>
 802a096:	7821      	ldrb	r1, [r4, #0]
 802a098:	2203      	movs	r2, #3
 802a09a:	4650      	mov	r0, sl
 802a09c:	f7d6 f8e8 	bl	8000270 <memchr>
 802a0a0:	b140      	cbz	r0, 802a0b4 <_vfiprintf_r+0x198>
 802a0a2:	2340      	movs	r3, #64	; 0x40
 802a0a4:	eba0 000a 	sub.w	r0, r0, sl
 802a0a8:	fa03 f000 	lsl.w	r0, r3, r0
 802a0ac:	9b04      	ldr	r3, [sp, #16]
 802a0ae:	4303      	orrs	r3, r0
 802a0b0:	3401      	adds	r4, #1
 802a0b2:	9304      	str	r3, [sp, #16]
 802a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a0b8:	482c      	ldr	r0, [pc, #176]	; (802a16c <_vfiprintf_r+0x250>)
 802a0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a0be:	2206      	movs	r2, #6
 802a0c0:	f7d6 f8d6 	bl	8000270 <memchr>
 802a0c4:	2800      	cmp	r0, #0
 802a0c6:	d03f      	beq.n	802a148 <_vfiprintf_r+0x22c>
 802a0c8:	4b29      	ldr	r3, [pc, #164]	; (802a170 <_vfiprintf_r+0x254>)
 802a0ca:	bb1b      	cbnz	r3, 802a114 <_vfiprintf_r+0x1f8>
 802a0cc:	9b03      	ldr	r3, [sp, #12]
 802a0ce:	3307      	adds	r3, #7
 802a0d0:	f023 0307 	bic.w	r3, r3, #7
 802a0d4:	3308      	adds	r3, #8
 802a0d6:	9303      	str	r3, [sp, #12]
 802a0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0da:	443b      	add	r3, r7
 802a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 802a0de:	e767      	b.n	8029fb0 <_vfiprintf_r+0x94>
 802a0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 802a0e4:	460c      	mov	r4, r1
 802a0e6:	2001      	movs	r0, #1
 802a0e8:	e7a5      	b.n	802a036 <_vfiprintf_r+0x11a>
 802a0ea:	2300      	movs	r3, #0
 802a0ec:	3401      	adds	r4, #1
 802a0ee:	9305      	str	r3, [sp, #20]
 802a0f0:	4619      	mov	r1, r3
 802a0f2:	f04f 0c0a 	mov.w	ip, #10
 802a0f6:	4620      	mov	r0, r4
 802a0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a0fc:	3a30      	subs	r2, #48	; 0x30
 802a0fe:	2a09      	cmp	r2, #9
 802a100:	d903      	bls.n	802a10a <_vfiprintf_r+0x1ee>
 802a102:	2b00      	cmp	r3, #0
 802a104:	d0c5      	beq.n	802a092 <_vfiprintf_r+0x176>
 802a106:	9105      	str	r1, [sp, #20]
 802a108:	e7c3      	b.n	802a092 <_vfiprintf_r+0x176>
 802a10a:	fb0c 2101 	mla	r1, ip, r1, r2
 802a10e:	4604      	mov	r4, r0
 802a110:	2301      	movs	r3, #1
 802a112:	e7f0      	b.n	802a0f6 <_vfiprintf_r+0x1da>
 802a114:	ab03      	add	r3, sp, #12
 802a116:	9300      	str	r3, [sp, #0]
 802a118:	462a      	mov	r2, r5
 802a11a:	4b16      	ldr	r3, [pc, #88]	; (802a174 <_vfiprintf_r+0x258>)
 802a11c:	a904      	add	r1, sp, #16
 802a11e:	4630      	mov	r0, r6
 802a120:	f7fb ff66 	bl	8025ff0 <_printf_float>
 802a124:	4607      	mov	r7, r0
 802a126:	1c78      	adds	r0, r7, #1
 802a128:	d1d6      	bne.n	802a0d8 <_vfiprintf_r+0x1bc>
 802a12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a12c:	07d9      	lsls	r1, r3, #31
 802a12e:	d405      	bmi.n	802a13c <_vfiprintf_r+0x220>
 802a130:	89ab      	ldrh	r3, [r5, #12]
 802a132:	059a      	lsls	r2, r3, #22
 802a134:	d402      	bmi.n	802a13c <_vfiprintf_r+0x220>
 802a136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a138:	f7fb fb24 	bl	8025784 <__retarget_lock_release_recursive>
 802a13c:	89ab      	ldrh	r3, [r5, #12]
 802a13e:	065b      	lsls	r3, r3, #25
 802a140:	f53f af12 	bmi.w	8029f68 <_vfiprintf_r+0x4c>
 802a144:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a146:	e711      	b.n	8029f6c <_vfiprintf_r+0x50>
 802a148:	ab03      	add	r3, sp, #12
 802a14a:	9300      	str	r3, [sp, #0]
 802a14c:	462a      	mov	r2, r5
 802a14e:	4b09      	ldr	r3, [pc, #36]	; (802a174 <_vfiprintf_r+0x258>)
 802a150:	a904      	add	r1, sp, #16
 802a152:	4630      	mov	r0, r6
 802a154:	f7fc f9d8 	bl	8026508 <_printf_i>
 802a158:	e7e4      	b.n	802a124 <_vfiprintf_r+0x208>
 802a15a:	bf00      	nop
 802a15c:	08047650 	.word	0x08047650
 802a160:	08047670 	.word	0x08047670
 802a164:	08047630 	.word	0x08047630
 802a168:	08047ddc 	.word	0x08047ddc
 802a16c:	08047de6 	.word	0x08047de6
 802a170:	08025ff1 	.word	0x08025ff1
 802a174:	08029ef7 	.word	0x08029ef7
 802a178:	08047de2 	.word	0x08047de2

0802a17c <_scanf_chars>:
 802a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a180:	4615      	mov	r5, r2
 802a182:	688a      	ldr	r2, [r1, #8]
 802a184:	4680      	mov	r8, r0
 802a186:	460c      	mov	r4, r1
 802a188:	b932      	cbnz	r2, 802a198 <_scanf_chars+0x1c>
 802a18a:	698a      	ldr	r2, [r1, #24]
 802a18c:	2a00      	cmp	r2, #0
 802a18e:	bf0c      	ite	eq
 802a190:	2201      	moveq	r2, #1
 802a192:	f04f 32ff 	movne.w	r2, #4294967295
 802a196:	608a      	str	r2, [r1, #8]
 802a198:	6822      	ldr	r2, [r4, #0]
 802a19a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802a22c <_scanf_chars+0xb0>
 802a19e:	06d1      	lsls	r1, r2, #27
 802a1a0:	bf5f      	itttt	pl
 802a1a2:	681a      	ldrpl	r2, [r3, #0]
 802a1a4:	1d11      	addpl	r1, r2, #4
 802a1a6:	6019      	strpl	r1, [r3, #0]
 802a1a8:	6816      	ldrpl	r6, [r2, #0]
 802a1aa:	2700      	movs	r7, #0
 802a1ac:	69a0      	ldr	r0, [r4, #24]
 802a1ae:	b188      	cbz	r0, 802a1d4 <_scanf_chars+0x58>
 802a1b0:	2801      	cmp	r0, #1
 802a1b2:	d107      	bne.n	802a1c4 <_scanf_chars+0x48>
 802a1b4:	682a      	ldr	r2, [r5, #0]
 802a1b6:	7811      	ldrb	r1, [r2, #0]
 802a1b8:	6962      	ldr	r2, [r4, #20]
 802a1ba:	5c52      	ldrb	r2, [r2, r1]
 802a1bc:	b952      	cbnz	r2, 802a1d4 <_scanf_chars+0x58>
 802a1be:	2f00      	cmp	r7, #0
 802a1c0:	d031      	beq.n	802a226 <_scanf_chars+0xaa>
 802a1c2:	e022      	b.n	802a20a <_scanf_chars+0x8e>
 802a1c4:	2802      	cmp	r0, #2
 802a1c6:	d120      	bne.n	802a20a <_scanf_chars+0x8e>
 802a1c8:	682b      	ldr	r3, [r5, #0]
 802a1ca:	781b      	ldrb	r3, [r3, #0]
 802a1cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 802a1d0:	071b      	lsls	r3, r3, #28
 802a1d2:	d41a      	bmi.n	802a20a <_scanf_chars+0x8e>
 802a1d4:	6823      	ldr	r3, [r4, #0]
 802a1d6:	06da      	lsls	r2, r3, #27
 802a1d8:	bf5e      	ittt	pl
 802a1da:	682b      	ldrpl	r3, [r5, #0]
 802a1dc:	781b      	ldrbpl	r3, [r3, #0]
 802a1de:	f806 3b01 	strbpl.w	r3, [r6], #1
 802a1e2:	682a      	ldr	r2, [r5, #0]
 802a1e4:	686b      	ldr	r3, [r5, #4]
 802a1e6:	3201      	adds	r2, #1
 802a1e8:	602a      	str	r2, [r5, #0]
 802a1ea:	68a2      	ldr	r2, [r4, #8]
 802a1ec:	3b01      	subs	r3, #1
 802a1ee:	3a01      	subs	r2, #1
 802a1f0:	606b      	str	r3, [r5, #4]
 802a1f2:	3701      	adds	r7, #1
 802a1f4:	60a2      	str	r2, [r4, #8]
 802a1f6:	b142      	cbz	r2, 802a20a <_scanf_chars+0x8e>
 802a1f8:	2b00      	cmp	r3, #0
 802a1fa:	dcd7      	bgt.n	802a1ac <_scanf_chars+0x30>
 802a1fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a200:	4629      	mov	r1, r5
 802a202:	4640      	mov	r0, r8
 802a204:	4798      	blx	r3
 802a206:	2800      	cmp	r0, #0
 802a208:	d0d0      	beq.n	802a1ac <_scanf_chars+0x30>
 802a20a:	6823      	ldr	r3, [r4, #0]
 802a20c:	f013 0310 	ands.w	r3, r3, #16
 802a210:	d105      	bne.n	802a21e <_scanf_chars+0xa2>
 802a212:	68e2      	ldr	r2, [r4, #12]
 802a214:	3201      	adds	r2, #1
 802a216:	60e2      	str	r2, [r4, #12]
 802a218:	69a2      	ldr	r2, [r4, #24]
 802a21a:	b102      	cbz	r2, 802a21e <_scanf_chars+0xa2>
 802a21c:	7033      	strb	r3, [r6, #0]
 802a21e:	6923      	ldr	r3, [r4, #16]
 802a220:	443b      	add	r3, r7
 802a222:	6123      	str	r3, [r4, #16]
 802a224:	2000      	movs	r0, #0
 802a226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a22a:	bf00      	nop
 802a22c:	0804752d 	.word	0x0804752d

0802a230 <_scanf_i>:
 802a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a234:	4698      	mov	r8, r3
 802a236:	4b76      	ldr	r3, [pc, #472]	; (802a410 <_scanf_i+0x1e0>)
 802a238:	460c      	mov	r4, r1
 802a23a:	4682      	mov	sl, r0
 802a23c:	4616      	mov	r6, r2
 802a23e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a242:	b087      	sub	sp, #28
 802a244:	ab03      	add	r3, sp, #12
 802a246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802a24a:	4b72      	ldr	r3, [pc, #456]	; (802a414 <_scanf_i+0x1e4>)
 802a24c:	69a1      	ldr	r1, [r4, #24]
 802a24e:	4a72      	ldr	r2, [pc, #456]	; (802a418 <_scanf_i+0x1e8>)
 802a250:	2903      	cmp	r1, #3
 802a252:	bf18      	it	ne
 802a254:	461a      	movne	r2, r3
 802a256:	68a3      	ldr	r3, [r4, #8]
 802a258:	9201      	str	r2, [sp, #4]
 802a25a:	1e5a      	subs	r2, r3, #1
 802a25c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802a260:	bf88      	it	hi
 802a262:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802a266:	4627      	mov	r7, r4
 802a268:	bf82      	ittt	hi
 802a26a:	eb03 0905 	addhi.w	r9, r3, r5
 802a26e:	f240 135d 	movwhi	r3, #349	; 0x15d
 802a272:	60a3      	strhi	r3, [r4, #8]
 802a274:	f857 3b1c 	ldr.w	r3, [r7], #28
 802a278:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802a27c:	bf98      	it	ls
 802a27e:	f04f 0900 	movls.w	r9, #0
 802a282:	6023      	str	r3, [r4, #0]
 802a284:	463d      	mov	r5, r7
 802a286:	f04f 0b00 	mov.w	fp, #0
 802a28a:	6831      	ldr	r1, [r6, #0]
 802a28c:	ab03      	add	r3, sp, #12
 802a28e:	7809      	ldrb	r1, [r1, #0]
 802a290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802a294:	2202      	movs	r2, #2
 802a296:	f7d5 ffeb 	bl	8000270 <memchr>
 802a29a:	b328      	cbz	r0, 802a2e8 <_scanf_i+0xb8>
 802a29c:	f1bb 0f01 	cmp.w	fp, #1
 802a2a0:	d159      	bne.n	802a356 <_scanf_i+0x126>
 802a2a2:	6862      	ldr	r2, [r4, #4]
 802a2a4:	b92a      	cbnz	r2, 802a2b2 <_scanf_i+0x82>
 802a2a6:	6822      	ldr	r2, [r4, #0]
 802a2a8:	2308      	movs	r3, #8
 802a2aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802a2ae:	6063      	str	r3, [r4, #4]
 802a2b0:	6022      	str	r2, [r4, #0]
 802a2b2:	6822      	ldr	r2, [r4, #0]
 802a2b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802a2b8:	6022      	str	r2, [r4, #0]
 802a2ba:	68a2      	ldr	r2, [r4, #8]
 802a2bc:	1e51      	subs	r1, r2, #1
 802a2be:	60a1      	str	r1, [r4, #8]
 802a2c0:	b192      	cbz	r2, 802a2e8 <_scanf_i+0xb8>
 802a2c2:	6832      	ldr	r2, [r6, #0]
 802a2c4:	1c51      	adds	r1, r2, #1
 802a2c6:	6031      	str	r1, [r6, #0]
 802a2c8:	7812      	ldrb	r2, [r2, #0]
 802a2ca:	f805 2b01 	strb.w	r2, [r5], #1
 802a2ce:	6872      	ldr	r2, [r6, #4]
 802a2d0:	3a01      	subs	r2, #1
 802a2d2:	2a00      	cmp	r2, #0
 802a2d4:	6072      	str	r2, [r6, #4]
 802a2d6:	dc07      	bgt.n	802a2e8 <_scanf_i+0xb8>
 802a2d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802a2dc:	4631      	mov	r1, r6
 802a2de:	4650      	mov	r0, sl
 802a2e0:	4790      	blx	r2
 802a2e2:	2800      	cmp	r0, #0
 802a2e4:	f040 8085 	bne.w	802a3f2 <_scanf_i+0x1c2>
 802a2e8:	f10b 0b01 	add.w	fp, fp, #1
 802a2ec:	f1bb 0f03 	cmp.w	fp, #3
 802a2f0:	d1cb      	bne.n	802a28a <_scanf_i+0x5a>
 802a2f2:	6863      	ldr	r3, [r4, #4]
 802a2f4:	b90b      	cbnz	r3, 802a2fa <_scanf_i+0xca>
 802a2f6:	230a      	movs	r3, #10
 802a2f8:	6063      	str	r3, [r4, #4]
 802a2fa:	6863      	ldr	r3, [r4, #4]
 802a2fc:	4947      	ldr	r1, [pc, #284]	; (802a41c <_scanf_i+0x1ec>)
 802a2fe:	6960      	ldr	r0, [r4, #20]
 802a300:	1ac9      	subs	r1, r1, r3
 802a302:	f000 f911 	bl	802a528 <__sccl>
 802a306:	f04f 0b00 	mov.w	fp, #0
 802a30a:	68a3      	ldr	r3, [r4, #8]
 802a30c:	6822      	ldr	r2, [r4, #0]
 802a30e:	2b00      	cmp	r3, #0
 802a310:	d03d      	beq.n	802a38e <_scanf_i+0x15e>
 802a312:	6831      	ldr	r1, [r6, #0]
 802a314:	6960      	ldr	r0, [r4, #20]
 802a316:	f891 c000 	ldrb.w	ip, [r1]
 802a31a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802a31e:	2800      	cmp	r0, #0
 802a320:	d035      	beq.n	802a38e <_scanf_i+0x15e>
 802a322:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802a326:	d124      	bne.n	802a372 <_scanf_i+0x142>
 802a328:	0510      	lsls	r0, r2, #20
 802a32a:	d522      	bpl.n	802a372 <_scanf_i+0x142>
 802a32c:	f10b 0b01 	add.w	fp, fp, #1
 802a330:	f1b9 0f00 	cmp.w	r9, #0
 802a334:	d003      	beq.n	802a33e <_scanf_i+0x10e>
 802a336:	3301      	adds	r3, #1
 802a338:	f109 39ff 	add.w	r9, r9, #4294967295
 802a33c:	60a3      	str	r3, [r4, #8]
 802a33e:	6873      	ldr	r3, [r6, #4]
 802a340:	3b01      	subs	r3, #1
 802a342:	2b00      	cmp	r3, #0
 802a344:	6073      	str	r3, [r6, #4]
 802a346:	dd1b      	ble.n	802a380 <_scanf_i+0x150>
 802a348:	6833      	ldr	r3, [r6, #0]
 802a34a:	3301      	adds	r3, #1
 802a34c:	6033      	str	r3, [r6, #0]
 802a34e:	68a3      	ldr	r3, [r4, #8]
 802a350:	3b01      	subs	r3, #1
 802a352:	60a3      	str	r3, [r4, #8]
 802a354:	e7d9      	b.n	802a30a <_scanf_i+0xda>
 802a356:	f1bb 0f02 	cmp.w	fp, #2
 802a35a:	d1ae      	bne.n	802a2ba <_scanf_i+0x8a>
 802a35c:	6822      	ldr	r2, [r4, #0]
 802a35e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802a362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802a366:	d1bf      	bne.n	802a2e8 <_scanf_i+0xb8>
 802a368:	2310      	movs	r3, #16
 802a36a:	6063      	str	r3, [r4, #4]
 802a36c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a370:	e7a2      	b.n	802a2b8 <_scanf_i+0x88>
 802a372:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802a376:	6022      	str	r2, [r4, #0]
 802a378:	780b      	ldrb	r3, [r1, #0]
 802a37a:	f805 3b01 	strb.w	r3, [r5], #1
 802a37e:	e7de      	b.n	802a33e <_scanf_i+0x10e>
 802a380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a384:	4631      	mov	r1, r6
 802a386:	4650      	mov	r0, sl
 802a388:	4798      	blx	r3
 802a38a:	2800      	cmp	r0, #0
 802a38c:	d0df      	beq.n	802a34e <_scanf_i+0x11e>
 802a38e:	6823      	ldr	r3, [r4, #0]
 802a390:	05db      	lsls	r3, r3, #23
 802a392:	d50d      	bpl.n	802a3b0 <_scanf_i+0x180>
 802a394:	42bd      	cmp	r5, r7
 802a396:	d909      	bls.n	802a3ac <_scanf_i+0x17c>
 802a398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802a39c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802a3a0:	4632      	mov	r2, r6
 802a3a2:	4650      	mov	r0, sl
 802a3a4:	4798      	blx	r3
 802a3a6:	f105 39ff 	add.w	r9, r5, #4294967295
 802a3aa:	464d      	mov	r5, r9
 802a3ac:	42bd      	cmp	r5, r7
 802a3ae:	d02d      	beq.n	802a40c <_scanf_i+0x1dc>
 802a3b0:	6822      	ldr	r2, [r4, #0]
 802a3b2:	f012 0210 	ands.w	r2, r2, #16
 802a3b6:	d113      	bne.n	802a3e0 <_scanf_i+0x1b0>
 802a3b8:	702a      	strb	r2, [r5, #0]
 802a3ba:	6863      	ldr	r3, [r4, #4]
 802a3bc:	9e01      	ldr	r6, [sp, #4]
 802a3be:	4639      	mov	r1, r7
 802a3c0:	4650      	mov	r0, sl
 802a3c2:	47b0      	blx	r6
 802a3c4:	6821      	ldr	r1, [r4, #0]
 802a3c6:	f8d8 3000 	ldr.w	r3, [r8]
 802a3ca:	f011 0f20 	tst.w	r1, #32
 802a3ce:	d013      	beq.n	802a3f8 <_scanf_i+0x1c8>
 802a3d0:	1d1a      	adds	r2, r3, #4
 802a3d2:	f8c8 2000 	str.w	r2, [r8]
 802a3d6:	681b      	ldr	r3, [r3, #0]
 802a3d8:	6018      	str	r0, [r3, #0]
 802a3da:	68e3      	ldr	r3, [r4, #12]
 802a3dc:	3301      	adds	r3, #1
 802a3de:	60e3      	str	r3, [r4, #12]
 802a3e0:	1bed      	subs	r5, r5, r7
 802a3e2:	44ab      	add	fp, r5
 802a3e4:	6925      	ldr	r5, [r4, #16]
 802a3e6:	445d      	add	r5, fp
 802a3e8:	6125      	str	r5, [r4, #16]
 802a3ea:	2000      	movs	r0, #0
 802a3ec:	b007      	add	sp, #28
 802a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3f2:	f04f 0b00 	mov.w	fp, #0
 802a3f6:	e7ca      	b.n	802a38e <_scanf_i+0x15e>
 802a3f8:	1d1a      	adds	r2, r3, #4
 802a3fa:	f8c8 2000 	str.w	r2, [r8]
 802a3fe:	681b      	ldr	r3, [r3, #0]
 802a400:	f011 0f01 	tst.w	r1, #1
 802a404:	bf14      	ite	ne
 802a406:	8018      	strhne	r0, [r3, #0]
 802a408:	6018      	streq	r0, [r3, #0]
 802a40a:	e7e6      	b.n	802a3da <_scanf_i+0x1aa>
 802a40c:	2001      	movs	r0, #1
 802a40e:	e7ed      	b.n	802a3ec <_scanf_i+0x1bc>
 802a410:	0802a9e8 	.word	0x0802a9e8
 802a414:	08027941 	.word	0x08027941
 802a418:	08027845 	.word	0x08027845
 802a41c:	08047e06 	.word	0x08047e06

0802a420 <_putc_r>:
 802a420:	b570      	push	{r4, r5, r6, lr}
 802a422:	460d      	mov	r5, r1
 802a424:	4614      	mov	r4, r2
 802a426:	4606      	mov	r6, r0
 802a428:	b118      	cbz	r0, 802a432 <_putc_r+0x12>
 802a42a:	6983      	ldr	r3, [r0, #24]
 802a42c:	b90b      	cbnz	r3, 802a432 <_putc_r+0x12>
 802a42e:	f7fa ffd1 	bl	80253d4 <__sinit>
 802a432:	4b1c      	ldr	r3, [pc, #112]	; (802a4a4 <_putc_r+0x84>)
 802a434:	429c      	cmp	r4, r3
 802a436:	d124      	bne.n	802a482 <_putc_r+0x62>
 802a438:	6874      	ldr	r4, [r6, #4]
 802a43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a43c:	07d8      	lsls	r0, r3, #31
 802a43e:	d405      	bmi.n	802a44c <_putc_r+0x2c>
 802a440:	89a3      	ldrh	r3, [r4, #12]
 802a442:	0599      	lsls	r1, r3, #22
 802a444:	d402      	bmi.n	802a44c <_putc_r+0x2c>
 802a446:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a448:	f7fb f99a 	bl	8025780 <__retarget_lock_acquire_recursive>
 802a44c:	68a3      	ldr	r3, [r4, #8]
 802a44e:	3b01      	subs	r3, #1
 802a450:	2b00      	cmp	r3, #0
 802a452:	60a3      	str	r3, [r4, #8]
 802a454:	da05      	bge.n	802a462 <_putc_r+0x42>
 802a456:	69a2      	ldr	r2, [r4, #24]
 802a458:	4293      	cmp	r3, r2
 802a45a:	db1c      	blt.n	802a496 <_putc_r+0x76>
 802a45c:	b2eb      	uxtb	r3, r5
 802a45e:	2b0a      	cmp	r3, #10
 802a460:	d019      	beq.n	802a496 <_putc_r+0x76>
 802a462:	6823      	ldr	r3, [r4, #0]
 802a464:	1c5a      	adds	r2, r3, #1
 802a466:	6022      	str	r2, [r4, #0]
 802a468:	701d      	strb	r5, [r3, #0]
 802a46a:	b2ed      	uxtb	r5, r5
 802a46c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a46e:	07da      	lsls	r2, r3, #31
 802a470:	d405      	bmi.n	802a47e <_putc_r+0x5e>
 802a472:	89a3      	ldrh	r3, [r4, #12]
 802a474:	059b      	lsls	r3, r3, #22
 802a476:	d402      	bmi.n	802a47e <_putc_r+0x5e>
 802a478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a47a:	f7fb f983 	bl	8025784 <__retarget_lock_release_recursive>
 802a47e:	4628      	mov	r0, r5
 802a480:	bd70      	pop	{r4, r5, r6, pc}
 802a482:	4b09      	ldr	r3, [pc, #36]	; (802a4a8 <_putc_r+0x88>)
 802a484:	429c      	cmp	r4, r3
 802a486:	d101      	bne.n	802a48c <_putc_r+0x6c>
 802a488:	68b4      	ldr	r4, [r6, #8]
 802a48a:	e7d6      	b.n	802a43a <_putc_r+0x1a>
 802a48c:	4b07      	ldr	r3, [pc, #28]	; (802a4ac <_putc_r+0x8c>)
 802a48e:	429c      	cmp	r4, r3
 802a490:	bf08      	it	eq
 802a492:	68f4      	ldreq	r4, [r6, #12]
 802a494:	e7d1      	b.n	802a43a <_putc_r+0x1a>
 802a496:	4629      	mov	r1, r5
 802a498:	4622      	mov	r2, r4
 802a49a:	4630      	mov	r0, r6
 802a49c:	f7fd fc98 	bl	8027dd0 <__swbuf_r>
 802a4a0:	4605      	mov	r5, r0
 802a4a2:	e7e3      	b.n	802a46c <_putc_r+0x4c>
 802a4a4:	08047650 	.word	0x08047650
 802a4a8:	08047670 	.word	0x08047670
 802a4ac:	08047630 	.word	0x08047630

0802a4b0 <_read_r>:
 802a4b0:	b538      	push	{r3, r4, r5, lr}
 802a4b2:	4d07      	ldr	r5, [pc, #28]	; (802a4d0 <_read_r+0x20>)
 802a4b4:	4604      	mov	r4, r0
 802a4b6:	4608      	mov	r0, r1
 802a4b8:	4611      	mov	r1, r2
 802a4ba:	2200      	movs	r2, #0
 802a4bc:	602a      	str	r2, [r5, #0]
 802a4be:	461a      	mov	r2, r3
 802a4c0:	f7dd ffca 	bl	8008458 <_read>
 802a4c4:	1c43      	adds	r3, r0, #1
 802a4c6:	d102      	bne.n	802a4ce <_read_r+0x1e>
 802a4c8:	682b      	ldr	r3, [r5, #0]
 802a4ca:	b103      	cbz	r3, 802a4ce <_read_r+0x1e>
 802a4cc:	6023      	str	r3, [r4, #0]
 802a4ce:	bd38      	pop	{r3, r4, r5, pc}
 802a4d0:	200300e4 	.word	0x200300e4

0802a4d4 <__fpclassifyd>:
 802a4d4:	ec51 0b10 	vmov	r0, r1, d0
 802a4d8:	b510      	push	{r4, lr}
 802a4da:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 802a4de:	460b      	mov	r3, r1
 802a4e0:	d019      	beq.n	802a516 <__fpclassifyd+0x42>
 802a4e2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802a4e6:	490e      	ldr	r1, [pc, #56]	; (802a520 <__fpclassifyd+0x4c>)
 802a4e8:	428a      	cmp	r2, r1
 802a4ea:	d90e      	bls.n	802a50a <__fpclassifyd+0x36>
 802a4ec:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 802a4f0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802a4f4:	428a      	cmp	r2, r1
 802a4f6:	d908      	bls.n	802a50a <__fpclassifyd+0x36>
 802a4f8:	4a0a      	ldr	r2, [pc, #40]	; (802a524 <__fpclassifyd+0x50>)
 802a4fa:	4213      	tst	r3, r2
 802a4fc:	d007      	beq.n	802a50e <__fpclassifyd+0x3a>
 802a4fe:	4294      	cmp	r4, r2
 802a500:	d107      	bne.n	802a512 <__fpclassifyd+0x3e>
 802a502:	fab0 f080 	clz	r0, r0
 802a506:	0940      	lsrs	r0, r0, #5
 802a508:	bd10      	pop	{r4, pc}
 802a50a:	2004      	movs	r0, #4
 802a50c:	e7fc      	b.n	802a508 <__fpclassifyd+0x34>
 802a50e:	2003      	movs	r0, #3
 802a510:	e7fa      	b.n	802a508 <__fpclassifyd+0x34>
 802a512:	2000      	movs	r0, #0
 802a514:	e7f8      	b.n	802a508 <__fpclassifyd+0x34>
 802a516:	2800      	cmp	r0, #0
 802a518:	d1ee      	bne.n	802a4f8 <__fpclassifyd+0x24>
 802a51a:	2002      	movs	r0, #2
 802a51c:	e7f4      	b.n	802a508 <__fpclassifyd+0x34>
 802a51e:	bf00      	nop
 802a520:	7fdfffff 	.word	0x7fdfffff
 802a524:	7ff00000 	.word	0x7ff00000

0802a528 <__sccl>:
 802a528:	b570      	push	{r4, r5, r6, lr}
 802a52a:	780b      	ldrb	r3, [r1, #0]
 802a52c:	4604      	mov	r4, r0
 802a52e:	2b5e      	cmp	r3, #94	; 0x5e
 802a530:	bf0b      	itete	eq
 802a532:	784b      	ldrbeq	r3, [r1, #1]
 802a534:	1c48      	addne	r0, r1, #1
 802a536:	1c88      	addeq	r0, r1, #2
 802a538:	2200      	movne	r2, #0
 802a53a:	bf08      	it	eq
 802a53c:	2201      	moveq	r2, #1
 802a53e:	1e61      	subs	r1, r4, #1
 802a540:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a544:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a548:	42a9      	cmp	r1, r5
 802a54a:	d1fb      	bne.n	802a544 <__sccl+0x1c>
 802a54c:	b90b      	cbnz	r3, 802a552 <__sccl+0x2a>
 802a54e:	3801      	subs	r0, #1
 802a550:	bd70      	pop	{r4, r5, r6, pc}
 802a552:	f082 0201 	eor.w	r2, r2, #1
 802a556:	54e2      	strb	r2, [r4, r3]
 802a558:	4605      	mov	r5, r0
 802a55a:	4628      	mov	r0, r5
 802a55c:	f810 1b01 	ldrb.w	r1, [r0], #1
 802a560:	292d      	cmp	r1, #45	; 0x2d
 802a562:	d006      	beq.n	802a572 <__sccl+0x4a>
 802a564:	295d      	cmp	r1, #93	; 0x5d
 802a566:	d0f3      	beq.n	802a550 <__sccl+0x28>
 802a568:	b909      	cbnz	r1, 802a56e <__sccl+0x46>
 802a56a:	4628      	mov	r0, r5
 802a56c:	e7f0      	b.n	802a550 <__sccl+0x28>
 802a56e:	460b      	mov	r3, r1
 802a570:	e7f1      	b.n	802a556 <__sccl+0x2e>
 802a572:	786e      	ldrb	r6, [r5, #1]
 802a574:	2e5d      	cmp	r6, #93	; 0x5d
 802a576:	d0fa      	beq.n	802a56e <__sccl+0x46>
 802a578:	42b3      	cmp	r3, r6
 802a57a:	dcf8      	bgt.n	802a56e <__sccl+0x46>
 802a57c:	3502      	adds	r5, #2
 802a57e:	4619      	mov	r1, r3
 802a580:	3101      	adds	r1, #1
 802a582:	428e      	cmp	r6, r1
 802a584:	5462      	strb	r2, [r4, r1]
 802a586:	dcfb      	bgt.n	802a580 <__sccl+0x58>
 802a588:	1af1      	subs	r1, r6, r3
 802a58a:	3901      	subs	r1, #1
 802a58c:	1c58      	adds	r0, r3, #1
 802a58e:	42b3      	cmp	r3, r6
 802a590:	bfa8      	it	ge
 802a592:	2100      	movge	r1, #0
 802a594:	1843      	adds	r3, r0, r1
 802a596:	e7e0      	b.n	802a55a <__sccl+0x32>

0802a598 <__submore>:
 802a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a59c:	460c      	mov	r4, r1
 802a59e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a5a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a5a4:	4299      	cmp	r1, r3
 802a5a6:	d11d      	bne.n	802a5e4 <__submore+0x4c>
 802a5a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a5ac:	f7fb fc1a 	bl	8025de4 <_malloc_r>
 802a5b0:	b918      	cbnz	r0, 802a5ba <__submore+0x22>
 802a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 802a5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a5be:	63a3      	str	r3, [r4, #56]	; 0x38
 802a5c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a5c4:	6360      	str	r0, [r4, #52]	; 0x34
 802a5c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a5ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a5ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a5d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a5d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a5da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a5de:	6020      	str	r0, [r4, #0]
 802a5e0:	2000      	movs	r0, #0
 802a5e2:	e7e8      	b.n	802a5b6 <__submore+0x1e>
 802a5e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a5e6:	0077      	lsls	r7, r6, #1
 802a5e8:	463a      	mov	r2, r7
 802a5ea:	f000 f857 	bl	802a69c <_realloc_r>
 802a5ee:	4605      	mov	r5, r0
 802a5f0:	2800      	cmp	r0, #0
 802a5f2:	d0de      	beq.n	802a5b2 <__submore+0x1a>
 802a5f4:	eb00 0806 	add.w	r8, r0, r6
 802a5f8:	4601      	mov	r1, r0
 802a5fa:	4632      	mov	r2, r6
 802a5fc:	4640      	mov	r0, r8
 802a5fe:	f7fb f8e3 	bl	80257c8 <memcpy>
 802a602:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a606:	f8c4 8000 	str.w	r8, [r4]
 802a60a:	e7e9      	b.n	802a5e0 <__submore+0x48>

0802a60c <abort>:
 802a60c:	b508      	push	{r3, lr}
 802a60e:	2006      	movs	r0, #6
 802a610:	f000 f89c 	bl	802a74c <raise>
 802a614:	2001      	movs	r0, #1
 802a616:	f7dd ff19 	bl	800844c <_exit>
 802a61a:	Address 0x000000000802a61a is out of bounds.


0802a61c <__env_lock>:
 802a61c:	4801      	ldr	r0, [pc, #4]	; (802a624 <__env_lock+0x8>)
 802a61e:	f7fb b8af 	b.w	8025780 <__retarget_lock_acquire_recursive>
 802a622:	bf00      	nop
 802a624:	200300d4 	.word	0x200300d4

0802a628 <__env_unlock>:
 802a628:	4801      	ldr	r0, [pc, #4]	; (802a630 <__env_unlock+0x8>)
 802a62a:	f7fb b8ab 	b.w	8025784 <__retarget_lock_release_recursive>
 802a62e:	bf00      	nop
 802a630:	200300d4 	.word	0x200300d4

0802a634 <_fstat_r>:
 802a634:	b538      	push	{r3, r4, r5, lr}
 802a636:	4d07      	ldr	r5, [pc, #28]	; (802a654 <_fstat_r+0x20>)
 802a638:	2300      	movs	r3, #0
 802a63a:	4604      	mov	r4, r0
 802a63c:	4608      	mov	r0, r1
 802a63e:	4611      	mov	r1, r2
 802a640:	602b      	str	r3, [r5, #0]
 802a642:	f7dd ff1b 	bl	800847c <_fstat>
 802a646:	1c43      	adds	r3, r0, #1
 802a648:	d102      	bne.n	802a650 <_fstat_r+0x1c>
 802a64a:	682b      	ldr	r3, [r5, #0]
 802a64c:	b103      	cbz	r3, 802a650 <_fstat_r+0x1c>
 802a64e:	6023      	str	r3, [r4, #0]
 802a650:	bd38      	pop	{r3, r4, r5, pc}
 802a652:	bf00      	nop
 802a654:	200300e4 	.word	0x200300e4

0802a658 <_isatty_r>:
 802a658:	b538      	push	{r3, r4, r5, lr}
 802a65a:	4d06      	ldr	r5, [pc, #24]	; (802a674 <_isatty_r+0x1c>)
 802a65c:	2300      	movs	r3, #0
 802a65e:	4604      	mov	r4, r0
 802a660:	4608      	mov	r0, r1
 802a662:	602b      	str	r3, [r5, #0]
 802a664:	f7dd ff10 	bl	8008488 <_isatty>
 802a668:	1c43      	adds	r3, r0, #1
 802a66a:	d102      	bne.n	802a672 <_isatty_r+0x1a>
 802a66c:	682b      	ldr	r3, [r5, #0]
 802a66e:	b103      	cbz	r3, 802a672 <_isatty_r+0x1a>
 802a670:	6023      	str	r3, [r4, #0]
 802a672:	bd38      	pop	{r3, r4, r5, pc}
 802a674:	200300e4 	.word	0x200300e4

0802a678 <__ascii_mbtowc>:
 802a678:	b082      	sub	sp, #8
 802a67a:	b901      	cbnz	r1, 802a67e <__ascii_mbtowc+0x6>
 802a67c:	a901      	add	r1, sp, #4
 802a67e:	b142      	cbz	r2, 802a692 <__ascii_mbtowc+0x1a>
 802a680:	b14b      	cbz	r3, 802a696 <__ascii_mbtowc+0x1e>
 802a682:	7813      	ldrb	r3, [r2, #0]
 802a684:	600b      	str	r3, [r1, #0]
 802a686:	7812      	ldrb	r2, [r2, #0]
 802a688:	1e10      	subs	r0, r2, #0
 802a68a:	bf18      	it	ne
 802a68c:	2001      	movne	r0, #1
 802a68e:	b002      	add	sp, #8
 802a690:	4770      	bx	lr
 802a692:	4610      	mov	r0, r2
 802a694:	e7fb      	b.n	802a68e <__ascii_mbtowc+0x16>
 802a696:	f06f 0001 	mvn.w	r0, #1
 802a69a:	e7f8      	b.n	802a68e <__ascii_mbtowc+0x16>

0802a69c <_realloc_r>:
 802a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6a0:	4680      	mov	r8, r0
 802a6a2:	4614      	mov	r4, r2
 802a6a4:	460e      	mov	r6, r1
 802a6a6:	b921      	cbnz	r1, 802a6b2 <_realloc_r+0x16>
 802a6a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a6ac:	4611      	mov	r1, r2
 802a6ae:	f7fb bb99 	b.w	8025de4 <_malloc_r>
 802a6b2:	b92a      	cbnz	r2, 802a6c0 <_realloc_r+0x24>
 802a6b4:	f7fb fb2a 	bl	8025d0c <_free_r>
 802a6b8:	4625      	mov	r5, r4
 802a6ba:	4628      	mov	r0, r5
 802a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6c0:	f000 f86d 	bl	802a79e <_malloc_usable_size_r>
 802a6c4:	4284      	cmp	r4, r0
 802a6c6:	4607      	mov	r7, r0
 802a6c8:	d802      	bhi.n	802a6d0 <_realloc_r+0x34>
 802a6ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802a6ce:	d812      	bhi.n	802a6f6 <_realloc_r+0x5a>
 802a6d0:	4621      	mov	r1, r4
 802a6d2:	4640      	mov	r0, r8
 802a6d4:	f7fb fb86 	bl	8025de4 <_malloc_r>
 802a6d8:	4605      	mov	r5, r0
 802a6da:	2800      	cmp	r0, #0
 802a6dc:	d0ed      	beq.n	802a6ba <_realloc_r+0x1e>
 802a6de:	42bc      	cmp	r4, r7
 802a6e0:	4622      	mov	r2, r4
 802a6e2:	4631      	mov	r1, r6
 802a6e4:	bf28      	it	cs
 802a6e6:	463a      	movcs	r2, r7
 802a6e8:	f7fb f86e 	bl	80257c8 <memcpy>
 802a6ec:	4631      	mov	r1, r6
 802a6ee:	4640      	mov	r0, r8
 802a6f0:	f7fb fb0c 	bl	8025d0c <_free_r>
 802a6f4:	e7e1      	b.n	802a6ba <_realloc_r+0x1e>
 802a6f6:	4635      	mov	r5, r6
 802a6f8:	e7df      	b.n	802a6ba <_realloc_r+0x1e>

0802a6fa <_raise_r>:
 802a6fa:	291f      	cmp	r1, #31
 802a6fc:	b538      	push	{r3, r4, r5, lr}
 802a6fe:	4604      	mov	r4, r0
 802a700:	460d      	mov	r5, r1
 802a702:	d904      	bls.n	802a70e <_raise_r+0x14>
 802a704:	2316      	movs	r3, #22
 802a706:	6003      	str	r3, [r0, #0]
 802a708:	f04f 30ff 	mov.w	r0, #4294967295
 802a70c:	bd38      	pop	{r3, r4, r5, pc}
 802a70e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a710:	b112      	cbz	r2, 802a718 <_raise_r+0x1e>
 802a712:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a716:	b94b      	cbnz	r3, 802a72c <_raise_r+0x32>
 802a718:	4620      	mov	r0, r4
 802a71a:	f000 f831 	bl	802a780 <_getpid_r>
 802a71e:	462a      	mov	r2, r5
 802a720:	4601      	mov	r1, r0
 802a722:	4620      	mov	r0, r4
 802a724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a728:	f000 b818 	b.w	802a75c <_kill_r>
 802a72c:	2b01      	cmp	r3, #1
 802a72e:	d00a      	beq.n	802a746 <_raise_r+0x4c>
 802a730:	1c59      	adds	r1, r3, #1
 802a732:	d103      	bne.n	802a73c <_raise_r+0x42>
 802a734:	2316      	movs	r3, #22
 802a736:	6003      	str	r3, [r0, #0]
 802a738:	2001      	movs	r0, #1
 802a73a:	e7e7      	b.n	802a70c <_raise_r+0x12>
 802a73c:	2400      	movs	r4, #0
 802a73e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a742:	4628      	mov	r0, r5
 802a744:	4798      	blx	r3
 802a746:	2000      	movs	r0, #0
 802a748:	e7e0      	b.n	802a70c <_raise_r+0x12>
 802a74a:	Address 0x000000000802a74a is out of bounds.


0802a74c <raise>:
 802a74c:	4b02      	ldr	r3, [pc, #8]	; (802a758 <raise+0xc>)
 802a74e:	4601      	mov	r1, r0
 802a750:	6818      	ldr	r0, [r3, #0]
 802a752:	f7ff bfd2 	b.w	802a6fa <_raise_r>
 802a756:	bf00      	nop
 802a758:	200004a4 	.word	0x200004a4

0802a75c <_kill_r>:
 802a75c:	b538      	push	{r3, r4, r5, lr}
 802a75e:	4d07      	ldr	r5, [pc, #28]	; (802a77c <_kill_r+0x20>)
 802a760:	2300      	movs	r3, #0
 802a762:	4604      	mov	r4, r0
 802a764:	4608      	mov	r0, r1
 802a766:	4611      	mov	r1, r2
 802a768:	602b      	str	r3, [r5, #0]
 802a76a:	f7dd fe67 	bl	800843c <_kill>
 802a76e:	1c43      	adds	r3, r0, #1
 802a770:	d102      	bne.n	802a778 <_kill_r+0x1c>
 802a772:	682b      	ldr	r3, [r5, #0]
 802a774:	b103      	cbz	r3, 802a778 <_kill_r+0x1c>
 802a776:	6023      	str	r3, [r4, #0]
 802a778:	bd38      	pop	{r3, r4, r5, pc}
 802a77a:	bf00      	nop
 802a77c:	200300e4 	.word	0x200300e4

0802a780 <_getpid_r>:
 802a780:	f7dd be5a 	b.w	8008438 <_getpid>

0802a784 <__ascii_wctomb>:
 802a784:	b149      	cbz	r1, 802a79a <__ascii_wctomb+0x16>
 802a786:	2aff      	cmp	r2, #255	; 0xff
 802a788:	bf85      	ittet	hi
 802a78a:	238a      	movhi	r3, #138	; 0x8a
 802a78c:	6003      	strhi	r3, [r0, #0]
 802a78e:	700a      	strbls	r2, [r1, #0]
 802a790:	f04f 30ff 	movhi.w	r0, #4294967295
 802a794:	bf98      	it	ls
 802a796:	2001      	movls	r0, #1
 802a798:	4770      	bx	lr
 802a79a:	4608      	mov	r0, r1
 802a79c:	4770      	bx	lr

0802a79e <_malloc_usable_size_r>:
 802a79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a7a2:	1f18      	subs	r0, r3, #4
 802a7a4:	2b00      	cmp	r3, #0
 802a7a6:	bfbc      	itt	lt
 802a7a8:	580b      	ldrlt	r3, [r1, r0]
 802a7aa:	18c0      	addlt	r0, r0, r3
 802a7ac:	4770      	bx	lr
 802a7ae:	Address 0x000000000802a7ae is out of bounds.


0802a7b0 <_init>:
 802a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7b2:	bf00      	nop
 802a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7b6:	bc08      	pop	{r3}
 802a7b8:	469e      	mov	lr, r3
 802a7ba:	4770      	bx	lr

0802a7bc <_fini>:
 802a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7be:	bf00      	nop
 802a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7c2:	bc08      	pop	{r3}
 802a7c4:	469e      	mov	lr, r3
 802a7c6:	4770      	bx	lr
